
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015250  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001290  08015360  08015360  00016360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080165f0  080165f0  00018334  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080165f0  080165f0  000175f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080165f8  080165f8  00018334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080165f8  080165f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080165fc  080165fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000334  20000000  08016600  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001908  20000334  08016934  00018334  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c3c  08016934  00018c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00018334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019177  00000000  00000000  0001835d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc4  00000000  00000000  000314d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00035298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d81  00000000  00000000  00036428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c08d  00000000  00000000  000371a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad17  00000000  00000000  00053236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008caa4  00000000  00000000  0006df4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa9f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f8c  00000000  00000000  000faa34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001009c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000334 	.word	0x20000334
 800012c:	00000000 	.word	0x00000000
 8000130:	08015348 	.word	0x08015348

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000338 	.word	0x20000338
 800014c:	08015348 	.word	0x08015348

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff fead 	bl	80009d0 <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc23 	bl	80004ec <__aeabi_dmul>
 8000ca6:	f7ff fef9 	bl	8000a9c <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fba4 	bl	80003f8 <__aeabi_ui2d>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb4:	f7ff fc1a 	bl	80004ec <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fa5c 	bl	800017c <__aeabi_dsub>
 8000cc4:	f7ff feea 	bl	8000a9c <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ce0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d013      	beq.n	8000d14 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cf0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000cf4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00b      	beq.n	8000d14 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cfc:	e000      	b.n	8000d00 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cfe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d0a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fe85 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f8b9 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 f9cb 	bl	80010c8 <MX_GPIO_Init>
  MX_CAN_Init();
 8000d32:	f000 f8f5 	bl	8000f20 <MX_CAN_Init>
  MX_I2C1_Init();
 8000d36:	f000 f945 	bl	8000fc4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d3a:	f000 f971 	bl	8001020 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d3e:	f000 f999 	bl	8001074 <MX_USART2_UART_Init>
//    AT24Cxx_t pEeprom;
//  AT24Cxx_Init(&pEeprom, 0x50, &hi2c1);
//  char *text_program_1 = "Program test2,74hc560,20";
//  AT24Cxx_write_buffer_bloking(&pEeprom,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)text_program_1,strlen(text_program_1));

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8000d42:	2264      	movs	r2, #100	@ 0x64
 8000d44:	493d      	ldr	r1, [pc, #244]	@ (8000e3c <main+0x11c>)
 8000d46:	483e      	ldr	r0, [pc, #248]	@ (8000e40 <main+0x120>)
 8000d48:	f005 fc03 	bl	8006552 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
 8000d4c:	2250      	movs	r2, #80	@ 0x50
 8000d4e:	493d      	ldr	r1, [pc, #244]	@ (8000e44 <main+0x124>)
 8000d50:	483d      	ldr	r0, [pc, #244]	@ (8000e48 <main+0x128>)
 8000d52:	f005 fbfe 	bl	8006552 <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_CAN_Start(&hcan);
 8000d56:	483d      	ldr	r0, [pc, #244]	@ (8000e4c <main+0x12c>)
 8000d58:	f001 f8b6 	bl	8001ec8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_BUSOFF );
 8000d5c:	f240 4111 	movw	r1, #1041	@ 0x411
 8000d60:	483a      	ldr	r0, [pc, #232]	@ (8000e4c <main+0x12c>)
 8000d62:	f001 fb08 	bl	8002376 <HAL_CAN_ActivateNotification>

//    for (uint8_t i = 0; i < 5; i++) {
//  	printf("SWO Debug!!!\n");
//    }

  BSP_init();
 8000d66:	f00d fb25 	bl	800e3b4 <BSP_init>
//  1,
//  q_app_post,
//  ARRAY_ELEMENT(q_app_post),
//  (OS_event_t *)0 );

  eeprom_task_init(&hi2c1,EEPROM_ADDRESS);
 8000d6a:	2150      	movs	r1, #80	@ 0x50
 8000d6c:	4838      	ldr	r0, [pc, #224]	@ (8000e50 <main+0x130>)
 8000d6e:	f00c ff57 	bl	800dc20 <eeprom_task_init>
  static OS_event_t const *q_eeprom_event[10];
  OS_task_create( AO_task_eeprom,
 8000d72:	4b38      	ldr	r3, [pc, #224]	@ (8000e54 <main+0x134>)
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	2300      	movs	r3, #0
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	230a      	movs	r3, #10
 8000d7c:	4a36      	ldr	r2, [pc, #216]	@ (8000e58 <main+0x138>)
 8000d7e:	2101      	movs	r1, #1
 8000d80:	f00f fb61 	bl	8010446 <OS_task_create>
  1,
  q_eeprom_event,
  ARRAY_ELEMENT(q_eeprom_event),
  (OS_event_t *)0 );

  uart_esp32_task_init(&huart1);
 8000d84:	4830      	ldr	r0, [pc, #192]	@ (8000e48 <main+0x128>)
 8000d86:	f00d fc55 	bl	800e634 <uart_esp32_task_init>
  static OS_event_t const *q_uart_esp32_event[10];
  OS_task_create(AO_task_uart_esp32,
 8000d8a:	4b34      	ldr	r3, [pc, #208]	@ (8000e5c <main+0x13c>)
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	230a      	movs	r3, #10
 8000d94:	4a32      	ldr	r2, [pc, #200]	@ (8000e60 <main+0x140>)
 8000d96:	2102      	movs	r1, #2
 8000d98:	f00f fb55 	bl	8010446 <OS_task_create>
  2,
  q_uart_esp32_event,
  ARRAY_ELEMENT(q_uart_esp32_event),
  (OS_event_t *)0);

  BlinkyTest_app_init();
 8000d9c:	f00d fe58 	bl	800ea50 <BlinkyTest_app_init>
  static OS_event_t const *TestOS_blinky[10]; /* Event queue */
  OS_task_create(
 8000da0:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <main+0x144>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	2300      	movs	r3, #0
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	230a      	movs	r3, #10
 8000daa:	4a2f      	ldr	r2, [pc, #188]	@ (8000e68 <main+0x148>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	f00f fb4a 	bl	8010446 <OS_task_create>
  1,
  TestOS_blinky,
  ARRAY_ELEMENT(TestOS_blinky),
  (OS_event_t *)0);

  screen_task_init();
 8000db2:	f00d fb41 	bl	800e438 <screen_task_init>
  static OS_event_t const *q_screen[10]; /* Event queue */
  OS_task_create(
 8000db6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <main+0x14c>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e70 <main+0x150>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	f00f fb3f 	bl	8010446 <OS_task_create>
  1,
  q_screen,
  ARRAY_ELEMENT(q_screen),
  (OS_event_t *)0);

  ds3231_task_init(&hi2c1,ADDRESS_DS3231);
 8000dc8:	2168      	movs	r1, #104	@ 0x68
 8000dca:	4821      	ldr	r0, [pc, #132]	@ (8000e50 <main+0x130>)
 8000dcc:	f00d fb20 	bl	800e410 <ds3231_task_init>
//  1,
//  q_sd,
//  ARRAY_ELEMENT(q_sd),
//  (OS_event_t *)0);

  can_bus_task_init(&hcan);
 8000dd0:	481e      	ldr	r0, [pc, #120]	@ (8000e4c <main+0x12c>)
 8000dd2:	f00c fdd9 	bl	800d988 <can_bus_task_init>
  static OS_event_t const *Can_app_event[10];
  OS_task_create( AO_task_can_bus,
 8000dd6:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <main+0x154>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	230a      	movs	r3, #10
 8000de0:	4a25      	ldr	r2, [pc, #148]	@ (8000e78 <main+0x158>)
 8000de2:	2101      	movs	r1, #1
 8000de4:	f00f fb2f 	bl	8010446 <OS_task_create>
  1,
  Can_app_event,
  ARRAY_ELEMENT(Can_app_event),
  (OS_event_t *)0);

  HAL_Delay(4500);
 8000de8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dec:	f000 fe84 	bl	8001af8 <HAL_Delay>
  Screen_begin(&huart2);
 8000df0:	4813      	ldr	r0, [pc, #76]	@ (8000e40 <main+0x120>)
 8000df2:	f006 f973 	bl	80070dc <Screen_begin>
//  sprintf(string, "Time RTC: %d/%d/%d - %d:%d:%d\n",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]);
//  printf("%s",string);

//  isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
//		  	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));
     isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
 8000df6:	23fa      	movs	r3, #250	@ 0xfa
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <main+0x15c>)
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	23fa      	movs	r3, #250	@ 0xfa
 8000e00:	4a1f      	ldr	r2, [pc, #124]	@ (8000e80 <main+0x160>)
 8000e02:	f240 1131 	movw	r1, #305	@ 0x131
 8000e06:	481f      	ldr	r0, [pc, #124]	@ (8000e84 <main+0x164>)
 8000e08:	f00f fa64 	bl	80102d4 <isotp_init_link>
		   	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));

  isotp_init_link(&CAN_iso[1], 0x132, can_iso_send_buf1 , sizeof(can_iso_send_buf1)
 8000e0c:	23fa      	movs	r3, #250	@ 0xfa
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <main+0x168>)
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	23fa      	movs	r3, #250	@ 0xfa
 8000e16:	4a1d      	ldr	r2, [pc, #116]	@ (8000e8c <main+0x16c>)
 8000e18:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8000e1c:	481c      	ldr	r0, [pc, #112]	@ (8000e90 <main+0x170>)
 8000e1e:	f00f fa59 	bl	80102d4 <isotp_init_link>
		  	  	  	  	  	  	  	, can_iso_recv_buf1, sizeof(can_iso_recv_buf1));

  isotp_init_link(&CAN_iso[2], 0x134, can_iso_send_buf2 , sizeof(can_iso_send_buf2)
 8000e22:	23fa      	movs	r3, #250	@ 0xfa
 8000e24:	9301      	str	r3, [sp, #4]
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <main+0x174>)
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	23fa      	movs	r3, #250	@ 0xfa
 8000e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e98 <main+0x178>)
 8000e2e:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8000e32:	481a      	ldr	r0, [pc, #104]	@ (8000e9c <main+0x17c>)
 8000e34:	f00f fa4e 	bl	80102d4 <isotp_init_link>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint32_t pre;
//  pre = 0;
  	  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <main+0x118>
 8000e3c:	20000b44 	.word	0x20000b44
 8000e40:	20000414 	.word	0x20000414
 8000e44:	20000ba8 	.word	0x20000ba8
 8000e48:	200003cc 	.word	0x200003cc
 8000e4c:	20000350 	.word	0x20000350
 8000e50:	20000378 	.word	0x20000378
 8000e54:	0801610c 	.word	0x0801610c
 8000e58:	20000bf8 	.word	0x20000bf8
 8000e5c:	08016114 	.word	0x08016114
 8000e60:	20000c20 	.word	0x20000c20
 8000e64:	08016118 	.word	0x08016118
 8000e68:	20000c48 	.word	0x20000c48
 8000e6c:	08016110 	.word	0x08016110
 8000e70:	20000c70 	.word	0x20000c70
 8000e74:	08015a24 	.word	0x08015a24
 8000e78:	20000c98 	.word	0x20000c98
 8000e7c:	2000055c 	.word	0x2000055c
 8000e80:	20000658 	.word	0x20000658
 8000e84:	2000049c 	.word	0x2000049c
 8000e88:	20000754 	.word	0x20000754
 8000e8c:	20000850 	.word	0x20000850
 8000e90:	200004dc 	.word	0x200004dc
 8000e94:	2000094c 	.word	0x2000094c
 8000e98:	20000a48 	.word	0x20000a48
 8000e9c:	2000051c 	.word	0x2000051c

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b090      	sub	sp, #64	@ 0x40
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	2228      	movs	r2, #40	@ 0x28
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f011 fdd6 	bl	8012a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ed6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 fe4b 	bl	8005b7c <HAL_RCC_OscConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000eec:	f000 facd 	bl	800148a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2101      	movs	r1, #1
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 f8b9 	bl	8006080 <HAL_RCC_ClockConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f14:	f000 fab9 	bl	800148a <Error_Handler>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3740      	adds	r7, #64	@ 0x40
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f26:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f28:	4a25      	ldr	r2, [pc, #148]	@ (8000fc0 <MX_CAN_Init+0xa0>)
 8000f2a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000f2c:	4b23      	ldr	r3, [pc, #140]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f2e:	2204      	movs	r2, #4
 8000f30:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f32:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f38:	4b20      	ldr	r3, [pc, #128]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f40:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000f44:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f4c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f54:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f72:	4812      	ldr	r0, [pc, #72]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000f74:	f000 fde4 	bl	8001b40 <HAL_CAN_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000f7e:	f000 fa84 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f82:	2301      	movs	r3, #1
 8000f84:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000f86:	230a      	movs	r3, #10
 8000f88:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <MX_CAN_Init+0x9c>)
 8000fb0:	f000 fec1 	bl	8001d36 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	@ 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000350 	.word	0x20000350
 8000fc0:	40006400 	.word	0x40006400

08000fc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fca:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <MX_I2C1_Init+0x54>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <MX_I2C1_Init+0x58>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fe2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fe6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_I2C1_Init+0x50>)
 8001002:	f001 ff99 	bl	8002f38 <HAL_I2C_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800100c:	f000 fa3d 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000378 	.word	0x20000378
 8001018:	40005400 	.word	0x40005400
 800101c:	00061a80 	.word	0x00061a80

08001020 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <MX_USART1_UART_Init+0x50>)
 8001028:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_USART1_UART_Init+0x4c>)
 8001058:	f005 f9a0 	bl	800639c <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001062:	f000 fa12 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200003cc 	.word	0x200003cc
 8001070:	40013800 	.word	0x40013800

08001074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <MX_USART2_UART_Init+0x50>)
 800107c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <MX_USART2_UART_Init+0x4c>)
 80010ac:	f005 f976 	bl	800639c <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010b6:	f000 f9e8 	bl	800148a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000414 	.word	0x20000414
 80010c4:	40004400 	.word	0x40004400

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_GPIO_Init+0x74>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a16      	ldr	r2, [pc, #88]	@ (800113c <MX_GPIO_Init+0x74>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_GPIO_Init+0x74>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_GPIO_Init+0x74>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a10      	ldr	r2, [pc, #64]	@ (800113c <MX_GPIO_Init+0x74>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_GPIO_Init+0x74>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2102      	movs	r1, #2
 8001110:	480b      	ldr	r0, [pc, #44]	@ (8001140 <MX_GPIO_Init+0x78>)
 8001112:	f001 fef9 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_PIN_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
 8001116:	2302      	movs	r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001122:	2301      	movs	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4619      	mov	r1, r3
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <MX_GPIO_Init+0x78>)
 800112e:	f001 fd67 	bl	8002c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	40010800 	.word	0x40010800

08001144 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b2d      	ldr	r3, [pc, #180]	@ (800120c <HAL_UARTEx_RxEventCallback+0xc8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d10d      	bne.n	8001178 <HAL_UARTEx_RxEventCallback+0x34>
		// Call to callback function screen
		Screen_RX_data(dataRX);
 800115c:	482c      	ldr	r0, [pc, #176]	@ (8001210 <HAL_UARTEx_RxEventCallback+0xcc>)
 800115e:	f006 f841 	bl	80071e4 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 8001162:	2264      	movs	r2, #100	@ 0x64
 8001164:	2100      	movs	r1, #0
 8001166:	482a      	ldr	r0, [pc, #168]	@ (8001210 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001168:	f011 fc7a 	bl	8012a60 <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 800116c:	2264      	movs	r2, #100	@ 0x64
 800116e:	4928      	ldr	r1, [pc, #160]	@ (8001210 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001170:	4826      	ldr	r0, [pc, #152]	@ (800120c <HAL_UARTEx_RxEventCallback+0xc8>)
 8001172:	f005 f9ee 	bl	8006552 <HAL_UARTEx_ReceiveToIdle_IT>

    memset(dataRX_ESP32,0,sizeof(dataRX_ESP32));

		HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
	}
}
 8001176:	e045      	b.n	8001204 <HAL_UARTEx_RxEventCallback+0xc0>
	} else if (huart->Instance == huart1.Instance) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <HAL_UARTEx_RxEventCallback+0xd0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d13f      	bne.n	8001204 <HAL_UARTEx_RxEventCallback+0xc0>
    uart_esp32_t *RX_ESP32 = malloc(sizeof(uart_esp32_t));
 8001184:	2008      	movs	r0, #8
 8001186:	f00f fc31 	bl	80109ec <malloc>
 800118a:	4603      	mov	r3, r0
 800118c:	60fb      	str	r3, [r7, #12]
    RX_ESP32->data = malloc(strlen(dataRX_ESP32)+1);
 800118e:	4822      	ldr	r0, [pc, #136]	@ (8001218 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001190:	f7fe ffe8 	bl	8000164 <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	3301      	adds	r3, #1
 8001198:	68fc      	ldr	r4, [r7, #12]
 800119a:	4618      	mov	r0, r3
 800119c:	f00f fc26 	bl	80109ec <malloc>
 80011a0:	4603      	mov	r3, r0
 80011a2:	6023      	str	r3, [r4, #0]
    memset(RX_ESP32->data,0,strlen(dataRX_ESP32)+1);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681c      	ldr	r4, [r3, #0]
 80011a8:	481b      	ldr	r0, [pc, #108]	@ (8001218 <HAL_UARTEx_RxEventCallback+0xd4>)
 80011aa:	f7fe ffdb 	bl	8000164 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	3301      	adds	r3, #1
 80011b2:	461a      	mov	r2, r3
 80011b4:	2100      	movs	r1, #0
 80011b6:	4620      	mov	r0, r4
 80011b8:	f011 fc52 	bl	8012a60 <memset>
    memcpy(RX_ESP32->data,dataRX_ESP32,strlen(dataRX_ESP32));
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681c      	ldr	r4, [r3, #0]
 80011c0:	4815      	ldr	r0, [pc, #84]	@ (8001218 <HAL_UARTEx_RxEventCallback+0xd4>)
 80011c2:	f7fe ffcf 	bl	8000164 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4913      	ldr	r1, [pc, #76]	@ (8001218 <HAL_UARTEx_RxEventCallback+0xd4>)
 80011cc:	4620      	mov	r0, r4
 80011ce:	f011 fd90 	bl	8012cf2 <memcpy>
    RX_ESP32->len = strlen(dataRX_ESP32)+1;
 80011d2:	4811      	ldr	r0, [pc, #68]	@ (8001218 <HAL_UARTEx_RxEventCallback+0xd4>)
 80011d4:	f7fe ffc6 	bl	8000164 <strlen>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3201      	adds	r2, #1
 80011de:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,RECEIVE_DATA_ESP32,(uint8_t *)&RX_ESP32,sizeof(uart_esp32_t));
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_UARTEx_RxEventCallback+0xd8>)
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	f107 020c 	add.w	r2, r7, #12
 80011e8:	2308      	movs	r3, #8
 80011ea:	2101      	movs	r1, #1
 80011ec:	f00f f9cc 	bl	8010588 <OS_task_post_event>
    memset(dataRX_ESP32,0,sizeof(dataRX_ESP32));
 80011f0:	2250      	movs	r2, #80	@ 0x50
 80011f2:	2100      	movs	r1, #0
 80011f4:	4808      	ldr	r0, [pc, #32]	@ (8001218 <HAL_UARTEx_RxEventCallback+0xd4>)
 80011f6:	f011 fc33 	bl	8012a60 <memset>
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
 80011fa:	2250      	movs	r2, #80	@ 0x50
 80011fc:	4906      	ldr	r1, [pc, #24]	@ (8001218 <HAL_UARTEx_RxEventCallback+0xd4>)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001200:	f005 f9a7 	bl	8006552 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	20000414 	.word	0x20000414
 8001210:	20000b44 	.word	0x20000b44
 8001214:	200003cc 	.word	0x200003cc
 8001218:	20000ba8 	.word	0x20000ba8
 800121c:	08016114 	.word	0x08016114

08001220 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance) {

		
	}
  /* Transmit complete wait eeprom write */
	if (AO_task_eeprom->dispatch != NULL && AO_task_eeprom->init != NULL ) {
 8001228:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_I2C_MemTxCpltCallback+0x34>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00b      	beq.n	800124a <HAL_I2C_MemTxCpltCallback+0x2a>
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <HAL_I2C_MemTxCpltCallback+0x34>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <HAL_I2C_MemTxCpltCallback+0x2a>
	  OS_task_post_event(AO_task_eeprom, WAIT_WRITE_TIMEOUT, (uint8_t *)0, 0);
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_I2C_MemTxCpltCallback+0x34>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	f00f f99f 	bl	8010588 <OS_task_post_event>
	}
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	0801610c 	.word	0x0801610c

08001258 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001258:	b580      	push	{r7, lr}
 800125a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800125e:	af00      	add	r7, sp, #0
 8001260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001264:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001268:	6018      	str	r0, [r3, #0]
	uint8_t payload[500];
  uint16_t act_size = 0;
 800126a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800126e:	f5a3 73fb 	sub.w	r3, r3, #502	@ 0x1f6
 8001272:	2200      	movs	r2, #0
 8001274:	801a      	strh	r2, [r3, #0]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800127a:	f5a3 70fe 	sub.w	r0, r3, #508	@ 0x1fc
 800127e:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001280:	4a4b      	ldr	r2, [pc, #300]	@ (80013b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001282:	2101      	movs	r1, #1
 8001284:	6800      	ldr	r0, [r0, #0]
 8001286:	f000 ff55 	bl	8002134 <HAL_CAN_GetRxMessage>
//    if (CAN_iso[1].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
//      isotp_receive(&CAN_iso[1], payload, sizeof(payload), &act_size);
//      get_data_testing_finish(&_Screen,DEVICE_1,payload);
//    }
//  }
   if (RxHeader.StdId == 0x471) {
 800128a:	4b49      	ldr	r3, [pc, #292]	@ (80013b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f240 4271 	movw	r2, #1137	@ 0x471
 8001292:	4293      	cmp	r3, r2
 8001294:	d128      	bne.n	80012e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>
     isotp_on_can_message(&CAN_iso[0], RxData, RxHeader.DLC);
 8001296:	4b46      	ldr	r3, [pc, #280]	@ (80013b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	4943      	ldr	r1, [pc, #268]	@ (80013ac <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80012a0:	4844      	ldr	r0, [pc, #272]	@ (80013b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 80012a2:	f00e fe99 	bl	800ffd8 <isotp_on_can_message>
       if(RxData[0] == 0x30) {
 80012a6:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b30      	cmp	r3, #48	@ 0x30
 80012ac:	d106      	bne.n	80012bc <HAL_CAN_RxFifo1MsgPendingCallback+0x64>
         OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 80012ae:	4b42      	ldr	r3, [pc, #264]	@ (80013b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2300      	movs	r3, #0
 80012b4:	2200      	movs	r2, #0
 80012b6:	2103      	movs	r1, #3
 80012b8:	f00f f966 	bl	8010588 <OS_task_post_event>
       }
     //printf("%x,%c,%c,%c,%c,%c,%c,%c\n",RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
     if (CAN_iso[0].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 80012bc:	4b3d      	ldr	r3, [pc, #244]	@ (80013b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 80012be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d16d      	bne.n	80013a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[0], payload, sizeof(payload), &act_size);
 80012c6:	f107 030a 	add.w	r3, r7, #10
 80012ca:	f107 010c 	add.w	r1, r7, #12
 80012ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012d2:	4838      	ldr	r0, [pc, #224]	@ (80013b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 80012d4:	f00e ffd2 	bl	801027c <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_1,payload);
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	461a      	mov	r2, r3
 80012de:	2100      	movs	r1, #0
 80012e0:	4836      	ldr	r0, [pc, #216]	@ (80013bc <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 80012e2:	f00b fe17 	bl	800cf14 <get_data_testing_finish>
     if (CAN_iso[2].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
       isotp_receive(&CAN_iso[2], payload, sizeof(payload), &act_size);
       get_data_testing_finish(&_Screen,DEVICE_3,payload);
     }
   }
}
 80012e6:	e05c      	b.n	80013a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
   } else if (RxHeader.StdId == 0x472) {
 80012e8:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f240 4272 	movw	r2, #1138	@ 0x472
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d128      	bne.n	8001346 <HAL_CAN_RxFifo1MsgPendingCallback+0xee>
     isotp_on_can_message(&CAN_iso[1], RxData, RxHeader.DLC);
 80012f4:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	492b      	ldr	r1, [pc, #172]	@ (80013ac <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80012fe:	4830      	ldr	r0, [pc, #192]	@ (80013c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001300:	f00e fe6a 	bl	800ffd8 <isotp_on_can_message>
     if(RxData[0] == 0x30) {
 8001304:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b30      	cmp	r3, #48	@ 0x30
 800130a:	d106      	bne.n	800131a <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
       OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 800130c:	4b2a      	ldr	r3, [pc, #168]	@ (80013b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	2300      	movs	r3, #0
 8001312:	2200      	movs	r2, #0
 8001314:	2103      	movs	r1, #3
 8001316:	f00f f937 	bl	8010588 <OS_task_post_event>
     if (CAN_iso[1].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 800131a:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 800131c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001320:	2b02      	cmp	r3, #2
 8001322:	d13e      	bne.n	80013a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[1], payload, sizeof(payload), &act_size);
 8001324:	f107 030a 	add.w	r3, r7, #10
 8001328:	f107 010c 	add.w	r1, r7, #12
 800132c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001330:	4823      	ldr	r0, [pc, #140]	@ (80013c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001332:	f00e ffa3 	bl	801027c <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_2,payload);
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	461a      	mov	r2, r3
 800133c:	2101      	movs	r1, #1
 800133e:	481f      	ldr	r0, [pc, #124]	@ (80013bc <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001340:	f00b fde8 	bl	800cf14 <get_data_testing_finish>
}
 8001344:	e02d      	b.n	80013a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
   } else if (RxHeader.StdId == 0x474) {
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f240 4274 	movw	r2, #1140	@ 0x474
 800134e:	4293      	cmp	r3, r2
 8001350:	d127      	bne.n	80013a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
     isotp_on_can_message(&CAN_iso[2], RxData, RxHeader.DLC);
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4914      	ldr	r1, [pc, #80]	@ (80013ac <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 800135c:	4819      	ldr	r0, [pc, #100]	@ (80013c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 800135e:	f00e fe3b 	bl	800ffd8 <isotp_on_can_message>
     if(RxData[0] == 0x30) {
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b30      	cmp	r3, #48	@ 0x30
 8001368:	d106      	bne.n	8001378 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>
       OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	2300      	movs	r3, #0
 8001370:	2200      	movs	r2, #0
 8001372:	2103      	movs	r1, #3
 8001374:	f00f f908 	bl	8010588 <OS_task_post_event>
     if (CAN_iso[2].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8001378:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 800137a:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800137e:	2b02      	cmp	r3, #2
 8001380:	d10f      	bne.n	80013a2 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[2], payload, sizeof(payload), &act_size);
 8001382:	f107 030a 	add.w	r3, r7, #10
 8001386:	f107 010c 	add.w	r1, r7, #12
 800138a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800138e:	480d      	ldr	r0, [pc, #52]	@ (80013c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 8001390:	f00e ff74 	bl	801027c <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_3,payload);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	461a      	mov	r2, r3
 800139a:	2102      	movs	r1, #2
 800139c:	4807      	ldr	r0, [pc, #28]	@ (80013bc <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 800139e:	f00b fdb9 	bl	800cf14 <get_data_testing_finish>
}
 80013a2:	bf00      	nop
 80013a4:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000490 	.word	0x20000490
 80013b0:	20000474 	.word	0x20000474
 80013b4:	2000049c 	.word	0x2000049c
 80013b8:	08015a24 	.word	0x08015a24
 80013bc:	20000cc8 	.word	0x20000cc8
 80013c0:	200004dc 	.word	0x200004dc
 80013c4:	2000051c 	.word	0x2000051c

080013c8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint32_t lastError = HAL_CAN_GetError(hcan);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f001 fa0f 	bl	80027f4 <HAL_CAN_GetError>
 80013d6:	60f8      	str	r0, [r7, #12]
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_write>:

int _write(int file, char *ptr, int len) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e009      	b.n	8001406 <_write+0x26>
        ITM_SendChar(ptr[i]);
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fc6a 	bl	8000cd4 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	dbf1      	blt.n	80013f2 <_write+0x12>
    }
    return len;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <isotp_user_send_can>:

/* FUNCTION USING IN CAN ISO TP */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	4613      	mov	r3, r2
 8001424:	71fb      	strb	r3, [r7, #7]
  TxHeader.DLC = size;
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <isotp_user_send_can+0x48>)
 800142a:	6113      	str	r3, [r2, #16]
  TxHeader.StdId = arbitration_id;
 800142c:	4a0c      	ldr	r2, [pc, #48]	@ (8001460 <isotp_user_send_can+0x48>)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6013      	str	r3, [r2, #0]
  TxHeader.IDE = CAN_ID_STD;
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <isotp_user_send_can+0x48>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <isotp_user_send_can+0x48>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]

  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) == HAL_OK) {
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <isotp_user_send_can+0x4c>)
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4907      	ldr	r1, [pc, #28]	@ (8001460 <isotp_user_send_can+0x48>)
 8001444:	4808      	ldr	r0, [pc, #32]	@ (8001468 <isotp_user_send_can+0x50>)
 8001446:	f000 fd83 	bl	8001f50 <HAL_CAN_AddTxMessage>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <isotp_user_send_can+0x3c>
	  return ISOTP_RET_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e001      	b.n	8001458 <isotp_user_send_can+0x40>
  }
  return ISOTP_RET_ERROR;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000045c 	.word	0x2000045c
 8001464:	20000498 	.word	0x20000498
 8001468:	20000350 	.word	0x20000350

0800146c <isotp_user_get_ms>:


uint32_t isotp_user_get_ms(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001470:	f000 fb38 	bl	8001ae4 <HAL_GetTick>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}

0800147a <isotp_user_debug>:

void isotp_user_debug(const char* message, ...) {
 800147a:	b40f      	push	{r0, r1, r2, r3}
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	b004      	add	sp, #16
 8001488:	4770      	bx	lr

0800148a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148e:	b672      	cpsid	i
}
 8001490:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001492:	bf00      	nop
 8001494:	e7fd      	b.n	8001492 <Error_Handler+0x8>
	...

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <HAL_MspInit+0x5c>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <HAL_MspInit+0x5c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_MspInit+0x5c>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_MspInit+0x5c>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <HAL_MspInit+0x5c>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <HAL_MspInit+0x5c>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_MspInit+0x60>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	4a04      	ldr	r2, [pc, #16]	@ (80014f8 <HAL_MspInit+0x60>)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000

080014fc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a28      	ldr	r2, [pc, #160]	@ (80015b8 <HAL_CAN_MspInit+0xbc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d149      	bne.n	80015b0 <HAL_CAN_MspInit+0xb4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800151c:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <HAL_CAN_MspInit+0xc0>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	4a26      	ldr	r2, [pc, #152]	@ (80015bc <HAL_CAN_MspInit+0xc0>)
 8001522:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001526:	61d3      	str	r3, [r2, #28]
 8001528:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <HAL_CAN_MspInit+0xc0>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <HAL_CAN_MspInit+0xc0>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a20      	ldr	r2, [pc, #128]	@ (80015bc <HAL_CAN_MspInit+0xc0>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <HAL_CAN_MspInit+0xc0>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800154c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001550:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	4817      	ldr	r0, [pc, #92]	@ (80015c0 <HAL_CAN_MspInit+0xc4>)
 8001562:	f001 fb4d 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4619      	mov	r1, r3
 800157a:	4811      	ldr	r0, [pc, #68]	@ (80015c0 <HAL_CAN_MspInit+0xc4>)
 800157c:	f001 fb40 	bl	8002c00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2013      	movs	r0, #19
 8001586:	f001 fa36 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800158a:	2013      	movs	r0, #19
 800158c:	f001 fa4f 	bl	8002a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2015      	movs	r0, #21
 8001596:	f001 fa2e 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800159a:	2015      	movs	r0, #21
 800159c:	f001 fa47 	bl	8002a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	2016      	movs	r0, #22
 80015a6:	f001 fa26 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80015aa:	2016      	movs	r0, #22
 80015ac:	f001 fa3f 	bl	8002a2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40006400 	.word	0x40006400
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010800 	.word	0x40010800

080015c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a19      	ldr	r2, [pc, #100]	@ (8001644 <HAL_I2C_MspInit+0x80>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d12b      	bne.n	800163c <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <HAL_I2C_MspInit+0x84>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a17      	ldr	r2, [pc, #92]	@ (8001648 <HAL_I2C_MspInit+0x84>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_I2C_MspInit+0x84>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fc:	23c0      	movs	r3, #192	@ 0xc0
 80015fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001600:	2312      	movs	r3, #18
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	480f      	ldr	r0, [pc, #60]	@ (800164c <HAL_I2C_MspInit+0x88>)
 8001610:	f001 faf6 	bl	8002c00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_I2C_MspInit+0x84>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <HAL_I2C_MspInit+0x84>)
 800161a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800161e:	61d3      	str	r3, [r2, #28]
 8001620:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_I2C_MspInit+0x84>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	201f      	movs	r0, #31
 8001632:	f001 f9e0 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001636:	201f      	movs	r0, #31
 8001638:	f001 f9f9 	bl	8002a2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40005400 	.word	0x40005400
 8001648:	40021000 	.word	0x40021000
 800164c:	40010c00 	.word	0x40010c00

08001650 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a3f      	ldr	r2, [pc, #252]	@ (8001768 <HAL_UART_MspInit+0x118>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d13a      	bne.n	80016e6 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001670:	4b3e      	ldr	r3, [pc, #248]	@ (800176c <HAL_UART_MspInit+0x11c>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a3d      	ldr	r2, [pc, #244]	@ (800176c <HAL_UART_MspInit+0x11c>)
 8001676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <HAL_UART_MspInit+0x11c>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b38      	ldr	r3, [pc, #224]	@ (800176c <HAL_UART_MspInit+0x11c>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a37      	ldr	r2, [pc, #220]	@ (800176c <HAL_UART_MspInit+0x11c>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b35      	ldr	r3, [pc, #212]	@ (800176c <HAL_UART_MspInit+0x11c>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	4619      	mov	r1, r3
 80016b4:	482e      	ldr	r0, [pc, #184]	@ (8001770 <HAL_UART_MspInit+0x120>)
 80016b6:	f001 faa3 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4828      	ldr	r0, [pc, #160]	@ (8001770 <HAL_UART_MspInit+0x120>)
 80016d0:	f001 fa96 	bl	8002c00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2025      	movs	r0, #37	@ 0x25
 80016da:	f001 f98c 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016de:	2025      	movs	r0, #37	@ 0x25
 80016e0:	f001 f9a5 	bl	8002a2e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e4:	e03c      	b.n	8001760 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <HAL_UART_MspInit+0x124>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d137      	bne.n	8001760 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f0:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <HAL_UART_MspInit+0x11c>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <HAL_UART_MspInit+0x11c>)
 80016f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016fa:	61d3      	str	r3, [r2, #28]
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <HAL_UART_MspInit+0x11c>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <HAL_UART_MspInit+0x11c>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a17      	ldr	r2, [pc, #92]	@ (800176c <HAL_UART_MspInit+0x11c>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <HAL_UART_MspInit+0x11c>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001720:	2304      	movs	r3, #4
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	4619      	mov	r1, r3
 8001732:	480f      	ldr	r0, [pc, #60]	@ (8001770 <HAL_UART_MspInit+0x120>)
 8001734:	f001 fa64 	bl	8002c00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001738:	2308      	movs	r3, #8
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0318 	add.w	r3, r7, #24
 8001748:	4619      	mov	r1, r3
 800174a:	4809      	ldr	r0, [pc, #36]	@ (8001770 <HAL_UART_MspInit+0x120>)
 800174c:	f001 fa58 	bl	8002c00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	2026      	movs	r0, #38	@ 0x26
 8001756:	f001 f94e 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800175a:	2026      	movs	r0, #38	@ 0x26
 800175c:	f001 f967 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	@ 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40013800 	.word	0x40013800
 800176c:	40021000 	.word	0x40021000
 8001770:	40010800 	.word	0x40010800
 8001774:	40004400 	.word	0x40004400

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <UsageFault_Handler+0x4>

080017a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
//	  {
//	    FatFsCnt = 0;
//	    SDTimer_Handler();
//	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ca:	f000 f979 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  OS_TimeEvt_tick();
 80017ce:	f00e ff49 	bl	8010664 <OS_TimeEvt_tick>

  if (!HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <SysTick_Handler+0x48>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4619      	mov	r1, r3
 80017d8:	480d      	ldr	r0, [pc, #52]	@ (8001810 <SysTick_Handler+0x4c>)
 80017da:	f000 fc88 	bl	80020ee <HAL_CAN_IsTxMessagePending>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10f      	bne.n	8001804 <SysTick_Handler+0x40>
//	  isotp_poll(&CAN_iso[0]);
	   for(uint8_t i = 0; i < 3; i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	e009      	b.n	80017fe <SysTick_Handler+0x3a>
	     isotp_poll(&CAN_iso[i]);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	019b      	lsls	r3, r3, #6
 80017ee:	4a09      	ldr	r2, [pc, #36]	@ (8001814 <SysTick_Handler+0x50>)
 80017f0:	4413      	add	r3, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f00e fd95 	bl	8010322 <isotp_poll>
	   for(uint8_t i = 0; i < 3; i++) {
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	3301      	adds	r3, #1
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d9f2      	bls.n	80017ea <SysTick_Handler+0x26>
	   }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000498 	.word	0x20000498
 8001810:	20000350 	.word	0x20000350
 8001814:	2000049c 	.word	0x2000049c

08001818 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800181e:	f000 fdcf 	bl	80023c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000350 	.word	0x20000350

0800182c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <CAN1_RX1_IRQHandler+0x10>)
 8001832:	f000 fdc5 	bl	80023c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000350 	.word	0x20000350

08001840 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <CAN1_SCE_IRQHandler+0x10>)
 8001846:	f000 fdbb 	bl	80023c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000350 	.word	0x20000350

08001854 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <I2C1_EV_IRQHandler+0x10>)
 800185a:	f002 fa0d 	bl	8003c78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000378 	.word	0x20000378

08001868 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <USART1_IRQHandler+0x10>)
 800186e:	f004 fecd 	bl	800660c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200003cc 	.word	0x200003cc

0800187c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <USART2_IRQHandler+0x10>)
 8001882:	f004 fec3 	bl	800660c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000414 	.word	0x20000414

08001890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <_kill>:

int _kill(int pid, int sig)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a8:	f011 f9e0 	bl	8012c6c <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2216      	movs	r2, #22
 80018b0:	601a      	str	r2, [r3, #0]
  return -1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_exit>:

void _exit (int status)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c6:	f04f 31ff 	mov.w	r1, #4294967295
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffe7 	bl	800189e <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <_exit+0x12>

080018d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e00a      	b.n	80018fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e6:	f3af 8000 	nop.w
 80018ea:	4601      	mov	r1, r0
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf0      	blt.n	80018e6 <_read+0x12>
  }

  return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_close>:
  }
  return len;
}

int _close(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001934:	605a      	str	r2, [r3, #4]
  return 0;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <_isatty>:

int _isatty(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
	...

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f011 f964 	bl	8012c6c <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20005000 	.word	0x20005000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	20000cc0 	.word	0x20000cc0
 80019d8:	20001c40 	.word	0x20001c40

080019dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e8:	f7ff fff8 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ec:	480b      	ldr	r0, [pc, #44]	@ (8001a1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ee:	490c      	ldr	r1, [pc, #48]	@ (8001a20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a04:	4c09      	ldr	r4, [pc, #36]	@ (8001a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a12:	f011 f931 	bl	8012c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a16:	f7ff f983 	bl	8000d20 <main>
  bx lr
 8001a1a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8001a24:	08016600 	.word	0x08016600
  ldr r2, =_sbss
 8001a28:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8001a2c:	20001c3c 	.word	0x20001c3c

08001a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC1_2_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <HAL_Init+0x28>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <HAL_Init+0x28>)
 8001a3e:	f043 0310 	orr.w	r3, r3, #16
 8001a42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 ffcb 	bl	80029e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4a:	200f      	movs	r0, #15
 8001a4c:	f000 f808 	bl	8001a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a50:	f7ff fd22 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40022000 	.word	0x40022000

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <HAL_InitTick+0x54>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_InitTick+0x58>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 ffe3 	bl	8002a4a <HAL_SYSTICK_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00e      	b.n	8001aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d80a      	bhi.n	8001aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 ffab 	bl	80029f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4a06      	ldr	r2, [pc, #24]	@ (8001abc <HAL_InitTick+0x5c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_IncTick+0x1c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a03      	ldr	r2, [pc, #12]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000cc4 	.word	0x20000cc4

08001ae4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b02      	ldr	r3, [pc, #8]	@ (8001af4 <HAL_GetTick+0x10>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	20000cc4 	.word	0x20000cc4

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1e:	bf00      	nop
 8001b20:	f7ff ffe0 	bl	8001ae4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008

08001b40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0ed      	b.n	8001d2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fccc 	bl	80014fc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b74:	f7ff ffb6 	bl	8001ae4 <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b7a:	e012      	b.n	8001ba2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b7c:	f7ff ffb2 	bl	8001ae4 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b0a      	cmp	r3, #10
 8001b88:	d90b      	bls.n	8001ba2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2205      	movs	r2, #5
 8001b9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0c5      	b.n	8001d2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0e5      	beq.n	8001b7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0202 	bic.w	r2, r2, #2
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc0:	f7ff ff90 	bl	8001ae4 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bc6:	e012      	b.n	8001bee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bc8:	f7ff ff8c 	bl	8001ae4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b0a      	cmp	r3, #10
 8001bd4:	d90b      	bls.n	8001bee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2205      	movs	r2, #5
 8001be6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e09f      	b.n	8001d2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e5      	bne.n	8001bc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e1b      	ldrb	r3, [r3, #24]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d108      	bne.n	8001c16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e007      	b.n	8001c26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7e5b      	ldrb	r3, [r3, #25]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d108      	bne.n	8001c40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e007      	b.n	8001c50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7e9b      	ldrb	r3, [r3, #26]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d108      	bne.n	8001c6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e007      	b.n	8001c7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0220 	bic.w	r2, r2, #32
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7edb      	ldrb	r3, [r3, #27]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d108      	bne.n	8001c94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0210 	bic.w	r2, r2, #16
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e007      	b.n	8001ca4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0210 	orr.w	r2, r2, #16
 8001ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7f1b      	ldrb	r3, [r3, #28]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d108      	bne.n	8001cbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0208 	orr.w	r2, r2, #8
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e007      	b.n	8001cce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0208 	bic.w	r2, r2, #8
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7f5b      	ldrb	r3, [r3, #29]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d108      	bne.n	8001ce8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0204 	orr.w	r2, r2, #4
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e007      	b.n	8001cf8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0204 	bic.w	r2, r2, #4
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	ea42 0103 	orr.w	r1, r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b087      	sub	sp, #28
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d4c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d4e:	7cfb      	ldrb	r3, [r7, #19]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d003      	beq.n	8001d5c <HAL_CAN_ConfigFilter+0x26>
 8001d54:	7cfb      	ldrb	r3, [r7, #19]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	f040 80aa 	bne.w	8001eb0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	2201      	movs	r2, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d123      	bne.n	8001dde <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	401a      	ands	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001db8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3248      	adds	r2, #72	@ 0x48
 8001dbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dd4:	6979      	ldr	r1, [r7, #20]
 8001dd6:	3348      	adds	r3, #72	@ 0x48
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d122      	bne.n	8001e2c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3248      	adds	r2, #72	@ 0x48
 8001e0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e22:	6979      	ldr	r1, [r7, #20]
 8001e24:	3348      	adds	r3, #72	@ 0x48
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d109      	bne.n	8001e48 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001e46:	e007      	b.n	8001e58 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001e72:	e007      	b.n	8001e84 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d107      	bne.n	8001e9c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ea2:	f023 0201 	bic.w	r2, r3, #1
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e006      	b.n	8001ebe <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d12e      	bne.n	8001f3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7ff fdf6 	bl	8001ae4 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001efa:	e012      	b.n	8001f22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001efc:	f7ff fdf2 	bl	8001ae4 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b0a      	cmp	r3, #10
 8001f08:	d90b      	bls.n	8001f22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2205      	movs	r2, #5
 8001f1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e012      	b.n	8001f48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e5      	bne.n	8001efc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e006      	b.n	8001f48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	@ 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f64:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d003      	beq.n	8001f7c <HAL_CAN_AddTxMessage+0x2c>
 8001f74:	7ffb      	ldrb	r3, [r7, #31]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	f040 80ad 	bne.w	80020d6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8095 	beq.w	80020c6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	0e1b      	lsrs	r3, r3, #24
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fc2:	68f9      	ldr	r1, [r7, #12]
 8001fc4:	6809      	ldr	r1, [r1, #0]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3318      	adds	r3, #24
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	440b      	add	r3, r1
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e00f      	b.n	8001ff4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fde:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001fe8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3318      	adds	r3, #24
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	440b      	add	r3, r1
 8001ff2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3318      	adds	r3, #24
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	440b      	add	r3, r1
 8002004:	3304      	adds	r3, #4
 8002006:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	7d1b      	ldrb	r3, [r3, #20]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d111      	bne.n	8002034 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3318      	adds	r3, #24
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4413      	add	r3, r2
 800201c:	3304      	adds	r3, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	6811      	ldr	r1, [r2, #0]
 8002024:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3318      	adds	r3, #24
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	440b      	add	r3, r1
 8002030:	3304      	adds	r3, #4
 8002032:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3307      	adds	r3, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	061a      	lsls	r2, r3, #24
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3306      	adds	r3, #6
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	041b      	lsls	r3, r3, #16
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3305      	adds	r3, #5
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	4313      	orrs	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	3204      	adds	r2, #4
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	4610      	mov	r0, r2
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	6811      	ldr	r1, [r2, #0]
 800205c:	ea43 0200 	orr.w	r2, r3, r0
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	440b      	add	r3, r1
 8002066:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800206a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3303      	adds	r3, #3
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	061a      	lsls	r2, r3, #24
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3302      	adds	r3, #2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3301      	adds	r3, #1
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	4313      	orrs	r3, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	7812      	ldrb	r2, [r2, #0]
 800208c:	4610      	mov	r0, r2
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	6811      	ldr	r1, [r2, #0]
 8002092:	ea43 0200 	orr.w	r2, r3, r0
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	440b      	add	r3, r1
 800209c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80020a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3318      	adds	r3, #24
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	4413      	add	r3, r2
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	6811      	ldr	r1, [r2, #0]
 80020b4:	f043 0201 	orr.w	r2, r3, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3318      	adds	r3, #24
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	440b      	add	r3, r1
 80020c0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e00e      	b.n	80020e4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e006      	b.n	80020e4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3724      	adds	r7, #36	@ 0x24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002102:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d002      	beq.n	8002110 <HAL_CAN_IsTxMessagePending+0x22>
 800210a:	7afb      	ldrb	r3, [r7, #11]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d10b      	bne.n	8002128 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	069b      	lsls	r3, r3, #26
 800211a:	401a      	ands	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	069b      	lsls	r3, r3, #26
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002124:	2301      	movs	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002128:	68fb      	ldr	r3, [r7, #12]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002148:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d003      	beq.n	8002158 <HAL_CAN_GetRxMessage+0x24>
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	2b02      	cmp	r3, #2
 8002154:	f040 8103 	bne.w	800235e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10e      	bne.n	800217c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d116      	bne.n	800219a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0f7      	b.n	800236c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e0e8      	b.n	800236c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	331b      	adds	r3, #27
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4413      	add	r3, r2
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0204 	and.w	r2, r3, #4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10c      	bne.n	80021d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	331b      	adds	r3, #27
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	4413      	add	r3, r2
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0d5b      	lsrs	r3, r3, #21
 80021c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e00b      	b.n	80021ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	331b      	adds	r3, #27
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	4413      	add	r3, r2
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	08db      	lsrs	r3, r3, #3
 80021e2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	331b      	adds	r3, #27
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	4413      	add	r3, r2
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0202 	and.w	r2, r3, #2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	331b      	adds	r3, #27
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2208      	movs	r2, #8
 800221c:	611a      	str	r2, [r3, #16]
 800221e:	e00b      	b.n	8002238 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	331b      	adds	r3, #27
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 020f 	and.w	r2, r3, #15
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	331b      	adds	r3, #27
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	b2da      	uxtb	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	331b      	adds	r3, #27
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	4413      	add	r3, r2
 800225c:	3304      	adds	r3, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	b29a      	uxth	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	4413      	add	r3, r2
 8002272:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	4413      	add	r3, r2
 8002288:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0a1a      	lsrs	r2, r3, #8
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0c1a      	lsrs	r2, r3, #16
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	3302      	adds	r3, #2
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0e1a      	lsrs	r2, r3, #24
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3303      	adds	r3, #3
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	3304      	adds	r3, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0a1a      	lsrs	r2, r3, #8
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	3305      	adds	r3, #5
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	4413      	add	r3, r2
 8002308:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0c1a      	lsrs	r2, r3, #16
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	3306      	adds	r3, #6
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	4413      	add	r3, r2
 8002322:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0e1a      	lsrs	r2, r3, #24
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	3307      	adds	r3, #7
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	e007      	b.n	800235a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0220 	orr.w	r2, r2, #32
 8002358:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e006      	b.n	800236c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002386:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d002      	beq.n	8002394 <HAL_CAN_ActivateNotification+0x1e>
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d109      	bne.n	80023a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6959      	ldr	r1, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e006      	b.n	80023b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	@ 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d07c      	beq.n	8002500 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d023      	beq.n	8002458 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f983 	bl	800272e <HAL_CAN_TxMailbox0CompleteCallback>
 8002428:	e016      	b.n	8002458 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
 800243c:	e00c      	b.n	8002458 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002450:	e002      	b.n	8002458 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f986 	bl	8002764 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d024      	beq.n	80024ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800246a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f962 	bl	8002740 <HAL_CAN_TxMailbox1CompleteCallback>
 800247c:	e016      	b.n	80024ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002490:	e00c      	b.n	80024ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a4:	e002      	b.n	80024ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f965 	bl	8002776 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d024      	beq.n	8002500 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f941 	bl	8002752 <HAL_CAN_TxMailbox2CompleteCallback>
 80024d0:	e016      	b.n	8002500 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e4:	e00c      	b.n	8002500 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f8:	e002      	b.n	8002500 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f944 	bl	8002788 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00c      	beq.n	8002524 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2210      	movs	r2, #16
 8002522:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2208      	movs	r2, #8
 800253e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f933 	bl	80027ac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f91b 	bl	800279a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00c      	beq.n	8002588 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2210      	movs	r2, #16
 8002586:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2208      	movs	r2, #8
 80025a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f90a 	bl	80027be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fe48 	bl	8001258 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f8f3 	bl	80027d0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00b      	beq.n	800260c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2208      	movs	r2, #8
 8002604:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f8eb 	bl	80027e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d07b      	beq.n	800270e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d072      	beq.n	8002706 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800267a:	2b00      	cmp	r3, #0
 800267c:	d043      	beq.n	8002706 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002684:	2b00      	cmp	r3, #0
 8002686:	d03e      	beq.n	8002706 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800268e:	2b60      	cmp	r3, #96	@ 0x60
 8002690:	d02b      	beq.n	80026ea <HAL_CAN_IRQHandler+0x32a>
 8002692:	2b60      	cmp	r3, #96	@ 0x60
 8002694:	d82e      	bhi.n	80026f4 <HAL_CAN_IRQHandler+0x334>
 8002696:	2b50      	cmp	r3, #80	@ 0x50
 8002698:	d022      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x320>
 800269a:	2b50      	cmp	r3, #80	@ 0x50
 800269c:	d82a      	bhi.n	80026f4 <HAL_CAN_IRQHandler+0x334>
 800269e:	2b40      	cmp	r3, #64	@ 0x40
 80026a0:	d019      	beq.n	80026d6 <HAL_CAN_IRQHandler+0x316>
 80026a2:	2b40      	cmp	r3, #64	@ 0x40
 80026a4:	d826      	bhi.n	80026f4 <HAL_CAN_IRQHandler+0x334>
 80026a6:	2b30      	cmp	r3, #48	@ 0x30
 80026a8:	d010      	beq.n	80026cc <HAL_CAN_IRQHandler+0x30c>
 80026aa:	2b30      	cmp	r3, #48	@ 0x30
 80026ac:	d822      	bhi.n	80026f4 <HAL_CAN_IRQHandler+0x334>
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d002      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x2f8>
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d005      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026b6:	e01d      	b.n	80026f4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	f043 0308 	orr.w	r3, r3, #8
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026c0:	e019      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	f043 0310 	orr.w	r3, r3, #16
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026ca:	e014      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	f043 0320 	orr.w	r3, r3, #32
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026d4:	e00f      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026de:	e00a      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026e8:	e005      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026f2:	e000      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            break;
 80026f4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002704:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2204      	movs	r2, #4
 800270c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7fe fe51 	bl	80013c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	@ 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
	...

0800280c <__NVIC_SetPriorityGrouping>:
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4906      	ldr	r1, [pc, #24]	@ (80028a4 <__NVIC_EnableIRQ+0x34>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPendingIRQ>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	db0c      	blt.n	80028d4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	4907      	ldr	r1, [pc, #28]	@ (80028e0 <__NVIC_SetPendingIRQ+0x38>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	2001      	movs	r0, #1
 80028ca:	fa00 f202 	lsl.w	r2, r0, r2
 80028ce:	3340      	adds	r3, #64	@ 0x40
 80028d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <__NVIC_SetPriority>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	@ (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	@ (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <NVIC_EncodePriority>:
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	@ 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f1c3 0307 	rsb	r3, r3, #7
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf28      	it	cs
 8002956:	2304      	movcs	r3, #4
 8002958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3304      	adds	r3, #4
 800295e:	2b06      	cmp	r3, #6
 8002960:	d902      	bls.n	8002968 <NVIC_EncodePriority+0x30>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3b03      	subs	r3, #3
 8002966:	e000      	b.n	800296a <NVIC_EncodePriority+0x32>
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	401a      	ands	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002980:	f04f 31ff 	mov.w	r1, #4294967295
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	43d9      	mvns	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	4313      	orrs	r3, r2
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	@ 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <SysTick_Config>:
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029ac:	d301      	bcc.n	80029b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00f      	b.n	80029d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b2:	4a0a      	ldr	r2, [pc, #40]	@ (80029dc <SysTick_Config+0x40>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ba:	210f      	movs	r1, #15
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	f7ff ff90 	bl	80028e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <SysTick_Config+0x40>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ca:	4b04      	ldr	r3, [pc, #16]	@ (80029dc <SysTick_Config+0x40>)
 80029cc:	2207      	movs	r2, #7
 80029ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000e010 	.word	0xe000e010

080029e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ff0f 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b086      	sub	sp, #24
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a08:	f7ff ff24 	bl	8002854 <__NVIC_GetPriorityGrouping>
 8002a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	6978      	ldr	r0, [r7, #20]
 8002a14:	f7ff ff90 	bl	8002938 <NVIC_EncodePriority>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff5f 	bl	80028e4 <__NVIC_SetPriority>
}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff17 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ffa2 	bl	800299c <SysTick_Config>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff19 	bl	80028a8 <__NVIC_SetPendingIRQ>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d008      	beq.n	8002aa8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e020      	b.n	8002aea <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 020e 	bic.w	r2, r2, #14
 8002ab6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d005      	beq.n	8002b18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	e051      	b.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 020e 	bic.w	r2, r2, #14
 8002b26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a22      	ldr	r2, [pc, #136]	@ (8002bc8 <HAL_DMA_Abort_IT+0xd4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d029      	beq.n	8002b96 <HAL_DMA_Abort_IT+0xa2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a21      	ldr	r2, [pc, #132]	@ (8002bcc <HAL_DMA_Abort_IT+0xd8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d022      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x9e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd0 <HAL_DMA_Abort_IT+0xdc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01a      	beq.n	8002b8c <HAL_DMA_Abort_IT+0x98>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd4 <HAL_DMA_Abort_IT+0xe0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d012      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x92>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <HAL_DMA_Abort_IT+0xe4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00a      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x8c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bdc <HAL_DMA_Abort_IT+0xe8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d102      	bne.n	8002b7a <HAL_DMA_Abort_IT+0x86>
 8002b74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b78:	e00e      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b7e:	e00b      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b84:	e008      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b8a:	e005      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b90:	e002      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b92:	2310      	movs	r3, #16
 8002b94:	e000      	b.n	8002b98 <HAL_DMA_Abort_IT+0xa4>
 8002b96:	2301      	movs	r3, #1
 8002b98:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <HAL_DMA_Abort_IT+0xec>)
 8002b9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
    } 
  }
  return status;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40020008 	.word	0x40020008
 8002bcc:	4002001c 	.word	0x4002001c
 8002bd0:	40020030 	.word	0x40020030
 8002bd4:	40020044 	.word	0x40020044
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	4002006c 	.word	0x4002006c
 8002be0:	40020000 	.word	0x40020000

08002be4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bf2:	b2db      	uxtb	r3, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b08b      	sub	sp, #44	@ 0x2c
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c12:	e169      	b.n	8002ee8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c14:	2201      	movs	r2, #1
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	f040 8158 	bne.w	8002ee2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4a9a      	ldr	r2, [pc, #616]	@ (8002ea0 <HAL_GPIO_Init+0x2a0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d05e      	beq.n	8002cfa <HAL_GPIO_Init+0xfa>
 8002c3c:	4a98      	ldr	r2, [pc, #608]	@ (8002ea0 <HAL_GPIO_Init+0x2a0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d875      	bhi.n	8002d2e <HAL_GPIO_Init+0x12e>
 8002c42:	4a98      	ldr	r2, [pc, #608]	@ (8002ea4 <HAL_GPIO_Init+0x2a4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d058      	beq.n	8002cfa <HAL_GPIO_Init+0xfa>
 8002c48:	4a96      	ldr	r2, [pc, #600]	@ (8002ea4 <HAL_GPIO_Init+0x2a4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d86f      	bhi.n	8002d2e <HAL_GPIO_Init+0x12e>
 8002c4e:	4a96      	ldr	r2, [pc, #600]	@ (8002ea8 <HAL_GPIO_Init+0x2a8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d052      	beq.n	8002cfa <HAL_GPIO_Init+0xfa>
 8002c54:	4a94      	ldr	r2, [pc, #592]	@ (8002ea8 <HAL_GPIO_Init+0x2a8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d869      	bhi.n	8002d2e <HAL_GPIO_Init+0x12e>
 8002c5a:	4a94      	ldr	r2, [pc, #592]	@ (8002eac <HAL_GPIO_Init+0x2ac>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d04c      	beq.n	8002cfa <HAL_GPIO_Init+0xfa>
 8002c60:	4a92      	ldr	r2, [pc, #584]	@ (8002eac <HAL_GPIO_Init+0x2ac>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d863      	bhi.n	8002d2e <HAL_GPIO_Init+0x12e>
 8002c66:	4a92      	ldr	r2, [pc, #584]	@ (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d046      	beq.n	8002cfa <HAL_GPIO_Init+0xfa>
 8002c6c:	4a90      	ldr	r2, [pc, #576]	@ (8002eb0 <HAL_GPIO_Init+0x2b0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d85d      	bhi.n	8002d2e <HAL_GPIO_Init+0x12e>
 8002c72:	2b12      	cmp	r3, #18
 8002c74:	d82a      	bhi.n	8002ccc <HAL_GPIO_Init+0xcc>
 8002c76:	2b12      	cmp	r3, #18
 8002c78:	d859      	bhi.n	8002d2e <HAL_GPIO_Init+0x12e>
 8002c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c80 <HAL_GPIO_Init+0x80>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002cfb 	.word	0x08002cfb
 8002c84:	08002cd5 	.word	0x08002cd5
 8002c88:	08002ce7 	.word	0x08002ce7
 8002c8c:	08002d29 	.word	0x08002d29
 8002c90:	08002d2f 	.word	0x08002d2f
 8002c94:	08002d2f 	.word	0x08002d2f
 8002c98:	08002d2f 	.word	0x08002d2f
 8002c9c:	08002d2f 	.word	0x08002d2f
 8002ca0:	08002d2f 	.word	0x08002d2f
 8002ca4:	08002d2f 	.word	0x08002d2f
 8002ca8:	08002d2f 	.word	0x08002d2f
 8002cac:	08002d2f 	.word	0x08002d2f
 8002cb0:	08002d2f 	.word	0x08002d2f
 8002cb4:	08002d2f 	.word	0x08002d2f
 8002cb8:	08002d2f 	.word	0x08002d2f
 8002cbc:	08002d2f 	.word	0x08002d2f
 8002cc0:	08002d2f 	.word	0x08002d2f
 8002cc4:	08002cdd 	.word	0x08002cdd
 8002cc8:	08002cf1 	.word	0x08002cf1
 8002ccc:	4a79      	ldr	r2, [pc, #484]	@ (8002eb4 <HAL_GPIO_Init+0x2b4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cd2:	e02c      	b.n	8002d2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	623b      	str	r3, [r7, #32]
          break;
 8002cda:	e029      	b.n	8002d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	623b      	str	r3, [r7, #32]
          break;
 8002ce4:	e024      	b.n	8002d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	3308      	adds	r3, #8
 8002cec:	623b      	str	r3, [r7, #32]
          break;
 8002cee:	e01f      	b.n	8002d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	623b      	str	r3, [r7, #32]
          break;
 8002cf8:	e01a      	b.n	8002d30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d02:	2304      	movs	r3, #4
 8002d04:	623b      	str	r3, [r7, #32]
          break;
 8002d06:	e013      	b.n	8002d30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d10:	2308      	movs	r3, #8
 8002d12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	611a      	str	r2, [r3, #16]
          break;
 8002d1a:	e009      	b.n	8002d30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	615a      	str	r2, [r3, #20]
          break;
 8002d26:	e003      	b.n	8002d30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	623b      	str	r3, [r7, #32]
          break;
 8002d2c:	e000      	b.n	8002d30 <HAL_GPIO_Init+0x130>
          break;
 8002d2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2bff      	cmp	r3, #255	@ 0xff
 8002d34:	d801      	bhi.n	8002d3a <HAL_GPIO_Init+0x13a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	e001      	b.n	8002d3e <HAL_GPIO_Init+0x13e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2bff      	cmp	r3, #255	@ 0xff
 8002d44:	d802      	bhi.n	8002d4c <HAL_GPIO_Init+0x14c>
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	e002      	b.n	8002d52 <HAL_GPIO_Init+0x152>
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	3b08      	subs	r3, #8
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	210f      	movs	r1, #15
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	401a      	ands	r2, r3
 8002d64:	6a39      	ldr	r1, [r7, #32]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80b1 	beq.w	8002ee2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d80:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb8 <HAL_GPIO_Init+0x2b8>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb8 <HAL_GPIO_Init+0x2b8>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002eb8 <HAL_GPIO_Init+0x2b8>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d98:	4a48      	ldr	r2, [pc, #288]	@ (8002ebc <HAL_GPIO_Init+0x2bc>)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	220f      	movs	r2, #15
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a40      	ldr	r2, [pc, #256]	@ (8002ec0 <HAL_GPIO_Init+0x2c0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <HAL_GPIO_Init+0x1ec>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ec4 <HAL_GPIO_Init+0x2c4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00d      	beq.n	8002de8 <HAL_GPIO_Init+0x1e8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a3e      	ldr	r2, [pc, #248]	@ (8002ec8 <HAL_GPIO_Init+0x2c8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <HAL_GPIO_Init+0x1e4>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8002ecc <HAL_GPIO_Init+0x2cc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <HAL_GPIO_Init+0x1e0>
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e006      	b.n	8002dee <HAL_GPIO_Init+0x1ee>
 8002de0:	2304      	movs	r3, #4
 8002de2:	e004      	b.n	8002dee <HAL_GPIO_Init+0x1ee>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e002      	b.n	8002dee <HAL_GPIO_Init+0x1ee>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_GPIO_Init+0x1ee>
 8002dec:	2300      	movs	r3, #0
 8002dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df0:	f002 0203 	and.w	r2, r2, #3
 8002df4:	0092      	lsls	r2, r2, #2
 8002df6:	4093      	lsls	r3, r2
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dfe:	492f      	ldr	r1, [pc, #188]	@ (8002ebc <HAL_GPIO_Init+0x2bc>)
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e18:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	492c      	ldr	r1, [pc, #176]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e26:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	4928      	ldr	r1, [pc, #160]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e40:	4b23      	ldr	r3, [pc, #140]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	4922      	ldr	r1, [pc, #136]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60cb      	str	r3, [r1, #12]
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	491e      	ldr	r1, [pc, #120]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e68:	4b19      	ldr	r3, [pc, #100]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4918      	ldr	r1, [pc, #96]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e76:	4b16      	ldr	r3, [pc, #88]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	4914      	ldr	r1, [pc, #80]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d021      	beq.n	8002ed4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e90:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	490e      	ldr	r1, [pc, #56]	@ (8002ed0 <HAL_GPIO_Init+0x2d0>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	e021      	b.n	8002ee2 <HAL_GPIO_Init+0x2e2>
 8002e9e:	bf00      	nop
 8002ea0:	10320000 	.word	0x10320000
 8002ea4:	10310000 	.word	0x10310000
 8002ea8:	10220000 	.word	0x10220000
 8002eac:	10210000 	.word	0x10210000
 8002eb0:	10120000 	.word	0x10120000
 8002eb4:	10110000 	.word	0x10110000
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	40010800 	.word	0x40010800
 8002ec4:	40010c00 	.word	0x40010c00
 8002ec8:	40011000 	.word	0x40011000
 8002ecc:	40011400 	.word	0x40011400
 8002ed0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	4909      	ldr	r1, [pc, #36]	@ (8002f04 <HAL_GPIO_Init+0x304>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f47f ae8e 	bne.w	8002c14 <HAL_GPIO_Init+0x14>
  }
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	372c      	adds	r7, #44	@ 0x2c
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40010400 	.word	0x40010400

08002f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
 8002f14:	4613      	mov	r3, r2
 8002f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f18:	787b      	ldrb	r3, [r7, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f24:	e003      	b.n	8002f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f26:	887b      	ldrh	r3, [r7, #2]
 8002f28:	041a      	lsls	r2, r3, #16
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	611a      	str	r2, [r3, #16]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e12b      	b.n	80031a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fe fb30 	bl	80015c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	@ 0x24
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f9c:	f003 f9b8 	bl	8006310 <HAL_RCC_GetPCLK1Freq>
 8002fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4a81      	ldr	r2, [pc, #516]	@ (80031ac <HAL_I2C_Init+0x274>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d807      	bhi.n	8002fbc <HAL_I2C_Init+0x84>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4a80      	ldr	r2, [pc, #512]	@ (80031b0 <HAL_I2C_Init+0x278>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	bf94      	ite	ls
 8002fb4:	2301      	movls	r3, #1
 8002fb6:	2300      	movhi	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e006      	b.n	8002fca <HAL_I2C_Init+0x92>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a7d      	ldr	r2, [pc, #500]	@ (80031b4 <HAL_I2C_Init+0x27c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	bf94      	ite	ls
 8002fc4:	2301      	movls	r3, #1
 8002fc6:	2300      	movhi	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0e7      	b.n	80031a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a78      	ldr	r2, [pc, #480]	@ (80031b8 <HAL_I2C_Init+0x280>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0c9b      	lsrs	r3, r3, #18
 8002fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a6a      	ldr	r2, [pc, #424]	@ (80031ac <HAL_I2C_Init+0x274>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d802      	bhi.n	800300c <HAL_I2C_Init+0xd4>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	3301      	adds	r3, #1
 800300a:	e009      	b.n	8003020 <HAL_I2C_Init+0xe8>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	4a69      	ldr	r2, [pc, #420]	@ (80031bc <HAL_I2C_Init+0x284>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	3301      	adds	r3, #1
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	430b      	orrs	r3, r1
 8003026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003032:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	495c      	ldr	r1, [pc, #368]	@ (80031ac <HAL_I2C_Init+0x274>)
 800303c:	428b      	cmp	r3, r1
 800303e:	d819      	bhi.n	8003074 <HAL_I2C_Init+0x13c>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e59      	subs	r1, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fbb1 f3f3 	udiv	r3, r1, r3
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003054:	400b      	ands	r3, r1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_I2C_Init+0x138>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e59      	subs	r1, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fbb1 f3f3 	udiv	r3, r1, r3
 8003068:	3301      	adds	r3, #1
 800306a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306e:	e051      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 8003070:	2304      	movs	r3, #4
 8003072:	e04f      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d111      	bne.n	80030a0 <HAL_I2C_Init+0x168>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1e58      	subs	r0, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e012      	b.n	80030c6 <HAL_I2C_Init+0x18e>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e58      	subs	r0, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	0099      	lsls	r1, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Init+0x196>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e022      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10e      	bne.n	80030f4 <HAL_I2C_Init+0x1bc>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1e58      	subs	r0, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	440b      	add	r3, r1
 80030e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f2:	e00f      	b.n	8003114 <HAL_I2C_Init+0x1dc>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	0099      	lsls	r1, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	6809      	ldr	r1, [r1, #0]
 8003118:	4313      	orrs	r3, r2
 800311a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003142:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6911      	ldr	r1, [r2, #16]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68d2      	ldr	r2, [r2, #12]
 800314e:	4311      	orrs	r1, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	000186a0 	.word	0x000186a0
 80031b0:	001e847f 	.word	0x001e847f
 80031b4:	003d08ff 	.word	0x003d08ff
 80031b8:	431bde83 	.word	0x431bde83
 80031bc:	10624dd3 	.word	0x10624dd3

080031c0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d2:	2b80      	cmp	r3, #128	@ 0x80
 80031d4:	d103      	bne.n	80031de <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  }
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003202:	f7fe fc6f 	bl	8001ae4 <HAL_GetTick>
 8003206:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b20      	cmp	r3, #32
 8003212:	f040 80d9 	bne.w	80033c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2319      	movs	r3, #25
 800321c:	2201      	movs	r2, #1
 800321e:	496d      	ldr	r1, [pc, #436]	@ (80033d4 <HAL_I2C_Mem_Write+0x1ec>)
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f002 fa29 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
 800322e:	e0cc      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_I2C_Mem_Write+0x56>
 800323a:	2302      	movs	r3, #2
 800323c:	e0c5      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d007      	beq.n	8003264 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003272:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2221      	movs	r2, #33	@ 0x21
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2240      	movs	r2, #64	@ 0x40
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a4d      	ldr	r2, [pc, #308]	@ (80033d8 <HAL_I2C_Mem_Write+0x1f0>)
 80032a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032a6:	88f8      	ldrh	r0, [r7, #6]
 80032a8:	893a      	ldrh	r2, [r7, #8]
 80032aa:	8979      	ldrh	r1, [r7, #10]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4603      	mov	r3, r0
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f001 ffb8 	bl	800522c <I2C_RequestMemoryWrite>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d052      	beq.n	8003368 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e081      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f002 faee 	bl	80058ac <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d107      	bne.n	80032ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06b      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d11b      	bne.n	8003368 <HAL_I2C_Mem_Write+0x180>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d017      	beq.n	8003368 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1aa      	bne.n	80032c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f002 fae1 	bl	800593c <I2C_WaitOnBTFFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	2b04      	cmp	r3, #4
 8003386:	d107      	bne.n	8003398 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003396:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e016      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	00100002 	.word	0x00100002
 80033d8:	ffff0000 	.word	0xffff0000

080033dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08c      	sub	sp, #48	@ 0x30
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	817b      	strh	r3, [r7, #10]
 80033ee:	460b      	mov	r3, r1
 80033f0:	813b      	strh	r3, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033fa:	f7fe fb73 	bl	8001ae4 <HAL_GetTick>
 80033fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	f040 8250 	bne.w	80038ae <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2319      	movs	r3, #25
 8003414:	2201      	movs	r2, #1
 8003416:	4982      	ldr	r1, [pc, #520]	@ (8003620 <HAL_I2C_Mem_Read+0x244>)
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f002 f92d 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
 8003426:	e243      	b.n	80038b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Mem_Read+0x5a>
 8003432:	2302      	movs	r3, #2
 8003434:	e23c      	b.n	80038b0 <HAL_I2C_Mem_Read+0x4d4>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d007      	beq.n	800345c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2222      	movs	r2, #34	@ 0x22
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2240      	movs	r2, #64	@ 0x40
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003486:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800348c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a62      	ldr	r2, [pc, #392]	@ (8003624 <HAL_I2C_Mem_Read+0x248>)
 800349c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800349e:	88f8      	ldrh	r0, [r7, #6]
 80034a0:	893a      	ldrh	r2, [r7, #8]
 80034a2:	8979      	ldrh	r1, [r7, #10]
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	4603      	mov	r3, r0
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f001 ff52 	bl	8005358 <I2C_RequestMemoryRead>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e1f8      	b.n	80038b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d113      	bne.n	80034ee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e1cc      	b.n	8003888 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d11e      	bne.n	8003534 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003506:	b672      	cpsid	i
}
 8003508:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800352e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003530:	b662      	cpsie	i
}
 8003532:	e035      	b.n	80035a0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003538:	2b02      	cmp	r3, #2
 800353a:	d11e      	bne.n	800357a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800354a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800354c:	b672      	cpsid	i
}
 800354e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003576:	b662      	cpsie	i
}
 8003578:	e012      	b.n	80035a0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003588:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035a0:	e172      	b.n	8003888 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	f200 811f 	bhi.w	80037ea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d123      	bne.n	80035fc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f002 fa39 	bl	8005a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e173      	b.n	80038b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035fa:	e145      	b.n	8003888 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	2b02      	cmp	r3, #2
 8003602:	d152      	bne.n	80036aa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360a:	2200      	movs	r2, #0
 800360c:	4906      	ldr	r1, [pc, #24]	@ (8003628 <HAL_I2C_Mem_Read+0x24c>)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f002 f832 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e148      	b.n	80038b0 <HAL_I2C_Mem_Read+0x4d4>
 800361e:	bf00      	nop
 8003620:	00100002 	.word	0x00100002
 8003624:	ffff0000 	.word	0xffff0000
 8003628:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800362c:	b672      	cpsid	i
}
 800362e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003672:	b662      	cpsie	i
}
 8003674:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036a8:	e0ee      	b.n	8003888 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b0:	2200      	movs	r2, #0
 80036b2:	4981      	ldr	r1, [pc, #516]	@ (80038b8 <HAL_I2C_Mem_Read+0x4dc>)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f001 ffdf 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0f5      	b.n	80038b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036d4:	b672      	cpsid	i
}
 80036d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800370a:	4b6c      	ldr	r3, [pc, #432]	@ (80038bc <HAL_I2C_Mem_Read+0x4e0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	4a6b      	ldr	r2, [pc, #428]	@ (80038c0 <HAL_I2C_Mem_Read+0x4e4>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0a1a      	lsrs	r2, r3, #8
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00da      	lsls	r2, r3, #3
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	3b01      	subs	r3, #1
 8003728:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d118      	bne.n	8003762 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003752:	b662      	cpsie	i
}
 8003754:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0a6      	b.n	80038b0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d1d9      	bne.n	8003724 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800377e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037b2:	b662      	cpsie	i
}
 80037b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037e8:	e04e      	b.n	8003888 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f002 f91e 	bl	8005a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e058      	b.n	80038b0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d124      	bne.n	8003888 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	2b03      	cmp	r3, #3
 8003844:	d107      	bne.n	8003856 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003854:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	f47f ae88 	bne.w	80035a2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3728      	adds	r7, #40	@ 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	00010004 	.word	0x00010004
 80038bc:	20000000 	.word	0x20000000
 80038c0:	14f8b589 	.word	0x14f8b589

080038c4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	4608      	mov	r0, r1
 80038ce:	4611      	mov	r1, r2
 80038d0:	461a      	mov	r2, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	817b      	strh	r3, [r7, #10]
 80038d6:	460b      	mov	r3, r1
 80038d8:	813b      	strh	r3, [r7, #8]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	f040 808a 	bne.w	8003a04 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80038f0:	4b47      	ldr	r3, [pc, #284]	@ (8003a10 <HAL_I2C_Mem_Write_IT+0x14c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	08db      	lsrs	r3, r3, #3
 80038f6:	4a47      	ldr	r2, [pc, #284]	@ (8003a14 <HAL_I2C_Mem_Write_IT+0x150>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	0a1a      	lsrs	r2, r3, #8
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	009a      	lsls	r2, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3b01      	subs	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d112      	bne.n	800393c <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003938:	2302      	movs	r3, #2
 800393a:	e064      	b.n	8003a06 <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d0df      	beq.n	800390a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_I2C_Mem_Write_IT+0x94>
 8003954:	2302      	movs	r3, #2
 8003956:	e056      	b.n	8003a06 <HAL_I2C_Mem_Write_IT+0x142>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d007      	beq.n	800397e <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800398c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2221      	movs	r2, #33	@ 0x21
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2240      	movs	r2, #64	@ 0x40
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a3a      	ldr	r2, [r7, #32]
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a16      	ldr	r2, [pc, #88]	@ (8003a18 <HAL_I2C_Mem_Write_IT+0x154>)
 80039be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80039c0:	897a      	ldrh	r2, [r7, #10]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80039c6:	893a      	ldrh	r2, [r7, #8]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80039cc:	88fa      	ldrh	r2, [r7, #6]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039e6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80039fe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	20000000 	.word	0x20000000
 8003a14:	14f8b589 	.word	0x14f8b589
 8003a18:	ffff0000 	.word	0xffff0000

08003a1c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	@ 0x28
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7fe f85a 	bl	8001ae4 <HAL_GetTick>
 8003a30:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	f040 8111 	bne.w	8003c66 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2319      	movs	r3, #25
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4988      	ldr	r1, [pc, #544]	@ (8003c70 <HAL_I2C_IsDeviceReady+0x254>)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f001 fe12 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e104      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_I2C_IsDeviceReady+0x50>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e0fd      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d007      	beq.n	8003a92 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2224      	movs	r2, #36	@ 0x24
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a70      	ldr	r2, [pc, #448]	@ (8003c74 <HAL_I2C_IsDeviceReady+0x258>)
 8003ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f001 fdd0 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aec:	d103      	bne.n	8003af6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0b6      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b08:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7fd ffeb 	bl	8001ae4 <HAL_GetTick>
 8003b0e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b3e:	e025      	b.n	8003b8c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b40:	f7fd ffd0 	bl	8001ae4 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <HAL_I2C_IsDeviceReady+0x13a>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	22a0      	movs	r2, #160	@ 0xa0
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b96:	d005      	beq.n	8003ba4 <HAL_I2C_IsDeviceReady+0x188>
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <HAL_I2C_IsDeviceReady+0x188>
 8003b9e:	7dbb      	ldrb	r3, [r7, #22]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0cd      	beq.n	8003b40 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d129      	bne.n	8003c0e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2319      	movs	r3, #25
 8003be6:	2201      	movs	r2, #1
 8003be8:	4921      	ldr	r1, [pc, #132]	@ (8003c70 <HAL_I2C_IsDeviceReady+0x254>)
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f001 fd44 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e036      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e02c      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c26:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2319      	movs	r3, #25
 8003c2e:	2201      	movs	r2, #1
 8003c30:	490f      	ldr	r1, [pc, #60]	@ (8003c70 <HAL_I2C_IsDeviceReady+0x254>)
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f001 fd20 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e012      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	3301      	adds	r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	f4ff af32 	bcc.w	8003ab6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	00100002 	.word	0x00100002
 8003c74:	ffff0000 	.word	0xffff0000

08003c78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d003      	beq.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x38>
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b40      	cmp	r3, #64	@ 0x40
 8003cac:	f040 80c1 	bne.w	8003e32 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10d      	bne.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003cd0:	d003      	beq.n	8003cda <HAL_I2C_EV_IRQHandler+0x62>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003cd8:	d101      	bne.n	8003cde <HAL_I2C_EV_IRQHandler+0x66>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x68>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	f000 8132 	beq.w	8003f4a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00c      	beq.n	8003d0a <HAL_I2C_EV_IRQHandler+0x92>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	0a5b      	lsrs	r3, r3, #9
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f001 ff22 	bl	8005b46 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fce1 	bl	80046ca <I2C_Master_SB>
 8003d08:	e092      	b.n	8003e30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	08db      	lsrs	r3, r3, #3
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <HAL_I2C_EV_IRQHandler+0xb2>
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	0a5b      	lsrs	r3, r3, #9
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fd56 	bl	80047d4 <I2C_Master_ADD10>
 8003d28:	e082      	b.n	8003e30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_I2C_EV_IRQHandler+0xd2>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	0a5b      	lsrs	r3, r3, #9
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fd6f 	bl	8004826 <I2C_Master_ADDR>
 8003d48:	e072      	b.n	8003e30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d03b      	beq.n	8003dce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d64:	f000 80f3 	beq.w	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	09db      	lsrs	r3, r3, #7
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00f      	beq.n	8003d94 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	0a9b      	lsrs	r3, r3, #10
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d103      	bne.n	8003d94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f939 	bl	8004004 <I2C_MasterTransmit_TXE>
 8003d92:	e04d      	b.n	8003e30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80d6 	beq.w	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	0a5b      	lsrs	r3, r3, #9
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80cf 	beq.w	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003db0:	7bbb      	ldrb	r3, [r7, #14]
 8003db2:	2b21      	cmp	r3, #33	@ 0x21
 8003db4:	d103      	bne.n	8003dbe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9c0 	bl	800413c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dbc:	e0c7      	b.n	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b40      	cmp	r3, #64	@ 0x40
 8003dc2:	f040 80c4 	bne.w	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa2e 	bl	8004228 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dcc:	e0bf      	b.n	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ddc:	f000 80b7 	beq.w	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	099b      	lsrs	r3, r3, #6
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00f      	beq.n	8003e0c <HAL_I2C_EV_IRQHandler+0x194>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	0a9b      	lsrs	r3, r3, #10
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d009      	beq.n	8003e0c <HAL_I2C_EV_IRQHandler+0x194>
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	089b      	lsrs	r3, r3, #2
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d103      	bne.n	8003e0c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 faa7 	bl	8004358 <I2C_MasterReceive_RXNE>
 8003e0a:	e011      	b.n	8003e30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	089b      	lsrs	r3, r3, #2
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 809a 	beq.w	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	0a5b      	lsrs	r3, r3, #9
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8093 	beq.w	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fb5d 	bl	80044e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e2e:	e08e      	b.n	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e30:	e08d      	b.n	8003f4e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	e007      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d012      	beq.n	8003e86 <HAL_I2C_EV_IRQHandler+0x20e>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	0a5b      	lsrs	r3, r3, #9
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00c      	beq.n	8003e86 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e7c:	69b9      	ldr	r1, [r7, #24]
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 ff28 	bl	8004cd4 <I2C_Slave_ADDR>
 8003e84:	e066      	b.n	8003f54 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_I2C_EV_IRQHandler+0x22e>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	0a5b      	lsrs	r3, r3, #9
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 ff62 	bl	8004d68 <I2C_Slave_STOPF>
 8003ea4:	e056      	b.n	8003f54 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ea6:	7bbb      	ldrb	r3, [r7, #14]
 8003ea8:	2b21      	cmp	r3, #33	@ 0x21
 8003eaa:	d002      	beq.n	8003eb2 <HAL_I2C_EV_IRQHandler+0x23a>
 8003eac:	7bbb      	ldrb	r3, [r7, #14]
 8003eae:	2b29      	cmp	r3, #41	@ 0x29
 8003eb0:	d125      	bne.n	8003efe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	09db      	lsrs	r3, r3, #7
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00f      	beq.n	8003ede <HAL_I2C_EV_IRQHandler+0x266>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	0a9b      	lsrs	r3, r3, #10
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_I2C_EV_IRQHandler+0x266>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fe40 	bl	8004b5c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003edc:	e039      	b.n	8003f52 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d033      	beq.n	8003f52 <HAL_I2C_EV_IRQHandler+0x2da>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	0a5b      	lsrs	r3, r3, #9
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02d      	beq.n	8003f52 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fe6d 	bl	8004bd6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003efc:	e029      	b.n	8003f52 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00f      	beq.n	8003f2a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	0a9b      	lsrs	r3, r3, #10
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d103      	bne.n	8003f2a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fe77 	bl	8004c16 <I2C_SlaveReceive_RXNE>
 8003f28:	e014      	b.n	8003f54 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00e      	beq.n	8003f54 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	0a5b      	lsrs	r3, r3, #9
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fea5 	bl	8004c92 <I2C_SlaveReceive_BTF>
 8003f48:	e004      	b.n	8003f54 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f52:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	70fb      	strb	r3, [r7, #3]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004012:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800401a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004026:	2b00      	cmp	r3, #0
 8004028:	d150      	bne.n	80040cc <I2C_MasterTransmit_TXE+0xc8>
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b21      	cmp	r3, #33	@ 0x21
 800402e:	d14d      	bne.n	80040cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b08      	cmp	r3, #8
 8004034:	d01d      	beq.n	8004072 <I2C_MasterTransmit_TXE+0x6e>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b20      	cmp	r3, #32
 800403a:	d01a      	beq.n	8004072 <I2C_MasterTransmit_TXE+0x6e>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004042:	d016      	beq.n	8004072 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004052:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2211      	movs	r2, #17
 8004058:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff75 	bl	8003f5a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004070:	e060      	b.n	8004134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004080:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004090:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b40      	cmp	r3, #64	@ 0x40
 80040aa:	d107      	bne.n	80040bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fd f8b3 	bl	8001220 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040ba:	e03b      	b.n	8004134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ff48 	bl	8003f5a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040ca:	e033      	b.n	8004134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	2b21      	cmp	r3, #33	@ 0x21
 80040d0:	d005      	beq.n	80040de <I2C_MasterTransmit_TXE+0xda>
 80040d2:	7bbb      	ldrb	r3, [r7, #14]
 80040d4:	2b40      	cmp	r3, #64	@ 0x40
 80040d6:	d12d      	bne.n	8004134 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b22      	cmp	r3, #34	@ 0x22
 80040dc:	d12a      	bne.n	8004134 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d108      	bne.n	80040fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80040f8:	e01c      	b.n	8004134 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b40      	cmp	r3, #64	@ 0x40
 8004104:	d103      	bne.n	800410e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f88e 	bl	8004228 <I2C_MemoryTransmit_TXE_BTF>
}
 800410c:	e012      	b.n	8004134 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004132:	e7ff      	b.n	8004134 <I2C_MasterTransmit_TXE+0x130>
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004148:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b21      	cmp	r3, #33	@ 0x21
 8004154:	d164      	bne.n	8004220 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d012      	beq.n	8004186 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	781a      	ldrb	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004184:	e04c      	b.n	8004220 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d01d      	beq.n	80041c8 <I2C_MasterTransmit_BTF+0x8c>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b20      	cmp	r3, #32
 8004190:	d01a      	beq.n	80041c8 <I2C_MasterTransmit_BTF+0x8c>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004198:	d016      	beq.n	80041c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2211      	movs	r2, #17
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff feca 	bl	8003f5a <HAL_I2C_MasterTxCpltCallback>
}
 80041c6:	e02b      	b.n	8004220 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	d107      	bne.n	8004212 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd f808 	bl	8001220 <HAL_I2C_MemTxCpltCallback>
}
 8004210:	e006      	b.n	8004220 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff fe9d 	bl	8003f5a <HAL_I2C_MasterTxCpltCallback>
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004236:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11d      	bne.n	800427c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10b      	bne.n	8004260 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424c:	b2da      	uxtb	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004258:	1c9a      	adds	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800425e:	e077      	b.n	8004350 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004264:	b29b      	uxth	r3, r3
 8004266:	121b      	asrs	r3, r3, #8
 8004268:	b2da      	uxtb	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800427a:	e069      	b.n	8004350 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004280:	2b01      	cmp	r3, #1
 8004282:	d10b      	bne.n	800429c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004288:	b2da      	uxtb	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800429a:	e059      	b.n	8004350 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d152      	bne.n	800434a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b22      	cmp	r3, #34	@ 0x22
 80042a8:	d10d      	bne.n	80042c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042c4:	e044      	b.n	8004350 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2b21      	cmp	r3, #33	@ 0x21
 80042d4:	d112      	bne.n	80042fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80042fa:	e029      	b.n	8004350 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d124      	bne.n	8004350 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b21      	cmp	r3, #33	@ 0x21
 800430a:	d121      	bne.n	8004350 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800431a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fc ff6c 	bl	8001220 <HAL_I2C_MemTxCpltCallback>
}
 8004348:	e002      	b.n	8004350 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fe ff38 	bl	80031c0 <I2C_Flush_DR>
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b22      	cmp	r3, #34	@ 0x22
 800436a:	f040 80b9 	bne.w	80044e0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d921      	bls.n	80043c6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	f040 8096 	bne.w	80044e0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80043c4:	e08c      	b.n	80044e0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d07f      	beq.n	80044ce <I2C_MasterReceive_RXNE+0x176>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d002      	beq.n	80043da <I2C_MasterReceive_RXNE+0x82>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d179      	bne.n	80044ce <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f001 faf6 	bl	80059cc <I2C_WaitOnSTOPRequestThroughIT>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d14c      	bne.n	8004480 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004404:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d10a      	bne.n	8004456 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fdbd 	bl	8003fce <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004454:	e044      	b.n	80044e0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d002      	beq.n	800446a <I2C_MasterReceive_RXNE+0x112>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b20      	cmp	r3, #32
 8004468:	d103      	bne.n	8004472 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004470:	e002      	b.n	8004478 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2212      	movs	r2, #18
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff fd77 	bl	8003f6c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800447e:	e02f      	b.n	80044e0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800448e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fd8a 	bl	8003fe0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044cc:	e008      	b.n	80044e0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044dc:	605a      	str	r2, [r3, #4]
}
 80044de:	e7ff      	b.n	80044e0 <I2C_MasterReceive_RXNE+0x188>
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d11b      	bne.n	8004538 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800450e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004536:	e0c4      	b.n	80046c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b03      	cmp	r3, #3
 8004540:	d129      	bne.n	8004596 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004550:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d00a      	beq.n	800456e <I2C_MasterReceive_BTF+0x86>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004594:	e095      	b.n	80046c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d17d      	bne.n	800469c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d002      	beq.n	80045ac <I2C_MasterReceive_BTF+0xc4>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d108      	bne.n	80045be <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e016      	b.n	80045ec <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d002      	beq.n	80045ca <I2C_MasterReceive_BTF+0xe2>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d108      	bne.n	80045dc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e007      	b.n	80045ec <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004646:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b40      	cmp	r3, #64	@ 0x40
 800465a:	d10a      	bne.n	8004672 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff fcaf 	bl	8003fce <HAL_I2C_MemRxCpltCallback>
}
 8004670:	e027      	b.n	80046c2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d002      	beq.n	8004686 <I2C_MasterReceive_BTF+0x19e>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b20      	cmp	r3, #32
 8004684:	d103      	bne.n	800468e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	@ 0x30
 800468c:	e002      	b.n	8004694 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2212      	movs	r2, #18
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fc69 	bl	8003f6c <HAL_I2C_MasterRxCpltCallback>
}
 800469a:	e012      	b.n	80046c2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b40      	cmp	r3, #64	@ 0x40
 80046dc:	d117      	bne.n	800470e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80046f8:	e067      	b.n	80047ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]
}
 800470c:	e05d      	b.n	80047ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004716:	d133      	bne.n	8004780 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b21      	cmp	r3, #33	@ 0x21
 8004722:	d109      	bne.n	8004738 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004734:	611a      	str	r2, [r3, #16]
 8004736:	e008      	b.n	800474a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	b2da      	uxtb	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474e:	2b00      	cmp	r3, #0
 8004750:	d004      	beq.n	800475c <I2C_Master_SB+0x92>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	d108      	bne.n	800476e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	2b00      	cmp	r3, #0
 8004762:	d032      	beq.n	80047ca <I2C_Master_SB+0x100>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02d      	beq.n	80047ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800477c:	605a      	str	r2, [r3, #4]
}
 800477e:	e024      	b.n	80047ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10e      	bne.n	80047a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478c:	b29b      	uxth	r3, r3
 800478e:	11db      	asrs	r3, r3, #7
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0306 	and.w	r3, r3, #6
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f063 030f 	orn	r3, r3, #15
 800479c:	b2da      	uxtb	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]
}
 80047a4:	e011      	b.n	80047ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10d      	bne.n	80047ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	11db      	asrs	r3, r3, #7
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0306 	and.w	r3, r3, #6
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f063 030e 	orn	r3, r3, #14
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	611a      	str	r2, [r3, #16]
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <I2C_Master_ADD10+0x26>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d108      	bne.n	800480c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00c      	beq.n	800481c <I2C_Master_ADD10+0x48>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800481a:	605a      	str	r2, [r3, #4]
  }
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004826:	b480      	push	{r7}
 8004828:	b091      	sub	sp, #68	@ 0x44
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004834:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b22      	cmp	r3, #34	@ 0x22
 800484e:	f040 8174 	bne.w	8004b3a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <I2C_Master_ADDR+0x54>
 800485a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800485e:	2b40      	cmp	r3, #64	@ 0x40
 8004860:	d10b      	bne.n	800487a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004862:	2300      	movs	r3, #0
 8004864:	633b      	str	r3, [r7, #48]	@ 0x30
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	633b      	str	r3, [r7, #48]	@ 0x30
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	633b      	str	r3, [r7, #48]	@ 0x30
 8004876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004878:	e16b      	b.n	8004b52 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487e:	2b00      	cmp	r3, #0
 8004880:	d11d      	bne.n	80048be <I2C_Master_ADDR+0x98>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800488a:	d118      	bne.n	80048be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488c:	2300      	movs	r3, #0
 800488e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80048bc:	e149      	b.n	8004b52 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d113      	bne.n	80048f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c8:	2300      	movs	r3, #0
 80048ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e120      	b.n	8004b32 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	f040 808a 	bne.w	8004a10 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80048fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004902:	d137      	bne.n	8004974 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004912:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800491e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004922:	d113      	bne.n	800494c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004932:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004934:	2300      	movs	r3, #0
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	e0f2      	b.n	8004b32 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800494c:	2300      	movs	r3, #0
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	623b      	str	r3, [r7, #32]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e0de      	b.n	8004b32 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004976:	2b08      	cmp	r3, #8
 8004978:	d02e      	beq.n	80049d8 <I2C_Master_ADDR+0x1b2>
 800497a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800497c:	2b20      	cmp	r3, #32
 800497e:	d02b      	beq.n	80049d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004982:	2b12      	cmp	r3, #18
 8004984:	d102      	bne.n	800498c <I2C_Master_ADDR+0x166>
 8004986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004988:	2b01      	cmp	r3, #1
 800498a:	d125      	bne.n	80049d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800498c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498e:	2b04      	cmp	r3, #4
 8004990:	d00e      	beq.n	80049b0 <I2C_Master_ADDR+0x18a>
 8004992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004994:	2b02      	cmp	r3, #2
 8004996:	d00b      	beq.n	80049b0 <I2C_Master_ADDR+0x18a>
 8004998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499a:	2b10      	cmp	r3, #16
 800499c:	d008      	beq.n	80049b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e007      	b.n	80049c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	e0ac      	b.n	8004b32 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e8:	2300      	movs	r3, #0
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e090      	b.n	8004b32 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d158      	bne.n	8004acc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d021      	beq.n	8004a64 <I2C_Master_ADDR+0x23e>
 8004a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d01e      	beq.n	8004a64 <I2C_Master_ADDR+0x23e>
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d01b      	beq.n	8004a64 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a3a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e012      	b.n	8004a8a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a98:	d14b      	bne.n	8004b32 <I2C_Master_ADDR+0x30c>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004aa0:	d00b      	beq.n	8004aba <I2C_Master_ADDR+0x294>
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d008      	beq.n	8004aba <I2C_Master_ADDR+0x294>
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d005      	beq.n	8004aba <I2C_Master_ADDR+0x294>
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d002      	beq.n	8004aba <I2C_Master_ADDR+0x294>
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d13b      	bne.n	8004b32 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	e032      	b.n	8004b32 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ada:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ae6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aea:	d117      	bne.n	8004b1c <I2C_Master_ADDR+0x2f6>
 8004aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004af2:	d00b      	beq.n	8004b0c <I2C_Master_ADDR+0x2e6>
 8004af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d008      	beq.n	8004b0c <I2C_Master_ADDR+0x2e6>
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d005      	beq.n	8004b0c <I2C_Master_ADDR+0x2e6>
 8004b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d002      	beq.n	8004b0c <I2C_Master_ADDR+0x2e6>
 8004b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d107      	bne.n	8004b1c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b1a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b38:	e00b      	b.n	8004b52 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
}
 8004b50:	e7ff      	b.n	8004b52 <I2C_Master_ADDR+0x32c>
 8004b52:	bf00      	nop
 8004b54:	3744      	adds	r7, #68	@ 0x44
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d02b      	beq.n	8004bce <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7a:	781a      	ldrb	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d114      	bne.n	8004bce <I2C_SlaveTransmit_TXE+0x72>
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b29      	cmp	r3, #41	@ 0x29
 8004ba8:	d111      	bne.n	8004bce <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2221      	movs	r2, #33	@ 0x21
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2228      	movs	r2, #40	@ 0x28
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff f9d8 	bl	8003f7e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d011      	beq.n	8004c0c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bec:	781a      	ldrb	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02c      	beq.n	8004c8a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d114      	bne.n	8004c8a <I2C_SlaveReceive_RXNE+0x74>
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c64:	d111      	bne.n	8004c8a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2222      	movs	r2, #34	@ 0x22
 8004c7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2228      	movs	r2, #40	@ 0x28
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff f983 	bl	8003f90 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d012      	beq.n	8004cca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004cee:	2b28      	cmp	r3, #40	@ 0x28
 8004cf0:	d127      	bne.n	8004d42 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d00:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	089b      	lsrs	r3, r3, #2
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	09db      	lsrs	r3, r3, #7
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	81bb      	strh	r3, [r7, #12]
 8004d24:	e002      	b.n	8004d2c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d34:	89ba      	ldrh	r2, [r7, #12]
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff f931 	bl	8003fa2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d40:	e00e      	b.n	8004d60 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d76:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d86:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc4:	d172      	bne.n	8004eac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	2b22      	cmp	r3, #34	@ 0x22
 8004dca:	d002      	beq.n	8004dd2 <I2C_Slave_STOPF+0x6a>
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dd0:	d135      	bne.n	8004e3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dee:	f043 0204 	orr.w	r2, r3, #4
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fd feea 	bl	8002be4 <HAL_DMA_GetState>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d049      	beq.n	8004eaa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1a:	4a69      	ldr	r2, [pc, #420]	@ (8004fc0 <I2C_Slave_STOPF+0x258>)
 8004e1c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fd fe66 	bl	8002af4 <HAL_DMA_Abort_IT>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d03d      	beq.n	8004eaa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e3c:	e035      	b.n	8004eaa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	f043 0204 	orr.w	r2, r3, #4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fd feb4 	bl	8002be4 <HAL_DMA_GetState>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d014      	beq.n	8004eac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e86:	4a4e      	ldr	r2, [pc, #312]	@ (8004fc0 <I2C_Slave_STOPF+0x258>)
 8004e88:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fd fe30 	bl	8002af4 <HAL_DMA_Abort_IT>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4798      	blx	r3
 8004ea8:	e000      	b.n	8004eac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004eaa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d03e      	beq.n	8004f34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d112      	bne.n	8004eea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef4:	2b40      	cmp	r3, #64	@ 0x40
 8004ef6:	d112      	bne.n	8004f1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f043 0204 	orr.w	r2, r3, #4
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f843 	bl	8004fc8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f42:	e039      	b.n	8004fb8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f48:	d109      	bne.n	8004f5e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2228      	movs	r2, #40	@ 0x28
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff f819 	bl	8003f90 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b28      	cmp	r3, #40	@ 0x28
 8004f68:	d111      	bne.n	8004f8e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a15      	ldr	r2, [pc, #84]	@ (8004fc4 <I2C_Slave_STOPF+0x25c>)
 8004f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff f818 	bl	8003fbc <HAL_I2C_ListenCpltCallback>
}
 8004f8c:	e014      	b.n	8004fb8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f92:	2b22      	cmp	r3, #34	@ 0x22
 8004f94:	d002      	beq.n	8004f9c <I2C_Slave_STOPF+0x234>
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	2b22      	cmp	r3, #34	@ 0x22
 8004f9a:	d10d      	bne.n	8004fb8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fe ffec 	bl	8003f90 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	08005529 	.word	0x08005529
 8004fc4:	ffff0000 	.word	0xffff0000

08004fc8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fe0:	7bbb      	ldrb	r3, [r7, #14]
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d002      	beq.n	8004fec <I2C_ITError+0x24>
 8004fe6:	7bbb      	ldrb	r3, [r7, #14]
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	d10a      	bne.n	8005002 <I2C_ITError+0x3a>
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b22      	cmp	r3, #34	@ 0x22
 8004ff0:	d107      	bne.n	8005002 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005000:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005008:	2b28      	cmp	r3, #40	@ 0x28
 800500a:	d107      	bne.n	800501c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2228      	movs	r2, #40	@ 0x28
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800501a:	e015      	b.n	8005048 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800502a:	d00a      	beq.n	8005042 <I2C_ITError+0x7a>
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b60      	cmp	r3, #96	@ 0x60
 8005030:	d007      	beq.n	8005042 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005056:	d162      	bne.n	800511e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005066:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b01      	cmp	r3, #1
 8005074:	d020      	beq.n	80050b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800507a:	4a6a      	ldr	r2, [pc, #424]	@ (8005224 <I2C_ITError+0x25c>)
 800507c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005082:	4618      	mov	r0, r3
 8005084:	f7fd fd36 	bl	8002af4 <HAL_DMA_Abort_IT>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8089 	beq.w	80051a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050b2:	4610      	mov	r0, r2
 80050b4:	4798      	blx	r3
 80050b6:	e074      	b.n	80051a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050bc:	4a59      	ldr	r2, [pc, #356]	@ (8005224 <I2C_ITError+0x25c>)
 80050be:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fd fd15 	bl	8002af4 <HAL_DMA_Abort_IT>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d068      	beq.n	80051a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050da:	2b40      	cmp	r3, #64	@ 0x40
 80050dc:	d10b      	bne.n	80050f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0201 	bic.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005118:	4610      	mov	r0, r2
 800511a:	4798      	blx	r3
 800511c:	e041      	b.n	80051a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b60      	cmp	r3, #96	@ 0x60
 8005128:	d125      	bne.n	8005176 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005142:	2b40      	cmp	r3, #64	@ 0x40
 8005144:	d10b      	bne.n	800515e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fe ff3f 	bl	8003ff2 <HAL_I2C_AbortCpltCallback>
 8005174:	e015      	b.n	80051a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005180:	2b40      	cmp	r3, #64	@ 0x40
 8005182:	d10b      	bne.n	800519c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fe ff1f 	bl	8003fe0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10e      	bne.n	80051d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d113      	bne.n	800521c <I2C_ITError+0x254>
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b28      	cmp	r3, #40	@ 0x28
 80051f8:	d110      	bne.n	800521c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005228 <I2C_ITError+0x260>)
 80051fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fe fed0 	bl	8003fbc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	08005529 	.word	0x08005529
 8005228:	ffff0000 	.word	0xffff0000

0800522c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	461a      	mov	r2, r3
 800523a:	4603      	mov	r3, r0
 800523c:	817b      	strh	r3, [r7, #10]
 800523e:	460b      	mov	r3, r1
 8005240:	813b      	strh	r3, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005254:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	2200      	movs	r2, #0
 800525e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fa08 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800527c:	d103      	bne.n	8005286 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005284:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e05f      	b.n	800534a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800528a:	897b      	ldrh	r3, [r7, #10]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005298:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	6a3a      	ldr	r2, [r7, #32]
 800529e:	492d      	ldr	r1, [pc, #180]	@ (8005354 <I2C_RequestMemoryWrite+0x128>)
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fa63 	bl	800576c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e04c      	b.n	800534a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c8:	6a39      	ldr	r1, [r7, #32]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 faee 	bl	80058ac <I2C_WaitOnTXEFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00d      	beq.n	80052f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d107      	bne.n	80052ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e02b      	b.n	800534a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d105      	bne.n	8005304 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052f8:	893b      	ldrh	r3, [r7, #8]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	611a      	str	r2, [r3, #16]
 8005302:	e021      	b.n	8005348 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	b29b      	uxth	r3, r3
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	6a39      	ldr	r1, [r7, #32]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fac8 	bl	80058ac <I2C_WaitOnTXEFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	2b04      	cmp	r3, #4
 8005328:	d107      	bne.n	800533a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005338:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e005      	b.n	800534a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800533e:	893b      	ldrh	r3, [r7, #8]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	00010002 	.word	0x00010002

08005358 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	4608      	mov	r0, r1
 8005362:	4611      	mov	r1, r2
 8005364:	461a      	mov	r2, r3
 8005366:	4603      	mov	r3, r0
 8005368:	817b      	strh	r3, [r7, #10]
 800536a:	460b      	mov	r3, r1
 800536c:	813b      	strh	r3, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005380:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005390:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	2200      	movs	r2, #0
 800539a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f96a 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053b8:	d103      	bne.n	80053c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e0aa      	b.n	800551c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053c6:	897b      	ldrh	r3, [r7, #10]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	4952      	ldr	r1, [pc, #328]	@ (8005524 <I2C_RequestMemoryRead+0x1cc>)
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f9c5 	bl	800576c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e097      	b.n	800551c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005404:	6a39      	ldr	r1, [r7, #32]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fa50 	bl	80058ac <I2C_WaitOnTXEFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00d      	beq.n	800542e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	2b04      	cmp	r3, #4
 8005418:	d107      	bne.n	800542a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005428:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e076      	b.n	800551c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d105      	bne.n	8005440 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005434:	893b      	ldrh	r3, [r7, #8]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	611a      	str	r2, [r3, #16]
 800543e:	e021      	b.n	8005484 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005440:	893b      	ldrh	r3, [r7, #8]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	b29b      	uxth	r3, r3
 8005446:	b2da      	uxtb	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800544e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005450:	6a39      	ldr	r1, [r7, #32]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fa2a 	bl	80058ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00d      	beq.n	800547a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	2b04      	cmp	r3, #4
 8005464:	d107      	bne.n	8005476 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005474:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e050      	b.n	800551c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800547a:	893b      	ldrh	r3, [r7, #8]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005486:	6a39      	ldr	r1, [r7, #32]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fa0f 	bl	80058ac <I2C_WaitOnTXEFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	2b04      	cmp	r3, #4
 800549a:	d107      	bne.n	80054ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e035      	b.n	800551c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f8d3 	bl	8005678 <I2C_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e6:	d103      	bne.n	80054f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e013      	b.n	800551c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054f4:	897b      	ldrh	r3, [r7, #10]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	6a3a      	ldr	r2, [r7, #32]
 8005508:	4906      	ldr	r1, [pc, #24]	@ (8005524 <I2C_RequestMemoryRead+0x1cc>)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f92e 	bl	800576c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	00010002 	.word	0x00010002

08005528 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005540:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005542:	4b4b      	ldr	r3, [pc, #300]	@ (8005670 <I2C_DMAAbort+0x148>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	08db      	lsrs	r3, r3, #3
 8005548:	4a4a      	ldr	r2, [pc, #296]	@ (8005674 <I2C_DMAAbort+0x14c>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	0a1a      	lsrs	r2, r3, #8
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	00da      	lsls	r2, r3, #3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800556e:	e00a      	b.n	8005586 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3b01      	subs	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005584:	d0ea      	beq.n	800555c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005592:	2200      	movs	r2, #0
 8005594:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a2:	2200      	movs	r2, #0
 80055a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2200      	movs	r2, #0
 80055ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c8:	2200      	movs	r2, #0
 80055ca:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d8:	2200      	movs	r2, #0
 80055da:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0201 	bic.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b60      	cmp	r3, #96	@ 0x60
 80055f6:	d10e      	bne.n	8005616 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2200      	movs	r2, #0
 800560c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800560e:	6978      	ldr	r0, [r7, #20]
 8005610:	f7fe fcef 	bl	8003ff2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005614:	e027      	b.n	8005666 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005616:	7cfb      	ldrb	r3, [r7, #19]
 8005618:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800561c:	2b28      	cmp	r3, #40	@ 0x28
 800561e:	d117      	bne.n	8005650 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800563e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2200      	movs	r2, #0
 8005644:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2228      	movs	r2, #40	@ 0x28
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800564e:	e007      	b.n	8005660 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005660:	6978      	ldr	r0, [r7, #20]
 8005662:	f7fe fcbd 	bl	8003fe0 <HAL_I2C_ErrorCallback>
}
 8005666:	bf00      	nop
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000000 	.word	0x20000000
 8005674:	14f8b589 	.word	0x14f8b589

08005678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	4613      	mov	r3, r2
 8005686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005688:	e048      	b.n	800571c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d044      	beq.n	800571c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7fc fa27 	bl	8001ae4 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d139      	bne.n	800571c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	0c1b      	lsrs	r3, r3, #16
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d10d      	bne.n	80056ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	43da      	mvns	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4013      	ands	r3, r2
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bf0c      	ite	eq
 80056c4:	2301      	moveq	r3, #1
 80056c6:	2300      	movne	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	e00c      	b.n	80056e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	43da      	mvns	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	4013      	ands	r3, r2
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bf0c      	ite	eq
 80056e0:	2301      	moveq	r3, #1
 80056e2:	2300      	movne	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d116      	bne.n	800571c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e023      	b.n	8005764 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	0c1b      	lsrs	r3, r3, #16
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b01      	cmp	r3, #1
 8005724:	d10d      	bne.n	8005742 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	43da      	mvns	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4013      	ands	r3, r2
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	bf0c      	ite	eq
 8005738:	2301      	moveq	r3, #1
 800573a:	2300      	movne	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	e00c      	b.n	800575c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	43da      	mvns	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	429a      	cmp	r2, r3
 8005760:	d093      	beq.n	800568a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800577a:	e071      	b.n	8005860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800578a:	d123      	bne.n	80057d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800579a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c0:	f043 0204 	orr.w	r2, r3, #4
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e067      	b.n	80058a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d041      	beq.n	8005860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057dc:	f7fc f982 	bl	8001ae4 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d302      	bcc.n	80057f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d136      	bne.n	8005860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	0c1b      	lsrs	r3, r3, #16
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d10c      	bne.n	8005816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	43da      	mvns	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4013      	ands	r3, r2
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	bf14      	ite	ne
 800580e:	2301      	movne	r3, #1
 8005810:	2300      	moveq	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	e00b      	b.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	43da      	mvns	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d016      	beq.n	8005860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e021      	b.n	80058a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	0c1b      	lsrs	r3, r3, #16
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	d10c      	bne.n	8005884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	43da      	mvns	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4013      	ands	r3, r2
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	e00b      	b.n	800589c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	43da      	mvns	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4013      	ands	r3, r2
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	bf14      	ite	ne
 8005896:	2301      	movne	r3, #1
 8005898:	2300      	moveq	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	f47f af6d 	bne.w	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058b8:	e034      	b.n	8005924 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f915 	bl	8005aea <I2C_IsAcknowledgeFailed>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e034      	b.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d028      	beq.n	8005924 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d2:	f7fc f907 	bl	8001ae4 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d302      	bcc.n	80058e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d11d      	bne.n	8005924 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f2:	2b80      	cmp	r3, #128	@ 0x80
 80058f4:	d016      	beq.n	8005924 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005910:	f043 0220 	orr.w	r2, r3, #32
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e007      	b.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592e:	2b80      	cmp	r3, #128	@ 0x80
 8005930:	d1c3      	bne.n	80058ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005948:	e034      	b.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f8cd 	bl	8005aea <I2C_IsAcknowledgeFailed>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e034      	b.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d028      	beq.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005962:	f7fc f8bf 	bl	8001ae4 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d11d      	bne.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b04      	cmp	r3, #4
 8005984:	d016      	beq.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e007      	b.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d1c3      	bne.n	800594a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80059d8:	4b13      	ldr	r3, [pc, #76]	@ (8005a28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	4a13      	ldr	r2, [pc, #76]	@ (8005a2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	0a1a      	lsrs	r2, r3, #8
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e008      	b.n	8005a1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a18:	d0e9      	beq.n	80059ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20000000 	.word	0x20000000
 8005a2c:	14f8b589 	.word	0x14f8b589

08005a30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a3c:	e049      	b.n	8005ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d119      	bne.n	8005a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0210 	mvn.w	r2, #16
 8005a54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e030      	b.n	8005ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a80:	f7fc f830 	bl	8001ae4 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d11d      	bne.n	8005ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa0:	2b40      	cmp	r3, #64	@ 0x40
 8005aa2:	d016      	beq.n	8005ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	f043 0220 	orr.w	r2, r3, #32
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e007      	b.n	8005ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b40      	cmp	r3, #64	@ 0x40
 8005ade:	d1ae      	bne.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b00:	d11b      	bne.n	8005b3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	f043 0204 	orr.w	r2, r3, #4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b52:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005b56:	d103      	bne.n	8005b60 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b5e:	e007      	b.n	8005b70 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005b68:	d102      	bne.n	8005b70 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
	...

08005b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e272      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8087 	beq.w	8005caa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b9c:	4b92      	ldr	r3, [pc, #584]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f003 030c 	and.w	r3, r3, #12
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d00c      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ba8:	4b8f      	ldr	r3, [pc, #572]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 030c 	and.w	r3, r3, #12
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d112      	bne.n	8005bda <HAL_RCC_OscConfig+0x5e>
 8005bb4:	4b8c      	ldr	r3, [pc, #560]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc0:	d10b      	bne.n	8005bda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc2:	4b89      	ldr	r3, [pc, #548]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d06c      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x12c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d168      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e24c      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be2:	d106      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x76>
 8005be4:	4b80      	ldr	r3, [pc, #512]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a7f      	ldr	r2, [pc, #508]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e02e      	b.n	8005c50 <HAL_RCC_OscConfig+0xd4>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCC_OscConfig+0x98>
 8005bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a7a      	ldr	r2, [pc, #488]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	4b78      	ldr	r3, [pc, #480]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a77      	ldr	r2, [pc, #476]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	e01d      	b.n	8005c50 <HAL_RCC_OscConfig+0xd4>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c1c:	d10c      	bne.n	8005c38 <HAL_RCC_OscConfig+0xbc>
 8005c1e:	4b72      	ldr	r3, [pc, #456]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a71      	ldr	r2, [pc, #452]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a6e      	ldr	r2, [pc, #440]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e00b      	b.n	8005c50 <HAL_RCC_OscConfig+0xd4>
 8005c38:	4b6b      	ldr	r3, [pc, #428]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a6a      	ldr	r2, [pc, #424]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	4b68      	ldr	r3, [pc, #416]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a67      	ldr	r2, [pc, #412]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d013      	beq.n	8005c80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c58:	f7fb ff44 	bl	8001ae4 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c60:	f7fb ff40 	bl	8001ae4 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b64      	cmp	r3, #100	@ 0x64
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e200      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c72:	4b5d      	ldr	r3, [pc, #372]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0f0      	beq.n	8005c60 <HAL_RCC_OscConfig+0xe4>
 8005c7e:	e014      	b.n	8005caa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c80:	f7fb ff30 	bl	8001ae4 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c88:	f7fb ff2c 	bl	8001ae4 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b64      	cmp	r3, #100	@ 0x64
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e1ec      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c9a:	4b53      	ldr	r3, [pc, #332]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f0      	bne.n	8005c88 <HAL_RCC_OscConfig+0x10c>
 8005ca6:	e000      	b.n	8005caa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d063      	beq.n	8005d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005cc2:	4b49      	ldr	r3, [pc, #292]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d11c      	bne.n	8005d08 <HAL_RCC_OscConfig+0x18c>
 8005cce:	4b46      	ldr	r3, [pc, #280]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d116      	bne.n	8005d08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cda:	4b43      	ldr	r3, [pc, #268]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x176>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d001      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e1c0      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4939      	ldr	r1, [pc, #228]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d06:	e03a      	b.n	8005d7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d020      	beq.n	8005d52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d10:	4b36      	ldr	r3, [pc, #216]	@ (8005dec <HAL_RCC_OscConfig+0x270>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d16:	f7fb fee5 	bl	8001ae4 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d1e:	f7fb fee1 	bl	8001ae4 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e1a1      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d30:	4b2d      	ldr	r3, [pc, #180]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	4927      	ldr	r1, [pc, #156]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	600b      	str	r3, [r1, #0]
 8005d50:	e015      	b.n	8005d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d52:	4b26      	ldr	r3, [pc, #152]	@ (8005dec <HAL_RCC_OscConfig+0x270>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d58:	f7fb fec4 	bl	8001ae4 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d60:	f7fb fec0 	bl	8001ae4 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e180      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d72:	4b1d      	ldr	r3, [pc, #116]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03a      	beq.n	8005e00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d019      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d92:	4b17      	ldr	r3, [pc, #92]	@ (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d98:	f7fb fea4 	bl	8001ae4 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005da0:	f7fb fea0 	bl	8001ae4 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e160      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005db2:	4b0d      	ldr	r3, [pc, #52]	@ (8005de8 <HAL_RCC_OscConfig+0x26c>)
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	f000 face 	bl	8006360 <RCC_Delay>
 8005dc4:	e01c      	b.n	8005e00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dcc:	f7fb fe8a 	bl	8001ae4 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dd2:	e00f      	b.n	8005df4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dd4:	f7fb fe86 	bl	8001ae4 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d908      	bls.n	8005df4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e146      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
 8005de6:	bf00      	nop
 8005de8:	40021000 	.word	0x40021000
 8005dec:	42420000 	.word	0x42420000
 8005df0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df4:	4b92      	ldr	r3, [pc, #584]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e9      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 80a6 	beq.w	8005f5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e12:	4b8b      	ldr	r3, [pc, #556]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10d      	bne.n	8005e3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e1e:	4b88      	ldr	r3, [pc, #544]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	4a87      	ldr	r2, [pc, #540]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e28:	61d3      	str	r3, [r2, #28]
 8005e2a:	4b85      	ldr	r3, [pc, #532]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e32:	60bb      	str	r3, [r7, #8]
 8005e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e36:	2301      	movs	r3, #1
 8005e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3a:	4b82      	ldr	r3, [pc, #520]	@ (8006044 <HAL_RCC_OscConfig+0x4c8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d118      	bne.n	8005e78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e46:	4b7f      	ldr	r3, [pc, #508]	@ (8006044 <HAL_RCC_OscConfig+0x4c8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8006044 <HAL_RCC_OscConfig+0x4c8>)
 8005e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e52:	f7fb fe47 	bl	8001ae4 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e5a:	f7fb fe43 	bl	8001ae4 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b64      	cmp	r3, #100	@ 0x64
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e103      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6c:	4b75      	ldr	r3, [pc, #468]	@ (8006044 <HAL_RCC_OscConfig+0x4c8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d106      	bne.n	8005e8e <HAL_RCC_OscConfig+0x312>
 8005e80:	4b6f      	ldr	r3, [pc, #444]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	4a6e      	ldr	r2, [pc, #440]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	6213      	str	r3, [r2, #32]
 8005e8c:	e02d      	b.n	8005eea <HAL_RCC_OscConfig+0x36e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10c      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x334>
 8005e96:	4b6a      	ldr	r3, [pc, #424]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	4a69      	ldr	r2, [pc, #420]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	6213      	str	r3, [r2, #32]
 8005ea2:	4b67      	ldr	r3, [pc, #412]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	4a66      	ldr	r2, [pc, #408]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005ea8:	f023 0304 	bic.w	r3, r3, #4
 8005eac:	6213      	str	r3, [r2, #32]
 8005eae:	e01c      	b.n	8005eea <HAL_RCC_OscConfig+0x36e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b05      	cmp	r3, #5
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x356>
 8005eb8:	4b61      	ldr	r3, [pc, #388]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	4a60      	ldr	r2, [pc, #384]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005ebe:	f043 0304 	orr.w	r3, r3, #4
 8005ec2:	6213      	str	r3, [r2, #32]
 8005ec4:	4b5e      	ldr	r3, [pc, #376]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	4a5d      	ldr	r2, [pc, #372]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005eca:	f043 0301 	orr.w	r3, r3, #1
 8005ece:	6213      	str	r3, [r2, #32]
 8005ed0:	e00b      	b.n	8005eea <HAL_RCC_OscConfig+0x36e>
 8005ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	4a5a      	ldr	r2, [pc, #360]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005ed8:	f023 0301 	bic.w	r3, r3, #1
 8005edc:	6213      	str	r3, [r2, #32]
 8005ede:	4b58      	ldr	r3, [pc, #352]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	4a57      	ldr	r2, [pc, #348]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005ee4:	f023 0304 	bic.w	r3, r3, #4
 8005ee8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d015      	beq.n	8005f1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef2:	f7fb fdf7 	bl	8001ae4 <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efa:	f7fb fdf3 	bl	8001ae4 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e0b1      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f10:	4b4b      	ldr	r3, [pc, #300]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ee      	beq.n	8005efa <HAL_RCC_OscConfig+0x37e>
 8005f1c:	e014      	b.n	8005f48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f1e:	f7fb fde1 	bl	8001ae4 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f24:	e00a      	b.n	8005f3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f26:	f7fb fddd 	bl	8001ae4 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e09b      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3c:	4b40      	ldr	r3, [pc, #256]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1ee      	bne.n	8005f26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d105      	bne.n	8005f5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	4a3b      	ldr	r2, [pc, #236]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 8087 	beq.w	8006072 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f64:	4b36      	ldr	r3, [pc, #216]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 030c 	and.w	r3, r3, #12
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d061      	beq.n	8006034 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d146      	bne.n	8006006 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f78:	4b33      	ldr	r3, [pc, #204]	@ (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7e:	f7fb fdb1 	bl	8001ae4 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f86:	f7fb fdad 	bl	8001ae4 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e06d      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f98:	4b29      	ldr	r3, [pc, #164]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f0      	bne.n	8005f86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fac:	d108      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005fae:	4b24      	ldr	r3, [pc, #144]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	4921      	ldr	r1, [pc, #132]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a19      	ldr	r1, [r3, #32]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	491b      	ldr	r1, [pc, #108]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fde:	f7fb fd81 	bl	8001ae4 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe6:	f7fb fd7d 	bl	8001ae4 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e03d      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ff8:	4b11      	ldr	r3, [pc, #68]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0f0      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x46a>
 8006004:	e035      	b.n	8006072 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006006:	4b10      	ldr	r3, [pc, #64]	@ (8006048 <HAL_RCC_OscConfig+0x4cc>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600c:	f7fb fd6a 	bl	8001ae4 <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006014:	f7fb fd66 	bl	8001ae4 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e026      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006026:	4b06      	ldr	r3, [pc, #24]	@ (8006040 <HAL_RCC_OscConfig+0x4c4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1f0      	bne.n	8006014 <HAL_RCC_OscConfig+0x498>
 8006032:	e01e      	b.n	8006072 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d107      	bne.n	800604c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e019      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
 8006040:	40021000 	.word	0x40021000
 8006044:	40007000 	.word	0x40007000
 8006048:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800604c:	4b0b      	ldr	r3, [pc, #44]	@ (800607c <HAL_RCC_OscConfig+0x500>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	429a      	cmp	r2, r3
 800605e:	d106      	bne.n	800606e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800606a:	429a      	cmp	r2, r3
 800606c:	d001      	beq.n	8006072 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40021000 	.word	0x40021000

08006080 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0d0      	b.n	8006236 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006094:	4b6a      	ldr	r3, [pc, #424]	@ (8006240 <HAL_RCC_ClockConfig+0x1c0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d910      	bls.n	80060c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a2:	4b67      	ldr	r3, [pc, #412]	@ (8006240 <HAL_RCC_ClockConfig+0x1c0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f023 0207 	bic.w	r2, r3, #7
 80060aa:	4965      	ldr	r1, [pc, #404]	@ (8006240 <HAL_RCC_ClockConfig+0x1c0>)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	4b63      	ldr	r3, [pc, #396]	@ (8006240 <HAL_RCC_ClockConfig+0x1c0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0b8      	b.n	8006236 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d020      	beq.n	8006112 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060dc:	4b59      	ldr	r3, [pc, #356]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4a58      	ldr	r2, [pc, #352]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 80060e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80060e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060f4:	4b53      	ldr	r3, [pc, #332]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4a52      	ldr	r2, [pc, #328]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 80060fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80060fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006100:	4b50      	ldr	r3, [pc, #320]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	494d      	ldr	r1, [pc, #308]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 800610e:	4313      	orrs	r3, r2
 8006110:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d040      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d107      	bne.n	8006136 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006126:	4b47      	ldr	r3, [pc, #284]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d115      	bne.n	800615e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e07f      	b.n	8006236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d107      	bne.n	800614e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800613e:	4b41      	ldr	r3, [pc, #260]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e073      	b.n	8006236 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800614e:	4b3d      	ldr	r3, [pc, #244]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e06b      	b.n	8006236 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800615e:	4b39      	ldr	r3, [pc, #228]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f023 0203 	bic.w	r2, r3, #3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	4936      	ldr	r1, [pc, #216]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 800616c:	4313      	orrs	r3, r2
 800616e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006170:	f7fb fcb8 	bl	8001ae4 <HAL_GetTick>
 8006174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006176:	e00a      	b.n	800618e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006178:	f7fb fcb4 	bl	8001ae4 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006186:	4293      	cmp	r3, r2
 8006188:	d901      	bls.n	800618e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e053      	b.n	8006236 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618e:	4b2d      	ldr	r3, [pc, #180]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f003 020c 	and.w	r2, r3, #12
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	429a      	cmp	r2, r3
 800619e:	d1eb      	bne.n	8006178 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061a0:	4b27      	ldr	r3, [pc, #156]	@ (8006240 <HAL_RCC_ClockConfig+0x1c0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d210      	bcs.n	80061d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ae:	4b24      	ldr	r3, [pc, #144]	@ (8006240 <HAL_RCC_ClockConfig+0x1c0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f023 0207 	bic.w	r2, r3, #7
 80061b6:	4922      	ldr	r1, [pc, #136]	@ (8006240 <HAL_RCC_ClockConfig+0x1c0>)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061be:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <HAL_RCC_ClockConfig+0x1c0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e032      	b.n	8006236 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061dc:	4b19      	ldr	r3, [pc, #100]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	4916      	ldr	r1, [pc, #88]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061fa:	4b12      	ldr	r3, [pc, #72]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	490e      	ldr	r1, [pc, #56]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 800620a:	4313      	orrs	r3, r2
 800620c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800620e:	f000 f821 	bl	8006254 <HAL_RCC_GetSysClockFreq>
 8006212:	4602      	mov	r2, r0
 8006214:	4b0b      	ldr	r3, [pc, #44]	@ (8006244 <HAL_RCC_ClockConfig+0x1c4>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	490a      	ldr	r1, [pc, #40]	@ (8006248 <HAL_RCC_ClockConfig+0x1c8>)
 8006220:	5ccb      	ldrb	r3, [r1, r3]
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	4a09      	ldr	r2, [pc, #36]	@ (800624c <HAL_RCC_ClockConfig+0x1cc>)
 8006228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <HAL_RCC_ClockConfig+0x1d0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fb fc16 	bl	8001a60 <HAL_InitTick>

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40022000 	.word	0x40022000
 8006244:	40021000 	.word	0x40021000
 8006248:	080159f8 	.word	0x080159f8
 800624c:	20000000 	.word	0x20000000
 8006250:	20000004 	.word	0x20000004

08006254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	2300      	movs	r3, #0
 8006268:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800626e:	4b1e      	ldr	r3, [pc, #120]	@ (80062e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 030c 	and.w	r3, r3, #12
 800627a:	2b04      	cmp	r3, #4
 800627c:	d002      	beq.n	8006284 <HAL_RCC_GetSysClockFreq+0x30>
 800627e:	2b08      	cmp	r3, #8
 8006280:	d003      	beq.n	800628a <HAL_RCC_GetSysClockFreq+0x36>
 8006282:	e027      	b.n	80062d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006284:	4b19      	ldr	r3, [pc, #100]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x98>)
 8006286:	613b      	str	r3, [r7, #16]
      break;
 8006288:	e027      	b.n	80062da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	0c9b      	lsrs	r3, r3, #18
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	4a17      	ldr	r2, [pc, #92]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006294:	5cd3      	ldrb	r3, [r2, r3]
 8006296:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d010      	beq.n	80062c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80062a2:	4b11      	ldr	r3, [pc, #68]	@ (80062e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	0c5b      	lsrs	r3, r3, #17
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	4a11      	ldr	r2, [pc, #68]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80062ae:	5cd3      	ldrb	r3, [r2, r3]
 80062b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a0d      	ldr	r2, [pc, #52]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x98>)
 80062b6:	fb03 f202 	mul.w	r2, r3, r2
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e004      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a0c      	ldr	r2, [pc, #48]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80062c8:	fb02 f303 	mul.w	r3, r2, r3
 80062cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	613b      	str	r3, [r7, #16]
      break;
 80062d2:	e002      	b.n	80062da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x98>)
 80062d6:	613b      	str	r3, [r7, #16]
      break;
 80062d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062da:	693b      	ldr	r3, [r7, #16]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40021000 	.word	0x40021000
 80062ec:	007a1200 	.word	0x007a1200
 80062f0:	08015a10 	.word	0x08015a10
 80062f4:	08015a20 	.word	0x08015a20
 80062f8:	003d0900 	.word	0x003d0900

080062fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006300:	4b02      	ldr	r3, [pc, #8]	@ (800630c <HAL_RCC_GetHCLKFreq+0x10>)
 8006302:	681b      	ldr	r3, [r3, #0]
}
 8006304:	4618      	mov	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr
 800630c:	20000000 	.word	0x20000000

08006310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006314:	f7ff fff2 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 8006318:	4602      	mov	r2, r0
 800631a:	4b05      	ldr	r3, [pc, #20]	@ (8006330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	0a1b      	lsrs	r3, r3, #8
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	4903      	ldr	r1, [pc, #12]	@ (8006334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006326:	5ccb      	ldrb	r3, [r1, r3]
 8006328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800632c:	4618      	mov	r0, r3
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40021000 	.word	0x40021000
 8006334:	08015a08 	.word	0x08015a08

08006338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800633c:	f7ff ffde 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 8006340:	4602      	mov	r2, r0
 8006342:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	0adb      	lsrs	r3, r3, #11
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	4903      	ldr	r1, [pc, #12]	@ (800635c <HAL_RCC_GetPCLK2Freq+0x24>)
 800634e:	5ccb      	ldrb	r3, [r1, r3]
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006354:	4618      	mov	r0, r3
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40021000 	.word	0x40021000
 800635c:	08015a08 	.word	0x08015a08

08006360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006368:	4b0a      	ldr	r3, [pc, #40]	@ (8006394 <RCC_Delay+0x34>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a0a      	ldr	r2, [pc, #40]	@ (8006398 <RCC_Delay+0x38>)
 800636e:	fba2 2303 	umull	r2, r3, r2, r3
 8006372:	0a5b      	lsrs	r3, r3, #9
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	fb02 f303 	mul.w	r3, r2, r3
 800637a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800637c:	bf00      	nop
  }
  while (Delay --);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1e5a      	subs	r2, r3, #1
 8006382:	60fa      	str	r2, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1f9      	bne.n	800637c <RCC_Delay+0x1c>
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr
 8006394:	20000000 	.word	0x20000000
 8006398:	10624dd3 	.word	0x10624dd3

0800639c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e042      	b.n	8006434 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fb f944 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2224      	movs	r2, #36	@ 0x24
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fded 	bl	8006fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695a      	ldr	r2, [r3, #20]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08a      	sub	sp, #40	@ 0x28
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b20      	cmp	r3, #32
 800645a:	d175      	bne.n	8006548 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_UART_Transmit+0x2c>
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e06e      	b.n	800654a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2221      	movs	r2, #33	@ 0x21
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800647a:	f7fb fb33 	bl	8001ae4 <HAL_GetTick>
 800647e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	88fa      	ldrh	r2, [r7, #6]
 8006484:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	88fa      	ldrh	r2, [r7, #6]
 800648a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006494:	d108      	bne.n	80064a8 <HAL_UART_Transmit+0x6c>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e003      	b.n	80064b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064b0:	e02e      	b.n	8006510 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2180      	movs	r1, #128	@ 0x80
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fb52 	bl	8006b66 <UART_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e03a      	b.n	800654a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	3302      	adds	r3, #2
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	e007      	b.n	8006502 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	3301      	adds	r3, #1
 8006500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1cb      	bne.n	80064b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2200      	movs	r2, #0
 8006522:	2140      	movs	r1, #64	@ 0x40
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fb1e 	bl	8006b66 <UART_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e006      	b.n	800654a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e000      	b.n	800654a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006548:	2302      	movs	r3, #2
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b08c      	sub	sp, #48	@ 0x30
 8006556:	af00      	add	r7, sp, #0
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	4613      	mov	r3, r2
 800655e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b20      	cmp	r3, #32
 800656a:	d14a      	bne.n	8006602 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006572:	88fb      	ldrh	r3, [r7, #6]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e043      	b.n	8006604 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2201      	movs	r2, #1
 8006580:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	461a      	mov	r2, r3
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 fb42 	bl	8006c18 <UART_Start_Receive_IT>
 8006594:	4603      	mov	r3, r0
 8006596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800659a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d12c      	bne.n	80065fc <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d125      	bne.n	80065f6 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	617b      	str	r3, [r7, #20]
   return(result);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f043 0310 	orr.w	r3, r3, #16
 80065d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80065e2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	6a39      	ldr	r1, [r7, #32]
 80065e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e5      	bne.n	80065c0 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80065f4:	e002      	b.n	80065fc <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80065fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006600:	e000      	b.n	8006604 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006602:	2302      	movs	r3, #2
  }
}
 8006604:	4618      	mov	r0, r3
 8006606:	3730      	adds	r7, #48	@ 0x30
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b0ba      	sub	sp, #232	@ 0xe8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006632:	2300      	movs	r3, #0
 8006634:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006638:	2300      	movs	r3, #0
 800663a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800664a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d009      	beq.n	8006672 <HAL_UART_IRQHandler+0x66>
 800665e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fbea 	bl	8006e44 <UART_Receive_IT>
      return;
 8006670:	e25b      	b.n	8006b2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 80de 	beq.w	8006838 <HAL_UART_IRQHandler+0x22c>
 800667c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800668c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80d1 	beq.w	8006838 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <HAL_UART_IRQHandler+0xae>
 80066a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b2:	f043 0201 	orr.w	r2, r3, #1
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00b      	beq.n	80066de <HAL_UART_IRQHandler+0xd2>
 80066c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d6:	f043 0202 	orr.w	r2, r3, #2
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00b      	beq.n	8006702 <HAL_UART_IRQHandler+0xf6>
 80066ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fa:	f043 0204 	orr.w	r2, r3, #4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d011      	beq.n	8006732 <HAL_UART_IRQHandler+0x126>
 800670e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b00      	cmp	r3, #0
 8006718:	d105      	bne.n	8006726 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800671a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672a:	f043 0208 	orr.w	r2, r3, #8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 81f2 	beq.w	8006b20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800673c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <HAL_UART_IRQHandler+0x14e>
 8006748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fb75 	bl	8006e44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006764:	2b00      	cmp	r3, #0
 8006766:	bf14      	ite	ne
 8006768:	2301      	movne	r3, #1
 800676a:	2300      	moveq	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d103      	bne.n	8006786 <HAL_UART_IRQHandler+0x17a>
 800677e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d04f      	beq.n	8006826 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa7f 	bl	8006c8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d041      	beq.n	800681e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3314      	adds	r3, #20
 80067a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3314      	adds	r3, #20
 80067c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1d9      	bne.n	800679a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d013      	beq.n	8006816 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f2:	4a7e      	ldr	r2, [pc, #504]	@ (80069ec <HAL_UART_IRQHandler+0x3e0>)
 80067f4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fc f97a 	bl	8002af4 <HAL_DMA_Abort_IT>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d016      	beq.n	8006834 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006810:	4610      	mov	r0, r2
 8006812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006814:	e00e      	b.n	8006834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f99c 	bl	8006b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	e00a      	b.n	8006834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f998 	bl	8006b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006824:	e006      	b.n	8006834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f994 	bl	8006b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006832:	e175      	b.n	8006b20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006834:	bf00      	nop
    return;
 8006836:	e173      	b.n	8006b20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683c:	2b01      	cmp	r3, #1
 800683e:	f040 814f 	bne.w	8006ae0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8148 	beq.w	8006ae0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8141 	beq.w	8006ae0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800685e:	2300      	movs	r3, #0
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60bb      	str	r3, [r7, #8]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80b6 	beq.w	80069f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006890:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8145 	beq.w	8006b24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800689e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068a2:	429a      	cmp	r2, r3
 80068a4:	f080 813e 	bcs.w	8006b24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	f000 8088 	beq.w	80069cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80068e8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006900:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1d9      	bne.n	80068bc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3314      	adds	r3, #20
 800690e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006912:	e853 3f00 	ldrex	r3, [r3]
 8006916:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006918:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800691a:	f023 0301 	bic.w	r3, r3, #1
 800691e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3314      	adds	r3, #20
 8006928:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800692c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006930:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006934:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800693e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e1      	bne.n	8006908 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3314      	adds	r3, #20
 800694a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800694e:	e853 3f00 	ldrex	r3, [r3]
 8006952:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006954:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800695a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3314      	adds	r3, #20
 8006964:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006968:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800696a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800696e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e3      	bne.n	8006944 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800699a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800699c:	f023 0310 	bic.w	r3, r3, #16
 80069a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	330c      	adds	r3, #12
 80069aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069b0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e3      	bne.n	800698a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fc f859 	bl	8002a7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069da:	b29b      	uxth	r3, r3
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fa fbae 	bl	8001144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069e8:	e09c      	b.n	8006b24 <HAL_UART_IRQHandler+0x518>
 80069ea:	bf00      	nop
 80069ec:	08006d4f 	.word	0x08006d4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 808e 	beq.w	8006b28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8089 	beq.w	8006b28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e3      	bne.n	8006a16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3314      	adds	r3, #20
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	f023 0301 	bic.w	r3, r3, #1
 8006a64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a72:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e3      	bne.n	8006a4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0310 	bic.w	r3, r3, #16
 8006aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ab8:	61fa      	str	r2, [r7, #28]
 8006aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	69b9      	ldr	r1, [r7, #24]
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e3      	bne.n	8006a94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ad2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7fa fb33 	bl	8001144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ade:	e023      	b.n	8006b28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d009      	beq.n	8006b00 <HAL_UART_IRQHandler+0x4f4>
 8006aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f93c 	bl	8006d76 <UART_Transmit_IT>
    return;
 8006afe:	e014      	b.n	8006b2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00e      	beq.n	8006b2a <HAL_UART_IRQHandler+0x51e>
 8006b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d008      	beq.n	8006b2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f97b 	bl	8006e14 <UART_EndTransmit_IT>
    return;
 8006b1e:	e004      	b.n	8006b2a <HAL_UART_IRQHandler+0x51e>
    return;
 8006b20:	bf00      	nop
 8006b22:	e002      	b.n	8006b2a <HAL_UART_IRQHandler+0x51e>
      return;
 8006b24:	bf00      	nop
 8006b26:	e000      	b.n	8006b2a <HAL_UART_IRQHandler+0x51e>
      return;
 8006b28:	bf00      	nop
  }
}
 8006b2a:	37e8      	adds	r7, #232	@ 0xe8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr

08006b42 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr

08006b66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b086      	sub	sp, #24
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	603b      	str	r3, [r7, #0]
 8006b72:	4613      	mov	r3, r2
 8006b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b76:	e03b      	b.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d037      	beq.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b80:	f7fa ffb0 	bl	8001ae4 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	6a3a      	ldr	r2, [r7, #32]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d302      	bcc.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e03a      	b.n	8006c10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d023      	beq.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b80      	cmp	r3, #128	@ 0x80
 8006bac:	d020      	beq.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b40      	cmp	r3, #64	@ 0x40
 8006bb2:	d01d      	beq.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d116      	bne.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f856 	bl	8006c8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2208      	movs	r2, #8
 8006be2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e00f      	b.n	8006c10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	bf0c      	ite	eq
 8006c00:	2301      	moveq	r3, #1
 8006c02:	2300      	movne	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	461a      	mov	r2, r3
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d0b4      	beq.n	8006b78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	88fa      	ldrh	r2, [r7, #6]
 8006c30:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	88fa      	ldrh	r2, [r7, #6]
 8006c36:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2222      	movs	r2, #34	@ 0x22
 8006c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	695a      	ldr	r2, [r3, #20]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0201 	orr.w	r2, r2, #1
 8006c6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0220 	orr.w	r2, r2, #32
 8006c7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr

08006c8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b095      	sub	sp, #84	@ 0x54
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	330c      	adds	r3, #12
 8006c98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9c:	e853 3f00 	ldrex	r3, [r3]
 8006ca0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	330c      	adds	r3, #12
 8006cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cb2:	643a      	str	r2, [r7, #64]	@ 0x40
 8006cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e5      	bne.n	8006c92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3314      	adds	r3, #20
 8006ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	f023 0301 	bic.w	r3, r3, #1
 8006cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3314      	adds	r3, #20
 8006ce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e5      	bne.n	8006cc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d119      	bne.n	8006d36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f023 0310 	bic.w	r3, r3, #16
 8006d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d22:	61ba      	str	r2, [r7, #24]
 8006d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6979      	ldr	r1, [r7, #20]
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e5      	bne.n	8006d02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d44:	bf00      	nop
 8006d46:	3754      	adds	r7, #84	@ 0x54
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr

08006d4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff fef3 	bl	8006b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b21      	cmp	r3, #33	@ 0x21
 8006d88:	d13e      	bne.n	8006e08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d92:	d114      	bne.n	8006dbe <UART_Transmit_IT+0x48>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d110      	bne.n	8006dbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	1c9a      	adds	r2, r3, #2
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	621a      	str	r2, [r3, #32]
 8006dbc:	e008      	b.n	8006dd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	1c59      	adds	r1, r3, #1
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6211      	str	r1, [r2, #32]
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10f      	bne.n	8006e04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006df2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	e000      	b.n	8006e0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e08:	2302      	movs	r3, #2
  }
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff fe7b 	bl	8006b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08c      	sub	sp, #48	@ 0x30
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b22      	cmp	r3, #34	@ 0x22
 8006e56:	f040 80ae 	bne.w	8006fb6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e62:	d117      	bne.n	8006e94 <UART_Receive_IT+0x50>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d113      	bne.n	8006e94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8c:	1c9a      	adds	r2, r3, #2
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e92:	e026      	b.n	8006ee2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea6:	d007      	beq.n	8006eb8 <UART_Receive_IT+0x74>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <UART_Receive_IT+0x82>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d106      	bne.n	8006ec6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	e008      	b.n	8006ed8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d15d      	bne.n	8006fb2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0220 	bic.w	r2, r2, #32
 8006f04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	695a      	ldr	r2, [r3, #20]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0201 	bic.w	r2, r2, #1
 8006f24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d135      	bne.n	8006fa8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	330c      	adds	r3, #12
 8006f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	613b      	str	r3, [r7, #16]
   return(result);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f023 0310 	bic.w	r3, r3, #16
 8006f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	330c      	adds	r3, #12
 8006f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f62:	623a      	str	r2, [r7, #32]
 8006f64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	69f9      	ldr	r1, [r7, #28]
 8006f68:	6a3a      	ldr	r2, [r7, #32]
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e5      	bne.n	8006f42 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0310 	and.w	r3, r3, #16
 8006f80:	2b10      	cmp	r3, #16
 8006f82:	d10a      	bne.n	8006f9a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7fa f8cf 	bl	8001144 <HAL_UARTEx_RxEventCallback>
 8006fa6:	e002      	b.n	8006fae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff fdca 	bl	8006b42 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e002      	b.n	8006fb8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e000      	b.n	8006fb8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3730      	adds	r7, #48	@ 0x30
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006ffa:	f023 030c 	bic.w	r3, r3, #12
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	430b      	orrs	r3, r1
 8007006:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2c      	ldr	r2, [pc, #176]	@ (80070d4 <UART_SetConfig+0x114>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d103      	bne.n	8007030 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007028:	f7ff f986 	bl	8006338 <HAL_RCC_GetPCLK2Freq>
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	e002      	b.n	8007036 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007030:	f7ff f96e 	bl	8006310 <HAL_RCC_GetPCLK1Freq>
 8007034:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009a      	lsls	r2, r3, #2
 8007040:	441a      	add	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	fbb2 f3f3 	udiv	r3, r2, r3
 800704c:	4a22      	ldr	r2, [pc, #136]	@ (80070d8 <UART_SetConfig+0x118>)
 800704e:	fba2 2303 	umull	r2, r3, r2, r3
 8007052:	095b      	lsrs	r3, r3, #5
 8007054:	0119      	lsls	r1, r3, #4
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009a      	lsls	r2, r3, #2
 8007060:	441a      	add	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	fbb2 f2f3 	udiv	r2, r2, r3
 800706c:	4b1a      	ldr	r3, [pc, #104]	@ (80070d8 <UART_SetConfig+0x118>)
 800706e:	fba3 0302 	umull	r0, r3, r3, r2
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	2064      	movs	r0, #100	@ 0x64
 8007076:	fb00 f303 	mul.w	r3, r0, r3
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	3332      	adds	r3, #50	@ 0x32
 8007080:	4a15      	ldr	r2, [pc, #84]	@ (80070d8 <UART_SetConfig+0x118>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800708c:	4419      	add	r1, r3
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	009a      	lsls	r2, r3, #2
 8007098:	441a      	add	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80070a4:	4b0c      	ldr	r3, [pc, #48]	@ (80070d8 <UART_SetConfig+0x118>)
 80070a6:	fba3 0302 	umull	r0, r3, r3, r2
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	2064      	movs	r0, #100	@ 0x64
 80070ae:	fb00 f303 	mul.w	r3, r0, r3
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	3332      	adds	r3, #50	@ 0x32
 80070b8:	4a07      	ldr	r2, [pc, #28]	@ (80070d8 <UART_SetConfig+0x118>)
 80070ba:	fba2 2303 	umull	r2, r3, r2, r3
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	f003 020f 	and.w	r2, r3, #15
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	440a      	add	r2, r1
 80070ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40013800 	.word	0x40013800
 80070d8:	51eb851f 	.word	0x51eb851f

080070dc <Screen_begin>:
    [CONDITION_MINUTE]   = {.String_Name = "MINUTE", .String_Unit = "min"},
    [CONDITION_IC_NUM]   = {.String_Name = "No. of ICs", .String_Unit = "pcs"},
    [CONDITION_PASS]     = {.String_Name = "PASSWORD",.String_Unit = ""}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 80070e4:	4a38      	ldr	r2, [pc, #224]	@ (80071c8 <Screen_begin+0xec>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 80070ea:	4837      	ldr	r0, [pc, #220]	@ (80071c8 <Screen_begin+0xec>)
 80070ec:	f002 ff16 	bl	8009f1c <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 80070f0:	4936      	ldr	r1, [pc, #216]	@ (80071cc <Screen_begin+0xf0>)
 80070f2:	4835      	ldr	r0, [pc, #212]	@ (80071c8 <Screen_begin+0xec>)
 80070f4:	f008 fc3b 	bl	800f96e <DWIN_SetCallback>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 80070f8:	4b33      	ldr	r3, [pc, #204]	@ (80071c8 <Screen_begin+0xec>)
 80070fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070fe:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 8007100:	4b31      	ldr	r3, [pc, #196]	@ (80071c8 <Screen_begin+0xec>)
 8007102:	2200      	movs	r2, #0
 8007104:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;
 8007108:	4b2f      	ldr	r3, [pc, #188]	@ (80071c8 <Screen_begin+0xec>)
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    _Screen.pre_page = 106;
 8007110:	4b2d      	ldr	r3, [pc, #180]	@ (80071c8 <Screen_begin+0xec>)
 8007112:	226a      	movs	r2, #106	@ 0x6a
 8007114:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    _Screen.Ishome = true;
 8007118:	4b2b      	ldr	r3, [pc, #172]	@ (80071c8 <Screen_begin+0xec>)
 800711a:	2201      	movs	r2, #1
 800711c:	f883 25b8 	strb.w	r2, [r3, #1464]	@ 0x5b8

    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST1].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST1]));
 8007120:	4b29      	ldr	r3, [pc, #164]	@ (80071c8 <Screen_begin+0xec>)
 8007122:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8007126:	492a      	ldr	r1, [pc, #168]	@ (80071d0 <Screen_begin+0xf4>)
 8007128:	4618      	mov	r0, r3
 800712a:	f003 fee7 	bl	800aefc <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST2].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST2]));
 800712e:	4b26      	ldr	r3, [pc, #152]	@ (80071c8 <Screen_begin+0xec>)
 8007130:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8007134:	4927      	ldr	r1, [pc, #156]	@ (80071d4 <Screen_begin+0xf8>)
 8007136:	4618      	mov	r0, r3
 8007138:	f003 fee0 	bl	800aefc <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST3].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST3]));
 800713c:	4b22      	ldr	r3, [pc, #136]	@ (80071c8 <Screen_begin+0xec>)
 800713e:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8007142:	4925      	ldr	r1, [pc, #148]	@ (80071d8 <Screen_begin+0xfc>)
 8007144:	4618      	mov	r0, r3
 8007146:	f003 fed9 	bl	800aefc <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST4].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST4]));
 800714a:	4b1f      	ldr	r3, [pc, #124]	@ (80071c8 <Screen_begin+0xec>)
 800714c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8007150:	4922      	ldr	r1, [pc, #136]	@ (80071dc <Screen_begin+0x100>)
 8007152:	4618      	mov	r0, r3
 8007154:	f003 fed2 	bl	800aefc <get_data_testing_ic>

    Screen_Init_Variable(&_Screen);
 8007158:	481b      	ldr	r0, [pc, #108]	@ (80071c8 <Screen_begin+0xec>)
 800715a:	f003 f9b5 	bl	800a4c8 <Screen_Init_Variable>

    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x11D0,2);
 800715e:	2202      	movs	r2, #2
 8007160:	f241 11d0 	movw	r1, #4560	@ 0x11d0
 8007164:	4818      	ldr	r0, [pc, #96]	@ (80071c8 <Screen_begin+0xec>)
 8007166:	f008 faf4 	bl	800f752 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x13D0,2);
 800716a:	2202      	movs	r2, #2
 800716c:	f241 31d0 	movw	r1, #5072	@ 0x13d0
 8007170:	4815      	ldr	r0, [pc, #84]	@ (80071c8 <Screen_begin+0xec>)
 8007172:	f008 faee 	bl	800f752 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x15D0,2);
 8007176:	2202      	movs	r2, #2
 8007178:	f241 51d0 	movw	r1, #5584	@ 0x15d0
 800717c:	4812      	ldr	r0, [pc, #72]	@ (80071c8 <Screen_begin+0xec>)
 800717e:	f008 fae8 	bl	800f752 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x17D0,2);
 8007182:	2202      	movs	r2, #2
 8007184:	f241 71d0 	movw	r1, #6096	@ 0x17d0
 8007188:	480f      	ldr	r0, [pc, #60]	@ (80071c8 <Screen_begin+0xec>)
 800718a:	f008 fae2 	bl	800f752 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x19D0,2);
 800718e:	2202      	movs	r2, #2
 8007190:	f641 11d0 	movw	r1, #6608	@ 0x19d0
 8007194:	480c      	ldr	r0, [pc, #48]	@ (80071c8 <Screen_begin+0xec>)
 8007196:	f008 fadc 	bl	800f752 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1BD0,2);
 800719a:	2202      	movs	r2, #2
 800719c:	f641 31d0 	movw	r1, #7120	@ 0x1bd0
 80071a0:	4809      	ldr	r0, [pc, #36]	@ (80071c8 <Screen_begin+0xec>)
 80071a2:	f008 fad6 	bl	800f752 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1DD0,2);
 80071a6:	2202      	movs	r2, #2
 80071a8:	f641 51d0 	movw	r1, #7632	@ 0x1dd0
 80071ac:	4806      	ldr	r0, [pc, #24]	@ (80071c8 <Screen_begin+0xec>)
 80071ae:	f008 fad0 	bl	800f752 <DWIN_SetWidth_Basic_line>

    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
 80071b2:	2165      	movs	r1, #101	@ 0x65
 80071b4:	4804      	ldr	r0, [pc, #16]	@ (80071c8 <Screen_begin+0xec>)
 80071b6:	f007 ff68 	bl	800f08a <DWIN_SetPage>
    printf("Init screen done\n");
 80071ba:	4809      	ldr	r0, [pc, #36]	@ (80071e0 <Screen_begin+0x104>)
 80071bc:	f00b fb08 	bl	80127d0 <puts>
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20000cc8 	.word	0x20000cc8
 80071cc:	08007201 	.word	0x08007201
 80071d0:	20001130 	.word	0x20001130
 80071d4:	20001160 	.word	0x20001160
 80071d8:	20001190 	.word	0x20001190
 80071dc:	200011c0 	.word	0x200011c0
 80071e0:	08015360 	.word	0x08015360

080071e4 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	4803      	ldr	r0, [pc, #12]	@ (80071fc <Screen_RX_data+0x18>)
 80071f0:	f008 fbca 	bl	800f988 <DWIN_Listen>
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000cc8 	.word	0x20000cc8

08007200 <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	80fb      	strh	r3, [r7, #6]
 800720a:	460b      	mov	r3, r1
 800720c:	717b      	strb	r3, [r7, #5]
 800720e:	4613      	mov	r3, r2
 8007210:	713b      	strb	r3, [r7, #4]
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007218:	4293      	cmp	r3, r2
 800721a:	d01b      	beq.n	8007254 <Screen_RX_Callback+0x54>
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	2207      	movs	r2, #7
 8007220:	490e      	ldr	r1, [pc, #56]	@ (800725c <Screen_RX_Callback+0x5c>)
 8007222:	4618      	mov	r0, r3
 8007224:	f002 fe3e 	bl	8009ea4 <Index_VP>
 8007228:	4603      	mov	r3, r0
 800722a:	723b      	strb	r3, [r7, #8]
        screen_event.action = lowByte;
 800722c:	797b      	ldrb	r3, [r7, #5]
 800722e:	727b      	strb	r3, [r7, #9]
        screen_event.data = highByte;
 8007230:	793b      	ldrb	r3, [r7, #4]
 8007232:	72bb      	strb	r3, [r7, #10]
        screen_event.keyvalue = (uint16_t)((highByte<<8) | (lowByte&0xFF));
 8007234:	793b      	ldrb	r3, [r7, #4]
 8007236:	b21b      	sxth	r3, r3
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	b21a      	sxth	r2, r3
 800723c:	797b      	ldrb	r3, [r7, #5]
 800723e:	b21b      	sxth	r3, r3
 8007240:	4313      	orrs	r3, r2
 8007242:	b21b      	sxth	r3, r3
 8007244:	b29b      	uxth	r3, r3
 8007246:	81bb      	strh	r3, [r7, #12]

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
 8007248:	f107 0308 	add.w	r3, r7, #8
 800724c:	4619      	mov	r1, r3
 800724e:	4804      	ldr	r0, [pc, #16]	@ (8007260 <Screen_RX_Callback+0x60>)
 8007250:	f002 ff22 	bl	800a098 <Screen_excute_RX_function>
    }
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	2000000c 	.word	0x2000000c
 8007260:	20000cc8 	.word	0x20000cc8

08007264 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
    
    screen_obj->Ishome = false;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 25b8 	strb.w	r2, [r3, #1464]	@ 0x5b8
    screen_obj->pre_page = DWINPAGE_SETTING;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2274      	movs	r2, #116	@ 0x74
 800727a:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 800727e:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f007 ff98 	bl	800f1b8 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password);
 8007288:	f249 5180 	movw	r1, #38272	@ 0x9580
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f007 ff93 	bl	800f1b8 <DWIN_ClearText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 8007292:	2174      	movs	r1, #116	@ 0x74
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f007 fef8 	bl	800f08a <DWIN_SetPage>
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
    uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80072b2:	4619      	mov	r1, r3
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80072ba:	fb01 f303 	mul.w	r3, r1, r3
 80072be:	4413      	add	r3, r2
 80072c0:	334b      	adds	r3, #75	@ 0x4b
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	73fb      	strb	r3, [r7, #15]
    UNUSED(current_program);
    // Show data

    // Switch page
    screen_obj->Ishome = true;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 25b8 	strb.w	r2, [r3, #1464]	@ 0x5b8
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,PROGRAM_TEST1);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80072d4:	4619      	mov	r1, r3
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80072dc:	fb01 f303 	mul.w	r3, r1, r3
 80072e0:	4413      	add	r3, r2
 80072e2:	3349      	adds	r3, #73	@ 0x49
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2200      	movs	r2, #0
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f005 fa16 	bl	800c71c <show_main_page>
    // DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
}   
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <Navigation_return>:

void Navigation_return(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80072f8:	b5b0      	push	{r4, r5, r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af02      	add	r7, sp, #8
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
    if (screen_obj->Ishome) {
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 8007308:	2b00      	cmp	r3, #0
 800730a:	d063      	beq.n	80073d4 <Navigation_return+0xdc>
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007312:	4619      	mov	r1, r3
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800731a:	fb01 f303 	mul.w	r3, r1, r3
 800731e:	4413      	add	r3, r2
 8007320:	3349      	adds	r3, #73	@ 0x49
 8007322:	2265      	movs	r2, #101	@ 0x65
 8007324:	701a      	strb	r2, [r3, #0]
        off_testing(screen_obj);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f004 fd62 	bl	800bdf0 <off_testing>

        uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800732c:	2008      	movs	r0, #8
 800732e:	f009 fb5d 	bl	80109ec <malloc>
 8007332:	4603      	mov	r3, r0
 8007334:	60fb      	str	r3, [r7, #12]
        data_send_esp32->data = (char *)malloc(50);
 8007336:	68fc      	ldr	r4, [r7, #12]
 8007338:	2032      	movs	r0, #50	@ 0x32
 800733a:	f009 fb57 	bl	80109ec <malloc>
 800733e:	4603      	mov	r3, r0
 8007340:	6023      	str	r3, [r4, #0]
        sprintf(data_send_esp32->data,"d%d,disconected,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800734c:	1c59      	adds	r1, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007354:	461c      	mov	r4, r3
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800735c:	fb04 f303 	mul.w	r3, r4, r3
 8007360:	4413      	add	r3, r2
 8007362:	334b      	adds	r3, #75	@ 0x4b
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	461c      	mov	r4, r3
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4623      	mov	r3, r4
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	4423      	add	r3, r4
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	4413      	add	r3, r2
 8007374:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8007378:	681c      	ldr	r4, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007380:	461d      	mov	r5, r3
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007388:	fb05 f303 	mul.w	r3, r5, r3
 800738c:	4413      	add	r3, r2
 800738e:	334b      	adds	r3, #75	@ 0x4b
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	461d      	mov	r5, r3
        sprintf(data_send_esp32->data,"d%d,disconected,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	462b      	mov	r3, r5
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	442b      	add	r3, r5
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	4413      	add	r3, r2
 80073a0:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	4623      	mov	r3, r4
 80073aa:	460a      	mov	r2, r1
 80073ac:	490f      	ldr	r1, [pc, #60]	@ (80073ec <Navigation_return+0xf4>)
 80073ae:	f00b fa4d 	bl	801284c <siprintf>
        data_send_esp32->len = strlen(data_send_esp32->data);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68fc      	ldr	r4, [r7, #12]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7f8 fed3 	bl	8000164 <strlen>
 80073be:	4603      	mov	r3, r0
 80073c0:	6063      	str	r3, [r4, #4]
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 80073c2:	4b0b      	ldr	r3, [pc, #44]	@ (80073f0 <Navigation_return+0xf8>)
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	f107 020c 	add.w	r2, r7, #12
 80073ca:	2308      	movs	r3, #8
 80073cc:	2100      	movs	r1, #0
 80073ce:	f009 f8db 	bl	8010588 <OS_task_post_event>
        // show_main_page(screen_obj,DWINPAGE_MAIN,screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index);
    } else {
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page);
    }
}
 80073d2:	e006      	b.n	80073e2 <Navigation_return+0xea>
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 35b4 	ldrb.w	r3, [r3, #1460]	@ 0x5b4
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f007 fe54 	bl	800f08a <DWIN_SetPage>
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bdb0      	pop	{r4, r5, r7, pc}
 80073ea:	bf00      	nop
 80073ec:	08015374 	.word	0x08015374
 80073f0:	08016114 	.word	0x08016114

080073f4 <Navigation_setting_program>:

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]

    // Switch page
    // DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
    /* Get the setting page */
    screen_obj->page_setting = DWINPAGE_SETTING_PROGRAM;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	226b      	movs	r2, #107	@ 0x6b
 8007402:	f883 25b7 	strb.w	r2, [r3, #1463]	@ 0x5b7
    screen_obj->pre_page = DWINPAGE_PASSWORD;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	226e      	movs	r2, #110	@ 0x6e
 800740a:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    // Switch page password 
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password,"",strlen(""));
 800740e:	2300      	movs	r3, #0
 8007410:	4a09      	ldr	r2, [pc, #36]	@ (8007438 <Navigation_setting_program+0x44>)
 8007412:	f249 5160 	movw	r1, #38240	@ 0x9560
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f007 fe5e 	bl	800f0d8 <DWIN_SetText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password);
 800741c:	f249 5180 	movw	r1, #38272	@ 0x9580
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f007 fec9 	bl	800f1b8 <DWIN_ClearText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 8007426:	216e      	movs	r1, #110	@ 0x6e
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f007 fe2e 	bl	800f08a <DWIN_SetPage>
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	0801538c 	.word	0x0801538c

0800743c <Navigation_setting_time>:

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
    
    screen_obj->pre_page = DWINPAGE_SETTING_TIME;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2276      	movs	r2, #118	@ 0x76
 800744a:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Hour);
 800744e:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f007 feb0 	bl	800f1b8 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Minute);
 8007458:	f249 0110 	movw	r1, #36880	@ 0x9010
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f007 feab 	bl	800f1b8 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Day);
 8007462:	f249 0120 	movw	r1, #36896	@ 0x9020
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f007 fea6 	bl	800f1b8 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Month);
 800746c:	f249 0130 	movw	r1, #36912	@ 0x9030
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f007 fea1 	bl	800f1b8 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Year);
 8007476:	f249 0140 	movw	r1, #36928	@ 0x9040
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f007 fe9c 	bl	800f1b8 <DWIN_ClearText>
    memset(screen_obj->Time_setting.Day,0,3);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8007486:	2203      	movs	r2, #3
 8007488:	2100      	movs	r1, #0
 800748a:	4618      	mov	r0, r3
 800748c:	f00b fae8 	bl	8012a60 <memset>
    memset(screen_obj->Time_setting.Minute,0,3);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f203 53ac 	addw	r3, r3, #1452	@ 0x5ac
 8007496:	2203      	movs	r2, #3
 8007498:	2100      	movs	r1, #0
 800749a:	4618      	mov	r0, r3
 800749c:	f00b fae0 	bl	8012a60 <memset>
    memset(screen_obj->Time_setting.Month,0,3);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f203 53a3 	addw	r3, r3, #1443	@ 0x5a3
 80074a6:	2203      	movs	r2, #3
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f00b fad8 	bl	8012a60 <memset>
    memset(screen_obj->Time_setting.Year,0,3);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f203 53a6 	addw	r3, r3, #1446	@ 0x5a6
 80074b6:	2203      	movs	r2, #3
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f00b fad0 	bl	8012a60 <memset>
    memset(screen_obj->Time_setting.Hour,0,3);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f203 53a9 	addw	r3, r3, #1449	@ 0x5a9
 80074c6:	2203      	movs	r2, #3
 80074c8:	2100      	movs	r1, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f00b fac8 	bl	8012a60 <memset>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_setting_time);
 80074d0:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f007 fe6f 	bl	800f1b8 <DWIN_ClearText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
 80074da:	2176      	movs	r1, #118	@ 0x76
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f007 fdd4 	bl	800f08a <DWIN_SetPage>
}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <Navigation_setting_wifi>:

void Navigation_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80074ea:	b590      	push	{r4, r7, lr}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
    screen_obj->pre_page = DWINPAGE_SETTING_WIFI;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2275      	movs	r2, #117	@ 0x75
 80074f8:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    /* show data */
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Wifi,screen_obj->Wifi_setting.Name_Wifi,strlen(screen_obj->Wifi_setting.Name_Wifi));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f503 64a5 	add.w	r4, r3, #1320	@ 0x528
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f503 63a5 	add.w	r3, r3, #1320	@ 0x528
 8007508:	4618      	mov	r0, r3
 800750a:	f7f8 fe2b 	bl	8000164 <strlen>
 800750e:	4603      	mov	r3, r0
 8007510:	b29b      	uxth	r3, r3
 8007512:	4622      	mov	r2, r4
 8007514:	f249 51a0 	movw	r1, #38304	@ 0x95a0
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f007 fddd 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password_Wifi,screen_obj->Wifi_setting.Password_Wifi,strlen(screen_obj->Wifi_setting.Password_Wifi));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f203 5464 	addw	r4, r3, #1380	@ 0x564
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800752a:	4618      	mov	r0, r3
 800752c:	f7f8 fe1a 	bl	8000164 <strlen>
 8007530:	4603      	mov	r3, r0
 8007532:	b29b      	uxth	r3, r3
 8007534:	4622      	mov	r2, r4
 8007536:	f249 51d0 	movw	r1, #38352	@ 0x95d0
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f007 fdcc 	bl	800f0d8 <DWIN_SetText>

    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 8007540:	2175      	movs	r1, #117	@ 0x75
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f007 fda1 	bl	800f08a <DWIN_SetPage>
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bd90      	pop	{r4, r7, pc}

08007550 <Navigation_modify_program>:

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007550:	b590      	push	{r4, r7, lr}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
    screen_obj->pre_page = DWINPAGE_MODIFY_PROGRAM;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	226c      	movs	r2, #108	@ 0x6c
 800755e:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8007568:	4619      	mov	r1, r3
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	440b      	add	r3, r1
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	4413      	add	r3, r2
 8007576:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800757a:	681c      	ldr	r4, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8007582:	4619      	mov	r1, r3
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	440b      	add	r3, r1
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	4413      	add	r3, r2
 8007590:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4618      	mov	r0, r3
 8007598:	f7f8 fde4 	bl	8000164 <strlen>
 800759c:	4603      	mov	r3, r0
 800759e:	b29b      	uxth	r3, r3
 80075a0:	4622      	mov	r2, r4
 80075a2:	f44f 4115 	mov.w	r1, #38144	@ 0x9500
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f007 fd96 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80075b2:	4619      	mov	r1, r3
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	440b      	add	r3, r1
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	4413      	add	r3, r2
 80075c0:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80075c4:	681c      	ldr	r4, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80075cc:	4619      	mov	r1, r3
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	440b      	add	r3, r1
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	4413      	add	r3, r2
 80075da:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7f8 fdbf 	bl	8000164 <strlen>
 80075e6:	4603      	mov	r3, r0
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	4622      	mov	r2, r4
 80075ec:	f249 5120 	movw	r1, #38176	@ 0x9520
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f007 fd71 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80075fc:	4619      	mov	r1, r3
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	440b      	add	r3, r1
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	4413      	add	r3, r2
 800760a:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800760e:	681c      	ldr	r4, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8007616:	4619      	mov	r1, r3
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	440b      	add	r3, r1
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	4413      	add	r3, r2
 8007624:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f7f8 fd9a 	bl	8000164 <strlen>
 8007630:	4603      	mov	r3, r0
 8007632:	b29b      	uxth	r3, r3
 8007634:	4622      	mov	r2, r4
 8007636:	f249 5140 	movw	r1, #38208	@ 0x9540
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f007 fd4c 	bl	800f0d8 <DWIN_SetText>
    
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_modify_program);
 8007640:	f24a 0150 	movw	r1, #41040	@ 0xa050
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f007 fdb7 	bl	800f1b8 <DWIN_ClearText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800764a:	216c      	movs	r1, #108	@ 0x6c
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f007 fd1c 	bl	800f08a <DWIN_SetPage>
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	bd90      	pop	{r4, r7, pc}

0800765a <Navigation_detail_mainpage>:

void Navigation_detail_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800766a:	4619      	mov	r1, r3
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007672:	fb01 f303 	mul.w	r3, r1, r3
 8007676:	4413      	add	r3, r2
 8007678:	336c      	adds	r3, #108	@ 0x6c
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b30      	cmp	r3, #48	@ 0x30
 800767e:	d11d      	bne.n	80076bc <Navigation_detail_mainpage+0x62>
        /* change main page */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_DETAIL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007686:	4619      	mov	r1, r3
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800768e:	fb01 f303 	mul.w	r3, r1, r3
 8007692:	4413      	add	r3, r2
 8007694:	3349      	adds	r3, #73	@ 0x49
 8007696:	2266      	movs	r2, #102	@ 0x66
 8007698:	701a      	strb	r2, [r3, #0]
        // Switch page
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80076a0:	4619      	mov	r1, r3
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	4413      	add	r3, r2
 80076ae:	3349      	adds	r3, #73	@ 0x49
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f005 f830 	bl	800c71c <show_main_page>
    }
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <Navigation_graph_mainpage>:

void Navigation_graph_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
    /* change main page */
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_PULSE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80076d4:	4619      	mov	r1, r3
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	4413      	add	r3, r2
 80076e2:	3349      	adds	r3, #73	@ 0x49
 80076e4:	2267      	movs	r2, #103	@ 0x67
 80076e6:	701a      	strb	r2, [r3, #0]
    // Switch page
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80076ee:	4619      	mov	r1, r3
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	4413      	add	r3, r2
 80076fc:	3349      	adds	r3, #73	@ 0x49
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2200      	movs	r2, #0
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f005 f809 	bl	800c71c <show_main_page>
}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <Navigation_Change_MainPage>:

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	789b      	ldrb	r3, [r3, #2]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d111      	bne.n	8007748 <Navigation_Change_MainPage+0x36>
        screen_obj->curr_device++;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800772a:	3301      	adds	r3, #1
 800772c:	b2da      	uxtb	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f883 25b5 	strb.w	r2, [r3, #1461]	@ 0x5b5
        if (screen_obj->curr_device == MAX_DEVICE) {
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800773a:	2b03      	cmp	r3, #3
 800773c:	d119      	bne.n	8007772 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 25b5 	strb.w	r2, [r3, #1461]	@ 0x5b5
 8007746:	e014      	b.n	8007772 <Navigation_Change_MainPage+0x60>
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	789b      	ldrb	r3, [r3, #2]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d110      	bne.n	8007772 <Navigation_Change_MainPage+0x60>
        screen_obj->curr_device--;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007756:	3b01      	subs	r3, #1
 8007758:	b2da      	uxtb	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f883 25b5 	strb.w	r2, [r3, #1461]	@ 0x5b5
        if (screen_obj->curr_device == 255 ) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007766:	2bff      	cmp	r3, #255	@ 0xff
 8007768:	d103      	bne.n	8007772 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_3;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2202      	movs	r2, #2
 800776e:	f883 25b5 	strb.w	r2, [r3, #1461]	@ 0x5b5
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007778:	4619      	mov	r1, r3
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	4413      	add	r3, r2
 8007786:	334b      	adds	r3, #75	@ 0x4b
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	73fb      	strb	r3, [r7, #15]

    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,curr_program);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007792:	4619      	mov	r1, r3
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	3349      	adds	r3, #73	@ 0x49
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	7bfa      	ldrb	r2, [r7, #15]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f004 ffb7 	bl	800c71c <show_main_page>
}
 80077ae:	bf00      	nop
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <Navigation_Change_CaseTest>:

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08e      	sub	sp, #56	@ 0x38
 80077bc:	af02      	add	r7, sp, #8
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80077c8:	4619      	mov	r1, r3
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80077d0:	fb01 f303 	mul.w	r3, r1, r3
 80077d4:	4413      	add	r3, r2
 80077d6:	334b      	adds	r3, #75	@ 0x4b
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	4619      	mov	r1, r3
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	460b      	mov	r3, r1
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	440b      	add	r3, r1
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	4413      	add	r3, r2
 80077e8:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80077f8:	4619      	mov	r1, r3
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007800:	fb01 f303 	mul.w	r3, r1, r3
 8007804:	4413      	add	r3, r2
 8007806:	334b      	adds	r3, #75	@ 0x4b
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 800780e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4613      	mov	r3, r2
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	4413      	add	r3, r2
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	440b      	add	r3, r1
 800781e:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	789b      	ldrb	r3, [r3, #2]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d124      	bne.n	800787a <Navigation_Change_CaseTest+0xc2>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007836:	4619      	mov	r1, r3
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800783e:	fb01 f303 	mul.w	r3, r1, r3
 8007842:	4413      	add	r3, r2
 8007844:	3348      	adds	r3, #72	@ 0x48
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d042      	beq.n	80078d2 <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007858:	fb03 f202 	mul.w	r2, r3, r2
 800785c:	440a      	add	r2, r1
 800785e:	3248      	adds	r2, #72	@ 0x48
 8007860:	7812      	ldrb	r2, [r2, #0]
 8007862:	3a01      	subs	r2, #1
 8007864:	b2d0      	uxtb	r0, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 800786c:	fb01 f303 	mul.w	r3, r1, r3
 8007870:	4413      	add	r3, r2
 8007872:	3348      	adds	r3, #72	@ 0x48
 8007874:	4602      	mov	r2, r0
 8007876:	701a      	strb	r2, [r3, #0]
 8007878:	e02b      	b.n	80078d2 <Navigation_Change_CaseTest+0x11a>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	789b      	ldrb	r3, [r3, #2]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d127      	bne.n	80078d2 <Navigation_Change_CaseTest+0x11a>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007888:	4619      	mov	r1, r3
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007890:	fb01 f303 	mul.w	r3, r1, r3
 8007894:	4413      	add	r3, r2
 8007896:	3348      	adds	r3, #72	@ 0x48
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078a0:	3b01      	subs	r3, #1
 80078a2:	429a      	cmp	r2, r3
 80078a4:	da15      	bge.n	80078d2 <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 80078b2:	fb03 f202 	mul.w	r2, r3, r2
 80078b6:	440a      	add	r2, r1
 80078b8:	3248      	adds	r2, #72	@ 0x48
 80078ba:	7812      	ldrb	r2, [r2, #0]
 80078bc:	3201      	adds	r2, #1
 80078be:	b2d0      	uxtb	r0, r2
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 80078c6:	fb01 f303 	mul.w	r3, r1, r3
 80078ca:	4413      	add	r3, r2
 80078cc:	3348      	adds	r3, #72	@ 0x48
 80078ce:	4602      	mov	r2, r0
 80078d0:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Show data */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80078d8:	4619      	mov	r1, r3
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	4413      	add	r3, r2
 80078e6:	3348      	adds	r3, #72	@ 0x48
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078f0:	f107 000c 	add.w	r0, r7, #12
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	4613      	mov	r3, r2
 80078f8:	4a32      	ldr	r2, [pc, #200]	@ (80079c4 <Navigation_Change_CaseTest+0x20c>)
 80078fa:	211e      	movs	r1, #30
 80078fc:	f00a ff70 	bl	80127e0 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 8007900:	f107 030c 	add.w	r3, r7, #12
 8007904:	4618      	mov	r0, r3
 8007906:	f7f8 fc2d 	bl	8000164 <strlen>
 800790a:	4603      	mov	r3, r0
 800790c:	b29b      	uxth	r3, r3
 800790e:	f107 020c 	add.w	r2, r7, #12
 8007912:	f249 3180 	movw	r1, #37760	@ 0x9380
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f007 fbde 	bl	800f0d8 <DWIN_SetText>
    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case] == '0') {
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007922:	4619      	mov	r1, r3
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	4413      	add	r3, r2
 8007930:	3370      	adds	r3, #112	@ 0x70
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	f892 25b5 	ldrb.w	r2, [r2, #1461]	@ 0x5b5
 800793a:	4610      	mov	r0, r2
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007942:	fb00 f202 	mul.w	r2, r0, r2
 8007946:	440a      	add	r2, r1
 8007948:	3248      	adds	r2, #72	@ 0x48
 800794a:	7812      	ldrb	r2, [r2, #0]
 800794c:	4413      	add	r3, r2
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b30      	cmp	r3, #48	@ 0x30
 8007952:	d107      	bne.n	8007964 <Navigation_Change_CaseTest+0x1ac>
        DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0xF800);
 8007954:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8007958:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f007 fc3d 	bl	800f1dc <DWIN_SetColorText>
 8007962:	e006      	b.n	8007972 <Navigation_Change_CaseTest+0x1ba>
    } else {
        DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0x01ED);
 8007964:	f240 12ed 	movw	r2, #493	@ 0x1ed
 8007968:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f007 fc35 	bl	800f1dc <DWIN_SetColorText>
    }
    // DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
    DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * num_pin]),num_pin);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007978:	4619      	mov	r1, r3
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007980:	fb01 f303 	mul.w	r3, r1, r3
 8007984:	4413      	add	r3, r2
 8007986:	3364      	adds	r3, #100	@ 0x64
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	f892 25b5 	ldrb.w	r2, [r2, #1461]	@ 0x5b5
 8007990:	4610      	mov	r0, r2
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007998:	fb00 f202 	mul.w	r2, r0, r2
 800799c:	440a      	add	r2, r1
 800799e:	3248      	adds	r2, #72	@ 0x48
 80079a0:	7812      	ldrb	r2, [r2, #0]
 80079a2:	4611      	mov	r1, r2
 80079a4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80079a8:	fb01 f202 	mul.w	r2, r1, r2
 80079ac:	441a      	add	r2, r3
 80079ae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80079b2:	f244 1150 	movw	r1, #16720	@ 0x4150
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f007 fc6e 	bl	800f298 <DWIN_SetArray_Icon>
}
 80079bc:	bf00      	nop
 80079be:	3730      	adds	r7, #48	@ 0x30
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	08015390 	.word	0x08015390

080079c8 <Navigation_Change_CasePulse>:

void Navigation_Change_CasePulse(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
    if (screen_event->data == DATA_PREV_CASE) {
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	789b      	ldrb	r3, [r3, #2]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d124      	bne.n	8007a24 <Navigation_Change_CasePulse+0x5c>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80079e0:	4619      	mov	r1, r3
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80079e8:	fb01 f303 	mul.w	r3, r1, r3
 80079ec:	4413      	add	r3, r2
 80079ee:	3348      	adds	r3, #72	@ 0x48
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d03e      	beq.n	8007a74 <Navigation_Change_CasePulse+0xac>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007a02:	fb03 f202 	mul.w	r2, r3, r2
 8007a06:	440a      	add	r2, r1
 8007a08:	3248      	adds	r2, #72	@ 0x48
 8007a0a:	7812      	ldrb	r2, [r2, #0]
 8007a0c:	3a01      	subs	r2, #1
 8007a0e:	b2d0      	uxtb	r0, r2
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3348      	adds	r3, #72	@ 0x48
 8007a1e:	4602      	mov	r2, r0
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	e027      	b.n	8007a74 <Navigation_Change_CasePulse+0xac>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	789b      	ldrb	r3, [r3, #2]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d123      	bne.n	8007a74 <Navigation_Change_CasePulse+0xac>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < 1) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007a32:	4619      	mov	r1, r3
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007a3a:	fb01 f303 	mul.w	r3, r1, r3
 8007a3e:	4413      	add	r3, r2
 8007a40:	3348      	adds	r3, #72	@ 0x48
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d115      	bne.n	8007a74 <Navigation_Change_CasePulse+0xac>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007a54:	fb03 f202 	mul.w	r2, r3, r2
 8007a58:	440a      	add	r2, r1
 8007a5a:	3248      	adds	r2, #72	@ 0x48
 8007a5c:	7812      	ldrb	r2, [r2, #0]
 8007a5e:	3201      	adds	r2, #1
 8007a60:	b2d0      	uxtb	r0, r2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	3348      	adds	r3, #72	@ 0x48
 8007a70:	4602      	mov	r2, r0
 8007a72:	701a      	strb	r2, [r3, #0]
        }
    }

    show_pulse(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_case);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007a82:	fb01 f303 	mul.w	r3, r1, r3
 8007a86:	4413      	add	r3, r2
 8007a88:	3348      	adds	r3, #72	@ 0x48
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f004 fa68 	bl	800bf64 <show_pulse>
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <Navigation_Finish_Review>:

void Navigation_Finish_Review(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007a9c:	b5b0      	push	{r4, r5, r7, lr}
 8007a9e:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8007aa2:	af02      	add	r7, sp, #8
 8007aa4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007aa8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007aac:	6018      	str	r0, [r3, #0]
 8007aae:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ab2:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8007ab6:	6019      	str	r1, [r3, #0]
    uint8_t curr_num_ic = ++screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
 8007ab8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007abc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007ac6:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8007aca:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8007ace:	6811      	ldr	r1, [r2, #0]
 8007ad0:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007ad4:	fb03 f202 	mul.w	r2, r3, r2
 8007ad8:	440a      	add	r2, r1
 8007ada:	324a      	adds	r2, #74	@ 0x4a
 8007adc:	7812      	ldrb	r2, [r2, #0]
 8007ade:	3201      	adds	r2, #1
 8007ae0:	b2d0      	uxtb	r0, r2
 8007ae2:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8007ae6:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8007aea:	6811      	ldr	r1, [r2, #0]
 8007aec:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007af0:	fb03 f202 	mul.w	r2, r3, r2
 8007af4:	440a      	add	r2, r1
 8007af6:	324a      	adds	r2, #74	@ 0x4a
 8007af8:	4601      	mov	r1, r0
 8007afa:	7011      	strb	r1, [r2, #0]
 8007afc:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8007b00:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8007b0a:	fb01 f303 	mul.w	r3, r1, r3
 8007b0e:	4413      	add	r3, r2
 8007b10:	334a      	adds	r3, #74	@ 0x4a
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8007b18:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007b1c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007b26:	4619      	mov	r1, r3
 8007b28:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007b2c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007b36:	fb01 f303 	mul.w	r3, r1, r3
 8007b3a:	4413      	add	r3, r2
 8007b3c:	334b      	adds	r3, #75	@ 0x4b
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
 8007b44:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8007b48:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007b4c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007b50:	6819      	ldr	r1, [r3, #0]
 8007b52:	4613      	mov	r3, r2
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	4413      	add	r3, r2
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	440b      	add	r3, r1
 8007b5c:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f008 ff3d 	bl	80109e2 <atoi>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 8007b6e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007b72:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007b82:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	4413      	add	r3, r2
 8007b92:	3349      	adds	r3, #73	@ 0x49
 8007b94:	2265      	movs	r2, #101	@ 0x65
 8007b96:	701a      	strb	r2, [r3, #0]
    /* show number of testing ic */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d / %d",curr_num_ic,num_ic);
 8007b98:	f897 2227 	ldrb.w	r2, [r7, #551]	@ 0x227
 8007b9c:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8007ba0:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	4ac2      	ldr	r2, [pc, #776]	@ (8007eb4 <Navigation_Finish_Review+0x418>)
 8007baa:	211e      	movs	r1, #30
 8007bac:	f00a fe18 	bl	80127e0 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
 8007bb0:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7f8 fad5 	bl	8000164 <strlen>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f507 7201 	add.w	r2, r7, #516	@ 0x204
 8007bc2:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 8007bc6:	f5a1 7009 	sub.w	r0, r1, #548	@ 0x224
 8007bca:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 8007bce:	6800      	ldr	r0, [r0, #0]
 8007bd0:	f007 fa82 	bl	800f0d8 <DWIN_SetText>
    if (curr_num_ic < num_ic) {
 8007bd4:	f897 2227 	ldrb.w	r2, [r7, #551]	@ 0x227
 8007bd8:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	f080 8249 	bcs.w	8008074 <Navigation_Finish_Review+0x5d8>
        /* switch page */
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
 8007be2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007be6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007bf6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007c00:	fb01 f303 	mul.w	r3, r1, r3
 8007c04:	4413      	add	r3, r2
 8007c06:	3349      	adds	r3, #73	@ 0x49
 8007c08:	7819      	ldrb	r1, [r3, #0]
 8007c0a:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8007c0e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c12:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	f004 fd80 	bl	800c71c <show_main_page>

        /* free array using in have new data test */
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
 8007c1c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c20:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c30:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007c3a:	fb01 f303 	mul.w	r3, r1, r3
 8007c3e:	4413      	add	r3, r2
 8007c40:	3374      	adds	r3, #116	@ 0x74
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d02b      	beq.n	8007ca0 <Navigation_Finish_Review+0x204>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
 8007c48:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c4c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007c56:	4619      	mov	r1, r3
 8007c58:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c5c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007c66:	fb01 f303 	mul.w	r3, r1, r3
 8007c6a:	4413      	add	r3, r2
 8007c6c:	3374      	adds	r3, #116	@ 0x74
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f008 fec3 	bl	80109fc <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = NULL;
 8007c76:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c7a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007c84:	4619      	mov	r1, r3
 8007c86:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c8a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007c94:	fb01 f303 	mul.w	r3, r1, r3
 8007c98:	4413      	add	r3, r2
 8007c9a:	3374      	adds	r3, #116	@ 0x74
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
 8007ca0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ca4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007cb4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007cbe:	fb01 f303 	mul.w	r3, r1, r3
 8007cc2:	4413      	add	r3, r2
 8007cc4:	335c      	adds	r3, #92	@ 0x5c
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02b      	beq.n	8007d24 <Navigation_Finish_Review+0x288>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
 8007ccc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007cd0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007cda:	4619      	mov	r1, r3
 8007cdc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ce0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007cea:	fb01 f303 	mul.w	r3, r1, r3
 8007cee:	4413      	add	r3, r2
 8007cf0:	335c      	adds	r3, #92	@ 0x5c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f008 fe81 	bl	80109fc <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = NULL;
 8007cfa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007cfe:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007d08:	4619      	mov	r1, r3
 8007d0a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d0e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007d18:	fb01 f303 	mul.w	r3, r1, r3
 8007d1c:	4413      	add	r3, r2
 8007d1e:	335c      	adds	r3, #92	@ 0x5c
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
        }
        
        if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
 8007d24:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d28:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007d32:	4619      	mov	r1, r3
 8007d34:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d38:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007d42:	fb01 f303 	mul.w	r3, r1, r3
 8007d46:	4413      	add	r3, r2
 8007d48:	3364      	adds	r3, #100	@ 0x64
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d02b      	beq.n	8007da8 <Navigation_Finish_Review+0x30c>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
 8007d50:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d54:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007d5e:	4619      	mov	r1, r3
 8007d60:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d64:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007d6e:	fb01 f303 	mul.w	r3, r1, r3
 8007d72:	4413      	add	r3, r2
 8007d74:	3364      	adds	r3, #100	@ 0x64
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f008 fe3f 	bl	80109fc <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].icon_result = NULL;
 8007d7e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d82:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d92:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007d9c:	fb01 f303 	mul.w	r3, r1, r3
 8007da0:	4413      	add	r3, r2
 8007da2:	3364      	adds	r3, #100	@ 0x64
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
 8007da8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007dac:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007db6:	4619      	mov	r1, r3
 8007db8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007dbc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007dc6:	fb01 f303 	mul.w	r3, r1, r3
 8007dca:	4413      	add	r3, r2
 8007dcc:	3368      	adds	r3, #104	@ 0x68
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d02b      	beq.n	8007e2c <Navigation_Finish_Review+0x390>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
 8007dd4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007dd8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007de2:	4619      	mov	r1, r3
 8007de4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007de8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007df2:	fb01 f303 	mul.w	r3, r1, r3
 8007df6:	4413      	add	r3, r2
 8007df8:	3368      	adds	r3, #104	@ 0x68
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f008 fdfd 	bl	80109fc <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit = NULL;
 8007e02:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e06:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007e10:	4619      	mov	r1, r3
 8007e12:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e16:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007e20:	fb01 f303 	mul.w	r3, r1, r3
 8007e24:	4413      	add	r3, r2
 8007e26:	3368      	adds	r3, #104	@ 0x68
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
 8007e2c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e30:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e40:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007e4a:	fb01 f303 	mul.w	r3, r1, r3
 8007e4e:	4413      	add	r3, r2
 8007e50:	3370      	adds	r3, #112	@ 0x70
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d02f      	beq.n	8007eb8 <Navigation_Finish_Review+0x41c>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
 8007e58:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e5c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007e66:	4619      	mov	r1, r3
 8007e68:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e6c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3370      	adds	r3, #112	@ 0x70
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f008 fdbb 	bl	80109fc <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case = NULL;
 8007e86:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e8a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007e94:	4619      	mov	r1, r3
 8007e96:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e9a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007ea4:	fb01 f303 	mul.w	r3, r1, r3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	3370      	adds	r3, #112	@ 0x70
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	e002      	b.n	8007eb8 <Navigation_Finish_Review+0x41c>
 8007eb2:	bf00      	nop
 8007eb4:	0801539c 	.word	0x0801539c
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
 8007eb8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ebc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ecc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007ed6:	fb01 f303 	mul.w	r3, r1, r3
 8007eda:	4413      	add	r3, r2
 8007edc:	3360      	adds	r3, #96	@ 0x60
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d02b      	beq.n	8007f3c <Navigation_Finish_Review+0x4a0>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 8007ee4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ee8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ef8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	3360      	adds	r3, #96	@ 0x60
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f008 fd75 	bl	80109fc <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_result = NULL;
 8007f12:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f16:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007f20:	4619      	mov	r1, r3
 8007f22:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f26:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	4413      	add	r3, r2
 8007f36:	3360      	adds	r3, #96	@ 0x60
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]
        }

        /* check error */
        managerTX_CAN_t *check_TX_CAN = malloc(sizeof(managerTX_CAN_t));
 8007f3c:	2008      	movs	r0, #8
 8007f3e:	f008 fd55 	bl	80109ec <malloc>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
        check_TX_CAN->ID = CAN_iso[screen_obj->curr_device].send_arbitration_id;
 8007f48:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f4c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007f56:	461a      	mov	r2, r3
 8007f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007f5c:	49bb      	ldr	r1, [pc, #748]	@ (800824c <Navigation_Finish_Review+0x7b0>)
 8007f5e:	0192      	lsls	r2, r2, #6
 8007f60:	440a      	add	r2, r1
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	601a      	str	r2, [r3, #0]
        check_TX_CAN->TX_Done = false;
 8007f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	711a      	strb	r2, [r3, #4]
        OS_task_post_event(AO_task_can_bus,START_TIMEOUT_TX,(uint8_t *)&check_TX_CAN,sizeof(managerTX_CAN_t));
 8007f6e:	4bb8      	ldr	r3, [pc, #736]	@ (8008250 <Navigation_Finish_Review+0x7b4>)
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8007f76:	2308      	movs	r3, #8
 8007f78:	2102      	movs	r1, #2
 8007f7a:	f008 fb05 	bl	8010588 <OS_task_post_event>

        /* send data to tester */
        uint8_t can_send_buf[500];
        can_send_buf[0] = screen_obj->Program_Testx[index_program].num_pin;
 8007f7e:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8007f82:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f86:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f8a:	6819      	ldr	r1, [r3, #0]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	4413      	add	r3, r2
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	440b      	add	r3, r1
 8007f96:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 8007f9a:	781a      	ldrb	r2, [r3, #0]
 8007f9c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007fa0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8007fa4:	701a      	strb	r2, [r3, #0]
        can_send_buf[1] = '\0';
 8007fa6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007faa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8007fae:	2200      	movs	r2, #0
 8007fb0:	705a      	strb	r2, [r3, #1]
        can_send_buf[2] = screen_obj->Program_Testx[index_program].num_case;
 8007fb2:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8007fb6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007fba:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007fbe:	6819      	ldr	r1, [r3, #0]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	4413      	add	r3, r2
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	440b      	add	r3, r1
 8007fca:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 8007fce:	781a      	ldrb	r2, [r3, #0]
 8007fd0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007fd4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8007fd8:	709a      	strb	r2, [r3, #2]
        can_send_buf[3] = '\0';
 8007fda:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007fde:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	70da      	strb	r2, [r3, #3]
        memcpy(&can_send_buf[4],screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
 8007fe6:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8007fea:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007fee:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007ff2:	6819      	ldr	r1, [r3, #0]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	4413      	add	r3, r2
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	440b      	add	r3, r1
 8007ffe:	f503 6392 	add.w	r3, r3, #1168	@ 0x490
 8008002:	6818      	ldr	r0, [r3, #0]
 8008004:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8008008:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800800c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008010:	6819      	ldr	r1, [r3, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	4413      	add	r3, r2
 8008018:	011b      	lsls	r3, r3, #4
 800801a:	440b      	add	r3, r1
 800801c:	f203 4394 	addw	r3, r3, #1172	@ 0x494
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f107 0308 	add.w	r3, r7, #8
 8008028:	3304      	adds	r3, #4
 800802a:	4601      	mov	r1, r0
 800802c:	4618      	mov	r0, r3
 800802e:	f00a fe60 	bl	8012cf2 <memcpy>
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len + 4);
 8008032:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008036:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008040:	019b      	lsls	r3, r3, #6
 8008042:	4a82      	ldr	r2, [pc, #520]	@ (800824c <Navigation_Finish_Review+0x7b0>)
 8008044:	1898      	adds	r0, r3, r2
 8008046:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800804a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800804e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	4613      	mov	r3, r2
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	4413      	add	r3, r2
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	440b      	add	r3, r1
 800805e:	f203 4394 	addw	r3, r3, #1172	@ 0x494
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	3304      	adds	r3, #4
 8008066:	b29a      	uxth	r2, r3
 8008068:	f107 0308 	add.w	r3, r7, #8
 800806c:	4619      	mov	r1, r3
 800806e:	f007 ff25 	bl	800febc <isotp_send>
        }
        data_send_esp32->len = strlen(data_send_esp32->data);
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));

    }   
}
 8008072:	e0e6      	b.n	8008242 <Navigation_Finish_Review+0x7a6>
        off_testing(screen_obj);
 8008074:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008078:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	f003 feb7 	bl	800bdf0 <off_testing>
        uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 8008082:	2008      	movs	r0, #8
 8008084:	f008 fcb2 	bl	80109ec <malloc>
 8008088:	4603      	mov	r3, r0
 800808a:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
        data_send_esp32->data = (char *)malloc(50);
 800808e:	f8d7 41fc 	ldr.w	r4, [r7, #508]	@ 0x1fc
 8008092:	2032      	movs	r0, #50	@ 0x32
 8008094:	f008 fcaa 	bl	80109ec <malloc>
 8008098:	4603      	mov	r3, r0
 800809a:	6023      	str	r3, [r4, #0]
        if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800809c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080a0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80080aa:	4619      	mov	r1, r3
 80080ac:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080b0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80080ba:	fb01 f303 	mul.w	r3, r1, r3
 80080be:	4413      	add	r3, r2
 80080c0:	334c      	adds	r3, #76	@ 0x4c
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d055      	beq.n	8008174 <Navigation_Finish_Review+0x6d8>
            sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 80080c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080d2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80080dc:	1c59      	adds	r1, r3, #1
 80080de:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080e2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80080ec:	461c      	mov	r4, r3
 80080ee:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080f2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80080fc:	fb04 f303 	mul.w	r3, r4, r3
 8008100:	4413      	add	r3, r2
 8008102:	334b      	adds	r3, #75	@ 0x4b
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461c      	mov	r4, r3
 8008108:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800810c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4623      	mov	r3, r4
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	4423      	add	r3, r4
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	4413      	add	r3, r2
 800811c:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008120:	681c      	ldr	r4, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 8008122:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008126:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008130:	461d      	mov	r5, r3
 8008132:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008136:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008140:	fb05 f303 	mul.w	r3, r5, r3
 8008144:	4413      	add	r3, r2
 8008146:	334b      	adds	r3, #75	@ 0x4b
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	461d      	mov	r5, r3
            sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800814c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008150:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	462b      	mov	r3, r5
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	442b      	add	r3, r5
 800815c:	011b      	lsls	r3, r3, #4
 800815e:	4413      	add	r3, r2
 8008160:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	4623      	mov	r3, r4
 800816a:	460a      	mov	r2, r1
 800816c:	4939      	ldr	r1, [pc, #228]	@ (8008254 <Navigation_Finish_Review+0x7b8>)
 800816e:	f00a fb6d 	bl	801284c <siprintf>
 8008172:	e054      	b.n	800821e <Navigation_Finish_Review+0x782>
            sprintf(data_send_esp32->data,"d%d,stop,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 8008174:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800817e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008188:	1c59      	adds	r1, r3, #1
 800818a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800818e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008198:	461c      	mov	r4, r3
 800819a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800819e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80081a8:	fb04 f303 	mul.w	r3, r4, r3
 80081ac:	4413      	add	r3, r2
 80081ae:	334b      	adds	r3, #75	@ 0x4b
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	461c      	mov	r4, r3
 80081b4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081b8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4623      	mov	r3, r4
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	4423      	add	r3, r4
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80081cc:	681c      	ldr	r4, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 80081ce:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081d2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80081dc:	461d      	mov	r5, r3
 80081de:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081e2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80081ec:	fb05 f303 	mul.w	r3, r5, r3
 80081f0:	4413      	add	r3, r2
 80081f2:	334b      	adds	r3, #75	@ 0x4b
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	461d      	mov	r5, r3
            sprintf(data_send_esp32->data,"d%d,stop,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 80081f8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081fc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	462b      	mov	r3, r5
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	442b      	add	r3, r5
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	4413      	add	r3, r2
 800820c:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	4623      	mov	r3, r4
 8008216:	460a      	mov	r2, r1
 8008218:	490f      	ldr	r1, [pc, #60]	@ (8008258 <Navigation_Finish_Review+0x7bc>)
 800821a:	f00a fb17 	bl	801284c <siprintf>
        data_send_esp32->len = strlen(data_send_esp32->data);
 800821e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f8d7 41fc 	ldr.w	r4, [r7, #508]	@ 0x1fc
 8008228:	4618      	mov	r0, r3
 800822a:	f7f7 ff9b 	bl	8000164 <strlen>
 800822e:	4603      	mov	r3, r0
 8008230:	6063      	str	r3, [r4, #4]
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 8008232:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <Navigation_Finish_Review+0x7c0>)
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 800823a:	2308      	movs	r3, #8
 800823c:	2100      	movs	r1, #0
 800823e:	f008 f9a3 	bl	8010588 <OS_task_post_event>
}
 8008242:	bf00      	nop
 8008244:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 8008248:	46bd      	mov	sp, r7
 800824a:	bdb0      	pop	{r4, r5, r7, pc}
 800824c:	2000049c 	.word	0x2000049c
 8008250:	08015a24 	.word	0x08015a24
 8008254:	080153a4 	.word	0x080153a4
 8008258:	080153b8 	.word	0x080153b8
 800825c:	08016114 	.word	0x08016114

08008260 <Navigation_Information>:

void Navigation_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_INFORMATION);
 800826a:	216f      	movs	r1, #111	@ 0x6f
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f006 ff0c 	bl	800f08a <DWIN_SetPage>
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <Navigation_Logging>:

void Navigation_Logging(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	6039      	str	r1, [r7, #0]
    /* show data */
    
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_LOGGING);
 8008284:	2170      	movs	r1, #112	@ 0x70
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f006 feff 	bl	800f08a <DWIN_SetPage>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <ON_OFF_Button>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008294:	b5b0      	push	{r4, r5, r7, lr}
 8008296:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800829a:	af02      	add	r7, sp, #8
 800829c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80082a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80082a4:	6018      	str	r0, [r3, #0]
 80082a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80082aa:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80082ae:	6019      	str	r1, [r3, #0]
    // do sth
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state == false) { // dang off -> bat dau 
 80082b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80082b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80082be:	4619      	mov	r1, r3
 80082c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80082c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80082ce:	fb01 f303 	mul.w	r3, r1, r3
 80082d2:	4413      	add	r3, r2
 80082d4:	334c      	adds	r3, #76	@ 0x4c
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	f083 0301 	eor.w	r3, r3, #1
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d048      	beq.n	8008374 <ON_OFF_Button+0xe0>
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
 80082e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80082e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80082f0:	4619      	mov	r1, r3
 80082f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80082f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008300:	fb01 f303 	mul.w	r3, r1, r3
 8008304:	4413      	add	r3, r2
 8008306:	334a      	adds	r3, #74	@ 0x4a
 8008308:	2200      	movs	r2, #0
 800830a:	701a      	strb	r2, [r3, #0]
        screen_obj->IC_Testerx[screen_obj->curr_device].state = true;
 800830c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008310:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800831a:	4619      	mov	r1, r3
 800831c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008320:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800832a:	fb01 f303 	mul.w	r3, r1, r3
 800832e:	4413      	add	r3, r2
 8008330:	334c      	adds	r3, #76	@ 0x4c
 8008332:	2201      	movs	r2, #1
 8008334:	701a      	strb	r2, [r3, #0]
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8008336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800833a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008344:	4619      	mov	r1, r3
 8008346:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800834a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008354:	fb01 f303 	mul.w	r3, r1, r3
 8008358:	4413      	add	r3, r2
 800835a:	334c      	adds	r3, #76	@ 0x4c
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008364:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008368:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	f006 ff66 	bl	800f23e <DWIN_SetVariable_Icon>
 8008372:	e01b      	b.n	80083ac <ON_OFF_Button+0x118>
        // }
        // data_send_esp32->len = strlen(data_send_esp32->data);
        // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
    } else { // dang on -> off
        /* luu vao sd, gui cho esp32 len app */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 8008374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008378:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008382:	4619      	mov	r1, r3
 8008384:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008388:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008392:	fb01 f303 	mul.w	r3, r1, r3
 8008396:	4413      	add	r3, r2
 8008398:	3349      	adds	r3, #73	@ 0x49
 800839a:	2265      	movs	r2, #101	@ 0x65
 800839c:	701a      	strb	r2, [r3, #0]
        off_testing(screen_obj);
 800839e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80083a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	f003 fd22 	bl	800bdf0 <off_testing>
    }

    /* Send data to esp32 status device */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 80083ac:	2008      	movs	r0, #8
 80083ae:	f008 fb1d 	bl	80109ec <malloc>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
    data_send_esp32->data = (char *)malloc(50);
 80083b8:	f8d7 4200 	ldr.w	r4, [r7, #512]	@ 0x200
 80083bc:	2032      	movs	r0, #50	@ 0x32
 80083be:	f008 fb15 	bl	80109ec <malloc>
 80083c2:	4603      	mov	r3, r0
 80083c4:	6023      	str	r3, [r4, #0]
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 80083c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80083ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80083d4:	4619      	mov	r1, r3
 80083d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80083da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80083e4:	fb01 f303 	mul.w	r3, r1, r3
 80083e8:	4413      	add	r3, r2
 80083ea:	334c      	adds	r3, #76	@ 0x4c
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d055      	beq.n	800849e <ON_OFF_Button+0x20a>
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 80083f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80083fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008406:	1c59      	adds	r1, r3, #1
 8008408:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800840c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008416:	461c      	mov	r4, r3
 8008418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800841c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008426:	fb04 f303 	mul.w	r3, r4, r3
 800842a:	4413      	add	r3, r2
 800842c:	334b      	adds	r3, #75	@ 0x4b
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	461c      	mov	r4, r3
 8008432:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008436:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4623      	mov	r3, r4
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	4423      	add	r3, r4
 8008442:	011b      	lsls	r3, r3, #4
 8008444:	4413      	add	r3, r2
 8008446:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800844a:	681c      	ldr	r4, [r3, #0]
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800844c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008450:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800845a:	461d      	mov	r5, r3
 800845c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008460:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800846a:	fb05 f303 	mul.w	r3, r5, r3
 800846e:	4413      	add	r3, r2
 8008470:	334b      	adds	r3, #75	@ 0x4b
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	461d      	mov	r5, r3
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 8008476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800847a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	462b      	mov	r3, r5
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	442b      	add	r3, r5
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	4413      	add	r3, r2
 800848a:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4623      	mov	r3, r4
 8008494:	460a      	mov	r2, r1
 8008496:	499a      	ldr	r1, [pc, #616]	@ (8008700 <ON_OFF_Button+0x46c>)
 8008498:	f00a f9d8 	bl	801284c <siprintf>
 800849c:	e054      	b.n	8008548 <ON_OFF_Button+0x2b4>
    } else {
        sprintf(data_send_esp32->data,"d%d,stop,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800849e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80084a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80084b2:	1c59      	adds	r1, r3, #1
 80084b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80084b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80084c2:	461c      	mov	r4, r3
 80084c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80084c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80084d2:	fb04 f303 	mul.w	r3, r4, r3
 80084d6:	4413      	add	r3, r2
 80084d8:	334b      	adds	r3, #75	@ 0x4b
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	461c      	mov	r4, r3
 80084de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80084e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	4623      	mov	r3, r4
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	4423      	add	r3, r4
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80084f6:	681c      	ldr	r4, [r3, #0]
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 80084f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80084fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008506:	461d      	mov	r5, r3
 8008508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800850c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008516:	fb05 f303 	mul.w	r3, r5, r3
 800851a:	4413      	add	r3, r2
 800851c:	334b      	adds	r3, #75	@ 0x4b
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	461d      	mov	r5, r3
        sprintf(data_send_esp32->data,"d%d,stop,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 8008522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008526:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	462b      	mov	r3, r5
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	442b      	add	r3, r5
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	4413      	add	r3, r2
 8008536:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	4623      	mov	r3, r4
 8008540:	460a      	mov	r2, r1
 8008542:	4970      	ldr	r1, [pc, #448]	@ (8008704 <ON_OFF_Button+0x470>)
 8008544:	f00a f982 	bl	801284c <siprintf>
    }
    data_send_esp32->len = strlen(data_send_esp32->data);
 8008548:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f8d7 4200 	ldr.w	r4, [r7, #512]	@ 0x200
 8008552:	4618      	mov	r0, r3
 8008554:	f7f7 fe06 	bl	8000164 <strlen>
 8008558:	4603      	mov	r3, r0
 800855a:	6063      	str	r3, [r4, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800855c:	4b6a      	ldr	r3, [pc, #424]	@ (8008708 <ON_OFF_Button+0x474>)
 800855e:	6818      	ldr	r0, [r3, #0]
 8008560:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8008564:	2308      	movs	r3, #8
 8008566:	2100      	movs	r1, #0
 8008568:	f008 f80e 	bl	8010588 <OS_task_post_event>
    
    /* Send data test */
    // screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800856c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008570:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800857a:	4619      	mov	r1, r3
 800857c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008580:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800858a:	fb01 f303 	mul.w	r3, r1, r3
 800858e:	4413      	add	r3, r2
 8008590:	334c      	adds	r3, #76	@ 0x4c
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 80ae 	beq.w	80086f6 <ON_OFF_Button+0x462>
        uint8_t can_send_buf[500];
        uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800859a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800859e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80085a8:	4619      	mov	r1, r3
 80085aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80085b8:	fb01 f303 	mul.w	r3, r1, r3
 80085bc:	4413      	add	r3, r2
 80085be:	334b      	adds	r3, #75	@ 0x4b
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        // uint8_t num_test_ic = screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
        // memcpy(can_send_buf,&num_test_ic,1);
        can_send_buf[0] = screen_obj->Program_Testx[index_program].num_pin;
 80085c6:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 80085ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	4613      	mov	r3, r2
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	4413      	add	r3, r2
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	440b      	add	r3, r1
 80085de:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085e8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80085ec:	701a      	strb	r2, [r3, #0]
        can_send_buf[1] = '\0';
 80085ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085f2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80085f6:	2200      	movs	r2, #0
 80085f8:	705a      	strb	r2, [r3, #1]
        can_send_buf[2] = screen_obj->Program_Testx[index_program].num_case;
 80085fa:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 80085fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008602:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008606:	6819      	ldr	r1, [r3, #0]
 8008608:	4613      	mov	r3, r2
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	4413      	add	r3, r2
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	440b      	add	r3, r1
 8008612:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 8008616:	781a      	ldrb	r2, [r3, #0]
 8008618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800861c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8008620:	709a      	strb	r2, [r3, #2]
        can_send_buf[3] = '\0';
 8008622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008626:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800862a:	2200      	movs	r2, #0
 800862c:	70da      	strb	r2, [r3, #3]
        memcpy(&can_send_buf[4],screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
 800862e:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 8008632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008636:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800863a:	6819      	ldr	r1, [r3, #0]
 800863c:	4613      	mov	r3, r2
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	4413      	add	r3, r2
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	440b      	add	r3, r1
 8008646:	f503 6392 	add.w	r3, r3, #1168	@ 0x490
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 8008650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008654:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008658:	6819      	ldr	r1, [r3, #0]
 800865a:	4613      	mov	r3, r2
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	4413      	add	r3, r2
 8008660:	011b      	lsls	r3, r3, #4
 8008662:	440b      	add	r3, r1
 8008664:	f203 4394 	addw	r3, r3, #1172	@ 0x494
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	f107 0308 	add.w	r3, r7, #8
 8008670:	3304      	adds	r3, #4
 8008672:	4601      	mov	r1, r0
 8008674:	4618      	mov	r0, r3
 8008676:	f00a fb3c 	bl	8012cf2 <memcpy>
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len + 4);
 800867a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800867e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008688:	019b      	lsls	r3, r3, #6
 800868a:	4a20      	ldr	r2, [pc, #128]	@ (800870c <ON_OFF_Button+0x478>)
 800868c:	1898      	adds	r0, r3, r2
 800868e:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 8008692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008696:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800869a:	6819      	ldr	r1, [r3, #0]
 800869c:	4613      	mov	r3, r2
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	4413      	add	r3, r2
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	440b      	add	r3, r1
 80086a6:	f203 4394 	addw	r3, r3, #1172	@ 0x494
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	3304      	adds	r3, #4
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	4619      	mov	r1, r3
 80086b6:	f007 fc01 	bl	800febc <isotp_send>

        /* check error */
        managerTX_CAN_t *check_TX_CAN = malloc(sizeof(managerTX_CAN_t));
 80086ba:	2008      	movs	r0, #8
 80086bc:	f008 f996 	bl	80109ec <malloc>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
        check_TX_CAN->ID = (uint32_t)(0x471 + screen_obj->curr_device);
 80086c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80086ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80086d4:	f203 4271 	addw	r2, r3, #1137	@ 0x471
 80086d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80086dc:	601a      	str	r2, [r3, #0]
        check_TX_CAN->TX_Done = false;
 80086de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80086e2:	2200      	movs	r2, #0
 80086e4:	711a      	strb	r2, [r3, #4]
        OS_task_post_event(AO_task_can_bus,START_TIMEOUT_TX,(uint8_t *)&check_TX_CAN,sizeof(managerTX_CAN_t));
 80086e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008710 <ON_OFF_Button+0x47c>)
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 80086ee:	2308      	movs	r3, #8
 80086f0:	2102      	movs	r1, #2
 80086f2:	f007 ff49 	bl	8010588 <OS_task_post_event>
    }
    
}
 80086f6:	bf00      	nop
 80086f8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bdb0      	pop	{r4, r5, r7, pc}
 8008700:	080153a4 	.word	0x080153a4
 8008704:	080153b8 	.word	0x080153b8
 8008708:	08016114 	.word	0x08016114
 800870c:	2000049c 	.word	0x2000049c
 8008710:	08015a24 	.word	0x08015a24

08008714 <select_running_program>:

void select_running_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
    uint8_t programID = screen_event->data; // Get new index program
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	789b      	ldrb	r3, [r3, #2]
 8008722:	73fb      	strb	r3, [r7, #15]

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f002 fa9f 	bl	800ac6c <Screen_ShowData_Mainpage>
}
 800872e:	bf00      	nop
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <select_modify_program>:

void select_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008738:	b5b0      	push	{r4, r5, r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
    // Get the index modify program 
    uint8_t index_program = screen_event->data;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	789b      	ldrb	r3, [r3, #2]
 8008746:	75fb      	strb	r3, [r7, #23]
    screen_obj->modify_program_index = index_program;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	7dfa      	ldrb	r2, [r7, #23]
 800874c:	f883 25b6 	strb.w	r2, [r3, #1462]	@ 0x5b6
    
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 8008750:	7dfa      	ldrb	r2, [r7, #23]
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	4613      	mov	r3, r2
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	4413      	add	r3, r2
 800875a:	011b      	lsls	r3, r3, #4
 800875c:	440b      	add	r3, r1
 800875e:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4618      	mov	r0, r3
 8008766:	f7f7 fcfd 	bl	8000164 <strlen>
 800876a:	4603      	mov	r3, r0
 800876c:	b2db      	uxtb	r3, r3
 800876e:	3309      	adds	r3, #9
 8008770:	75bb      	strb	r3, [r7, #22]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 8008772:	7dfa      	ldrb	r2, [r7, #23]
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	4613      	mov	r3, r2
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	4413      	add	r3, r2
 800877c:	011b      	lsls	r3, r3, #4
 800877e:	440b      	add	r3, r1
 8008780:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f7f7 fcec 	bl	8000164 <strlen>
 800878c:	4603      	mov	r3, r0
 800878e:	b2db      	uxtb	r3, r3
 8008790:	330f      	adds	r3, #15
 8008792:	757b      	strb	r3, [r7, #21]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8008794:	7dbb      	ldrb	r3, [r7, #22]
 8008796:	3301      	adds	r3, #1
 8008798:	4618      	mov	r0, r3
 800879a:	f008 f927 	bl	80109ec <malloc>
 800879e:	4603      	mov	r3, r0
 80087a0:	613b      	str	r3, [r7, #16]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 80087a2:	7d7b      	ldrb	r3, [r7, #21]
 80087a4:	3301      	adds	r3, #1
 80087a6:	4618      	mov	r0, r3
 80087a8:	f008 f920 	bl	80109ec <malloc>
 80087ac:	4603      	mov	r3, r0
 80087ae:	60fb      	str	r3, [r7, #12]

    strcpy(Text_Name_IC,"IC Name: ");
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	4925      	ldr	r1, [pc, #148]	@ (8008848 <select_modify_program+0x110>)
 80087b4:	461a      	mov	r2, r3
 80087b6:	460b      	mov	r3, r1
 80087b8:	cb03      	ldmia	r3!, {r0, r1}
 80087ba:	6010      	str	r0, [r2, #0]
 80087bc:	6051      	str	r1, [r2, #4]
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	8113      	strh	r3, [r2, #8]
    strncat(Text_Name_IC,screen_obj->Program_Testx[index_program].Name_IC,size_Name_IC - strlen("IC Name: "));
 80087c2:	7dfa      	ldrb	r2, [r7, #23]
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	4413      	add	r3, r2
 80087cc:	011b      	lsls	r3, r3, #4
 80087ce:	440b      	add	r3, r1
 80087d0:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80087d4:	6819      	ldr	r1, [r3, #0]
 80087d6:	7dbb      	ldrb	r3, [r7, #22]
 80087d8:	3b09      	subs	r3, #9
 80087da:	461a      	mov	r2, r3
 80087dc:	6938      	ldr	r0, [r7, #16]
 80087de:	f00a f956 	bl	8012a8e <strncat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4a19      	ldr	r2, [pc, #100]	@ (800884c <select_modify_program+0x114>)
 80087e6:	461c      	mov	r4, r3
 80087e8:	4615      	mov	r5, r2
 80087ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087ec:	6020      	str	r0, [r4, #0]
 80087ee:	6061      	str	r1, [r4, #4]
 80087f0:	60a2      	str	r2, [r4, #8]
 80087f2:	60e3      	str	r3, [r4, #12]
    strncat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC,size_Num_IC - strlen("Number of ICs: "));
 80087f4:	7dfa      	ldrb	r2, [r7, #23]
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	4613      	mov	r3, r2
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	4413      	add	r3, r2
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	440b      	add	r3, r1
 8008802:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008806:	6819      	ldr	r1, [r3, #0]
 8008808:	7d7b      	ldrb	r3, [r7, #21]
 800880a:	3b0f      	subs	r3, #15
 800880c:	461a      	mov	r2, r3
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f00a f93d 	bl	8012a8e <strncat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 8008814:	7dbb      	ldrb	r3, [r7, #22]
 8008816:	b29b      	uxth	r3, r3
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	f249 5120 	movw	r1, #38176	@ 0x9520
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f006 fc5a 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 8008824:	7d7b      	ldrb	r3, [r7, #21]
 8008826:	b29b      	uxth	r3, r3
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	f249 5140 	movw	r1, #38208	@ 0x9540
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f006 fc52 	bl	800f0d8 <DWIN_SetText>

    free(Text_Name_IC);
 8008834:	6938      	ldr	r0, [r7, #16]
 8008836:	f008 f8e1 	bl	80109fc <free>
    free(Text_Num_IC);
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f008 f8de 	bl	80109fc <free>
}
 8008840:	bf00      	nop
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bdb0      	pop	{r4, r5, r7, pc}
 8008848:	080153c8 	.word	0x080153c8
 800884c:	080153d4 	.word	0x080153d4

08008850 <Navigation_num_keyboard>:

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008850:	b590      	push	{r4, r7, lr}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	889a      	ldrh	r2, [r3, #4]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	819a      	strh	r2, [r3, #12]
    /* get index vp to show the info of keyboard */
    uint8_t index_condition;
    index_condition = Index_VP(screen_obj->Screen_keyboard.VP_Text,lookup_VP_condition,(sizeof(lookup_VP_condition)/ sizeof(lookup_VP_condition[0])));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	899b      	ldrh	r3, [r3, #12]
 8008866:	2207      	movs	r2, #7
 8008868:	492e      	ldr	r1, [pc, #184]	@ (8008924 <Navigation_num_keyboard+0xd4>)
 800886a:	4618      	mov	r0, r3
 800886c:	f001 fb1a 	bl	8009ea4 <Index_VP>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]
    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	330e      	adds	r3, #14
 8008880:	2232      	movs	r2, #50	@ 0x32
 8008882:	2100      	movs	r1, #0
 8008884:	4618      	mov	r0, r3
 8008886:	f00a f8eb 	bl	8012a60 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f103 020e 	add.w	r2, r3, #14
 8008890:	2332      	movs	r3, #50	@ 0x32
 8008892:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f006 fc1e 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard,text_numkeyboard[index_condition].String_Name,strlen(text_numkeyboard[index_condition].String_Name));
 800889c:	7bfa      	ldrb	r2, [r7, #15]
 800889e:	4613      	mov	r3, r2
 80088a0:	011b      	lsls	r3, r3, #4
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	4a20      	ldr	r2, [pc, #128]	@ (8008928 <Navigation_num_keyboard+0xd8>)
 80088a8:	189c      	adds	r4, r3, r2
 80088aa:	7bfa      	ldrb	r2, [r7, #15]
 80088ac:	4613      	mov	r3, r2
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008928 <Navigation_num_keyboard+0xd8>)
 80088b6:	4413      	add	r3, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7f7 fc53 	bl	8000164 <strlen>
 80088be:	4603      	mov	r3, r0
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	4622      	mov	r2, r4
 80088c4:	f24f 0180 	movw	r1, #61568	@ 0xf080
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f006 fc05 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowUnit_Keyboard,text_numkeyboard[index_condition].String_Unit,strlen(text_numkeyboard[index_condition].String_Unit));
 80088ce:	7bfa      	ldrb	r2, [r7, #15]
 80088d0:	4613      	mov	r3, r2
 80088d2:	011b      	lsls	r3, r3, #4
 80088d4:	1a9b      	subs	r3, r3, r2
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	3308      	adds	r3, #8
 80088da:	4a13      	ldr	r2, [pc, #76]	@ (8008928 <Navigation_num_keyboard+0xd8>)
 80088dc:	4413      	add	r3, r2
 80088de:	1ddc      	adds	r4, r3, #7
 80088e0:	7bfa      	ldrb	r2, [r7, #15]
 80088e2:	4613      	mov	r3, r2
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	1a9b      	subs	r3, r3, r2
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	3308      	adds	r3, #8
 80088ec:	4a0e      	ldr	r2, [pc, #56]	@ (8008928 <Navigation_num_keyboard+0xd8>)
 80088ee:	4413      	add	r3, r2
 80088f0:	3307      	adds	r3, #7
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7f7 fc36 	bl	8000164 <strlen>
 80088f8:	4603      	mov	r3, r0
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	4622      	mov	r2, r4
 80088fe:	f24f 0150 	movw	r1, #61520	@ 0xf050
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f006 fbe8 	bl	800f0d8 <DWIN_SetText>
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 8008908:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f006 fc53 	bl	800f1b8 <DWIN_ClearText>
    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
 8008912:	216d      	movs	r1, #109	@ 0x6d
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f006 fbb8 	bl	800f08a <DWIN_SetPage>
}
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	bd90      	pop	{r4, r7, pc}
 8008922:	bf00      	nop
 8008924:	20000028 	.word	0x20000028
 8008928:	2000007c 	.word	0x2000007c

0800892c <Navigation_full_keyboard>:

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	889a      	ldrh	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	330e      	adds	r3, #14
 800894a:	2232      	movs	r2, #50	@ 0x32
 800894c:	2100      	movs	r1, #0
 800894e:	4618      	mov	r0, r3
 8008950:	f00a f886 	bl	8012a60 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f103 020e 	add.w	r2, r3, #14
 800895a:	2332      	movs	r3, #50	@ 0x32
 800895c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f006 fbb9 	bl	800f0d8 <DWIN_SetText>
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 8008966:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f006 fc24 	bl	800f1b8 <DWIN_ClearText>
    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
 8008970:	2178      	movs	r1, #120	@ 0x78
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f006 fb89 	bl	800f08a <DWIN_SetPage>
}
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <Save_Information>:

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008982:	b0c7      	sub	sp, #284	@ 0x11c
 8008984:	af02      	add	r7, sp, #8
 8008986:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800898a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800898e:	6018      	str	r0, [r3, #0]
 8008990:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008994:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008998:	6019      	str	r1, [r3, #0]
    /* update value */
    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp != NULL) {
 800899a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800899e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80089a8:	4619      	mov	r1, r3
 80089aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	460b      	mov	r3, r1
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	440b      	add	r3, r1
 80089ba:	011b      	lsls	r3, r3, #4
 80089bc:	4413      	add	r3, r2
 80089be:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 80d9 	beq.w	8008b7c <Save_Information+0x1fc>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program != NULL) {
 80089ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80089d8:	4619      	mov	r1, r3
 80089da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	460b      	mov	r3, r1
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	440b      	add	r3, r1
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d02d      	beq.n	8008a54 <Save_Information+0xd4>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program);
 80089f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008a06:	4619      	mov	r1, r3
 8008a08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	460b      	mov	r3, r1
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	440b      	add	r3, r1
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f007 ffea 	bl	80109fc <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program = NULL;
 8008a28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008a36:	4619      	mov	r1, r3
 8008a38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	460b      	mov	r3, r1
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	440b      	add	r3, r1
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp));
 8008a54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008a62:	4619      	mov	r1, r3
 8008a64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	440b      	add	r3, r1
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	4413      	add	r3, r2
 8008a78:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f7 fb70 	bl	8000164 <strlen>
 8008a84:	4602      	mov	r2, r0
 8008a86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008a94:	461c      	mov	r4, r3
 8008a96:	4610      	mov	r0, r2
 8008a98:	f007 ffa8 	bl	80109ec <malloc>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008aa4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	4623      	mov	r3, r4
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	4423      	add	r3, r4
 8008ab0:	011b      	lsls	r3, r3, #4
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008ab8:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8008aba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008abe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008ac8:	4619      	mov	r1, r3
 8008aca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ace:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	440b      	add	r3, r1
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008ae2:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp
 8008ae4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ae8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008af2:	4619      	mov	r1, r3
 8008af4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008af8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	460b      	mov	r3, r1
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	440b      	add	r3, r1
 8008b04:	011b      	lsls	r3, r3, #4
 8008b06:	4413      	add	r3, r2
 8008b08:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8008b0c:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp)+1);
 8008b0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	440b      	add	r3, r1
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	4413      	add	r3, r2
 8008b32:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7f7 fb13 	bl	8000164 <strlen>
 8008b3e:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8008b40:	3301      	adds	r3, #1
 8008b42:	461a      	mov	r2, r3
 8008b44:	4629      	mov	r1, r5
 8008b46:	4620      	mov	r0, r4
 8008b48:	f00a f8d3 	bl	8012cf2 <memcpy>
        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp);
 8008b4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	460b      	mov	r3, r1
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	440b      	add	r3, r1
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	4413      	add	r3, r2
 8008b70:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f007 ff40 	bl	80109fc <free>
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp != NULL) {
 8008b7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	460b      	mov	r3, r1
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	440b      	add	r3, r1
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 80ef 	beq.w	8008d8a <Save_Information+0x40a>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC != NULL) {
 8008bac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008bb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008bba:	4619      	mov	r1, r3
 8008bbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008bc0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	440b      	add	r3, r1
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d02d      	beq.n	8008c36 <Save_Information+0x2b6>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 8008bda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008bde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008be8:	4619      	mov	r1, r3
 8008bea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008bee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	440b      	add	r3, r1
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f007 fef9 	bl	80109fc <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = NULL;
 8008c0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008c18:	4619      	mov	r1, r3
 8008c1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	460b      	mov	r3, r1
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	440b      	add	r3, r1
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp));
 8008c36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008c44:	4619      	mov	r1, r3
 8008c46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	460b      	mov	r3, r1
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	440b      	add	r3, r1
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	4413      	add	r3, r2
 8008c5a:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7f7 fa7f 	bl	8000164 <strlen>
 8008c66:	4602      	mov	r2, r0
 8008c68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008c76:	461c      	mov	r4, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f007 feb7 	bl	80109ec <malloc>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4619      	mov	r1, r3
 8008c82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	4623      	mov	r3, r4
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	4423      	add	r3, r4
 8008c92:	011b      	lsls	r3, r3, #4
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008c9a:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 8008c9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ca0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008caa:	4619      	mov	r1, r3
 8008cac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	440b      	add	r3, r1
 8008cbc:	011b      	lsls	r3, r3, #4
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008cc4:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp
 8008cc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	440b      	add	r3, r1
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	4413      	add	r3, r2
 8008cea:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008cee:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp)+1);
 8008cf0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cf4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008cfe:	4619      	mov	r1, r3
 8008d00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	440b      	add	r3, r1
 8008d10:	011b      	lsls	r3, r3, #4
 8008d12:	4413      	add	r3, r2
 8008d14:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7f7 fa22 	bl	8000164 <strlen>
 8008d20:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 8008d22:	3301      	adds	r3, #1
 8008d24:	461a      	mov	r2, r3
 8008d26:	4629      	mov	r1, r5
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f009 ffe2 	bl	8012cf2 <memcpy>

        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp);
 8008d2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	440b      	add	r3, r1
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	4413      	add	r3, r2
 8008d52:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f007 fe4f 	bl	80109fc <free>
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = NULL;
 8008d5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	440b      	add	r3, r1
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	4413      	add	r3, r2
 8008d82:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp != NULL) {
 8008d8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008d98:	4619      	mov	r1, r3
 8008d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	460b      	mov	r3, r1
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	440b      	add	r3, r1
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	4413      	add	r3, r2
 8008dae:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 80ee 	beq.w	8008f96 <Save_Information+0x616>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC != NULL) {
 8008dba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	440b      	add	r3, r1
 8008dda:	011b      	lsls	r3, r3, #4
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d02d      	beq.n	8008e44 <Save_Information+0x4c4>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 8008de8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008df6:	4619      	mov	r1, r3
 8008df8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dfc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	460b      	mov	r3, r1
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	440b      	add	r3, r1
 8008e08:	011b      	lsls	r3, r3, #4
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f007 fdf2 	bl	80109fc <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = NULL;
 8008e18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008e26:	4619      	mov	r1, r3
 8008e28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	460b      	mov	r3, r1
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	440b      	add	r3, r1
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008e40:	2200      	movs	r2, #0
 8008e42:	601a      	str	r2, [r3, #0]
        } 
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp));
 8008e44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008e52:	4619      	mov	r1, r3
 8008e54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	005b      	lsls	r3, r3, #1
 8008e62:	440b      	add	r3, r1
 8008e64:	011b      	lsls	r3, r3, #4
 8008e66:	4413      	add	r3, r2
 8008e68:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7f7 f978 	bl	8000164 <strlen>
 8008e74:	4602      	mov	r2, r0
 8008e76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008e84:	461c      	mov	r4, r3
 8008e86:	4610      	mov	r0, r2
 8008e88:	f007 fdb0 	bl	80109ec <malloc>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	4619      	mov	r1, r3
 8008e90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	4623      	mov	r3, r4
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	4423      	add	r3, r4
 8008ea0:	011b      	lsls	r3, r3, #4
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008ea8:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC
 8008eaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ebe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	440b      	add	r3, r1
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008ed2:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp
 8008ed4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ed8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ee8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	440b      	add	r3, r1
 8008ef4:	011b      	lsls	r3, r3, #4
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8008efc:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp));
 8008efe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	440b      	add	r3, r1
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	4413      	add	r3, r2
 8008f22:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8008f26:	681b      	ldr	r3, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7f7 f91b 	bl	8000164 <strlen>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	461a      	mov	r2, r3
 8008f32:	4629      	mov	r1, r5
 8008f34:	4620      	mov	r0, r4
 8008f36:	f009 fedc 	bl	8012cf2 <memcpy>

        free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp);
 8008f3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	460b      	mov	r3, r1
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	440b      	add	r3, r1
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f007 fd49 	bl	80109fc <free>
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = NULL;
 8008f6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008f78:	4619      	mov	r1, r3
 8008f7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	460b      	mov	r3, r1
 8008f86:	005b      	lsls	r3, r3, #1
 8008f88:	440b      	add	r3, r1
 8008f8a:	011b      	lsls	r3, r3, #4
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
    }

    /* get data for testing ic */
    if (get_data_testing_ic(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,&screen_obj->Program_Testx[screen_obj->modify_program_index]) == false) {
 8008f96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008faa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	440b      	add	r3, r1
 8008fb6:	011b      	lsls	r3, r3, #4
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fc4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008fce:	4619      	mov	r1, r3
 8008fd0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fd4:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8008fd8:	460b      	mov	r3, r1
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	440b      	add	r3, r1
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008fe4:	6812      	ldr	r2, [r2, #0]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	4619      	mov	r1, r3
 8008fea:	f001 ff87 	bl	800aefc <get_data_testing_ic>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f083 0301 	eor.w	r3, r3, #1
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f040 825c 	bne.w	80094b4 <Save_Information+0xb34>
        return;
    }

    /* send to esp32 */
    char buffer_send[200];
    memset(buffer_send,0,200);
 8008ffc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009000:	22c8      	movs	r2, #200	@ 0xc8
 8009002:	2100      	movs	r1, #0
 8009004:	4618      	mov	r0, r3
 8009006:	f009 fd2b 	bl	8012a60 <memset>
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800900a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800900e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009018:	1c5c      	adds	r4, r3, #1
 800901a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800901e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009028:	4619      	mov	r1, r3
 800902a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800902e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	460b      	mov	r3, r1
 8009036:	005b      	lsls	r3, r3, #1
 8009038:	440b      	add	r3, r1
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	4413      	add	r3, r2
 800903e:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8009042:	681d      	ldr	r5, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 8009044:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009048:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009052:	4619      	mov	r1, r3
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8009054:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009058:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	460b      	mov	r3, r1
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	440b      	add	r3, r1
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	4413      	add	r3, r2
 8009068:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800906c:	681a      	ldr	r2, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800906e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009072:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800907c:	4618      	mov	r0, r3
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800907e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009082:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009086:	6819      	ldr	r1, [r3, #0]
 8009088:	4603      	mov	r3, r0
 800908a:	005b      	lsls	r3, r3, #1
 800908c:	4403      	add	r3, r0
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	440b      	add	r3, r1
 8009092:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	9200      	str	r2, [sp, #0]
 80090a0:	462b      	mov	r3, r5
 80090a2:	4622      	mov	r2, r4
 80090a4:	49db      	ldr	r1, [pc, #876]	@ (8009414 <Save_Information+0xa94>)
 80090a6:	f009 fbd1 	bl	801284c <siprintf>
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 80090aa:	2008      	movs	r0, #8
 80090ac:	f007 fc9e 	bl	80109ec <malloc>
 80090b0:	4603      	mov	r3, r0
 80090b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    data_send_esp32->data = (char *)malloc(strlen(buffer_send));
 80090b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7f7 f853 	bl	8000164 <strlen>
 80090be:	4603      	mov	r3, r0
 80090c0:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80090c2:	4618      	mov	r0, r3
 80090c4:	f007 fc92 	bl	80109ec <malloc>
 80090c8:	4603      	mov	r3, r0
 80090ca:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data,"p",screen_obj->modify_program_index + 1);
 80090cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80090de:	3301      	adds	r3, #1
 80090e0:	461a      	mov	r2, r3
 80090e2:	49cd      	ldr	r1, [pc, #820]	@ (8009418 <Save_Information+0xa98>)
 80090e4:	f009 fe05 	bl	8012cf2 <memcpy>
    memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send));
 80090e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	1c5c      	adds	r4, r3, #1
 80090ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7f7 f836 	bl	8000164 <strlen>
 80090f8:	4602      	mov	r2, r0
 80090fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80090fe:	4619      	mov	r1, r3
 8009100:	4620      	mov	r0, r4
 8009102:	f009 fdf6 	bl	8012cf2 <memcpy>
    data_send_esp32->len = strlen(buffer_send) + 1;
 8009106:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800910a:	4618      	mov	r0, r3
 800910c:	f7f7 f82a 	bl	8000164 <strlen>
 8009110:	4602      	mov	r2, r0
 8009112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009114:	3201      	adds	r2, #1
 8009116:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 8009118:	4bc0      	ldr	r3, [pc, #768]	@ (800941c <Save_Information+0xa9c>)
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8009120:	2308      	movs	r3, #8
 8009122:	2100      	movs	r1, #0
 8009124:	f007 fa30 	bl	8010588 <OS_task_post_event>

    /* store data to eeprom */
    char string_data[TOTAL_ONE_PROGRAM_TEST_LEN] = {0};
 8009128:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800912c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009130:	4618      	mov	r0, r3
 8009132:	232a      	movs	r3, #42	@ 0x2a
 8009134:	461a      	mov	r2, r3
 8009136:	2100      	movs	r1, #0
 8009138:	f009 fc92 	bl	8012a60 <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 800913c:	200c      	movs	r0, #12
 800913e:	f007 fc55 	bl	80109ec <malloc>
 8009142:	4603      	mov	r3, r0
 8009144:	461a      	mov	r2, r3
 8009146:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800914a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800914e:	601a      	str	r2, [r3, #0]
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8009150:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009154:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800915e:	4619      	mov	r1, r3
 8009160:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009164:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	460b      	mov	r3, r1
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	440b      	add	r3, r1
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	4413      	add	r3, r2
 8009174:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8009178:	681c      	ldr	r4, [r3, #0]
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 800917a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800917e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009188:	4619      	mov	r1, r3
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800918a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800918e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	460b      	mov	r3, r1
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	440b      	add	r3, r1
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	4413      	add	r3, r2
 800919e:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80091a2:	681a      	ldr	r2, [r3, #0]
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 80091a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80091b2:	4618      	mov	r0, r3
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 80091b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091bc:	6819      	ldr	r1, [r3, #0]
 80091be:	4603      	mov	r3, r0
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	4403      	add	r3, r0
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	440b      	add	r3, r1
 80091c8:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f107 000c 	add.w	r0, r7, #12
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	9200      	str	r2, [sp, #0]
 80091d6:	4623      	mov	r3, r4
 80091d8:	4a91      	ldr	r2, [pc, #580]	@ (8009420 <Save_Information+0xaa0>)
 80091da:	212a      	movs	r1, #42	@ 0x2a
 80091dc:	f009 fb00 	bl	80127e0 <sniprintf>
    data_write->data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 80091e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e8:	681c      	ldr	r4, [r3, #0]
 80091ea:	202a      	movs	r0, #42	@ 0x2a
 80091ec:	f007 fbfe 	bl	80109ec <malloc>
 80091f0:	4603      	mov	r3, r0
 80091f2:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 80091f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009208:	461c      	mov	r4, r3
 800920a:	4694      	mov	ip, r2
 800920c:	f104 0e20 	add.w	lr, r4, #32
 8009210:	4665      	mov	r5, ip
 8009212:	4626      	mov	r6, r4
 8009214:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009216:	6028      	str	r0, [r5, #0]
 8009218:	6069      	str	r1, [r5, #4]
 800921a:	60aa      	str	r2, [r5, #8]
 800921c:	60eb      	str	r3, [r5, #12]
 800921e:	3410      	adds	r4, #16
 8009220:	f10c 0c10 	add.w	ip, ip, #16
 8009224:	4574      	cmp	r4, lr
 8009226:	d1f3      	bne.n	8009210 <Save_Information+0x890>
 8009228:	4662      	mov	r2, ip
 800922a:	4623      	mov	r3, r4
 800922c:	cb03      	ldmia	r3!, {r0, r1}
 800922e:	6010      	str	r0, [r2, #0]
 8009230:	6051      	str	r1, [r2, #4]
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	8113      	strh	r3, [r2, #8]
    data_write->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 8009236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800923a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	222a      	movs	r2, #42	@ 0x2a
 8009242:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_PROGRAM_TEST_X(screen_obj->modify_program_index);
 8009244:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009248:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009252:	461a      	mov	r2, r3
 8009254:	0052      	lsls	r2, r2, #1
 8009256:	4413      	add	r3, r2
 8009258:	461a      	mov	r2, r3
 800925a:	00d2      	lsls	r2, r2, #3
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	005b      	lsls	r3, r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3243      	adds	r2, #67	@ 0x43
 800926e:	b292      	uxth	r2, r2
 8009270:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 8009272:	4b6c      	ldr	r3, [pc, #432]	@ (8009424 <Save_Information+0xaa4>)
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	f107 0208 	add.w	r2, r7, #8
 800927a:	230c      	movs	r3, #12
 800927c:	2105      	movs	r1, #5
 800927e:	f007 f983 	bl	8010588 <OS_task_post_event>

    // Show data in screen
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 8009282:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009286:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009290:	4619      	mov	r1, r3
 8009292:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009296:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	460b      	mov	r3, r1
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	440b      	add	r3, r1
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7f6 ff59 	bl	8000164 <strlen>
 80092b2:	4603      	mov	r3, r0
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	3309      	adds	r3, #9
 80092b8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 80092bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80092ca:	4619      	mov	r1, r3
 80092cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	460b      	mov	r3, r1
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	440b      	add	r3, r1
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	4413      	add	r3, r2
 80092e0:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7f6 ff3c 	bl	8000164 <strlen>
 80092ec:	4603      	mov	r3, r0
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	330f      	adds	r3, #15
 80092f2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 80092f6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80092fa:	3301      	adds	r3, #1
 80092fc:	4618      	mov	r0, r3
 80092fe:	f007 fb75 	bl	80109ec <malloc>
 8009302:	4603      	mov	r3, r0
 8009304:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8009308:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800930c:	3301      	adds	r3, #1
 800930e:	4618      	mov	r0, r3
 8009310:	f007 fb6c 	bl	80109ec <malloc>
 8009314:	4603      	mov	r3, r0
 8009316:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    strcpy(Text_Name_IC,"IC Name: ");
 800931a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800931e:	4942      	ldr	r1, [pc, #264]	@ (8009428 <Save_Information+0xaa8>)
 8009320:	461a      	mov	r2, r3
 8009322:	460b      	mov	r3, r1
 8009324:	cb03      	ldmia	r3!, {r0, r1}
 8009326:	6010      	str	r0, [r2, #0]
 8009328:	6051      	str	r1, [r2, #4]
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 800932e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009332:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800933c:	4619      	mov	r1, r3
 800933e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009342:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	460b      	mov	r3, r1
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	440b      	add	r3, r1
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	4413      	add	r3, r2
 8009352:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4619      	mov	r1, r3
 800935a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800935e:	f009 fb87 	bl	8012a70 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8009362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009366:	4a31      	ldr	r2, [pc, #196]	@ (800942c <Save_Information+0xaac>)
 8009368:	461c      	mov	r4, r3
 800936a:	4615      	mov	r5, r2
 800936c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800936e:	6020      	str	r0, [r4, #0]
 8009370:	6061      	str	r1, [r4, #4]
 8009372:	60a2      	str	r2, [r4, #8]
 8009374:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 8009376:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800937a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009384:	4619      	mov	r1, r3
 8009386:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800938a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	460b      	mov	r3, r1
 8009392:	005b      	lsls	r3, r3, #1
 8009394:	440b      	add	r3, r1
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	4413      	add	r3, r2
 800939a:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4619      	mov	r1, r3
 80093a2:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80093a6:	f009 fb63 	bl	8012a70 <strcat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 80093aa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80093b4:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 80093b8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80093bc:	f249 5120 	movw	r1, #38176	@ 0x9520
 80093c0:	6800      	ldr	r0, [r0, #0]
 80093c2:	f005 fe89 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 80093c6:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80093d0:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 80093d4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80093d8:	f249 5140 	movw	r1, #38208	@ 0x9540
 80093dc:	6800      	ldr	r0, [r0, #0]
 80093de:	f005 fe7b 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 80093e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80093f0:	461a      	mov	r2, r3
 80093f2:	0092      	lsls	r2, r2, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 80093fe:	3b58      	subs	r3, #88	@ 0x58
 8009400:	b29c      	uxth	r4, r3
 8009402:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009406:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009410:	e00e      	b.n	8009430 <Save_Information+0xab0>
 8009412:	bf00      	nop
 8009414:	080153e4 	.word	0x080153e4
 8009418:	080153f0 	.word	0x080153f0
 800941c:	08016114 	.word	0x08016114
 8009420:	080153f4 	.word	0x080153f4
 8009424:	0801610c 	.word	0x0801610c
 8009428:	080153c8 	.word	0x080153c8
 800942c:	080153d4 	.word	0x080153d4
 8009430:	4619      	mov	r1, r3
 8009432:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009436:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	460b      	mov	r3, r1
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	440b      	add	r3, r1
 8009442:	011b      	lsls	r3, r3, #4
 8009444:	4413      	add	r3, r2
 8009446:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800944a:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 800944c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009450:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800945a:	4619      	mov	r1, r3
 800945c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009460:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	460b      	mov	r3, r1
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	440b      	add	r3, r1
 800946c:	011b      	lsls	r3, r3, #4
 800946e:	4413      	add	r3, r2
 8009470:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4618      	mov	r0, r3
 8009478:	f7f6 fe74 	bl	8000164 <strlen>
 800947c:	4603      	mov	r3, r0
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800947e:	b29b      	uxth	r3, r3
 8009480:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009484:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 8009488:	462a      	mov	r2, r5
 800948a:	4621      	mov	r1, r4
 800948c:	6800      	ldr	r0, [r0, #0]
 800948e:	f005 fe23 	bl	800f0d8 <DWIN_SetText>

    free(Text_Name_IC);
 8009492:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8009496:	f007 fab1 	bl	80109fc <free>
    free(Text_Num_IC);
 800949a:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 800949e:	f007 faad 	bl	80109fc <free>
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 80094a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094aa:	216b      	movs	r1, #107	@ 0x6b
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	f005 fdec 	bl	800f08a <DWIN_SetPage>
 80094b2:	e000      	b.n	80094b6 <Save_Information+0xb36>
        return;
 80094b4:	bf00      	nop
}
 80094b6:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094be:	bf00      	nop

080094c0 <Enter_password>:

void Enter_password(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80094c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094c4:	b089      	sub	sp, #36	@ 0x24
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	6039      	str	r1, [r7, #0]
 80094cc:	466b      	mov	r3, sp
 80094ce:	461e      	mov	r6, r3
    /* Get the password input */
    uint8_t len = screen_obj->Screen_keyboard.Index_String + 1;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	3301      	adds	r3, #1
 80094da:	77fb      	strb	r3, [r7, #31]
    char input_pass[len];
 80094dc:	7ff9      	ldrb	r1, [r7, #31]
 80094de:	460b      	mov	r3, r1
 80094e0:	3b01      	subs	r3, #1
 80094e2:	61bb      	str	r3, [r7, #24]
 80094e4:	b2cb      	uxtb	r3, r1
 80094e6:	2200      	movs	r2, #0
 80094e8:	4698      	mov	r8, r3
 80094ea:	4691      	mov	r9, r2
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	f04f 0300 	mov.w	r3, #0
 80094f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009500:	b2cb      	uxtb	r3, r1
 8009502:	2200      	movs	r2, #0
 8009504:	461c      	mov	r4, r3
 8009506:	4615      	mov	r5, r2
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	f04f 0300 	mov.w	r3, #0
 8009510:	00eb      	lsls	r3, r5, #3
 8009512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009516:	00e2      	lsls	r2, r4, #3
 8009518:	460b      	mov	r3, r1
 800951a:	3307      	adds	r3, #7
 800951c:	08db      	lsrs	r3, r3, #3
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	ebad 0d03 	sub.w	sp, sp, r3
 8009524:	466b      	mov	r3, sp
 8009526:	3300      	adds	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
    strcpy(input_pass,screen_obj->Screen_keyboard.String);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	330e      	adds	r3, #14
 800952e:	4619      	mov	r1, r3
 8009530:	6978      	ldr	r0, [r7, #20]
 8009532:	f009 fbc8 	bl	8012cc6 <strcpy>
    /* Check password */
    if (strcmp(input_pass,MACHINE_PASSWORD) == 0) { /* Correct password */
 8009536:	493f      	ldr	r1, [pc, #252]	@ (8009634 <Enter_password+0x174>)
 8009538:	6978      	ldr	r0, [r7, #20]
 800953a:	f7f6 fe09 	bl	8000150 <strcmp>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d16a      	bne.n	800961a <Enter_password+0x15a>
        /* show data page */
        switch (screen_obj->page_setting) {
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 35b7 	ldrb.w	r3, [r3, #1463]	@ 0x5b7
 800954a:	2b6b      	cmp	r3, #107	@ 0x6b
 800954c:	d15c      	bne.n	8009608 <Enter_password+0x148>
            case DWINPAGE_SETTING_PROGRAM : {
                // Show data in screen
                uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 8009554:	4618      	mov	r0, r3
 8009556:	f7f6 fe05 	bl	8000164 <strlen>
 800955a:	4603      	mov	r3, r0
 800955c:	b2db      	uxtb	r3, r3
 800955e:	3309      	adds	r3, #9
 8009560:	74fb      	strb	r3, [r7, #19]
                uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 8009568:	4618      	mov	r0, r3
 800956a:	f7f6 fdfb 	bl	8000164 <strlen>
 800956e:	4603      	mov	r3, r0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	330f      	adds	r3, #15
 8009574:	74bb      	strb	r3, [r7, #18]

                char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8009576:	7cfb      	ldrb	r3, [r7, #19]
 8009578:	3301      	adds	r3, #1
 800957a:	4618      	mov	r0, r3
 800957c:	f007 fa36 	bl	80109ec <malloc>
 8009580:	4603      	mov	r3, r0
 8009582:	60fb      	str	r3, [r7, #12]
                char *Text_Num_IC = malloc(size_Num_IC + 1);
 8009584:	7cbb      	ldrb	r3, [r7, #18]
 8009586:	3301      	adds	r3, #1
 8009588:	4618      	mov	r0, r3
 800958a:	f007 fa2f 	bl	80109ec <malloc>
 800958e:	4603      	mov	r3, r0
 8009590:	60bb      	str	r3, [r7, #8]

                strcpy(Text_Name_IC,"IC Name: ");
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	4928      	ldr	r1, [pc, #160]	@ (8009638 <Enter_password+0x178>)
 8009596:	461a      	mov	r2, r3
 8009598:	460b      	mov	r3, r1
 800959a:	cb03      	ldmia	r3!, {r0, r1}
 800959c:	6010      	str	r0, [r2, #0]
 800959e:	6051      	str	r1, [r2, #4]
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	8113      	strh	r3, [r2, #8]
                strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80095aa:	4619      	mov	r1, r3
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f009 fa5f 	bl	8012a70 <strcat>
                strcpy(Text_Num_IC,"Number of ICs: ");
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	4a21      	ldr	r2, [pc, #132]	@ (800963c <Enter_password+0x17c>)
 80095b6:	461c      	mov	r4, r3
 80095b8:	4615      	mov	r5, r2
 80095ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095bc:	6020      	str	r0, [r4, #0]
 80095be:	6061      	str	r1, [r4, #4]
 80095c0:	60a2      	str	r2, [r4, #8]
 80095c2:	60e3      	str	r3, [r4, #12]
                strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 80095ca:	4619      	mov	r1, r3
 80095cc:	68b8      	ldr	r0, [r7, #8]
 80095ce:	f009 fa4f 	bl	8012a70 <strcat>

                // Show data in screen
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 80095d2:	7cfb      	ldrb	r3, [r7, #19]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	f249 5120 	movw	r1, #38176	@ 0x9520
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f005 fd7b 	bl	800f0d8 <DWIN_SetText>
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 80095e2:	7cbb      	ldrb	r3, [r7, #18]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	f249 5140 	movw	r1, #38208	@ 0x9540
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f005 fd73 	bl	800f0d8 <DWIN_SetText>

                free(Text_Name_IC);
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f007 fa02 	bl	80109fc <free>
                free(Text_Num_IC);
 80095f8:	68b8      	ldr	r0, [r7, #8]
 80095fa:	f007 f9ff 	bl	80109fc <free>
                // Switch page
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 80095fe:	216b      	movs	r1, #107	@ 0x6b
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f005 fd42 	bl	800f08a <DWIN_SetPage>
            } break;
 8009606:	e000      	b.n	800960a <Enter_password+0x14a>

            default : break;
 8009608:	bf00      	nop
        }
        /* Goto setting page */
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->page_setting);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 35b7 	ldrb.w	r3, [r3, #1463]	@ 0x5b7
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f005 fd39 	bl	800f08a <DWIN_SetPage>
 8009618:	e006      	b.n	8009628 <Enter_password+0x168>
    } else {
        /* Show text */
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_Password,INCORRECT_PASSWORD_TEXT,strlen(INCORRECT_PASSWORD_TEXT));
 800961a:	2312      	movs	r3, #18
 800961c:	4a08      	ldr	r2, [pc, #32]	@ (8009640 <Enter_password+0x180>)
 800961e:	f249 5180 	movw	r1, #38272	@ 0x9580
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f005 fd58 	bl	800f0d8 <DWIN_SetText>
 8009628:	46b5      	mov	sp, r6
    }
}
 800962a:	bf00      	nop
 800962c:	3724      	adds	r7, #36	@ 0x24
 800962e:	46bd      	mov	sp, r7
 8009630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009634:	08015400 	.word	0x08015400
 8009638:	080153c8 	.word	0x080153c8
 800963c:	080153d4 	.word	0x080153d4
 8009640:	08015408 	.word	0x08015408

08009644 <Enter_num_keyboard>:

void Enter_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009644:	b590      	push	{r4, r7, lr}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
    uint16_t VP_show = screen_obj->Screen_keyboard.VP_Text;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	899b      	ldrh	r3, [r3, #12]
 8009652:	81fb      	strh	r3, [r7, #14]
    
    /* Show text to VP */
    DWIN_SetText((Dwin_t *)screen_obj,VP_show,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f103 020e 	add.w	r2, r3, #14
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009660:	89f9      	ldrh	r1, [r7, #14]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f005 fd38 	bl	800f0d8 <DWIN_SetText>

    /* Return page base on VP address */
    switch (VP_show) {
 8009668:	89fb      	ldrh	r3, [r7, #14]
 800966a:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 800966e:	4293      	cmp	r3, r2
 8009670:	f000 8176 	beq.w	8009960 <Enter_num_keyboard+0x31c>
 8009674:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 8009678:	4293      	cmp	r3, r2
 800967a:	f300 819e 	bgt.w	80099ba <Enter_num_keyboard+0x376>
 800967e:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 8009682:	4293      	cmp	r3, r2
 8009684:	f000 815e 	beq.w	8009944 <Enter_num_keyboard+0x300>
 8009688:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 800968c:	4293      	cmp	r3, r2
 800968e:	f300 8194 	bgt.w	80099ba <Enter_num_keyboard+0x376>
 8009692:	f249 5260 	movw	r2, #38240	@ 0x9560
 8009696:	4293      	cmp	r3, r2
 8009698:	d047      	beq.n	800972a <Enter_num_keyboard+0xe6>
 800969a:	f249 5260 	movw	r2, #38240	@ 0x9560
 800969e:	4293      	cmp	r3, r2
 80096a0:	f300 818b 	bgt.w	80099ba <Enter_num_keyboard+0x376>
 80096a4:	f249 5240 	movw	r2, #38208	@ 0x9540
 80096a8:	4293      	cmp	r3, r2
 80096aa:	f000 80f0 	beq.w	800988e <Enter_num_keyboard+0x24a>
 80096ae:	f249 5240 	movw	r2, #38208	@ 0x9540
 80096b2:	4293      	cmp	r3, r2
 80096b4:	f300 8181 	bgt.w	80099ba <Enter_num_keyboard+0x376>
 80096b8:	f249 5220 	movw	r2, #38176	@ 0x9520
 80096bc:	4293      	cmp	r3, r2
 80096be:	f000 8092 	beq.w	80097e6 <Enter_num_keyboard+0x1a2>
 80096c2:	f249 5220 	movw	r2, #38176	@ 0x9520
 80096c6:	4293      	cmp	r3, r2
 80096c8:	f300 8177 	bgt.w	80099ba <Enter_num_keyboard+0x376>
 80096cc:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 80096d0:	d035      	beq.n	800973e <Enter_num_keyboard+0xfa>
 80096d2:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 80096d6:	f300 8170 	bgt.w	80099ba <Enter_num_keyboard+0x376>
 80096da:	f249 0240 	movw	r2, #36928	@ 0x9040
 80096de:	4293      	cmp	r3, r2
 80096e0:	f000 814c 	beq.w	800997c <Enter_num_keyboard+0x338>
 80096e4:	f249 0240 	movw	r2, #36928	@ 0x9040
 80096e8:	4293      	cmp	r3, r2
 80096ea:	f300 8166 	bgt.w	80099ba <Enter_num_keyboard+0x376>
 80096ee:	f249 0230 	movw	r2, #36912	@ 0x9030
 80096f2:	4293      	cmp	r3, r2
 80096f4:	f000 8142 	beq.w	800997c <Enter_num_keyboard+0x338>
 80096f8:	f249 0230 	movw	r2, #36912	@ 0x9030
 80096fc:	4293      	cmp	r3, r2
 80096fe:	f300 815c 	bgt.w	80099ba <Enter_num_keyboard+0x376>
 8009702:	f249 0220 	movw	r2, #36896	@ 0x9020
 8009706:	4293      	cmp	r3, r2
 8009708:	f000 8138 	beq.w	800997c <Enter_num_keyboard+0x338>
 800970c:	f249 0220 	movw	r2, #36896	@ 0x9020
 8009710:	4293      	cmp	r3, r2
 8009712:	f300 8152 	bgt.w	80099ba <Enter_num_keyboard+0x376>
 8009716:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 800971a:	f000 812f 	beq.w	800997c <Enter_num_keyboard+0x338>
 800971e:	f249 0210 	movw	r2, #36880	@ 0x9010
 8009722:	4293      	cmp	r3, r2
 8009724:	f000 812a 	beq.w	800997c <Enter_num_keyboard+0x338>
                DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
                DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
            } 
        } break;
        
        default: break;
 8009728:	e147      	b.n	80099ba <Enter_num_keyboard+0x376>
            DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password); /* Clear warning text if any */
 800972a:	f249 5180 	movw	r1, #38272	@ 0x9580
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f005 fd42 	bl	800f1b8 <DWIN_ClearText>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 8009734:	216e      	movs	r1, #110	@ 0x6e
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f005 fca7 	bl	800f08a <DWIN_SetPage>
        } break;
 800973c:	e142      	b.n	80099c4 <Enter_num_keyboard+0x380>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	d107      	bne.n	8009758 <Enter_num_keyboard+0x114>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 8009748:	2314      	movs	r3, #20
 800974a:	4aa0      	ldr	r2, [pc, #640]	@ (80099cc <Enter_num_keyboard+0x388>)
 800974c:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f005 fcc1 	bl	800f0d8 <DWIN_SetText>
                return;
 8009756:	e135      	b.n	80099c4 <Enter_num_keyboard+0x380>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800975e:	3301      	adds	r3, #1
 8009760:	461a      	mov	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009768:	461c      	mov	r4, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f007 f93e 	bl	80109ec <malloc>
 8009770:	4603      	mov	r3, r0
 8009772:	4619      	mov	r1, r3
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	4623      	mov	r3, r4
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	4423      	add	r3, r4
 800977c:	011b      	lsls	r3, r3, #4
 800977e:	4413      	add	r3, r2
 8009780:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8009784:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800978c:	4619      	mov	r1, r3
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	440b      	add	r3, r1
 8009796:	011b      	lsls	r3, r3, #4
 8009798:	4413      	add	r3, r2
 800979a:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 800979e:	6818      	ldr	r0, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80097a6:	3301      	adds	r3, #1
 80097a8:	461a      	mov	r2, r3
 80097aa:	2100      	movs	r1, #0
 80097ac:	f009 f958 	bl	8012a60 <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80097b6:	4619      	mov	r1, r3
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	460b      	mov	r3, r1
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	440b      	add	r3, r1
 80097c0:	011b      	lsls	r3, r3, #4
 80097c2:	4413      	add	r3, r2
 80097c4:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f103 010e 	add.w	r1, r3, #14
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80097d6:	461a      	mov	r2, r3
 80097d8:	f009 fa8b 	bl	8012cf2 <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 80097dc:	216c      	movs	r1, #108	@ 0x6c
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f005 fc53 	bl	800f08a <DWIN_SetPage>
        } break;
 80097e4:	e0ee      	b.n	80099c4 <Enter_num_keyboard+0x380>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d107      	bne.n	8009800 <Enter_num_keyboard+0x1bc>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 80097f0:	2314      	movs	r3, #20
 80097f2:	4a76      	ldr	r2, [pc, #472]	@ (80099cc <Enter_num_keyboard+0x388>)
 80097f4:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f005 fc6d 	bl	800f0d8 <DWIN_SetText>
                return;
 80097fe:	e0e1      	b.n	80099c4 <Enter_num_keyboard+0x380>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009806:	3301      	adds	r3, #1
 8009808:	461a      	mov	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009810:	461c      	mov	r4, r3
 8009812:	4610      	mov	r0, r2
 8009814:	f007 f8ea 	bl	80109ec <malloc>
 8009818:	4603      	mov	r3, r0
 800981a:	4619      	mov	r1, r3
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4623      	mov	r3, r4
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	4423      	add	r3, r4
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	4413      	add	r3, r2
 8009828:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 800982c:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009834:	4619      	mov	r1, r3
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	440b      	add	r3, r1
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	4413      	add	r3, r2
 8009842:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8009846:	6818      	ldr	r0, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800984e:	3301      	adds	r3, #1
 8009850:	461a      	mov	r2, r3
 8009852:	2100      	movs	r1, #0
 8009854:	f009 f904 	bl	8012a60 <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800985e:	4619      	mov	r1, r3
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	440b      	add	r3, r1
 8009868:	011b      	lsls	r3, r3, #4
 800986a:	4413      	add	r3, r2
 800986c:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f103 010e 	add.w	r1, r3, #14
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800987e:	461a      	mov	r2, r3
 8009880:	f009 fa37 	bl	8012cf2 <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8009884:	216c      	movs	r1, #108	@ 0x6c
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f005 fbff 	bl	800f08a <DWIN_SetPage>
        } break;
 800988c:	e09a      	b.n	80099c4 <Enter_num_keyboard+0x380>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009894:	2b00      	cmp	r3, #0
 8009896:	d107      	bne.n	80098a8 <Enter_num_keyboard+0x264>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 8009898:	2314      	movs	r3, #20
 800989a:	4a4c      	ldr	r2, [pc, #304]	@ (80099cc <Enter_num_keyboard+0x388>)
 800989c:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f005 fc19 	bl	800f0d8 <DWIN_SetText>
                return;
 80098a6:	e08d      	b.n	80099c4 <Enter_num_keyboard+0x380>
            if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fc35 	bl	800a118 <Screen_CheckInput_Keyboard>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	f040 8084 	bne.w	80099be <Enter_num_keyboard+0x37a>
                screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80098bc:	3301      	adds	r3, #1
 80098be:	461a      	mov	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80098c6:	461c      	mov	r4, r3
 80098c8:	4610      	mov	r0, r2
 80098ca:	f007 f88f 	bl	80109ec <malloc>
 80098ce:	4603      	mov	r3, r0
 80098d0:	4619      	mov	r1, r3
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	4623      	mov	r3, r4
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	4423      	add	r3, r4
 80098da:	011b      	lsls	r3, r3, #4
 80098dc:	4413      	add	r3, r2
 80098de:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 80098e2:	6019      	str	r1, [r3, #0]
                memset(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80098ea:	4619      	mov	r1, r3
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	460b      	mov	r3, r1
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	440b      	add	r3, r1
 80098f4:	011b      	lsls	r3, r3, #4
 80098f6:	4413      	add	r3, r2
 80098f8:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009904:	3301      	adds	r3, #1
 8009906:	461a      	mov	r2, r3
 8009908:	2100      	movs	r1, #0
 800990a:	f009 f8a9 	bl	8012a60 <memset>
                memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009914:	4619      	mov	r1, r3
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	440b      	add	r3, r1
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	4413      	add	r3, r2
 8009922:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8009926:	6818      	ldr	r0, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f103 010e 	add.w	r1, r3, #14
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009934:	461a      	mov	r2, r3
 8009936:	f009 f9dc 	bl	8012cf2 <memcpy>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800993a:	216c      	movs	r1, #108	@ 0x6c
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f005 fba4 	bl	800f08a <DWIN_SetPage>
        } break;
 8009942:	e03c      	b.n	80099be <Enter_num_keyboard+0x37a>
            strcpy(screen_obj->Wifi_setting.Name_Wifi_temp,screen_obj->Screen_keyboard.String);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f203 5246 	addw	r2, r3, #1350	@ 0x546
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	330e      	adds	r3, #14
 800994e:	4619      	mov	r1, r3
 8009950:	4610      	mov	r0, r2
 8009952:	f009 f9b8 	bl	8012cc6 <strcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 8009956:	2175      	movs	r1, #117	@ 0x75
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f005 fb96 	bl	800f08a <DWIN_SetPage>
        } break;
 800995e:	e031      	b.n	80099c4 <Enter_num_keyboard+0x380>
            strcpy(screen_obj->Wifi_setting.Password_Wifi_temp,screen_obj->Screen_keyboard.String);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f203 5282 	addw	r2, r3, #1410	@ 0x582
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	330e      	adds	r3, #14
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f009 f9aa 	bl	8012cc6 <strcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 8009972:	2175      	movs	r1, #117	@ 0x75
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f005 fb88 	bl	800f08a <DWIN_SetPage>
        } break;
 800997a:	e023      	b.n	80099c4 <Enter_num_keyboard+0x380>
            if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fbcb 	bl	800a118 <Screen_CheckInput_Keyboard>
 8009982:	4603      	mov	r3, r0
 8009984:	2b01      	cmp	r3, #1
 8009986:	d11c      	bne.n	80099c2 <Enter_num_keyboard+0x37e>
                get_input_keyboard((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	899b      	ldrh	r3, [r3, #12]
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f003 fcb0 	bl	800d2f4 <get_input_keyboard>
                DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	8999      	ldrh	r1, [r3, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f103 020e 	add.w	r2, r3, #14
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f005 fb97 	bl	800f0d8 <DWIN_SetText>
                DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 35b4 	ldrb.w	r3, [r3, #1460]	@ 0x5b4
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f005 fb69 	bl	800f08a <DWIN_SetPage>
        } break;
 80099b8:	e003      	b.n	80099c2 <Enter_num_keyboard+0x37e>
        default: break;
 80099ba:	bf00      	nop
 80099bc:	e002      	b.n	80099c4 <Enter_num_keyboard+0x380>
        } break;
 80099be:	bf00      	nop
 80099c0:	e000      	b.n	80099c4 <Enter_num_keyboard+0x380>
        } break;
 80099c2:	bf00      	nop
    }
}
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd90      	pop	{r4, r7, pc}
 80099ca:	bf00      	nop
 80099cc:	0801541c 	.word	0x0801541c

080099d0 <Enter_setting_time>:

void Enter_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80099d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d4:	b086      	sub	sp, #24
 80099d6:	af04      	add	r7, sp, #16
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
    if (strlen(screen_obj->Time_setting.Day) == 0 ||
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d017      	beq.n	8009a18 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Month) == 0 || 
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f203 53a3 	addw	r3, r3, #1443	@ 0x5a3
 80099ee:	781b      	ldrb	r3, [r3, #0]
    if (strlen(screen_obj->Time_setting.Day) == 0 ||
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d011      	beq.n	8009a18 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Year) == 0 || 
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f203 53a6 	addw	r3, r3, #1446	@ 0x5a6
 80099fa:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Month) == 0 || 
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00b      	beq.n	8009a18 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Hour) == 0 || 
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f203 53a9 	addw	r3, r3, #1449	@ 0x5a9
 8009a06:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Year) == 0 || 
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Minute) == 0 ) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f203 53ac 	addw	r3, r3, #1452	@ 0x5ac
 8009a12:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Hour) == 0 || 
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d107      	bne.n	8009a28 <Enter_setting_time+0x58>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_setting_time,"Enter all times before saving",strlen("Enter all times before saving"));
 8009a18:	231d      	movs	r3, #29
 8009a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009a94 <Enter_setting_time+0xc4>)
 8009a1c:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f005 fb59 	bl	800f0d8 <DWIN_SetText>
        return;
 8009a26:	e031      	b.n	8009a8c <Enter_setting_time+0xbc>
    } else {
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f203 53ac 	addw	r3, r3, #1452	@ 0x5ac
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f006 ffd7 	bl	80109e2 <atoi>
 8009a34:	4603      	mov	r3, r0
 8009a36:	b2de      	uxtb	r6, r3
        atoi(screen_obj->Time_setting.Hour),
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f203 53a9 	addw	r3, r3, #1449	@ 0x5a9
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f006 ffcf 	bl	80109e2 <atoi>
 8009a44:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009a46:	fa5f f883 	uxtb.w	r8, r3
        atoi(screen_obj->Time_setting.Day),
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8009a50:	4618      	mov	r0, r3
 8009a52:	f006 ffc6 	bl	80109e2 <atoi>
 8009a56:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009a58:	b2dc      	uxtb	r4, r3
        atoi(screen_obj->Time_setting.Month),
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f203 53a3 	addw	r3, r3, #1443	@ 0x5a3
 8009a60:	4618      	mov	r0, r3
 8009a62:	f006 ffbe 	bl	80109e2 <atoi>
 8009a66:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009a68:	b2dd      	uxtb	r5, r3
        atoi(screen_obj->Time_setting.Year));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f203 53a6 	addw	r3, r3, #1446	@ 0x5a6
 8009a70:	4618      	mov	r0, r3
 8009a72:	f006 ffb6 	bl	80109e2 <atoi>
 8009a76:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	9302      	str	r3, [sp, #8]
 8009a7c:	9501      	str	r5, [sp, #4]
 8009a7e:	9400      	str	r4, [sp, #0]
 8009a80:	4643      	mov	r3, r8
 8009a82:	4632      	mov	r2, r6
 8009a84:	2100      	movs	r1, #0
 8009a86:	4804      	ldr	r0, [pc, #16]	@ (8009a98 <Enter_setting_time+0xc8>)
 8009a88:	f005 fa72 	bl	800ef70 <DS3231_Write_time>
    }
}
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a94:	08015434 	.word	0x08015434
 8009a98:	20001488 	.word	0x20001488

08009a9c <Enter_setting_wifi>:

void Enter_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a9e:	b0c9      	sub	sp, #292	@ 0x124
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009aa6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009aaa:	6018      	str	r0, [r3, #0]
 8009aac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009ab0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009ab4:	6019      	str	r1, [r3, #0]
    if (screen_obj->Wifi_setting.Name_Wifi_temp[0] != 0) {
 8009ab6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009aba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f893 3546 	ldrb.w	r3, [r3, #1350]	@ 0x546
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d029      	beq.n	8009b1c <Enter_setting_wifi+0x80>
        memset(screen_obj->Wifi_setting.Name_Wifi,0,sizeof(screen_obj->Wifi_setting.Name_Wifi));
 8009ac8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009acc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f503 63a5 	add.w	r3, r3, #1320	@ 0x528
 8009ad6:	221e      	movs	r2, #30
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f008 ffc0 	bl	8012a60 <memset>
        strcpy(screen_obj->Wifi_setting.Name_Wifi,screen_obj->Wifi_setting.Name_Wifi_temp);
 8009ae0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009ae4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f503 62a5 	add.w	r2, r3, #1320	@ 0x528
 8009aee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009af2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f203 5346 	addw	r3, r3, #1350	@ 0x546
 8009afc:	4619      	mov	r1, r3
 8009afe:	4610      	mov	r0, r2
 8009b00:	f009 f8e1 	bl	8012cc6 <strcpy>
        memset(screen_obj->Wifi_setting.Name_Wifi_temp,0,sizeof(screen_obj->Wifi_setting.Name_Wifi_temp));
 8009b04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009b08:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f203 5346 	addw	r3, r3, #1350	@ 0x546
 8009b12:	221e      	movs	r2, #30
 8009b14:	2100      	movs	r1, #0
 8009b16:	4618      	mov	r0, r3
 8009b18:	f008 ffa2 	bl	8012a60 <memset>
    }

    if (screen_obj->Wifi_setting.Password_Wifi_temp[0] != 0) {
 8009b1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009b20:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f893 3582 	ldrb.w	r3, [r3, #1410]	@ 0x582
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d029      	beq.n	8009b82 <Enter_setting_wifi+0xe6>
        memset(screen_obj->Wifi_setting.Password_Wifi,0,sizeof(screen_obj->Wifi_setting.Password_Wifi));
 8009b2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009b32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8009b3c:	221e      	movs	r2, #30
 8009b3e:	2100      	movs	r1, #0
 8009b40:	4618      	mov	r0, r3
 8009b42:	f008 ff8d 	bl	8012a60 <memset>
        strcpy(screen_obj->Wifi_setting.Password_Wifi,screen_obj->Wifi_setting.Password_Wifi_temp);
 8009b46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009b4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f203 5264 	addw	r2, r3, #1380	@ 0x564
 8009b54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009b58:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f203 5382 	addw	r3, r3, #1410	@ 0x582
 8009b62:	4619      	mov	r1, r3
 8009b64:	4610      	mov	r0, r2
 8009b66:	f009 f8ae 	bl	8012cc6 <strcpy>
        memset(screen_obj->Wifi_setting.Password_Wifi_temp,0,sizeof(screen_obj->Wifi_setting.Password_Wifi_temp));
 8009b6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009b6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f203 5382 	addw	r3, r3, #1410	@ 0x582
 8009b78:	221e      	movs	r2, #30
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f008 ff6f 	bl	8012a60 <memset>
    }

    /* store to eeprom */
    char string_data[DATA_LEN_WIFI_INFO] = {0};
 8009b82:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8009b86:	223c      	movs	r2, #60	@ 0x3c
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f008 ff68 	bl	8012a60 <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 8009b90:	200c      	movs	r0, #12
 8009b92:	f006 ff2b 	bl	80109ec <malloc>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    snprintf(string_data,DATA_LEN_WIFI_INFO,"%s,%s",screen_obj->Wifi_setting.Name_Wifi,screen_obj->Wifi_setting.Password_Wifi);
 8009b9c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009ba0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f503 62a5 	add.w	r2, r3, #1320	@ 0x528
 8009baa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009bae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8009bb8:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	4a5a      	ldr	r2, [pc, #360]	@ (8009d2c <Enter_setting_wifi+0x290>)
 8009bc2:	213c      	movs	r1, #60	@ 0x3c
 8009bc4:	f008 fe0c 	bl	80127e0 <sniprintf>
    data_write->data = malloc(DATA_LEN_WIFI_INFO);
 8009bc8:	f8d7 40d8 	ldr.w	r4, [r7, #216]	@ 0xd8
 8009bcc:	203c      	movs	r0, #60	@ 0x3c
 8009bce:	f006 ff0d 	bl	80109ec <malloc>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,DATA_LEN_WIFI_INFO);
 8009bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 8009be0:	469c      	mov	ip, r3
 8009be2:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8009be6:	4665      	mov	r5, ip
 8009be8:	4626      	mov	r6, r4
 8009bea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009bec:	6028      	str	r0, [r5, #0]
 8009bee:	6069      	str	r1, [r5, #4]
 8009bf0:	60aa      	str	r2, [r5, #8]
 8009bf2:	60eb      	str	r3, [r5, #12]
 8009bf4:	3410      	adds	r4, #16
 8009bf6:	f10c 0c10 	add.w	ip, ip, #16
 8009bfa:	4574      	cmp	r4, lr
 8009bfc:	d1f3      	bne.n	8009be6 <Enter_setting_wifi+0x14a>
 8009bfe:	4665      	mov	r5, ip
 8009c00:	4623      	mov	r3, r4
 8009c02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009c04:	6028      	str	r0, [r5, #0]
 8009c06:	6069      	str	r1, [r5, #4]
 8009c08:	60aa      	str	r2, [r5, #8]
    data_write->data_len = DATA_LEN_WIFI_INFO;
 8009c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c0e:	223c      	movs	r2, #60	@ 0x3c
 8009c10:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_WIFI_INFO;
 8009c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c16:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8009c1a:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 8009c1c:	4b44      	ldr	r3, [pc, #272]	@ (8009d30 <Enter_setting_wifi+0x294>)
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8009c24:	230c      	movs	r3, #12
 8009c26:	2105      	movs	r1, #5
 8009c28:	f006 fcae 	bl	8010588 <OS_task_post_event>

    /* send to esp32 */
    char buffer_send[200];
    memset(buffer_send,0,200);
 8009c2c:	f107 0310 	add.w	r3, r7, #16
 8009c30:	22c8      	movs	r2, #200	@ 0xc8
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f008 ff13 	bl	8012a60 <memset>
    sprintf(buffer_send,"%s,%s",screen_obj->Wifi_setting.Name_Wifi,screen_obj->Wifi_setting.Password_Wifi);
 8009c3a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009c3e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f503 62a5 	add.w	r2, r3, #1320	@ 0x528
 8009c48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009c4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8009c56:	f107 0010 	add.w	r0, r7, #16
 8009c5a:	4934      	ldr	r1, [pc, #208]	@ (8009d2c <Enter_setting_wifi+0x290>)
 8009c5c:	f008 fdf6 	bl	801284c <siprintf>
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 8009c60:	2008      	movs	r0, #8
 8009c62:	f006 fec3 	bl	80109ec <malloc>
 8009c66:	4603      	mov	r3, r0
 8009c68:	461a      	mov	r2, r3
 8009c6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009c6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c72:	601a      	str	r2, [r3, #0]
    data_send_esp32->data = (char *)malloc(strlen(buffer_send));
 8009c74:	f107 0310 	add.w	r3, r7, #16
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f6 fa73 	bl	8000164 <strlen>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009c84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009c88:	681c      	ldr	r4, [r3, #0]
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f006 feae 	bl	80109ec <malloc>
 8009c90:	4603      	mov	r3, r0
 8009c92:	6023      	str	r3, [r4, #0]
    buffer_send[strlen(buffer_send)] = '\n';
 8009c94:	f107 0310 	add.w	r3, r7, #16
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7f6 fa63 	bl	8000164 <strlen>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ca8:	210a      	movs	r1, #10
 8009caa:	5499      	strb	r1, [r3, r2]
    memcpy(data_send_esp32->data,"w",screen_obj->modify_program_index + 1);
 8009cac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009cb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6818      	ldr	r0, [r3, #0]
 8009cb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009cbc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	461a      	mov	r2, r3
 8009cca:	491a      	ldr	r1, [pc, #104]	@ (8009d34 <Enter_setting_wifi+0x298>)
 8009ccc:	f009 f811 	bl	8012cf2 <memcpy>
    memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send)+1);
 8009cd0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009cd4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	1c5c      	adds	r4, r3, #1
 8009cde:	f107 0310 	add.w	r3, r7, #16
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7f6 fa3e 	bl	8000164 <strlen>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	f107 0310 	add.w	r3, r7, #16
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f008 fffd 	bl	8012cf2 <memcpy>
    data_send_esp32->len = strlen(buffer_send) + 2;
 8009cf8:	f107 0310 	add.w	r3, r7, #16
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7f6 fa31 	bl	8000164 <strlen>
 8009d02:	4602      	mov	r2, r0
 8009d04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d08:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3202      	adds	r2, #2
 8009d10:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 8009d12:	4b09      	ldr	r3, [pc, #36]	@ (8009d38 <Enter_setting_wifi+0x29c>)
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	f107 020c 	add.w	r2, r7, #12
 8009d1a:	2308      	movs	r3, #8
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	f006 fc33 	bl	8010588 <OS_task_post_event>
}
 8009d22:	bf00      	nop
 8009d24:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d2c:	08015454 	.word	0x08015454
 8009d30:	0801610c 	.word	0x0801610c
 8009d34:	0801545c 	.word	0x0801545c
 8009d38:	08016114 	.word	0x08016114

08009d3c <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	789b      	ldrb	r3, [r3, #2]
 8009d4a:	2bf3      	cmp	r3, #243	@ 0xf3
 8009d4c:	d116      	bne.n	8009d7c <Keyboard+0x40>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 8096 	beq.w	8009e86 <Keyboard+0x14a>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String - 1] = 0;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d60:	3b01      	subs	r3, #1
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	4413      	add	r3, r2
 8009d66:	2200      	movs	r2, #0
 8009d68:	739a      	strb	r2, [r3, #14]
            --screen_obj->Screen_keyboard.Index_String;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8009d7a:	e084      	b.n	8009e86 <Keyboard+0x14a>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	789b      	ldrb	r3, [r3, #2]
 8009d80:	2bf4      	cmp	r3, #244	@ 0xf4
 8009d82:	d11a      	bne.n	8009dba <Keyboard+0x7e>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	bf14      	ite	ne
 8009d8e:	2301      	movne	r3, #1
 8009d90:	2300      	moveq	r3, #0
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	f083 0301 	eor.w	r3, r3, #1
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009dac:	461a      	mov	r2, r3
 8009dae:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f005 fa43 	bl	800f23e <DWIN_SetVariable_Icon>
 8009db8:	e065      	b.n	8009e86 <Keyboard+0x14a>
    } else if (screen_event->data == 0xF2) { // Space button
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	789b      	ldrb	r3, [r3, #2]
 8009dbe:	2bf2      	cmp	r3, #242	@ 0xf2
 8009dc0:	d061      	beq.n	8009e86 <Keyboard+0x14a>
        // screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = 32;
    } else if (screen_event->data == 0xF1) { // Enter button
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	789b      	ldrb	r3, [r3, #2]
 8009dc6:	2bf1      	cmp	r3, #241	@ 0xf1
 8009dc8:	d11e      	bne.n	8009e08 <Keyboard+0xcc>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f9a4 	bl	800a118 <Screen_CheckInput_Keyboard>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d157      	bne.n	8009e86 <Keyboard+0x14a>
            // get data
            get_input_keyboard((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	899b      	ldrh	r3, [r3, #12]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f003 fa89 	bl	800d2f4 <get_input_keyboard>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	8999      	ldrh	r1, [r3, #12]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f103 020e 	add.w	r2, r3, #14
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f005 f970 	bl	800f0d8 <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 35b4 	ldrb.w	r3, [r3, #1460]	@ 0x5b4
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f005 f942 	bl	800f08a <DWIN_SetPage>
 8009e06:	e03e      	b.n	8009e86 <Keyboard+0x14a>
        } 
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	789b      	ldrb	r3, [r3, #2]
 8009e0c:	2b40      	cmp	r3, #64	@ 0x40
 8009e0e:	d92c      	bls.n	8009e6a <Keyboard+0x12e>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	789b      	ldrb	r3, [r3, #2]
 8009e14:	2b5a      	cmp	r3, #90	@ 0x5a
 8009e16:	d828      	bhi.n	8009e6a <Keyboard+0x12e>
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e1e:	f083 0301 	eor.w	r3, r3, #1
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d011      	beq.n	8009e4c <Keyboard+0x110>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	789a      	ldrb	r2, [r3, #2]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e32:	1c59      	adds	r1, r3, #1
 8009e34:	b288      	uxth	r0, r1
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	f102 0320 	add.w	r3, r2, #32
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	440b      	add	r3, r1
 8009e48:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8009e4a:	e01c      	b.n	8009e86 <Keyboard+0x14a>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	b291      	uxth	r1, r2
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	789a      	ldrb	r2, [r3, #2]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	440b      	add	r3, r1
 8009e66:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8009e68:	e00d      	b.n	8009e86 <Keyboard+0x14a>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	b291      	uxth	r1, r2
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	789a      	ldrb	r2, [r3, #2]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	440b      	add	r3, r1
 8009e84:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f103 020e 	add.w	r2, r3, #14
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009e92:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f005 f91e 	bl	800f0d8 <DWIN_SetText>
}
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	80fb      	strh	r3, [r7, #6]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	717b      	strb	r3, [r7, #5]
    int left = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 8009eb8:	797b      	ldrb	r3, [r7, #5]
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	613b      	str	r3, [r7, #16]
    int mid;

    while (left <= right) {
 8009ebe:	e023      	b.n	8009f08 <Index_VP+0x64>
        mid = (left + right) / 2;
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	0fda      	lsrs	r2, r3, #31
 8009ec8:	4413      	add	r3, r2
 8009eca:	105b      	asrs	r3, r3, #1
 8009ecc:	60fb      	str	r3, [r7, #12]
        if (VP_array[mid].VP_address == vp) {
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	88fa      	ldrh	r2, [r7, #6]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d105      	bne.n	8009eea <Index_VP+0x46>
            return VP_array[mid].index;  // Found the vp
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	789b      	ldrb	r3, [r3, #2]
 8009ee8:	e013      	b.n	8009f12 <Index_VP+0x6e>
        } else if (VP_array[mid].VP_address > vp) {
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	881b      	ldrh	r3, [r3, #0]
 8009ef4:	88fa      	ldrh	r2, [r7, #6]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d203      	bcs.n	8009f02 <Index_VP+0x5e>
            right = mid - 1;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3b01      	subs	r3, #1
 8009efe:	613b      	str	r3, [r7, #16]
 8009f00:	e002      	b.n	8009f08 <Index_VP+0x64>
        } else {
            left = mid + 1;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
    while (left <= right) {
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	ddd7      	ble.n	8009ec0 <Index_VP+0x1c>
        }
    }

    return 255;  // VP not found
 8009f10:	23ff      	movs	r3, #255	@ 0xff
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bc80      	pop	{r7}
 8009f1a:	4770      	bx	lr

08009f1c <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig,
                                                                a_handler_enter_sig };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page;
 8009f24:	4b41      	ldr	r3, [pc, #260]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a41      	ldr	r2, [pc, #260]	@ (800a030 <Screen_init_handler_table+0x114>)
 8009f2a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_RETURN]               = Navigation_return;
 8009f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3304      	adds	r3, #4
 8009f32:	4a40      	ldr	r2, [pc, #256]	@ (800a034 <Screen_init_handler_table+0x118>)
 8009f34:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
 8009f36:	4b3d      	ldr	r3, [pc, #244]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	4a3e      	ldr	r2, [pc, #248]	@ (800a038 <Screen_init_handler_table+0x11c>)
 8009f3e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
 8009f40:	4b3a      	ldr	r3, [pc, #232]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3314      	adds	r3, #20
 8009f46:	4a3d      	ldr	r2, [pc, #244]	@ (800a03c <Screen_init_handler_table+0x120>)
 8009f48:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
 8009f4a:	4b38      	ldr	r3, [pc, #224]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	330c      	adds	r3, #12
 8009f50:	4a3b      	ldr	r2, [pc, #236]	@ (800a040 <Screen_init_handler_table+0x124>)
 8009f52:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_WIFI]         = Navigation_setting_wifi;
 8009f54:	4b35      	ldr	r3, [pc, #212]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3310      	adds	r3, #16
 8009f5a:	4a3a      	ldr	r2, [pc, #232]	@ (800a044 <Screen_init_handler_table+0x128>)
 8009f5c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
 8009f5e:	4b33      	ldr	r3, [pc, #204]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3328      	adds	r3, #40	@ 0x28
 8009f64:	4a38      	ldr	r2, [pc, #224]	@ (800a048 <Screen_init_handler_table+0x12c>)
 8009f66:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_DETAIL_MAINPAGE]      = Navigation_detail_mainpage;
 8009f68:	4b30      	ldr	r3, [pc, #192]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	332c      	adds	r3, #44	@ 0x2c
 8009f6e:	4a37      	ldr	r2, [pc, #220]	@ (800a04c <Screen_init_handler_table+0x130>)
 8009f70:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_GRAPH_MAINPAGE]       = Navigation_graph_mainpage;
 8009f72:	4b2e      	ldr	r3, [pc, #184]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3330      	adds	r3, #48	@ 0x30
 8009f78:	4a35      	ldr	r2, [pc, #212]	@ (800a050 <Screen_init_handler_table+0x134>)
 8009f7a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
 8009f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3318      	adds	r3, #24
 8009f82:	4a34      	ldr	r2, [pc, #208]	@ (800a054 <Screen_init_handler_table+0x138>)
 8009f84:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
 8009f86:	4b29      	ldr	r3, [pc, #164]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	331c      	adds	r3, #28
 8009f8c:	4a32      	ldr	r2, [pc, #200]	@ (800a058 <Screen_init_handler_table+0x13c>)
 8009f8e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASE_PULSE]    = Navigation_Change_CasePulse;
 8009f90:	4b26      	ldr	r3, [pc, #152]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3334      	adds	r3, #52	@ 0x34
 8009f96:	4a31      	ldr	r2, [pc, #196]	@ (800a05c <Screen_init_handler_table+0x140>)
 8009f98:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_FINISH_REVIEW]        = Navigation_Finish_Review;
 8009f9a:	4b24      	ldr	r3, [pc, #144]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3338      	adds	r3, #56	@ 0x38
 8009fa0:	4a2f      	ldr	r2, [pc, #188]	@ (800a060 <Screen_init_handler_table+0x144>)
 8009fa2:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_INFORMATION]          = Navigation_Information;
 8009fa4:	4b21      	ldr	r3, [pc, #132]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3320      	adds	r3, #32
 8009faa:	4a2e      	ldr	r2, [pc, #184]	@ (800a064 <Screen_init_handler_table+0x148>)
 8009fac:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_LOGGING]              = Navigation_Logging;
 8009fae:	4b1f      	ldr	r3, [pc, #124]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3324      	adds	r3, #36	@ 0x24
 8009fb4:	4a2c      	ldr	r2, [pc, #176]	@ (800a068 <Screen_init_handler_table+0x14c>)
 8009fb6:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SELECTION][ON_OFF_DEV]                       = ON_OFF_Button;
 8009fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800a06c <Screen_init_handler_table+0x150>)
 8009fbe:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SELECT_PROGRAM]                   = select_running_program;
 8009fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	4a2a      	ldr	r2, [pc, #168]	@ (800a070 <Screen_init_handler_table+0x154>)
 8009fc8:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SElECT_MODIFY_PROGRAM]            = select_modify_program;
 8009fca:	4b18      	ldr	r3, [pc, #96]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	4a28      	ldr	r2, [pc, #160]	@ (800a074 <Screen_init_handler_table+0x158>)
 8009fd2:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
 8009fd4:	4b15      	ldr	r3, [pc, #84]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	4a27      	ldr	r2, [pc, #156]	@ (800a078 <Screen_init_handler_table+0x15c>)
 8009fda:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;
 8009fdc:	4b13      	ldr	r3, [pc, #76]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	4a26      	ldr	r2, [pc, #152]	@ (800a07c <Screen_init_handler_table+0x160>)
 8009fe2:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;
 8009fe4:	4b11      	ldr	r3, [pc, #68]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	4a25      	ldr	r2, [pc, #148]	@ (800a080 <Screen_init_handler_table+0x164>)
 8009fea:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_ENTER][ENTER_PASSWORD]                       = Enter_password;
 8009fec:	4b0f      	ldr	r3, [pc, #60]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	4a24      	ldr	r2, [pc, #144]	@ (800a084 <Screen_init_handler_table+0x168>)
 8009ff2:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_NUM_KEYBOARD]                   = Enter_num_keyboard;
 8009ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800a02c <Screen_init_handler_table+0x110>)
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4a23      	ldr	r2, [pc, #140]	@ (800a088 <Screen_init_handler_table+0x16c>)
 8009ffc:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_TIME]                           = Enter_setting_time;
 8009ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800a02c <Screen_init_handler_table+0x110>)
 800a000:	699b      	ldr	r3, [r3, #24]
 800a002:	330c      	adds	r3, #12
 800a004:	4a21      	ldr	r2, [pc, #132]	@ (800a08c <Screen_init_handler_table+0x170>)
 800a006:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_WIFI]                           = Enter_setting_wifi;
 800a008:	4b08      	ldr	r3, [pc, #32]	@ (800a02c <Screen_init_handler_table+0x110>)
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	3308      	adds	r3, #8
 800a00e:	4a20      	ldr	r2, [pc, #128]	@ (800a090 <Screen_init_handler_table+0x174>)
 800a010:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;
 800a012:	4b06      	ldr	r3, [pc, #24]	@ (800a02c <Screen_init_handler_table+0x110>)
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	4a1f      	ldr	r2, [pc, #124]	@ (800a094 <Screen_init_handler_table+0x178>)
 800a018:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a03      	ldr	r2, [pc, #12]	@ (800a02c <Screen_init_handler_table+0x110>)
 800a01e:	f8c3 25b0 	str.w	r2, [r3, #1456]	@ 0x5b0
}
 800a022:	bf00      	nop
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	bc80      	pop	{r7}
 800a02a:	4770      	bx	lr
 800a02c:	20000150 	.word	0x20000150
 800a030:	08007265 	.word	0x08007265
 800a034:	080072f9 	.word	0x080072f9
 800a038:	080072a3 	.word	0x080072a3
 800a03c:	080073f5 	.word	0x080073f5
 800a040:	0800743d 	.word	0x0800743d
 800a044:	080074eb 	.word	0x080074eb
 800a048:	08007551 	.word	0x08007551
 800a04c:	0800765b 	.word	0x0800765b
 800a050:	080076c5 	.word	0x080076c5
 800a054:	08007713 	.word	0x08007713
 800a058:	080077b9 	.word	0x080077b9
 800a05c:	080079c9 	.word	0x080079c9
 800a060:	08007a9d 	.word	0x08007a9d
 800a064:	08008261 	.word	0x08008261
 800a068:	0800827b 	.word	0x0800827b
 800a06c:	08008295 	.word	0x08008295
 800a070:	08008715 	.word	0x08008715
 800a074:	08008739 	.word	0x08008739
 800a078:	08008851 	.word	0x08008851
 800a07c:	0800892d 	.word	0x0800892d
 800a080:	08008981 	.word	0x08008981
 800a084:	080094c1 	.word	0x080094c1
 800a088:	08009645 	.word	0x08009645
 800a08c:	080099d1 	.word	0x080099d1
 800a090:	08009a9d 	.word	0x08009a9d
 800a094:	08009d3d 	.word	0x08009d3d

0800a098 <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
    // do sth ...
	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800a0a8:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d107      	bne.n	800a0c2 <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	4798      	blx	r3
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}
 800a0c0:	e025      	b.n	800a10e <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d107      	bne.n	800a0da <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	4798      	blx	r3
}
 800a0d8:	e019      	b.n	800a10e <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d107      	bne.n	800a0f2 <Screen_excute_RX_function+0x5a>
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3310      	adds	r3, #16
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	4798      	blx	r3
}
 800a0f0:	e00d      	b.n	800a10e <Screen_excute_RX_function+0x76>
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	4798      	blx	r3
}
 800a10e:	bf00      	nop
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const screen_obj) {
 800a118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a11c:	b08f      	sub	sp, #60	@ 0x3c
 800a11e:	af02      	add	r7, sp, #8
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	466b      	mov	r3, sp
 800a124:	461e      	mov	r6, r3
    char string[screen_obj->Screen_keyboard.Index_String];
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800a12c:	460b      	mov	r3, r1
 800a12e:	3b01      	subs	r3, #1
 800a130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a132:	b28b      	uxth	r3, r1
 800a134:	2200      	movs	r2, #0
 800a136:	4698      	mov	r8, r3
 800a138:	4691      	mov	r9, r2
 800a13a:	f04f 0200 	mov.w	r2, #0
 800a13e:	f04f 0300 	mov.w	r3, #0
 800a142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a14a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a14e:	b28b      	uxth	r3, r1
 800a150:	2200      	movs	r2, #0
 800a152:	461c      	mov	r4, r3
 800a154:	4615      	mov	r5, r2
 800a156:	f04f 0200 	mov.w	r2, #0
 800a15a:	f04f 0300 	mov.w	r3, #0
 800a15e:	00eb      	lsls	r3, r5, #3
 800a160:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a164:	00e2      	lsls	r2, r4, #3
 800a166:	460b      	mov	r3, r1
 800a168:	3307      	adds	r3, #7
 800a16a:	08db      	lsrs	r3, r3, #3
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	ebad 0d03 	sub.w	sp, sp, r3
 800a172:	ab02      	add	r3, sp, #8
 800a174:	3300      	adds	r3, #0
 800a176:	62bb      	str	r3, [r7, #40]	@ 0x28
    char warm_string[20] = {0};
 800a178:	f107 030c 	add.w	r3, r7, #12
 800a17c:	2200      	movs	r2, #0
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	605a      	str	r2, [r3, #4]
 800a182:	609a      	str	r2, [r3, #8]
 800a184:	60da      	str	r2, [r3, #12]
 800a186:	611a      	str	r2, [r3, #16]
    float data_compare;
    uint8_t index_condition;
    // copy string
    memcpy(string,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f103 010e 	add.w	r1, r3, #14
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a194:	461a      	mov	r2, r3
 800a196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a198:	f008 fdab 	bl	8012cf2 <memcpy>
    string[screen_obj->Screen_keyboard.Index_String] = '\0';
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	5499      	strb	r1, [r3, r2]
    /* get index correspond with vp */
    index_condition = Index_VP(screen_obj->Screen_keyboard.VP_Text,lookup_VP_condition,(sizeof(lookup_VP_condition)/ sizeof(lookup_VP_condition[0])));
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	899b      	ldrh	r3, [r3, #12]
 800a1ae:	2207      	movs	r2, #7
 800a1b0:	4938      	ldr	r1, [pc, #224]	@ (800a294 <Screen_CheckInput_Keyboard+0x17c>)
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7ff fe76 	bl	8009ea4 <Index_VP>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* compare data with limit */
    data_compare = atof(string);
 800a1be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1c0:	f006 fc0c 	bl	80109dc <atof>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	f7f6 fc86 	bl	8000adc <__aeabi_d2f>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	623b      	str	r3, [r7, #32]
    if (data_compare > screen_obj->Screen_condition[index_condition].max_value) {
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1dc:	00db      	lsls	r3, r3, #3
 800a1de:	4413      	add	r3, r2
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	6a38      	ldr	r0, [r7, #32]
 800a1e6:	f7f6 fd35 	bl	8000c54 <__aeabi_fcmpgt>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01d      	beq.n	800a22c <Screen_CheckInput_Keyboard+0x114>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", screen_obj->Screen_condition[index_condition].max_value);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	4413      	add	r3, r2
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7f6 f91c 	bl	800043c <__aeabi_f2d>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	f107 000c 	add.w	r0, r7, #12
 800a20c:	e9cd 2300 	strd	r2, r3, [sp]
 800a210:	4a21      	ldr	r2, [pc, #132]	@ (800a298 <Screen_CheckInput_Keyboard+0x180>)
 800a212:	2114      	movs	r1, #20
 800a214:	f008 fae4 	bl	80127e0 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800a218:	f107 020c 	add.w	r2, r7, #12
 800a21c:	2314      	movs	r3, #20
 800a21e:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f004 ff58 	bl	800f0d8 <DWIN_SetText>
        return Status_ERROR;
 800a228:	2300      	movs	r3, #0
 800a22a:	e02c      	b.n	800a286 <Screen_CheckInput_Keyboard+0x16e>
    } else if (data_compare < screen_obj->Screen_condition[index_condition].min_value) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a234:	00db      	lsls	r3, r3, #3
 800a236:	4413      	add	r3, r2
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	4619      	mov	r1, r3
 800a23c:	6a38      	ldr	r0, [r7, #32]
 800a23e:	f7f6 fceb 	bl	8000c18 <__aeabi_fcmplt>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d01d      	beq.n	800a284 <Screen_CheckInput_Keyboard+0x16c>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", screen_obj->Screen_condition[index_condition].min_value);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a24c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a250:	00db      	lsls	r3, r3, #3
 800a252:	4413      	add	r3, r2
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	4618      	mov	r0, r3
 800a258:	f7f6 f8f0 	bl	800043c <__aeabi_f2d>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	f107 000c 	add.w	r0, r7, #12
 800a264:	e9cd 2300 	strd	r2, r3, [sp]
 800a268:	4a0c      	ldr	r2, [pc, #48]	@ (800a29c <Screen_CheckInput_Keyboard+0x184>)
 800a26a:	2114      	movs	r1, #20
 800a26c:	f008 fab8 	bl	80127e0 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800a270:	f107 020c 	add.w	r2, r7, #12
 800a274:	2314      	movs	r3, #20
 800a276:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f004 ff2c 	bl	800f0d8 <DWIN_SetText>
        return Status_ERROR;
 800a280:	2300      	movs	r3, #0
 800a282:	e000      	b.n	800a286 <Screen_CheckInput_Keyboard+0x16e>
    } 
    return Status_SUCCESS; 
 800a284:	2301      	movs	r3, #1
 800a286:	46b5      	mov	sp, r6
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3734      	adds	r7, #52	@ 0x34
 800a28c:	46bd      	mov	sp, r7
 800a28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a292:	bf00      	nop
 800a294:	20000028 	.word	0x20000028
 800a298:	08015460 	.word	0x08015460
 800a29c:	0801546c 	.word	0x0801546c

0800a2a0 <Screen_GetIcon_Pin>:
 * @brief Function used to setup icon with data test
 * 
 * @param obj_screen : object screen
 * @param data_pin : array 2d data test
 */
static void Screen_GetIcon_Pin(Screen_t *const screen_obj, char *data_pin) {
 800a2a0:	b590      	push	{r4, r7, lr}
 800a2a2:	b0a5      	sub	sp, #148	@ 0x94
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a2b8:	fb01 f303 	mul.w	r3, r1, r3
 800a2bc:	4413      	add	r3, r2
 800a2be:	334b      	adds	r3, #75	@ 0x4b
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	440b      	add	r3, r1
 800a2cc:	011b      	lsls	r3, r3, #4
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    
    uint8_t map_array[128] = {0};
 800a2da:	f107 030c 	add.w	r3, r7, #12
 800a2de:	2280      	movs	r2, #128	@ 0x80
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f008 fbbc 	bl	8012a60 <memset>
    map_array['G'] = ICON_GND;
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    map_array['V'] = ICON_VCC;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = malloc(num_pin * sizeof(uint8_t));
 800a2f4:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a2fe:	461c      	mov	r4, r3
 800a300:	4610      	mov	r0, r2
 800a302:	f006 fb73 	bl	80109ec <malloc>
 800a306:	4603      	mov	r3, r0
 800a308:	4619      	mov	r1, r3
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a310:	fb04 f303 	mul.w	r3, r4, r3
 800a314:	4413      	add	r3, r2
 800a316:	335c      	adds	r3, #92	@ 0x5c
 800a318:	6019      	str	r1, [r3, #0]

    /* Convert data to icon pin config */
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800a31a:	2300      	movs	r3, #0
 800a31c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a320:	e03c      	b.n	800a39c <Screen_GetIcon_Pin+0xfc>
        if (Pin_x >= 8) {
 800a322:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a326:	2b07      	cmp	r3, #7
 800a328:	d90c      	bls.n	800a344 <Screen_GetIcon_Pin+0xa4>
            map_array['0'] = ICON_OUTPUT;
 800a32a:	2301      	movs	r3, #1
 800a32c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_OUTPUT;
 800a330:	2301      	movs	r3, #1
 800a332:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_INPUT;
 800a336:	2300      	movs	r3, #0
 800a338:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_INPUT;
 800a33c:	2300      	movs	r3, #0
 800a33e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 800a342:	e00b      	b.n	800a35c <Screen_GetIcon_Pin+0xbc>
        } else {
            map_array['0'] = ICON_INPUT;
 800a344:	2300      	movs	r3, #0
 800a346:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_INPUT;
 800a34a:	2300      	movs	r3, #0
 800a34c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_OUTPUT;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_OUTPUT;
 800a356:	2301      	movs	r3, #1
 800a358:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        }
        screen_obj->IC_Testerx[screen_obj->curr_device].config_pin[Pin_x] = map_array[(uint8_t)(data_pin[Pin_x])];
 800a35c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	4413      	add	r3, r2
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	4619      	mov	r1, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a36e:	4618      	mov	r0, r3
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a376:	fb00 f303 	mul.w	r3, r0, r3
 800a37a:	4413      	add	r3, r2
 800a37c:	335c      	adds	r3, #92	@ 0x5c
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a384:	4413      	add	r3, r2
 800a386:	f101 0290 	add.w	r2, r1, #144	@ 0x90
 800a38a:	443a      	add	r2, r7
 800a38c:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800a390:	701a      	strb	r2, [r3, #0]
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800a392:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a396:	3301      	adds	r3, #1
 800a398:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a39c:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800a3a0:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d3bc      	bcc.n	800a322 <Screen_GetIcon_Pin+0x82>
    }
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	3794      	adds	r7, #148	@ 0x94
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd90      	pop	{r4, r7, pc}

0800a3b2 <Screen_GetIcon_Result>:

static void Screen_GetIcon_Result(Screen_t *const screen_obj, char *result) {
 800a3b2:	b590      	push	{r4, r7, lr}
 800a3b4:	b0a5      	sub	sp, #148	@ 0x94
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a3ca:	fb01 f303 	mul.w	r3, r1, r3
 800a3ce:	4413      	add	r3, r2
 800a3d0:	334b      	adds	r3, #75	@ 0x4b
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800a3d8:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800a3dc:	6879      	ldr	r1, [r7, #4]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	4413      	add	r3, r2
 800a3e4:	011b      	lsls	r3, r3, #4
 800a3e6:	440b      	add	r3, r1
 800a3e8:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800a3f2:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	4413      	add	r3, r2
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	440b      	add	r3, r1
 800a402:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
    uint8_t map_array[128] = {0};
 800a40c:	f107 030c 	add.w	r3, r7, #12
 800a410:	2280      	movs	r2, #128	@ 0x80
 800a412:	2100      	movs	r1, #0
 800a414:	4618      	mov	r0, r3
 800a416:	f008 fb23 	bl	8012a60 <memset>
    map_array['0'] = ICON_LOGIC_LOW;
 800a41a:	2300      	movs	r3, #0
 800a41c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    map_array['1'] = ICON_LOGIC_HIGH;
 800a420:	2301      	movs	r3, #1
 800a422:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    map_array['3'] = ICON_CLOCK_HIGH;
 800a426:	2303      	movs	r3, #3
 800a428:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    map_array['4'] = ICON_CLOCK_LOW;
 800a42c:	2302      	movs	r3, #2
 800a42e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].icon_result = malloc(num_case * num_pin);
 800a432:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800a436:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800a43a:	fb02 f303 	mul.w	r3, r2, r3
 800a43e:	461a      	mov	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a446:	461c      	mov	r4, r3
 800a448:	4610      	mov	r0, r2
 800a44a:	f006 facf 	bl	80109ec <malloc>
 800a44e:	4603      	mov	r3, r0
 800a450:	4619      	mov	r1, r3
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a458:	fb04 f303 	mul.w	r3, r4, r3
 800a45c:	4413      	add	r3, r2
 800a45e:	3364      	adds	r3, #100	@ 0x64
 800a460:	6019      	str	r1, [r3, #0]

    /* Convert data to icon result */
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800a462:	2300      	movs	r3, #0
 800a464:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a468:	e01f      	b.n	800a4aa <Screen_GetIcon_Result+0xf8>
        screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[i] = map_array[(uint8_t)result[i]];
 800a46a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	4413      	add	r3, r2
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	4619      	mov	r1, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a47c:	4618      	mov	r0, r3
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a484:	fb00 f303 	mul.w	r3, r0, r3
 800a488:	4413      	add	r3, r2
 800a48a:	3364      	adds	r3, #100	@ 0x64
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a492:	4413      	add	r3, r2
 800a494:	f101 0290 	add.w	r2, r1, #144	@ 0x90
 800a498:	443a      	add	r2, r7
 800a49a:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800a49e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800a4a0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a4aa:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800a4ae:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800a4b2:	f897 108d 	ldrb.w	r1, [r7, #141]	@ 0x8d
 800a4b6:	fb01 f303 	mul.w	r3, r1, r3
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	dbd5      	blt.n	800a46a <Screen_GetIcon_Result+0xb8>
    }
}
 800a4be:	bf00      	nop
 800a4c0:	bf00      	nop
 800a4c2:	3794      	adds	r7, #148	@ 0x94
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd90      	pop	{r4, r7, pc}

0800a4c8 <Screen_Init_Variable>:

static void Screen_Init_Variable(Screen_t *const obj_screen) {
 800a4c8:	b590      	push	{r4, r7, lr}
 800a4ca:	b0fd      	sub	sp, #500	@ 0x1f4
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a4d2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a4d6:	6018      	str	r0, [r3, #0]
    obj_screen->curr_device = DEVICE_1;
 800a4d8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a4dc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 25b5 	strb.w	r2, [r3, #1461]	@ 0x5b5
    //  obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
    //  obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
    //  obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
    //  obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a4e8:	2014      	movs	r0, #20
 800a4ea:	f006 fa7f 	bl	80109ec <malloc>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a4f6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f8c3 2468 	str.w	r2, [r3, #1128]	@ 0x468
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a500:	2014      	movs	r0, #20
 800a502:	f006 fa73 	bl	80109ec <malloc>
 800a506:	4603      	mov	r3, r0
 800a508:	461a      	mov	r2, r3
 800a50a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a50e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a518:	2014      	movs	r0, #20
 800a51a:	f006 fa67 	bl	80109ec <malloc>
 800a51e:	4603      	mov	r3, r0
 800a520:	461a      	mov	r2, r3
 800a522:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a526:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f8c3 24c8 	str.w	r2, [r3, #1224]	@ 0x4c8
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a530:	2014      	movs	r0, #20
 800a532:	f006 fa5b 	bl	80109ec <malloc>
 800a536:	4603      	mov	r3, r0
 800a538:	461a      	mov	r2, r3
 800a53a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a53e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a548:	2014      	movs	r0, #20
 800a54a:	f006 fa4f 	bl	80109ec <malloc>
 800a54e:	4603      	mov	r3, r0
 800a550:	461a      	mov	r2, r3
 800a552:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a556:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a560:	2014      	movs	r0, #20
 800a562:	f006 fa43 	bl	80109ec <malloc>
 800a566:	4603      	mov	r3, r0
 800a568:	461a      	mov	r2, r3
 800a56a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a56e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a578:	2014      	movs	r0, #20
 800a57a:	f006 fa37 	bl	80109ec <malloc>
 800a57e:	4603      	mov	r3, r0
 800a580:	461a      	mov	r2, r3
 800a582:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a586:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a590:	2014      	movs	r0, #20
 800a592:	f006 fa2b 	bl	80109ec <malloc>
 800a596:	4603      	mov	r3, r0
 800a598:	461a      	mov	r2, r3
 800a59a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a59e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a5a8:	2002      	movs	r0, #2
 800a5aa:	f006 fa1f 	bl	80109ec <malloc>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a5b6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f8c3 2478 	str.w	r2, [r3, #1144]	@ 0x478
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a5c0:	2002      	movs	r0, #2
 800a5c2:	f006 fa13 	bl	80109ec <malloc>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a5ce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a5d8:	2002      	movs	r0, #2
 800a5da:	f006 fa07 	bl	80109ec <malloc>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a5e6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a5f0:	2002      	movs	r0, #2
 800a5f2:	f006 f9fb 	bl	80109ec <malloc>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a5fe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508

    uint8_t buffer[TOTAL_ONE_PROGRAM_TEST_LEN];
    memset(buffer,0,TOTAL_ONE_PROGRAM_TEST_LEN);
 800a608:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a60c:	222a      	movs	r2, #42	@ 0x2a
 800a60e:	2100      	movs	r1, #0
 800a610:	4618      	mov	r0, r3
 800a612:	f008 fa25 	bl	8012a60 <memset>
    for (uint8_t i = 0; i < 4; i++) {
 800a616:	2300      	movs	r3, #0
 800a618:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 800a61c:	e080      	b.n	800a720 <Screen_Init_Variable+0x258>
        AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(i),&buffer[0],TOTAL_ONE_PROGRAM_TEST_LEN);
 800a61e:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800a622:	b29b      	uxth	r3, r3
 800a624:	461a      	mov	r2, r3
 800a626:	0052      	lsls	r2, r2, #1
 800a628:	4413      	add	r3, r2
 800a62a:	461a      	mov	r2, r3
 800a62c:	00d2      	lsls	r2, r2, #3
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	b29b      	uxth	r3, r3
 800a634:	3343      	adds	r3, #67	@ 0x43
 800a636:	b299      	uxth	r1, r3
 800a638:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800a63c:	232a      	movs	r3, #42	@ 0x2a
 800a63e:	48e3      	ldr	r0, [pc, #908]	@ (800a9cc <Screen_Init_Variable+0x504>)
 800a640:	f004 fbad 	bl	800ed9e <AT24Cxx_read_buffer>
        char *copy_buf = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 800a644:	202a      	movs	r0, #42	@ 0x2a
 800a646:	f006 f9d1 	bl	80109ec <malloc>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        strcpy(copy_buf,buffer);
 800a650:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a654:	4619      	mov	r1, r3
 800a656:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 800a65a:	f008 fb34 	bl	8012cc6 <strcpy>
        char *pdata = strtok(copy_buf,",");
 800a65e:	49dc      	ldr	r1, [pc, #880]	@ (800a9d0 <Screen_Init_Variable+0x508>)
 800a660:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 800a664:	f008 fa4c 	bl	8012b00 <strtok>
 800a668:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
        strcpy(obj_screen->Program_Testx[i].Name_Program,pdata);
 800a66c:	f897 21ef 	ldrb.w	r2, [r7, #495]	@ 0x1ef
 800a670:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a674:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a678:	6819      	ldr	r1, [r3, #0]
 800a67a:	4613      	mov	r3, r2
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	4413      	add	r3, r2
 800a680:	011b      	lsls	r3, r3, #4
 800a682:	440b      	add	r3, r1
 800a684:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 800a68e:	4618      	mov	r0, r3
 800a690:	f008 fb19 	bl	8012cc6 <strcpy>
        pdata = strtok(NULL,",");
 800a694:	49ce      	ldr	r1, [pc, #824]	@ (800a9d0 <Screen_Init_Variable+0x508>)
 800a696:	2000      	movs	r0, #0
 800a698:	f008 fa32 	bl	8012b00 <strtok>
 800a69c:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
        strcpy(obj_screen->Program_Testx[i].Name_IC,pdata);
 800a6a0:	f897 21ef 	ldrb.w	r2, [r7, #495]	@ 0x1ef
 800a6a4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a6a8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a6ac:	6819      	ldr	r1, [r3, #0]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	4413      	add	r3, r2
 800a6b4:	011b      	lsls	r3, r3, #4
 800a6b6:	440b      	add	r3, r1
 800a6b8:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f008 faff 	bl	8012cc6 <strcpy>
        pdata = strtok(NULL,",");
 800a6c8:	49c1      	ldr	r1, [pc, #772]	@ (800a9d0 <Screen_Init_Variable+0x508>)
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	f008 fa18 	bl	8012b00 <strtok>
 800a6d0:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
        snprintf(obj_screen->Program_Testx[i].num_IC, 2, "%c", pdata[0]);
 800a6d4:	f897 21ef 	ldrb.w	r2, [r7, #495]	@ 0x1ef
 800a6d8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a6dc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a6e0:	6819      	ldr	r1, [r3, #0]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	005b      	lsls	r3, r3, #1
 800a6e6:	4413      	add	r3, r2
 800a6e8:	011b      	lsls	r3, r3, #4
 800a6ea:	440b      	add	r3, r1
 800a6ec:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	4ab6      	ldr	r2, [pc, #728]	@ (800a9d4 <Screen_Init_Variable+0x50c>)
 800a6fa:	2102      	movs	r1, #2
 800a6fc:	f008 f870 	bl	80127e0 <sniprintf>
//        memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send) + 2);
//        data_send_esp32->data[strlen(buffer_send) + 2] = 0;
//        data_send_esp32->len = strlen(buffer_send) + 2;
//        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
//
        free(copy_buf);
 800a700:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 800a704:	f006 f97a 	bl	80109fc <free>
        memset(buffer,0,TOTAL_ONE_PROGRAM_TEST_LEN);
 800a708:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a70c:	222a      	movs	r2, #42	@ 0x2a
 800a70e:	2100      	movs	r1, #0
 800a710:	4618      	mov	r0, r3
 800a712:	f008 f9a5 	bl	8012a60 <memset>
    for (uint8_t i = 0; i < 4; i++) {
 800a716:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800a71a:	3301      	adds	r3, #1
 800a71c:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 800a720:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800a724:	2b03      	cmp	r3, #3
 800a726:	f67f af7a 	bls.w	800a61e <Screen_Init_Variable+0x156>
        // HAL_Delay(100);
    }

    memcpy(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,"IC TESTER 1",strlen("IC TESTER 1"));
 800a72a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a72e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	334d      	adds	r3, #77	@ 0x4d
 800a736:	220b      	movs	r2, #11
 800a738:	49a7      	ldr	r1, [pc, #668]	@ (800a9d8 <Screen_Init_Variable+0x510>)
 800a73a:	4618      	mov	r0, r3
 800a73c:	f008 fad9 	bl	8012cf2 <memcpy>
    memcpy(obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester,"IC TESTER 2",strlen("IC TESTER 2"));
 800a740:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a744:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f203 13ad 	addw	r3, r3, #429	@ 0x1ad
 800a74e:	220b      	movs	r2, #11
 800a750:	49a2      	ldr	r1, [pc, #648]	@ (800a9dc <Screen_Init_Variable+0x514>)
 800a752:	4618      	mov	r0, r3
 800a754:	f008 facd 	bl	8012cf2 <memcpy>
    memcpy(obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester,"IC TESTER 3",strlen("IC TESTER 3"));
 800a758:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a75c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f203 330d 	addw	r3, r3, #781	@ 0x30d
 800a766:	220b      	movs	r2, #11
 800a768:	499d      	ldr	r1, [pc, #628]	@ (800a9e0 <Screen_Init_Variable+0x518>)
 800a76a:	4618      	mov	r0, r3
 800a76c:	f008 fac1 	bl	8012cf2 <memcpy>

    char wifi_info[60] = {0};
 800a770:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800a774:	223c      	movs	r2, #60	@ 0x3c
 800a776:	2100      	movs	r1, #0
 800a778:	4618      	mov	r0, r3
 800a77a:	f008 f971 	bl	8012a60 <memset>
    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_WIFI_INFO,&wifi_info[0],DATA_LEN_WIFI_INFO);
 800a77e:	f507 72b2 	add.w	r2, r7, #356	@ 0x164
 800a782:	233c      	movs	r3, #60	@ 0x3c
 800a784:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800a788:	4890      	ldr	r0, [pc, #576]	@ (800a9cc <Screen_Init_Variable+0x504>)
 800a78a:	f004 fb08 	bl	800ed9e <AT24Cxx_read_buffer>
    char *pdata = strtok(wifi_info,",");
 800a78e:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800a792:	498f      	ldr	r1, [pc, #572]	@ (800a9d0 <Screen_Init_Variable+0x508>)
 800a794:	4618      	mov	r0, r3
 800a796:	f008 f9b3 	bl	8012b00 <strtok>
 800a79a:	f8c7 01e4 	str.w	r0, [r7, #484]	@ 0x1e4
    memcpy(obj_screen->Wifi_setting.Name_Wifi,pdata,strlen(pdata));
 800a79e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a7a2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f503 64a5 	add.w	r4, r3, #1320	@ 0x528
 800a7ac:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800a7b0:	f7f5 fcd8 	bl	8000164 <strlen>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f008 fa98 	bl	8012cf2 <memcpy>
    pdata = strtok(NULL,",");
 800a7c2:	4983      	ldr	r1, [pc, #524]	@ (800a9d0 <Screen_Init_Variable+0x508>)
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	f008 f99b 	bl	8012b00 <strtok>
 800a7ca:	f8c7 01e4 	str.w	r0, [r7, #484]	@ 0x1e4
    memcpy(obj_screen->Wifi_setting.Password_Wifi,pdata,strlen(pdata));
 800a7ce:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a7d2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f203 5464 	addw	r4, r3, #1380	@ 0x564
 800a7dc:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800a7e0:	f7f5 fcc0 	bl	8000164 <strlen>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f008 fa80 	bl	8012cf2 <memcpy>

    memset(obj_screen->Wifi_setting.Name_Wifi_temp,0,sizeof(obj_screen->Wifi_setting.Name_Wifi_temp));
 800a7f2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a7f6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f203 5346 	addw	r3, r3, #1350	@ 0x546
 800a800:	221e      	movs	r2, #30
 800a802:	2100      	movs	r1, #0
 800a804:	4618      	mov	r0, r3
 800a806:	f008 f92b 	bl	8012a60 <memset>
    memset(obj_screen->Wifi_setting.Password_Wifi_temp,0,sizeof(obj_screen->Wifi_setting.Password_Wifi_temp));
 800a80a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a80e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f203 5382 	addw	r3, r3, #1410	@ 0x582
 800a818:	221e      	movs	r2, #30
 800a81a:	2100      	movs	r1, #0
 800a81c:	4618      	mov	r0, r3
 800a81e:	f008 f91f 	bl	8012a60 <memset>
//    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
    // memcpy(obj_screen->Wifi_setting.Name_Wifi,"Wifi TEST 1",strlen("Wifi TEST 1"));
    // memcpy(obj_screen->Wifi_setting.Password_Wifi,"PASSword 1234",strlen("PASSword 1234"));


    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
 800a822:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a826:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2265      	movs	r2, #101	@ 0x65
 800a82e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
 800a832:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a836:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2265      	movs	r2, #101	@ 0x65
 800a83e:	f883 21a9 	strb.w	r2, [r3, #425]	@ 0x1a9
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 
 800a842:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a846:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2265      	movs	r2, #101	@ 0x65
 800a84e:	f883 2309 	strb.w	r2, [r3, #777]	@ 0x309

    obj_screen->IC_Testerx[DEVICE_1].state = false;
 800a852:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a856:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    obj_screen->IC_Testerx[DEVICE_2].state = false;
 800a862:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a866:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 21ac 	strb.w	r2, [r3, #428]	@ 0x1ac
    obj_screen->IC_Testerx[DEVICE_3].state = false;
 800a872:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a876:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 230c 	strb.w	r2, [r3, #780]	@ 0x30c

    obj_screen->IC_Testerx[DEVICE_1].curr_num_ic = 0;
 800a882:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a886:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
 800a892:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a896:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f8d3 4468 	ldr.w	r4, [r3, #1128]	@ 0x468
 800a8a0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a8a4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f8d3 3468 	ldr.w	r3, [r3, #1128]	@ 0x468
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7f5 fc58 	bl	8000164 <strlen>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800a8bc:	f5a2 70f6 	sub.w	r0, r2, #492	@ 0x1ec
 800a8c0:	4622      	mov	r2, r4
 800a8c2:	f249 2128 	movw	r1, #37416	@ 0x9228
 800a8c6:	6800      	ldr	r0, [r0, #0]
 800a8c8:	f004 fc06 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
 800a8cc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a8d0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f8d3 4498 	ldr.w	r4, [r3, #1176]	@ 0x498
 800a8da:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a8de:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7f5 fc3b 	bl	8000164 <strlen>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800a8f6:	f5a2 70f6 	sub.w	r0, r2, #492	@ 0x1ec
 800a8fa:	4622      	mov	r2, r4
 800a8fc:	f249 2150 	movw	r1, #37456	@ 0x9250
 800a900:	6800      	ldr	r0, [r0, #0]
 800a902:	f004 fbe9 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
 800a906:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a90a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f8d3 44c8 	ldr.w	r4, [r3, #1224]	@ 0x4c8
 800a914:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a918:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800a922:	4618      	mov	r0, r3
 800a924:	f7f5 fc1e 	bl	8000164 <strlen>
 800a928:	4603      	mov	r3, r0
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800a930:	f5a2 70f6 	sub.w	r0, r2, #492	@ 0x1ec
 800a934:	4622      	mov	r2, r4
 800a936:	f249 2178 	movw	r1, #37496	@ 0x9278
 800a93a:	6800      	ldr	r0, [r0, #0]
 800a93c:	f004 fbcc 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));
 800a940:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a944:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	@ 0x4f8
 800a94e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a952:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7f5 fc01 	bl	8000164 <strlen>
 800a962:	4603      	mov	r3, r0
 800a964:	b29b      	uxth	r3, r3
 800a966:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800a96a:	f5a2 70f6 	sub.w	r0, r2, #492	@ 0x1ec
 800a96e:	4622      	mov	r2, r4
 800a970:	f249 21a0 	movw	r1, #37536	@ 0x92a0
 800a974:	6800      	ldr	r0, [r0, #0]
 800a976:	f004 fbaf 	bl	800f0d8 <DWIN_SetText>

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));
 800a97a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a97e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f103 044d 	add.w	r4, r3, #77	@ 0x4d
 800a988:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a98c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	334d      	adds	r3, #77	@ 0x4d
 800a994:	4618      	mov	r0, r3
 800a996:	f7f5 fbe5 	bl	8000164 <strlen>
 800a99a:	4603      	mov	r3, r0
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800a9a2:	f5a2 70f6 	sub.w	r0, r2, #492	@ 0x1ec
 800a9a6:	4622      	mov	r2, r4
 800a9a8:	f249 3150 	movw	r1, #37712	@ 0x9350
 800a9ac:	6800      	ldr	r0, [r0, #0]
 800a9ae:	f004 fb93 	bl	800f0d8 <DWIN_SetText>

    // obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
    // obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
 800a9b2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a9b6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    obj_screen->Screen_keyboard.Index_String = 0;
 800a9c2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a9c6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a9ca:	e00b      	b.n	800a9e4 <Screen_Init_Variable+0x51c>
 800a9cc:	20001458 	.word	0x20001458
 800a9d0:	08015478 	.word	0x08015478
 800a9d4:	0801547c 	.word	0x0801547c
 800a9d8:	08015480 	.word	0x08015480
 800a9dc:	0801548c 	.word	0x0801548c
 800a9e0:	08015498 	.word	0x08015498
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    obj_screen->Screen_condition = &condition_array[0];
 800a9ec:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a9f0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a99      	ldr	r2, [pc, #612]	@ (800ac5c <Screen_Init_Variable+0x794>)
 800a9f8:	645a      	str	r2, [r3, #68]	@ 0x44

    Screen_ShowData_Mainpage(obj_screen,PROGRAM_TEST1);
 800a9fa:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a9fe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aa02:	2100      	movs	r1, #0
 800aa04:	6818      	ldr	r0, [r3, #0]
 800aa06:	f000 f931 	bl	800ac6c <Screen_ShowData_Mainpage>

    uint8_t num_direc_used = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
    uint8_t *temp_buf = (uint8_t *)malloc(MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800aa10:	20f0      	movs	r0, #240	@ 0xf0
 800aa12:	f005 ffeb 	bl	80109ec <malloc>
 800aa16:	4603      	mov	r3, r0
 800aa18:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    memset(temp_buf,0,MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800aa1c:	22f0      	movs	r2, #240	@ 0xf0
 800aa1e:	2100      	movs	r1, #0
 800aa20:	f8d7 01dc 	ldr.w	r0, [r7, #476]	@ 0x1dc
 800aa24:	f008 f81c 	bl	8012a60 <memset>
    direc_EEPROM_t direc_array[MAX_DIRECTORY_USED]; /* array store directory */
    direc_EEPROM_t *pDirectory = NULL;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    uint16_t mem_addr;
    uint16_t buf_length;

    /* get num directory used */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&temp_buf[0],1);
 800aa2e:	2301      	movs	r3, #1
 800aa30:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800aa34:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800aa38:	4889      	ldr	r0, [pc, #548]	@ (800ac60 <Screen_Init_Variable+0x798>)
 800aa3a:	f004 f9b0 	bl	800ed9e <AT24Cxx_read_buffer>
    num_direc_used = temp_buf[0];
 800aa3e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3

    /* read directory info */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC,temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800aa48:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	461a      	mov	r2, r3
 800aa50:	0052      	lsls	r2, r2, #1
 800aa52:	4413      	add	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800aa5c:	f240 2182 	movw	r1, #642	@ 0x282
 800aa60:	487f      	ldr	r0, [pc, #508]	@ (800ac60 <Screen_Init_Variable+0x798>)
 800aa62:	f004 f99c 	bl	800ed9e <AT24Cxx_read_buffer>
    memcpy(&direc_array[0],temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800aa66:	f897 21e3 	ldrb.w	r2, [r7, #483]	@ 0x1e3
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	4413      	add	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	461a      	mov	r2, r3
 800aa74:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800aa78:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f008 f938 	bl	8012cf2 <memcpy>
    free(temp_buf);
 800aa82:	f8d7 01dc 	ldr.w	r0, [r7, #476]	@ 0x1dc
 800aa86:	f005 ffb9 	bl	80109fc <free>

    char combined_names[100] = {0};
 800aa8a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aa8e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800aa92:	4618      	mov	r0, r3
 800aa94:	2364      	movs	r3, #100	@ 0x64
 800aa96:	461a      	mov	r2, r3
 800aa98:	2100      	movs	r1, #0
 800aa9a:	f007 ffe1 	bl	8012a60 <memset>
    uint16_t current_pos = 0;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec

    for (uint8_t i = 0; i < num_direc_used; i++) {
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
 800aaaa:	e047      	b.n	800ab3c <Screen_Init_Variable+0x674>
        uint16_t name_len = strlen((char*)direc_array[i].nameIC);
 800aaac:	f897 21eb 	ldrb.w	r2, [r7, #491]	@ 0x1eb
 800aab0:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800aab4:	4613      	mov	r3, r2
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	4413      	add	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	440b      	add	r3, r1
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7f5 fb50 	bl	8000164 <strlen>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
        if (current_pos + name_len + 2 < sizeof(combined_names)) {
 800aaca:	f8b7 21ec 	ldrh.w	r2, [r7, #492]	@ 0x1ec
 800aace:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800aad2:	4413      	add	r3, r2
 800aad4:	3302      	adds	r3, #2
 800aad6:	2b63      	cmp	r3, #99	@ 0x63
 800aad8:	d82b      	bhi.n	800ab32 <Screen_Init_Variable+0x66a>
            // Copy the nameIC 
            strcpy(&combined_names[current_pos], (char*)direc_array[i].nameIC);
 800aada:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	@ 0x1ec
 800aade:	f107 0210 	add.w	r2, r7, #16
 800aae2:	18d0      	adds	r0, r2, r3
 800aae4:	f897 21eb 	ldrb.w	r2, [r7, #491]	@ 0x1eb
 800aae8:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800aaec:	4613      	mov	r3, r2
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	4413      	add	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	440b      	add	r3, r1
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	f008 f8e5 	bl	8012cc6 <strcpy>
            current_pos += name_len;
 800aafc:	f8b7 21ec 	ldrh.w	r2, [r7, #492]	@ 0x1ec
 800ab00:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800ab04:	4413      	add	r3, r2
 800ab06:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec
            
            if (i < num_direc_used - 1) {
 800ab0a:	f897 21eb 	ldrb.w	r2, [r7, #491]	@ 0x1eb
 800ab0e:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 800ab12:	3b01      	subs	r3, #1
 800ab14:	429a      	cmp	r2, r3
 800ab16:	da0c      	bge.n	800ab32 <Screen_Init_Variable+0x66a>
                combined_names[current_pos] = ',';
 800ab18:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	@ 0x1ec
 800ab1c:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800ab20:	f5a2 72f0 	sub.w	r2, r2, #480	@ 0x1e0
 800ab24:	212c      	movs	r1, #44	@ 0x2c
 800ab26:	54d1      	strb	r1, [r2, r3]
                current_pos++;
 800ab28:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	@ 0x1ec
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800ab32:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 800ab36:	3301      	adds	r3, #1
 800ab38:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
 800ab3c:	f897 21eb 	ldrb.w	r2, [r7, #491]	@ 0x1eb
 800ab40:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d3b1      	bcc.n	800aaac <Screen_Init_Variable+0x5e4>
            }
        }
    }
    combined_names[current_pos] = '\0';
 800ab48:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	@ 0x1ec
 800ab4c:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800ab50:	f5a2 72f0 	sub.w	r2, r2, #480	@ 0x1e0
 800ab54:	2100      	movs	r1, #0
 800ab56:	54d1      	strb	r1, [r2, r3]

    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800ab58:	2008      	movs	r0, #8
 800ab5a:	f005 ff47 	bl	80109ec <malloc>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	461a      	mov	r2, r3
 800ab62:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ab66:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800ab6a:	601a      	str	r2, [r3, #0]
    data_send_esp32->data = (char *)malloc(strlen(combined_names) + 1);
 800ab6c:	f107 0310 	add.w	r3, r7, #16
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7f5 faf7 	bl	8000164 <strlen>
 800ab76:	4603      	mov	r3, r0
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ab7e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800ab82:	681c      	ldr	r4, [r3, #0]
 800ab84:	4610      	mov	r0, r2
 800ab86:	f005 ff31 	bl	80109ec <malloc>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data, "n", 1);
 800ab8e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ab92:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	4931      	ldr	r1, [pc, #196]	@ (800ac64 <Screen_Init_Variable+0x79c>)
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f008 f8a7 	bl	8012cf2 <memcpy>
    memcpy(data_send_esp32->data+1,combined_names,strlen(combined_names));
 800aba4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aba8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	1c5c      	adds	r4, r3, #1
 800abb2:	f107 0310 	add.w	r3, r7, #16
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7f5 fad4 	bl	8000164 <strlen>
 800abbc:	4602      	mov	r2, r0
 800abbe:	f107 0310 	add.w	r3, r7, #16
 800abc2:	4619      	mov	r1, r3
 800abc4:	4620      	mov	r0, r4
 800abc6:	f008 f894 	bl	8012cf2 <memcpy>
    data_send_esp32->data[strlen(combined_names) + 1] = '\0';
 800abca:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800abce:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681c      	ldr	r4, [r3, #0]
 800abd6:	f107 0310 	add.w	r3, r7, #16
 800abda:	4618      	mov	r0, r3
 800abdc:	f7f5 fac2 	bl	8000164 <strlen>
 800abe0:	4603      	mov	r3, r0
 800abe2:	3301      	adds	r3, #1
 800abe4:	4423      	add	r3, r4
 800abe6:	2200      	movs	r2, #0
 800abe8:	701a      	strb	r2, [r3, #0]
    data_send_esp32->len = strlen(combined_names) + 1;
 800abea:	f107 0310 	add.w	r3, r7, #16
 800abee:	4618      	mov	r0, r3
 800abf0:	f7f5 fab8 	bl	8000164 <strlen>
 800abf4:	4602      	mov	r2, r0
 800abf6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800abfa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3201      	adds	r2, #1
 800ac02:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800ac04:	4b18      	ldr	r3, [pc, #96]	@ (800ac68 <Screen_Init_Variable+0x7a0>)
 800ac06:	6818      	ldr	r0, [r3, #0]
 800ac08:	f107 020c 	add.w	r2, r7, #12
 800ac0c:	2308      	movs	r3, #8
 800ac0e:	2100      	movs	r1, #0
 800ac10:	f005 fcba 	bl	8010588 <OS_task_post_event>


    DWIN_SetVariable_Icon((Dwin_t *)obj_screen,VP_ICON_ON_OFF,obj_screen->IC_Testerx[obj_screen->curr_device].state);
 800ac14:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ac18:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ac22:	4619      	mov	r1, r3
 800ac24:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ac28:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ac32:	fb01 f303 	mul.w	r3, r1, r3
 800ac36:	4413      	add	r3, r2
 800ac38:	334c      	adds	r3, #76	@ 0x4c
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ac42:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ac46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ac4a:	6818      	ldr	r0, [r3, #0]
 800ac4c:	f004 faf7 	bl	800f23e <DWIN_SetVariable_Icon>
}
 800ac50:	bf00      	nop
 800ac52:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd90      	pop	{r4, r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20000044 	.word	0x20000044
 800ac60:	20001458 	.word	0x20001458
 800ac64:	080154a4 	.word	0x080154a4
 800ac68:	08016114 	.word	0x08016114

0800ac6c <Screen_ShowData_Mainpage>:

static void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
 800ac6c:	b590      	push	{r4, r7, lr}
 800ac6e:	b091      	sub	sp, #68	@ 0x44
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    // uint8_t index_program = screen_obj.IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
 800ac78:	78fa      	ldrb	r2, [r7, #3]
 800ac7a:	6879      	ldr	r1, [r7, #4]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	4413      	add	r3, r2
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	440b      	add	r3, r1
 800ac86:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f005 fea8 	bl	80109e2 <atoi>
 800ac92:	4603      	mov	r3, r0
 800ac94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800ac98:	78fa      	ldrb	r2, [r7, #3]
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	4413      	add	r3, r2
 800aca2:	011b      	lsls	r3, r3, #4
 800aca4:	440b      	add	r3, r1
 800aca6:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4618      	mov	r0, r3
 800acae:	f7f5 fa59 	bl	8000164 <strlen>
 800acb2:	4603      	mov	r3, r0
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	3309      	adds	r3, #9
 800acb8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t size_Description_IC = strlen((char *)screen_obj->Program_Testx[index_program].Description_IC) + 1;
 800acbc:	78fa      	ldrb	r2, [r7, #3]
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	4613      	mov	r3, r2
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	4413      	add	r3, r2
 800acc6:	011b      	lsls	r3, r3, #4
 800acc8:	440b      	add	r3, r1
 800acca:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7f5 fa47 	bl	8000164 <strlen>
 800acd6:	4603      	mov	r3, r0
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	3301      	adds	r3, #1
 800acdc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    // uint8_t size_Description_IC = strlen("Desc IC: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC) + 1;
    // uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800ace0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ace4:	3301      	adds	r3, #1
 800ace6:	4618      	mov	r0, r3
 800ace8:	f005 fe80 	bl	80109ec <malloc>
 800acec:	4603      	mov	r3, r0
 800acee:	633b      	str	r3, [r7, #48]	@ 0x30
    char *Text_Description_IC = malloc(size_Description_IC + 1);
 800acf0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800acf4:	3301      	adds	r3, #1
 800acf6:	4618      	mov	r0, r3
 800acf8:	f005 fe78 	bl	80109ec <malloc>
 800acfc:	4603      	mov	r3, r0
 800acfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // char *Text_Num_IC = malloc(size_Num_IC + 1);

    strcpy(Text_Name_IC,"IC Name: ");
 800ad00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad02:	494b      	ldr	r1, [pc, #300]	@ (800ae30 <Screen_ShowData_Mainpage+0x1c4>)
 800ad04:	461a      	mov	r2, r3
 800ad06:	460b      	mov	r3, r1
 800ad08:	cb03      	ldmia	r3!, {r0, r1}
 800ad0a:	6010      	str	r0, [r2, #0]
 800ad0c:	6051      	str	r1, [r2, #4]
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 800ad12:	78fa      	ldrb	r2, [r7, #3]
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	4613      	mov	r3, r2
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	4413      	add	r3, r2
 800ad1c:	011b      	lsls	r3, r3, #4
 800ad1e:	440b      	add	r3, r1
 800ad20:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad2a:	f007 fea1 	bl	8012a70 <strcat>
    strncpy(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC,strlen(screen_obj->Program_Testx[index_program].Description_IC));
 800ad2e:	78fa      	ldrb	r2, [r7, #3]
 800ad30:	6879      	ldr	r1, [r7, #4]
 800ad32:	4613      	mov	r3, r2
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	4413      	add	r3, r2
 800ad38:	011b      	lsls	r3, r3, #4
 800ad3a:	440b      	add	r3, r1
 800ad3c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800ad40:	681c      	ldr	r4, [r3, #0]
 800ad42:	78fa      	ldrb	r2, [r7, #3]
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	4613      	mov	r3, r2
 800ad48:	005b      	lsls	r3, r3, #1
 800ad4a:	4413      	add	r3, r2
 800ad4c:	011b      	lsls	r3, r3, #4
 800ad4e:	440b      	add	r3, r1
 800ad50:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7f5 fa04 	bl	8000164 <strlen>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	461a      	mov	r2, r3
 800ad60:	4621      	mov	r1, r4
 800ad62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad64:	f007 feb8 	bl	8012ad8 <strncpy>
    // strcat(Text_Description_IC,);
    // strcpy(Text_Num_IC,"Number of ICs: ");
    // strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);

    memset(a_select_program,1,MAX_PROGRAM_TEST);
 800ad68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ad6c:	2204      	movs	r2, #4
 800ad6e:	2101      	movs	r1, #1
 800ad70:	4618      	mov	r0, r3
 800ad72:	f007 fe75 	bl	8012a60 <memset>
    // Get the program selected
    a_select_program[index_program] = 0 ;
 800ad76:	78fb      	ldrb	r3, [r7, #3]
 800ad78:	3338      	adds	r3, #56	@ 0x38
 800ad7a:	443b      	add	r3, r7
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f803 2c10 	strb.w	r2, [r3, #-16]
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ad88:	4619      	mov	r1, r3
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ad90:	fb01 f303 	mul.w	r3, r1, r3
 800ad94:	4413      	add	r3, r2
 800ad96:	334b      	adds	r3, #75	@ 0x4b
 800ad98:	78fa      	ldrb	r2, [r7, #3]
 800ad9a:	701a      	strb	r2, [r3, #0]

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
 800ad9c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ada0:	2304      	movs	r3, #4
 800ada2:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f004 fa76 	bl	800f298 <DWIN_SetArray_Icon>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,Text_Name_IC,size_Name_IC);
 800adac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb4:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f004 f98d 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,Text_Description_IC,size_Description_IC);
 800adbe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adc6:	f249 1150 	movw	r1, #37200	@ 0x9150
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f004 f984 	bl	800f0d8 <DWIN_SetText>

    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"Number of ICs: %d / %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic,num_ic);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800add6:	4619      	mov	r1, r3
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800adde:	fb01 f303 	mul.w	r3, r1, r3
 800ade2:	4413      	add	r3, r2
 800ade4:	334a      	adds	r3, #74	@ 0x4a
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	461a      	mov	r2, r3
 800adea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800adee:	f107 0008 	add.w	r0, r7, #8
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	4613      	mov	r3, r2
 800adf6:	4a0f      	ldr	r2, [pc, #60]	@ (800ae34 <Screen_ShowData_Mainpage+0x1c8>)
 800adf8:	211e      	movs	r1, #30
 800adfa:	f007 fcf1 	bl	80127e0 <sniprintf>
//    uint8_t len = strlen(ShowCase_String);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
 800adfe:	f107 0308 	add.w	r3, r7, #8
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7f5 f9ae 	bl	8000164 <strlen>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f107 0208 	add.w	r2, r7, #8
 800ae10:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f004 f95f 	bl	800f0d8 <DWIN_SetText>

    /* free malloc */
    free(Text_Name_IC);
 800ae1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae1c:	f005 fdee 	bl	80109fc <free>
    free(Text_Description_IC);
 800ae20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae22:	f005 fdeb 	bl	80109fc <free>

}
 800ae26:	bf00      	nop
 800ae28:	373c      	adds	r7, #60	@ 0x3c
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd90      	pop	{r4, r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	080153c8 	.word	0x080153c8
 800ae34:	080154a8 	.word	0x080154a8

0800ae38 <Screen_SetInfo_Pin>:

static void Screen_SetInfo_Pin(Screen_t *const screen_obj) {
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ae46:	4619      	mov	r1, r3
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ae4e:	fb01 f303 	mul.w	r3, r1, r3
 800ae52:	4413      	add	r3, r2
 800ae54:	334b      	adds	r3, #75	@ 0x4b
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	73fb      	strb	r3, [r7, #15]
    uint16_t Address_VP = VP_Name_Pin;
 800ae5a:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 800ae5e:	82fb      	strh	r3, [r7, #22]
    char *data_copy = malloc(screen_obj->Program_Testx[index_program].data_pin_len + 1);
 800ae60:	7bfa      	ldrb	r2, [r7, #15]
 800ae62:	6879      	ldr	r1, [r7, #4]
 800ae64:	4613      	mov	r3, r2
 800ae66:	005b      	lsls	r3, r3, #1
 800ae68:	4413      	add	r3, r2
 800ae6a:	011b      	lsls	r3, r3, #4
 800ae6c:	440b      	add	r3, r1
 800ae6e:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800ae72:	881b      	ldrh	r3, [r3, #0]
 800ae74:	3301      	adds	r3, #1
 800ae76:	4618      	mov	r0, r3
 800ae78:	f005 fdb8 	bl	80109ec <malloc>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	60bb      	str	r3, [r7, #8]
    memcpy(data_copy,screen_obj->Program_Testx[index_program].data_pin,screen_obj->Program_Testx[index_program].data_pin_len);
 800ae80:	7bfa      	ldrb	r2, [r7, #15]
 800ae82:	6879      	ldr	r1, [r7, #4]
 800ae84:	4613      	mov	r3, r2
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	4413      	add	r3, r2
 800ae8a:	011b      	lsls	r3, r3, #4
 800ae8c:	440b      	add	r3, r1
 800ae8e:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	7bfa      	ldrb	r2, [r7, #15]
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	4413      	add	r3, r2
 800ae9e:	011b      	lsls	r3, r3, #4
 800aea0:	440b      	add	r3, r1
 800aea2:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4601      	mov	r1, r0
 800aeac:	68b8      	ldr	r0, [r7, #8]
 800aeae:	f007 ff20 	bl	8012cf2 <memcpy>
    char *temp_buf = strtok(data_copy,"\n");
 800aeb2:	4911      	ldr	r1, [pc, #68]	@ (800aef8 <Screen_SetInfo_Pin+0xc0>)
 800aeb4:	68b8      	ldr	r0, [r7, #8]
 800aeb6:	f007 fe23 	bl	8012b00 <strtok>
 800aeba:	6138      	str	r0, [r7, #16]
    while (temp_buf != NULL) {
 800aebc:	e011      	b.n	800aee2 <Screen_SetInfo_Pin+0xaa>
        DWIN_SetText((Dwin_t *)screen_obj,Address_VP,temp_buf,strlen(temp_buf));
 800aebe:	6938      	ldr	r0, [r7, #16]
 800aec0:	f7f5 f950 	bl	8000164 <strlen>
 800aec4:	4603      	mov	r3, r0
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	8af9      	ldrh	r1, [r7, #22]
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f004 f903 	bl	800f0d8 <DWIN_SetText>
        // sprintf(text_show,"%d",temp_buf);
        temp_buf = strtok(NULL,"\n");
 800aed2:	4909      	ldr	r1, [pc, #36]	@ (800aef8 <Screen_SetInfo_Pin+0xc0>)
 800aed4:	2000      	movs	r0, #0
 800aed6:	f007 fe13 	bl	8012b00 <strtok>
 800aeda:	6138      	str	r0, [r7, #16]
        Address_VP = Address_VP + 0x10;
 800aedc:	8afb      	ldrh	r3, [r7, #22]
 800aede:	3310      	adds	r3, #16
 800aee0:	82fb      	strh	r3, [r7, #22]
    while (temp_buf != NULL) {
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1ea      	bne.n	800aebe <Screen_SetInfo_Pin+0x86>
    }
    free(data_copy);
 800aee8:	68b8      	ldr	r0, [r7, #8]
 800aeea:	f005 fd87 	bl	80109fc <free>
}
 800aeee:	bf00      	nop
 800aef0:	3718      	adds	r7, #24
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	080154c0 	.word	0x080154c0

0800aefc <get_data_testing_ic>:

#pragma endregion FUNCTION SCREEN


static bool get_data_testing_ic(char *searchName,Program_Test_t *pdata_test) {
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b0d1      	sub	sp, #324	@ 0x144
 800af00:	af00      	add	r7, sp, #0
 800af02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af06:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800af0a:	6018      	str	r0, [r3, #0]
 800af0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800af14:	6019      	str	r1, [r3, #0]
    uint8_t num_direc_used = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
    uint8_t *temp_buf = (uint8_t *)malloc(MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800af1c:	20f0      	movs	r0, #240	@ 0xf0
 800af1e:	f005 fd65 	bl	80109ec <malloc>
 800af22:	4603      	mov	r3, r0
 800af24:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    memset(temp_buf,0,MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800af28:	22f0      	movs	r2, #240	@ 0xf0
 800af2a:	2100      	movs	r1, #0
 800af2c:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800af30:	f007 fd96 	bl	8012a60 <memset>
    direc_EEPROM_t direc_array[MAX_DIRECTORY_USED]; /* array store directory */
    direc_EEPROM_t *pDirectory = NULL;
 800af34:	2300      	movs	r3, #0
 800af36:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    uint16_t mem_addr;
    uint16_t buf_length;
    /* get num directory used */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&temp_buf[0],1);
 800af3a:	2301      	movs	r3, #1
 800af3c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800af40:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800af44:	48af      	ldr	r0, [pc, #700]	@ (800b204 <get_data_testing_ic+0x308>)
 800af46:	f003 ff2a 	bl	800ed9e <AT24Cxx_read_buffer>
    num_direc_used = temp_buf[0];
 800af4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
    /* read directory info */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC,temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800af54:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 800af58:	b29b      	uxth	r3, r3
 800af5a:	461a      	mov	r2, r3
 800af5c:	0052      	lsls	r2, r2, #1
 800af5e:	4413      	add	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	b29b      	uxth	r3, r3
 800af64:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800af68:	f240 2182 	movw	r1, #642	@ 0x282
 800af6c:	48a5      	ldr	r0, [pc, #660]	@ (800b204 <get_data_testing_ic+0x308>)
 800af6e:	f003 ff16 	bl	800ed9e <AT24Cxx_read_buffer>
    memcpy(&direc_array[0],temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800af72:	f897 213a 	ldrb.w	r2, [r7, #314]	@ 0x13a
 800af76:	4613      	mov	r3, r2
 800af78:	005b      	lsls	r3, r3, #1
 800af7a:	4413      	add	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	461a      	mov	r2, r3
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800af88:	4618      	mov	r0, r3
 800af8a:	f007 feb2 	bl	8012cf2 <memcpy>
    free(temp_buf);
 800af8e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800af92:	f005 fd33 	bl	80109fc <free>
    /* find info of search name ic */
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800af96:	2300      	movs	r3, #0
 800af98:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 800af9c:	e02c      	b.n	800aff8 <get_data_testing_ic+0xfc>
        if (memcmp(searchName,direc_array[i].nameIC,strlen(searchName)) == 0) {
 800af9e:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800afa2:	f107 0108 	add.w	r1, r7, #8
 800afa6:	4613      	mov	r3, r2
 800afa8:	005b      	lsls	r3, r3, #1
 800afaa:	4413      	add	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	18cc      	adds	r4, r1, r3
 800afb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800afb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800afb8:	6818      	ldr	r0, [r3, #0]
 800afba:	f7f5 f8d3 	bl	8000164 <strlen>
 800afbe:	4602      	mov	r2, r0
 800afc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800afc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800afc8:	4621      	mov	r1, r4
 800afca:	6818      	ldr	r0, [r3, #0]
 800afcc:	f007 fd38 	bl	8012a40 <memcmp>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10b      	bne.n	800afee <get_data_testing_ic+0xf2>
            pDirectory = &direc_array[i];
 800afd6:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800afda:	f107 0108 	add.w	r1, r7, #8
 800afde:	4613      	mov	r3, r2
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	4413      	add	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	440b      	add	r3, r1
 800afe8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            break;
 800afec:	e00a      	b.n	800b004 <get_data_testing_ic+0x108>
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800afee:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800aff2:	3301      	adds	r3, #1
 800aff4:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 800aff8:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800affc:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 800b000:	429a      	cmp	r2, r3
 800b002:	d3cc      	bcc.n	800af9e <get_data_testing_ic+0xa2>
        }
    }
    /* NOT FOUND NAME IC IN EEPROM */ 
    if (pDirectory == NULL) {
 800b004:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d108      	bne.n	800b01e <get_data_testing_ic+0x122>
        // printf("NOT FOUND NAME IC IN EEPROM\n");
        DWIN_SetText((Dwin_t *)&_Screen,VP_Warning_modify_program,"No data found for this IC",strlen("No data found for this IC"));
 800b00c:	2319      	movs	r3, #25
 800b00e:	4a7e      	ldr	r2, [pc, #504]	@ (800b208 <get_data_testing_ic+0x30c>)
 800b010:	f24a 0150 	movw	r1, #41040	@ 0xa050
 800b014:	487d      	ldr	r0, [pc, #500]	@ (800b20c <get_data_testing_ic+0x310>)
 800b016:	f004 f85f 	bl	800f0d8 <DWIN_SetText>
        return false;
 800b01a:	2300      	movs	r3, #0
 800b01c:	e1ee      	b.n	800b3fc <get_data_testing_ic+0x500>
    } 

    mem_addr = (uint16_t)((pDirectory->addr[0] << 8) | pDirectory->addr[1]);
 800b01e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800b022:	7a1b      	ldrb	r3, [r3, #8]
 800b024:	b21b      	sxth	r3, r3
 800b026:	021b      	lsls	r3, r3, #8
 800b028:	b21a      	sxth	r2, r3
 800b02a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800b02e:	7a5b      	ldrb	r3, [r3, #9]
 800b030:	b21b      	sxth	r3, r3
 800b032:	4313      	orrs	r3, r2
 800b034:	b21b      	sxth	r3, r3
 800b036:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    buf_length = (uint16_t)((pDirectory->length[0] << 8) | pDirectory->length[1]);
 800b03a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800b03e:	7a9b      	ldrb	r3, [r3, #10]
 800b040:	b21b      	sxth	r3, r3
 800b042:	021b      	lsls	r3, r3, #8
 800b044:	b21a      	sxth	r2, r3
 800b046:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800b04a:	7adb      	ldrb	r3, [r3, #11]
 800b04c:	b21b      	sxth	r3, r3
 800b04e:	4313      	orrs	r3, r2
 800b050:	b21b      	sxth	r3, r3
 800b052:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    temp_buf = (uint8_t *)malloc(buf_length);
 800b056:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800b05a:	4618      	mov	r0, r3
 800b05c:	f005 fcc6 	bl	80109ec <malloc>
 800b060:	4603      	mov	r3, r0
 800b062:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    AT24Cxx_read_buffer(&eeprom_ob, mem_addr, temp_buf, buf_length);
 800b066:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800b06a:	f8b7 1132 	ldrh.w	r1, [r7, #306]	@ 0x132
 800b06e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b072:	4864      	ldr	r0, [pc, #400]	@ (800b204 <get_data_testing_ic+0x308>)
 800b074:	f003 fe93 	bl	800ed9e <AT24Cxx_read_buffer>

    // Find the first pipe separator
    uint8_t *first_pipe = memchr(temp_buf, '|', buf_length);
 800b078:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800b07c:	461a      	mov	r2, r3
 800b07e:	217c      	movs	r1, #124	@ 0x7c
 800b080:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800b084:	f007 fe27 	bl	8012cd6 <memchr>
 800b088:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
    if (!first_pipe) return false;
 800b08c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <get_data_testing_ic+0x19c>
 800b094:	2300      	movs	r3, #0
 800b096:	e1b1      	b.n	800b3fc <get_data_testing_ic+0x500>

    // Extract pin count
    int pin_count_len = first_pipe - temp_buf;
 800b098:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800b09c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    char* pin_count_str = malloc(pin_count_len + 1);
 800b0a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f005 fc9d 	bl	80109ec <malloc>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    strncpy(pin_count_str, temp_buf, pin_count_len);
 800b0b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b0bc:	461a      	mov	r2, r3
 800b0be:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800b0c2:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800b0c6:	f007 fd07 	bl	8012ad8 <strncpy>
    pin_count_str[pin_count_len] = '\0';
 800b0ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b0ce:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800b0d2:	4413      	add	r3, r2
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	701a      	strb	r2, [r3, #0]
    pdata_test->num_pin = atoi(pin_count_str);
 800b0d8:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800b0dc:	f005 fc81 	bl	80109e2 <atoi>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b0e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	775a      	strb	r2, [r3, #29]
    free(pin_count_str);
 800b0f0:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800b0f4:	f005 fc82 	bl	80109fc <free>

    // Find the second pipe separator
    int remaining_len = buf_length - (first_pipe - temp_buf + 1);
 800b0f8:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 800b0fc:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800b100:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b104:	1acb      	subs	r3, r1, r3
 800b106:	3301      	adds	r3, #1
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint8_t *second_pipe = memchr(first_pipe + 1, '|', remaining_len);
 800b10e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b112:	3301      	adds	r3, #1
 800b114:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b118:	217c      	movs	r1, #124	@ 0x7c
 800b11a:	4618      	mov	r0, r3
 800b11c:	f007 fddb 	bl	8012cd6 <memchr>
 800b120:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
    if (!second_pipe) return false;
 800b124:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <get_data_testing_ic+0x234>
 800b12c:	2300      	movs	r3, #0
 800b12e:	e165      	b.n	800b3fc <get_data_testing_ic+0x500>

    // Extract test count
    int test_count_len = second_pipe - (first_pipe + 1);
 800b130:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b134:	3301      	adds	r3, #1
 800b136:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    char* test_count_str = malloc(test_count_len + 1);
 800b140:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b144:	3301      	adds	r3, #1
 800b146:	4618      	mov	r0, r3
 800b148:	f005 fc50 	bl	80109ec <malloc>
 800b14c:	4603      	mov	r3, r0
 800b14e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    strncpy(test_count_str, first_pipe + 1, test_count_len);
 800b152:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b156:	3301      	adds	r3, #1
 800b158:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b15c:	4619      	mov	r1, r3
 800b15e:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800b162:	f007 fcb9 	bl	8012ad8 <strncpy>
    test_count_str[test_count_len] = '\0';
 800b166:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b16a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800b16e:	4413      	add	r3, r2
 800b170:	2200      	movs	r2, #0
 800b172:	701a      	strb	r2, [r3, #0]
    pdata_test->num_case = atoi(test_count_str);
 800b174:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800b178:	f005 fc33 	bl	80109e2 <atoi>
 800b17c:	4603      	mov	r3, r0
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b184:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	771a      	strb	r2, [r3, #28]
    free(test_count_str);
 800b18c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800b190:	f005 fc34 	bl	80109fc <free>

    // Find the third pipe separator (after empty field)
    remaining_len = buf_length - (second_pipe - temp_buf + 1);
 800b194:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 800b198:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 800b19c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b1a0:	1acb      	subs	r3, r1, r3
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint8_t *third_pipe = memchr(second_pipe + 1, '|', remaining_len);
 800b1aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b1b4:	217c      	movs	r1, #124	@ 0x7c
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f007 fd8d 	bl	8012cd6 <memchr>
 800b1bc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    if (!third_pipe) return false;
 800b1c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <get_data_testing_ic+0x2d0>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	e117      	b.n	800b3fc <get_data_testing_ic+0x500>

    // Skip the empty field between second and third pipe
    // Find the fourth pipe separator  
    remaining_len = buf_length - (third_pipe - temp_buf + 1);
 800b1cc:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 800b1d0:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800b1d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b1d8:	1acb      	subs	r3, r1, r3
 800b1da:	3301      	adds	r3, #1
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint8_t *fourth_pipe = memchr(third_pipe + 1, '|', remaining_len);
 800b1e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b1ec:	217c      	movs	r1, #124	@ 0x7c
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f007 fd71 	bl	8012cd6 <memchr>
 800b1f4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    if (!fourth_pipe) return false;
 800b1f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d107      	bne.n	800b210 <get_data_testing_ic+0x314>
 800b200:	2300      	movs	r3, #0
 800b202:	e0fb      	b.n	800b3fc <get_data_testing_ic+0x500>
 800b204:	20001458 	.word	0x20001458
 800b208:	080154c4 	.word	0x080154c4
 800b20c:	20000cc8 	.word	0x20000cc8

    if (pdata_test->Description_IC != NULL) {
 800b210:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b214:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00f      	beq.n	800b240 <get_data_testing_ic+0x344>
        free(pdata_test->Description_IC);
 800b220:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b224:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f005 fbe5 	bl	80109fc <free>
        pdata_test->Description_IC = NULL;
 800b232:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b236:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2200      	movs	r2, #0
 800b23e:	619a      	str	r2, [r3, #24]
    }
    // Extract description (between third and fourth pipe)
    int description_len = fourth_pipe - (third_pipe + 1);
 800b240:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b244:	3301      	adds	r3, #1
 800b246:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    pdata_test->Description_IC = malloc(description_len + 1);
 800b250:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b254:	3301      	adds	r3, #1
 800b256:	4618      	mov	r0, r3
 800b258:	f005 fbc8 	bl	80109ec <malloc>
 800b25c:	4603      	mov	r3, r0
 800b25e:	461a      	mov	r2, r3
 800b260:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b264:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	619a      	str	r2, [r3, #24]
    strncpy(pdata_test->Description_IC, third_pipe + 1, description_len);
 800b26c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b270:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	6998      	ldr	r0, [r3, #24]
 800b278:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b27c:	3301      	adds	r3, #1
 800b27e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800b282:	4619      	mov	r1, r3
 800b284:	f007 fc28 	bl	8012ad8 <strncpy>
    pdata_test->Description_IC[description_len] = '\0';
 800b288:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b28c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	699a      	ldr	r2, [r3, #24]
 800b294:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b298:	4413      	add	r3, r2
 800b29a:	2200      	movs	r2, #0
 800b29c:	701a      	strb	r2, [r3, #0]

    // Find the fifth pipe separator
    remaining_len = buf_length - (fourth_pipe - temp_buf + 1);
 800b29e:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 800b2a2:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800b2a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b2aa:	1acb      	subs	r3, r1, r3
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint8_t *fifth_pipe = memchr(fourth_pipe + 1, '|', remaining_len);
 800b2b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b2be:	217c      	movs	r1, #124	@ 0x7c
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f007 fd08 	bl	8012cd6 <memchr>
 800b2c6:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    if (!fifth_pipe) return false;
 800b2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <get_data_testing_ic+0x3da>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e092      	b.n	800b3fc <get_data_testing_ic+0x500>

    if (pdata_test->data_pin != NULL) {
 800b2d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b2da:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00f      	beq.n	800b306 <get_data_testing_ic+0x40a>
        free(pdata_test->data_pin);
 800b2e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b2ea:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f005 fb82 	bl	80109fc <free>
        pdata_test->data_pin = NULL;
 800b2f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b2fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2200      	movs	r2, #0
 800b304:	621a      	str	r2, [r3, #32]
    }
    // Extract pin data (between fourth and fifth pipe)
    int pin_data_len = fifth_pipe - (fourth_pipe + 1);
 800b306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b30a:	3301      	adds	r3, #1
 800b30c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    pdata_test->data_pin = malloc(pin_data_len);
 800b316:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b31a:	4618      	mov	r0, r3
 800b31c:	f005 fb66 	bl	80109ec <malloc>
 800b320:	4603      	mov	r3, r0
 800b322:	461a      	mov	r2, r3
 800b324:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b328:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	621a      	str	r2, [r3, #32]
    memcpy(pdata_test->data_pin, fourth_pipe + 1, pin_data_len);
 800b330:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b334:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	6a18      	ldr	r0, [r3, #32]
 800b33c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b340:	3301      	adds	r3, #1
 800b342:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800b346:	4619      	mov	r1, r3
 800b348:	f007 fcd3 	bl	8012cf2 <memcpy>
    pdata_test->data_pin_len = pin_data_len;
 800b34c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b350:	b29a      	uxth	r2, r3
 800b352:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b356:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	849a      	strh	r2, [r3, #36]	@ 0x24

    if (pdata_test->data_test != NULL) {
 800b35e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b362:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00f      	beq.n	800b38e <get_data_testing_ic+0x492>
        free(pdata_test->data_test);
 800b36e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b372:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b37a:	4618      	mov	r0, r3
 800b37c:	f005 fb3e 	bl	80109fc <free>
        pdata_test->data_test = NULL;
 800b380:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b384:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2200      	movs	r2, #0
 800b38c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    // Extract test data (after fifth pipe)
    uint8_t *test_start = fifth_pipe + 1;
 800b38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b392:	3301      	adds	r3, #1
 800b394:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    int test_data_len = buf_length - (test_start - temp_buf);
 800b398:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 800b39c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 800b3a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b3a4:	1acb      	subs	r3, r1, r3
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    pdata_test->data_test = malloc(test_data_len);
 800b3ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f005 fb1b 	bl	80109ec <malloc>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b3be:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	629a      	str	r2, [r3, #40]	@ 0x28
    memcpy(pdata_test->data_test, test_start, test_data_len);
 800b3c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b3ca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800b3d6:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f007 fc89 	bl	8012cf2 <memcpy>
    pdata_test->data_test_len = test_data_len;
 800b3e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b3ea:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	859a      	strh	r2, [r3, #44]	@ 0x2c

    free(temp_buf);
 800b3f2:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800b3f6:	f005 fb01 	bl	80109fc <free>
    return true;
 800b3fa:	2301      	movs	r3, #1
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b402:	46bd      	mov	sp, r7
 800b404:	bd90      	pop	{r4, r7, pc}
 800b406:	bf00      	nop

0800b408 <show_text_short_circuit>:

static void show_text_short_circuit(Screen_t *screen_obj) {
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	b0c9      	sub	sp, #292	@ 0x124
 800b40e:	af00      	add	r7, sp, #0
 800b410:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b414:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b418:	6018      	str	r0, [r3, #0]
 800b41a:	466b      	mov	r3, sp
 800b41c:	461e      	mov	r6, r3
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b41e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b422:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b42c:	4619      	mov	r1, r3
 800b42e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b432:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b43c:	fb01 f303 	mul.w	r3, r1, r3
 800b440:	4413      	add	r3, r2
 800b442:	334b      	adds	r3, #75	@ 0x4b
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800b44a:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800b44e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b452:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b456:	6819      	ldr	r1, [r3, #0]
 800b458:	4613      	mov	r3, r2
 800b45a:	005b      	lsls	r3, r3, #1
 800b45c:	4413      	add	r3, r2
 800b45e:	011b      	lsls	r3, r3, #4
 800b460:	440b      	add	r3, r1
 800b462:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
//    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
    char short_text[150] = "Pin Short to GND/VDD: ";
 800b46c:	4b88      	ldr	r3, [pc, #544]	@ (800b690 <show_text_short_circuit+0x288>)
 800b46e:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800b472:	461d      	mov	r5, r3
 800b474:	6828      	ldr	r0, [r5, #0]
 800b476:	6869      	ldr	r1, [r5, #4]
 800b478:	68aa      	ldr	r2, [r5, #8]
 800b47a:	68eb      	ldr	r3, [r5, #12]
 800b47c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b47e:	6928      	ldr	r0, [r5, #16]
 800b480:	6020      	str	r0, [r4, #0]
 800b482:	8aab      	ldrh	r3, [r5, #20]
 800b484:	7daa      	ldrb	r2, [r5, #22]
 800b486:	80a3      	strh	r3, [r4, #4]
 800b488:	4613      	mov	r3, r2
 800b48a:	71a3      	strb	r3, [r4, #6]
 800b48c:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800b490:	227f      	movs	r2, #127	@ 0x7f
 800b492:	2100      	movs	r1, #0
 800b494:	4618      	mov	r0, r3
 800b496:	f007 fae3 	bl	8012a60 <memset>
    uint8_t buffer[50];
    memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit,num_pin);
 800b49a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b49e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b4ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b4b8:	fb01 f303 	mul.w	r3, r1, r3
 800b4bc:	4413      	add	r3, r2
 800b4be:	3368      	adds	r3, #104	@ 0x68
 800b4c0:	6819      	ldr	r1, [r3, #0]
 800b4c2:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800b4c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f007 fc11 	bl	8012cf2 <memcpy>
    // uint8_t test_short[20] = {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'};
    uint8_t shortPin[num_pin]; /* array store pin short */
 800b4d0:	f897 1116 	ldrb.w	r1, [r7, #278]	@ 0x116
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b4dc:	b2cb      	uxtb	r3, r1
 800b4de:	2200      	movs	r2, #0
 800b4e0:	469a      	mov	sl, r3
 800b4e2:	4693      	mov	fp, r2
 800b4e4:	f04f 0200 	mov.w	r2, #0
 800b4e8:	f04f 0300 	mov.w	r3, #0
 800b4ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b4f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b4f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4f8:	b2cb      	uxtb	r3, r1
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	4698      	mov	r8, r3
 800b4fe:	4691      	mov	r9, r2
 800b500:	f04f 0200 	mov.w	r2, #0
 800b504:	f04f 0300 	mov.w	r3, #0
 800b508:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b50c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b510:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b514:	460b      	mov	r3, r1
 800b516:	3307      	adds	r3, #7
 800b518:	08db      	lsrs	r3, r3, #3
 800b51a:	00db      	lsls	r3, r3, #3
 800b51c:	ebad 0d03 	sub.w	sp, sp, r3
 800b520:	466b      	mov	r3, sp
 800b522:	3300      	adds	r3, #0
 800b524:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint8_t shortCount = 0;
 800b528:	2300      	movs	r3, #0
 800b52a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < num_pin; i++) {
 800b52e:	2300      	movs	r3, #0
 800b530:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b534:	e02c      	b.n	800b590 <show_text_short_circuit+0x188>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] == '0') {
 800b536:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b53a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b544:	4619      	mov	r1, r3
 800b546:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b54a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b554:	fb01 f303 	mul.w	r3, r1, r3
 800b558:	4413      	add	r3, r2
 800b55a:	3368      	adds	r3, #104	@ 0x68
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b562:	4413      	add	r3, r2
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	2b30      	cmp	r3, #48	@ 0x30
 800b568:	d10d      	bne.n	800b586 <show_text_short_circuit+0x17e>
            shortPin[shortCount] = i + 1;
 800b56a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b56e:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800b572:	3201      	adds	r2, #1
 800b574:	b2d1      	uxtb	r1, r2
 800b576:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b57a:	54d1      	strb	r1, [r2, r3]
            shortCount++;
 800b57c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b580:	3301      	adds	r3, #1
 800b582:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < num_pin; i++) {
 800b586:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b58a:	3301      	adds	r3, #1
 800b58c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b590:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800b594:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b598:	429a      	cmp	r2, r3
 800b59a:	d3cc      	bcc.n	800b536 <show_text_short_circuit+0x12e>
        }
    }

    if (shortCount == 0) {
 800b59c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d121      	bne.n	800b5e8 <show_text_short_circuit+0x1e0>
        strcat(short_text,"None");
 800b5a4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7f4 fddb 	bl	8000164 <strlen>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b5b6:	4413      	add	r3, r2
 800b5b8:	4a36      	ldr	r2, [pc, #216]	@ (800b694 <show_text_short_circuit+0x28c>)
 800b5ba:	6810      	ldr	r0, [r2, #0]
 800b5bc:	6018      	str	r0, [r3, #0]
 800b5be:	7912      	ldrb	r2, [r2, #4]
 800b5c0:	711a      	strb	r2, [r3, #4]
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 800b5c2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f4 fdcc 	bl	8000164 <strlen>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800b5d4:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800b5d8:	f5a1 708e 	sub.w	r0, r1, #284	@ 0x11c
 800b5dc:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800b5e0:	6800      	ldr	r0, [r0, #0]
 800b5e2:	f003 fd79 	bl	800f0d8 <DWIN_SetText>
 800b5e6:	e04b      	b.n	800b680 <show_text_short_circuit+0x278>
    } else {
        char tempStr[50];
        for (int i = 0; i < shortCount; i++) {
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800b5ee:	e02f      	b.n	800b650 <show_text_short_circuit+0x248>
            sprintf(tempStr, "Pin %d", shortPin[i]);
 800b5f0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b5f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b5f8:	4413      	add	r3, r2
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	f107 030c 	add.w	r3, r7, #12
 800b602:	4925      	ldr	r1, [pc, #148]	@ (800b698 <show_text_short_circuit+0x290>)
 800b604:	4618      	mov	r0, r3
 800b606:	f007 f921 	bl	801284c <siprintf>
            strcat(short_text, tempStr);
 800b60a:	f107 020c 	add.w	r2, r7, #12
 800b60e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b612:	4611      	mov	r1, r2
 800b614:	4618      	mov	r0, r3
 800b616:	f007 fa2b 	bl	8012a70 <strcat>
            if (i < shortCount - 1) {
 800b61a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b61e:	3b01      	subs	r3, #1
 800b620:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b624:	429a      	cmp	r2, r3
 800b626:	da0e      	bge.n	800b646 <show_text_short_circuit+0x23e>
                strcat(short_text, ", ");
 800b628:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7f4 fd99 	bl	8000164 <strlen>
 800b632:	4603      	mov	r3, r0
 800b634:	461a      	mov	r2, r3
 800b636:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b63a:	4413      	add	r3, r2
 800b63c:	4a17      	ldr	r2, [pc, #92]	@ (800b69c <show_text_short_circuit+0x294>)
 800b63e:	8811      	ldrh	r1, [r2, #0]
 800b640:	7892      	ldrb	r2, [r2, #2]
 800b642:	8019      	strh	r1, [r3, #0]
 800b644:	709a      	strb	r2, [r3, #2]
        for (int i = 0; i < shortCount; i++) {
 800b646:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b64a:	3301      	adds	r3, #1
 800b64c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800b650:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b654:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b658:	429a      	cmp	r2, r3
 800b65a:	dbc9      	blt.n	800b5f0 <show_text_short_circuit+0x1e8>
            }
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 800b65c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b660:	4618      	mov	r0, r3
 800b662:	f7f4 fd7f 	bl	8000164 <strlen>
 800b666:	4603      	mov	r3, r0
 800b668:	b29b      	uxth	r3, r3
 800b66a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800b66e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800b672:	f5a1 708e 	sub.w	r0, r1, #284	@ 0x11c
 800b676:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800b67a:	6800      	ldr	r0, [r0, #0]
 800b67c:	f003 fd2c 	bl	800f0d8 <DWIN_SetText>
 800b680:	46b5      	mov	sp, r6
    }
}
 800b682:	bf00      	nop
 800b684:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800b688:	46bd      	mov	sp, r7
 800b68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68e:	bf00      	nop
 800b690:	080154f4 	.word	0x080154f4
 800b694:	080154e0 	.word	0x080154e0
 800b698:	080154e8 	.word	0x080154e8
 800b69c:	080154f0 	.word	0x080154f0

0800b6a0 <show_text_function_test>:

static void show_text_function_test(Screen_t *const screen_obj) {
 800b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a4:	b0d9      	sub	sp, #356	@ 0x164
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b6ac:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b6b0:	6018      	str	r0, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b6b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b6b6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b6c6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b6d0:	fb01 f303 	mul.w	r3, r1, r3
 800b6d4:	4413      	add	r3, r2
 800b6d6:	334b      	adds	r3, #75	@ 0x4b
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800b6de:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800b6e2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b6e6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b6ea:	6819      	ldr	r1, [r3, #0]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	4413      	add	r3, r2
 800b6f2:	011b      	lsls	r3, r3, #4
 800b6f4:	440b      	add	r3, r1
 800b6f6:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800b700:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800b704:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b708:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b70c:	6819      	ldr	r1, [r3, #0]
 800b70e:	4613      	mov	r3, r2
 800b710:	005b      	lsls	r3, r3, #1
 800b712:	4413      	add	r3, r2
 800b714:	011b      	lsls	r3, r3, #4
 800b716:	440b      	add	r3, r1
 800b718:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	f887 3155 	strb.w	r3, [r7, #341]	@ 0x155

    char case_text[300] = "Self-test result: ";  
 800b722:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b726:	f5a3 76a0 	sub.w	r6, r3, #320	@ 0x140
 800b72a:	4b9e      	ldr	r3, [pc, #632]	@ (800b9a4 <show_text_function_test+0x304>)
 800b72c:	4634      	mov	r4, r6
 800b72e:	461d      	mov	r5, r3
 800b730:	6828      	ldr	r0, [r5, #0]
 800b732:	6869      	ldr	r1, [r5, #4]
 800b734:	68aa      	ldr	r2, [r5, #8]
 800b736:	68eb      	ldr	r3, [r5, #12]
 800b738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b73a:	8a2b      	ldrh	r3, [r5, #16]
 800b73c:	7caa      	ldrb	r2, [r5, #18]
 800b73e:	8023      	strh	r3, [r4, #0]
 800b740:	4613      	mov	r3, r2
 800b742:	70a3      	strb	r3, [r4, #2]
 800b744:	f106 0313 	add.w	r3, r6, #19
 800b748:	f240 1219 	movw	r2, #281	@ 0x119
 800b74c:	2100      	movs	r1, #0
 800b74e:	4618      	mov	r0, r3
 800b750:	f007 f986 	bl	8012a60 <memset>
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
 800b754:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b758:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b762:	4619      	mov	r1, r3
 800b764:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b768:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b772:	fb01 f303 	mul.w	r3, r1, r3
 800b776:	4413      	add	r3, r2
 800b778:	336c      	adds	r3, #108	@ 0x6c
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	2b30      	cmp	r3, #48	@ 0x30
 800b77e:	f040 80e9 	bne.w	800b954 <show_text_function_test+0x2b4>
 800b782:	466b      	mov	r3, sp
 800b784:	461d      	mov	r5, r3
        uint8_t failedCase[num_case]; 
 800b786:	f897 1155 	ldrb.w	r1, [r7, #341]	@ 0x155
 800b78a:	460b      	mov	r3, r1
 800b78c:	3b01      	subs	r3, #1
 800b78e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800b792:	b2cb      	uxtb	r3, r1
 800b794:	2200      	movs	r2, #0
 800b796:	469a      	mov	sl, r3
 800b798:	4693      	mov	fp, r2
 800b79a:	f04f 0200 	mov.w	r2, #0
 800b79e:	f04f 0300 	mov.w	r3, #0
 800b7a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7ae:	b2cb      	uxtb	r3, r1
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	4698      	mov	r8, r3
 800b7b4:	4691      	mov	r9, r2
 800b7b6:	f04f 0200 	mov.w	r2, #0
 800b7ba:	f04f 0300 	mov.w	r3, #0
 800b7be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b7c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b7c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	3307      	adds	r3, #7
 800b7ce:	08db      	lsrs	r3, r3, #3
 800b7d0:	00db      	lsls	r3, r3, #3
 800b7d2:	ebad 0d03 	sub.w	sp, sp, r3
 800b7d6:	466b      	mov	r3, sp
 800b7d8:	3300      	adds	r3, #0
 800b7da:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        uint8_t failedCount = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
        
        for (uint8_t i = 0; i < num_case; i++) {
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800b7ea:	e032      	b.n	800b852 <show_text_function_test+0x1b2>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
 800b7ec:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b7f0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b800:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b80a:	fb01 f303 	mul.w	r3, r1, r3
 800b80e:	4413      	add	r3, r2
 800b810:	3370      	adds	r3, #112	@ 0x70
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800b818:	4413      	add	r3, r2
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	2b30      	cmp	r3, #48	@ 0x30
 800b81e:	d113      	bne.n	800b848 <show_text_function_test+0x1a8>
                if (failedCount < num_case) { // Bounds check!
 800b820:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 800b824:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800b828:	429a      	cmp	r2, r3
 800b82a:	d20d      	bcs.n	800b848 <show_text_function_test+0x1a8>
                    failedCase[failedCount] = i + 1;
 800b82c:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800b830:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 800b834:	3201      	adds	r2, #1
 800b836:	b2d1      	uxtb	r1, r2
 800b838:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800b83c:	54d1      	strb	r1, [r2, r3]
                    failedCount++;
 800b83e:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800b842:	3301      	adds	r3, #1
 800b844:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
        for (uint8_t i = 0; i < num_case; i++) {
 800b848:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800b84c:	3301      	adds	r3, #1
 800b84e:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800b852:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 800b856:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d3c6      	bcc.n	800b7ec <show_text_function_test+0x14c>
                }
            }
        }

        if (failedCount == 0) {
 800b85e:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10f      	bne.n	800b886 <show_text_function_test+0x1e6>
            strncat(case_text, "Pass", sizeof(case_text) - strlen(case_text) - 1);
 800b866:	f107 0320 	add.w	r3, r7, #32
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7f4 fc7a 	bl	8000164 <strlen>
 800b870:	4603      	mov	r3, r0
 800b872:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800b876:	3301      	adds	r3, #1
 800b878:	f107 0020 	add.w	r0, r7, #32
 800b87c:	461a      	mov	r2, r3
 800b87e:	494a      	ldr	r1, [pc, #296]	@ (800b9a8 <show_text_function_test+0x308>)
 800b880:	f007 f905 	bl	8012a8e <strncat>
 800b884:	e064      	b.n	800b950 <show_text_function_test+0x2b0>
        } else {
            strncat(case_text, "Failed in ", sizeof(case_text) - strlen(case_text) - 1);
 800b886:	f107 0320 	add.w	r3, r7, #32
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7f4 fc6a 	bl	8000164 <strlen>
 800b890:	4603      	mov	r3, r0
 800b892:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800b896:	3301      	adds	r3, #1
 800b898:	f107 0020 	add.w	r0, r7, #32
 800b89c:	461a      	mov	r2, r3
 800b89e:	4943      	ldr	r1, [pc, #268]	@ (800b9ac <show_text_function_test+0x30c>)
 800b8a0:	f007 f8f5 	bl	8012a8e <strncat>
            
            for (int i = 0; i < failedCount; i++) {
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800b8aa:	e04b      	b.n	800b944 <show_text_function_test+0x2a4>
                char tempStr[20];
                snprintf(tempStr, sizeof(tempStr), "Case %d", failedCase[i]);
 800b8ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800b8b0:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b8b4:	4413      	add	r3, r2
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	f107 000c 	add.w	r0, r7, #12
 800b8bc:	4a3c      	ldr	r2, [pc, #240]	@ (800b9b0 <show_text_function_test+0x310>)
 800b8be:	2114      	movs	r1, #20
 800b8c0:	f006 ff8e 	bl	80127e0 <sniprintf>
                
                // Check if we have enough space before concatenating
                if (strlen(case_text) + strlen(tempStr) + 3 < sizeof(case_text)) {
 800b8c4:	f107 0320 	add.w	r3, r7, #32
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7f4 fc4b 	bl	8000164 <strlen>
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	f107 030c 	add.w	r3, r7, #12
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7f4 fc45 	bl	8000164 <strlen>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	4423      	add	r3, r4
 800b8de:	3303      	adds	r3, #3
 800b8e0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b8e4:	d226      	bcs.n	800b934 <show_text_function_test+0x294>
                    strncat(case_text, tempStr, sizeof(case_text) - strlen(case_text) - 1);
 800b8e6:	f107 0320 	add.w	r3, r7, #32
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7f4 fc3a 	bl	8000164 <strlen>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	f107 010c 	add.w	r1, r7, #12
 800b8fc:	f107 0020 	add.w	r0, r7, #32
 800b900:	461a      	mov	r2, r3
 800b902:	f007 f8c4 	bl	8012a8e <strncat>
                    if (i < failedCount - 1) {
 800b906:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800b90a:	3b01      	subs	r3, #1
 800b90c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800b910:	429a      	cmp	r2, r3
 800b912:	da12      	bge.n	800b93a <show_text_function_test+0x29a>
                        strncat(case_text, ", ", sizeof(case_text) - strlen(case_text) - 1);
 800b914:	f107 0320 	add.w	r3, r7, #32
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f4 fc23 	bl	8000164 <strlen>
 800b91e:	4603      	mov	r3, r0
 800b920:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800b924:	3301      	adds	r3, #1
 800b926:	f107 0020 	add.w	r0, r7, #32
 800b92a:	461a      	mov	r2, r3
 800b92c:	4921      	ldr	r1, [pc, #132]	@ (800b9b4 <show_text_function_test+0x314>)
 800b92e:	f007 f8ae 	bl	8012a8e <strncat>
 800b932:	e002      	b.n	800b93a <show_text_function_test+0x29a>
                    }
                } else {
                    /* out of space */
                    printf("over flow in show_text_function_test\n");
 800b934:	4820      	ldr	r0, [pc, #128]	@ (800b9b8 <show_text_function_test+0x318>)
 800b936:	f006 ff4b 	bl	80127d0 <puts>
            for (int i = 0; i < failedCount; i++) {
 800b93a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b93e:	3301      	adds	r3, #1
 800b940:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800b944:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800b948:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800b94c:	429a      	cmp	r2, r3
 800b94e:	dbad      	blt.n	800b8ac <show_text_function_test+0x20c>
 800b950:	46ad      	mov	sp, r5
 800b952:	e00e      	b.n	800b972 <show_text_function_test+0x2d2>
                }
            }
        }
    } else {
        strncat(case_text, "N/A", sizeof(case_text) - strlen(case_text) - 1);
 800b954:	f107 0320 	add.w	r3, r7, #32
 800b958:	4618      	mov	r0, r3
 800b95a:	f7f4 fc03 	bl	8000164 <strlen>
 800b95e:	4603      	mov	r3, r0
 800b960:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800b964:	3301      	adds	r3, #1
 800b966:	f107 0020 	add.w	r0, r7, #32
 800b96a:	461a      	mov	r2, r3
 800b96c:	4913      	ldr	r1, [pc, #76]	@ (800b9bc <show_text_function_test+0x31c>)
 800b96e:	f007 f88e 	bl	8012a8e <strncat>
    }
    
    DWIN_SetText((Dwin_t *)screen_obj, VP_Text_Test_Function, case_text, strlen(case_text));
 800b972:	f107 0320 	add.w	r3, r7, #32
 800b976:	4618      	mov	r0, r3
 800b978:	f7f4 fbf4 	bl	8000164 <strlen>
 800b97c:	4603      	mov	r3, r0
 800b97e:	b29b      	uxth	r3, r3
 800b980:	f107 0220 	add.w	r2, r7, #32
 800b984:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800b988:	f5a1 70ae 	sub.w	r0, r1, #348	@ 0x15c
 800b98c:	f44f 4117 	mov.w	r1, #38656	@ 0x9700
 800b990:	6800      	ldr	r0, [r0, #0]
 800b992:	f003 fba1 	bl	800f0d8 <DWIN_SetText>
}
 800b996:	bf00      	nop
 800b998:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 800b99c:	46bd      	mov	sp, r7
 800b99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a2:	bf00      	nop
 800b9a4:	08015554 	.word	0x08015554
 800b9a8:	0801550c 	.word	0x0801550c
 800b9ac:	08015514 	.word	0x08015514
 800b9b0:	08015520 	.word	0x08015520
 800b9b4:	080154f0 	.word	0x080154f0
 800b9b8:	08015528 	.word	0x08015528
 800b9bc:	08015550 	.word	0x08015550

0800b9c0 <get_text_result>:

/* create the string text result */
static void get_text_result(Screen_t *const screen_obj, char *result_line, uint8_t cur_num_ic) {
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	71fb      	strb	r3, [r7, #7]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b9dc:	fb01 f303 	mul.w	r3, r1, r3
 800b9e0:	4413      	add	r3, r2
 800b9e2:	334b      	adds	r3, #75	@ 0x4b
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	753b      	strb	r3, [r7, #20]
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800b9e8:	7d3a      	ldrb	r2, [r7, #20]
 800b9ea:	68f9      	ldr	r1, [r7, #12]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	4413      	add	r3, r2
 800b9f2:	011b      	lsls	r3, r3, #4
 800b9f4:	440b      	add	r3, r1
 800b9f6:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	74fb      	strb	r3, [r7, #19]
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800b9fe:	7d3a      	ldrb	r2, [r7, #20]
 800ba00:	68f9      	ldr	r1, [r7, #12]
 800ba02:	4613      	mov	r3, r2
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	4413      	add	r3, r2
 800ba08:	011b      	lsls	r3, r3, #4
 800ba0a:	440b      	add	r3, r1
 800ba0c:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	74bb      	strb	r3, [r7, #18]
    
    uint8_t has_errors = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < num_pin; i++) {
 800ba18:	2300      	movs	r3, #0
 800ba1a:	75bb      	strb	r3, [r7, #22]
 800ba1c:	e016      	b.n	800ba4c <get_text_result+0x8c>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] != '1') {
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ba24:	4619      	mov	r1, r3
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ba2c:	fb01 f303 	mul.w	r3, r1, r3
 800ba30:	4413      	add	r3, r2
 800ba32:	3368      	adds	r3, #104	@ 0x68
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	7dbb      	ldrb	r3, [r7, #22]
 800ba38:	4413      	add	r3, r2
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	2b31      	cmp	r3, #49	@ 0x31
 800ba3e:	d002      	beq.n	800ba46 <get_text_result+0x86>
            has_errors = 1;
 800ba40:	2301      	movs	r3, #1
 800ba42:	75fb      	strb	r3, [r7, #23]
            break; // Found error, no need to check more
 800ba44:	e006      	b.n	800ba54 <get_text_result+0x94>
    for (uint8_t i = 0; i < num_pin; i++) {
 800ba46:	7dbb      	ldrb	r3, [r7, #22]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	75bb      	strb	r3, [r7, #22]
 800ba4c:	7dba      	ldrb	r2, [r7, #22]
 800ba4e:	7cfb      	ldrb	r3, [r7, #19]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d3e4      	bcc.n	800ba1e <get_text_result+0x5e>
        }
    }

    if (!has_errors) {
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d11d      	bne.n	800ba96 <get_text_result+0xd6>
        for (uint8_t i = 0; i < num_case; i++) {
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	757b      	strb	r3, [r7, #21]
 800ba5e:	e016      	b.n	800ba8e <get_text_result+0xce>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ba66:	4619      	mov	r1, r3
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ba6e:	fb01 f303 	mul.w	r3, r1, r3
 800ba72:	4413      	add	r3, r2
 800ba74:	3370      	adds	r3, #112	@ 0x70
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	7d7b      	ldrb	r3, [r7, #21]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	2b30      	cmp	r3, #48	@ 0x30
 800ba80:	d102      	bne.n	800ba88 <get_text_result+0xc8>
                has_errors = 1;
 800ba82:	2301      	movs	r3, #1
 800ba84:	75fb      	strb	r3, [r7, #23]
                break; // Found error, no need to check more
 800ba86:	e006      	b.n	800ba96 <get_text_result+0xd6>
        for (uint8_t i = 0; i < num_case; i++) {
 800ba88:	7d7b      	ldrb	r3, [r7, #21]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	757b      	strb	r3, [r7, #21]
 800ba8e:	7d7a      	ldrb	r2, [r7, #21]
 800ba90:	7cbb      	ldrb	r3, [r7, #18]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d3e4      	bcc.n	800ba60 <get_text_result+0xa0>
            }
        }
    }

    if (has_errors) {
 800ba96:	7dfb      	ldrb	r3, [r7, #23]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d007      	beq.n	800baac <get_text_result+0xec>
        sprintf((char *)result_line, "IC%d: Self-test result: failed", cur_num_ic + 1);
 800ba9c:	79fb      	ldrb	r3, [r7, #7]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	461a      	mov	r2, r3
 800baa2:	4908      	ldr	r1, [pc, #32]	@ (800bac4 <get_text_result+0x104>)
 800baa4:	68b8      	ldr	r0, [r7, #8]
 800baa6:	f006 fed1 	bl	801284c <siprintf>
    } else {
        sprintf((char *)result_line, "IC%d: Self-test result: pass", cur_num_ic + 1);
    }    
}
 800baaa:	e006      	b.n	800baba <get_text_result+0xfa>
        sprintf((char *)result_line, "IC%d: Self-test result: pass", cur_num_ic + 1);
 800baac:	79fb      	ldrb	r3, [r7, #7]
 800baae:	3301      	adds	r3, #1
 800bab0:	461a      	mov	r2, r3
 800bab2:	4905      	ldr	r1, [pc, #20]	@ (800bac8 <get_text_result+0x108>)
 800bab4:	68b8      	ldr	r0, [r7, #8]
 800bab6:	f006 fec9 	bl	801284c <siprintf>
}
 800baba:	bf00      	nop
 800babc:	3718      	adds	r7, #24
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	08015568 	.word	0x08015568
 800bac8:	08015588 	.word	0x08015588

0800bacc <compelte_testing>:

/* using to store data when testing complete */
static void compelte_testing(Screen_t *const screen_obj) {
 800bacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bace:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 800bad2:	af0a      	add	r7, sp, #40	@ 0x28
 800bad4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bad8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800badc:	6018      	str	r0, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800bade:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bae2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800baec:	4619      	mov	r1, r3
 800baee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800baf2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bafc:	fb01 f303 	mul.w	r3, r1, r3
 800bb00:	4413      	add	r3, r2
 800bb02:	334b      	adds	r3, #75	@ 0x4b
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    uint8_t data_time[7];
    DS3231_Read_time(&ds3231,data_time);
 800bb0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb0e:	4619      	mov	r1, r3
 800bb10:	48b2      	ldr	r0, [pc, #712]	@ (800bddc <compelte_testing+0x310>)
 800bb12:	f003 f9cf 	bl	800eeb4 <DS3231_Read_time>

    /* Store data to sd card */
    char buffer[500] = {0};
 800bb16:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bb1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800bb24:	461a      	mov	r2, r3
 800bb26:	2100      	movs	r1, #0
 800bb28:	f006 ff9a 	bl	8012a60 <memset>
    // memset(buffer,0,300);
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800bb2c:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800bb30:	469e      	mov	lr, r3
 800bb32:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800bb36:	461d      	mov	r5, r3
 800bb38:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800bb3c:	461e      	mov	r6, r3
 800bb3e:	f897 320a 	ldrb.w	r3, [r7, #522]	@ 0x20a
 800bb42:	60bb      	str	r3, [r7, #8]
 800bb44:	f897 3209 	ldrb.w	r3, [r7, #521]	@ 0x209
 800bb48:	607b      	str	r3, [r7, #4]
 800bb4a:	f897 3208 	ldrb.w	r3, [r7, #520]	@ 0x208
 800bb4e:	603b      	str	r3, [r7, #0]
        ,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,screen_obj->Program_Testx[index_program].Name_IC,screen_obj->Program_Testx[index_program].num_IC,
 800bb50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bb54:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bb5e:	4619      	mov	r1, r3
 800bb60:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bb64:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 800bb68:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bb6c:	fb01 f303 	mul.w	r3, r1, r3
 800bb70:	3348      	adds	r3, #72	@ 0x48
 800bb72:	6812      	ldr	r2, [r2, #0]
 800bb74:	4413      	add	r3, r2
 800bb76:	1d59      	adds	r1, r3, #5
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800bb78:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 800bb7c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bb80:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bb84:	6818      	ldr	r0, [r3, #0]
 800bb86:	4613      	mov	r3, r2
 800bb88:	005b      	lsls	r3, r3, #1
 800bb8a:	4413      	add	r3, r2
 800bb8c:	011b      	lsls	r3, r3, #4
 800bb8e:	4403      	add	r3, r0
 800bb90:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800bb94:	6818      	ldr	r0, [r3, #0]
 800bb96:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 800bb9a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bb9e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bba2:	681c      	ldr	r4, [r3, #0]
 800bba4:	4613      	mov	r3, r2
 800bba6:	005b      	lsls	r3, r3, #1
 800bba8:	4413      	add	r3, r2
 800bbaa:	011b      	lsls	r3, r3, #4
 800bbac:	4423      	add	r3, r4
 800bbae:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800bbb2:	681b      	ldr	r3, [r3, #0]
        screen_obj->IC_Testerx[screen_obj->curr_device].result_text);
 800bbb4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800bbb8:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 800bbbc:	6812      	ldr	r2, [r2, #0]
 800bbbe:	f892 25b5 	ldrb.w	r2, [r2, #1461]	@ 0x5b5
 800bbc2:	4694      	mov	ip, r2
 800bbc4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800bbc8:	f5a2 7403 	sub.w	r4, r2, #524	@ 0x20c
 800bbcc:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 800bbd0:	fb02 f20c 	mul.w	r2, r2, ip
 800bbd4:	3278      	adds	r2, #120	@ 0x78
 800bbd6:	6824      	ldr	r4, [r4, #0]
 800bbd8:	4422      	add	r2, r4
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800bbda:	f107 0414 	add.w	r4, r7, #20
 800bbde:	9208      	str	r2, [sp, #32]
 800bbe0:	9307      	str	r3, [sp, #28]
 800bbe2:	9006      	str	r0, [sp, #24]
 800bbe4:	9105      	str	r1, [sp, #20]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	9204      	str	r2, [sp, #16]
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	9203      	str	r2, [sp, #12]
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	9302      	str	r3, [sp, #8]
 800bbf2:	9601      	str	r6, [sp, #4]
 800bbf4:	9500      	str	r5, [sp, #0]
 800bbf6:	4673      	mov	r3, lr
 800bbf8:	4a79      	ldr	r2, [pc, #484]	@ (800bde0 <compelte_testing+0x314>)
 800bbfa:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f006 fdee 	bl	80127e0 <sniprintf>
 800bc04:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
    // memset(data_store->String_logging,0,strlen(buffer)+1);
    // memcpy(data_store->String_logging,buffer,strlen(buffer));
    // memset(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,0,sizeof(screen_obj->IC_Testerx[screen_obj->curr_device].result_text));
    // OS_task_post_event(AO_task_sd, STORE_DATA_TEST, (uint8_t *)&data_store, sizeof(DataLogging_t));

    memset(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,0,sizeof(screen_obj->IC_Testerx[screen_obj->curr_device].result_text));
 800bc08:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bc0c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bc16:	4619      	mov	r1, r3
 800bc18:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bc1c:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 800bc20:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bc24:	fb01 f303 	mul.w	r3, r1, r3
 800bc28:	3378      	adds	r3, #120	@ 0x78
 800bc2a:	6812      	ldr	r2, [r2, #0]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bc32:	2100      	movs	r1, #0
 800bc34:	4618      	mov	r0, r3
 800bc36:	f006 ff13 	bl	8012a60 <memset>
    if (written >= sizeof(buffer)) {
 800bc3a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800bc3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800bc42:	d303      	bcc.n	800bc4c <compelte_testing+0x180>
        printf("ERROR: Buffer overflow in compelte_testing!\n");
 800bc44:	4867      	ldr	r0, [pc, #412]	@ (800bde4 <compelte_testing+0x318>)
 800bc46:	f006 fdc3 	bl	80127d0 <puts>
 800bc4a:	e0c2      	b.n	800bdd2 <compelte_testing+0x306>
        return;
    }

    /* Send data to esp32 */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800bc4c:	2008      	movs	r0, #8
 800bc4e:	f004 fecd 	bl	80109ec <malloc>
 800bc52:	4603      	mov	r3, r0
 800bc54:	461a      	mov	r2, r3
 800bc56:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bc5a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800bc5e:	601a      	str	r2, [r3, #0]
    data_send_esp32->data = (char *)malloc(strlen(buffer) + 2);
 800bc60:	f107 0314 	add.w	r3, r7, #20
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7f4 fa7d 	bl	8000164 <strlen>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	1c9a      	adds	r2, r3, #2
 800bc6e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bc72:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800bc76:	681c      	ldr	r4, [r3, #0]
 800bc78:	4610      	mov	r0, r2
 800bc7a:	f004 feb7 	bl	80109ec <malloc>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data,"h",1);
 800bc82:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bc86:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	4955      	ldr	r1, [pc, #340]	@ (800bde8 <compelte_testing+0x31c>)
 800bc92:	4618      	mov	r0, r3
 800bc94:	f007 f82d 	bl	8012cf2 <memcpy>
    memcpy(data_send_esp32->data+1,buffer,strlen(buffer));
 800bc98:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bc9c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	1c5c      	adds	r4, r3, #1
 800bca6:	f107 0314 	add.w	r3, r7, #20
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7f4 fa5a 	bl	8000164 <strlen>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	f107 0314 	add.w	r3, r7, #20
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f007 f81a 	bl	8012cf2 <memcpy>
    data_send_esp32->data[strlen(buffer)+1] = '\n';
 800bcbe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bcc2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681c      	ldr	r4, [r3, #0]
 800bcca:	f107 0314 	add.w	r3, r7, #20
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7f4 fa48 	bl	8000164 <strlen>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	4423      	add	r3, r4
 800bcda:	220a      	movs	r2, #10
 800bcdc:	701a      	strb	r2, [r3, #0]
    data_send_esp32->len = strlen(buffer) + 2;
 800bcde:	f107 0314 	add.w	r3, r7, #20
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7f4 fa3e 	bl	8000164 <strlen>
 800bce8:	4602      	mov	r2, r0
 800bcea:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bcee:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	3202      	adds	r2, #2
 800bcf6:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800bcf8:	4b3c      	ldr	r3, [pc, #240]	@ (800bdec <compelte_testing+0x320>)
 800bcfa:	6818      	ldr	r0, [r3, #0]
 800bcfc:	f107 0210 	add.w	r2, r7, #16
 800bd00:	2308      	movs	r3, #8
 800bd02:	2100      	movs	r1, #0
 800bd04:	f004 fc40 	bl	8010588 <OS_task_post_event>

    screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
 800bd08:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bd0c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bd16:	4619      	mov	r1, r3
 800bd18:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bd1c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bd26:	fb01 f303 	mul.w	r3, r1, r3
 800bd2a:	4413      	add	r3, r2
 800bd2c:	334a      	adds	r3, #74	@ 0x4a
 800bd2e:	2200      	movs	r2, #0
 800bd30:	701a      	strb	r2, [r3, #0]
    screen_obj->IC_Testerx[screen_obj->curr_device].state = false;
 800bd32:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bd36:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bd40:	4619      	mov	r1, r3
 800bd42:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bd46:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bd50:	fb01 f303 	mul.w	r3, r1, r3
 800bd54:	4413      	add	r3, r2
 800bd56:	334c      	adds	r3, #76	@ 0x4c
 800bd58:	2200      	movs	r2, #0
 800bd5a:	701a      	strb	r2, [r3, #0]
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800bd5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bd60:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bd70:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bd7a:	fb01 f303 	mul.w	r3, r1, r3
 800bd7e:	4413      	add	r3, r2
 800bd80:	334c      	adds	r3, #76	@ 0x4c
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	461a      	mov	r2, r3
 800bd86:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bd8a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bd8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800bd92:	6818      	ldr	r0, [r3, #0]
 800bd94:	f003 fa53 	bl	800f23e <DWIN_SetVariable_Icon>
    /* switch page */
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
 800bd98:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bd9c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bda6:	4619      	mov	r1, r3
 800bda8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bdac:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bdb6:	fb01 f303 	mul.w	r3, r1, r3
 800bdba:	4413      	add	r3, r2
 800bdbc:	3349      	adds	r3, #73	@ 0x49
 800bdbe:	7819      	ldrb	r1, [r3, #0]
 800bdc0:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 800bdc4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800bdc8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bdcc:	6818      	ldr	r0, [r3, #0]
 800bdce:	f000 fca5 	bl	800c71c <show_main_page>

    /* free the array don't using */

}
 800bdd2:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20001488 	.word	0x20001488
 800bde0:	080155a8 	.word	0x080155a8
 800bde4:	080155c8 	.word	0x080155c8
 800bde8:	080155f4 	.word	0x080155f4
 800bdec:	08016114 	.word	0x08016114

0800bdf0 <off_testing>:

static void off_testing(Screen_t *screen_obj) {
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
    compelte_testing(screen_obj);
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f7ff fe67 	bl	800bacc <compelte_testing>

    /* free array using in have new data test */
    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800be04:	4619      	mov	r1, r3
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800be0c:	fb01 f303 	mul.w	r3, r1, r3
 800be10:	4413      	add	r3, r2
 800be12:	3374      	adds	r3, #116	@ 0x74
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00e      	beq.n	800be38 <off_testing+0x48>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800be20:	4619      	mov	r1, r3
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800be28:	fb01 f303 	mul.w	r3, r1, r3
 800be2c:	4413      	add	r3, r2
 800be2e:	3374      	adds	r3, #116	@ 0x74
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4618      	mov	r0, r3
 800be34:	f004 fde2 	bl	80109fc <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800be3e:	4619      	mov	r1, r3
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800be46:	fb01 f303 	mul.w	r3, r1, r3
 800be4a:	4413      	add	r3, r2
 800be4c:	335c      	adds	r3, #92	@ 0x5c
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00e      	beq.n	800be72 <off_testing+0x82>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800be5a:	4619      	mov	r1, r3
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800be62:	fb01 f303 	mul.w	r3, r1, r3
 800be66:	4413      	add	r3, r2
 800be68:	335c      	adds	r3, #92	@ 0x5c
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f004 fdc5 	bl	80109fc <free>
    }
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800be78:	4619      	mov	r1, r3
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800be80:	fb01 f303 	mul.w	r3, r1, r3
 800be84:	4413      	add	r3, r2
 800be86:	3364      	adds	r3, #100	@ 0x64
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00e      	beq.n	800beac <off_testing+0xbc>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800be94:	4619      	mov	r1, r3
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800be9c:	fb01 f303 	mul.w	r3, r1, r3
 800bea0:	4413      	add	r3, r2
 800bea2:	3364      	adds	r3, #100	@ 0x64
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f004 fda8 	bl	80109fc <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800beb2:	4619      	mov	r1, r3
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800beba:	fb01 f303 	mul.w	r3, r1, r3
 800bebe:	4413      	add	r3, r2
 800bec0:	3368      	adds	r3, #104	@ 0x68
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00e      	beq.n	800bee6 <off_testing+0xf6>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bece:	4619      	mov	r1, r3
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bed6:	fb01 f303 	mul.w	r3, r1, r3
 800beda:	4413      	add	r3, r2
 800bedc:	3368      	adds	r3, #104	@ 0x68
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f004 fd8b 	bl	80109fc <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800beec:	4619      	mov	r1, r3
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bef4:	fb01 f303 	mul.w	r3, r1, r3
 800bef8:	4413      	add	r3, r2
 800befa:	3370      	adds	r3, #112	@ 0x70
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00e      	beq.n	800bf20 <off_testing+0x130>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bf08:	4619      	mov	r1, r3
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bf10:	fb01 f303 	mul.w	r3, r1, r3
 800bf14:	4413      	add	r3, r2
 800bf16:	3370      	adds	r3, #112	@ 0x70
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f004 fd6e 	bl	80109fc <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bf26:	4619      	mov	r1, r3
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bf2e:	fb01 f303 	mul.w	r3, r1, r3
 800bf32:	4413      	add	r3, r2
 800bf34:	3360      	adds	r3, #96	@ 0x60
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00e      	beq.n	800bf5a <off_testing+0x16a>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bf42:	4619      	mov	r1, r3
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bf4a:	fb01 f303 	mul.w	r3, r1, r3
 800bf4e:	4413      	add	r3, r2
 800bf50:	3360      	adds	r3, #96	@ 0x60
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f004 fd51 	bl	80109fc <free>
    }
}
 800bf5a:	bf00      	nop
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
	...

0800bf64 <show_pulse>:

static void show_pulse(Screen_t *screen_obj, uint8_t curr_case) {
 800bf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf68:	b0d4      	sub	sp, #336	@ 0x150
 800bf6a:	af04      	add	r7, sp, #16
 800bf6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bf74:	6018      	str	r0, [r3, #0]
 800bf76:	460a      	mov	r2, r1
 800bf78:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf7c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800bf80:	701a      	strb	r2, [r3, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 800bf82:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf86:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bf90:	4619      	mov	r1, r3
 800bf92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bf96:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bfa0:	fb01 f303 	mul.w	r3, r1, r3
 800bfa4:	4413      	add	r3, r2
 800bfa6:	334b      	adds	r3, #75	@ 0x4b
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bfb0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	440b      	add	r3, r1
 800bfbc:	011b      	lsls	r3, r3, #4
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800bfca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bfce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bfd8:	4619      	mov	r1, r3
 800bfda:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bfde:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bfe8:	fb01 f303 	mul.w	r3, r1, r3
 800bfec:	4413      	add	r3, r2
 800bfee:	334b      	adds	r3, #75	@ 0x4b
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 800bff6:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800bffa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bffe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c002:	6819      	ldr	r1, [r3, #0]
 800c004:	4613      	mov	r3, r2
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	4413      	add	r3, r2
 800c00a:	011b      	lsls	r3, r3, #4
 800c00c:	440b      	add	r3, r1
 800c00e:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800c018:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c01c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c026:	4619      	mov	r1, r3
 800c028:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c02c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c036:	fb01 f303 	mul.w	r3, r1, r3
 800c03a:	4413      	add	r3, r2
 800c03c:	334b      	adds	r3, #75	@ 0x4b
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
    
    char ShowCase_String[15];
    uint8_t index_data;
    uint16_t vp_pulse = VP_Pulse_graph;
 800c044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c048:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    uint8_t pins_to_show = num_pin - 2; 
 800c04c:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 800c050:	3b02      	subs	r3, #2
 800c052:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
    uint8_t skip_index1 = (num_pin / 2) - 1; // skip index
 800c056:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 800c05a:	085b      	lsrs	r3, r3, #1
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	3b01      	subs	r3, #1
 800c060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    uint8_t skip_index2 = num_pin - 1;       // skip index
 800c064:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 800c068:	3b01      	subs	r3, #1
 800c06a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    uint16_t Address_VP = VP_Text_Pin_Pulse;
 800c06e:	f249 7350 	movw	r3, #38736	@ 0x9750
 800c072:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    uint16_t vp_vertical = VP_vertical_line;
 800c076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c07a:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    uint16_t vp_icon_clock = VP_ICON_CLOCK;
 800c07e:	f44f 4386 	mov.w	r3, #17152	@ 0x4300
 800c082:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138

    char *data_copy = malloc(screen_obj->Program_Testx[index_program].data_pin_len + 1);
 800c086:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800c08a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c08e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c092:	6819      	ldr	r1, [r3, #0]
 800c094:	4613      	mov	r3, r2
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	4413      	add	r3, r2
 800c09a:	011b      	lsls	r3, r3, #4
 800c09c:	440b      	add	r3, r1
 800c09e:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f004 fca0 	bl	80109ec <malloc>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    memcpy(data_copy, screen_obj->Program_Testx[index_program].data_pin, screen_obj->Program_Testx[index_program].data_pin_len);
 800c0b2:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800c0b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c0ba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c0be:	6819      	ldr	r1, [r3, #0]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	4413      	add	r3, r2
 800c0c6:	011b      	lsls	r3, r3, #4
 800c0c8:	440b      	add	r3, r1
 800c0ca:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 800c0ce:	6818      	ldr	r0, [r3, #0]
 800c0d0:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800c0d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c0d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c0dc:	6819      	ldr	r1, [r3, #0]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	005b      	lsls	r3, r3, #1
 800c0e2:	4413      	add	r3, r2
 800c0e4:	011b      	lsls	r3, r3, #4
 800c0e6:	440b      	add	r3, r1
 800c0e8:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	4601      	mov	r1, r0
 800c0f2:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800c0f6:	f006 fdfc 	bl	8012cf2 <memcpy>
    data_copy[screen_obj->Program_Testx[index_program].data_pin_len] = '\0'; 
 800c0fa:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800c0fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c102:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c106:	6819      	ldr	r1, [r3, #0]
 800c108:	4613      	mov	r3, r2
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	4413      	add	r3, r2
 800c10e:	011b      	lsls	r3, r3, #4
 800c110:	440b      	add	r3, r1
 800c112:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	461a      	mov	r2, r3
 800c11a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c11e:	4413      	add	r3, r2
 800c120:	2200      	movs	r2, #0
 800c122:	701a      	strb	r2, [r3, #0]

    char pin_names[18][10];
    uint8_t total_pins = 0;
 800c124:	2300      	movs	r3, #0
 800c126:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    char *temp_buf = strtok(data_copy, "\n");
 800c12a:	49c1      	ldr	r1, [pc, #772]	@ (800c430 <show_pulse+0x4cc>)
 800c12c:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800c130:	f006 fce6 	bl	8012b00 <strtok>
 800c134:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

    while (temp_buf != NULL && total_pins < 18) {
 800c138:	e018      	b.n	800c16c <show_pulse+0x208>
        strcpy(pin_names[total_pins], temp_buf);
 800c13a:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800c13e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800c142:	4613      	mov	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4413      	add	r3, r2
 800c148:	005b      	lsls	r3, r3, #1
 800c14a:	440b      	add	r3, r1
 800c14c:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 800c150:	4618      	mov	r0, r3
 800c152:	f006 fdb8 	bl	8012cc6 <strcpy>
        total_pins++;
 800c156:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800c15a:	3301      	adds	r3, #1
 800c15c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        temp_buf = strtok(NULL, "\n");
 800c160:	49b3      	ldr	r1, [pc, #716]	@ (800c430 <show_pulse+0x4cc>)
 800c162:	2000      	movs	r0, #0
 800c164:	f006 fccc 	bl	8012b00 <strtok>
 800c168:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    while (temp_buf != NULL && total_pins < 18) {
 800c16c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c170:	2b00      	cmp	r3, #0
 800c172:	d003      	beq.n	800c17c <show_pulse+0x218>
 800c174:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800c178:	2b11      	cmp	r3, #17
 800c17a:	d9de      	bls.n	800c13a <show_pulse+0x1d6>
    }

    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1, 
 800c17c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c180:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c18a:	4619      	mov	r1, r3
 800c18c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c190:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c19a:	fb01 f303 	mul.w	r3, r1, r3
 800c19e:	4413      	add	r3, r2
 800c1a0:	3348      	adds	r3, #72	@ 0x48
 800c1a2:	781b      	ldrb	r3, [r3, #0]
    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
 800c1a4:	1c59      	adds	r1, r3, #1
            (pins_to_show + 6) / 7); // Calculate total cases needed
 800c1a6:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 800c1aa:	3306      	adds	r3, #6
    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
 800c1ac:	4aa1      	ldr	r2, [pc, #644]	@ (800c434 <show_pulse+0x4d0>)
 800c1ae:	fb82 0203 	smull	r0, r2, r2, r3
 800c1b2:	441a      	add	r2, r3
 800c1b4:	1092      	asrs	r2, r2, #2
 800c1b6:	17db      	asrs	r3, r3, #31
 800c1b8:	1ad3      	subs	r3, r2, r3
 800c1ba:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4a9d      	ldr	r2, [pc, #628]	@ (800c438 <show_pulse+0x4d4>)
 800c1c4:	210f      	movs	r1, #15
 800c1c6:	f006 fb0b 	bl	80127e0 <sniprintf>

    DWIN_SetText((Dwin_t *)screen_obj, VP_Show_CurrentCase, ShowCase_String, strlen(ShowCase_String));
 800c1ca:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7f3 ffc8 	bl	8000164 <strlen>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 800c1dc:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800c1e0:	f5a1 709e 	sub.w	r0, r1, #316	@ 0x13c
 800c1e4:	f249 3180 	movw	r1, #37760	@ 0x9380
 800c1e8:	6800      	ldr	r0, [r0, #0]
 800c1ea:	f002 ff75 	bl	800f0d8 <DWIN_SetText>

    /* TURN OFF ALL CLOCK ICON */
    uint8_t clock_buf[49] = {0};
 800c1ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c1f2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	2331      	movs	r3, #49	@ 0x31
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	f006 fc2f 	bl	8012a60 <memset>
    memset(clock_buf,ICON_CLOCK_NONE,sizeof(clock_buf));
 800c202:	f107 031c 	add.w	r3, r7, #28
 800c206:	2231      	movs	r2, #49	@ 0x31
 800c208:	2102      	movs	r1, #2
 800c20a:	4618      	mov	r0, r3
 800c20c:	f006 fc28 	bl	8012a60 <memset>
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,clock_buf,49);
 800c210:	f107 021c 	add.w	r2, r7, #28
 800c214:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800c218:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c21c:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c220:	2331      	movs	r3, #49	@ 0x31
 800c222:	6800      	ldr	r0, [r0, #0]
 800c224:	f003 f838 	bl	800f298 <DWIN_SetArray_Icon>

    for (uint8_t i = 0; i < 7; i++) {
 800c228:	2300      	movs	r3, #0
 800c22a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 800c22e:	e1be      	b.n	800c5ae <show_pulse+0x64a>
        uint8_t display_pin = (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * 7) + i;
 800c230:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c234:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c23e:	4619      	mov	r1, r3
 800c240:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c244:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c24e:	fb01 f303 	mul.w	r3, r1, r3
 800c252:	4413      	add	r3, r2
 800c254:	3348      	adds	r3, #72	@ 0x48
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	461a      	mov	r2, r3
 800c25a:	00d2      	lsls	r2, r2, #3
 800c25c:	1ad3      	subs	r3, r2, r3
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c264:	4413      	add	r3, r2
 800c266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        
        if (display_pin < pins_to_show) {
 800c26a:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800c26e:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 800c272:	429a      	cmp	r2, r3
 800c274:	f080 8136 	bcs.w	800c4e4 <show_pulse+0x580>
            uint8_t actual_pin_index = display_pin;
 800c278:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c27c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            
            // Adjust for skipped indices
            if (actual_pin_index >= skip_index1) {
 800c280:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800c284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c288:	429a      	cmp	r2, r3
 800c28a:	d304      	bcc.n	800c296 <show_pulse+0x332>
                actual_pin_index++; // Skip VCC
 800c28c:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800c290:	3301      	adds	r3, #1
 800c292:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            }
            if (actual_pin_index >= skip_index2) {
 800c296:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800c29a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d304      	bcc.n	800c2ac <show_pulse+0x348>
                actual_pin_index++; // Skip GND
 800c2a2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            }
            
            // Calculate data index
            index_data = num_case * actual_pin_index;
 800c2ac:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c2b0:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800c2b4:	fb02 f303 	mul.w	r3, r2, r3
 800c2b8:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
            
            // Create the line with actual data
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data] == 3) { // UP CLOCK
 800c2bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c2c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c2d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c2da:	fb01 f303 	mul.w	r3, r1, r3
 800c2de:	4413      	add	r3, r2
 800c2e0:	3374      	adds	r3, #116	@ 0x74
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800c2e8:	4413      	add	r3, r2
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b03      	cmp	r3, #3
 800c2ee:	d142      	bne.n	800c376 <show_pulse+0x412>
                /* don't show pulse graph */
                uint8_t up_clock[7] = {0};
 800c2f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c2f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	6013      	str	r3, [r2, #0]
 800c2fe:	f8c2 3003 	str.w	r3, [r2, #3]
                memset(up_clock,ICON_UP_CLOCK,sizeof(up_clock));
 800c302:	f107 0314 	add.w	r3, r7, #20
 800c306:	2207      	movs	r2, #7
 800c308:	2101      	movs	r1, #1
 800c30a:	4618      	mov	r0, r3
 800c30c:	f006 fba8 	bl	8012a60 <memset>
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c310:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c314:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c31e:	4619      	mov	r1, r3
 800c320:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c324:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c32e:	fb01 f303 	mul.w	r3, r1, r3
 800c332:	4413      	add	r3, r2
 800c334:	3374      	adds	r3, #116	@ 0x74
 800c336:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c338:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c33c:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c33e:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800c342:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c346:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c34a:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800c34e:	9201      	str	r2, [sp, #4]
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	2300      	movs	r3, #0
 800c354:	2200      	movs	r2, #0
 800c356:	6800      	ldr	r0, [r0, #0]
 800c358:	f003 f81a 	bl	800f390 <DWIN_Create_Basic_line>
                                num_case);
                DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,up_clock,sizeof(up_clock));
 800c35c:	f107 0214 	add.w	r2, r7, #20
 800c360:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800c364:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c368:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c36c:	2307      	movs	r3, #7
 800c36e:	6800      	ldr	r0, [r0, #0]
 800c370:	f002 ff92 	bl	800f298 <DWIN_SetArray_Icon>
 800c374:	e094      	b.n	800c4a0 <show_pulse+0x53c>
            } else if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data] == 4) {
 800c376:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c37a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c384:	4619      	mov	r1, r3
 800c386:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c38a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c394:	fb01 f303 	mul.w	r3, r1, r3
 800c398:	4413      	add	r3, r2
 800c39a:	3374      	adds	r3, #116	@ 0x74
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800c3a2:	4413      	add	r3, r2
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	2b04      	cmp	r3, #4
 800c3a8:	d148      	bne.n	800c43c <show_pulse+0x4d8>
                uint8_t down_clock[7] = {0};
 800c3aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c3ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	6013      	str	r3, [r2, #0]
 800c3b8:	f8c2 3003 	str.w	r3, [r2, #3]
                memset(down_clock,ICON_DOWN_CLOCK,sizeof(down_clock));
 800c3bc:	f107 030c 	add.w	r3, r7, #12
 800c3c0:	2207      	movs	r2, #7
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f006 fb4b 	bl	8012a60 <memset>
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c3ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c3ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c3d8:	4619      	mov	r1, r3
 800c3da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c3de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c3e8:	fb01 f303 	mul.w	r3, r1, r3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	3374      	adds	r3, #116	@ 0x74
 800c3f0:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c3f2:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c3f6:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c3f8:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800c3fc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c400:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c404:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800c408:	9201      	str	r2, [sp, #4]
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	2300      	movs	r3, #0
 800c40e:	2200      	movs	r2, #0
 800c410:	6800      	ldr	r0, [r0, #0]
 800c412:	f002 ffbd 	bl	800f390 <DWIN_Create_Basic_line>
                                num_case);
                DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,down_clock,sizeof(down_clock));
 800c416:	f107 020c 	add.w	r2, r7, #12
 800c41a:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800c41e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c422:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c426:	2307      	movs	r3, #7
 800c428:	6800      	ldr	r0, [r0, #0]
 800c42a:	f002 ff35 	bl	800f298 <DWIN_SetArray_Icon>
 800c42e:	e037      	b.n	800c4a0 <show_pulse+0x53c>
 800c430:	080154c0 	.word	0x080154c0
 800c434:	92492493 	.word	0x92492493
 800c438:	08015390 	.word	0x08015390
            } else {
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800c43c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c440:	b29b      	uxth	r3, r3
 800c442:	461a      	mov	r2, r3
 800c444:	0052      	lsls	r2, r2, #1
 800c446:	4413      	add	r3, r2
 800c448:	461a      	mov	r2, r3
 800c44a:	0112      	lsls	r2, r2, #4
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	b29b      	uxth	r3, r3
 800c450:	3390      	adds	r3, #144	@ 0x90
 800c452:	b29e      	uxth	r6, r3
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c454:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c458:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c462:	4619      	mov	r1, r3
 800c464:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c468:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c472:	fb01 f303 	mul.w	r3, r1, r3
 800c476:	4413      	add	r3, r2
 800c478:	3374      	adds	r3, #116	@ 0x74
 800c47a:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800c47c:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c480:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800c482:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800c486:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c48a:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c48e:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800c492:	9201      	str	r2, [sp, #4]
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	4633      	mov	r3, r6
 800c498:	2264      	movs	r2, #100	@ 0x64
 800c49a:	6800      	ldr	r0, [r0, #0]
 800c49c:	f002 ff78 	bl	800f390 <DWIN_Create_Basic_line>
                                num_case);
            }            
            // Set pin name
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
 800c4a0:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800c4a4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	18ce      	adds	r6, r1, r3
                        strlen(pin_names[actual_pin_index]));
 800c4b2:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800c4b6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	4413      	add	r3, r2
 800c4c0:	005b      	lsls	r3, r3, #1
 800c4c2:	440b      	add	r3, r1
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7f3 fe4d 	bl	8000164 <strlen>
 800c4ca:	4603      	mov	r3, r0
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 800c4d2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c4d6:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c4da:	4632      	mov	r2, r6
 800c4dc:	6800      	ldr	r0, [r0, #0]
 800c4de:	f002 fdfb 	bl	800f0d8 <DWIN_SetText>
 800c4e2:	e04f      	b.n	800c584 <show_pulse+0x620>
            
        } else { /* don't using this */
 800c4e4:	466b      	mov	r3, sp
 800c4e6:	469a      	mov	sl, r3
            uint8_t low_buf[12 - num_case];
 800c4e8:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c4ec:	f1c3 060c 	rsb	r6, r3, #12
 800c4f0:	1e73      	subs	r3, r6, #1
 800c4f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c4f6:	4632      	mov	r2, r6
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4614      	mov	r4, r2
 800c4fc:	461d      	mov	r5, r3
 800c4fe:	f04f 0200 	mov.w	r2, #0
 800c502:	f04f 0300 	mov.w	r3, #0
 800c506:	00eb      	lsls	r3, r5, #3
 800c508:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c50c:	00e2      	lsls	r2, r4, #3
 800c50e:	4632      	mov	r2, r6
 800c510:	2300      	movs	r3, #0
 800c512:	4690      	mov	r8, r2
 800c514:	4699      	mov	r9, r3
 800c516:	f04f 0200 	mov.w	r2, #0
 800c51a:	f04f 0300 	mov.w	r3, #0
 800c51e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c52a:	4633      	mov	r3, r6
 800c52c:	3307      	adds	r3, #7
 800c52e:	08db      	lsrs	r3, r3, #3
 800c530:	00db      	lsls	r3, r3, #3
 800c532:	ebad 0d03 	sub.w	sp, sp, r3
 800c536:	ab04      	add	r3, sp, #16
 800c538:	3300      	adds	r3, #0
 800c53a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            memset(low_buf,0,sizeof(low_buf));
 800c53e:	4633      	mov	r3, r6
 800c540:	461a      	mov	r2, r3
 800c542:	2100      	movs	r1, #0
 800c544:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800c548:	f006 fa8a 	bl	8012a60 <memset>
            DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c54c:	b2f3      	uxtb	r3, r6
 800c54e:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800c552:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c556:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c55a:	9301      	str	r3, [sp, #4]
 800c55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	2300      	movs	r3, #0
 800c564:	2200      	movs	r2, #0
 800c566:	6800      	ldr	r0, [r0, #0]
 800c568:	f002 ff12 	bl	800f390 <DWIN_Create_Basic_line>
                                low_buf, 
                                sizeof(low_buf));
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, " ", 1);
 800c56c:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 800c570:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c574:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c578:	2301      	movs	r3, #1
 800c57a:	4a67      	ldr	r2, [pc, #412]	@ (800c718 <show_pulse+0x7b4>)
 800c57c:	6800      	ldr	r0, [r0, #0]
 800c57e:	f002 fdab 	bl	800f0d8 <DWIN_SetText>
 800c582:	46d5      	mov	sp, sl
        }
        
        vp_pulse += 0x200;
 800c584:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800c588:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c58c:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        
        Address_VP += 0x10;
 800c590:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800c594:	3310      	adds	r3, #16
 800c596:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
        vp_icon_clock += 0x07;
 800c59a:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800c59e:	3307      	adds	r3, #7
 800c5a0:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    for (uint8_t i = 0; i < 7; i++) {
 800c5a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 800c5ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c5b2:	2b06      	cmp	r3, #6
 800c5b4:	f67f ae3c 	bls.w	800c230 <show_pulse+0x2cc>
    }

    for (uint8_t i = 0; i < 14; i++) {
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 800c5be:	e09c      	b.n	800c6fa <show_pulse+0x796>
        if (i < num_case) {
 800c5c0:	f897 212d 	ldrb.w	r2, [r7, #301]	@ 0x12d
 800c5c4:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d279      	bcs.n	800c6c0 <show_pulse+0x75c>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '1') {
 800c5cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c5d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c5da:	4619      	mov	r1, r3
 800c5dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c5e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c5ea:	fb01 f303 	mul.w	r3, r1, r3
 800c5ee:	4413      	add	r3, r2
 800c5f0:	3370      	adds	r3, #112	@ 0x70
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c5f8:	4413      	add	r3, r2
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	2b31      	cmp	r3, #49	@ 0x31
 800c5fe:	d12f      	bne.n	800c660 <show_pulse+0x6fc>
                DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,100 + (50 * i),110,100 + (50 * i),415,0x01ED);
 800c600:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c604:	b29b      	uxth	r3, r3
 800c606:	461a      	mov	r2, r3
 800c608:	0092      	lsls	r2, r2, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	461a      	mov	r2, r3
 800c60e:	0091      	lsls	r1, r2, #2
 800c610:	461a      	mov	r2, r3
 800c612:	460b      	mov	r3, r1
 800c614:	4413      	add	r3, r2
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	b29b      	uxth	r3, r3
 800c61a:	3364      	adds	r3, #100	@ 0x64
 800c61c:	b29a      	uxth	r2, r3
 800c61e:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c622:	b29b      	uxth	r3, r3
 800c624:	4619      	mov	r1, r3
 800c626:	0089      	lsls	r1, r1, #2
 800c628:	440b      	add	r3, r1
 800c62a:	4619      	mov	r1, r3
 800c62c:	0088      	lsls	r0, r1, #2
 800c62e:	4619      	mov	r1, r3
 800c630:	4603      	mov	r3, r0
 800c632:	440b      	add	r3, r1
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	b29b      	uxth	r3, r3
 800c638:	3364      	adds	r3, #100	@ 0x64
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 800c640:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c644:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 800c648:	f240 14ed 	movw	r4, #493	@ 0x1ed
 800c64c:	9402      	str	r4, [sp, #8]
 800c64e:	f240 149f 	movw	r4, #415	@ 0x19f
 800c652:	9401      	str	r4, [sp, #4]
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	236e      	movs	r3, #110	@ 0x6e
 800c658:	6800      	ldr	r0, [r0, #0]
 800c65a:	f003 f8a7 	bl	800f7ac <DWIN_Create_Single_line>
 800c65e:	e041      	b.n	800c6e4 <show_pulse+0x780>
            } else {
                DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,100 + (50 * i),110,100 + (50 * i),415,0xF800);
 800c660:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c664:	b29b      	uxth	r3, r3
 800c666:	461a      	mov	r2, r3
 800c668:	0092      	lsls	r2, r2, #2
 800c66a:	4413      	add	r3, r2
 800c66c:	461a      	mov	r2, r3
 800c66e:	0091      	lsls	r1, r2, #2
 800c670:	461a      	mov	r2, r3
 800c672:	460b      	mov	r3, r1
 800c674:	4413      	add	r3, r2
 800c676:	005b      	lsls	r3, r3, #1
 800c678:	b29b      	uxth	r3, r3
 800c67a:	3364      	adds	r3, #100	@ 0x64
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c682:	b29b      	uxth	r3, r3
 800c684:	4619      	mov	r1, r3
 800c686:	0089      	lsls	r1, r1, #2
 800c688:	440b      	add	r3, r1
 800c68a:	4619      	mov	r1, r3
 800c68c:	0088      	lsls	r0, r1, #2
 800c68e:	4619      	mov	r1, r3
 800c690:	4603      	mov	r3, r0
 800c692:	440b      	add	r3, r1
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	b29b      	uxth	r3, r3
 800c698:	3364      	adds	r3, #100	@ 0x64
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 800c6a0:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c6a4:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 800c6a8:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 800c6ac:	9402      	str	r4, [sp, #8]
 800c6ae:	f240 149f 	movw	r4, #415	@ 0x19f
 800c6b2:	9401      	str	r4, [sp, #4]
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	236e      	movs	r3, #110	@ 0x6e
 800c6b8:	6800      	ldr	r0, [r0, #0]
 800c6ba:	f003 f877 	bl	800f7ac <DWIN_Create_Single_line>
 800c6be:	e011      	b.n	800c6e4 <show_pulse+0x780>
            }
        } else {
            DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,0,0,0,0,0xF800);
 800c6c0:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 800c6c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c6c8:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c6cc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800c6d0:	9302      	str	r3, [sp, #8]
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	2300      	movs	r3, #0
 800c6dc:	2200      	movs	r2, #0
 800c6de:	6800      	ldr	r0, [r0, #0]
 800c6e0:	f003 f864 	bl	800f7ac <DWIN_Create_Single_line>
        }
        vp_vertical += 0x200;
 800c6e4:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800c6e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c6ec:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    for (uint8_t i = 0; i < 14; i++) {
 800c6f0:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 800c6fa:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c6fe:	2b0d      	cmp	r3, #13
 800c700:	f67f af5e 	bls.w	800c5c0 <show_pulse+0x65c>
    }

    free(data_copy);
 800c704:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800c708:	f004 f978 	bl	80109fc <free>
}
 800c70c:	bf00      	nop
 800c70e:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800c712:	46bd      	mov	sp, r7
 800c714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c718:	080155f8 	.word	0x080155f8

0800c71c <show_main_page>:

void show_main_page(Screen_t *const screen_obj, uint8_t PageMain, uint8_t curr_program) {
 800c71c:	b590      	push	{r4, r7, lr}
 800c71e:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800c722:	af02      	add	r7, sp, #8
 800c724:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c728:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c72c:	6018      	str	r0, [r3, #0]
 800c72e:	4608      	mov	r0, r1
 800c730:	4611      	mov	r1, r2
 800c732:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c736:	f2a3 233d 	subw	r3, r3, #573	@ 0x23d
 800c73a:	4602      	mov	r2, r0
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c742:	f2a3 233e 	subw	r3, r3, #574	@ 0x23e
 800c746:	460a      	mov	r2, r1
 800c748:	701a      	strb	r2, [r3, #0]
    
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800c74a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c74e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c758:	4619      	mov	r1, r3
 800c75a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c75e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c768:	fb01 f303 	mul.w	r3, r1, r3
 800c76c:	4413      	add	r3, r2
 800c76e:	334b      	adds	r3, #75	@ 0x4b
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800c776:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800c77a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c77e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c782:	6819      	ldr	r1, [r3, #0]
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	011b      	lsls	r3, r3, #4
 800c78c:	440b      	add	r3, r1
 800c78e:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800c798:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800c79c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c7a0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c7a4:	6819      	ldr	r1, [r3, #0]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	4413      	add	r3, r2
 800c7ac:	011b      	lsls	r3, r3, #4
 800c7ae:	440b      	add	r3, r1
 800c7b0:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
    switch (PageMain) {
 800c7ba:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c7be:	f2a3 233d 	subw	r3, r3, #573	@ 0x23d
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	3b64      	subs	r3, #100	@ 0x64
 800c7c6:	2b03      	cmp	r3, #3
 800c7c8:	f200 839c 	bhi.w	800cf04 <show_main_page+0x7e8>
 800c7cc:	a201      	add	r2, pc, #4	@ (adr r2, 800c7d4 <show_main_page+0xb8>)
 800c7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d2:	bf00      	nop
 800c7d4:	0800c8bb 	.word	0x0800c8bb
 800c7d8:	0800c7e5 	.word	0x0800c7e5
 800c7dc:	0800c9a7 	.word	0x0800c9a7
 800c7e0:	0800cc95 	.word	0x0800cc95
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 800c7e4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c7e8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c7f8:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800c7fc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c800:	fb01 f303 	mul.w	r3, r1, r3
 800c804:	3348      	adds	r3, #72	@ 0x48
 800c806:	6812      	ldr	r2, [r2, #0]
 800c808:	4413      	add	r3, r2
 800c80a:	1d5c      	adds	r4, r3, #5
 800c80c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c810:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c81a:	4619      	mov	r1, r3
 800c81c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c820:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800c824:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c828:	fb01 f303 	mul.w	r3, r1, r3
 800c82c:	3348      	adds	r3, #72	@ 0x48
 800c82e:	6812      	ldr	r2, [r2, #0]
 800c830:	4413      	add	r3, r2
 800c832:	3305      	adds	r3, #5
 800c834:	4618      	mov	r0, r3
 800c836:	f7f3 fc95 	bl	8000164 <strlen>
 800c83a:	4603      	mov	r3, r0
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800c842:	f5a2 700f 	sub.w	r0, r2, #572	@ 0x23c
 800c846:	4622      	mov	r2, r4
 800c848:	f249 3150 	movw	r1, #37712	@ 0x9350
 800c84c:	6800      	ldr	r0, [r0, #0]
 800c84e:	f002 fc43 	bl	800f0d8 <DWIN_SetText>
            DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800c852:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c856:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c860:	4619      	mov	r1, r3
 800c862:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c866:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c870:	fb01 f303 	mul.w	r3, r1, r3
 800c874:	4413      	add	r3, r2
 800c876:	334c      	adds	r3, #76	@ 0x4c
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c880:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c884:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c888:	6818      	ldr	r0, [r3, #0]
 800c88a:	f002 fcd8 	bl	800f23e <DWIN_SetVariable_Icon>
            Screen_ShowData_Mainpage(screen_obj,curr_program);
 800c88e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c892:	f2a3 233e 	subw	r3, r3, #574	@ 0x23e
 800c896:	781a      	ldrb	r2, [r3, #0]
 800c898:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c89c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	6818      	ldr	r0, [r3, #0]
 800c8a4:	f7fe f9e2 	bl	800ac6c <Screen_ShowData_Mainpage>

            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN);
 800c8a8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c8ac:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c8b0:	2165      	movs	r1, #101	@ 0x65
 800c8b2:	6818      	ldr	r0, [r3, #0]
 800c8b4:	f002 fbe9 	bl	800f08a <DWIN_SetPage>
        } break;
 800c8b8:	e324      	b.n	800cf04 <show_main_page+0x7e8>
        case DWINPAGE_MAIN_FINISH: {
            /* Show data */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 800c8ba:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c8be:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c8ce:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800c8d2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c8d6:	fb01 f303 	mul.w	r3, r1, r3
 800c8da:	3348      	adds	r3, #72	@ 0x48
 800c8dc:	6812      	ldr	r2, [r2, #0]
 800c8de:	4413      	add	r3, r2
 800c8e0:	1d5c      	adds	r4, r3, #5
 800c8e2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c8e6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c8f6:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800c8fa:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c8fe:	fb01 f303 	mul.w	r3, r1, r3
 800c902:	3348      	adds	r3, #72	@ 0x48
 800c904:	6812      	ldr	r2, [r2, #0]
 800c906:	4413      	add	r3, r2
 800c908:	3305      	adds	r3, #5
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7f3 fc2a 	bl	8000164 <strlen>
 800c910:	4603      	mov	r3, r0
 800c912:	b29b      	uxth	r3, r3
 800c914:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800c918:	f5a2 700f 	sub.w	r0, r2, #572	@ 0x23c
 800c91c:	4622      	mov	r2, r4
 800c91e:	f249 3150 	movw	r1, #37712	@ 0x9350
 800c922:	6800      	ldr	r0, [r0, #0]
 800c924:	f002 fbd8 	bl	800f0d8 <DWIN_SetText>
            show_text_short_circuit(screen_obj);
 800c928:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c92c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	f7fe fd69 	bl	800b408 <show_text_short_circuit>
            show_text_function_test(screen_obj);
 800c936:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c93a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	f7fe feae 	bl	800b6a0 <show_text_function_test>
            /* change page if home page */
            if (screen_obj->Ishome) {
 800c944:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c948:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 82d1 	beq.w	800cefa <show_main_page+0x7de>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800c958:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c95c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c966:	4619      	mov	r1, r3
 800c968:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c96c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c976:	fb01 f303 	mul.w	r3, r1, r3
 800c97a:	4413      	add	r3, r2
 800c97c:	334c      	adds	r3, #76	@ 0x4c
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	461a      	mov	r2, r3
 800c982:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c986:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c98a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	f002 fc55 	bl	800f23e <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_FINISH);
 800c994:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c998:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c99c:	2164      	movs	r1, #100	@ 0x64
 800c99e:	6818      	ldr	r0, [r3, #0]
 800c9a0:	f002 fb73 	bl	800f08a <DWIN_SetPage>
            }
        } break;
 800c9a4:	e2a9      	b.n	800cefa <show_main_page+0x7de>
        case DWINPAGE_MAIN_DETAIL: {
            /* get data and show */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
 800c9a6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9aa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9ba:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c9c4:	fb01 f303 	mul.w	r3, r1, r3
 800c9c8:	4413      	add	r3, r2
 800c9ca:	3348      	adds	r3, #72	@ 0x48
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	701a      	strb	r2, [r3, #0]
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
 800c9d0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9d4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c9de:	4619      	mov	r1, r3
 800c9e0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9e4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c9ee:	fb01 f303 	mul.w	r3, r1, r3
 800c9f2:	4413      	add	r3, r2
 800c9f4:	3348      	adds	r3, #72	@ 0x48
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a
            char ShowCase_String[30];
            Screen_SetInfo_Pin(screen_obj);
 800c9fc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca00:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ca04:	6818      	ldr	r0, [r3, #0]
 800ca06:	f7fe fa17 	bl	800ae38 <Screen_SetInfo_Pin>
            Screen_GetIcon_Pin(screen_obj,screen_obj->Program_Testx[index_program].data_test);
 800ca0a:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800ca0e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca12:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ca16:	6819      	ldr	r1, [r3, #0]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	005b      	lsls	r3, r3, #1
 800ca1c:	4413      	add	r3, r2
 800ca1e:	011b      	lsls	r3, r3, #4
 800ca20:	440b      	add	r3, r1
 800ca22:	f503 6392 	add.w	r3, r3, #1168	@ 0x490
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca2c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ca30:	4611      	mov	r1, r2
 800ca32:	6818      	ldr	r0, [r3, #0]
 800ca34:	f7fd fc34 	bl	800a2a0 <Screen_GetIcon_Pin>
            DWIN_SetArray_Icon(screen_obj,VP_ICON_DIRECTION_PIN,(uint8_t *)(_Screen.IC_Testerx[screen_obj->curr_device].config_pin),num_pin);
 800ca38:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca3c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ca46:	4619      	mov	r1, r3
 800ca48:	4a90      	ldr	r2, [pc, #576]	@ (800cc8c <show_main_page+0x570>)
 800ca4a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ca4e:	fb01 f303 	mul.w	r3, r1, r3
 800ca52:	4413      	add	r3, r2
 800ca54:	335c      	adds	r3, #92	@ 0x5c
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 800ca5c:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800ca60:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800ca64:	f244 0150 	movw	r1, #16464	@ 0x4050
 800ca68:	6800      	ldr	r0, [r0, #0]
 800ca6a:	f002 fc15 	bl	800f298 <DWIN_SetArray_Icon>
            Screen_GetIcon_Result(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800ca6e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca72:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca82:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ca8c:	fb01 f303 	mul.w	r3, r1, r3
 800ca90:	4413      	add	r3, r2
 800ca92:	3360      	adds	r3, #96	@ 0x60
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca9a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ca9e:	4611      	mov	r1, r2
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	f7fd fc86 	bl	800a3b2 <Screen_GetIcon_Result>
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_case*num_pin);
 800caa6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800caaa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cab4:	4619      	mov	r1, r3
 800cab6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800caba:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cac4:	fb01 f303 	mul.w	r3, r1, r3
 800cac8:	4413      	add	r3, r2
 800caca:	3360      	adds	r3, #96	@ 0x60
 800cacc:	6819      	ldr	r1, [r3, #0]
 800cace:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800cad2:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800cad6:	fb02 f303 	mul.w	r3, r2, r3
 800cada:	461a      	mov	r2, r3
 800cadc:	f107 0308 	add.w	r3, r7, #8
 800cae0:	4618      	mov	r0, r3
 800cae2:	f006 f906 	bl	8012cf2 <memcpy>
            DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[case_show * num_pin]),num_pin);
 800cae6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800caea:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800caf4:	4619      	mov	r1, r3
 800caf6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cafa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cb04:	fb01 f303 	mul.w	r3, r1, r3
 800cb08:	4413      	add	r3, r2
 800cb0a:	3364      	adds	r3, #100	@ 0x64
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f897 223a 	ldrb.w	r2, [r7, #570]	@ 0x23a
 800cb12:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 800cb16:	fb01 f202 	mul.w	r2, r1, r2
 800cb1a:	441a      	add	r2, r3
 800cb1c:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 800cb20:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800cb24:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800cb28:	f244 1150 	movw	r1, #16720	@ 0x4150
 800cb2c:	6800      	ldr	r0, [r0, #0]
 800cb2e:	f002 fbb3 	bl	800f298 <DWIN_SetArray_Icon>

            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,num_case);
 800cb32:	f897 323a 	ldrb.w	r3, [r7, #570]	@ 0x23a
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800cb3c:	f507 7007 	add.w	r0, r7, #540	@ 0x21c
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	4613      	mov	r3, r2
 800cb44:	4a52      	ldr	r2, [pc, #328]	@ (800cc90 <show_main_page+0x574>)
 800cb46:	211e      	movs	r1, #30
 800cb48:	f005 fe4a 	bl	80127e0 <sniprintf>
            DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800cb4c:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7f3 fb07 	bl	8000164 <strlen>
 800cb56:	4603      	mov	r3, r0
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 800cb5e:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800cb62:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800cb66:	f249 3180 	movw	r1, #37760	@ 0x9380
 800cb6a:	6800      	ldr	r0, [r0, #0]
 800cb6c:	f002 fab4 	bl	800f0d8 <DWIN_SetText>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case] == '0') {
 800cb70:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb74:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cb7e:	4619      	mov	r1, r3
 800cb80:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb84:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cb8e:	fb01 f303 	mul.w	r3, r1, r3
 800cb92:	4413      	add	r3, r2
 800cb94:	3370      	adds	r3, #112	@ 0x70
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800cb9c:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 800cba0:	6812      	ldr	r2, [r2, #0]
 800cba2:	f892 25b5 	ldrb.w	r2, [r2, #1461]	@ 0x5b5
 800cba6:	4610      	mov	r0, r2
 800cba8:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800cbac:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 800cbb0:	6811      	ldr	r1, [r2, #0]
 800cbb2:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 800cbb6:	fb00 f202 	mul.w	r2, r0, r2
 800cbba:	440a      	add	r2, r1
 800cbbc:	3248      	adds	r2, #72	@ 0x48
 800cbbe:	7812      	ldrb	r2, [r2, #0]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b30      	cmp	r3, #48	@ 0x30
 800cbc6:	d10b      	bne.n	800cbe0 <show_main_page+0x4c4>
                DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0xF800);
 800cbc8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cbcc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cbd0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800cbd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cbd8:	6818      	ldr	r0, [r3, #0]
 800cbda:	f002 faff 	bl	800f1dc <DWIN_SetColorText>
 800cbde:	e00a      	b.n	800cbf6 <show_main_page+0x4da>
            } else {
                DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0x01ED);
 800cbe0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cbe4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cbe8:	f240 12ed 	movw	r2, #493	@ 0x1ed
 800cbec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cbf0:	6818      	ldr	r0, [r3, #0]
 800cbf2:	f002 faf3 	bl	800f1dc <DWIN_SetColorText>
            }
            /* change page if home page */
            if (screen_obj->Ishome) {
 800cbf6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cbfa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f000 817a 	beq.w	800cefe <show_main_page+0x7e2>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800cc0a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc0e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cc18:	4619      	mov	r1, r3
 800cc1a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc1e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cc28:	fb01 f303 	mul.w	r3, r1, r3
 800cc2c:	4413      	add	r3, r2
 800cc2e:	334c      	adds	r3, #76	@ 0x4c
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	461a      	mov	r2, r3
 800cc34:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc38:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cc40:	6818      	ldr	r0, [r3, #0]
 800cc42:	f002 fafc 	bl	800f23e <DWIN_SetVariable_Icon>
                if (screen_obj->Program_Testx[index_program].num_pin == 14) {
 800cc46:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800cc4a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc4e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc52:	6819      	ldr	r1, [r3, #0]
 800cc54:	4613      	mov	r3, r2
 800cc56:	005b      	lsls	r3, r3, #1
 800cc58:	4413      	add	r3, r2
 800cc5a:	011b      	lsls	r3, r3, #4
 800cc5c:	440b      	add	r3, r1
 800cc5e:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	2b0e      	cmp	r3, #14
 800cc66:	d108      	bne.n	800cc7a <show_main_page+0x55e>
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL_14PIN);
 800cc68:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc6c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc70:	2168      	movs	r1, #104	@ 0x68
 800cc72:	6818      	ldr	r0, [r3, #0]
 800cc74:	f002 fa09 	bl	800f08a <DWIN_SetPage>
                } else {
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL);
                }
            }
        } break;
 800cc78:	e141      	b.n	800cefe <show_main_page+0x7e2>
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL);
 800cc7a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc7e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc82:	2166      	movs	r1, #102	@ 0x66
 800cc84:	6818      	ldr	r0, [r3, #0]
 800cc86:	f002 fa00 	bl	800f08a <DWIN_SetPage>
        } break;
 800cc8a:	e138      	b.n	800cefe <show_main_page+0x7e2>
 800cc8c:	20000cc8 	.word	0x20000cc8
 800cc90:	08015390 	.word	0x08015390
        case DWINPAGE_MAIN_PULSE: {
            /* show data */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
 800cc94:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc98:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cca2:	4619      	mov	r1, r3
 800cca4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cca8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ccb2:	fb01 f303 	mul.w	r3, r1, r3
 800ccb6:	4413      	add	r3, r2
 800ccb8:	3348      	adds	r3, #72	@ 0x48
 800ccba:	2200      	movs	r2, #0
 800ccbc:	701a      	strb	r2, [r3, #0]
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
 800ccbe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ccc2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cccc:	4619      	mov	r1, r3
 800ccce:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ccd2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ccdc:	fb01 f303 	mul.w	r3, r1, r3
 800cce0:	4413      	add	r3, r2
 800cce2:	3348      	adds	r3, #72	@ 0x48
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
            char ShowCase_String[30];
            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,2);
 800ccea:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 800ccee:	3301      	adds	r3, #1
 800ccf0:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 800ccf4:	2202      	movs	r2, #2
 800ccf6:	9200      	str	r2, [sp, #0]
 800ccf8:	4a85      	ldr	r2, [pc, #532]	@ (800cf10 <show_main_page+0x7f4>)
 800ccfa:	211e      	movs	r1, #30
 800ccfc:	f005 fd70 	bl	80127e0 <sniprintf>

            screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = malloc(num_case * num_pin);
 800cd00:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800cd04:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800cd08:	fb02 f303 	mul.w	r3, r2, r3
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd12:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cd1c:	461c      	mov	r4, r3
 800cd1e:	4610      	mov	r0, r2
 800cd20:	f003 fe64 	bl	80109ec <malloc>
 800cd24:	4603      	mov	r3, r0
 800cd26:	4619      	mov	r1, r3
 800cd28:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd2c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cd36:	fb04 f303 	mul.w	r3, r4, r3
 800cd3a:	4413      	add	r3, r2
 800cd3c:	3374      	adds	r3, #116	@ 0x74
 800cd3e:	6019      	str	r1, [r3, #0]
            transposeArray(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_pin,num_case);
 800cd40:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd44:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cd4e:	4619      	mov	r1, r3
 800cd50:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd54:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cd5e:	fb01 f303 	mul.w	r3, r1, r3
 800cd62:	4413      	add	r3, r2
 800cd64:	3374      	adds	r3, #116	@ 0x74
 800cd66:	6818      	ldr	r0, [r3, #0]
 800cd68:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd6c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cd76:	4619      	mov	r1, r3
 800cd78:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd7c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cd86:	fb01 f303 	mul.w	r3, r1, r3
 800cd8a:	4413      	add	r3, r2
 800cd8c:	3360      	adds	r3, #96	@ 0x60
 800cd8e:	6819      	ldr	r1, [r3, #0]
 800cd90:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800cd94:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800cd98:	f002 f82b 	bl	800edf2 <transposeArray>
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,num_case * num_pin);
 800cd9c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cda0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cdaa:	4619      	mov	r1, r3
 800cdac:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cdb0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cdba:	fb01 f303 	mul.w	r3, r1, r3
 800cdbe:	4413      	add	r3, r2
 800cdc0:	3374      	adds	r3, #116	@ 0x74
 800cdc2:	6819      	ldr	r1, [r3, #0]
 800cdc4:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800cdc8:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800cdcc:	fb02 f303 	mul.w	r3, r2, r3
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	f107 0308 	add.w	r3, r7, #8
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f005 ff8b 	bl	8012cf2 <memcpy>
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800cddc:	2300      	movs	r3, #0
 800cdde:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 800cde2:	e036      	b.n	800ce52 <show_main_page+0x736>
                screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] = screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] - '0';
 800cde4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cde8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cdf8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ce02:	fb01 f303 	mul.w	r3, r1, r3
 800ce06:	4413      	add	r3, r2
 800ce08:	3374      	adds	r3, #116	@ 0x74
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800ce10:	4413      	add	r3, r2
 800ce12:	781a      	ldrb	r2, [r3, #0]
 800ce14:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce18:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ce22:	4618      	mov	r0, r3
 800ce24:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce28:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ce2c:	6819      	ldr	r1, [r3, #0]
 800ce2e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ce32:	fb00 f303 	mul.w	r3, r0, r3
 800ce36:	440b      	add	r3, r1
 800ce38:	3374      	adds	r3, #116	@ 0x74
 800ce3a:	6819      	ldr	r1, [r3, #0]
 800ce3c:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800ce40:	440b      	add	r3, r1
 800ce42:	3a30      	subs	r2, #48	@ 0x30
 800ce44:	b2d2      	uxtb	r2, r2
 800ce46:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800ce48:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 800ce52:	f897 223f 	ldrb.w	r2, [r7, #575]	@ 0x23f
 800ce56:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800ce5a:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 800ce5e:	fb01 f303 	mul.w	r3, r1, r3
 800ce62:	429a      	cmp	r2, r3
 800ce64:	dbbe      	blt.n	800cde4 <show_main_page+0x6c8>
            }

            /* show fist case in pusle page */
            show_pulse(screen_obj,0);
 800ce66:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce6a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ce6e:	2100      	movs	r1, #0
 800ce70:	6818      	ldr	r0, [r3, #0]
 800ce72:	f7ff f877 	bl	800bf64 <show_pulse>
            
            // /* change page if home page */
            if (screen_obj->Ishome) {
 800ce76:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce7a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d03c      	beq.n	800cf02 <show_main_page+0x7e6>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800ce88:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce8c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ce96:	4619      	mov	r1, r3
 800ce98:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce9c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cea6:	fb01 f303 	mul.w	r3, r1, r3
 800ceaa:	4413      	add	r3, r2
 800ceac:	334c      	adds	r3, #76	@ 0x4c
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ceb6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ceba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cebe:	6818      	ldr	r0, [r3, #0]
 800cec0:	f002 f9bd 	bl	800f23e <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_PULSE);
 800cec4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cec8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cecc:	2167      	movs	r1, #103	@ 0x67
 800cece:	6818      	ldr	r0, [r3, #0]
 800ced0:	f002 f8db 	bl	800f08a <DWIN_SetPage>
                DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800ced4:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7f3 f943 	bl	8000164 <strlen>
 800cede:	4603      	mov	r3, r0
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 800cee6:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800ceea:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800ceee:	f249 3180 	movw	r1, #37760	@ 0x9380
 800cef2:	6800      	ldr	r0, [r0, #0]
 800cef4:	f002 f8f0 	bl	800f0d8 <DWIN_SetText>
            }
            // if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
            //     free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
            //     screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = NULL;
            // }
        } break;
 800cef8:	e003      	b.n	800cf02 <show_main_page+0x7e6>
        } break;
 800cefa:	bf00      	nop
 800cefc:	e002      	b.n	800cf04 <show_main_page+0x7e8>
        } break;
 800cefe:	bf00      	nop
 800cf00:	e000      	b.n	800cf04 <show_main_page+0x7e8>
        } break;
 800cf02:	bf00      	nop
    }
}
 800cf04:	bf00      	nop
 800cf06:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd90      	pop	{r4, r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	08015390 	.word	0x08015390

0800cf14 <get_data_testing_finish>:

void get_data_testing_finish(Screen_t *const screen_obj,uint8_t device, uint8_t *result_array) {
 800cf14:	b590      	push	{r4, r7, lr}
 800cf16:	b0c9      	sub	sp, #292	@ 0x124
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cf1e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cf22:	6018      	str	r0, [r3, #0]
 800cf24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cf28:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800cf2c:	601a      	str	r2, [r3, #0]
 800cf2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cf32:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800cf36:	460a      	mov	r2, r1
 800cf38:	701a      	strb	r2, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[device].selected_Program_Index;
 800cf3a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cf3e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	4619      	mov	r1, r3
 800cf46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cf4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cf54:	fb01 f303 	mul.w	r3, r1, r3
 800cf58:	4413      	add	r3, r2
 800cf5a:	334b      	adds	r3, #75	@ 0x4b
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800cf62:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800cf66:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cf6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cf6e:	6819      	ldr	r1, [r3, #0]
 800cf70:	4613      	mov	r3, r2
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	4413      	add	r3, r2
 800cf76:	011b      	lsls	r3, r3, #4
 800cf78:	440b      	add	r3, r1
 800cf7a:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800cf84:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800cf88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cf8c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cf90:	6819      	ldr	r1, [r3, #0]
 800cf92:	4613      	mov	r3, r2
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	4413      	add	r3, r2
 800cf98:	011b      	lsls	r3, r3, #4
 800cf9a:	440b      	add	r3, r1
 800cf9c:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
    /* get data test */
    uint8_t buffer[200];
    screen_obj->IC_Testerx[device].isShort = result_array[0];
 800cfa6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cfaa:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cfb6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	7819      	ldrb	r1, [r3, #0]
 800cfbe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cfc2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cfcc:	fb00 f303 	mul.w	r3, r0, r3
 800cfd0:	4413      	add	r3, r2
 800cfd2:	336c      	adds	r3, #108	@ 0x6c
 800cfd4:	460a      	mov	r2, r1
 800cfd6:	701a      	strb	r2, [r3, #0]
    screen_obj->IC_Testerx[device].data_short_circuit = (char *)malloc(num_pin);
 800cfd8:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800cfdc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cfe0:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	461c      	mov	r4, r3
 800cfe8:	4610      	mov	r0, r2
 800cfea:	f003 fcff 	bl	80109ec <malloc>
 800cfee:	4603      	mov	r3, r0
 800cff0:	4619      	mov	r1, r3
 800cff2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cff6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d000:	fb04 f303 	mul.w	r3, r4, r3
 800d004:	4413      	add	r3, r2
 800d006:	3368      	adds	r3, #104	@ 0x68
 800d008:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_short_circuit,(char *)result_array + 2,num_pin);
 800d00a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d00e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	4619      	mov	r1, r3
 800d016:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d01a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d024:	fb01 f303 	mul.w	r3, r1, r3
 800d028:	4413      	add	r3, r2
 800d02a:	3368      	adds	r3, #104	@ 0x68
 800d02c:	6818      	ldr	r0, [r3, #0]
 800d02e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d032:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	3302      	adds	r3, #2
 800d03a:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800d03e:	4619      	mov	r1, r3
 800d040:	f005 fd4a 	bl	8012ad8 <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_short_circuit,num_pin);
    screen_obj->IC_Testerx[device].data_result = (char *)malloc(num_case * num_pin);
 800d044:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800d048:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800d04c:	fb02 f303 	mul.w	r3, r2, r3
 800d050:	461a      	mov	r2, r3
 800d052:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d056:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	461c      	mov	r4, r3
 800d05e:	4610      	mov	r0, r2
 800d060:	f003 fcc4 	bl	80109ec <malloc>
 800d064:	4603      	mov	r3, r0
 800d066:	4619      	mov	r1, r3
 800d068:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d06c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d076:	fb04 f303 	mul.w	r3, r4, r3
 800d07a:	4413      	add	r3, r2
 800d07c:	3360      	adds	r3, #96	@ 0x60
 800d07e:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_result,(char *)result_array + (num_pin +3),num_case * num_pin);
 800d080:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d084:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	4619      	mov	r1, r3
 800d08c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d090:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d09a:	fb01 f303 	mul.w	r3, r1, r3
 800d09e:	4413      	add	r3, r2
 800d0a0:	3360      	adds	r3, #96	@ 0x60
 800d0a2:	6818      	ldr	r0, [r3, #0]
 800d0a4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800d0a8:	3303      	adds	r3, #3
 800d0aa:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800d0ae:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800d0b2:	6812      	ldr	r2, [r2, #0]
 800d0b4:	18d1      	adds	r1, r2, r3
 800d0b6:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800d0ba:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800d0be:	fb02 f303 	mul.w	r3, r2, r3
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	f005 fd08 	bl	8012ad8 <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_result,num_case * num_pin);
    screen_obj->IC_Testerx[device].data_result_case = (char *)malloc(num_case);
 800d0c8:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 800d0cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d0d0:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	461c      	mov	r4, r3
 800d0d8:	4610      	mov	r0, r2
 800d0da:	f003 fc87 	bl	80109ec <malloc>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d0e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d0f0:	fb04 f303 	mul.w	r3, r4, r3
 800d0f4:	4413      	add	r3, r2
 800d0f6:	3370      	adds	r3, #112	@ 0x70
 800d0f8:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_result_case,(char *)result_array + (num_pin + 5 + num_case * num_pin),num_case);
 800d0fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d0fe:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	4619      	mov	r1, r3
 800d106:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d10a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d114:	fb01 f303 	mul.w	r3, r1, r3
 800d118:	4413      	add	r3, r2
 800d11a:	3370      	adds	r3, #112	@ 0x70
 800d11c:	6818      	ldr	r0, [r3, #0]
 800d11e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800d122:	1d5a      	adds	r2, r3, #5
 800d124:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800d128:	f897 111e 	ldrb.w	r1, [r7, #286]	@ 0x11e
 800d12c:	fb01 f303 	mul.w	r3, r1, r3
 800d130:	4413      	add	r3, r2
 800d132:	461a      	mov	r2, r3
 800d134:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d138:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4413      	add	r3, r2
 800d140:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 800d144:	4619      	mov	r1, r3
 800d146:	f005 fcc7 	bl	8012ad8 <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_result_case,num_case);

    screen_obj->IC_Testerx[device].curr_PageMain = DWINPAGE_MAIN_FINISH;
 800d14a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d14e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	4619      	mov	r1, r3
 800d156:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d15a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d164:	fb01 f303 	mul.w	r3, r1, r3
 800d168:	4413      	add	r3, r2
 800d16a:	3349      	adds	r3, #73	@ 0x49
 800d16c:	2264      	movs	r2, #100	@ 0x64
 800d16e:	701a      	strb	r2, [r3, #0]
    uint8_t *device_finish = malloc(sizeof(uint8_t));
 800d170:	2001      	movs	r0, #1
 800d172:	f003 fc3b 	bl	80109ec <malloc>
 800d176:	4603      	mov	r3, r0
 800d178:	653b      	str	r3, [r7, #80]	@ 0x50
    memcpy(device_finish,&device,sizeof(uint8_t));
 800d17a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d17c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800d180:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 800d184:	7812      	ldrb	r2, [r2, #0]
 800d186:	701a      	strb	r2, [r3, #0]
    
    /* get text result to store  */
    uint8_t result_buffer[60];
    memset(result_buffer,0,60);
 800d188:	f107 0314 	add.w	r3, r7, #20
 800d18c:	223c      	movs	r2, #60	@ 0x3c
 800d18e:	2100      	movs	r1, #0
 800d190:	4618      	mov	r0, r3
 800d192:	f005 fc65 	bl	8012a60 <memset>
    get_text_result(screen_obj,result_buffer,screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic);
 800d196:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d19a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d1aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d1b4:	fb01 f303 	mul.w	r3, r1, r3
 800d1b8:	4413      	add	r3, r2
 800d1ba:	334a      	adds	r3, #74	@ 0x4a
 800d1bc:	781a      	ldrb	r2, [r3, #0]
 800d1be:	f107 0114 	add.w	r1, r7, #20
 800d1c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d1c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d1ca:	6818      	ldr	r0, [r3, #0]
 800d1cc:	f7fe fbf8 	bl	800b9c0 <get_text_result>
    if (strlen(screen_obj->IC_Testerx[screen_obj->curr_device].result_text) > 1) {
 800d1d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d1d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d1de:	4619      	mov	r1, r3
 800d1e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d1e4:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800d1e8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d1ec:	fb01 f303 	mul.w	r3, r1, r3
 800d1f0:	3378      	adds	r3, #120	@ 0x78
 800d1f2:	6812      	ldr	r2, [r2, #0]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f2 ffb4 	bl	8000164 <strlen>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d91a      	bls.n	800d238 <get_data_testing_finish+0x324>
        strcat(screen_obj->IC_Testerx[screen_obj->curr_device].result_text," | ");
 800d202:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d206:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d210:	4619      	mov	r1, r3
 800d212:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d216:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800d21a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d21e:	fb01 f303 	mul.w	r3, r1, r3
 800d222:	3378      	adds	r3, #120	@ 0x78
 800d224:	6812      	ldr	r2, [r2, #0]
 800d226:	18d4      	adds	r4, r2, r3
 800d228:	4620      	mov	r0, r4
 800d22a:	f7f2 ff9b 	bl	8000164 <strlen>
 800d22e:	4603      	mov	r3, r0
 800d230:	4423      	add	r3, r4
 800d232:	4a17      	ldr	r2, [pc, #92]	@ (800d290 <get_data_testing_finish+0x37c>)
 800d234:	6810      	ldr	r0, [r2, #0]
 800d236:	6018      	str	r0, [r3, #0]
    }
    strncat(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,result_buffer,strlen(result_buffer));
 800d238:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d23c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d246:	4619      	mov	r1, r3
 800d248:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d24c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800d250:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d254:	fb01 f303 	mul.w	r3, r1, r3
 800d258:	3378      	adds	r3, #120	@ 0x78
 800d25a:	6812      	ldr	r2, [r2, #0]
 800d25c:	18d4      	adds	r4, r2, r3
 800d25e:	f107 0314 	add.w	r3, r7, #20
 800d262:	4618      	mov	r0, r3
 800d264:	f7f2 ff7e 	bl	8000164 <strlen>
 800d268:	4602      	mov	r2, r0
 800d26a:	f107 0314 	add.w	r3, r7, #20
 800d26e:	4619      	mov	r1, r3
 800d270:	4620      	mov	r0, r4
 800d272:	f005 fc0c 	bl	8012a8e <strncat>

    OS_task_post_event(AO_task_screen,DEIVCE_TEST_FINISH,(uint8_t *)&device_finish,sizeof(uint8_t *));
 800d276:	4b07      	ldr	r3, [pc, #28]	@ (800d294 <get_data_testing_finish+0x380>)
 800d278:	6818      	ldr	r0, [r3, #0]
 800d27a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800d27e:	2304      	movs	r3, #4
 800d280:	2100      	movs	r1, #0
 800d282:	f003 f981 	bl	8010588 <OS_task_post_event>
}
 800d286:	bf00      	nop
 800d288:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd90      	pop	{r4, r7, pc}
 800d290:	080155fc 	.word	0x080155fc
 800d294:	08016110 	.word	0x08016110

0800d298 <warning_page>:

void warning_page(Screen_t *const screen_obj,uint32_t id_slave) {
 800d298:	b580      	push	{r7, lr}
 800d29a:	b09a      	sub	sp, #104	@ 0x68
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
    char buffer[90]  = {0};
 800d2a2:	f107 030c 	add.w	r3, r7, #12
 800d2a6:	225a      	movs	r2, #90	@ 0x5a
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f005 fbd8 	bl	8012a60 <memset>
    snprintf(buffer,sizeof(buffer),"IC Tester %d is not connected to the system. Please check the connection",(id_slave - 0x470));
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800d2b6:	f107 000c 	add.w	r0, r7, #12
 800d2ba:	4a0d      	ldr	r2, [pc, #52]	@ (800d2f0 <warning_page+0x58>)
 800d2bc:	215a      	movs	r1, #90	@ 0x5a
 800d2be:	f005 fa8f 	bl	80127e0 <sniprintf>

    DWIN_SetText((Dwin_t *)screen_obj,VP_Warning,buffer,strlen(buffer));
 800d2c2:	f107 030c 	add.w	r3, r7, #12
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7f2 ff4c 	bl	8000164 <strlen>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	f107 020c 	add.w	r2, r7, #12
 800d2d4:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f001 fefd 	bl	800f0d8 <DWIN_SetText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_WARNING);
 800d2de:	2177      	movs	r1, #119	@ 0x77
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f001 fed2 	bl	800f08a <DWIN_SetPage>

}
 800d2e6:	bf00      	nop
 800d2e8:	3768      	adds	r7, #104	@ 0x68
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	08015600 	.word	0x08015600

0800d2f4 <get_input_keyboard>:

void get_input_keyboard(Screen_t *const screen_obj,uint16_t VP_input) {
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	807b      	strh	r3, [r7, #2]
    switch (VP_input) {
 800d300:	887b      	ldrh	r3, [r7, #2]
 800d302:	f249 0240 	movw	r2, #36928	@ 0x9040
 800d306:	4293      	cmp	r3, r2
 800d308:	d05d      	beq.n	800d3c6 <get_input_keyboard+0xd2>
 800d30a:	f249 0240 	movw	r2, #36928	@ 0x9040
 800d30e:	4293      	cmp	r3, r2
 800d310:	dc69      	bgt.n	800d3e6 <get_input_keyboard+0xf2>
 800d312:	f249 0230 	movw	r2, #36912	@ 0x9030
 800d316:	4293      	cmp	r3, r2
 800d318:	d045      	beq.n	800d3a6 <get_input_keyboard+0xb2>
 800d31a:	f249 0230 	movw	r2, #36912	@ 0x9030
 800d31e:	4293      	cmp	r3, r2
 800d320:	dc61      	bgt.n	800d3e6 <get_input_keyboard+0xf2>
 800d322:	f249 0220 	movw	r2, #36896	@ 0x9020
 800d326:	4293      	cmp	r3, r2
 800d328:	d02d      	beq.n	800d386 <get_input_keyboard+0x92>
 800d32a:	f249 0220 	movw	r2, #36896	@ 0x9020
 800d32e:	4293      	cmp	r3, r2
 800d330:	dc59      	bgt.n	800d3e6 <get_input_keyboard+0xf2>
 800d332:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 800d336:	d004      	beq.n	800d342 <get_input_keyboard+0x4e>
 800d338:	f249 0210 	movw	r2, #36880	@ 0x9010
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d012      	beq.n	800d366 <get_input_keyboard+0x72>
        case VP_Year   : {
            memset(screen_obj->Time_setting.Year,0,3);
            memcpy(screen_obj->Time_setting.Year,screen_obj->Screen_keyboard.String,2);
        }
    }
}   
 800d340:	e051      	b.n	800d3e6 <get_input_keyboard+0xf2>
            memset(screen_obj->Time_setting.Hour,0,3);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f203 53a9 	addw	r3, r3, #1449	@ 0x5a9
 800d348:	2203      	movs	r2, #3
 800d34a:	2100      	movs	r1, #0
 800d34c:	4618      	mov	r0, r3
 800d34e:	f005 fb87 	bl	8012a60 <memset>
            memcpy(screen_obj->Time_setting.Hour,screen_obj->Screen_keyboard.String,2);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f203 53a9 	addw	r3, r3, #1449	@ 0x5a9
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	320e      	adds	r2, #14
 800d35c:	8812      	ldrh	r2, [r2, #0]
 800d35e:	b292      	uxth	r2, r2
 800d360:	801a      	strh	r2, [r3, #0]
        } break;
 800d362:	bf00      	nop
}   
 800d364:	e03f      	b.n	800d3e6 <get_input_keyboard+0xf2>
            memset(screen_obj->Time_setting.Minute,0,3);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f203 53ac 	addw	r3, r3, #1452	@ 0x5ac
 800d36c:	2203      	movs	r2, #3
 800d36e:	2100      	movs	r1, #0
 800d370:	4618      	mov	r0, r3
 800d372:	f005 fb75 	bl	8012a60 <memset>
            memcpy(screen_obj->Time_setting.Minute,screen_obj->Screen_keyboard.String,2);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f203 53ac 	addw	r3, r3, #1452	@ 0x5ac
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	320e      	adds	r2, #14
 800d380:	8812      	ldrh	r2, [r2, #0]
 800d382:	b292      	uxth	r2, r2
 800d384:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Day,0,3);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800d38c:	2203      	movs	r2, #3
 800d38e:	2100      	movs	r1, #0
 800d390:	4618      	mov	r0, r3
 800d392:	f005 fb65 	bl	8012a60 <memset>
            memcpy(screen_obj->Time_setting.Day,screen_obj->Screen_keyboard.String,2);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	320e      	adds	r2, #14
 800d3a0:	8812      	ldrh	r2, [r2, #0]
 800d3a2:	b292      	uxth	r2, r2
 800d3a4:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Month,0,3);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f203 53a3 	addw	r3, r3, #1443	@ 0x5a3
 800d3ac:	2203      	movs	r2, #3
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f005 fb55 	bl	8012a60 <memset>
            memcpy(screen_obj->Time_setting.Month,screen_obj->Screen_keyboard.String,2);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f203 53a3 	addw	r3, r3, #1443	@ 0x5a3
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	320e      	adds	r2, #14
 800d3c0:	8812      	ldrh	r2, [r2, #0]
 800d3c2:	b292      	uxth	r2, r2
 800d3c4:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Year,0,3);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f203 53a6 	addw	r3, r3, #1446	@ 0x5a6
 800d3cc:	2203      	movs	r2, #3
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f005 fb45 	bl	8012a60 <memset>
            memcpy(screen_obj->Time_setting.Year,screen_obj->Screen_keyboard.String,2);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f203 53a6 	addw	r3, r3, #1446	@ 0x5a6
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	320e      	adds	r2, #14
 800d3e0:	8812      	ldrh	r2, [r2, #0]
 800d3e2:	b292      	uxth	r2, r2
 800d3e4:	801a      	strh	r2, [r3, #0]
}   
 800d3e6:	bf00      	nop
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
	...

0800d3f0 <updata_data_program_from_app>:

void updata_data_program_from_app(Screen_t *const screen_obj,char *data,uint16_t len) {
 800d3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f4:	b098      	sub	sp, #96	@ 0x60
 800d3f6:	af02      	add	r7, sp, #8
 800d3f8:	60f8      	str	r0, [r7, #12]
 800d3fa:	60b9      	str	r1, [r7, #8]
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	80fb      	strh	r3, [r7, #6]
 800d400:	466b      	mov	r3, sp
 800d402:	469a      	mov	sl, r3
    /* update value */
    char temp_buf[len];
 800d404:	88f9      	ldrh	r1, [r7, #6]
 800d406:	460b      	mov	r3, r1
 800d408:	3b01      	subs	r3, #1
 800d40a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d40c:	b28b      	uxth	r3, r1
 800d40e:	2200      	movs	r2, #0
 800d410:	4698      	mov	r8, r3
 800d412:	4691      	mov	r9, r2
 800d414:	f04f 0200 	mov.w	r2, #0
 800d418:	f04f 0300 	mov.w	r3, #0
 800d41c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d420:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d424:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d428:	b28b      	uxth	r3, r1
 800d42a:	2200      	movs	r2, #0
 800d42c:	461c      	mov	r4, r3
 800d42e:	4615      	mov	r5, r2
 800d430:	f04f 0200 	mov.w	r2, #0
 800d434:	f04f 0300 	mov.w	r3, #0
 800d438:	00eb      	lsls	r3, r5, #3
 800d43a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d43e:	00e2      	lsls	r2, r4, #3
 800d440:	460b      	mov	r3, r1
 800d442:	3307      	adds	r3, #7
 800d444:	08db      	lsrs	r3, r3, #3
 800d446:	00db      	lsls	r3, r3, #3
 800d448:	ebad 0d03 	sub.w	sp, sp, r3
 800d44c:	ab02      	add	r3, sp, #8
 800d44e:	3300      	adds	r3, #0
 800d450:	653b      	str	r3, [r7, #80]	@ 0x50
    memset(temp_buf,0,len);
 800d452:	88fb      	ldrh	r3, [r7, #6]
 800d454:	461a      	mov	r2, r3
 800d456:	2100      	movs	r1, #0
 800d458:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d45a:	f005 fb01 	bl	8012a60 <memset>
    memcpy(temp_buf,data,len);
 800d45e:	88fb      	ldrh	r3, [r7, #6]
 800d460:	461a      	mov	r2, r3
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d466:	f005 fc44 	bl	8012cf2 <memcpy>
    uint8_t index_program;

    char *pdata = strtok(temp_buf,",");
 800d46a:	498e      	ldr	r1, [pc, #568]	@ (800d6a4 <updata_data_program_from_app+0x2b4>)
 800d46c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d46e:	f005 fb47 	bl	8012b00 <strtok>
 800d472:	64f8      	str	r0, [r7, #76]	@ 0x4c
    index_program = atoi(pdata) - 1;
 800d474:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d476:	f003 fab4 	bl	80109e2 <atoi>
 800d47a:	4603      	mov	r3, r0
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	3b01      	subs	r3, #1
 800d480:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    if (screen_obj->Program_Testx[index_program].Name_Program != NULL) {
 800d484:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d488:	68f9      	ldr	r1, [r7, #12]
 800d48a:	4613      	mov	r3, r2
 800d48c:	005b      	lsls	r3, r3, #1
 800d48e:	4413      	add	r3, r2
 800d490:	011b      	lsls	r3, r3, #4
 800d492:	440b      	add	r3, r1
 800d494:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d019      	beq.n	800d4d2 <updata_data_program_from_app+0xe2>
        free(screen_obj->Program_Testx[index_program].Name_Program);
 800d49e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d4a2:	68f9      	ldr	r1, [r7, #12]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	005b      	lsls	r3, r3, #1
 800d4a8:	4413      	add	r3, r2
 800d4aa:	011b      	lsls	r3, r3, #4
 800d4ac:	440b      	add	r3, r1
 800d4ae:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f003 faa1 	bl	80109fc <free>
        screen_obj->Program_Testx[index_program].Name_Program = NULL;
 800d4ba:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d4be:	68f9      	ldr	r1, [r7, #12]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	4413      	add	r3, r2
 800d4c6:	011b      	lsls	r3, r3, #4
 800d4c8:	440b      	add	r3, r1
 800d4ca:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 800d4d2:	4974      	ldr	r1, [pc, #464]	@ (800d6a4 <updata_data_program_from_app+0x2b4>)
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	f005 fb13 	bl	8012b00 <strtok>
 800d4da:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].Name_Program = (char *)malloc(strlen(pdata) + 1);
 800d4dc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d4de:	f7f2 fe41 	bl	8000164 <strlen>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f003 fa7e 	bl	80109ec <malloc>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	4623      	mov	r3, r4
 800d4f8:	005b      	lsls	r3, r3, #1
 800d4fa:	4423      	add	r3, r4
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	4413      	add	r3, r2
 800d500:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d504:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].Name_Program, pdata);
 800d506:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d50a:	68f9      	ldr	r1, [r7, #12]
 800d50c:	4613      	mov	r3, r2
 800d50e:	005b      	lsls	r3, r3, #1
 800d510:	4413      	add	r3, r2
 800d512:	011b      	lsls	r3, r3, #4
 800d514:	440b      	add	r3, r1
 800d516:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d51e:	4618      	mov	r0, r3
 800d520:	f005 fbd1 	bl	8012cc6 <strcpy>

    if (screen_obj->Program_Testx[index_program].Name_IC != NULL) {
 800d524:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d528:	68f9      	ldr	r1, [r7, #12]
 800d52a:	4613      	mov	r3, r2
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	4413      	add	r3, r2
 800d530:	011b      	lsls	r3, r3, #4
 800d532:	440b      	add	r3, r1
 800d534:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d019      	beq.n	800d572 <updata_data_program_from_app+0x182>
        free(screen_obj->Program_Testx[index_program].Name_IC);
 800d53e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d542:	68f9      	ldr	r1, [r7, #12]
 800d544:	4613      	mov	r3, r2
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	4413      	add	r3, r2
 800d54a:	011b      	lsls	r3, r3, #4
 800d54c:	440b      	add	r3, r1
 800d54e:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4618      	mov	r0, r3
 800d556:	f003 fa51 	bl	80109fc <free>
        screen_obj->Program_Testx[index_program].Name_IC = NULL;
 800d55a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d55e:	68f9      	ldr	r1, [r7, #12]
 800d560:	4613      	mov	r3, r2
 800d562:	005b      	lsls	r3, r3, #1
 800d564:	4413      	add	r3, r2
 800d566:	011b      	lsls	r3, r3, #4
 800d568:	440b      	add	r3, r1
 800d56a:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d56e:	2200      	movs	r2, #0
 800d570:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 800d572:	494c      	ldr	r1, [pc, #304]	@ (800d6a4 <updata_data_program_from_app+0x2b4>)
 800d574:	2000      	movs	r0, #0
 800d576:	f005 fac3 	bl	8012b00 <strtok>
 800d57a:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].Name_IC = (char *)malloc(strlen(pdata) + 1);
 800d57c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d57e:	f7f2 fdf1 	bl	8000164 <strlen>
 800d582:	4603      	mov	r3, r0
 800d584:	3301      	adds	r3, #1
 800d586:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 800d58a:	4618      	mov	r0, r3
 800d58c:	f003 fa2e 	bl	80109ec <malloc>
 800d590:	4603      	mov	r3, r0
 800d592:	4619      	mov	r1, r3
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	4623      	mov	r3, r4
 800d598:	005b      	lsls	r3, r3, #1
 800d59a:	4423      	add	r3, r4
 800d59c:	011b      	lsls	r3, r3, #4
 800d59e:	4413      	add	r3, r2
 800d5a0:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d5a4:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].Name_IC, pdata);
 800d5a6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d5aa:	68f9      	ldr	r1, [r7, #12]
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	005b      	lsls	r3, r3, #1
 800d5b0:	4413      	add	r3, r2
 800d5b2:	011b      	lsls	r3, r3, #4
 800d5b4:	440b      	add	r3, r1
 800d5b6:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f005 fb81 	bl	8012cc6 <strcpy>

    if (screen_obj->Program_Testx[index_program].num_IC != NULL) {
 800d5c4:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d5c8:	68f9      	ldr	r1, [r7, #12]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	005b      	lsls	r3, r3, #1
 800d5ce:	4413      	add	r3, r2
 800d5d0:	011b      	lsls	r3, r3, #4
 800d5d2:	440b      	add	r3, r1
 800d5d4:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d019      	beq.n	800d612 <updata_data_program_from_app+0x222>
        free(screen_obj->Program_Testx[index_program].num_IC);
 800d5de:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d5e2:	68f9      	ldr	r1, [r7, #12]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	005b      	lsls	r3, r3, #1
 800d5e8:	4413      	add	r3, r2
 800d5ea:	011b      	lsls	r3, r3, #4
 800d5ec:	440b      	add	r3, r1
 800d5ee:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f003 fa01 	bl	80109fc <free>
        screen_obj->Program_Testx[index_program].num_IC = NULL;
 800d5fa:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d5fe:	68f9      	ldr	r1, [r7, #12]
 800d600:	4613      	mov	r3, r2
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	4413      	add	r3, r2
 800d606:	011b      	lsls	r3, r3, #4
 800d608:	440b      	add	r3, r1
 800d60a:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d60e:	2200      	movs	r2, #0
 800d610:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 800d612:	4924      	ldr	r1, [pc, #144]	@ (800d6a4 <updata_data_program_from_app+0x2b4>)
 800d614:	2000      	movs	r0, #0
 800d616:	f005 fa73 	bl	8012b00 <strtok>
 800d61a:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].num_IC = (char *)malloc(strlen(pdata) + 1);
 800d61c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d61e:	f7f2 fda1 	bl	8000164 <strlen>
 800d622:	4603      	mov	r3, r0
 800d624:	3301      	adds	r3, #1
 800d626:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 800d62a:	4618      	mov	r0, r3
 800d62c:	f003 f9de 	bl	80109ec <malloc>
 800d630:	4603      	mov	r3, r0
 800d632:	4619      	mov	r1, r3
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	4623      	mov	r3, r4
 800d638:	005b      	lsls	r3, r3, #1
 800d63a:	4423      	add	r3, r4
 800d63c:	011b      	lsls	r3, r3, #4
 800d63e:	4413      	add	r3, r2
 800d640:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d644:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].num_IC, pdata);
 800d646:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d64a:	68f9      	ldr	r1, [r7, #12]
 800d64c:	4613      	mov	r3, r2
 800d64e:	005b      	lsls	r3, r3, #1
 800d650:	4413      	add	r3, r2
 800d652:	011b      	lsls	r3, r3, #4
 800d654:	440b      	add	r3, r1
 800d656:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d65e:	4618      	mov	r0, r3
 800d660:	f005 fb31 	bl	8012cc6 <strcpy>

    /* get data for testing ic */
    if (get_data_testing_ic(screen_obj->Program_Testx[index_program].Name_IC,&screen_obj->Program_Testx[index_program]) == false) {
 800d664:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d668:	68f9      	ldr	r1, [r7, #12]
 800d66a:	4613      	mov	r3, r2
 800d66c:	005b      	lsls	r3, r3, #1
 800d66e:	4413      	add	r3, r2
 800d670:	011b      	lsls	r3, r3, #4
 800d672:	440b      	add	r3, r1
 800d674:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d67e:	4613      	mov	r3, r2
 800d680:	005b      	lsls	r3, r3, #1
 800d682:	4413      	add	r3, r2
 800d684:	011b      	lsls	r3, r3, #4
 800d686:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d68a:	68fa      	ldr	r2, [r7, #12]
 800d68c:	4413      	add	r3, r2
 800d68e:	4619      	mov	r1, r3
 800d690:	f7fd fc34 	bl	800aefc <get_data_testing_ic>
 800d694:	4603      	mov	r3, r0
 800d696:	f083 0301 	eor.w	r3, r3, #1
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d003      	beq.n	800d6a8 <updata_data_program_from_app+0x2b8>
        return;
 800d6a0:	46d5      	mov	sp, sl
 800d6a2:	e164      	b.n	800d96e <updata_data_program_from_app+0x57e>
 800d6a4:	08015478 	.word	0x08015478
    }

    /* store data to eeprom */
    char string_data[TOTAL_ONE_PROGRAM_TEST_LEN] = {0};
 800d6a8:	f107 0314 	add.w	r3, r7, #20
 800d6ac:	222a      	movs	r2, #42	@ 0x2a
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f005 f9d5 	bl	8012a60 <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 800d6b6:	200c      	movs	r0, #12
 800d6b8:	f003 f998 	bl	80109ec <malloc>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	613b      	str	r3, [r7, #16]
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[index_program].Name_Program
 800d6c0:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d6c4:	68f9      	ldr	r1, [r7, #12]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	4413      	add	r3, r2
 800d6cc:	011b      	lsls	r3, r3, #4
 800d6ce:	440b      	add	r3, r1
 800d6d0:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d6d4:	681c      	ldr	r4, [r3, #0]
 800d6d6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d6da:	68f9      	ldr	r1, [r7, #12]
 800d6dc:	4613      	mov	r3, r2
 800d6de:	005b      	lsls	r3, r3, #1
 800d6e0:	4413      	add	r3, r2
 800d6e2:	011b      	lsls	r3, r3, #4
 800d6e4:	440b      	add	r3, r1
 800d6e6:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d6ea:	6819      	ldr	r1, [r3, #0]
 800d6ec:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	005b      	lsls	r3, r3, #1
 800d6f6:	4413      	add	r3, r2
 800d6f8:	011b      	lsls	r3, r3, #4
 800d6fa:	4403      	add	r3, r0
 800d6fc:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f107 0014 	add.w	r0, r7, #20
 800d706:	9301      	str	r3, [sp, #4]
 800d708:	9100      	str	r1, [sp, #0]
 800d70a:	4623      	mov	r3, r4
 800d70c:	4a9a      	ldr	r2, [pc, #616]	@ (800d978 <updata_data_program_from_app+0x588>)
 800d70e:	212a      	movs	r1, #42	@ 0x2a
 800d710:	f005 f866 	bl	80127e0 <sniprintf>
    ,screen_obj->Program_Testx[index_program].Name_IC
    ,screen_obj->Program_Testx[index_program].num_IC);
    data_write->data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 800d714:	693c      	ldr	r4, [r7, #16]
 800d716:	202a      	movs	r0, #42	@ 0x2a
 800d718:	f003 f968 	bl	80109ec <malloc>
 800d71c:	4603      	mov	r3, r0
 800d71e:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	f107 0414 	add.w	r4, r7, #20
 800d728:	469c      	mov	ip, r3
 800d72a:	f104 0e20 	add.w	lr, r4, #32
 800d72e:	4665      	mov	r5, ip
 800d730:	4626      	mov	r6, r4
 800d732:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d734:	6028      	str	r0, [r5, #0]
 800d736:	6069      	str	r1, [r5, #4]
 800d738:	60aa      	str	r2, [r5, #8]
 800d73a:	60eb      	str	r3, [r5, #12]
 800d73c:	3410      	adds	r4, #16
 800d73e:	f10c 0c10 	add.w	ip, ip, #16
 800d742:	4574      	cmp	r4, lr
 800d744:	d1f3      	bne.n	800d72e <updata_data_program_from_app+0x33e>
 800d746:	4662      	mov	r2, ip
 800d748:	4623      	mov	r3, r4
 800d74a:	cb03      	ldmia	r3!, {r0, r1}
 800d74c:	6010      	str	r0, [r2, #0]
 800d74e:	6051      	str	r1, [r2, #4]
 800d750:	881b      	ldrh	r3, [r3, #0]
 800d752:	8113      	strh	r3, [r2, #8]
    data_write->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	222a      	movs	r2, #42	@ 0x2a
 800d758:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_PROGRAM_TEST_X(index_program);
 800d75a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d75e:	b29b      	uxth	r3, r3
 800d760:	461a      	mov	r2, r3
 800d762:	0052      	lsls	r2, r2, #1
 800d764:	4413      	add	r3, r2
 800d766:	461a      	mov	r2, r3
 800d768:	00d2      	lsls	r2, r2, #3
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	005b      	lsls	r3, r3, #1
 800d76e:	b29a      	uxth	r2, r3
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	3243      	adds	r2, #67	@ 0x43
 800d774:	b292      	uxth	r2, r2
 800d776:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 800d778:	4b80      	ldr	r3, [pc, #512]	@ (800d97c <updata_data_program_from_app+0x58c>)
 800d77a:	6818      	ldr	r0, [r3, #0]
 800d77c:	f107 0210 	add.w	r2, r7, #16
 800d780:	230c      	movs	r3, #12
 800d782:	2105      	movs	r1, #5
 800d784:	f002 ff00 	bl	8010588 <OS_task_post_event>

    // Show data in screen
    if (screen_obj->Ishome) {
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d042      	beq.n	800d818 <updata_data_program_from_app+0x428>
        if (index_program == screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index) {
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d798:	4619      	mov	r1, r3
 800d79a:	68fa      	ldr	r2, [r7, #12]
 800d79c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d7a0:	fb01 f303 	mul.w	r3, r1, r3
 800d7a4:	4413      	add	r3, r2
 800d7a6:	334b      	adds	r3, #75	@ 0x4b
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d105      	bne.n	800d7be <updata_data_program_from_app+0x3ce>
            Screen_ShowData_Mainpage(screen_obj,index_program);
 800d7b2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f7fd fa57 	bl	800ac6c <Screen_ShowData_Mainpage>
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800d7be:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	0092      	lsls	r2, r2, #2
 800d7c8:	4413      	add	r3, r2
 800d7ca:	00db      	lsls	r3, r3, #3
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 800d7d2:	3b58      	subs	r3, #88	@ 0x58
 800d7d4:	b29c      	uxth	r4, r3
 800d7d6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d7da:	68f9      	ldr	r1, [r7, #12]
 800d7dc:	4613      	mov	r3, r2
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	4413      	add	r3, r2
 800d7e2:	011b      	lsls	r3, r3, #4
 800d7e4:	440b      	add	r3, r1
 800d7e6:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d7ea:	681d      	ldr	r5, [r3, #0]
            ,strlen(screen_obj->Program_Testx[index_program].Name_Program));
 800d7ec:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d7f0:	68f9      	ldr	r1, [r7, #12]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	4413      	add	r3, r2
 800d7f8:	011b      	lsls	r3, r3, #4
 800d7fa:	440b      	add	r3, r1
 800d7fc:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4618      	mov	r0, r3
 800d804:	f7f2 fcae 	bl	8000164 <strlen>
 800d808:	4603      	mov	r3, r0
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	462a      	mov	r2, r5
 800d80e:	4621      	mov	r1, r4
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f001 fc61 	bl	800f0d8 <DWIN_SetText>
 800d816:	e0a9      	b.n	800d96c <updata_data_program_from_app+0x57c>
    } else {
        uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800d818:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d81c:	68f9      	ldr	r1, [r7, #12]
 800d81e:	4613      	mov	r3, r2
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	4413      	add	r3, r2
 800d824:	011b      	lsls	r3, r3, #4
 800d826:	440b      	add	r3, r1
 800d828:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4618      	mov	r0, r3
 800d830:	f7f2 fc98 	bl	8000164 <strlen>
 800d834:	4603      	mov	r3, r0
 800d836:	b2db      	uxtb	r3, r3
 800d838:	3309      	adds	r3, #9
 800d83a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 800d83e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d842:	68f9      	ldr	r1, [r7, #12]
 800d844:	4613      	mov	r3, r2
 800d846:	005b      	lsls	r3, r3, #1
 800d848:	4413      	add	r3, r2
 800d84a:	011b      	lsls	r3, r3, #4
 800d84c:	440b      	add	r3, r1
 800d84e:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4618      	mov	r0, r3
 800d856:	f7f2 fc85 	bl	8000164 <strlen>
 800d85a:	4603      	mov	r3, r0
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	330f      	adds	r3, #15
 800d860:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

        char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800d864:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800d868:	3301      	adds	r3, #1
 800d86a:	4618      	mov	r0, r3
 800d86c:	f003 f8be 	bl	80109ec <malloc>
 800d870:	4603      	mov	r3, r0
 800d872:	647b      	str	r3, [r7, #68]	@ 0x44
        char *Text_Num_IC = malloc(size_Num_IC + 1);
 800d874:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800d878:	3301      	adds	r3, #1
 800d87a:	4618      	mov	r0, r3
 800d87c:	f003 f8b6 	bl	80109ec <malloc>
 800d880:	4603      	mov	r3, r0
 800d882:	643b      	str	r3, [r7, #64]	@ 0x40

        strcpy(Text_Name_IC,"IC Name: ");
 800d884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d886:	493e      	ldr	r1, [pc, #248]	@ (800d980 <updata_data_program_from_app+0x590>)
 800d888:	461a      	mov	r2, r3
 800d88a:	460b      	mov	r3, r1
 800d88c:	cb03      	ldmia	r3!, {r0, r1}
 800d88e:	6010      	str	r0, [r2, #0]
 800d890:	6051      	str	r1, [r2, #4]
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	8113      	strh	r3, [r2, #8]
        strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 800d896:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d89a:	68f9      	ldr	r1, [r7, #12]
 800d89c:	4613      	mov	r3, r2
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	4413      	add	r3, r2
 800d8a2:	011b      	lsls	r3, r3, #4
 800d8a4:	440b      	add	r3, r1
 800d8a6:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d8b0:	f005 f8de 	bl	8012a70 <strcat>
        strcpy(Text_Num_IC,"Number of ICs: ");
 800d8b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8b6:	4a33      	ldr	r2, [pc, #204]	@ (800d984 <updata_data_program_from_app+0x594>)
 800d8b8:	461c      	mov	r4, r3
 800d8ba:	4615      	mov	r5, r2
 800d8bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8be:	6020      	str	r0, [r4, #0]
 800d8c0:	6061      	str	r1, [r4, #4]
 800d8c2:	60a2      	str	r2, [r4, #8]
 800d8c4:	60e3      	str	r3, [r4, #12]
        strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 800d8c6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d8ca:	68f9      	ldr	r1, [r7, #12]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	005b      	lsls	r3, r3, #1
 800d8d0:	4413      	add	r3, r2
 800d8d2:	011b      	lsls	r3, r3, #4
 800d8d4:	440b      	add	r3, r1
 800d8d6:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4619      	mov	r1, r3
 800d8de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800d8e0:	f005 f8c6 	bl	8012a70 <strcat>

        // Show data in screen
        DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800d8e4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8ec:	f249 5120 	movw	r1, #38176	@ 0x9520
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f001 fbf1 	bl	800f0d8 <DWIN_SetText>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 800d8f6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d8fe:	f249 5140 	movw	r1, #38208	@ 0x9540
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f001 fbe8 	bl	800f0d8 <DWIN_SetText>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800d908:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	461a      	mov	r2, r3
 800d910:	0092      	lsls	r2, r2, #2
 800d912:	4413      	add	r3, r2
 800d914:	00db      	lsls	r3, r3, #3
 800d916:	b29b      	uxth	r3, r3
 800d918:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 800d91c:	3b58      	subs	r3, #88	@ 0x58
 800d91e:	b29c      	uxth	r4, r3
 800d920:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d924:	68f9      	ldr	r1, [r7, #12]
 800d926:	4613      	mov	r3, r2
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	4413      	add	r3, r2
 800d92c:	011b      	lsls	r3, r3, #4
 800d92e:	440b      	add	r3, r1
 800d930:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d934:	681d      	ldr	r5, [r3, #0]
            ,strlen(screen_obj->Program_Testx[index_program].Name_Program));
 800d936:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d93a:	68f9      	ldr	r1, [r7, #12]
 800d93c:	4613      	mov	r3, r2
 800d93e:	005b      	lsls	r3, r3, #1
 800d940:	4413      	add	r3, r2
 800d942:	011b      	lsls	r3, r3, #4
 800d944:	440b      	add	r3, r1
 800d946:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7f2 fc09 	bl	8000164 <strlen>
 800d952:	4603      	mov	r3, r0
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800d954:	b29b      	uxth	r3, r3
 800d956:	462a      	mov	r2, r5
 800d958:	4621      	mov	r1, r4
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f001 fbbc 	bl	800f0d8 <DWIN_SetText>

        free(Text_Name_IC);
 800d960:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d962:	f003 f84b 	bl	80109fc <free>
        free(Text_Num_IC);
 800d966:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800d968:	f003 f848 	bl	80109fc <free>
 800d96c:	46d5      	mov	sp, sl
    }

}
 800d96e:	3758      	adds	r7, #88	@ 0x58
 800d970:	46bd      	mov	sp, r7
 800d972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d976:	bf00      	nop
 800d978:	080153f4 	.word	0x080153f4
 800d97c:	0801610c 	.word	0x0801610c
 800d980:	080153c8 	.word	0x080153c8
 800d984:	080153d4 	.word	0x080153d4

0800d988 <can_bus_task_init>:
static app_can can_bus_instance;
OS_task * const AO_task_can_bus = &can_bus_instance.task; 
static managerTX_CAN_t *buff_store[MAX_MANAGER_TX_BUF_SIZE]; /* buffer store the data write */


void can_bus_task_init(CAN_HandleTypeDef *pCan) {
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
    printf("init app can bus\n");
 800d990:	4810      	ldr	r0, [pc, #64]	@ (800d9d4 <can_bus_task_init+0x4c>)
 800d992:	f004 ff1d 	bl	80127d0 <puts>
    can_bus_instance.b_counting = false;
 800d996:	4b10      	ldr	r3, [pc, #64]	@ (800d9d8 <can_bus_task_init+0x50>)
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    can_bus_instance.head_index = 0;
 800d99e:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d8 <can_bus_task_init+0x50>)
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    can_bus_instance.tail_index = 0;
 800d9a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d9d8 <can_bus_task_init+0x50>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    can_bus_instance.nUsed = 0;
 800d9ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d8 <can_bus_task_init+0x50>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    can_bus_instance.end = MAX_MANAGER_TX_BUF_SIZE - 1;
 800d9b6:	4b08      	ldr	r3, [pc, #32]	@ (800d9d8 <can_bus_task_init+0x50>)
 800d9b8:	2204      	movs	r2, #4
 800d9ba:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
    can_bus_instance.managerTX_buf = buff_store;
 800d9be:	4b06      	ldr	r3, [pc, #24]	@ (800d9d8 <can_bus_task_init+0x50>)
 800d9c0:	4a06      	ldr	r2, [pc, #24]	@ (800d9dc <can_bus_task_init+0x54>)
 800d9c2:	671a      	str	r2, [r3, #112]	@ 0x70

    can_bus_ctor(&can_bus_instance);
 800d9c4:	4804      	ldr	r0, [pc, #16]	@ (800d9d8 <can_bus_task_init+0x50>)
 800d9c6:	f000 f80b 	bl	800d9e0 <can_bus_ctor>

    UNUSED(pCan);
}
 800d9ca:	bf00      	nop
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	0801564c 	.word	0x0801564c
 800d9d8:	200012ec 	.word	0x200012ec
 800d9dc:	20001368 	.word	0x20001368

0800d9e0 <can_bus_ctor>:

void can_bus_ctor(app_can *pAO) {
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_can_bus,(OS_handler)&can_bus_init,(OS_handler)&can_bus_dispatch);
 800d9e8:	4b07      	ldr	r3, [pc, #28]	@ (800da08 <can_bus_ctor+0x28>)
 800d9ea:	4a08      	ldr	r2, [pc, #32]	@ (800da0c <can_bus_ctor+0x2c>)
 800d9ec:	4908      	ldr	r1, [pc, #32]	@ (800da10 <can_bus_ctor+0x30>)
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f002 fd18 	bl	8010424 <OS_task_init>

    OS_TimeEvt_init(&can_bus_instance.te_timeout,TX_TIMEOUT,&can_bus_instance.task);
 800d9f4:	4a04      	ldr	r2, [pc, #16]	@ (800da08 <can_bus_ctor+0x28>)
 800d9f6:	2105      	movs	r1, #5
 800d9f8:	4806      	ldr	r0, [pc, #24]	@ (800da14 <can_bus_ctor+0x34>)
 800d9fa:	f002 fde3 	bl	80105c4 <OS_TimeEvt_init>
}
 800d9fe:	bf00      	nop
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	200012ec 	.word	0x200012ec
 800da0c:	0800da35 	.word	0x0800da35
 800da10:	0800da19 	.word	0x0800da19
 800da14:	20001308 	.word	0x20001308

0800da18 <can_bus_init>:

static void can_bus_init(app_can * const pOS_task, OS_event_t const * const pEvent) {
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Stop(&pOS_task->te_timeout);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	331c      	adds	r3, #28
 800da26:	4618      	mov	r0, r3
 800da28:	f002 fe09 	bl	801063e <OS_TimeEvt_Stop>

    UNUSED(pEvent);
}
 800da2c:	bf00      	nop
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <can_bus_dispatch>:

static void can_bus_dispatch(app_can * const pOS_task, OS_event_t const * const pEvent) {
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	881b      	ldrh	r3, [r3, #0]
 800da42:	2b05      	cmp	r3, #5
 800da44:	f200 80d6 	bhi.w	800dbf4 <can_bus_dispatch+0x1c0>
 800da48:	a201      	add	r2, pc, #4	@ (adr r2, 800da50 <can_bus_dispatch+0x1c>)
 800da4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4e:	bf00      	nop
 800da50:	0800da69 	.word	0x0800da69
 800da54:	0800dbf5 	.word	0x0800dbf5
 800da58:	0800da71 	.word	0x0800da71
 800da5c:	0800dbd9 	.word	0x0800dbd9
 800da60:	0800dbf5 	.word	0x0800dbf5
 800da64:	0800daf9 	.word	0x0800daf9
        case SEND_DATA_CAN_BUS : {
            printf("Send data to device test");
 800da68:	4867      	ldr	r0, [pc, #412]	@ (800dc08 <can_bus_dispatch+0x1d4>)
 800da6a:	f004 fe49 	bl	8012700 <iprintf>
            
        } break;
 800da6e:	e0c6      	b.n	800dbfe <can_bus_dispatch+0x1ca>
        case RECEIVE_DATA_CAN_BUS : {

        } break;
        case START_TIMEOUT_TX : {
            printf("start time out\n");
 800da70:	4866      	ldr	r0, [pc, #408]	@ (800dc0c <can_bus_dispatch+0x1d8>)
 800da72:	f004 fead 	bl	80127d0 <puts>
            managerTX_CAN_t *check_TX_CAN = (managerTX_CAN_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800da76:	6838      	ldr	r0, [r7, #0]
 800da78:	f002 ff87 	bl	801098a <get_data_dynamic_event>
 800da7c:	4603      	mov	r3, r0
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	60bb      	str	r3, [r7, #8]
            pOS_task->managerTX_buf[pOS_task->head_index] = check_TX_CAN;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	4413      	add	r3, r2
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d106      	bne.n	800daac <can_bus_dispatch+0x78>
                pOS_task->head_index = pOS_task->end;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 2077 	ldrb.w	r2, [r3, #119]	@ 0x77
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800daaa:	e007      	b.n	800dabc <can_bus_dispatch+0x88>
            } else {
                --pOS_task->head_index;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800dab2:	3b01      	subs	r3, #1
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
            }
            ++pOS_task->nUsed;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800dac2:	3301      	adds	r3, #1
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
            if (pOS_task->b_counting == false) { /* in free, count to check timeout */
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800dad2:	f083 0301 	eor.w	r3, r3, #1
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f000 808d 	beq.w	800dbf8 <can_bus_dispatch+0x1c4>
                pOS_task->b_counting = true;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2201      	movs	r2, #1
 800dae2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                OS_TimeEvt_Set(&pOS_task->te_timeout,500,0); /* run only 1 time */                
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	331c      	adds	r3, #28
 800daea:	2200      	movs	r2, #0
 800daec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800daf0:	4618      	mov	r0, r3
 800daf2:	f002 fd8d 	bl	8010610 <OS_TimeEvt_Set>
            }
        } break;
 800daf6:	e07f      	b.n	800dbf8 <can_bus_dispatch+0x1c4>
        case TX_TIMEOUT : {
            managerTX_CAN_t *check_TX_CAN = pOS_task->managerTX_buf[pOS_task->tail_index];
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	4413      	add	r3, r2
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	60fb      	str	r3, [r7, #12]
            if (check_TX_CAN->TX_Done) { // transmit success 
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	791b      	ldrb	r3, [r3, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d024      	beq.n	800db5c <can_bus_dispatch+0x128>
                printf("transmit CAN id %x success\n",check_TX_CAN->ID);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4619      	mov	r1, r3
 800db18:	483d      	ldr	r0, [pc, #244]	@ (800dc10 <can_bus_dispatch+0x1dc>)
 800db1a:	f004 fdf1 	bl	8012700 <iprintf>
                if (pOS_task->managerTX_buf[pOS_task->tail_index] != NULL) {
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	4413      	add	r3, r2
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d020      	beq.n	800db74 <can_bus_dispatch+0x140>
                    free(pOS_task->managerTX_buf[pOS_task->tail_index]);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	4413      	add	r3, r2
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4618      	mov	r0, r3
 800db44:	f002 ff5a 	bl	80109fc <free>
                    pOS_task->managerTX_buf[pOS_task->tail_index] = NULL;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	4413      	add	r3, r2
 800db56:	2200      	movs	r2, #0
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	e00b      	b.n	800db74 <can_bus_dispatch+0x140>
                }
            } else { // transmit error 
                /* go to warning screen */
                printf("transmit CAN id %x failed\n",check_TX_CAN->ID);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4619      	mov	r1, r3
 800db62:	482c      	ldr	r0, [pc, #176]	@ (800dc14 <can_bus_dispatch+0x1e0>)
 800db64:	f004 fdcc 	bl	8012700 <iprintf>
                warning_page(&_Screen,check_TX_CAN->ID);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4619      	mov	r1, r3
 800db6e:	482a      	ldr	r0, [pc, #168]	@ (800dc18 <can_bus_dispatch+0x1e4>)
 800db70:	f7ff fb92 	bl	800d298 <warning_page>
            }

            if (pOS_task->tail_index == 0) {
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d106      	bne.n	800db8c <can_bus_dispatch+0x158>
                    pOS_task->tail_index = pOS_task->end;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 2077 	ldrb.w	r2, [r3, #119]	@ 0x77
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
 800db8a:	e007      	b.n	800db9c <can_bus_dispatch+0x168>
                } else {
                    --pOS_task->tail_index;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800db92:	3b01      	subs	r3, #1
 800db94:	b2da      	uxtb	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                } 
            --pOS_task->nUsed;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800dba2:	3b01      	subs	r3, #1
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
            pOS_task->b_counting = false;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            /* check buff */
            if (pOS_task->nUsed > 0 ) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d01e      	beq.n	800dbfc <can_bus_dispatch+0x1c8>
                pOS_task->b_counting = true;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                OS_TimeEvt_Set(&pOS_task->te_timeout,500,0); /* run only 1 time */    
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	331c      	adds	r3, #28
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f002 fd1d 	bl	8010610 <OS_TimeEvt_Set>
            }
        } break;
 800dbd6:	e011      	b.n	800dbfc <can_bus_dispatch+0x1c8>
        case TX_SUCCESS : {
            // if (pOS_task->b_counting = true) {
                printf("tx receive slave\n");
 800dbd8:	4810      	ldr	r0, [pc, #64]	@ (800dc1c <can_bus_dispatch+0x1e8>)
 800dbda:	f004 fdf9 	bl	80127d0 <puts>
                pOS_task->managerTX_buf[pOS_task->tail_index]->TX_Done = true;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	4413      	add	r3, r2
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	711a      	strb	r2, [r3, #4]
            // }
        } break; 
 800dbf2:	e004      	b.n	800dbfe <can_bus_dispatch+0x1ca>
        case TX_FAILED : {

        } break;
        default : break;
 800dbf4:	bf00      	nop
 800dbf6:	e002      	b.n	800dbfe <can_bus_dispatch+0x1ca>
        } break;
 800dbf8:	bf00      	nop
 800dbfa:	e000      	b.n	800dbfe <can_bus_dispatch+0x1ca>
        } break;
 800dbfc:	bf00      	nop
    }
}
 800dbfe:	bf00      	nop
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	08015660 	.word	0x08015660
 800dc0c:	0801567c 	.word	0x0801567c
 800dc10:	0801568c 	.word	0x0801568c
 800dc14:	080156a8 	.word	0x080156a8
 800dc18:	20000cc8 	.word	0x20000cc8
 800dc1c:	080156c4 	.word	0x080156c4

0800dc20 <eeprom_task_init>:

AT24Cxx_t eeprom_ob;
static write_param_t *write_buf[MAX_WRITE_EEPROM_BUF]; /* buffer store the data write */

/* I2C port using for eeprom */
void eeprom_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b0b6      	sub	sp, #216	@ 0xd8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	70fb      	strb	r3, [r7, #3]
//    eeprom_ob.i2c_port = i2c_port;
//    eeprom_ob.dev_address = dev_address;
	
    /* init eeprom */
    if (AT24Cxx_Init(&eeprom_ob,dev_address,i2c_port) == AT24Cxx_Init_OK) {
 800dc2c:	78fb      	ldrb	r3, [r7, #3]
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	4619      	mov	r1, r3
 800dc32:	4856      	ldr	r0, [pc, #344]	@ (800dd8c <eeprom_task_init+0x16c>)
 800dc34:	f000 ff7e 	bl	800eb34 <AT24Cxx_Init>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d103      	bne.n	800dc46 <eeprom_task_init+0x26>
        /* init success */
        printf("Init eeprom success!!\n");
 800dc3e:	4854      	ldr	r0, [pc, #336]	@ (800dd90 <eeprom_task_init+0x170>)
 800dc40:	f004 fdc6 	bl	80127d0 <puts>
 800dc44:	e002      	b.n	800dc4c <eeprom_task_init+0x2c>
    } else {
        printf("Init eeprom fail!!\n");
 800dc46:	4853      	ldr	r0, [pc, #332]	@ (800dd94 <eeprom_task_init+0x174>)
 800dc48:	f004 fdc2 	bl	80127d0 <puts>
    }

      uint8_t data_check = 0;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    // AT24Cxx_read_buffer(&eeprom_ob,MEM_ADDR_CHECK_UPDATA_DATA_TEST,&data_check,1);
    // if (data_check == 0) {
    // } 
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_MEM_ADDR_DIREC_USED,(uint8_t *)&data_check,sizeof(data_check));
 800dc52:	f107 02d7 	add.w	r2, r7, #215	@ 0xd7
 800dc56:	2301      	movs	r3, #1
 800dc58:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800dc5c:	484b      	ldr	r0, [pc, #300]	@ (800dd8c <eeprom_task_init+0x16c>)
 800dc5e:	f000 ffb3 	bl	800ebc8 <AT24Cxx_write_buffer_bloking>
    HAL_Delay(10);
 800dc62:	200a      	movs	r0, #10
 800dc64:	f7f3 ff48 	bl	8001af8 <HAL_Delay>

    write_data_test_ic("744051",data_744051,sizeof(data_744051));
 800dc68:	22fd      	movs	r2, #253	@ 0xfd
 800dc6a:	494b      	ldr	r1, [pc, #300]	@ (800dd98 <eeprom_task_init+0x178>)
 800dc6c:	484b      	ldr	r0, [pc, #300]	@ (800dd9c <eeprom_task_init+0x17c>)
 800dc6e:	f000 faf7 	bl	800e260 <write_data_test_ic>
    write_data_test_ic("740000",data_7400,sizeof(data_7400));
 800dc72:	2295      	movs	r2, #149	@ 0x95
 800dc74:	494a      	ldr	r1, [pc, #296]	@ (800dda0 <eeprom_task_init+0x180>)
 800dc76:	484b      	ldr	r0, [pc, #300]	@ (800dda4 <eeprom_task_init+0x184>)
 800dc78:	f000 faf2 	bl	800e260 <write_data_test_ic>
    write_data_test_ic("74139",data_74139,sizeof(data_74139));
 800dc7c:	22d3      	movs	r2, #211	@ 0xd3
 800dc7e:	494a      	ldr	r1, [pc, #296]	@ (800dda8 <eeprom_task_init+0x188>)
 800dc80:	484a      	ldr	r0, [pc, #296]	@ (800ddac <eeprom_task_init+0x18c>)
 800dc82:	f000 faed 	bl	800e260 <write_data_test_ic>
    write_data_test_ic("7408",data_7408,sizeof(data_7408));
 800dc86:	2293      	movs	r2, #147	@ 0x93
 800dc88:	4949      	ldr	r1, [pc, #292]	@ (800ddb0 <eeprom_task_init+0x190>)
 800dc8a:	484a      	ldr	r0, [pc, #296]	@ (800ddb4 <eeprom_task_init+0x194>)
 800dc8c:	f000 fae8 	bl	800e260 <write_data_test_ic>
    write_data_test_ic("74157",data_74157,sizeof(data_74157));
 800dc90:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800dc94:	4948      	ldr	r1, [pc, #288]	@ (800ddb8 <eeprom_task_init+0x198>)
 800dc96:	4849      	ldr	r0, [pc, #292]	@ (800ddbc <eeprom_task_init+0x19c>)
 800dc98:	f000 fae2 	bl	800e260 <write_data_test_ic>
    write_data_test_ic("40175",data_40175,sizeof(data_40175));
 800dc9c:	22cb      	movs	r2, #203	@ 0xcb
 800dc9e:	4948      	ldr	r1, [pc, #288]	@ (800ddc0 <eeprom_task_init+0x1a0>)
 800dca0:	4848      	ldr	r0, [pc, #288]	@ (800ddc4 <eeprom_task_init+0x1a4>)
 800dca2:	f000 fadd 	bl	800e260 <write_data_test_ic>
    write_data_test_ic("40174",data_40174,sizeof(data_40174));
 800dca6:	22c3      	movs	r2, #195	@ 0xc3
 800dca8:	4947      	ldr	r1, [pc, #284]	@ (800ddc8 <eeprom_task_init+0x1a8>)
 800dcaa:	4848      	ldr	r0, [pc, #288]	@ (800ddcc <eeprom_task_init+0x1ac>)
 800dcac:	f000 fad8 	bl	800e260 <write_data_test_ic>
    write_data_test_ic("4027",data_4027,sizeof(data_4027));
 800dcb0:	22ea      	movs	r2, #234	@ 0xea
 800dcb2:	4947      	ldr	r1, [pc, #284]	@ (800ddd0 <eeprom_task_init+0x1b0>)
 800dcb4:	4847      	ldr	r0, [pc, #284]	@ (800ddd4 <eeprom_task_init+0x1b4>)
 800dcb6:	f000 fad3 	bl	800e260 <write_data_test_ic>


    uint8_t num_direc;
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 800dcba:	f107 02d6 	add.w	r2, r7, #214	@ 0xd6
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800dcc4:	4831      	ldr	r0, [pc, #196]	@ (800dd8c <eeprom_task_init+0x16c>)
 800dcc6:	f001 f86a 	bl	800ed9e <AT24Cxx_read_buffer>
    uint8_t clear_buf[TOTAL_ALL_PROGRAM_TEST_LEN] = {0};
 800dcca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dcce:	22a8      	movs	r2, #168	@ 0xa8
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f004 fec4 	bl	8012a60 <memset>
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)clear_buf,TOTAL_ALL_PROGRAM_TEST_LEN);
 800dcd8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dcdc:	23a8      	movs	r3, #168	@ 0xa8
 800dcde:	2143      	movs	r1, #67	@ 0x43
 800dce0:	482a      	ldr	r0, [pc, #168]	@ (800dd8c <eeprom_task_init+0x16c>)
 800dce2:	f000 ff71 	bl	800ebc8 <AT24Cxx_write_buffer_bloking>
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)data_program1,strlen(data_program1));
 800dce6:	2312      	movs	r3, #18
 800dce8:	4a3b      	ldr	r2, [pc, #236]	@ (800ddd8 <eeprom_task_init+0x1b8>)
 800dcea:	2143      	movs	r1, #67	@ 0x43
 800dcec:	4827      	ldr	r0, [pc, #156]	@ (800dd8c <eeprom_task_init+0x16c>)
 800dcee:	f000 ff6b 	bl	800ebc8 <AT24Cxx_write_buffer_bloking>
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(1),(uint8_t *)data_program2,strlen(data_program2));
 800dcf2:	2312      	movs	r3, #18
 800dcf4:	4a39      	ldr	r2, [pc, #228]	@ (800dddc <eeprom_task_init+0x1bc>)
 800dcf6:	216d      	movs	r1, #109	@ 0x6d
 800dcf8:	4824      	ldr	r0, [pc, #144]	@ (800dd8c <eeprom_task_init+0x16c>)
 800dcfa:	f000 ff65 	bl	800ebc8 <AT24Cxx_write_buffer_bloking>
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(2),(uint8_t *)data_program3,strlen(data_program3));
 800dcfe:	2312      	movs	r3, #18
 800dd00:	4a37      	ldr	r2, [pc, #220]	@ (800dde0 <eeprom_task_init+0x1c0>)
 800dd02:	2197      	movs	r1, #151	@ 0x97
 800dd04:	4821      	ldr	r0, [pc, #132]	@ (800dd8c <eeprom_task_init+0x16c>)
 800dd06:	f000 ff5f 	bl	800ebc8 <AT24Cxx_write_buffer_bloking>
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(3),(uint8_t *)data_program4,strlen(data_program4));
 800dd0a:	2312      	movs	r3, #18
 800dd0c:	4a35      	ldr	r2, [pc, #212]	@ (800dde4 <eeprom_task_init+0x1c4>)
 800dd0e:	21c1      	movs	r1, #193	@ 0xc1
 800dd10:	481e      	ldr	r0, [pc, #120]	@ (800dd8c <eeprom_task_init+0x16c>)
 800dd12:	f000 ff59 	bl	800ebc8 <AT24Cxx_write_buffer_bloking>
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),&buffer,strlen(data_program1));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(1),&buffer,strlen(data_program2));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(2),&buffer,strlen(data_program3));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(3),&buffer,strlen(data_program4));

    char text_program_1[] = "0";
 800dd16:	2330      	movs	r3, #48	@ 0x30
 800dd18:	813b      	strh	r3, [r7, #8]
    AT24Cxx_write_buffer(&eeprom_ob,0x02,(uint8_t *)text_program_1,strlen(text_program_1));
 800dd1a:	f107 0308 	add.w	r3, r7, #8
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f2 fa20 	bl	8000164 <strlen>
 800dd24:	4603      	mov	r3, r0
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	f107 0208 	add.w	r2, r7, #8
 800dd2c:	2102      	movs	r1, #2
 800dd2e:	4817      	ldr	r0, [pc, #92]	@ (800dd8c <eeprom_task_init+0x16c>)
 800dd30:	f000 ff22 	bl	800eb78 <AT24Cxx_write_buffer>
    /* check write data test */


    // AT24Cxx_write_buffer(&eeprom_ob,MEM_ADDR_CHECK_UPDATA_DATA_TEST,&data_check,1);

    eeprom_instance.b_is_writing = false;
 800dd34:	4b2c      	ldr	r3, [pc, #176]	@ (800dde8 <eeprom_task_init+0x1c8>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    eeprom_instance.data_eeprom.mem_addr = 0x00;
 800dd3c:	4b2a      	ldr	r3, [pc, #168]	@ (800dde8 <eeprom_task_init+0x1c8>)
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
    eeprom_instance.data_eeprom.data = (uint8_t *)0;
 800dd44:	4b28      	ldr	r3, [pc, #160]	@ (800dde8 <eeprom_task_init+0x1c8>)
 800dd46:	2200      	movs	r2, #0
 800dd48:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = 0;
 800dd4c:	4b26      	ldr	r3, [pc, #152]	@ (800dde8 <eeprom_task_init+0x1c8>)
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc

    eeprom_instance.write_params_buf = write_buf;
 800dd54:	4b24      	ldr	r3, [pc, #144]	@ (800dde8 <eeprom_task_init+0x1c8>)
 800dd56:	4a25      	ldr	r2, [pc, #148]	@ (800ddec <eeprom_task_init+0x1cc>)
 800dd58:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    eeprom_instance.head_index = 0;
 800dd5c:	4b22      	ldr	r3, [pc, #136]	@ (800dde8 <eeprom_task_init+0x1c8>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    eeprom_instance.tail_index = 0;
 800dd64:	4b20      	ldr	r3, [pc, #128]	@ (800dde8 <eeprom_task_init+0x1c8>)
 800dd66:	2200      	movs	r2, #0
 800dd68:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    eeprom_instance.end = MAX_WRITE_EEPROM_BUF - 1;
 800dd6c:	4b1e      	ldr	r3, [pc, #120]	@ (800dde8 <eeprom_task_init+0x1c8>)
 800dd6e:	2209      	movs	r2, #9
 800dd70:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
    eeprom_instance.nUsed = 0;
 800dd74:	4b1c      	ldr	r3, [pc, #112]	@ (800dde8 <eeprom_task_init+0x1c8>)
 800dd76:	2200      	movs	r2, #0
 800dd78:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6

    eeprom_ctor(&eeprom_instance);
 800dd7c:	481a      	ldr	r0, [pc, #104]	@ (800dde8 <eeprom_task_init+0x1c8>)
 800dd7e:	f000 f837 	bl	800ddf0 <eeprom_ctor>
//    printf("Setting info eeprom success\n");
}
 800dd82:	bf00      	nop
 800dd84:	37d8      	adds	r7, #216	@ 0xd8
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	20001458 	.word	0x20001458
 800dd90:	080156d8 	.word	0x080156d8
 800dd94:	080156f0 	.word	0x080156f0
 800dd98:	08015a78 	.word	0x08015a78
 800dd9c:	08015704 	.word	0x08015704
 800dda0:	08015b78 	.word	0x08015b78
 800dda4:	0801570c 	.word	0x0801570c
 800dda8:	08015c10 	.word	0x08015c10
 800ddac:	08015714 	.word	0x08015714
 800ddb0:	08015ce4 	.word	0x08015ce4
 800ddb4:	0801571c 	.word	0x0801571c
 800ddb8:	08015d78 	.word	0x08015d78
 800ddbc:	08015724 	.word	0x08015724
 800ddc0:	08015e90 	.word	0x08015e90
 800ddc4:	0801572c 	.word	0x0801572c
 800ddc8:	08015f5c 	.word	0x08015f5c
 800ddcc:	08015734 	.word	0x08015734
 800ddd0:	08016020 	.word	0x08016020
 800ddd4:	0801573c 	.word	0x0801573c
 800ddd8:	08015a28 	.word	0x08015a28
 800dddc:	08015a3c 	.word	0x08015a3c
 800dde0:	08015a50 	.word	0x08015a50
 800dde4:	08015a64 	.word	0x08015a64
 800dde8:	2000137c 	.word	0x2000137c
 800ddec:	20001460 	.word	0x20001460

0800ddf0 <eeprom_ctor>:

void eeprom_ctor(app_eeprom *pAO) {
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
    /* init task */
    OS_task_init(AO_task_eeprom,(OS_handler)&eeprom_init,(OS_handler)&eeprom_dispatch);
 800ddf8:	4b09      	ldr	r3, [pc, #36]	@ (800de20 <eeprom_ctor+0x30>)
 800ddfa:	4a0a      	ldr	r2, [pc, #40]	@ (800de24 <eeprom_ctor+0x34>)
 800ddfc:	490a      	ldr	r1, [pc, #40]	@ (800de28 <eeprom_ctor+0x38>)
 800ddfe:	4618      	mov	r0, r3
 800de00:	f002 fb10 	bl	8010424 <OS_task_init>

    /* init time */
    OS_TimeEvt_init(&eeprom_instance.time_wait,FINISH_WRITE,&eeprom_instance.task);
 800de04:	4a06      	ldr	r2, [pc, #24]	@ (800de20 <eeprom_ctor+0x30>)
 800de06:	2103      	movs	r1, #3
 800de08:	4808      	ldr	r0, [pc, #32]	@ (800de2c <eeprom_ctor+0x3c>)
 800de0a:	f002 fbdb 	bl	80105c4 <OS_TimeEvt_init>
    OS_TimeEvt_init(&eeprom_instance.time_check,CHECK_WRITE_BUF,&eeprom_instance.task);
 800de0e:	4a04      	ldr	r2, [pc, #16]	@ (800de20 <eeprom_ctor+0x30>)
 800de10:	2101      	movs	r1, #1
 800de12:	4807      	ldr	r0, [pc, #28]	@ (800de30 <eeprom_ctor+0x40>)
 800de14:	f002 fbd6 	bl	80105c4 <OS_TimeEvt_init>
}
 800de18:	bf00      	nop
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	2000137c 	.word	0x2000137c
 800de24:	0800ded5 	.word	0x0800ded5
 800de28:	0800de35 	.word	0x0800de35
 800de2c:	20001398 	.word	0x20001398
 800de30:	200013ec 	.word	0x200013ec

0800de34 <eeprom_init>:

static void eeprom_init(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
    /* init time */
    OS_TimeEvt_Stop(&eeprom_instance.time_check); /* don't using time when init */
 800de3e:	4821      	ldr	r0, [pc, #132]	@ (800dec4 <eeprom_init+0x90>)
 800de40:	f002 fbfd 	bl	801063e <OS_TimeEvt_Stop>
    OS_TimeEvt_Stop(&eeprom_instance.time_wait); 
 800de44:	4820      	ldr	r0, [pc, #128]	@ (800dec8 <eeprom_init+0x94>)
 800de46:	f002 fbfa 	bl	801063e <OS_TimeEvt_Stop>

    /* read data program run */
    eeprom_instance.data_eeprom.data = malloc(TOTAL_ALL_PROGRAM_TEST_LEN);
 800de4a:	20a8      	movs	r0, #168	@ 0xa8
 800de4c:	f002 fdce 	bl	80109ec <malloc>
 800de50:	4603      	mov	r3, r0
 800de52:	461a      	mov	r2, r3
 800de54:	4b1d      	ldr	r3, [pc, #116]	@ (800decc <eeprom_init+0x98>)
 800de56:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = TOTAL_ALL_PROGRAM_TEST_LEN;
 800de5a:	4b1c      	ldr	r3, [pc, #112]	@ (800decc <eeprom_init+0x98>)
 800de5c:	22a8      	movs	r2, #168	@ 0xa8
 800de5e:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),
 800de62:	4b1a      	ldr	r3, [pc, #104]	@ (800decc <eeprom_init+0x98>)
 800de64:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800de68:	23a8      	movs	r3, #168	@ 0xa8
 800de6a:	2143      	movs	r1, #67	@ 0x43
 800de6c:	4818      	ldr	r0, [pc, #96]	@ (800ded0 <eeprom_init+0x9c>)
 800de6e:	f000 ff96 	bl	800ed9e <AT24Cxx_read_buffer>
                        eeprom_instance.data_eeprom.data,TOTAL_ALL_PROGRAM_TEST_LEN);

    data_eeprom_t *data_eeprom_read = (data_eeprom_t *)malloc(sizeof(data_eeprom_t));
 800de72:	200c      	movs	r0, #12
 800de74:	f002 fdba 	bl	80109ec <malloc>
 800de78:	4603      	mov	r3, r0
 800de7a:	60fb      	str	r3, [r7, #12]
    data_eeprom_read->data_len = eeprom_instance.data_eeprom.data_len;
 800de7c:	4b13      	ldr	r3, [pc, #76]	@ (800decc <eeprom_init+0x98>)
 800de7e:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	811a      	strh	r2, [r3, #8]
    data_eeprom_read->data = (uint8_t *)malloc(eeprom_instance.data_eeprom.data_len);
 800de86:	4b11      	ldr	r3, [pc, #68]	@ (800decc <eeprom_init+0x98>)
 800de88:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800de8c:	4618      	mov	r0, r3
 800de8e:	f002 fdad 	bl	80109ec <malloc>
 800de92:	4603      	mov	r3, r0
 800de94:	461a      	mov	r2, r3
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	605a      	str	r2, [r3, #4]
    memcpy(data_eeprom_read->data,eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	4a0b      	ldr	r2, [pc, #44]	@ (800decc <eeprom_init+0x98>)
 800dea0:	f8d2 10c8 	ldr.w	r1, [r2, #200]	@ 0xc8
 800dea4:	4a09      	ldr	r2, [pc, #36]	@ (800decc <eeprom_init+0x98>)
 800dea6:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	@ 0xcc
 800deaa:	4618      	mov	r0, r3
 800deac:	f004 ff21 	bl	8012cf2 <memcpy>
    


    // OS_task_post_event(AO_BlinkyTest,READ_ALL_PROGRAM_TEST,(uint8_t *)&data_eeprom_read,sizeof(data_eeprom_t *));

    free(eeprom_instance.data_eeprom.data);
 800deb0:	4b06      	ldr	r3, [pc, #24]	@ (800decc <eeprom_init+0x98>)
 800deb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800deb6:	4618      	mov	r0, r3
 800deb8:	f002 fda0 	bl	80109fc <free>

}
 800debc:	bf00      	nop
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	200013ec 	.word	0x200013ec
 800dec8:	20001398 	.word	0x20001398
 800decc:	2000137c 	.word	0x2000137c
 800ded0:	20001458 	.word	0x20001458

0800ded4 <eeprom_dispatch>:

void eeprom_dispatch(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b086      	sub	sp, #24
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	881b      	ldrh	r3, [r3, #0]
 800dee2:	2b05      	cmp	r3, #5
 800dee4:	f200 816e 	bhi.w	800e1c4 <eeprom_dispatch+0x2f0>
 800dee8:	a201      	add	r2, pc, #4	@ (adr r2, 800def0 <eeprom_dispatch+0x1c>)
 800deea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deee:	bf00      	nop
 800def0:	0800e047 	.word	0x0800e047
 800def4:	0800e1c5 	.word	0x0800e1c5
 800def8:	0800e195 	.word	0x0800e195
 800defc:	0800e097 	.word	0x0800e097
 800df00:	0800df09 	.word	0x0800df09
 800df04:	0800df53 	.word	0x0800df53
        case READ_EEPROM : {
            data_eeprom_t *data_read = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800df08:	6838      	ldr	r0, [r7, #0]
 800df0a:	f002 fd3e 	bl	801098a <get_data_dynamic_event>
 800df0e:	4603      	mov	r3, r0
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	60fb      	str	r3, [r7, #12]
            eeprom_instance.data_eeprom.data = malloc(data_read->data_len);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	891b      	ldrh	r3, [r3, #8]
 800df18:	4618      	mov	r0, r3
 800df1a:	f002 fd67 	bl	80109ec <malloc>
 800df1e:	4603      	mov	r3, r0
 800df20:	461a      	mov	r2, r3
 800df22:	4bad      	ldr	r3, [pc, #692]	@ (800e1d8 <eeprom_dispatch+0x304>)
 800df24:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            AT24Cxx_read_buffer(&eeprom_ob,data_read->mem_addr,
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	8819      	ldrh	r1, [r3, #0]
 800df2c:	4baa      	ldr	r3, [pc, #680]	@ (800e1d8 <eeprom_dispatch+0x304>)
 800df2e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800df32:	4ba9      	ldr	r3, [pc, #676]	@ (800e1d8 <eeprom_dispatch+0x304>)
 800df34:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800df38:	48a8      	ldr	r0, [pc, #672]	@ (800e1dc <eeprom_dispatch+0x308>)
 800df3a:	f000 ff30 	bl	800ed9e <AT24Cxx_read_buffer>
                                eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
            // printf("Data read eeprom : %s\n",eeprom_instance.data_eeprom.data);
            free(eeprom_instance.data_eeprom.data);
 800df3e:	4ba6      	ldr	r3, [pc, #664]	@ (800e1d8 <eeprom_dispatch+0x304>)
 800df40:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800df44:	4618      	mov	r0, r3
 800df46:	f002 fd59 	bl	80109fc <free>
            free(data_read);
 800df4a:	68f8      	ldr	r0, [r7, #12]
 800df4c:	f002 fd56 	bl	80109fc <free>
            
        } break;
 800df50:	e13d      	b.n	800e1ce <eeprom_dispatch+0x2fa>
        case WRITE_EEPROM : {
            printf("Write eeprom\n");
 800df52:	48a3      	ldr	r0, [pc, #652]	@ (800e1e0 <eeprom_dispatch+0x30c>)
 800df54:	f004 fc3c 	bl	80127d0 <puts>
            data_eeprom_t *data_receive = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800df58:	6838      	ldr	r0, [r7, #0]
 800df5a:	f002 fd16 	bl	801098a <get_data_dynamic_event>
 800df5e:	4603      	mov	r3, r0
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	617b      	str	r3, [r7, #20]
            write_param_t *e_write = (write_param_t *)malloc(sizeof(write_param_t));
 800df64:	2010      	movs	r0, #16
 800df66:	f002 fd41 	bl	80109ec <malloc>
 800df6a:	4603      	mov	r3, r0
 800df6c:	613b      	str	r3, [r7, #16]
            // e_write->byte_first_page = AT24C256_PG_SIZE - data_receive->mem_addr % AT24C256_PG_SIZE;
            // e_write->page_write = (data_receive->data_len - e_write->byte_first_page) / AT24C256_PG_SIZE;
            // e_write->byte_remain = (data_receive->data_len - e_write->byte_first_page) % AT24C256_PG_SIZE;
            e_write->data_written = 0;
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	2200      	movs	r2, #0
 800df72:	815a      	strh	r2, [r3, #10]
            e_write->data_lastlen = 0;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	2200      	movs	r2, #0
 800df78:	819a      	strh	r2, [r3, #12]
            e_write->mem_addr = data_receive->mem_addr;
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	881a      	ldrh	r2, [r3, #0]
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	801a      	strh	r2, [r3, #0]
            e_write->data_len = data_receive->data_len;
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	891a      	ldrh	r2, [r3, #8]
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	811a      	strh	r2, [r3, #8]
            e_write->data = (uint8_t *)malloc(data_receive->data_len);
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	891b      	ldrh	r3, [r3, #8]
 800df8e:	4618      	mov	r0, r3
 800df90:	f002 fd2c 	bl	80109ec <malloc>
 800df94:	4603      	mov	r3, r0
 800df96:	461a      	mov	r2, r3
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	605a      	str	r2, [r3, #4]
            memcpy(e_write->data,data_receive->data,data_receive->data_len);
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	6858      	ldr	r0, [r3, #4]
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	6859      	ldr	r1, [r3, #4]
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	891b      	ldrh	r3, [r3, #8]
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	f004 fea2 	bl	8012cf2 <memcpy>

            pOS_task->write_params_buf[pOS_task->head_index] = e_write; /* insert to buffer */
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	4413      	add	r3, r2
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d106      	bne.n	800dfda <eeprom_dispatch+0x106>
                pOS_task->head_index = pOS_task->end;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
 800dfd8:	e007      	b.n	800dfea <eeprom_dispatch+0x116>
            } else {
                --pOS_task->head_index;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800dfe0:	3b01      	subs	r3, #1
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
            }
            ++pOS_task->nUsed;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 800dff0:	3301      	adds	r3, #1
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
            
            if (data_receive->data != NULL) free(data_receive->data);
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d004      	beq.n	800e00c <eeprom_dispatch+0x138>
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	4618      	mov	r0, r3
 800e008:	f002 fcf8 	bl	80109fc <free>
            free(data_receive);
 800e00c:	6978      	ldr	r0, [r7, #20]
 800e00e:	f002 fcf5 	bl	80109fc <free>

            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800e018:	f083 0301 	eor.w	r3, r3, #1
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f000 80d2 	beq.w	800e1c8 <eeprom_dispatch+0x2f4>
                pOS_task->b_is_writing = true;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4413      	add	r3, r2
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 f8d0 	bl	800e1e4 <write_buffer_with_task>
            }
        } break;
 800e044:	e0c0      	b.n	800e1c8 <eeprom_dispatch+0x2f4>
        case WAIT_WRITE_TIMEOUT : {
            /* wait ~10ms for eeprom write complete */
            pOS_task->write_params_buf[pOS_task->tail_index]->data_written += pOS_task->write_params_buf[pOS_task->tail_index]->data_lastlen;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4413      	add	r3, r2
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	8959      	ldrh	r1, [r3, #10]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	899a      	ldrh	r2, [r3, #12]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	4403      	add	r3, r0
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	440a      	add	r2, r1
 800e082:	b292      	uxth	r2, r2
 800e084:	815a      	strh	r2, [r3, #10]

            OS_TimeEvt_Set(&pOS_task->time_wait,11,0); /* run only 1 time */
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	331c      	adds	r3, #28
 800e08a:	2200      	movs	r2, #0
 800e08c:	210b      	movs	r1, #11
 800e08e:	4618      	mov	r0, r3
 800e090:	f002 fabe 	bl	8010610 <OS_TimeEvt_Set>
        } break;
 800e094:	e09b      	b.n	800e1ce <eeprom_dispatch+0x2fa>
        case FINISH_WRITE : {
            if (pOS_task->write_params_buf[pOS_task->tail_index]->data_written < pOS_task->write_params_buf[pOS_task->tail_index]->data_len) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	4413      	add	r3, r2
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	895a      	ldrh	r2, [r3, #10]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	440b      	add	r3, r1
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	891b      	ldrh	r3, [r3, #8]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d20c      	bcs.n	800e0dc <eeprom_dispatch+0x208>
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4413      	add	r3, r2
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f000 f885 	bl	800e1e4 <write_buffer_with_task>
                /* Check buf */
                if (pOS_task->nUsed > 0) {
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
                }
            }
        } break; 
 800e0da:	e077      	b.n	800e1cc <eeprom_dispatch+0x2f8>
                if (pOS_task->write_params_buf[pOS_task->tail_index]->data != NULL) {
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4413      	add	r3, r2
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00c      	beq.n	800e10e <eeprom_dispatch+0x23a>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]->data);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4413      	add	r3, r2
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	4618      	mov	r0, r3
 800e10a:	f002 fc77 	bl	80109fc <free>
                if (pOS_task->write_params_buf[pOS_task->tail_index] != NULL) {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00b      	beq.n	800e13c <eeprom_dispatch+0x268>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	4413      	add	r3, r2
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4618      	mov	r0, r3
 800e138:	f002 fc60 	bl	80109fc <free>
                if (pOS_task->tail_index == 0) {
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e142:	2b00      	cmp	r3, #0
 800e144:	d106      	bne.n	800e154 <eeprom_dispatch+0x280>
                    pOS_task->tail_index = pOS_task->end;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
 800e152:	e007      	b.n	800e164 <eeprom_dispatch+0x290>
                    --pOS_task->tail_index;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e15a:	3b01      	subs	r3, #1
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
                --pOS_task->nUsed;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 800e16a:	3b01      	subs	r3, #1
 800e16c:	b2da      	uxtb	r2, r3
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
                pOS_task->b_is_writing = false;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2200      	movs	r2, #0
 800e178:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                if (pOS_task->nUsed > 0) {
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 800e182:	2b00      	cmp	r3, #0
 800e184:	d022      	beq.n	800e1cc <eeprom_dispatch+0x2f8>
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
 800e186:	4814      	ldr	r0, [pc, #80]	@ (800e1d8 <eeprom_dispatch+0x304>)
 800e188:	2300      	movs	r3, #0
 800e18a:	2200      	movs	r2, #0
 800e18c:	2102      	movs	r1, #2
 800e18e:	f002 f9fb 	bl	8010588 <OS_task_post_event>
        } break; 
 800e192:	e01b      	b.n	800e1cc <eeprom_dispatch+0x2f8>
        case WRITE_EEPROM_IN_BUF : {
            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800e19a:	f083 0301 	eor.w	r3, r3, #1
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00f      	beq.n	800e1c4 <eeprom_dispatch+0x2f0>
                pOS_task->b_is_writing = true;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	4413      	add	r3, r2
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f000 f810 	bl	800e1e4 <write_buffer_with_task>
            }
        }
        default : break;
 800e1c4:	bf00      	nop
 800e1c6:	e002      	b.n	800e1ce <eeprom_dispatch+0x2fa>
        } break;
 800e1c8:	bf00      	nop
 800e1ca:	e000      	b.n	800e1ce <eeprom_dispatch+0x2fa>
        } break; 
 800e1cc:	bf00      	nop
    }
}
 800e1ce:	bf00      	nop
 800e1d0:	3718      	adds	r7, #24
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	2000137c 	.word	0x2000137c
 800e1dc:	20001458 	.word	0x20001458
 800e1e0:	08015744 	.word	0x08015744

0800e1e4 <write_buffer_with_task>:

static void write_buffer_with_task(write_param_t *pWrite_params) {
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
    uint16_t byte_remain = pWrite_params->data_len - pWrite_params->data_written;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	891a      	ldrh	r2, [r3, #8]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	895b      	ldrh	r3, [r3, #10]
 800e1f4:	1ad3      	subs	r3, r2, r3
 800e1f6:	81bb      	strh	r3, [r7, #12]
    uint8_t written_in_page = (pWrite_params->mem_addr + pWrite_params->data_written) % AT24C256_PG_SIZE;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	881b      	ldrh	r3, [r3, #0]
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	895b      	ldrh	r3, [r3, #10]
 800e202:	b2db      	uxtb	r3, r3
 800e204:	4413      	add	r3, r2
 800e206:	b2db      	uxtb	r3, r3
 800e208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e20c:	72fb      	strb	r3, [r7, #11]
    uint8_t byte_in_page = AT24C256_PG_SIZE - written_in_page;
 800e20e:	7afb      	ldrb	r3, [r7, #11]
 800e210:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800e214:	72bb      	strb	r3, [r7, #10]
    uint16_t addr_write = pWrite_params->mem_addr + pWrite_params->data_written;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	881a      	ldrh	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	895b      	ldrh	r3, [r3, #10]
 800e21e:	4413      	add	r3, r2
 800e220:	813b      	strh	r3, [r7, #8]
    uint8_t len_write;
    if (byte_remain < byte_in_page) {
 800e222:	7abb      	ldrb	r3, [r7, #10]
 800e224:	b29b      	uxth	r3, r3
 800e226:	89ba      	ldrh	r2, [r7, #12]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d202      	bcs.n	800e232 <write_buffer_with_task+0x4e>
        len_write = byte_remain;
 800e22c:	89bb      	ldrh	r3, [r7, #12]
 800e22e:	73fb      	strb	r3, [r7, #15]
 800e230:	e001      	b.n	800e236 <write_buffer_with_task+0x52>
    } else {
        len_write = byte_in_page;
 800e232:	7abb      	ldrb	r3, [r7, #10]
 800e234:	73fb      	strb	r3, [r7, #15]
    }
    pWrite_params->data_lastlen = len_write;
 800e236:	7bfb      	ldrb	r3, [r7, #15]
 800e238:	b29a      	uxth	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	819a      	strh	r2, [r3, #12]
    AT24Cxx_write_buffer(&eeprom_ob,addr_write,pWrite_params->data + pWrite_params->data_written,len_write);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	8952      	ldrh	r2, [r2, #10]
 800e246:	441a      	add	r2, r3
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	8939      	ldrh	r1, [r7, #8]
 800e24e:	4803      	ldr	r0, [pc, #12]	@ (800e25c <write_buffer_with_task+0x78>)
 800e250:	f000 fc92 	bl	800eb78 <AT24Cxx_write_buffer>
}
 800e254:	bf00      	nop
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	20001458 	.word	0x20001458

0800e260 <write_data_test_ic>:

void write_data_test_ic(const char *icName, const char *Data, uint16_t len) {
 800e260:	b580      	push	{r7, lr}
 800e262:	b08c      	sub	sp, #48	@ 0x30
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	4613      	mov	r3, r2
 800e26c:	80fb      	strh	r3, [r7, #6]
    uint8_t num_direc = 0;
 800e26e:	2300      	movs	r3, #0
 800e270:	77fb      	strb	r3, [r7, #31]
    uint16_t dir_addr, data_addr;
    uint16_t mem_pre, len_pre;
    direc_EEPROM_t *Directory_pre;
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 800e272:	f107 021f 	add.w	r2, r7, #31
 800e276:	2301      	movs	r3, #1
 800e278:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e27c:	4842      	ldr	r0, [pc, #264]	@ (800e388 <write_data_test_ic+0x128>)
 800e27e:	f000 fd8e 	bl	800ed9e <AT24Cxx_read_buffer>
    dir_addr = START_MEM_ADDR_DATA_DIREC + (num_direc * sizeof(direc_EEPROM_t));
 800e282:	7ffb      	ldrb	r3, [r7, #31]
 800e284:	461a      	mov	r2, r3
 800e286:	0052      	lsls	r2, r2, #1
 800e288:	4413      	add	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	f203 2382 	addw	r3, r3, #642	@ 0x282
 800e292:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (num_direc == 0) { /* first */ 
 800e294:	7ffb      	ldrb	r3, [r7, #31]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d103      	bne.n	800e2a2 <write_data_test_ic+0x42>
        data_addr = START_MEM_ADDR_DATA_TEST ;
 800e29a:	f240 3373 	movw	r3, #883	@ 0x373
 800e29e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800e2a0:	e033      	b.n	800e30a <write_data_test_ic+0xaa>
    } else {
        uint8_t *temp_buf = (uint8_t *)malloc(sizeof(direc_EEPROM_t));
 800e2a2:	200c      	movs	r0, #12
 800e2a4:	f002 fba2 	bl	80109ec <malloc>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC + ((num_direc - 1) * sizeof(direc_EEPROM_t)),temp_buf,sizeof(direc_EEPROM_t));
 800e2ac:	7ffb      	ldrb	r3, [r7, #31]
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	0052      	lsls	r2, r2, #1
 800e2b6:	4413      	add	r3, r2
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	f203 2382 	addw	r3, r3, #642	@ 0x282
 800e2c0:	b299      	uxth	r1, r3
 800e2c2:	230c      	movs	r3, #12
 800e2c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2c6:	4830      	ldr	r0, [pc, #192]	@ (800e388 <write_data_test_ic+0x128>)
 800e2c8:	f000 fd69 	bl	800ed9e <AT24Cxx_read_buffer>
        Directory_pre = (direc_EEPROM_t *)temp_buf;
 800e2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ce:	627b      	str	r3, [r7, #36]	@ 0x24
        mem_pre = (uint16_t)((Directory_pre->addr[0] << 8) | Directory_pre->addr[1]);
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d2:	7a1b      	ldrb	r3, [r3, #8]
 800e2d4:	b21b      	sxth	r3, r3
 800e2d6:	021b      	lsls	r3, r3, #8
 800e2d8:	b21a      	sxth	r2, r3
 800e2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2dc:	7a5b      	ldrb	r3, [r3, #9]
 800e2de:	b21b      	sxth	r3, r3
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	b21b      	sxth	r3, r3
 800e2e4:	847b      	strh	r3, [r7, #34]	@ 0x22
        len_pre = (uint16_t)((Directory_pre->length[0] << 8) | Directory_pre->length[1]);
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e8:	7a9b      	ldrb	r3, [r3, #10]
 800e2ea:	b21b      	sxth	r3, r3
 800e2ec:	021b      	lsls	r3, r3, #8
 800e2ee:	b21a      	sxth	r2, r3
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f2:	7adb      	ldrb	r3, [r3, #11]
 800e2f4:	b21b      	sxth	r3, r3
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	b21b      	sxth	r3, r3
 800e2fa:	843b      	strh	r3, [r7, #32]
        data_addr = mem_pre + len_pre;
 800e2fc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e2fe:	8c3b      	ldrh	r3, [r7, #32]
 800e300:	4413      	add	r3, r2
 800e302:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        free(temp_buf);
 800e304:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e306:	f002 fb79 	bl	80109fc <free>
    }
    /* write data */

    AT24Cxx_write_buffer_bloking(&eeprom_ob,data_addr,Data,len);
 800e30a:	88fb      	ldrh	r3, [r7, #6]
 800e30c:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	481d      	ldr	r0, [pc, #116]	@ (800e388 <write_data_test_ic+0x128>)
 800e312:	f000 fc59 	bl	800ebc8 <AT24Cxx_write_buffer_bloking>

    /* get the directory data */
    direc_EEPROM_t direc;
    memset(direc.nameIC,0,sizeof(direc.nameIC));
 800e316:	f107 0310 	add.w	r3, r7, #16
 800e31a:	2208      	movs	r2, #8
 800e31c:	2100      	movs	r1, #0
 800e31e:	4618      	mov	r0, r3
 800e320:	f004 fb9e 	bl	8012a60 <memset>
    memcpy(direc.nameIC,icName,strlen(icName));
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f7f1 ff1d 	bl	8000164 <strlen>
 800e32a:	4602      	mov	r2, r0
 800e32c:	f107 0310 	add.w	r3, r7, #16
 800e330:	68f9      	ldr	r1, [r7, #12]
 800e332:	4618      	mov	r0, r3
 800e334:	f004 fcdd 	bl	8012cf2 <memcpy>
    direc.addr[0] = ((data_addr >> 8) & 0xFF);
 800e338:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e33a:	0a1b      	lsrs	r3, r3, #8
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	763b      	strb	r3, [r7, #24]
    direc.addr[1] = ((data_addr) & 0xFF);
 800e342:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e344:	b2db      	uxtb	r3, r3
 800e346:	767b      	strb	r3, [r7, #25]
    direc.length[0] = ((len >> 8) & 0xFF);
 800e348:	88fb      	ldrh	r3, [r7, #6]
 800e34a:	0a1b      	lsrs	r3, r3, #8
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	76bb      	strb	r3, [r7, #26]
    direc.length[1] = ((len) & 0xFF);
 800e352:	88fb      	ldrh	r3, [r7, #6]
 800e354:	b2db      	uxtb	r3, r3
 800e356:	76fb      	strb	r3, [r7, #27]
    AT24Cxx_write_buffer_bloking(&eeprom_ob,dir_addr,(uint8_t *)&direc,sizeof(direc_EEPROM_t));
 800e358:	f107 0210 	add.w	r2, r7, #16
 800e35c:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800e35e:	230c      	movs	r3, #12
 800e360:	4809      	ldr	r0, [pc, #36]	@ (800e388 <write_data_test_ic+0x128>)
 800e362:	f000 fc31 	bl	800ebc8 <AT24Cxx_write_buffer_bloking>
    ++num_direc;
 800e366:	7ffb      	ldrb	r3, [r7, #31]
 800e368:	3301      	adds	r3, #1
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	77fb      	strb	r3, [r7, #31]
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 800e36e:	f107 021f 	add.w	r2, r7, #31
 800e372:	2301      	movs	r3, #1
 800e374:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e378:	4803      	ldr	r0, [pc, #12]	@ (800e388 <write_data_test_ic+0x128>)
 800e37a:	f000 fc25 	bl	800ebc8 <AT24Cxx_write_buffer_bloking>
}
 800e37e:	bf00      	nop
 800e380:	3730      	adds	r7, #48	@ 0x30
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	20001458 	.word	0x20001458

0800e38c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void);
void I2C2_EV_IRQHandler(void);
void RTC_IRQHandler(void);

void I2C1_ER_IRQHandler(void) { 
 800e38c:	b480      	push	{r7}
 800e38e:	af00      	add	r7, sp, #0
    // OS_task_activate(1);  
    // HAL_NVIC_ClearPendingIRQ(I2C1_ER_IRQn); // clear NVIC pending bit
}
 800e390:	bf00      	nop
 800e392:	46bd      	mov	sp, r7
 800e394:	bc80      	pop	{r7}
 800e396:	4770      	bx	lr

0800e398 <RTC_IRQHandler>:
void RTC_IRQHandler(void) {
 800e398:	b580      	push	{r7, lr}
 800e39a:	af00      	add	r7, sp, #0
    OS_task_activate(1);  
 800e39c:	2001      	movs	r0, #1
 800e39e:	f002 f99d 	bl	80106dc <OS_task_activate>
}
 800e3a2:	bf00      	nop
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void) {
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	af00      	add	r7, sp, #0
    OS_task_activate(2);
 800e3aa:	2002      	movs	r0, #2
 800e3ac:	f002 f996 	bl	80106dc <OS_task_activate>
}
 800e3b0:	bf00      	nop
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <BSP_init>:

/* hardware-specific support code run on a specific hardware platform */
void BSP_init(void) {
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	af00      	add	r7, sp, #0
    /* init event pool */
    dynamic_event_pool_init();
 800e3b8:	f002 fa3e 	bl	8010838 <dynamic_event_pool_init>
    
    /* Set IRQ number for priority used in OS */
    OS_prio_setIRQ(1,RTC_IRQn);
 800e3bc:	2103      	movs	r1, #3
 800e3be:	2001      	movs	r0, #1
 800e3c0:	f002 fa10 	bl	80107e4 <OS_prio_setIRQ>
    OS_prio_setIRQ(2,I2C2_EV_IRQn);
 800e3c4:	2121      	movs	r1, #33	@ 0x21
 800e3c6:	2002      	movs	r0, #2
 800e3c8:	f002 fa0c 	bl	80107e4 <OS_prio_setIRQ>

    OS_priority_IRQ(RTC_IRQn,1);
 800e3cc:	2101      	movs	r1, #1
 800e3ce:	2003      	movs	r0, #3
 800e3d0:	f002 f9ee 	bl	80107b0 <OS_priority_IRQ>
    OS_priority_IRQ(I2C2_EV_IRQn,2);
 800e3d4:	2102      	movs	r1, #2
 800e3d6:	2021      	movs	r0, #33	@ 0x21
 800e3d8:	f002 f9ea 	bl	80107b0 <OS_priority_IRQ>

    OS_Test_setIRQ(AO_BlinkyTest,RTC_IRQn);    
 800e3dc:	4b09      	ldr	r3, [pc, #36]	@ (800e404 <BSP_init+0x50>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2103      	movs	r1, #3
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f002 fa1a 	bl	801081c <OS_Test_setIRQ>
//    OS_Test_setIRQ(AO_taskPost,RTC_IRQn);
    OS_Test_setIRQ(AO_task_eeprom,RTC_IRQn);
 800e3e8:	4b07      	ldr	r3, [pc, #28]	@ (800e408 <BSP_init+0x54>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2103      	movs	r1, #3
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f002 fa14 	bl	801081c <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_task_uart_esp32,I2C2_EV_IRQn);
 800e3f4:	4b05      	ldr	r3, [pc, #20]	@ (800e40c <BSP_init+0x58>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2121      	movs	r1, #33	@ 0x21
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f002 fa0e 	bl	801081c <OS_Test_setIRQ>
}
 800e400:	bf00      	nop
 800e402:	bd80      	pop	{r7, pc}
 800e404:	08016118 	.word	0x08016118
 800e408:	0801610c 	.word	0x0801610c
 800e40c:	08016114 	.word	0x08016114

0800e410 <ds3231_task_init>:
#include "app_main.h"
#include "../Core/Inc/main.h"

DS3231_t ds3231;

void ds3231_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	460b      	mov	r3, r1
 800e41a:	70fb      	strb	r3, [r7, #3]
    DS3231_Init(&ds3231,i2c_port,dev_address);
 800e41c:	78fb      	ldrb	r3, [r7, #3]
 800e41e:	b29b      	uxth	r3, r3
 800e420:	461a      	mov	r2, r3
 800e422:	6879      	ldr	r1, [r7, #4]
 800e424:	4803      	ldr	r0, [pc, #12]	@ (800e434 <ds3231_task_init+0x24>)
 800e426:	f000 fd1d 	bl	800ee64 <DS3231_Init>
 800e42a:	bf00      	nop
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	20001488 	.word	0x20001488

0800e438 <screen_task_init>:
static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent);

static app_screen screen_instance;
OS_task * const AO_task_screen = &screen_instance.task;

void screen_task_init(void) {
 800e438:	b580      	push	{r7, lr}
 800e43a:	af00      	add	r7, sp, #0
    screen_ctor(&screen_instance);
 800e43c:	4802      	ldr	r0, [pc, #8]	@ (800e448 <screen_task_init+0x10>)
 800e43e:	f000 f805 	bl	800e44c <screen_ctor>
}
 800e442:	bf00      	nop
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20001490 	.word	0x20001490

0800e44c <screen_ctor>:

void screen_ctor(app_screen *pAO) {
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_screen,(OS_handler)screen_init,(OS_handler)screen_dispatch);
 800e454:	4b08      	ldr	r3, [pc, #32]	@ (800e478 <screen_ctor+0x2c>)
 800e456:	4a09      	ldr	r2, [pc, #36]	@ (800e47c <screen_ctor+0x30>)
 800e458:	4909      	ldr	r1, [pc, #36]	@ (800e480 <screen_ctor+0x34>)
 800e45a:	4618      	mov	r0, r3
 800e45c:	f001 ffe2 	bl	8010424 <OS_task_init>

    OS_TimeEvt_init(&pAO->te_rtc,UPDATE_RTC,&pAO->task);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	331c      	adds	r3, #28
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	2101      	movs	r1, #1
 800e468:	4618      	mov	r0, r3
 800e46a:	f002 f8ab 	bl	80105c4 <OS_TimeEvt_init>
}
 800e46e:	bf00      	nop
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	20001490 	.word	0x20001490
 800e47c:	0800e4a9 	.word	0x0800e4a9
 800e480:	0800e485 	.word	0x0800e485

0800e484 <screen_init>:

static void screen_init(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Set(&pOS_task->te_rtc,100,1000);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	331c      	adds	r3, #28
 800e492:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e496:	2164      	movs	r1, #100	@ 0x64
 800e498:	4618      	mov	r0, r3
 800e49a:	f002 f8b9 	bl	8010610 <OS_TimeEvt_Set>
    UNUSED(pEvent);
} 
 800e49e:	bf00      	nop
 800e4a0:	3708      	adds	r7, #8
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
	...

0800e4a8 <screen_dispatch>:

static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b08e      	sub	sp, #56	@ 0x38
 800e4ac:	af02      	add	r7, sp, #8
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	881b      	ldrh	r3, [r3, #0]
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	f200 80a9 	bhi.w	800e60e <screen_dispatch+0x166>
 800e4bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e4c4 <screen_dispatch+0x1c>)
 800e4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c2:	bf00      	nop
 800e4c4:	0800e4d5 	.word	0x0800e4d5
 800e4c8:	0800e4fd 	.word	0x0800e4fd
 800e4cc:	0800e5b5 	.word	0x0800e5b5
 800e4d0:	0800e579 	.word	0x0800e579
        case DEIVCE_TEST_FINISH : {
            printf("Device test success!!\n");
 800e4d4:	4850      	ldr	r0, [pc, #320]	@ (800e618 <screen_dispatch+0x170>)
 800e4d6:	f004 f97b 	bl	80127d0 <puts>
            uint8_t *device_finish = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e4da:	6838      	ldr	r0, [r7, #0]
 800e4dc:	f002 fa55 	bl	801098a <get_data_dynamic_event>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	627b      	str	r3, [r7, #36]	@ 0x24
            show_main_page(&_Screen,DWINPAGE_MAIN_FINISH,*device_finish);
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	2164      	movs	r1, #100	@ 0x64
 800e4ee:	484b      	ldr	r0, [pc, #300]	@ (800e61c <screen_dispatch+0x174>)
 800e4f0:	f7fe f914 	bl	800c71c <show_main_page>
            free(device_finish);
 800e4f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e4f6:	f002 fa81 	bl	80109fc <free>
        } break;
 800e4fa:	e089      	b.n	800e610 <screen_dispatch+0x168>
        case UPDATE_RTC : {
            // printf("Update RTC\n");
            uint8_t data_time[7];
            DS3231_Read_time(&ds3231, data_time);
 800e4fc:	f107 031c 	add.w	r3, r7, #28
 800e500:	4619      	mov	r1, r3
 800e502:	4847      	ldr	r0, [pc, #284]	@ (800e620 <screen_dispatch+0x178>)
 800e504:	f000 fcd6 	bl	800eeb4 <DS3231_Read_time>
            char string[20];
            sprintf(string, "%02d/%02d/20%02d", data_time[4], data_time[5], data_time[6] );
 800e508:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e50c:	461a      	mov	r2, r3
 800e50e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e512:	4619      	mov	r1, r3
 800e514:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e518:	f107 0008 	add.w	r0, r7, #8
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	460b      	mov	r3, r1
 800e520:	4940      	ldr	r1, [pc, #256]	@ (800e624 <screen_dispatch+0x17c>)
 800e522:	f004 f993 	bl	801284c <siprintf>
            DWIN_SetText(&_Screen,VP_Time_Day,string,strlen(string));
 800e526:	f107 0308 	add.w	r3, r7, #8
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7f1 fe1a 	bl	8000164 <strlen>
 800e530:	4603      	mov	r3, r0
 800e532:	b29b      	uxth	r3, r3
 800e534:	f107 0208 	add.w	r2, r7, #8
 800e538:	f649 0120 	movw	r1, #38944	@ 0x9820
 800e53c:	4837      	ldr	r0, [pc, #220]	@ (800e61c <screen_dispatch+0x174>)
 800e53e:	f000 fdcb 	bl	800f0d8 <DWIN_SetText>
            sprintf(string, "%02d:%02d:%02d", data_time[2], data_time[1], data_time[0] );
 800e542:	7fbb      	ldrb	r3, [r7, #30]
 800e544:	461a      	mov	r2, r3
 800e546:	7f7b      	ldrb	r3, [r7, #29]
 800e548:	4619      	mov	r1, r3
 800e54a:	7f3b      	ldrb	r3, [r7, #28]
 800e54c:	f107 0008 	add.w	r0, r7, #8
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	460b      	mov	r3, r1
 800e554:	4934      	ldr	r1, [pc, #208]	@ (800e628 <screen_dispatch+0x180>)
 800e556:	f004 f979 	bl	801284c <siprintf>
            DWIN_SetText(&_Screen,VP_Time_Hour,string,strlen(string));
 800e55a:	f107 0308 	add.w	r3, r7, #8
 800e55e:	4618      	mov	r0, r3
 800e560:	f7f1 fe00 	bl	8000164 <strlen>
 800e564:	4603      	mov	r3, r0
 800e566:	b29b      	uxth	r3, r3
 800e568:	f107 0208 	add.w	r2, r7, #8
 800e56c:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 800e570:	482a      	ldr	r0, [pc, #168]	@ (800e61c <screen_dispatch+0x174>)
 800e572:	f000 fdb1 	bl	800f0d8 <DWIN_SetText>
        } break;
 800e576:	e04b      	b.n	800e610 <screen_dispatch+0x168>
        case UPDATA_PROGARM : {
            printf("updata program test\n");
 800e578:	482c      	ldr	r0, [pc, #176]	@ (800e62c <screen_dispatch+0x184>)
 800e57a:	f004 f929 	bl	80127d0 <puts>
            Screen_data_t *data_program = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e57e:	6838      	ldr	r0, [r7, #0]
 800e580:	f002 fa03 	bl	801098a <get_data_dynamic_event>
 800e584:	4603      	mov	r3, r0
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	62fb      	str	r3, [r7, #44]	@ 0x2c
            updata_data_program_from_app(&_Screen,data_program->data,data_program->len);
 800e58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e58c:	6819      	ldr	r1, [r3, #0]
 800e58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e590:	889b      	ldrh	r3, [r3, #4]
 800e592:	461a      	mov	r2, r3
 800e594:	4821      	ldr	r0, [pc, #132]	@ (800e61c <screen_dispatch+0x174>)
 800e596:	f7fe ff2b 	bl	800d3f0 <updata_data_program_from_app>
            if (data_program->data != NULL) free(data_program->data);
 800e59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d004      	beq.n	800e5ac <screen_dispatch+0x104>
 800e5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f002 fa28 	bl	80109fc <free>
            free(data_program);
 800e5ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5ae:	f002 fa25 	bl	80109fc <free>
        } break;
 800e5b2:	e02d      	b.n	800e610 <screen_dispatch+0x168>
        case UPDATE_WIFI_STATE : {
            printf("Update wifi status\n");
 800e5b4:	481e      	ldr	r0, [pc, #120]	@ (800e630 <screen_dispatch+0x188>)
 800e5b6:	f004 f90b 	bl	80127d0 <puts>
            Screen_data_t *data_wifi = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e5ba:	6838      	ldr	r0, [r7, #0]
 800e5bc:	f002 f9e5 	bl	801098a <get_data_dynamic_event>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (data_wifi->data[0] == '0') {
 800e5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	2b30      	cmp	r3, #48	@ 0x30
 800e5ce:	d106      	bne.n	800e5de <screen_dispatch+0x136>
                DWIN_SetVariable_Icon(&_Screen,VP_ICON_WIFI,WIFI_OFF);
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	f244 2150 	movw	r1, #16976	@ 0x4250
 800e5d6:	4811      	ldr	r0, [pc, #68]	@ (800e61c <screen_dispatch+0x174>)
 800e5d8:	f000 fe31 	bl	800f23e <DWIN_SetVariable_Icon>
 800e5dc:	e00a      	b.n	800e5f4 <screen_dispatch+0x14c>
            } else if (data_wifi->data[0] == '1') {
 800e5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	2b31      	cmp	r3, #49	@ 0x31
 800e5e6:	d105      	bne.n	800e5f4 <screen_dispatch+0x14c>
                DWIN_SetVariable_Icon(&_Screen,VP_ICON_WIFI,WIFI_ON);
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f244 2150 	movw	r1, #16976	@ 0x4250
 800e5ee:	480b      	ldr	r0, [pc, #44]	@ (800e61c <screen_dispatch+0x174>)
 800e5f0:	f000 fe25 	bl	800f23e <DWIN_SetVariable_Icon>
            }
            if (data_wifi->data != NULL) free(data_wifi->data);
 800e5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d004      	beq.n	800e606 <screen_dispatch+0x15e>
 800e5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4618      	mov	r0, r3
 800e602:	f002 f9fb 	bl	80109fc <free>
            free(data_wifi);
 800e606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e608:	f002 f9f8 	bl	80109fc <free>
        } break;
 800e60c:	e000      	b.n	800e610 <screen_dispatch+0x168>
        default: break;
 800e60e:	bf00      	nop
    }
}
 800e610:	bf00      	nop
 800e612:	3730      	adds	r7, #48	@ 0x30
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	08015754 	.word	0x08015754
 800e61c:	20000cc8 	.word	0x20000cc8
 800e620:	20001488 	.word	0x20001488
 800e624:	0801576c 	.word	0x0801576c
 800e628:	08015780 	.word	0x08015780
 800e62c:	08015790 	.word	0x08015790
 800e630:	080157a4 	.word	0x080157a4

0800e634 <uart_esp32_task_init>:
OS_task * const AO_task_uart_esp32 = &uart_esp32_instance.task;

static uart_esp32_t *buff_store_rx[RX_BUF]; /* buffer store the data write */
static uart_esp32_t *buff_store_tx[TX_BUF]; /* buffer store the data write */

void uart_esp32_task_init(UART_HandleTypeDef *pUart) {
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
    uart_esp32_instance.pUart = pUart;
 800e63c:	4a1b      	ldr	r2, [pc, #108]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	61d3      	str	r3, [r2, #28]

    uart_esp32_instance.head_index_rx = 0;
 800e642:	4b1a      	ldr	r3, [pc, #104]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e644:	2200      	movs	r2, #0
 800e646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    uart_esp32_instance.tail_index_rx = 0;
 800e64a:	4b18      	ldr	r3, [pc, #96]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e64c:	2200      	movs	r2, #0
 800e64e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    uart_esp32_instance.nUsed_rx = 0;
 800e652:	4b16      	ldr	r3, [pc, #88]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e654:	2200      	movs	r2, #0
 800e656:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    uart_esp32_instance.end_rx = RX_BUF - 1;
 800e65a:	4b14      	ldr	r3, [pc, #80]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e65c:	2209      	movs	r2, #9
 800e65e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    uart_esp32_instance.uart_esp32_buf_rx = buff_store_rx;
 800e662:	4b12      	ldr	r3, [pc, #72]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e664:	4a12      	ldr	r2, [pc, #72]	@ (800e6b0 <uart_esp32_task_init+0x7c>)
 800e666:	621a      	str	r2, [r3, #32]
    uart_esp32_instance.is_rx = false;
 800e668:	4b10      	ldr	r3, [pc, #64]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e66a:	2200      	movs	r2, #0
 800e66c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    uart_esp32_instance.head_index_tx = 0;
 800e670:	4b0e      	ldr	r3, [pc, #56]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e672:	2200      	movs	r2, #0
 800e674:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    uart_esp32_instance.tail_index_tx = 0;
 800e678:	4b0c      	ldr	r3, [pc, #48]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    uart_esp32_instance.nUsed_tx = 0;
 800e680:	4b0a      	ldr	r3, [pc, #40]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e682:	2200      	movs	r2, #0
 800e684:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    uart_esp32_instance.end_tx = TX_BUF - 1;
 800e688:	4b08      	ldr	r3, [pc, #32]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e68a:	220e      	movs	r2, #14
 800e68c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    uart_esp32_instance.uart_esp32_buf_tx = buff_store_tx;
 800e690:	4b06      	ldr	r3, [pc, #24]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e692:	4a08      	ldr	r2, [pc, #32]	@ (800e6b4 <uart_esp32_task_init+0x80>)
 800e694:	62da      	str	r2, [r3, #44]	@ 0x2c
    uart_esp32_instance.is_tx = false;
 800e696:	4b05      	ldr	r3, [pc, #20]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e698:	2200      	movs	r2, #0
 800e69a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    uart_esp32_ctor(&uart_esp32_instance);
 800e69e:	4803      	ldr	r0, [pc, #12]	@ (800e6ac <uart_esp32_task_init+0x78>)
 800e6a0:	f000 f80a 	bl	800e6b8 <uart_esp32_ctor>

}
 800e6a4:	bf00      	nop
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	20001500 	.word	0x20001500
 800e6b0:	200015e0 	.word	0x200015e0
 800e6b4:	20001608 	.word	0x20001608

0800e6b8 <uart_esp32_ctor>:

void uart_esp32_ctor(app_uart_esp32 *pAO) {
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_uart_esp32,(OS_handler)&uart_esp32_init,(OS_handler)&uart_esp32_dispatch);
 800e6c0:	4b09      	ldr	r3, [pc, #36]	@ (800e6e8 <uart_esp32_ctor+0x30>)
 800e6c2:	4a0a      	ldr	r2, [pc, #40]	@ (800e6ec <uart_esp32_ctor+0x34>)
 800e6c4:	490a      	ldr	r1, [pc, #40]	@ (800e6f0 <uart_esp32_ctor+0x38>)
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f001 feac 	bl	8010424 <OS_task_init>

    OS_TimeEvt_init(&uart_esp32_instance.te_wait_rx,ESP32_RX_TIMEOUT,&uart_esp32_instance.task);
 800e6cc:	4a06      	ldr	r2, [pc, #24]	@ (800e6e8 <uart_esp32_ctor+0x30>)
 800e6ce:	2103      	movs	r1, #3
 800e6d0:	4808      	ldr	r0, [pc, #32]	@ (800e6f4 <uart_esp32_ctor+0x3c>)
 800e6d2:	f001 ff77 	bl	80105c4 <OS_TimeEvt_init>
    OS_TimeEvt_init(&uart_esp32_instance.te_wait_tx,ESP32_TX_TIMEOUT,&uart_esp32_instance.task);
 800e6d6:	4a04      	ldr	r2, [pc, #16]	@ (800e6e8 <uart_esp32_ctor+0x30>)
 800e6d8:	2104      	movs	r1, #4
 800e6da:	4807      	ldr	r0, [pc, #28]	@ (800e6f8 <uart_esp32_ctor+0x40>)
 800e6dc:	f001 ff72 	bl	80105c4 <OS_TimeEvt_init>
}
 800e6e0:	bf00      	nop
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	20001500 	.word	0x20001500
 800e6ec:	0800e711 	.word	0x0800e711
 800e6f0:	0800e6fd 	.word	0x0800e6fd
 800e6f4:	20001538 	.word	0x20001538
 800e6f8:	2000158c 	.word	0x2000158c

0800e6fc <uart_esp32_init>:

static void uart_esp32_init(app_uart_esp32 * const pOS_task, OS_event_t const * const pEvent) {
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
    UNUSED(pOS_task);
    UNUSED(pEvent);
}
 800e706:	bf00      	nop
 800e708:	370c      	adds	r7, #12
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bc80      	pop	{r7}
 800e70e:	4770      	bx	lr

0800e710 <uart_esp32_dispatch>:

static void uart_esp32_dispatch(app_uart_esp32 * const pOS_task, OS_event_t const * const pEvent) {
 800e710:	b590      	push	{r4, r7, lr}
 800e712:	b089      	sub	sp, #36	@ 0x24
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	2b04      	cmp	r3, #4
 800e720:	f200 818c 	bhi.w	800ea3c <uart_esp32_dispatch+0x32c>
 800e724:	a201      	add	r2, pc, #4	@ (adr r2, 800e72c <uart_esp32_dispatch+0x1c>)
 800e726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e72a:	bf00      	nop
 800e72c:	0800e741 	.word	0x0800e741
 800e730:	0800e7df 	.word	0x0800e7df
 800e734:	0800ea3d 	.word	0x0800ea3d
 800e738:	0800e865 	.word	0x0800e865
 800e73c:	0800e98b 	.word	0x0800e98b
        case SEND_DATA_ESP32 : {
            printf("Send data to esp32\n");
 800e740:	48a2      	ldr	r0, [pc, #648]	@ (800e9cc <uart_esp32_dispatch+0x2bc>)
 800e742:	f004 f845 	bl	80127d0 <puts>
            uart_esp32_t *data_send_esp32 = (uart_esp32_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e746:	6838      	ldr	r0, [r7, #0]
 800e748:	f002 f91f 	bl	801098a <get_data_dynamic_event>
 800e74c:	4603      	mov	r3, r0
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	613b      	str	r3, [r7, #16]
            pOS_task->uart_esp32_buf_tx[pOS_task->head_index_tx] = data_send_esp32;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index_tx == 0) {
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d106      	bne.n	800e77c <uart_esp32_dispatch+0x6c>
                pOS_task->head_index_tx = pOS_task->end_tx;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800e77a:	e007      	b.n	800e78c <uart_esp32_dispatch+0x7c>
            } else {
                --pOS_task->head_index_tx;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e782:	3b01      	subs	r3, #1
 800e784:	b2da      	uxtb	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            }
            ++pOS_task->nUsed_tx;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e792:	3301      	adds	r3, #1
 800e794:	b2da      	uxtb	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            if (pOS_task->is_tx == false) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e7a2:	f083 0301 	eor.w	r3, r3, #1
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f000 8149 	beq.w	800ea40 <uart_esp32_dispatch+0x330>
                pOS_task->is_tx = true;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                HAL_UART_Transmit(pOS_task->pUart,data_send_esp32->data,data_send_esp32->len,1000);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	69d8      	ldr	r0, [r3, #28]
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	6819      	ldr	r1, [r3, #0]
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e7c8:	f7f7 fe38 	bl	800643c <HAL_UART_Transmit>
                OS_TimeEvt_Set(&pOS_task->te_wait_tx,2000,0);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	338c      	adds	r3, #140	@ 0x8c
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f001 ff1a 	bl	8010610 <OS_TimeEvt_Set>
            }
        } break;
 800e7dc:	e130      	b.n	800ea40 <uart_esp32_dispatch+0x330>
        case RECEIVE_DATA_ESP32 : {
            printf("Receive data from ESP32\n");
 800e7de:	487c      	ldr	r0, [pc, #496]	@ (800e9d0 <uart_esp32_dispatch+0x2c0>)
 800e7e0:	f003 fff6 	bl	80127d0 <puts>
            uart_esp32_t *RX_ESP32 = (uart_esp32_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e7e4:	6838      	ldr	r0, [r7, #0]
 800e7e6:	f002 f8d0 	bl	801098a <get_data_dynamic_event>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	617b      	str	r3, [r7, #20]
            pOS_task->uart_esp32_buf_rx[pOS_task->head_index_rx] = RX_ESP32;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6a1a      	ldr	r2, [r3, #32]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4413      	add	r3, r2
 800e7fe:	697a      	ldr	r2, [r7, #20]
 800e800:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index_rx == 0) {
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d106      	bne.n	800e81a <uart_esp32_dispatch+0x10a>
                pOS_task->head_index_rx = pOS_task->end_rx;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800e818:	e007      	b.n	800e82a <uart_esp32_dispatch+0x11a>
            } else {
                --pOS_task->head_index_rx;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e820:	3b01      	subs	r3, #1
 800e822:	b2da      	uxtb	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            }
            ++pOS_task->nUsed_rx;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e830:	3301      	adds	r3, #1
 800e832:	b2da      	uxtb	r2, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            if (pOS_task->is_rx == false) {
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e840:	f083 0301 	eor.w	r3, r3, #1
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 80fc 	beq.w	800ea44 <uart_esp32_dispatch+0x334>
                pOS_task->is_rx = true;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2201      	movs	r2, #1
 800e850:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                OS_TimeEvt_Set(&pOS_task->te_wait_rx,200,0);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	3338      	adds	r3, #56	@ 0x38
 800e858:	2200      	movs	r2, #0
 800e85a:	21c8      	movs	r1, #200	@ 0xc8
 800e85c:	4618      	mov	r0, r3
 800e85e:	f001 fed7 	bl	8010610 <OS_TimeEvt_Set>
            }
        } break;
 800e862:	e0ef      	b.n	800ea44 <uart_esp32_dispatch+0x334>
        case ESP32_RX_TIMEOUT : {
            uart_esp32_t *RX_ESP32 = pOS_task->uart_esp32_buf_rx[pOS_task->tail_index_rx];
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6a1a      	ldr	r2, [r3, #32]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	61bb      	str	r3, [r7, #24]
            /* check command of data */
            switch (RX_ESP32->data[0]) {
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	2b30      	cmp	r3, #48	@ 0x30
 800e87e:	d002      	beq.n	800e886 <uart_esp32_dispatch+0x176>
 800e880:	2b31      	cmp	r3, #49	@ 0x31
 800e882:	d01d      	beq.n	800e8c0 <uart_esp32_dispatch+0x1b0>
//                    uint8_t buff[50];
//                    memcpy(buff,data_program->data,RX_ESP32->len - 1);
                    data_program->len = RX_ESP32->len - 1;
                    OS_task_post_event(AO_task_screen,UPDATA_PROGARM,(uint8_t *)&data_program,sizeof(Screen_data_t));
                } break;
                default : break;
 800e884:	e044      	b.n	800e910 <uart_esp32_dispatch+0x200>
                    Screen_data_t *data_wifi = malloc(sizeof(Screen_data_t));
 800e886:	2008      	movs	r0, #8
 800e888:	f002 f8b0 	bl	80109ec <malloc>
 800e88c:	4603      	mov	r3, r0
 800e88e:	60fb      	str	r3, [r7, #12]
                    data_wifi->data = malloc(1);
 800e890:	68fc      	ldr	r4, [r7, #12]
 800e892:	2001      	movs	r0, #1
 800e894:	f002 f8aa 	bl	80109ec <malloc>
 800e898:	4603      	mov	r3, r0
 800e89a:	6023      	str	r3, [r4, #0]
                    data_wifi->data[0] = RX_ESP32->data[2];
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	7892      	ldrb	r2, [r2, #2]
 800e8a6:	701a      	strb	r2, [r3, #0]
                    data_wifi->len = 1;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	809a      	strh	r2, [r3, #4]
                    OS_task_post_event(AO_task_screen,UPDATE_WIFI_STATE,(uint8_t *)&data_wifi,sizeof(Screen_data_t));
 800e8ae:	4b49      	ldr	r3, [pc, #292]	@ (800e9d4 <uart_esp32_dispatch+0x2c4>)
 800e8b0:	6818      	ldr	r0, [r3, #0]
 800e8b2:	f107 020c 	add.w	r2, r7, #12
 800e8b6:	2308      	movs	r3, #8
 800e8b8:	2102      	movs	r1, #2
 800e8ba:	f001 fe65 	bl	8010588 <OS_task_post_event>
                } break;
 800e8be:	e027      	b.n	800e910 <uart_esp32_dispatch+0x200>
                    Screen_data_t *data_program = malloc(sizeof(Screen_data_t));
 800e8c0:	2008      	movs	r0, #8
 800e8c2:	f002 f893 	bl	80109ec <malloc>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	60bb      	str	r3, [r7, #8]
                    data_program->data = malloc(RX_ESP32->len);
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	68bc      	ldr	r4, [r7, #8]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f002 f88b 	bl	80109ec <malloc>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	6023      	str	r3, [r4, #0]
                    memcpy(data_program->data,&RX_ESP32->data[2],RX_ESP32->len - 1);
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	6818      	ldr	r0, [r3, #0]
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	1c99      	adds	r1, r3, #2
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	f004 fa01 	bl	8012cf2 <memcpy>
                    data_program->len = RX_ESP32->len - 1;
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	b29a      	uxth	r2, r3
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	3a01      	subs	r2, #1
 800e8fa:	b292      	uxth	r2, r2
 800e8fc:	809a      	strh	r2, [r3, #4]
                    OS_task_post_event(AO_task_screen,UPDATA_PROGARM,(uint8_t *)&data_program,sizeof(Screen_data_t));
 800e8fe:	4b35      	ldr	r3, [pc, #212]	@ (800e9d4 <uart_esp32_dispatch+0x2c4>)
 800e900:	6818      	ldr	r0, [r3, #0]
 800e902:	f107 0208 	add.w	r2, r7, #8
 800e906:	2308      	movs	r3, #8
 800e908:	2103      	movs	r1, #3
 800e90a:	f001 fe3d 	bl	8010588 <OS_task_post_event>
                } break;
 800e90e:	bf00      	nop
            } 

            if (pOS_task->tail_index_rx == 0) {
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e916:	2b00      	cmp	r3, #0
 800e918:	d106      	bne.n	800e928 <uart_esp32_dispatch+0x218>
                    pOS_task->tail_index_rx = pOS_task->end_rx;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800e926:	e007      	b.n	800e938 <uart_esp32_dispatch+0x228>
                } else {
                    --pOS_task->tail_index_rx;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e92e:	3b01      	subs	r3, #1
 800e930:	b2da      	uxtb	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                } 
            --pOS_task->nUsed_rx;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e93e:	3b01      	subs	r3, #1
 800e940:	b2da      	uxtb	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            pOS_task->is_rx = false;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            /* check buff */
            if (pOS_task->nUsed_rx > 0 ) {
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00a      	beq.n	800e970 <uart_esp32_dispatch+0x260>
                pOS_task->is_rx = true;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2201      	movs	r2, #1
 800e95e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                OS_TimeEvt_Set(&pOS_task->te_wait_rx,200,0); /* run only 1 time */
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	3338      	adds	r3, #56	@ 0x38
 800e966:	2200      	movs	r2, #0
 800e968:	21c8      	movs	r1, #200	@ 0xc8
 800e96a:	4618      	mov	r0, r3
 800e96c:	f001 fe50 	bl	8010610 <OS_TimeEvt_Set>
            }

            if (RX_ESP32->data != NULL) free(RX_ESP32->data);
 800e970:	69bb      	ldr	r3, [r7, #24]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d004      	beq.n	800e982 <uart_esp32_dispatch+0x272>
 800e978:	69bb      	ldr	r3, [r7, #24]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4618      	mov	r0, r3
 800e97e:	f002 f83d 	bl	80109fc <free>
            free(RX_ESP32);
 800e982:	69b8      	ldr	r0, [r7, #24]
 800e984:	f002 f83a 	bl	80109fc <free>
        } break;
 800e988:	e05d      	b.n	800ea46 <uart_esp32_dispatch+0x336>
        case ESP32_TX_TIMEOUT : {
            uart_esp32_t *data_send_esp32 = pOS_task->uart_esp32_buf_tx[pOS_task->tail_index_tx];
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	4413      	add	r3, r2
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	61fb      	str	r3, [r7, #28]

            HAL_UART_Transmit(pOS_task->pUart,data_send_esp32->data,data_send_esp32->len,1000);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	69d8      	ldr	r0, [r3, #28]
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	6819      	ldr	r1, [r3, #0]
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	b29a      	uxth	r2, r3
 800e9aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e9ae:	f7f7 fd45 	bl	800643c <HAL_UART_Transmit>
            
            if (pOS_task->tail_index_tx == 0) {
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d10d      	bne.n	800e9d8 <uart_esp32_dispatch+0x2c8>
                    pOS_task->tail_index_tx = pOS_task->end_tx;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e9c8:	e00e      	b.n	800e9e8 <uart_esp32_dispatch+0x2d8>
 800e9ca:	bf00      	nop
 800e9cc:	080157b8 	.word	0x080157b8
 800e9d0:	080157cc 	.word	0x080157cc
 800e9d4:	08016110 	.word	0x08016110
                } else {
                    --pOS_task->tail_index_tx;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
                } 
            --pOS_task->nUsed_tx;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e9ee:	3b01      	subs	r3, #1
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            pOS_task->is_tx = false;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            /* check buff */
            if (pOS_task->nUsed_tx > 0 ) {
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00b      	beq.n	800ea22 <uart_esp32_dispatch+0x312>
                pOS_task->is_tx = true;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                OS_TimeEvt_Set(&pOS_task->te_wait_tx,2000,0); /* run only 1 time */
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	338c      	adds	r3, #140	@ 0x8c
 800ea16:	2200      	movs	r2, #0
 800ea18:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f001 fdf7 	bl	8010610 <OS_TimeEvt_Set>
            }

            if (data_send_esp32->data != NULL) free(data_send_esp32->data);
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d004      	beq.n	800ea34 <uart_esp32_dispatch+0x324>
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f001 ffe4 	bl	80109fc <free>
            free(data_send_esp32);
 800ea34:	69f8      	ldr	r0, [r7, #28]
 800ea36:	f001 ffe1 	bl	80109fc <free>
        } break;
 800ea3a:	e004      	b.n	800ea46 <uart_esp32_dispatch+0x336>

        default: break;
 800ea3c:	bf00      	nop
 800ea3e:	e002      	b.n	800ea46 <uart_esp32_dispatch+0x336>
        } break;
 800ea40:	bf00      	nop
 800ea42:	e000      	b.n	800ea46 <uart_esp32_dispatch+0x336>
        } break;
 800ea44:	bf00      	nop
    }
}
 800ea46:	bf00      	nop
 800ea48:	3724      	adds	r7, #36	@ 0x24
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd90      	pop	{r4, r7, pc}
 800ea4e:	bf00      	nop

0800ea50 <BlinkyTest_app_init>:
uint8_t num_ic = 1;
char uart_string[50];
uint32_t uart_num_test;

/* call in main file to initialization Active object of app using */
void BlinkyTest_app_init(void) {
 800ea50:	b580      	push	{r7, lr}
 800ea52:	af00      	add	r7, sp, #0
    BlinkyTest_ctor(&Blinky_instance);
 800ea54:	4802      	ldr	r0, [pc, #8]	@ (800ea60 <BlinkyTest_app_init+0x10>)
 800ea56:	f000 f805 	bl	800ea64 <BlinkyTest_ctor>
//    data_write.mem_addr = START_ADDR_PROGRAM_TEST_X(1);


    // data_uart.data = malloc(50);
//    uart_num_test = 0;
}
 800ea5a:	bf00      	nop
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	20001644 	.word	0x20001644

0800ea64 <BlinkyTest_ctor>:


void BlinkyTest_ctor(Test_Blinky_OS * const pAO) {
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
    /* Init task */
    OS_task_init(&pAO->task,(OS_handler)&BlinkyTest_init,(OS_handler)&BlinkyTest_Dispatch);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a0b      	ldr	r2, [pc, #44]	@ (800ea9c <BlinkyTest_ctor+0x38>)
 800ea70:	490b      	ldr	r1, [pc, #44]	@ (800eaa0 <BlinkyTest_ctor+0x3c>)
 800ea72:	4618      	mov	r0, r3
 800ea74:	f001 fcd6 	bl	8010424 <OS_task_init>

    /* init time os if using */
    OS_TimeEvt_init(&pAO->te1,TIMEOUT1_SIG,&pAO->task);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	331c      	adds	r3, #28
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	2100      	movs	r1, #0
 800ea80:	4618      	mov	r0, r3
 800ea82:	f001 fd9f 	bl	80105c4 <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te2,TIMEOUT2_SIG,&pAO->task);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	3370      	adds	r3, #112	@ 0x70
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	2101      	movs	r1, #1
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f001 fd98 	bl	80105c4 <OS_TimeEvt_init>
    // OS_TimeEvt_init(&pAO->te_eeprom_write,WRITE_PROGRAM_TEST,&pAO->task);
    // OS_TimeEvt_init(&pAO->te_eeprom_read,READ_ONE_PROGRAM_TEST,&pAO->task);
//    OS_TimeEvt_init(&pAO->te_send_data,TEST_SEND_DATA_ESP32,&pAO->task);
}
 800ea94:	bf00      	nop
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	0800ead5 	.word	0x0800ead5
 800eaa0:	0800eaa5 	.word	0x0800eaa5

0800eaa4 <BlinkyTest_init>:

/* The init function of app task (optional) */
void BlinkyTest_init(Test_Blinky_OS * const pOS_task, OS_event_t const * const pEvent) {
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
    
    /* init time for generate event */
    OS_TimeEvt_Set(&pOS_task->te1,
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	331c      	adds	r3, #28
 800eab2:	22c8      	movs	r2, #200	@ 0xc8
 800eab4:	2101      	movs	r1, #1
 800eab6:	4618      	mov	r0, r3
 800eab8:	f001 fdaa 	bl	8010610 <OS_TimeEvt_Set>
    1U,
    200);

    OS_TimeEvt_Set(&pOS_task->te2,
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3370      	adds	r3, #112	@ 0x70
 800eac0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800eac4:	2165      	movs	r1, #101	@ 0x65
 800eac6:	4618      	mov	r0, r3
 800eac8:	f001 fda2 	bl	8010610 <OS_TimeEvt_Set>
    /* if don't using this function */
    /*
    * UNSED(pOS_task);
    * UNSED(pEvent);
    */
}
 800eacc:	bf00      	nop
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <BlinkyTest_Dispatch>:

void BlinkyTest_Dispatch(Test_Blinky_OS *const pOS_task, OS_event_t const * const pEvent) {
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	881b      	ldrh	r3, [r3, #0]
 800eae2:	2b07      	cmp	r3, #7
 800eae4:	d81e      	bhi.n	800eb24 <BlinkyTest_Dispatch+0x50>
 800eae6:	a201      	add	r2, pc, #4	@ (adr r2, 800eaec <BlinkyTest_Dispatch+0x18>)
 800eae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaec:	0800eb0d 	.word	0x0800eb0d
 800eaf0:	0800eb19 	.word	0x0800eb19
 800eaf4:	0800eb25 	.word	0x0800eb25
 800eaf8:	0800eb25 	.word	0x0800eb25
 800eafc:	0800eb25 	.word	0x0800eb25
 800eb00:	0800eb25 	.word	0x0800eb25
 800eb04:	0800eb25 	.word	0x0800eb25
 800eb08:	0800eb25 	.word	0x0800eb25
        case TIMEOUT1_SIG : {
            /* Turn on led */
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	2102      	movs	r1, #2
 800eb10:	4807      	ldr	r0, [pc, #28]	@ (800eb30 <BlinkyTest_Dispatch+0x5c>)
 800eb12:	f7f4 f9f9 	bl	8002f08 <HAL_GPIO_WritePin>
            // printf("Turn on led\n");
        } break;
 800eb16:	e006      	b.n	800eb26 <BlinkyTest_Dispatch+0x52>
        case TIMEOUT2_SIG : {
            /* Turn off led */
        	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800eb18:	2200      	movs	r2, #0
 800eb1a:	2102      	movs	r1, #2
 800eb1c:	4804      	ldr	r0, [pc, #16]	@ (800eb30 <BlinkyTest_Dispatch+0x5c>)
 800eb1e:	f7f4 f9f3 	bl	8002f08 <HAL_GPIO_WritePin>
            // printf("Turn off led\n");
        } break;
 800eb22:	e000      	b.n	800eb26 <BlinkyTest_Dispatch+0x52>
            // uart_num_test++;
            // sprintf((char *)data_uart.data,"%s: %ld\n","The String Send to ESP32",uart_num_test);
            // data_uart.len = strlen((char *)data_uart.data);
            // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_uart,sizeof(uart_buf));
        } break;
        default: break;
 800eb24:	bf00      	nop
    }
}
 800eb26:	bf00      	nop
 800eb28:	3708      	adds	r7, #8
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	40010800 	.word	0x40010800

0800eb34 <AT24Cxx_Init>:
#include <stdio.h>
#include <stdint.h>

/* Private function prototype */

AT24Cxx_Status AT24Cxx_Init(AT24Cxx_t *pDev, uint8_t dev_address, I2C_HandleTypeDef *dev_i2c) {
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	607a      	str	r2, [r7, #4]
 800eb40:	72fb      	strb	r3, [r7, #11]
    pDev->i2c_port = dev_i2c;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	601a      	str	r2, [r3, #0]
    pDev->dev_address = dev_address << 1;
 800eb48:	7afb      	ldrb	r3, [r7, #11]
 800eb4a:	005b      	lsls	r3, r3, #1
 800eb4c:	b2da      	uxtb	r2, r3
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	711a      	strb	r2, [r3, #4]
    /* Test communication */
    //uint8_t test_buf[1] = {0};
    if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 1, 100) == HAL_OK) {
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6818      	ldr	r0, [r3, #0]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	791b      	ldrb	r3, [r3, #4]
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	2364      	movs	r3, #100	@ 0x64
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f7f4 ff5c 	bl	8003a1c <HAL_I2C_IsDeviceReady>
 800eb64:	4603      	mov	r3, r0
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <AT24Cxx_Init+0x3a>
        return AT24Cxx_Init_OK;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	e000      	b.n	800eb70 <AT24Cxx_Init+0x3c>
    }
    return AT24Cxx_Init_Fail;
 800eb6e:	2301      	movs	r3, #1
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <AT24Cxx_write_buffer>:
    } else {
        return AT24Cxx_Error_write;
    }
}

AT24Cxx_Status AT24Cxx_write_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af02      	add	r7, sp, #8
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	607a      	str	r2, [r7, #4]
 800eb82:	461a      	mov	r2, r3
 800eb84:	460b      	mov	r3, r1
 800eb86:	817b      	strh	r3, [r7, #10]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	813b      	strh	r3, [r7, #8]
    /* Check valid size buffer and address */
    if (mem_addr+buf_length < AT24C256_MAX_ADDR && buf_length < AT24C256_PG_SIZE) {
 800eb8c:	897a      	ldrh	r2, [r7, #10]
 800eb8e:	893b      	ldrh	r3, [r7, #8]
 800eb90:	4413      	add	r3, r2
 800eb92:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800eb96:	4293      	cmp	r3, r2
 800eb98:	dc11      	bgt.n	800ebbe <AT24Cxx_write_buffer+0x46>
 800eb9a:	893b      	ldrh	r3, [r7, #8]
 800eb9c:	2b3f      	cmp	r3, #63	@ 0x3f
 800eb9e:	d80e      	bhi.n	800ebbe <AT24Cxx_write_buffer+0x46>
        HAL_I2C_Mem_Write_IT(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,buf_length);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6818      	ldr	r0, [r3, #0]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	791b      	ldrb	r3, [r3, #4]
 800eba8:	4619      	mov	r1, r3
 800ebaa:	897a      	ldrh	r2, [r7, #10]
 800ebac:	893b      	ldrh	r3, [r7, #8]
 800ebae:	9301      	str	r3, [sp, #4]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	2310      	movs	r3, #16
 800ebb6:	f7f4 fe85 	bl	80038c4 <HAL_I2C_Mem_Write_IT>
        return AT24Cxx_OK;
 800ebba:	2302      	movs	r3, #2
 800ebbc:	e000      	b.n	800ebc0 <AT24Cxx_write_buffer+0x48>
    } else {
        return AT24Cxx_Error_write;
 800ebbe:	2303      	movs	r3, #3
    }
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <AT24Cxx_write_buffer_bloking>:

AT24Cxx_Status AT24Cxx_write_buffer_bloking(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 800ebc8:	b5b0      	push	{r4, r5, r7, lr}
 800ebca:	b08a      	sub	sp, #40	@ 0x28
 800ebcc:	af04      	add	r7, sp, #16
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	607a      	str	r2, [r7, #4]
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	817b      	strh	r3, [r7, #10]
 800ebd8:	4613      	mov	r3, r2
 800ebda:	813b      	strh	r3, [r7, #8]
    uint8_t page_remaining = AT24C256_PG_SIZE - (mem_addr % AT24C256_PG_SIZE); /* num bytes written in current page from address */
 800ebdc:	897b      	ldrh	r3, [r7, #10]
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800ebea:	75fb      	strb	r3, [r7, #23]

    if (buf_length < page_remaining) page_remaining = buf_length;
 800ebec:	7dfb      	ldrb	r3, [r7, #23]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	893a      	ldrh	r2, [r7, #8]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d201      	bcs.n	800ebfa <AT24Cxx_write_buffer_bloking+0x32>
 800ebf6:	893b      	ldrh	r3, [r7, #8]
 800ebf8:	75fb      	strb	r3, [r7, #23]
    uint8_t page_write = (buf_length - page_remaining) / AT24C256_PG_SIZE;   /* num pages can write full */
 800ebfa:	893a      	ldrh	r2, [r7, #8]
 800ebfc:	7dfb      	ldrb	r3, [r7, #23]
 800ebfe:	1ad3      	subs	r3, r2, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	da00      	bge.n	800ec06 <AT24Cxx_write_buffer_bloking+0x3e>
 800ec04:	333f      	adds	r3, #63	@ 0x3f
 800ec06:	119b      	asrs	r3, r3, #6
 800ec08:	757b      	strb	r3, [r7, #21]
    uint8_t byte_remaining = (buf_length - page_remaining) % AT24C256_PG_SIZE; /* num bytes remain after write all full page */
 800ec0a:	893a      	ldrh	r2, [r7, #8]
 800ec0c:	7dfb      	ldrb	r3, [r7, #23]
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	425a      	negs	r2, r3
 800ec12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec16:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ec1a:	bf58      	it	pl
 800ec1c:	4253      	negpl	r3, r2
 800ec1e:	753b      	strb	r3, [r7, #20]

    /* write in current page */
    if (page_remaining > 0x00 && (mem_addr + page_remaining) < AT24C256_MAX_ADDR) {
 800ec20:	7dfb      	ldrb	r3, [r7, #23]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d025      	beq.n	800ec72 <AT24Cxx_write_buffer_bloking+0xaa>
 800ec26:	897a      	ldrh	r2, [r7, #10]
 800ec28:	7dfb      	ldrb	r3, [r7, #23]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ec30:	4293      	cmp	r3, r2
 800ec32:	dc1e      	bgt.n	800ec72 <AT24Cxx_write_buffer_bloking+0xaa>
        while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,page_remaining,AT24C256_I2C_TIMOUT) != HAL_OK);
 800ec34:	bf00      	nop
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6818      	ldr	r0, [r3, #0]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	791b      	ldrb	r3, [r3, #4]
 800ec3e:	461c      	mov	r4, r3
 800ec40:	7dfb      	ldrb	r3, [r7, #23]
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	897a      	ldrh	r2, [r7, #10]
 800ec46:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800ec4a:	9102      	str	r1, [sp, #8]
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	2310      	movs	r3, #16
 800ec54:	4621      	mov	r1, r4
 800ec56:	f7f4 fac7 	bl	80031e8 <HAL_I2C_Mem_Write>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1ea      	bne.n	800ec36 <AT24Cxx_write_buffer_bloking+0x6e>
        if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6818      	ldr	r0, [r3, #0]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	791b      	ldrb	r3, [r3, #4]
 800ec68:	4619      	mov	r1, r3
 800ec6a:	2305      	movs	r3, #5
 800ec6c:	2264      	movs	r2, #100	@ 0x64
 800ec6e:	f7f4 fed5 	bl	8003a1c <HAL_I2C_IsDeviceReady>
            // printf("transmit i2c success\n");
        }
    }

    /* write full page */
    for (uint8_t cur_page = 0; cur_page < page_write; cur_page ++) {
 800ec72:	2300      	movs	r3, #0
 800ec74:	75bb      	strb	r3, [r7, #22]
 800ec76:	e042      	b.n	800ecfe <AT24Cxx_write_buffer_bloking+0x136>
        if ((mem_addr + page_remaining+ (cur_page * AT24C256_PG_SIZE)) > 0x00 && (mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)) < AT24C256_MAX_ADDR) {
 800ec78:	897a      	ldrh	r2, [r7, #10]
 800ec7a:	7dfb      	ldrb	r3, [r7, #23]
 800ec7c:	441a      	add	r2, r3
 800ec7e:	7dbb      	ldrb	r3, [r7, #22]
 800ec80:	019b      	lsls	r3, r3, #6
 800ec82:	4413      	add	r3, r2
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	dd37      	ble.n	800ecf8 <AT24Cxx_write_buffer_bloking+0x130>
 800ec88:	897a      	ldrh	r2, [r7, #10]
 800ec8a:	7dfb      	ldrb	r3, [r7, #23]
 800ec8c:	441a      	add	r2, r3
 800ec8e:	7dbb      	ldrb	r3, [r7, #22]
 800ec90:	019b      	lsls	r3, r3, #6
 800ec92:	4413      	add	r3, r2
 800ec94:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	dc2d      	bgt.n	800ecf8 <AT24Cxx_write_buffer_bloking+0x130>
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,(uint16_t)(mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)),
 800ec9c:	bf00      	nop
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6818      	ldr	r0, [r3, #0]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	791b      	ldrb	r3, [r3, #4]
 800eca6:	461c      	mov	r4, r3
 800eca8:	7dfb      	ldrb	r3, [r7, #23]
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	897b      	ldrh	r3, [r7, #10]
 800ecae:	4413      	add	r3, r2
 800ecb0:	b29a      	uxth	r2, r3
 800ecb2:	7dbb      	ldrb	r3, [r7, #22]
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	019b      	lsls	r3, r3, #6
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	4413      	add	r3, r2
 800ecbc:	b299      	uxth	r1, r3
                    I2C_MEMADD_SIZE_16BIT,
                    data_buf + page_remaining + (cur_page * AT24C256_PG_SIZE),
 800ecbe:	7dfb      	ldrb	r3, [r7, #23]
 800ecc0:	7dba      	ldrb	r2, [r7, #22]
 800ecc2:	0192      	lsls	r2, r2, #6
 800ecc4:	4413      	add	r3, r2
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,(uint16_t)(mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)),
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	4413      	add	r3, r2
 800ecca:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800ecce:	9202      	str	r2, [sp, #8]
 800ecd0:	2240      	movs	r2, #64	@ 0x40
 800ecd2:	9201      	str	r2, [sp, #4]
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	2310      	movs	r3, #16
 800ecd8:	460a      	mov	r2, r1
 800ecda:	4621      	mov	r1, r4
 800ecdc:	f7f4 fa84 	bl	80031e8 <HAL_I2C_Mem_Write>
 800ece0:	4603      	mov	r3, r0
                    AT24C256_PG_SIZE,
                    AT24C256_I2C_TIMOUT) != HAL_OK);
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1db      	bne.n	800ec9e <AT24Cxx_write_buffer_bloking+0xd6>
            if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	6818      	ldr	r0, [r3, #0]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	791b      	ldrb	r3, [r3, #4]
 800ecee:	4619      	mov	r1, r3
 800ecf0:	2305      	movs	r3, #5
 800ecf2:	2264      	movs	r2, #100	@ 0x64
 800ecf4:	f7f4 fe92 	bl	8003a1c <HAL_I2C_IsDeviceReady>
    for (uint8_t cur_page = 0; cur_page < page_write; cur_page ++) {
 800ecf8:	7dbb      	ldrb	r3, [r7, #22]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	75bb      	strb	r3, [r7, #22]
 800ecfe:	7dba      	ldrb	r2, [r7, #22]
 800ed00:	7d7b      	ldrb	r3, [r7, #21]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d3b8      	bcc.n	800ec78 <AT24Cxx_write_buffer_bloking+0xb0>
            }
        }
    }

    /* write bytes after write full page still remain */
    if (byte_remaining != 0) {
 800ed06:	7d3b      	ldrb	r3, [r7, #20]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d040      	beq.n	800ed8e <AT24Cxx_write_buffer_bloking+0x1c6>
        if ((mem_addr + page_remaining + (page_write * AT24C256_PG_SIZE)) > 0x00 && (mem_addr + page_remaining+ (page_write * AT24C256_PG_SIZE)) < AT24C256_MAX_ADDR) {
 800ed0c:	897a      	ldrh	r2, [r7, #10]
 800ed0e:	7dfb      	ldrb	r3, [r7, #23]
 800ed10:	441a      	add	r2, r3
 800ed12:	7d7b      	ldrb	r3, [r7, #21]
 800ed14:	019b      	lsls	r3, r3, #6
 800ed16:	4413      	add	r3, r2
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	dd38      	ble.n	800ed8e <AT24Cxx_write_buffer_bloking+0x1c6>
 800ed1c:	897a      	ldrh	r2, [r7, #10]
 800ed1e:	7dfb      	ldrb	r3, [r7, #23]
 800ed20:	441a      	add	r2, r3
 800ed22:	7d7b      	ldrb	r3, [r7, #21]
 800ed24:	019b      	lsls	r3, r3, #6
 800ed26:	4413      	add	r3, r2
 800ed28:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	dc2e      	bgt.n	800ed8e <AT24Cxx_write_buffer_bloking+0x1c6>
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 800ed30:	bf00      	nop
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6818      	ldr	r0, [r3, #0]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	791b      	ldrb	r3, [r3, #4]
 800ed3a:	461d      	mov	r5, r3
                    (uint16_t)(mem_addr + page_remaining + (page_write * AT24C256_PG_SIZE)),
 800ed3c:	7dfb      	ldrb	r3, [r7, #23]
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	897b      	ldrh	r3, [r7, #10]
 800ed42:	4413      	add	r3, r2
 800ed44:	b29a      	uxth	r2, r3
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 800ed46:	7d7b      	ldrb	r3, [r7, #21]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	019b      	lsls	r3, r3, #6
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	4413      	add	r3, r2
 800ed50:	b299      	uxth	r1, r3
                    I2C_MEMADD_SIZE_16BIT,
                    data_buf + page_remaining + (page_write * AT24C256_PG_SIZE),
 800ed52:	7dfb      	ldrb	r3, [r7, #23]
 800ed54:	7d7a      	ldrb	r2, [r7, #21]
 800ed56:	0192      	lsls	r2, r2, #6
 800ed58:	4413      	add	r3, r2
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	7d3a      	ldrb	r2, [r7, #20]
 800ed60:	b292      	uxth	r2, r2
 800ed62:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 800ed66:	9402      	str	r4, [sp, #8]
 800ed68:	9201      	str	r2, [sp, #4]
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	2310      	movs	r3, #16
 800ed6e:	460a      	mov	r2, r1
 800ed70:	4629      	mov	r1, r5
 800ed72:	f7f4 fa39 	bl	80031e8 <HAL_I2C_Mem_Write>
 800ed76:	4603      	mov	r3, r0
                    byte_remaining,
                    AT24C256_I2C_TIMOUT) == HAL_OK) {
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d0da      	beq.n	800ed32 <AT24Cxx_write_buffer_bloking+0x16a>
                    } 
            if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6818      	ldr	r0, [r3, #0]
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	791b      	ldrb	r3, [r3, #4]
 800ed84:	4619      	mov	r1, r3
 800ed86:	2305      	movs	r3, #5
 800ed88:	2264      	movs	r2, #100	@ 0x64
 800ed8a:	f7f4 fe47 	bl	8003a1c <HAL_I2C_IsDeviceReady>
                // printf("transmit i2c success\n");
            }
        }
    }
    HAL_Delay(10);
 800ed8e:	200a      	movs	r0, #10
 800ed90:	f7f2 feb2 	bl	8001af8 <HAL_Delay>
}
 800ed94:	bf00      	nop
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bdb0      	pop	{r4, r5, r7, pc}

0800ed9e <AT24Cxx_read_buffer>:

AT24Cxx_Status AT24Cxx_read_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t *data_ret, uint16_t buf_length) {
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b088      	sub	sp, #32
 800eda2:	af04      	add	r7, sp, #16
 800eda4:	60f8      	str	r0, [r7, #12]
 800eda6:	607a      	str	r2, [r7, #4]
 800eda8:	461a      	mov	r2, r3
 800edaa:	460b      	mov	r3, r1
 800edac:	817b      	strh	r3, [r7, #10]
 800edae:	4613      	mov	r3, r2
 800edb0:	813b      	strh	r3, [r7, #8]
    if (mem_addr < AT24C256_MAX_ADDR) {
 800edb2:	897b      	ldrh	r3, [r7, #10]
 800edb4:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800edb8:	4293      	cmp	r3, r2
 800edba:	d815      	bhi.n	800ede8 <AT24Cxx_read_buffer+0x4a>
        while (HAL_I2C_Mem_Read(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_ret,buf_length,1000) != HAL_OK);
 800edbc:	bf00      	nop
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6818      	ldr	r0, [r3, #0]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	791b      	ldrb	r3, [r3, #4]
 800edc6:	4619      	mov	r1, r3
 800edc8:	897a      	ldrh	r2, [r7, #10]
 800edca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800edce:	9302      	str	r3, [sp, #8]
 800edd0:	893b      	ldrh	r3, [r7, #8]
 800edd2:	9301      	str	r3, [sp, #4]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	2310      	movs	r3, #16
 800edda:	f7f4 faff 	bl	80033dc <HAL_I2C_Mem_Read>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1ec      	bne.n	800edbe <AT24Cxx_read_buffer+0x20>
        return AT24Cxx_OK;
 800ede4:	2302      	movs	r3, #2
 800ede6:	e000      	b.n	800edea <AT24Cxx_read_buffer+0x4c>
    } else {
        return AT24Cxx_Error_read;
 800ede8:	2304      	movs	r3, #4
    }
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <transposeArray>:

float String2Float(uint8_t *data_string, uint16_t size) {
    
}

void transposeArray(char *Dest, char *Src, uint8_t col, uint8_t row) {
 800edf2:	b480      	push	{r7}
 800edf4:	b087      	sub	sp, #28
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	60b9      	str	r1, [r7, #8]
 800edfc:	4611      	mov	r1, r2
 800edfe:	461a      	mov	r2, r3
 800ee00:	460b      	mov	r3, r1
 800ee02:	71fb      	strb	r3, [r7, #7]
 800ee04:	4613      	mov	r3, r2
 800ee06:	71bb      	strb	r3, [r7, #6]
    for (int i = 0; i < col; i++) {
 800ee08:	2300      	movs	r3, #0
 800ee0a:	617b      	str	r3, [r7, #20]
 800ee0c:	e020      	b.n	800ee50 <transposeArray+0x5e>
        for (int j = 0; j < row; j++) {
 800ee0e:	2300      	movs	r3, #0
 800ee10:	613b      	str	r3, [r7, #16]
 800ee12:	e016      	b.n	800ee42 <transposeArray+0x50>
            Dest[i * row + j] = Src[j * col + i];
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	693a      	ldr	r2, [r7, #16]
 800ee18:	fb03 f202 	mul.w	r2, r3, r2
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	4413      	add	r3, r2
 800ee20:	461a      	mov	r2, r3
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	441a      	add	r2, r3
 800ee26:	79bb      	ldrb	r3, [r7, #6]
 800ee28:	6979      	ldr	r1, [r7, #20]
 800ee2a:	fb03 f101 	mul.w	r1, r3, r1
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	440b      	add	r3, r1
 800ee32:	4619      	mov	r1, r3
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	440b      	add	r3, r1
 800ee38:	7812      	ldrb	r2, [r2, #0]
 800ee3a:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < row; j++) {
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	613b      	str	r3, [r7, #16]
 800ee42:	79bb      	ldrb	r3, [r7, #6]
 800ee44:	693a      	ldr	r2, [r7, #16]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	dbe4      	blt.n	800ee14 <transposeArray+0x22>
    for (int i = 0; i < col; i++) {
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	617b      	str	r3, [r7, #20]
 800ee50:	79fb      	ldrb	r3, [r7, #7]
 800ee52:	697a      	ldr	r2, [r7, #20]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	dbda      	blt.n	800ee0e <transposeArray+0x1c>
        }
    }
}
 800ee58:	bf00      	nop
 800ee5a:	bf00      	nop
 800ee5c:	371c      	adds	r7, #28
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bc80      	pop	{r7}
 800ee62:	4770      	bx	lr

0800ee64 <DS3231_Init>:
#include "DS3231.h"

static uint8_t decToBcd(int val);
static int bcdToDec(uint8_t val);

DS3231_Status DS3231_Init(DS3231_t *pDS3231, I2C_HandleTypeDef *i2c, uint16_t dev_address) {
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	80fb      	strh	r3, [r7, #6]
    pDS3231->i2c_port = i2c;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	68ba      	ldr	r2, [r7, #8]
 800ee76:	601a      	str	r2, [r3, #0]

    pDS3231->dev_address = dev_address << 1;
 800ee78:	88fb      	ldrh	r3, [r7, #6]
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	005b      	lsls	r3, r3, #1
 800ee7e:	b2da      	uxtb	r2, r3
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	711a      	strb	r2, [r3, #4]
    if (HAL_I2C_IsDeviceReady(pDS3231->i2c_port,pDS3231->dev_address,1,100) == HAL_OK) {
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6818      	ldr	r0, [r3, #0]
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	791b      	ldrb	r3, [r3, #4]
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	2364      	movs	r3, #100	@ 0x64
 800ee90:	2201      	movs	r2, #1
 800ee92:	f7f4 fdc3 	bl	8003a1c <HAL_I2C_IsDeviceReady>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d104      	bne.n	800eea6 <DS3231_Init+0x42>
    	printf("Init DS3231 Success\n");
 800ee9c:	4804      	ldr	r0, [pc, #16]	@ (800eeb0 <DS3231_Init+0x4c>)
 800ee9e:	f003 fc97 	bl	80127d0 <puts>
      return DS3231_Init_OK;
 800eea2:	2300      	movs	r3, #0
 800eea4:	e000      	b.n	800eea8 <DS3231_Init+0x44>
    }
    return DS3231_Fail;
 800eea6:	2301      	movs	r3, #1
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3710      	adds	r7, #16
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	080157e4 	.word	0x080157e4

0800eeb4 <DS3231_Read_time>:

DS3231_Status DS3231_Read_time(DS3231_t *pDS3231, uint8_t *data_read) {
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b088      	sub	sp, #32
 800eeb8:	af04      	add	r7, sp, #16
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
    uint8_t get_time[7];
    if (HAL_I2C_Mem_Read(pDS3231->i2c_port, pDS3231->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6818      	ldr	r0, [r3, #0]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	791b      	ldrb	r3, [r3, #4]
 800eec6:	4619      	mov	r1, r3
 800eec8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eecc:	9302      	str	r3, [sp, #8]
 800eece:	2307      	movs	r3, #7
 800eed0:	9301      	str	r3, [sp, #4]
 800eed2:	f107 0308 	add.w	r3, r7, #8
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	2301      	movs	r3, #1
 800eeda:	2200      	movs	r2, #0
 800eedc:	f7f4 fa7e 	bl	80033dc <HAL_I2C_Mem_Read>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d001      	beq.n	800eeea <DS3231_Read_time+0x36>
      return DS3231_Fail;
 800eee6:	2301      	movs	r3, #1
 800eee8:	e03e      	b.n	800ef68 <DS3231_Read_time+0xb4>
    }
	
  data_read[0] = bcdToDec(get_time[0]);
 800eeea:	7a3b      	ldrb	r3, [r7, #8]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f000 f8b5 	bl	800f05c <bcdToDec>
 800eef2:	4603      	mov	r3, r0
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	701a      	strb	r2, [r3, #0]
	data_read[1] = bcdToDec(get_time[1]);
 800eefa:	7a7b      	ldrb	r3, [r7, #9]
 800eefc:	4618      	mov	r0, r3
 800eefe:	f000 f8ad 	bl	800f05c <bcdToDec>
 800ef02:	4602      	mov	r2, r0
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	3301      	adds	r3, #1
 800ef08:	b2d2      	uxtb	r2, r2
 800ef0a:	701a      	strb	r2, [r3, #0]
	data_read[2] = bcdToDec(get_time[2]);
 800ef0c:	7abb      	ldrb	r3, [r7, #10]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f000 f8a4 	bl	800f05c <bcdToDec>
 800ef14:	4602      	mov	r2, r0
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	3302      	adds	r3, #2
 800ef1a:	b2d2      	uxtb	r2, r2
 800ef1c:	701a      	strb	r2, [r3, #0]
	data_read[3] = bcdToDec(get_time[3]);
 800ef1e:	7afb      	ldrb	r3, [r7, #11]
 800ef20:	4618      	mov	r0, r3
 800ef22:	f000 f89b 	bl	800f05c <bcdToDec>
 800ef26:	4602      	mov	r2, r0
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	3303      	adds	r3, #3
 800ef2c:	b2d2      	uxtb	r2, r2
 800ef2e:	701a      	strb	r2, [r3, #0]
	data_read[4] = bcdToDec(get_time[4]);
 800ef30:	7b3b      	ldrb	r3, [r7, #12]
 800ef32:	4618      	mov	r0, r3
 800ef34:	f000 f892 	bl	800f05c <bcdToDec>
 800ef38:	4602      	mov	r2, r0
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	b2d2      	uxtb	r2, r2
 800ef40:	701a      	strb	r2, [r3, #0]
	data_read[5] = bcdToDec(get_time[5]);
 800ef42:	7b7b      	ldrb	r3, [r7, #13]
 800ef44:	4618      	mov	r0, r3
 800ef46:	f000 f889 	bl	800f05c <bcdToDec>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	3305      	adds	r3, #5
 800ef50:	b2d2      	uxtb	r2, r2
 800ef52:	701a      	strb	r2, [r3, #0]
	data_read[6] = bcdToDec(get_time[6]);
 800ef54:	7bbb      	ldrb	r3, [r7, #14]
 800ef56:	4618      	mov	r0, r3
 800ef58:	f000 f880 	bl	800f05c <bcdToDec>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	3306      	adds	r3, #6
 800ef62:	b2d2      	uxtb	r2, r2
 800ef64:	701a      	strb	r2, [r3, #0]
  return DS3231_Write_OK;
 800ef66:	2302      	movs	r3, #2
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3710      	adds	r7, #16
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <DS3231_Write_time>:

DS3231_Status DS3231_Write_time(DS3231_t *pDS3231,uint8_t sec, uint8_t min, uint8_t hour, uint8_t day, uint8_t month, uint8_t year) {
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b088      	sub	sp, #32
 800ef74:	af04      	add	r7, sp, #16
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	4608      	mov	r0, r1
 800ef7a:	4611      	mov	r1, r2
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	4603      	mov	r3, r0
 800ef80:	70fb      	strb	r3, [r7, #3]
 800ef82:	460b      	mov	r3, r1
 800ef84:	70bb      	strb	r3, [r7, #2]
 800ef86:	4613      	mov	r3, r2
 800ef88:	707b      	strb	r3, [r7, #1]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 800ef8a:	78fb      	ldrb	r3, [r7, #3]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f000 f841 	bl	800f014 <decToBcd>
 800ef92:	4603      	mov	r3, r0
 800ef94:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 800ef96:	78bb      	ldrb	r3, [r7, #2]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f000 f83b 	bl	800f014 <decToBcd>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 800efa2:	787b      	ldrb	r3, [r7, #1]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f000 f835 	bl	800f014 <decToBcd>
 800efaa:	4603      	mov	r3, r0
 800efac:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(7);
 800efae:	2007      	movs	r0, #7
 800efb0:	f000 f830 	bl	800f014 <decToBcd>
 800efb4:	4603      	mov	r3, r0
 800efb6:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(day);
 800efb8:	7e3b      	ldrb	r3, [r7, #24]
 800efba:	4618      	mov	r0, r3
 800efbc:	f000 f82a 	bl	800f014 <decToBcd>
 800efc0:	4603      	mov	r3, r0
 800efc2:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 800efc4:	7f3b      	ldrb	r3, [r7, #28]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 f824 	bl	800f014 <decToBcd>
 800efcc:	4603      	mov	r3, r0
 800efce:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 800efd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f000 f81d 	bl	800f014 <decToBcd>
 800efda:	4603      	mov	r3, r0
 800efdc:	73bb      	strb	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(pDS3231->i2c_port, pDS3231->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, set_time, 7, 1000) != HAL_OK) {
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6818      	ldr	r0, [r3, #0]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	791b      	ldrb	r3, [r3, #4]
 800efe6:	4619      	mov	r1, r3
 800efe8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800efec:	9302      	str	r3, [sp, #8]
 800efee:	2307      	movs	r3, #7
 800eff0:	9301      	str	r3, [sp, #4]
 800eff2:	f107 0308 	add.w	r3, r7, #8
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	2301      	movs	r3, #1
 800effa:	2200      	movs	r2, #0
 800effc:	f7f4 f8f4 	bl	80031e8 <HAL_I2C_Mem_Write>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <DS3231_Write_time+0x9a>
    return DS3231_Fail;
 800f006:	2301      	movs	r3, #1
 800f008:	e000      	b.n	800f00c <DS3231_Write_time+0x9c>
  }
  return DS3231_Read_OK;
 800f00a:	2303      	movs	r3, #3
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <decToBcd>:

// Convert normal decimal numbers to binary coded decimal
static uint8_t decToBcd(int val)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4a0e      	ldr	r2, [pc, #56]	@ (800f058 <decToBcd+0x44>)
 800f020:	fb82 1203 	smull	r1, r2, r2, r3
 800f024:	1092      	asrs	r2, r2, #2
 800f026:	17db      	asrs	r3, r3, #31
 800f028:	1ad3      	subs	r3, r2, r3
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	011b      	lsls	r3, r3, #4
 800f02e:	b2d8      	uxtb	r0, r3
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	4b09      	ldr	r3, [pc, #36]	@ (800f058 <decToBcd+0x44>)
 800f034:	fb83 1302 	smull	r1, r3, r3, r2
 800f038:	1099      	asrs	r1, r3, #2
 800f03a:	17d3      	asrs	r3, r2, #31
 800f03c:	1ac9      	subs	r1, r1, r3
 800f03e:	460b      	mov	r3, r1
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	440b      	add	r3, r1
 800f044:	005b      	lsls	r3, r3, #1
 800f046:	1ad1      	subs	r1, r2, r3
 800f048:	b2cb      	uxtb	r3, r1
 800f04a:	4403      	add	r3, r0
 800f04c:	b2db      	uxtb	r3, r3
}
 800f04e:	4618      	mov	r0, r3
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	bc80      	pop	{r7}
 800f056:	4770      	bx	lr
 800f058:	66666667 	.word	0x66666667

0800f05c <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
static int bcdToDec(uint8_t val)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	4603      	mov	r3, r0
 800f064:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800f066:	79fb      	ldrb	r3, [r7, #7]
 800f068:	091b      	lsrs	r3, r3, #4
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	461a      	mov	r2, r3
 800f06e:	4613      	mov	r3, r2
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	4413      	add	r3, r2
 800f074:	005b      	lsls	r3, r3, #1
 800f076:	461a      	mov	r2, r3
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	f003 030f 	and.w	r3, r3, #15
 800f07e:	4413      	add	r3, r2
}
 800f080:	4618      	mov	r0, r3
 800f082:	370c      	adds	r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	bc80      	pop	{r7}
 800f088:	4770      	bx	lr

0800f08a <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b086      	sub	sp, #24
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
 800f092:	460b      	mov	r3, r1
 800f094:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 800f096:	235a      	movs	r3, #90	@ 0x5a
 800f098:	733b      	strb	r3, [r7, #12]
 800f09a:	23a5      	movs	r3, #165	@ 0xa5
 800f09c:	737b      	strb	r3, [r7, #13]
 800f09e:	2307      	movs	r3, #7
 800f0a0:	73bb      	strb	r3, [r7, #14]
 800f0a2:	2382      	movs	r3, #130	@ 0x82
 800f0a4:	73fb      	strb	r3, [r7, #15]
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	743b      	strb	r3, [r7, #16]
 800f0aa:	2384      	movs	r3, #132	@ 0x84
 800f0ac:	747b      	strb	r3, [r7, #17]
 800f0ae:	235a      	movs	r3, #90	@ 0x5a
 800f0b0:	74bb      	strb	r3, [r7, #18]
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	74fb      	strb	r3, [r7, #19]
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	753b      	strb	r3, [r7, #20]
 800f0ba:	78fb      	ldrb	r3, [r7, #3]
 800f0bc:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6818      	ldr	r0, [r3, #0]
 800f0c2:	f107 010c 	add.w	r1, r7, #12
 800f0c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f0ca:	220a      	movs	r2, #10
 800f0cc:	f7f7 f9b6 	bl	800643c <HAL_UART_Transmit>
}
 800f0d0:	bf00      	nop
 800f0d2:	3718      	adds	r7, #24
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, char *textData, uint16_t datalen) {
 800f0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0dc:	b08a      	sub	sp, #40	@ 0x28
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	60f8      	str	r0, [r7, #12]
 800f0e2:	607a      	str	r2, [r7, #4]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	817b      	strh	r3, [r7, #10]
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	813b      	strh	r3, [r7, #8]
 800f0ee:	466b      	mov	r3, sp
 800f0f0:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 800f0f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f0f6:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 800f0f8:	893b      	ldrh	r3, [r7, #8]
 800f0fa:	f103 0608 	add.w	r6, r3, #8
 800f0fe:	1e73      	subs	r3, r6, #1
 800f100:	627b      	str	r3, [r7, #36]	@ 0x24
 800f102:	4632      	mov	r2, r6
 800f104:	2300      	movs	r3, #0
 800f106:	4690      	mov	r8, r2
 800f108:	4699      	mov	r9, r3
 800f10a:	f04f 0200 	mov.w	r2, #0
 800f10e:	f04f 0300 	mov.w	r3, #0
 800f112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f11a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f11e:	4632      	mov	r2, r6
 800f120:	2300      	movs	r3, #0
 800f122:	4614      	mov	r4, r2
 800f124:	461d      	mov	r5, r3
 800f126:	f04f 0200 	mov.w	r2, #0
 800f12a:	f04f 0300 	mov.w	r3, #0
 800f12e:	00eb      	lsls	r3, r5, #3
 800f130:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f134:	00e2      	lsls	r2, r4, #3
 800f136:	4633      	mov	r3, r6
 800f138:	3307      	adds	r3, #7
 800f13a:	08db      	lsrs	r3, r3, #3
 800f13c:	00db      	lsls	r3, r3, #3
 800f13e:	ebad 0d03 	sub.w	sp, sp, r3
 800f142:	466b      	mov	r3, sp
 800f144:	3300      	adds	r3, #0
 800f146:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800f148:	235a      	movs	r3, #90	@ 0x5a
 800f14a:	753b      	strb	r3, [r7, #20]
 800f14c:	23a5      	movs	r3, #165	@ 0xa5
 800f14e:	757b      	strb	r3, [r7, #21]
 800f150:	893b      	ldrh	r3, [r7, #8]
 800f152:	b2db      	uxtb	r3, r3
 800f154:	3305      	adds	r3, #5
 800f156:	b2db      	uxtb	r3, r3
 800f158:	75bb      	strb	r3, [r7, #22]
 800f15a:	2382      	movs	r3, #130	@ 0x82
 800f15c:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800f15e:	897b      	ldrh	r3, [r7, #10]
 800f160:	0a1b      	lsrs	r3, r3, #8
 800f162:	b29b      	uxth	r3, r3
 800f164:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800f166:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800f168:	897b      	ldrh	r3, [r7, #10]
 800f16a:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800f16c:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 800f16e:	6a3b      	ldr	r3, [r7, #32]
 800f170:	461a      	mov	r2, r3
 800f172:	f107 0314 	add.w	r3, r7, #20
 800f176:	6818      	ldr	r0, [r3, #0]
 800f178:	6010      	str	r0, [r2, #0]
 800f17a:	889b      	ldrh	r3, [r3, #4]
 800f17c:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 800f17e:	6a3b      	ldr	r3, [r7, #32]
 800f180:	3306      	adds	r3, #6
 800f182:	893a      	ldrh	r2, [r7, #8]
 800f184:	6879      	ldr	r1, [r7, #4]
 800f186:	4618      	mov	r0, r3
 800f188:	f003 fdb3 	bl	8012cf2 <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 800f18c:	893b      	ldrh	r3, [r7, #8]
 800f18e:	3306      	adds	r3, #6
 800f190:	461a      	mov	r2, r3
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	4413      	add	r3, r2
 800f196:	8bba      	ldrh	r2, [r7, #28]
 800f198:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6818      	ldr	r0, [r3, #0]
 800f19e:	b2b2      	uxth	r2, r6
 800f1a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f1a4:	6a39      	ldr	r1, [r7, #32]
 800f1a6:	f7f7 f949 	bl	800643c <HAL_UART_Transmit>
 800f1aa:	46d5      	mov	sp, sl
}
 800f1ac:	bf00      	nop
 800f1ae:	3728      	adds	r7, #40	@ 0x28
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800f1b8 <DWIN_ClearText>:

void DWIN_ClearText(Dwin_t *pDwin, uint16_t VP_address) {
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	807b      	strh	r3, [r7, #2]
    DWIN_SetText(pDwin,VP_address,(uint8_t *)"",strlen(""));
 800f1c4:	8879      	ldrh	r1, [r7, #2]
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	4a03      	ldr	r2, [pc, #12]	@ (800f1d8 <DWIN_ClearText+0x20>)
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7ff ff84 	bl	800f0d8 <DWIN_SetText>
}
 800f1d0:	bf00      	nop
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	080157f8 	.word	0x080157f8

0800f1dc <DWIN_SetColorText>:

void DWIN_SetColorText(Dwin_t *pDwin, uint16_t SP_address, uint16_t color) {
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	807b      	strh	r3, [r7, #2]
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	803b      	strh	r3, [r7, #0]
    SP_address = SP_address | 3; // offset color text
 800f1ec:	887b      	ldrh	r3, [r7, #2]
 800f1ee:	f043 0303 	orr.w	r3, r3, #3
 800f1f2:	807b      	strh	r3, [r7, #2]

    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800f1f4:	235a      	movs	r3, #90	@ 0x5a
 800f1f6:	723b      	strb	r3, [r7, #8]
 800f1f8:	23a5      	movs	r3, #165	@ 0xa5
 800f1fa:	727b      	strb	r3, [r7, #9]
 800f1fc:	2305      	movs	r3, #5
 800f1fe:	72bb      	strb	r3, [r7, #10]
 800f200:	2382      	movs	r3, #130	@ 0x82
 800f202:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((SP_address >> 8) & 0xFF), (uint8_t)((SP_address)&0xFF), 
 800f204:	887b      	ldrh	r3, [r7, #2]
 800f206:	0a1b      	lsrs	r3, r3, #8
 800f208:	b29b      	uxth	r3, r3
 800f20a:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800f20c:	733b      	strb	r3, [r7, #12]
    (uint8_t)((SP_address >> 8) & 0xFF), (uint8_t)((SP_address)&0xFF), 
 800f20e:	887b      	ldrh	r3, [r7, #2]
 800f210:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800f212:	737b      	strb	r3, [r7, #13]
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };
 800f214:	883b      	ldrh	r3, [r7, #0]
 800f216:	0a1b      	lsrs	r3, r3, #8
 800f218:	b29b      	uxth	r3, r3
 800f21a:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800f21c:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };
 800f21e:	883b      	ldrh	r3, [r7, #0]
 800f220:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800f222:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6818      	ldr	r0, [r3, #0]
 800f228:	f107 0108 	add.w	r1, r7, #8
 800f22c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f230:	2208      	movs	r2, #8
 800f232:	f7f7 f903 	bl	800643c <HAL_UART_Transmit>
}
 800f236:	bf00      	nop
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <DWIN_SetVariable_Icon>:

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 800f23e:	b580      	push	{r7, lr}
 800f240:	b084      	sub	sp, #16
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
 800f246:	460b      	mov	r3, r1
 800f248:	807b      	strh	r3, [r7, #2]
 800f24a:	4613      	mov	r3, r2
 800f24c:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800f24e:	235a      	movs	r3, #90	@ 0x5a
 800f250:	723b      	strb	r3, [r7, #8]
 800f252:	23a5      	movs	r3, #165	@ 0xa5
 800f254:	727b      	strb	r3, [r7, #9]
 800f256:	2305      	movs	r3, #5
 800f258:	72bb      	strb	r3, [r7, #10]
 800f25a:	2382      	movs	r3, #130	@ 0x82
 800f25c:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 800f25e:	887b      	ldrh	r3, [r7, #2]
 800f260:	0a1b      	lsrs	r3, r3, #8
 800f262:	b29b      	uxth	r3, r3
 800f264:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800f266:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 800f268:	887b      	ldrh	r3, [r7, #2]
 800f26a:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800f26c:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 800f26e:	883b      	ldrh	r3, [r7, #0]
 800f270:	0a1b      	lsrs	r3, r3, #8
 800f272:	b29b      	uxth	r3, r3
 800f274:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800f276:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 800f278:	883b      	ldrh	r3, [r7, #0]
 800f27a:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800f27c:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6818      	ldr	r0, [r3, #0]
 800f282:	f107 0108 	add.w	r1, r7, #8
 800f286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f28a:	2208      	movs	r2, #8
 800f28c:	f7f7 f8d6 	bl	800643c <HAL_UART_Transmit>
}
 800f290:	bf00      	nop
 800f292:	3710      	adds	r7, #16
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <DWIN_SetArray_Icon>:

void DWIN_SetArray_Icon(Dwin_t *pDwin, uint16_t VP_address_begin, uint8_t *data_array, uint8_t data_length ) {
 800f298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f29c:	b08b      	sub	sp, #44	@ 0x2c
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	60f8      	str	r0, [r7, #12]
 800f2a2:	607a      	str	r2, [r7, #4]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	817b      	strh	r3, [r7, #10]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	727b      	strb	r3, [r7, #9]
 800f2ae:	466b      	mov	r3, sp
 800f2b0:	461e      	mov	r6, r3
    uint16_t Total_Data_Length = data_length * 2;
 800f2b2:	7a7b      	ldrb	r3, [r7, #9]
 800f2b4:	b29b      	uxth	r3, r3
 800f2b6:	005b      	lsls	r3, r3, #1
 800f2b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t sendBuffer[6 +Total_Data_Length];
 800f2ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f2bc:	1d99      	adds	r1, r3, #6
 800f2be:	1e4b      	subs	r3, r1, #1
 800f2c0:	623b      	str	r3, [r7, #32]
 800f2c2:	460a      	mov	r2, r1
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	4690      	mov	r8, r2
 800f2c8:	4699      	mov	r9, r3
 800f2ca:	f04f 0200 	mov.w	r2, #0
 800f2ce:	f04f 0300 	mov.w	r3, #0
 800f2d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f2d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f2da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f2de:	460a      	mov	r2, r1
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	4614      	mov	r4, r2
 800f2e4:	461d      	mov	r5, r3
 800f2e6:	f04f 0200 	mov.w	r2, #0
 800f2ea:	f04f 0300 	mov.w	r3, #0
 800f2ee:	00eb      	lsls	r3, r5, #3
 800f2f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f2f4:	00e2      	lsls	r2, r4, #3
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	3307      	adds	r3, #7
 800f2fa:	08db      	lsrs	r3, r3, #3
 800f2fc:	00db      	lsls	r3, r3, #3
 800f2fe:	ebad 0d03 	sub.w	sp, sp, r3
 800f302:	466b      	mov	r3, sp
 800f304:	3300      	adds	r3, #0
 800f306:	61fb      	str	r3, [r7, #28]
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800f308:	235a      	movs	r3, #90	@ 0x5a
 800f30a:	753b      	strb	r3, [r7, #20]
 800f30c:	23a5      	movs	r3, #165	@ 0xa5
 800f30e:	757b      	strb	r3, [r7, #21]
 800f310:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f312:	b2db      	uxtb	r3, r3
 800f314:	3303      	adds	r3, #3
 800f316:	b2db      	uxtb	r3, r3
 800f318:	75bb      	strb	r3, [r7, #22]
 800f31a:	2382      	movs	r3, #130	@ 0x82
 800f31c:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800f31e:	897b      	ldrh	r3, [r7, #10]
 800f320:	0a1b      	lsrs	r3, r3, #8
 800f322:	b29b      	uxth	r3, r3
 800f324:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800f326:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800f328:	897b      	ldrh	r3, [r7, #10]
 800f32a:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800f32c:	767b      	strb	r3, [r7, #25]

    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	461a      	mov	r2, r3
 800f332:	f107 0314 	add.w	r3, r7, #20
 800f336:	6818      	ldr	r0, [r3, #0]
 800f338:	6010      	str	r0, [r2, #0]
 800f33a:	889b      	ldrh	r3, [r3, #4]
 800f33c:	8093      	strh	r3, [r2, #4]
    /* Convert data array uint8_t to uint16_t */
    for (uint16_t i = 0; i < data_length; i++) {
 800f33e:	2300      	movs	r3, #0
 800f340:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f342:	e012      	b.n	800f36a <DWIN_SetArray_Icon+0xd2>
        sendBuffer[6 + (i * 2)] = 0x00;              // High byte 
 800f344:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f346:	3303      	adds	r3, #3
 800f348:	005b      	lsls	r3, r3, #1
 800f34a:	69fa      	ldr	r2, [r7, #28]
 800f34c:	2000      	movs	r0, #0
 800f34e:	54d0      	strb	r0, [r2, r3]
        sendBuffer[6 + (i * 2) + 1] = data_array[i]; // Low byte is data
 800f350:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	441a      	add	r2, r3
 800f356:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f358:	3303      	adds	r3, #3
 800f35a:	005b      	lsls	r3, r3, #1
 800f35c:	3301      	adds	r3, #1
 800f35e:	7810      	ldrb	r0, [r2, #0]
 800f360:	69fa      	ldr	r2, [r7, #28]
 800f362:	54d0      	strb	r0, [r2, r3]
    for (uint16_t i = 0; i < data_length; i++) {
 800f364:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f366:	3301      	adds	r3, #1
 800f368:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f36a:	7a7b      	ldrb	r3, [r7, #9]
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f370:	429a      	cmp	r2, r3
 800f372:	d3e7      	bcc.n	800f344 <DWIN_SetArray_Icon+0xac>
    }

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6818      	ldr	r0, [r3, #0]
 800f378:	b28a      	uxth	r2, r1
 800f37a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f37e:	69f9      	ldr	r1, [r7, #28]
 800f380:	f7f7 f85c 	bl	800643c <HAL_UART_Transmit>
 800f384:	46b5      	mov	sp, r6
}
 800f386:	bf00      	nop
 800f388:	372c      	adds	r7, #44	@ 0x2c
 800f38a:	46bd      	mov	sp, r7
 800f38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f390 <DWIN_Create_Basic_line>:

void DWIN_Create_Basic_line(Dwin_t *pDwin, uint16_t VP_address, uint16_t x_base, uint16_t y_base, uint8_t *array_data, uint8_t size) {
 800f390:	b5b0      	push	{r4, r5, r7, lr}
 800f392:	b0d0      	sub	sp, #320	@ 0x140
 800f394:	af00      	add	r7, sp, #0
 800f396:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800f39a:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800f39e:	6020      	str	r0, [r4, #0]
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	4610      	mov	r0, r2
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f3aa:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800f3ae:	4622      	mov	r2, r4
 800f3b0:	801a      	strh	r2, [r3, #0]
 800f3b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f3b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	801a      	strh	r2, [r3, #0]
 800f3be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f3c2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800f3c6:	460a      	mov	r2, r1
 800f3c8:	801a      	strh	r2, [r3, #0]
    uint8_t data_length = 11 + (16*size);
 800f3ca:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800f3ce:	011b      	lsls	r3, r3, #4
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	330b      	adds	r3, #11
 800f3d4:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
    uint16_t num_connection = (size * 4) - 1;
 800f3d8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	3b01      	subs	r3, #1
 800f3e4:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800f3e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f3ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	23ff      	movs	r3, #255	@ 0xff
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	2100      	movs	r1, #0
 800f3f8:	f003 fb32 	bl	8012a60 <memset>
 800f3fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f400:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f404:	225a      	movs	r2, #90	@ 0x5a
 800f406:	701a      	strb	r2, [r3, #0]
 800f408:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f40c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f410:	22a5      	movs	r2, #165	@ 0xa5
 800f412:	705a      	strb	r2, [r3, #1]
 800f414:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f418:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f41c:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 800f420:	709a      	strb	r2, [r3, #2]
 800f422:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f426:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f42a:	2282      	movs	r2, #130	@ 0x82
 800f42c:	70da      	strb	r2, [r3, #3]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800f42e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f432:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	0a1b      	lsrs	r3, r3, #8
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800f43e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f442:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f446:	711a      	strb	r2, [r3, #4]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800f448:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f44c:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800f450:	881b      	ldrh	r3, [r3, #0]
 800f452:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800f454:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f458:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f45c:	715a      	strb	r2, [r3, #5]
 800f45e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f462:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f466:	2202      	movs	r2, #2
 800f468:	71da      	strb	r2, [r3, #7]
                            (uint8_t)((num_connection >> 8) & 0xFF), (uint8_t)(num_connection & 0xFF), 0x01, 0xED };
 800f46a:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 800f46e:	0a1b      	lsrs	r3, r3, #8
 800f470:	b29b      	uxth	r3, r3
 800f472:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800f474:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f478:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f47c:	721a      	strb	r2, [r3, #8]
                            (uint8_t)((num_connection >> 8) & 0xFF), (uint8_t)(num_connection & 0xFF), 0x01, 0xED };
 800f47e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 800f482:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800f484:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f488:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f48c:	725a      	strb	r2, [r3, #9]
 800f48e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f492:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f496:	2201      	movs	r2, #1
 800f498:	729a      	strb	r2, [r3, #10]
 800f49a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f49e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800f4a2:	22ed      	movs	r2, #237	@ 0xed
 800f4a4:	72da      	strb	r2, [r3, #11]
    uint8_t End_bit[2] = {0xFF, 0x00};
 800f4a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f4aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f4ae:	22ff      	movs	r2, #255	@ 0xff
 800f4b0:	801a      	strh	r2, [r3, #0]
    uint16_t x1,y1,x2,y2,x3,y3,x4,y4 = 0;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    uint8_t index = 0;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    

    // Create the send Buffer 
    for (uint8_t i = 0; i < size; i++) {
 800f4be:	2300      	movs	r3, #0
 800f4c0:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 800f4c4:	e120      	b.n	800f708 <DWIN_Create_Basic_line+0x378>
        y1 = y2 = y3 = y4 = y_base;
 800f4c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f4ca:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 800f4d4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800f4d8:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 800f4dc:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800f4e0:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 800f4e4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800f4e8:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        x1 = x_base + (25 * index);
 800f4ec:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	0092      	lsls	r2, r2, #2
 800f4f6:	4413      	add	r3, r2
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	0091      	lsls	r1, r2, #2
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	460b      	mov	r3, r1
 800f500:	4413      	add	r3, r2
 800f502:	b29a      	uxth	r2, r3
 800f504:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f508:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f50c:	881b      	ldrh	r3, [r3, #0]
 800f50e:	4413      	add	r3, r2
 800f510:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
        ++index; 
 800f514:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800f518:	3301      	adds	r3, #1
 800f51a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        x2 = x_base + (25 * index);
 800f51e:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800f522:	b29b      	uxth	r3, r3
 800f524:	461a      	mov	r2, r3
 800f526:	0092      	lsls	r2, r2, #2
 800f528:	4413      	add	r3, r2
 800f52a:	461a      	mov	r2, r3
 800f52c:	0091      	lsls	r1, r2, #2
 800f52e:	461a      	mov	r2, r3
 800f530:	460b      	mov	r3, r1
 800f532:	4413      	add	r3, r2
 800f534:	b29a      	uxth	r2, r3
 800f536:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f53a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f53e:	881b      	ldrh	r3, [r3, #0]
 800f540:	4413      	add	r3, r2
 800f542:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
        ++index;
 800f546:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800f54a:	3301      	adds	r3, #1
 800f54c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        x3 = x2;
 800f550:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800f554:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
        x4 = x_base + (25 * index);
 800f558:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	461a      	mov	r2, r3
 800f560:	0092      	lsls	r2, r2, #2
 800f562:	4413      	add	r3, r2
 800f564:	461a      	mov	r2, r3
 800f566:	0091      	lsls	r1, r2, #2
 800f568:	461a      	mov	r2, r3
 800f56a:	460b      	mov	r3, r1
 800f56c:	4413      	add	r3, r2
 800f56e:	b29a      	uxth	r2, r3
 800f570:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f574:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f578:	881b      	ldrh	r3, [r3, #0]
 800f57a:	4413      	add	r3, r2
 800f57c:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
        if (array_data[i]) { // HIGH CLOCK
 800f580:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800f584:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800f588:	4413      	add	r3, r2
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d013      	beq.n	800f5b8 <DWIN_Create_Basic_line+0x228>
            y1 = y2 = y3 = y4 = y_base - 30;  
 800f590:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f594:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800f598:	881b      	ldrh	r3, [r3, #0]
 800f59a:	3b1e      	subs	r3, #30
 800f59c:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 800f5a0:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800f5a4:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 800f5a8:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800f5ac:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 800f5b0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800f5b4:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        }
        // Create clock buffer
        uint8_t Clock_Buffer[] = { (x1 >> 8) & 0xFF, (x1 & 0xFF), (y1 >> 8) & 0xFF, (y1 & 0xFF),
 800f5b8:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800f5bc:	0a1b      	lsrs	r3, r3, #8
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	b2da      	uxtb	r2, r3
 800f5c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f5c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f5ca:	701a      	strb	r2, [r3, #0]
 800f5cc:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800f5d0:	b2da      	uxtb	r2, r3
 800f5d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f5d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f5da:	705a      	strb	r2, [r3, #1]
 800f5dc:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800f5e0:	0a1b      	lsrs	r3, r3, #8
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	b2da      	uxtb	r2, r3
 800f5e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f5ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f5ee:	709a      	strb	r2, [r3, #2]
 800f5f0:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800f5f4:	b2da      	uxtb	r2, r3
 800f5f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f5fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f5fe:	70da      	strb	r2, [r3, #3]
 800f600:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800f604:	0a1b      	lsrs	r3, r3, #8
 800f606:	b29b      	uxth	r3, r3
 800f608:	b2da      	uxtb	r2, r3
 800f60a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f60e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f612:	711a      	strb	r2, [r3, #4]
 800f614:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800f618:	b2da      	uxtb	r2, r3
 800f61a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f61e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f622:	715a      	strb	r2, [r3, #5]
 800f624:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800f628:	0a1b      	lsrs	r3, r3, #8
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	b2da      	uxtb	r2, r3
 800f62e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f632:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f636:	719a      	strb	r2, [r3, #6]
 800f638:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f642:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f646:	71da      	strb	r2, [r3, #7]
 800f648:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 800f64c:	0a1b      	lsrs	r3, r3, #8
 800f64e:	b29b      	uxth	r3, r3
 800f650:	b2da      	uxtb	r2, r3
 800f652:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f656:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f65a:	721a      	strb	r2, [r3, #8]
 800f65c:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 800f660:	b2da      	uxtb	r2, r3
 800f662:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f666:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f66a:	725a      	strb	r2, [r3, #9]
 800f66c:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800f670:	0a1b      	lsrs	r3, r3, #8
 800f672:	b29b      	uxth	r3, r3
 800f674:	b2da      	uxtb	r2, r3
 800f676:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f67a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f67e:	729a      	strb	r2, [r3, #10]
 800f680:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800f684:	b2da      	uxtb	r2, r3
 800f686:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f68a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f68e:	72da      	strb	r2, [r3, #11]
 800f690:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 800f694:	0a1b      	lsrs	r3, r3, #8
 800f696:	b29b      	uxth	r3, r3
 800f698:	b2da      	uxtb	r2, r3
 800f69a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f69e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f6a2:	731a      	strb	r2, [r3, #12]
 800f6a4:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 800f6a8:	b2da      	uxtb	r2, r3
 800f6aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f6ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f6b2:	735a      	strb	r2, [r3, #13]
 800f6b4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800f6b8:	0a1b      	lsrs	r3, r3, #8
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	b2da      	uxtb	r2, r3
 800f6be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f6c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f6c6:	739a      	strb	r2, [r3, #14]
 800f6c8:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800f6cc:	b2da      	uxtb	r2, r3
 800f6ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f6d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f6d6:	73da      	strb	r2, [r3, #15]
                        (x2 >> 8) & 0xFF, (x2 & 0xFF), (y2 >> 8) & 0xFF, (y2 & 0xFF), 
                        (x3 >> 8) & 0xFF, (x3 & 0xFF), (y3 >> 8) & 0xFF, (y3 & 0xFF), 
                        (x4 >> 8) & 0xFF, (x4 & 0xFF), (y4 >> 8) & 0xFF, (y4 & 0xFF), };

        // add to sendBuffer 
        memcpy(sendBuffer + (12 + 16 * i) ,Clock_Buffer,sizeof(Clock_Buffer));
 800f6d8:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800f6dc:	011b      	lsls	r3, r3, #4
 800f6de:	330c      	adds	r3, #12
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f6e6:	441a      	add	r2, r3
 800f6e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f6ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f6f0:	4614      	mov	r4, r2
 800f6f2:	461d      	mov	r5, r3
 800f6f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6f6:	6020      	str	r0, [r4, #0]
 800f6f8:	6061      	str	r1, [r4, #4]
 800f6fa:	60a2      	str	r2, [r4, #8]
 800f6fc:	60e3      	str	r3, [r4, #12]
    for (uint8_t i = 0; i < size; i++) {
 800f6fe:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800f702:	3301      	adds	r3, #1
 800f704:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 800f708:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 800f70c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800f710:	429a      	cmp	r2, r3
 800f712:	f4ff aed8 	bcc.w	800f4c6 <DWIN_Create_Basic_line+0x136>
    }
    // End bit 
    memcpy(sendBuffer + (data_length + 1),End_bit,2);
 800f716:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 800f71a:	3301      	adds	r3, #1
 800f71c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f720:	4413      	add	r3, r2
 800f722:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f726:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800f72a:	8812      	ldrh	r2, [r2, #0]
 800f72c:	801a      	strh	r2, [r3, #0]


    // Send data
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f72e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f732:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	6818      	ldr	r0, [r3, #0]
 800f73a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f73e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f742:	22ff      	movs	r2, #255	@ 0xff
 800f744:	f7f6 fe7a 	bl	800643c <HAL_UART_Transmit>
}
 800f748:	bf00      	nop
 800f74a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800f74e:	46bd      	mov	sp, r7
 800f750:	bdb0      	pop	{r4, r5, r7, pc}

0800f752 <DWIN_SetWidth_Basic_line>:

void DWIN_SetWidth_Basic_line(Dwin_t *pDwin, uint16_t SP_Address, uint8_t width) {
 800f752:	b580      	push	{r7, lr}
 800f754:	b084      	sub	sp, #16
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
 800f75a:	460b      	mov	r3, r1
 800f75c:	807b      	strh	r3, [r7, #2]
 800f75e:	4613      	mov	r3, r2
 800f760:	707b      	strb	r3, [r7, #1]
    SP_Address = SP_Address | 7; // offset width line 
 800f762:	887b      	ldrh	r3, [r7, #2]
 800f764:	f043 0307 	orr.w	r3, r3, #7
 800f768:	807b      	strh	r3, [r7, #2]
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 800f76a:	235a      	movs	r3, #90	@ 0x5a
 800f76c:	723b      	strb	r3, [r7, #8]
 800f76e:	23a5      	movs	r3, #165	@ 0xa5
 800f770:	727b      	strb	r3, [r7, #9]
 800f772:	2305      	movs	r3, #5
 800f774:	72bb      	strb	r3, [r7, #10]
 800f776:	2382      	movs	r3, #130	@ 0x82
 800f778:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((SP_Address >> 8) & 0xFF), (uint8_t)(SP_Address & 0xFF),
 800f77a:	887b      	ldrh	r3, [r7, #2]
 800f77c:	0a1b      	lsrs	r3, r3, #8
 800f77e:	b29b      	uxth	r3, r3
 800f780:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 800f782:	733b      	strb	r3, [r7, #12]
    (uint8_t)((SP_Address >> 8) & 0xFF), (uint8_t)(SP_Address & 0xFF),
 800f784:	887b      	ldrh	r3, [r7, #2]
 800f786:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 800f788:	737b      	strb	r3, [r7, #13]
 800f78a:	2300      	movs	r3, #0
 800f78c:	73bb      	strb	r3, [r7, #14]
 800f78e:	787b      	ldrb	r3, [r7, #1]
 800f790:	73fb      	strb	r3, [r7, #15]
    (uint8_t)(0x00), (uint8_t)(width & 0xFF) };
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),500);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6818      	ldr	r0, [r3, #0]
 800f796:	f107 0108 	add.w	r1, r7, #8
 800f79a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800f79e:	2208      	movs	r2, #8
 800f7a0:	f7f6 fe4c 	bl	800643c <HAL_UART_Transmit>
}
 800f7a4:	bf00      	nop
 800f7a6:	3710      	adds	r7, #16
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <DWIN_Create_Single_line>:

void DWIN_Create_Single_line(Dwin_t *pDwin, uint16_t VP_address, uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint16_t color) {
 800f7ac:	b590      	push	{r4, r7, lr}
 800f7ae:	b0c5      	sub	sp, #276	@ 0x114
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800f7b6:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800f7ba:	6020      	str	r0, [r4, #0]
 800f7bc:	460c      	mov	r4, r1
 800f7be:	4610      	mov	r0, r2
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f7c6:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800f7ca:	4622      	mov	r2, r4
 800f7cc:	801a      	strh	r2, [r3, #0]
 800f7ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f7d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	801a      	strh	r2, [r3, #0]
 800f7da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f7de:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800f7e2:	460a      	mov	r2, r1
 800f7e4:	801a      	strh	r2, [r3, #0]
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800f7e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f7ea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	23ff      	movs	r3, #255	@ 0xff
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	f003 f933 	bl	8012a60 <memset>
 800f7fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f7fe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f802:	225a      	movs	r2, #90	@ 0x5a
 800f804:	701a      	strb	r2, [r3, #0]
 800f806:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f80a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f80e:	22a5      	movs	r2, #165	@ 0xa5
 800f810:	705a      	strb	r2, [r3, #1]
 800f812:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f816:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f81a:	2213      	movs	r2, #19
 800f81c:	709a      	strb	r2, [r3, #2]
 800f81e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f822:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f826:	2282      	movs	r2, #130	@ 0x82
 800f828:	70da      	strb	r2, [r3, #3]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800f82a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f82e:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	0a1b      	lsrs	r3, r3, #8
 800f836:	b29b      	uxth	r3, r3
 800f838:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800f83a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f83e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f842:	711a      	strb	r2, [r3, #4]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800f844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f848:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800f84c:	881b      	ldrh	r3, [r3, #0]
 800f84e:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800f850:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f854:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f858:	715a      	strb	r2, [r3, #5]
 800f85a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f85e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f862:	2202      	movs	r2, #2
 800f864:	71da      	strb	r2, [r3, #7]
 800f866:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f86a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f86e:	2201      	movs	r2, #1
 800f870:	725a      	strb	r2, [r3, #9]
                            (uint8_t)((0x0001 >> 8) & 0xFF), (uint8_t)(0x0001 & 0xFF),
                            (uint8_t)((color >> 8) & 0xFF), (uint8_t)(color & 0xFF),
 800f872:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800f876:	0a1b      	lsrs	r3, r3, #8
 800f878:	b29b      	uxth	r3, r3
 800f87a:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800f87c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f880:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f884:	729a      	strb	r2, [r3, #10]
                            (uint8_t)((color >> 8) & 0xFF), (uint8_t)(color & 0xFF),
 800f886:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800f88a:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800f88c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f890:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f894:	72da      	strb	r2, [r3, #11]
 800f896:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f89a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f89e:	881b      	ldrh	r3, [r3, #0]
 800f8a0:	0a1b      	lsrs	r3, r3, #8
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	b2da      	uxtb	r2, r3
 800f8a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8aa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f8ae:	731a      	strb	r2, [r3, #12]
 800f8b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f8b8:	881b      	ldrh	r3, [r3, #0]
 800f8ba:	b2da      	uxtb	r2, r3
 800f8bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f8c4:	735a      	strb	r2, [r3, #13]
 800f8c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8ca:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800f8ce:	881b      	ldrh	r3, [r3, #0]
 800f8d0:	0a1b      	lsrs	r3, r3, #8
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f8de:	739a      	strb	r2, [r3, #14]
 800f8e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8e4:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800f8e8:	881b      	ldrh	r3, [r3, #0]
 800f8ea:	b2da      	uxtb	r2, r3
 800f8ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f8f4:	73da      	strb	r2, [r3, #15]
 800f8f6:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 800f8fa:	0a1b      	lsrs	r3, r3, #8
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	b2da      	uxtb	r2, r3
 800f900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f904:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f908:	741a      	strb	r2, [r3, #16]
 800f90a:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 800f90e:	b2da      	uxtb	r2, r3
 800f910:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f914:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f918:	745a      	strb	r2, [r3, #17]
 800f91a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800f91e:	0a1b      	lsrs	r3, r3, #8
 800f920:	b29b      	uxth	r3, r3
 800f922:	b2da      	uxtb	r2, r3
 800f924:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f928:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f92c:	749a      	strb	r2, [r3, #18]
 800f92e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800f932:	b2da      	uxtb	r2, r3
 800f934:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f938:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f93c:	74da      	strb	r2, [r3, #19]
 800f93e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f942:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800f946:	22ff      	movs	r2, #255	@ 0xff
 800f948:	751a      	strb	r2, [r3, #20]
                            (x_1 >> 8) & 0xFF, (x_1 & 0xFF), (y_1 >> 8) & 0xFF, (y_1 & 0xFF),
                            (x_2 >> 8) & 0xFF, (x_2 & 0xFF), (y_2 >> 8) & 0xFF, (y_2 & 0xFF), 0xFF, 0x00 };
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f94a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f94e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	6818      	ldr	r0, [r3, #0]
 800f956:	f107 0110 	add.w	r1, r7, #16
 800f95a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f95e:	22ff      	movs	r2, #255	@ 0xff
 800f960:	f7f6 fd6c 	bl	800643c <HAL_UART_Transmit>
}
 800f964:	bf00      	nop
 800f966:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd90      	pop	{r4, r7, pc}

0800f96e <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 800f96e:	b480      	push	{r7}
 800f970:	b083      	sub	sp, #12
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
 800f976:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	683a      	ldr	r2, [r7, #0]
 800f97c:	609a      	str	r2, [r3, #8]
}
 800f97e:	bf00      	nop
 800f980:	370c      	adds	r7, #12
 800f982:	46bd      	mov	sp, r7
 800f984:	bc80      	pop	{r7}
 800f986:	4770      	bx	lr

0800f988 <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
    uint16_t VPaddress;
    uint16_t lowByte;
    uint16_t highByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	2b5a      	cmp	r3, #90	@ 0x5a
 800f998:	d133      	bne.n	800fa02 <DWIN_Listen+0x7a>
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	3301      	adds	r3, #1
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2ba5      	cmp	r3, #165	@ 0xa5
 800f9a2:	d12e      	bne.n	800fa02 <DWIN_Listen+0x7a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	3303      	adds	r3, #3
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	2b83      	cmp	r3, #131	@ 0x83
 800f9ac:	d129      	bne.n	800fa02 <DWIN_Listen+0x7a>
        {
            datalength = RX_Buffer[2];
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	789b      	ldrb	r3, [r3, #2]
 800f9b2:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 800f9b4:	7bfb      	ldrb	r3, [r7, #15]
 800f9b6:	3302      	adds	r3, #2
 800f9b8:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	3304      	adds	r3, #4
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	b21b      	sxth	r3, r3
 800f9c2:	021b      	lsls	r3, r3, #8
 800f9c4:	b21a      	sxth	r2, r3
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	3305      	adds	r3, #5
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	b21b      	sxth	r3, r3
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	b21b      	sxth	r3, r3
 800f9d2:	81bb      	strh	r3, [r7, #12]
            /* get return key value */
            lowByte = RX_Buffer[datalength];  
 800f9d4:	7bfb      	ldrb	r3, [r7, #15]
 800f9d6:	683a      	ldr	r2, [r7, #0]
 800f9d8:	4413      	add	r3, r2
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	817b      	strh	r3, [r7, #10]
            highByte = RX_Buffer[datalength-1];
 800f9de:	7bfb      	ldrb	r3, [r7, #15]
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	683a      	ldr	r2, [r7, #0]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	813b      	strh	r3, [r7, #8]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d007      	beq.n	800fa02 <DWIN_Listen+0x7a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lowByte,highByte);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	689b      	ldr	r3, [r3, #8]
 800f9f6:	897a      	ldrh	r2, [r7, #10]
 800f9f8:	b2d1      	uxtb	r1, r2
 800f9fa:	893a      	ldrh	r2, [r7, #8]
 800f9fc:	b2d2      	uxtb	r2, r2
 800f9fe:	89b8      	ldrh	r0, [r7, #12]
 800fa00:	4798      	blx	r3
            }
        }
    }

    
}
 800fa02:	bf00      	nop
 800fa04:	3710      	adds	r7, #16
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}

0800fa0a <isotp_ms_to_st_min>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 800fa0a:	b480      	push	{r7}
 800fa0c:	b085      	sub	sp, #20
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	4603      	mov	r3, r0
 800fa12:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 800fa14:	79fb      	ldrb	r3, [r7, #7]
 800fa16:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 800fa18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	da01      	bge.n	800fa24 <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 800fa20:	237f      	movs	r3, #127	@ 0x7f
 800fa22:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3714      	adds	r7, #20
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bc80      	pop	{r7}
 800fa2e:	4770      	bx	lr

0800fa30 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 800fa30:	b480      	push	{r7}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	4603      	mov	r3, r0
 800fa38:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9) {
 800fa3a:	79fb      	ldrb	r3, [r7, #7]
 800fa3c:	2bf0      	cmp	r3, #240	@ 0xf0
 800fa3e:	d905      	bls.n	800fa4c <isotp_st_min_to_ms+0x1c>
 800fa40:	79fb      	ldrb	r3, [r7, #7]
 800fa42:	2bf9      	cmp	r3, #249	@ 0xf9
 800fa44:	d802      	bhi.n	800fa4c <isotp_st_min_to_ms+0x1c>
        ms = 1;
 800fa46:	2301      	movs	r3, #1
 800fa48:	73fb      	strb	r3, [r7, #15]
 800fa4a:	e008      	b.n	800fa5e <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 800fa4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	db02      	blt.n	800fa5a <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 800fa54:	79fb      	ldrb	r3, [r7, #7]
 800fa56:	73fb      	strb	r3, [r7, #15]
 800fa58:	e001      	b.n	800fa5e <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 800fa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3714      	adds	r7, #20
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bc80      	pop	{r7}
 800fa68:	4770      	bx	lr

0800fa6a <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b086      	sub	sp, #24
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	4608      	mov	r0, r1
 800fa74:	4611      	mov	r1, r2
 800fa76:	461a      	mov	r2, r3
 800fa78:	4603      	mov	r3, r0
 800fa7a:	70fb      	strb	r3, [r7, #3]
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	70bb      	strb	r3, [r7, #2]
 800fa80:	4613      	mov	r3, r2
 800fa82:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 800fa84:	7b3b      	ldrb	r3, [r7, #12]
 800fa86:	2203      	movs	r2, #3
 800fa88:	f362 1307 	bfi	r3, r2, #4, #4
 800fa8c:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 800fa8e:	78fb      	ldrb	r3, [r7, #3]
 800fa90:	f003 030f 	and.w	r3, r3, #15
 800fa94:	b2da      	uxtb	r2, r3
 800fa96:	7b3b      	ldrb	r3, [r7, #12]
 800fa98:	f362 0303 	bfi	r3, r2, #0, #4
 800fa9c:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 800fa9e:	78bb      	ldrb	r3, [r7, #2]
 800faa0:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 800faa2:	787b      	ldrb	r3, [r7, #1]
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7ff ffb0 	bl	800fa0a <isotp_ms_to_st_min>
 800faaa:	4603      	mov	r3, r0
 800faac:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
 800faae:	f107 030c 	add.w	r3, r7, #12
 800fab2:	3303      	adds	r3, #3
 800fab4:	2205      	movs	r2, #5
 800fab6:	2100      	movs	r1, #0
 800fab8:	4618      	mov	r0, r3
 800faba:	f002 ffd1 	bl	8012a60 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f107 010c 	add.w	r1, r7, #12
 800fac6:	2208      	movs	r2, #8
 800fac8:	4618      	mov	r0, r3
 800faca:	f7f1 fca5 	bl	8001418 <isotp_user_send_can>
 800face:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 800fad0:	697b      	ldr	r3, [r7, #20]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3718      	adds	r7, #24
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
	...

0800fadc <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 800fadc:	b580      	push	{r7, lr}
 800fade:	b086      	sub	sp, #24
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	895b      	ldrh	r3, [r3, #10]
 800faea:	2b07      	cmp	r3, #7
 800faec:	d905      	bls.n	800fafa <isotp_send_single_frame+0x1e>
 800faee:	4b1d      	ldr	r3, [pc, #116]	@ (800fb64 <isotp_send_single_frame+0x88>)
 800faf0:	4a1d      	ldr	r2, [pc, #116]	@ (800fb68 <isotp_send_single_frame+0x8c>)
 800faf2:	2142      	movs	r1, #66	@ 0x42
 800faf4:	481d      	ldr	r0, [pc, #116]	@ (800fb6c <isotp_send_single_frame+0x90>)
 800faf6:	f000 ff53 	bl	80109a0 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 800fafa:	7b3b      	ldrb	r3, [r7, #12]
 800fafc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fb00:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	895b      	ldrh	r3, [r3, #10]
 800fb06:	f003 030f 	and.w	r3, r3, #15
 800fb0a:	b2da      	uxtb	r2, r3
 800fb0c:	7b3b      	ldrb	r3, [r7, #12]
 800fb0e:	f362 0303 	bfi	r3, r2, #0, #4
 800fb12:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6859      	ldr	r1, [r3, #4]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	895b      	ldrh	r3, [r3, #10]
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	f107 030c 	add.w	r3, r7, #12
 800fb22:	3301      	adds	r3, #1
 800fb24:	4618      	mov	r0, r3
 800fb26:	f003 f8e4 	bl	8012cf2 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	895b      	ldrh	r3, [r3, #10]
 800fb2e:	461a      	mov	r2, r3
 800fb30:	f107 030c 	add.w	r3, r7, #12
 800fb34:	3301      	adds	r3, #1
 800fb36:	1898      	adds	r0, r3, r2
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	895b      	ldrh	r3, [r3, #10]
 800fb3c:	f1c3 0307 	rsb	r3, r3, #7
 800fb40:	461a      	mov	r2, r3
 800fb42:	2100      	movs	r1, #0
 800fb44:	f002 ff8c 	bl	8012a60 <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800fb48:	f107 030c 	add.w	r3, r7, #12
 800fb4c:	2208      	movs	r2, #8
 800fb4e:	4619      	mov	r1, r3
 800fb50:	6838      	ldr	r0, [r7, #0]
 800fb52:	f7f1 fc61 	bl	8001418 <isotp_user_send_can>
 800fb56:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 800fb58:	697b      	ldr	r3, [r7, #20]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3718      	adds	r7, #24
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	080157fc 	.word	0x080157fc
 800fb68:	0801611c 	.word	0x0801611c
 800fb6c:	08015814 	.word	0x08015814

0800fb70 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b086      	sub	sp, #24
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	895b      	ldrh	r3, [r3, #10]
 800fb7e:	2b07      	cmp	r3, #7
 800fb80:	d805      	bhi.n	800fb8e <isotp_send_first_frame+0x1e>
 800fb82:	4b1d      	ldr	r3, [pc, #116]	@ (800fbf8 <isotp_send_first_frame+0x88>)
 800fb84:	4a1d      	ldr	r2, [pc, #116]	@ (800fbfc <isotp_send_first_frame+0x8c>)
 800fb86:	215c      	movs	r1, #92	@ 0x5c
 800fb88:	481d      	ldr	r0, [pc, #116]	@ (800fc00 <isotp_send_first_frame+0x90>)
 800fb8a:	f000 ff09 	bl	80109a0 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 800fb8e:	7b3b      	ldrb	r3, [r7, #12]
 800fb90:	2201      	movs	r2, #1
 800fb92:	f362 1307 	bfi	r3, r2, #4, #4
 800fb96:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	895b      	ldrh	r3, [r3, #10]
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	895b      	ldrh	r3, [r3, #10]
 800fba4:	0a1b      	lsrs	r3, r3, #8
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	f003 030f 	and.w	r3, r3, #15
 800fbac:	b2da      	uxtb	r2, r3
 800fbae:	7b3b      	ldrb	r3, [r7, #12]
 800fbb0:	f362 0303 	bfi	r3, r2, #0, #4
 800fbb4:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	685a      	ldr	r2, [r3, #4]
 800fbba:	f107 030e 	add.w	r3, r7, #14
 800fbbe:	6811      	ldr	r1, [r2, #0]
 800fbc0:	6019      	str	r1, [r3, #0]
 800fbc2:	8892      	ldrh	r2, [r2, #4]
 800fbc4:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800fbc6:	f107 030c 	add.w	r3, r7, #12
 800fbca:	2208      	movs	r2, #8
 800fbcc:	4619      	mov	r1, r3
 800fbce:	6838      	ldr	r0, [r7, #0]
 800fbd0:	f7f1 fc22 	bl	8001418 <isotp_user_send_can>
 800fbd4:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d108      	bne.n	800fbee <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	899b      	ldrh	r3, [r3, #12]
 800fbe0:	3306      	adds	r3, #6
 800fbe2:	b29a      	uxth	r2, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2201      	movs	r2, #1
 800fbec:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 800fbee:	697b      	ldr	r3, [r7, #20]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3718      	adds	r7, #24
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	0801582c 	.word	0x0801582c
 800fbfc:	08016134 	.word	0x08016134
 800fc00:	08015814 	.word	0x08015814

0800fc04 <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b086      	sub	sp, #24
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	895b      	ldrh	r3, [r3, #10]
 800fc10:	2b07      	cmp	r3, #7
 800fc12:	d805      	bhi.n	800fc20 <isotp_send_consecutive_frame+0x1c>
 800fc14:	4b2d      	ldr	r3, [pc, #180]	@ (800fccc <isotp_send_consecutive_frame+0xc8>)
 800fc16:	4a2e      	ldr	r2, [pc, #184]	@ (800fcd0 <isotp_send_consecutive_frame+0xcc>)
 800fc18:	2175      	movs	r1, #117	@ 0x75
 800fc1a:	482e      	ldr	r0, [pc, #184]	@ (800fcd4 <isotp_send_consecutive_frame+0xd0>)
 800fc1c:	f000 fec0 	bl	80109a0 <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 800fc20:	7a3b      	ldrb	r3, [r7, #8]
 800fc22:	2202      	movs	r2, #2
 800fc24:	f362 1307 	bfi	r3, r2, #4, #4
 800fc28:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	7b9b      	ldrb	r3, [r3, #14]
 800fc2e:	f003 030f 	and.w	r3, r3, #15
 800fc32:	b2da      	uxtb	r2, r3
 800fc34:	7a3b      	ldrb	r3, [r7, #8]
 800fc36:	f362 0303 	bfi	r3, r2, #0, #4
 800fc3a:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	895a      	ldrh	r2, [r3, #10]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	899b      	ldrh	r3, [r3, #12]
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 800fc48:	8afb      	ldrh	r3, [r7, #22]
 800fc4a:	2b07      	cmp	r3, #7
 800fc4c:	d901      	bls.n	800fc52 <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 800fc4e:	2307      	movs	r3, #7
 800fc50:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	8992      	ldrh	r2, [r2, #12]
 800fc5a:	1899      	adds	r1, r3, r2
 800fc5c:	8afa      	ldrh	r2, [r7, #22]
 800fc5e:	f107 0308 	add.w	r3, r7, #8
 800fc62:	3301      	adds	r3, #1
 800fc64:	4618      	mov	r0, r3
 800fc66:	f003 f844 	bl	8012cf2 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0, sizeof(message.as.consecutive_frame.data) - data_length);
 800fc6a:	8afb      	ldrh	r3, [r7, #22]
 800fc6c:	f107 0208 	add.w	r2, r7, #8
 800fc70:	3201      	adds	r2, #1
 800fc72:	18d0      	adds	r0, r2, r3
 800fc74:	8afb      	ldrh	r3, [r7, #22]
 800fc76:	f1c3 0307 	rsb	r3, r3, #7
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	f002 feef 	bl	8012a60 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f107 0108 	add.w	r1, r7, #8
 800fc8a:	2208      	movs	r2, #8
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7f1 fbc3 	bl	8001418 <isotp_user_send_can>
 800fc92:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d113      	bne.n	800fcc2 <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	899a      	ldrh	r2, [r3, #12]
 800fc9e:	8afb      	ldrh	r3, [r7, #22]
 800fca0:	4413      	add	r3, r2
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	7b9b      	ldrb	r3, [r3, #14]
 800fcac:	3301      	adds	r3, #1
 800fcae:	b2da      	uxtb	r2, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	739a      	strb	r2, [r3, #14]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7b9b      	ldrb	r3, [r3, #14]
 800fcb8:	2b0f      	cmp	r3, #15
 800fcba:	d902      	bls.n	800fcc2 <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	739a      	strb	r2, [r3, #14]
        }
    }
    
    return ret;
 800fcc2:	693b      	ldr	r3, [r7, #16]
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3718      	adds	r7, #24
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	0801582c 	.word	0x0801582c
 800fcd0:	0801614c 	.word	0x0801614c
 800fcd4:	08015814 	.word	0x08015814

0800fcd8 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	4613      	mov	r3, r2
 800fce4:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	f003 030f 	and.w	r3, r3, #15
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d008      	beq.n	800fd06 <isotp_receive_single_frame+0x2e>
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	461a      	mov	r2, r3
 800fd00:	79fb      	ldrb	r3, [r7, #7]
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d805      	bhi.n	800fd12 <isotp_receive_single_frame+0x3a>
        isotp_user_debug("Single-frame length too small.");
 800fd06:	480f      	ldr	r0, [pc, #60]	@ (800fd44 <isotp_receive_single_frame+0x6c>)
 800fd08:	f7f1 fbb7 	bl	800147a <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800fd0c:	f06f 0306 	mvn.w	r3, #6
 800fd10:	e014      	b.n	800fd3c <isotp_receive_single_frame+0x64>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	1c59      	adds	r1, r3, #1
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	461a      	mov	r2, r3
 800fd26:	f002 ffe4 	bl	8012cf2 <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	461a      	mov	r2, r3
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	85da      	strh	r2, [r3, #46]	@ 0x2e
    
    return ISOTP_RET_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3710      	adds	r7, #16
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	08015840 	.word	0x08015840

0800fd48 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b086      	sub	sp, #24
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	4613      	mov	r3, r2
 800fd54:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 800fd56:	79fb      	ldrb	r3, [r7, #7]
 800fd58:	2b08      	cmp	r3, #8
 800fd5a:	d005      	beq.n	800fd68 <isotp_receive_first_frame+0x20>
        isotp_user_debug("First frame should be 8 bytes in length.");
 800fd5c:	481e      	ldr	r0, [pc, #120]	@ (800fdd8 <isotp_receive_first_frame+0x90>)
 800fd5e:	f7f1 fb8c 	bl	800147a <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800fd62:	f06f 0306 	mvn.w	r3, #6
 800fd66:	e033      	b.n	800fdd0 <isotp_receive_first_frame+0x88>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 800fd74:	8afb      	ldrh	r3, [r7, #22]
 800fd76:	021b      	lsls	r3, r3, #8
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	7852      	ldrb	r2, [r2, #1]
 800fd7e:	4413      	add	r3, r2
 800fd80:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 800fd82:	8afb      	ldrh	r3, [r7, #22]
 800fd84:	2b07      	cmp	r3, #7
 800fd86:	d805      	bhi.n	800fd94 <isotp_receive_first_frame+0x4c>
        isotp_user_debug("Should not use multiple frame transmission.");
 800fd88:	4814      	ldr	r0, [pc, #80]	@ (800fddc <isotp_receive_first_frame+0x94>)
 800fd8a:	f7f1 fb76 	bl	800147a <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800fd8e:	f06f 0306 	mvn.w	r3, #6
 800fd92:	e01d      	b.n	800fdd0 <isotp_receive_first_frame+0x88>
    }
    
    if (payload_length > link->receive_buf_size) {
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fd98:	8afa      	ldrh	r2, [r7, #22]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d905      	bls.n	800fdaa <isotp_receive_first_frame+0x62>
        isotp_user_debug("Multi-frame response too large for receiving buffer.");
 800fd9e:	4810      	ldr	r0, [pc, #64]	@ (800fde0 <isotp_receive_first_frame+0x98>)
 800fda0:	f7f1 fb6b 	bl	800147a <isotp_user_debug>
        return ISOTP_RET_OVERFLOW;
 800fda4:	f06f 0302 	mvn.w	r3, #2
 800fda8:	e012      	b.n	800fdd0 <isotp_receive_first_frame+0x88>
    }
    
    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	3302      	adds	r3, #2
 800fdb2:	2206      	movs	r2, #6
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	f002 ff9c 	bl	8012cf2 <memcpy>
    link->receive_size = payload_length;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	8afa      	ldrh	r2, [r7, #22]
 800fdbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2206      	movs	r2, #6
 800fdc4:	861a      	strh	r2, [r3, #48]	@ 0x30
    link->receive_sn = 1;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2201      	movs	r2, #1
 800fdca:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    return ISOTP_RET_OK;
 800fdce:	2300      	movs	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3718      	adds	r7, #24
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	08015860 	.word	0x08015860
 800fddc:	0801588c 	.word	0x0801588c
 800fde0:	080158b8 	.word	0x080158b8

0800fde4 <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b086      	sub	sp, #24
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	7812      	ldrb	r2, [r2, #0]
 800fdfc:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800fe00:	b2d2      	uxtb	r2, r2
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d002      	beq.n	800fe0c <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 800fe06:	f06f 0303 	mvn.w	r3, #3
 800fe0a:	e038      	b.n	800fe7e <isotp_receive_consecutive_frame+0x9a>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800fe14:	1ad3      	subs	r3, r2, r3
 800fe16:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 800fe18:	8afb      	ldrh	r3, [r7, #22]
 800fe1a:	2b07      	cmp	r3, #7
 800fe1c:	d901      	bls.n	800fe22 <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 800fe1e:	2307      	movs	r3, #7
 800fe20:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 800fe22:	79fa      	ldrb	r2, [r7, #7]
 800fe24:	8afb      	ldrh	r3, [r7, #22]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	dc05      	bgt.n	800fe36 <isotp_receive_consecutive_frame+0x52>
        isotp_user_debug("Consecutive frame too short.");
 800fe2a:	4817      	ldr	r0, [pc, #92]	@ (800fe88 <isotp_receive_consecutive_frame+0xa4>)
 800fe2c:	f7f1 fb25 	bl	800147a <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800fe30:	f06f 0306 	mvn.w	r3, #6
 800fe34:	e023      	b.n	800fe7e <isotp_receive_consecutive_frame+0x9a>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe3a:	68fa      	ldr	r2, [r7, #12]
 800fe3c:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800fe3e:	1898      	adds	r0, r3, r2
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	3301      	adds	r3, #1
 800fe44:	8afa      	ldrh	r2, [r7, #22]
 800fe46:	4619      	mov	r1, r3
 800fe48:	f002 ff53 	bl	8012cf2 <memcpy>

    link->receive_offset += remaining_bytes;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800fe50:	8afb      	ldrh	r3, [r7, #22]
 800fe52:	4413      	add	r3, r2
 800fe54:	b29a      	uxth	r2, r3
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (++(link->receive_sn) > 0x0F) {
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800fe60:	3301      	adds	r3, #1
 800fe62:	b2da      	uxtb	r2, r3
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800fe70:	2b0f      	cmp	r3, #15
 800fe72:	d903      	bls.n	800fe7c <isotp_receive_consecutive_frame+0x98>
        link->receive_sn = 0;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }

    return ISOTP_RET_OK;
 800fe7c:	2300      	movs	r3, #0
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3718      	adds	r7, #24
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	080158f0 	.word	0x080158f0

0800fe8c <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	4613      	mov	r3, r2
 800fe98:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 800fe9a:	79fb      	ldrb	r3, [r7, #7]
 800fe9c:	2b02      	cmp	r3, #2
 800fe9e:	d805      	bhi.n	800feac <isotp_receive_flow_control_frame+0x20>
        isotp_user_debug("Flow control frame too short.");
 800fea0:	4805      	ldr	r0, [pc, #20]	@ (800feb8 <isotp_receive_flow_control_frame+0x2c>)
 800fea2:	f7f1 faea 	bl	800147a <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800fea6:	f06f 0306 	mvn.w	r3, #6
 800feaa:	e000      	b.n	800feae <isotp_receive_flow_control_frame+0x22>
    }

    return ISOTP_RET_OK;
 800feac:	2300      	movs	r3, #0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3710      	adds	r7, #16
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	08015910 	.word	0x08015910

0800febc <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	4613      	mov	r3, r2
 800fec8:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6819      	ldr	r1, [r3, #0]
 800fece:	88fb      	ldrh	r3, [r7, #6]
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	68f8      	ldr	r0, [r7, #12]
 800fed4:	f000 f806 	bl	800fee4 <isotp_send_with_id>
 800fed8:	4603      	mov	r3, r0
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
	...

0800fee4 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b0a6      	sub	sp, #152	@ 0x98
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	607a      	str	r2, [r7, #4]
 800fef0:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d105      	bne.n	800ff04 <isotp_send_with_id+0x20>
        isotp_user_debug("Link is null!");
 800fef8:	4833      	ldr	r0, [pc, #204]	@ (800ffc8 <isotp_send_with_id+0xe4>)
 800fefa:	f7f1 fabe 	bl	800147a <isotp_user_debug>
        return ISOTP_RET_ERROR;
 800fefe:	f04f 33ff 	mov.w	r3, #4294967295
 800ff02:	e05d      	b.n	800ffc0 <isotp_send_with_id+0xdc>
    }

    if (size > link->send_buf_size) {
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	891b      	ldrh	r3, [r3, #8]
 800ff08:	887a      	ldrh	r2, [r7, #2]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d90d      	bls.n	800ff2a <isotp_send_with_id+0x46>
        isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
 800ff0e:	482f      	ldr	r0, [pc, #188]	@ (800ffcc <isotp_send_with_id+0xe8>)
 800ff10:	f7f1 fab3 	bl	800147a <isotp_user_debug>
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 800ff14:	887a      	ldrh	r2, [r7, #2]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	891b      	ldrh	r3, [r3, #8]
 800ff1a:	f107 0014 	add.w	r0, r7, #20
 800ff1e:	492c      	ldr	r1, [pc, #176]	@ (800ffd0 <isotp_send_with_id+0xec>)
 800ff20:	f002 fc94 	bl	801284c <siprintf>
        return ISOTP_RET_OVERFLOW;
 800ff24:	f06f 0302 	mvn.w	r3, #2
 800ff28:	e04a      	b.n	800ffc0 <isotp_send_with_id+0xdc>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d105      	bne.n	800ff40 <isotp_send_with_id+0x5c>
        isotp_user_debug("Abort previous message, transmission in progress.\n");
 800ff34:	4827      	ldr	r0, [pc, #156]	@ (800ffd4 <isotp_send_with_id+0xf0>)
 800ff36:	f7f1 faa0 	bl	800147a <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
 800ff3a:	f06f 0301 	mvn.w	r3, #1
 800ff3e:	e03f      	b.n	800ffc0 <isotp_send_with_id+0xdc>
    }

    /* copy into local buffer */
    link->send_size = size;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	887a      	ldrh	r2, [r7, #2]
 800ff44:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	887a      	ldrh	r2, [r7, #2]
 800ff52:	6879      	ldr	r1, [r7, #4]
 800ff54:	4618      	mov	r0, r3
 800ff56:	f002 fecc 	bl	8012cf2 <memcpy>

    if (link->send_size < 8) {
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	895b      	ldrh	r3, [r3, #10]
 800ff5e:	2b07      	cmp	r3, #7
 800ff60:	d806      	bhi.n	800ff70 <isotp_send_with_id+0x8c>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 800ff62:	68b9      	ldr	r1, [r7, #8]
 800ff64:	68f8      	ldr	r0, [r7, #12]
 800ff66:	f7ff fdb9 	bl	800fadc <isotp_send_single_frame>
 800ff6a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800ff6e:	e025      	b.n	800ffbc <isotp_send_with_id+0xd8>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 800ff70:	68b9      	ldr	r1, [r7, #8]
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	f7ff fdfc 	bl	800fb70 <isotp_send_first_frame>
 800ff78:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 800ff7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d11b      	bne.n	800ffbc <isotp_send_with_id+0xd8>
            link->send_bs_remain = 0;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2200      	movs	r2, #0
 800ff88:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	2200      	movs	r2, #0
 800ff94:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 800ff96:	f7f1 fa69 	bl	800146c <isotp_user_get_ms>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800ffa0:	f7f1 fa64 	bl	800146c <isotp_user_get_ms>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 800ffbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3798      	adds	r7, #152	@ 0x98
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	08015930 	.word	0x08015930
 800ffcc:	08015940 	.word	0x08015940
 800ffd0:	08015994 	.word	0x08015994
 800ffd4:	080159c4 	.word	0x080159c4

0800ffd8 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b088      	sub	sp, #32
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8) {
 800ffe6:	79fb      	ldrb	r3, [r7, #7]
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	f240 8143 	bls.w	8010274 <isotp_on_can_message+0x29c>
 800ffee:	79fb      	ldrb	r3, [r7, #7]
 800fff0:	2b08      	cmp	r3, #8
 800fff2:	f200 813f 	bhi.w	8010274 <isotp_on_can_message+0x29c>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 800fff6:	79fa      	ldrb	r2, [r7, #7]
 800fff8:	f107 0314 	add.w	r3, r7, #20
 800fffc:	68b9      	ldr	r1, [r7, #8]
 800fffe:	4618      	mov	r0, r3
 8010000:	f002 fe77 	bl	8012cf2 <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 8010004:	79fb      	ldrb	r3, [r7, #7]
 8010006:	f107 0214 	add.w	r2, r7, #20
 801000a:	18d0      	adds	r0, r2, r3
 801000c:	79fb      	ldrb	r3, [r7, #7]
 801000e:	f1c3 0308 	rsb	r3, r3, #8
 8010012:	461a      	mov	r2, r3
 8010014:	2100      	movs	r1, #0
 8010016:	f002 fd23 	bl	8012a60 <memset>

    switch (message.as.common.type) {
 801001a:	7d3b      	ldrb	r3, [r7, #20]
 801001c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010020:	b2db      	uxtb	r3, r3
 8010022:	2b03      	cmp	r3, #3
 8010024:	f200 811a 	bhi.w	801025c <isotp_on_can_message+0x284>
 8010028:	a201      	add	r2, pc, #4	@ (adr r2, 8010030 <isotp_on_can_message+0x58>)
 801002a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801002e:	bf00      	nop
 8010030:	08010041 	.word	0x08010041
 8010034:	0801007d 	.word	0x0801007d
 8010038:	08010105 	.word	0x08010105
 801003c:	080101a3 	.word	0x080101a3
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010046:	2b01      	cmp	r3, #1
 8010048:	d104      	bne.n	8010054 <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f06f 0205 	mvn.w	r2, #5
 8010050:	639a      	str	r2, [r3, #56]	@ 0x38
 8010052:	e002      	b.n	801005a <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2200      	movs	r2, #0
 8010058:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 801005a:	79fa      	ldrb	r2, [r7, #7]
 801005c:	f107 0314 	add.w	r3, r7, #20
 8010060:	4619      	mov	r1, r3
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7ff fe38 	bl	800fcd8 <isotp_receive_single_frame>
 8010068:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	2b00      	cmp	r3, #0
 801006e:	f040 80f7 	bne.w	8010260 <isotp_on_can_message+0x288>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2202      	movs	r2, #2
 8010076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            }
            break;
 801007a:	e0f1      	b.n	8010260 <isotp_on_can_message+0x288>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010082:	2b01      	cmp	r3, #1
 8010084:	d104      	bne.n	8010090 <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f06f 0205 	mvn.w	r2, #5
 801008c:	639a      	str	r2, [r3, #56]	@ 0x38
 801008e:	e002      	b.n	8010096 <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2200      	movs	r2, #0
 8010094:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 8010096:	79fa      	ldrb	r2, [r7, #7]
 8010098:	f107 0314 	add.w	r3, r7, #20
 801009c:	4619      	mov	r1, r3
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f7ff fe52 	bl	800fd48 <isotp_receive_first_frame>
 80100a4:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	f113 0f03 	cmn.w	r3, #3
 80100ac:	d10e      	bne.n	80100cc <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f06f 0207 	mvn.w	r2, #7
 80100b4:	639a      	str	r2, [r3, #56]	@ 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2200      	movs	r2, #0
 80100ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 80100be:	2300      	movs	r3, #0
 80100c0:	2200      	movs	r2, #0
 80100c2:	2102      	movs	r1, #2
 80100c4:	68f8      	ldr	r0, [r7, #12]
 80100c6:	f7ff fcd0 	bl	800fa6a <isotp_send_flow_control>
                break;
 80100ca:	e0d2      	b.n	8010272 <isotp_on_can_message+0x29a>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f040 80c8 	bne.w	8010264 <isotp_on_can_message+0x28c>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2201      	movs	r2, #1
 80100d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	22c8      	movs	r2, #200	@ 0xc8
 80100e0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80100ea:	2300      	movs	r3, #0
 80100ec:	2100      	movs	r1, #0
 80100ee:	68f8      	ldr	r0, [r7, #12]
 80100f0:	f7ff fcbb 	bl	800fa6a <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80100f4:	f7f1 f9ba 	bl	800146c <isotp_user_get_ms>
 80100f8:	4603      	mov	r3, r0
 80100fa:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	635a      	str	r2, [r3, #52]	@ 0x34
            }
            
            break;
 8010102:	e0af      	b.n	8010264 <isotp_on_can_message+0x28c>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801010a:	2b01      	cmp	r3, #1
 801010c:	d004      	beq.n	8010118 <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f06f 0205 	mvn.w	r2, #5
 8010114:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 8010116:	e0ac      	b.n	8010272 <isotp_on_can_message+0x29a>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 8010118:	79fa      	ldrb	r2, [r7, #7]
 801011a:	f107 0314 	add.w	r3, r7, #20
 801011e:	4619      	mov	r1, r3
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f7ff fe5f 	bl	800fde4 <isotp_receive_consecutive_frame>
 8010126:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 8010128:	69fb      	ldr	r3, [r7, #28]
 801012a:	f113 0f04 	cmn.w	r3, #4
 801012e:	d108      	bne.n	8010142 <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f06f 0203 	mvn.w	r2, #3
 8010136:	639a      	str	r2, [r3, #56]	@ 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2200      	movs	r2, #0
 801013c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                break;
 8010140:	e097      	b.n	8010272 <isotp_on_can_message+0x29a>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	2b00      	cmp	r3, #0
 8010146:	f040 808f 	bne.w	8010268 <isotp_on_can_message+0x290>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 801014a:	f7f1 f98f 	bl	800146c <isotp_user_get_ms>
 801014e:	4603      	mov	r3, r0
 8010150:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	635a      	str	r2, [r3, #52]	@ 0x34
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010160:	429a      	cmp	r2, r3
 8010162:	d304      	bcc.n	801016e <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2202      	movs	r2, #2
 8010168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }
            
            break;
 801016c:	e07c      	b.n	8010268 <isotp_on_can_message+0x290>
                    if (0 == --link->receive_bs_count) {
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8010174:	3b01      	subs	r3, #1
 8010176:	b2da      	uxtb	r2, r3
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8010184:	2b00      	cmp	r3, #0
 8010186:	d16f      	bne.n	8010268 <isotp_on_can_message+0x290>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	22c8      	movs	r2, #200	@ 0xc8
 801018c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8010196:	2300      	movs	r3, #0
 8010198:	2100      	movs	r1, #0
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f7ff fc65 	bl	800fa6a <isotp_send_flow_control>
            break;
 80101a0:	e062      	b.n	8010268 <isotp_on_can_message+0x290>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	d15f      	bne.n	801026c <isotp_on_can_message+0x294>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 80101ac:	79fa      	ldrb	r2, [r7, #7]
 80101ae:	f107 0314 	add.w	r3, r7, #20
 80101b2:	4619      	mov	r1, r3
 80101b4:	68f8      	ldr	r0, [r7, #12]
 80101b6:	f7ff fe69 	bl	800fe8c <isotp_receive_flow_control_frame>
 80101ba:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d156      	bne.n	8010270 <isotp_on_can_message+0x298>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80101c2:	f7f1 f953 	bl	800146c <isotp_user_get_ms>
 80101c6:	4603      	mov	r3, r0
 80101c8:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 80101d0:	7d3b      	ldrb	r3, [r7, #20]
 80101d2:	f003 030f 	and.w	r3, r3, #15
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	2b02      	cmp	r3, #2
 80101da:	d108      	bne.n	80101ee <isotp_on_can_message+0x216>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f06f 0207 	mvn.w	r2, #7
 80101e2:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2202      	movs	r2, #2
 80101e8:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 80101ec:	e040      	b.n	8010270 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 80101ee:	7d3b      	ldrb	r3, [r7, #20]
 80101f0:	f003 030f 	and.w	r3, r3, #15
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	2b01      	cmp	r3, #1
 80101f8:	d112      	bne.n	8010220 <isotp_on_can_message+0x248>
                    link->send_wtf_count += 1;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	7cdb      	ldrb	r3, [r3, #19]
 80101fe:	3301      	adds	r3, #1
 8010200:	b2da      	uxtb	r2, r3
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	7cdb      	ldrb	r3, [r3, #19]
 801020a:	2b01      	cmp	r3, #1
 801020c:	d930      	bls.n	8010270 <isotp_on_can_message+0x298>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	f06f 0206 	mvn.w	r2, #6
 8010214:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2202      	movs	r2, #2
 801021a:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 801021e:	e027      	b.n	8010270 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 8010220:	7d3b      	ldrb	r3, [r7, #20]
 8010222:	f003 030f 	and.w	r3, r3, #15
 8010226:	b2db      	uxtb	r3, r3
 8010228:	2b00      	cmp	r3, #0
 801022a:	d121      	bne.n	8010270 <isotp_on_can_message+0x298>
                    if (0 == message.as.flow_control.BS) {
 801022c:	7d7b      	ldrb	r3, [r7, #21]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d104      	bne.n	801023c <isotp_on_can_message+0x264>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010238:	821a      	strh	r2, [r3, #16]
 801023a:	e003      	b.n	8010244 <isotp_on_can_message+0x26c>
                        link->send_bs_remain = message.as.flow_control.BS;
 801023c:	7d7b      	ldrb	r3, [r7, #21]
 801023e:	461a      	mov	r2, r3
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 8010244:	7dbb      	ldrb	r3, [r7, #22]
 8010246:	4618      	mov	r0, r3
 8010248:	f7ff fbf2 	bl	800fa30 <isotp_st_min_to_ms>
 801024c:	4603      	mov	r3, r0
 801024e:	461a      	mov	r2, r3
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2200      	movs	r2, #0
 8010258:	74da      	strb	r2, [r3, #19]
            break;
 801025a:	e009      	b.n	8010270 <isotp_on_can_message+0x298>
        default:
            break;
 801025c:	bf00      	nop
 801025e:	e00a      	b.n	8010276 <isotp_on_can_message+0x29e>
            break;
 8010260:	bf00      	nop
 8010262:	e008      	b.n	8010276 <isotp_on_can_message+0x29e>
            break;
 8010264:	bf00      	nop
 8010266:	e006      	b.n	8010276 <isotp_on_can_message+0x29e>
            break;
 8010268:	bf00      	nop
 801026a:	e004      	b.n	8010276 <isotp_on_can_message+0x29e>
                break;
 801026c:	bf00      	nop
 801026e:	e002      	b.n	8010276 <isotp_on_can_message+0x29e>
            break;
 8010270:	bf00      	nop
    };
    
    return;
 8010272:	e000      	b.n	8010276 <isotp_on_can_message+0x29e>
        return;
 8010274:	bf00      	nop
}
 8010276:	3720      	adds	r7, #32
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 801027c:	b580      	push	{r7, lr}
 801027e:	b086      	sub	sp, #24
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	603b      	str	r3, [r7, #0]
 8010288:	4613      	mov	r3, r2
 801028a:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010292:	2b02      	cmp	r3, #2
 8010294:	d002      	beq.n	801029c <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 8010296:	f06f 0304 	mvn.w	r3, #4
 801029a:	e017      	b.n	80102cc <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80102a0:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 80102a2:	8afa      	ldrh	r2, [r7, #22]
 80102a4:	88fb      	ldrh	r3, [r7, #6]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d901      	bls.n	80102ae <isotp_receive+0x32>
        copylen = payload_size;
 80102aa:	88fb      	ldrh	r3, [r7, #6]
 80102ac:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102b2:	8afa      	ldrh	r2, [r7, #22]
 80102b4:	4619      	mov	r1, r3
 80102b6:	68b8      	ldr	r0, [r7, #8]
 80102b8:	f002 fd1b 	bl	8012cf2 <memcpy>
    *out_size = copylen;
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	8afa      	ldrh	r2, [r7, #22]
 80102c0:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2200      	movs	r2, #0
 80102c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return ISOTP_RET_OK;
 80102ca:	2300      	movs	r3, #0
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3718      	adds	r7, #24
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	60f8      	str	r0, [r7, #12]
 80102dc:	60b9      	str	r1, [r7, #8]
 80102de:	607a      	str	r2, [r7, #4]
 80102e0:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 80102e2:	2240      	movs	r2, #64	@ 0x40
 80102e4:	2100      	movs	r1, #0
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f002 fbba 	bl	8012a60 <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2200      	movs	r2, #0
 80102f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	68ba      	ldr	r2, [r7, #8]
 8010300:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	887a      	ldrh	r2, [r7, #2]
 801030c:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	69ba      	ldr	r2, [r7, #24]
 8010312:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	8bba      	ldrh	r2, [r7, #28]
 8010318:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    return;
 801031a:	bf00      	nop
}
 801031c:	3710      	adds	r7, #16
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}

08010322 <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 8010322:	b590      	push	{r4, r7, lr}
 8010324:	b085      	sub	sp, #20
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010330:	2b01      	cmp	r3, #1
 8010332:	d15c      	bne.n	80103ee <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 8010338:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801033c:	4293      	cmp	r3, r2
 801033e:	d003      	beq.n	8010348 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	8a1b      	ldrh	r3, [r3, #16]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d041      	beq.n	80103cc <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 801034c:	2b00      	cmp	r3, #0
 801034e:	d00c      	beq.n	801036a <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	7c9b      	ldrb	r3, [r3, #18]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d039      	beq.n	80103cc <isotp_poll+0xaa>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	695b      	ldr	r3, [r3, #20]
 801035c:	461c      	mov	r4, r3
 801035e:	f7f1 f885 	bl	800146c <isotp_user_get_ms>
 8010362:	4603      	mov	r3, r0
 8010364:	1ae3      	subs	r3, r4, r3
 8010366:	2b00      	cmp	r3, #0
 8010368:	da30      	bge.n	80103cc <isotp_poll+0xaa>
            
            ret = isotp_send_consecutive_frame(link);
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f7ff fc4a 	bl	800fc04 <isotp_send_consecutive_frame>
 8010370:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d125      	bne.n	80103c4 <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	8a1b      	ldrh	r3, [r3, #16]
 801037c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010380:	4293      	cmp	r3, r2
 8010382:	d005      	beq.n	8010390 <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	8a1b      	ldrh	r3, [r3, #16]
 8010388:	3b01      	subs	r3, #1
 801038a:	b29a      	uxth	r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8010390:	f7f1 f86c 	bl	800146c <isotp_user_get_ms>
 8010394:	4603      	mov	r3, r0
 8010396:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 801039e:	f7f1 f865 	bl	800146c <isotp_user_get_ms>
 80103a2:	4602      	mov	r2, r0
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7c9b      	ldrb	r3, [r3, #18]
 80103a8:	441a      	add	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	899a      	ldrh	r2, [r3, #12]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	895b      	ldrh	r3, [r3, #10]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d308      	bcc.n	80103cc <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2200      	movs	r2, #0
 80103be:	f883 2020 	strb.w	r2, [r3, #32]
 80103c2:	e003      	b.n	80103cc <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2202      	movs	r2, #2
 80103c8:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	699b      	ldr	r3, [r3, #24]
 80103d0:	461c      	mov	r4, r3
 80103d2:	f7f1 f84b 	bl	800146c <isotp_user_get_ms>
 80103d6:	4603      	mov	r3, r0
 80103d8:	1ae3      	subs	r3, r4, r3
 80103da:	2b00      	cmp	r3, #0
 80103dc:	da07      	bge.n	80103ee <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f06f 0201 	mvn.w	r2, #1
 80103e4:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2202      	movs	r2, #2
 80103ea:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d111      	bne.n	801041c <isotp_poll+0xfa>
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103fc:	461c      	mov	r4, r3
 80103fe:	f7f1 f835 	bl	800146c <isotp_user_get_ms>
 8010402:	4603      	mov	r3, r0
 8010404:	1ae3      	subs	r3, r4, r3
 8010406:	2b00      	cmp	r3, #0
 8010408:	da08      	bge.n	801041c <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f06f 0202 	mvn.w	r2, #2
 8010410:	639a      	str	r2, [r3, #56]	@ 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    return;
 801041a:	bf00      	nop
 801041c:	bf00      	nop
}
 801041e:	3714      	adds	r7, #20
 8010420:	46bd      	mov	sp, r7
 8010422:	bd90      	pop	{r4, r7, pc}

08010424 <OS_task_init>:
/* Initialize object by assigning init and dispatch handler function */
void OS_task_init(
    OS_task * const pOS_task,
    OS_handler init,
    OS_handler dispatch) 
{
 8010424:	b480      	push	{r7}
 8010426:	b085      	sub	sp, #20
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
    pOS_task->init = init;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	68ba      	ldr	r2, [r7, #8]
 8010434:	601a      	str	r2, [r3, #0]
    pOS_task->dispatch = dispatch;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	605a      	str	r2, [r3, #4]
}
 801043c:	bf00      	nop
 801043e:	3714      	adds	r7, #20
 8010440:	46bd      	mov	sp, r7
 8010442:	bc80      	pop	{r7}
 8010444:	4770      	bx	lr

08010446 <OS_task_create>:
    OS_task * const pOS_task,
    OS_taskPrio task_prio,
    OS_event_t const **pBuf ,
    OS_EQCt eqLen,
    OS_event_t const * const init_e)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b084      	sub	sp, #16
 801044a:	af00      	add	r7, sp, #0
 801044c:	60f8      	str	r0, [r7, #12]
 801044e:	607a      	str	r2, [r7, #4]
 8010450:	461a      	mov	r2, r3
 8010452:	460b      	mov	r3, r1
 8010454:	72fb      	strb	r3, [r7, #11]
 8010456:	4613      	mov	r3, r2
 8010458:	72bb      	strb	r3, [r7, #10]
    /* check parameter */
    if ( task_prio > 0  /* the priority must be greater than 0 */
 801045a:	7afb      	ldrb	r3, [r7, #11]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d020      	beq.n	80104a2 <OS_task_create+0x5c>
        && pBuf != (OS_event_t const **)0 /* The queue exists */
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d01d      	beq.n	80104a2 <OS_task_create+0x5c>
        && eqLen > 0) { /* the length greater than 0 */
 8010466:	7abb      	ldrb	r3, [r7, #10]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d01a      	beq.n	80104a2 <OS_task_create+0x5c>
        pOS_task->qBuf = pBuf;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	609a      	str	r2, [r3, #8]
        pOS_task->end = eqLen - 1;
 8010472:	7abb      	ldrb	r3, [r7, #10]
 8010474:	3b01      	subs	r3, #1
 8010476:	b2da      	uxtb	r2, r3
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	731a      	strb	r2, [r3, #12]
        pOS_task->head = 0;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2200      	movs	r2, #0
 8010480:	735a      	strb	r2, [r3, #13]
        pOS_task->tail = 0;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2200      	movs	r2, #0
 8010486:	739a      	strb	r2, [r3, #14]
        pOS_task->nUsed = 0;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	2200      	movs	r2, #0
 801048c:	73da      	strb	r2, [r3, #15]

        /* Set task priority */
        // OS_setTask_priority(pOS_task,task_prio);
        pOS_task->task_piro = task_prio - 1;
 801048e:	7afb      	ldrb	r3, [r7, #11]
 8010490:	3b01      	subs	r3, #1
 8010492:	b2da      	uxtb	r2, r3
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	741a      	strb	r2, [r3, #16]


        /* Initialize task with initialization event */
        (*pOS_task->init)(pOS_task,init_e);
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	69b9      	ldr	r1, [r7, #24]
 801049e:	68f8      	ldr	r0, [r7, #12]
 80104a0:	4798      	blx	r3
    } 
}
 80104a2:	bf00      	nop
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
	...

080104ac <OS_task_post>:
 * @brief Post the event to event queue of task 
 * 
 * @param pOS_task 
 * @param pEvent 
 */ 
void OS_task_post(OS_task *const pOS_task, OS_event_t const * const pEvent) {
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
    OS_ring_buf_tcb *pQueue = &pri_queue[pOS_task->task_piro];
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	7c1b      	ldrb	r3, [r3, #16]
 80104ba:	461a      	mov	r2, r3
 80104bc:	2358      	movs	r3, #88	@ 0x58
 80104be:	fb02 f303 	mul.w	r3, r2, r3
 80104c2:	4a30      	ldr	r2, [pc, #192]	@ (8010584 <OS_task_post+0xd8>)
 80104c4:	4413      	add	r3, r2
 80104c6:	60fb      	str	r3, [r7, #12]

    /* Check over flow of queue */
    if (pri_queue[pOS_task->task_piro].nUsed >= OS_TASK_PER_PRI || pOS_task->nUsed > pOS_task->end ) { /* full queue */
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	7c1b      	ldrb	r3, [r3, #16]
 80104cc:	4619      	mov	r1, r3
 80104ce:	4a2d      	ldr	r2, [pc, #180]	@ (8010584 <OS_task_post+0xd8>)
 80104d0:	2358      	movs	r3, #88	@ 0x58
 80104d2:	fb01 f303 	mul.w	r3, r1, r3
 80104d6:	4413      	add	r3, r2
 80104d8:	3303      	adds	r3, #3
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	2b09      	cmp	r3, #9
 80104de:	d84d      	bhi.n	801057c <OS_task_post+0xd0>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	7bda      	ldrb	r2, [r3, #15]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	7b1b      	ldrb	r3, [r3, #12]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d847      	bhi.n	801057c <OS_task_post+0xd0>
        return;
    }

    /* insert tcb to queue */
    OS_PORT_CRIT_ENTRY();
 80104ec:	b672      	cpsid	i
    pQueue->buf_tcb[pQueue->head_index].pEvent = pEvent;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	68fa      	ldr	r2, [r7, #12]
 80104f4:	00db      	lsls	r3, r3, #3
 80104f6:	4413      	add	r3, r2
 80104f8:	683a      	ldr	r2, [r7, #0]
 80104fa:	609a      	str	r2, [r3, #8]
    pQueue->buf_tcb[pQueue->head_index].pOS_task = pOS_task;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	68fa      	ldr	r2, [r7, #12]
 8010502:	00db      	lsls	r3, r3, #3
 8010504:	4413      	add	r3, r2
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	605a      	str	r2, [r3, #4]

    if (pQueue->head_index == 0) {
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d103      	bne.n	801051a <OS_task_post+0x6e>
        pQueue->head_index = OS_TASK_PER_PRI - 1; /* wrap around to end of the buffer */
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2209      	movs	r2, #9
 8010516:	701a      	strb	r2, [r3, #0]
 8010518:	e005      	b.n	8010526 <OS_task_post+0x7a>
    } else {
        --pQueue->head_index;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	3b01      	subs	r3, #1
 8010520:	b2da      	uxtb	r2, r3
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	701a      	strb	r2, [r3, #0]
    }
    ++pQueue->nUsed; /* Increase number event used in queue */
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	78db      	ldrb	r3, [r3, #3]
 801052a:	3301      	adds	r3, #1
 801052c:	b2da      	uxtb	r2, r3
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	70da      	strb	r2, [r3, #3]

    pOS_task->qBuf[pOS_task->head] = pEvent; /* insert event to queue */
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	689a      	ldr	r2, [r3, #8]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	7b5b      	ldrb	r3, [r3, #13]
 801053a:	009b      	lsls	r3, r3, #2
 801053c:	4413      	add	r3, r2
 801053e:	683a      	ldr	r2, [r7, #0]
 8010540:	601a      	str	r2, [r3, #0]
    if (pOS_task->head == 0) { 
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	7b5b      	ldrb	r3, [r3, #13]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d104      	bne.n	8010554 <OS_task_post+0xa8>
        pOS_task->head = pOS_task->end; /* wrap around to end of the buffer */
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	7b1a      	ldrb	r2, [r3, #12]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	735a      	strb	r2, [r3, #13]
 8010552:	e005      	b.n	8010560 <OS_task_post+0xb4>
    } else {
        --pOS_task->head;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	7b5b      	ldrb	r3, [r3, #13]
 8010558:	3b01      	subs	r3, #1
 801055a:	b2da      	uxtb	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	735a      	strb	r2, [r3, #13]
    }
    ++pOS_task->nUsed; /* Increase number event used in queue */
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	7bdb      	ldrb	r3, [r3, #15]
 8010564:	3301      	adds	r3, #1
 8010566:	b2da      	uxtb	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	73da      	strb	r2, [r3, #15]

    /* Post event -> make the interrupt */
    // OS_PORT_TASK_PEND();
    HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010570:	b25b      	sxtb	r3, r3
 8010572:	4618      	mov	r0, r3
 8010574:	f7f2 fa75 	bl	8002a62 <HAL_NVIC_SetPendingIRQ>
    OS_PORT_CRIT_EXIT();
 8010578:	b662      	cpsie	i
 801057a:	e000      	b.n	801057e <OS_task_post+0xd2>
        return;
 801057c:	bf00      	nop
}
 801057e:	3710      	adds	r7, #16
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	20001708 	.word	0x20001708

08010588 <OS_task_post_event>:

void OS_task_post_event(OS_task *const pOS_task,uint8_t sig, uint8_t *data, uint32_t size) {
 8010588:	b580      	push	{r7, lr}
 801058a:	b086      	sub	sp, #24
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	607a      	str	r2, [r7, #4]
 8010592:	603b      	str	r3, [r7, #0]
 8010594:	460b      	mov	r3, r1
 8010596:	72fb      	strb	r3, [r7, #11]
    OS_event_t *e = get_dynamic_event();
 8010598:	f000 f99c 	bl	80108d4 <get_dynamic_event>
 801059c:	6178      	str	r0, [r7, #20]
    set_sig_dynamic_event(e,sig);
 801059e:	7afb      	ldrb	r3, [r7, #11]
 80105a0:	4619      	mov	r1, r3
 80105a2:	6978      	ldr	r0, [r7, #20]
 80105a4:	f000 f9e2 	bl	801096c <set_sig_dynamic_event>
    set_data_dynamic_event(e,data,size);
 80105a8:	683a      	ldr	r2, [r7, #0]
 80105aa:	6879      	ldr	r1, [r7, #4]
 80105ac:	6978      	ldr	r0, [r7, #20]
 80105ae:	f000 f9bb 	bl	8010928 <set_data_dynamic_event>
    OS_task_post(pOS_task,e);
 80105b2:	6979      	ldr	r1, [r7, #20]
 80105b4:	68f8      	ldr	r0, [r7, #12]
 80105b6:	f7ff ff79 	bl	80104ac <OS_task_post>
}
 80105ba:	bf00      	nop
 80105bc:	3718      	adds	r7, #24
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
	...

080105c4 <OS_TimeEvt_init>:

void OS_TimeEvt_init(
    OS_TimeEvt *pOS_Evt,
    uint16_t  sig,
    OS_task *task)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b085      	sub	sp, #20
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	460b      	mov	r3, r1
 80105ce:	607a      	str	r2, [r7, #4]
 80105d0:	817b      	strh	r3, [r7, #10]
    pOS_Evt->Time_event.sig = sig;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	897a      	ldrh	r2, [r7, #10]
 80105d6:	801a      	strh	r2, [r3, #0]
//    pOS_Evt->Time_event.data = 0;
    pOS_Evt->Time_event.len = 0;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2200      	movs	r2, #0
 80105dc:	645a      	str	r2, [r3, #68]	@ 0x44
    pOS_Evt->task_post = task;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    pOS_Evt->Time_Ctr = 0;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2200      	movs	r2, #0
 80105e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2200      	movs	r2, #0
 80105f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* add new node to head of liked list */
    pOS_Evt->next = timeEvt_head;
 80105f4:	4b05      	ldr	r3, [pc, #20]	@ (801060c <OS_TimeEvt_init+0x48>)
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	649a      	str	r2, [r3, #72]	@ 0x48
    timeEvt_head = pOS_Evt;
 80105fc:	4a03      	ldr	r2, [pc, #12]	@ (801060c <OS_TimeEvt_init+0x48>)
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6013      	str	r3, [r2, #0]
} 
 8010602:	bf00      	nop
 8010604:	3714      	adds	r7, #20
 8010606:	46bd      	mov	sp, r7
 8010608:	bc80      	pop	{r7}
 801060a:	4770      	bx	lr
 801060c:	20001810 	.word	0x20001810

08010610 <OS_TimeEvt_Set>:
 * 
 * @param pOS_Evt Timer for generating event when TIMEOUT 
 * @param count TIMEOUT value 
 * @param interval interval value for periodic time event
 */
void OS_TimeEvt_Set(OS_TimeEvt *pOS_Evt, uint16_t count, uint16_t interval) {
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	460b      	mov	r3, r1
 801061a:	807b      	strh	r3, [r7, #2]
 801061c:	4613      	mov	r3, r2
 801061e:	803b      	strh	r3, [r7, #0]
    OS_PORT_CRIT_ENTRY();
 8010620:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = count;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	887a      	ldrh	r2, [r7, #2]
 8010626:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = interval;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	883a      	ldrh	r2, [r7, #0]
 801062e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 8010632:	b662      	cpsie	i
}
 8010634:	bf00      	nop
 8010636:	370c      	adds	r7, #12
 8010638:	46bd      	mov	sp, r7
 801063a:	bc80      	pop	{r7}
 801063c:	4770      	bx	lr

0801063e <OS_TimeEvt_Stop>:

void OS_TimeEvt_Stop(OS_TimeEvt *pOS_Evt) {
 801063e:	b480      	push	{r7}
 8010640:	b083      	sub	sp, #12
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 8010646:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = 0;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 8010658:	b662      	cpsie	i
}
 801065a:	bf00      	nop
 801065c:	370c      	adds	r7, #12
 801065e:	46bd      	mov	sp, r7
 8010660:	bc80      	pop	{r7}
 8010662:	4770      	bx	lr

08010664 <OS_TimeEvt_tick>:

/**
 * @brief function in systemtick handler (1ms) to execute task time OS 
 * 
 */
void OS_TimeEvt_tick(void) {
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
    /* run for all the node time event */
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 801066a:	4b1b      	ldr	r3, [pc, #108]	@ (80106d8 <OS_TimeEvt_tick+0x74>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	607b      	str	r3, [r7, #4]
 8010670:	e029      	b.n	80106c6 <OS_TimeEvt_tick+0x62>
        OS_PORT_CRIT_ENTRY();
 8010672:	b672      	cpsid	i
        if (node->Time_Ctr == 0) { /* down counter = 0  -> stop node */
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801067a:	2b00      	cmp	r3, #0
 801067c:	d101      	bne.n	8010682 <OS_TimeEvt_tick+0x1e>
            OS_PORT_CRIT_EXIT();
 801067e:	b662      	cpsie	i
 8010680:	e01e      	b.n	80106c0 <OS_TimeEvt_tick+0x5c>
        } else if (node->Time_Ctr == 1) { /* TIMEOUT */
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010688:	2b01      	cmp	r3, #1
 801068a:	d110      	bne.n	80106ae <OS_TimeEvt_tick+0x4a>
            node->Time_Ctr = node->Time_interval;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 8010698:	b662      	cpsie	i
            /* Post event */
            // OS_task_post(node->task_post,&node->Time_event);
            OS_task_post_event(node->task_post,node->Time_event.sig,(uint8_t *)0,0);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	881b      	ldrh	r3, [r3, #0]
 80106a2:	b2d9      	uxtb	r1, r3
 80106a4:	2300      	movs	r3, #0
 80106a6:	2200      	movs	r2, #0
 80106a8:	f7ff ff6e 	bl	8010588 <OS_task_post_event>
 80106ac:	e008      	b.n	80106c0 <OS_TimeEvt_tick+0x5c>
        } else { /* count down value */
            --node->Time_Ctr;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80106b4:	3b01      	subs	r3, #1
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 80106be:	b662      	cpsie	i
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80106c4:	607b      	str	r3, [r7, #4]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1d2      	bne.n	8010672 <OS_TimeEvt_tick+0xe>
        }
    }
}
 80106cc:	bf00      	nop
 80106ce:	bf00      	nop
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	20001810 	.word	0x20001810

080106dc <OS_task_activate>:
/**
 * @brief The task performs an action when it receives an event from the queue. Call in interrupt handler to get event and dispatch
 * 
 * @param pOS_task Task pointer
 */
void OS_task_activate(uint8_t prio_task) {
 80106dc:	b580      	push	{r7, lr}
 80106de:	b086      	sub	sp, #24
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	4603      	mov	r3, r0
 80106e4:	71fb      	strb	r3, [r7, #7]
    OS_ring_buf_tcb *pQueue = &pri_queue[prio_task - 1];
 80106e6:	79fb      	ldrb	r3, [r7, #7]
 80106e8:	3b01      	subs	r3, #1
 80106ea:	2258      	movs	r2, #88	@ 0x58
 80106ec:	fb02 f303 	mul.w	r3, r2, r3
 80106f0:	4a2e      	ldr	r2, [pc, #184]	@ (80107ac <OS_task_activate+0xd0>)
 80106f2:	4413      	add	r3, r2
 80106f4:	617b      	str	r3, [r7, #20]
    
    if (pQueue->nUsed == 0) { /* don't have tcb */
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	78db      	ldrb	r3, [r3, #3]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d050      	beq.n	80107a0 <OS_task_activate+0xc4>
        return;
    }
    
    uint8_t index = pQueue->tail_index;
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	785b      	ldrb	r3, [r3, #1]
 8010702:	74fb      	strb	r3, [r7, #19]
    if (pQueue->tail_index == 0) {
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	785b      	ldrb	r3, [r3, #1]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d103      	bne.n	8010714 <OS_task_activate+0x38>
        pQueue->tail_index = OS_TASK_PER_PRI - 1; /* wrap around */
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	2209      	movs	r2, #9
 8010710:	705a      	strb	r2, [r3, #1]
 8010712:	e005      	b.n	8010720 <OS_task_activate+0x44>
    } else {
        --pQueue->tail_index;
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	785b      	ldrb	r3, [r3, #1]
 8010718:	3b01      	subs	r3, #1
 801071a:	b2da      	uxtb	r2, r3
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	705a      	strb	r2, [r3, #1]
    }

    --pQueue->nUsed;
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	78db      	ldrb	r3, [r3, #3]
 8010724:	3b01      	subs	r3, #1
 8010726:	b2da      	uxtb	r2, r3
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	70da      	strb	r2, [r3, #3]

    OS_task *pOS_task = pQueue->buf_tcb[index].pOS_task;
 801072c:	7cfb      	ldrb	r3, [r7, #19]
 801072e:	697a      	ldr	r2, [r7, #20]
 8010730:	00db      	lsls	r3, r3, #3
 8010732:	4413      	add	r3, r2
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	60fb      	str	r3, [r7, #12]

    /* Check event in queue */
    if (pOS_task->nUsed == 0) { /* don't have event in queue */
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	7bdb      	ldrb	r3, [r3, #15]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d031      	beq.n	80107a4 <OS_task_activate+0xc8>
        return;
    }

    OS_event_t const *e_receive = pQueue->buf_tcb[index].pEvent;
 8010740:	7cfb      	ldrb	r3, [r7, #19]
 8010742:	697a      	ldr	r2, [r7, #20]
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	4413      	add	r3, r2
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	60bb      	str	r3, [r7, #8]
    if (pOS_task->tail == 0) {
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	7b9b      	ldrb	r3, [r3, #14]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d104      	bne.n	801075e <OS_task_activate+0x82>
        pOS_task->tail = pOS_task->end; /* wrap around */
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	7b1a      	ldrb	r2, [r3, #12]
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	739a      	strb	r2, [r3, #14]
 801075c:	e005      	b.n	801076a <OS_task_activate+0x8e>
    } else {
        --pOS_task->tail;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	7b9b      	ldrb	r3, [r3, #14]
 8010762:	3b01      	subs	r3, #1
 8010764:	b2da      	uxtb	r2, r3
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	739a      	strb	r2, [r3, #14]
    }
    OS_PORT_CRIT_ENTRY();
 801076a:	b672      	cpsid	i
    // --pOS_task->nUsed;
    if (--pOS_task->nUsed > 0) { /* check have any event in queue */
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	7bdb      	ldrb	r3, [r3, #15]
 8010770:	3b01      	subs	r3, #1
 8010772:	b2da      	uxtb	r2, r3
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	73da      	strb	r2, [r3, #15]
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	7bdb      	ldrb	r3, [r3, #15]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d005      	beq.n	801078c <OS_task_activate+0xb0>
        HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010784:	b25b      	sxtb	r3, r3
 8010786:	4618      	mov	r0, r3
 8010788:	f7f2 f96b 	bl	8002a62 <HAL_NVIC_SetPendingIRQ>
    }
    OS_PORT_CRIT_EXIT();
 801078c:	b662      	cpsie	i

    /* Dispatch the received event to this task */
    (*pOS_task->dispatch)(pOS_task,e_receive);
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	68b9      	ldr	r1, [r7, #8]
 8010794:	68f8      	ldr	r0, [r7, #12]
 8010796:	4798      	blx	r3

    free_dynamic_event(e_receive);
 8010798:	68b8      	ldr	r0, [r7, #8]
 801079a:	f000 f86f 	bl	801087c <free_dynamic_event>
 801079e:	e002      	b.n	80107a6 <OS_task_activate+0xca>
        return;
 80107a0:	bf00      	nop
 80107a2:	e000      	b.n	80107a6 <OS_task_activate+0xca>
        return;
 80107a4:	bf00      	nop
}
 80107a6:	3718      	adds	r7, #24
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	20001708 	.word	0x20001708

080107b0 <OS_priority_IRQ>:
 * @brief Set task priority 
 * 
 * @param pOS_task Task pointer 
 * @param prio task priority 
 */
void OS_priority_IRQ(uint8_t IRQ, OS_taskPrio prio) {
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	4603      	mov	r3, r0
 80107b8:	460a      	mov	r2, r1
 80107ba:	71fb      	strb	r3, [r7, #7]
 80107bc:	4613      	mov	r3, r2
 80107be:	71bb      	strb	r3, [r7, #6]
    HAL_NVIC_SetPriority(IRQ,(15U - prio),0);
 80107c0:	f997 0007 	ldrsb.w	r0, [r7, #7]
 80107c4:	79bb      	ldrb	r3, [r7, #6]
 80107c6:	f1c3 030f 	rsb	r3, r3, #15
 80107ca:	2200      	movs	r2, #0
 80107cc:	4619      	mov	r1, r3
 80107ce:	f7f2 f912 	bl	80029f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQ);
 80107d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7f2 f929 	bl	8002a2e <HAL_NVIC_EnableIRQ>
}
 80107dc:	bf00      	nop
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <OS_prio_setIRQ>:
 * @brief Set the number IRQ for specific priority
 * 
 * @param prio priority begin from 1 
 * @param num_irq IRQ number 
 */
void OS_prio_setIRQ(uint8_t prio, uint8_t num_irq) {
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	4603      	mov	r3, r0
 80107ec:	460a      	mov	r2, r1
 80107ee:	71fb      	strb	r3, [r7, #7]
 80107f0:	4613      	mov	r3, r2
 80107f2:	71bb      	strb	r3, [r7, #6]
    if (prio < OS_PRI_MAX) {
 80107f4:	79fb      	ldrb	r3, [r7, #7]
 80107f6:	2b02      	cmp	r3, #2
 80107f8:	d809      	bhi.n	801080e <OS_prio_setIRQ+0x2a>
        pri_queue[prio - 1].nvic_irq = num_irq;
 80107fa:	79fb      	ldrb	r3, [r7, #7]
 80107fc:	3b01      	subs	r3, #1
 80107fe:	79ba      	ldrb	r2, [r7, #6]
 8010800:	4905      	ldr	r1, [pc, #20]	@ (8010818 <OS_prio_setIRQ+0x34>)
 8010802:	2058      	movs	r0, #88	@ 0x58
 8010804:	fb00 f303 	mul.w	r3, r0, r3
 8010808:	440b      	add	r3, r1
 801080a:	3354      	adds	r3, #84	@ 0x54
 801080c:	601a      	str	r2, [r3, #0]
    }
}
 801080e:	bf00      	nop
 8010810:	370c      	adds	r7, #12
 8010812:	46bd      	mov	sp, r7
 8010814:	bc80      	pop	{r7}
 8010816:	4770      	bx	lr
 8010818:	20001708 	.word	0x20001708

0801081c <OS_Test_setIRQ>:

void OS_Test_setIRQ(OS_task * const pAO, uint8_t num_irq) {
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	460b      	mov	r3, r1
 8010826:	70fb      	strb	r3, [r7, #3]
    pAO->nvic_irq = num_irq;
 8010828:	78fa      	ldrb	r2, [r7, #3]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	619a      	str	r2, [r3, #24]
}
 801082e:	bf00      	nop
 8010830:	370c      	adds	r7, #12
 8010832:	46bd      	mov	sp, r7
 8010834:	bc80      	pop	{r7}
 8010836:	4770      	bx	lr

08010838 <dynamic_event_pool_init>:
static OS_event_t dynamic_event_pool[OS_EVT_POOL_SIZE];
static uint8_t dynamic_event_pool_free[OS_EVT_POOL_SIZE]; /* Store index in free */
static uint8_t dynamic_event_free_stack; /* point to the next index freen in pool */


void dynamic_event_pool_init(void) {
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 801083e:	b672      	cpsid	i

    dynamic_event_free_stack = 0;
 8010840:	4b0c      	ldr	r3, [pc, #48]	@ (8010874 <dynamic_event_pool_init+0x3c>)
 8010842:	2200      	movs	r2, #0
 8010844:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 8010846:	2300      	movs	r3, #0
 8010848:	71fb      	strb	r3, [r7, #7]
 801084a:	e006      	b.n	801085a <dynamic_event_pool_init+0x22>
        dynamic_event_pool_free[i] = i; /* Store the index free */
 801084c:	79fb      	ldrb	r3, [r7, #7]
 801084e:	490a      	ldr	r1, [pc, #40]	@ (8010878 <dynamic_event_pool_init+0x40>)
 8010850:	79fa      	ldrb	r2, [r7, #7]
 8010852:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 8010854:	79fb      	ldrb	r3, [r7, #7]
 8010856:	3301      	adds	r3, #1
 8010858:	71fb      	strb	r3, [r7, #7]
 801085a:	79fb      	ldrb	r3, [r7, #7]
 801085c:	2b09      	cmp	r3, #9
 801085e:	d9f5      	bls.n	801084c <dynamic_event_pool_init+0x14>
    }
    dynamic_event_free_stack = OS_EVT_POOL_SIZE;
 8010860:	4b04      	ldr	r3, [pc, #16]	@ (8010874 <dynamic_event_pool_init+0x3c>)
 8010862:	220a      	movs	r2, #10
 8010864:	701a      	strb	r2, [r3, #0]
    
    OS_PORT_CRIT_EXIT();
 8010866:	b662      	cpsie	i
}
 8010868:	bf00      	nop
 801086a:	370c      	adds	r7, #12
 801086c:	46bd      	mov	sp, r7
 801086e:	bc80      	pop	{r7}
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	20001aee 	.word	0x20001aee
 8010878:	20001ae4 	.word	0x20001ae4

0801087c <free_dynamic_event>:


void free_dynamic_event(OS_event_t *e) {
 801087c:	b480      	push	{r7}
 801087e:	b085      	sub	sp, #20
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 8010884:	b672      	cpsid	i

    uint8_t idx = e - dynamic_event_pool; /* Get index of event */
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4a0e      	ldr	r2, [pc, #56]	@ (80108c4 <free_dynamic_event+0x48>)
 801088a:	1a9b      	subs	r3, r3, r2
 801088c:	10db      	asrs	r3, r3, #3
 801088e:	4a0e      	ldr	r2, [pc, #56]	@ (80108c8 <free_dynamic_event+0x4c>)
 8010890:	fb02 f303 	mul.w	r3, r2, r3
 8010894:	73fb      	strb	r3, [r7, #15]
//    free(e->data); /* free allocated memory */
    if (idx > 0 && idx < OS_EVT_POOL_SIZE) {
 8010896:	7bfb      	ldrb	r3, [r7, #15]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d00c      	beq.n	80108b6 <free_dynamic_event+0x3a>
 801089c:	7bfb      	ldrb	r3, [r7, #15]
 801089e:	2b09      	cmp	r3, #9
 80108a0:	d809      	bhi.n	80108b6 <free_dynamic_event+0x3a>
        dynamic_event_pool_free[dynamic_event_free_stack++] = idx; 
 80108a2:	4b0a      	ldr	r3, [pc, #40]	@ (80108cc <free_dynamic_event+0x50>)
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	1c5a      	adds	r2, r3, #1
 80108a8:	b2d1      	uxtb	r1, r2
 80108aa:	4a08      	ldr	r2, [pc, #32]	@ (80108cc <free_dynamic_event+0x50>)
 80108ac:	7011      	strb	r1, [r2, #0]
 80108ae:	4619      	mov	r1, r3
 80108b0:	4a07      	ldr	r2, [pc, #28]	@ (80108d0 <free_dynamic_event+0x54>)
 80108b2:	7bfb      	ldrb	r3, [r7, #15]
 80108b4:	5453      	strb	r3, [r2, r1]
    }

    OS_PORT_CRIT_EXIT();
 80108b6:	b662      	cpsie	i
}
 80108b8:	bf00      	nop
 80108ba:	3714      	adds	r7, #20
 80108bc:	46bd      	mov	sp, r7
 80108be:	bc80      	pop	{r7}
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	20001814 	.word	0x20001814
 80108c8:	38e38e39 	.word	0x38e38e39
 80108cc:	20001aee 	.word	0x20001aee
 80108d0:	20001ae4 	.word	0x20001ae4

080108d4 <get_dynamic_event>:

OS_event_t *get_dynamic_event(void) {
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 80108da:	b672      	cpsid	i
    
    if (dynamic_event_free_stack == 0) return NULL; /* full */
 80108dc:	4b0f      	ldr	r3, [pc, #60]	@ (801091c <get_dynamic_event+0x48>)
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d101      	bne.n	80108e8 <get_dynamic_event+0x14>
 80108e4:	2300      	movs	r3, #0
 80108e6:	e013      	b.n	8010910 <get_dynamic_event+0x3c>
    uint8_t idx = dynamic_event_pool_free[--dynamic_event_free_stack]; /* Get index in free */
 80108e8:	4b0c      	ldr	r3, [pc, #48]	@ (801091c <get_dynamic_event+0x48>)
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	3b01      	subs	r3, #1
 80108ee:	b2da      	uxtb	r2, r3
 80108f0:	4b0a      	ldr	r3, [pc, #40]	@ (801091c <get_dynamic_event+0x48>)
 80108f2:	701a      	strb	r2, [r3, #0]
 80108f4:	4b09      	ldr	r3, [pc, #36]	@ (801091c <get_dynamic_event+0x48>)
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	461a      	mov	r2, r3
 80108fa:	4b09      	ldr	r3, [pc, #36]	@ (8010920 <get_dynamic_event+0x4c>)
 80108fc:	5c9b      	ldrb	r3, [r3, r2]
 80108fe:	71fb      	strb	r3, [r7, #7]
    
    OS_PORT_CRIT_EXIT();
 8010900:	b662      	cpsie	i
    return &dynamic_event_pool[idx];
 8010902:	79fa      	ldrb	r2, [r7, #7]
 8010904:	4613      	mov	r3, r2
 8010906:	00db      	lsls	r3, r3, #3
 8010908:	4413      	add	r3, r2
 801090a:	00db      	lsls	r3, r3, #3
 801090c:	4a05      	ldr	r2, [pc, #20]	@ (8010924 <get_dynamic_event+0x50>)
 801090e:	4413      	add	r3, r2
}
 8010910:	4618      	mov	r0, r3
 8010912:	370c      	adds	r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	bc80      	pop	{r7}
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop
 801091c:	20001aee 	.word	0x20001aee
 8010920:	20001ae4 	.word	0x20001ae4
 8010924:	20001814 	.word	0x20001814

08010928 <set_data_dynamic_event>:

void set_data_dynamic_event(OS_event_t *e, uint8_t *data, uint32_t len) {
 8010928:	b580      	push	{r7, lr}
 801092a:	b084      	sub	sp, #16
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
    if (len != 0) {
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d00a      	beq.n	8010950 <set_data_dynamic_event+0x28>
        e->len = len;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	687a      	ldr	r2, [r7, #4]
 801093e:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy(e->data,data,len);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	3302      	adds	r3, #2
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	68b9      	ldr	r1, [r7, #8]
 8010948:	4618      	mov	r0, r3
 801094a:	f002 f9d2 	bl	8012cf2 <memcpy>
    } else {
        e->len = len;
        memset(e->data, 0, sizeof(e->data));
    }
}
 801094e:	e009      	b.n	8010964 <set_data_dynamic_event+0x3c>
        e->len = len;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	645a      	str	r2, [r3, #68]	@ 0x44
        memset(e->data, 0, sizeof(e->data));
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	3302      	adds	r3, #2
 801095a:	2240      	movs	r2, #64	@ 0x40
 801095c:	2100      	movs	r1, #0
 801095e:	4618      	mov	r0, r3
 8010960:	f002 f87e 	bl	8012a60 <memset>
}
 8010964:	bf00      	nop
 8010966:	3710      	adds	r7, #16
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <set_sig_dynamic_event>:

void set_sig_dynamic_event(OS_event_t *e, uint8_t sig) {
 801096c:	b480      	push	{r7}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	460b      	mov	r3, r1
 8010976:	70fb      	strb	r3, [r7, #3]
    e->sig = sig;
 8010978:	78fb      	ldrb	r3, [r7, #3]
 801097a:	b29a      	uxth	r2, r3
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	801a      	strh	r2, [r3, #0]
}
 8010980:	bf00      	nop
 8010982:	370c      	adds	r7, #12
 8010984:	46bd      	mov	sp, r7
 8010986:	bc80      	pop	{r7}
 8010988:	4770      	bx	lr

0801098a <get_data_dynamic_event>:

uint8_t *get_data_dynamic_event(OS_event_t * const e) {
 801098a:	b480      	push	{r7}
 801098c:	b083      	sub	sp, #12
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
    return (e->data);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	3302      	adds	r3, #2
}
 8010996:	4618      	mov	r0, r3
 8010998:	370c      	adds	r7, #12
 801099a:	46bd      	mov	sp, r7
 801099c:	bc80      	pop	{r7}
 801099e:	4770      	bx	lr

080109a0 <__assert_func>:
 80109a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109a2:	4614      	mov	r4, r2
 80109a4:	461a      	mov	r2, r3
 80109a6:	4b09      	ldr	r3, [pc, #36]	@ (80109cc <__assert_func+0x2c>)
 80109a8:	4605      	mov	r5, r0
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	68d8      	ldr	r0, [r3, #12]
 80109ae:	b14c      	cbz	r4, 80109c4 <__assert_func+0x24>
 80109b0:	4b07      	ldr	r3, [pc, #28]	@ (80109d0 <__assert_func+0x30>)
 80109b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80109b6:	9100      	str	r1, [sp, #0]
 80109b8:	462b      	mov	r3, r5
 80109ba:	4906      	ldr	r1, [pc, #24]	@ (80109d4 <__assert_func+0x34>)
 80109bc:	f001 fe70 	bl	80126a0 <fiprintf>
 80109c0:	f002 f9b0 	bl	8012d24 <abort>
 80109c4:	4b04      	ldr	r3, [pc, #16]	@ (80109d8 <__assert_func+0x38>)
 80109c6:	461c      	mov	r4, r3
 80109c8:	e7f3      	b.n	80109b2 <__assert_func+0x12>
 80109ca:	bf00      	nop
 80109cc:	200002e4 	.word	0x200002e4
 80109d0:	08016169 	.word	0x08016169
 80109d4:	08016176 	.word	0x08016176
 80109d8:	080161a4 	.word	0x080161a4

080109dc <atof>:
 80109dc:	2100      	movs	r1, #0
 80109de:	f000 bec5 	b.w	801176c <strtod>

080109e2 <atoi>:
 80109e2:	220a      	movs	r2, #10
 80109e4:	2100      	movs	r1, #0
 80109e6:	f000 bf49 	b.w	801187c <strtol>
	...

080109ec <malloc>:
 80109ec:	4b02      	ldr	r3, [pc, #8]	@ (80109f8 <malloc+0xc>)
 80109ee:	4601      	mov	r1, r0
 80109f0:	6818      	ldr	r0, [r3, #0]
 80109f2:	f000 b82d 	b.w	8010a50 <_malloc_r>
 80109f6:	bf00      	nop
 80109f8:	200002e4 	.word	0x200002e4

080109fc <free>:
 80109fc:	4b02      	ldr	r3, [pc, #8]	@ (8010a08 <free+0xc>)
 80109fe:	4601      	mov	r1, r0
 8010a00:	6818      	ldr	r0, [r3, #0]
 8010a02:	f002 bff5 	b.w	80139f0 <_free_r>
 8010a06:	bf00      	nop
 8010a08:	200002e4 	.word	0x200002e4

08010a0c <sbrk_aligned>:
 8010a0c:	b570      	push	{r4, r5, r6, lr}
 8010a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8010a4c <sbrk_aligned+0x40>)
 8010a10:	460c      	mov	r4, r1
 8010a12:	6831      	ldr	r1, [r6, #0]
 8010a14:	4605      	mov	r5, r0
 8010a16:	b911      	cbnz	r1, 8010a1e <sbrk_aligned+0x12>
 8010a18:	f002 f906 	bl	8012c28 <_sbrk_r>
 8010a1c:	6030      	str	r0, [r6, #0]
 8010a1e:	4621      	mov	r1, r4
 8010a20:	4628      	mov	r0, r5
 8010a22:	f002 f901 	bl	8012c28 <_sbrk_r>
 8010a26:	1c43      	adds	r3, r0, #1
 8010a28:	d103      	bne.n	8010a32 <sbrk_aligned+0x26>
 8010a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8010a2e:	4620      	mov	r0, r4
 8010a30:	bd70      	pop	{r4, r5, r6, pc}
 8010a32:	1cc4      	adds	r4, r0, #3
 8010a34:	f024 0403 	bic.w	r4, r4, #3
 8010a38:	42a0      	cmp	r0, r4
 8010a3a:	d0f8      	beq.n	8010a2e <sbrk_aligned+0x22>
 8010a3c:	1a21      	subs	r1, r4, r0
 8010a3e:	4628      	mov	r0, r5
 8010a40:	f002 f8f2 	bl	8012c28 <_sbrk_r>
 8010a44:	3001      	adds	r0, #1
 8010a46:	d1f2      	bne.n	8010a2e <sbrk_aligned+0x22>
 8010a48:	e7ef      	b.n	8010a2a <sbrk_aligned+0x1e>
 8010a4a:	bf00      	nop
 8010a4c:	20001af0 	.word	0x20001af0

08010a50 <_malloc_r>:
 8010a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a54:	1ccd      	adds	r5, r1, #3
 8010a56:	f025 0503 	bic.w	r5, r5, #3
 8010a5a:	3508      	adds	r5, #8
 8010a5c:	2d0c      	cmp	r5, #12
 8010a5e:	bf38      	it	cc
 8010a60:	250c      	movcc	r5, #12
 8010a62:	2d00      	cmp	r5, #0
 8010a64:	4606      	mov	r6, r0
 8010a66:	db01      	blt.n	8010a6c <_malloc_r+0x1c>
 8010a68:	42a9      	cmp	r1, r5
 8010a6a:	d904      	bls.n	8010a76 <_malloc_r+0x26>
 8010a6c:	230c      	movs	r3, #12
 8010a6e:	6033      	str	r3, [r6, #0]
 8010a70:	2000      	movs	r0, #0
 8010a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b4c <_malloc_r+0xfc>
 8010a7a:	f000 f869 	bl	8010b50 <__malloc_lock>
 8010a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8010a82:	461c      	mov	r4, r3
 8010a84:	bb44      	cbnz	r4, 8010ad8 <_malloc_r+0x88>
 8010a86:	4629      	mov	r1, r5
 8010a88:	4630      	mov	r0, r6
 8010a8a:	f7ff ffbf 	bl	8010a0c <sbrk_aligned>
 8010a8e:	1c43      	adds	r3, r0, #1
 8010a90:	4604      	mov	r4, r0
 8010a92:	d158      	bne.n	8010b46 <_malloc_r+0xf6>
 8010a94:	f8d8 4000 	ldr.w	r4, [r8]
 8010a98:	4627      	mov	r7, r4
 8010a9a:	2f00      	cmp	r7, #0
 8010a9c:	d143      	bne.n	8010b26 <_malloc_r+0xd6>
 8010a9e:	2c00      	cmp	r4, #0
 8010aa0:	d04b      	beq.n	8010b3a <_malloc_r+0xea>
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	4639      	mov	r1, r7
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	eb04 0903 	add.w	r9, r4, r3
 8010aac:	f002 f8bc 	bl	8012c28 <_sbrk_r>
 8010ab0:	4581      	cmp	r9, r0
 8010ab2:	d142      	bne.n	8010b3a <_malloc_r+0xea>
 8010ab4:	6821      	ldr	r1, [r4, #0]
 8010ab6:	4630      	mov	r0, r6
 8010ab8:	1a6d      	subs	r5, r5, r1
 8010aba:	4629      	mov	r1, r5
 8010abc:	f7ff ffa6 	bl	8010a0c <sbrk_aligned>
 8010ac0:	3001      	adds	r0, #1
 8010ac2:	d03a      	beq.n	8010b3a <_malloc_r+0xea>
 8010ac4:	6823      	ldr	r3, [r4, #0]
 8010ac6:	442b      	add	r3, r5
 8010ac8:	6023      	str	r3, [r4, #0]
 8010aca:	f8d8 3000 	ldr.w	r3, [r8]
 8010ace:	685a      	ldr	r2, [r3, #4]
 8010ad0:	bb62      	cbnz	r2, 8010b2c <_malloc_r+0xdc>
 8010ad2:	f8c8 7000 	str.w	r7, [r8]
 8010ad6:	e00f      	b.n	8010af8 <_malloc_r+0xa8>
 8010ad8:	6822      	ldr	r2, [r4, #0]
 8010ada:	1b52      	subs	r2, r2, r5
 8010adc:	d420      	bmi.n	8010b20 <_malloc_r+0xd0>
 8010ade:	2a0b      	cmp	r2, #11
 8010ae0:	d917      	bls.n	8010b12 <_malloc_r+0xc2>
 8010ae2:	1961      	adds	r1, r4, r5
 8010ae4:	42a3      	cmp	r3, r4
 8010ae6:	6025      	str	r5, [r4, #0]
 8010ae8:	bf18      	it	ne
 8010aea:	6059      	strne	r1, [r3, #4]
 8010aec:	6863      	ldr	r3, [r4, #4]
 8010aee:	bf08      	it	eq
 8010af0:	f8c8 1000 	streq.w	r1, [r8]
 8010af4:	5162      	str	r2, [r4, r5]
 8010af6:	604b      	str	r3, [r1, #4]
 8010af8:	4630      	mov	r0, r6
 8010afa:	f000 f82f 	bl	8010b5c <__malloc_unlock>
 8010afe:	f104 000b 	add.w	r0, r4, #11
 8010b02:	1d23      	adds	r3, r4, #4
 8010b04:	f020 0007 	bic.w	r0, r0, #7
 8010b08:	1ac2      	subs	r2, r0, r3
 8010b0a:	bf1c      	itt	ne
 8010b0c:	1a1b      	subne	r3, r3, r0
 8010b0e:	50a3      	strne	r3, [r4, r2]
 8010b10:	e7af      	b.n	8010a72 <_malloc_r+0x22>
 8010b12:	6862      	ldr	r2, [r4, #4]
 8010b14:	42a3      	cmp	r3, r4
 8010b16:	bf0c      	ite	eq
 8010b18:	f8c8 2000 	streq.w	r2, [r8]
 8010b1c:	605a      	strne	r2, [r3, #4]
 8010b1e:	e7eb      	b.n	8010af8 <_malloc_r+0xa8>
 8010b20:	4623      	mov	r3, r4
 8010b22:	6864      	ldr	r4, [r4, #4]
 8010b24:	e7ae      	b.n	8010a84 <_malloc_r+0x34>
 8010b26:	463c      	mov	r4, r7
 8010b28:	687f      	ldr	r7, [r7, #4]
 8010b2a:	e7b6      	b.n	8010a9a <_malloc_r+0x4a>
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	42a3      	cmp	r3, r4
 8010b32:	d1fb      	bne.n	8010b2c <_malloc_r+0xdc>
 8010b34:	2300      	movs	r3, #0
 8010b36:	6053      	str	r3, [r2, #4]
 8010b38:	e7de      	b.n	8010af8 <_malloc_r+0xa8>
 8010b3a:	230c      	movs	r3, #12
 8010b3c:	4630      	mov	r0, r6
 8010b3e:	6033      	str	r3, [r6, #0]
 8010b40:	f000 f80c 	bl	8010b5c <__malloc_unlock>
 8010b44:	e794      	b.n	8010a70 <_malloc_r+0x20>
 8010b46:	6005      	str	r5, [r0, #0]
 8010b48:	e7d6      	b.n	8010af8 <_malloc_r+0xa8>
 8010b4a:	bf00      	nop
 8010b4c:	20001af4 	.word	0x20001af4

08010b50 <__malloc_lock>:
 8010b50:	4801      	ldr	r0, [pc, #4]	@ (8010b58 <__malloc_lock+0x8>)
 8010b52:	f002 b8b6 	b.w	8012cc2 <__retarget_lock_acquire_recursive>
 8010b56:	bf00      	nop
 8010b58:	20001c38 	.word	0x20001c38

08010b5c <__malloc_unlock>:
 8010b5c:	4801      	ldr	r0, [pc, #4]	@ (8010b64 <__malloc_unlock+0x8>)
 8010b5e:	f002 b8b1 	b.w	8012cc4 <__retarget_lock_release_recursive>
 8010b62:	bf00      	nop
 8010b64:	20001c38 	.word	0x20001c38

08010b68 <sulp>:
 8010b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b6c:	460f      	mov	r7, r1
 8010b6e:	4690      	mov	r8, r2
 8010b70:	f003 fe3e 	bl	80147f0 <__ulp>
 8010b74:	4604      	mov	r4, r0
 8010b76:	460d      	mov	r5, r1
 8010b78:	f1b8 0f00 	cmp.w	r8, #0
 8010b7c:	d011      	beq.n	8010ba2 <sulp+0x3a>
 8010b7e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8010b82:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	dd0b      	ble.n	8010ba2 <sulp+0x3a>
 8010b8a:	2400      	movs	r4, #0
 8010b8c:	051b      	lsls	r3, r3, #20
 8010b8e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010b92:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010b96:	4622      	mov	r2, r4
 8010b98:	462b      	mov	r3, r5
 8010b9a:	f7ef fca7 	bl	80004ec <__aeabi_dmul>
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	460d      	mov	r5, r1
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010baa:	0000      	movs	r0, r0
 8010bac:	0000      	movs	r0, r0
	...

08010bb0 <_strtod_l>:
 8010bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb4:	b09f      	sub	sp, #124	@ 0x7c
 8010bb6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010bb8:	2200      	movs	r2, #0
 8010bba:	460c      	mov	r4, r1
 8010bbc:	921a      	str	r2, [sp, #104]	@ 0x68
 8010bbe:	f04f 0a00 	mov.w	sl, #0
 8010bc2:	f04f 0b00 	mov.w	fp, #0
 8010bc6:	460a      	mov	r2, r1
 8010bc8:	9005      	str	r0, [sp, #20]
 8010bca:	9219      	str	r2, [sp, #100]	@ 0x64
 8010bcc:	7811      	ldrb	r1, [r2, #0]
 8010bce:	292b      	cmp	r1, #43	@ 0x2b
 8010bd0:	d048      	beq.n	8010c64 <_strtod_l+0xb4>
 8010bd2:	d836      	bhi.n	8010c42 <_strtod_l+0x92>
 8010bd4:	290d      	cmp	r1, #13
 8010bd6:	d830      	bhi.n	8010c3a <_strtod_l+0x8a>
 8010bd8:	2908      	cmp	r1, #8
 8010bda:	d830      	bhi.n	8010c3e <_strtod_l+0x8e>
 8010bdc:	2900      	cmp	r1, #0
 8010bde:	d039      	beq.n	8010c54 <_strtod_l+0xa4>
 8010be0:	2200      	movs	r2, #0
 8010be2:	920e      	str	r2, [sp, #56]	@ 0x38
 8010be4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010be6:	782a      	ldrb	r2, [r5, #0]
 8010be8:	2a30      	cmp	r2, #48	@ 0x30
 8010bea:	f040 80b0 	bne.w	8010d4e <_strtod_l+0x19e>
 8010bee:	786a      	ldrb	r2, [r5, #1]
 8010bf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010bf4:	2a58      	cmp	r2, #88	@ 0x58
 8010bf6:	d16c      	bne.n	8010cd2 <_strtod_l+0x122>
 8010bf8:	9302      	str	r3, [sp, #8]
 8010bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bfc:	4a8f      	ldr	r2, [pc, #572]	@ (8010e3c <_strtod_l+0x28c>)
 8010bfe:	9301      	str	r3, [sp, #4]
 8010c00:	ab1a      	add	r3, sp, #104	@ 0x68
 8010c02:	9300      	str	r3, [sp, #0]
 8010c04:	9805      	ldr	r0, [sp, #20]
 8010c06:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010c08:	a919      	add	r1, sp, #100	@ 0x64
 8010c0a:	f002 ffa1 	bl	8013b50 <__gethex>
 8010c0e:	f010 060f 	ands.w	r6, r0, #15
 8010c12:	4604      	mov	r4, r0
 8010c14:	d005      	beq.n	8010c22 <_strtod_l+0x72>
 8010c16:	2e06      	cmp	r6, #6
 8010c18:	d126      	bne.n	8010c68 <_strtod_l+0xb8>
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	3501      	adds	r5, #1
 8010c1e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010c20:	930e      	str	r3, [sp, #56]	@ 0x38
 8010c22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f040 8582 	bne.w	801172e <_strtod_l+0xb7e>
 8010c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c2c:	b1bb      	cbz	r3, 8010c5e <_strtod_l+0xae>
 8010c2e:	4650      	mov	r0, sl
 8010c30:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8010c34:	b01f      	add	sp, #124	@ 0x7c
 8010c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c3a:	2920      	cmp	r1, #32
 8010c3c:	d1d0      	bne.n	8010be0 <_strtod_l+0x30>
 8010c3e:	3201      	adds	r2, #1
 8010c40:	e7c3      	b.n	8010bca <_strtod_l+0x1a>
 8010c42:	292d      	cmp	r1, #45	@ 0x2d
 8010c44:	d1cc      	bne.n	8010be0 <_strtod_l+0x30>
 8010c46:	2101      	movs	r1, #1
 8010c48:	910e      	str	r1, [sp, #56]	@ 0x38
 8010c4a:	1c51      	adds	r1, r2, #1
 8010c4c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010c4e:	7852      	ldrb	r2, [r2, #1]
 8010c50:	2a00      	cmp	r2, #0
 8010c52:	d1c7      	bne.n	8010be4 <_strtod_l+0x34>
 8010c54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010c56:	9419      	str	r4, [sp, #100]	@ 0x64
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	f040 8566 	bne.w	801172a <_strtod_l+0xb7a>
 8010c5e:	4650      	mov	r0, sl
 8010c60:	4659      	mov	r1, fp
 8010c62:	e7e7      	b.n	8010c34 <_strtod_l+0x84>
 8010c64:	2100      	movs	r1, #0
 8010c66:	e7ef      	b.n	8010c48 <_strtod_l+0x98>
 8010c68:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010c6a:	b13a      	cbz	r2, 8010c7c <_strtod_l+0xcc>
 8010c6c:	2135      	movs	r1, #53	@ 0x35
 8010c6e:	a81c      	add	r0, sp, #112	@ 0x70
 8010c70:	f003 feae 	bl	80149d0 <__copybits>
 8010c74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010c76:	9805      	ldr	r0, [sp, #20]
 8010c78:	f003 fa8e 	bl	8014198 <_Bfree>
 8010c7c:	3e01      	subs	r6, #1
 8010c7e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010c80:	2e04      	cmp	r6, #4
 8010c82:	d806      	bhi.n	8010c92 <_strtod_l+0xe2>
 8010c84:	e8df f006 	tbb	[pc, r6]
 8010c88:	201d0314 	.word	0x201d0314
 8010c8c:	14          	.byte	0x14
 8010c8d:	00          	.byte	0x00
 8010c8e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010c92:	05e1      	lsls	r1, r4, #23
 8010c94:	bf48      	it	mi
 8010c96:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010c9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c9e:	0d1b      	lsrs	r3, r3, #20
 8010ca0:	051b      	lsls	r3, r3, #20
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d1bd      	bne.n	8010c22 <_strtod_l+0x72>
 8010ca6:	f001 ffe1 	bl	8012c6c <__errno>
 8010caa:	2322      	movs	r3, #34	@ 0x22
 8010cac:	6003      	str	r3, [r0, #0]
 8010cae:	e7b8      	b.n	8010c22 <_strtod_l+0x72>
 8010cb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010cb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010cb8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010cbc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010cc0:	e7e7      	b.n	8010c92 <_strtod_l+0xe2>
 8010cc2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010e40 <_strtod_l+0x290>
 8010cc6:	e7e4      	b.n	8010c92 <_strtod_l+0xe2>
 8010cc8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010ccc:	f04f 3aff 	mov.w	sl, #4294967295
 8010cd0:	e7df      	b.n	8010c92 <_strtod_l+0xe2>
 8010cd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cd4:	1c5a      	adds	r2, r3, #1
 8010cd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8010cd8:	785b      	ldrb	r3, [r3, #1]
 8010cda:	2b30      	cmp	r3, #48	@ 0x30
 8010cdc:	d0f9      	beq.n	8010cd2 <_strtod_l+0x122>
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d09f      	beq.n	8010c22 <_strtod_l+0x72>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	2700      	movs	r7, #0
 8010ce6:	220a      	movs	r2, #10
 8010ce8:	46b9      	mov	r9, r7
 8010cea:	9308      	str	r3, [sp, #32]
 8010cec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cee:	970b      	str	r7, [sp, #44]	@ 0x2c
 8010cf0:	930c      	str	r3, [sp, #48]	@ 0x30
 8010cf2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010cf4:	7805      	ldrb	r5, [r0, #0]
 8010cf6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010cfa:	b2d9      	uxtb	r1, r3
 8010cfc:	2909      	cmp	r1, #9
 8010cfe:	d928      	bls.n	8010d52 <_strtod_l+0x1a2>
 8010d00:	2201      	movs	r2, #1
 8010d02:	4950      	ldr	r1, [pc, #320]	@ (8010e44 <_strtod_l+0x294>)
 8010d04:	f001 fed6 	bl	8012ab4 <strncmp>
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	d032      	beq.n	8010d72 <_strtod_l+0x1c2>
 8010d0c:	2000      	movs	r0, #0
 8010d0e:	462a      	mov	r2, r5
 8010d10:	4603      	mov	r3, r0
 8010d12:	464d      	mov	r5, r9
 8010d14:	900a      	str	r0, [sp, #40]	@ 0x28
 8010d16:	2a65      	cmp	r2, #101	@ 0x65
 8010d18:	d001      	beq.n	8010d1e <_strtod_l+0x16e>
 8010d1a:	2a45      	cmp	r2, #69	@ 0x45
 8010d1c:	d114      	bne.n	8010d48 <_strtod_l+0x198>
 8010d1e:	b91d      	cbnz	r5, 8010d28 <_strtod_l+0x178>
 8010d20:	9a08      	ldr	r2, [sp, #32]
 8010d22:	4302      	orrs	r2, r0
 8010d24:	d096      	beq.n	8010c54 <_strtod_l+0xa4>
 8010d26:	2500      	movs	r5, #0
 8010d28:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010d2a:	1c62      	adds	r2, r4, #1
 8010d2c:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d2e:	7862      	ldrb	r2, [r4, #1]
 8010d30:	2a2b      	cmp	r2, #43	@ 0x2b
 8010d32:	d07a      	beq.n	8010e2a <_strtod_l+0x27a>
 8010d34:	2a2d      	cmp	r2, #45	@ 0x2d
 8010d36:	d07e      	beq.n	8010e36 <_strtod_l+0x286>
 8010d38:	f04f 0c00 	mov.w	ip, #0
 8010d3c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010d40:	2909      	cmp	r1, #9
 8010d42:	f240 8085 	bls.w	8010e50 <_strtod_l+0x2a0>
 8010d46:	9419      	str	r4, [sp, #100]	@ 0x64
 8010d48:	f04f 0800 	mov.w	r8, #0
 8010d4c:	e0a5      	b.n	8010e9a <_strtod_l+0x2ea>
 8010d4e:	2300      	movs	r3, #0
 8010d50:	e7c8      	b.n	8010ce4 <_strtod_l+0x134>
 8010d52:	f1b9 0f08 	cmp.w	r9, #8
 8010d56:	bfd8      	it	le
 8010d58:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8010d5a:	f100 0001 	add.w	r0, r0, #1
 8010d5e:	bfd6      	itet	le
 8010d60:	fb02 3301 	mlale	r3, r2, r1, r3
 8010d64:	fb02 3707 	mlagt	r7, r2, r7, r3
 8010d68:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8010d6a:	f109 0901 	add.w	r9, r9, #1
 8010d6e:	9019      	str	r0, [sp, #100]	@ 0x64
 8010d70:	e7bf      	b.n	8010cf2 <_strtod_l+0x142>
 8010d72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d74:	1c5a      	adds	r2, r3, #1
 8010d76:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d78:	785a      	ldrb	r2, [r3, #1]
 8010d7a:	f1b9 0f00 	cmp.w	r9, #0
 8010d7e:	d03b      	beq.n	8010df8 <_strtod_l+0x248>
 8010d80:	464d      	mov	r5, r9
 8010d82:	900a      	str	r0, [sp, #40]	@ 0x28
 8010d84:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010d88:	2b09      	cmp	r3, #9
 8010d8a:	d912      	bls.n	8010db2 <_strtod_l+0x202>
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	e7c2      	b.n	8010d16 <_strtod_l+0x166>
 8010d90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d92:	3001      	adds	r0, #1
 8010d94:	1c5a      	adds	r2, r3, #1
 8010d96:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d98:	785a      	ldrb	r2, [r3, #1]
 8010d9a:	2a30      	cmp	r2, #48	@ 0x30
 8010d9c:	d0f8      	beq.n	8010d90 <_strtod_l+0x1e0>
 8010d9e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010da2:	2b08      	cmp	r3, #8
 8010da4:	f200 84c8 	bhi.w	8011738 <_strtod_l+0xb88>
 8010da8:	900a      	str	r0, [sp, #40]	@ 0x28
 8010daa:	2000      	movs	r0, #0
 8010dac:	4605      	mov	r5, r0
 8010dae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010db0:	930c      	str	r3, [sp, #48]	@ 0x30
 8010db2:	3a30      	subs	r2, #48	@ 0x30
 8010db4:	f100 0301 	add.w	r3, r0, #1
 8010db8:	d018      	beq.n	8010dec <_strtod_l+0x23c>
 8010dba:	462e      	mov	r6, r5
 8010dbc:	f04f 0e0a 	mov.w	lr, #10
 8010dc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010dc2:	4419      	add	r1, r3
 8010dc4:	910a      	str	r1, [sp, #40]	@ 0x28
 8010dc6:	1c71      	adds	r1, r6, #1
 8010dc8:	eba1 0c05 	sub.w	ip, r1, r5
 8010dcc:	4563      	cmp	r3, ip
 8010dce:	dc15      	bgt.n	8010dfc <_strtod_l+0x24c>
 8010dd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010dd4:	182b      	adds	r3, r5, r0
 8010dd6:	2b08      	cmp	r3, #8
 8010dd8:	f105 0501 	add.w	r5, r5, #1
 8010ddc:	4405      	add	r5, r0
 8010dde:	dc1a      	bgt.n	8010e16 <_strtod_l+0x266>
 8010de0:	230a      	movs	r3, #10
 8010de2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010de4:	fb03 2301 	mla	r3, r3, r1, r2
 8010de8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010dea:	2300      	movs	r3, #0
 8010dec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010dee:	4618      	mov	r0, r3
 8010df0:	1c51      	adds	r1, r2, #1
 8010df2:	9119      	str	r1, [sp, #100]	@ 0x64
 8010df4:	7852      	ldrb	r2, [r2, #1]
 8010df6:	e7c5      	b.n	8010d84 <_strtod_l+0x1d4>
 8010df8:	4648      	mov	r0, r9
 8010dfa:	e7ce      	b.n	8010d9a <_strtod_l+0x1ea>
 8010dfc:	2e08      	cmp	r6, #8
 8010dfe:	dc05      	bgt.n	8010e0c <_strtod_l+0x25c>
 8010e00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010e02:	fb0e f606 	mul.w	r6, lr, r6
 8010e06:	960b      	str	r6, [sp, #44]	@ 0x2c
 8010e08:	460e      	mov	r6, r1
 8010e0a:	e7dc      	b.n	8010dc6 <_strtod_l+0x216>
 8010e0c:	2910      	cmp	r1, #16
 8010e0e:	bfd8      	it	le
 8010e10:	fb0e f707 	mulle.w	r7, lr, r7
 8010e14:	e7f8      	b.n	8010e08 <_strtod_l+0x258>
 8010e16:	2b0f      	cmp	r3, #15
 8010e18:	bfdc      	itt	le
 8010e1a:	230a      	movle	r3, #10
 8010e1c:	fb03 2707 	mlale	r7, r3, r7, r2
 8010e20:	e7e3      	b.n	8010dea <_strtod_l+0x23a>
 8010e22:	2300      	movs	r3, #0
 8010e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e26:	2301      	movs	r3, #1
 8010e28:	e77a      	b.n	8010d20 <_strtod_l+0x170>
 8010e2a:	f04f 0c00 	mov.w	ip, #0
 8010e2e:	1ca2      	adds	r2, r4, #2
 8010e30:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e32:	78a2      	ldrb	r2, [r4, #2]
 8010e34:	e782      	b.n	8010d3c <_strtod_l+0x18c>
 8010e36:	f04f 0c01 	mov.w	ip, #1
 8010e3a:	e7f8      	b.n	8010e2e <_strtod_l+0x27e>
 8010e3c:	080163b0 	.word	0x080163b0
 8010e40:	7ff00000 	.word	0x7ff00000
 8010e44:	080161a5 	.word	0x080161a5
 8010e48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010e4a:	1c51      	adds	r1, r2, #1
 8010e4c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010e4e:	7852      	ldrb	r2, [r2, #1]
 8010e50:	2a30      	cmp	r2, #48	@ 0x30
 8010e52:	d0f9      	beq.n	8010e48 <_strtod_l+0x298>
 8010e54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010e58:	2908      	cmp	r1, #8
 8010e5a:	f63f af75 	bhi.w	8010d48 <_strtod_l+0x198>
 8010e5e:	f04f 080a 	mov.w	r8, #10
 8010e62:	3a30      	subs	r2, #48	@ 0x30
 8010e64:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010e68:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010e6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010e6c:	1c56      	adds	r6, r2, #1
 8010e6e:	9619      	str	r6, [sp, #100]	@ 0x64
 8010e70:	7852      	ldrb	r2, [r2, #1]
 8010e72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010e76:	f1be 0f09 	cmp.w	lr, #9
 8010e7a:	d939      	bls.n	8010ef0 <_strtod_l+0x340>
 8010e7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010e7e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010e82:	1a76      	subs	r6, r6, r1
 8010e84:	2e08      	cmp	r6, #8
 8010e86:	dc03      	bgt.n	8010e90 <_strtod_l+0x2e0>
 8010e88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010e8a:	4588      	cmp	r8, r1
 8010e8c:	bfa8      	it	ge
 8010e8e:	4688      	movge	r8, r1
 8010e90:	f1bc 0f00 	cmp.w	ip, #0
 8010e94:	d001      	beq.n	8010e9a <_strtod_l+0x2ea>
 8010e96:	f1c8 0800 	rsb	r8, r8, #0
 8010e9a:	2d00      	cmp	r5, #0
 8010e9c:	d14e      	bne.n	8010f3c <_strtod_l+0x38c>
 8010e9e:	9908      	ldr	r1, [sp, #32]
 8010ea0:	4308      	orrs	r0, r1
 8010ea2:	f47f aebe 	bne.w	8010c22 <_strtod_l+0x72>
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f47f aed4 	bne.w	8010c54 <_strtod_l+0xa4>
 8010eac:	2a69      	cmp	r2, #105	@ 0x69
 8010eae:	d028      	beq.n	8010f02 <_strtod_l+0x352>
 8010eb0:	dc25      	bgt.n	8010efe <_strtod_l+0x34e>
 8010eb2:	2a49      	cmp	r2, #73	@ 0x49
 8010eb4:	d025      	beq.n	8010f02 <_strtod_l+0x352>
 8010eb6:	2a4e      	cmp	r2, #78	@ 0x4e
 8010eb8:	f47f aecc 	bne.w	8010c54 <_strtod_l+0xa4>
 8010ebc:	4999      	ldr	r1, [pc, #612]	@ (8011124 <_strtod_l+0x574>)
 8010ebe:	a819      	add	r0, sp, #100	@ 0x64
 8010ec0:	f003 f868 	bl	8013f94 <__match>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	f43f aec5 	beq.w	8010c54 <_strtod_l+0xa4>
 8010eca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	2b28      	cmp	r3, #40	@ 0x28
 8010ed0:	d12e      	bne.n	8010f30 <_strtod_l+0x380>
 8010ed2:	4995      	ldr	r1, [pc, #596]	@ (8011128 <_strtod_l+0x578>)
 8010ed4:	aa1c      	add	r2, sp, #112	@ 0x70
 8010ed6:	a819      	add	r0, sp, #100	@ 0x64
 8010ed8:	f003 f870 	bl	8013fbc <__hexnan>
 8010edc:	2805      	cmp	r0, #5
 8010ede:	d127      	bne.n	8010f30 <_strtod_l+0x380>
 8010ee0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010ee2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010ee6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010eea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010eee:	e698      	b.n	8010c22 <_strtod_l+0x72>
 8010ef0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ef2:	fb08 2101 	mla	r1, r8, r1, r2
 8010ef6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010efa:	9209      	str	r2, [sp, #36]	@ 0x24
 8010efc:	e7b5      	b.n	8010e6a <_strtod_l+0x2ba>
 8010efe:	2a6e      	cmp	r2, #110	@ 0x6e
 8010f00:	e7da      	b.n	8010eb8 <_strtod_l+0x308>
 8010f02:	498a      	ldr	r1, [pc, #552]	@ (801112c <_strtod_l+0x57c>)
 8010f04:	a819      	add	r0, sp, #100	@ 0x64
 8010f06:	f003 f845 	bl	8013f94 <__match>
 8010f0a:	2800      	cmp	r0, #0
 8010f0c:	f43f aea2 	beq.w	8010c54 <_strtod_l+0xa4>
 8010f10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f12:	4987      	ldr	r1, [pc, #540]	@ (8011130 <_strtod_l+0x580>)
 8010f14:	3b01      	subs	r3, #1
 8010f16:	a819      	add	r0, sp, #100	@ 0x64
 8010f18:	9319      	str	r3, [sp, #100]	@ 0x64
 8010f1a:	f003 f83b 	bl	8013f94 <__match>
 8010f1e:	b910      	cbnz	r0, 8010f26 <_strtod_l+0x376>
 8010f20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f22:	3301      	adds	r3, #1
 8010f24:	9319      	str	r3, [sp, #100]	@ 0x64
 8010f26:	f04f 0a00 	mov.w	sl, #0
 8010f2a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8011134 <_strtod_l+0x584>
 8010f2e:	e678      	b.n	8010c22 <_strtod_l+0x72>
 8010f30:	4881      	ldr	r0, [pc, #516]	@ (8011138 <_strtod_l+0x588>)
 8010f32:	f001 feed 	bl	8012d10 <nan>
 8010f36:	4682      	mov	sl, r0
 8010f38:	468b      	mov	fp, r1
 8010f3a:	e672      	b.n	8010c22 <_strtod_l+0x72>
 8010f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f3e:	f1b9 0f00 	cmp.w	r9, #0
 8010f42:	bf08      	it	eq
 8010f44:	46a9      	moveq	r9, r5
 8010f46:	eba8 0303 	sub.w	r3, r8, r3
 8010f4a:	2d10      	cmp	r5, #16
 8010f4c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010f4e:	462c      	mov	r4, r5
 8010f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f52:	bfa8      	it	ge
 8010f54:	2410      	movge	r4, #16
 8010f56:	f7ef fa4f 	bl	80003f8 <__aeabi_ui2d>
 8010f5a:	2d09      	cmp	r5, #9
 8010f5c:	4682      	mov	sl, r0
 8010f5e:	468b      	mov	fp, r1
 8010f60:	dc11      	bgt.n	8010f86 <_strtod_l+0x3d6>
 8010f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	f43f ae5c 	beq.w	8010c22 <_strtod_l+0x72>
 8010f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f6c:	dd76      	ble.n	801105c <_strtod_l+0x4ac>
 8010f6e:	2b16      	cmp	r3, #22
 8010f70:	dc5d      	bgt.n	801102e <_strtod_l+0x47e>
 8010f72:	4972      	ldr	r1, [pc, #456]	@ (801113c <_strtod_l+0x58c>)
 8010f74:	4652      	mov	r2, sl
 8010f76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010f7a:	465b      	mov	r3, fp
 8010f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f80:	f7ef fab4 	bl	80004ec <__aeabi_dmul>
 8010f84:	e7d7      	b.n	8010f36 <_strtod_l+0x386>
 8010f86:	4b6d      	ldr	r3, [pc, #436]	@ (801113c <_strtod_l+0x58c>)
 8010f88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010f90:	f7ef faac 	bl	80004ec <__aeabi_dmul>
 8010f94:	4682      	mov	sl, r0
 8010f96:	4638      	mov	r0, r7
 8010f98:	468b      	mov	fp, r1
 8010f9a:	f7ef fa2d 	bl	80003f8 <__aeabi_ui2d>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	4650      	mov	r0, sl
 8010fa4:	4659      	mov	r1, fp
 8010fa6:	f7ef f8eb 	bl	8000180 <__adddf3>
 8010faa:	2d0f      	cmp	r5, #15
 8010fac:	4682      	mov	sl, r0
 8010fae:	468b      	mov	fp, r1
 8010fb0:	ddd7      	ble.n	8010f62 <_strtod_l+0x3b2>
 8010fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fb4:	1b2c      	subs	r4, r5, r4
 8010fb6:	441c      	add	r4, r3
 8010fb8:	2c00      	cmp	r4, #0
 8010fba:	f340 8093 	ble.w	80110e4 <_strtod_l+0x534>
 8010fbe:	f014 030f 	ands.w	r3, r4, #15
 8010fc2:	d00a      	beq.n	8010fda <_strtod_l+0x42a>
 8010fc4:	495d      	ldr	r1, [pc, #372]	@ (801113c <_strtod_l+0x58c>)
 8010fc6:	4652      	mov	r2, sl
 8010fc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fd0:	465b      	mov	r3, fp
 8010fd2:	f7ef fa8b 	bl	80004ec <__aeabi_dmul>
 8010fd6:	4682      	mov	sl, r0
 8010fd8:	468b      	mov	fp, r1
 8010fda:	f034 040f 	bics.w	r4, r4, #15
 8010fde:	d073      	beq.n	80110c8 <_strtod_l+0x518>
 8010fe0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010fe4:	dd49      	ble.n	801107a <_strtod_l+0x4ca>
 8010fe6:	2400      	movs	r4, #0
 8010fe8:	46a0      	mov	r8, r4
 8010fea:	46a1      	mov	r9, r4
 8010fec:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010fee:	2322      	movs	r3, #34	@ 0x22
 8010ff0:	f04f 0a00 	mov.w	sl, #0
 8010ff4:	9a05      	ldr	r2, [sp, #20]
 8010ff6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8011134 <_strtod_l+0x584>
 8010ffa:	6013      	str	r3, [r2, #0]
 8010ffc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f43f ae0f 	beq.w	8010c22 <_strtod_l+0x72>
 8011004:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011006:	9805      	ldr	r0, [sp, #20]
 8011008:	f003 f8c6 	bl	8014198 <_Bfree>
 801100c:	4649      	mov	r1, r9
 801100e:	9805      	ldr	r0, [sp, #20]
 8011010:	f003 f8c2 	bl	8014198 <_Bfree>
 8011014:	4641      	mov	r1, r8
 8011016:	9805      	ldr	r0, [sp, #20]
 8011018:	f003 f8be 	bl	8014198 <_Bfree>
 801101c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801101e:	9805      	ldr	r0, [sp, #20]
 8011020:	f003 f8ba 	bl	8014198 <_Bfree>
 8011024:	4621      	mov	r1, r4
 8011026:	9805      	ldr	r0, [sp, #20]
 8011028:	f003 f8b6 	bl	8014198 <_Bfree>
 801102c:	e5f9      	b.n	8010c22 <_strtod_l+0x72>
 801102e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011030:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011034:	4293      	cmp	r3, r2
 8011036:	dbbc      	blt.n	8010fb2 <_strtod_l+0x402>
 8011038:	4c40      	ldr	r4, [pc, #256]	@ (801113c <_strtod_l+0x58c>)
 801103a:	f1c5 050f 	rsb	r5, r5, #15
 801103e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011042:	4652      	mov	r2, sl
 8011044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011048:	465b      	mov	r3, fp
 801104a:	f7ef fa4f 	bl	80004ec <__aeabi_dmul>
 801104e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011050:	1b5d      	subs	r5, r3, r5
 8011052:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011056:	e9d4 2300 	ldrd	r2, r3, [r4]
 801105a:	e791      	b.n	8010f80 <_strtod_l+0x3d0>
 801105c:	3316      	adds	r3, #22
 801105e:	dba8      	blt.n	8010fb2 <_strtod_l+0x402>
 8011060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011062:	4650      	mov	r0, sl
 8011064:	eba3 0808 	sub.w	r8, r3, r8
 8011068:	4b34      	ldr	r3, [pc, #208]	@ (801113c <_strtod_l+0x58c>)
 801106a:	4659      	mov	r1, fp
 801106c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011070:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011074:	f7ef fb64 	bl	8000740 <__aeabi_ddiv>
 8011078:	e75d      	b.n	8010f36 <_strtod_l+0x386>
 801107a:	2300      	movs	r3, #0
 801107c:	4650      	mov	r0, sl
 801107e:	4659      	mov	r1, fp
 8011080:	461e      	mov	r6, r3
 8011082:	4f2f      	ldr	r7, [pc, #188]	@ (8011140 <_strtod_l+0x590>)
 8011084:	1124      	asrs	r4, r4, #4
 8011086:	2c01      	cmp	r4, #1
 8011088:	dc21      	bgt.n	80110ce <_strtod_l+0x51e>
 801108a:	b10b      	cbz	r3, 8011090 <_strtod_l+0x4e0>
 801108c:	4682      	mov	sl, r0
 801108e:	468b      	mov	fp, r1
 8011090:	492b      	ldr	r1, [pc, #172]	@ (8011140 <_strtod_l+0x590>)
 8011092:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011096:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801109a:	4652      	mov	r2, sl
 801109c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110a0:	465b      	mov	r3, fp
 80110a2:	f7ef fa23 	bl	80004ec <__aeabi_dmul>
 80110a6:	4b23      	ldr	r3, [pc, #140]	@ (8011134 <_strtod_l+0x584>)
 80110a8:	460a      	mov	r2, r1
 80110aa:	400b      	ands	r3, r1
 80110ac:	4925      	ldr	r1, [pc, #148]	@ (8011144 <_strtod_l+0x594>)
 80110ae:	4682      	mov	sl, r0
 80110b0:	428b      	cmp	r3, r1
 80110b2:	d898      	bhi.n	8010fe6 <_strtod_l+0x436>
 80110b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80110b8:	428b      	cmp	r3, r1
 80110ba:	bf86      	itte	hi
 80110bc:	f04f 3aff 	movhi.w	sl, #4294967295
 80110c0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8011148 <_strtod_l+0x598>
 80110c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80110c8:	2300      	movs	r3, #0
 80110ca:	9308      	str	r3, [sp, #32]
 80110cc:	e076      	b.n	80111bc <_strtod_l+0x60c>
 80110ce:	07e2      	lsls	r2, r4, #31
 80110d0:	d504      	bpl.n	80110dc <_strtod_l+0x52c>
 80110d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110d6:	f7ef fa09 	bl	80004ec <__aeabi_dmul>
 80110da:	2301      	movs	r3, #1
 80110dc:	3601      	adds	r6, #1
 80110de:	1064      	asrs	r4, r4, #1
 80110e0:	3708      	adds	r7, #8
 80110e2:	e7d0      	b.n	8011086 <_strtod_l+0x4d6>
 80110e4:	d0f0      	beq.n	80110c8 <_strtod_l+0x518>
 80110e6:	4264      	negs	r4, r4
 80110e8:	f014 020f 	ands.w	r2, r4, #15
 80110ec:	d00a      	beq.n	8011104 <_strtod_l+0x554>
 80110ee:	4b13      	ldr	r3, [pc, #76]	@ (801113c <_strtod_l+0x58c>)
 80110f0:	4650      	mov	r0, sl
 80110f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110f6:	4659      	mov	r1, fp
 80110f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fc:	f7ef fb20 	bl	8000740 <__aeabi_ddiv>
 8011100:	4682      	mov	sl, r0
 8011102:	468b      	mov	fp, r1
 8011104:	1124      	asrs	r4, r4, #4
 8011106:	d0df      	beq.n	80110c8 <_strtod_l+0x518>
 8011108:	2c1f      	cmp	r4, #31
 801110a:	dd1f      	ble.n	801114c <_strtod_l+0x59c>
 801110c:	2400      	movs	r4, #0
 801110e:	46a0      	mov	r8, r4
 8011110:	46a1      	mov	r9, r4
 8011112:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011114:	2322      	movs	r3, #34	@ 0x22
 8011116:	9a05      	ldr	r2, [sp, #20]
 8011118:	f04f 0a00 	mov.w	sl, #0
 801111c:	f04f 0b00 	mov.w	fp, #0
 8011120:	6013      	str	r3, [r2, #0]
 8011122:	e76b      	b.n	8010ffc <_strtod_l+0x44c>
 8011124:	080161b4 	.word	0x080161b4
 8011128:	0801639c 	.word	0x0801639c
 801112c:	080161ac 	.word	0x080161ac
 8011130:	0801625c 	.word	0x0801625c
 8011134:	7ff00000 	.word	0x7ff00000
 8011138:	080161a4 	.word	0x080161a4
 801113c:	08016528 	.word	0x08016528
 8011140:	08016500 	.word	0x08016500
 8011144:	7ca00000 	.word	0x7ca00000
 8011148:	7fefffff 	.word	0x7fefffff
 801114c:	f014 0310 	ands.w	r3, r4, #16
 8011150:	bf18      	it	ne
 8011152:	236a      	movne	r3, #106	@ 0x6a
 8011154:	4650      	mov	r0, sl
 8011156:	9308      	str	r3, [sp, #32]
 8011158:	4659      	mov	r1, fp
 801115a:	2300      	movs	r3, #0
 801115c:	4e77      	ldr	r6, [pc, #476]	@ (801133c <_strtod_l+0x78c>)
 801115e:	07e7      	lsls	r7, r4, #31
 8011160:	d504      	bpl.n	801116c <_strtod_l+0x5bc>
 8011162:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011166:	f7ef f9c1 	bl	80004ec <__aeabi_dmul>
 801116a:	2301      	movs	r3, #1
 801116c:	1064      	asrs	r4, r4, #1
 801116e:	f106 0608 	add.w	r6, r6, #8
 8011172:	d1f4      	bne.n	801115e <_strtod_l+0x5ae>
 8011174:	b10b      	cbz	r3, 801117a <_strtod_l+0x5ca>
 8011176:	4682      	mov	sl, r0
 8011178:	468b      	mov	fp, r1
 801117a:	9b08      	ldr	r3, [sp, #32]
 801117c:	b1b3      	cbz	r3, 80111ac <_strtod_l+0x5fc>
 801117e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011182:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011186:	2b00      	cmp	r3, #0
 8011188:	4659      	mov	r1, fp
 801118a:	dd0f      	ble.n	80111ac <_strtod_l+0x5fc>
 801118c:	2b1f      	cmp	r3, #31
 801118e:	dd58      	ble.n	8011242 <_strtod_l+0x692>
 8011190:	2b34      	cmp	r3, #52	@ 0x34
 8011192:	bfd8      	it	le
 8011194:	f04f 33ff 	movle.w	r3, #4294967295
 8011198:	f04f 0a00 	mov.w	sl, #0
 801119c:	bfcf      	iteee	gt
 801119e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80111a2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80111a6:	4093      	lslle	r3, r2
 80111a8:	ea03 0b01 	andle.w	fp, r3, r1
 80111ac:	2200      	movs	r2, #0
 80111ae:	2300      	movs	r3, #0
 80111b0:	4650      	mov	r0, sl
 80111b2:	4659      	mov	r1, fp
 80111b4:	f7ef fc02 	bl	80009bc <__aeabi_dcmpeq>
 80111b8:	2800      	cmp	r0, #0
 80111ba:	d1a7      	bne.n	801110c <_strtod_l+0x55c>
 80111bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111be:	464a      	mov	r2, r9
 80111c0:	9300      	str	r3, [sp, #0]
 80111c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80111c4:	462b      	mov	r3, r5
 80111c6:	9805      	ldr	r0, [sp, #20]
 80111c8:	f003 f84e 	bl	8014268 <__s2b>
 80111cc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80111ce:	2800      	cmp	r0, #0
 80111d0:	f43f af09 	beq.w	8010fe6 <_strtod_l+0x436>
 80111d4:	2400      	movs	r4, #0
 80111d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111da:	2a00      	cmp	r2, #0
 80111dc:	eba3 0308 	sub.w	r3, r3, r8
 80111e0:	bfa8      	it	ge
 80111e2:	2300      	movge	r3, #0
 80111e4:	46a0      	mov	r8, r4
 80111e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80111e8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80111ec:	9316      	str	r3, [sp, #88]	@ 0x58
 80111ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111f0:	9805      	ldr	r0, [sp, #20]
 80111f2:	6859      	ldr	r1, [r3, #4]
 80111f4:	f002 ff90 	bl	8014118 <_Balloc>
 80111f8:	4681      	mov	r9, r0
 80111fa:	2800      	cmp	r0, #0
 80111fc:	f43f aef7 	beq.w	8010fee <_strtod_l+0x43e>
 8011200:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011202:	300c      	adds	r0, #12
 8011204:	691a      	ldr	r2, [r3, #16]
 8011206:	f103 010c 	add.w	r1, r3, #12
 801120a:	3202      	adds	r2, #2
 801120c:	0092      	lsls	r2, r2, #2
 801120e:	f001 fd70 	bl	8012cf2 <memcpy>
 8011212:	ab1c      	add	r3, sp, #112	@ 0x70
 8011214:	9301      	str	r3, [sp, #4]
 8011216:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011218:	9300      	str	r3, [sp, #0]
 801121a:	4652      	mov	r2, sl
 801121c:	465b      	mov	r3, fp
 801121e:	9805      	ldr	r0, [sp, #20]
 8011220:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011224:	f003 fb4c 	bl	80148c0 <__d2b>
 8011228:	901a      	str	r0, [sp, #104]	@ 0x68
 801122a:	2800      	cmp	r0, #0
 801122c:	f43f aedf 	beq.w	8010fee <_strtod_l+0x43e>
 8011230:	2101      	movs	r1, #1
 8011232:	9805      	ldr	r0, [sp, #20]
 8011234:	f003 f8ae 	bl	8014394 <__i2b>
 8011238:	4680      	mov	r8, r0
 801123a:	b948      	cbnz	r0, 8011250 <_strtod_l+0x6a0>
 801123c:	f04f 0800 	mov.w	r8, #0
 8011240:	e6d5      	b.n	8010fee <_strtod_l+0x43e>
 8011242:	f04f 32ff 	mov.w	r2, #4294967295
 8011246:	fa02 f303 	lsl.w	r3, r2, r3
 801124a:	ea03 0a0a 	and.w	sl, r3, sl
 801124e:	e7ad      	b.n	80111ac <_strtod_l+0x5fc>
 8011250:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011252:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011254:	2d00      	cmp	r5, #0
 8011256:	bfab      	itete	ge
 8011258:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801125a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801125c:	18ef      	addge	r7, r5, r3
 801125e:	1b5e      	sublt	r6, r3, r5
 8011260:	9b08      	ldr	r3, [sp, #32]
 8011262:	bfa8      	it	ge
 8011264:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011266:	eba5 0503 	sub.w	r5, r5, r3
 801126a:	4415      	add	r5, r2
 801126c:	4b34      	ldr	r3, [pc, #208]	@ (8011340 <_strtod_l+0x790>)
 801126e:	f105 35ff 	add.w	r5, r5, #4294967295
 8011272:	bfb8      	it	lt
 8011274:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011276:	429d      	cmp	r5, r3
 8011278:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801127c:	da50      	bge.n	8011320 <_strtod_l+0x770>
 801127e:	1b5b      	subs	r3, r3, r5
 8011280:	2b1f      	cmp	r3, #31
 8011282:	f04f 0101 	mov.w	r1, #1
 8011286:	eba2 0203 	sub.w	r2, r2, r3
 801128a:	dc3d      	bgt.n	8011308 <_strtod_l+0x758>
 801128c:	fa01 f303 	lsl.w	r3, r1, r3
 8011290:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011292:	2300      	movs	r3, #0
 8011294:	9310      	str	r3, [sp, #64]	@ 0x40
 8011296:	18bd      	adds	r5, r7, r2
 8011298:	9b08      	ldr	r3, [sp, #32]
 801129a:	42af      	cmp	r7, r5
 801129c:	4416      	add	r6, r2
 801129e:	441e      	add	r6, r3
 80112a0:	463b      	mov	r3, r7
 80112a2:	bfa8      	it	ge
 80112a4:	462b      	movge	r3, r5
 80112a6:	42b3      	cmp	r3, r6
 80112a8:	bfa8      	it	ge
 80112aa:	4633      	movge	r3, r6
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	bfc2      	ittt	gt
 80112b0:	1aed      	subgt	r5, r5, r3
 80112b2:	1af6      	subgt	r6, r6, r3
 80112b4:	1aff      	subgt	r7, r7, r3
 80112b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	dd16      	ble.n	80112ea <_strtod_l+0x73a>
 80112bc:	4641      	mov	r1, r8
 80112be:	461a      	mov	r2, r3
 80112c0:	9805      	ldr	r0, [sp, #20]
 80112c2:	f003 f91f 	bl	8014504 <__pow5mult>
 80112c6:	4680      	mov	r8, r0
 80112c8:	2800      	cmp	r0, #0
 80112ca:	d0b7      	beq.n	801123c <_strtod_l+0x68c>
 80112cc:	4601      	mov	r1, r0
 80112ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80112d0:	9805      	ldr	r0, [sp, #20]
 80112d2:	f003 f875 	bl	80143c0 <__multiply>
 80112d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80112d8:	2800      	cmp	r0, #0
 80112da:	f43f ae88 	beq.w	8010fee <_strtod_l+0x43e>
 80112de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80112e0:	9805      	ldr	r0, [sp, #20]
 80112e2:	f002 ff59 	bl	8014198 <_Bfree>
 80112e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80112ea:	2d00      	cmp	r5, #0
 80112ec:	dc1d      	bgt.n	801132a <_strtod_l+0x77a>
 80112ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	dd27      	ble.n	8011344 <_strtod_l+0x794>
 80112f4:	4649      	mov	r1, r9
 80112f6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80112f8:	9805      	ldr	r0, [sp, #20]
 80112fa:	f003 f903 	bl	8014504 <__pow5mult>
 80112fe:	4681      	mov	r9, r0
 8011300:	bb00      	cbnz	r0, 8011344 <_strtod_l+0x794>
 8011302:	f04f 0900 	mov.w	r9, #0
 8011306:	e672      	b.n	8010fee <_strtod_l+0x43e>
 8011308:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801130c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011310:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011314:	35e2      	adds	r5, #226	@ 0xe2
 8011316:	fa01 f305 	lsl.w	r3, r1, r5
 801131a:	9310      	str	r3, [sp, #64]	@ 0x40
 801131c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801131e:	e7ba      	b.n	8011296 <_strtod_l+0x6e6>
 8011320:	2300      	movs	r3, #0
 8011322:	9310      	str	r3, [sp, #64]	@ 0x40
 8011324:	2301      	movs	r3, #1
 8011326:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011328:	e7b5      	b.n	8011296 <_strtod_l+0x6e6>
 801132a:	462a      	mov	r2, r5
 801132c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801132e:	9805      	ldr	r0, [sp, #20]
 8011330:	f003 f942 	bl	80145b8 <__lshift>
 8011334:	901a      	str	r0, [sp, #104]	@ 0x68
 8011336:	2800      	cmp	r0, #0
 8011338:	d1d9      	bne.n	80112ee <_strtod_l+0x73e>
 801133a:	e658      	b.n	8010fee <_strtod_l+0x43e>
 801133c:	080163c8 	.word	0x080163c8
 8011340:	fffffc02 	.word	0xfffffc02
 8011344:	2e00      	cmp	r6, #0
 8011346:	dd07      	ble.n	8011358 <_strtod_l+0x7a8>
 8011348:	4649      	mov	r1, r9
 801134a:	4632      	mov	r2, r6
 801134c:	9805      	ldr	r0, [sp, #20]
 801134e:	f003 f933 	bl	80145b8 <__lshift>
 8011352:	4681      	mov	r9, r0
 8011354:	2800      	cmp	r0, #0
 8011356:	d0d4      	beq.n	8011302 <_strtod_l+0x752>
 8011358:	2f00      	cmp	r7, #0
 801135a:	dd08      	ble.n	801136e <_strtod_l+0x7be>
 801135c:	4641      	mov	r1, r8
 801135e:	463a      	mov	r2, r7
 8011360:	9805      	ldr	r0, [sp, #20]
 8011362:	f003 f929 	bl	80145b8 <__lshift>
 8011366:	4680      	mov	r8, r0
 8011368:	2800      	cmp	r0, #0
 801136a:	f43f ae40 	beq.w	8010fee <_strtod_l+0x43e>
 801136e:	464a      	mov	r2, r9
 8011370:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011372:	9805      	ldr	r0, [sp, #20]
 8011374:	f003 f9a8 	bl	80146c8 <__mdiff>
 8011378:	4604      	mov	r4, r0
 801137a:	2800      	cmp	r0, #0
 801137c:	f43f ae37 	beq.w	8010fee <_strtod_l+0x43e>
 8011380:	68c3      	ldr	r3, [r0, #12]
 8011382:	4641      	mov	r1, r8
 8011384:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011386:	2300      	movs	r3, #0
 8011388:	60c3      	str	r3, [r0, #12]
 801138a:	f003 f981 	bl	8014690 <__mcmp>
 801138e:	2800      	cmp	r0, #0
 8011390:	da3d      	bge.n	801140e <_strtod_l+0x85e>
 8011392:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011394:	ea53 030a 	orrs.w	r3, r3, sl
 8011398:	d163      	bne.n	8011462 <_strtod_l+0x8b2>
 801139a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d15f      	bne.n	8011462 <_strtod_l+0x8b2>
 80113a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80113a6:	0d1b      	lsrs	r3, r3, #20
 80113a8:	051b      	lsls	r3, r3, #20
 80113aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80113ae:	d958      	bls.n	8011462 <_strtod_l+0x8b2>
 80113b0:	6963      	ldr	r3, [r4, #20]
 80113b2:	b913      	cbnz	r3, 80113ba <_strtod_l+0x80a>
 80113b4:	6923      	ldr	r3, [r4, #16]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	dd53      	ble.n	8011462 <_strtod_l+0x8b2>
 80113ba:	4621      	mov	r1, r4
 80113bc:	2201      	movs	r2, #1
 80113be:	9805      	ldr	r0, [sp, #20]
 80113c0:	f003 f8fa 	bl	80145b8 <__lshift>
 80113c4:	4641      	mov	r1, r8
 80113c6:	4604      	mov	r4, r0
 80113c8:	f003 f962 	bl	8014690 <__mcmp>
 80113cc:	2800      	cmp	r0, #0
 80113ce:	dd48      	ble.n	8011462 <_strtod_l+0x8b2>
 80113d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80113d4:	9a08      	ldr	r2, [sp, #32]
 80113d6:	0d1b      	lsrs	r3, r3, #20
 80113d8:	051b      	lsls	r3, r3, #20
 80113da:	2a00      	cmp	r2, #0
 80113dc:	d062      	beq.n	80114a4 <_strtod_l+0x8f4>
 80113de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80113e2:	d85f      	bhi.n	80114a4 <_strtod_l+0x8f4>
 80113e4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80113e8:	f67f ae94 	bls.w	8011114 <_strtod_l+0x564>
 80113ec:	4650      	mov	r0, sl
 80113ee:	4659      	mov	r1, fp
 80113f0:	4ba3      	ldr	r3, [pc, #652]	@ (8011680 <_strtod_l+0xad0>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	f7ef f87a 	bl	80004ec <__aeabi_dmul>
 80113f8:	4ba2      	ldr	r3, [pc, #648]	@ (8011684 <_strtod_l+0xad4>)
 80113fa:	4682      	mov	sl, r0
 80113fc:	400b      	ands	r3, r1
 80113fe:	468b      	mov	fp, r1
 8011400:	2b00      	cmp	r3, #0
 8011402:	f47f adff 	bne.w	8011004 <_strtod_l+0x454>
 8011406:	2322      	movs	r3, #34	@ 0x22
 8011408:	9a05      	ldr	r2, [sp, #20]
 801140a:	6013      	str	r3, [r2, #0]
 801140c:	e5fa      	b.n	8011004 <_strtod_l+0x454>
 801140e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011412:	d165      	bne.n	80114e0 <_strtod_l+0x930>
 8011414:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801141a:	b35a      	cbz	r2, 8011474 <_strtod_l+0x8c4>
 801141c:	4a9a      	ldr	r2, [pc, #616]	@ (8011688 <_strtod_l+0xad8>)
 801141e:	4293      	cmp	r3, r2
 8011420:	d12b      	bne.n	801147a <_strtod_l+0x8ca>
 8011422:	9b08      	ldr	r3, [sp, #32]
 8011424:	4651      	mov	r1, sl
 8011426:	b303      	cbz	r3, 801146a <_strtod_l+0x8ba>
 8011428:	465a      	mov	r2, fp
 801142a:	4b96      	ldr	r3, [pc, #600]	@ (8011684 <_strtod_l+0xad4>)
 801142c:	4013      	ands	r3, r2
 801142e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011432:	f04f 32ff 	mov.w	r2, #4294967295
 8011436:	d81b      	bhi.n	8011470 <_strtod_l+0x8c0>
 8011438:	0d1b      	lsrs	r3, r3, #20
 801143a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801143e:	fa02 f303 	lsl.w	r3, r2, r3
 8011442:	4299      	cmp	r1, r3
 8011444:	d119      	bne.n	801147a <_strtod_l+0x8ca>
 8011446:	4b91      	ldr	r3, [pc, #580]	@ (801168c <_strtod_l+0xadc>)
 8011448:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801144a:	429a      	cmp	r2, r3
 801144c:	d102      	bne.n	8011454 <_strtod_l+0x8a4>
 801144e:	3101      	adds	r1, #1
 8011450:	f43f adcd 	beq.w	8010fee <_strtod_l+0x43e>
 8011454:	f04f 0a00 	mov.w	sl, #0
 8011458:	4b8a      	ldr	r3, [pc, #552]	@ (8011684 <_strtod_l+0xad4>)
 801145a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801145c:	401a      	ands	r2, r3
 801145e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011462:	9b08      	ldr	r3, [sp, #32]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d1c1      	bne.n	80113ec <_strtod_l+0x83c>
 8011468:	e5cc      	b.n	8011004 <_strtod_l+0x454>
 801146a:	f04f 33ff 	mov.w	r3, #4294967295
 801146e:	e7e8      	b.n	8011442 <_strtod_l+0x892>
 8011470:	4613      	mov	r3, r2
 8011472:	e7e6      	b.n	8011442 <_strtod_l+0x892>
 8011474:	ea53 030a 	orrs.w	r3, r3, sl
 8011478:	d0aa      	beq.n	80113d0 <_strtod_l+0x820>
 801147a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801147c:	b1db      	cbz	r3, 80114b6 <_strtod_l+0x906>
 801147e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011480:	4213      	tst	r3, r2
 8011482:	d0ee      	beq.n	8011462 <_strtod_l+0x8b2>
 8011484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011486:	4650      	mov	r0, sl
 8011488:	4659      	mov	r1, fp
 801148a:	9a08      	ldr	r2, [sp, #32]
 801148c:	b1bb      	cbz	r3, 80114be <_strtod_l+0x90e>
 801148e:	f7ff fb6b 	bl	8010b68 <sulp>
 8011492:	4602      	mov	r2, r0
 8011494:	460b      	mov	r3, r1
 8011496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801149a:	f7ee fe71 	bl	8000180 <__adddf3>
 801149e:	4682      	mov	sl, r0
 80114a0:	468b      	mov	fp, r1
 80114a2:	e7de      	b.n	8011462 <_strtod_l+0x8b2>
 80114a4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80114a8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80114ac:	f04f 3aff 	mov.w	sl, #4294967295
 80114b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80114b4:	e7d5      	b.n	8011462 <_strtod_l+0x8b2>
 80114b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80114b8:	ea13 0f0a 	tst.w	r3, sl
 80114bc:	e7e1      	b.n	8011482 <_strtod_l+0x8d2>
 80114be:	f7ff fb53 	bl	8010b68 <sulp>
 80114c2:	4602      	mov	r2, r0
 80114c4:	460b      	mov	r3, r1
 80114c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114ca:	f7ee fe57 	bl	800017c <__aeabi_dsub>
 80114ce:	2200      	movs	r2, #0
 80114d0:	2300      	movs	r3, #0
 80114d2:	4682      	mov	sl, r0
 80114d4:	468b      	mov	fp, r1
 80114d6:	f7ef fa71 	bl	80009bc <__aeabi_dcmpeq>
 80114da:	2800      	cmp	r0, #0
 80114dc:	d0c1      	beq.n	8011462 <_strtod_l+0x8b2>
 80114de:	e619      	b.n	8011114 <_strtod_l+0x564>
 80114e0:	4641      	mov	r1, r8
 80114e2:	4620      	mov	r0, r4
 80114e4:	f003 fa44 	bl	8014970 <__ratio>
 80114e8:	2200      	movs	r2, #0
 80114ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80114ee:	4606      	mov	r6, r0
 80114f0:	460f      	mov	r7, r1
 80114f2:	f7ef fa77 	bl	80009e4 <__aeabi_dcmple>
 80114f6:	2800      	cmp	r0, #0
 80114f8:	d06d      	beq.n	80115d6 <_strtod_l+0xa26>
 80114fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d178      	bne.n	80115f2 <_strtod_l+0xa42>
 8011500:	f1ba 0f00 	cmp.w	sl, #0
 8011504:	d156      	bne.n	80115b4 <_strtod_l+0xa04>
 8011506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801150c:	2b00      	cmp	r3, #0
 801150e:	d158      	bne.n	80115c2 <_strtod_l+0xa12>
 8011510:	2200      	movs	r2, #0
 8011512:	4630      	mov	r0, r6
 8011514:	4639      	mov	r1, r7
 8011516:	4b5e      	ldr	r3, [pc, #376]	@ (8011690 <_strtod_l+0xae0>)
 8011518:	f7ef fa5a 	bl	80009d0 <__aeabi_dcmplt>
 801151c:	2800      	cmp	r0, #0
 801151e:	d157      	bne.n	80115d0 <_strtod_l+0xa20>
 8011520:	4630      	mov	r0, r6
 8011522:	4639      	mov	r1, r7
 8011524:	2200      	movs	r2, #0
 8011526:	4b5b      	ldr	r3, [pc, #364]	@ (8011694 <_strtod_l+0xae4>)
 8011528:	f7ee ffe0 	bl	80004ec <__aeabi_dmul>
 801152c:	4606      	mov	r6, r0
 801152e:	460f      	mov	r7, r1
 8011530:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011534:	9606      	str	r6, [sp, #24]
 8011536:	9307      	str	r3, [sp, #28]
 8011538:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801153c:	4d51      	ldr	r5, [pc, #324]	@ (8011684 <_strtod_l+0xad4>)
 801153e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011542:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011544:	401d      	ands	r5, r3
 8011546:	4b54      	ldr	r3, [pc, #336]	@ (8011698 <_strtod_l+0xae8>)
 8011548:	429d      	cmp	r5, r3
 801154a:	f040 80ab 	bne.w	80116a4 <_strtod_l+0xaf4>
 801154e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011550:	4650      	mov	r0, sl
 8011552:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011556:	4659      	mov	r1, fp
 8011558:	f003 f94a 	bl	80147f0 <__ulp>
 801155c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011560:	f7ee ffc4 	bl	80004ec <__aeabi_dmul>
 8011564:	4652      	mov	r2, sl
 8011566:	465b      	mov	r3, fp
 8011568:	f7ee fe0a 	bl	8000180 <__adddf3>
 801156c:	460b      	mov	r3, r1
 801156e:	4945      	ldr	r1, [pc, #276]	@ (8011684 <_strtod_l+0xad4>)
 8011570:	4a4a      	ldr	r2, [pc, #296]	@ (801169c <_strtod_l+0xaec>)
 8011572:	4019      	ands	r1, r3
 8011574:	4291      	cmp	r1, r2
 8011576:	4682      	mov	sl, r0
 8011578:	d942      	bls.n	8011600 <_strtod_l+0xa50>
 801157a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801157c:	4b43      	ldr	r3, [pc, #268]	@ (801168c <_strtod_l+0xadc>)
 801157e:	429a      	cmp	r2, r3
 8011580:	d103      	bne.n	801158a <_strtod_l+0x9da>
 8011582:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011584:	3301      	adds	r3, #1
 8011586:	f43f ad32 	beq.w	8010fee <_strtod_l+0x43e>
 801158a:	f04f 3aff 	mov.w	sl, #4294967295
 801158e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 801168c <_strtod_l+0xadc>
 8011592:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011594:	9805      	ldr	r0, [sp, #20]
 8011596:	f002 fdff 	bl	8014198 <_Bfree>
 801159a:	4649      	mov	r1, r9
 801159c:	9805      	ldr	r0, [sp, #20]
 801159e:	f002 fdfb 	bl	8014198 <_Bfree>
 80115a2:	4641      	mov	r1, r8
 80115a4:	9805      	ldr	r0, [sp, #20]
 80115a6:	f002 fdf7 	bl	8014198 <_Bfree>
 80115aa:	4621      	mov	r1, r4
 80115ac:	9805      	ldr	r0, [sp, #20]
 80115ae:	f002 fdf3 	bl	8014198 <_Bfree>
 80115b2:	e61c      	b.n	80111ee <_strtod_l+0x63e>
 80115b4:	f1ba 0f01 	cmp.w	sl, #1
 80115b8:	d103      	bne.n	80115c2 <_strtod_l+0xa12>
 80115ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f43f ada9 	beq.w	8011114 <_strtod_l+0x564>
 80115c2:	2200      	movs	r2, #0
 80115c4:	4b36      	ldr	r3, [pc, #216]	@ (80116a0 <_strtod_l+0xaf0>)
 80115c6:	2600      	movs	r6, #0
 80115c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80115cc:	4f30      	ldr	r7, [pc, #192]	@ (8011690 <_strtod_l+0xae0>)
 80115ce:	e7b3      	b.n	8011538 <_strtod_l+0x988>
 80115d0:	2600      	movs	r6, #0
 80115d2:	4f30      	ldr	r7, [pc, #192]	@ (8011694 <_strtod_l+0xae4>)
 80115d4:	e7ac      	b.n	8011530 <_strtod_l+0x980>
 80115d6:	4630      	mov	r0, r6
 80115d8:	4639      	mov	r1, r7
 80115da:	4b2e      	ldr	r3, [pc, #184]	@ (8011694 <_strtod_l+0xae4>)
 80115dc:	2200      	movs	r2, #0
 80115de:	f7ee ff85 	bl	80004ec <__aeabi_dmul>
 80115e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115e4:	4606      	mov	r6, r0
 80115e6:	460f      	mov	r7, r1
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d0a1      	beq.n	8011530 <_strtod_l+0x980>
 80115ec:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80115f0:	e7a2      	b.n	8011538 <_strtod_l+0x988>
 80115f2:	2200      	movs	r2, #0
 80115f4:	4b26      	ldr	r3, [pc, #152]	@ (8011690 <_strtod_l+0xae0>)
 80115f6:	4616      	mov	r6, r2
 80115f8:	461f      	mov	r7, r3
 80115fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80115fe:	e79b      	b.n	8011538 <_strtod_l+0x988>
 8011600:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011604:	9b08      	ldr	r3, [sp, #32]
 8011606:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801160a:	2b00      	cmp	r3, #0
 801160c:	d1c1      	bne.n	8011592 <_strtod_l+0x9e2>
 801160e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011612:	0d1b      	lsrs	r3, r3, #20
 8011614:	051b      	lsls	r3, r3, #20
 8011616:	429d      	cmp	r5, r3
 8011618:	d1bb      	bne.n	8011592 <_strtod_l+0x9e2>
 801161a:	4630      	mov	r0, r6
 801161c:	4639      	mov	r1, r7
 801161e:	f7ef fb23 	bl	8000c68 <__aeabi_d2lz>
 8011622:	f7ee ff35 	bl	8000490 <__aeabi_l2d>
 8011626:	4602      	mov	r2, r0
 8011628:	460b      	mov	r3, r1
 801162a:	4630      	mov	r0, r6
 801162c:	4639      	mov	r1, r7
 801162e:	f7ee fda5 	bl	800017c <__aeabi_dsub>
 8011632:	460b      	mov	r3, r1
 8011634:	4602      	mov	r2, r0
 8011636:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801163a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801163e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011640:	ea46 060a 	orr.w	r6, r6, sl
 8011644:	431e      	orrs	r6, r3
 8011646:	d06a      	beq.n	801171e <_strtod_l+0xb6e>
 8011648:	a309      	add	r3, pc, #36	@ (adr r3, 8011670 <_strtod_l+0xac0>)
 801164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801164e:	f7ef f9bf 	bl	80009d0 <__aeabi_dcmplt>
 8011652:	2800      	cmp	r0, #0
 8011654:	f47f acd6 	bne.w	8011004 <_strtod_l+0x454>
 8011658:	a307      	add	r3, pc, #28	@ (adr r3, 8011678 <_strtod_l+0xac8>)
 801165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011662:	f7ef f9d3 	bl	8000a0c <__aeabi_dcmpgt>
 8011666:	2800      	cmp	r0, #0
 8011668:	d093      	beq.n	8011592 <_strtod_l+0x9e2>
 801166a:	e4cb      	b.n	8011004 <_strtod_l+0x454>
 801166c:	f3af 8000 	nop.w
 8011670:	94a03595 	.word	0x94a03595
 8011674:	3fdfffff 	.word	0x3fdfffff
 8011678:	35afe535 	.word	0x35afe535
 801167c:	3fe00000 	.word	0x3fe00000
 8011680:	39500000 	.word	0x39500000
 8011684:	7ff00000 	.word	0x7ff00000
 8011688:	000fffff 	.word	0x000fffff
 801168c:	7fefffff 	.word	0x7fefffff
 8011690:	3ff00000 	.word	0x3ff00000
 8011694:	3fe00000 	.word	0x3fe00000
 8011698:	7fe00000 	.word	0x7fe00000
 801169c:	7c9fffff 	.word	0x7c9fffff
 80116a0:	bff00000 	.word	0xbff00000
 80116a4:	9b08      	ldr	r3, [sp, #32]
 80116a6:	b323      	cbz	r3, 80116f2 <_strtod_l+0xb42>
 80116a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80116ac:	d821      	bhi.n	80116f2 <_strtod_l+0xb42>
 80116ae:	a328      	add	r3, pc, #160	@ (adr r3, 8011750 <_strtod_l+0xba0>)
 80116b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b4:	4630      	mov	r0, r6
 80116b6:	4639      	mov	r1, r7
 80116b8:	f7ef f994 	bl	80009e4 <__aeabi_dcmple>
 80116bc:	b1a0      	cbz	r0, 80116e8 <_strtod_l+0xb38>
 80116be:	4639      	mov	r1, r7
 80116c0:	4630      	mov	r0, r6
 80116c2:	f7ef f9eb 	bl	8000a9c <__aeabi_d2uiz>
 80116c6:	2801      	cmp	r0, #1
 80116c8:	bf38      	it	cc
 80116ca:	2001      	movcc	r0, #1
 80116cc:	f7ee fe94 	bl	80003f8 <__aeabi_ui2d>
 80116d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116d2:	4606      	mov	r6, r0
 80116d4:	460f      	mov	r7, r1
 80116d6:	b9fb      	cbnz	r3, 8011718 <_strtod_l+0xb68>
 80116d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80116dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80116de:	9315      	str	r3, [sp, #84]	@ 0x54
 80116e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80116e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80116e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80116ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80116ee:	1b5b      	subs	r3, r3, r5
 80116f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80116f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80116f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80116fa:	f003 f879 	bl	80147f0 <__ulp>
 80116fe:	4602      	mov	r2, r0
 8011700:	460b      	mov	r3, r1
 8011702:	4650      	mov	r0, sl
 8011704:	4659      	mov	r1, fp
 8011706:	f7ee fef1 	bl	80004ec <__aeabi_dmul>
 801170a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801170e:	f7ee fd37 	bl	8000180 <__adddf3>
 8011712:	4682      	mov	sl, r0
 8011714:	468b      	mov	fp, r1
 8011716:	e775      	b.n	8011604 <_strtod_l+0xa54>
 8011718:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801171c:	e7e0      	b.n	80116e0 <_strtod_l+0xb30>
 801171e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011758 <_strtod_l+0xba8>)
 8011720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011724:	f7ef f954 	bl	80009d0 <__aeabi_dcmplt>
 8011728:	e79d      	b.n	8011666 <_strtod_l+0xab6>
 801172a:	2300      	movs	r3, #0
 801172c:	930e      	str	r3, [sp, #56]	@ 0x38
 801172e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011730:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011732:	6013      	str	r3, [r2, #0]
 8011734:	f7ff ba79 	b.w	8010c2a <_strtod_l+0x7a>
 8011738:	2a65      	cmp	r2, #101	@ 0x65
 801173a:	f43f ab72 	beq.w	8010e22 <_strtod_l+0x272>
 801173e:	2a45      	cmp	r2, #69	@ 0x45
 8011740:	f43f ab6f 	beq.w	8010e22 <_strtod_l+0x272>
 8011744:	2301      	movs	r3, #1
 8011746:	f7ff bbaa 	b.w	8010e9e <_strtod_l+0x2ee>
 801174a:	bf00      	nop
 801174c:	f3af 8000 	nop.w
 8011750:	ffc00000 	.word	0xffc00000
 8011754:	41dfffff 	.word	0x41dfffff
 8011758:	94a03595 	.word	0x94a03595
 801175c:	3fcfffff 	.word	0x3fcfffff

08011760 <_strtod_r>:
 8011760:	4b01      	ldr	r3, [pc, #4]	@ (8011768 <_strtod_r+0x8>)
 8011762:	f7ff ba25 	b.w	8010bb0 <_strtod_l>
 8011766:	bf00      	nop
 8011768:	20000178 	.word	0x20000178

0801176c <strtod>:
 801176c:	460a      	mov	r2, r1
 801176e:	4601      	mov	r1, r0
 8011770:	4802      	ldr	r0, [pc, #8]	@ (801177c <strtod+0x10>)
 8011772:	4b03      	ldr	r3, [pc, #12]	@ (8011780 <strtod+0x14>)
 8011774:	6800      	ldr	r0, [r0, #0]
 8011776:	f7ff ba1b 	b.w	8010bb0 <_strtod_l>
 801177a:	bf00      	nop
 801177c:	200002e4 	.word	0x200002e4
 8011780:	20000178 	.word	0x20000178

08011784 <_strtol_l.isra.0>:
 8011784:	2b24      	cmp	r3, #36	@ 0x24
 8011786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801178a:	4686      	mov	lr, r0
 801178c:	4690      	mov	r8, r2
 801178e:	d801      	bhi.n	8011794 <_strtol_l.isra.0+0x10>
 8011790:	2b01      	cmp	r3, #1
 8011792:	d106      	bne.n	80117a2 <_strtol_l.isra.0+0x1e>
 8011794:	f001 fa6a 	bl	8012c6c <__errno>
 8011798:	2316      	movs	r3, #22
 801179a:	6003      	str	r3, [r0, #0]
 801179c:	2000      	movs	r0, #0
 801179e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a2:	460d      	mov	r5, r1
 80117a4:	4833      	ldr	r0, [pc, #204]	@ (8011874 <_strtol_l.isra.0+0xf0>)
 80117a6:	462a      	mov	r2, r5
 80117a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117ac:	5d06      	ldrb	r6, [r0, r4]
 80117ae:	f016 0608 	ands.w	r6, r6, #8
 80117b2:	d1f8      	bne.n	80117a6 <_strtol_l.isra.0+0x22>
 80117b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80117b6:	d110      	bne.n	80117da <_strtol_l.isra.0+0x56>
 80117b8:	2601      	movs	r6, #1
 80117ba:	782c      	ldrb	r4, [r5, #0]
 80117bc:	1c95      	adds	r5, r2, #2
 80117be:	f033 0210 	bics.w	r2, r3, #16
 80117c2:	d115      	bne.n	80117f0 <_strtol_l.isra.0+0x6c>
 80117c4:	2c30      	cmp	r4, #48	@ 0x30
 80117c6:	d10d      	bne.n	80117e4 <_strtol_l.isra.0+0x60>
 80117c8:	782a      	ldrb	r2, [r5, #0]
 80117ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80117ce:	2a58      	cmp	r2, #88	@ 0x58
 80117d0:	d108      	bne.n	80117e4 <_strtol_l.isra.0+0x60>
 80117d2:	786c      	ldrb	r4, [r5, #1]
 80117d4:	3502      	adds	r5, #2
 80117d6:	2310      	movs	r3, #16
 80117d8:	e00a      	b.n	80117f0 <_strtol_l.isra.0+0x6c>
 80117da:	2c2b      	cmp	r4, #43	@ 0x2b
 80117dc:	bf04      	itt	eq
 80117de:	782c      	ldrbeq	r4, [r5, #0]
 80117e0:	1c95      	addeq	r5, r2, #2
 80117e2:	e7ec      	b.n	80117be <_strtol_l.isra.0+0x3a>
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d1f6      	bne.n	80117d6 <_strtol_l.isra.0+0x52>
 80117e8:	2c30      	cmp	r4, #48	@ 0x30
 80117ea:	bf14      	ite	ne
 80117ec:	230a      	movne	r3, #10
 80117ee:	2308      	moveq	r3, #8
 80117f0:	2200      	movs	r2, #0
 80117f2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80117f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80117fa:	fbbc f9f3 	udiv	r9, ip, r3
 80117fe:	4610      	mov	r0, r2
 8011800:	fb03 ca19 	mls	sl, r3, r9, ip
 8011804:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011808:	2f09      	cmp	r7, #9
 801180a:	d80f      	bhi.n	801182c <_strtol_l.isra.0+0xa8>
 801180c:	463c      	mov	r4, r7
 801180e:	42a3      	cmp	r3, r4
 8011810:	dd1b      	ble.n	801184a <_strtol_l.isra.0+0xc6>
 8011812:	1c57      	adds	r7, r2, #1
 8011814:	d007      	beq.n	8011826 <_strtol_l.isra.0+0xa2>
 8011816:	4581      	cmp	r9, r0
 8011818:	d314      	bcc.n	8011844 <_strtol_l.isra.0+0xc0>
 801181a:	d101      	bne.n	8011820 <_strtol_l.isra.0+0x9c>
 801181c:	45a2      	cmp	sl, r4
 801181e:	db11      	blt.n	8011844 <_strtol_l.isra.0+0xc0>
 8011820:	2201      	movs	r2, #1
 8011822:	fb00 4003 	mla	r0, r0, r3, r4
 8011826:	f815 4b01 	ldrb.w	r4, [r5], #1
 801182a:	e7eb      	b.n	8011804 <_strtol_l.isra.0+0x80>
 801182c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011830:	2f19      	cmp	r7, #25
 8011832:	d801      	bhi.n	8011838 <_strtol_l.isra.0+0xb4>
 8011834:	3c37      	subs	r4, #55	@ 0x37
 8011836:	e7ea      	b.n	801180e <_strtol_l.isra.0+0x8a>
 8011838:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801183c:	2f19      	cmp	r7, #25
 801183e:	d804      	bhi.n	801184a <_strtol_l.isra.0+0xc6>
 8011840:	3c57      	subs	r4, #87	@ 0x57
 8011842:	e7e4      	b.n	801180e <_strtol_l.isra.0+0x8a>
 8011844:	f04f 32ff 	mov.w	r2, #4294967295
 8011848:	e7ed      	b.n	8011826 <_strtol_l.isra.0+0xa2>
 801184a:	1c53      	adds	r3, r2, #1
 801184c:	d108      	bne.n	8011860 <_strtol_l.isra.0+0xdc>
 801184e:	2322      	movs	r3, #34	@ 0x22
 8011850:	4660      	mov	r0, ip
 8011852:	f8ce 3000 	str.w	r3, [lr]
 8011856:	f1b8 0f00 	cmp.w	r8, #0
 801185a:	d0a0      	beq.n	801179e <_strtol_l.isra.0+0x1a>
 801185c:	1e69      	subs	r1, r5, #1
 801185e:	e006      	b.n	801186e <_strtol_l.isra.0+0xea>
 8011860:	b106      	cbz	r6, 8011864 <_strtol_l.isra.0+0xe0>
 8011862:	4240      	negs	r0, r0
 8011864:	f1b8 0f00 	cmp.w	r8, #0
 8011868:	d099      	beq.n	801179e <_strtol_l.isra.0+0x1a>
 801186a:	2a00      	cmp	r2, #0
 801186c:	d1f6      	bne.n	801185c <_strtol_l.isra.0+0xd8>
 801186e:	f8c8 1000 	str.w	r1, [r8]
 8011872:	e794      	b.n	801179e <_strtol_l.isra.0+0x1a>
 8011874:	080163f1 	.word	0x080163f1

08011878 <_strtol_r>:
 8011878:	f7ff bf84 	b.w	8011784 <_strtol_l.isra.0>

0801187c <strtol>:
 801187c:	4613      	mov	r3, r2
 801187e:	460a      	mov	r2, r1
 8011880:	4601      	mov	r1, r0
 8011882:	4802      	ldr	r0, [pc, #8]	@ (801188c <strtol+0x10>)
 8011884:	6800      	ldr	r0, [r0, #0]
 8011886:	f7ff bf7d 	b.w	8011784 <_strtol_l.isra.0>
 801188a:	bf00      	nop
 801188c:	200002e4 	.word	0x200002e4

08011890 <__cvt>:
 8011890:	2b00      	cmp	r3, #0
 8011892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011896:	461d      	mov	r5, r3
 8011898:	bfbb      	ittet	lt
 801189a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801189e:	461d      	movlt	r5, r3
 80118a0:	2300      	movge	r3, #0
 80118a2:	232d      	movlt	r3, #45	@ 0x2d
 80118a4:	b088      	sub	sp, #32
 80118a6:	4614      	mov	r4, r2
 80118a8:	bfb8      	it	lt
 80118aa:	4614      	movlt	r4, r2
 80118ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80118ae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80118b0:	7013      	strb	r3, [r2, #0]
 80118b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80118b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80118b8:	f023 0820 	bic.w	r8, r3, #32
 80118bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80118c0:	d005      	beq.n	80118ce <__cvt+0x3e>
 80118c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80118c6:	d100      	bne.n	80118ca <__cvt+0x3a>
 80118c8:	3601      	adds	r6, #1
 80118ca:	2302      	movs	r3, #2
 80118cc:	e000      	b.n	80118d0 <__cvt+0x40>
 80118ce:	2303      	movs	r3, #3
 80118d0:	aa07      	add	r2, sp, #28
 80118d2:	9204      	str	r2, [sp, #16]
 80118d4:	aa06      	add	r2, sp, #24
 80118d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80118da:	e9cd 3600 	strd	r3, r6, [sp]
 80118de:	4622      	mov	r2, r4
 80118e0:	462b      	mov	r3, r5
 80118e2:	f001 fab1 	bl	8012e48 <_dtoa_r>
 80118e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80118ea:	4607      	mov	r7, r0
 80118ec:	d119      	bne.n	8011922 <__cvt+0x92>
 80118ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80118f0:	07db      	lsls	r3, r3, #31
 80118f2:	d50e      	bpl.n	8011912 <__cvt+0x82>
 80118f4:	eb00 0906 	add.w	r9, r0, r6
 80118f8:	2200      	movs	r2, #0
 80118fa:	2300      	movs	r3, #0
 80118fc:	4620      	mov	r0, r4
 80118fe:	4629      	mov	r1, r5
 8011900:	f7ef f85c 	bl	80009bc <__aeabi_dcmpeq>
 8011904:	b108      	cbz	r0, 801190a <__cvt+0x7a>
 8011906:	f8cd 901c 	str.w	r9, [sp, #28]
 801190a:	2230      	movs	r2, #48	@ 0x30
 801190c:	9b07      	ldr	r3, [sp, #28]
 801190e:	454b      	cmp	r3, r9
 8011910:	d31e      	bcc.n	8011950 <__cvt+0xc0>
 8011912:	4638      	mov	r0, r7
 8011914:	9b07      	ldr	r3, [sp, #28]
 8011916:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011918:	1bdb      	subs	r3, r3, r7
 801191a:	6013      	str	r3, [r2, #0]
 801191c:	b008      	add	sp, #32
 801191e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011922:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011926:	eb00 0906 	add.w	r9, r0, r6
 801192a:	d1e5      	bne.n	80118f8 <__cvt+0x68>
 801192c:	7803      	ldrb	r3, [r0, #0]
 801192e:	2b30      	cmp	r3, #48	@ 0x30
 8011930:	d10a      	bne.n	8011948 <__cvt+0xb8>
 8011932:	2200      	movs	r2, #0
 8011934:	2300      	movs	r3, #0
 8011936:	4620      	mov	r0, r4
 8011938:	4629      	mov	r1, r5
 801193a:	f7ef f83f 	bl	80009bc <__aeabi_dcmpeq>
 801193e:	b918      	cbnz	r0, 8011948 <__cvt+0xb8>
 8011940:	f1c6 0601 	rsb	r6, r6, #1
 8011944:	f8ca 6000 	str.w	r6, [sl]
 8011948:	f8da 3000 	ldr.w	r3, [sl]
 801194c:	4499      	add	r9, r3
 801194e:	e7d3      	b.n	80118f8 <__cvt+0x68>
 8011950:	1c59      	adds	r1, r3, #1
 8011952:	9107      	str	r1, [sp, #28]
 8011954:	701a      	strb	r2, [r3, #0]
 8011956:	e7d9      	b.n	801190c <__cvt+0x7c>

08011958 <__exponent>:
 8011958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801195a:	2900      	cmp	r1, #0
 801195c:	bfb6      	itet	lt
 801195e:	232d      	movlt	r3, #45	@ 0x2d
 8011960:	232b      	movge	r3, #43	@ 0x2b
 8011962:	4249      	neglt	r1, r1
 8011964:	2909      	cmp	r1, #9
 8011966:	7002      	strb	r2, [r0, #0]
 8011968:	7043      	strb	r3, [r0, #1]
 801196a:	dd29      	ble.n	80119c0 <__exponent+0x68>
 801196c:	f10d 0307 	add.w	r3, sp, #7
 8011970:	461d      	mov	r5, r3
 8011972:	270a      	movs	r7, #10
 8011974:	fbb1 f6f7 	udiv	r6, r1, r7
 8011978:	461a      	mov	r2, r3
 801197a:	fb07 1416 	mls	r4, r7, r6, r1
 801197e:	3430      	adds	r4, #48	@ 0x30
 8011980:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011984:	460c      	mov	r4, r1
 8011986:	2c63      	cmp	r4, #99	@ 0x63
 8011988:	4631      	mov	r1, r6
 801198a:	f103 33ff 	add.w	r3, r3, #4294967295
 801198e:	dcf1      	bgt.n	8011974 <__exponent+0x1c>
 8011990:	3130      	adds	r1, #48	@ 0x30
 8011992:	1e94      	subs	r4, r2, #2
 8011994:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011998:	4623      	mov	r3, r4
 801199a:	1c41      	adds	r1, r0, #1
 801199c:	42ab      	cmp	r3, r5
 801199e:	d30a      	bcc.n	80119b6 <__exponent+0x5e>
 80119a0:	f10d 0309 	add.w	r3, sp, #9
 80119a4:	1a9b      	subs	r3, r3, r2
 80119a6:	42ac      	cmp	r4, r5
 80119a8:	bf88      	it	hi
 80119aa:	2300      	movhi	r3, #0
 80119ac:	3302      	adds	r3, #2
 80119ae:	4403      	add	r3, r0
 80119b0:	1a18      	subs	r0, r3, r0
 80119b2:	b003      	add	sp, #12
 80119b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80119ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80119be:	e7ed      	b.n	801199c <__exponent+0x44>
 80119c0:	2330      	movs	r3, #48	@ 0x30
 80119c2:	3130      	adds	r1, #48	@ 0x30
 80119c4:	7083      	strb	r3, [r0, #2]
 80119c6:	70c1      	strb	r1, [r0, #3]
 80119c8:	1d03      	adds	r3, r0, #4
 80119ca:	e7f1      	b.n	80119b0 <__exponent+0x58>

080119cc <_printf_float>:
 80119cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d0:	b091      	sub	sp, #68	@ 0x44
 80119d2:	460c      	mov	r4, r1
 80119d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80119d8:	4616      	mov	r6, r2
 80119da:	461f      	mov	r7, r3
 80119dc:	4605      	mov	r5, r0
 80119de:	f001 f8eb 	bl	8012bb8 <_localeconv_r>
 80119e2:	6803      	ldr	r3, [r0, #0]
 80119e4:	4618      	mov	r0, r3
 80119e6:	9308      	str	r3, [sp, #32]
 80119e8:	f7ee fbbc 	bl	8000164 <strlen>
 80119ec:	2300      	movs	r3, #0
 80119ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80119f0:	f8d8 3000 	ldr.w	r3, [r8]
 80119f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80119f6:	3307      	adds	r3, #7
 80119f8:	f023 0307 	bic.w	r3, r3, #7
 80119fc:	f103 0208 	add.w	r2, r3, #8
 8011a00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011a04:	f8d4 b000 	ldr.w	fp, [r4]
 8011a08:	f8c8 2000 	str.w	r2, [r8]
 8011a0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011a10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011a14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a16:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8011a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011a22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011a26:	4b9c      	ldr	r3, [pc, #624]	@ (8011c98 <_printf_float+0x2cc>)
 8011a28:	f7ee fffa 	bl	8000a20 <__aeabi_dcmpun>
 8011a2c:	bb70      	cbnz	r0, 8011a8c <_printf_float+0xc0>
 8011a2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011a32:	f04f 32ff 	mov.w	r2, #4294967295
 8011a36:	4b98      	ldr	r3, [pc, #608]	@ (8011c98 <_printf_float+0x2cc>)
 8011a38:	f7ee ffd4 	bl	80009e4 <__aeabi_dcmple>
 8011a3c:	bb30      	cbnz	r0, 8011a8c <_printf_float+0xc0>
 8011a3e:	2200      	movs	r2, #0
 8011a40:	2300      	movs	r3, #0
 8011a42:	4640      	mov	r0, r8
 8011a44:	4649      	mov	r1, r9
 8011a46:	f7ee ffc3 	bl	80009d0 <__aeabi_dcmplt>
 8011a4a:	b110      	cbz	r0, 8011a52 <_printf_float+0x86>
 8011a4c:	232d      	movs	r3, #45	@ 0x2d
 8011a4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a52:	4a92      	ldr	r2, [pc, #584]	@ (8011c9c <_printf_float+0x2d0>)
 8011a54:	4b92      	ldr	r3, [pc, #584]	@ (8011ca0 <_printf_float+0x2d4>)
 8011a56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011a5a:	bf8c      	ite	hi
 8011a5c:	4690      	movhi	r8, r2
 8011a5e:	4698      	movls	r8, r3
 8011a60:	2303      	movs	r3, #3
 8011a62:	f04f 0900 	mov.w	r9, #0
 8011a66:	6123      	str	r3, [r4, #16]
 8011a68:	f02b 0304 	bic.w	r3, fp, #4
 8011a6c:	6023      	str	r3, [r4, #0]
 8011a6e:	4633      	mov	r3, r6
 8011a70:	4621      	mov	r1, r4
 8011a72:	4628      	mov	r0, r5
 8011a74:	9700      	str	r7, [sp, #0]
 8011a76:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011a78:	f000 f9d4 	bl	8011e24 <_printf_common>
 8011a7c:	3001      	adds	r0, #1
 8011a7e:	f040 8090 	bne.w	8011ba2 <_printf_float+0x1d6>
 8011a82:	f04f 30ff 	mov.w	r0, #4294967295
 8011a86:	b011      	add	sp, #68	@ 0x44
 8011a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a8c:	4642      	mov	r2, r8
 8011a8e:	464b      	mov	r3, r9
 8011a90:	4640      	mov	r0, r8
 8011a92:	4649      	mov	r1, r9
 8011a94:	f7ee ffc4 	bl	8000a20 <__aeabi_dcmpun>
 8011a98:	b148      	cbz	r0, 8011aae <_printf_float+0xe2>
 8011a9a:	464b      	mov	r3, r9
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	bfb8      	it	lt
 8011aa0:	232d      	movlt	r3, #45	@ 0x2d
 8011aa2:	4a80      	ldr	r2, [pc, #512]	@ (8011ca4 <_printf_float+0x2d8>)
 8011aa4:	bfb8      	it	lt
 8011aa6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8011ca8 <_printf_float+0x2dc>)
 8011aac:	e7d3      	b.n	8011a56 <_printf_float+0x8a>
 8011aae:	6863      	ldr	r3, [r4, #4]
 8011ab0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8011ab4:	1c5a      	adds	r2, r3, #1
 8011ab6:	d13f      	bne.n	8011b38 <_printf_float+0x16c>
 8011ab8:	2306      	movs	r3, #6
 8011aba:	6063      	str	r3, [r4, #4]
 8011abc:	2200      	movs	r2, #0
 8011abe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8011ac2:	6023      	str	r3, [r4, #0]
 8011ac4:	9206      	str	r2, [sp, #24]
 8011ac6:	aa0e      	add	r2, sp, #56	@ 0x38
 8011ac8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8011acc:	aa0d      	add	r2, sp, #52	@ 0x34
 8011ace:	9203      	str	r2, [sp, #12]
 8011ad0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8011ad4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011ad8:	6863      	ldr	r3, [r4, #4]
 8011ada:	4642      	mov	r2, r8
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	4628      	mov	r0, r5
 8011ae0:	464b      	mov	r3, r9
 8011ae2:	910a      	str	r1, [sp, #40]	@ 0x28
 8011ae4:	f7ff fed4 	bl	8011890 <__cvt>
 8011ae8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011aea:	4680      	mov	r8, r0
 8011aec:	2947      	cmp	r1, #71	@ 0x47
 8011aee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011af0:	d128      	bne.n	8011b44 <_printf_float+0x178>
 8011af2:	1cc8      	adds	r0, r1, #3
 8011af4:	db02      	blt.n	8011afc <_printf_float+0x130>
 8011af6:	6863      	ldr	r3, [r4, #4]
 8011af8:	4299      	cmp	r1, r3
 8011afa:	dd40      	ble.n	8011b7e <_printf_float+0x1b2>
 8011afc:	f1aa 0a02 	sub.w	sl, sl, #2
 8011b00:	fa5f fa8a 	uxtb.w	sl, sl
 8011b04:	4652      	mov	r2, sl
 8011b06:	3901      	subs	r1, #1
 8011b08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011b0c:	910d      	str	r1, [sp, #52]	@ 0x34
 8011b0e:	f7ff ff23 	bl	8011958 <__exponent>
 8011b12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b14:	4681      	mov	r9, r0
 8011b16:	1813      	adds	r3, r2, r0
 8011b18:	2a01      	cmp	r2, #1
 8011b1a:	6123      	str	r3, [r4, #16]
 8011b1c:	dc02      	bgt.n	8011b24 <_printf_float+0x158>
 8011b1e:	6822      	ldr	r2, [r4, #0]
 8011b20:	07d2      	lsls	r2, r2, #31
 8011b22:	d501      	bpl.n	8011b28 <_printf_float+0x15c>
 8011b24:	3301      	adds	r3, #1
 8011b26:	6123      	str	r3, [r4, #16]
 8011b28:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d09e      	beq.n	8011a6e <_printf_float+0xa2>
 8011b30:	232d      	movs	r3, #45	@ 0x2d
 8011b32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b36:	e79a      	b.n	8011a6e <_printf_float+0xa2>
 8011b38:	2947      	cmp	r1, #71	@ 0x47
 8011b3a:	d1bf      	bne.n	8011abc <_printf_float+0xf0>
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d1bd      	bne.n	8011abc <_printf_float+0xf0>
 8011b40:	2301      	movs	r3, #1
 8011b42:	e7ba      	b.n	8011aba <_printf_float+0xee>
 8011b44:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011b48:	d9dc      	bls.n	8011b04 <_printf_float+0x138>
 8011b4a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011b4e:	d118      	bne.n	8011b82 <_printf_float+0x1b6>
 8011b50:	2900      	cmp	r1, #0
 8011b52:	6863      	ldr	r3, [r4, #4]
 8011b54:	dd0b      	ble.n	8011b6e <_printf_float+0x1a2>
 8011b56:	6121      	str	r1, [r4, #16]
 8011b58:	b913      	cbnz	r3, 8011b60 <_printf_float+0x194>
 8011b5a:	6822      	ldr	r2, [r4, #0]
 8011b5c:	07d0      	lsls	r0, r2, #31
 8011b5e:	d502      	bpl.n	8011b66 <_printf_float+0x19a>
 8011b60:	3301      	adds	r3, #1
 8011b62:	440b      	add	r3, r1
 8011b64:	6123      	str	r3, [r4, #16]
 8011b66:	f04f 0900 	mov.w	r9, #0
 8011b6a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011b6c:	e7dc      	b.n	8011b28 <_printf_float+0x15c>
 8011b6e:	b913      	cbnz	r3, 8011b76 <_printf_float+0x1aa>
 8011b70:	6822      	ldr	r2, [r4, #0]
 8011b72:	07d2      	lsls	r2, r2, #31
 8011b74:	d501      	bpl.n	8011b7a <_printf_float+0x1ae>
 8011b76:	3302      	adds	r3, #2
 8011b78:	e7f4      	b.n	8011b64 <_printf_float+0x198>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e7f2      	b.n	8011b64 <_printf_float+0x198>
 8011b7e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b84:	4299      	cmp	r1, r3
 8011b86:	db05      	blt.n	8011b94 <_printf_float+0x1c8>
 8011b88:	6823      	ldr	r3, [r4, #0]
 8011b8a:	6121      	str	r1, [r4, #16]
 8011b8c:	07d8      	lsls	r0, r3, #31
 8011b8e:	d5ea      	bpl.n	8011b66 <_printf_float+0x19a>
 8011b90:	1c4b      	adds	r3, r1, #1
 8011b92:	e7e7      	b.n	8011b64 <_printf_float+0x198>
 8011b94:	2900      	cmp	r1, #0
 8011b96:	bfcc      	ite	gt
 8011b98:	2201      	movgt	r2, #1
 8011b9a:	f1c1 0202 	rsble	r2, r1, #2
 8011b9e:	4413      	add	r3, r2
 8011ba0:	e7e0      	b.n	8011b64 <_printf_float+0x198>
 8011ba2:	6823      	ldr	r3, [r4, #0]
 8011ba4:	055a      	lsls	r2, r3, #21
 8011ba6:	d407      	bmi.n	8011bb8 <_printf_float+0x1ec>
 8011ba8:	6923      	ldr	r3, [r4, #16]
 8011baa:	4642      	mov	r2, r8
 8011bac:	4631      	mov	r1, r6
 8011bae:	4628      	mov	r0, r5
 8011bb0:	47b8      	blx	r7
 8011bb2:	3001      	adds	r0, #1
 8011bb4:	d12b      	bne.n	8011c0e <_printf_float+0x242>
 8011bb6:	e764      	b.n	8011a82 <_printf_float+0xb6>
 8011bb8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011bbc:	f240 80dc 	bls.w	8011d78 <_printf_float+0x3ac>
 8011bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	f7ee fef8 	bl	80009bc <__aeabi_dcmpeq>
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	d033      	beq.n	8011c38 <_printf_float+0x26c>
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	4631      	mov	r1, r6
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	4a35      	ldr	r2, [pc, #212]	@ (8011cac <_printf_float+0x2e0>)
 8011bd8:	47b8      	blx	r7
 8011bda:	3001      	adds	r0, #1
 8011bdc:	f43f af51 	beq.w	8011a82 <_printf_float+0xb6>
 8011be0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8011be4:	4543      	cmp	r3, r8
 8011be6:	db02      	blt.n	8011bee <_printf_float+0x222>
 8011be8:	6823      	ldr	r3, [r4, #0]
 8011bea:	07d8      	lsls	r0, r3, #31
 8011bec:	d50f      	bpl.n	8011c0e <_printf_float+0x242>
 8011bee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011bf2:	4631      	mov	r1, r6
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	47b8      	blx	r7
 8011bf8:	3001      	adds	r0, #1
 8011bfa:	f43f af42 	beq.w	8011a82 <_printf_float+0xb6>
 8011bfe:	f04f 0900 	mov.w	r9, #0
 8011c02:	f108 38ff 	add.w	r8, r8, #4294967295
 8011c06:	f104 0a1a 	add.w	sl, r4, #26
 8011c0a:	45c8      	cmp	r8, r9
 8011c0c:	dc09      	bgt.n	8011c22 <_printf_float+0x256>
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	079b      	lsls	r3, r3, #30
 8011c12:	f100 8102 	bmi.w	8011e1a <_printf_float+0x44e>
 8011c16:	68e0      	ldr	r0, [r4, #12]
 8011c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c1a:	4298      	cmp	r0, r3
 8011c1c:	bfb8      	it	lt
 8011c1e:	4618      	movlt	r0, r3
 8011c20:	e731      	b.n	8011a86 <_printf_float+0xba>
 8011c22:	2301      	movs	r3, #1
 8011c24:	4652      	mov	r2, sl
 8011c26:	4631      	mov	r1, r6
 8011c28:	4628      	mov	r0, r5
 8011c2a:	47b8      	blx	r7
 8011c2c:	3001      	adds	r0, #1
 8011c2e:	f43f af28 	beq.w	8011a82 <_printf_float+0xb6>
 8011c32:	f109 0901 	add.w	r9, r9, #1
 8011c36:	e7e8      	b.n	8011c0a <_printf_float+0x23e>
 8011c38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	dc38      	bgt.n	8011cb0 <_printf_float+0x2e4>
 8011c3e:	2301      	movs	r3, #1
 8011c40:	4631      	mov	r1, r6
 8011c42:	4628      	mov	r0, r5
 8011c44:	4a19      	ldr	r2, [pc, #100]	@ (8011cac <_printf_float+0x2e0>)
 8011c46:	47b8      	blx	r7
 8011c48:	3001      	adds	r0, #1
 8011c4a:	f43f af1a 	beq.w	8011a82 <_printf_float+0xb6>
 8011c4e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8011c52:	ea59 0303 	orrs.w	r3, r9, r3
 8011c56:	d102      	bne.n	8011c5e <_printf_float+0x292>
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	07d9      	lsls	r1, r3, #31
 8011c5c:	d5d7      	bpl.n	8011c0e <_printf_float+0x242>
 8011c5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011c62:	4631      	mov	r1, r6
 8011c64:	4628      	mov	r0, r5
 8011c66:	47b8      	blx	r7
 8011c68:	3001      	adds	r0, #1
 8011c6a:	f43f af0a 	beq.w	8011a82 <_printf_float+0xb6>
 8011c6e:	f04f 0a00 	mov.w	sl, #0
 8011c72:	f104 0b1a 	add.w	fp, r4, #26
 8011c76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c78:	425b      	negs	r3, r3
 8011c7a:	4553      	cmp	r3, sl
 8011c7c:	dc01      	bgt.n	8011c82 <_printf_float+0x2b6>
 8011c7e:	464b      	mov	r3, r9
 8011c80:	e793      	b.n	8011baa <_printf_float+0x1de>
 8011c82:	2301      	movs	r3, #1
 8011c84:	465a      	mov	r2, fp
 8011c86:	4631      	mov	r1, r6
 8011c88:	4628      	mov	r0, r5
 8011c8a:	47b8      	blx	r7
 8011c8c:	3001      	adds	r0, #1
 8011c8e:	f43f aef8 	beq.w	8011a82 <_printf_float+0xb6>
 8011c92:	f10a 0a01 	add.w	sl, sl, #1
 8011c96:	e7ee      	b.n	8011c76 <_printf_float+0x2aa>
 8011c98:	7fefffff 	.word	0x7fefffff
 8011c9c:	080161ab 	.word	0x080161ab
 8011ca0:	080161a7 	.word	0x080161a7
 8011ca4:	080161b3 	.word	0x080161b3
 8011ca8:	080161af 	.word	0x080161af
 8011cac:	080161b7 	.word	0x080161b7
 8011cb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011cb2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8011cb6:	4553      	cmp	r3, sl
 8011cb8:	bfa8      	it	ge
 8011cba:	4653      	movge	r3, sl
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	4699      	mov	r9, r3
 8011cc0:	dc36      	bgt.n	8011d30 <_printf_float+0x364>
 8011cc2:	f04f 0b00 	mov.w	fp, #0
 8011cc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011cca:	f104 021a 	add.w	r2, r4, #26
 8011cce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011cd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cd2:	eba3 0309 	sub.w	r3, r3, r9
 8011cd6:	455b      	cmp	r3, fp
 8011cd8:	dc31      	bgt.n	8011d3e <_printf_float+0x372>
 8011cda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011cdc:	459a      	cmp	sl, r3
 8011cde:	dc3a      	bgt.n	8011d56 <_printf_float+0x38a>
 8011ce0:	6823      	ldr	r3, [r4, #0]
 8011ce2:	07da      	lsls	r2, r3, #31
 8011ce4:	d437      	bmi.n	8011d56 <_printf_float+0x38a>
 8011ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ce8:	ebaa 0903 	sub.w	r9, sl, r3
 8011cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cee:	ebaa 0303 	sub.w	r3, sl, r3
 8011cf2:	4599      	cmp	r9, r3
 8011cf4:	bfa8      	it	ge
 8011cf6:	4699      	movge	r9, r3
 8011cf8:	f1b9 0f00 	cmp.w	r9, #0
 8011cfc:	dc33      	bgt.n	8011d66 <_printf_float+0x39a>
 8011cfe:	f04f 0800 	mov.w	r8, #0
 8011d02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d06:	f104 0b1a 	add.w	fp, r4, #26
 8011d0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011d0c:	ebaa 0303 	sub.w	r3, sl, r3
 8011d10:	eba3 0309 	sub.w	r3, r3, r9
 8011d14:	4543      	cmp	r3, r8
 8011d16:	f77f af7a 	ble.w	8011c0e <_printf_float+0x242>
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	465a      	mov	r2, fp
 8011d1e:	4631      	mov	r1, r6
 8011d20:	4628      	mov	r0, r5
 8011d22:	47b8      	blx	r7
 8011d24:	3001      	adds	r0, #1
 8011d26:	f43f aeac 	beq.w	8011a82 <_printf_float+0xb6>
 8011d2a:	f108 0801 	add.w	r8, r8, #1
 8011d2e:	e7ec      	b.n	8011d0a <_printf_float+0x33e>
 8011d30:	4642      	mov	r2, r8
 8011d32:	4631      	mov	r1, r6
 8011d34:	4628      	mov	r0, r5
 8011d36:	47b8      	blx	r7
 8011d38:	3001      	adds	r0, #1
 8011d3a:	d1c2      	bne.n	8011cc2 <_printf_float+0x2f6>
 8011d3c:	e6a1      	b.n	8011a82 <_printf_float+0xb6>
 8011d3e:	2301      	movs	r3, #1
 8011d40:	4631      	mov	r1, r6
 8011d42:	4628      	mov	r0, r5
 8011d44:	920a      	str	r2, [sp, #40]	@ 0x28
 8011d46:	47b8      	blx	r7
 8011d48:	3001      	adds	r0, #1
 8011d4a:	f43f ae9a 	beq.w	8011a82 <_printf_float+0xb6>
 8011d4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d50:	f10b 0b01 	add.w	fp, fp, #1
 8011d54:	e7bb      	b.n	8011cce <_printf_float+0x302>
 8011d56:	4631      	mov	r1, r6
 8011d58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	47b8      	blx	r7
 8011d60:	3001      	adds	r0, #1
 8011d62:	d1c0      	bne.n	8011ce6 <_printf_float+0x31a>
 8011d64:	e68d      	b.n	8011a82 <_printf_float+0xb6>
 8011d66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d68:	464b      	mov	r3, r9
 8011d6a:	4631      	mov	r1, r6
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	4442      	add	r2, r8
 8011d70:	47b8      	blx	r7
 8011d72:	3001      	adds	r0, #1
 8011d74:	d1c3      	bne.n	8011cfe <_printf_float+0x332>
 8011d76:	e684      	b.n	8011a82 <_printf_float+0xb6>
 8011d78:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8011d7c:	f1ba 0f01 	cmp.w	sl, #1
 8011d80:	dc01      	bgt.n	8011d86 <_printf_float+0x3ba>
 8011d82:	07db      	lsls	r3, r3, #31
 8011d84:	d536      	bpl.n	8011df4 <_printf_float+0x428>
 8011d86:	2301      	movs	r3, #1
 8011d88:	4642      	mov	r2, r8
 8011d8a:	4631      	mov	r1, r6
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	47b8      	blx	r7
 8011d90:	3001      	adds	r0, #1
 8011d92:	f43f ae76 	beq.w	8011a82 <_printf_float+0xb6>
 8011d96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011d9a:	4631      	mov	r1, r6
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	47b8      	blx	r7
 8011da0:	3001      	adds	r0, #1
 8011da2:	f43f ae6e 	beq.w	8011a82 <_printf_float+0xb6>
 8011da6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011daa:	2200      	movs	r2, #0
 8011dac:	2300      	movs	r3, #0
 8011dae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011db2:	f7ee fe03 	bl	80009bc <__aeabi_dcmpeq>
 8011db6:	b9c0      	cbnz	r0, 8011dea <_printf_float+0x41e>
 8011db8:	4653      	mov	r3, sl
 8011dba:	f108 0201 	add.w	r2, r8, #1
 8011dbe:	4631      	mov	r1, r6
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	47b8      	blx	r7
 8011dc4:	3001      	adds	r0, #1
 8011dc6:	d10c      	bne.n	8011de2 <_printf_float+0x416>
 8011dc8:	e65b      	b.n	8011a82 <_printf_float+0xb6>
 8011dca:	2301      	movs	r3, #1
 8011dcc:	465a      	mov	r2, fp
 8011dce:	4631      	mov	r1, r6
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	47b8      	blx	r7
 8011dd4:	3001      	adds	r0, #1
 8011dd6:	f43f ae54 	beq.w	8011a82 <_printf_float+0xb6>
 8011dda:	f108 0801 	add.w	r8, r8, #1
 8011dde:	45d0      	cmp	r8, sl
 8011de0:	dbf3      	blt.n	8011dca <_printf_float+0x3fe>
 8011de2:	464b      	mov	r3, r9
 8011de4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011de8:	e6e0      	b.n	8011bac <_printf_float+0x1e0>
 8011dea:	f04f 0800 	mov.w	r8, #0
 8011dee:	f104 0b1a 	add.w	fp, r4, #26
 8011df2:	e7f4      	b.n	8011dde <_printf_float+0x412>
 8011df4:	2301      	movs	r3, #1
 8011df6:	4642      	mov	r2, r8
 8011df8:	e7e1      	b.n	8011dbe <_printf_float+0x3f2>
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	464a      	mov	r2, r9
 8011dfe:	4631      	mov	r1, r6
 8011e00:	4628      	mov	r0, r5
 8011e02:	47b8      	blx	r7
 8011e04:	3001      	adds	r0, #1
 8011e06:	f43f ae3c 	beq.w	8011a82 <_printf_float+0xb6>
 8011e0a:	f108 0801 	add.w	r8, r8, #1
 8011e0e:	68e3      	ldr	r3, [r4, #12]
 8011e10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011e12:	1a5b      	subs	r3, r3, r1
 8011e14:	4543      	cmp	r3, r8
 8011e16:	dcf0      	bgt.n	8011dfa <_printf_float+0x42e>
 8011e18:	e6fd      	b.n	8011c16 <_printf_float+0x24a>
 8011e1a:	f04f 0800 	mov.w	r8, #0
 8011e1e:	f104 0919 	add.w	r9, r4, #25
 8011e22:	e7f4      	b.n	8011e0e <_printf_float+0x442>

08011e24 <_printf_common>:
 8011e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e28:	4616      	mov	r6, r2
 8011e2a:	4698      	mov	r8, r3
 8011e2c:	688a      	ldr	r2, [r1, #8]
 8011e2e:	690b      	ldr	r3, [r1, #16]
 8011e30:	4607      	mov	r7, r0
 8011e32:	4293      	cmp	r3, r2
 8011e34:	bfb8      	it	lt
 8011e36:	4613      	movlt	r3, r2
 8011e38:	6033      	str	r3, [r6, #0]
 8011e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011e3e:	460c      	mov	r4, r1
 8011e40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011e44:	b10a      	cbz	r2, 8011e4a <_printf_common+0x26>
 8011e46:	3301      	adds	r3, #1
 8011e48:	6033      	str	r3, [r6, #0]
 8011e4a:	6823      	ldr	r3, [r4, #0]
 8011e4c:	0699      	lsls	r1, r3, #26
 8011e4e:	bf42      	ittt	mi
 8011e50:	6833      	ldrmi	r3, [r6, #0]
 8011e52:	3302      	addmi	r3, #2
 8011e54:	6033      	strmi	r3, [r6, #0]
 8011e56:	6825      	ldr	r5, [r4, #0]
 8011e58:	f015 0506 	ands.w	r5, r5, #6
 8011e5c:	d106      	bne.n	8011e6c <_printf_common+0x48>
 8011e5e:	f104 0a19 	add.w	sl, r4, #25
 8011e62:	68e3      	ldr	r3, [r4, #12]
 8011e64:	6832      	ldr	r2, [r6, #0]
 8011e66:	1a9b      	subs	r3, r3, r2
 8011e68:	42ab      	cmp	r3, r5
 8011e6a:	dc2b      	bgt.n	8011ec4 <_printf_common+0xa0>
 8011e6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011e70:	6822      	ldr	r2, [r4, #0]
 8011e72:	3b00      	subs	r3, #0
 8011e74:	bf18      	it	ne
 8011e76:	2301      	movne	r3, #1
 8011e78:	0692      	lsls	r2, r2, #26
 8011e7a:	d430      	bmi.n	8011ede <_printf_common+0xba>
 8011e7c:	4641      	mov	r1, r8
 8011e7e:	4638      	mov	r0, r7
 8011e80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011e84:	47c8      	blx	r9
 8011e86:	3001      	adds	r0, #1
 8011e88:	d023      	beq.n	8011ed2 <_printf_common+0xae>
 8011e8a:	6823      	ldr	r3, [r4, #0]
 8011e8c:	6922      	ldr	r2, [r4, #16]
 8011e8e:	f003 0306 	and.w	r3, r3, #6
 8011e92:	2b04      	cmp	r3, #4
 8011e94:	bf14      	ite	ne
 8011e96:	2500      	movne	r5, #0
 8011e98:	6833      	ldreq	r3, [r6, #0]
 8011e9a:	f04f 0600 	mov.w	r6, #0
 8011e9e:	bf08      	it	eq
 8011ea0:	68e5      	ldreq	r5, [r4, #12]
 8011ea2:	f104 041a 	add.w	r4, r4, #26
 8011ea6:	bf08      	it	eq
 8011ea8:	1aed      	subeq	r5, r5, r3
 8011eaa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8011eae:	bf08      	it	eq
 8011eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	bfc4      	itt	gt
 8011eb8:	1a9b      	subgt	r3, r3, r2
 8011eba:	18ed      	addgt	r5, r5, r3
 8011ebc:	42b5      	cmp	r5, r6
 8011ebe:	d11a      	bne.n	8011ef6 <_printf_common+0xd2>
 8011ec0:	2000      	movs	r0, #0
 8011ec2:	e008      	b.n	8011ed6 <_printf_common+0xb2>
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	4652      	mov	r2, sl
 8011ec8:	4641      	mov	r1, r8
 8011eca:	4638      	mov	r0, r7
 8011ecc:	47c8      	blx	r9
 8011ece:	3001      	adds	r0, #1
 8011ed0:	d103      	bne.n	8011eda <_printf_common+0xb6>
 8011ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eda:	3501      	adds	r5, #1
 8011edc:	e7c1      	b.n	8011e62 <_printf_common+0x3e>
 8011ede:	2030      	movs	r0, #48	@ 0x30
 8011ee0:	18e1      	adds	r1, r4, r3
 8011ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011ee6:	1c5a      	adds	r2, r3, #1
 8011ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011eec:	4422      	add	r2, r4
 8011eee:	3302      	adds	r3, #2
 8011ef0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011ef4:	e7c2      	b.n	8011e7c <_printf_common+0x58>
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	4622      	mov	r2, r4
 8011efa:	4641      	mov	r1, r8
 8011efc:	4638      	mov	r0, r7
 8011efe:	47c8      	blx	r9
 8011f00:	3001      	adds	r0, #1
 8011f02:	d0e6      	beq.n	8011ed2 <_printf_common+0xae>
 8011f04:	3601      	adds	r6, #1
 8011f06:	e7d9      	b.n	8011ebc <_printf_common+0x98>

08011f08 <_printf_i>:
 8011f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f0c:	7e0f      	ldrb	r7, [r1, #24]
 8011f0e:	4691      	mov	r9, r2
 8011f10:	2f78      	cmp	r7, #120	@ 0x78
 8011f12:	4680      	mov	r8, r0
 8011f14:	460c      	mov	r4, r1
 8011f16:	469a      	mov	sl, r3
 8011f18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011f1e:	d807      	bhi.n	8011f30 <_printf_i+0x28>
 8011f20:	2f62      	cmp	r7, #98	@ 0x62
 8011f22:	d80a      	bhi.n	8011f3a <_printf_i+0x32>
 8011f24:	2f00      	cmp	r7, #0
 8011f26:	f000 80d1 	beq.w	80120cc <_printf_i+0x1c4>
 8011f2a:	2f58      	cmp	r7, #88	@ 0x58
 8011f2c:	f000 80b8 	beq.w	80120a0 <_printf_i+0x198>
 8011f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011f38:	e03a      	b.n	8011fb0 <_printf_i+0xa8>
 8011f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011f3e:	2b15      	cmp	r3, #21
 8011f40:	d8f6      	bhi.n	8011f30 <_printf_i+0x28>
 8011f42:	a101      	add	r1, pc, #4	@ (adr r1, 8011f48 <_printf_i+0x40>)
 8011f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f48:	08011fa1 	.word	0x08011fa1
 8011f4c:	08011fb5 	.word	0x08011fb5
 8011f50:	08011f31 	.word	0x08011f31
 8011f54:	08011f31 	.word	0x08011f31
 8011f58:	08011f31 	.word	0x08011f31
 8011f5c:	08011f31 	.word	0x08011f31
 8011f60:	08011fb5 	.word	0x08011fb5
 8011f64:	08011f31 	.word	0x08011f31
 8011f68:	08011f31 	.word	0x08011f31
 8011f6c:	08011f31 	.word	0x08011f31
 8011f70:	08011f31 	.word	0x08011f31
 8011f74:	080120b3 	.word	0x080120b3
 8011f78:	08011fdf 	.word	0x08011fdf
 8011f7c:	0801206d 	.word	0x0801206d
 8011f80:	08011f31 	.word	0x08011f31
 8011f84:	08011f31 	.word	0x08011f31
 8011f88:	080120d5 	.word	0x080120d5
 8011f8c:	08011f31 	.word	0x08011f31
 8011f90:	08011fdf 	.word	0x08011fdf
 8011f94:	08011f31 	.word	0x08011f31
 8011f98:	08011f31 	.word	0x08011f31
 8011f9c:	08012075 	.word	0x08012075
 8011fa0:	6833      	ldr	r3, [r6, #0]
 8011fa2:	1d1a      	adds	r2, r3, #4
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	6032      	str	r2, [r6, #0]
 8011fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	e09c      	b.n	80120ee <_printf_i+0x1e6>
 8011fb4:	6833      	ldr	r3, [r6, #0]
 8011fb6:	6820      	ldr	r0, [r4, #0]
 8011fb8:	1d19      	adds	r1, r3, #4
 8011fba:	6031      	str	r1, [r6, #0]
 8011fbc:	0606      	lsls	r6, r0, #24
 8011fbe:	d501      	bpl.n	8011fc4 <_printf_i+0xbc>
 8011fc0:	681d      	ldr	r5, [r3, #0]
 8011fc2:	e003      	b.n	8011fcc <_printf_i+0xc4>
 8011fc4:	0645      	lsls	r5, r0, #25
 8011fc6:	d5fb      	bpl.n	8011fc0 <_printf_i+0xb8>
 8011fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011fcc:	2d00      	cmp	r5, #0
 8011fce:	da03      	bge.n	8011fd8 <_printf_i+0xd0>
 8011fd0:	232d      	movs	r3, #45	@ 0x2d
 8011fd2:	426d      	negs	r5, r5
 8011fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011fd8:	230a      	movs	r3, #10
 8011fda:	4858      	ldr	r0, [pc, #352]	@ (801213c <_printf_i+0x234>)
 8011fdc:	e011      	b.n	8012002 <_printf_i+0xfa>
 8011fde:	6821      	ldr	r1, [r4, #0]
 8011fe0:	6833      	ldr	r3, [r6, #0]
 8011fe2:	0608      	lsls	r0, r1, #24
 8011fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8011fe8:	d402      	bmi.n	8011ff0 <_printf_i+0xe8>
 8011fea:	0649      	lsls	r1, r1, #25
 8011fec:	bf48      	it	mi
 8011fee:	b2ad      	uxthmi	r5, r5
 8011ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8011ff2:	6033      	str	r3, [r6, #0]
 8011ff4:	bf14      	ite	ne
 8011ff6:	230a      	movne	r3, #10
 8011ff8:	2308      	moveq	r3, #8
 8011ffa:	4850      	ldr	r0, [pc, #320]	@ (801213c <_printf_i+0x234>)
 8011ffc:	2100      	movs	r1, #0
 8011ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012002:	6866      	ldr	r6, [r4, #4]
 8012004:	2e00      	cmp	r6, #0
 8012006:	60a6      	str	r6, [r4, #8]
 8012008:	db05      	blt.n	8012016 <_printf_i+0x10e>
 801200a:	6821      	ldr	r1, [r4, #0]
 801200c:	432e      	orrs	r6, r5
 801200e:	f021 0104 	bic.w	r1, r1, #4
 8012012:	6021      	str	r1, [r4, #0]
 8012014:	d04b      	beq.n	80120ae <_printf_i+0x1a6>
 8012016:	4616      	mov	r6, r2
 8012018:	fbb5 f1f3 	udiv	r1, r5, r3
 801201c:	fb03 5711 	mls	r7, r3, r1, r5
 8012020:	5dc7      	ldrb	r7, [r0, r7]
 8012022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012026:	462f      	mov	r7, r5
 8012028:	42bb      	cmp	r3, r7
 801202a:	460d      	mov	r5, r1
 801202c:	d9f4      	bls.n	8012018 <_printf_i+0x110>
 801202e:	2b08      	cmp	r3, #8
 8012030:	d10b      	bne.n	801204a <_printf_i+0x142>
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	07df      	lsls	r7, r3, #31
 8012036:	d508      	bpl.n	801204a <_printf_i+0x142>
 8012038:	6923      	ldr	r3, [r4, #16]
 801203a:	6861      	ldr	r1, [r4, #4]
 801203c:	4299      	cmp	r1, r3
 801203e:	bfde      	ittt	le
 8012040:	2330      	movle	r3, #48	@ 0x30
 8012042:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012046:	f106 36ff 	addle.w	r6, r6, #4294967295
 801204a:	1b92      	subs	r2, r2, r6
 801204c:	6122      	str	r2, [r4, #16]
 801204e:	464b      	mov	r3, r9
 8012050:	4621      	mov	r1, r4
 8012052:	4640      	mov	r0, r8
 8012054:	f8cd a000 	str.w	sl, [sp]
 8012058:	aa03      	add	r2, sp, #12
 801205a:	f7ff fee3 	bl	8011e24 <_printf_common>
 801205e:	3001      	adds	r0, #1
 8012060:	d14a      	bne.n	80120f8 <_printf_i+0x1f0>
 8012062:	f04f 30ff 	mov.w	r0, #4294967295
 8012066:	b004      	add	sp, #16
 8012068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801206c:	6823      	ldr	r3, [r4, #0]
 801206e:	f043 0320 	orr.w	r3, r3, #32
 8012072:	6023      	str	r3, [r4, #0]
 8012074:	2778      	movs	r7, #120	@ 0x78
 8012076:	4832      	ldr	r0, [pc, #200]	@ (8012140 <_printf_i+0x238>)
 8012078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801207c:	6823      	ldr	r3, [r4, #0]
 801207e:	6831      	ldr	r1, [r6, #0]
 8012080:	061f      	lsls	r7, r3, #24
 8012082:	f851 5b04 	ldr.w	r5, [r1], #4
 8012086:	d402      	bmi.n	801208e <_printf_i+0x186>
 8012088:	065f      	lsls	r7, r3, #25
 801208a:	bf48      	it	mi
 801208c:	b2ad      	uxthmi	r5, r5
 801208e:	6031      	str	r1, [r6, #0]
 8012090:	07d9      	lsls	r1, r3, #31
 8012092:	bf44      	itt	mi
 8012094:	f043 0320 	orrmi.w	r3, r3, #32
 8012098:	6023      	strmi	r3, [r4, #0]
 801209a:	b11d      	cbz	r5, 80120a4 <_printf_i+0x19c>
 801209c:	2310      	movs	r3, #16
 801209e:	e7ad      	b.n	8011ffc <_printf_i+0xf4>
 80120a0:	4826      	ldr	r0, [pc, #152]	@ (801213c <_printf_i+0x234>)
 80120a2:	e7e9      	b.n	8012078 <_printf_i+0x170>
 80120a4:	6823      	ldr	r3, [r4, #0]
 80120a6:	f023 0320 	bic.w	r3, r3, #32
 80120aa:	6023      	str	r3, [r4, #0]
 80120ac:	e7f6      	b.n	801209c <_printf_i+0x194>
 80120ae:	4616      	mov	r6, r2
 80120b0:	e7bd      	b.n	801202e <_printf_i+0x126>
 80120b2:	6833      	ldr	r3, [r6, #0]
 80120b4:	6825      	ldr	r5, [r4, #0]
 80120b6:	1d18      	adds	r0, r3, #4
 80120b8:	6961      	ldr	r1, [r4, #20]
 80120ba:	6030      	str	r0, [r6, #0]
 80120bc:	062e      	lsls	r6, r5, #24
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	d501      	bpl.n	80120c6 <_printf_i+0x1be>
 80120c2:	6019      	str	r1, [r3, #0]
 80120c4:	e002      	b.n	80120cc <_printf_i+0x1c4>
 80120c6:	0668      	lsls	r0, r5, #25
 80120c8:	d5fb      	bpl.n	80120c2 <_printf_i+0x1ba>
 80120ca:	8019      	strh	r1, [r3, #0]
 80120cc:	2300      	movs	r3, #0
 80120ce:	4616      	mov	r6, r2
 80120d0:	6123      	str	r3, [r4, #16]
 80120d2:	e7bc      	b.n	801204e <_printf_i+0x146>
 80120d4:	6833      	ldr	r3, [r6, #0]
 80120d6:	2100      	movs	r1, #0
 80120d8:	1d1a      	adds	r2, r3, #4
 80120da:	6032      	str	r2, [r6, #0]
 80120dc:	681e      	ldr	r6, [r3, #0]
 80120de:	6862      	ldr	r2, [r4, #4]
 80120e0:	4630      	mov	r0, r6
 80120e2:	f000 fdf8 	bl	8012cd6 <memchr>
 80120e6:	b108      	cbz	r0, 80120ec <_printf_i+0x1e4>
 80120e8:	1b80      	subs	r0, r0, r6
 80120ea:	6060      	str	r0, [r4, #4]
 80120ec:	6863      	ldr	r3, [r4, #4]
 80120ee:	6123      	str	r3, [r4, #16]
 80120f0:	2300      	movs	r3, #0
 80120f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80120f6:	e7aa      	b.n	801204e <_printf_i+0x146>
 80120f8:	4632      	mov	r2, r6
 80120fa:	4649      	mov	r1, r9
 80120fc:	4640      	mov	r0, r8
 80120fe:	6923      	ldr	r3, [r4, #16]
 8012100:	47d0      	blx	sl
 8012102:	3001      	adds	r0, #1
 8012104:	d0ad      	beq.n	8012062 <_printf_i+0x15a>
 8012106:	6823      	ldr	r3, [r4, #0]
 8012108:	079b      	lsls	r3, r3, #30
 801210a:	d413      	bmi.n	8012134 <_printf_i+0x22c>
 801210c:	68e0      	ldr	r0, [r4, #12]
 801210e:	9b03      	ldr	r3, [sp, #12]
 8012110:	4298      	cmp	r0, r3
 8012112:	bfb8      	it	lt
 8012114:	4618      	movlt	r0, r3
 8012116:	e7a6      	b.n	8012066 <_printf_i+0x15e>
 8012118:	2301      	movs	r3, #1
 801211a:	4632      	mov	r2, r6
 801211c:	4649      	mov	r1, r9
 801211e:	4640      	mov	r0, r8
 8012120:	47d0      	blx	sl
 8012122:	3001      	adds	r0, #1
 8012124:	d09d      	beq.n	8012062 <_printf_i+0x15a>
 8012126:	3501      	adds	r5, #1
 8012128:	68e3      	ldr	r3, [r4, #12]
 801212a:	9903      	ldr	r1, [sp, #12]
 801212c:	1a5b      	subs	r3, r3, r1
 801212e:	42ab      	cmp	r3, r5
 8012130:	dcf2      	bgt.n	8012118 <_printf_i+0x210>
 8012132:	e7eb      	b.n	801210c <_printf_i+0x204>
 8012134:	2500      	movs	r5, #0
 8012136:	f104 0619 	add.w	r6, r4, #25
 801213a:	e7f5      	b.n	8012128 <_printf_i+0x220>
 801213c:	080161b9 	.word	0x080161b9
 8012140:	080161ca 	.word	0x080161ca

08012144 <_scanf_float>:
 8012144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012148:	b087      	sub	sp, #28
 801214a:	9303      	str	r3, [sp, #12]
 801214c:	688b      	ldr	r3, [r1, #8]
 801214e:	4691      	mov	r9, r2
 8012150:	1e5a      	subs	r2, r3, #1
 8012152:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012156:	bf82      	ittt	hi
 8012158:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801215c:	eb03 0b05 	addhi.w	fp, r3, r5
 8012160:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012164:	460a      	mov	r2, r1
 8012166:	f04f 0500 	mov.w	r5, #0
 801216a:	bf88      	it	hi
 801216c:	608b      	strhi	r3, [r1, #8]
 801216e:	680b      	ldr	r3, [r1, #0]
 8012170:	4680      	mov	r8, r0
 8012172:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8012176:	f842 3b1c 	str.w	r3, [r2], #28
 801217a:	460c      	mov	r4, r1
 801217c:	bf98      	it	ls
 801217e:	f04f 0b00 	movls.w	fp, #0
 8012182:	4616      	mov	r6, r2
 8012184:	46aa      	mov	sl, r5
 8012186:	462f      	mov	r7, r5
 8012188:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801218c:	9201      	str	r2, [sp, #4]
 801218e:	9502      	str	r5, [sp, #8]
 8012190:	68a2      	ldr	r2, [r4, #8]
 8012192:	b15a      	cbz	r2, 80121ac <_scanf_float+0x68>
 8012194:	f8d9 3000 	ldr.w	r3, [r9]
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	2b4e      	cmp	r3, #78	@ 0x4e
 801219c:	d862      	bhi.n	8012264 <_scanf_float+0x120>
 801219e:	2b40      	cmp	r3, #64	@ 0x40
 80121a0:	d83a      	bhi.n	8012218 <_scanf_float+0xd4>
 80121a2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80121a6:	b2c8      	uxtb	r0, r1
 80121a8:	280e      	cmp	r0, #14
 80121aa:	d938      	bls.n	801221e <_scanf_float+0xda>
 80121ac:	b11f      	cbz	r7, 80121b6 <_scanf_float+0x72>
 80121ae:	6823      	ldr	r3, [r4, #0]
 80121b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121ba:	f1ba 0f01 	cmp.w	sl, #1
 80121be:	f200 8114 	bhi.w	80123ea <_scanf_float+0x2a6>
 80121c2:	9b01      	ldr	r3, [sp, #4]
 80121c4:	429e      	cmp	r6, r3
 80121c6:	f200 8105 	bhi.w	80123d4 <_scanf_float+0x290>
 80121ca:	2001      	movs	r0, #1
 80121cc:	b007      	add	sp, #28
 80121ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80121d6:	2a0d      	cmp	r2, #13
 80121d8:	d8e8      	bhi.n	80121ac <_scanf_float+0x68>
 80121da:	a101      	add	r1, pc, #4	@ (adr r1, 80121e0 <_scanf_float+0x9c>)
 80121dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80121e0:	08012329 	.word	0x08012329
 80121e4:	080121ad 	.word	0x080121ad
 80121e8:	080121ad 	.word	0x080121ad
 80121ec:	080121ad 	.word	0x080121ad
 80121f0:	08012385 	.word	0x08012385
 80121f4:	0801235f 	.word	0x0801235f
 80121f8:	080121ad 	.word	0x080121ad
 80121fc:	080121ad 	.word	0x080121ad
 8012200:	08012337 	.word	0x08012337
 8012204:	080121ad 	.word	0x080121ad
 8012208:	080121ad 	.word	0x080121ad
 801220c:	080121ad 	.word	0x080121ad
 8012210:	080121ad 	.word	0x080121ad
 8012214:	080122f3 	.word	0x080122f3
 8012218:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801221c:	e7db      	b.n	80121d6 <_scanf_float+0x92>
 801221e:	290e      	cmp	r1, #14
 8012220:	d8c4      	bhi.n	80121ac <_scanf_float+0x68>
 8012222:	a001      	add	r0, pc, #4	@ (adr r0, 8012228 <_scanf_float+0xe4>)
 8012224:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012228:	080122e3 	.word	0x080122e3
 801222c:	080121ad 	.word	0x080121ad
 8012230:	080122e3 	.word	0x080122e3
 8012234:	08012373 	.word	0x08012373
 8012238:	080121ad 	.word	0x080121ad
 801223c:	08012285 	.word	0x08012285
 8012240:	080122c9 	.word	0x080122c9
 8012244:	080122c9 	.word	0x080122c9
 8012248:	080122c9 	.word	0x080122c9
 801224c:	080122c9 	.word	0x080122c9
 8012250:	080122c9 	.word	0x080122c9
 8012254:	080122c9 	.word	0x080122c9
 8012258:	080122c9 	.word	0x080122c9
 801225c:	080122c9 	.word	0x080122c9
 8012260:	080122c9 	.word	0x080122c9
 8012264:	2b6e      	cmp	r3, #110	@ 0x6e
 8012266:	d809      	bhi.n	801227c <_scanf_float+0x138>
 8012268:	2b60      	cmp	r3, #96	@ 0x60
 801226a:	d8b2      	bhi.n	80121d2 <_scanf_float+0x8e>
 801226c:	2b54      	cmp	r3, #84	@ 0x54
 801226e:	d07b      	beq.n	8012368 <_scanf_float+0x224>
 8012270:	2b59      	cmp	r3, #89	@ 0x59
 8012272:	d19b      	bne.n	80121ac <_scanf_float+0x68>
 8012274:	2d07      	cmp	r5, #7
 8012276:	d199      	bne.n	80121ac <_scanf_float+0x68>
 8012278:	2508      	movs	r5, #8
 801227a:	e02f      	b.n	80122dc <_scanf_float+0x198>
 801227c:	2b74      	cmp	r3, #116	@ 0x74
 801227e:	d073      	beq.n	8012368 <_scanf_float+0x224>
 8012280:	2b79      	cmp	r3, #121	@ 0x79
 8012282:	e7f6      	b.n	8012272 <_scanf_float+0x12e>
 8012284:	6821      	ldr	r1, [r4, #0]
 8012286:	05c8      	lsls	r0, r1, #23
 8012288:	d51e      	bpl.n	80122c8 <_scanf_float+0x184>
 801228a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801228e:	6021      	str	r1, [r4, #0]
 8012290:	3701      	adds	r7, #1
 8012292:	f1bb 0f00 	cmp.w	fp, #0
 8012296:	d003      	beq.n	80122a0 <_scanf_float+0x15c>
 8012298:	3201      	adds	r2, #1
 801229a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801229e:	60a2      	str	r2, [r4, #8]
 80122a0:	68a3      	ldr	r3, [r4, #8]
 80122a2:	3b01      	subs	r3, #1
 80122a4:	60a3      	str	r3, [r4, #8]
 80122a6:	6923      	ldr	r3, [r4, #16]
 80122a8:	3301      	adds	r3, #1
 80122aa:	6123      	str	r3, [r4, #16]
 80122ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80122b0:	3b01      	subs	r3, #1
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f8c9 3004 	str.w	r3, [r9, #4]
 80122b8:	f340 8083 	ble.w	80123c2 <_scanf_float+0x27e>
 80122bc:	f8d9 3000 	ldr.w	r3, [r9]
 80122c0:	3301      	adds	r3, #1
 80122c2:	f8c9 3000 	str.w	r3, [r9]
 80122c6:	e763      	b.n	8012190 <_scanf_float+0x4c>
 80122c8:	eb1a 0105 	adds.w	r1, sl, r5
 80122cc:	f47f af6e 	bne.w	80121ac <_scanf_float+0x68>
 80122d0:	460d      	mov	r5, r1
 80122d2:	468a      	mov	sl, r1
 80122d4:	6822      	ldr	r2, [r4, #0]
 80122d6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80122da:	6022      	str	r2, [r4, #0]
 80122dc:	f806 3b01 	strb.w	r3, [r6], #1
 80122e0:	e7de      	b.n	80122a0 <_scanf_float+0x15c>
 80122e2:	6822      	ldr	r2, [r4, #0]
 80122e4:	0610      	lsls	r0, r2, #24
 80122e6:	f57f af61 	bpl.w	80121ac <_scanf_float+0x68>
 80122ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80122ee:	6022      	str	r2, [r4, #0]
 80122f0:	e7f4      	b.n	80122dc <_scanf_float+0x198>
 80122f2:	f1ba 0f00 	cmp.w	sl, #0
 80122f6:	d10c      	bne.n	8012312 <_scanf_float+0x1ce>
 80122f8:	b977      	cbnz	r7, 8012318 <_scanf_float+0x1d4>
 80122fa:	6822      	ldr	r2, [r4, #0]
 80122fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8012300:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8012304:	d108      	bne.n	8012318 <_scanf_float+0x1d4>
 8012306:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801230a:	f04f 0a01 	mov.w	sl, #1
 801230e:	6022      	str	r2, [r4, #0]
 8012310:	e7e4      	b.n	80122dc <_scanf_float+0x198>
 8012312:	f1ba 0f02 	cmp.w	sl, #2
 8012316:	d051      	beq.n	80123bc <_scanf_float+0x278>
 8012318:	2d01      	cmp	r5, #1
 801231a:	d002      	beq.n	8012322 <_scanf_float+0x1de>
 801231c:	2d04      	cmp	r5, #4
 801231e:	f47f af45 	bne.w	80121ac <_scanf_float+0x68>
 8012322:	3501      	adds	r5, #1
 8012324:	b2ed      	uxtb	r5, r5
 8012326:	e7d9      	b.n	80122dc <_scanf_float+0x198>
 8012328:	f1ba 0f01 	cmp.w	sl, #1
 801232c:	f47f af3e 	bne.w	80121ac <_scanf_float+0x68>
 8012330:	f04f 0a02 	mov.w	sl, #2
 8012334:	e7d2      	b.n	80122dc <_scanf_float+0x198>
 8012336:	b975      	cbnz	r5, 8012356 <_scanf_float+0x212>
 8012338:	2f00      	cmp	r7, #0
 801233a:	f47f af38 	bne.w	80121ae <_scanf_float+0x6a>
 801233e:	6822      	ldr	r2, [r4, #0]
 8012340:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8012344:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8012348:	f040 80ff 	bne.w	801254a <_scanf_float+0x406>
 801234c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8012350:	2501      	movs	r5, #1
 8012352:	6022      	str	r2, [r4, #0]
 8012354:	e7c2      	b.n	80122dc <_scanf_float+0x198>
 8012356:	2d03      	cmp	r5, #3
 8012358:	d0e3      	beq.n	8012322 <_scanf_float+0x1de>
 801235a:	2d05      	cmp	r5, #5
 801235c:	e7df      	b.n	801231e <_scanf_float+0x1da>
 801235e:	2d02      	cmp	r5, #2
 8012360:	f47f af24 	bne.w	80121ac <_scanf_float+0x68>
 8012364:	2503      	movs	r5, #3
 8012366:	e7b9      	b.n	80122dc <_scanf_float+0x198>
 8012368:	2d06      	cmp	r5, #6
 801236a:	f47f af1f 	bne.w	80121ac <_scanf_float+0x68>
 801236e:	2507      	movs	r5, #7
 8012370:	e7b4      	b.n	80122dc <_scanf_float+0x198>
 8012372:	6822      	ldr	r2, [r4, #0]
 8012374:	0591      	lsls	r1, r2, #22
 8012376:	f57f af19 	bpl.w	80121ac <_scanf_float+0x68>
 801237a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801237e:	6022      	str	r2, [r4, #0]
 8012380:	9702      	str	r7, [sp, #8]
 8012382:	e7ab      	b.n	80122dc <_scanf_float+0x198>
 8012384:	6822      	ldr	r2, [r4, #0]
 8012386:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801238a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801238e:	d005      	beq.n	801239c <_scanf_float+0x258>
 8012390:	0550      	lsls	r0, r2, #21
 8012392:	f57f af0b 	bpl.w	80121ac <_scanf_float+0x68>
 8012396:	2f00      	cmp	r7, #0
 8012398:	f000 80d7 	beq.w	801254a <_scanf_float+0x406>
 801239c:	0591      	lsls	r1, r2, #22
 801239e:	bf58      	it	pl
 80123a0:	9902      	ldrpl	r1, [sp, #8]
 80123a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80123a6:	bf58      	it	pl
 80123a8:	1a79      	subpl	r1, r7, r1
 80123aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80123ae:	f04f 0700 	mov.w	r7, #0
 80123b2:	bf58      	it	pl
 80123b4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80123b8:	6022      	str	r2, [r4, #0]
 80123ba:	e78f      	b.n	80122dc <_scanf_float+0x198>
 80123bc:	f04f 0a03 	mov.w	sl, #3
 80123c0:	e78c      	b.n	80122dc <_scanf_float+0x198>
 80123c2:	4649      	mov	r1, r9
 80123c4:	4640      	mov	r0, r8
 80123c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80123ca:	4798      	blx	r3
 80123cc:	2800      	cmp	r0, #0
 80123ce:	f43f aedf 	beq.w	8012190 <_scanf_float+0x4c>
 80123d2:	e6eb      	b.n	80121ac <_scanf_float+0x68>
 80123d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80123d8:	464a      	mov	r2, r9
 80123da:	4640      	mov	r0, r8
 80123dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80123e0:	4798      	blx	r3
 80123e2:	6923      	ldr	r3, [r4, #16]
 80123e4:	3b01      	subs	r3, #1
 80123e6:	6123      	str	r3, [r4, #16]
 80123e8:	e6eb      	b.n	80121c2 <_scanf_float+0x7e>
 80123ea:	1e6b      	subs	r3, r5, #1
 80123ec:	2b06      	cmp	r3, #6
 80123ee:	d824      	bhi.n	801243a <_scanf_float+0x2f6>
 80123f0:	2d02      	cmp	r5, #2
 80123f2:	d836      	bhi.n	8012462 <_scanf_float+0x31e>
 80123f4:	9b01      	ldr	r3, [sp, #4]
 80123f6:	429e      	cmp	r6, r3
 80123f8:	f67f aee7 	bls.w	80121ca <_scanf_float+0x86>
 80123fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012400:	464a      	mov	r2, r9
 8012402:	4640      	mov	r0, r8
 8012404:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012408:	4798      	blx	r3
 801240a:	6923      	ldr	r3, [r4, #16]
 801240c:	3b01      	subs	r3, #1
 801240e:	6123      	str	r3, [r4, #16]
 8012410:	e7f0      	b.n	80123f4 <_scanf_float+0x2b0>
 8012412:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012416:	464a      	mov	r2, r9
 8012418:	4640      	mov	r0, r8
 801241a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801241e:	4798      	blx	r3
 8012420:	6923      	ldr	r3, [r4, #16]
 8012422:	3b01      	subs	r3, #1
 8012424:	6123      	str	r3, [r4, #16]
 8012426:	f10a 3aff 	add.w	sl, sl, #4294967295
 801242a:	fa5f fa8a 	uxtb.w	sl, sl
 801242e:	f1ba 0f02 	cmp.w	sl, #2
 8012432:	d1ee      	bne.n	8012412 <_scanf_float+0x2ce>
 8012434:	3d03      	subs	r5, #3
 8012436:	b2ed      	uxtb	r5, r5
 8012438:	1b76      	subs	r6, r6, r5
 801243a:	6823      	ldr	r3, [r4, #0]
 801243c:	05da      	lsls	r2, r3, #23
 801243e:	d530      	bpl.n	80124a2 <_scanf_float+0x35e>
 8012440:	055b      	lsls	r3, r3, #21
 8012442:	d511      	bpl.n	8012468 <_scanf_float+0x324>
 8012444:	9b01      	ldr	r3, [sp, #4]
 8012446:	429e      	cmp	r6, r3
 8012448:	f67f aebf 	bls.w	80121ca <_scanf_float+0x86>
 801244c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012450:	464a      	mov	r2, r9
 8012452:	4640      	mov	r0, r8
 8012454:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012458:	4798      	blx	r3
 801245a:	6923      	ldr	r3, [r4, #16]
 801245c:	3b01      	subs	r3, #1
 801245e:	6123      	str	r3, [r4, #16]
 8012460:	e7f0      	b.n	8012444 <_scanf_float+0x300>
 8012462:	46aa      	mov	sl, r5
 8012464:	46b3      	mov	fp, r6
 8012466:	e7de      	b.n	8012426 <_scanf_float+0x2e2>
 8012468:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801246c:	6923      	ldr	r3, [r4, #16]
 801246e:	2965      	cmp	r1, #101	@ 0x65
 8012470:	f103 33ff 	add.w	r3, r3, #4294967295
 8012474:	f106 35ff 	add.w	r5, r6, #4294967295
 8012478:	6123      	str	r3, [r4, #16]
 801247a:	d00c      	beq.n	8012496 <_scanf_float+0x352>
 801247c:	2945      	cmp	r1, #69	@ 0x45
 801247e:	d00a      	beq.n	8012496 <_scanf_float+0x352>
 8012480:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012484:	464a      	mov	r2, r9
 8012486:	4640      	mov	r0, r8
 8012488:	4798      	blx	r3
 801248a:	6923      	ldr	r3, [r4, #16]
 801248c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012490:	3b01      	subs	r3, #1
 8012492:	1eb5      	subs	r5, r6, #2
 8012494:	6123      	str	r3, [r4, #16]
 8012496:	464a      	mov	r2, r9
 8012498:	4640      	mov	r0, r8
 801249a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801249e:	4798      	blx	r3
 80124a0:	462e      	mov	r6, r5
 80124a2:	6822      	ldr	r2, [r4, #0]
 80124a4:	f012 0210 	ands.w	r2, r2, #16
 80124a8:	d001      	beq.n	80124ae <_scanf_float+0x36a>
 80124aa:	2000      	movs	r0, #0
 80124ac:	e68e      	b.n	80121cc <_scanf_float+0x88>
 80124ae:	7032      	strb	r2, [r6, #0]
 80124b0:	6823      	ldr	r3, [r4, #0]
 80124b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80124b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80124ba:	d125      	bne.n	8012508 <_scanf_float+0x3c4>
 80124bc:	9b02      	ldr	r3, [sp, #8]
 80124be:	429f      	cmp	r7, r3
 80124c0:	d00a      	beq.n	80124d8 <_scanf_float+0x394>
 80124c2:	1bda      	subs	r2, r3, r7
 80124c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80124c8:	429e      	cmp	r6, r3
 80124ca:	bf28      	it	cs
 80124cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80124d0:	4630      	mov	r0, r6
 80124d2:	491f      	ldr	r1, [pc, #124]	@ (8012550 <_scanf_float+0x40c>)
 80124d4:	f000 f9ba 	bl	801284c <siprintf>
 80124d8:	2200      	movs	r2, #0
 80124da:	4640      	mov	r0, r8
 80124dc:	9901      	ldr	r1, [sp, #4]
 80124de:	f7ff f93f 	bl	8011760 <_strtod_r>
 80124e2:	9b03      	ldr	r3, [sp, #12]
 80124e4:	6825      	ldr	r5, [r4, #0]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	f015 0f02 	tst.w	r5, #2
 80124ec:	4606      	mov	r6, r0
 80124ee:	460f      	mov	r7, r1
 80124f0:	f103 0204 	add.w	r2, r3, #4
 80124f4:	d015      	beq.n	8012522 <_scanf_float+0x3de>
 80124f6:	9903      	ldr	r1, [sp, #12]
 80124f8:	600a      	str	r2, [r1, #0]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	e9c3 6700 	strd	r6, r7, [r3]
 8012500:	68e3      	ldr	r3, [r4, #12]
 8012502:	3301      	adds	r3, #1
 8012504:	60e3      	str	r3, [r4, #12]
 8012506:	e7d0      	b.n	80124aa <_scanf_float+0x366>
 8012508:	9b04      	ldr	r3, [sp, #16]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d0e4      	beq.n	80124d8 <_scanf_float+0x394>
 801250e:	9905      	ldr	r1, [sp, #20]
 8012510:	230a      	movs	r3, #10
 8012512:	4640      	mov	r0, r8
 8012514:	3101      	adds	r1, #1
 8012516:	f7ff f9af 	bl	8011878 <_strtol_r>
 801251a:	9b04      	ldr	r3, [sp, #16]
 801251c:	9e05      	ldr	r6, [sp, #20]
 801251e:	1ac2      	subs	r2, r0, r3
 8012520:	e7d0      	b.n	80124c4 <_scanf_float+0x380>
 8012522:	076d      	lsls	r5, r5, #29
 8012524:	d4e7      	bmi.n	80124f6 <_scanf_float+0x3b2>
 8012526:	9d03      	ldr	r5, [sp, #12]
 8012528:	602a      	str	r2, [r5, #0]
 801252a:	681d      	ldr	r5, [r3, #0]
 801252c:	4602      	mov	r2, r0
 801252e:	460b      	mov	r3, r1
 8012530:	f7ee fa76 	bl	8000a20 <__aeabi_dcmpun>
 8012534:	b120      	cbz	r0, 8012540 <_scanf_float+0x3fc>
 8012536:	4807      	ldr	r0, [pc, #28]	@ (8012554 <_scanf_float+0x410>)
 8012538:	f000 fbf0 	bl	8012d1c <nanf>
 801253c:	6028      	str	r0, [r5, #0]
 801253e:	e7df      	b.n	8012500 <_scanf_float+0x3bc>
 8012540:	4630      	mov	r0, r6
 8012542:	4639      	mov	r1, r7
 8012544:	f7ee faca 	bl	8000adc <__aeabi_d2f>
 8012548:	e7f8      	b.n	801253c <_scanf_float+0x3f8>
 801254a:	2700      	movs	r7, #0
 801254c:	e633      	b.n	80121b6 <_scanf_float+0x72>
 801254e:	bf00      	nop
 8012550:	080161db 	.word	0x080161db
 8012554:	080161a4 	.word	0x080161a4

08012558 <std>:
 8012558:	2300      	movs	r3, #0
 801255a:	b510      	push	{r4, lr}
 801255c:	4604      	mov	r4, r0
 801255e:	e9c0 3300 	strd	r3, r3, [r0]
 8012562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012566:	6083      	str	r3, [r0, #8]
 8012568:	8181      	strh	r1, [r0, #12]
 801256a:	6643      	str	r3, [r0, #100]	@ 0x64
 801256c:	81c2      	strh	r2, [r0, #14]
 801256e:	6183      	str	r3, [r0, #24]
 8012570:	4619      	mov	r1, r3
 8012572:	2208      	movs	r2, #8
 8012574:	305c      	adds	r0, #92	@ 0x5c
 8012576:	f000 fa73 	bl	8012a60 <memset>
 801257a:	4b0d      	ldr	r3, [pc, #52]	@ (80125b0 <std+0x58>)
 801257c:	6224      	str	r4, [r4, #32]
 801257e:	6263      	str	r3, [r4, #36]	@ 0x24
 8012580:	4b0c      	ldr	r3, [pc, #48]	@ (80125b4 <std+0x5c>)
 8012582:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012584:	4b0c      	ldr	r3, [pc, #48]	@ (80125b8 <std+0x60>)
 8012586:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012588:	4b0c      	ldr	r3, [pc, #48]	@ (80125bc <std+0x64>)
 801258a:	6323      	str	r3, [r4, #48]	@ 0x30
 801258c:	4b0c      	ldr	r3, [pc, #48]	@ (80125c0 <std+0x68>)
 801258e:	429c      	cmp	r4, r3
 8012590:	d006      	beq.n	80125a0 <std+0x48>
 8012592:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012596:	4294      	cmp	r4, r2
 8012598:	d002      	beq.n	80125a0 <std+0x48>
 801259a:	33d0      	adds	r3, #208	@ 0xd0
 801259c:	429c      	cmp	r4, r3
 801259e:	d105      	bne.n	80125ac <std+0x54>
 80125a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80125a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125a8:	f000 bb8a 	b.w	8012cc0 <__retarget_lock_init_recursive>
 80125ac:	bd10      	pop	{r4, pc}
 80125ae:	bf00      	nop
 80125b0:	08012891 	.word	0x08012891
 80125b4:	080128b3 	.word	0x080128b3
 80125b8:	080128eb 	.word	0x080128eb
 80125bc:	0801290f 	.word	0x0801290f
 80125c0:	20001af8 	.word	0x20001af8

080125c4 <stdio_exit_handler>:
 80125c4:	4a02      	ldr	r2, [pc, #8]	@ (80125d0 <stdio_exit_handler+0xc>)
 80125c6:	4903      	ldr	r1, [pc, #12]	@ (80125d4 <stdio_exit_handler+0x10>)
 80125c8:	4803      	ldr	r0, [pc, #12]	@ (80125d8 <stdio_exit_handler+0x14>)
 80125ca:	f000 b87b 	b.w	80126c4 <_fwalk_sglue>
 80125ce:	bf00      	nop
 80125d0:	2000016c 	.word	0x2000016c
 80125d4:	080150a1 	.word	0x080150a1
 80125d8:	200002e8 	.word	0x200002e8

080125dc <cleanup_stdio>:
 80125dc:	6841      	ldr	r1, [r0, #4]
 80125de:	4b0c      	ldr	r3, [pc, #48]	@ (8012610 <cleanup_stdio+0x34>)
 80125e0:	b510      	push	{r4, lr}
 80125e2:	4299      	cmp	r1, r3
 80125e4:	4604      	mov	r4, r0
 80125e6:	d001      	beq.n	80125ec <cleanup_stdio+0x10>
 80125e8:	f002 fd5a 	bl	80150a0 <_fflush_r>
 80125ec:	68a1      	ldr	r1, [r4, #8]
 80125ee:	4b09      	ldr	r3, [pc, #36]	@ (8012614 <cleanup_stdio+0x38>)
 80125f0:	4299      	cmp	r1, r3
 80125f2:	d002      	beq.n	80125fa <cleanup_stdio+0x1e>
 80125f4:	4620      	mov	r0, r4
 80125f6:	f002 fd53 	bl	80150a0 <_fflush_r>
 80125fa:	68e1      	ldr	r1, [r4, #12]
 80125fc:	4b06      	ldr	r3, [pc, #24]	@ (8012618 <cleanup_stdio+0x3c>)
 80125fe:	4299      	cmp	r1, r3
 8012600:	d004      	beq.n	801260c <cleanup_stdio+0x30>
 8012602:	4620      	mov	r0, r4
 8012604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012608:	f002 bd4a 	b.w	80150a0 <_fflush_r>
 801260c:	bd10      	pop	{r4, pc}
 801260e:	bf00      	nop
 8012610:	20001af8 	.word	0x20001af8
 8012614:	20001b60 	.word	0x20001b60
 8012618:	20001bc8 	.word	0x20001bc8

0801261c <global_stdio_init.part.0>:
 801261c:	b510      	push	{r4, lr}
 801261e:	4b0b      	ldr	r3, [pc, #44]	@ (801264c <global_stdio_init.part.0+0x30>)
 8012620:	4c0b      	ldr	r4, [pc, #44]	@ (8012650 <global_stdio_init.part.0+0x34>)
 8012622:	4a0c      	ldr	r2, [pc, #48]	@ (8012654 <global_stdio_init.part.0+0x38>)
 8012624:	4620      	mov	r0, r4
 8012626:	601a      	str	r2, [r3, #0]
 8012628:	2104      	movs	r1, #4
 801262a:	2200      	movs	r2, #0
 801262c:	f7ff ff94 	bl	8012558 <std>
 8012630:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012634:	2201      	movs	r2, #1
 8012636:	2109      	movs	r1, #9
 8012638:	f7ff ff8e 	bl	8012558 <std>
 801263c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012640:	2202      	movs	r2, #2
 8012642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012646:	2112      	movs	r1, #18
 8012648:	f7ff bf86 	b.w	8012558 <std>
 801264c:	20001c30 	.word	0x20001c30
 8012650:	20001af8 	.word	0x20001af8
 8012654:	080125c5 	.word	0x080125c5

08012658 <__sfp_lock_acquire>:
 8012658:	4801      	ldr	r0, [pc, #4]	@ (8012660 <__sfp_lock_acquire+0x8>)
 801265a:	f000 bb32 	b.w	8012cc2 <__retarget_lock_acquire_recursive>
 801265e:	bf00      	nop
 8012660:	20001c39 	.word	0x20001c39

08012664 <__sfp_lock_release>:
 8012664:	4801      	ldr	r0, [pc, #4]	@ (801266c <__sfp_lock_release+0x8>)
 8012666:	f000 bb2d 	b.w	8012cc4 <__retarget_lock_release_recursive>
 801266a:	bf00      	nop
 801266c:	20001c39 	.word	0x20001c39

08012670 <__sinit>:
 8012670:	b510      	push	{r4, lr}
 8012672:	4604      	mov	r4, r0
 8012674:	f7ff fff0 	bl	8012658 <__sfp_lock_acquire>
 8012678:	6a23      	ldr	r3, [r4, #32]
 801267a:	b11b      	cbz	r3, 8012684 <__sinit+0x14>
 801267c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012680:	f7ff bff0 	b.w	8012664 <__sfp_lock_release>
 8012684:	4b04      	ldr	r3, [pc, #16]	@ (8012698 <__sinit+0x28>)
 8012686:	6223      	str	r3, [r4, #32]
 8012688:	4b04      	ldr	r3, [pc, #16]	@ (801269c <__sinit+0x2c>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d1f5      	bne.n	801267c <__sinit+0xc>
 8012690:	f7ff ffc4 	bl	801261c <global_stdio_init.part.0>
 8012694:	e7f2      	b.n	801267c <__sinit+0xc>
 8012696:	bf00      	nop
 8012698:	080125dd 	.word	0x080125dd
 801269c:	20001c30 	.word	0x20001c30

080126a0 <fiprintf>:
 80126a0:	b40e      	push	{r1, r2, r3}
 80126a2:	b503      	push	{r0, r1, lr}
 80126a4:	4601      	mov	r1, r0
 80126a6:	ab03      	add	r3, sp, #12
 80126a8:	4805      	ldr	r0, [pc, #20]	@ (80126c0 <fiprintf+0x20>)
 80126aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80126ae:	6800      	ldr	r0, [r0, #0]
 80126b0:	9301      	str	r3, [sp, #4]
 80126b2:	f002 fb5d 	bl	8014d70 <_vfiprintf_r>
 80126b6:	b002      	add	sp, #8
 80126b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80126bc:	b003      	add	sp, #12
 80126be:	4770      	bx	lr
 80126c0:	200002e4 	.word	0x200002e4

080126c4 <_fwalk_sglue>:
 80126c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126c8:	4607      	mov	r7, r0
 80126ca:	4688      	mov	r8, r1
 80126cc:	4614      	mov	r4, r2
 80126ce:	2600      	movs	r6, #0
 80126d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80126d4:	f1b9 0901 	subs.w	r9, r9, #1
 80126d8:	d505      	bpl.n	80126e6 <_fwalk_sglue+0x22>
 80126da:	6824      	ldr	r4, [r4, #0]
 80126dc:	2c00      	cmp	r4, #0
 80126de:	d1f7      	bne.n	80126d0 <_fwalk_sglue+0xc>
 80126e0:	4630      	mov	r0, r6
 80126e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126e6:	89ab      	ldrh	r3, [r5, #12]
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	d907      	bls.n	80126fc <_fwalk_sglue+0x38>
 80126ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126f0:	3301      	adds	r3, #1
 80126f2:	d003      	beq.n	80126fc <_fwalk_sglue+0x38>
 80126f4:	4629      	mov	r1, r5
 80126f6:	4638      	mov	r0, r7
 80126f8:	47c0      	blx	r8
 80126fa:	4306      	orrs	r6, r0
 80126fc:	3568      	adds	r5, #104	@ 0x68
 80126fe:	e7e9      	b.n	80126d4 <_fwalk_sglue+0x10>

08012700 <iprintf>:
 8012700:	b40f      	push	{r0, r1, r2, r3}
 8012702:	b507      	push	{r0, r1, r2, lr}
 8012704:	4906      	ldr	r1, [pc, #24]	@ (8012720 <iprintf+0x20>)
 8012706:	ab04      	add	r3, sp, #16
 8012708:	6808      	ldr	r0, [r1, #0]
 801270a:	f853 2b04 	ldr.w	r2, [r3], #4
 801270e:	6881      	ldr	r1, [r0, #8]
 8012710:	9301      	str	r3, [sp, #4]
 8012712:	f002 fb2d 	bl	8014d70 <_vfiprintf_r>
 8012716:	b003      	add	sp, #12
 8012718:	f85d eb04 	ldr.w	lr, [sp], #4
 801271c:	b004      	add	sp, #16
 801271e:	4770      	bx	lr
 8012720:	200002e4 	.word	0x200002e4

08012724 <_puts_r>:
 8012724:	6a03      	ldr	r3, [r0, #32]
 8012726:	b570      	push	{r4, r5, r6, lr}
 8012728:	4605      	mov	r5, r0
 801272a:	460e      	mov	r6, r1
 801272c:	6884      	ldr	r4, [r0, #8]
 801272e:	b90b      	cbnz	r3, 8012734 <_puts_r+0x10>
 8012730:	f7ff ff9e 	bl	8012670 <__sinit>
 8012734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012736:	07db      	lsls	r3, r3, #31
 8012738:	d405      	bmi.n	8012746 <_puts_r+0x22>
 801273a:	89a3      	ldrh	r3, [r4, #12]
 801273c:	0598      	lsls	r0, r3, #22
 801273e:	d402      	bmi.n	8012746 <_puts_r+0x22>
 8012740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012742:	f000 fabe 	bl	8012cc2 <__retarget_lock_acquire_recursive>
 8012746:	89a3      	ldrh	r3, [r4, #12]
 8012748:	0719      	lsls	r1, r3, #28
 801274a:	d502      	bpl.n	8012752 <_puts_r+0x2e>
 801274c:	6923      	ldr	r3, [r4, #16]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d135      	bne.n	80127be <_puts_r+0x9a>
 8012752:	4621      	mov	r1, r4
 8012754:	4628      	mov	r0, r5
 8012756:	f000 f91d 	bl	8012994 <__swsetup_r>
 801275a:	b380      	cbz	r0, 80127be <_puts_r+0x9a>
 801275c:	f04f 35ff 	mov.w	r5, #4294967295
 8012760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012762:	07da      	lsls	r2, r3, #31
 8012764:	d405      	bmi.n	8012772 <_puts_r+0x4e>
 8012766:	89a3      	ldrh	r3, [r4, #12]
 8012768:	059b      	lsls	r3, r3, #22
 801276a:	d402      	bmi.n	8012772 <_puts_r+0x4e>
 801276c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801276e:	f000 faa9 	bl	8012cc4 <__retarget_lock_release_recursive>
 8012772:	4628      	mov	r0, r5
 8012774:	bd70      	pop	{r4, r5, r6, pc}
 8012776:	2b00      	cmp	r3, #0
 8012778:	da04      	bge.n	8012784 <_puts_r+0x60>
 801277a:	69a2      	ldr	r2, [r4, #24]
 801277c:	429a      	cmp	r2, r3
 801277e:	dc17      	bgt.n	80127b0 <_puts_r+0x8c>
 8012780:	290a      	cmp	r1, #10
 8012782:	d015      	beq.n	80127b0 <_puts_r+0x8c>
 8012784:	6823      	ldr	r3, [r4, #0]
 8012786:	1c5a      	adds	r2, r3, #1
 8012788:	6022      	str	r2, [r4, #0]
 801278a:	7019      	strb	r1, [r3, #0]
 801278c:	68a3      	ldr	r3, [r4, #8]
 801278e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012792:	3b01      	subs	r3, #1
 8012794:	60a3      	str	r3, [r4, #8]
 8012796:	2900      	cmp	r1, #0
 8012798:	d1ed      	bne.n	8012776 <_puts_r+0x52>
 801279a:	2b00      	cmp	r3, #0
 801279c:	da11      	bge.n	80127c2 <_puts_r+0x9e>
 801279e:	4622      	mov	r2, r4
 80127a0:	210a      	movs	r1, #10
 80127a2:	4628      	mov	r0, r5
 80127a4:	f000 f8b7 	bl	8012916 <__swbuf_r>
 80127a8:	3001      	adds	r0, #1
 80127aa:	d0d7      	beq.n	801275c <_puts_r+0x38>
 80127ac:	250a      	movs	r5, #10
 80127ae:	e7d7      	b.n	8012760 <_puts_r+0x3c>
 80127b0:	4622      	mov	r2, r4
 80127b2:	4628      	mov	r0, r5
 80127b4:	f000 f8af 	bl	8012916 <__swbuf_r>
 80127b8:	3001      	adds	r0, #1
 80127ba:	d1e7      	bne.n	801278c <_puts_r+0x68>
 80127bc:	e7ce      	b.n	801275c <_puts_r+0x38>
 80127be:	3e01      	subs	r6, #1
 80127c0:	e7e4      	b.n	801278c <_puts_r+0x68>
 80127c2:	6823      	ldr	r3, [r4, #0]
 80127c4:	1c5a      	adds	r2, r3, #1
 80127c6:	6022      	str	r2, [r4, #0]
 80127c8:	220a      	movs	r2, #10
 80127ca:	701a      	strb	r2, [r3, #0]
 80127cc:	e7ee      	b.n	80127ac <_puts_r+0x88>
	...

080127d0 <puts>:
 80127d0:	4b02      	ldr	r3, [pc, #8]	@ (80127dc <puts+0xc>)
 80127d2:	4601      	mov	r1, r0
 80127d4:	6818      	ldr	r0, [r3, #0]
 80127d6:	f7ff bfa5 	b.w	8012724 <_puts_r>
 80127da:	bf00      	nop
 80127dc:	200002e4 	.word	0x200002e4

080127e0 <sniprintf>:
 80127e0:	b40c      	push	{r2, r3}
 80127e2:	b530      	push	{r4, r5, lr}
 80127e4:	4b18      	ldr	r3, [pc, #96]	@ (8012848 <sniprintf+0x68>)
 80127e6:	1e0c      	subs	r4, r1, #0
 80127e8:	681d      	ldr	r5, [r3, #0]
 80127ea:	b09d      	sub	sp, #116	@ 0x74
 80127ec:	da08      	bge.n	8012800 <sniprintf+0x20>
 80127ee:	238b      	movs	r3, #139	@ 0x8b
 80127f0:	f04f 30ff 	mov.w	r0, #4294967295
 80127f4:	602b      	str	r3, [r5, #0]
 80127f6:	b01d      	add	sp, #116	@ 0x74
 80127f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127fc:	b002      	add	sp, #8
 80127fe:	4770      	bx	lr
 8012800:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012804:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012808:	f04f 0300 	mov.w	r3, #0
 801280c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801280e:	bf0c      	ite	eq
 8012810:	4623      	moveq	r3, r4
 8012812:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012816:	9304      	str	r3, [sp, #16]
 8012818:	9307      	str	r3, [sp, #28]
 801281a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801281e:	9002      	str	r0, [sp, #8]
 8012820:	9006      	str	r0, [sp, #24]
 8012822:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012826:	4628      	mov	r0, r5
 8012828:	ab21      	add	r3, sp, #132	@ 0x84
 801282a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801282c:	a902      	add	r1, sp, #8
 801282e:	9301      	str	r3, [sp, #4]
 8012830:	f002 f97a 	bl	8014b28 <_svfiprintf_r>
 8012834:	1c43      	adds	r3, r0, #1
 8012836:	bfbc      	itt	lt
 8012838:	238b      	movlt	r3, #139	@ 0x8b
 801283a:	602b      	strlt	r3, [r5, #0]
 801283c:	2c00      	cmp	r4, #0
 801283e:	d0da      	beq.n	80127f6 <sniprintf+0x16>
 8012840:	2200      	movs	r2, #0
 8012842:	9b02      	ldr	r3, [sp, #8]
 8012844:	701a      	strb	r2, [r3, #0]
 8012846:	e7d6      	b.n	80127f6 <sniprintf+0x16>
 8012848:	200002e4 	.word	0x200002e4

0801284c <siprintf>:
 801284c:	b40e      	push	{r1, r2, r3}
 801284e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012852:	b510      	push	{r4, lr}
 8012854:	2400      	movs	r4, #0
 8012856:	b09d      	sub	sp, #116	@ 0x74
 8012858:	ab1f      	add	r3, sp, #124	@ 0x7c
 801285a:	9002      	str	r0, [sp, #8]
 801285c:	9006      	str	r0, [sp, #24]
 801285e:	9107      	str	r1, [sp, #28]
 8012860:	9104      	str	r1, [sp, #16]
 8012862:	4809      	ldr	r0, [pc, #36]	@ (8012888 <siprintf+0x3c>)
 8012864:	4909      	ldr	r1, [pc, #36]	@ (801288c <siprintf+0x40>)
 8012866:	f853 2b04 	ldr.w	r2, [r3], #4
 801286a:	9105      	str	r1, [sp, #20]
 801286c:	6800      	ldr	r0, [r0, #0]
 801286e:	a902      	add	r1, sp, #8
 8012870:	9301      	str	r3, [sp, #4]
 8012872:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012874:	f002 f958 	bl	8014b28 <_svfiprintf_r>
 8012878:	9b02      	ldr	r3, [sp, #8]
 801287a:	701c      	strb	r4, [r3, #0]
 801287c:	b01d      	add	sp, #116	@ 0x74
 801287e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012882:	b003      	add	sp, #12
 8012884:	4770      	bx	lr
 8012886:	bf00      	nop
 8012888:	200002e4 	.word	0x200002e4
 801288c:	ffff0208 	.word	0xffff0208

08012890 <__sread>:
 8012890:	b510      	push	{r4, lr}
 8012892:	460c      	mov	r4, r1
 8012894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012898:	f000 f9b4 	bl	8012c04 <_read_r>
 801289c:	2800      	cmp	r0, #0
 801289e:	bfab      	itete	ge
 80128a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80128a2:	89a3      	ldrhlt	r3, [r4, #12]
 80128a4:	181b      	addge	r3, r3, r0
 80128a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80128aa:	bfac      	ite	ge
 80128ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80128ae:	81a3      	strhlt	r3, [r4, #12]
 80128b0:	bd10      	pop	{r4, pc}

080128b2 <__swrite>:
 80128b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128b6:	461f      	mov	r7, r3
 80128b8:	898b      	ldrh	r3, [r1, #12]
 80128ba:	4605      	mov	r5, r0
 80128bc:	05db      	lsls	r3, r3, #23
 80128be:	460c      	mov	r4, r1
 80128c0:	4616      	mov	r6, r2
 80128c2:	d505      	bpl.n	80128d0 <__swrite+0x1e>
 80128c4:	2302      	movs	r3, #2
 80128c6:	2200      	movs	r2, #0
 80128c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128cc:	f000 f988 	bl	8012be0 <_lseek_r>
 80128d0:	89a3      	ldrh	r3, [r4, #12]
 80128d2:	4632      	mov	r2, r6
 80128d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80128d8:	81a3      	strh	r3, [r4, #12]
 80128da:	4628      	mov	r0, r5
 80128dc:	463b      	mov	r3, r7
 80128de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128e6:	f000 b9af 	b.w	8012c48 <_write_r>

080128ea <__sseek>:
 80128ea:	b510      	push	{r4, lr}
 80128ec:	460c      	mov	r4, r1
 80128ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128f2:	f000 f975 	bl	8012be0 <_lseek_r>
 80128f6:	1c43      	adds	r3, r0, #1
 80128f8:	89a3      	ldrh	r3, [r4, #12]
 80128fa:	bf15      	itete	ne
 80128fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80128fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012902:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012906:	81a3      	strheq	r3, [r4, #12]
 8012908:	bf18      	it	ne
 801290a:	81a3      	strhne	r3, [r4, #12]
 801290c:	bd10      	pop	{r4, pc}

0801290e <__sclose>:
 801290e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012912:	f000 b955 	b.w	8012bc0 <_close_r>

08012916 <__swbuf_r>:
 8012916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012918:	460e      	mov	r6, r1
 801291a:	4614      	mov	r4, r2
 801291c:	4605      	mov	r5, r0
 801291e:	b118      	cbz	r0, 8012928 <__swbuf_r+0x12>
 8012920:	6a03      	ldr	r3, [r0, #32]
 8012922:	b90b      	cbnz	r3, 8012928 <__swbuf_r+0x12>
 8012924:	f7ff fea4 	bl	8012670 <__sinit>
 8012928:	69a3      	ldr	r3, [r4, #24]
 801292a:	60a3      	str	r3, [r4, #8]
 801292c:	89a3      	ldrh	r3, [r4, #12]
 801292e:	071a      	lsls	r2, r3, #28
 8012930:	d501      	bpl.n	8012936 <__swbuf_r+0x20>
 8012932:	6923      	ldr	r3, [r4, #16]
 8012934:	b943      	cbnz	r3, 8012948 <__swbuf_r+0x32>
 8012936:	4621      	mov	r1, r4
 8012938:	4628      	mov	r0, r5
 801293a:	f000 f82b 	bl	8012994 <__swsetup_r>
 801293e:	b118      	cbz	r0, 8012948 <__swbuf_r+0x32>
 8012940:	f04f 37ff 	mov.w	r7, #4294967295
 8012944:	4638      	mov	r0, r7
 8012946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012948:	6823      	ldr	r3, [r4, #0]
 801294a:	6922      	ldr	r2, [r4, #16]
 801294c:	b2f6      	uxtb	r6, r6
 801294e:	1a98      	subs	r0, r3, r2
 8012950:	6963      	ldr	r3, [r4, #20]
 8012952:	4637      	mov	r7, r6
 8012954:	4283      	cmp	r3, r0
 8012956:	dc05      	bgt.n	8012964 <__swbuf_r+0x4e>
 8012958:	4621      	mov	r1, r4
 801295a:	4628      	mov	r0, r5
 801295c:	f002 fba0 	bl	80150a0 <_fflush_r>
 8012960:	2800      	cmp	r0, #0
 8012962:	d1ed      	bne.n	8012940 <__swbuf_r+0x2a>
 8012964:	68a3      	ldr	r3, [r4, #8]
 8012966:	3b01      	subs	r3, #1
 8012968:	60a3      	str	r3, [r4, #8]
 801296a:	6823      	ldr	r3, [r4, #0]
 801296c:	1c5a      	adds	r2, r3, #1
 801296e:	6022      	str	r2, [r4, #0]
 8012970:	701e      	strb	r6, [r3, #0]
 8012972:	6962      	ldr	r2, [r4, #20]
 8012974:	1c43      	adds	r3, r0, #1
 8012976:	429a      	cmp	r2, r3
 8012978:	d004      	beq.n	8012984 <__swbuf_r+0x6e>
 801297a:	89a3      	ldrh	r3, [r4, #12]
 801297c:	07db      	lsls	r3, r3, #31
 801297e:	d5e1      	bpl.n	8012944 <__swbuf_r+0x2e>
 8012980:	2e0a      	cmp	r6, #10
 8012982:	d1df      	bne.n	8012944 <__swbuf_r+0x2e>
 8012984:	4621      	mov	r1, r4
 8012986:	4628      	mov	r0, r5
 8012988:	f002 fb8a 	bl	80150a0 <_fflush_r>
 801298c:	2800      	cmp	r0, #0
 801298e:	d0d9      	beq.n	8012944 <__swbuf_r+0x2e>
 8012990:	e7d6      	b.n	8012940 <__swbuf_r+0x2a>
	...

08012994 <__swsetup_r>:
 8012994:	b538      	push	{r3, r4, r5, lr}
 8012996:	4b29      	ldr	r3, [pc, #164]	@ (8012a3c <__swsetup_r+0xa8>)
 8012998:	4605      	mov	r5, r0
 801299a:	6818      	ldr	r0, [r3, #0]
 801299c:	460c      	mov	r4, r1
 801299e:	b118      	cbz	r0, 80129a8 <__swsetup_r+0x14>
 80129a0:	6a03      	ldr	r3, [r0, #32]
 80129a2:	b90b      	cbnz	r3, 80129a8 <__swsetup_r+0x14>
 80129a4:	f7ff fe64 	bl	8012670 <__sinit>
 80129a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129ac:	0719      	lsls	r1, r3, #28
 80129ae:	d422      	bmi.n	80129f6 <__swsetup_r+0x62>
 80129b0:	06da      	lsls	r2, r3, #27
 80129b2:	d407      	bmi.n	80129c4 <__swsetup_r+0x30>
 80129b4:	2209      	movs	r2, #9
 80129b6:	602a      	str	r2, [r5, #0]
 80129b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129bc:	f04f 30ff 	mov.w	r0, #4294967295
 80129c0:	81a3      	strh	r3, [r4, #12]
 80129c2:	e033      	b.n	8012a2c <__swsetup_r+0x98>
 80129c4:	0758      	lsls	r0, r3, #29
 80129c6:	d512      	bpl.n	80129ee <__swsetup_r+0x5a>
 80129c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80129ca:	b141      	cbz	r1, 80129de <__swsetup_r+0x4a>
 80129cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80129d0:	4299      	cmp	r1, r3
 80129d2:	d002      	beq.n	80129da <__swsetup_r+0x46>
 80129d4:	4628      	mov	r0, r5
 80129d6:	f001 f80b 	bl	80139f0 <_free_r>
 80129da:	2300      	movs	r3, #0
 80129dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80129de:	89a3      	ldrh	r3, [r4, #12]
 80129e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80129e4:	81a3      	strh	r3, [r4, #12]
 80129e6:	2300      	movs	r3, #0
 80129e8:	6063      	str	r3, [r4, #4]
 80129ea:	6923      	ldr	r3, [r4, #16]
 80129ec:	6023      	str	r3, [r4, #0]
 80129ee:	89a3      	ldrh	r3, [r4, #12]
 80129f0:	f043 0308 	orr.w	r3, r3, #8
 80129f4:	81a3      	strh	r3, [r4, #12]
 80129f6:	6923      	ldr	r3, [r4, #16]
 80129f8:	b94b      	cbnz	r3, 8012a0e <__swsetup_r+0x7a>
 80129fa:	89a3      	ldrh	r3, [r4, #12]
 80129fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a04:	d003      	beq.n	8012a0e <__swsetup_r+0x7a>
 8012a06:	4621      	mov	r1, r4
 8012a08:	4628      	mov	r0, r5
 8012a0a:	f002 fb96 	bl	801513a <__smakebuf_r>
 8012a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a12:	f013 0201 	ands.w	r2, r3, #1
 8012a16:	d00a      	beq.n	8012a2e <__swsetup_r+0x9a>
 8012a18:	2200      	movs	r2, #0
 8012a1a:	60a2      	str	r2, [r4, #8]
 8012a1c:	6962      	ldr	r2, [r4, #20]
 8012a1e:	4252      	negs	r2, r2
 8012a20:	61a2      	str	r2, [r4, #24]
 8012a22:	6922      	ldr	r2, [r4, #16]
 8012a24:	b942      	cbnz	r2, 8012a38 <__swsetup_r+0xa4>
 8012a26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012a2a:	d1c5      	bne.n	80129b8 <__swsetup_r+0x24>
 8012a2c:	bd38      	pop	{r3, r4, r5, pc}
 8012a2e:	0799      	lsls	r1, r3, #30
 8012a30:	bf58      	it	pl
 8012a32:	6962      	ldrpl	r2, [r4, #20]
 8012a34:	60a2      	str	r2, [r4, #8]
 8012a36:	e7f4      	b.n	8012a22 <__swsetup_r+0x8e>
 8012a38:	2000      	movs	r0, #0
 8012a3a:	e7f7      	b.n	8012a2c <__swsetup_r+0x98>
 8012a3c:	200002e4 	.word	0x200002e4

08012a40 <memcmp>:
 8012a40:	b510      	push	{r4, lr}
 8012a42:	3901      	subs	r1, #1
 8012a44:	4402      	add	r2, r0
 8012a46:	4290      	cmp	r0, r2
 8012a48:	d101      	bne.n	8012a4e <memcmp+0xe>
 8012a4a:	2000      	movs	r0, #0
 8012a4c:	e005      	b.n	8012a5a <memcmp+0x1a>
 8012a4e:	7803      	ldrb	r3, [r0, #0]
 8012a50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012a54:	42a3      	cmp	r3, r4
 8012a56:	d001      	beq.n	8012a5c <memcmp+0x1c>
 8012a58:	1b18      	subs	r0, r3, r4
 8012a5a:	bd10      	pop	{r4, pc}
 8012a5c:	3001      	adds	r0, #1
 8012a5e:	e7f2      	b.n	8012a46 <memcmp+0x6>

08012a60 <memset>:
 8012a60:	4603      	mov	r3, r0
 8012a62:	4402      	add	r2, r0
 8012a64:	4293      	cmp	r3, r2
 8012a66:	d100      	bne.n	8012a6a <memset+0xa>
 8012a68:	4770      	bx	lr
 8012a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8012a6e:	e7f9      	b.n	8012a64 <memset+0x4>

08012a70 <strcat>:
 8012a70:	4602      	mov	r2, r0
 8012a72:	b510      	push	{r4, lr}
 8012a74:	7814      	ldrb	r4, [r2, #0]
 8012a76:	4613      	mov	r3, r2
 8012a78:	3201      	adds	r2, #1
 8012a7a:	2c00      	cmp	r4, #0
 8012a7c:	d1fa      	bne.n	8012a74 <strcat+0x4>
 8012a7e:	3b01      	subs	r3, #1
 8012a80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a88:	2a00      	cmp	r2, #0
 8012a8a:	d1f9      	bne.n	8012a80 <strcat+0x10>
 8012a8c:	bd10      	pop	{r4, pc}

08012a8e <strncat>:
 8012a8e:	b530      	push	{r4, r5, lr}
 8012a90:	4604      	mov	r4, r0
 8012a92:	7825      	ldrb	r5, [r4, #0]
 8012a94:	4623      	mov	r3, r4
 8012a96:	3401      	adds	r4, #1
 8012a98:	2d00      	cmp	r5, #0
 8012a9a:	d1fa      	bne.n	8012a92 <strncat+0x4>
 8012a9c:	3a01      	subs	r2, #1
 8012a9e:	d304      	bcc.n	8012aaa <strncat+0x1c>
 8012aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012aa4:	f803 4b01 	strb.w	r4, [r3], #1
 8012aa8:	b904      	cbnz	r4, 8012aac <strncat+0x1e>
 8012aaa:	bd30      	pop	{r4, r5, pc}
 8012aac:	2a00      	cmp	r2, #0
 8012aae:	d1f5      	bne.n	8012a9c <strncat+0xe>
 8012ab0:	701a      	strb	r2, [r3, #0]
 8012ab2:	e7f3      	b.n	8012a9c <strncat+0xe>

08012ab4 <strncmp>:
 8012ab4:	b510      	push	{r4, lr}
 8012ab6:	b16a      	cbz	r2, 8012ad4 <strncmp+0x20>
 8012ab8:	3901      	subs	r1, #1
 8012aba:	1884      	adds	r4, r0, r2
 8012abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ac0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d103      	bne.n	8012ad0 <strncmp+0x1c>
 8012ac8:	42a0      	cmp	r0, r4
 8012aca:	d001      	beq.n	8012ad0 <strncmp+0x1c>
 8012acc:	2a00      	cmp	r2, #0
 8012ace:	d1f5      	bne.n	8012abc <strncmp+0x8>
 8012ad0:	1ad0      	subs	r0, r2, r3
 8012ad2:	bd10      	pop	{r4, pc}
 8012ad4:	4610      	mov	r0, r2
 8012ad6:	e7fc      	b.n	8012ad2 <strncmp+0x1e>

08012ad8 <strncpy>:
 8012ad8:	4603      	mov	r3, r0
 8012ada:	b510      	push	{r4, lr}
 8012adc:	3901      	subs	r1, #1
 8012ade:	b132      	cbz	r2, 8012aee <strncpy+0x16>
 8012ae0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012ae4:	3a01      	subs	r2, #1
 8012ae6:	f803 4b01 	strb.w	r4, [r3], #1
 8012aea:	2c00      	cmp	r4, #0
 8012aec:	d1f7      	bne.n	8012ade <strncpy+0x6>
 8012aee:	2100      	movs	r1, #0
 8012af0:	441a      	add	r2, r3
 8012af2:	4293      	cmp	r3, r2
 8012af4:	d100      	bne.n	8012af8 <strncpy+0x20>
 8012af6:	bd10      	pop	{r4, pc}
 8012af8:	f803 1b01 	strb.w	r1, [r3], #1
 8012afc:	e7f9      	b.n	8012af2 <strncpy+0x1a>
	...

08012b00 <strtok>:
 8012b00:	4b16      	ldr	r3, [pc, #88]	@ (8012b5c <strtok+0x5c>)
 8012b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b06:	681f      	ldr	r7, [r3, #0]
 8012b08:	4605      	mov	r5, r0
 8012b0a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8012b0c:	460e      	mov	r6, r1
 8012b0e:	b9ec      	cbnz	r4, 8012b4c <strtok+0x4c>
 8012b10:	2050      	movs	r0, #80	@ 0x50
 8012b12:	f7fd ff6b 	bl	80109ec <malloc>
 8012b16:	4602      	mov	r2, r0
 8012b18:	6478      	str	r0, [r7, #68]	@ 0x44
 8012b1a:	b920      	cbnz	r0, 8012b26 <strtok+0x26>
 8012b1c:	215b      	movs	r1, #91	@ 0x5b
 8012b1e:	4b10      	ldr	r3, [pc, #64]	@ (8012b60 <strtok+0x60>)
 8012b20:	4810      	ldr	r0, [pc, #64]	@ (8012b64 <strtok+0x64>)
 8012b22:	f7fd ff3d 	bl	80109a0 <__assert_func>
 8012b26:	e9c0 4400 	strd	r4, r4, [r0]
 8012b2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012b2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012b32:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8012b36:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8012b3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8012b3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8012b42:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8012b46:	6184      	str	r4, [r0, #24]
 8012b48:	7704      	strb	r4, [r0, #28]
 8012b4a:	6244      	str	r4, [r0, #36]	@ 0x24
 8012b4c:	4631      	mov	r1, r6
 8012b4e:	4628      	mov	r0, r5
 8012b50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012b52:	2301      	movs	r3, #1
 8012b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b58:	f000 b806 	b.w	8012b68 <__strtok_r>
 8012b5c:	200002e4 	.word	0x200002e4
 8012b60:	080161e0 	.word	0x080161e0
 8012b64:	080161f7 	.word	0x080161f7

08012b68 <__strtok_r>:
 8012b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b6a:	4604      	mov	r4, r0
 8012b6c:	b908      	cbnz	r0, 8012b72 <__strtok_r+0xa>
 8012b6e:	6814      	ldr	r4, [r2, #0]
 8012b70:	b144      	cbz	r4, 8012b84 <__strtok_r+0x1c>
 8012b72:	460f      	mov	r7, r1
 8012b74:	4620      	mov	r0, r4
 8012b76:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012b7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012b7e:	b91e      	cbnz	r6, 8012b88 <__strtok_r+0x20>
 8012b80:	b965      	cbnz	r5, 8012b9c <__strtok_r+0x34>
 8012b82:	6015      	str	r5, [r2, #0]
 8012b84:	2000      	movs	r0, #0
 8012b86:	e005      	b.n	8012b94 <__strtok_r+0x2c>
 8012b88:	42b5      	cmp	r5, r6
 8012b8a:	d1f6      	bne.n	8012b7a <__strtok_r+0x12>
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d1f0      	bne.n	8012b72 <__strtok_r+0xa>
 8012b90:	6014      	str	r4, [r2, #0]
 8012b92:	7003      	strb	r3, [r0, #0]
 8012b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b96:	461c      	mov	r4, r3
 8012b98:	e00c      	b.n	8012bb4 <__strtok_r+0x4c>
 8012b9a:	b91d      	cbnz	r5, 8012ba4 <__strtok_r+0x3c>
 8012b9c:	460e      	mov	r6, r1
 8012b9e:	4627      	mov	r7, r4
 8012ba0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012ba4:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012ba8:	42ab      	cmp	r3, r5
 8012baa:	d1f6      	bne.n	8012b9a <__strtok_r+0x32>
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d0f2      	beq.n	8012b96 <__strtok_r+0x2e>
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	703b      	strb	r3, [r7, #0]
 8012bb4:	6014      	str	r4, [r2, #0]
 8012bb6:	e7ed      	b.n	8012b94 <__strtok_r+0x2c>

08012bb8 <_localeconv_r>:
 8012bb8:	4800      	ldr	r0, [pc, #0]	@ (8012bbc <_localeconv_r+0x4>)
 8012bba:	4770      	bx	lr
 8012bbc:	20000268 	.word	0x20000268

08012bc0 <_close_r>:
 8012bc0:	b538      	push	{r3, r4, r5, lr}
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	4d05      	ldr	r5, [pc, #20]	@ (8012bdc <_close_r+0x1c>)
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	4608      	mov	r0, r1
 8012bca:	602b      	str	r3, [r5, #0]
 8012bcc:	f7ee fe9f 	bl	800190e <_close>
 8012bd0:	1c43      	adds	r3, r0, #1
 8012bd2:	d102      	bne.n	8012bda <_close_r+0x1a>
 8012bd4:	682b      	ldr	r3, [r5, #0]
 8012bd6:	b103      	cbz	r3, 8012bda <_close_r+0x1a>
 8012bd8:	6023      	str	r3, [r4, #0]
 8012bda:	bd38      	pop	{r3, r4, r5, pc}
 8012bdc:	20001c34 	.word	0x20001c34

08012be0 <_lseek_r>:
 8012be0:	b538      	push	{r3, r4, r5, lr}
 8012be2:	4604      	mov	r4, r0
 8012be4:	4608      	mov	r0, r1
 8012be6:	4611      	mov	r1, r2
 8012be8:	2200      	movs	r2, #0
 8012bea:	4d05      	ldr	r5, [pc, #20]	@ (8012c00 <_lseek_r+0x20>)
 8012bec:	602a      	str	r2, [r5, #0]
 8012bee:	461a      	mov	r2, r3
 8012bf0:	f7ee feb1 	bl	8001956 <_lseek>
 8012bf4:	1c43      	adds	r3, r0, #1
 8012bf6:	d102      	bne.n	8012bfe <_lseek_r+0x1e>
 8012bf8:	682b      	ldr	r3, [r5, #0]
 8012bfa:	b103      	cbz	r3, 8012bfe <_lseek_r+0x1e>
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	bd38      	pop	{r3, r4, r5, pc}
 8012c00:	20001c34 	.word	0x20001c34

08012c04 <_read_r>:
 8012c04:	b538      	push	{r3, r4, r5, lr}
 8012c06:	4604      	mov	r4, r0
 8012c08:	4608      	mov	r0, r1
 8012c0a:	4611      	mov	r1, r2
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	4d05      	ldr	r5, [pc, #20]	@ (8012c24 <_read_r+0x20>)
 8012c10:	602a      	str	r2, [r5, #0]
 8012c12:	461a      	mov	r2, r3
 8012c14:	f7ee fe5e 	bl	80018d4 <_read>
 8012c18:	1c43      	adds	r3, r0, #1
 8012c1a:	d102      	bne.n	8012c22 <_read_r+0x1e>
 8012c1c:	682b      	ldr	r3, [r5, #0]
 8012c1e:	b103      	cbz	r3, 8012c22 <_read_r+0x1e>
 8012c20:	6023      	str	r3, [r4, #0]
 8012c22:	bd38      	pop	{r3, r4, r5, pc}
 8012c24:	20001c34 	.word	0x20001c34

08012c28 <_sbrk_r>:
 8012c28:	b538      	push	{r3, r4, r5, lr}
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	4d05      	ldr	r5, [pc, #20]	@ (8012c44 <_sbrk_r+0x1c>)
 8012c2e:	4604      	mov	r4, r0
 8012c30:	4608      	mov	r0, r1
 8012c32:	602b      	str	r3, [r5, #0]
 8012c34:	f7ee fe9c 	bl	8001970 <_sbrk>
 8012c38:	1c43      	adds	r3, r0, #1
 8012c3a:	d102      	bne.n	8012c42 <_sbrk_r+0x1a>
 8012c3c:	682b      	ldr	r3, [r5, #0]
 8012c3e:	b103      	cbz	r3, 8012c42 <_sbrk_r+0x1a>
 8012c40:	6023      	str	r3, [r4, #0]
 8012c42:	bd38      	pop	{r3, r4, r5, pc}
 8012c44:	20001c34 	.word	0x20001c34

08012c48 <_write_r>:
 8012c48:	b538      	push	{r3, r4, r5, lr}
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	4608      	mov	r0, r1
 8012c4e:	4611      	mov	r1, r2
 8012c50:	2200      	movs	r2, #0
 8012c52:	4d05      	ldr	r5, [pc, #20]	@ (8012c68 <_write_r+0x20>)
 8012c54:	602a      	str	r2, [r5, #0]
 8012c56:	461a      	mov	r2, r3
 8012c58:	f7ee fbc2 	bl	80013e0 <_write>
 8012c5c:	1c43      	adds	r3, r0, #1
 8012c5e:	d102      	bne.n	8012c66 <_write_r+0x1e>
 8012c60:	682b      	ldr	r3, [r5, #0]
 8012c62:	b103      	cbz	r3, 8012c66 <_write_r+0x1e>
 8012c64:	6023      	str	r3, [r4, #0]
 8012c66:	bd38      	pop	{r3, r4, r5, pc}
 8012c68:	20001c34 	.word	0x20001c34

08012c6c <__errno>:
 8012c6c:	4b01      	ldr	r3, [pc, #4]	@ (8012c74 <__errno+0x8>)
 8012c6e:	6818      	ldr	r0, [r3, #0]
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	200002e4 	.word	0x200002e4

08012c78 <__libc_init_array>:
 8012c78:	b570      	push	{r4, r5, r6, lr}
 8012c7a:	2600      	movs	r6, #0
 8012c7c:	4d0c      	ldr	r5, [pc, #48]	@ (8012cb0 <__libc_init_array+0x38>)
 8012c7e:	4c0d      	ldr	r4, [pc, #52]	@ (8012cb4 <__libc_init_array+0x3c>)
 8012c80:	1b64      	subs	r4, r4, r5
 8012c82:	10a4      	asrs	r4, r4, #2
 8012c84:	42a6      	cmp	r6, r4
 8012c86:	d109      	bne.n	8012c9c <__libc_init_array+0x24>
 8012c88:	f002 fb5e 	bl	8015348 <_init>
 8012c8c:	2600      	movs	r6, #0
 8012c8e:	4d0a      	ldr	r5, [pc, #40]	@ (8012cb8 <__libc_init_array+0x40>)
 8012c90:	4c0a      	ldr	r4, [pc, #40]	@ (8012cbc <__libc_init_array+0x44>)
 8012c92:	1b64      	subs	r4, r4, r5
 8012c94:	10a4      	asrs	r4, r4, #2
 8012c96:	42a6      	cmp	r6, r4
 8012c98:	d105      	bne.n	8012ca6 <__libc_init_array+0x2e>
 8012c9a:	bd70      	pop	{r4, r5, r6, pc}
 8012c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ca0:	4798      	blx	r3
 8012ca2:	3601      	adds	r6, #1
 8012ca4:	e7ee      	b.n	8012c84 <__libc_init_array+0xc>
 8012ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012caa:	4798      	blx	r3
 8012cac:	3601      	adds	r6, #1
 8012cae:	e7f2      	b.n	8012c96 <__libc_init_array+0x1e>
 8012cb0:	080165f8 	.word	0x080165f8
 8012cb4:	080165f8 	.word	0x080165f8
 8012cb8:	080165f8 	.word	0x080165f8
 8012cbc:	080165fc 	.word	0x080165fc

08012cc0 <__retarget_lock_init_recursive>:
 8012cc0:	4770      	bx	lr

08012cc2 <__retarget_lock_acquire_recursive>:
 8012cc2:	4770      	bx	lr

08012cc4 <__retarget_lock_release_recursive>:
 8012cc4:	4770      	bx	lr

08012cc6 <strcpy>:
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ccc:	f803 2b01 	strb.w	r2, [r3], #1
 8012cd0:	2a00      	cmp	r2, #0
 8012cd2:	d1f9      	bne.n	8012cc8 <strcpy+0x2>
 8012cd4:	4770      	bx	lr

08012cd6 <memchr>:
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	b510      	push	{r4, lr}
 8012cda:	b2c9      	uxtb	r1, r1
 8012cdc:	4402      	add	r2, r0
 8012cde:	4293      	cmp	r3, r2
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	d101      	bne.n	8012ce8 <memchr+0x12>
 8012ce4:	2000      	movs	r0, #0
 8012ce6:	e003      	b.n	8012cf0 <memchr+0x1a>
 8012ce8:	7804      	ldrb	r4, [r0, #0]
 8012cea:	3301      	adds	r3, #1
 8012cec:	428c      	cmp	r4, r1
 8012cee:	d1f6      	bne.n	8012cde <memchr+0x8>
 8012cf0:	bd10      	pop	{r4, pc}

08012cf2 <memcpy>:
 8012cf2:	440a      	add	r2, r1
 8012cf4:	4291      	cmp	r1, r2
 8012cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8012cfa:	d100      	bne.n	8012cfe <memcpy+0xc>
 8012cfc:	4770      	bx	lr
 8012cfe:	b510      	push	{r4, lr}
 8012d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d04:	4291      	cmp	r1, r2
 8012d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d0a:	d1f9      	bne.n	8012d00 <memcpy+0xe>
 8012d0c:	bd10      	pop	{r4, pc}
	...

08012d10 <nan>:
 8012d10:	2000      	movs	r0, #0
 8012d12:	4901      	ldr	r1, [pc, #4]	@ (8012d18 <nan+0x8>)
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop
 8012d18:	7ff80000 	.word	0x7ff80000

08012d1c <nanf>:
 8012d1c:	4800      	ldr	r0, [pc, #0]	@ (8012d20 <nanf+0x4>)
 8012d1e:	4770      	bx	lr
 8012d20:	7fc00000 	.word	0x7fc00000

08012d24 <abort>:
 8012d24:	2006      	movs	r0, #6
 8012d26:	b508      	push	{r3, lr}
 8012d28:	f002 fa86 	bl	8015238 <raise>
 8012d2c:	2001      	movs	r0, #1
 8012d2e:	f7ee fdc6 	bl	80018be <_exit>

08012d32 <quorem>:
 8012d32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d36:	6903      	ldr	r3, [r0, #16]
 8012d38:	690c      	ldr	r4, [r1, #16]
 8012d3a:	4607      	mov	r7, r0
 8012d3c:	42a3      	cmp	r3, r4
 8012d3e:	db7e      	blt.n	8012e3e <quorem+0x10c>
 8012d40:	3c01      	subs	r4, #1
 8012d42:	00a3      	lsls	r3, r4, #2
 8012d44:	f100 0514 	add.w	r5, r0, #20
 8012d48:	f101 0814 	add.w	r8, r1, #20
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d52:	9301      	str	r3, [sp, #4]
 8012d54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012d58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	fbb2 f6f3 	udiv	r6, r2, r3
 8012d64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012d68:	d32e      	bcc.n	8012dc8 <quorem+0x96>
 8012d6a:	f04f 0a00 	mov.w	sl, #0
 8012d6e:	46c4      	mov	ip, r8
 8012d70:	46ae      	mov	lr, r5
 8012d72:	46d3      	mov	fp, sl
 8012d74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012d78:	b298      	uxth	r0, r3
 8012d7a:	fb06 a000 	mla	r0, r6, r0, sl
 8012d7e:	0c1b      	lsrs	r3, r3, #16
 8012d80:	0c02      	lsrs	r2, r0, #16
 8012d82:	fb06 2303 	mla	r3, r6, r3, r2
 8012d86:	f8de 2000 	ldr.w	r2, [lr]
 8012d8a:	b280      	uxth	r0, r0
 8012d8c:	b292      	uxth	r2, r2
 8012d8e:	1a12      	subs	r2, r2, r0
 8012d90:	445a      	add	r2, fp
 8012d92:	f8de 0000 	ldr.w	r0, [lr]
 8012d96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012da0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012da4:	b292      	uxth	r2, r2
 8012da6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012daa:	45e1      	cmp	r9, ip
 8012dac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012db0:	f84e 2b04 	str.w	r2, [lr], #4
 8012db4:	d2de      	bcs.n	8012d74 <quorem+0x42>
 8012db6:	9b00      	ldr	r3, [sp, #0]
 8012db8:	58eb      	ldr	r3, [r5, r3]
 8012dba:	b92b      	cbnz	r3, 8012dc8 <quorem+0x96>
 8012dbc:	9b01      	ldr	r3, [sp, #4]
 8012dbe:	3b04      	subs	r3, #4
 8012dc0:	429d      	cmp	r5, r3
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	d32f      	bcc.n	8012e26 <quorem+0xf4>
 8012dc6:	613c      	str	r4, [r7, #16]
 8012dc8:	4638      	mov	r0, r7
 8012dca:	f001 fc61 	bl	8014690 <__mcmp>
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	db25      	blt.n	8012e1e <quorem+0xec>
 8012dd2:	4629      	mov	r1, r5
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8012dda:	f8d1 c000 	ldr.w	ip, [r1]
 8012dde:	fa1f fe82 	uxth.w	lr, r2
 8012de2:	fa1f f38c 	uxth.w	r3, ip
 8012de6:	eba3 030e 	sub.w	r3, r3, lr
 8012dea:	4403      	add	r3, r0
 8012dec:	0c12      	lsrs	r2, r2, #16
 8012dee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012df2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012dfc:	45c1      	cmp	r9, r8
 8012dfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012e02:	f841 3b04 	str.w	r3, [r1], #4
 8012e06:	d2e6      	bcs.n	8012dd6 <quorem+0xa4>
 8012e08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e10:	b922      	cbnz	r2, 8012e1c <quorem+0xea>
 8012e12:	3b04      	subs	r3, #4
 8012e14:	429d      	cmp	r5, r3
 8012e16:	461a      	mov	r2, r3
 8012e18:	d30b      	bcc.n	8012e32 <quorem+0x100>
 8012e1a:	613c      	str	r4, [r7, #16]
 8012e1c:	3601      	adds	r6, #1
 8012e1e:	4630      	mov	r0, r6
 8012e20:	b003      	add	sp, #12
 8012e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e26:	6812      	ldr	r2, [r2, #0]
 8012e28:	3b04      	subs	r3, #4
 8012e2a:	2a00      	cmp	r2, #0
 8012e2c:	d1cb      	bne.n	8012dc6 <quorem+0x94>
 8012e2e:	3c01      	subs	r4, #1
 8012e30:	e7c6      	b.n	8012dc0 <quorem+0x8e>
 8012e32:	6812      	ldr	r2, [r2, #0]
 8012e34:	3b04      	subs	r3, #4
 8012e36:	2a00      	cmp	r2, #0
 8012e38:	d1ef      	bne.n	8012e1a <quorem+0xe8>
 8012e3a:	3c01      	subs	r4, #1
 8012e3c:	e7ea      	b.n	8012e14 <quorem+0xe2>
 8012e3e:	2000      	movs	r0, #0
 8012e40:	e7ee      	b.n	8012e20 <quorem+0xee>
 8012e42:	0000      	movs	r0, r0
 8012e44:	0000      	movs	r0, r0
	...

08012e48 <_dtoa_r>:
 8012e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e4c:	4614      	mov	r4, r2
 8012e4e:	461d      	mov	r5, r3
 8012e50:	69c7      	ldr	r7, [r0, #28]
 8012e52:	b097      	sub	sp, #92	@ 0x5c
 8012e54:	4681      	mov	r9, r0
 8012e56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012e5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8012e5c:	b97f      	cbnz	r7, 8012e7e <_dtoa_r+0x36>
 8012e5e:	2010      	movs	r0, #16
 8012e60:	f7fd fdc4 	bl	80109ec <malloc>
 8012e64:	4602      	mov	r2, r0
 8012e66:	f8c9 001c 	str.w	r0, [r9, #28]
 8012e6a:	b920      	cbnz	r0, 8012e76 <_dtoa_r+0x2e>
 8012e6c:	21ef      	movs	r1, #239	@ 0xef
 8012e6e:	4bac      	ldr	r3, [pc, #688]	@ (8013120 <_dtoa_r+0x2d8>)
 8012e70:	48ac      	ldr	r0, [pc, #688]	@ (8013124 <_dtoa_r+0x2dc>)
 8012e72:	f7fd fd95 	bl	80109a0 <__assert_func>
 8012e76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012e7a:	6007      	str	r7, [r0, #0]
 8012e7c:	60c7      	str	r7, [r0, #12]
 8012e7e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012e82:	6819      	ldr	r1, [r3, #0]
 8012e84:	b159      	cbz	r1, 8012e9e <_dtoa_r+0x56>
 8012e86:	685a      	ldr	r2, [r3, #4]
 8012e88:	2301      	movs	r3, #1
 8012e8a:	4093      	lsls	r3, r2
 8012e8c:	604a      	str	r2, [r1, #4]
 8012e8e:	608b      	str	r3, [r1, #8]
 8012e90:	4648      	mov	r0, r9
 8012e92:	f001 f981 	bl	8014198 <_Bfree>
 8012e96:	2200      	movs	r2, #0
 8012e98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012e9c:	601a      	str	r2, [r3, #0]
 8012e9e:	1e2b      	subs	r3, r5, #0
 8012ea0:	bfaf      	iteee	ge
 8012ea2:	2300      	movge	r3, #0
 8012ea4:	2201      	movlt	r2, #1
 8012ea6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012eaa:	9307      	strlt	r3, [sp, #28]
 8012eac:	bfa8      	it	ge
 8012eae:	6033      	strge	r3, [r6, #0]
 8012eb0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8012eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8013128 <_dtoa_r+0x2e0>)
 8012eb6:	bfb8      	it	lt
 8012eb8:	6032      	strlt	r2, [r6, #0]
 8012eba:	ea33 0308 	bics.w	r3, r3, r8
 8012ebe:	d112      	bne.n	8012ee6 <_dtoa_r+0x9e>
 8012ec0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012ec4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012ec6:	6013      	str	r3, [r2, #0]
 8012ec8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012ecc:	4323      	orrs	r3, r4
 8012ece:	f000 855e 	beq.w	801398e <_dtoa_r+0xb46>
 8012ed2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8012ed4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801312c <_dtoa_r+0x2e4>
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	f000 8560 	beq.w	801399e <_dtoa_r+0xb56>
 8012ede:	f10a 0303 	add.w	r3, sl, #3
 8012ee2:	f000 bd5a 	b.w	801399a <_dtoa_r+0xb52>
 8012ee6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012eea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	f7ed fd61 	bl	80009bc <__aeabi_dcmpeq>
 8012efa:	4607      	mov	r7, r0
 8012efc:	b158      	cbz	r0, 8012f16 <_dtoa_r+0xce>
 8012efe:	2301      	movs	r3, #1
 8012f00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012f02:	6013      	str	r3, [r2, #0]
 8012f04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8012f06:	b113      	cbz	r3, 8012f0e <_dtoa_r+0xc6>
 8012f08:	4b89      	ldr	r3, [pc, #548]	@ (8013130 <_dtoa_r+0x2e8>)
 8012f0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8012f0c:	6013      	str	r3, [r2, #0]
 8012f0e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8013134 <_dtoa_r+0x2ec>
 8012f12:	f000 bd44 	b.w	801399e <_dtoa_r+0xb56>
 8012f16:	ab14      	add	r3, sp, #80	@ 0x50
 8012f18:	9301      	str	r3, [sp, #4]
 8012f1a:	ab15      	add	r3, sp, #84	@ 0x54
 8012f1c:	9300      	str	r3, [sp, #0]
 8012f1e:	4648      	mov	r0, r9
 8012f20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012f24:	f001 fccc 	bl	80148c0 <__d2b>
 8012f28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8012f2c:	9003      	str	r0, [sp, #12]
 8012f2e:	2e00      	cmp	r6, #0
 8012f30:	d078      	beq.n	8013024 <_dtoa_r+0x1dc>
 8012f32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012f36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012f38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012f44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012f48:	9712      	str	r7, [sp, #72]	@ 0x48
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8013138 <_dtoa_r+0x2f0>)
 8012f50:	f7ed f914 	bl	800017c <__aeabi_dsub>
 8012f54:	a36c      	add	r3, pc, #432	@ (adr r3, 8013108 <_dtoa_r+0x2c0>)
 8012f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5a:	f7ed fac7 	bl	80004ec <__aeabi_dmul>
 8012f5e:	a36c      	add	r3, pc, #432	@ (adr r3, 8013110 <_dtoa_r+0x2c8>)
 8012f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f64:	f7ed f90c 	bl	8000180 <__adddf3>
 8012f68:	4604      	mov	r4, r0
 8012f6a:	4630      	mov	r0, r6
 8012f6c:	460d      	mov	r5, r1
 8012f6e:	f7ed fa53 	bl	8000418 <__aeabi_i2d>
 8012f72:	a369      	add	r3, pc, #420	@ (adr r3, 8013118 <_dtoa_r+0x2d0>)
 8012f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f78:	f7ed fab8 	bl	80004ec <__aeabi_dmul>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	460b      	mov	r3, r1
 8012f80:	4620      	mov	r0, r4
 8012f82:	4629      	mov	r1, r5
 8012f84:	f7ed f8fc 	bl	8000180 <__adddf3>
 8012f88:	4604      	mov	r4, r0
 8012f8a:	460d      	mov	r5, r1
 8012f8c:	f7ed fd5e 	bl	8000a4c <__aeabi_d2iz>
 8012f90:	2200      	movs	r2, #0
 8012f92:	4607      	mov	r7, r0
 8012f94:	2300      	movs	r3, #0
 8012f96:	4620      	mov	r0, r4
 8012f98:	4629      	mov	r1, r5
 8012f9a:	f7ed fd19 	bl	80009d0 <__aeabi_dcmplt>
 8012f9e:	b140      	cbz	r0, 8012fb2 <_dtoa_r+0x16a>
 8012fa0:	4638      	mov	r0, r7
 8012fa2:	f7ed fa39 	bl	8000418 <__aeabi_i2d>
 8012fa6:	4622      	mov	r2, r4
 8012fa8:	462b      	mov	r3, r5
 8012faa:	f7ed fd07 	bl	80009bc <__aeabi_dcmpeq>
 8012fae:	b900      	cbnz	r0, 8012fb2 <_dtoa_r+0x16a>
 8012fb0:	3f01      	subs	r7, #1
 8012fb2:	2f16      	cmp	r7, #22
 8012fb4:	d854      	bhi.n	8013060 <_dtoa_r+0x218>
 8012fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012fba:	4b60      	ldr	r3, [pc, #384]	@ (801313c <_dtoa_r+0x2f4>)
 8012fbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc4:	f7ed fd04 	bl	80009d0 <__aeabi_dcmplt>
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	d04b      	beq.n	8013064 <_dtoa_r+0x21c>
 8012fcc:	2300      	movs	r3, #0
 8012fce:	3f01      	subs	r7, #1
 8012fd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012fd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012fd4:	1b9b      	subs	r3, r3, r6
 8012fd6:	1e5a      	subs	r2, r3, #1
 8012fd8:	bf49      	itett	mi
 8012fda:	f1c3 0301 	rsbmi	r3, r3, #1
 8012fde:	2300      	movpl	r3, #0
 8012fe0:	9304      	strmi	r3, [sp, #16]
 8012fe2:	2300      	movmi	r3, #0
 8012fe4:	9209      	str	r2, [sp, #36]	@ 0x24
 8012fe6:	bf54      	ite	pl
 8012fe8:	9304      	strpl	r3, [sp, #16]
 8012fea:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8012fec:	2f00      	cmp	r7, #0
 8012fee:	db3b      	blt.n	8013068 <_dtoa_r+0x220>
 8012ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ff2:	970e      	str	r7, [sp, #56]	@ 0x38
 8012ff4:	443b      	add	r3, r7
 8012ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ffc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012ffe:	2b09      	cmp	r3, #9
 8013000:	d865      	bhi.n	80130ce <_dtoa_r+0x286>
 8013002:	2b05      	cmp	r3, #5
 8013004:	bfc4      	itt	gt
 8013006:	3b04      	subgt	r3, #4
 8013008:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801300a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801300c:	bfc8      	it	gt
 801300e:	2400      	movgt	r4, #0
 8013010:	f1a3 0302 	sub.w	r3, r3, #2
 8013014:	bfd8      	it	le
 8013016:	2401      	movle	r4, #1
 8013018:	2b03      	cmp	r3, #3
 801301a:	d864      	bhi.n	80130e6 <_dtoa_r+0x29e>
 801301c:	e8df f003 	tbb	[pc, r3]
 8013020:	2c385553 	.word	0x2c385553
 8013024:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8013028:	441e      	add	r6, r3
 801302a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801302e:	2b20      	cmp	r3, #32
 8013030:	bfc1      	itttt	gt
 8013032:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013036:	fa08 f803 	lslgt.w	r8, r8, r3
 801303a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801303e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013042:	bfd6      	itet	le
 8013044:	f1c3 0320 	rsble	r3, r3, #32
 8013048:	ea48 0003 	orrgt.w	r0, r8, r3
 801304c:	fa04 f003 	lslle.w	r0, r4, r3
 8013050:	f7ed f9d2 	bl	80003f8 <__aeabi_ui2d>
 8013054:	2201      	movs	r2, #1
 8013056:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801305a:	3e01      	subs	r6, #1
 801305c:	9212      	str	r2, [sp, #72]	@ 0x48
 801305e:	e774      	b.n	8012f4a <_dtoa_r+0x102>
 8013060:	2301      	movs	r3, #1
 8013062:	e7b5      	b.n	8012fd0 <_dtoa_r+0x188>
 8013064:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013066:	e7b4      	b.n	8012fd2 <_dtoa_r+0x18a>
 8013068:	9b04      	ldr	r3, [sp, #16]
 801306a:	1bdb      	subs	r3, r3, r7
 801306c:	9304      	str	r3, [sp, #16]
 801306e:	427b      	negs	r3, r7
 8013070:	930a      	str	r3, [sp, #40]	@ 0x28
 8013072:	2300      	movs	r3, #0
 8013074:	930e      	str	r3, [sp, #56]	@ 0x38
 8013076:	e7c1      	b.n	8012ffc <_dtoa_r+0x1b4>
 8013078:	2301      	movs	r3, #1
 801307a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801307c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801307e:	eb07 0b03 	add.w	fp, r7, r3
 8013082:	f10b 0301 	add.w	r3, fp, #1
 8013086:	2b01      	cmp	r3, #1
 8013088:	9308      	str	r3, [sp, #32]
 801308a:	bfb8      	it	lt
 801308c:	2301      	movlt	r3, #1
 801308e:	e006      	b.n	801309e <_dtoa_r+0x256>
 8013090:	2301      	movs	r3, #1
 8013092:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013094:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013096:	2b00      	cmp	r3, #0
 8013098:	dd28      	ble.n	80130ec <_dtoa_r+0x2a4>
 801309a:	469b      	mov	fp, r3
 801309c:	9308      	str	r3, [sp, #32]
 801309e:	2100      	movs	r1, #0
 80130a0:	2204      	movs	r2, #4
 80130a2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80130a6:	f102 0514 	add.w	r5, r2, #20
 80130aa:	429d      	cmp	r5, r3
 80130ac:	d926      	bls.n	80130fc <_dtoa_r+0x2b4>
 80130ae:	6041      	str	r1, [r0, #4]
 80130b0:	4648      	mov	r0, r9
 80130b2:	f001 f831 	bl	8014118 <_Balloc>
 80130b6:	4682      	mov	sl, r0
 80130b8:	2800      	cmp	r0, #0
 80130ba:	d143      	bne.n	8013144 <_dtoa_r+0x2fc>
 80130bc:	4602      	mov	r2, r0
 80130be:	f240 11af 	movw	r1, #431	@ 0x1af
 80130c2:	4b1f      	ldr	r3, [pc, #124]	@ (8013140 <_dtoa_r+0x2f8>)
 80130c4:	e6d4      	b.n	8012e70 <_dtoa_r+0x28>
 80130c6:	2300      	movs	r3, #0
 80130c8:	e7e3      	b.n	8013092 <_dtoa_r+0x24a>
 80130ca:	2300      	movs	r3, #0
 80130cc:	e7d5      	b.n	801307a <_dtoa_r+0x232>
 80130ce:	2401      	movs	r4, #1
 80130d0:	2300      	movs	r3, #0
 80130d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80130d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80130d6:	f04f 3bff 	mov.w	fp, #4294967295
 80130da:	2200      	movs	r2, #0
 80130dc:	2312      	movs	r3, #18
 80130de:	f8cd b020 	str.w	fp, [sp, #32]
 80130e2:	9221      	str	r2, [sp, #132]	@ 0x84
 80130e4:	e7db      	b.n	801309e <_dtoa_r+0x256>
 80130e6:	2301      	movs	r3, #1
 80130e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130ea:	e7f4      	b.n	80130d6 <_dtoa_r+0x28e>
 80130ec:	f04f 0b01 	mov.w	fp, #1
 80130f0:	465b      	mov	r3, fp
 80130f2:	f8cd b020 	str.w	fp, [sp, #32]
 80130f6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80130fa:	e7d0      	b.n	801309e <_dtoa_r+0x256>
 80130fc:	3101      	adds	r1, #1
 80130fe:	0052      	lsls	r2, r2, #1
 8013100:	e7d1      	b.n	80130a6 <_dtoa_r+0x25e>
 8013102:	bf00      	nop
 8013104:	f3af 8000 	nop.w
 8013108:	636f4361 	.word	0x636f4361
 801310c:	3fd287a7 	.word	0x3fd287a7
 8013110:	8b60c8b3 	.word	0x8b60c8b3
 8013114:	3fc68a28 	.word	0x3fc68a28
 8013118:	509f79fb 	.word	0x509f79fb
 801311c:	3fd34413 	.word	0x3fd34413
 8013120:	080161e0 	.word	0x080161e0
 8013124:	08016266 	.word	0x08016266
 8013128:	7ff00000 	.word	0x7ff00000
 801312c:	08016262 	.word	0x08016262
 8013130:	080161b8 	.word	0x080161b8
 8013134:	080161b7 	.word	0x080161b7
 8013138:	3ff80000 	.word	0x3ff80000
 801313c:	08016528 	.word	0x08016528
 8013140:	080162be 	.word	0x080162be
 8013144:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013148:	6018      	str	r0, [r3, #0]
 801314a:	9b08      	ldr	r3, [sp, #32]
 801314c:	2b0e      	cmp	r3, #14
 801314e:	f200 80a1 	bhi.w	8013294 <_dtoa_r+0x44c>
 8013152:	2c00      	cmp	r4, #0
 8013154:	f000 809e 	beq.w	8013294 <_dtoa_r+0x44c>
 8013158:	2f00      	cmp	r7, #0
 801315a:	dd33      	ble.n	80131c4 <_dtoa_r+0x37c>
 801315c:	4b9c      	ldr	r3, [pc, #624]	@ (80133d0 <_dtoa_r+0x588>)
 801315e:	f007 020f 	and.w	r2, r7, #15
 8013162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013166:	05f8      	lsls	r0, r7, #23
 8013168:	e9d3 3400 	ldrd	r3, r4, [r3]
 801316c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8013170:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013174:	d516      	bpl.n	80131a4 <_dtoa_r+0x35c>
 8013176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801317a:	4b96      	ldr	r3, [pc, #600]	@ (80133d4 <_dtoa_r+0x58c>)
 801317c:	2603      	movs	r6, #3
 801317e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013182:	f7ed fadd 	bl	8000740 <__aeabi_ddiv>
 8013186:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801318a:	f004 040f 	and.w	r4, r4, #15
 801318e:	4d91      	ldr	r5, [pc, #580]	@ (80133d4 <_dtoa_r+0x58c>)
 8013190:	b954      	cbnz	r4, 80131a8 <_dtoa_r+0x360>
 8013192:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801319a:	f7ed fad1 	bl	8000740 <__aeabi_ddiv>
 801319e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80131a2:	e028      	b.n	80131f6 <_dtoa_r+0x3ae>
 80131a4:	2602      	movs	r6, #2
 80131a6:	e7f2      	b.n	801318e <_dtoa_r+0x346>
 80131a8:	07e1      	lsls	r1, r4, #31
 80131aa:	d508      	bpl.n	80131be <_dtoa_r+0x376>
 80131ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80131b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80131b4:	f7ed f99a 	bl	80004ec <__aeabi_dmul>
 80131b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80131bc:	3601      	adds	r6, #1
 80131be:	1064      	asrs	r4, r4, #1
 80131c0:	3508      	adds	r5, #8
 80131c2:	e7e5      	b.n	8013190 <_dtoa_r+0x348>
 80131c4:	f000 80af 	beq.w	8013326 <_dtoa_r+0x4de>
 80131c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80131cc:	427c      	negs	r4, r7
 80131ce:	4b80      	ldr	r3, [pc, #512]	@ (80133d0 <_dtoa_r+0x588>)
 80131d0:	f004 020f 	and.w	r2, r4, #15
 80131d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131dc:	f7ed f986 	bl	80004ec <__aeabi_dmul>
 80131e0:	2602      	movs	r6, #2
 80131e2:	2300      	movs	r3, #0
 80131e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80131e8:	4d7a      	ldr	r5, [pc, #488]	@ (80133d4 <_dtoa_r+0x58c>)
 80131ea:	1124      	asrs	r4, r4, #4
 80131ec:	2c00      	cmp	r4, #0
 80131ee:	f040 808f 	bne.w	8013310 <_dtoa_r+0x4c8>
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d1d3      	bne.n	801319e <_dtoa_r+0x356>
 80131f6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80131fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	f000 8094 	beq.w	801332a <_dtoa_r+0x4e2>
 8013202:	2200      	movs	r2, #0
 8013204:	4620      	mov	r0, r4
 8013206:	4629      	mov	r1, r5
 8013208:	4b73      	ldr	r3, [pc, #460]	@ (80133d8 <_dtoa_r+0x590>)
 801320a:	f7ed fbe1 	bl	80009d0 <__aeabi_dcmplt>
 801320e:	2800      	cmp	r0, #0
 8013210:	f000 808b 	beq.w	801332a <_dtoa_r+0x4e2>
 8013214:	9b08      	ldr	r3, [sp, #32]
 8013216:	2b00      	cmp	r3, #0
 8013218:	f000 8087 	beq.w	801332a <_dtoa_r+0x4e2>
 801321c:	f1bb 0f00 	cmp.w	fp, #0
 8013220:	dd34      	ble.n	801328c <_dtoa_r+0x444>
 8013222:	4620      	mov	r0, r4
 8013224:	2200      	movs	r2, #0
 8013226:	4629      	mov	r1, r5
 8013228:	4b6c      	ldr	r3, [pc, #432]	@ (80133dc <_dtoa_r+0x594>)
 801322a:	f7ed f95f 	bl	80004ec <__aeabi_dmul>
 801322e:	465c      	mov	r4, fp
 8013230:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013234:	f107 38ff 	add.w	r8, r7, #4294967295
 8013238:	3601      	adds	r6, #1
 801323a:	4630      	mov	r0, r6
 801323c:	f7ed f8ec 	bl	8000418 <__aeabi_i2d>
 8013240:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013244:	f7ed f952 	bl	80004ec <__aeabi_dmul>
 8013248:	2200      	movs	r2, #0
 801324a:	4b65      	ldr	r3, [pc, #404]	@ (80133e0 <_dtoa_r+0x598>)
 801324c:	f7ec ff98 	bl	8000180 <__adddf3>
 8013250:	4605      	mov	r5, r0
 8013252:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013256:	2c00      	cmp	r4, #0
 8013258:	d16a      	bne.n	8013330 <_dtoa_r+0x4e8>
 801325a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801325e:	2200      	movs	r2, #0
 8013260:	4b60      	ldr	r3, [pc, #384]	@ (80133e4 <_dtoa_r+0x59c>)
 8013262:	f7ec ff8b 	bl	800017c <__aeabi_dsub>
 8013266:	4602      	mov	r2, r0
 8013268:	460b      	mov	r3, r1
 801326a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801326e:	462a      	mov	r2, r5
 8013270:	4633      	mov	r3, r6
 8013272:	f7ed fbcb 	bl	8000a0c <__aeabi_dcmpgt>
 8013276:	2800      	cmp	r0, #0
 8013278:	f040 8298 	bne.w	80137ac <_dtoa_r+0x964>
 801327c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013280:	462a      	mov	r2, r5
 8013282:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013286:	f7ed fba3 	bl	80009d0 <__aeabi_dcmplt>
 801328a:	bb38      	cbnz	r0, 80132dc <_dtoa_r+0x494>
 801328c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013290:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8013294:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013296:	2b00      	cmp	r3, #0
 8013298:	f2c0 8157 	blt.w	801354a <_dtoa_r+0x702>
 801329c:	2f0e      	cmp	r7, #14
 801329e:	f300 8154 	bgt.w	801354a <_dtoa_r+0x702>
 80132a2:	4b4b      	ldr	r3, [pc, #300]	@ (80133d0 <_dtoa_r+0x588>)
 80132a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80132a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80132ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80132b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	f280 80e5 	bge.w	8013482 <_dtoa_r+0x63a>
 80132b8:	9b08      	ldr	r3, [sp, #32]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	f300 80e1 	bgt.w	8013482 <_dtoa_r+0x63a>
 80132c0:	d10c      	bne.n	80132dc <_dtoa_r+0x494>
 80132c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80132c6:	2200      	movs	r2, #0
 80132c8:	4b46      	ldr	r3, [pc, #280]	@ (80133e4 <_dtoa_r+0x59c>)
 80132ca:	f7ed f90f 	bl	80004ec <__aeabi_dmul>
 80132ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80132d2:	f7ed fb91 	bl	80009f8 <__aeabi_dcmpge>
 80132d6:	2800      	cmp	r0, #0
 80132d8:	f000 8266 	beq.w	80137a8 <_dtoa_r+0x960>
 80132dc:	2400      	movs	r4, #0
 80132de:	4625      	mov	r5, r4
 80132e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80132e2:	4656      	mov	r6, sl
 80132e4:	ea6f 0803 	mvn.w	r8, r3
 80132e8:	2700      	movs	r7, #0
 80132ea:	4621      	mov	r1, r4
 80132ec:	4648      	mov	r0, r9
 80132ee:	f000 ff53 	bl	8014198 <_Bfree>
 80132f2:	2d00      	cmp	r5, #0
 80132f4:	f000 80bd 	beq.w	8013472 <_dtoa_r+0x62a>
 80132f8:	b12f      	cbz	r7, 8013306 <_dtoa_r+0x4be>
 80132fa:	42af      	cmp	r7, r5
 80132fc:	d003      	beq.n	8013306 <_dtoa_r+0x4be>
 80132fe:	4639      	mov	r1, r7
 8013300:	4648      	mov	r0, r9
 8013302:	f000 ff49 	bl	8014198 <_Bfree>
 8013306:	4629      	mov	r1, r5
 8013308:	4648      	mov	r0, r9
 801330a:	f000 ff45 	bl	8014198 <_Bfree>
 801330e:	e0b0      	b.n	8013472 <_dtoa_r+0x62a>
 8013310:	07e2      	lsls	r2, r4, #31
 8013312:	d505      	bpl.n	8013320 <_dtoa_r+0x4d8>
 8013314:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013318:	f7ed f8e8 	bl	80004ec <__aeabi_dmul>
 801331c:	2301      	movs	r3, #1
 801331e:	3601      	adds	r6, #1
 8013320:	1064      	asrs	r4, r4, #1
 8013322:	3508      	adds	r5, #8
 8013324:	e762      	b.n	80131ec <_dtoa_r+0x3a4>
 8013326:	2602      	movs	r6, #2
 8013328:	e765      	b.n	80131f6 <_dtoa_r+0x3ae>
 801332a:	46b8      	mov	r8, r7
 801332c:	9c08      	ldr	r4, [sp, #32]
 801332e:	e784      	b.n	801323a <_dtoa_r+0x3f2>
 8013330:	4b27      	ldr	r3, [pc, #156]	@ (80133d0 <_dtoa_r+0x588>)
 8013332:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013334:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013338:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801333c:	4454      	add	r4, sl
 801333e:	2900      	cmp	r1, #0
 8013340:	d054      	beq.n	80133ec <_dtoa_r+0x5a4>
 8013342:	2000      	movs	r0, #0
 8013344:	4928      	ldr	r1, [pc, #160]	@ (80133e8 <_dtoa_r+0x5a0>)
 8013346:	f7ed f9fb 	bl	8000740 <__aeabi_ddiv>
 801334a:	4633      	mov	r3, r6
 801334c:	462a      	mov	r2, r5
 801334e:	f7ec ff15 	bl	800017c <__aeabi_dsub>
 8013352:	4656      	mov	r6, sl
 8013354:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801335c:	f7ed fb76 	bl	8000a4c <__aeabi_d2iz>
 8013360:	4605      	mov	r5, r0
 8013362:	f7ed f859 	bl	8000418 <__aeabi_i2d>
 8013366:	4602      	mov	r2, r0
 8013368:	460b      	mov	r3, r1
 801336a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801336e:	f7ec ff05 	bl	800017c <__aeabi_dsub>
 8013372:	4602      	mov	r2, r0
 8013374:	460b      	mov	r3, r1
 8013376:	3530      	adds	r5, #48	@ 0x30
 8013378:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801337c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013380:	f806 5b01 	strb.w	r5, [r6], #1
 8013384:	f7ed fb24 	bl	80009d0 <__aeabi_dcmplt>
 8013388:	2800      	cmp	r0, #0
 801338a:	d172      	bne.n	8013472 <_dtoa_r+0x62a>
 801338c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013390:	2000      	movs	r0, #0
 8013392:	4911      	ldr	r1, [pc, #68]	@ (80133d8 <_dtoa_r+0x590>)
 8013394:	f7ec fef2 	bl	800017c <__aeabi_dsub>
 8013398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801339c:	f7ed fb18 	bl	80009d0 <__aeabi_dcmplt>
 80133a0:	2800      	cmp	r0, #0
 80133a2:	f040 80b4 	bne.w	801350e <_dtoa_r+0x6c6>
 80133a6:	42a6      	cmp	r6, r4
 80133a8:	f43f af70 	beq.w	801328c <_dtoa_r+0x444>
 80133ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80133b0:	2200      	movs	r2, #0
 80133b2:	4b0a      	ldr	r3, [pc, #40]	@ (80133dc <_dtoa_r+0x594>)
 80133b4:	f7ed f89a 	bl	80004ec <__aeabi_dmul>
 80133b8:	2200      	movs	r2, #0
 80133ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80133be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80133c2:	4b06      	ldr	r3, [pc, #24]	@ (80133dc <_dtoa_r+0x594>)
 80133c4:	f7ed f892 	bl	80004ec <__aeabi_dmul>
 80133c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80133cc:	e7c4      	b.n	8013358 <_dtoa_r+0x510>
 80133ce:	bf00      	nop
 80133d0:	08016528 	.word	0x08016528
 80133d4:	08016500 	.word	0x08016500
 80133d8:	3ff00000 	.word	0x3ff00000
 80133dc:	40240000 	.word	0x40240000
 80133e0:	401c0000 	.word	0x401c0000
 80133e4:	40140000 	.word	0x40140000
 80133e8:	3fe00000 	.word	0x3fe00000
 80133ec:	4631      	mov	r1, r6
 80133ee:	4628      	mov	r0, r5
 80133f0:	f7ed f87c 	bl	80004ec <__aeabi_dmul>
 80133f4:	4656      	mov	r6, sl
 80133f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80133fa:	9413      	str	r4, [sp, #76]	@ 0x4c
 80133fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013400:	f7ed fb24 	bl	8000a4c <__aeabi_d2iz>
 8013404:	4605      	mov	r5, r0
 8013406:	f7ed f807 	bl	8000418 <__aeabi_i2d>
 801340a:	4602      	mov	r2, r0
 801340c:	460b      	mov	r3, r1
 801340e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013412:	f7ec feb3 	bl	800017c <__aeabi_dsub>
 8013416:	4602      	mov	r2, r0
 8013418:	460b      	mov	r3, r1
 801341a:	3530      	adds	r5, #48	@ 0x30
 801341c:	f806 5b01 	strb.w	r5, [r6], #1
 8013420:	42a6      	cmp	r6, r4
 8013422:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013426:	f04f 0200 	mov.w	r2, #0
 801342a:	d124      	bne.n	8013476 <_dtoa_r+0x62e>
 801342c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013430:	4bae      	ldr	r3, [pc, #696]	@ (80136ec <_dtoa_r+0x8a4>)
 8013432:	f7ec fea5 	bl	8000180 <__adddf3>
 8013436:	4602      	mov	r2, r0
 8013438:	460b      	mov	r3, r1
 801343a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801343e:	f7ed fae5 	bl	8000a0c <__aeabi_dcmpgt>
 8013442:	2800      	cmp	r0, #0
 8013444:	d163      	bne.n	801350e <_dtoa_r+0x6c6>
 8013446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801344a:	2000      	movs	r0, #0
 801344c:	49a7      	ldr	r1, [pc, #668]	@ (80136ec <_dtoa_r+0x8a4>)
 801344e:	f7ec fe95 	bl	800017c <__aeabi_dsub>
 8013452:	4602      	mov	r2, r0
 8013454:	460b      	mov	r3, r1
 8013456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801345a:	f7ed fab9 	bl	80009d0 <__aeabi_dcmplt>
 801345e:	2800      	cmp	r0, #0
 8013460:	f43f af14 	beq.w	801328c <_dtoa_r+0x444>
 8013464:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013466:	1e73      	subs	r3, r6, #1
 8013468:	9313      	str	r3, [sp, #76]	@ 0x4c
 801346a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801346e:	2b30      	cmp	r3, #48	@ 0x30
 8013470:	d0f8      	beq.n	8013464 <_dtoa_r+0x61c>
 8013472:	4647      	mov	r7, r8
 8013474:	e03b      	b.n	80134ee <_dtoa_r+0x6a6>
 8013476:	4b9e      	ldr	r3, [pc, #632]	@ (80136f0 <_dtoa_r+0x8a8>)
 8013478:	f7ed f838 	bl	80004ec <__aeabi_dmul>
 801347c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013480:	e7bc      	b.n	80133fc <_dtoa_r+0x5b4>
 8013482:	4656      	mov	r6, sl
 8013484:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8013488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801348c:	4620      	mov	r0, r4
 801348e:	4629      	mov	r1, r5
 8013490:	f7ed f956 	bl	8000740 <__aeabi_ddiv>
 8013494:	f7ed fada 	bl	8000a4c <__aeabi_d2iz>
 8013498:	4680      	mov	r8, r0
 801349a:	f7ec ffbd 	bl	8000418 <__aeabi_i2d>
 801349e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134a2:	f7ed f823 	bl	80004ec <__aeabi_dmul>
 80134a6:	4602      	mov	r2, r0
 80134a8:	460b      	mov	r3, r1
 80134aa:	4620      	mov	r0, r4
 80134ac:	4629      	mov	r1, r5
 80134ae:	f7ec fe65 	bl	800017c <__aeabi_dsub>
 80134b2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80134b6:	9d08      	ldr	r5, [sp, #32]
 80134b8:	f806 4b01 	strb.w	r4, [r6], #1
 80134bc:	eba6 040a 	sub.w	r4, r6, sl
 80134c0:	42a5      	cmp	r5, r4
 80134c2:	4602      	mov	r2, r0
 80134c4:	460b      	mov	r3, r1
 80134c6:	d133      	bne.n	8013530 <_dtoa_r+0x6e8>
 80134c8:	f7ec fe5a 	bl	8000180 <__adddf3>
 80134cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134d0:	4604      	mov	r4, r0
 80134d2:	460d      	mov	r5, r1
 80134d4:	f7ed fa9a 	bl	8000a0c <__aeabi_dcmpgt>
 80134d8:	b9c0      	cbnz	r0, 801350c <_dtoa_r+0x6c4>
 80134da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134de:	4620      	mov	r0, r4
 80134e0:	4629      	mov	r1, r5
 80134e2:	f7ed fa6b 	bl	80009bc <__aeabi_dcmpeq>
 80134e6:	b110      	cbz	r0, 80134ee <_dtoa_r+0x6a6>
 80134e8:	f018 0f01 	tst.w	r8, #1
 80134ec:	d10e      	bne.n	801350c <_dtoa_r+0x6c4>
 80134ee:	4648      	mov	r0, r9
 80134f0:	9903      	ldr	r1, [sp, #12]
 80134f2:	f000 fe51 	bl	8014198 <_Bfree>
 80134f6:	2300      	movs	r3, #0
 80134f8:	7033      	strb	r3, [r6, #0]
 80134fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80134fc:	3701      	adds	r7, #1
 80134fe:	601f      	str	r7, [r3, #0]
 8013500:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8013502:	2b00      	cmp	r3, #0
 8013504:	f000 824b 	beq.w	801399e <_dtoa_r+0xb56>
 8013508:	601e      	str	r6, [r3, #0]
 801350a:	e248      	b.n	801399e <_dtoa_r+0xb56>
 801350c:	46b8      	mov	r8, r7
 801350e:	4633      	mov	r3, r6
 8013510:	461e      	mov	r6, r3
 8013512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013516:	2a39      	cmp	r2, #57	@ 0x39
 8013518:	d106      	bne.n	8013528 <_dtoa_r+0x6e0>
 801351a:	459a      	cmp	sl, r3
 801351c:	d1f8      	bne.n	8013510 <_dtoa_r+0x6c8>
 801351e:	2230      	movs	r2, #48	@ 0x30
 8013520:	f108 0801 	add.w	r8, r8, #1
 8013524:	f88a 2000 	strb.w	r2, [sl]
 8013528:	781a      	ldrb	r2, [r3, #0]
 801352a:	3201      	adds	r2, #1
 801352c:	701a      	strb	r2, [r3, #0]
 801352e:	e7a0      	b.n	8013472 <_dtoa_r+0x62a>
 8013530:	2200      	movs	r2, #0
 8013532:	4b6f      	ldr	r3, [pc, #444]	@ (80136f0 <_dtoa_r+0x8a8>)
 8013534:	f7ec ffda 	bl	80004ec <__aeabi_dmul>
 8013538:	2200      	movs	r2, #0
 801353a:	2300      	movs	r3, #0
 801353c:	4604      	mov	r4, r0
 801353e:	460d      	mov	r5, r1
 8013540:	f7ed fa3c 	bl	80009bc <__aeabi_dcmpeq>
 8013544:	2800      	cmp	r0, #0
 8013546:	d09f      	beq.n	8013488 <_dtoa_r+0x640>
 8013548:	e7d1      	b.n	80134ee <_dtoa_r+0x6a6>
 801354a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801354c:	2a00      	cmp	r2, #0
 801354e:	f000 80ea 	beq.w	8013726 <_dtoa_r+0x8de>
 8013552:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013554:	2a01      	cmp	r2, #1
 8013556:	f300 80cd 	bgt.w	80136f4 <_dtoa_r+0x8ac>
 801355a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801355c:	2a00      	cmp	r2, #0
 801355e:	f000 80c1 	beq.w	80136e4 <_dtoa_r+0x89c>
 8013562:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013566:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013568:	9e04      	ldr	r6, [sp, #16]
 801356a:	9a04      	ldr	r2, [sp, #16]
 801356c:	2101      	movs	r1, #1
 801356e:	441a      	add	r2, r3
 8013570:	9204      	str	r2, [sp, #16]
 8013572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013574:	4648      	mov	r0, r9
 8013576:	441a      	add	r2, r3
 8013578:	9209      	str	r2, [sp, #36]	@ 0x24
 801357a:	f000 ff0b 	bl	8014394 <__i2b>
 801357e:	4605      	mov	r5, r0
 8013580:	b166      	cbz	r6, 801359c <_dtoa_r+0x754>
 8013582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013584:	2b00      	cmp	r3, #0
 8013586:	dd09      	ble.n	801359c <_dtoa_r+0x754>
 8013588:	42b3      	cmp	r3, r6
 801358a:	bfa8      	it	ge
 801358c:	4633      	movge	r3, r6
 801358e:	9a04      	ldr	r2, [sp, #16]
 8013590:	1af6      	subs	r6, r6, r3
 8013592:	1ad2      	subs	r2, r2, r3
 8013594:	9204      	str	r2, [sp, #16]
 8013596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013598:	1ad3      	subs	r3, r2, r3
 801359a:	9309      	str	r3, [sp, #36]	@ 0x24
 801359c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801359e:	b30b      	cbz	r3, 80135e4 <_dtoa_r+0x79c>
 80135a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	f000 80c6 	beq.w	8013734 <_dtoa_r+0x8ec>
 80135a8:	2c00      	cmp	r4, #0
 80135aa:	f000 80c0 	beq.w	801372e <_dtoa_r+0x8e6>
 80135ae:	4629      	mov	r1, r5
 80135b0:	4622      	mov	r2, r4
 80135b2:	4648      	mov	r0, r9
 80135b4:	f000 ffa6 	bl	8014504 <__pow5mult>
 80135b8:	9a03      	ldr	r2, [sp, #12]
 80135ba:	4601      	mov	r1, r0
 80135bc:	4605      	mov	r5, r0
 80135be:	4648      	mov	r0, r9
 80135c0:	f000 fefe 	bl	80143c0 <__multiply>
 80135c4:	9903      	ldr	r1, [sp, #12]
 80135c6:	4680      	mov	r8, r0
 80135c8:	4648      	mov	r0, r9
 80135ca:	f000 fde5 	bl	8014198 <_Bfree>
 80135ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135d0:	1b1b      	subs	r3, r3, r4
 80135d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80135d4:	f000 80b1 	beq.w	801373a <_dtoa_r+0x8f2>
 80135d8:	4641      	mov	r1, r8
 80135da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80135dc:	4648      	mov	r0, r9
 80135de:	f000 ff91 	bl	8014504 <__pow5mult>
 80135e2:	9003      	str	r0, [sp, #12]
 80135e4:	2101      	movs	r1, #1
 80135e6:	4648      	mov	r0, r9
 80135e8:	f000 fed4 	bl	8014394 <__i2b>
 80135ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135ee:	4604      	mov	r4, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	f000 81d8 	beq.w	80139a6 <_dtoa_r+0xb5e>
 80135f6:	461a      	mov	r2, r3
 80135f8:	4601      	mov	r1, r0
 80135fa:	4648      	mov	r0, r9
 80135fc:	f000 ff82 	bl	8014504 <__pow5mult>
 8013600:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013602:	4604      	mov	r4, r0
 8013604:	2b01      	cmp	r3, #1
 8013606:	f300 809f 	bgt.w	8013748 <_dtoa_r+0x900>
 801360a:	9b06      	ldr	r3, [sp, #24]
 801360c:	2b00      	cmp	r3, #0
 801360e:	f040 8097 	bne.w	8013740 <_dtoa_r+0x8f8>
 8013612:	9b07      	ldr	r3, [sp, #28]
 8013614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013618:	2b00      	cmp	r3, #0
 801361a:	f040 8093 	bne.w	8013744 <_dtoa_r+0x8fc>
 801361e:	9b07      	ldr	r3, [sp, #28]
 8013620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013624:	0d1b      	lsrs	r3, r3, #20
 8013626:	051b      	lsls	r3, r3, #20
 8013628:	b133      	cbz	r3, 8013638 <_dtoa_r+0x7f0>
 801362a:	9b04      	ldr	r3, [sp, #16]
 801362c:	3301      	adds	r3, #1
 801362e:	9304      	str	r3, [sp, #16]
 8013630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013632:	3301      	adds	r3, #1
 8013634:	9309      	str	r3, [sp, #36]	@ 0x24
 8013636:	2301      	movs	r3, #1
 8013638:	930a      	str	r3, [sp, #40]	@ 0x28
 801363a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801363c:	2b00      	cmp	r3, #0
 801363e:	f000 81b8 	beq.w	80139b2 <_dtoa_r+0xb6a>
 8013642:	6923      	ldr	r3, [r4, #16]
 8013644:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013648:	6918      	ldr	r0, [r3, #16]
 801364a:	f000 fe57 	bl	80142fc <__hi0bits>
 801364e:	f1c0 0020 	rsb	r0, r0, #32
 8013652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013654:	4418      	add	r0, r3
 8013656:	f010 001f 	ands.w	r0, r0, #31
 801365a:	f000 8082 	beq.w	8013762 <_dtoa_r+0x91a>
 801365e:	f1c0 0320 	rsb	r3, r0, #32
 8013662:	2b04      	cmp	r3, #4
 8013664:	dd73      	ble.n	801374e <_dtoa_r+0x906>
 8013666:	9b04      	ldr	r3, [sp, #16]
 8013668:	f1c0 001c 	rsb	r0, r0, #28
 801366c:	4403      	add	r3, r0
 801366e:	9304      	str	r3, [sp, #16]
 8013670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013672:	4406      	add	r6, r0
 8013674:	4403      	add	r3, r0
 8013676:	9309      	str	r3, [sp, #36]	@ 0x24
 8013678:	9b04      	ldr	r3, [sp, #16]
 801367a:	2b00      	cmp	r3, #0
 801367c:	dd05      	ble.n	801368a <_dtoa_r+0x842>
 801367e:	461a      	mov	r2, r3
 8013680:	4648      	mov	r0, r9
 8013682:	9903      	ldr	r1, [sp, #12]
 8013684:	f000 ff98 	bl	80145b8 <__lshift>
 8013688:	9003      	str	r0, [sp, #12]
 801368a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801368c:	2b00      	cmp	r3, #0
 801368e:	dd05      	ble.n	801369c <_dtoa_r+0x854>
 8013690:	4621      	mov	r1, r4
 8013692:	461a      	mov	r2, r3
 8013694:	4648      	mov	r0, r9
 8013696:	f000 ff8f 	bl	80145b8 <__lshift>
 801369a:	4604      	mov	r4, r0
 801369c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d061      	beq.n	8013766 <_dtoa_r+0x91e>
 80136a2:	4621      	mov	r1, r4
 80136a4:	9803      	ldr	r0, [sp, #12]
 80136a6:	f000 fff3 	bl	8014690 <__mcmp>
 80136aa:	2800      	cmp	r0, #0
 80136ac:	da5b      	bge.n	8013766 <_dtoa_r+0x91e>
 80136ae:	2300      	movs	r3, #0
 80136b0:	220a      	movs	r2, #10
 80136b2:	4648      	mov	r0, r9
 80136b4:	9903      	ldr	r1, [sp, #12]
 80136b6:	f000 fd91 	bl	80141dc <__multadd>
 80136ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80136bc:	f107 38ff 	add.w	r8, r7, #4294967295
 80136c0:	9003      	str	r0, [sp, #12]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	f000 8177 	beq.w	80139b6 <_dtoa_r+0xb6e>
 80136c8:	4629      	mov	r1, r5
 80136ca:	2300      	movs	r3, #0
 80136cc:	220a      	movs	r2, #10
 80136ce:	4648      	mov	r0, r9
 80136d0:	f000 fd84 	bl	80141dc <__multadd>
 80136d4:	f1bb 0f00 	cmp.w	fp, #0
 80136d8:	4605      	mov	r5, r0
 80136da:	dc6f      	bgt.n	80137bc <_dtoa_r+0x974>
 80136dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80136de:	2b02      	cmp	r3, #2
 80136e0:	dc49      	bgt.n	8013776 <_dtoa_r+0x92e>
 80136e2:	e06b      	b.n	80137bc <_dtoa_r+0x974>
 80136e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80136e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80136ea:	e73c      	b.n	8013566 <_dtoa_r+0x71e>
 80136ec:	3fe00000 	.word	0x3fe00000
 80136f0:	40240000 	.word	0x40240000
 80136f4:	9b08      	ldr	r3, [sp, #32]
 80136f6:	1e5c      	subs	r4, r3, #1
 80136f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136fa:	42a3      	cmp	r3, r4
 80136fc:	db09      	blt.n	8013712 <_dtoa_r+0x8ca>
 80136fe:	1b1c      	subs	r4, r3, r4
 8013700:	9b08      	ldr	r3, [sp, #32]
 8013702:	2b00      	cmp	r3, #0
 8013704:	f6bf af30 	bge.w	8013568 <_dtoa_r+0x720>
 8013708:	9b04      	ldr	r3, [sp, #16]
 801370a:	9a08      	ldr	r2, [sp, #32]
 801370c:	1a9e      	subs	r6, r3, r2
 801370e:	2300      	movs	r3, #0
 8013710:	e72b      	b.n	801356a <_dtoa_r+0x722>
 8013712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013716:	1ae3      	subs	r3, r4, r3
 8013718:	441a      	add	r2, r3
 801371a:	940a      	str	r4, [sp, #40]	@ 0x28
 801371c:	9e04      	ldr	r6, [sp, #16]
 801371e:	2400      	movs	r4, #0
 8013720:	9b08      	ldr	r3, [sp, #32]
 8013722:	920e      	str	r2, [sp, #56]	@ 0x38
 8013724:	e721      	b.n	801356a <_dtoa_r+0x722>
 8013726:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013728:	9e04      	ldr	r6, [sp, #16]
 801372a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801372c:	e728      	b.n	8013580 <_dtoa_r+0x738>
 801372e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013732:	e751      	b.n	80135d8 <_dtoa_r+0x790>
 8013734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013736:	9903      	ldr	r1, [sp, #12]
 8013738:	e750      	b.n	80135dc <_dtoa_r+0x794>
 801373a:	f8cd 800c 	str.w	r8, [sp, #12]
 801373e:	e751      	b.n	80135e4 <_dtoa_r+0x79c>
 8013740:	2300      	movs	r3, #0
 8013742:	e779      	b.n	8013638 <_dtoa_r+0x7f0>
 8013744:	9b06      	ldr	r3, [sp, #24]
 8013746:	e777      	b.n	8013638 <_dtoa_r+0x7f0>
 8013748:	2300      	movs	r3, #0
 801374a:	930a      	str	r3, [sp, #40]	@ 0x28
 801374c:	e779      	b.n	8013642 <_dtoa_r+0x7fa>
 801374e:	d093      	beq.n	8013678 <_dtoa_r+0x830>
 8013750:	9a04      	ldr	r2, [sp, #16]
 8013752:	331c      	adds	r3, #28
 8013754:	441a      	add	r2, r3
 8013756:	9204      	str	r2, [sp, #16]
 8013758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801375a:	441e      	add	r6, r3
 801375c:	441a      	add	r2, r3
 801375e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013760:	e78a      	b.n	8013678 <_dtoa_r+0x830>
 8013762:	4603      	mov	r3, r0
 8013764:	e7f4      	b.n	8013750 <_dtoa_r+0x908>
 8013766:	9b08      	ldr	r3, [sp, #32]
 8013768:	46b8      	mov	r8, r7
 801376a:	2b00      	cmp	r3, #0
 801376c:	dc20      	bgt.n	80137b0 <_dtoa_r+0x968>
 801376e:	469b      	mov	fp, r3
 8013770:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013772:	2b02      	cmp	r3, #2
 8013774:	dd1e      	ble.n	80137b4 <_dtoa_r+0x96c>
 8013776:	f1bb 0f00 	cmp.w	fp, #0
 801377a:	f47f adb1 	bne.w	80132e0 <_dtoa_r+0x498>
 801377e:	4621      	mov	r1, r4
 8013780:	465b      	mov	r3, fp
 8013782:	2205      	movs	r2, #5
 8013784:	4648      	mov	r0, r9
 8013786:	f000 fd29 	bl	80141dc <__multadd>
 801378a:	4601      	mov	r1, r0
 801378c:	4604      	mov	r4, r0
 801378e:	9803      	ldr	r0, [sp, #12]
 8013790:	f000 ff7e 	bl	8014690 <__mcmp>
 8013794:	2800      	cmp	r0, #0
 8013796:	f77f ada3 	ble.w	80132e0 <_dtoa_r+0x498>
 801379a:	4656      	mov	r6, sl
 801379c:	2331      	movs	r3, #49	@ 0x31
 801379e:	f108 0801 	add.w	r8, r8, #1
 80137a2:	f806 3b01 	strb.w	r3, [r6], #1
 80137a6:	e59f      	b.n	80132e8 <_dtoa_r+0x4a0>
 80137a8:	46b8      	mov	r8, r7
 80137aa:	9c08      	ldr	r4, [sp, #32]
 80137ac:	4625      	mov	r5, r4
 80137ae:	e7f4      	b.n	801379a <_dtoa_r+0x952>
 80137b0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80137b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f000 8101 	beq.w	80139be <_dtoa_r+0xb76>
 80137bc:	2e00      	cmp	r6, #0
 80137be:	dd05      	ble.n	80137cc <_dtoa_r+0x984>
 80137c0:	4629      	mov	r1, r5
 80137c2:	4632      	mov	r2, r6
 80137c4:	4648      	mov	r0, r9
 80137c6:	f000 fef7 	bl	80145b8 <__lshift>
 80137ca:	4605      	mov	r5, r0
 80137cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d05c      	beq.n	801388c <_dtoa_r+0xa44>
 80137d2:	4648      	mov	r0, r9
 80137d4:	6869      	ldr	r1, [r5, #4]
 80137d6:	f000 fc9f 	bl	8014118 <_Balloc>
 80137da:	4606      	mov	r6, r0
 80137dc:	b928      	cbnz	r0, 80137ea <_dtoa_r+0x9a2>
 80137de:	4602      	mov	r2, r0
 80137e0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80137e4:	4b80      	ldr	r3, [pc, #512]	@ (80139e8 <_dtoa_r+0xba0>)
 80137e6:	f7ff bb43 	b.w	8012e70 <_dtoa_r+0x28>
 80137ea:	692a      	ldr	r2, [r5, #16]
 80137ec:	f105 010c 	add.w	r1, r5, #12
 80137f0:	3202      	adds	r2, #2
 80137f2:	0092      	lsls	r2, r2, #2
 80137f4:	300c      	adds	r0, #12
 80137f6:	f7ff fa7c 	bl	8012cf2 <memcpy>
 80137fa:	2201      	movs	r2, #1
 80137fc:	4631      	mov	r1, r6
 80137fe:	4648      	mov	r0, r9
 8013800:	f000 feda 	bl	80145b8 <__lshift>
 8013804:	462f      	mov	r7, r5
 8013806:	4605      	mov	r5, r0
 8013808:	f10a 0301 	add.w	r3, sl, #1
 801380c:	9304      	str	r3, [sp, #16]
 801380e:	eb0a 030b 	add.w	r3, sl, fp
 8013812:	930a      	str	r3, [sp, #40]	@ 0x28
 8013814:	9b06      	ldr	r3, [sp, #24]
 8013816:	f003 0301 	and.w	r3, r3, #1
 801381a:	9309      	str	r3, [sp, #36]	@ 0x24
 801381c:	9b04      	ldr	r3, [sp, #16]
 801381e:	4621      	mov	r1, r4
 8013820:	9803      	ldr	r0, [sp, #12]
 8013822:	f103 3bff 	add.w	fp, r3, #4294967295
 8013826:	f7ff fa84 	bl	8012d32 <quorem>
 801382a:	4603      	mov	r3, r0
 801382c:	4639      	mov	r1, r7
 801382e:	3330      	adds	r3, #48	@ 0x30
 8013830:	9006      	str	r0, [sp, #24]
 8013832:	9803      	ldr	r0, [sp, #12]
 8013834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013836:	f000 ff2b 	bl	8014690 <__mcmp>
 801383a:	462a      	mov	r2, r5
 801383c:	9008      	str	r0, [sp, #32]
 801383e:	4621      	mov	r1, r4
 8013840:	4648      	mov	r0, r9
 8013842:	f000 ff41 	bl	80146c8 <__mdiff>
 8013846:	68c2      	ldr	r2, [r0, #12]
 8013848:	4606      	mov	r6, r0
 801384a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801384c:	bb02      	cbnz	r2, 8013890 <_dtoa_r+0xa48>
 801384e:	4601      	mov	r1, r0
 8013850:	9803      	ldr	r0, [sp, #12]
 8013852:	f000 ff1d 	bl	8014690 <__mcmp>
 8013856:	4602      	mov	r2, r0
 8013858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801385a:	4631      	mov	r1, r6
 801385c:	4648      	mov	r0, r9
 801385e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8013862:	f000 fc99 	bl	8014198 <_Bfree>
 8013866:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013868:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801386a:	9e04      	ldr	r6, [sp, #16]
 801386c:	ea42 0103 	orr.w	r1, r2, r3
 8013870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013872:	4319      	orrs	r1, r3
 8013874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013876:	d10d      	bne.n	8013894 <_dtoa_r+0xa4c>
 8013878:	2b39      	cmp	r3, #57	@ 0x39
 801387a:	d027      	beq.n	80138cc <_dtoa_r+0xa84>
 801387c:	9a08      	ldr	r2, [sp, #32]
 801387e:	2a00      	cmp	r2, #0
 8013880:	dd01      	ble.n	8013886 <_dtoa_r+0xa3e>
 8013882:	9b06      	ldr	r3, [sp, #24]
 8013884:	3331      	adds	r3, #49	@ 0x31
 8013886:	f88b 3000 	strb.w	r3, [fp]
 801388a:	e52e      	b.n	80132ea <_dtoa_r+0x4a2>
 801388c:	4628      	mov	r0, r5
 801388e:	e7b9      	b.n	8013804 <_dtoa_r+0x9bc>
 8013890:	2201      	movs	r2, #1
 8013892:	e7e2      	b.n	801385a <_dtoa_r+0xa12>
 8013894:	9908      	ldr	r1, [sp, #32]
 8013896:	2900      	cmp	r1, #0
 8013898:	db04      	blt.n	80138a4 <_dtoa_r+0xa5c>
 801389a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801389c:	4301      	orrs	r1, r0
 801389e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80138a0:	4301      	orrs	r1, r0
 80138a2:	d120      	bne.n	80138e6 <_dtoa_r+0xa9e>
 80138a4:	2a00      	cmp	r2, #0
 80138a6:	ddee      	ble.n	8013886 <_dtoa_r+0xa3e>
 80138a8:	2201      	movs	r2, #1
 80138aa:	9903      	ldr	r1, [sp, #12]
 80138ac:	4648      	mov	r0, r9
 80138ae:	9304      	str	r3, [sp, #16]
 80138b0:	f000 fe82 	bl	80145b8 <__lshift>
 80138b4:	4621      	mov	r1, r4
 80138b6:	9003      	str	r0, [sp, #12]
 80138b8:	f000 feea 	bl	8014690 <__mcmp>
 80138bc:	2800      	cmp	r0, #0
 80138be:	9b04      	ldr	r3, [sp, #16]
 80138c0:	dc02      	bgt.n	80138c8 <_dtoa_r+0xa80>
 80138c2:	d1e0      	bne.n	8013886 <_dtoa_r+0xa3e>
 80138c4:	07da      	lsls	r2, r3, #31
 80138c6:	d5de      	bpl.n	8013886 <_dtoa_r+0xa3e>
 80138c8:	2b39      	cmp	r3, #57	@ 0x39
 80138ca:	d1da      	bne.n	8013882 <_dtoa_r+0xa3a>
 80138cc:	2339      	movs	r3, #57	@ 0x39
 80138ce:	f88b 3000 	strb.w	r3, [fp]
 80138d2:	4633      	mov	r3, r6
 80138d4:	461e      	mov	r6, r3
 80138d6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80138da:	3b01      	subs	r3, #1
 80138dc:	2a39      	cmp	r2, #57	@ 0x39
 80138de:	d04e      	beq.n	801397e <_dtoa_r+0xb36>
 80138e0:	3201      	adds	r2, #1
 80138e2:	701a      	strb	r2, [r3, #0]
 80138e4:	e501      	b.n	80132ea <_dtoa_r+0x4a2>
 80138e6:	2a00      	cmp	r2, #0
 80138e8:	dd03      	ble.n	80138f2 <_dtoa_r+0xaaa>
 80138ea:	2b39      	cmp	r3, #57	@ 0x39
 80138ec:	d0ee      	beq.n	80138cc <_dtoa_r+0xa84>
 80138ee:	3301      	adds	r3, #1
 80138f0:	e7c9      	b.n	8013886 <_dtoa_r+0xa3e>
 80138f2:	9a04      	ldr	r2, [sp, #16]
 80138f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80138f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80138fa:	428a      	cmp	r2, r1
 80138fc:	d028      	beq.n	8013950 <_dtoa_r+0xb08>
 80138fe:	2300      	movs	r3, #0
 8013900:	220a      	movs	r2, #10
 8013902:	9903      	ldr	r1, [sp, #12]
 8013904:	4648      	mov	r0, r9
 8013906:	f000 fc69 	bl	80141dc <__multadd>
 801390a:	42af      	cmp	r7, r5
 801390c:	9003      	str	r0, [sp, #12]
 801390e:	f04f 0300 	mov.w	r3, #0
 8013912:	f04f 020a 	mov.w	r2, #10
 8013916:	4639      	mov	r1, r7
 8013918:	4648      	mov	r0, r9
 801391a:	d107      	bne.n	801392c <_dtoa_r+0xae4>
 801391c:	f000 fc5e 	bl	80141dc <__multadd>
 8013920:	4607      	mov	r7, r0
 8013922:	4605      	mov	r5, r0
 8013924:	9b04      	ldr	r3, [sp, #16]
 8013926:	3301      	adds	r3, #1
 8013928:	9304      	str	r3, [sp, #16]
 801392a:	e777      	b.n	801381c <_dtoa_r+0x9d4>
 801392c:	f000 fc56 	bl	80141dc <__multadd>
 8013930:	4629      	mov	r1, r5
 8013932:	4607      	mov	r7, r0
 8013934:	2300      	movs	r3, #0
 8013936:	220a      	movs	r2, #10
 8013938:	4648      	mov	r0, r9
 801393a:	f000 fc4f 	bl	80141dc <__multadd>
 801393e:	4605      	mov	r5, r0
 8013940:	e7f0      	b.n	8013924 <_dtoa_r+0xadc>
 8013942:	f1bb 0f00 	cmp.w	fp, #0
 8013946:	bfcc      	ite	gt
 8013948:	465e      	movgt	r6, fp
 801394a:	2601      	movle	r6, #1
 801394c:	2700      	movs	r7, #0
 801394e:	4456      	add	r6, sl
 8013950:	2201      	movs	r2, #1
 8013952:	9903      	ldr	r1, [sp, #12]
 8013954:	4648      	mov	r0, r9
 8013956:	9304      	str	r3, [sp, #16]
 8013958:	f000 fe2e 	bl	80145b8 <__lshift>
 801395c:	4621      	mov	r1, r4
 801395e:	9003      	str	r0, [sp, #12]
 8013960:	f000 fe96 	bl	8014690 <__mcmp>
 8013964:	2800      	cmp	r0, #0
 8013966:	dcb4      	bgt.n	80138d2 <_dtoa_r+0xa8a>
 8013968:	d102      	bne.n	8013970 <_dtoa_r+0xb28>
 801396a:	9b04      	ldr	r3, [sp, #16]
 801396c:	07db      	lsls	r3, r3, #31
 801396e:	d4b0      	bmi.n	80138d2 <_dtoa_r+0xa8a>
 8013970:	4633      	mov	r3, r6
 8013972:	461e      	mov	r6, r3
 8013974:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013978:	2a30      	cmp	r2, #48	@ 0x30
 801397a:	d0fa      	beq.n	8013972 <_dtoa_r+0xb2a>
 801397c:	e4b5      	b.n	80132ea <_dtoa_r+0x4a2>
 801397e:	459a      	cmp	sl, r3
 8013980:	d1a8      	bne.n	80138d4 <_dtoa_r+0xa8c>
 8013982:	2331      	movs	r3, #49	@ 0x31
 8013984:	f108 0801 	add.w	r8, r8, #1
 8013988:	f88a 3000 	strb.w	r3, [sl]
 801398c:	e4ad      	b.n	80132ea <_dtoa_r+0x4a2>
 801398e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8013990:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80139ec <_dtoa_r+0xba4>
 8013994:	b11b      	cbz	r3, 801399e <_dtoa_r+0xb56>
 8013996:	f10a 0308 	add.w	r3, sl, #8
 801399a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801399c:	6013      	str	r3, [r2, #0]
 801399e:	4650      	mov	r0, sl
 80139a0:	b017      	add	sp, #92	@ 0x5c
 80139a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	f77f ae2e 	ble.w	801360a <_dtoa_r+0x7c2>
 80139ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80139b2:	2001      	movs	r0, #1
 80139b4:	e64d      	b.n	8013652 <_dtoa_r+0x80a>
 80139b6:	f1bb 0f00 	cmp.w	fp, #0
 80139ba:	f77f aed9 	ble.w	8013770 <_dtoa_r+0x928>
 80139be:	4656      	mov	r6, sl
 80139c0:	4621      	mov	r1, r4
 80139c2:	9803      	ldr	r0, [sp, #12]
 80139c4:	f7ff f9b5 	bl	8012d32 <quorem>
 80139c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80139cc:	f806 3b01 	strb.w	r3, [r6], #1
 80139d0:	eba6 020a 	sub.w	r2, r6, sl
 80139d4:	4593      	cmp	fp, r2
 80139d6:	ddb4      	ble.n	8013942 <_dtoa_r+0xafa>
 80139d8:	2300      	movs	r3, #0
 80139da:	220a      	movs	r2, #10
 80139dc:	4648      	mov	r0, r9
 80139de:	9903      	ldr	r1, [sp, #12]
 80139e0:	f000 fbfc 	bl	80141dc <__multadd>
 80139e4:	9003      	str	r0, [sp, #12]
 80139e6:	e7eb      	b.n	80139c0 <_dtoa_r+0xb78>
 80139e8:	080162be 	.word	0x080162be
 80139ec:	08016259 	.word	0x08016259

080139f0 <_free_r>:
 80139f0:	b538      	push	{r3, r4, r5, lr}
 80139f2:	4605      	mov	r5, r0
 80139f4:	2900      	cmp	r1, #0
 80139f6:	d040      	beq.n	8013a7a <_free_r+0x8a>
 80139f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139fc:	1f0c      	subs	r4, r1, #4
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	bfb8      	it	lt
 8013a02:	18e4      	addlt	r4, r4, r3
 8013a04:	f7fd f8a4 	bl	8010b50 <__malloc_lock>
 8013a08:	4a1c      	ldr	r2, [pc, #112]	@ (8013a7c <_free_r+0x8c>)
 8013a0a:	6813      	ldr	r3, [r2, #0]
 8013a0c:	b933      	cbnz	r3, 8013a1c <_free_r+0x2c>
 8013a0e:	6063      	str	r3, [r4, #4]
 8013a10:	6014      	str	r4, [r2, #0]
 8013a12:	4628      	mov	r0, r5
 8013a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a18:	f7fd b8a0 	b.w	8010b5c <__malloc_unlock>
 8013a1c:	42a3      	cmp	r3, r4
 8013a1e:	d908      	bls.n	8013a32 <_free_r+0x42>
 8013a20:	6820      	ldr	r0, [r4, #0]
 8013a22:	1821      	adds	r1, r4, r0
 8013a24:	428b      	cmp	r3, r1
 8013a26:	bf01      	itttt	eq
 8013a28:	6819      	ldreq	r1, [r3, #0]
 8013a2a:	685b      	ldreq	r3, [r3, #4]
 8013a2c:	1809      	addeq	r1, r1, r0
 8013a2e:	6021      	streq	r1, [r4, #0]
 8013a30:	e7ed      	b.n	8013a0e <_free_r+0x1e>
 8013a32:	461a      	mov	r2, r3
 8013a34:	685b      	ldr	r3, [r3, #4]
 8013a36:	b10b      	cbz	r3, 8013a3c <_free_r+0x4c>
 8013a38:	42a3      	cmp	r3, r4
 8013a3a:	d9fa      	bls.n	8013a32 <_free_r+0x42>
 8013a3c:	6811      	ldr	r1, [r2, #0]
 8013a3e:	1850      	adds	r0, r2, r1
 8013a40:	42a0      	cmp	r0, r4
 8013a42:	d10b      	bne.n	8013a5c <_free_r+0x6c>
 8013a44:	6820      	ldr	r0, [r4, #0]
 8013a46:	4401      	add	r1, r0
 8013a48:	1850      	adds	r0, r2, r1
 8013a4a:	4283      	cmp	r3, r0
 8013a4c:	6011      	str	r1, [r2, #0]
 8013a4e:	d1e0      	bne.n	8013a12 <_free_r+0x22>
 8013a50:	6818      	ldr	r0, [r3, #0]
 8013a52:	685b      	ldr	r3, [r3, #4]
 8013a54:	4408      	add	r0, r1
 8013a56:	6010      	str	r0, [r2, #0]
 8013a58:	6053      	str	r3, [r2, #4]
 8013a5a:	e7da      	b.n	8013a12 <_free_r+0x22>
 8013a5c:	d902      	bls.n	8013a64 <_free_r+0x74>
 8013a5e:	230c      	movs	r3, #12
 8013a60:	602b      	str	r3, [r5, #0]
 8013a62:	e7d6      	b.n	8013a12 <_free_r+0x22>
 8013a64:	6820      	ldr	r0, [r4, #0]
 8013a66:	1821      	adds	r1, r4, r0
 8013a68:	428b      	cmp	r3, r1
 8013a6a:	bf01      	itttt	eq
 8013a6c:	6819      	ldreq	r1, [r3, #0]
 8013a6e:	685b      	ldreq	r3, [r3, #4]
 8013a70:	1809      	addeq	r1, r1, r0
 8013a72:	6021      	streq	r1, [r4, #0]
 8013a74:	6063      	str	r3, [r4, #4]
 8013a76:	6054      	str	r4, [r2, #4]
 8013a78:	e7cb      	b.n	8013a12 <_free_r+0x22>
 8013a7a:	bd38      	pop	{r3, r4, r5, pc}
 8013a7c:	20001af4 	.word	0x20001af4

08013a80 <rshift>:
 8013a80:	6903      	ldr	r3, [r0, #16]
 8013a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013a8a:	f100 0414 	add.w	r4, r0, #20
 8013a8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013a92:	dd46      	ble.n	8013b22 <rshift+0xa2>
 8013a94:	f011 011f 	ands.w	r1, r1, #31
 8013a98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013a9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013aa0:	d10c      	bne.n	8013abc <rshift+0x3c>
 8013aa2:	4629      	mov	r1, r5
 8013aa4:	f100 0710 	add.w	r7, r0, #16
 8013aa8:	42b1      	cmp	r1, r6
 8013aaa:	d335      	bcc.n	8013b18 <rshift+0x98>
 8013aac:	1a9b      	subs	r3, r3, r2
 8013aae:	009b      	lsls	r3, r3, #2
 8013ab0:	1eea      	subs	r2, r5, #3
 8013ab2:	4296      	cmp	r6, r2
 8013ab4:	bf38      	it	cc
 8013ab6:	2300      	movcc	r3, #0
 8013ab8:	4423      	add	r3, r4
 8013aba:	e015      	b.n	8013ae8 <rshift+0x68>
 8013abc:	46a1      	mov	r9, r4
 8013abe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013ac2:	f1c1 0820 	rsb	r8, r1, #32
 8013ac6:	40cf      	lsrs	r7, r1
 8013ac8:	f105 0e04 	add.w	lr, r5, #4
 8013acc:	4576      	cmp	r6, lr
 8013ace:	46f4      	mov	ip, lr
 8013ad0:	d816      	bhi.n	8013b00 <rshift+0x80>
 8013ad2:	1a9a      	subs	r2, r3, r2
 8013ad4:	0092      	lsls	r2, r2, #2
 8013ad6:	3a04      	subs	r2, #4
 8013ad8:	3501      	adds	r5, #1
 8013ada:	42ae      	cmp	r6, r5
 8013adc:	bf38      	it	cc
 8013ade:	2200      	movcc	r2, #0
 8013ae0:	18a3      	adds	r3, r4, r2
 8013ae2:	50a7      	str	r7, [r4, r2]
 8013ae4:	b107      	cbz	r7, 8013ae8 <rshift+0x68>
 8013ae6:	3304      	adds	r3, #4
 8013ae8:	42a3      	cmp	r3, r4
 8013aea:	eba3 0204 	sub.w	r2, r3, r4
 8013aee:	bf08      	it	eq
 8013af0:	2300      	moveq	r3, #0
 8013af2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013af6:	6102      	str	r2, [r0, #16]
 8013af8:	bf08      	it	eq
 8013afa:	6143      	streq	r3, [r0, #20]
 8013afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b00:	f8dc c000 	ldr.w	ip, [ip]
 8013b04:	fa0c fc08 	lsl.w	ip, ip, r8
 8013b08:	ea4c 0707 	orr.w	r7, ip, r7
 8013b0c:	f849 7b04 	str.w	r7, [r9], #4
 8013b10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013b14:	40cf      	lsrs	r7, r1
 8013b16:	e7d9      	b.n	8013acc <rshift+0x4c>
 8013b18:	f851 cb04 	ldr.w	ip, [r1], #4
 8013b1c:	f847 cf04 	str.w	ip, [r7, #4]!
 8013b20:	e7c2      	b.n	8013aa8 <rshift+0x28>
 8013b22:	4623      	mov	r3, r4
 8013b24:	e7e0      	b.n	8013ae8 <rshift+0x68>

08013b26 <__hexdig_fun>:
 8013b26:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013b2a:	2b09      	cmp	r3, #9
 8013b2c:	d802      	bhi.n	8013b34 <__hexdig_fun+0xe>
 8013b2e:	3820      	subs	r0, #32
 8013b30:	b2c0      	uxtb	r0, r0
 8013b32:	4770      	bx	lr
 8013b34:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013b38:	2b05      	cmp	r3, #5
 8013b3a:	d801      	bhi.n	8013b40 <__hexdig_fun+0x1a>
 8013b3c:	3847      	subs	r0, #71	@ 0x47
 8013b3e:	e7f7      	b.n	8013b30 <__hexdig_fun+0xa>
 8013b40:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013b44:	2b05      	cmp	r3, #5
 8013b46:	d801      	bhi.n	8013b4c <__hexdig_fun+0x26>
 8013b48:	3827      	subs	r0, #39	@ 0x27
 8013b4a:	e7f1      	b.n	8013b30 <__hexdig_fun+0xa>
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	4770      	bx	lr

08013b50 <__gethex>:
 8013b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b54:	468a      	mov	sl, r1
 8013b56:	4690      	mov	r8, r2
 8013b58:	b085      	sub	sp, #20
 8013b5a:	9302      	str	r3, [sp, #8]
 8013b5c:	680b      	ldr	r3, [r1, #0]
 8013b5e:	9001      	str	r0, [sp, #4]
 8013b60:	1c9c      	adds	r4, r3, #2
 8013b62:	46a1      	mov	r9, r4
 8013b64:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013b68:	2830      	cmp	r0, #48	@ 0x30
 8013b6a:	d0fa      	beq.n	8013b62 <__gethex+0x12>
 8013b6c:	eba9 0303 	sub.w	r3, r9, r3
 8013b70:	f1a3 0b02 	sub.w	fp, r3, #2
 8013b74:	f7ff ffd7 	bl	8013b26 <__hexdig_fun>
 8013b78:	4605      	mov	r5, r0
 8013b7a:	2800      	cmp	r0, #0
 8013b7c:	d168      	bne.n	8013c50 <__gethex+0x100>
 8013b7e:	2201      	movs	r2, #1
 8013b80:	4648      	mov	r0, r9
 8013b82:	499f      	ldr	r1, [pc, #636]	@ (8013e00 <__gethex+0x2b0>)
 8013b84:	f7fe ff96 	bl	8012ab4 <strncmp>
 8013b88:	4607      	mov	r7, r0
 8013b8a:	2800      	cmp	r0, #0
 8013b8c:	d167      	bne.n	8013c5e <__gethex+0x10e>
 8013b8e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013b92:	4626      	mov	r6, r4
 8013b94:	f7ff ffc7 	bl	8013b26 <__hexdig_fun>
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	d062      	beq.n	8013c62 <__gethex+0x112>
 8013b9c:	4623      	mov	r3, r4
 8013b9e:	7818      	ldrb	r0, [r3, #0]
 8013ba0:	4699      	mov	r9, r3
 8013ba2:	2830      	cmp	r0, #48	@ 0x30
 8013ba4:	f103 0301 	add.w	r3, r3, #1
 8013ba8:	d0f9      	beq.n	8013b9e <__gethex+0x4e>
 8013baa:	f7ff ffbc 	bl	8013b26 <__hexdig_fun>
 8013bae:	fab0 f580 	clz	r5, r0
 8013bb2:	f04f 0b01 	mov.w	fp, #1
 8013bb6:	096d      	lsrs	r5, r5, #5
 8013bb8:	464a      	mov	r2, r9
 8013bba:	4616      	mov	r6, r2
 8013bbc:	7830      	ldrb	r0, [r6, #0]
 8013bbe:	3201      	adds	r2, #1
 8013bc0:	f7ff ffb1 	bl	8013b26 <__hexdig_fun>
 8013bc4:	2800      	cmp	r0, #0
 8013bc6:	d1f8      	bne.n	8013bba <__gethex+0x6a>
 8013bc8:	2201      	movs	r2, #1
 8013bca:	4630      	mov	r0, r6
 8013bcc:	498c      	ldr	r1, [pc, #560]	@ (8013e00 <__gethex+0x2b0>)
 8013bce:	f7fe ff71 	bl	8012ab4 <strncmp>
 8013bd2:	2800      	cmp	r0, #0
 8013bd4:	d13f      	bne.n	8013c56 <__gethex+0x106>
 8013bd6:	b944      	cbnz	r4, 8013bea <__gethex+0x9a>
 8013bd8:	1c74      	adds	r4, r6, #1
 8013bda:	4622      	mov	r2, r4
 8013bdc:	4616      	mov	r6, r2
 8013bde:	7830      	ldrb	r0, [r6, #0]
 8013be0:	3201      	adds	r2, #1
 8013be2:	f7ff ffa0 	bl	8013b26 <__hexdig_fun>
 8013be6:	2800      	cmp	r0, #0
 8013be8:	d1f8      	bne.n	8013bdc <__gethex+0x8c>
 8013bea:	1ba4      	subs	r4, r4, r6
 8013bec:	00a7      	lsls	r7, r4, #2
 8013bee:	7833      	ldrb	r3, [r6, #0]
 8013bf0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013bf4:	2b50      	cmp	r3, #80	@ 0x50
 8013bf6:	d13e      	bne.n	8013c76 <__gethex+0x126>
 8013bf8:	7873      	ldrb	r3, [r6, #1]
 8013bfa:	2b2b      	cmp	r3, #43	@ 0x2b
 8013bfc:	d033      	beq.n	8013c66 <__gethex+0x116>
 8013bfe:	2b2d      	cmp	r3, #45	@ 0x2d
 8013c00:	d034      	beq.n	8013c6c <__gethex+0x11c>
 8013c02:	2400      	movs	r4, #0
 8013c04:	1c71      	adds	r1, r6, #1
 8013c06:	7808      	ldrb	r0, [r1, #0]
 8013c08:	f7ff ff8d 	bl	8013b26 <__hexdig_fun>
 8013c0c:	1e43      	subs	r3, r0, #1
 8013c0e:	b2db      	uxtb	r3, r3
 8013c10:	2b18      	cmp	r3, #24
 8013c12:	d830      	bhi.n	8013c76 <__gethex+0x126>
 8013c14:	f1a0 0210 	sub.w	r2, r0, #16
 8013c18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013c1c:	f7ff ff83 	bl	8013b26 <__hexdig_fun>
 8013c20:	f100 3cff 	add.w	ip, r0, #4294967295
 8013c24:	fa5f fc8c 	uxtb.w	ip, ip
 8013c28:	f1bc 0f18 	cmp.w	ip, #24
 8013c2c:	f04f 030a 	mov.w	r3, #10
 8013c30:	d91e      	bls.n	8013c70 <__gethex+0x120>
 8013c32:	b104      	cbz	r4, 8013c36 <__gethex+0xe6>
 8013c34:	4252      	negs	r2, r2
 8013c36:	4417      	add	r7, r2
 8013c38:	f8ca 1000 	str.w	r1, [sl]
 8013c3c:	b1ed      	cbz	r5, 8013c7a <__gethex+0x12a>
 8013c3e:	f1bb 0f00 	cmp.w	fp, #0
 8013c42:	bf0c      	ite	eq
 8013c44:	2506      	moveq	r5, #6
 8013c46:	2500      	movne	r5, #0
 8013c48:	4628      	mov	r0, r5
 8013c4a:	b005      	add	sp, #20
 8013c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c50:	2500      	movs	r5, #0
 8013c52:	462c      	mov	r4, r5
 8013c54:	e7b0      	b.n	8013bb8 <__gethex+0x68>
 8013c56:	2c00      	cmp	r4, #0
 8013c58:	d1c7      	bne.n	8013bea <__gethex+0x9a>
 8013c5a:	4627      	mov	r7, r4
 8013c5c:	e7c7      	b.n	8013bee <__gethex+0x9e>
 8013c5e:	464e      	mov	r6, r9
 8013c60:	462f      	mov	r7, r5
 8013c62:	2501      	movs	r5, #1
 8013c64:	e7c3      	b.n	8013bee <__gethex+0x9e>
 8013c66:	2400      	movs	r4, #0
 8013c68:	1cb1      	adds	r1, r6, #2
 8013c6a:	e7cc      	b.n	8013c06 <__gethex+0xb6>
 8013c6c:	2401      	movs	r4, #1
 8013c6e:	e7fb      	b.n	8013c68 <__gethex+0x118>
 8013c70:	fb03 0002 	mla	r0, r3, r2, r0
 8013c74:	e7ce      	b.n	8013c14 <__gethex+0xc4>
 8013c76:	4631      	mov	r1, r6
 8013c78:	e7de      	b.n	8013c38 <__gethex+0xe8>
 8013c7a:	4629      	mov	r1, r5
 8013c7c:	eba6 0309 	sub.w	r3, r6, r9
 8013c80:	3b01      	subs	r3, #1
 8013c82:	2b07      	cmp	r3, #7
 8013c84:	dc0a      	bgt.n	8013c9c <__gethex+0x14c>
 8013c86:	9801      	ldr	r0, [sp, #4]
 8013c88:	f000 fa46 	bl	8014118 <_Balloc>
 8013c8c:	4604      	mov	r4, r0
 8013c8e:	b940      	cbnz	r0, 8013ca2 <__gethex+0x152>
 8013c90:	4602      	mov	r2, r0
 8013c92:	21e4      	movs	r1, #228	@ 0xe4
 8013c94:	4b5b      	ldr	r3, [pc, #364]	@ (8013e04 <__gethex+0x2b4>)
 8013c96:	485c      	ldr	r0, [pc, #368]	@ (8013e08 <__gethex+0x2b8>)
 8013c98:	f7fc fe82 	bl	80109a0 <__assert_func>
 8013c9c:	3101      	adds	r1, #1
 8013c9e:	105b      	asrs	r3, r3, #1
 8013ca0:	e7ef      	b.n	8013c82 <__gethex+0x132>
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	f100 0a14 	add.w	sl, r0, #20
 8013ca8:	4655      	mov	r5, sl
 8013caa:	469b      	mov	fp, r3
 8013cac:	45b1      	cmp	r9, r6
 8013cae:	d337      	bcc.n	8013d20 <__gethex+0x1d0>
 8013cb0:	f845 bb04 	str.w	fp, [r5], #4
 8013cb4:	eba5 050a 	sub.w	r5, r5, sl
 8013cb8:	10ad      	asrs	r5, r5, #2
 8013cba:	6125      	str	r5, [r4, #16]
 8013cbc:	4658      	mov	r0, fp
 8013cbe:	f000 fb1d 	bl	80142fc <__hi0bits>
 8013cc2:	016d      	lsls	r5, r5, #5
 8013cc4:	f8d8 6000 	ldr.w	r6, [r8]
 8013cc8:	1a2d      	subs	r5, r5, r0
 8013cca:	42b5      	cmp	r5, r6
 8013ccc:	dd54      	ble.n	8013d78 <__gethex+0x228>
 8013cce:	1bad      	subs	r5, r5, r6
 8013cd0:	4629      	mov	r1, r5
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	f000 fe9f 	bl	8014a16 <__any_on>
 8013cd8:	4681      	mov	r9, r0
 8013cda:	b178      	cbz	r0, 8013cfc <__gethex+0x1ac>
 8013cdc:	f04f 0901 	mov.w	r9, #1
 8013ce0:	1e6b      	subs	r3, r5, #1
 8013ce2:	1159      	asrs	r1, r3, #5
 8013ce4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013ce8:	f003 021f 	and.w	r2, r3, #31
 8013cec:	fa09 f202 	lsl.w	r2, r9, r2
 8013cf0:	420a      	tst	r2, r1
 8013cf2:	d003      	beq.n	8013cfc <__gethex+0x1ac>
 8013cf4:	454b      	cmp	r3, r9
 8013cf6:	dc36      	bgt.n	8013d66 <__gethex+0x216>
 8013cf8:	f04f 0902 	mov.w	r9, #2
 8013cfc:	4629      	mov	r1, r5
 8013cfe:	4620      	mov	r0, r4
 8013d00:	f7ff febe 	bl	8013a80 <rshift>
 8013d04:	442f      	add	r7, r5
 8013d06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d0a:	42bb      	cmp	r3, r7
 8013d0c:	da42      	bge.n	8013d94 <__gethex+0x244>
 8013d0e:	4621      	mov	r1, r4
 8013d10:	9801      	ldr	r0, [sp, #4]
 8013d12:	f000 fa41 	bl	8014198 <_Bfree>
 8013d16:	2300      	movs	r3, #0
 8013d18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013d1a:	25a3      	movs	r5, #163	@ 0xa3
 8013d1c:	6013      	str	r3, [r2, #0]
 8013d1e:	e793      	b.n	8013c48 <__gethex+0xf8>
 8013d20:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013d24:	2a2e      	cmp	r2, #46	@ 0x2e
 8013d26:	d012      	beq.n	8013d4e <__gethex+0x1fe>
 8013d28:	2b20      	cmp	r3, #32
 8013d2a:	d104      	bne.n	8013d36 <__gethex+0x1e6>
 8013d2c:	f845 bb04 	str.w	fp, [r5], #4
 8013d30:	f04f 0b00 	mov.w	fp, #0
 8013d34:	465b      	mov	r3, fp
 8013d36:	7830      	ldrb	r0, [r6, #0]
 8013d38:	9303      	str	r3, [sp, #12]
 8013d3a:	f7ff fef4 	bl	8013b26 <__hexdig_fun>
 8013d3e:	9b03      	ldr	r3, [sp, #12]
 8013d40:	f000 000f 	and.w	r0, r0, #15
 8013d44:	4098      	lsls	r0, r3
 8013d46:	ea4b 0b00 	orr.w	fp, fp, r0
 8013d4a:	3304      	adds	r3, #4
 8013d4c:	e7ae      	b.n	8013cac <__gethex+0x15c>
 8013d4e:	45b1      	cmp	r9, r6
 8013d50:	d8ea      	bhi.n	8013d28 <__gethex+0x1d8>
 8013d52:	2201      	movs	r2, #1
 8013d54:	4630      	mov	r0, r6
 8013d56:	492a      	ldr	r1, [pc, #168]	@ (8013e00 <__gethex+0x2b0>)
 8013d58:	9303      	str	r3, [sp, #12]
 8013d5a:	f7fe feab 	bl	8012ab4 <strncmp>
 8013d5e:	9b03      	ldr	r3, [sp, #12]
 8013d60:	2800      	cmp	r0, #0
 8013d62:	d1e1      	bne.n	8013d28 <__gethex+0x1d8>
 8013d64:	e7a2      	b.n	8013cac <__gethex+0x15c>
 8013d66:	4620      	mov	r0, r4
 8013d68:	1ea9      	subs	r1, r5, #2
 8013d6a:	f000 fe54 	bl	8014a16 <__any_on>
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	d0c2      	beq.n	8013cf8 <__gethex+0x1a8>
 8013d72:	f04f 0903 	mov.w	r9, #3
 8013d76:	e7c1      	b.n	8013cfc <__gethex+0x1ac>
 8013d78:	da09      	bge.n	8013d8e <__gethex+0x23e>
 8013d7a:	1b75      	subs	r5, r6, r5
 8013d7c:	4621      	mov	r1, r4
 8013d7e:	462a      	mov	r2, r5
 8013d80:	9801      	ldr	r0, [sp, #4]
 8013d82:	f000 fc19 	bl	80145b8 <__lshift>
 8013d86:	4604      	mov	r4, r0
 8013d88:	1b7f      	subs	r7, r7, r5
 8013d8a:	f100 0a14 	add.w	sl, r0, #20
 8013d8e:	f04f 0900 	mov.w	r9, #0
 8013d92:	e7b8      	b.n	8013d06 <__gethex+0x1b6>
 8013d94:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013d98:	42bd      	cmp	r5, r7
 8013d9a:	dd6f      	ble.n	8013e7c <__gethex+0x32c>
 8013d9c:	1bed      	subs	r5, r5, r7
 8013d9e:	42ae      	cmp	r6, r5
 8013da0:	dc34      	bgt.n	8013e0c <__gethex+0x2bc>
 8013da2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013da6:	2b02      	cmp	r3, #2
 8013da8:	d022      	beq.n	8013df0 <__gethex+0x2a0>
 8013daa:	2b03      	cmp	r3, #3
 8013dac:	d024      	beq.n	8013df8 <__gethex+0x2a8>
 8013dae:	2b01      	cmp	r3, #1
 8013db0:	d115      	bne.n	8013dde <__gethex+0x28e>
 8013db2:	42ae      	cmp	r6, r5
 8013db4:	d113      	bne.n	8013dde <__gethex+0x28e>
 8013db6:	2e01      	cmp	r6, #1
 8013db8:	d10b      	bne.n	8013dd2 <__gethex+0x282>
 8013dba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013dbe:	9a02      	ldr	r2, [sp, #8]
 8013dc0:	2562      	movs	r5, #98	@ 0x62
 8013dc2:	6013      	str	r3, [r2, #0]
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	6123      	str	r3, [r4, #16]
 8013dc8:	f8ca 3000 	str.w	r3, [sl]
 8013dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013dce:	601c      	str	r4, [r3, #0]
 8013dd0:	e73a      	b.n	8013c48 <__gethex+0xf8>
 8013dd2:	4620      	mov	r0, r4
 8013dd4:	1e71      	subs	r1, r6, #1
 8013dd6:	f000 fe1e 	bl	8014a16 <__any_on>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	d1ed      	bne.n	8013dba <__gethex+0x26a>
 8013dde:	4621      	mov	r1, r4
 8013de0:	9801      	ldr	r0, [sp, #4]
 8013de2:	f000 f9d9 	bl	8014198 <_Bfree>
 8013de6:	2300      	movs	r3, #0
 8013de8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013dea:	2550      	movs	r5, #80	@ 0x50
 8013dec:	6013      	str	r3, [r2, #0]
 8013dee:	e72b      	b.n	8013c48 <__gethex+0xf8>
 8013df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d1f3      	bne.n	8013dde <__gethex+0x28e>
 8013df6:	e7e0      	b.n	8013dba <__gethex+0x26a>
 8013df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d1dd      	bne.n	8013dba <__gethex+0x26a>
 8013dfe:	e7ee      	b.n	8013dde <__gethex+0x28e>
 8013e00:	080161a5 	.word	0x080161a5
 8013e04:	080162be 	.word	0x080162be
 8013e08:	080162cf 	.word	0x080162cf
 8013e0c:	1e6f      	subs	r7, r5, #1
 8013e0e:	f1b9 0f00 	cmp.w	r9, #0
 8013e12:	d130      	bne.n	8013e76 <__gethex+0x326>
 8013e14:	b127      	cbz	r7, 8013e20 <__gethex+0x2d0>
 8013e16:	4639      	mov	r1, r7
 8013e18:	4620      	mov	r0, r4
 8013e1a:	f000 fdfc 	bl	8014a16 <__any_on>
 8013e1e:	4681      	mov	r9, r0
 8013e20:	2301      	movs	r3, #1
 8013e22:	4629      	mov	r1, r5
 8013e24:	1b76      	subs	r6, r6, r5
 8013e26:	2502      	movs	r5, #2
 8013e28:	117a      	asrs	r2, r7, #5
 8013e2a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013e2e:	f007 071f 	and.w	r7, r7, #31
 8013e32:	40bb      	lsls	r3, r7
 8013e34:	4213      	tst	r3, r2
 8013e36:	4620      	mov	r0, r4
 8013e38:	bf18      	it	ne
 8013e3a:	f049 0902 	orrne.w	r9, r9, #2
 8013e3e:	f7ff fe1f 	bl	8013a80 <rshift>
 8013e42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013e46:	f1b9 0f00 	cmp.w	r9, #0
 8013e4a:	d047      	beq.n	8013edc <__gethex+0x38c>
 8013e4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e50:	2b02      	cmp	r3, #2
 8013e52:	d015      	beq.n	8013e80 <__gethex+0x330>
 8013e54:	2b03      	cmp	r3, #3
 8013e56:	d017      	beq.n	8013e88 <__gethex+0x338>
 8013e58:	2b01      	cmp	r3, #1
 8013e5a:	d109      	bne.n	8013e70 <__gethex+0x320>
 8013e5c:	f019 0f02 	tst.w	r9, #2
 8013e60:	d006      	beq.n	8013e70 <__gethex+0x320>
 8013e62:	f8da 3000 	ldr.w	r3, [sl]
 8013e66:	ea49 0903 	orr.w	r9, r9, r3
 8013e6a:	f019 0f01 	tst.w	r9, #1
 8013e6e:	d10e      	bne.n	8013e8e <__gethex+0x33e>
 8013e70:	f045 0510 	orr.w	r5, r5, #16
 8013e74:	e032      	b.n	8013edc <__gethex+0x38c>
 8013e76:	f04f 0901 	mov.w	r9, #1
 8013e7a:	e7d1      	b.n	8013e20 <__gethex+0x2d0>
 8013e7c:	2501      	movs	r5, #1
 8013e7e:	e7e2      	b.n	8013e46 <__gethex+0x2f6>
 8013e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e82:	f1c3 0301 	rsb	r3, r3, #1
 8013e86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d0f0      	beq.n	8013e70 <__gethex+0x320>
 8013e8e:	f04f 0c00 	mov.w	ip, #0
 8013e92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013e96:	f104 0314 	add.w	r3, r4, #20
 8013e9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013e9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ea8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013eac:	d01b      	beq.n	8013ee6 <__gethex+0x396>
 8013eae:	3201      	adds	r2, #1
 8013eb0:	6002      	str	r2, [r0, #0]
 8013eb2:	2d02      	cmp	r5, #2
 8013eb4:	f104 0314 	add.w	r3, r4, #20
 8013eb8:	d13c      	bne.n	8013f34 <__gethex+0x3e4>
 8013eba:	f8d8 2000 	ldr.w	r2, [r8]
 8013ebe:	3a01      	subs	r2, #1
 8013ec0:	42b2      	cmp	r2, r6
 8013ec2:	d109      	bne.n	8013ed8 <__gethex+0x388>
 8013ec4:	2201      	movs	r2, #1
 8013ec6:	1171      	asrs	r1, r6, #5
 8013ec8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013ecc:	f006 061f 	and.w	r6, r6, #31
 8013ed0:	fa02 f606 	lsl.w	r6, r2, r6
 8013ed4:	421e      	tst	r6, r3
 8013ed6:	d13a      	bne.n	8013f4e <__gethex+0x3fe>
 8013ed8:	f045 0520 	orr.w	r5, r5, #32
 8013edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ede:	601c      	str	r4, [r3, #0]
 8013ee0:	9b02      	ldr	r3, [sp, #8]
 8013ee2:	601f      	str	r7, [r3, #0]
 8013ee4:	e6b0      	b.n	8013c48 <__gethex+0xf8>
 8013ee6:	4299      	cmp	r1, r3
 8013ee8:	f843 cc04 	str.w	ip, [r3, #-4]
 8013eec:	d8d9      	bhi.n	8013ea2 <__gethex+0x352>
 8013eee:	68a3      	ldr	r3, [r4, #8]
 8013ef0:	459b      	cmp	fp, r3
 8013ef2:	db17      	blt.n	8013f24 <__gethex+0x3d4>
 8013ef4:	6861      	ldr	r1, [r4, #4]
 8013ef6:	9801      	ldr	r0, [sp, #4]
 8013ef8:	3101      	adds	r1, #1
 8013efa:	f000 f90d 	bl	8014118 <_Balloc>
 8013efe:	4681      	mov	r9, r0
 8013f00:	b918      	cbnz	r0, 8013f0a <__gethex+0x3ba>
 8013f02:	4602      	mov	r2, r0
 8013f04:	2184      	movs	r1, #132	@ 0x84
 8013f06:	4b19      	ldr	r3, [pc, #100]	@ (8013f6c <__gethex+0x41c>)
 8013f08:	e6c5      	b.n	8013c96 <__gethex+0x146>
 8013f0a:	6922      	ldr	r2, [r4, #16]
 8013f0c:	f104 010c 	add.w	r1, r4, #12
 8013f10:	3202      	adds	r2, #2
 8013f12:	0092      	lsls	r2, r2, #2
 8013f14:	300c      	adds	r0, #12
 8013f16:	f7fe feec 	bl	8012cf2 <memcpy>
 8013f1a:	4621      	mov	r1, r4
 8013f1c:	9801      	ldr	r0, [sp, #4]
 8013f1e:	f000 f93b 	bl	8014198 <_Bfree>
 8013f22:	464c      	mov	r4, r9
 8013f24:	6923      	ldr	r3, [r4, #16]
 8013f26:	1c5a      	adds	r2, r3, #1
 8013f28:	6122      	str	r2, [r4, #16]
 8013f2a:	2201      	movs	r2, #1
 8013f2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013f30:	615a      	str	r2, [r3, #20]
 8013f32:	e7be      	b.n	8013eb2 <__gethex+0x362>
 8013f34:	6922      	ldr	r2, [r4, #16]
 8013f36:	455a      	cmp	r2, fp
 8013f38:	dd0b      	ble.n	8013f52 <__gethex+0x402>
 8013f3a:	2101      	movs	r1, #1
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f7ff fd9f 	bl	8013a80 <rshift>
 8013f42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013f46:	3701      	adds	r7, #1
 8013f48:	42bb      	cmp	r3, r7
 8013f4a:	f6ff aee0 	blt.w	8013d0e <__gethex+0x1be>
 8013f4e:	2501      	movs	r5, #1
 8013f50:	e7c2      	b.n	8013ed8 <__gethex+0x388>
 8013f52:	f016 061f 	ands.w	r6, r6, #31
 8013f56:	d0fa      	beq.n	8013f4e <__gethex+0x3fe>
 8013f58:	4453      	add	r3, sl
 8013f5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013f5e:	f000 f9cd 	bl	80142fc <__hi0bits>
 8013f62:	f1c6 0620 	rsb	r6, r6, #32
 8013f66:	42b0      	cmp	r0, r6
 8013f68:	dbe7      	blt.n	8013f3a <__gethex+0x3ea>
 8013f6a:	e7f0      	b.n	8013f4e <__gethex+0x3fe>
 8013f6c:	080162be 	.word	0x080162be

08013f70 <L_shift>:
 8013f70:	f1c2 0208 	rsb	r2, r2, #8
 8013f74:	0092      	lsls	r2, r2, #2
 8013f76:	b570      	push	{r4, r5, r6, lr}
 8013f78:	f1c2 0620 	rsb	r6, r2, #32
 8013f7c:	6843      	ldr	r3, [r0, #4]
 8013f7e:	6804      	ldr	r4, [r0, #0]
 8013f80:	fa03 f506 	lsl.w	r5, r3, r6
 8013f84:	432c      	orrs	r4, r5
 8013f86:	40d3      	lsrs	r3, r2
 8013f88:	6004      	str	r4, [r0, #0]
 8013f8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8013f8e:	4288      	cmp	r0, r1
 8013f90:	d3f4      	bcc.n	8013f7c <L_shift+0xc>
 8013f92:	bd70      	pop	{r4, r5, r6, pc}

08013f94 <__match>:
 8013f94:	b530      	push	{r4, r5, lr}
 8013f96:	6803      	ldr	r3, [r0, #0]
 8013f98:	3301      	adds	r3, #1
 8013f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f9e:	b914      	cbnz	r4, 8013fa6 <__match+0x12>
 8013fa0:	6003      	str	r3, [r0, #0]
 8013fa2:	2001      	movs	r0, #1
 8013fa4:	bd30      	pop	{r4, r5, pc}
 8013fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013faa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013fae:	2d19      	cmp	r5, #25
 8013fb0:	bf98      	it	ls
 8013fb2:	3220      	addls	r2, #32
 8013fb4:	42a2      	cmp	r2, r4
 8013fb6:	d0f0      	beq.n	8013f9a <__match+0x6>
 8013fb8:	2000      	movs	r0, #0
 8013fba:	e7f3      	b.n	8013fa4 <__match+0x10>

08013fbc <__hexnan>:
 8013fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc0:	2500      	movs	r5, #0
 8013fc2:	680b      	ldr	r3, [r1, #0]
 8013fc4:	4682      	mov	sl, r0
 8013fc6:	115e      	asrs	r6, r3, #5
 8013fc8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013fcc:	f013 031f 	ands.w	r3, r3, #31
 8013fd0:	bf18      	it	ne
 8013fd2:	3604      	addne	r6, #4
 8013fd4:	1f37      	subs	r7, r6, #4
 8013fd6:	4690      	mov	r8, r2
 8013fd8:	46b9      	mov	r9, r7
 8013fda:	463c      	mov	r4, r7
 8013fdc:	46ab      	mov	fp, r5
 8013fde:	b087      	sub	sp, #28
 8013fe0:	6801      	ldr	r1, [r0, #0]
 8013fe2:	9301      	str	r3, [sp, #4]
 8013fe4:	f846 5c04 	str.w	r5, [r6, #-4]
 8013fe8:	9502      	str	r5, [sp, #8]
 8013fea:	784a      	ldrb	r2, [r1, #1]
 8013fec:	1c4b      	adds	r3, r1, #1
 8013fee:	9303      	str	r3, [sp, #12]
 8013ff0:	b342      	cbz	r2, 8014044 <__hexnan+0x88>
 8013ff2:	4610      	mov	r0, r2
 8013ff4:	9105      	str	r1, [sp, #20]
 8013ff6:	9204      	str	r2, [sp, #16]
 8013ff8:	f7ff fd95 	bl	8013b26 <__hexdig_fun>
 8013ffc:	2800      	cmp	r0, #0
 8013ffe:	d151      	bne.n	80140a4 <__hexnan+0xe8>
 8014000:	9a04      	ldr	r2, [sp, #16]
 8014002:	9905      	ldr	r1, [sp, #20]
 8014004:	2a20      	cmp	r2, #32
 8014006:	d818      	bhi.n	801403a <__hexnan+0x7e>
 8014008:	9b02      	ldr	r3, [sp, #8]
 801400a:	459b      	cmp	fp, r3
 801400c:	dd13      	ble.n	8014036 <__hexnan+0x7a>
 801400e:	454c      	cmp	r4, r9
 8014010:	d206      	bcs.n	8014020 <__hexnan+0x64>
 8014012:	2d07      	cmp	r5, #7
 8014014:	dc04      	bgt.n	8014020 <__hexnan+0x64>
 8014016:	462a      	mov	r2, r5
 8014018:	4649      	mov	r1, r9
 801401a:	4620      	mov	r0, r4
 801401c:	f7ff ffa8 	bl	8013f70 <L_shift>
 8014020:	4544      	cmp	r4, r8
 8014022:	d952      	bls.n	80140ca <__hexnan+0x10e>
 8014024:	2300      	movs	r3, #0
 8014026:	f1a4 0904 	sub.w	r9, r4, #4
 801402a:	f844 3c04 	str.w	r3, [r4, #-4]
 801402e:	461d      	mov	r5, r3
 8014030:	464c      	mov	r4, r9
 8014032:	f8cd b008 	str.w	fp, [sp, #8]
 8014036:	9903      	ldr	r1, [sp, #12]
 8014038:	e7d7      	b.n	8013fea <__hexnan+0x2e>
 801403a:	2a29      	cmp	r2, #41	@ 0x29
 801403c:	d157      	bne.n	80140ee <__hexnan+0x132>
 801403e:	3102      	adds	r1, #2
 8014040:	f8ca 1000 	str.w	r1, [sl]
 8014044:	f1bb 0f00 	cmp.w	fp, #0
 8014048:	d051      	beq.n	80140ee <__hexnan+0x132>
 801404a:	454c      	cmp	r4, r9
 801404c:	d206      	bcs.n	801405c <__hexnan+0xa0>
 801404e:	2d07      	cmp	r5, #7
 8014050:	dc04      	bgt.n	801405c <__hexnan+0xa0>
 8014052:	462a      	mov	r2, r5
 8014054:	4649      	mov	r1, r9
 8014056:	4620      	mov	r0, r4
 8014058:	f7ff ff8a 	bl	8013f70 <L_shift>
 801405c:	4544      	cmp	r4, r8
 801405e:	d936      	bls.n	80140ce <__hexnan+0x112>
 8014060:	4623      	mov	r3, r4
 8014062:	f1a8 0204 	sub.w	r2, r8, #4
 8014066:	f853 1b04 	ldr.w	r1, [r3], #4
 801406a:	429f      	cmp	r7, r3
 801406c:	f842 1f04 	str.w	r1, [r2, #4]!
 8014070:	d2f9      	bcs.n	8014066 <__hexnan+0xaa>
 8014072:	1b3b      	subs	r3, r7, r4
 8014074:	f023 0303 	bic.w	r3, r3, #3
 8014078:	3304      	adds	r3, #4
 801407a:	3401      	adds	r4, #1
 801407c:	3e03      	subs	r6, #3
 801407e:	42b4      	cmp	r4, r6
 8014080:	bf88      	it	hi
 8014082:	2304      	movhi	r3, #4
 8014084:	2200      	movs	r2, #0
 8014086:	4443      	add	r3, r8
 8014088:	f843 2b04 	str.w	r2, [r3], #4
 801408c:	429f      	cmp	r7, r3
 801408e:	d2fb      	bcs.n	8014088 <__hexnan+0xcc>
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	b91b      	cbnz	r3, 801409c <__hexnan+0xe0>
 8014094:	4547      	cmp	r7, r8
 8014096:	d128      	bne.n	80140ea <__hexnan+0x12e>
 8014098:	2301      	movs	r3, #1
 801409a:	603b      	str	r3, [r7, #0]
 801409c:	2005      	movs	r0, #5
 801409e:	b007      	add	sp, #28
 80140a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a4:	3501      	adds	r5, #1
 80140a6:	2d08      	cmp	r5, #8
 80140a8:	f10b 0b01 	add.w	fp, fp, #1
 80140ac:	dd06      	ble.n	80140bc <__hexnan+0x100>
 80140ae:	4544      	cmp	r4, r8
 80140b0:	d9c1      	bls.n	8014036 <__hexnan+0x7a>
 80140b2:	2300      	movs	r3, #0
 80140b4:	2501      	movs	r5, #1
 80140b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80140ba:	3c04      	subs	r4, #4
 80140bc:	6822      	ldr	r2, [r4, #0]
 80140be:	f000 000f 	and.w	r0, r0, #15
 80140c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80140c6:	6020      	str	r0, [r4, #0]
 80140c8:	e7b5      	b.n	8014036 <__hexnan+0x7a>
 80140ca:	2508      	movs	r5, #8
 80140cc:	e7b3      	b.n	8014036 <__hexnan+0x7a>
 80140ce:	9b01      	ldr	r3, [sp, #4]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d0dd      	beq.n	8014090 <__hexnan+0xd4>
 80140d4:	f04f 32ff 	mov.w	r2, #4294967295
 80140d8:	f1c3 0320 	rsb	r3, r3, #32
 80140dc:	40da      	lsrs	r2, r3
 80140de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80140e2:	4013      	ands	r3, r2
 80140e4:	f846 3c04 	str.w	r3, [r6, #-4]
 80140e8:	e7d2      	b.n	8014090 <__hexnan+0xd4>
 80140ea:	3f04      	subs	r7, #4
 80140ec:	e7d0      	b.n	8014090 <__hexnan+0xd4>
 80140ee:	2004      	movs	r0, #4
 80140f0:	e7d5      	b.n	801409e <__hexnan+0xe2>

080140f2 <__ascii_mbtowc>:
 80140f2:	b082      	sub	sp, #8
 80140f4:	b901      	cbnz	r1, 80140f8 <__ascii_mbtowc+0x6>
 80140f6:	a901      	add	r1, sp, #4
 80140f8:	b142      	cbz	r2, 801410c <__ascii_mbtowc+0x1a>
 80140fa:	b14b      	cbz	r3, 8014110 <__ascii_mbtowc+0x1e>
 80140fc:	7813      	ldrb	r3, [r2, #0]
 80140fe:	600b      	str	r3, [r1, #0]
 8014100:	7812      	ldrb	r2, [r2, #0]
 8014102:	1e10      	subs	r0, r2, #0
 8014104:	bf18      	it	ne
 8014106:	2001      	movne	r0, #1
 8014108:	b002      	add	sp, #8
 801410a:	4770      	bx	lr
 801410c:	4610      	mov	r0, r2
 801410e:	e7fb      	b.n	8014108 <__ascii_mbtowc+0x16>
 8014110:	f06f 0001 	mvn.w	r0, #1
 8014114:	e7f8      	b.n	8014108 <__ascii_mbtowc+0x16>
	...

08014118 <_Balloc>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	69c6      	ldr	r6, [r0, #28]
 801411c:	4604      	mov	r4, r0
 801411e:	460d      	mov	r5, r1
 8014120:	b976      	cbnz	r6, 8014140 <_Balloc+0x28>
 8014122:	2010      	movs	r0, #16
 8014124:	f7fc fc62 	bl	80109ec <malloc>
 8014128:	4602      	mov	r2, r0
 801412a:	61e0      	str	r0, [r4, #28]
 801412c:	b920      	cbnz	r0, 8014138 <_Balloc+0x20>
 801412e:	216b      	movs	r1, #107	@ 0x6b
 8014130:	4b17      	ldr	r3, [pc, #92]	@ (8014190 <_Balloc+0x78>)
 8014132:	4818      	ldr	r0, [pc, #96]	@ (8014194 <_Balloc+0x7c>)
 8014134:	f7fc fc34 	bl	80109a0 <__assert_func>
 8014138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801413c:	6006      	str	r6, [r0, #0]
 801413e:	60c6      	str	r6, [r0, #12]
 8014140:	69e6      	ldr	r6, [r4, #28]
 8014142:	68f3      	ldr	r3, [r6, #12]
 8014144:	b183      	cbz	r3, 8014168 <_Balloc+0x50>
 8014146:	69e3      	ldr	r3, [r4, #28]
 8014148:	68db      	ldr	r3, [r3, #12]
 801414a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801414e:	b9b8      	cbnz	r0, 8014180 <_Balloc+0x68>
 8014150:	2101      	movs	r1, #1
 8014152:	fa01 f605 	lsl.w	r6, r1, r5
 8014156:	1d72      	adds	r2, r6, #5
 8014158:	4620      	mov	r0, r4
 801415a:	0092      	lsls	r2, r2, #2
 801415c:	f001 f8aa 	bl	80152b4 <_calloc_r>
 8014160:	b160      	cbz	r0, 801417c <_Balloc+0x64>
 8014162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014166:	e00e      	b.n	8014186 <_Balloc+0x6e>
 8014168:	2221      	movs	r2, #33	@ 0x21
 801416a:	2104      	movs	r1, #4
 801416c:	4620      	mov	r0, r4
 801416e:	f001 f8a1 	bl	80152b4 <_calloc_r>
 8014172:	69e3      	ldr	r3, [r4, #28]
 8014174:	60f0      	str	r0, [r6, #12]
 8014176:	68db      	ldr	r3, [r3, #12]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d1e4      	bne.n	8014146 <_Balloc+0x2e>
 801417c:	2000      	movs	r0, #0
 801417e:	bd70      	pop	{r4, r5, r6, pc}
 8014180:	6802      	ldr	r2, [r0, #0]
 8014182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014186:	2300      	movs	r3, #0
 8014188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801418c:	e7f7      	b.n	801417e <_Balloc+0x66>
 801418e:	bf00      	nop
 8014190:	080161e0 	.word	0x080161e0
 8014194:	0801632f 	.word	0x0801632f

08014198 <_Bfree>:
 8014198:	b570      	push	{r4, r5, r6, lr}
 801419a:	69c6      	ldr	r6, [r0, #28]
 801419c:	4605      	mov	r5, r0
 801419e:	460c      	mov	r4, r1
 80141a0:	b976      	cbnz	r6, 80141c0 <_Bfree+0x28>
 80141a2:	2010      	movs	r0, #16
 80141a4:	f7fc fc22 	bl	80109ec <malloc>
 80141a8:	4602      	mov	r2, r0
 80141aa:	61e8      	str	r0, [r5, #28]
 80141ac:	b920      	cbnz	r0, 80141b8 <_Bfree+0x20>
 80141ae:	218f      	movs	r1, #143	@ 0x8f
 80141b0:	4b08      	ldr	r3, [pc, #32]	@ (80141d4 <_Bfree+0x3c>)
 80141b2:	4809      	ldr	r0, [pc, #36]	@ (80141d8 <_Bfree+0x40>)
 80141b4:	f7fc fbf4 	bl	80109a0 <__assert_func>
 80141b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80141bc:	6006      	str	r6, [r0, #0]
 80141be:	60c6      	str	r6, [r0, #12]
 80141c0:	b13c      	cbz	r4, 80141d2 <_Bfree+0x3a>
 80141c2:	69eb      	ldr	r3, [r5, #28]
 80141c4:	6862      	ldr	r2, [r4, #4]
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80141cc:	6021      	str	r1, [r4, #0]
 80141ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80141d2:	bd70      	pop	{r4, r5, r6, pc}
 80141d4:	080161e0 	.word	0x080161e0
 80141d8:	0801632f 	.word	0x0801632f

080141dc <__multadd>:
 80141dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141e0:	4607      	mov	r7, r0
 80141e2:	460c      	mov	r4, r1
 80141e4:	461e      	mov	r6, r3
 80141e6:	2000      	movs	r0, #0
 80141e8:	690d      	ldr	r5, [r1, #16]
 80141ea:	f101 0c14 	add.w	ip, r1, #20
 80141ee:	f8dc 3000 	ldr.w	r3, [ip]
 80141f2:	3001      	adds	r0, #1
 80141f4:	b299      	uxth	r1, r3
 80141f6:	fb02 6101 	mla	r1, r2, r1, r6
 80141fa:	0c1e      	lsrs	r6, r3, #16
 80141fc:	0c0b      	lsrs	r3, r1, #16
 80141fe:	fb02 3306 	mla	r3, r2, r6, r3
 8014202:	b289      	uxth	r1, r1
 8014204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014208:	4285      	cmp	r5, r0
 801420a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801420e:	f84c 1b04 	str.w	r1, [ip], #4
 8014212:	dcec      	bgt.n	80141ee <__multadd+0x12>
 8014214:	b30e      	cbz	r6, 801425a <__multadd+0x7e>
 8014216:	68a3      	ldr	r3, [r4, #8]
 8014218:	42ab      	cmp	r3, r5
 801421a:	dc19      	bgt.n	8014250 <__multadd+0x74>
 801421c:	6861      	ldr	r1, [r4, #4]
 801421e:	4638      	mov	r0, r7
 8014220:	3101      	adds	r1, #1
 8014222:	f7ff ff79 	bl	8014118 <_Balloc>
 8014226:	4680      	mov	r8, r0
 8014228:	b928      	cbnz	r0, 8014236 <__multadd+0x5a>
 801422a:	4602      	mov	r2, r0
 801422c:	21ba      	movs	r1, #186	@ 0xba
 801422e:	4b0c      	ldr	r3, [pc, #48]	@ (8014260 <__multadd+0x84>)
 8014230:	480c      	ldr	r0, [pc, #48]	@ (8014264 <__multadd+0x88>)
 8014232:	f7fc fbb5 	bl	80109a0 <__assert_func>
 8014236:	6922      	ldr	r2, [r4, #16]
 8014238:	f104 010c 	add.w	r1, r4, #12
 801423c:	3202      	adds	r2, #2
 801423e:	0092      	lsls	r2, r2, #2
 8014240:	300c      	adds	r0, #12
 8014242:	f7fe fd56 	bl	8012cf2 <memcpy>
 8014246:	4621      	mov	r1, r4
 8014248:	4638      	mov	r0, r7
 801424a:	f7ff ffa5 	bl	8014198 <_Bfree>
 801424e:	4644      	mov	r4, r8
 8014250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014254:	3501      	adds	r5, #1
 8014256:	615e      	str	r6, [r3, #20]
 8014258:	6125      	str	r5, [r4, #16]
 801425a:	4620      	mov	r0, r4
 801425c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014260:	080162be 	.word	0x080162be
 8014264:	0801632f 	.word	0x0801632f

08014268 <__s2b>:
 8014268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801426c:	4615      	mov	r5, r2
 801426e:	2209      	movs	r2, #9
 8014270:	461f      	mov	r7, r3
 8014272:	3308      	adds	r3, #8
 8014274:	460c      	mov	r4, r1
 8014276:	fb93 f3f2 	sdiv	r3, r3, r2
 801427a:	4606      	mov	r6, r0
 801427c:	2201      	movs	r2, #1
 801427e:	2100      	movs	r1, #0
 8014280:	429a      	cmp	r2, r3
 8014282:	db09      	blt.n	8014298 <__s2b+0x30>
 8014284:	4630      	mov	r0, r6
 8014286:	f7ff ff47 	bl	8014118 <_Balloc>
 801428a:	b940      	cbnz	r0, 801429e <__s2b+0x36>
 801428c:	4602      	mov	r2, r0
 801428e:	21d3      	movs	r1, #211	@ 0xd3
 8014290:	4b18      	ldr	r3, [pc, #96]	@ (80142f4 <__s2b+0x8c>)
 8014292:	4819      	ldr	r0, [pc, #100]	@ (80142f8 <__s2b+0x90>)
 8014294:	f7fc fb84 	bl	80109a0 <__assert_func>
 8014298:	0052      	lsls	r2, r2, #1
 801429a:	3101      	adds	r1, #1
 801429c:	e7f0      	b.n	8014280 <__s2b+0x18>
 801429e:	9b08      	ldr	r3, [sp, #32]
 80142a0:	2d09      	cmp	r5, #9
 80142a2:	6143      	str	r3, [r0, #20]
 80142a4:	f04f 0301 	mov.w	r3, #1
 80142a8:	6103      	str	r3, [r0, #16]
 80142aa:	dd16      	ble.n	80142da <__s2b+0x72>
 80142ac:	f104 0909 	add.w	r9, r4, #9
 80142b0:	46c8      	mov	r8, r9
 80142b2:	442c      	add	r4, r5
 80142b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80142b8:	4601      	mov	r1, r0
 80142ba:	220a      	movs	r2, #10
 80142bc:	4630      	mov	r0, r6
 80142be:	3b30      	subs	r3, #48	@ 0x30
 80142c0:	f7ff ff8c 	bl	80141dc <__multadd>
 80142c4:	45a0      	cmp	r8, r4
 80142c6:	d1f5      	bne.n	80142b4 <__s2b+0x4c>
 80142c8:	f1a5 0408 	sub.w	r4, r5, #8
 80142cc:	444c      	add	r4, r9
 80142ce:	1b2d      	subs	r5, r5, r4
 80142d0:	1963      	adds	r3, r4, r5
 80142d2:	42bb      	cmp	r3, r7
 80142d4:	db04      	blt.n	80142e0 <__s2b+0x78>
 80142d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142da:	2509      	movs	r5, #9
 80142dc:	340a      	adds	r4, #10
 80142de:	e7f6      	b.n	80142ce <__s2b+0x66>
 80142e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80142e4:	4601      	mov	r1, r0
 80142e6:	220a      	movs	r2, #10
 80142e8:	4630      	mov	r0, r6
 80142ea:	3b30      	subs	r3, #48	@ 0x30
 80142ec:	f7ff ff76 	bl	80141dc <__multadd>
 80142f0:	e7ee      	b.n	80142d0 <__s2b+0x68>
 80142f2:	bf00      	nop
 80142f4:	080162be 	.word	0x080162be
 80142f8:	0801632f 	.word	0x0801632f

080142fc <__hi0bits>:
 80142fc:	4603      	mov	r3, r0
 80142fe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014302:	bf3a      	itte	cc
 8014304:	0403      	lslcc	r3, r0, #16
 8014306:	2010      	movcc	r0, #16
 8014308:	2000      	movcs	r0, #0
 801430a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801430e:	bf3c      	itt	cc
 8014310:	021b      	lslcc	r3, r3, #8
 8014312:	3008      	addcc	r0, #8
 8014314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014318:	bf3c      	itt	cc
 801431a:	011b      	lslcc	r3, r3, #4
 801431c:	3004      	addcc	r0, #4
 801431e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014322:	bf3c      	itt	cc
 8014324:	009b      	lslcc	r3, r3, #2
 8014326:	3002      	addcc	r0, #2
 8014328:	2b00      	cmp	r3, #0
 801432a:	db05      	blt.n	8014338 <__hi0bits+0x3c>
 801432c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014330:	f100 0001 	add.w	r0, r0, #1
 8014334:	bf08      	it	eq
 8014336:	2020      	moveq	r0, #32
 8014338:	4770      	bx	lr

0801433a <__lo0bits>:
 801433a:	6803      	ldr	r3, [r0, #0]
 801433c:	4602      	mov	r2, r0
 801433e:	f013 0007 	ands.w	r0, r3, #7
 8014342:	d00b      	beq.n	801435c <__lo0bits+0x22>
 8014344:	07d9      	lsls	r1, r3, #31
 8014346:	d421      	bmi.n	801438c <__lo0bits+0x52>
 8014348:	0798      	lsls	r0, r3, #30
 801434a:	bf49      	itett	mi
 801434c:	085b      	lsrmi	r3, r3, #1
 801434e:	089b      	lsrpl	r3, r3, #2
 8014350:	2001      	movmi	r0, #1
 8014352:	6013      	strmi	r3, [r2, #0]
 8014354:	bf5c      	itt	pl
 8014356:	2002      	movpl	r0, #2
 8014358:	6013      	strpl	r3, [r2, #0]
 801435a:	4770      	bx	lr
 801435c:	b299      	uxth	r1, r3
 801435e:	b909      	cbnz	r1, 8014364 <__lo0bits+0x2a>
 8014360:	2010      	movs	r0, #16
 8014362:	0c1b      	lsrs	r3, r3, #16
 8014364:	b2d9      	uxtb	r1, r3
 8014366:	b909      	cbnz	r1, 801436c <__lo0bits+0x32>
 8014368:	3008      	adds	r0, #8
 801436a:	0a1b      	lsrs	r3, r3, #8
 801436c:	0719      	lsls	r1, r3, #28
 801436e:	bf04      	itt	eq
 8014370:	091b      	lsreq	r3, r3, #4
 8014372:	3004      	addeq	r0, #4
 8014374:	0799      	lsls	r1, r3, #30
 8014376:	bf04      	itt	eq
 8014378:	089b      	lsreq	r3, r3, #2
 801437a:	3002      	addeq	r0, #2
 801437c:	07d9      	lsls	r1, r3, #31
 801437e:	d403      	bmi.n	8014388 <__lo0bits+0x4e>
 8014380:	085b      	lsrs	r3, r3, #1
 8014382:	f100 0001 	add.w	r0, r0, #1
 8014386:	d003      	beq.n	8014390 <__lo0bits+0x56>
 8014388:	6013      	str	r3, [r2, #0]
 801438a:	4770      	bx	lr
 801438c:	2000      	movs	r0, #0
 801438e:	4770      	bx	lr
 8014390:	2020      	movs	r0, #32
 8014392:	4770      	bx	lr

08014394 <__i2b>:
 8014394:	b510      	push	{r4, lr}
 8014396:	460c      	mov	r4, r1
 8014398:	2101      	movs	r1, #1
 801439a:	f7ff febd 	bl	8014118 <_Balloc>
 801439e:	4602      	mov	r2, r0
 80143a0:	b928      	cbnz	r0, 80143ae <__i2b+0x1a>
 80143a2:	f240 1145 	movw	r1, #325	@ 0x145
 80143a6:	4b04      	ldr	r3, [pc, #16]	@ (80143b8 <__i2b+0x24>)
 80143a8:	4804      	ldr	r0, [pc, #16]	@ (80143bc <__i2b+0x28>)
 80143aa:	f7fc faf9 	bl	80109a0 <__assert_func>
 80143ae:	2301      	movs	r3, #1
 80143b0:	6144      	str	r4, [r0, #20]
 80143b2:	6103      	str	r3, [r0, #16]
 80143b4:	bd10      	pop	{r4, pc}
 80143b6:	bf00      	nop
 80143b8:	080162be 	.word	0x080162be
 80143bc:	0801632f 	.word	0x0801632f

080143c0 <__multiply>:
 80143c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143c4:	4617      	mov	r7, r2
 80143c6:	690a      	ldr	r2, [r1, #16]
 80143c8:	693b      	ldr	r3, [r7, #16]
 80143ca:	4689      	mov	r9, r1
 80143cc:	429a      	cmp	r2, r3
 80143ce:	bfa2      	ittt	ge
 80143d0:	463b      	movge	r3, r7
 80143d2:	460f      	movge	r7, r1
 80143d4:	4699      	movge	r9, r3
 80143d6:	693d      	ldr	r5, [r7, #16]
 80143d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	6879      	ldr	r1, [r7, #4]
 80143e0:	eb05 060a 	add.w	r6, r5, sl
 80143e4:	42b3      	cmp	r3, r6
 80143e6:	b085      	sub	sp, #20
 80143e8:	bfb8      	it	lt
 80143ea:	3101      	addlt	r1, #1
 80143ec:	f7ff fe94 	bl	8014118 <_Balloc>
 80143f0:	b930      	cbnz	r0, 8014400 <__multiply+0x40>
 80143f2:	4602      	mov	r2, r0
 80143f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80143f8:	4b40      	ldr	r3, [pc, #256]	@ (80144fc <__multiply+0x13c>)
 80143fa:	4841      	ldr	r0, [pc, #260]	@ (8014500 <__multiply+0x140>)
 80143fc:	f7fc fad0 	bl	80109a0 <__assert_func>
 8014400:	f100 0414 	add.w	r4, r0, #20
 8014404:	4623      	mov	r3, r4
 8014406:	2200      	movs	r2, #0
 8014408:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801440c:	4573      	cmp	r3, lr
 801440e:	d320      	bcc.n	8014452 <__multiply+0x92>
 8014410:	f107 0814 	add.w	r8, r7, #20
 8014414:	f109 0114 	add.w	r1, r9, #20
 8014418:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801441c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014420:	9302      	str	r3, [sp, #8]
 8014422:	1beb      	subs	r3, r5, r7
 8014424:	3b15      	subs	r3, #21
 8014426:	f023 0303 	bic.w	r3, r3, #3
 801442a:	3304      	adds	r3, #4
 801442c:	3715      	adds	r7, #21
 801442e:	42bd      	cmp	r5, r7
 8014430:	bf38      	it	cc
 8014432:	2304      	movcc	r3, #4
 8014434:	9301      	str	r3, [sp, #4]
 8014436:	9b02      	ldr	r3, [sp, #8]
 8014438:	9103      	str	r1, [sp, #12]
 801443a:	428b      	cmp	r3, r1
 801443c:	d80c      	bhi.n	8014458 <__multiply+0x98>
 801443e:	2e00      	cmp	r6, #0
 8014440:	dd03      	ble.n	801444a <__multiply+0x8a>
 8014442:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014446:	2b00      	cmp	r3, #0
 8014448:	d055      	beq.n	80144f6 <__multiply+0x136>
 801444a:	6106      	str	r6, [r0, #16]
 801444c:	b005      	add	sp, #20
 801444e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014452:	f843 2b04 	str.w	r2, [r3], #4
 8014456:	e7d9      	b.n	801440c <__multiply+0x4c>
 8014458:	f8b1 a000 	ldrh.w	sl, [r1]
 801445c:	f1ba 0f00 	cmp.w	sl, #0
 8014460:	d01f      	beq.n	80144a2 <__multiply+0xe2>
 8014462:	46c4      	mov	ip, r8
 8014464:	46a1      	mov	r9, r4
 8014466:	2700      	movs	r7, #0
 8014468:	f85c 2b04 	ldr.w	r2, [ip], #4
 801446c:	f8d9 3000 	ldr.w	r3, [r9]
 8014470:	fa1f fb82 	uxth.w	fp, r2
 8014474:	b29b      	uxth	r3, r3
 8014476:	fb0a 330b 	mla	r3, sl, fp, r3
 801447a:	443b      	add	r3, r7
 801447c:	f8d9 7000 	ldr.w	r7, [r9]
 8014480:	0c12      	lsrs	r2, r2, #16
 8014482:	0c3f      	lsrs	r7, r7, #16
 8014484:	fb0a 7202 	mla	r2, sl, r2, r7
 8014488:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801448c:	b29b      	uxth	r3, r3
 801448e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014492:	4565      	cmp	r5, ip
 8014494:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014498:	f849 3b04 	str.w	r3, [r9], #4
 801449c:	d8e4      	bhi.n	8014468 <__multiply+0xa8>
 801449e:	9b01      	ldr	r3, [sp, #4]
 80144a0:	50e7      	str	r7, [r4, r3]
 80144a2:	9b03      	ldr	r3, [sp, #12]
 80144a4:	3104      	adds	r1, #4
 80144a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80144aa:	f1b9 0f00 	cmp.w	r9, #0
 80144ae:	d020      	beq.n	80144f2 <__multiply+0x132>
 80144b0:	4647      	mov	r7, r8
 80144b2:	46a4      	mov	ip, r4
 80144b4:	f04f 0a00 	mov.w	sl, #0
 80144b8:	6823      	ldr	r3, [r4, #0]
 80144ba:	f8b7 b000 	ldrh.w	fp, [r7]
 80144be:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80144c2:	b29b      	uxth	r3, r3
 80144c4:	fb09 220b 	mla	r2, r9, fp, r2
 80144c8:	4452      	add	r2, sl
 80144ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144ce:	f84c 3b04 	str.w	r3, [ip], #4
 80144d2:	f857 3b04 	ldr.w	r3, [r7], #4
 80144d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80144da:	f8bc 3000 	ldrh.w	r3, [ip]
 80144de:	42bd      	cmp	r5, r7
 80144e0:	fb09 330a 	mla	r3, r9, sl, r3
 80144e4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80144e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80144ec:	d8e5      	bhi.n	80144ba <__multiply+0xfa>
 80144ee:	9a01      	ldr	r2, [sp, #4]
 80144f0:	50a3      	str	r3, [r4, r2]
 80144f2:	3404      	adds	r4, #4
 80144f4:	e79f      	b.n	8014436 <__multiply+0x76>
 80144f6:	3e01      	subs	r6, #1
 80144f8:	e7a1      	b.n	801443e <__multiply+0x7e>
 80144fa:	bf00      	nop
 80144fc:	080162be 	.word	0x080162be
 8014500:	0801632f 	.word	0x0801632f

08014504 <__pow5mult>:
 8014504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014508:	4615      	mov	r5, r2
 801450a:	f012 0203 	ands.w	r2, r2, #3
 801450e:	4607      	mov	r7, r0
 8014510:	460e      	mov	r6, r1
 8014512:	d007      	beq.n	8014524 <__pow5mult+0x20>
 8014514:	4c25      	ldr	r4, [pc, #148]	@ (80145ac <__pow5mult+0xa8>)
 8014516:	3a01      	subs	r2, #1
 8014518:	2300      	movs	r3, #0
 801451a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801451e:	f7ff fe5d 	bl	80141dc <__multadd>
 8014522:	4606      	mov	r6, r0
 8014524:	10ad      	asrs	r5, r5, #2
 8014526:	d03d      	beq.n	80145a4 <__pow5mult+0xa0>
 8014528:	69fc      	ldr	r4, [r7, #28]
 801452a:	b97c      	cbnz	r4, 801454c <__pow5mult+0x48>
 801452c:	2010      	movs	r0, #16
 801452e:	f7fc fa5d 	bl	80109ec <malloc>
 8014532:	4602      	mov	r2, r0
 8014534:	61f8      	str	r0, [r7, #28]
 8014536:	b928      	cbnz	r0, 8014544 <__pow5mult+0x40>
 8014538:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801453c:	4b1c      	ldr	r3, [pc, #112]	@ (80145b0 <__pow5mult+0xac>)
 801453e:	481d      	ldr	r0, [pc, #116]	@ (80145b4 <__pow5mult+0xb0>)
 8014540:	f7fc fa2e 	bl	80109a0 <__assert_func>
 8014544:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014548:	6004      	str	r4, [r0, #0]
 801454a:	60c4      	str	r4, [r0, #12]
 801454c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014550:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014554:	b94c      	cbnz	r4, 801456a <__pow5mult+0x66>
 8014556:	f240 2171 	movw	r1, #625	@ 0x271
 801455a:	4638      	mov	r0, r7
 801455c:	f7ff ff1a 	bl	8014394 <__i2b>
 8014560:	2300      	movs	r3, #0
 8014562:	4604      	mov	r4, r0
 8014564:	f8c8 0008 	str.w	r0, [r8, #8]
 8014568:	6003      	str	r3, [r0, #0]
 801456a:	f04f 0900 	mov.w	r9, #0
 801456e:	07eb      	lsls	r3, r5, #31
 8014570:	d50a      	bpl.n	8014588 <__pow5mult+0x84>
 8014572:	4631      	mov	r1, r6
 8014574:	4622      	mov	r2, r4
 8014576:	4638      	mov	r0, r7
 8014578:	f7ff ff22 	bl	80143c0 <__multiply>
 801457c:	4680      	mov	r8, r0
 801457e:	4631      	mov	r1, r6
 8014580:	4638      	mov	r0, r7
 8014582:	f7ff fe09 	bl	8014198 <_Bfree>
 8014586:	4646      	mov	r6, r8
 8014588:	106d      	asrs	r5, r5, #1
 801458a:	d00b      	beq.n	80145a4 <__pow5mult+0xa0>
 801458c:	6820      	ldr	r0, [r4, #0]
 801458e:	b938      	cbnz	r0, 80145a0 <__pow5mult+0x9c>
 8014590:	4622      	mov	r2, r4
 8014592:	4621      	mov	r1, r4
 8014594:	4638      	mov	r0, r7
 8014596:	f7ff ff13 	bl	80143c0 <__multiply>
 801459a:	6020      	str	r0, [r4, #0]
 801459c:	f8c0 9000 	str.w	r9, [r0]
 80145a0:	4604      	mov	r4, r0
 80145a2:	e7e4      	b.n	801456e <__pow5mult+0x6a>
 80145a4:	4630      	mov	r0, r6
 80145a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145aa:	bf00      	nop
 80145ac:	080164f4 	.word	0x080164f4
 80145b0:	080161e0 	.word	0x080161e0
 80145b4:	0801632f 	.word	0x0801632f

080145b8 <__lshift>:
 80145b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145bc:	460c      	mov	r4, r1
 80145be:	4607      	mov	r7, r0
 80145c0:	4691      	mov	r9, r2
 80145c2:	6923      	ldr	r3, [r4, #16]
 80145c4:	6849      	ldr	r1, [r1, #4]
 80145c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80145ca:	68a3      	ldr	r3, [r4, #8]
 80145cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80145d0:	f108 0601 	add.w	r6, r8, #1
 80145d4:	42b3      	cmp	r3, r6
 80145d6:	db0b      	blt.n	80145f0 <__lshift+0x38>
 80145d8:	4638      	mov	r0, r7
 80145da:	f7ff fd9d 	bl	8014118 <_Balloc>
 80145de:	4605      	mov	r5, r0
 80145e0:	b948      	cbnz	r0, 80145f6 <__lshift+0x3e>
 80145e2:	4602      	mov	r2, r0
 80145e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80145e8:	4b27      	ldr	r3, [pc, #156]	@ (8014688 <__lshift+0xd0>)
 80145ea:	4828      	ldr	r0, [pc, #160]	@ (801468c <__lshift+0xd4>)
 80145ec:	f7fc f9d8 	bl	80109a0 <__assert_func>
 80145f0:	3101      	adds	r1, #1
 80145f2:	005b      	lsls	r3, r3, #1
 80145f4:	e7ee      	b.n	80145d4 <__lshift+0x1c>
 80145f6:	2300      	movs	r3, #0
 80145f8:	f100 0114 	add.w	r1, r0, #20
 80145fc:	f100 0210 	add.w	r2, r0, #16
 8014600:	4618      	mov	r0, r3
 8014602:	4553      	cmp	r3, sl
 8014604:	db33      	blt.n	801466e <__lshift+0xb6>
 8014606:	6920      	ldr	r0, [r4, #16]
 8014608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801460c:	f104 0314 	add.w	r3, r4, #20
 8014610:	f019 091f 	ands.w	r9, r9, #31
 8014614:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014618:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801461c:	d02b      	beq.n	8014676 <__lshift+0xbe>
 801461e:	468a      	mov	sl, r1
 8014620:	2200      	movs	r2, #0
 8014622:	f1c9 0e20 	rsb	lr, r9, #32
 8014626:	6818      	ldr	r0, [r3, #0]
 8014628:	fa00 f009 	lsl.w	r0, r0, r9
 801462c:	4310      	orrs	r0, r2
 801462e:	f84a 0b04 	str.w	r0, [sl], #4
 8014632:	f853 2b04 	ldr.w	r2, [r3], #4
 8014636:	459c      	cmp	ip, r3
 8014638:	fa22 f20e 	lsr.w	r2, r2, lr
 801463c:	d8f3      	bhi.n	8014626 <__lshift+0x6e>
 801463e:	ebac 0304 	sub.w	r3, ip, r4
 8014642:	3b15      	subs	r3, #21
 8014644:	f023 0303 	bic.w	r3, r3, #3
 8014648:	3304      	adds	r3, #4
 801464a:	f104 0015 	add.w	r0, r4, #21
 801464e:	4560      	cmp	r0, ip
 8014650:	bf88      	it	hi
 8014652:	2304      	movhi	r3, #4
 8014654:	50ca      	str	r2, [r1, r3]
 8014656:	b10a      	cbz	r2, 801465c <__lshift+0xa4>
 8014658:	f108 0602 	add.w	r6, r8, #2
 801465c:	3e01      	subs	r6, #1
 801465e:	4638      	mov	r0, r7
 8014660:	4621      	mov	r1, r4
 8014662:	612e      	str	r6, [r5, #16]
 8014664:	f7ff fd98 	bl	8014198 <_Bfree>
 8014668:	4628      	mov	r0, r5
 801466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801466e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014672:	3301      	adds	r3, #1
 8014674:	e7c5      	b.n	8014602 <__lshift+0x4a>
 8014676:	3904      	subs	r1, #4
 8014678:	f853 2b04 	ldr.w	r2, [r3], #4
 801467c:	459c      	cmp	ip, r3
 801467e:	f841 2f04 	str.w	r2, [r1, #4]!
 8014682:	d8f9      	bhi.n	8014678 <__lshift+0xc0>
 8014684:	e7ea      	b.n	801465c <__lshift+0xa4>
 8014686:	bf00      	nop
 8014688:	080162be 	.word	0x080162be
 801468c:	0801632f 	.word	0x0801632f

08014690 <__mcmp>:
 8014690:	4603      	mov	r3, r0
 8014692:	690a      	ldr	r2, [r1, #16]
 8014694:	6900      	ldr	r0, [r0, #16]
 8014696:	b530      	push	{r4, r5, lr}
 8014698:	1a80      	subs	r0, r0, r2
 801469a:	d10e      	bne.n	80146ba <__mcmp+0x2a>
 801469c:	3314      	adds	r3, #20
 801469e:	3114      	adds	r1, #20
 80146a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80146a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80146a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80146ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80146b0:	4295      	cmp	r5, r2
 80146b2:	d003      	beq.n	80146bc <__mcmp+0x2c>
 80146b4:	d205      	bcs.n	80146c2 <__mcmp+0x32>
 80146b6:	f04f 30ff 	mov.w	r0, #4294967295
 80146ba:	bd30      	pop	{r4, r5, pc}
 80146bc:	42a3      	cmp	r3, r4
 80146be:	d3f3      	bcc.n	80146a8 <__mcmp+0x18>
 80146c0:	e7fb      	b.n	80146ba <__mcmp+0x2a>
 80146c2:	2001      	movs	r0, #1
 80146c4:	e7f9      	b.n	80146ba <__mcmp+0x2a>
	...

080146c8 <__mdiff>:
 80146c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146cc:	4689      	mov	r9, r1
 80146ce:	4606      	mov	r6, r0
 80146d0:	4611      	mov	r1, r2
 80146d2:	4648      	mov	r0, r9
 80146d4:	4614      	mov	r4, r2
 80146d6:	f7ff ffdb 	bl	8014690 <__mcmp>
 80146da:	1e05      	subs	r5, r0, #0
 80146dc:	d112      	bne.n	8014704 <__mdiff+0x3c>
 80146de:	4629      	mov	r1, r5
 80146e0:	4630      	mov	r0, r6
 80146e2:	f7ff fd19 	bl	8014118 <_Balloc>
 80146e6:	4602      	mov	r2, r0
 80146e8:	b928      	cbnz	r0, 80146f6 <__mdiff+0x2e>
 80146ea:	f240 2137 	movw	r1, #567	@ 0x237
 80146ee:	4b3e      	ldr	r3, [pc, #248]	@ (80147e8 <__mdiff+0x120>)
 80146f0:	483e      	ldr	r0, [pc, #248]	@ (80147ec <__mdiff+0x124>)
 80146f2:	f7fc f955 	bl	80109a0 <__assert_func>
 80146f6:	2301      	movs	r3, #1
 80146f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80146fc:	4610      	mov	r0, r2
 80146fe:	b003      	add	sp, #12
 8014700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014704:	bfbc      	itt	lt
 8014706:	464b      	movlt	r3, r9
 8014708:	46a1      	movlt	r9, r4
 801470a:	4630      	mov	r0, r6
 801470c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014710:	bfba      	itte	lt
 8014712:	461c      	movlt	r4, r3
 8014714:	2501      	movlt	r5, #1
 8014716:	2500      	movge	r5, #0
 8014718:	f7ff fcfe 	bl	8014118 <_Balloc>
 801471c:	4602      	mov	r2, r0
 801471e:	b918      	cbnz	r0, 8014728 <__mdiff+0x60>
 8014720:	f240 2145 	movw	r1, #581	@ 0x245
 8014724:	4b30      	ldr	r3, [pc, #192]	@ (80147e8 <__mdiff+0x120>)
 8014726:	e7e3      	b.n	80146f0 <__mdiff+0x28>
 8014728:	f100 0b14 	add.w	fp, r0, #20
 801472c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014730:	f109 0310 	add.w	r3, r9, #16
 8014734:	60c5      	str	r5, [r0, #12]
 8014736:	f04f 0c00 	mov.w	ip, #0
 801473a:	f109 0514 	add.w	r5, r9, #20
 801473e:	46d9      	mov	r9, fp
 8014740:	6926      	ldr	r6, [r4, #16]
 8014742:	f104 0e14 	add.w	lr, r4, #20
 8014746:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801474a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801474e:	9301      	str	r3, [sp, #4]
 8014750:	9b01      	ldr	r3, [sp, #4]
 8014752:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014756:	f853 af04 	ldr.w	sl, [r3, #4]!
 801475a:	b281      	uxth	r1, r0
 801475c:	9301      	str	r3, [sp, #4]
 801475e:	fa1f f38a 	uxth.w	r3, sl
 8014762:	1a5b      	subs	r3, r3, r1
 8014764:	0c00      	lsrs	r0, r0, #16
 8014766:	4463      	add	r3, ip
 8014768:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801476c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014770:	b29b      	uxth	r3, r3
 8014772:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014776:	4576      	cmp	r6, lr
 8014778:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801477c:	f849 3b04 	str.w	r3, [r9], #4
 8014780:	d8e6      	bhi.n	8014750 <__mdiff+0x88>
 8014782:	1b33      	subs	r3, r6, r4
 8014784:	3b15      	subs	r3, #21
 8014786:	f023 0303 	bic.w	r3, r3, #3
 801478a:	3415      	adds	r4, #21
 801478c:	3304      	adds	r3, #4
 801478e:	42a6      	cmp	r6, r4
 8014790:	bf38      	it	cc
 8014792:	2304      	movcc	r3, #4
 8014794:	441d      	add	r5, r3
 8014796:	445b      	add	r3, fp
 8014798:	461e      	mov	r6, r3
 801479a:	462c      	mov	r4, r5
 801479c:	4544      	cmp	r4, r8
 801479e:	d30e      	bcc.n	80147be <__mdiff+0xf6>
 80147a0:	f108 0103 	add.w	r1, r8, #3
 80147a4:	1b49      	subs	r1, r1, r5
 80147a6:	f021 0103 	bic.w	r1, r1, #3
 80147aa:	3d03      	subs	r5, #3
 80147ac:	45a8      	cmp	r8, r5
 80147ae:	bf38      	it	cc
 80147b0:	2100      	movcc	r1, #0
 80147b2:	440b      	add	r3, r1
 80147b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80147b8:	b199      	cbz	r1, 80147e2 <__mdiff+0x11a>
 80147ba:	6117      	str	r7, [r2, #16]
 80147bc:	e79e      	b.n	80146fc <__mdiff+0x34>
 80147be:	46e6      	mov	lr, ip
 80147c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80147c4:	fa1f fc81 	uxth.w	ip, r1
 80147c8:	44f4      	add	ip, lr
 80147ca:	0c08      	lsrs	r0, r1, #16
 80147cc:	4471      	add	r1, lr
 80147ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80147d2:	b289      	uxth	r1, r1
 80147d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80147d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80147dc:	f846 1b04 	str.w	r1, [r6], #4
 80147e0:	e7dc      	b.n	801479c <__mdiff+0xd4>
 80147e2:	3f01      	subs	r7, #1
 80147e4:	e7e6      	b.n	80147b4 <__mdiff+0xec>
 80147e6:	bf00      	nop
 80147e8:	080162be 	.word	0x080162be
 80147ec:	0801632f 	.word	0x0801632f

080147f0 <__ulp>:
 80147f0:	4b0e      	ldr	r3, [pc, #56]	@ (801482c <__ulp+0x3c>)
 80147f2:	400b      	ands	r3, r1
 80147f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	dc08      	bgt.n	801480e <__ulp+0x1e>
 80147fc:	425b      	negs	r3, r3
 80147fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014802:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014806:	da04      	bge.n	8014812 <__ulp+0x22>
 8014808:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801480c:	4113      	asrs	r3, r2
 801480e:	2200      	movs	r2, #0
 8014810:	e008      	b.n	8014824 <__ulp+0x34>
 8014812:	f1a2 0314 	sub.w	r3, r2, #20
 8014816:	2b1e      	cmp	r3, #30
 8014818:	bfd6      	itet	le
 801481a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801481e:	2201      	movgt	r2, #1
 8014820:	40da      	lsrle	r2, r3
 8014822:	2300      	movs	r3, #0
 8014824:	4619      	mov	r1, r3
 8014826:	4610      	mov	r0, r2
 8014828:	4770      	bx	lr
 801482a:	bf00      	nop
 801482c:	7ff00000 	.word	0x7ff00000

08014830 <__b2d>:
 8014830:	6902      	ldr	r2, [r0, #16]
 8014832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014834:	f100 0614 	add.w	r6, r0, #20
 8014838:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 801483c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8014840:	4f1e      	ldr	r7, [pc, #120]	@ (80148bc <__b2d+0x8c>)
 8014842:	4620      	mov	r0, r4
 8014844:	f7ff fd5a 	bl	80142fc <__hi0bits>
 8014848:	4603      	mov	r3, r0
 801484a:	f1c0 0020 	rsb	r0, r0, #32
 801484e:	2b0a      	cmp	r3, #10
 8014850:	f1a2 0504 	sub.w	r5, r2, #4
 8014854:	6008      	str	r0, [r1, #0]
 8014856:	dc12      	bgt.n	801487e <__b2d+0x4e>
 8014858:	42ae      	cmp	r6, r5
 801485a:	bf2c      	ite	cs
 801485c:	2200      	movcs	r2, #0
 801485e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8014862:	f1c3 0c0b 	rsb	ip, r3, #11
 8014866:	3315      	adds	r3, #21
 8014868:	fa24 fe0c 	lsr.w	lr, r4, ip
 801486c:	fa04 f303 	lsl.w	r3, r4, r3
 8014870:	fa22 f20c 	lsr.w	r2, r2, ip
 8014874:	ea4e 0107 	orr.w	r1, lr, r7
 8014878:	431a      	orrs	r2, r3
 801487a:	4610      	mov	r0, r2
 801487c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801487e:	42ae      	cmp	r6, r5
 8014880:	bf36      	itet	cc
 8014882:	f1a2 0508 	subcc.w	r5, r2, #8
 8014886:	2200      	movcs	r2, #0
 8014888:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 801488c:	3b0b      	subs	r3, #11
 801488e:	d012      	beq.n	80148b6 <__b2d+0x86>
 8014890:	f1c3 0720 	rsb	r7, r3, #32
 8014894:	fa22 f107 	lsr.w	r1, r2, r7
 8014898:	409c      	lsls	r4, r3
 801489a:	430c      	orrs	r4, r1
 801489c:	42b5      	cmp	r5, r6
 801489e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80148a2:	bf94      	ite	ls
 80148a4:	2400      	movls	r4, #0
 80148a6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80148aa:	409a      	lsls	r2, r3
 80148ac:	40fc      	lsrs	r4, r7
 80148ae:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80148b2:	4322      	orrs	r2, r4
 80148b4:	e7e1      	b.n	801487a <__b2d+0x4a>
 80148b6:	ea44 0107 	orr.w	r1, r4, r7
 80148ba:	e7de      	b.n	801487a <__b2d+0x4a>
 80148bc:	3ff00000 	.word	0x3ff00000

080148c0 <__d2b>:
 80148c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80148c4:	2101      	movs	r1, #1
 80148c6:	4690      	mov	r8, r2
 80148c8:	4699      	mov	r9, r3
 80148ca:	9e08      	ldr	r6, [sp, #32]
 80148cc:	f7ff fc24 	bl	8014118 <_Balloc>
 80148d0:	4604      	mov	r4, r0
 80148d2:	b930      	cbnz	r0, 80148e2 <__d2b+0x22>
 80148d4:	4602      	mov	r2, r0
 80148d6:	f240 310f 	movw	r1, #783	@ 0x30f
 80148da:	4b23      	ldr	r3, [pc, #140]	@ (8014968 <__d2b+0xa8>)
 80148dc:	4823      	ldr	r0, [pc, #140]	@ (801496c <__d2b+0xac>)
 80148de:	f7fc f85f 	bl	80109a0 <__assert_func>
 80148e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80148e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80148ea:	b10d      	cbz	r5, 80148f0 <__d2b+0x30>
 80148ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80148f0:	9301      	str	r3, [sp, #4]
 80148f2:	f1b8 0300 	subs.w	r3, r8, #0
 80148f6:	d024      	beq.n	8014942 <__d2b+0x82>
 80148f8:	4668      	mov	r0, sp
 80148fa:	9300      	str	r3, [sp, #0]
 80148fc:	f7ff fd1d 	bl	801433a <__lo0bits>
 8014900:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014904:	b1d8      	cbz	r0, 801493e <__d2b+0x7e>
 8014906:	f1c0 0320 	rsb	r3, r0, #32
 801490a:	fa02 f303 	lsl.w	r3, r2, r3
 801490e:	430b      	orrs	r3, r1
 8014910:	40c2      	lsrs	r2, r0
 8014912:	6163      	str	r3, [r4, #20]
 8014914:	9201      	str	r2, [sp, #4]
 8014916:	9b01      	ldr	r3, [sp, #4]
 8014918:	2b00      	cmp	r3, #0
 801491a:	bf0c      	ite	eq
 801491c:	2201      	moveq	r2, #1
 801491e:	2202      	movne	r2, #2
 8014920:	61a3      	str	r3, [r4, #24]
 8014922:	6122      	str	r2, [r4, #16]
 8014924:	b1ad      	cbz	r5, 8014952 <__d2b+0x92>
 8014926:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801492a:	4405      	add	r5, r0
 801492c:	6035      	str	r5, [r6, #0]
 801492e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014934:	6018      	str	r0, [r3, #0]
 8014936:	4620      	mov	r0, r4
 8014938:	b002      	add	sp, #8
 801493a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801493e:	6161      	str	r1, [r4, #20]
 8014940:	e7e9      	b.n	8014916 <__d2b+0x56>
 8014942:	a801      	add	r0, sp, #4
 8014944:	f7ff fcf9 	bl	801433a <__lo0bits>
 8014948:	9b01      	ldr	r3, [sp, #4]
 801494a:	2201      	movs	r2, #1
 801494c:	6163      	str	r3, [r4, #20]
 801494e:	3020      	adds	r0, #32
 8014950:	e7e7      	b.n	8014922 <__d2b+0x62>
 8014952:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014956:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801495a:	6030      	str	r0, [r6, #0]
 801495c:	6918      	ldr	r0, [r3, #16]
 801495e:	f7ff fccd 	bl	80142fc <__hi0bits>
 8014962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014966:	e7e4      	b.n	8014932 <__d2b+0x72>
 8014968:	080162be 	.word	0x080162be
 801496c:	0801632f 	.word	0x0801632f

08014970 <__ratio>:
 8014970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014974:	b085      	sub	sp, #20
 8014976:	e9cd 1000 	strd	r1, r0, [sp]
 801497a:	a902      	add	r1, sp, #8
 801497c:	f7ff ff58 	bl	8014830 <__b2d>
 8014980:	468b      	mov	fp, r1
 8014982:	4606      	mov	r6, r0
 8014984:	460f      	mov	r7, r1
 8014986:	9800      	ldr	r0, [sp, #0]
 8014988:	a903      	add	r1, sp, #12
 801498a:	f7ff ff51 	bl	8014830 <__b2d>
 801498e:	460d      	mov	r5, r1
 8014990:	9b01      	ldr	r3, [sp, #4]
 8014992:	4689      	mov	r9, r1
 8014994:	6919      	ldr	r1, [r3, #16]
 8014996:	9b00      	ldr	r3, [sp, #0]
 8014998:	4604      	mov	r4, r0
 801499a:	691b      	ldr	r3, [r3, #16]
 801499c:	4630      	mov	r0, r6
 801499e:	1ac9      	subs	r1, r1, r3
 80149a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80149a4:	1a9b      	subs	r3, r3, r2
 80149a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	bfcd      	iteet	gt
 80149ae:	463a      	movgt	r2, r7
 80149b0:	462a      	movle	r2, r5
 80149b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80149b6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80149ba:	bfd8      	it	le
 80149bc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80149c0:	464b      	mov	r3, r9
 80149c2:	4622      	mov	r2, r4
 80149c4:	4659      	mov	r1, fp
 80149c6:	f7eb febb 	bl	8000740 <__aeabi_ddiv>
 80149ca:	b005      	add	sp, #20
 80149cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080149d0 <__copybits>:
 80149d0:	3901      	subs	r1, #1
 80149d2:	b570      	push	{r4, r5, r6, lr}
 80149d4:	1149      	asrs	r1, r1, #5
 80149d6:	6914      	ldr	r4, [r2, #16]
 80149d8:	3101      	adds	r1, #1
 80149da:	f102 0314 	add.w	r3, r2, #20
 80149de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80149e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80149e6:	1f05      	subs	r5, r0, #4
 80149e8:	42a3      	cmp	r3, r4
 80149ea:	d30c      	bcc.n	8014a06 <__copybits+0x36>
 80149ec:	1aa3      	subs	r3, r4, r2
 80149ee:	3b11      	subs	r3, #17
 80149f0:	f023 0303 	bic.w	r3, r3, #3
 80149f4:	3211      	adds	r2, #17
 80149f6:	42a2      	cmp	r2, r4
 80149f8:	bf88      	it	hi
 80149fa:	2300      	movhi	r3, #0
 80149fc:	4418      	add	r0, r3
 80149fe:	2300      	movs	r3, #0
 8014a00:	4288      	cmp	r0, r1
 8014a02:	d305      	bcc.n	8014a10 <__copybits+0x40>
 8014a04:	bd70      	pop	{r4, r5, r6, pc}
 8014a06:	f853 6b04 	ldr.w	r6, [r3], #4
 8014a0a:	f845 6f04 	str.w	r6, [r5, #4]!
 8014a0e:	e7eb      	b.n	80149e8 <__copybits+0x18>
 8014a10:	f840 3b04 	str.w	r3, [r0], #4
 8014a14:	e7f4      	b.n	8014a00 <__copybits+0x30>

08014a16 <__any_on>:
 8014a16:	f100 0214 	add.w	r2, r0, #20
 8014a1a:	6900      	ldr	r0, [r0, #16]
 8014a1c:	114b      	asrs	r3, r1, #5
 8014a1e:	4298      	cmp	r0, r3
 8014a20:	b510      	push	{r4, lr}
 8014a22:	db11      	blt.n	8014a48 <__any_on+0x32>
 8014a24:	dd0a      	ble.n	8014a3c <__any_on+0x26>
 8014a26:	f011 011f 	ands.w	r1, r1, #31
 8014a2a:	d007      	beq.n	8014a3c <__any_on+0x26>
 8014a2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014a30:	fa24 f001 	lsr.w	r0, r4, r1
 8014a34:	fa00 f101 	lsl.w	r1, r0, r1
 8014a38:	428c      	cmp	r4, r1
 8014a3a:	d10b      	bne.n	8014a54 <__any_on+0x3e>
 8014a3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014a40:	4293      	cmp	r3, r2
 8014a42:	d803      	bhi.n	8014a4c <__any_on+0x36>
 8014a44:	2000      	movs	r0, #0
 8014a46:	bd10      	pop	{r4, pc}
 8014a48:	4603      	mov	r3, r0
 8014a4a:	e7f7      	b.n	8014a3c <__any_on+0x26>
 8014a4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014a50:	2900      	cmp	r1, #0
 8014a52:	d0f5      	beq.n	8014a40 <__any_on+0x2a>
 8014a54:	2001      	movs	r0, #1
 8014a56:	e7f6      	b.n	8014a46 <__any_on+0x30>

08014a58 <__ascii_wctomb>:
 8014a58:	4603      	mov	r3, r0
 8014a5a:	4608      	mov	r0, r1
 8014a5c:	b141      	cbz	r1, 8014a70 <__ascii_wctomb+0x18>
 8014a5e:	2aff      	cmp	r2, #255	@ 0xff
 8014a60:	d904      	bls.n	8014a6c <__ascii_wctomb+0x14>
 8014a62:	228a      	movs	r2, #138	@ 0x8a
 8014a64:	f04f 30ff 	mov.w	r0, #4294967295
 8014a68:	601a      	str	r2, [r3, #0]
 8014a6a:	4770      	bx	lr
 8014a6c:	2001      	movs	r0, #1
 8014a6e:	700a      	strb	r2, [r1, #0]
 8014a70:	4770      	bx	lr

08014a72 <__ssputs_r>:
 8014a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a76:	461f      	mov	r7, r3
 8014a78:	688e      	ldr	r6, [r1, #8]
 8014a7a:	4682      	mov	sl, r0
 8014a7c:	42be      	cmp	r6, r7
 8014a7e:	460c      	mov	r4, r1
 8014a80:	4690      	mov	r8, r2
 8014a82:	680b      	ldr	r3, [r1, #0]
 8014a84:	d82d      	bhi.n	8014ae2 <__ssputs_r+0x70>
 8014a86:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014a8a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014a8e:	d026      	beq.n	8014ade <__ssputs_r+0x6c>
 8014a90:	6965      	ldr	r5, [r4, #20]
 8014a92:	6909      	ldr	r1, [r1, #16]
 8014a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a98:	eba3 0901 	sub.w	r9, r3, r1
 8014a9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014aa0:	1c7b      	adds	r3, r7, #1
 8014aa2:	444b      	add	r3, r9
 8014aa4:	106d      	asrs	r5, r5, #1
 8014aa6:	429d      	cmp	r5, r3
 8014aa8:	bf38      	it	cc
 8014aaa:	461d      	movcc	r5, r3
 8014aac:	0553      	lsls	r3, r2, #21
 8014aae:	d527      	bpl.n	8014b00 <__ssputs_r+0x8e>
 8014ab0:	4629      	mov	r1, r5
 8014ab2:	f7fb ffcd 	bl	8010a50 <_malloc_r>
 8014ab6:	4606      	mov	r6, r0
 8014ab8:	b360      	cbz	r0, 8014b14 <__ssputs_r+0xa2>
 8014aba:	464a      	mov	r2, r9
 8014abc:	6921      	ldr	r1, [r4, #16]
 8014abe:	f7fe f918 	bl	8012cf2 <memcpy>
 8014ac2:	89a3      	ldrh	r3, [r4, #12]
 8014ac4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014acc:	81a3      	strh	r3, [r4, #12]
 8014ace:	6126      	str	r6, [r4, #16]
 8014ad0:	444e      	add	r6, r9
 8014ad2:	6026      	str	r6, [r4, #0]
 8014ad4:	463e      	mov	r6, r7
 8014ad6:	6165      	str	r5, [r4, #20]
 8014ad8:	eba5 0509 	sub.w	r5, r5, r9
 8014adc:	60a5      	str	r5, [r4, #8]
 8014ade:	42be      	cmp	r6, r7
 8014ae0:	d900      	bls.n	8014ae4 <__ssputs_r+0x72>
 8014ae2:	463e      	mov	r6, r7
 8014ae4:	4632      	mov	r2, r6
 8014ae6:	4641      	mov	r1, r8
 8014ae8:	6820      	ldr	r0, [r4, #0]
 8014aea:	f000 fb62 	bl	80151b2 <memmove>
 8014aee:	2000      	movs	r0, #0
 8014af0:	68a3      	ldr	r3, [r4, #8]
 8014af2:	1b9b      	subs	r3, r3, r6
 8014af4:	60a3      	str	r3, [r4, #8]
 8014af6:	6823      	ldr	r3, [r4, #0]
 8014af8:	4433      	add	r3, r6
 8014afa:	6023      	str	r3, [r4, #0]
 8014afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b00:	462a      	mov	r2, r5
 8014b02:	f000 fbeb 	bl	80152dc <_realloc_r>
 8014b06:	4606      	mov	r6, r0
 8014b08:	2800      	cmp	r0, #0
 8014b0a:	d1e0      	bne.n	8014ace <__ssputs_r+0x5c>
 8014b0c:	4650      	mov	r0, sl
 8014b0e:	6921      	ldr	r1, [r4, #16]
 8014b10:	f7fe ff6e 	bl	80139f0 <_free_r>
 8014b14:	230c      	movs	r3, #12
 8014b16:	f8ca 3000 	str.w	r3, [sl]
 8014b1a:	89a3      	ldrh	r3, [r4, #12]
 8014b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b24:	81a3      	strh	r3, [r4, #12]
 8014b26:	e7e9      	b.n	8014afc <__ssputs_r+0x8a>

08014b28 <_svfiprintf_r>:
 8014b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b2c:	4698      	mov	r8, r3
 8014b2e:	898b      	ldrh	r3, [r1, #12]
 8014b30:	4607      	mov	r7, r0
 8014b32:	061b      	lsls	r3, r3, #24
 8014b34:	460d      	mov	r5, r1
 8014b36:	4614      	mov	r4, r2
 8014b38:	b09d      	sub	sp, #116	@ 0x74
 8014b3a:	d510      	bpl.n	8014b5e <_svfiprintf_r+0x36>
 8014b3c:	690b      	ldr	r3, [r1, #16]
 8014b3e:	b973      	cbnz	r3, 8014b5e <_svfiprintf_r+0x36>
 8014b40:	2140      	movs	r1, #64	@ 0x40
 8014b42:	f7fb ff85 	bl	8010a50 <_malloc_r>
 8014b46:	6028      	str	r0, [r5, #0]
 8014b48:	6128      	str	r0, [r5, #16]
 8014b4a:	b930      	cbnz	r0, 8014b5a <_svfiprintf_r+0x32>
 8014b4c:	230c      	movs	r3, #12
 8014b4e:	603b      	str	r3, [r7, #0]
 8014b50:	f04f 30ff 	mov.w	r0, #4294967295
 8014b54:	b01d      	add	sp, #116	@ 0x74
 8014b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5a:	2340      	movs	r3, #64	@ 0x40
 8014b5c:	616b      	str	r3, [r5, #20]
 8014b5e:	2300      	movs	r3, #0
 8014b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b62:	2320      	movs	r3, #32
 8014b64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014b68:	2330      	movs	r3, #48	@ 0x30
 8014b6a:	f04f 0901 	mov.w	r9, #1
 8014b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b72:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8014d0c <_svfiprintf_r+0x1e4>
 8014b76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014b7a:	4623      	mov	r3, r4
 8014b7c:	469a      	mov	sl, r3
 8014b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b82:	b10a      	cbz	r2, 8014b88 <_svfiprintf_r+0x60>
 8014b84:	2a25      	cmp	r2, #37	@ 0x25
 8014b86:	d1f9      	bne.n	8014b7c <_svfiprintf_r+0x54>
 8014b88:	ebba 0b04 	subs.w	fp, sl, r4
 8014b8c:	d00b      	beq.n	8014ba6 <_svfiprintf_r+0x7e>
 8014b8e:	465b      	mov	r3, fp
 8014b90:	4622      	mov	r2, r4
 8014b92:	4629      	mov	r1, r5
 8014b94:	4638      	mov	r0, r7
 8014b96:	f7ff ff6c 	bl	8014a72 <__ssputs_r>
 8014b9a:	3001      	adds	r0, #1
 8014b9c:	f000 80a7 	beq.w	8014cee <_svfiprintf_r+0x1c6>
 8014ba0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014ba2:	445a      	add	r2, fp
 8014ba4:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	f000 809f 	beq.w	8014cee <_svfiprintf_r+0x1c6>
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8014bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014bba:	f10a 0a01 	add.w	sl, sl, #1
 8014bbe:	9304      	str	r3, [sp, #16]
 8014bc0:	9307      	str	r3, [sp, #28]
 8014bc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014bc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8014bc8:	4654      	mov	r4, sl
 8014bca:	2205      	movs	r2, #5
 8014bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bd0:	484e      	ldr	r0, [pc, #312]	@ (8014d0c <_svfiprintf_r+0x1e4>)
 8014bd2:	f7fe f880 	bl	8012cd6 <memchr>
 8014bd6:	9a04      	ldr	r2, [sp, #16]
 8014bd8:	b9d8      	cbnz	r0, 8014c12 <_svfiprintf_r+0xea>
 8014bda:	06d0      	lsls	r0, r2, #27
 8014bdc:	bf44      	itt	mi
 8014bde:	2320      	movmi	r3, #32
 8014be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014be4:	0711      	lsls	r1, r2, #28
 8014be6:	bf44      	itt	mi
 8014be8:	232b      	movmi	r3, #43	@ 0x2b
 8014bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014bee:	f89a 3000 	ldrb.w	r3, [sl]
 8014bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bf4:	d015      	beq.n	8014c22 <_svfiprintf_r+0xfa>
 8014bf6:	4654      	mov	r4, sl
 8014bf8:	2000      	movs	r0, #0
 8014bfa:	f04f 0c0a 	mov.w	ip, #10
 8014bfe:	9a07      	ldr	r2, [sp, #28]
 8014c00:	4621      	mov	r1, r4
 8014c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c06:	3b30      	subs	r3, #48	@ 0x30
 8014c08:	2b09      	cmp	r3, #9
 8014c0a:	d94b      	bls.n	8014ca4 <_svfiprintf_r+0x17c>
 8014c0c:	b1b0      	cbz	r0, 8014c3c <_svfiprintf_r+0x114>
 8014c0e:	9207      	str	r2, [sp, #28]
 8014c10:	e014      	b.n	8014c3c <_svfiprintf_r+0x114>
 8014c12:	eba0 0308 	sub.w	r3, r0, r8
 8014c16:	fa09 f303 	lsl.w	r3, r9, r3
 8014c1a:	4313      	orrs	r3, r2
 8014c1c:	46a2      	mov	sl, r4
 8014c1e:	9304      	str	r3, [sp, #16]
 8014c20:	e7d2      	b.n	8014bc8 <_svfiprintf_r+0xa0>
 8014c22:	9b03      	ldr	r3, [sp, #12]
 8014c24:	1d19      	adds	r1, r3, #4
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	9103      	str	r1, [sp, #12]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	bfbb      	ittet	lt
 8014c2e:	425b      	neglt	r3, r3
 8014c30:	f042 0202 	orrlt.w	r2, r2, #2
 8014c34:	9307      	strge	r3, [sp, #28]
 8014c36:	9307      	strlt	r3, [sp, #28]
 8014c38:	bfb8      	it	lt
 8014c3a:	9204      	strlt	r2, [sp, #16]
 8014c3c:	7823      	ldrb	r3, [r4, #0]
 8014c3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014c40:	d10a      	bne.n	8014c58 <_svfiprintf_r+0x130>
 8014c42:	7863      	ldrb	r3, [r4, #1]
 8014c44:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c46:	d132      	bne.n	8014cae <_svfiprintf_r+0x186>
 8014c48:	9b03      	ldr	r3, [sp, #12]
 8014c4a:	3402      	adds	r4, #2
 8014c4c:	1d1a      	adds	r2, r3, #4
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	9203      	str	r2, [sp, #12]
 8014c52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014c56:	9305      	str	r3, [sp, #20]
 8014c58:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8014d10 <_svfiprintf_r+0x1e8>
 8014c5c:	2203      	movs	r2, #3
 8014c5e:	4650      	mov	r0, sl
 8014c60:	7821      	ldrb	r1, [r4, #0]
 8014c62:	f7fe f838 	bl	8012cd6 <memchr>
 8014c66:	b138      	cbz	r0, 8014c78 <_svfiprintf_r+0x150>
 8014c68:	2240      	movs	r2, #64	@ 0x40
 8014c6a:	9b04      	ldr	r3, [sp, #16]
 8014c6c:	eba0 000a 	sub.w	r0, r0, sl
 8014c70:	4082      	lsls	r2, r0
 8014c72:	4313      	orrs	r3, r2
 8014c74:	3401      	adds	r4, #1
 8014c76:	9304      	str	r3, [sp, #16]
 8014c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c7c:	2206      	movs	r2, #6
 8014c7e:	4825      	ldr	r0, [pc, #148]	@ (8014d14 <_svfiprintf_r+0x1ec>)
 8014c80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014c84:	f7fe f827 	bl	8012cd6 <memchr>
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	d036      	beq.n	8014cfa <_svfiprintf_r+0x1d2>
 8014c8c:	4b22      	ldr	r3, [pc, #136]	@ (8014d18 <_svfiprintf_r+0x1f0>)
 8014c8e:	bb1b      	cbnz	r3, 8014cd8 <_svfiprintf_r+0x1b0>
 8014c90:	9b03      	ldr	r3, [sp, #12]
 8014c92:	3307      	adds	r3, #7
 8014c94:	f023 0307 	bic.w	r3, r3, #7
 8014c98:	3308      	adds	r3, #8
 8014c9a:	9303      	str	r3, [sp, #12]
 8014c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c9e:	4433      	add	r3, r6
 8014ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ca2:	e76a      	b.n	8014b7a <_svfiprintf_r+0x52>
 8014ca4:	460c      	mov	r4, r1
 8014ca6:	2001      	movs	r0, #1
 8014ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8014cac:	e7a8      	b.n	8014c00 <_svfiprintf_r+0xd8>
 8014cae:	2300      	movs	r3, #0
 8014cb0:	f04f 0c0a 	mov.w	ip, #10
 8014cb4:	4619      	mov	r1, r3
 8014cb6:	3401      	adds	r4, #1
 8014cb8:	9305      	str	r3, [sp, #20]
 8014cba:	4620      	mov	r0, r4
 8014cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cc0:	3a30      	subs	r2, #48	@ 0x30
 8014cc2:	2a09      	cmp	r2, #9
 8014cc4:	d903      	bls.n	8014cce <_svfiprintf_r+0x1a6>
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d0c6      	beq.n	8014c58 <_svfiprintf_r+0x130>
 8014cca:	9105      	str	r1, [sp, #20]
 8014ccc:	e7c4      	b.n	8014c58 <_svfiprintf_r+0x130>
 8014cce:	4604      	mov	r4, r0
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8014cd6:	e7f0      	b.n	8014cba <_svfiprintf_r+0x192>
 8014cd8:	ab03      	add	r3, sp, #12
 8014cda:	9300      	str	r3, [sp, #0]
 8014cdc:	462a      	mov	r2, r5
 8014cde:	4638      	mov	r0, r7
 8014ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8014d1c <_svfiprintf_r+0x1f4>)
 8014ce2:	a904      	add	r1, sp, #16
 8014ce4:	f7fc fe72 	bl	80119cc <_printf_float>
 8014ce8:	1c42      	adds	r2, r0, #1
 8014cea:	4606      	mov	r6, r0
 8014cec:	d1d6      	bne.n	8014c9c <_svfiprintf_r+0x174>
 8014cee:	89ab      	ldrh	r3, [r5, #12]
 8014cf0:	065b      	lsls	r3, r3, #25
 8014cf2:	f53f af2d 	bmi.w	8014b50 <_svfiprintf_r+0x28>
 8014cf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014cf8:	e72c      	b.n	8014b54 <_svfiprintf_r+0x2c>
 8014cfa:	ab03      	add	r3, sp, #12
 8014cfc:	9300      	str	r3, [sp, #0]
 8014cfe:	462a      	mov	r2, r5
 8014d00:	4638      	mov	r0, r7
 8014d02:	4b06      	ldr	r3, [pc, #24]	@ (8014d1c <_svfiprintf_r+0x1f4>)
 8014d04:	a904      	add	r1, sp, #16
 8014d06:	f7fd f8ff 	bl	8011f08 <_printf_i>
 8014d0a:	e7ed      	b.n	8014ce8 <_svfiprintf_r+0x1c0>
 8014d0c:	08016388 	.word	0x08016388
 8014d10:	0801638e 	.word	0x0801638e
 8014d14:	08016392 	.word	0x08016392
 8014d18:	080119cd 	.word	0x080119cd
 8014d1c:	08014a73 	.word	0x08014a73

08014d20 <__sfputc_r>:
 8014d20:	6893      	ldr	r3, [r2, #8]
 8014d22:	b410      	push	{r4}
 8014d24:	3b01      	subs	r3, #1
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	6093      	str	r3, [r2, #8]
 8014d2a:	da07      	bge.n	8014d3c <__sfputc_r+0x1c>
 8014d2c:	6994      	ldr	r4, [r2, #24]
 8014d2e:	42a3      	cmp	r3, r4
 8014d30:	db01      	blt.n	8014d36 <__sfputc_r+0x16>
 8014d32:	290a      	cmp	r1, #10
 8014d34:	d102      	bne.n	8014d3c <__sfputc_r+0x1c>
 8014d36:	bc10      	pop	{r4}
 8014d38:	f7fd bded 	b.w	8012916 <__swbuf_r>
 8014d3c:	6813      	ldr	r3, [r2, #0]
 8014d3e:	1c58      	adds	r0, r3, #1
 8014d40:	6010      	str	r0, [r2, #0]
 8014d42:	7019      	strb	r1, [r3, #0]
 8014d44:	4608      	mov	r0, r1
 8014d46:	bc10      	pop	{r4}
 8014d48:	4770      	bx	lr

08014d4a <__sfputs_r>:
 8014d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d4c:	4606      	mov	r6, r0
 8014d4e:	460f      	mov	r7, r1
 8014d50:	4614      	mov	r4, r2
 8014d52:	18d5      	adds	r5, r2, r3
 8014d54:	42ac      	cmp	r4, r5
 8014d56:	d101      	bne.n	8014d5c <__sfputs_r+0x12>
 8014d58:	2000      	movs	r0, #0
 8014d5a:	e007      	b.n	8014d6c <__sfputs_r+0x22>
 8014d5c:	463a      	mov	r2, r7
 8014d5e:	4630      	mov	r0, r6
 8014d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d64:	f7ff ffdc 	bl	8014d20 <__sfputc_r>
 8014d68:	1c43      	adds	r3, r0, #1
 8014d6a:	d1f3      	bne.n	8014d54 <__sfputs_r+0xa>
 8014d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d70 <_vfiprintf_r>:
 8014d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d74:	460d      	mov	r5, r1
 8014d76:	4614      	mov	r4, r2
 8014d78:	4698      	mov	r8, r3
 8014d7a:	4606      	mov	r6, r0
 8014d7c:	b09d      	sub	sp, #116	@ 0x74
 8014d7e:	b118      	cbz	r0, 8014d88 <_vfiprintf_r+0x18>
 8014d80:	6a03      	ldr	r3, [r0, #32]
 8014d82:	b90b      	cbnz	r3, 8014d88 <_vfiprintf_r+0x18>
 8014d84:	f7fd fc74 	bl	8012670 <__sinit>
 8014d88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d8a:	07d9      	lsls	r1, r3, #31
 8014d8c:	d405      	bmi.n	8014d9a <_vfiprintf_r+0x2a>
 8014d8e:	89ab      	ldrh	r3, [r5, #12]
 8014d90:	059a      	lsls	r2, r3, #22
 8014d92:	d402      	bmi.n	8014d9a <_vfiprintf_r+0x2a>
 8014d94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d96:	f7fd ff94 	bl	8012cc2 <__retarget_lock_acquire_recursive>
 8014d9a:	89ab      	ldrh	r3, [r5, #12]
 8014d9c:	071b      	lsls	r3, r3, #28
 8014d9e:	d501      	bpl.n	8014da4 <_vfiprintf_r+0x34>
 8014da0:	692b      	ldr	r3, [r5, #16]
 8014da2:	b99b      	cbnz	r3, 8014dcc <_vfiprintf_r+0x5c>
 8014da4:	4629      	mov	r1, r5
 8014da6:	4630      	mov	r0, r6
 8014da8:	f7fd fdf4 	bl	8012994 <__swsetup_r>
 8014dac:	b170      	cbz	r0, 8014dcc <_vfiprintf_r+0x5c>
 8014dae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014db0:	07dc      	lsls	r4, r3, #31
 8014db2:	d504      	bpl.n	8014dbe <_vfiprintf_r+0x4e>
 8014db4:	f04f 30ff 	mov.w	r0, #4294967295
 8014db8:	b01d      	add	sp, #116	@ 0x74
 8014dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dbe:	89ab      	ldrh	r3, [r5, #12]
 8014dc0:	0598      	lsls	r0, r3, #22
 8014dc2:	d4f7      	bmi.n	8014db4 <_vfiprintf_r+0x44>
 8014dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014dc6:	f7fd ff7d 	bl	8012cc4 <__retarget_lock_release_recursive>
 8014dca:	e7f3      	b.n	8014db4 <_vfiprintf_r+0x44>
 8014dcc:	2300      	movs	r3, #0
 8014dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dd0:	2320      	movs	r3, #32
 8014dd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014dd6:	2330      	movs	r3, #48	@ 0x30
 8014dd8:	f04f 0901 	mov.w	r9, #1
 8014ddc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014de0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8014f8c <_vfiprintf_r+0x21c>
 8014de4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014de8:	4623      	mov	r3, r4
 8014dea:	469a      	mov	sl, r3
 8014dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014df0:	b10a      	cbz	r2, 8014df6 <_vfiprintf_r+0x86>
 8014df2:	2a25      	cmp	r2, #37	@ 0x25
 8014df4:	d1f9      	bne.n	8014dea <_vfiprintf_r+0x7a>
 8014df6:	ebba 0b04 	subs.w	fp, sl, r4
 8014dfa:	d00b      	beq.n	8014e14 <_vfiprintf_r+0xa4>
 8014dfc:	465b      	mov	r3, fp
 8014dfe:	4622      	mov	r2, r4
 8014e00:	4629      	mov	r1, r5
 8014e02:	4630      	mov	r0, r6
 8014e04:	f7ff ffa1 	bl	8014d4a <__sfputs_r>
 8014e08:	3001      	adds	r0, #1
 8014e0a:	f000 80a7 	beq.w	8014f5c <_vfiprintf_r+0x1ec>
 8014e0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e10:	445a      	add	r2, fp
 8014e12:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e14:	f89a 3000 	ldrb.w	r3, [sl]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	f000 809f 	beq.w	8014f5c <_vfiprintf_r+0x1ec>
 8014e1e:	2300      	movs	r3, #0
 8014e20:	f04f 32ff 	mov.w	r2, #4294967295
 8014e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e28:	f10a 0a01 	add.w	sl, sl, #1
 8014e2c:	9304      	str	r3, [sp, #16]
 8014e2e:	9307      	str	r3, [sp, #28]
 8014e30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e34:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e36:	4654      	mov	r4, sl
 8014e38:	2205      	movs	r2, #5
 8014e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e3e:	4853      	ldr	r0, [pc, #332]	@ (8014f8c <_vfiprintf_r+0x21c>)
 8014e40:	f7fd ff49 	bl	8012cd6 <memchr>
 8014e44:	9a04      	ldr	r2, [sp, #16]
 8014e46:	b9d8      	cbnz	r0, 8014e80 <_vfiprintf_r+0x110>
 8014e48:	06d1      	lsls	r1, r2, #27
 8014e4a:	bf44      	itt	mi
 8014e4c:	2320      	movmi	r3, #32
 8014e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e52:	0713      	lsls	r3, r2, #28
 8014e54:	bf44      	itt	mi
 8014e56:	232b      	movmi	r3, #43	@ 0x2b
 8014e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8014e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e62:	d015      	beq.n	8014e90 <_vfiprintf_r+0x120>
 8014e64:	4654      	mov	r4, sl
 8014e66:	2000      	movs	r0, #0
 8014e68:	f04f 0c0a 	mov.w	ip, #10
 8014e6c:	9a07      	ldr	r2, [sp, #28]
 8014e6e:	4621      	mov	r1, r4
 8014e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e74:	3b30      	subs	r3, #48	@ 0x30
 8014e76:	2b09      	cmp	r3, #9
 8014e78:	d94b      	bls.n	8014f12 <_vfiprintf_r+0x1a2>
 8014e7a:	b1b0      	cbz	r0, 8014eaa <_vfiprintf_r+0x13a>
 8014e7c:	9207      	str	r2, [sp, #28]
 8014e7e:	e014      	b.n	8014eaa <_vfiprintf_r+0x13a>
 8014e80:	eba0 0308 	sub.w	r3, r0, r8
 8014e84:	fa09 f303 	lsl.w	r3, r9, r3
 8014e88:	4313      	orrs	r3, r2
 8014e8a:	46a2      	mov	sl, r4
 8014e8c:	9304      	str	r3, [sp, #16]
 8014e8e:	e7d2      	b.n	8014e36 <_vfiprintf_r+0xc6>
 8014e90:	9b03      	ldr	r3, [sp, #12]
 8014e92:	1d19      	adds	r1, r3, #4
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	9103      	str	r1, [sp, #12]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	bfbb      	ittet	lt
 8014e9c:	425b      	neglt	r3, r3
 8014e9e:	f042 0202 	orrlt.w	r2, r2, #2
 8014ea2:	9307      	strge	r3, [sp, #28]
 8014ea4:	9307      	strlt	r3, [sp, #28]
 8014ea6:	bfb8      	it	lt
 8014ea8:	9204      	strlt	r2, [sp, #16]
 8014eaa:	7823      	ldrb	r3, [r4, #0]
 8014eac:	2b2e      	cmp	r3, #46	@ 0x2e
 8014eae:	d10a      	bne.n	8014ec6 <_vfiprintf_r+0x156>
 8014eb0:	7863      	ldrb	r3, [r4, #1]
 8014eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8014eb4:	d132      	bne.n	8014f1c <_vfiprintf_r+0x1ac>
 8014eb6:	9b03      	ldr	r3, [sp, #12]
 8014eb8:	3402      	adds	r4, #2
 8014eba:	1d1a      	adds	r2, r3, #4
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	9203      	str	r2, [sp, #12]
 8014ec0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014ec4:	9305      	str	r3, [sp, #20]
 8014ec6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8014f90 <_vfiprintf_r+0x220>
 8014eca:	2203      	movs	r2, #3
 8014ecc:	4650      	mov	r0, sl
 8014ece:	7821      	ldrb	r1, [r4, #0]
 8014ed0:	f7fd ff01 	bl	8012cd6 <memchr>
 8014ed4:	b138      	cbz	r0, 8014ee6 <_vfiprintf_r+0x176>
 8014ed6:	2240      	movs	r2, #64	@ 0x40
 8014ed8:	9b04      	ldr	r3, [sp, #16]
 8014eda:	eba0 000a 	sub.w	r0, r0, sl
 8014ede:	4082      	lsls	r2, r0
 8014ee0:	4313      	orrs	r3, r2
 8014ee2:	3401      	adds	r4, #1
 8014ee4:	9304      	str	r3, [sp, #16]
 8014ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014eea:	2206      	movs	r2, #6
 8014eec:	4829      	ldr	r0, [pc, #164]	@ (8014f94 <_vfiprintf_r+0x224>)
 8014eee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014ef2:	f7fd fef0 	bl	8012cd6 <memchr>
 8014ef6:	2800      	cmp	r0, #0
 8014ef8:	d03f      	beq.n	8014f7a <_vfiprintf_r+0x20a>
 8014efa:	4b27      	ldr	r3, [pc, #156]	@ (8014f98 <_vfiprintf_r+0x228>)
 8014efc:	bb1b      	cbnz	r3, 8014f46 <_vfiprintf_r+0x1d6>
 8014efe:	9b03      	ldr	r3, [sp, #12]
 8014f00:	3307      	adds	r3, #7
 8014f02:	f023 0307 	bic.w	r3, r3, #7
 8014f06:	3308      	adds	r3, #8
 8014f08:	9303      	str	r3, [sp, #12]
 8014f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f0c:	443b      	add	r3, r7
 8014f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f10:	e76a      	b.n	8014de8 <_vfiprintf_r+0x78>
 8014f12:	460c      	mov	r4, r1
 8014f14:	2001      	movs	r0, #1
 8014f16:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f1a:	e7a8      	b.n	8014e6e <_vfiprintf_r+0xfe>
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	f04f 0c0a 	mov.w	ip, #10
 8014f22:	4619      	mov	r1, r3
 8014f24:	3401      	adds	r4, #1
 8014f26:	9305      	str	r3, [sp, #20]
 8014f28:	4620      	mov	r0, r4
 8014f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f2e:	3a30      	subs	r2, #48	@ 0x30
 8014f30:	2a09      	cmp	r2, #9
 8014f32:	d903      	bls.n	8014f3c <_vfiprintf_r+0x1cc>
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d0c6      	beq.n	8014ec6 <_vfiprintf_r+0x156>
 8014f38:	9105      	str	r1, [sp, #20]
 8014f3a:	e7c4      	b.n	8014ec6 <_vfiprintf_r+0x156>
 8014f3c:	4604      	mov	r4, r0
 8014f3e:	2301      	movs	r3, #1
 8014f40:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f44:	e7f0      	b.n	8014f28 <_vfiprintf_r+0x1b8>
 8014f46:	ab03      	add	r3, sp, #12
 8014f48:	9300      	str	r3, [sp, #0]
 8014f4a:	462a      	mov	r2, r5
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	4b13      	ldr	r3, [pc, #76]	@ (8014f9c <_vfiprintf_r+0x22c>)
 8014f50:	a904      	add	r1, sp, #16
 8014f52:	f7fc fd3b 	bl	80119cc <_printf_float>
 8014f56:	4607      	mov	r7, r0
 8014f58:	1c78      	adds	r0, r7, #1
 8014f5a:	d1d6      	bne.n	8014f0a <_vfiprintf_r+0x19a>
 8014f5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f5e:	07d9      	lsls	r1, r3, #31
 8014f60:	d405      	bmi.n	8014f6e <_vfiprintf_r+0x1fe>
 8014f62:	89ab      	ldrh	r3, [r5, #12]
 8014f64:	059a      	lsls	r2, r3, #22
 8014f66:	d402      	bmi.n	8014f6e <_vfiprintf_r+0x1fe>
 8014f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f6a:	f7fd feab 	bl	8012cc4 <__retarget_lock_release_recursive>
 8014f6e:	89ab      	ldrh	r3, [r5, #12]
 8014f70:	065b      	lsls	r3, r3, #25
 8014f72:	f53f af1f 	bmi.w	8014db4 <_vfiprintf_r+0x44>
 8014f76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f78:	e71e      	b.n	8014db8 <_vfiprintf_r+0x48>
 8014f7a:	ab03      	add	r3, sp, #12
 8014f7c:	9300      	str	r3, [sp, #0]
 8014f7e:	462a      	mov	r2, r5
 8014f80:	4630      	mov	r0, r6
 8014f82:	4b06      	ldr	r3, [pc, #24]	@ (8014f9c <_vfiprintf_r+0x22c>)
 8014f84:	a904      	add	r1, sp, #16
 8014f86:	f7fc ffbf 	bl	8011f08 <_printf_i>
 8014f8a:	e7e4      	b.n	8014f56 <_vfiprintf_r+0x1e6>
 8014f8c:	08016388 	.word	0x08016388
 8014f90:	0801638e 	.word	0x0801638e
 8014f94:	08016392 	.word	0x08016392
 8014f98:	080119cd 	.word	0x080119cd
 8014f9c:	08014d4b 	.word	0x08014d4b

08014fa0 <__sflush_r>:
 8014fa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fa6:	0716      	lsls	r6, r2, #28
 8014fa8:	4605      	mov	r5, r0
 8014faa:	460c      	mov	r4, r1
 8014fac:	d454      	bmi.n	8015058 <__sflush_r+0xb8>
 8014fae:	684b      	ldr	r3, [r1, #4]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	dc02      	bgt.n	8014fba <__sflush_r+0x1a>
 8014fb4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	dd48      	ble.n	801504c <__sflush_r+0xac>
 8014fba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014fbc:	2e00      	cmp	r6, #0
 8014fbe:	d045      	beq.n	801504c <__sflush_r+0xac>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014fc6:	682f      	ldr	r7, [r5, #0]
 8014fc8:	6a21      	ldr	r1, [r4, #32]
 8014fca:	602b      	str	r3, [r5, #0]
 8014fcc:	d030      	beq.n	8015030 <__sflush_r+0x90>
 8014fce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014fd0:	89a3      	ldrh	r3, [r4, #12]
 8014fd2:	0759      	lsls	r1, r3, #29
 8014fd4:	d505      	bpl.n	8014fe2 <__sflush_r+0x42>
 8014fd6:	6863      	ldr	r3, [r4, #4]
 8014fd8:	1ad2      	subs	r2, r2, r3
 8014fda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014fdc:	b10b      	cbz	r3, 8014fe2 <__sflush_r+0x42>
 8014fde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014fe0:	1ad2      	subs	r2, r2, r3
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	4628      	mov	r0, r5
 8014fe6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014fe8:	6a21      	ldr	r1, [r4, #32]
 8014fea:	47b0      	blx	r6
 8014fec:	1c43      	adds	r3, r0, #1
 8014fee:	89a3      	ldrh	r3, [r4, #12]
 8014ff0:	d106      	bne.n	8015000 <__sflush_r+0x60>
 8014ff2:	6829      	ldr	r1, [r5, #0]
 8014ff4:	291d      	cmp	r1, #29
 8014ff6:	d82b      	bhi.n	8015050 <__sflush_r+0xb0>
 8014ff8:	4a28      	ldr	r2, [pc, #160]	@ (801509c <__sflush_r+0xfc>)
 8014ffa:	40ca      	lsrs	r2, r1
 8014ffc:	07d6      	lsls	r6, r2, #31
 8014ffe:	d527      	bpl.n	8015050 <__sflush_r+0xb0>
 8015000:	2200      	movs	r2, #0
 8015002:	6062      	str	r2, [r4, #4]
 8015004:	6922      	ldr	r2, [r4, #16]
 8015006:	04d9      	lsls	r1, r3, #19
 8015008:	6022      	str	r2, [r4, #0]
 801500a:	d504      	bpl.n	8015016 <__sflush_r+0x76>
 801500c:	1c42      	adds	r2, r0, #1
 801500e:	d101      	bne.n	8015014 <__sflush_r+0x74>
 8015010:	682b      	ldr	r3, [r5, #0]
 8015012:	b903      	cbnz	r3, 8015016 <__sflush_r+0x76>
 8015014:	6560      	str	r0, [r4, #84]	@ 0x54
 8015016:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015018:	602f      	str	r7, [r5, #0]
 801501a:	b1b9      	cbz	r1, 801504c <__sflush_r+0xac>
 801501c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015020:	4299      	cmp	r1, r3
 8015022:	d002      	beq.n	801502a <__sflush_r+0x8a>
 8015024:	4628      	mov	r0, r5
 8015026:	f7fe fce3 	bl	80139f0 <_free_r>
 801502a:	2300      	movs	r3, #0
 801502c:	6363      	str	r3, [r4, #52]	@ 0x34
 801502e:	e00d      	b.n	801504c <__sflush_r+0xac>
 8015030:	2301      	movs	r3, #1
 8015032:	4628      	mov	r0, r5
 8015034:	47b0      	blx	r6
 8015036:	4602      	mov	r2, r0
 8015038:	1c50      	adds	r0, r2, #1
 801503a:	d1c9      	bne.n	8014fd0 <__sflush_r+0x30>
 801503c:	682b      	ldr	r3, [r5, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d0c6      	beq.n	8014fd0 <__sflush_r+0x30>
 8015042:	2b1d      	cmp	r3, #29
 8015044:	d001      	beq.n	801504a <__sflush_r+0xaa>
 8015046:	2b16      	cmp	r3, #22
 8015048:	d11d      	bne.n	8015086 <__sflush_r+0xe6>
 801504a:	602f      	str	r7, [r5, #0]
 801504c:	2000      	movs	r0, #0
 801504e:	e021      	b.n	8015094 <__sflush_r+0xf4>
 8015050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015054:	b21b      	sxth	r3, r3
 8015056:	e01a      	b.n	801508e <__sflush_r+0xee>
 8015058:	690f      	ldr	r7, [r1, #16]
 801505a:	2f00      	cmp	r7, #0
 801505c:	d0f6      	beq.n	801504c <__sflush_r+0xac>
 801505e:	0793      	lsls	r3, r2, #30
 8015060:	bf18      	it	ne
 8015062:	2300      	movne	r3, #0
 8015064:	680e      	ldr	r6, [r1, #0]
 8015066:	bf08      	it	eq
 8015068:	694b      	ldreq	r3, [r1, #20]
 801506a:	1bf6      	subs	r6, r6, r7
 801506c:	600f      	str	r7, [r1, #0]
 801506e:	608b      	str	r3, [r1, #8]
 8015070:	2e00      	cmp	r6, #0
 8015072:	ddeb      	ble.n	801504c <__sflush_r+0xac>
 8015074:	4633      	mov	r3, r6
 8015076:	463a      	mov	r2, r7
 8015078:	4628      	mov	r0, r5
 801507a:	6a21      	ldr	r1, [r4, #32]
 801507c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8015080:	47e0      	blx	ip
 8015082:	2800      	cmp	r0, #0
 8015084:	dc07      	bgt.n	8015096 <__sflush_r+0xf6>
 8015086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801508a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801508e:	f04f 30ff 	mov.w	r0, #4294967295
 8015092:	81a3      	strh	r3, [r4, #12]
 8015094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015096:	4407      	add	r7, r0
 8015098:	1a36      	subs	r6, r6, r0
 801509a:	e7e9      	b.n	8015070 <__sflush_r+0xd0>
 801509c:	20400001 	.word	0x20400001

080150a0 <_fflush_r>:
 80150a0:	b538      	push	{r3, r4, r5, lr}
 80150a2:	690b      	ldr	r3, [r1, #16]
 80150a4:	4605      	mov	r5, r0
 80150a6:	460c      	mov	r4, r1
 80150a8:	b913      	cbnz	r3, 80150b0 <_fflush_r+0x10>
 80150aa:	2500      	movs	r5, #0
 80150ac:	4628      	mov	r0, r5
 80150ae:	bd38      	pop	{r3, r4, r5, pc}
 80150b0:	b118      	cbz	r0, 80150ba <_fflush_r+0x1a>
 80150b2:	6a03      	ldr	r3, [r0, #32]
 80150b4:	b90b      	cbnz	r3, 80150ba <_fflush_r+0x1a>
 80150b6:	f7fd fadb 	bl	8012670 <__sinit>
 80150ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d0f3      	beq.n	80150aa <_fflush_r+0xa>
 80150c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80150c4:	07d0      	lsls	r0, r2, #31
 80150c6:	d404      	bmi.n	80150d2 <_fflush_r+0x32>
 80150c8:	0599      	lsls	r1, r3, #22
 80150ca:	d402      	bmi.n	80150d2 <_fflush_r+0x32>
 80150cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80150ce:	f7fd fdf8 	bl	8012cc2 <__retarget_lock_acquire_recursive>
 80150d2:	4628      	mov	r0, r5
 80150d4:	4621      	mov	r1, r4
 80150d6:	f7ff ff63 	bl	8014fa0 <__sflush_r>
 80150da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80150dc:	4605      	mov	r5, r0
 80150de:	07da      	lsls	r2, r3, #31
 80150e0:	d4e4      	bmi.n	80150ac <_fflush_r+0xc>
 80150e2:	89a3      	ldrh	r3, [r4, #12]
 80150e4:	059b      	lsls	r3, r3, #22
 80150e6:	d4e1      	bmi.n	80150ac <_fflush_r+0xc>
 80150e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80150ea:	f7fd fdeb 	bl	8012cc4 <__retarget_lock_release_recursive>
 80150ee:	e7dd      	b.n	80150ac <_fflush_r+0xc>

080150f0 <__swhatbuf_r>:
 80150f0:	b570      	push	{r4, r5, r6, lr}
 80150f2:	460c      	mov	r4, r1
 80150f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150f8:	4615      	mov	r5, r2
 80150fa:	2900      	cmp	r1, #0
 80150fc:	461e      	mov	r6, r3
 80150fe:	b096      	sub	sp, #88	@ 0x58
 8015100:	da0c      	bge.n	801511c <__swhatbuf_r+0x2c>
 8015102:	89a3      	ldrh	r3, [r4, #12]
 8015104:	2100      	movs	r1, #0
 8015106:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801510a:	bf14      	ite	ne
 801510c:	2340      	movne	r3, #64	@ 0x40
 801510e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015112:	2000      	movs	r0, #0
 8015114:	6031      	str	r1, [r6, #0]
 8015116:	602b      	str	r3, [r5, #0]
 8015118:	b016      	add	sp, #88	@ 0x58
 801511a:	bd70      	pop	{r4, r5, r6, pc}
 801511c:	466a      	mov	r2, sp
 801511e:	f000 f893 	bl	8015248 <_fstat_r>
 8015122:	2800      	cmp	r0, #0
 8015124:	dbed      	blt.n	8015102 <__swhatbuf_r+0x12>
 8015126:	9901      	ldr	r1, [sp, #4]
 8015128:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801512c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015130:	4259      	negs	r1, r3
 8015132:	4159      	adcs	r1, r3
 8015134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015138:	e7eb      	b.n	8015112 <__swhatbuf_r+0x22>

0801513a <__smakebuf_r>:
 801513a:	898b      	ldrh	r3, [r1, #12]
 801513c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801513e:	079d      	lsls	r5, r3, #30
 8015140:	4606      	mov	r6, r0
 8015142:	460c      	mov	r4, r1
 8015144:	d507      	bpl.n	8015156 <__smakebuf_r+0x1c>
 8015146:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801514a:	6023      	str	r3, [r4, #0]
 801514c:	6123      	str	r3, [r4, #16]
 801514e:	2301      	movs	r3, #1
 8015150:	6163      	str	r3, [r4, #20]
 8015152:	b003      	add	sp, #12
 8015154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015156:	466a      	mov	r2, sp
 8015158:	ab01      	add	r3, sp, #4
 801515a:	f7ff ffc9 	bl	80150f0 <__swhatbuf_r>
 801515e:	9f00      	ldr	r7, [sp, #0]
 8015160:	4605      	mov	r5, r0
 8015162:	4639      	mov	r1, r7
 8015164:	4630      	mov	r0, r6
 8015166:	f7fb fc73 	bl	8010a50 <_malloc_r>
 801516a:	b948      	cbnz	r0, 8015180 <__smakebuf_r+0x46>
 801516c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015170:	059a      	lsls	r2, r3, #22
 8015172:	d4ee      	bmi.n	8015152 <__smakebuf_r+0x18>
 8015174:	f023 0303 	bic.w	r3, r3, #3
 8015178:	f043 0302 	orr.w	r3, r3, #2
 801517c:	81a3      	strh	r3, [r4, #12]
 801517e:	e7e2      	b.n	8015146 <__smakebuf_r+0xc>
 8015180:	89a3      	ldrh	r3, [r4, #12]
 8015182:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801518a:	81a3      	strh	r3, [r4, #12]
 801518c:	9b01      	ldr	r3, [sp, #4]
 801518e:	6020      	str	r0, [r4, #0]
 8015190:	b15b      	cbz	r3, 80151aa <__smakebuf_r+0x70>
 8015192:	4630      	mov	r0, r6
 8015194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015198:	f000 f868 	bl	801526c <_isatty_r>
 801519c:	b128      	cbz	r0, 80151aa <__smakebuf_r+0x70>
 801519e:	89a3      	ldrh	r3, [r4, #12]
 80151a0:	f023 0303 	bic.w	r3, r3, #3
 80151a4:	f043 0301 	orr.w	r3, r3, #1
 80151a8:	81a3      	strh	r3, [r4, #12]
 80151aa:	89a3      	ldrh	r3, [r4, #12]
 80151ac:	431d      	orrs	r5, r3
 80151ae:	81a5      	strh	r5, [r4, #12]
 80151b0:	e7cf      	b.n	8015152 <__smakebuf_r+0x18>

080151b2 <memmove>:
 80151b2:	4288      	cmp	r0, r1
 80151b4:	b510      	push	{r4, lr}
 80151b6:	eb01 0402 	add.w	r4, r1, r2
 80151ba:	d902      	bls.n	80151c2 <memmove+0x10>
 80151bc:	4284      	cmp	r4, r0
 80151be:	4623      	mov	r3, r4
 80151c0:	d807      	bhi.n	80151d2 <memmove+0x20>
 80151c2:	1e43      	subs	r3, r0, #1
 80151c4:	42a1      	cmp	r1, r4
 80151c6:	d008      	beq.n	80151da <memmove+0x28>
 80151c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151d0:	e7f8      	b.n	80151c4 <memmove+0x12>
 80151d2:	4601      	mov	r1, r0
 80151d4:	4402      	add	r2, r0
 80151d6:	428a      	cmp	r2, r1
 80151d8:	d100      	bne.n	80151dc <memmove+0x2a>
 80151da:	bd10      	pop	{r4, pc}
 80151dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80151e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80151e4:	e7f7      	b.n	80151d6 <memmove+0x24>

080151e6 <_raise_r>:
 80151e6:	291f      	cmp	r1, #31
 80151e8:	b538      	push	{r3, r4, r5, lr}
 80151ea:	4605      	mov	r5, r0
 80151ec:	460c      	mov	r4, r1
 80151ee:	d904      	bls.n	80151fa <_raise_r+0x14>
 80151f0:	2316      	movs	r3, #22
 80151f2:	6003      	str	r3, [r0, #0]
 80151f4:	f04f 30ff 	mov.w	r0, #4294967295
 80151f8:	bd38      	pop	{r3, r4, r5, pc}
 80151fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80151fc:	b112      	cbz	r2, 8015204 <_raise_r+0x1e>
 80151fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015202:	b94b      	cbnz	r3, 8015218 <_raise_r+0x32>
 8015204:	4628      	mov	r0, r5
 8015206:	f000 f853 	bl	80152b0 <_getpid_r>
 801520a:	4622      	mov	r2, r4
 801520c:	4601      	mov	r1, r0
 801520e:	4628      	mov	r0, r5
 8015210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015214:	f000 b83a 	b.w	801528c <_kill_r>
 8015218:	2b01      	cmp	r3, #1
 801521a:	d00a      	beq.n	8015232 <_raise_r+0x4c>
 801521c:	1c59      	adds	r1, r3, #1
 801521e:	d103      	bne.n	8015228 <_raise_r+0x42>
 8015220:	2316      	movs	r3, #22
 8015222:	6003      	str	r3, [r0, #0]
 8015224:	2001      	movs	r0, #1
 8015226:	e7e7      	b.n	80151f8 <_raise_r+0x12>
 8015228:	2100      	movs	r1, #0
 801522a:	4620      	mov	r0, r4
 801522c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015230:	4798      	blx	r3
 8015232:	2000      	movs	r0, #0
 8015234:	e7e0      	b.n	80151f8 <_raise_r+0x12>
	...

08015238 <raise>:
 8015238:	4b02      	ldr	r3, [pc, #8]	@ (8015244 <raise+0xc>)
 801523a:	4601      	mov	r1, r0
 801523c:	6818      	ldr	r0, [r3, #0]
 801523e:	f7ff bfd2 	b.w	80151e6 <_raise_r>
 8015242:	bf00      	nop
 8015244:	200002e4 	.word	0x200002e4

08015248 <_fstat_r>:
 8015248:	b538      	push	{r3, r4, r5, lr}
 801524a:	2300      	movs	r3, #0
 801524c:	4d06      	ldr	r5, [pc, #24]	@ (8015268 <_fstat_r+0x20>)
 801524e:	4604      	mov	r4, r0
 8015250:	4608      	mov	r0, r1
 8015252:	4611      	mov	r1, r2
 8015254:	602b      	str	r3, [r5, #0]
 8015256:	f7ec fb65 	bl	8001924 <_fstat>
 801525a:	1c43      	adds	r3, r0, #1
 801525c:	d102      	bne.n	8015264 <_fstat_r+0x1c>
 801525e:	682b      	ldr	r3, [r5, #0]
 8015260:	b103      	cbz	r3, 8015264 <_fstat_r+0x1c>
 8015262:	6023      	str	r3, [r4, #0]
 8015264:	bd38      	pop	{r3, r4, r5, pc}
 8015266:	bf00      	nop
 8015268:	20001c34 	.word	0x20001c34

0801526c <_isatty_r>:
 801526c:	b538      	push	{r3, r4, r5, lr}
 801526e:	2300      	movs	r3, #0
 8015270:	4d05      	ldr	r5, [pc, #20]	@ (8015288 <_isatty_r+0x1c>)
 8015272:	4604      	mov	r4, r0
 8015274:	4608      	mov	r0, r1
 8015276:	602b      	str	r3, [r5, #0]
 8015278:	f7ec fb63 	bl	8001942 <_isatty>
 801527c:	1c43      	adds	r3, r0, #1
 801527e:	d102      	bne.n	8015286 <_isatty_r+0x1a>
 8015280:	682b      	ldr	r3, [r5, #0]
 8015282:	b103      	cbz	r3, 8015286 <_isatty_r+0x1a>
 8015284:	6023      	str	r3, [r4, #0]
 8015286:	bd38      	pop	{r3, r4, r5, pc}
 8015288:	20001c34 	.word	0x20001c34

0801528c <_kill_r>:
 801528c:	b538      	push	{r3, r4, r5, lr}
 801528e:	2300      	movs	r3, #0
 8015290:	4d06      	ldr	r5, [pc, #24]	@ (80152ac <_kill_r+0x20>)
 8015292:	4604      	mov	r4, r0
 8015294:	4608      	mov	r0, r1
 8015296:	4611      	mov	r1, r2
 8015298:	602b      	str	r3, [r5, #0]
 801529a:	f7ec fb00 	bl	800189e <_kill>
 801529e:	1c43      	adds	r3, r0, #1
 80152a0:	d102      	bne.n	80152a8 <_kill_r+0x1c>
 80152a2:	682b      	ldr	r3, [r5, #0]
 80152a4:	b103      	cbz	r3, 80152a8 <_kill_r+0x1c>
 80152a6:	6023      	str	r3, [r4, #0]
 80152a8:	bd38      	pop	{r3, r4, r5, pc}
 80152aa:	bf00      	nop
 80152ac:	20001c34 	.word	0x20001c34

080152b0 <_getpid_r>:
 80152b0:	f7ec baee 	b.w	8001890 <_getpid>

080152b4 <_calloc_r>:
 80152b4:	b570      	push	{r4, r5, r6, lr}
 80152b6:	fba1 5402 	umull	r5, r4, r1, r2
 80152ba:	b934      	cbnz	r4, 80152ca <_calloc_r+0x16>
 80152bc:	4629      	mov	r1, r5
 80152be:	f7fb fbc7 	bl	8010a50 <_malloc_r>
 80152c2:	4606      	mov	r6, r0
 80152c4:	b928      	cbnz	r0, 80152d2 <_calloc_r+0x1e>
 80152c6:	4630      	mov	r0, r6
 80152c8:	bd70      	pop	{r4, r5, r6, pc}
 80152ca:	220c      	movs	r2, #12
 80152cc:	2600      	movs	r6, #0
 80152ce:	6002      	str	r2, [r0, #0]
 80152d0:	e7f9      	b.n	80152c6 <_calloc_r+0x12>
 80152d2:	462a      	mov	r2, r5
 80152d4:	4621      	mov	r1, r4
 80152d6:	f7fd fbc3 	bl	8012a60 <memset>
 80152da:	e7f4      	b.n	80152c6 <_calloc_r+0x12>

080152dc <_realloc_r>:
 80152dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152e0:	4607      	mov	r7, r0
 80152e2:	4614      	mov	r4, r2
 80152e4:	460d      	mov	r5, r1
 80152e6:	b921      	cbnz	r1, 80152f2 <_realloc_r+0x16>
 80152e8:	4611      	mov	r1, r2
 80152ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152ee:	f7fb bbaf 	b.w	8010a50 <_malloc_r>
 80152f2:	b92a      	cbnz	r2, 8015300 <_realloc_r+0x24>
 80152f4:	f7fe fb7c 	bl	80139f0 <_free_r>
 80152f8:	4625      	mov	r5, r4
 80152fa:	4628      	mov	r0, r5
 80152fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015300:	f000 f81a 	bl	8015338 <_malloc_usable_size_r>
 8015304:	4284      	cmp	r4, r0
 8015306:	4606      	mov	r6, r0
 8015308:	d802      	bhi.n	8015310 <_realloc_r+0x34>
 801530a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801530e:	d8f4      	bhi.n	80152fa <_realloc_r+0x1e>
 8015310:	4621      	mov	r1, r4
 8015312:	4638      	mov	r0, r7
 8015314:	f7fb fb9c 	bl	8010a50 <_malloc_r>
 8015318:	4680      	mov	r8, r0
 801531a:	b908      	cbnz	r0, 8015320 <_realloc_r+0x44>
 801531c:	4645      	mov	r5, r8
 801531e:	e7ec      	b.n	80152fa <_realloc_r+0x1e>
 8015320:	42b4      	cmp	r4, r6
 8015322:	4622      	mov	r2, r4
 8015324:	4629      	mov	r1, r5
 8015326:	bf28      	it	cs
 8015328:	4632      	movcs	r2, r6
 801532a:	f7fd fce2 	bl	8012cf2 <memcpy>
 801532e:	4629      	mov	r1, r5
 8015330:	4638      	mov	r0, r7
 8015332:	f7fe fb5d 	bl	80139f0 <_free_r>
 8015336:	e7f1      	b.n	801531c <_realloc_r+0x40>

08015338 <_malloc_usable_size_r>:
 8015338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801533c:	1f18      	subs	r0, r3, #4
 801533e:	2b00      	cmp	r3, #0
 8015340:	bfbc      	itt	lt
 8015342:	580b      	ldrlt	r3, [r1, r0]
 8015344:	18c0      	addlt	r0, r0, r3
 8015346:	4770      	bx	lr

08015348 <_init>:
 8015348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801534a:	bf00      	nop
 801534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801534e:	bc08      	pop	{r3}
 8015350:	469e      	mov	lr, r3
 8015352:	4770      	bx	lr

08015354 <_fini>:
 8015354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015356:	bf00      	nop
 8015358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801535a:	bc08      	pop	{r3}
 801535c:	469e      	mov	lr, r3
 801535e:	4770      	bx	lr
