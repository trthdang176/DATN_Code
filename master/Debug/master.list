
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158c0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001318  080159d0  080159d0  000169d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ce8  08016ce8  00018334  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016ce8  08016ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016cf0  08016cf0  00018334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016cf0  08016cf0  00017cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016cf4  08016cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000334  20000000  08016cf8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e90  20000334  0801702c  00018334  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021c4  0801702c  000191c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00018334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d88  00000000  00000000  0001835d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef9  00000000  00000000  000320e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00035fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db1  00000000  00000000  00037190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c099  00000000  00000000  00037f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af52  00000000  00000000  00053fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cc7b  00000000  00000000  0006ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006038  00000000  00000000  000fbbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00101c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000334 	.word	0x20000334
 800012c:	00000000 	.word	0x00000000
 8000130:	080159b8 	.word	0x080159b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000338 	.word	0x20000338
 800014c:	080159b8 	.word	0x080159b8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff fead 	bl	80009d0 <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc23 	bl	80004ec <__aeabi_dmul>
 8000ca6:	f7ff fef9 	bl	8000a9c <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fba4 	bl	80003f8 <__aeabi_ui2d>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb4:	f7ff fc1a 	bl	80004ec <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fa5c 	bl	800017c <__aeabi_dsub>
 8000cc4:	f7ff feea 	bl	8000a9c <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ce0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d013      	beq.n	8000d14 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cf0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000cf4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00b      	beq.n	8000d14 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cfc:	e000      	b.n	8000d00 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cfe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d0a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 feb7 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f8c3 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 f9d5 	bl	80010dc <MX_GPIO_Init>
  MX_CAN_Init();
 8000d32:	f000 f8ff 	bl	8000f34 <MX_CAN_Init>
  MX_I2C1_Init();
 8000d36:	f000 f94f 	bl	8000fd8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d3a:	f000 f97b 	bl	8001034 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d3e:	f000 f9a3 	bl	8001088 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d48:	4840      	ldr	r0, [pc, #256]	@ (8000e4c <main+0x12c>)
 8000d4a:	f002 f90f 	bl	8002f6c <HAL_GPIO_WritePin>
//    AT24Cxx_t pEeprom;
//  AT24Cxx_Init(&pEeprom, 0x50, &hi2c1);
//  char *text_program_1 = "Program test2,74hc560,20";
//  AT24Cxx_write_buffer_bloking(&pEeprom,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)text_program_1,strlen(text_program_1));

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8000d4e:	2264      	movs	r2, #100	@ 0x64
 8000d50:	493f      	ldr	r1, [pc, #252]	@ (8000e50 <main+0x130>)
 8000d52:	4840      	ldr	r0, [pc, #256]	@ (8000e54 <main+0x134>)
 8000d54:	f005 fc49 	bl	80065ea <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
 8000d58:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d5c:	493e      	ldr	r1, [pc, #248]	@ (8000e58 <main+0x138>)
 8000d5e:	483f      	ldr	r0, [pc, #252]	@ (8000e5c <main+0x13c>)
 8000d60:	f005 fc43 	bl	80065ea <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_CAN_Start(&hcan);
 8000d64:	483e      	ldr	r0, [pc, #248]	@ (8000e60 <main+0x140>)
 8000d66:	f001 f8e1 	bl	8001f2c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_BUSOFF );
 8000d6a:	f240 4111 	movw	r1, #1041	@ 0x411
 8000d6e:	483c      	ldr	r0, [pc, #240]	@ (8000e60 <main+0x140>)
 8000d70:	f001 fb33 	bl	80023da <HAL_CAN_ActivateNotification>

//    for (uint8_t i = 0; i < 5; i++) {
//  	printf("SWO Debug!!!\n");
//    }

  BSP_init();
 8000d74:	f00d fc56 	bl	800e624 <BSP_init>
//  1,
//  q_app_post,
//  ARRAY_ELEMENT(q_app_post),
//  (OS_event_t *)0 );

  eeprom_task_init(&hi2c1,EEPROM_ADDRESS);
 8000d78:	2150      	movs	r1, #80	@ 0x50
 8000d7a:	483a      	ldr	r0, [pc, #232]	@ (8000e64 <main+0x144>)
 8000d7c:	f00d f8b6 	bl	800deec <eeprom_task_init>
  static OS_event_t const *q_eeprom_event[10];
  OS_task_create( AO_task_eeprom,
 8000d80:	4b39      	ldr	r3, [pc, #228]	@ (8000e68 <main+0x148>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	2300      	movs	r3, #0
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	230a      	movs	r3, #10
 8000d8a:	4a38      	ldr	r2, [pc, #224]	@ (8000e6c <main+0x14c>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	f00f fe88 	bl	8010aa2 <OS_task_create>
  1,
  q_eeprom_event,
  ARRAY_ELEMENT(q_eeprom_event),
  (OS_event_t *)0 );

  uart_esp32_task_init(&huart1);
 8000d92:	4832      	ldr	r0, [pc, #200]	@ (8000e5c <main+0x13c>)
 8000d94:	f00d fd86 	bl	800e8a4 <uart_esp32_task_init>
  static OS_event_t const *q_uart_esp32_event[10];
  OS_task_create(AO_task_uart_esp32,
 8000d98:	4b35      	ldr	r3, [pc, #212]	@ (8000e70 <main+0x150>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	230a      	movs	r3, #10
 8000da2:	4a34      	ldr	r2, [pc, #208]	@ (8000e74 <main+0x154>)
 8000da4:	2102      	movs	r1, #2
 8000da6:	f00f fe7c 	bl	8010aa2 <OS_task_create>
  2,
  q_uart_esp32_event,
  ARRAY_ELEMENT(q_uart_esp32_event),
  (OS_event_t *)0);

  BlinkyTest_app_init();
 8000daa:	f00e f941 	bl	800f030 <BlinkyTest_app_init>
  static OS_event_t const *TestOS_blinky[10]; /* Event queue */
  OS_task_create(
 8000dae:	4b32      	ldr	r3, [pc, #200]	@ (8000e78 <main+0x158>)
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	230a      	movs	r3, #10
 8000db8:	4a30      	ldr	r2, [pc, #192]	@ (8000e7c <main+0x15c>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	f00f fe71 	bl	8010aa2 <OS_task_create>
  1,
  TestOS_blinky,
  ARRAY_ELEMENT(TestOS_blinky),
  (OS_event_t *)0);

  screen_task_init();
 8000dc0:	f00d fc72 	bl	800e6a8 <screen_task_init>
  static OS_event_t const *q_screen[10]; /* Event queue */
  OS_task_create(
 8000dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e80 <main+0x160>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	230a      	movs	r3, #10
 8000dce:	4a2d      	ldr	r2, [pc, #180]	@ (8000e84 <main+0x164>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	f00f fe66 	bl	8010aa2 <OS_task_create>
  1,
  q_screen,
  ARRAY_ELEMENT(q_screen),
  (OS_event_t *)0);

  ds3231_task_init(&hi2c1,ADDRESS_DS3231);
 8000dd6:	2168      	movs	r1, #104	@ 0x68
 8000dd8:	4822      	ldr	r0, [pc, #136]	@ (8000e64 <main+0x144>)
 8000dda:	f00d fc51 	bl	800e680 <ds3231_task_init>
//  1,
//  q_sd,
//  ARRAY_ELEMENT(q_sd),
//  (OS_event_t *)0);

  can_bus_task_init(&hcan);
 8000dde:	4820      	ldr	r0, [pc, #128]	@ (8000e60 <main+0x140>)
 8000de0:	f00c ff30 	bl	800dc44 <can_bus_task_init>
  static OS_event_t const *Can_app_event[10];
  OS_task_create( AO_task_can_bus,
 8000de4:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <main+0x168>)
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	230a      	movs	r3, #10
 8000dee:	4a27      	ldr	r2, [pc, #156]	@ (8000e8c <main+0x16c>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	f00f fe56 	bl	8010aa2 <OS_task_create>
  1,
  Can_app_event,
  ARRAY_ELEMENT(Can_app_event),
  (OS_event_t *)0);

  HAL_Delay(4500);
 8000df6:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dfa:	f000 feaf 	bl	8001b5c <HAL_Delay>
  Screen_begin(&huart2);
 8000dfe:	4815      	ldr	r0, [pc, #84]	@ (8000e54 <main+0x134>)
 8000e00:	f006 f9b8 	bl	8007174 <Screen_begin>
//  sprintf(string, "Time RTC: %d/%d/%d - %d:%d:%d\n",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]);
//  printf("%s",string);

//  isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
//		  	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));
     isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
 8000e04:	23fa      	movs	r3, #250	@ 0xfa
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <main+0x170>)
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	23fa      	movs	r3, #250	@ 0xfa
 8000e0e:	4a21      	ldr	r2, [pc, #132]	@ (8000e94 <main+0x174>)
 8000e10:	f240 1131 	movw	r1, #305	@ 0x131
 8000e14:	4820      	ldr	r0, [pc, #128]	@ (8000e98 <main+0x178>)
 8000e16:	f00f fd8b 	bl	8010930 <isotp_init_link>
		   	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));

  isotp_init_link(&CAN_iso[1], 0x132, can_iso_send_buf1 , sizeof(can_iso_send_buf1)
 8000e1a:	23fa      	movs	r3, #250	@ 0xfa
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <main+0x17c>)
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	23fa      	movs	r3, #250	@ 0xfa
 8000e24:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea0 <main+0x180>)
 8000e26:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8000e2a:	481e      	ldr	r0, [pc, #120]	@ (8000ea4 <main+0x184>)
 8000e2c:	f00f fd80 	bl	8010930 <isotp_init_link>
		  	  	  	  	  	  	  	, can_iso_recv_buf1, sizeof(can_iso_recv_buf1));

  isotp_init_link(&CAN_iso[2], 0x134, can_iso_send_buf2 , sizeof(can_iso_send_buf2)
 8000e30:	23fa      	movs	r3, #250	@ 0xfa
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <main+0x188>)
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	23fa      	movs	r3, #250	@ 0xfa
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <main+0x18c>)
 8000e3c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8000e40:	481b      	ldr	r0, [pc, #108]	@ (8000eb0 <main+0x190>)
 8000e42:	f00f fd75 	bl	8010930 <isotp_init_link>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint32_t pre;
//  pre = 0;
  	  while (1)
 8000e46:	bf00      	nop
 8000e48:	e7fd      	b.n	8000e46 <main+0x126>
 8000e4a:	bf00      	nop
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	20000b44 	.word	0x20000b44
 8000e54:	20000414 	.word	0x20000414
 8000e58:	20000ba8 	.word	0x20000ba8
 8000e5c:	200003cc 	.word	0x200003cc
 8000e60:	20000350 	.word	0x20000350
 8000e64:	20000378 	.word	0x20000378
 8000e68:	08016808 	.word	0x08016808
 8000e6c:	20000d9c 	.word	0x20000d9c
 8000e70:	08016810 	.word	0x08016810
 8000e74:	20000dc4 	.word	0x20000dc4
 8000e78:	08016814 	.word	0x08016814
 8000e7c:	20000dec 	.word	0x20000dec
 8000e80:	0801680c 	.word	0x0801680c
 8000e84:	20000e14 	.word	0x20000e14
 8000e88:	080160dc 	.word	0x080160dc
 8000e8c:	20000e3c 	.word	0x20000e3c
 8000e90:	2000055c 	.word	0x2000055c
 8000e94:	20000658 	.word	0x20000658
 8000e98:	2000049c 	.word	0x2000049c
 8000e9c:	20000754 	.word	0x20000754
 8000ea0:	20000850 	.word	0x20000850
 8000ea4:	200004dc 	.word	0x200004dc
 8000ea8:	2000094c 	.word	0x2000094c
 8000eac:	20000a48 	.word	0x20000a48
 8000eb0:	2000051c 	.word	0x2000051c

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b090      	sub	sp, #64	@ 0x40
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	2228      	movs	r2, #40	@ 0x28
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f012 f8f8 	bl	80130b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eda:	2301      	movs	r3, #1
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef0:	f107 0318 	add.w	r3, r7, #24
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f004 fe8d 	bl	8005c14 <HAL_RCC_OscConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f00:	f000 faf5 	bl	80014ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f04:	230f      	movs	r3, #15
 8000f06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f005 f8fb 	bl	8006118 <HAL_RCC_ClockConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f28:	f000 fae1 	bl	80014ee <Error_Handler>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3740      	adds	r7, #64	@ 0x40
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	@ 0x28
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f3a:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f3c:	4a25      	ldr	r2, [pc, #148]	@ (8000fd4 <MX_CAN_Init+0xa0>)
 8000f3e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000f40:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f46:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f4c:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f54:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000f58:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f5c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f60:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f68:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f74:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f80:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f86:	4812      	ldr	r0, [pc, #72]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000f88:	f000 fe0c 	bl	8001ba4 <HAL_CAN_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000f92:	f000 faac 	bl	80014ee <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <MX_CAN_Init+0x9c>)
 8000fc4:	f000 fee9 	bl	8001d9a <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	@ 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000350 	.word	0x20000350
 8000fd4:	40006400 	.word	0x40006400

08000fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fde:	4a13      	ldr	r2, [pc, #76]	@ (800102c <MX_I2C1_Init+0x54>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <MX_I2C1_Init+0x58>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MX_I2C1_Init+0x50>)
 8001016:	f001 ffdb 	bl	8002fd0 <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001020:	f000 fa65 	bl	80014ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000378 	.word	0x20000378
 800102c:	40005400 	.word	0x40005400
 8001030:	00061a80 	.word	0x00061a80

08001034 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_USART1_UART_Init+0x4c>)
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <MX_USART1_UART_Init+0x50>)
 800103c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <MX_USART1_UART_Init+0x4c>)
 8001040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_USART1_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <MX_USART1_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_USART1_UART_Init+0x4c>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <MX_USART1_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_USART1_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_USART1_UART_Init+0x4c>)
 800106c:	f005 f9e2 	bl	8006434 <HAL_UART_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001076:	f000 fa3a 	bl	80014ee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200003cc 	.word	0x200003cc
 8001084:	40013800 	.word	0x40013800

08001088 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 800108e:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <MX_USART2_UART_Init+0x50>)
 8001090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 8001094:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f005 f9b8 	bl	8006434 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ca:	f000 fa10 	bl	80014ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000414 	.word	0x20000414
 80010d8:	40004400 	.word	0x40004400

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <MX_GPIO_Init+0xbc>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a28      	ldr	r2, [pc, #160]	@ (8001198 <MX_GPIO_Init+0xbc>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <MX_GPIO_Init+0xbc>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <MX_GPIO_Init+0xbc>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a22      	ldr	r2, [pc, #136]	@ (8001198 <MX_GPIO_Init+0xbc>)
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <MX_GPIO_Init+0xbc>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST_PIN_Pin|GPIO_PIN_8|POWER_ENA_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f248 1102 	movw	r1, #33026	@ 0x8102
 8001126:	481d      	ldr	r0, [pc, #116]	@ (800119c <MX_GPIO_Init+0xc0>)
 8001128:	f001 ff20 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001132:	481b      	ldr	r0, [pc, #108]	@ (80011a0 <MX_GPIO_Init+0xc4>)
 8001134:	f001 ff1a 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_PIN_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
 8001138:	2302      	movs	r3, #2
 800113a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001144:	2301      	movs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	4619      	mov	r1, r3
 800114e:	4813      	ldr	r0, [pc, #76]	@ (800119c <MX_GPIO_Init+0xc0>)
 8001150:	f001 fd88 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 POWER_ENA_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|POWER_ENA_Pin;
 8001154:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2302      	movs	r3, #2
 8001164:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	480b      	ldr	r0, [pc, #44]	@ (800119c <MX_GPIO_Init+0xc0>)
 800116e:	f001 fd79 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2302      	movs	r3, #2
 8001182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <MX_GPIO_Init+0xc4>)
 800118c:	f001 fd6a 	bl	8002c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <HAL_UARTEx_RxEventCallback+0xcc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d10d      	bne.n	80011d8 <HAL_UARTEx_RxEventCallback+0x34>
		// Call to callback function screen
		Screen_RX_data(dataRX);
 80011bc:	482d      	ldr	r0, [pc, #180]	@ (8001274 <HAL_UARTEx_RxEventCallback+0xd0>)
 80011be:	f006 f861 	bl	8007284 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 80011c2:	2264      	movs	r2, #100	@ 0x64
 80011c4:	2100      	movs	r1, #0
 80011c6:	482b      	ldr	r0, [pc, #172]	@ (8001274 <HAL_UARTEx_RxEventCallback+0xd0>)
 80011c8:	f011 ff76 	bl	80130b8 <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 80011cc:	2264      	movs	r2, #100	@ 0x64
 80011ce:	4929      	ldr	r1, [pc, #164]	@ (8001274 <HAL_UARTEx_RxEventCallback+0xd0>)
 80011d0:	4827      	ldr	r0, [pc, #156]	@ (8001270 <HAL_UARTEx_RxEventCallback+0xcc>)
 80011d2:	f005 fa0a 	bl	80065ea <HAL_UARTEx_ReceiveToIdle_IT>

    memset(dataRX_ESP32,0,sizeof(dataRX_ESP32));

		HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
	}
}
 80011d6:	e047      	b.n	8001268 <HAL_UARTEx_RxEventCallback+0xc4>
	} else if (huart->Instance == huart1.Instance) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <HAL_UARTEx_RxEventCallback+0xd4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d141      	bne.n	8001268 <HAL_UARTEx_RxEventCallback+0xc4>
    uart_esp32_t *RX_ESP32 = malloc(sizeof(uart_esp32_t));
 80011e4:	2008      	movs	r0, #8
 80011e6:	f00f ff2f 	bl	8011048 <malloc>
 80011ea:	4603      	mov	r3, r0
 80011ec:	60fb      	str	r3, [r7, #12]
    RX_ESP32->data = malloc(strlen(dataRX_ESP32)+1);
 80011ee:	4823      	ldr	r0, [pc, #140]	@ (800127c <HAL_UARTEx_RxEventCallback+0xd8>)
 80011f0:	f7fe ffb8 	bl	8000164 <strlen>
 80011f4:	4603      	mov	r3, r0
 80011f6:	3301      	adds	r3, #1
 80011f8:	68fc      	ldr	r4, [r7, #12]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00f ff24 	bl	8011048 <malloc>
 8001200:	4603      	mov	r3, r0
 8001202:	6023      	str	r3, [r4, #0]
    memset(RX_ESP32->data,0,strlen(dataRX_ESP32)+1);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681c      	ldr	r4, [r3, #0]
 8001208:	481c      	ldr	r0, [pc, #112]	@ (800127c <HAL_UARTEx_RxEventCallback+0xd8>)
 800120a:	f7fe ffab 	bl	8000164 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	3301      	adds	r3, #1
 8001212:	461a      	mov	r2, r3
 8001214:	2100      	movs	r1, #0
 8001216:	4620      	mov	r0, r4
 8001218:	f011 ff4e 	bl	80130b8 <memset>
    memcpy(RX_ESP32->data,dataRX_ESP32,strlen(dataRX_ESP32));
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681c      	ldr	r4, [r3, #0]
 8001220:	4816      	ldr	r0, [pc, #88]	@ (800127c <HAL_UARTEx_RxEventCallback+0xd8>)
 8001222:	f7fe ff9f 	bl	8000164 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4914      	ldr	r1, [pc, #80]	@ (800127c <HAL_UARTEx_RxEventCallback+0xd8>)
 800122c:	4620      	mov	r0, r4
 800122e:	f012 f898 	bl	8013362 <memcpy>
    RX_ESP32->len = strlen(dataRX_ESP32)+1;
 8001232:	4812      	ldr	r0, [pc, #72]	@ (800127c <HAL_UARTEx_RxEventCallback+0xd8>)
 8001234:	f7fe ff96 	bl	8000164 <strlen>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3201      	adds	r2, #1
 800123e:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,RECEIVE_DATA_ESP32,(uint8_t *)&RX_ESP32,sizeof(uart_esp32_t));
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	f107 020c 	add.w	r2, r7, #12
 8001248:	2308      	movs	r3, #8
 800124a:	2101      	movs	r1, #1
 800124c:	f00f fcca 	bl	8010be4 <OS_task_post_event>
    memset(dataRX_ESP32,0,sizeof(dataRX_ESP32));
 8001250:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001254:	2100      	movs	r1, #0
 8001256:	4809      	ldr	r0, [pc, #36]	@ (800127c <HAL_UARTEx_RxEventCallback+0xd8>)
 8001258:	f011 ff2e 	bl	80130b8 <memset>
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
 800125c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001260:	4906      	ldr	r1, [pc, #24]	@ (800127c <HAL_UARTEx_RxEventCallback+0xd8>)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001264:	f005 f9c1 	bl	80065ea <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	20000414 	.word	0x20000414
 8001274:	20000b44 	.word	0x20000b44
 8001278:	200003cc 	.word	0x200003cc
 800127c:	20000ba8 	.word	0x20000ba8
 8001280:	08016810 	.word	0x08016810

08001284 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance) {

		
	}
  /* Transmit complete wait eeprom write */
	if (AO_task_eeprom->dispatch != NULL && AO_task_eeprom->init != NULL ) {
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_I2C_MemTxCpltCallback+0x34>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <HAL_I2C_MemTxCpltCallback+0x2a>
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <HAL_I2C_MemTxCpltCallback+0x34>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_I2C_MemTxCpltCallback+0x2a>
	  OS_task_post_event(AO_task_eeprom, WAIT_WRITE_TIMEOUT, (uint8_t *)0, 0);
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_I2C_MemTxCpltCallback+0x34>)
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	2300      	movs	r3, #0
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	f00f fc9b 	bl	8010be4 <OS_task_post_event>
	}
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	08016808 	.word	0x08016808

080012bc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012cc:	6018      	str	r0, [r3, #0]
	uint8_t payload[500];
  uint16_t act_size = 0;
 80012ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d2:	f5a3 73fb 	sub.w	r3, r3, #502	@ 0x1f6
 80012d6:	2200      	movs	r2, #0
 80012d8:	801a      	strh	r2, [r3, #0]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80012da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012de:	f5a3 70fe 	sub.w	r0, r3, #508	@ 0x1fc
 80012e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001410 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80012e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001414 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	6800      	ldr	r0, [r0, #0]
 80012ea:	f000 ff55 	bl	8002198 <HAL_CAN_GetRxMessage>
//    if (CAN_iso[1].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
//      isotp_receive(&CAN_iso[1], payload, sizeof(payload), &act_size);
//      get_data_testing_finish(&_Screen,DEVICE_1,payload);
//    }
//  }
   if (RxHeader.StdId == 0x471) {
 80012ee:	4b49      	ldr	r3, [pc, #292]	@ (8001414 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f240 4271 	movw	r2, #1137	@ 0x471
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d128      	bne.n	800134c <HAL_CAN_RxFifo1MsgPendingCallback+0x90>
     isotp_on_can_message(&CAN_iso[0], RxData, RxHeader.DLC);
 80012fa:	4b46      	ldr	r3, [pc, #280]	@ (8001414 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	4943      	ldr	r1, [pc, #268]	@ (8001410 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001304:	4844      	ldr	r0, [pc, #272]	@ (8001418 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001306:	f00f f995 	bl	8010634 <isotp_on_can_message>
       if(RxData[0] == 0x30) {
 800130a:	4b41      	ldr	r3, [pc, #260]	@ (8001410 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b30      	cmp	r3, #48	@ 0x30
 8001310:	d106      	bne.n	8001320 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>
         OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 8001312:	4b42      	ldr	r3, [pc, #264]	@ (800141c <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2300      	movs	r3, #0
 8001318:	2200      	movs	r2, #0
 800131a:	2103      	movs	r1, #3
 800131c:	f00f fc62 	bl	8010be4 <OS_task_post_event>
       }
     //printf("%x,%c,%c,%c,%c,%c,%c,%c\n",RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
     if (CAN_iso[0].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8001320:	4b3d      	ldr	r3, [pc, #244]	@ (8001418 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001326:	2b02      	cmp	r3, #2
 8001328:	d16d      	bne.n	8001406 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[0], payload, sizeof(payload), &act_size);
 800132a:	f107 030a 	add.w	r3, r7, #10
 800132e:	f107 010c 	add.w	r1, r7, #12
 8001332:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001336:	4838      	ldr	r0, [pc, #224]	@ (8001418 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001338:	f00f face 	bl	80108d8 <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_1,payload);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	461a      	mov	r2, r3
 8001342:	2100      	movs	r1, #0
 8001344:	4836      	ldr	r0, [pc, #216]	@ (8001420 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001346:	f00b ff33 	bl	800d1b0 <get_data_testing_finish>
     if (CAN_iso[2].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
       isotp_receive(&CAN_iso[2], payload, sizeof(payload), &act_size);
       get_data_testing_finish(&_Screen,DEVICE_3,payload);
     }
   }
}
 800134a:	e05c      	b.n	8001406 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
   } else if (RxHeader.StdId == 0x472) {
 800134c:	4b31      	ldr	r3, [pc, #196]	@ (8001414 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f240 4272 	movw	r2, #1138	@ 0x472
 8001354:	4293      	cmp	r3, r2
 8001356:	d128      	bne.n	80013aa <HAL_CAN_RxFifo1MsgPendingCallback+0xee>
     isotp_on_can_message(&CAN_iso[1], RxData, RxHeader.DLC);
 8001358:	4b2e      	ldr	r3, [pc, #184]	@ (8001414 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	492b      	ldr	r1, [pc, #172]	@ (8001410 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001362:	4830      	ldr	r0, [pc, #192]	@ (8001424 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001364:	f00f f966 	bl	8010634 <isotp_on_can_message>
     if(RxData[0] == 0x30) {
 8001368:	4b29      	ldr	r3, [pc, #164]	@ (8001410 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b30      	cmp	r3, #48	@ 0x30
 800136e:	d106      	bne.n	800137e <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
       OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 8001370:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	2200      	movs	r2, #0
 8001378:	2103      	movs	r1, #3
 800137a:	f00f fc33 	bl	8010be4 <OS_task_post_event>
     if (CAN_iso[1].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001380:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001384:	2b02      	cmp	r3, #2
 8001386:	d13e      	bne.n	8001406 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[1], payload, sizeof(payload), &act_size);
 8001388:	f107 030a 	add.w	r3, r7, #10
 800138c:	f107 010c 	add.w	r1, r7, #12
 8001390:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001394:	4823      	ldr	r0, [pc, #140]	@ (8001424 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001396:	f00f fa9f 	bl	80108d8 <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_2,payload);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	461a      	mov	r2, r3
 80013a0:	2101      	movs	r1, #1
 80013a2:	481f      	ldr	r0, [pc, #124]	@ (8001420 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 80013a4:	f00b ff04 	bl	800d1b0 <get_data_testing_finish>
}
 80013a8:	e02d      	b.n	8001406 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
   } else if (RxHeader.StdId == 0x474) {
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f240 4274 	movw	r2, #1140	@ 0x474
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d127      	bne.n	8001406 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
     isotp_on_can_message(&CAN_iso[2], RxData, RxHeader.DLC);
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4914      	ldr	r1, [pc, #80]	@ (8001410 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80013c0:	4819      	ldr	r0, [pc, #100]	@ (8001428 <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 80013c2:	f00f f937 	bl	8010634 <isotp_on_can_message>
     if(RxData[0] == 0x30) {
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b30      	cmp	r3, #48	@ 0x30
 80013cc:	d106      	bne.n	80013dc <HAL_CAN_RxFifo1MsgPendingCallback+0x120>
       OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 80013ce:	4b13      	ldr	r3, [pc, #76]	@ (800141c <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	2200      	movs	r2, #0
 80013d6:	2103      	movs	r1, #3
 80013d8:	f00f fc04 	bl	8010be4 <OS_task_post_event>
     if (CAN_iso[2].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 80013de:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d10f      	bne.n	8001406 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[2], payload, sizeof(payload), &act_size);
 80013e6:	f107 030a 	add.w	r3, r7, #10
 80013ea:	f107 010c 	add.w	r1, r7, #12
 80013ee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 80013f4:	f00f fa70 	bl	80108d8 <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_3,payload);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	461a      	mov	r2, r3
 80013fe:	2102      	movs	r1, #2
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001402:	f00b fed5 	bl	800d1b0 <get_data_testing_finish>
}
 8001406:	bf00      	nop
 8001408:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000490 	.word	0x20000490
 8001414:	20000474 	.word	0x20000474
 8001418:	2000049c 	.word	0x2000049c
 800141c:	080160dc 	.word	0x080160dc
 8001420:	20000e6c 	.word	0x20000e6c
 8001424:	200004dc 	.word	0x200004dc
 8001428:	2000051c 	.word	0x2000051c

0800142c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	uint32_t lastError = HAL_CAN_GetError(hcan);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f001 fa0f 	bl	8002858 <HAL_CAN_GetError>
 800143a:	60f8      	str	r0, [r7, #12]
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_write>:

int _write(int file, char *ptr, int len) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e009      	b.n	800146a <_write+0x26>
        ITM_SendChar(ptr[i]);
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	4413      	add	r3, r2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fc38 	bl	8000cd4 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	429a      	cmp	r2, r3
 8001470:	dbf1      	blt.n	8001456 <_write+0x12>
    }
    return len;
 8001472:	687b      	ldr	r3, [r7, #4]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <isotp_user_send_can>:

/* FUNCTION USING IN CAN ISO TP */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	71fb      	strb	r3, [r7, #7]
  TxHeader.DLC = size;
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <isotp_user_send_can+0x48>)
 800148e:	6113      	str	r3, [r2, #16]
  TxHeader.StdId = arbitration_id;
 8001490:	4a0c      	ldr	r2, [pc, #48]	@ (80014c4 <isotp_user_send_can+0x48>)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6013      	str	r3, [r2, #0]
  TxHeader.IDE = CAN_ID_STD;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <isotp_user_send_can+0x48>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <isotp_user_send_can+0x48>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]

  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) == HAL_OK) {
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <isotp_user_send_can+0x4c>)
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	4907      	ldr	r1, [pc, #28]	@ (80014c4 <isotp_user_send_can+0x48>)
 80014a8:	4808      	ldr	r0, [pc, #32]	@ (80014cc <isotp_user_send_can+0x50>)
 80014aa:	f000 fd83 	bl	8001fb4 <HAL_CAN_AddTxMessage>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <isotp_user_send_can+0x3c>
	  return ISOTP_RET_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e001      	b.n	80014bc <isotp_user_send_can+0x40>
  }
  return ISOTP_RET_ERROR;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000045c 	.word	0x2000045c
 80014c8:	20000498 	.word	0x20000498
 80014cc:	20000350 	.word	0x20000350

080014d0 <isotp_user_get_ms>:


uint32_t isotp_user_get_ms(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80014d4:	f000 fb38 	bl	8001b48 <HAL_GetTick>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}

080014de <isotp_user_debug>:

void isotp_user_debug(const char* message, ...) {
 80014de:	b40f      	push	{r0, r1, r2, r3}
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	b004      	add	sp, #16
 80014ec:	4770      	bx	lr

080014ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f2:	b672      	cpsid	i
}
 80014f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f6:	bf00      	nop
 80014f8:	e7fd      	b.n	80014f6 <Error_Handler+0x8>
	...

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_MspInit+0x5c>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a14      	ldr	r2, [pc, #80]	@ (8001558 <HAL_MspInit+0x5c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_MspInit+0x5c>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <HAL_MspInit+0x5c>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <HAL_MspInit+0x5c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_MspInit+0x5c>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_MspInit+0x60>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <HAL_MspInit+0x60>)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000

08001560 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a28      	ldr	r2, [pc, #160]	@ (800161c <HAL_CAN_MspInit+0xbc>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d149      	bne.n	8001614 <HAL_CAN_MspInit+0xb4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001580:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <HAL_CAN_MspInit+0xc0>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	4a26      	ldr	r2, [pc, #152]	@ (8001620 <HAL_CAN_MspInit+0xc0>)
 8001586:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800158a:	61d3      	str	r3, [r2, #28]
 800158c:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <HAL_CAN_MspInit+0xc0>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <HAL_CAN_MspInit+0xc0>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a20      	ldr	r2, [pc, #128]	@ (8001620 <HAL_CAN_MspInit+0xc0>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <HAL_CAN_MspInit+0xc0>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	4817      	ldr	r0, [pc, #92]	@ (8001624 <HAL_CAN_MspInit+0xc4>)
 80015c6:	f001 fb4d 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	4811      	ldr	r0, [pc, #68]	@ (8001624 <HAL_CAN_MspInit+0xc4>)
 80015e0:	f001 fb40 	bl	8002c64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	2013      	movs	r0, #19
 80015ea:	f001 fa36 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80015ee:	2013      	movs	r0, #19
 80015f0:	f001 fa4f 	bl	8002a92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	2015      	movs	r0, #21
 80015fa:	f001 fa2e 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80015fe:	2015      	movs	r0, #21
 8001600:	f001 fa47 	bl	8002a92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2016      	movs	r0, #22
 800160a:	f001 fa26 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800160e:	2016      	movs	r0, #22
 8001610:	f001 fa3f 	bl	8002a92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40006400 	.word	0x40006400
 8001620:	40021000 	.word	0x40021000
 8001624:	40010800 	.word	0x40010800

08001628 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <HAL_I2C_MspInit+0x80>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d12b      	bne.n	80016a0 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <HAL_I2C_MspInit+0x84>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <HAL_I2C_MspInit+0x84>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_I2C_MspInit+0x84>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001660:	23c0      	movs	r3, #192	@ 0xc0
 8001662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001664:	2312      	movs	r3, #18
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4619      	mov	r1, r3
 8001672:	480f      	ldr	r0, [pc, #60]	@ (80016b0 <HAL_I2C_MspInit+0x88>)
 8001674:	f001 faf6 	bl	8002c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <HAL_I2C_MspInit+0x84>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	4a0b      	ldr	r2, [pc, #44]	@ (80016ac <HAL_I2C_MspInit+0x84>)
 800167e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001682:	61d3      	str	r3, [r2, #28]
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_I2C_MspInit+0x84>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	201f      	movs	r0, #31
 8001696:	f001 f9e0 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800169a:	201f      	movs	r0, #31
 800169c:	f001 f9f9 	bl	8002a92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40005400 	.word	0x40005400
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010c00 	.word	0x40010c00

080016b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a3f      	ldr	r2, [pc, #252]	@ (80017cc <HAL_UART_MspInit+0x118>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d13a      	bne.n	800174a <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d4:	4b3e      	ldr	r3, [pc, #248]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a3d      	ldr	r2, [pc, #244]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 80016da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b3b      	ldr	r3, [pc, #236]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b38      	ldr	r3, [pc, #224]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a37      	ldr	r2, [pc, #220]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b35      	ldr	r3, [pc, #212]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0318 	add.w	r3, r7, #24
 8001716:	4619      	mov	r1, r3
 8001718:	482e      	ldr	r0, [pc, #184]	@ (80017d4 <HAL_UART_MspInit+0x120>)
 800171a:	f001 faa3 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800171e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	4619      	mov	r1, r3
 8001732:	4828      	ldr	r0, [pc, #160]	@ (80017d4 <HAL_UART_MspInit+0x120>)
 8001734:	f001 fa96 	bl	8002c64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	2025      	movs	r0, #37	@ 0x25
 800173e:	f001 f98c 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001742:	2025      	movs	r0, #37	@ 0x25
 8001744:	f001 f9a5 	bl	8002a92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001748:	e03c      	b.n	80017c4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a22      	ldr	r2, [pc, #136]	@ (80017d8 <HAL_UART_MspInit+0x124>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d137      	bne.n	80017c4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001754:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	4a1d      	ldr	r2, [pc, #116]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 800175a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800175e:	61d3      	str	r3, [r2, #28]
 8001760:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a17      	ldr	r2, [pc, #92]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <HAL_UART_MspInit+0x11c>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001784:	2304      	movs	r3, #4
 8001786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0318 	add.w	r3, r7, #24
 8001794:	4619      	mov	r1, r3
 8001796:	480f      	ldr	r0, [pc, #60]	@ (80017d4 <HAL_UART_MspInit+0x120>)
 8001798:	f001 fa64 	bl	8002c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800179c:	2308      	movs	r3, #8
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0318 	add.w	r3, r7, #24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4809      	ldr	r0, [pc, #36]	@ (80017d4 <HAL_UART_MspInit+0x120>)
 80017b0:	f001 fa58 	bl	8002c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	2026      	movs	r0, #38	@ 0x26
 80017ba:	f001 f94e 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017be:	2026      	movs	r0, #38	@ 0x26
 80017c0:	f001 f967 	bl	8002a92 <HAL_NVIC_EnableIRQ>
}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	@ 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40013800 	.word	0x40013800
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40004400 	.word	0x40004400

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
//	  {
//	    FatFsCnt = 0;
//	    SDTimer_Handler();
//	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182e:	f000 f979 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  OS_TimeEvt_tick();
 8001832:	f00f fa45 	bl	8010cc0 <OS_TimeEvt_tick>

  if (!HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <SysTick_Handler+0x48>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4619      	mov	r1, r3
 800183c:	480d      	ldr	r0, [pc, #52]	@ (8001874 <SysTick_Handler+0x4c>)
 800183e:	f000 fc88 	bl	8002152 <HAL_CAN_IsTxMessagePending>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10f      	bne.n	8001868 <SysTick_Handler+0x40>
//	  isotp_poll(&CAN_iso[0]);
	   for(uint8_t i = 0; i < 3; i++) {
 8001848:	2300      	movs	r3, #0
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	e009      	b.n	8001862 <SysTick_Handler+0x3a>
	     isotp_poll(&CAN_iso[i]);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	019b      	lsls	r3, r3, #6
 8001852:	4a09      	ldr	r2, [pc, #36]	@ (8001878 <SysTick_Handler+0x50>)
 8001854:	4413      	add	r3, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f00f f891 	bl	801097e <isotp_poll>
	   for(uint8_t i = 0; i < 3; i++) {
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	3301      	adds	r3, #1
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d9f2      	bls.n	800184e <SysTick_Handler+0x26>
	   }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000498 	.word	0x20000498
 8001874:	20000350 	.word	0x20000350
 8001878:	2000049c 	.word	0x2000049c

0800187c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001882:	f000 fdcf 	bl	8002424 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000350 	.word	0x20000350

08001890 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <CAN1_RX1_IRQHandler+0x10>)
 8001896:	f000 fdc5 	bl	8002424 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000350 	.word	0x20000350

080018a4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <CAN1_SCE_IRQHandler+0x10>)
 80018aa:	f000 fdbb 	bl	8002424 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000350 	.word	0x20000350

080018b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <I2C1_EV_IRQHandler+0x10>)
 80018be:	f002 fa27 	bl	8003d10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000378 	.word	0x20000378

080018cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <USART1_IRQHandler+0x10>)
 80018d2:	f004 fee7 	bl	80066a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200003cc 	.word	0x200003cc

080018e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <USART2_IRQHandler+0x10>)
 80018e6:	f004 fedd 	bl	80066a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000414 	.word	0x20000414

080018f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <_kill>:

int _kill(int pid, int sig)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190c:	f011 fce6 	bl	80132dc <__errno>
 8001910:	4603      	mov	r3, r0
 8001912:	2216      	movs	r2, #22
 8001914:	601a      	str	r2, [r3, #0]
  return -1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_exit>:

void _exit (int status)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800192a:	f04f 31ff 	mov.w	r1, #4294967295
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffe7 	bl	8001902 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <_exit+0x12>

08001938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e00a      	b.n	8001960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800194a:	f3af 8000 	nop.w
 800194e:	4601      	mov	r1, r0
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	60ba      	str	r2, [r7, #8]
 8001956:	b2ca      	uxtb	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf0      	blt.n	800194a <_read+0x12>
  }

  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001998:	605a      	str	r2, [r3, #4]
  return 0;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
	...

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	@ (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f011 fc6a 	bl	80132dc <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	@ (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20005000 	.word	0x20005000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	20000e64 	.word	0x20000e64
 8001a3c:	200021c8 	.word	0x200021c8

08001a40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a4c:	f7ff fff8 	bl	8001a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480b      	ldr	r0, [pc, #44]	@ (8001a80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a52:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a54:	4a0c      	ldr	r2, [pc, #48]	@ (8001a88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a09      	ldr	r2, [pc, #36]	@ (8001a8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a68:	4c09      	ldr	r4, [pc, #36]	@ (8001a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f011 fc37 	bl	80132e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a7a:	f7ff f951 	bl	8000d20 <main>
  bx lr
 8001a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8001a88:	08016cf8 	.word	0x08016cf8
  ldr r2, =_sbss
 8001a8c:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8001a90:	200021c4 	.word	0x200021c4

08001a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC1_2_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <HAL_Init+0x28>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <HAL_Init+0x28>)
 8001aa2:	f043 0310 	orr.w	r3, r3, #16
 8001aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 ffcb 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f000 f808 	bl	8001ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab4:	f7ff fd22 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_InitTick+0x54>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_InitTick+0x58>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 ffe3 	bl	8002aae <HAL_SYSTICK_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00e      	b.n	8001b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d80a      	bhi.n	8001b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f000 ffab 	bl	8002a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b04:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <HAL_InitTick+0x5c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <HAL_IncTick+0x1c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a03      	ldr	r2, [pc, #12]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000e68 	.word	0x20000e68

08001b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b02      	ldr	r3, [pc, #8]	@ (8001b58 <HAL_GetTick+0x10>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000e68 	.word	0x20000e68

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff fff0 	bl	8001b48 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_Delay+0x44>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffe0 	bl	8001b48 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0ed      	b.n	8001d92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fccc 	bl	8001560 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd8:	f7ff ffb6 	bl	8001b48 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bde:	e012      	b.n	8001c06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001be0:	f7ff ffb2 	bl	8001b48 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b0a      	cmp	r3, #10
 8001bec:	d90b      	bls.n	8001c06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2205      	movs	r2, #5
 8001bfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0c5      	b.n	8001d92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0e5      	beq.n	8001be0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0202 	bic.w	r2, r2, #2
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c24:	f7ff ff90 	bl	8001b48 <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c2a:	e012      	b.n	8001c52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c2c:	f7ff ff8c 	bl	8001b48 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b0a      	cmp	r3, #10
 8001c38:	d90b      	bls.n	8001c52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2205      	movs	r2, #5
 8001c4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e09f      	b.n	8001d92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e5      	bne.n	8001c2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7e1b      	ldrb	r3, [r3, #24]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e007      	b.n	8001c8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7e5b      	ldrb	r3, [r3, #25]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e007      	b.n	8001cb4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7e9b      	ldrb	r3, [r3, #26]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d108      	bne.n	8001cce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0220 	orr.w	r2, r2, #32
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e007      	b.n	8001cde <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0220 	bic.w	r2, r2, #32
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7edb      	ldrb	r3, [r3, #27]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d108      	bne.n	8001cf8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0210 	bic.w	r2, r2, #16
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e007      	b.n	8001d08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0210 	orr.w	r2, r2, #16
 8001d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7f1b      	ldrb	r3, [r3, #28]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d108      	bne.n	8001d22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0208 	orr.w	r2, r2, #8
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e007      	b.n	8001d32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0208 	bic.w	r2, r2, #8
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	7f5b      	ldrb	r3, [r3, #29]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d108      	bne.n	8001d4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0204 	orr.w	r2, r2, #4
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e007      	b.n	8001d5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0204 	bic.w	r2, r2, #4
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	ea42 0103 	orr.w	r1, r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001db2:	7cfb      	ldrb	r3, [r7, #19]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d003      	beq.n	8001dc0 <HAL_CAN_ConfigFilter+0x26>
 8001db8:	7cfb      	ldrb	r3, [r7, #19]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	f040 80aa 	bne.w	8001f14 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	2201      	movs	r2, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d123      	bne.n	8001e42 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	401a      	ands	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3248      	adds	r2, #72	@ 0x48
 8001e22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e38:	6979      	ldr	r1, [r7, #20]
 8001e3a:	3348      	adds	r3, #72	@ 0x48
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d122      	bne.n	8001e90 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3248      	adds	r2, #72	@ 0x48
 8001e70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e86:	6979      	ldr	r1, [r7, #20]
 8001e88:	3348      	adds	r3, #72	@ 0x48
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001eaa:	e007      	b.n	8001ebc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001ed6:	e007      	b.n	8001ee8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f06:	f023 0201 	bic.w	r2, r3, #1
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e006      	b.n	8001f22 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	371c      	adds	r7, #28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d12e      	bne.n	8001f9e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f58:	f7ff fdf6 	bl	8001b48 <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f5e:	e012      	b.n	8001f86 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f60:	f7ff fdf2 	bl	8001b48 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b0a      	cmp	r3, #10
 8001f6c:	d90b      	bls.n	8001f86 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2205      	movs	r2, #5
 8001f7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e012      	b.n	8001fac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e5      	bne.n	8001f60 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e006      	b.n	8001fac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
  }
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd2:	7ffb      	ldrb	r3, [r7, #31]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d003      	beq.n	8001fe0 <HAL_CAN_AddTxMessage+0x2c>
 8001fd8:	7ffb      	ldrb	r3, [r7, #31]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	f040 80ad 	bne.w	800213a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10a      	bne.n	8002000 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8095 	beq.w	800212a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	0e1b      	lsrs	r3, r3, #24
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800200a:	2201      	movs	r2, #1
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	409a      	lsls	r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10d      	bne.n	8002038 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002026:	68f9      	ldr	r1, [r7, #12]
 8002028:	6809      	ldr	r1, [r1, #0]
 800202a:	431a      	orrs	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3318      	adds	r3, #24
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	440b      	add	r3, r1
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e00f      	b.n	8002058 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002042:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002048:	68f9      	ldr	r1, [r7, #12]
 800204a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800204c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3318      	adds	r3, #24
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	440b      	add	r3, r1
 8002056:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3318      	adds	r3, #24
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	440b      	add	r3, r1
 8002068:	3304      	adds	r3, #4
 800206a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	7d1b      	ldrb	r3, [r3, #20]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d111      	bne.n	8002098 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3318      	adds	r3, #24
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	4413      	add	r3, r2
 8002080:	3304      	adds	r3, #4
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	6811      	ldr	r1, [r2, #0]
 8002088:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3318      	adds	r3, #24
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	440b      	add	r3, r1
 8002094:	3304      	adds	r3, #4
 8002096:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3307      	adds	r3, #7
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	061a      	lsls	r2, r3, #24
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3306      	adds	r3, #6
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3305      	adds	r3, #5
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	4313      	orrs	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	3204      	adds	r2, #4
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	4610      	mov	r0, r2
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	6811      	ldr	r1, [r2, #0]
 80020c0:	ea43 0200 	orr.w	r2, r3, r0
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	440b      	add	r3, r1
 80020ca:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80020ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3303      	adds	r3, #3
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	061a      	lsls	r2, r3, #24
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3302      	adds	r3, #2
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3301      	adds	r3, #1
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	4313      	orrs	r3, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	4610      	mov	r0, r2
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6811      	ldr	r1, [r2, #0]
 80020f6:	ea43 0200 	orr.w	r2, r3, r0
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	440b      	add	r3, r1
 8002100:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002104:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3318      	adds	r3, #24
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4413      	add	r3, r2
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	6811      	ldr	r1, [r2, #0]
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3318      	adds	r3, #24
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	440b      	add	r3, r1
 8002124:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e00e      	b.n	8002148 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e006      	b.n	8002148 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
  }
}
 8002148:	4618      	mov	r0, r3
 800214a:	3724      	adds	r7, #36	@ 0x24
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002166:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d002      	beq.n	8002174 <HAL_CAN_IsTxMessagePending+0x22>
 800216e:	7afb      	ldrb	r3, [r7, #11]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d10b      	bne.n	800218c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	069b      	lsls	r3, r3, #26
 800217e:	401a      	ands	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	069b      	lsls	r3, r3, #26
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002188:	2301      	movs	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800218c:	68fb      	ldr	r3, [r7, #12]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d003      	beq.n	80021bc <HAL_CAN_GetRxMessage+0x24>
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	f040 8103 	bne.w	80023c2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10e      	bne.n	80021e0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d116      	bne.n	80021fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0f7      	b.n	80023d0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d107      	bne.n	80021fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0e8      	b.n	80023d0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	331b      	adds	r3, #27
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	4413      	add	r3, r2
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0204 	and.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10c      	bne.n	8002236 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	331b      	adds	r3, #27
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	4413      	add	r3, r2
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0d5b      	lsrs	r3, r3, #21
 800222c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e00b      	b.n	800224e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	331b      	adds	r3, #27
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	4413      	add	r3, r2
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	331b      	adds	r3, #27
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	4413      	add	r3, r2
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0202 	and.w	r2, r3, #2
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	331b      	adds	r3, #27
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2208      	movs	r2, #8
 8002280:	611a      	str	r2, [r3, #16]
 8002282:	e00b      	b.n	800229c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	331b      	adds	r3, #27
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	4413      	add	r3, r2
 8002290:	3304      	adds	r3, #4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 020f 	and.w	r2, r3, #15
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	331b      	adds	r3, #27
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	331b      	adds	r3, #27
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	0a1a      	lsrs	r2, r3, #8
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	4413      	add	r3, r2
 8002306:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0c1a      	lsrs	r2, r3, #16
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	3302      	adds	r3, #2
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	4413      	add	r3, r2
 8002320:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0e1a      	lsrs	r2, r3, #24
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	3303      	adds	r3, #3
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	4413      	add	r3, r2
 800233a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	3304      	adds	r3, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4413      	add	r3, r2
 8002352:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	0a1a      	lsrs	r2, r3, #8
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	3305      	adds	r3, #5
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	4413      	add	r3, r2
 800236c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	0c1a      	lsrs	r2, r3, #16
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	3306      	adds	r3, #6
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	4413      	add	r3, r2
 8002386:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0e1a      	lsrs	r2, r3, #24
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	3307      	adds	r3, #7
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d108      	bne.n	80023ae <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0220 	orr.w	r2, r2, #32
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	e007      	b.n	80023be <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0220 	orr.w	r2, r2, #32
 80023bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e006      	b.n	80023d0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
  }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d002      	beq.n	80023f8 <HAL_CAN_ActivateNotification+0x1e>
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d109      	bne.n	800240c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6959      	ldr	r1, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	e006      	b.n	800241a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
  }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d07c      	beq.n	8002564 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d023      	beq.n	80024bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2201      	movs	r2, #1
 800247a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f983 	bl	8002792 <HAL_CAN_TxMailbox0CompleteCallback>
 800248c:	e016      	b.n	80024bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a0:	e00c      	b.n	80024bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b4:	e002      	b.n	80024bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f986 	bl	80027c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d024      	beq.n	8002510 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f962 	bl	80027a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80024e0:	e016      	b.n	8002510 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f4:	e00c      	b.n	8002510 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
 8002508:	e002      	b.n	8002510 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f965 	bl	80027da <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d024      	beq.n	8002564 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002522:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f941 	bl	80027b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002534:	e016      	b.n	8002564 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
 8002548:	e00c      	b.n	8002564 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
 800255c:	e002      	b.n	8002564 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f944 	bl	80027ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00c      	beq.n	8002588 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2210      	movs	r2, #16
 8002586:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2208      	movs	r2, #8
 80025a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f933 	bl	8002810 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f91b 	bl	80027fe <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00c      	beq.n	80025ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2210      	movs	r2, #16
 80025ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2208      	movs	r2, #8
 8002606:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f90a 	bl	8002822 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe fe48 	bl	80012bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f8f3 	bl	8002834 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2208      	movs	r2, #8
 8002668:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f8eb 	bl	8002846 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d07b      	beq.n	8002772 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d072      	beq.n	800276a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d043      	beq.n	800276a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03e      	beq.n	800276a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026f2:	2b60      	cmp	r3, #96	@ 0x60
 80026f4:	d02b      	beq.n	800274e <HAL_CAN_IRQHandler+0x32a>
 80026f6:	2b60      	cmp	r3, #96	@ 0x60
 80026f8:	d82e      	bhi.n	8002758 <HAL_CAN_IRQHandler+0x334>
 80026fa:	2b50      	cmp	r3, #80	@ 0x50
 80026fc:	d022      	beq.n	8002744 <HAL_CAN_IRQHandler+0x320>
 80026fe:	2b50      	cmp	r3, #80	@ 0x50
 8002700:	d82a      	bhi.n	8002758 <HAL_CAN_IRQHandler+0x334>
 8002702:	2b40      	cmp	r3, #64	@ 0x40
 8002704:	d019      	beq.n	800273a <HAL_CAN_IRQHandler+0x316>
 8002706:	2b40      	cmp	r3, #64	@ 0x40
 8002708:	d826      	bhi.n	8002758 <HAL_CAN_IRQHandler+0x334>
 800270a:	2b30      	cmp	r3, #48	@ 0x30
 800270c:	d010      	beq.n	8002730 <HAL_CAN_IRQHandler+0x30c>
 800270e:	2b30      	cmp	r3, #48	@ 0x30
 8002710:	d822      	bhi.n	8002758 <HAL_CAN_IRQHandler+0x334>
 8002712:	2b10      	cmp	r3, #16
 8002714:	d002      	beq.n	800271c <HAL_CAN_IRQHandler+0x2f8>
 8002716:	2b20      	cmp	r3, #32
 8002718:	d005      	beq.n	8002726 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800271a:	e01d      	b.n	8002758 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	f043 0308 	orr.w	r3, r3, #8
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002724:	e019      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800272e:	e014      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	f043 0320 	orr.w	r3, r3, #32
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002738:	e00f      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002742:	e00a      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800274c:	e005      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002756:	e000      	b.n	800275a <HAL_CAN_IRQHandler+0x336>
            break;
 8002758:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002768:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2204      	movs	r2, #4
 8002770:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fe51 	bl	800142c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800278a:	bf00      	nop
 800278c:	3728      	adds	r7, #40	@ 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
	...

08002870 <__NVIC_SetPriorityGrouping>:
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4906      	ldr	r1, [pc, #24]	@ (8002908 <__NVIC_EnableIRQ+0x34>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPendingIRQ>:
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0c      	blt.n	8002938 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4907      	ldr	r1, [pc, #28]	@ (8002944 <__NVIC_SetPendingIRQ+0x38>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	3340      	adds	r3, #64	@ 0x40
 8002934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	@ (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	@ (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	@ 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	@ 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <SysTick_Config>:
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	@ (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f7ff ff90 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff0f 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff24 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff90 	bl	800299c <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5f 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff17 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa2 	bl	8002a00 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff19 	bl	800290c <__NVIC_SetPendingIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d008      	beq.n	8002b0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2204      	movs	r2, #4
 8002afe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e020      	b.n	8002b4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 020e 	bic.w	r2, r2, #14
 8002b1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d005      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2204      	movs	r2, #4
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e051      	b.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 020e 	bic.w	r2, r2, #14
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	@ (8002c2c <HAL_DMA_Abort_IT+0xd4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d029      	beq.n	8002bfa <HAL_DMA_Abort_IT+0xa2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a21      	ldr	r2, [pc, #132]	@ (8002c30 <HAL_DMA_Abort_IT+0xd8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_Abort_IT+0x9e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c34 <HAL_DMA_Abort_IT+0xdc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01a      	beq.n	8002bf0 <HAL_DMA_Abort_IT+0x98>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c38 <HAL_DMA_Abort_IT+0xe0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d012      	beq.n	8002bea <HAL_DMA_Abort_IT+0x92>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c3c <HAL_DMA_Abort_IT+0xe4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00a      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x8c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <HAL_DMA_Abort_IT+0xe8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d102      	bne.n	8002bde <HAL_DMA_Abort_IT+0x86>
 8002bd8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bdc:	e00e      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002be2:	e00b      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002be4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002be8:	e008      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bee:	e005      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf4:	e002      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	e000      	b.n	8002bfc <HAL_DMA_Abort_IT+0xa4>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	4a11      	ldr	r2, [pc, #68]	@ (8002c44 <HAL_DMA_Abort_IT+0xec>)
 8002bfe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
    } 
  }
  return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40020008 	.word	0x40020008
 8002c30:	4002001c 	.word	0x4002001c
 8002c34:	40020030 	.word	0x40020030
 8002c38:	40020044 	.word	0x40020044
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	4002006c 	.word	0x4002006c
 8002c44:	40020000 	.word	0x40020000

08002c48 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c56:	b2db      	uxtb	r3, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b08b      	sub	sp, #44	@ 0x2c
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	e169      	b.n	8002f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8158 	bne.w	8002f46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a9a      	ldr	r2, [pc, #616]	@ (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d05e      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002ca0:	4a98      	ldr	r2, [pc, #608]	@ (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d875      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a98      	ldr	r2, [pc, #608]	@ (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d058      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cac:	4a96      	ldr	r2, [pc, #600]	@ (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d86f      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a96      	ldr	r2, [pc, #600]	@ (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d052      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cb8:	4a94      	ldr	r2, [pc, #592]	@ (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d869      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a94      	ldr	r2, [pc, #592]	@ (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d04c      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cc4:	4a92      	ldr	r2, [pc, #584]	@ (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d863      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cca:	4a92      	ldr	r2, [pc, #584]	@ (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d046      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cd0:	4a90      	ldr	r2, [pc, #576]	@ (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d85d      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cd6:	2b12      	cmp	r3, #18
 8002cd8:	d82a      	bhi.n	8002d30 <HAL_GPIO_Init+0xcc>
 8002cda:	2b12      	cmp	r3, #18
 8002cdc:	d859      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cde:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce4 <HAL_GPIO_Init+0x80>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d5f 	.word	0x08002d5f
 8002ce8:	08002d39 	.word	0x08002d39
 8002cec:	08002d4b 	.word	0x08002d4b
 8002cf0:	08002d8d 	.word	0x08002d8d
 8002cf4:	08002d93 	.word	0x08002d93
 8002cf8:	08002d93 	.word	0x08002d93
 8002cfc:	08002d93 	.word	0x08002d93
 8002d00:	08002d93 	.word	0x08002d93
 8002d04:	08002d93 	.word	0x08002d93
 8002d08:	08002d93 	.word	0x08002d93
 8002d0c:	08002d93 	.word	0x08002d93
 8002d10:	08002d93 	.word	0x08002d93
 8002d14:	08002d93 	.word	0x08002d93
 8002d18:	08002d93 	.word	0x08002d93
 8002d1c:	08002d93 	.word	0x08002d93
 8002d20:	08002d93 	.word	0x08002d93
 8002d24:	08002d93 	.word	0x08002d93
 8002d28:	08002d41 	.word	0x08002d41
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	4a79      	ldr	r2, [pc, #484]	@ (8002f18 <HAL_GPIO_Init+0x2b4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d36:	e02c      	b.n	8002d92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	623b      	str	r3, [r7, #32]
          break;
 8002d3e:	e029      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	3304      	adds	r3, #4
 8002d46:	623b      	str	r3, [r7, #32]
          break;
 8002d48:	e024      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e01f      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e01a      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d66:	2304      	movs	r3, #4
 8002d68:	623b      	str	r3, [r7, #32]
          break;
 8002d6a:	e013      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	611a      	str	r2, [r3, #16]
          break;
 8002d7e:	e009      	b.n	8002d94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d80:	2308      	movs	r3, #8
 8002d82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	615a      	str	r2, [r3, #20]
          break;
 8002d8a:	e003      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	623b      	str	r3, [r7, #32]
          break;
 8002d90:	e000      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          break;
 8002d92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2bff      	cmp	r3, #255	@ 0xff
 8002d98:	d801      	bhi.n	8002d9e <HAL_GPIO_Init+0x13a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	e001      	b.n	8002da2 <HAL_GPIO_Init+0x13e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2bff      	cmp	r3, #255	@ 0xff
 8002da8:	d802      	bhi.n	8002db0 <HAL_GPIO_Init+0x14c>
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	e002      	b.n	8002db6 <HAL_GPIO_Init+0x152>
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	3b08      	subs	r3, #8
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	6a39      	ldr	r1, [r7, #32]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80b1 	beq.w	8002f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002de4:	4b4d      	ldr	r3, [pc, #308]	@ (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4a4c      	ldr	r2, [pc, #304]	@ (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6193      	str	r3, [r2, #24]
 8002df0:	4b4a      	ldr	r3, [pc, #296]	@ (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dfc:	4a48      	ldr	r2, [pc, #288]	@ (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a40      	ldr	r2, [pc, #256]	@ (8002f24 <HAL_GPIO_Init+0x2c0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_Init+0x1ec>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f28 <HAL_GPIO_Init+0x2c4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_Init+0x1e8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3e      	ldr	r2, [pc, #248]	@ (8002f2c <HAL_GPIO_Init+0x2c8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x1e4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f30 <HAL_GPIO_Init+0x2cc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_Init+0x1e0>
 8002e40:	2303      	movs	r3, #3
 8002e42:	e006      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e004      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e50:	2300      	movs	r3, #0
 8002e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e54:	f002 0203 	and.w	r2, r2, #3
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	4093      	lsls	r3, r2
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e62:	492f      	ldr	r1, [pc, #188]	@ (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	492c      	ldr	r1, [pc, #176]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4928      	ldr	r1, [pc, #160]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ea4:	4b23      	ldr	r3, [pc, #140]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	4922      	ldr	r1, [pc, #136]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60cb      	str	r3, [r1, #12]
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eb2:	4b20      	ldr	r3, [pc, #128]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	491e      	ldr	r1, [pc, #120]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4918      	ldr	r1, [pc, #96]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eda:	4b16      	ldr	r3, [pc, #88]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4914      	ldr	r1, [pc, #80]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d021      	beq.n	8002f38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	490e      	ldr	r1, [pc, #56]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
 8002f00:	e021      	b.n	8002f46 <HAL_GPIO_Init+0x2e2>
 8002f02:	bf00      	nop
 8002f04:	10320000 	.word	0x10320000
 8002f08:	10310000 	.word	0x10310000
 8002f0c:	10220000 	.word	0x10220000
 8002f10:	10210000 	.word	0x10210000
 8002f14:	10120000 	.word	0x10120000
 8002f18:	10110000 	.word	0x10110000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40010800 	.word	0x40010800
 8002f28:	40010c00 	.word	0x40010c00
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40011400 	.word	0x40011400
 8002f34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_GPIO_Init+0x304>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	4909      	ldr	r1, [pc, #36]	@ (8002f68 <HAL_GPIO_Init+0x304>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	3301      	adds	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f47f ae8e 	bne.w	8002c78 <HAL_GPIO_Init+0x14>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	372c      	adds	r7, #44	@ 0x2c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f7c:	787b      	ldrb	r3, [r7, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f88:	e003      	b.n	8002f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	041a      	lsls	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fae:	887a      	ldrh	r2, [r7, #2]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	041a      	lsls	r2, r3, #16
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	43d9      	mvns	r1, r3
 8002fba:	887b      	ldrh	r3, [r7, #2]
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	611a      	str	r2, [r3, #16]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e12b      	b.n	800323a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe fb16 	bl	8001628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	@ 0x24
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003034:	f003 f9b8 	bl	80063a8 <HAL_RCC_GetPCLK1Freq>
 8003038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4a81      	ldr	r2, [pc, #516]	@ (8003244 <HAL_I2C_Init+0x274>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d807      	bhi.n	8003054 <HAL_I2C_Init+0x84>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a80      	ldr	r2, [pc, #512]	@ (8003248 <HAL_I2C_Init+0x278>)
 8003048:	4293      	cmp	r3, r2
 800304a:	bf94      	ite	ls
 800304c:	2301      	movls	r3, #1
 800304e:	2300      	movhi	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e006      	b.n	8003062 <HAL_I2C_Init+0x92>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a7d      	ldr	r2, [pc, #500]	@ (800324c <HAL_I2C_Init+0x27c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	bf94      	ite	ls
 800305c:	2301      	movls	r3, #1
 800305e:	2300      	movhi	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0e7      	b.n	800323a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4a78      	ldr	r2, [pc, #480]	@ (8003250 <HAL_I2C_Init+0x280>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0c9b      	lsrs	r3, r3, #18
 8003074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a6a      	ldr	r2, [pc, #424]	@ (8003244 <HAL_I2C_Init+0x274>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d802      	bhi.n	80030a4 <HAL_I2C_Init+0xd4>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3301      	adds	r3, #1
 80030a2:	e009      	b.n	80030b8 <HAL_I2C_Init+0xe8>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	4a69      	ldr	r2, [pc, #420]	@ (8003254 <HAL_I2C_Init+0x284>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	3301      	adds	r3, #1
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	495c      	ldr	r1, [pc, #368]	@ (8003244 <HAL_I2C_Init+0x274>)
 80030d4:	428b      	cmp	r3, r1
 80030d6:	d819      	bhi.n	800310c <HAL_I2C_Init+0x13c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e59      	subs	r1, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e6:	1c59      	adds	r1, r3, #1
 80030e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030ec:	400b      	ands	r3, r1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_I2C_Init+0x138>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1e59      	subs	r1, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003100:	3301      	adds	r3, #1
 8003102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003106:	e051      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 8003108:	2304      	movs	r3, #4
 800310a:	e04f      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <HAL_I2C_Init+0x168>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e012      	b.n	800315e <HAL_I2C_Init+0x18e>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e58      	subs	r0, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	0099      	lsls	r1, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x196>
 8003162:	2301      	movs	r3, #1
 8003164:	e022      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10e      	bne.n	800318c <HAL_I2C_Init+0x1bc>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1e58      	subs	r0, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	440b      	add	r3, r1
 800317c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003180:	3301      	adds	r3, #1
 8003182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800318a:	e00f      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e58      	subs	r0, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	0099      	lsls	r1, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	6809      	ldr	r1, [r1, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6911      	ldr	r1, [r2, #16]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68d2      	ldr	r2, [r2, #12]
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	000186a0 	.word	0x000186a0
 8003248:	001e847f 	.word	0x001e847f
 800324c:	003d08ff 	.word	0x003d08ff
 8003250:	431bde83 	.word	0x431bde83
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326a:	2b80      	cmp	r3, #128	@ 0x80
 800326c:	d103      	bne.n	8003276 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]
  }
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	4608      	mov	r0, r1
 800328a:	4611      	mov	r1, r2
 800328c:	461a      	mov	r2, r3
 800328e:	4603      	mov	r3, r0
 8003290:	817b      	strh	r3, [r7, #10]
 8003292:	460b      	mov	r3, r1
 8003294:	813b      	strh	r3, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800329a:	f7fe fc55 	bl	8001b48 <HAL_GetTick>
 800329e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	f040 80d9 	bne.w	8003460 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2319      	movs	r3, #25
 80032b4:	2201      	movs	r2, #1
 80032b6:	496d      	ldr	r1, [pc, #436]	@ (800346c <HAL_I2C_Mem_Write+0x1ec>)
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f002 fa29 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0cc      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_I2C_Mem_Write+0x56>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0c5      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d007      	beq.n	80032fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800330a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2221      	movs	r2, #33	@ 0x21
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2240      	movs	r2, #64	@ 0x40
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800332c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a4d      	ldr	r2, [pc, #308]	@ (8003470 <HAL_I2C_Mem_Write+0x1f0>)
 800333c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800333e:	88f8      	ldrh	r0, [r7, #6]
 8003340:	893a      	ldrh	r2, [r7, #8]
 8003342:	8979      	ldrh	r1, [r7, #10]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4603      	mov	r3, r0
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f001 ffb8 	bl	80052c4 <I2C_RequestMemoryWrite>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d052      	beq.n	8003400 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e081      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f002 faee 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	2b04      	cmp	r3, #4
 8003374:	d107      	bne.n	8003386 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e06b      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d11b      	bne.n	8003400 <HAL_I2C_Mem_Write+0x180>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1aa      	bne.n	800335e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f002 fae1 	bl	80059d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	2b04      	cmp	r3, #4
 800341e:	d107      	bne.n	8003430 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e016      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	00100002 	.word	0x00100002
 8003470:	ffff0000 	.word	0xffff0000

08003474 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	@ 0x30
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	4608      	mov	r0, r1
 800347e:	4611      	mov	r1, r2
 8003480:	461a      	mov	r2, r3
 8003482:	4603      	mov	r3, r0
 8003484:	817b      	strh	r3, [r7, #10]
 8003486:	460b      	mov	r3, r1
 8003488:	813b      	strh	r3, [r7, #8]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003492:	f7fe fb59 	bl	8001b48 <HAL_GetTick>
 8003496:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	f040 8250 	bne.w	8003946 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2319      	movs	r3, #25
 80034ac:	2201      	movs	r2, #1
 80034ae:	4982      	ldr	r1, [pc, #520]	@ (80036b8 <HAL_I2C_Mem_Read+0x244>)
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f002 f92d 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
 80034be:	e243      	b.n	8003948 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_I2C_Mem_Read+0x5a>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e23c      	b.n	8003948 <HAL_I2C_Mem_Read+0x4d4>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d007      	beq.n	80034f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2222      	movs	r2, #34	@ 0x22
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2240      	movs	r2, #64	@ 0x40
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800351e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003524:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a62      	ldr	r2, [pc, #392]	@ (80036bc <HAL_I2C_Mem_Read+0x248>)
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003536:	88f8      	ldrh	r0, [r7, #6]
 8003538:	893a      	ldrh	r2, [r7, #8]
 800353a:	8979      	ldrh	r1, [r7, #10]
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4603      	mov	r3, r0
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f001 ff52 	bl	80053f0 <I2C_RequestMemoryRead>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e1f8      	b.n	8003948 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d113      	bne.n	8003586 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e1cc      	b.n	8003920 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358a:	2b01      	cmp	r3, #1
 800358c:	d11e      	bne.n	80035cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800359c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800359e:	b672      	cpsid	i
}
 80035a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035c8:	b662      	cpsie	i
}
 80035ca:	e035      	b.n	8003638 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d11e      	bne.n	8003612 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035e4:	b672      	cpsid	i
}
 80035e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800360c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800360e:	b662      	cpsie	i
}
 8003610:	e012      	b.n	8003638 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003620:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003638:	e172      	b.n	8003920 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363e:	2b03      	cmp	r3, #3
 8003640:	f200 811f 	bhi.w	8003882 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003648:	2b01      	cmp	r3, #1
 800364a:	d123      	bne.n	8003694 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f002 fa39 	bl	8005ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e173      	b.n	8003948 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003692:	e145      	b.n	8003920 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003698:	2b02      	cmp	r3, #2
 800369a:	d152      	bne.n	8003742 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a2:	2200      	movs	r2, #0
 80036a4:	4906      	ldr	r1, [pc, #24]	@ (80036c0 <HAL_I2C_Mem_Read+0x24c>)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f002 f832 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e148      	b.n	8003948 <HAL_I2C_Mem_Read+0x4d4>
 80036b6:	bf00      	nop
 80036b8:	00100002 	.word	0x00100002
 80036bc:	ffff0000 	.word	0xffff0000
 80036c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80036c4:	b672      	cpsid	i
}
 80036c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800370a:	b662      	cpsie	i
}
 800370c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003740:	e0ee      	b.n	8003920 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003748:	2200      	movs	r2, #0
 800374a:	4981      	ldr	r1, [pc, #516]	@ (8003950 <HAL_I2C_Mem_Read+0x4dc>)
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f001 ffdf 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0f5      	b.n	8003948 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800376c:	b672      	cpsid	i
}
 800376e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037a2:	4b6c      	ldr	r3, [pc, #432]	@ (8003954 <HAL_I2C_Mem_Read+0x4e0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	08db      	lsrs	r3, r3, #3
 80037a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003958 <HAL_I2C_Mem_Read+0x4e4>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0a1a      	lsrs	r2, r3, #8
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	00da      	lsls	r2, r3, #3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	3b01      	subs	r3, #1
 80037c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d118      	bne.n	80037fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80037ea:	b662      	cpsie	i
}
 80037ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e0a6      	b.n	8003948 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b04      	cmp	r3, #4
 8003806:	d1d9      	bne.n	80037bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800384a:	b662      	cpsie	i
}
 800384c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003880:	e04e      	b.n	8003920 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003884:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f002 f91e 	bl	8005ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e058      	b.n	8003948 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d124      	bne.n	8003920 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d107      	bne.n	80038ee <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	f47f ae88 	bne.w	800363a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3728      	adds	r7, #40	@ 0x28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	00010004 	.word	0x00010004
 8003954:	20000000 	.word	0x20000000
 8003958:	14f8b589 	.word	0x14f8b589

0800395c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	4608      	mov	r0, r1
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4603      	mov	r3, r0
 800396c:	817b      	strh	r3, [r7, #10]
 800396e:	460b      	mov	r3, r1
 8003970:	813b      	strh	r3, [r7, #8]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b20      	cmp	r3, #32
 8003984:	f040 808a 	bne.w	8003a9c <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003988:	4b47      	ldr	r3, [pc, #284]	@ (8003aa8 <HAL_I2C_Mem_Write_IT+0x14c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	4a47      	ldr	r2, [pc, #284]	@ (8003aac <HAL_I2C_Mem_Write_IT+0x150>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	0a1a      	lsrs	r2, r3, #8
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d112      	bne.n	80039d4 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
 80039d2:	e064      	b.n	8003a9e <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d0df      	beq.n	80039a2 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_I2C_Mem_Write_IT+0x94>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e056      	b.n	8003a9e <HAL_I2C_Mem_Write_IT+0x142>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d007      	beq.n	8003a16 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a24:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2221      	movs	r2, #33	@ 0x21
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2240      	movs	r2, #64	@ 0x40
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a3a      	ldr	r2, [r7, #32]
 8003a40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a16      	ldr	r2, [pc, #88]	@ (8003ab0 <HAL_I2C_Mem_Write_IT+0x154>)
 8003a56:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003a58:	897a      	ldrh	r2, [r7, #10]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003a5e:	893a      	ldrh	r2, [r7, #8]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003a96:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	20000000 	.word	0x20000000
 8003aac:	14f8b589 	.word	0x14f8b589
 8003ab0:	ffff0000 	.word	0xffff0000

08003ab4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	@ 0x28
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ac4:	f7fe f840 	bl	8001b48 <HAL_GetTick>
 8003ac8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	f040 8111 	bne.w	8003cfe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2319      	movs	r3, #25
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4988      	ldr	r1, [pc, #544]	@ (8003d08 <HAL_I2C_IsDeviceReady+0x254>)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f001 fe12 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003af2:	2302      	movs	r3, #2
 8003af4:	e104      	b.n	8003d00 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_I2C_IsDeviceReady+0x50>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0fd      	b.n	8003d00 <HAL_I2C_IsDeviceReady+0x24c>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d007      	beq.n	8003b2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2224      	movs	r2, #36	@ 0x24
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a70      	ldr	r2, [pc, #448]	@ (8003d0c <HAL_I2C_IsDeviceReady+0x258>)
 8003b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f001 fdd0 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b84:	d103      	bne.n	8003b8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b8c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0b6      	b.n	8003d00 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b92:	897b      	ldrh	r3, [r7, #10]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ba0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ba2:	f7fd ffd1 	bl	8001b48 <HAL_GetTick>
 8003ba6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bd6:	e025      	b.n	8003c24 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bd8:	f7fd ffb6 	bl	8001b48 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d302      	bcc.n	8003bee <HAL_I2C_IsDeviceReady+0x13a>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d103      	bne.n	8003bf6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	22a0      	movs	r2, #160	@ 0xa0
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c2e:	d005      	beq.n	8003c3c <HAL_I2C_IsDeviceReady+0x188>
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <HAL_I2C_IsDeviceReady+0x188>
 8003c36:	7dbb      	ldrb	r3, [r7, #22]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0cd      	beq.n	8003bd8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d129      	bne.n	8003ca6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c60:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2319      	movs	r3, #25
 8003c7e:	2201      	movs	r2, #1
 8003c80:	4921      	ldr	r1, [pc, #132]	@ (8003d08 <HAL_I2C_IsDeviceReady+0x254>)
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f001 fd44 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e036      	b.n	8003d00 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e02c      	b.n	8003d00 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cbe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2319      	movs	r3, #25
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	490f      	ldr	r1, [pc, #60]	@ (8003d08 <HAL_I2C_IsDeviceReady+0x254>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f001 fd20 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e012      	b.n	8003d00 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	f4ff af32 	bcc.w	8003b4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cfe:	2302      	movs	r3, #2
  }
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3720      	adds	r7, #32
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	00100002 	.word	0x00100002
 8003d0c:	ffff0000 	.word	0xffff0000

08003d10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d38:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d003      	beq.n	8003d48 <HAL_I2C_EV_IRQHandler+0x38>
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b40      	cmp	r3, #64	@ 0x40
 8003d44:	f040 80c1 	bne.w	8003eca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10d      	bne.n	8003d7e <HAL_I2C_EV_IRQHandler+0x6e>
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003d68:	d003      	beq.n	8003d72 <HAL_I2C_EV_IRQHandler+0x62>
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003d70:	d101      	bne.n	8003d76 <HAL_I2C_EV_IRQHandler+0x66>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_I2C_EV_IRQHandler+0x68>
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	f000 8132 	beq.w	8003fe2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00c      	beq.n	8003da2 <HAL_I2C_EV_IRQHandler+0x92>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	0a5b      	lsrs	r3, r3, #9
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d006      	beq.n	8003da2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f001 ff22 	bl	8005bde <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fce1 	bl	8004762 <I2C_Master_SB>
 8003da0:	e092      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <HAL_I2C_EV_IRQHandler+0xb2>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	0a5b      	lsrs	r3, r3, #9
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fd56 	bl	800486c <I2C_Master_ADD10>
 8003dc0:	e082      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0xd2>
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	0a5b      	lsrs	r3, r3, #9
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fd6f 	bl	80048be <I2C_Master_ADDR>
 8003de0:	e072      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d03b      	beq.n	8003e66 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dfc:	f000 80f3 	beq.w	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	09db      	lsrs	r3, r3, #7
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00f      	beq.n	8003e2c <HAL_I2C_EV_IRQHandler+0x11c>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	0a9b      	lsrs	r3, r3, #10
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_I2C_EV_IRQHandler+0x11c>
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	089b      	lsrs	r3, r3, #2
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f939 	bl	800409c <I2C_MasterTransmit_TXE>
 8003e2a:	e04d      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80d6 	beq.w	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	0a5b      	lsrs	r3, r3, #9
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80cf 	beq.w	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e48:	7bbb      	ldrb	r3, [r7, #14]
 8003e4a:	2b21      	cmp	r3, #33	@ 0x21
 8003e4c:	d103      	bne.n	8003e56 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f9c0 	bl	80041d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e54:	e0c7      	b.n	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b40      	cmp	r3, #64	@ 0x40
 8003e5a:	f040 80c4 	bne.w	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa2e 	bl	80042c0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e64:	e0bf      	b.n	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e74:	f000 80b7 	beq.w	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	099b      	lsrs	r3, r3, #6
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00f      	beq.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x194>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	0a9b      	lsrs	r3, r3, #10
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x194>
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d103      	bne.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 faa7 	bl	80043f0 <I2C_MasterReceive_RXNE>
 8003ea2:	e011      	b.n	8003ec8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 809a 	beq.w	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	0a5b      	lsrs	r3, r3, #9
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8093 	beq.w	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fb5d 	bl	8004580 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec6:	e08e      	b.n	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ec8:	e08d      	b.n	8003fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e007      	b.n	8003eec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <HAL_I2C_EV_IRQHandler+0x20e>
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	0a5b      	lsrs	r3, r3, #9
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00c      	beq.n	8003f1e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003f14:	69b9      	ldr	r1, [r7, #24]
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 ff28 	bl	8004d6c <I2C_Slave_ADDR>
 8003f1c:	e066      	b.n	8003fec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0x22e>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	0a5b      	lsrs	r3, r3, #9
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 ff62 	bl	8004e00 <I2C_Slave_STOPF>
 8003f3c:	e056      	b.n	8003fec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f3e:	7bbb      	ldrb	r3, [r7, #14]
 8003f40:	2b21      	cmp	r3, #33	@ 0x21
 8003f42:	d002      	beq.n	8003f4a <HAL_I2C_EV_IRQHandler+0x23a>
 8003f44:	7bbb      	ldrb	r3, [r7, #14]
 8003f46:	2b29      	cmp	r3, #41	@ 0x29
 8003f48:	d125      	bne.n	8003f96 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	09db      	lsrs	r3, r3, #7
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00f      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0x266>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	0a9b      	lsrs	r3, r3, #10
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0x266>
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fe40 	bl	8004bf4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f74:	e039      	b.n	8003fea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d033      	beq.n	8003fea <HAL_I2C_EV_IRQHandler+0x2da>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	0a5b      	lsrs	r3, r3, #9
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d02d      	beq.n	8003fea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fe6d 	bl	8004c6e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f94:	e029      	b.n	8003fea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00f      	beq.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	0a9b      	lsrs	r3, r3, #10
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	089b      	lsrs	r3, r3, #2
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fe77 	bl	8004cae <I2C_SlaveReceive_RXNE>
 8003fc0:	e014      	b.n	8003fec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00e      	beq.n	8003fec <HAL_I2C_EV_IRQHandler+0x2dc>
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fea5 	bl	8004d2a <I2C_SlaveReceive_BTF>
 8003fe0:	e004      	b.n	8003fec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	70fb      	strb	r3, [r7, #3]
 8004046:	4613      	mov	r3, r2
 8004048:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d150      	bne.n	8004164 <I2C_MasterTransmit_TXE+0xc8>
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b21      	cmp	r3, #33	@ 0x21
 80040c6:	d14d      	bne.n	8004164 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d01d      	beq.n	800410a <I2C_MasterTransmit_TXE+0x6e>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d01a      	beq.n	800410a <I2C_MasterTransmit_TXE+0x6e>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040da:	d016      	beq.n	800410a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2211      	movs	r2, #17
 80040f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ff75 	bl	8003ff2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004108:	e060      	b.n	80041cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004118:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004128:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b40      	cmp	r3, #64	@ 0x40
 8004142:	d107      	bne.n	8004154 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fd f899 	bl	8001284 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004152:	e03b      	b.n	80041cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff ff48 	bl	8003ff2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004162:	e033      	b.n	80041cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b21      	cmp	r3, #33	@ 0x21
 8004168:	d005      	beq.n	8004176 <I2C_MasterTransmit_TXE+0xda>
 800416a:	7bbb      	ldrb	r3, [r7, #14]
 800416c:	2b40      	cmp	r3, #64	@ 0x40
 800416e:	d12d      	bne.n	80041cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b22      	cmp	r3, #34	@ 0x22
 8004174:	d12a      	bne.n	80041cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d108      	bne.n	8004192 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004190:	e01c      	b.n	80041cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b40      	cmp	r3, #64	@ 0x40
 800419c:	d103      	bne.n	80041a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f88e 	bl	80042c0 <I2C_MemoryTransmit_TXE_BTF>
}
 80041a4:	e012      	b.n	80041cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80041ca:	e7ff      	b.n	80041cc <I2C_MasterTransmit_TXE+0x130>
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b21      	cmp	r3, #33	@ 0x21
 80041ec:	d164      	bne.n	80042b8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d012      	beq.n	800421e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800421c:	e04c      	b.n	80042b8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d01d      	beq.n	8004260 <I2C_MasterTransmit_BTF+0x8c>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b20      	cmp	r3, #32
 8004228:	d01a      	beq.n	8004260 <I2C_MasterTransmit_BTF+0x8c>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004230:	d016      	beq.n	8004260 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004240:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2211      	movs	r2, #17
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff feca 	bl	8003ff2 <HAL_I2C_MasterTxCpltCallback>
}
 800425e:	e02b      	b.n	80042b8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800426e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b40      	cmp	r3, #64	@ 0x40
 8004298:	d107      	bne.n	80042aa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc ffee 	bl	8001284 <HAL_I2C_MemTxCpltCallback>
}
 80042a8:	e006      	b.n	80042b8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fe9d 	bl	8003ff2 <HAL_I2C_MasterTxCpltCallback>
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11d      	bne.n	8004314 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d10b      	bne.n	80042f8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80042f6:	e077      	b.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	121b      	asrs	r3, r3, #8
 8004300:	b2da      	uxtb	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004312:	e069      	b.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004318:	2b01      	cmp	r3, #1
 800431a:	d10b      	bne.n	8004334 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004320:	b2da      	uxtb	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004332:	e059      	b.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004338:	2b02      	cmp	r3, #2
 800433a:	d152      	bne.n	80043e2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b22      	cmp	r3, #34	@ 0x22
 8004340:	d10d      	bne.n	800435e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004350:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800435c:	e044      	b.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d015      	beq.n	8004394 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b21      	cmp	r3, #33	@ 0x21
 800436c:	d112      	bne.n	8004394 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	781a      	ldrb	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004392:	e029      	b.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d124      	bne.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b21      	cmp	r3, #33	@ 0x21
 80043a2:	d121      	bne.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043b2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fc ff52 	bl	8001284 <HAL_I2C_MemTxCpltCallback>
}
 80043e0:	e002      	b.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fe ff38 	bl	8003258 <I2C_Flush_DR>
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b22      	cmp	r3, #34	@ 0x22
 8004402:	f040 80b9 	bne.w	8004578 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d921      	bls.n	800445e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b03      	cmp	r3, #3
 8004448:	f040 8096 	bne.w	8004578 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800445a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800445c:	e08c      	b.n	8004578 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004462:	2b02      	cmp	r3, #2
 8004464:	d07f      	beq.n	8004566 <I2C_MasterReceive_RXNE+0x176>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d002      	beq.n	8004472 <I2C_MasterReceive_RXNE+0x82>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d179      	bne.n	8004566 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f001 faf6 	bl	8005a64 <I2C_WaitOnSTOPRequestThroughIT>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d14c      	bne.n	8004518 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800448c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800449c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b40      	cmp	r3, #64	@ 0x40
 80044d6:	d10a      	bne.n	80044ee <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff fdbd 	bl	8004066 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044ec:	e044      	b.n	8004578 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d002      	beq.n	8004502 <I2C_MasterReceive_RXNE+0x112>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d103      	bne.n	800450a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
 8004508:	e002      	b.n	8004510 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2212      	movs	r2, #18
 800450e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff fd77 	bl	8004004 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004516:	e02f      	b.n	8004578 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004526:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fd8a 	bl	8004078 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004564:	e008      	b.n	8004578 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004574:	605a      	str	r2, [r3, #4]
}
 8004576:	e7ff      	b.n	8004578 <I2C_MasterReceive_RXNE+0x188>
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b04      	cmp	r3, #4
 8004596:	d11b      	bne.n	80045d0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80045ce:	e0c4      	b.n	800475a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d129      	bne.n	800462e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d00a      	beq.n	8004606 <I2C_MasterReceive_BTF+0x86>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d007      	beq.n	8004606 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004604:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800462c:	e095      	b.n	800475a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d17d      	bne.n	8004734 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d002      	beq.n	8004644 <I2C_MasterReceive_BTF+0xc4>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b10      	cmp	r3, #16
 8004642:	d108      	bne.n	8004656 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e016      	b.n	8004684 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b04      	cmp	r3, #4
 800465a:	d002      	beq.n	8004662 <I2C_MasterReceive_BTF+0xe2>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d108      	bne.n	8004674 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e007      	b.n	8004684 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004682:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80046de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b40      	cmp	r3, #64	@ 0x40
 80046f2:	d10a      	bne.n	800470a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fcaf 	bl	8004066 <HAL_I2C_MemRxCpltCallback>
}
 8004708:	e027      	b.n	800475a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d002      	beq.n	800471e <I2C_MasterReceive_BTF+0x19e>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b20      	cmp	r3, #32
 800471c:	d103      	bne.n	8004726 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30
 8004724:	e002      	b.n	800472c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2212      	movs	r2, #18
 800472a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff fc69 	bl	8004004 <HAL_I2C_MasterRxCpltCallback>
}
 8004732:	e012      	b.n	800475a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b40      	cmp	r3, #64	@ 0x40
 8004774:	d117      	bne.n	80047a6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	b2db      	uxtb	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800478e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004790:	e067      	b.n	8004862 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	b2da      	uxtb	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]
}
 80047a4:	e05d      	b.n	8004862 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ae:	d133      	bne.n	8004818 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b21      	cmp	r3, #33	@ 0x21
 80047ba:	d109      	bne.n	80047d0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047cc:	611a      	str	r2, [r3, #16]
 80047ce:	e008      	b.n	80047e2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d004      	beq.n	80047f4 <I2C_Master_SB+0x92>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d108      	bne.n	8004806 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d032      	beq.n	8004862 <I2C_Master_SB+0x100>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d02d      	beq.n	8004862 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004814:	605a      	str	r2, [r3, #4]
}
 8004816:	e024      	b.n	8004862 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10e      	bne.n	800483e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004824:	b29b      	uxth	r3, r3
 8004826:	11db      	asrs	r3, r3, #7
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f003 0306 	and.w	r3, r3, #6
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f063 030f 	orn	r3, r3, #15
 8004834:	b2da      	uxtb	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	611a      	str	r2, [r3, #16]
}
 800483c:	e011      	b.n	8004862 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004842:	2b01      	cmp	r3, #1
 8004844:	d10d      	bne.n	8004862 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	b29b      	uxth	r3, r3
 800484c:	11db      	asrs	r3, r3, #7
 800484e:	b2db      	uxtb	r3, r3
 8004850:	f003 0306 	and.w	r3, r3, #6
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f063 030e 	orn	r3, r3, #14
 800485a:	b2da      	uxtb	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	611a      	str	r2, [r3, #16]
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004878:	b2da      	uxtb	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <I2C_Master_ADD10+0x26>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d108      	bne.n	80048a4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00c      	beq.n	80048b4 <I2C_Master_ADD10+0x48>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048b2:	605a      	str	r2, [r3, #4]
  }
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr

080048be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80048be:	b480      	push	{r7}
 80048c0:	b091      	sub	sp, #68	@ 0x44
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b22      	cmp	r3, #34	@ 0x22
 80048e6:	f040 8174 	bne.w	8004bd2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10f      	bne.n	8004912 <I2C_Master_ADDR+0x54>
 80048f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048f6:	2b40      	cmp	r3, #64	@ 0x40
 80048f8:	d10b      	bne.n	8004912 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fa:	2300      	movs	r3, #0
 80048fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	633b      	str	r3, [r7, #48]	@ 0x30
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	633b      	str	r3, [r7, #48]	@ 0x30
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	e16b      	b.n	8004bea <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11d      	bne.n	8004956 <I2C_Master_ADDR+0x98>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004922:	d118      	bne.n	8004956 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004924:	2300      	movs	r3, #0
 8004926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004948:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	651a      	str	r2, [r3, #80]	@ 0x50
 8004954:	e149      	b.n	8004bea <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d113      	bne.n	8004988 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004960:	2300      	movs	r3, #0
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e120      	b.n	8004bca <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b01      	cmp	r3, #1
 8004990:	f040 808a 	bne.w	8004aa8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004996:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800499a:	d137      	bne.n	8004a0c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ba:	d113      	bne.n	80049e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	e0f2      	b.n	8004bca <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e4:	2300      	movs	r3, #0
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	623b      	str	r3, [r7, #32]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	623b      	str	r3, [r7, #32]
 80049f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e0de      	b.n	8004bca <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d02e      	beq.n	8004a70 <I2C_Master_ADDR+0x1b2>
 8004a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d02b      	beq.n	8004a70 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1a:	2b12      	cmp	r3, #18
 8004a1c:	d102      	bne.n	8004a24 <I2C_Master_ADDR+0x166>
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d125      	bne.n	8004a70 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d00e      	beq.n	8004a48 <I2C_Master_ADDR+0x18a>
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d00b      	beq.n	8004a48 <I2C_Master_ADDR+0x18a>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a32:	2b10      	cmp	r3, #16
 8004a34:	d008      	beq.n	8004a48 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e007      	b.n	8004a58 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a56:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	e0ac      	b.n	8004bca <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a7e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a80:	2300      	movs	r3, #0
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e090      	b.n	8004bca <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d158      	bne.n	8004b64 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d021      	beq.n	8004afc <I2C_Master_ADDR+0x23e>
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d01e      	beq.n	8004afc <I2C_Master_ADDR+0x23e>
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d01b      	beq.n	8004afc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ad2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e012      	b.n	8004b22 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b0a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b30:	d14b      	bne.n	8004bca <I2C_Master_ADDR+0x30c>
 8004b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b38:	d00b      	beq.n	8004b52 <I2C_Master_ADDR+0x294>
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d008      	beq.n	8004b52 <I2C_Master_ADDR+0x294>
 8004b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d005      	beq.n	8004b52 <I2C_Master_ADDR+0x294>
 8004b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d002      	beq.n	8004b52 <I2C_Master_ADDR+0x294>
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d13b      	bne.n	8004bca <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	e032      	b.n	8004bca <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b72:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b82:	d117      	bne.n	8004bb4 <I2C_Master_ADDR+0x2f6>
 8004b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b8a:	d00b      	beq.n	8004ba4 <I2C_Master_ADDR+0x2e6>
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d008      	beq.n	8004ba4 <I2C_Master_ADDR+0x2e6>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d005      	beq.n	8004ba4 <I2C_Master_ADDR+0x2e6>
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	2b10      	cmp	r3, #16
 8004b9c:	d002      	beq.n	8004ba4 <I2C_Master_ADDR+0x2e6>
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d107      	bne.n	8004bb4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bb2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004bd0:	e00b      	b.n	8004bea <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	68bb      	ldr	r3, [r7, #8]
}
 8004be8:	e7ff      	b.n	8004bea <I2C_Master_ADDR+0x32c>
 8004bea:	bf00      	nop
 8004bec:	3744      	adds	r7, #68	@ 0x44
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d02b      	beq.n	8004c66 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d114      	bne.n	8004c66 <I2C_SlaveTransmit_TXE+0x72>
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	2b29      	cmp	r3, #41	@ 0x29
 8004c40:	d111      	bne.n	8004c66 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c50:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2221      	movs	r2, #33	@ 0x21
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2228      	movs	r2, #40	@ 0x28
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff f9d8 	bl	8004016 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d011      	beq.n	8004ca4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr

08004cae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cbc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02c      	beq.n	8004d22 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d114      	bne.n	8004d22 <I2C_SlaveReceive_RXNE+0x74>
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cfc:	d111      	bne.n	8004d22 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d0c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2222      	movs	r2, #34	@ 0x22
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2228      	movs	r2, #40	@ 0x28
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff f983 	bl	8004028 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d012      	beq.n	8004d62 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr

08004d6c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d86:	2b28      	cmp	r3, #40	@ 0x28
 8004d88:	d127      	bne.n	8004dda <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d98:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	089b      	lsrs	r3, r3, #2
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	09db      	lsrs	r3, r3, #7
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d103      	bne.n	8004dbe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	81bb      	strh	r3, [r7, #12]
 8004dbc:	e002      	b.n	8004dc4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004dcc:	89ba      	ldrh	r2, [r7, #12]
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff f931 	bl	800403a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004dd8:	e00e      	b.n	8004df8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004e20:	2300      	movs	r3, #0
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e5c:	d172      	bne.n	8004f44 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b22      	cmp	r3, #34	@ 0x22
 8004e62:	d002      	beq.n	8004e6a <I2C_Slave_STOPF+0x6a>
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e68:	d135      	bne.n	8004ed6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f043 0204 	orr.w	r2, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fd fed0 	bl	8002c48 <HAL_DMA_GetState>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d049      	beq.n	8004f42 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb2:	4a69      	ldr	r2, [pc, #420]	@ (8005058 <I2C_Slave_STOPF+0x258>)
 8004eb4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fd fe4c 	bl	8002b58 <HAL_DMA_Abort_IT>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d03d      	beq.n	8004f42 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ed4:	e035      	b.n	8004f42 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	f043 0204 	orr.w	r2, r3, #4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fd fe9a 	bl	8002c48 <HAL_DMA_GetState>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d014      	beq.n	8004f44 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1e:	4a4e      	ldr	r2, [pc, #312]	@ (8005058 <I2C_Slave_STOPF+0x258>)
 8004f20:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd fe16 	bl	8002b58 <HAL_DMA_Abort_IT>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4798      	blx	r3
 8004f40:	e000      	b.n	8004f44 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f42:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d03e      	beq.n	8004fcc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d112      	bne.n	8004f82 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8c:	2b40      	cmp	r3, #64	@ 0x40
 8004f8e:	d112      	bne.n	8004fb6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	f043 0204 	orr.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f843 	bl	8005060 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004fda:	e039      	b.n	8005050 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe0:	d109      	bne.n	8004ff6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2228      	movs	r2, #40	@ 0x28
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff f819 	bl	8004028 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b28      	cmp	r3, #40	@ 0x28
 8005000:	d111      	bne.n	8005026 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a15      	ldr	r2, [pc, #84]	@ (800505c <I2C_Slave_STOPF+0x25c>)
 8005006:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff f818 	bl	8004054 <HAL_I2C_ListenCpltCallback>
}
 8005024:	e014      	b.n	8005050 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502a:	2b22      	cmp	r3, #34	@ 0x22
 800502c:	d002      	beq.n	8005034 <I2C_Slave_STOPF+0x234>
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	2b22      	cmp	r3, #34	@ 0x22
 8005032:	d10d      	bne.n	8005050 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fe ffec 	bl	8004028 <HAL_I2C_SlaveRxCpltCallback>
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	080055c1 	.word	0x080055c1
 800505c:	ffff0000 	.word	0xffff0000

08005060 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800506e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005076:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005078:	7bbb      	ldrb	r3, [r7, #14]
 800507a:	2b10      	cmp	r3, #16
 800507c:	d002      	beq.n	8005084 <I2C_ITError+0x24>
 800507e:	7bbb      	ldrb	r3, [r7, #14]
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	d10a      	bne.n	800509a <I2C_ITError+0x3a>
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b22      	cmp	r3, #34	@ 0x22
 8005088:	d107      	bne.n	800509a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005098:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050a0:	2b28      	cmp	r3, #40	@ 0x28
 80050a2:	d107      	bne.n	80050b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2228      	movs	r2, #40	@ 0x28
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050b2:	e015      	b.n	80050e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c2:	d00a      	beq.n	80050da <I2C_ITError+0x7a>
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b60      	cmp	r3, #96	@ 0x60
 80050c8:	d007      	beq.n	80050da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ee:	d162      	bne.n	80051b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005104:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b01      	cmp	r3, #1
 800510c:	d020      	beq.n	8005150 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005112:	4a6a      	ldr	r2, [pc, #424]	@ (80052bc <I2C_ITError+0x25c>)
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd fd1c 	bl	8002b58 <HAL_DMA_Abort_IT>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8089 	beq.w	800523a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800514a:	4610      	mov	r0, r2
 800514c:	4798      	blx	r3
 800514e:	e074      	b.n	800523a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005154:	4a59      	ldr	r2, [pc, #356]	@ (80052bc <I2C_ITError+0x25c>)
 8005156:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	4618      	mov	r0, r3
 800515e:	f7fd fcfb 	bl	8002b58 <HAL_DMA_Abort_IT>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d068      	beq.n	800523a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005172:	2b40      	cmp	r3, #64	@ 0x40
 8005174:	d10b      	bne.n	800518e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80051b0:	4610      	mov	r0, r2
 80051b2:	4798      	blx	r3
 80051b4:	e041      	b.n	800523a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b60      	cmp	r3, #96	@ 0x60
 80051c0:	d125      	bne.n	800520e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d10b      	bne.n	80051f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0201 	bic.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fe ff3f 	bl	800408a <HAL_I2C_AbortCpltCallback>
 800520c:	e015      	b.n	800523a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005218:	2b40      	cmp	r3, #64	@ 0x40
 800521a:	d10b      	bne.n	8005234 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fe ff1f 	bl	8004078 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10e      	bne.n	8005268 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800525a:	2b00      	cmp	r3, #0
 800525c:	d104      	bne.n	8005268 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005276:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800527e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b04      	cmp	r3, #4
 800528a:	d113      	bne.n	80052b4 <I2C_ITError+0x254>
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b28      	cmp	r3, #40	@ 0x28
 8005290:	d110      	bne.n	80052b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a0a      	ldr	r2, [pc, #40]	@ (80052c0 <I2C_ITError+0x260>)
 8005296:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fe fed0 	bl	8004054 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	080055c1 	.word	0x080055c1
 80052c0:	ffff0000 	.word	0xffff0000

080052c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	4608      	mov	r0, r1
 80052ce:	4611      	mov	r1, r2
 80052d0:	461a      	mov	r2, r3
 80052d2:	4603      	mov	r3, r0
 80052d4:	817b      	strh	r3, [r7, #10]
 80052d6:	460b      	mov	r3, r1
 80052d8:	813b      	strh	r3, [r7, #8]
 80052da:	4613      	mov	r3, r2
 80052dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fa08 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00d      	beq.n	8005322 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005314:	d103      	bne.n	800531e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800531c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e05f      	b.n	80053e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005322:	897b      	ldrh	r3, [r7, #10]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005330:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	492d      	ldr	r1, [pc, #180]	@ (80053ec <I2C_RequestMemoryWrite+0x128>)
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fa63 	bl	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e04c      	b.n	80053e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005360:	6a39      	ldr	r1, [r7, #32]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 faee 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	2b04      	cmp	r3, #4
 8005374:	d107      	bne.n	8005386 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005384:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e02b      	b.n	80053e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d105      	bne.n	800539c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005390:	893b      	ldrh	r3, [r7, #8]
 8005392:	b2da      	uxtb	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	611a      	str	r2, [r3, #16]
 800539a:	e021      	b.n	80053e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800539c:	893b      	ldrh	r3, [r7, #8]
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ac:	6a39      	ldr	r1, [r7, #32]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fac8 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d107      	bne.n	80053d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e005      	b.n	80053e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053d6:	893b      	ldrh	r3, [r7, #8]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	00010002 	.word	0x00010002

080053f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	4608      	mov	r0, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	461a      	mov	r2, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	817b      	strh	r3, [r7, #10]
 8005402:	460b      	mov	r3, r1
 8005404:	813b      	strh	r3, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005418:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	2200      	movs	r2, #0
 8005432:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f96a 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00d      	beq.n	800545e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005450:	d103      	bne.n	800545a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005458:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e0aa      	b.n	80055b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800545e:	897b      	ldrh	r3, [r7, #10]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800546c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	4952      	ldr	r1, [pc, #328]	@ (80055bc <I2C_RequestMemoryRead+0x1cc>)
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f9c5 	bl	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e097      	b.n	80055b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800549a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800549c:	6a39      	ldr	r1, [r7, #32]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fa50 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d107      	bne.n	80054c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e076      	b.n	80055b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d105      	bne.n	80054d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054cc:	893b      	ldrh	r3, [r7, #8]
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	611a      	str	r2, [r3, #16]
 80054d6:	e021      	b.n	800551c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054d8:	893b      	ldrh	r3, [r7, #8]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	b29b      	uxth	r3, r3
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e8:	6a39      	ldr	r1, [r7, #32]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fa2a 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00d      	beq.n	8005512 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d107      	bne.n	800550e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800550c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e050      	b.n	80055b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005512:	893b      	ldrh	r3, [r7, #8]
 8005514:	b2da      	uxtb	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800551c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551e:	6a39      	ldr	r1, [r7, #32]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 fa0f 	bl	8005944 <I2C_WaitOnTXEFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00d      	beq.n	8005548 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005530:	2b04      	cmp	r3, #4
 8005532:	d107      	bne.n	8005544 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005542:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e035      	b.n	80055b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005556:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	2200      	movs	r2, #0
 8005560:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f8d3 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00d      	beq.n	800558c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800557e:	d103      	bne.n	8005588 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005586:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e013      	b.n	80055b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800558c:	897b      	ldrh	r3, [r7, #10]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	b2da      	uxtb	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	4906      	ldr	r1, [pc, #24]	@ (80055bc <I2C_RequestMemoryRead+0x1cc>)
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f92e 	bl	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	00010002 	.word	0x00010002

080055c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055da:	4b4b      	ldr	r3, [pc, #300]	@ (8005708 <I2C_DMAAbort+0x148>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	08db      	lsrs	r3, r3, #3
 80055e0:	4a4a      	ldr	r2, [pc, #296]	@ (800570c <I2C_DMAAbort+0x14c>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	0a1a      	lsrs	r2, r3, #8
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	00da      	lsls	r2, r3, #3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005606:	e00a      	b.n	800561e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3b01      	subs	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800561c:	d0ea      	beq.n	80055f4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562a:	2200      	movs	r2, #0
 800562c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	2200      	movs	r2, #0
 800563c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800564c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005660:	2200      	movs	r2, #0
 8005662:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	2200      	movs	r2, #0
 8005672:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b60      	cmp	r3, #96	@ 0x60
 800568e:	d10e      	bne.n	80056ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2200      	movs	r2, #0
 80056a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056a6:	6978      	ldr	r0, [r7, #20]
 80056a8:	f7fe fcef 	bl	800408a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056ac:	e027      	b.n	80056fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ae:	7cfb      	ldrb	r3, [r7, #19]
 80056b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056b4:	2b28      	cmp	r3, #40	@ 0x28
 80056b6:	d117      	bne.n	80056e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2228      	movs	r2, #40	@ 0x28
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80056e6:	e007      	b.n	80056f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80056f8:	6978      	ldr	r0, [r7, #20]
 80056fa:	f7fe fcbd 	bl	8004078 <HAL_I2C_ErrorCallback>
}
 80056fe:	bf00      	nop
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000000 	.word	0x20000000
 800570c:	14f8b589 	.word	0x14f8b589

08005710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005720:	e048      	b.n	80057b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005728:	d044      	beq.n	80057b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fc fa0d 	bl	8001b48 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d139      	bne.n	80057b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10d      	bne.n	8005766 <I2C_WaitOnFlagUntilTimeout+0x56>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	43da      	mvns	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	e00c      	b.n	8005780 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	43da      	mvns	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	429a      	cmp	r2, r3
 8005784:	d116      	bne.n	80057b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e023      	b.n	80057fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	0c1b      	lsrs	r3, r3, #16
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d10d      	bne.n	80057da <I2C_WaitOnFlagUntilTimeout+0xca>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	43da      	mvns	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4013      	ands	r3, r2
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bf0c      	ite	eq
 80057d0:	2301      	moveq	r3, #1
 80057d2:	2300      	movne	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	e00c      	b.n	80057f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	43da      	mvns	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4013      	ands	r3, r2
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d093      	beq.n	8005722 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005812:	e071      	b.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005822:	d123      	bne.n	800586c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005832:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800583c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005858:	f043 0204 	orr.w	r2, r3, #4
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e067      	b.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d041      	beq.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005874:	f7fc f968 	bl	8001b48 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	429a      	cmp	r2, r3
 8005882:	d302      	bcc.n	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d136      	bne.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d10c      	bne.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	43da      	mvns	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bf14      	ite	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	2300      	moveq	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	e00b      	b.n	80058c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	43da      	mvns	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4013      	ands	r3, r2
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d016      	beq.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e021      	b.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	0c1b      	lsrs	r3, r3, #16
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d10c      	bne.n	800591c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	43da      	mvns	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4013      	ands	r3, r2
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	bf14      	ite	ne
 8005914:	2301      	movne	r3, #1
 8005916:	2300      	moveq	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	e00b      	b.n	8005934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	43da      	mvns	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4013      	ands	r3, r2
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	bf14      	ite	ne
 800592e:	2301      	movne	r3, #1
 8005930:	2300      	moveq	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	f47f af6d 	bne.w	8005814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005950:	e034      	b.n	80059bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f915 	bl	8005b82 <I2C_IsAcknowledgeFailed>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e034      	b.n	80059cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d028      	beq.n	80059bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596a:	f7fc f8ed 	bl	8001b48 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11d      	bne.n	80059bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800598a:	2b80      	cmp	r3, #128	@ 0x80
 800598c:	d016      	beq.n	80059bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	f043 0220 	orr.w	r2, r3, #32
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e007      	b.n	80059cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c6:	2b80      	cmp	r3, #128	@ 0x80
 80059c8:	d1c3      	bne.n	8005952 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059e0:	e034      	b.n	8005a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f8cd 	bl	8005b82 <I2C_IsAcknowledgeFailed>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e034      	b.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d028      	beq.n	8005a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fa:	f7fc f8a5 	bl	8001b48 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d11d      	bne.n	8005a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d016      	beq.n	8005a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a38:	f043 0220 	orr.w	r2, r3, #32
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e007      	b.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d1c3      	bne.n	80059e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a70:	4b13      	ldr	r3, [pc, #76]	@ (8005ac0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	08db      	lsrs	r3, r3, #3
 8005a76:	4a13      	ldr	r2, [pc, #76]	@ (8005ac4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	0a1a      	lsrs	r2, r3, #8
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d107      	bne.n	8005aa2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	f043 0220 	orr.w	r2, r3, #32
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e008      	b.n	8005ab4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ab0:	d0e9      	beq.n	8005a86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000000 	.word	0x20000000
 8005ac4:	14f8b589 	.word	0x14f8b589

08005ac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ad4:	e049      	b.n	8005b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	d119      	bne.n	8005b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0210 	mvn.w	r2, #16
 8005aec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e030      	b.n	8005b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b18:	f7fc f816 	bl	8001b48 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d302      	bcc.n	8005b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d11d      	bne.n	8005b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b38:	2b40      	cmp	r3, #64	@ 0x40
 8005b3a:	d016      	beq.n	8005b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	f043 0220 	orr.w	r2, r3, #32
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e007      	b.n	8005b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b74:	2b40      	cmp	r3, #64	@ 0x40
 8005b76:	d1ae      	bne.n	8005ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b98:	d11b      	bne.n	8005bd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ba2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbe:	f043 0204 	orr.w	r2, r3, #4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr

08005bde <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005bee:	d103      	bne.n	8005bf8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005bf6:	e007      	b.n	8005c08 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005c00:	d102      	bne.n	8005c08 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2208      	movs	r2, #8
 8005c06:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
	...

08005c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e272      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8087 	beq.w	8005d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c34:	4b92      	ldr	r3, [pc, #584]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f003 030c 	and.w	r3, r3, #12
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d00c      	beq.n	8005c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c40:	4b8f      	ldr	r3, [pc, #572]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f003 030c 	and.w	r3, r3, #12
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d112      	bne.n	8005c72 <HAL_RCC_OscConfig+0x5e>
 8005c4c:	4b8c      	ldr	r3, [pc, #560]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c58:	d10b      	bne.n	8005c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5a:	4b89      	ldr	r3, [pc, #548]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d06c      	beq.n	8005d40 <HAL_RCC_OscConfig+0x12c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d168      	bne.n	8005d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e24c      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCC_OscConfig+0x76>
 8005c7c:	4b80      	ldr	r3, [pc, #512]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a7f      	ldr	r2, [pc, #508]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e02e      	b.n	8005ce8 <HAL_RCC_OscConfig+0xd4>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10c      	bne.n	8005cac <HAL_RCC_OscConfig+0x98>
 8005c92:	4b7b      	ldr	r3, [pc, #492]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a7a      	ldr	r2, [pc, #488]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4b78      	ldr	r3, [pc, #480]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a77      	ldr	r2, [pc, #476]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005ca4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e01d      	b.n	8005ce8 <HAL_RCC_OscConfig+0xd4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCC_OscConfig+0xbc>
 8005cb6:	4b72      	ldr	r3, [pc, #456]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a71      	ldr	r2, [pc, #452]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4b6f      	ldr	r3, [pc, #444]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a6e      	ldr	r2, [pc, #440]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e00b      	b.n	8005ce8 <HAL_RCC_OscConfig+0xd4>
 8005cd0:	4b6b      	ldr	r3, [pc, #428]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a6a      	ldr	r2, [pc, #424]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	4b68      	ldr	r3, [pc, #416]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a67      	ldr	r2, [pc, #412]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d013      	beq.n	8005d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf0:	f7fb ff2a 	bl	8001b48 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf8:	f7fb ff26 	bl	8001b48 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b64      	cmp	r3, #100	@ 0x64
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e200      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0xe4>
 8005d16:	e014      	b.n	8005d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d18:	f7fb ff16 	bl	8001b48 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d20:	f7fb ff12 	bl	8001b48 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b64      	cmp	r3, #100	@ 0x64
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e1ec      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d32:	4b53      	ldr	r3, [pc, #332]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0x10c>
 8005d3e:	e000      	b.n	8005d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d063      	beq.n	8005e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d4e:	4b4c      	ldr	r3, [pc, #304]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f003 030c 	and.w	r3, r3, #12
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d5a:	4b49      	ldr	r3, [pc, #292]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d11c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x18c>
 8005d66:	4b46      	ldr	r3, [pc, #280]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d116      	bne.n	8005da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d72:	4b43      	ldr	r3, [pc, #268]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_RCC_OscConfig+0x176>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d001      	beq.n	8005d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e1c0      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4939      	ldr	r1, [pc, #228]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9e:	e03a      	b.n	8005e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d020      	beq.n	8005dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da8:	4b36      	ldr	r3, [pc, #216]	@ (8005e84 <HAL_RCC_OscConfig+0x270>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dae:	f7fb fecb 	bl	8001b48 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005db6:	f7fb fec7 	bl	8001b48 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e1a1      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	4927      	ldr	r1, [pc, #156]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	600b      	str	r3, [r1, #0]
 8005de8:	e015      	b.n	8005e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dea:	4b26      	ldr	r3, [pc, #152]	@ (8005e84 <HAL_RCC_OscConfig+0x270>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df0:	f7fb feaa 	bl	8001b48 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df8:	f7fb fea6 	bl	8001b48 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e180      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d03a      	beq.n	8005e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d019      	beq.n	8005e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e2a:	4b17      	ldr	r3, [pc, #92]	@ (8005e88 <HAL_RCC_OscConfig+0x274>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e30:	f7fb fe8a 	bl	8001b48 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e38:	f7fb fe86 	bl	8001b48 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e160      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <HAL_RCC_OscConfig+0x26c>)
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e56:	2001      	movs	r0, #1
 8005e58:	f000 face 	bl	80063f8 <RCC_Delay>
 8005e5c:	e01c      	b.n	8005e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <HAL_RCC_OscConfig+0x274>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e64:	f7fb fe70 	bl	8001b48 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e6a:	e00f      	b.n	8005e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e6c:	f7fb fe6c 	bl	8001b48 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d908      	bls.n	8005e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e146      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
 8005e7e:	bf00      	nop
 8005e80:	40021000 	.word	0x40021000
 8005e84:	42420000 	.word	0x42420000
 8005e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e8c:	4b92      	ldr	r3, [pc, #584]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e9      	bne.n	8005e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80a6 	beq.w	8005ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eaa:	4b8b      	ldr	r3, [pc, #556]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10d      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eb6:	4b88      	ldr	r3, [pc, #544]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	4a87      	ldr	r2, [pc, #540]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ec0:	61d3      	str	r3, [r2, #28]
 8005ec2:	4b85      	ldr	r3, [pc, #532]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eca:	60bb      	str	r3, [r7, #8]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed2:	4b82      	ldr	r3, [pc, #520]	@ (80060dc <HAL_RCC_OscConfig+0x4c8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d118      	bne.n	8005f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ede:	4b7f      	ldr	r3, [pc, #508]	@ (80060dc <HAL_RCC_OscConfig+0x4c8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a7e      	ldr	r2, [pc, #504]	@ (80060dc <HAL_RCC_OscConfig+0x4c8>)
 8005ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eea:	f7fb fe2d 	bl	8001b48 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef2:	f7fb fe29 	bl	8001b48 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b64      	cmp	r3, #100	@ 0x64
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e103      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f04:	4b75      	ldr	r3, [pc, #468]	@ (80060dc <HAL_RCC_OscConfig+0x4c8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0f0      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d106      	bne.n	8005f26 <HAL_RCC_OscConfig+0x312>
 8005f18:	4b6f      	ldr	r3, [pc, #444]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f1e:	f043 0301 	orr.w	r3, r3, #1
 8005f22:	6213      	str	r3, [r2, #32]
 8005f24:	e02d      	b.n	8005f82 <HAL_RCC_OscConfig+0x36e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10c      	bne.n	8005f48 <HAL_RCC_OscConfig+0x334>
 8005f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	4a69      	ldr	r2, [pc, #420]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	6213      	str	r3, [r2, #32]
 8005f3a:	4b67      	ldr	r3, [pc, #412]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	4a66      	ldr	r2, [pc, #408]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f40:	f023 0304 	bic.w	r3, r3, #4
 8005f44:	6213      	str	r3, [r2, #32]
 8005f46:	e01c      	b.n	8005f82 <HAL_RCC_OscConfig+0x36e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b05      	cmp	r3, #5
 8005f4e:	d10c      	bne.n	8005f6a <HAL_RCC_OscConfig+0x356>
 8005f50:	4b61      	ldr	r3, [pc, #388]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	4a60      	ldr	r2, [pc, #384]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f56:	f043 0304 	orr.w	r3, r3, #4
 8005f5a:	6213      	str	r3, [r2, #32]
 8005f5c:	4b5e      	ldr	r3, [pc, #376]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	4a5d      	ldr	r2, [pc, #372]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	6213      	str	r3, [r2, #32]
 8005f68:	e00b      	b.n	8005f82 <HAL_RCC_OscConfig+0x36e>
 8005f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	6213      	str	r3, [r2, #32]
 8005f76:	4b58      	ldr	r3, [pc, #352]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	4a57      	ldr	r2, [pc, #348]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005f7c:	f023 0304 	bic.w	r3, r3, #4
 8005f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d015      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f8a:	f7fb fddd 	bl	8001b48 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f90:	e00a      	b.n	8005fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f92:	f7fb fdd9 	bl	8001b48 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e0b1      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0ee      	beq.n	8005f92 <HAL_RCC_OscConfig+0x37e>
 8005fb4:	e014      	b.n	8005fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb6:	f7fb fdc7 	bl	8001b48 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fbc:	e00a      	b.n	8005fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fbe:	f7fb fdc3 	bl	8001b48 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e09b      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd4:	4b40      	ldr	r3, [pc, #256]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1ee      	bne.n	8005fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d105      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	4a3b      	ldr	r2, [pc, #236]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005fec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 8087 	beq.w	800610a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ffc:	4b36      	ldr	r3, [pc, #216]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f003 030c 	and.w	r3, r3, #12
 8006004:	2b08      	cmp	r3, #8
 8006006:	d061      	beq.n	80060cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d146      	bne.n	800609e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006010:	4b33      	ldr	r3, [pc, #204]	@ (80060e0 <HAL_RCC_OscConfig+0x4cc>)
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006016:	f7fb fd97 	bl	8001b48 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800601e:	f7fb fd93 	bl	8001b48 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e06d      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006030:	4b29      	ldr	r3, [pc, #164]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f0      	bne.n	800601e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006044:	d108      	bne.n	8006058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006046:	4b24      	ldr	r3, [pc, #144]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	4921      	ldr	r1, [pc, #132]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8006054:	4313      	orrs	r3, r2
 8006056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006058:	4b1f      	ldr	r3, [pc, #124]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a19      	ldr	r1, [r3, #32]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006068:	430b      	orrs	r3, r1
 800606a:	491b      	ldr	r1, [pc, #108]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 800606c:	4313      	orrs	r3, r2
 800606e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006070:	4b1b      	ldr	r3, [pc, #108]	@ (80060e0 <HAL_RCC_OscConfig+0x4cc>)
 8006072:	2201      	movs	r2, #1
 8006074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006076:	f7fb fd67 	bl	8001b48 <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607e:	f7fb fd63 	bl	8001b48 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e03d      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006090:	4b11      	ldr	r3, [pc, #68]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0f0      	beq.n	800607e <HAL_RCC_OscConfig+0x46a>
 800609c:	e035      	b.n	800610a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609e:	4b10      	ldr	r3, [pc, #64]	@ (80060e0 <HAL_RCC_OscConfig+0x4cc>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a4:	f7fb fd50 	bl	8001b48 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ac:	f7fb fd4c 	bl	8001b48 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e026      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060be:	4b06      	ldr	r3, [pc, #24]	@ (80060d8 <HAL_RCC_OscConfig+0x4c4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f0      	bne.n	80060ac <HAL_RCC_OscConfig+0x498>
 80060ca:	e01e      	b.n	800610a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d107      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e019      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
 80060d8:	40021000 	.word	0x40021000
 80060dc:	40007000 	.word	0x40007000
 80060e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <HAL_RCC_OscConfig+0x500>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d106      	bne.n	8006106 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006102:	429a      	cmp	r2, r3
 8006104:	d001      	beq.n	800610a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40021000 	.word	0x40021000

08006118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e0d0      	b.n	80062ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800612c:	4b6a      	ldr	r3, [pc, #424]	@ (80062d8 <HAL_RCC_ClockConfig+0x1c0>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d910      	bls.n	800615c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800613a:	4b67      	ldr	r3, [pc, #412]	@ (80062d8 <HAL_RCC_ClockConfig+0x1c0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f023 0207 	bic.w	r2, r3, #7
 8006142:	4965      	ldr	r1, [pc, #404]	@ (80062d8 <HAL_RCC_ClockConfig+0x1c0>)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	4313      	orrs	r3, r2
 8006148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800614a:	4b63      	ldr	r3, [pc, #396]	@ (80062d8 <HAL_RCC_ClockConfig+0x1c0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d001      	beq.n	800615c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0b8      	b.n	80062ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006174:	4b59      	ldr	r3, [pc, #356]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4a58      	ldr	r2, [pc, #352]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 800617a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800617e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800618c:	4b53      	ldr	r3, [pc, #332]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	4a52      	ldr	r2, [pc, #328]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 8006192:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006196:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006198:	4b50      	ldr	r3, [pc, #320]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	494d      	ldr	r1, [pc, #308]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d040      	beq.n	8006238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d107      	bne.n	80061ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061be:	4b47      	ldr	r3, [pc, #284]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d115      	bne.n	80061f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e07f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d107      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d6:	4b41      	ldr	r3, [pc, #260]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e073      	b.n	80062ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e6:	4b3d      	ldr	r3, [pc, #244]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e06b      	b.n	80062ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061f6:	4b39      	ldr	r3, [pc, #228]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f023 0203 	bic.w	r2, r3, #3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4936      	ldr	r1, [pc, #216]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 8006204:	4313      	orrs	r3, r2
 8006206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006208:	f7fb fc9e 	bl	8001b48 <HAL_GetTick>
 800620c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620e:	e00a      	b.n	8006226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006210:	f7fb fc9a 	bl	8001b48 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800621e:	4293      	cmp	r3, r2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e053      	b.n	80062ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006226:	4b2d      	ldr	r3, [pc, #180]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f003 020c 	and.w	r2, r3, #12
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	429a      	cmp	r2, r3
 8006236:	d1eb      	bne.n	8006210 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006238:	4b27      	ldr	r3, [pc, #156]	@ (80062d8 <HAL_RCC_ClockConfig+0x1c0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d210      	bcs.n	8006268 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006246:	4b24      	ldr	r3, [pc, #144]	@ (80062d8 <HAL_RCC_ClockConfig+0x1c0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f023 0207 	bic.w	r2, r3, #7
 800624e:	4922      	ldr	r1, [pc, #136]	@ (80062d8 <HAL_RCC_ClockConfig+0x1c0>)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	4313      	orrs	r3, r2
 8006254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006256:	4b20      	ldr	r3, [pc, #128]	@ (80062d8 <HAL_RCC_ClockConfig+0x1c0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e032      	b.n	80062ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006274:	4b19      	ldr	r3, [pc, #100]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4916      	ldr	r1, [pc, #88]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 8006282:	4313      	orrs	r3, r2
 8006284:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d009      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006292:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	490e      	ldr	r1, [pc, #56]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062a6:	f000 f821 	bl	80062ec <HAL_RCC_GetSysClockFreq>
 80062aa:	4602      	mov	r2, r0
 80062ac:	4b0b      	ldr	r3, [pc, #44]	@ (80062dc <HAL_RCC_ClockConfig+0x1c4>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	490a      	ldr	r1, [pc, #40]	@ (80062e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062b8:	5ccb      	ldrb	r3, [r1, r3]
 80062ba:	fa22 f303 	lsr.w	r3, r2, r3
 80062be:	4a09      	ldr	r2, [pc, #36]	@ (80062e4 <HAL_RCC_ClockConfig+0x1cc>)
 80062c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062c2:	4b09      	ldr	r3, [pc, #36]	@ (80062e8 <HAL_RCC_ClockConfig+0x1d0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fb fbfc 	bl	8001ac4 <HAL_InitTick>

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40022000 	.word	0x40022000
 80062dc:	40021000 	.word	0x40021000
 80062e0:	080160b0 	.word	0x080160b0
 80062e4:	20000000 	.word	0x20000000
 80062e8:	20000004 	.word	0x20000004

080062ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	2300      	movs	r3, #0
 80062f8:	60bb      	str	r3, [r7, #8]
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	2300      	movs	r3, #0
 8006300:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006306:	4b1e      	ldr	r3, [pc, #120]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x94>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	2b04      	cmp	r3, #4
 8006314:	d002      	beq.n	800631c <HAL_RCC_GetSysClockFreq+0x30>
 8006316:	2b08      	cmp	r3, #8
 8006318:	d003      	beq.n	8006322 <HAL_RCC_GetSysClockFreq+0x36>
 800631a:	e027      	b.n	800636c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800631c:	4b19      	ldr	r3, [pc, #100]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x98>)
 800631e:	613b      	str	r3, [r7, #16]
      break;
 8006320:	e027      	b.n	8006372 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	0c9b      	lsrs	r3, r3, #18
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	4a17      	ldr	r2, [pc, #92]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x9c>)
 800632c:	5cd3      	ldrb	r3, [r2, r3]
 800632e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d010      	beq.n	800635c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800633a:	4b11      	ldr	r3, [pc, #68]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x94>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	0c5b      	lsrs	r3, r3, #17
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	4a11      	ldr	r2, [pc, #68]	@ (800638c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006346:	5cd3      	ldrb	r3, [r2, r3]
 8006348:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a0d      	ldr	r2, [pc, #52]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x98>)
 800634e:	fb03 f202 	mul.w	r2, r3, r2
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	fbb2 f3f3 	udiv	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	e004      	b.n	8006366 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a0c      	ldr	r2, [pc, #48]	@ (8006390 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006360:	fb02 f303 	mul.w	r3, r2, r3
 8006364:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	613b      	str	r3, [r7, #16]
      break;
 800636a:	e002      	b.n	8006372 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x98>)
 800636e:	613b      	str	r3, [r7, #16]
      break;
 8006370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006372:	693b      	ldr	r3, [r7, #16]
}
 8006374:	4618      	mov	r0, r3
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40021000 	.word	0x40021000
 8006384:	007a1200 	.word	0x007a1200
 8006388:	080160c8 	.word	0x080160c8
 800638c:	080160d8 	.word	0x080160d8
 8006390:	003d0900 	.word	0x003d0900

08006394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006398:	4b02      	ldr	r3, [pc, #8]	@ (80063a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800639a:	681b      	ldr	r3, [r3, #0]
}
 800639c:	4618      	mov	r0, r3
 800639e:	46bd      	mov	sp, r7
 80063a0:	bc80      	pop	{r7}
 80063a2:	4770      	bx	lr
 80063a4:	20000000 	.word	0x20000000

080063a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063ac:	f7ff fff2 	bl	8006394 <HAL_RCC_GetHCLKFreq>
 80063b0:	4602      	mov	r2, r0
 80063b2:	4b05      	ldr	r3, [pc, #20]	@ (80063c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	4903      	ldr	r1, [pc, #12]	@ (80063cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063be:	5ccb      	ldrb	r3, [r1, r3]
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40021000 	.word	0x40021000
 80063cc:	080160c0 	.word	0x080160c0

080063d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063d4:	f7ff ffde 	bl	8006394 <HAL_RCC_GetHCLKFreq>
 80063d8:	4602      	mov	r2, r0
 80063da:	4b05      	ldr	r3, [pc, #20]	@ (80063f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	0adb      	lsrs	r3, r3, #11
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	4903      	ldr	r1, [pc, #12]	@ (80063f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063e6:	5ccb      	ldrb	r3, [r1, r3]
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40021000 	.word	0x40021000
 80063f4:	080160c0 	.word	0x080160c0

080063f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006400:	4b0a      	ldr	r3, [pc, #40]	@ (800642c <RCC_Delay+0x34>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a0a      	ldr	r2, [pc, #40]	@ (8006430 <RCC_Delay+0x38>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	0a5b      	lsrs	r3, r3, #9
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006414:	bf00      	nop
  }
  while (Delay --);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1e5a      	subs	r2, r3, #1
 800641a:	60fa      	str	r2, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1f9      	bne.n	8006414 <RCC_Delay+0x1c>
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr
 800642c:	20000000 	.word	0x20000000
 8006430:	10624dd3 	.word	0x10624dd3

08006434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e042      	b.n	80064cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fb f92a 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2224      	movs	r2, #36	@ 0x24
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fded 	bl	8007058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800648c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695a      	ldr	r2, [r3, #20]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800649c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	@ 0x28
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d175      	bne.n	80065e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_UART_Transmit+0x2c>
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e06e      	b.n	80065e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2221      	movs	r2, #33	@ 0x21
 800650e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006512:	f7fb fb19 	bl	8001b48 <HAL_GetTick>
 8006516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800652c:	d108      	bne.n	8006540 <HAL_UART_Transmit+0x6c>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	e003      	b.n	8006548 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006544:	2300      	movs	r3, #0
 8006546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006548:	e02e      	b.n	80065a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2200      	movs	r2, #0
 8006552:	2180      	movs	r1, #128	@ 0x80
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fb52 	bl	8006bfe <UART_WaitOnFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e03a      	b.n	80065e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10b      	bne.n	800658a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006580:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	3302      	adds	r3, #2
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	e007      	b.n	800659a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	781a      	ldrb	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	3301      	adds	r3, #1
 8006598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1cb      	bne.n	800654a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2200      	movs	r2, #0
 80065ba:	2140      	movs	r1, #64	@ 0x40
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fb1e 	bl	8006bfe <UART_WaitOnFlagUntilTimeout>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	e000      	b.n	80065e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80065e0:	2302      	movs	r3, #2
  }
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b08c      	sub	sp, #48	@ 0x30
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	4613      	mov	r3, r2
 80065f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b20      	cmp	r3, #32
 8006602:	d14a      	bne.n	800669a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e043      	b.n	800669c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006620:	88fb      	ldrh	r3, [r7, #6]
 8006622:	461a      	mov	r2, r3
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fb42 	bl	8006cb0 <UART_Start_Receive_IT>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006636:	2b00      	cmp	r3, #0
 8006638:	d12c      	bne.n	8006694 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663e:	2b01      	cmp	r3, #1
 8006640:	d125      	bne.n	800668e <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006642:	2300      	movs	r3, #0
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	617b      	str	r3, [r7, #20]
   return(result);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f043 0310 	orr.w	r3, r3, #16
 800666e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006678:	627a      	str	r2, [r7, #36]	@ 0x24
 800667a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	6a39      	ldr	r1, [r7, #32]
 800667e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	61fb      	str	r3, [r7, #28]
   return(result);
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e5      	bne.n	8006658 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800668c:	e002      	b.n	8006694 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006694:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006698:	e000      	b.n	800669c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800669a:	2302      	movs	r3, #2
  }
}
 800669c:	4618      	mov	r0, r3
 800669e:	3730      	adds	r7, #48	@ 0x30
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b0ba      	sub	sp, #232	@ 0xe8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80066e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10f      	bne.n	800670a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <HAL_UART_IRQHandler+0x66>
 80066f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fbea 	bl	8006edc <UART_Receive_IT>
      return;
 8006708:	e25b      	b.n	8006bc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800670a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 80de 	beq.w	80068d0 <HAL_UART_IRQHandler+0x22c>
 8006714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d106      	bne.n	800672e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006724:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80d1 	beq.w	80068d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <HAL_UART_IRQHandler+0xae>
 800673a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800673e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674a:	f043 0201 	orr.w	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00b      	beq.n	8006776 <HAL_UART_IRQHandler+0xd2>
 800675e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800676e:	f043 0202 	orr.w	r2, r3, #2
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00b      	beq.n	800679a <HAL_UART_IRQHandler+0xf6>
 8006782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006792:	f043 0204 	orr.w	r2, r3, #4
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d011      	beq.n	80067ca <HAL_UART_IRQHandler+0x126>
 80067a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d105      	bne.n	80067be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c2:	f043 0208 	orr.w	r2, r3, #8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 81f2 	beq.w	8006bb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d008      	beq.n	80067f2 <HAL_UART_IRQHandler+0x14e>
 80067e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fb75 	bl	8006edc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <HAL_UART_IRQHandler+0x17a>
 8006816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800681a:	2b00      	cmp	r3, #0
 800681c:	d04f      	beq.n	80068be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa7f 	bl	8006d22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d041      	beq.n	80068b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3314      	adds	r3, #20
 8006838:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800684c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3314      	adds	r3, #20
 800685a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800685e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006862:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800686a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1d9      	bne.n	8006832 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d013      	beq.n	80068ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a84 <HAL_UART_IRQHandler+0x3e0>)
 800688c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006892:	4618      	mov	r0, r3
 8006894:	f7fc f960 	bl	8002b58 <HAL_DMA_Abort_IT>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d016      	beq.n	80068cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80068a8:	4610      	mov	r0, r2
 80068aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ac:	e00e      	b.n	80068cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f99c 	bl	8006bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b4:	e00a      	b.n	80068cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f998 	bl	8006bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068bc:	e006      	b.n	80068cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f994 	bl	8006bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80068ca:	e175      	b.n	8006bb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068cc:	bf00      	nop
    return;
 80068ce:	e173      	b.n	8006bb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	f040 814f 	bne.w	8006b78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8148 	beq.w	8006b78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8141 	beq.w	8006b78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068f6:	2300      	movs	r3, #0
 80068f8:	60bb      	str	r3, [r7, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	60bb      	str	r3, [r7, #8]
 800690a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 80b6 	beq.w	8006a88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8145 	beq.w	8006bbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800693a:	429a      	cmp	r2, r3
 800693c:	f080 813e 	bcs.w	8006bbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006946:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b20      	cmp	r3, #32
 8006950:	f000 8088 	beq.w	8006a64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	330c      	adds	r3, #12
 800695a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800696a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800696e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006972:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006980:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006984:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800698c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1d9      	bne.n	8006954 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3314      	adds	r3, #20
 80069a6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3314      	adds	r3, #20
 80069c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069c4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e1      	bne.n	80069a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3314      	adds	r3, #20
 80069e2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3314      	adds	r3, #20
 80069fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e3      	bne.n	80069dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a34:	f023 0310 	bic.w	r3, r3, #16
 8006a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	330c      	adds	r3, #12
 8006a42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a46:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a48:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e3      	bne.n	8006a22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fc f83f 	bl	8002ae2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fa fb92 	bl	80011a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a80:	e09c      	b.n	8006bbc <HAL_UART_IRQHandler+0x518>
 8006a82:	bf00      	nop
 8006a84:	08006de7 	.word	0x08006de7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 808e 	beq.w	8006bc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8089 	beq.w	8006bc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330c      	adds	r3, #12
 8006ace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ad2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ad4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ad8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e3      	bne.n	8006aae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3314      	adds	r3, #20
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	623b      	str	r3, [r7, #32]
   return(result);
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3314      	adds	r3, #20
 8006b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e3      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	330c      	adds	r3, #12
 8006b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0310 	bic.w	r3, r3, #16
 8006b42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	330c      	adds	r3, #12
 8006b4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b50:	61fa      	str	r2, [r7, #28]
 8006b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	69b9      	ldr	r1, [r7, #24]
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e3      	bne.n	8006b2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7fa fb17 	bl	80011a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b76:	e023      	b.n	8006bc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <HAL_UART_IRQHandler+0x4f4>
 8006b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f93c 	bl	8006e0e <UART_Transmit_IT>
    return;
 8006b96:	e014      	b.n	8006bc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00e      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x51e>
 8006ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f97b 	bl	8006eac <UART_EndTransmit_IT>
    return;
 8006bb6:	e004      	b.n	8006bc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006bb8:	bf00      	nop
 8006bba:	e002      	b.n	8006bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006bbc:	bf00      	nop
 8006bbe:	e000      	b.n	8006bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006bc0:	bf00      	nop
  }
}
 8006bc2:	37e8      	adds	r7, #232	@ 0xe8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc80      	pop	{r7}
 8006bd8:	4770      	bx	lr

08006bda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr

08006bec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr

08006bfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b086      	sub	sp, #24
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0e:	e03b      	b.n	8006c88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c16:	d037      	beq.n	8006c88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c18:	f7fa ff96 	bl	8001b48 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	6a3a      	ldr	r2, [r7, #32]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d302      	bcc.n	8006c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e03a      	b.n	8006ca8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d023      	beq.n	8006c88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b80      	cmp	r3, #128	@ 0x80
 8006c44:	d020      	beq.n	8006c88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b40      	cmp	r3, #64	@ 0x40
 8006c4a:	d01d      	beq.n	8006c88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d116      	bne.n	8006c88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f856 	bl	8006d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2208      	movs	r2, #8
 8006c7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e00f      	b.n	8006ca8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	4013      	ands	r3, r2
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	bf0c      	ite	eq
 8006c98:	2301      	moveq	r3, #1
 8006c9a:	2300      	movne	r3, #0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d0b4      	beq.n	8006c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	88fa      	ldrh	r2, [r7, #6]
 8006cc8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	88fa      	ldrh	r2, [r7, #6]
 8006cce:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2222      	movs	r2, #34	@ 0x22
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cf4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0201 	orr.w	r2, r2, #1
 8006d04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0220 	orr.w	r2, r2, #32
 8006d14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr

08006d22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b095      	sub	sp, #84	@ 0x54
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	330c      	adds	r3, #12
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	330c      	adds	r3, #12
 8006d48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e5      	bne.n	8006d2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3314      	adds	r3, #20
 8006d64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	f023 0301 	bic.w	r3, r3, #1
 8006d74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3314      	adds	r3, #20
 8006d7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e5      	bne.n	8006d5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d119      	bne.n	8006dce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	330c      	adds	r3, #12
 8006da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f023 0310 	bic.w	r3, r3, #16
 8006db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dba:	61ba      	str	r2, [r7, #24]
 8006dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6979      	ldr	r1, [r7, #20]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e5      	bne.n	8006d9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ddc:	bf00      	nop
 8006dde:	3754      	adds	r7, #84	@ 0x54
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr

08006de6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff fef3 	bl	8006bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b21      	cmp	r3, #33	@ 0x21
 8006e20:	d13e      	bne.n	8006ea0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2a:	d114      	bne.n	8006e56 <UART_Transmit_IT+0x48>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d110      	bne.n	8006e56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	1c9a      	adds	r2, r3, #2
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	621a      	str	r2, [r3, #32]
 8006e54:	e008      	b.n	8006e68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	1c59      	adds	r1, r3, #1
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6211      	str	r1, [r2, #32]
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	4619      	mov	r1, r3
 8006e76:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10f      	bne.n	8006e9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e000      	b.n	8006ea2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ea0:	2302      	movs	r3, #2
  }
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr

08006eac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ec2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff fe7b 	bl	8006bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08c      	sub	sp, #48	@ 0x30
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b22      	cmp	r3, #34	@ 0x22
 8006eee:	f040 80ae 	bne.w	800704e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006efa:	d117      	bne.n	8006f2c <UART_Receive_IT+0x50>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d113      	bne.n	8006f2c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	1c9a      	adds	r2, r3, #2
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f2a:	e026      	b.n	8006f7a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f3e:	d007      	beq.n	8006f50 <UART_Receive_IT+0x74>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <UART_Receive_IT+0x82>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	e008      	b.n	8006f70 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4619      	mov	r1, r3
 8006f88:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d15d      	bne.n	800704a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0220 	bic.w	r2, r2, #32
 8006f9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695a      	ldr	r2, [r3, #20]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0201 	bic.w	r2, r2, #1
 8006fbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d135      	bne.n	8007040 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	330c      	adds	r3, #12
 8006fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f023 0310 	bic.w	r3, r3, #16
 8006ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	330c      	adds	r3, #12
 8006ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffa:	623a      	str	r2, [r7, #32]
 8006ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	69f9      	ldr	r1, [r7, #28]
 8007000:	6a3a      	ldr	r2, [r7, #32]
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	61bb      	str	r3, [r7, #24]
   return(result);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e5      	bne.n	8006fda <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0310 	and.w	r3, r3, #16
 8007018:	2b10      	cmp	r3, #16
 800701a:	d10a      	bne.n	8007032 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fa f8b3 	bl	80011a4 <HAL_UARTEx_RxEventCallback>
 800703e:	e002      	b.n	8007046 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff fdca 	bl	8006bda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	e002      	b.n	8007050 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	e000      	b.n	8007050 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800704e:	2302      	movs	r3, #2
  }
}
 8007050:	4618      	mov	r0, r3
 8007052:	3730      	adds	r7, #48	@ 0x30
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007092:	f023 030c 	bic.w	r3, r3, #12
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6812      	ldr	r2, [r2, #0]
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	430b      	orrs	r3, r1
 800709e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a2c      	ldr	r2, [pc, #176]	@ (800716c <UART_SetConfig+0x114>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d103      	bne.n	80070c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80070c0:	f7ff f986 	bl	80063d0 <HAL_RCC_GetPCLK2Freq>
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	e002      	b.n	80070ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80070c8:	f7ff f96e 	bl	80063a8 <HAL_RCC_GetPCLK1Freq>
 80070cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009a      	lsls	r2, r3, #2
 80070d8:	441a      	add	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e4:	4a22      	ldr	r2, [pc, #136]	@ (8007170 <UART_SetConfig+0x118>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	0119      	lsls	r1, r3, #4
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	009a      	lsls	r2, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	fbb2 f2f3 	udiv	r2, r2, r3
 8007104:	4b1a      	ldr	r3, [pc, #104]	@ (8007170 <UART_SetConfig+0x118>)
 8007106:	fba3 0302 	umull	r0, r3, r3, r2
 800710a:	095b      	lsrs	r3, r3, #5
 800710c:	2064      	movs	r0, #100	@ 0x64
 800710e:	fb00 f303 	mul.w	r3, r0, r3
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	3332      	adds	r3, #50	@ 0x32
 8007118:	4a15      	ldr	r2, [pc, #84]	@ (8007170 <UART_SetConfig+0x118>)
 800711a:	fba2 2303 	umull	r2, r3, r2, r3
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007124:	4419      	add	r1, r3
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	009a      	lsls	r2, r3, #2
 8007130:	441a      	add	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	fbb2 f2f3 	udiv	r2, r2, r3
 800713c:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <UART_SetConfig+0x118>)
 800713e:	fba3 0302 	umull	r0, r3, r3, r2
 8007142:	095b      	lsrs	r3, r3, #5
 8007144:	2064      	movs	r0, #100	@ 0x64
 8007146:	fb00 f303 	mul.w	r3, r0, r3
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	3332      	adds	r3, #50	@ 0x32
 8007150:	4a07      	ldr	r2, [pc, #28]	@ (8007170 <UART_SetConfig+0x118>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	095b      	lsrs	r3, r3, #5
 8007158:	f003 020f 	and.w	r2, r3, #15
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	440a      	add	r2, r1
 8007162:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	40013800 	.word	0x40013800
 8007170:	51eb851f 	.word	0x51eb851f

08007174 <Screen_begin>:
    [CONDITION_MINUTE]   = {.String_Name = "MINUTE", .String_Unit = "min"},
    [CONDITION_IC_NUM]   = {.String_Name = "No.of ICs", .String_Unit = "pcs"},
    [CONDITION_PASS]     = {.String_Name = "PASSWORD",.String_Unit = ""}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 800717c:	4a3a      	ldr	r2, [pc, #232]	@ (8007268 <Screen_begin+0xf4>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 8007182:	4839      	ldr	r0, [pc, #228]	@ (8007268 <Screen_begin+0xf4>)
 8007184:	f003 f802 	bl	800a18c <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 8007188:	4938      	ldr	r1, [pc, #224]	@ (800726c <Screen_begin+0xf8>)
 800718a:	4837      	ldr	r0, [pc, #220]	@ (8007268 <Screen_begin+0xf4>)
 800718c:	f008 ff1d 	bl	800ffca <DWIN_SetCallback>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 8007190:	4b35      	ldr	r3, [pc, #212]	@ (8007268 <Screen_begin+0xf4>)
 8007192:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007196:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 8007198:	4b33      	ldr	r3, [pc, #204]	@ (8007268 <Screen_begin+0xf4>)
 800719a:	2200      	movs	r2, #0
 800719c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;
 80071a0:	4b31      	ldr	r3, [pc, #196]	@ (8007268 <Screen_begin+0xf4>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    _Screen.pre_page = 106;
 80071a8:	4b2f      	ldr	r3, [pc, #188]	@ (8007268 <Screen_begin+0xf4>)
 80071aa:	226a      	movs	r2, #106	@ 0x6a
 80071ac:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    _Screen.Ishome = true;
 80071b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007268 <Screen_begin+0xf4>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 25b8 	strb.w	r2, [r3, #1464]	@ 0x5b8

    Screen_Init_Variable(&_Screen);
 80071b8:	482b      	ldr	r0, [pc, #172]	@ (8007268 <Screen_begin+0xf4>)
 80071ba:	f003 facb 	bl	800a754 <Screen_Init_Variable>

    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST1].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST1]));
 80071be:	4b2a      	ldr	r3, [pc, #168]	@ (8007268 <Screen_begin+0xf4>)
 80071c0:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80071c4:	492a      	ldr	r1, [pc, #168]	@ (8007270 <Screen_begin+0xfc>)
 80071c6:	4618      	mov	r0, r3
 80071c8:	f003 ffd2 	bl	800b170 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST2].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST2]));
 80071cc:	4b26      	ldr	r3, [pc, #152]	@ (8007268 <Screen_begin+0xf4>)
 80071ce:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 80071d2:	4928      	ldr	r1, [pc, #160]	@ (8007274 <Screen_begin+0x100>)
 80071d4:	4618      	mov	r0, r3
 80071d6:	f003 ffcb 	bl	800b170 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST3].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST3]));
 80071da:	4b23      	ldr	r3, [pc, #140]	@ (8007268 <Screen_begin+0xf4>)
 80071dc:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 80071e0:	4925      	ldr	r1, [pc, #148]	@ (8007278 <Screen_begin+0x104>)
 80071e2:	4618      	mov	r0, r3
 80071e4:	f003 ffc4 	bl	800b170 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST4].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST4]));
 80071e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007268 <Screen_begin+0xf4>)
 80071ea:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80071ee:	4923      	ldr	r1, [pc, #140]	@ (800727c <Screen_begin+0x108>)
 80071f0:	4618      	mov	r0, r3
 80071f2:	f003 ffbd 	bl	800b170 <get_data_testing_ic>

    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x11D0,2);
 80071f6:	2202      	movs	r2, #2
 80071f8:	f241 11d0 	movw	r1, #4560	@ 0x11d0
 80071fc:	481a      	ldr	r0, [pc, #104]	@ (8007268 <Screen_begin+0xf4>)
 80071fe:	f008 fdd6 	bl	800fdae <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x13D0,2);
 8007202:	2202      	movs	r2, #2
 8007204:	f241 31d0 	movw	r1, #5072	@ 0x13d0
 8007208:	4817      	ldr	r0, [pc, #92]	@ (8007268 <Screen_begin+0xf4>)
 800720a:	f008 fdd0 	bl	800fdae <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x15D0,2);
 800720e:	2202      	movs	r2, #2
 8007210:	f241 51d0 	movw	r1, #5584	@ 0x15d0
 8007214:	4814      	ldr	r0, [pc, #80]	@ (8007268 <Screen_begin+0xf4>)
 8007216:	f008 fdca 	bl	800fdae <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x17D0,2);
 800721a:	2202      	movs	r2, #2
 800721c:	f241 71d0 	movw	r1, #6096	@ 0x17d0
 8007220:	4811      	ldr	r0, [pc, #68]	@ (8007268 <Screen_begin+0xf4>)
 8007222:	f008 fdc4 	bl	800fdae <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x19D0,2);
 8007226:	2202      	movs	r2, #2
 8007228:	f641 11d0 	movw	r1, #6608	@ 0x19d0
 800722c:	480e      	ldr	r0, [pc, #56]	@ (8007268 <Screen_begin+0xf4>)
 800722e:	f008 fdbe 	bl	800fdae <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1BD0,2);
 8007232:	2202      	movs	r2, #2
 8007234:	f641 31d0 	movw	r1, #7120	@ 0x1bd0
 8007238:	480b      	ldr	r0, [pc, #44]	@ (8007268 <Screen_begin+0xf4>)
 800723a:	f008 fdb8 	bl	800fdae <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1DD0,2);
 800723e:	2202      	movs	r2, #2
 8007240:	f641 51d0 	movw	r1, #7632	@ 0x1dd0
 8007244:	4808      	ldr	r0, [pc, #32]	@ (8007268 <Screen_begin+0xf4>)
 8007246:	f008 fdb2 	bl	800fdae <DWIN_SetWidth_Basic_line>

    Screen_ShowData_Mainpage(&_Screen,PROGRAM_TEST1);
 800724a:	2100      	movs	r1, #0
 800724c:	4806      	ldr	r0, [pc, #24]	@ (8007268 <Screen_begin+0xf4>)
 800724e:	f003 fe4b 	bl	800aee8 <Screen_ShowData_Mainpage>
    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
 8007252:	2165      	movs	r1, #101	@ 0x65
 8007254:	4804      	ldr	r0, [pc, #16]	@ (8007268 <Screen_begin+0xf4>)
 8007256:	f008 fa46 	bl	800f6e6 <DWIN_SetPage>
    printf("Init screen done\n");
 800725a:	4809      	ldr	r0, [pc, #36]	@ (8007280 <Screen_begin+0x10c>)
 800725c:	f00b fde4 	bl	8012e28 <puts>
}
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	20000e6c 	.word	0x20000e6c
 800726c:	080072a1 	.word	0x080072a1
 8007270:	200012d4 	.word	0x200012d4
 8007274:	20001304 	.word	0x20001304
 8007278:	20001334 	.word	0x20001334
 800727c:	20001364 	.word	0x20001364
 8007280:	080159d0 	.word	0x080159d0

08007284 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4803      	ldr	r0, [pc, #12]	@ (800729c <Screen_RX_data+0x18>)
 8007290:	f008 fea8 	bl	800ffe4 <DWIN_Listen>
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20000e6c 	.word	0x20000e6c

080072a0 <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	80fb      	strh	r3, [r7, #6]
 80072aa:	460b      	mov	r3, r1
 80072ac:	717b      	strb	r3, [r7, #5]
 80072ae:	4613      	mov	r3, r2
 80072b0:	713b      	strb	r3, [r7, #4]
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d01b      	beq.n	80072f4 <Screen_RX_Callback+0x54>
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 80072bc:	88fb      	ldrh	r3, [r7, #6]
 80072be:	2207      	movs	r2, #7
 80072c0:	490e      	ldr	r1, [pc, #56]	@ (80072fc <Screen_RX_Callback+0x5c>)
 80072c2:	4618      	mov	r0, r3
 80072c4:	f002 ff26 	bl	800a114 <Index_VP>
 80072c8:	4603      	mov	r3, r0
 80072ca:	723b      	strb	r3, [r7, #8]
        screen_event.action = lowByte;
 80072cc:	797b      	ldrb	r3, [r7, #5]
 80072ce:	727b      	strb	r3, [r7, #9]
        screen_event.data = highByte;
 80072d0:	793b      	ldrb	r3, [r7, #4]
 80072d2:	72bb      	strb	r3, [r7, #10]
        screen_event.keyvalue = (uint16_t)((highByte<<8) | (lowByte&0xFF));
 80072d4:	793b      	ldrb	r3, [r7, #4]
 80072d6:	b21b      	sxth	r3, r3
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	b21a      	sxth	r2, r3
 80072dc:	797b      	ldrb	r3, [r7, #5]
 80072de:	b21b      	sxth	r3, r3
 80072e0:	4313      	orrs	r3, r2
 80072e2:	b21b      	sxth	r3, r3
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	81bb      	strh	r3, [r7, #12]

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
 80072e8:	f107 0308 	add.w	r3, r7, #8
 80072ec:	4619      	mov	r1, r3
 80072ee:	4804      	ldr	r0, [pc, #16]	@ (8007300 <Screen_RX_Callback+0x60>)
 80072f0:	f003 f818 	bl	800a324 <Screen_excute_RX_function>
    }
}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	2000000c 	.word	0x2000000c
 8007300:	20000e6c 	.word	0x20000e6c

08007304 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
    
    screen_obj->Ishome = false;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 25b8 	strb.w	r2, [r3, #1464]	@ 0x5b8
    screen_obj->pre_page = DWINPAGE_SETTING;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2274      	movs	r2, #116	@ 0x74
 800731a:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 800731e:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f008 fa76 	bl	800f814 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password);
 8007328:	f249 5180 	movw	r1, #38272	@ 0x9580
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f008 fa71 	bl	800f814 <DWIN_ClearText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 8007332:	2174      	movs	r1, #116	@ 0x74
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f008 f9d6 	bl	800f6e6 <DWIN_SetPage>
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	6039      	str	r1, [r7, #0]
    // uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    // UNUSED(current_program);
    // Show data

    // Switch page
    screen_obj->Ishome = true;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 25b8 	strb.w	r2, [r3, #1464]	@ 0x5b8
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,PROGRAM_TEST1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800735a:	4619      	mov	r1, r3
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007362:	fb01 f303 	mul.w	r3, r1, r3
 8007366:	4413      	add	r3, r2
 8007368:	3349      	adds	r3, #73	@ 0x49
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f005 fb21 	bl	800c9b8 <show_main_page>
    // DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
}   
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <Navigation_return>:

void Navigation_return(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007380:	b5b0      	push	{r4, r5, r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af02      	add	r7, sp, #8
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
    if (screen_obj->screen_error == SCREEN_ERROR_CONNECT) {
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 393f 	ldrb.w	r3, [r3, #2367]	@ 0x93f
 8007390:	2b00      	cmp	r3, #0
 8007392:	d163      	bne.n	800745c <Navigation_return+0xdc>
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800739a:	4619      	mov	r1, r3
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	3349      	adds	r3, #73	@ 0x49
 80073aa:	2265      	movs	r2, #101	@ 0x65
 80073ac:	701a      	strb	r2, [r3, #0]
        off_testing(screen_obj);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f004 fe64 	bl	800c07c <off_testing>

        uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 80073b4:	2008      	movs	r0, #8
 80073b6:	f009 fe47 	bl	8011048 <malloc>
 80073ba:	4603      	mov	r3, r0
 80073bc:	60fb      	str	r3, [r7, #12]
        data_send_esp32->data = (char *)malloc(50);
 80073be:	68fc      	ldr	r4, [r7, #12]
 80073c0:	2032      	movs	r0, #50	@ 0x32
 80073c2:	f009 fe41 	bl	8011048 <malloc>
 80073c6:	4603      	mov	r3, r0
 80073c8:	6023      	str	r3, [r4, #0]
        sprintf(data_send_esp32->data,"d%d,disconected,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80073d4:	1c59      	adds	r1, r3, #1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80073dc:	461c      	mov	r4, r3
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80073e4:	fb04 f303 	mul.w	r3, r4, r3
 80073e8:	4413      	add	r3, r2
 80073ea:	334b      	adds	r3, #75	@ 0x4b
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	461c      	mov	r4, r3
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4623      	mov	r3, r4
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	4423      	add	r3, r4
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8007400:	681c      	ldr	r4, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007408:	461d      	mov	r5, r3
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007410:	fb05 f303 	mul.w	r3, r5, r3
 8007414:	4413      	add	r3, r2
 8007416:	334b      	adds	r3, #75	@ 0x4b
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	461d      	mov	r5, r3
        sprintf(data_send_esp32->data,"d%d,disconected,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	462b      	mov	r3, r5
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	442b      	add	r3, r5
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	4413      	add	r3, r2
 8007428:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	4623      	mov	r3, r4
 8007432:	460a      	mov	r2, r1
 8007434:	4914      	ldr	r1, [pc, #80]	@ (8007488 <Navigation_return+0x108>)
 8007436:	f00b fd35 	bl	8012ea4 <siprintf>
        data_send_esp32->len = strlen(data_send_esp32->data);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fc      	ldr	r4, [r7, #12]
 8007440:	4618      	mov	r0, r3
 8007442:	f7f8 fe8f 	bl	8000164 <strlen>
 8007446:	4603      	mov	r3, r0
 8007448:	6063      	str	r3, [r4, #4]
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800744a:	4b10      	ldr	r3, [pc, #64]	@ (800748c <Navigation_return+0x10c>)
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	f107 020c 	add.w	r2, r7, #12
 8007452:	2308      	movs	r3, #8
 8007454:	2100      	movs	r1, #0
 8007456:	f009 fbc5 	bl	8010be4 <OS_task_post_event>
        DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
        // show_main_page(screen_obj,DWINPAGE_MAIN,screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index);
    } else {
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page);
    }
}
 800745a:	e010      	b.n	800747e <Navigation_return+0xfe>
    } else if (screen_obj->screen_error == SCREEN_ERROR_SHUTDOWN) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 393f 	ldrb.w	r3, [r3, #2367]	@ 0x93f
 8007462:	2b01      	cmp	r3, #1
 8007464:	d104      	bne.n	8007470 <Navigation_return+0xf0>
        DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 8007466:	2174      	movs	r1, #116	@ 0x74
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f008 f93c 	bl	800f6e6 <DWIN_SetPage>
}
 800746e:	e006      	b.n	800747e <Navigation_return+0xfe>
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 35b4 	ldrb.w	r3, [r3, #1460]	@ 0x5b4
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f008 f934 	bl	800f6e6 <DWIN_SetPage>
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bdb0      	pop	{r4, r5, r7, pc}
 8007486:	bf00      	nop
 8007488:	080159e4 	.word	0x080159e4
 800748c:	08016810 	.word	0x08016810

08007490 <Navigation_setting_program>:

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]

    // Switch page
    // DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
    /* Get the setting page */
    screen_obj->page_setting = DWINPAGE_SETTING_PROGRAM;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	226b      	movs	r2, #107	@ 0x6b
 800749e:	f883 25b7 	strb.w	r2, [r3, #1463]	@ 0x5b7
    screen_obj->pre_page = DWINPAGE_PASSWORD;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	226e      	movs	r2, #110	@ 0x6e
 80074a6:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    // Switch page password 
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password,"",strlen(""));
 80074aa:	2300      	movs	r3, #0
 80074ac:	4a09      	ldr	r2, [pc, #36]	@ (80074d4 <Navigation_setting_program+0x44>)
 80074ae:	f249 5160 	movw	r1, #38240	@ 0x9560
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f008 f93e 	bl	800f734 <DWIN_SetText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password);
 80074b8:	f249 5180 	movw	r1, #38272	@ 0x9580
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f008 f9a9 	bl	800f814 <DWIN_ClearText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 80074c2:	216e      	movs	r1, #110	@ 0x6e
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f008 f90e 	bl	800f6e6 <DWIN_SetPage>
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	080159fc 	.word	0x080159fc

080074d8 <Navigation_setting_time>:

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
    
    screen_obj->pre_page = DWINPAGE_SETTING_TIME;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2276      	movs	r2, #118	@ 0x76
 80074e6:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Hour);
 80074ea:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f008 f990 	bl	800f814 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Minute);
 80074f4:	f249 0110 	movw	r1, #36880	@ 0x9010
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f008 f98b 	bl	800f814 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Day);
 80074fe:	f249 0120 	movw	r1, #36896	@ 0x9020
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f008 f986 	bl	800f814 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Month);
 8007508:	f249 0130 	movw	r1, #36912	@ 0x9030
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f008 f981 	bl	800f814 <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Year);
 8007512:	f249 0140 	movw	r1, #36928	@ 0x9040
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f008 f97c 	bl	800f814 <DWIN_ClearText>
    memset(screen_obj->Time_setting.Day,0,3);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8007522:	2203      	movs	r2, #3
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f00b fdc6 	bl	80130b8 <memset>
    memset(screen_obj->Time_setting.Minute,0,3);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f203 53ac 	addw	r3, r3, #1452	@ 0x5ac
 8007532:	2203      	movs	r2, #3
 8007534:	2100      	movs	r1, #0
 8007536:	4618      	mov	r0, r3
 8007538:	f00b fdbe 	bl	80130b8 <memset>
    memset(screen_obj->Time_setting.Month,0,3);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f203 53a3 	addw	r3, r3, #1443	@ 0x5a3
 8007542:	2203      	movs	r2, #3
 8007544:	2100      	movs	r1, #0
 8007546:	4618      	mov	r0, r3
 8007548:	f00b fdb6 	bl	80130b8 <memset>
    memset(screen_obj->Time_setting.Year,0,3);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f203 53a6 	addw	r3, r3, #1446	@ 0x5a6
 8007552:	2203      	movs	r2, #3
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f00b fdae 	bl	80130b8 <memset>
    memset(screen_obj->Time_setting.Hour,0,3);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f203 53a9 	addw	r3, r3, #1449	@ 0x5a9
 8007562:	2203      	movs	r2, #3
 8007564:	2100      	movs	r1, #0
 8007566:	4618      	mov	r0, r3
 8007568:	f00b fda6 	bl	80130b8 <memset>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_setting_time);
 800756c:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f008 f94f 	bl	800f814 <DWIN_ClearText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
 8007576:	2176      	movs	r1, #118	@ 0x76
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f008 f8b4 	bl	800f6e6 <DWIN_SetPage>
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <Navigation_setting_wifi>:

void Navigation_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007586:	b590      	push	{r4, r7, lr}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
    screen_obj->pre_page = DWINPAGE_SETTING_WIFI;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2275      	movs	r2, #117	@ 0x75
 8007594:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    /* show data */
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Wifi,screen_obj->Wifi_setting.Name_Wifi,strlen(screen_obj->Wifi_setting.Name_Wifi));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f503 64a5 	add.w	r4, r3, #1320	@ 0x528
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f503 63a5 	add.w	r3, r3, #1320	@ 0x528
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7f8 fddd 	bl	8000164 <strlen>
 80075aa:	4603      	mov	r3, r0
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	4622      	mov	r2, r4
 80075b0:	f249 51a0 	movw	r1, #38304	@ 0x95a0
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f008 f8bd 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password_Wifi,screen_obj->Wifi_setting.Password_Wifi,strlen(screen_obj->Wifi_setting.Password_Wifi));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f203 5464 	addw	r4, r3, #1380	@ 0x564
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7f8 fdcc 	bl	8000164 <strlen>
 80075cc:	4603      	mov	r3, r0
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	4622      	mov	r2, r4
 80075d2:	f249 51d0 	movw	r1, #38352	@ 0x95d0
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f008 f8ac 	bl	800f734 <DWIN_SetText>

    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 80075dc:	2175      	movs	r1, #117	@ 0x75
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f008 f881 	bl	800f6e6 <DWIN_SetPage>
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd90      	pop	{r4, r7, pc}

080075ec <Navigation_modify_program>:

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
    screen_obj->pre_page = DWINPAGE_MODIFY_PROGRAM;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	226c      	movs	r2, #108	@ 0x6c
 80075fa:	f883 25b4 	strb.w	r2, [r3, #1460]	@ 0x5b4
    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8007604:	4619      	mov	r1, r3
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	440b      	add	r3, r1
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	4413      	add	r3, r2
 8007612:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8007616:	681c      	ldr	r4, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800761e:	4619      	mov	r1, r3
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	440b      	add	r3, r1
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	4413      	add	r3, r2
 800762c:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4618      	mov	r0, r3
 8007634:	f7f8 fd96 	bl	8000164 <strlen>
 8007638:	4603      	mov	r3, r0
 800763a:	b29b      	uxth	r3, r3
 800763c:	4622      	mov	r2, r4
 800763e:	f44f 4115 	mov.w	r1, #38144	@ 0x9500
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f008 f876 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800764e:	4619      	mov	r1, r3
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	440b      	add	r3, r1
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	4413      	add	r3, r2
 800765c:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8007660:	681c      	ldr	r4, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8007668:	4619      	mov	r1, r3
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	440b      	add	r3, r1
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	4413      	add	r3, r2
 8007676:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f7f8 fd71 	bl	8000164 <strlen>
 8007682:	4603      	mov	r3, r0
 8007684:	b29b      	uxth	r3, r3
 8007686:	4622      	mov	r2, r4
 8007688:	f249 5120 	movw	r1, #38176	@ 0x9520
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f008 f851 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8007698:	4619      	mov	r1, r3
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	440b      	add	r3, r1
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80076aa:	681c      	ldr	r4, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80076b2:	4619      	mov	r1, r3
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	440b      	add	r3, r1
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	4413      	add	r3, r2
 80076c0:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7f8 fd4c 	bl	8000164 <strlen>
 80076cc:	4603      	mov	r3, r0
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	4622      	mov	r2, r4
 80076d2:	f249 5140 	movw	r1, #38208	@ 0x9540
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f008 f82c 	bl	800f734 <DWIN_SetText>
    
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_modify_program);
 80076dc:	f24a 0150 	movw	r1, #41040	@ 0xa050
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f008 f897 	bl	800f814 <DWIN_ClearText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 80076e6:	216c      	movs	r1, #108	@ 0x6c
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f007 fffc 	bl	800f6e6 <DWIN_SetPage>
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd90      	pop	{r4, r7, pc}

080076f6 <Navigation_detail_mainpage>:

void Navigation_detail_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007706:	4619      	mov	r1, r3
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	4413      	add	r3, r2
 8007714:	336c      	adds	r3, #108	@ 0x6c
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b30      	cmp	r3, #48	@ 0x30
 800771a:	d11d      	bne.n	8007758 <Navigation_detail_mainpage+0x62>
        /* change main page */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_DETAIL;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007722:	4619      	mov	r1, r3
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800772a:	fb01 f303 	mul.w	r3, r1, r3
 800772e:	4413      	add	r3, r2
 8007730:	3349      	adds	r3, #73	@ 0x49
 8007732:	2266      	movs	r2, #102	@ 0x66
 8007734:	701a      	strb	r2, [r3, #0]
        // Switch page
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800773c:	4619      	mov	r1, r3
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007744:	fb01 f303 	mul.w	r3, r1, r3
 8007748:	4413      	add	r3, r2
 800774a:	3349      	adds	r3, #73	@ 0x49
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2200      	movs	r2, #0
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f005 f930 	bl	800c9b8 <show_main_page>
    }
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <Navigation_graph_mainpage>:

void Navigation_graph_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
    /* change main page */
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_PULSE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007770:	4619      	mov	r1, r3
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007778:	fb01 f303 	mul.w	r3, r1, r3
 800777c:	4413      	add	r3, r2
 800777e:	3349      	adds	r3, #73	@ 0x49
 8007780:	2267      	movs	r2, #103	@ 0x67
 8007782:	701a      	strb	r2, [r3, #0]
    // Switch page
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800778a:	4619      	mov	r1, r3
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007792:	fb01 f303 	mul.w	r3, r1, r3
 8007796:	4413      	add	r3, r2
 8007798:	3349      	adds	r3, #73	@ 0x49
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	2200      	movs	r2, #0
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f005 f909 	bl	800c9b8 <show_main_page>
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <Navigation_Change_MainPage>:

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	789b      	ldrb	r3, [r3, #2]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d111      	bne.n	80077e4 <Navigation_Change_MainPage+0x36>
        screen_obj->curr_device++;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80077c6:	3301      	adds	r3, #1
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f883 25b5 	strb.w	r2, [r3, #1461]	@ 0x5b5
        if (screen_obj->curr_device == MAX_DEVICE) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d119      	bne.n	800780e <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 25b5 	strb.w	r2, [r3, #1461]	@ 0x5b5
 80077e2:	e014      	b.n	800780e <Navigation_Change_MainPage+0x60>
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	789b      	ldrb	r3, [r3, #2]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d110      	bne.n	800780e <Navigation_Change_MainPage+0x60>
        screen_obj->curr_device--;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f883 25b5 	strb.w	r2, [r3, #1461]	@ 0x5b5
        if (screen_obj->curr_device == 255 ) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007802:	2bff      	cmp	r3, #255	@ 0xff
 8007804:	d103      	bne.n	800780e <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_3;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2202      	movs	r2, #2
 800780a:	f883 25b5 	strb.w	r2, [r3, #1461]	@ 0x5b5
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007814:	4619      	mov	r1, r3
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800781c:	fb01 f303 	mul.w	r3, r1, r3
 8007820:	4413      	add	r3, r2
 8007822:	334b      	adds	r3, #75	@ 0x4b
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	73fb      	strb	r3, [r7, #15]

    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,curr_program);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800782e:	4619      	mov	r1, r3
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007836:	fb01 f303 	mul.w	r3, r1, r3
 800783a:	4413      	add	r3, r2
 800783c:	3349      	adds	r3, #73	@ 0x49
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	7bfa      	ldrb	r2, [r7, #15]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f005 f8b7 	bl	800c9b8 <show_main_page>
}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <Navigation_Change_CaseTest>:

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007854:	b580      	push	{r7, lr}
 8007856:	b08e      	sub	sp, #56	@ 0x38
 8007858:	af02      	add	r7, sp, #8
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007864:	4619      	mov	r1, r3
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800786c:	fb01 f303 	mul.w	r3, r1, r3
 8007870:	4413      	add	r3, r2
 8007872:	334b      	adds	r3, #75	@ 0x4b
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	4619      	mov	r1, r3
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	440b      	add	r3, r1
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	4413      	add	r3, r2
 8007884:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007894:	4619      	mov	r1, r3
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	334b      	adds	r3, #75	@ 0x4b
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 80078aa:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4613      	mov	r3, r2
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	4413      	add	r3, r2
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	440b      	add	r3, r1
 80078ba:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	789b      	ldrb	r3, [r3, #2]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d124      	bne.n	8007916 <Navigation_Change_CaseTest+0xc2>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80078d2:	4619      	mov	r1, r3
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80078da:	fb01 f303 	mul.w	r3, r1, r3
 80078de:	4413      	add	r3, r2
 80078e0:	3348      	adds	r3, #72	@ 0x48
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d042      	beq.n	800796e <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 80078f4:	fb03 f202 	mul.w	r2, r3, r2
 80078f8:	440a      	add	r2, r1
 80078fa:	3248      	adds	r2, #72	@ 0x48
 80078fc:	7812      	ldrb	r2, [r2, #0]
 80078fe:	3a01      	subs	r2, #1
 8007900:	b2d0      	uxtb	r0, r2
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8007908:	fb01 f303 	mul.w	r3, r1, r3
 800790c:	4413      	add	r3, r2
 800790e:	3348      	adds	r3, #72	@ 0x48
 8007910:	4602      	mov	r2, r0
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	e02b      	b.n	800796e <Navigation_Change_CaseTest+0x11a>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	789b      	ldrb	r3, [r3, #2]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d127      	bne.n	800796e <Navigation_Change_CaseTest+0x11a>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007924:	4619      	mov	r1, r3
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800792c:	fb01 f303 	mul.w	r3, r1, r3
 8007930:	4413      	add	r3, r2
 8007932:	3348      	adds	r3, #72	@ 0x48
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800793c:	3b01      	subs	r3, #1
 800793e:	429a      	cmp	r2, r3
 8007940:	da15      	bge.n	800796e <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 800794e:	fb03 f202 	mul.w	r2, r3, r2
 8007952:	440a      	add	r2, r1
 8007954:	3248      	adds	r2, #72	@ 0x48
 8007956:	7812      	ldrb	r2, [r2, #0]
 8007958:	3201      	adds	r2, #1
 800795a:	b2d0      	uxtb	r0, r2
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8007962:	fb01 f303 	mul.w	r3, r1, r3
 8007966:	4413      	add	r3, r2
 8007968:	3348      	adds	r3, #72	@ 0x48
 800796a:	4602      	mov	r2, r0
 800796c:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Show data */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007974:	4619      	mov	r1, r3
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800797c:	fb01 f303 	mul.w	r3, r1, r3
 8007980:	4413      	add	r3, r2
 8007982:	3348      	adds	r3, #72	@ 0x48
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800798c:	f107 000c 	add.w	r0, r7, #12
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	4613      	mov	r3, r2
 8007994:	4a32      	ldr	r2, [pc, #200]	@ (8007a60 <Navigation_Change_CaseTest+0x20c>)
 8007996:	211e      	movs	r1, #30
 8007998:	f00b fa4e 	bl	8012e38 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800799c:	f107 030c 	add.w	r3, r7, #12
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7f8 fbdf 	bl	8000164 <strlen>
 80079a6:	4603      	mov	r3, r0
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f107 020c 	add.w	r2, r7, #12
 80079ae:	f249 3180 	movw	r1, #37760	@ 0x9380
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f007 febe 	bl	800f734 <DWIN_SetText>
    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case] == '0') {
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80079be:	4619      	mov	r1, r3
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80079c6:	fb01 f303 	mul.w	r3, r1, r3
 80079ca:	4413      	add	r3, r2
 80079cc:	3370      	adds	r3, #112	@ 0x70
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	f892 25b5 	ldrb.w	r2, [r2, #1461]	@ 0x5b5
 80079d6:	4610      	mov	r0, r2
 80079d8:	6879      	ldr	r1, [r7, #4]
 80079da:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 80079de:	fb00 f202 	mul.w	r2, r0, r2
 80079e2:	440a      	add	r2, r1
 80079e4:	3248      	adds	r2, #72	@ 0x48
 80079e6:	7812      	ldrb	r2, [r2, #0]
 80079e8:	4413      	add	r3, r2
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b30      	cmp	r3, #48	@ 0x30
 80079ee:	d107      	bne.n	8007a00 <Navigation_Change_CaseTest+0x1ac>
        DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0xF800);
 80079f0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80079f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f007 ff1d 	bl	800f838 <DWIN_SetColorText>
 80079fe:	e006      	b.n	8007a0e <Navigation_Change_CaseTest+0x1ba>
    } else {
        DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0x01ED);
 8007a00:	f240 12ed 	movw	r2, #493	@ 0x1ed
 8007a04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f007 ff15 	bl	800f838 <DWIN_SetColorText>
    }
    // DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
    DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * num_pin]),num_pin);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007a14:	4619      	mov	r1, r3
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007a1c:	fb01 f303 	mul.w	r3, r1, r3
 8007a20:	4413      	add	r3, r2
 8007a22:	3364      	adds	r3, #100	@ 0x64
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	f892 25b5 	ldrb.w	r2, [r2, #1461]	@ 0x5b5
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007a34:	fb00 f202 	mul.w	r2, r0, r2
 8007a38:	440a      	add	r2, r1
 8007a3a:	3248      	adds	r2, #72	@ 0x48
 8007a3c:	7812      	ldrb	r2, [r2, #0]
 8007a3e:	4611      	mov	r1, r2
 8007a40:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007a44:	fb01 f202 	mul.w	r2, r1, r2
 8007a48:	441a      	add	r2, r3
 8007a4a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007a4e:	f244 1150 	movw	r1, #16720	@ 0x4150
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f007 ff4e 	bl	800f8f4 <DWIN_SetArray_Icon>
}
 8007a58:	bf00      	nop
 8007a5a:	3730      	adds	r7, #48	@ 0x30
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	08015a00 	.word	0x08015a00

08007a64 <Navigation_Change_CasePulse>:

void Navigation_Change_CasePulse(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
    if (screen_event->data == DATA_PREV_CASE) {
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	789b      	ldrb	r3, [r3, #2]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d124      	bne.n	8007ac0 <Navigation_Change_CasePulse+0x5c>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007a84:	fb01 f303 	mul.w	r3, r1, r3
 8007a88:	4413      	add	r3, r2
 8007a8a:	3348      	adds	r3, #72	@ 0x48
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d03e      	beq.n	8007b10 <Navigation_Change_CasePulse+0xac>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007a9e:	fb03 f202 	mul.w	r2, r3, r2
 8007aa2:	440a      	add	r2, r1
 8007aa4:	3248      	adds	r2, #72	@ 0x48
 8007aa6:	7812      	ldrb	r2, [r2, #0]
 8007aa8:	3a01      	subs	r2, #1
 8007aaa:	b2d0      	uxtb	r0, r2
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8007ab2:	fb01 f303 	mul.w	r3, r1, r3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	3348      	adds	r3, #72	@ 0x48
 8007aba:	4602      	mov	r2, r0
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	e027      	b.n	8007b10 <Navigation_Change_CasePulse+0xac>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	789b      	ldrb	r3, [r3, #2]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d123      	bne.n	8007b10 <Navigation_Change_CasePulse+0xac>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < 1) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007ace:	4619      	mov	r1, r3
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007ad6:	fb01 f303 	mul.w	r3, r1, r3
 8007ada:	4413      	add	r3, r2
 8007adc:	3348      	adds	r3, #72	@ 0x48
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d115      	bne.n	8007b10 <Navigation_Change_CasePulse+0xac>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007af0:	fb03 f202 	mul.w	r2, r3, r2
 8007af4:	440a      	add	r2, r1
 8007af6:	3248      	adds	r2, #72	@ 0x48
 8007af8:	7812      	ldrb	r2, [r2, #0]
 8007afa:	3201      	adds	r2, #1
 8007afc:	b2d0      	uxtb	r0, r2
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	4413      	add	r3, r2
 8007b0a:	3348      	adds	r3, #72	@ 0x48
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	701a      	strb	r2, [r3, #0]
        }
    }

    show_pulse(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_case);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007b16:	4619      	mov	r1, r3
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	4413      	add	r3, r2
 8007b24:	3348      	adds	r3, #72	@ 0x48
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f004 fb60 	bl	800c1f0 <show_pulse>
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <Navigation_Finish_Review>:

void Navigation_Finish_Review(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8007b38:	b5b0      	push	{r4, r5, r7, lr}
 8007b3a:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8007b3e:	af02      	add	r7, sp, #8
 8007b40:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007b44:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007b48:	6018      	str	r0, [r3, #0]
 8007b4a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007b4e:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8007b52:	6019      	str	r1, [r3, #0]
    uint8_t curr_num_ic = ++screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
 8007b54:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007b58:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007b62:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8007b66:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8007b6a:	6811      	ldr	r1, [r2, #0]
 8007b6c:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007b70:	fb03 f202 	mul.w	r2, r3, r2
 8007b74:	440a      	add	r2, r1
 8007b76:	324a      	adds	r2, #74	@ 0x4a
 8007b78:	7812      	ldrb	r2, [r2, #0]
 8007b7a:	3201      	adds	r2, #1
 8007b7c:	b2d0      	uxtb	r0, r2
 8007b7e:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8007b82:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8007b86:	6811      	ldr	r1, [r2, #0]
 8007b88:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8007b8c:	fb03 f202 	mul.w	r2, r3, r2
 8007b90:	440a      	add	r2, r1
 8007b92:	324a      	adds	r2, #74	@ 0x4a
 8007b94:	4601      	mov	r1, r0
 8007b96:	7011      	strb	r1, [r2, #0]
 8007b98:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8007b9c:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 8007ba0:	6812      	ldr	r2, [r2, #0]
 8007ba2:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	4413      	add	r3, r2
 8007bac:	334a      	adds	r3, #74	@ 0x4a
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8007bb4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007bb8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007bc8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007bd2:	fb01 f303 	mul.w	r3, r1, r3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	334b      	adds	r3, #75	@ 0x4b
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
 8007be0:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8007be4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007be8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007bec:	6819      	ldr	r1, [r3, #0]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	4413      	add	r3, r2
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	440b      	add	r3, r1
 8007bf8:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f009 fa1d 	bl	801103e <atoi>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 8007c0a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c0e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c1e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007c28:	fb01 f303 	mul.w	r3, r1, r3
 8007c2c:	4413      	add	r3, r2
 8007c2e:	3349      	adds	r3, #73	@ 0x49
 8007c30:	2265      	movs	r2, #101	@ 0x65
 8007c32:	701a      	strb	r2, [r3, #0]
    /* show number of testing ic */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d / %d",curr_num_ic,num_ic);
 8007c34:	f897 2227 	ldrb.w	r2, [r7, #551]	@ 0x227
 8007c38:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8007c3c:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	4613      	mov	r3, r2
 8007c44:	4ac2      	ldr	r2, [pc, #776]	@ (8007f50 <Navigation_Finish_Review+0x418>)
 8007c46:	211e      	movs	r1, #30
 8007c48:	f00b f8f6 	bl	8012e38 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
 8007c4c:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7f8 fa87 	bl	8000164 <strlen>
 8007c56:	4603      	mov	r3, r0
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f507 7201 	add.w	r2, r7, #516	@ 0x204
 8007c5e:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 8007c62:	f5a1 7009 	sub.w	r0, r1, #548	@ 0x224
 8007c66:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 8007c6a:	6800      	ldr	r0, [r0, #0]
 8007c6c:	f007 fd62 	bl	800f734 <DWIN_SetText>
    if (curr_num_ic < num_ic) {
 8007c70:	f897 2227 	ldrb.w	r2, [r7, #551]	@ 0x227
 8007c74:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	f080 8249 	bcs.w	8008110 <Navigation_Finish_Review+0x5d8>
        /* switch page */
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
 8007c7e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c82:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007c92:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	3349      	adds	r3, #73	@ 0x49
 8007ca4:	7819      	ldrb	r1, [r3, #0]
 8007ca6:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8007caa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007cae:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	f004 fe80 	bl	800c9b8 <show_main_page>

        /* free array using in have new data test */
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
 8007cb8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007cbc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ccc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007cd6:	fb01 f303 	mul.w	r3, r1, r3
 8007cda:	4413      	add	r3, r2
 8007cdc:	3374      	adds	r3, #116	@ 0x74
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02b      	beq.n	8007d3c <Navigation_Finish_Review+0x204>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
 8007ce4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ce8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007cf8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007d02:	fb01 f303 	mul.w	r3, r1, r3
 8007d06:	4413      	add	r3, r2
 8007d08:	3374      	adds	r3, #116	@ 0x74
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f009 f9a3 	bl	8011058 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = NULL;
 8007d12:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d16:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007d20:	4619      	mov	r1, r3
 8007d22:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d26:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007d30:	fb01 f303 	mul.w	r3, r1, r3
 8007d34:	4413      	add	r3, r2
 8007d36:	3374      	adds	r3, #116	@ 0x74
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
 8007d3c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d40:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d50:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007d5a:	fb01 f303 	mul.w	r3, r1, r3
 8007d5e:	4413      	add	r3, r2
 8007d60:	335c      	adds	r3, #92	@ 0x5c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d02b      	beq.n	8007dc0 <Navigation_Finish_Review+0x288>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
 8007d68:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d6c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007d76:	4619      	mov	r1, r3
 8007d78:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d7c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007d86:	fb01 f303 	mul.w	r3, r1, r3
 8007d8a:	4413      	add	r3, r2
 8007d8c:	335c      	adds	r3, #92	@ 0x5c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f009 f961 	bl	8011058 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = NULL;
 8007d96:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007d9a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007da4:	4619      	mov	r1, r3
 8007da6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007daa:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007db4:	fb01 f303 	mul.w	r3, r1, r3
 8007db8:	4413      	add	r3, r2
 8007dba:	335c      	adds	r3, #92	@ 0x5c
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
        }
        
        if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
 8007dc0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007dc4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007dce:	4619      	mov	r1, r3
 8007dd0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007dd4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007dde:	fb01 f303 	mul.w	r3, r1, r3
 8007de2:	4413      	add	r3, r2
 8007de4:	3364      	adds	r3, #100	@ 0x64
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d02b      	beq.n	8007e44 <Navigation_Finish_Review+0x30c>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
 8007dec:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007df0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e00:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007e0a:	fb01 f303 	mul.w	r3, r1, r3
 8007e0e:	4413      	add	r3, r2
 8007e10:	3364      	adds	r3, #100	@ 0x64
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f009 f91f 	bl	8011058 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].icon_result = NULL;
 8007e1a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e1e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e2e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007e38:	fb01 f303 	mul.w	r3, r1, r3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3364      	adds	r3, #100	@ 0x64
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
 8007e44:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e48:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007e52:	4619      	mov	r1, r3
 8007e54:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e58:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007e62:	fb01 f303 	mul.w	r3, r1, r3
 8007e66:	4413      	add	r3, r2
 8007e68:	3368      	adds	r3, #104	@ 0x68
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d02b      	beq.n	8007ec8 <Navigation_Finish_Review+0x390>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
 8007e70:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e74:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007e7e:	4619      	mov	r1, r3
 8007e80:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007e84:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007e8e:	fb01 f303 	mul.w	r3, r1, r3
 8007e92:	4413      	add	r3, r2
 8007e94:	3368      	adds	r3, #104	@ 0x68
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f009 f8dd 	bl	8011058 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit = NULL;
 8007e9e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ea2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007eac:	4619      	mov	r1, r3
 8007eae:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007eb2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007ebc:	fb01 f303 	mul.w	r3, r1, r3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	3368      	adds	r3, #104	@ 0x68
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
 8007ec8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ecc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007edc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007ee6:	fb01 f303 	mul.w	r3, r1, r3
 8007eea:	4413      	add	r3, r2
 8007eec:	3370      	adds	r3, #112	@ 0x70
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d02f      	beq.n	8007f54 <Navigation_Finish_Review+0x41c>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
 8007ef4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007ef8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007f02:	4619      	mov	r1, r3
 8007f04:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f08:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007f12:	fb01 f303 	mul.w	r3, r1, r3
 8007f16:	4413      	add	r3, r2
 8007f18:	3370      	adds	r3, #112	@ 0x70
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f009 f89b 	bl	8011058 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case = NULL;
 8007f22:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f26:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007f30:	4619      	mov	r1, r3
 8007f32:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f36:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007f40:	fb01 f303 	mul.w	r3, r1, r3
 8007f44:	4413      	add	r3, r2
 8007f46:	3370      	adds	r3, #112	@ 0x70
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	e002      	b.n	8007f54 <Navigation_Finish_Review+0x41c>
 8007f4e:	bf00      	nop
 8007f50:	08015a0c 	.word	0x08015a0c
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
 8007f54:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f58:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007f62:	4619      	mov	r1, r3
 8007f64:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f68:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007f72:	fb01 f303 	mul.w	r3, r1, r3
 8007f76:	4413      	add	r3, r2
 8007f78:	3360      	adds	r3, #96	@ 0x60
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d02b      	beq.n	8007fd8 <Navigation_Finish_Review+0x4a0>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 8007f80:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f84:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007f8e:	4619      	mov	r1, r3
 8007f90:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f94:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007f9e:	fb01 f303 	mul.w	r3, r1, r3
 8007fa2:	4413      	add	r3, r2
 8007fa4:	3360      	adds	r3, #96	@ 0x60
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f009 f855 	bl	8011058 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_result = NULL;
 8007fae:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007fb2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007fc2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8007fcc:	fb01 f303 	mul.w	r3, r1, r3
 8007fd0:	4413      	add	r3, r2
 8007fd2:	3360      	adds	r3, #96	@ 0x60
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]
        }

        /* check error */
        managerTX_CAN_t *check_TX_CAN = malloc(sizeof(managerTX_CAN_t));
 8007fd8:	2008      	movs	r0, #8
 8007fda:	f009 f835 	bl	8011048 <malloc>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
        check_TX_CAN->ID = CAN_iso[screen_obj->curr_device].send_arbitration_id;
 8007fe4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007fe8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007ff8:	49bb      	ldr	r1, [pc, #748]	@ (80082e8 <Navigation_Finish_Review+0x7b0>)
 8007ffa:	0192      	lsls	r2, r2, #6
 8007ffc:	440a      	add	r2, r1
 8007ffe:	6812      	ldr	r2, [r2, #0]
 8008000:	601a      	str	r2, [r3, #0]
        check_TX_CAN->TX_Done = false;
 8008002:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8008006:	2200      	movs	r2, #0
 8008008:	711a      	strb	r2, [r3, #4]
        OS_task_post_event(AO_task_can_bus,START_TIMEOUT_TX,(uint8_t *)&check_TX_CAN,sizeof(managerTX_CAN_t));
 800800a:	4bb8      	ldr	r3, [pc, #736]	@ (80082ec <Navigation_Finish_Review+0x7b4>)
 800800c:	6818      	ldr	r0, [r3, #0]
 800800e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8008012:	2308      	movs	r3, #8
 8008014:	2102      	movs	r1, #2
 8008016:	f008 fde5 	bl	8010be4 <OS_task_post_event>

        /* send data to tester */
        uint8_t can_send_buf[500];
        can_send_buf[0] = screen_obj->Program_Testx[index_program].num_pin;
 800801a:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800801e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008022:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008026:	6819      	ldr	r1, [r3, #0]
 8008028:	4613      	mov	r3, r2
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	4413      	add	r3, r2
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	440b      	add	r3, r1
 8008032:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800803c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8008040:	701a      	strb	r2, [r3, #0]
        can_send_buf[1] = '\0';
 8008042:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008046:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800804a:	2200      	movs	r2, #0
 800804c:	705a      	strb	r2, [r3, #1]
        can_send_buf[2] = screen_obj->Program_Testx[index_program].num_case;
 800804e:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8008052:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008056:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800805a:	6819      	ldr	r1, [r3, #0]
 800805c:	4613      	mov	r3, r2
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	4413      	add	r3, r2
 8008062:	011b      	lsls	r3, r3, #4
 8008064:	440b      	add	r3, r1
 8008066:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008070:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8008074:	709a      	strb	r2, [r3, #2]
        can_send_buf[3] = '\0';
 8008076:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800807a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800807e:	2200      	movs	r2, #0
 8008080:	70da      	strb	r2, [r3, #3]
        memcpy(&can_send_buf[4],screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
 8008082:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8008086:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800808a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800808e:	6819      	ldr	r1, [r3, #0]
 8008090:	4613      	mov	r3, r2
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	4413      	add	r3, r2
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	440b      	add	r3, r1
 800809a:	f503 6392 	add.w	r3, r3, #1168	@ 0x490
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 80080a4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080a8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080ac:	6819      	ldr	r1, [r3, #0]
 80080ae:	4613      	mov	r3, r2
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	4413      	add	r3, r2
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	440b      	add	r3, r1
 80080b8:	f203 4394 	addw	r3, r3, #1172	@ 0x494
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	f107 0308 	add.w	r3, r7, #8
 80080c4:	3304      	adds	r3, #4
 80080c6:	4601      	mov	r1, r0
 80080c8:	4618      	mov	r0, r3
 80080ca:	f00b f94a 	bl	8013362 <memcpy>
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len + 4);
 80080ce:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080d2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80080dc:	019b      	lsls	r3, r3, #6
 80080de:	4a82      	ldr	r2, [pc, #520]	@ (80082e8 <Navigation_Finish_Review+0x7b0>)
 80080e0:	1898      	adds	r0, r3, r2
 80080e2:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 80080e6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80080ea:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80080ee:	6819      	ldr	r1, [r3, #0]
 80080f0:	4613      	mov	r3, r2
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	4413      	add	r3, r2
 80080f6:	011b      	lsls	r3, r3, #4
 80080f8:	440b      	add	r3, r1
 80080fa:	f203 4394 	addw	r3, r3, #1172	@ 0x494
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	3304      	adds	r3, #4
 8008102:	b29a      	uxth	r2, r3
 8008104:	f107 0308 	add.w	r3, r7, #8
 8008108:	4619      	mov	r1, r3
 800810a:	f008 fa05 	bl	8010518 <isotp_send>
        }
        data_send_esp32->len = strlen(data_send_esp32->data);
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));

    }   
}
 800810e:	e0e6      	b.n	80082de <Navigation_Finish_Review+0x7a6>
        off_testing(screen_obj);
 8008110:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008114:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	f003 ffaf 	bl	800c07c <off_testing>
        uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800811e:	2008      	movs	r0, #8
 8008120:	f008 ff92 	bl	8011048 <malloc>
 8008124:	4603      	mov	r3, r0
 8008126:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
        data_send_esp32->data = (char *)malloc(50);
 800812a:	f8d7 41fc 	ldr.w	r4, [r7, #508]	@ 0x1fc
 800812e:	2032      	movs	r0, #50	@ 0x32
 8008130:	f008 ff8a 	bl	8011048 <malloc>
 8008134:	4603      	mov	r3, r0
 8008136:	6023      	str	r3, [r4, #0]
        if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 8008138:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800813c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008146:	4619      	mov	r1, r3
 8008148:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800814c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008156:	fb01 f303 	mul.w	r3, r1, r3
 800815a:	4413      	add	r3, r2
 800815c:	334c      	adds	r3, #76	@ 0x4c
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d055      	beq.n	8008210 <Navigation_Finish_Review+0x6d8>
            sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 8008164:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008168:	6818      	ldr	r0, [r3, #0]
 800816a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800816e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008178:	1c59      	adds	r1, r3, #1
 800817a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800817e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008188:	461c      	mov	r4, r3
 800818a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800818e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008198:	fb04 f303 	mul.w	r3, r4, r3
 800819c:	4413      	add	r3, r2
 800819e:	334b      	adds	r3, #75	@ 0x4b
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	461c      	mov	r4, r3
 80081a4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081a8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	4623      	mov	r3, r4
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	4423      	add	r3, r4
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80081bc:	681c      	ldr	r4, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 80081be:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081c2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80081cc:	461d      	mov	r5, r3
 80081ce:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081d2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80081dc:	fb05 f303 	mul.w	r3, r5, r3
 80081e0:	4413      	add	r3, r2
 80081e2:	334b      	adds	r3, #75	@ 0x4b
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	461d      	mov	r5, r3
            sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 80081e8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80081ec:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	462b      	mov	r3, r5
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	442b      	add	r3, r5
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	4623      	mov	r3, r4
 8008206:	460a      	mov	r2, r1
 8008208:	4939      	ldr	r1, [pc, #228]	@ (80082f0 <Navigation_Finish_Review+0x7b8>)
 800820a:	f00a fe4b 	bl	8012ea4 <siprintf>
 800820e:	e054      	b.n	80082ba <Navigation_Finish_Review+0x782>
            sprintf(data_send_esp32->data,"d%d,stop,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 8008210:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800821a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008224:	1c59      	adds	r1, r3, #1
 8008226:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800822a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008234:	461c      	mov	r4, r3
 8008236:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800823a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008244:	fb04 f303 	mul.w	r3, r4, r3
 8008248:	4413      	add	r3, r2
 800824a:	334b      	adds	r3, #75	@ 0x4b
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	461c      	mov	r4, r3
 8008250:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008254:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4623      	mov	r3, r4
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	4423      	add	r3, r4
 8008260:	011b      	lsls	r3, r3, #4
 8008262:	4413      	add	r3, r2
 8008264:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008268:	681c      	ldr	r4, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800826a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800826e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008278:	461d      	mov	r5, r3
 800827a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800827e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008288:	fb05 f303 	mul.w	r3, r5, r3
 800828c:	4413      	add	r3, r2
 800828e:	334b      	adds	r3, #75	@ 0x4b
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	461d      	mov	r5, r3
            sprintf(data_send_esp32->data,"d%d,stop,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 8008294:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8008298:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	462b      	mov	r3, r5
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	442b      	add	r3, r5
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	4623      	mov	r3, r4
 80082b2:	460a      	mov	r2, r1
 80082b4:	490f      	ldr	r1, [pc, #60]	@ (80082f4 <Navigation_Finish_Review+0x7bc>)
 80082b6:	f00a fdf5 	bl	8012ea4 <siprintf>
        data_send_esp32->len = strlen(data_send_esp32->data);
 80082ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8d7 41fc 	ldr.w	r4, [r7, #508]	@ 0x1fc
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7f7 ff4d 	bl	8000164 <strlen>
 80082ca:	4603      	mov	r3, r0
 80082cc:	6063      	str	r3, [r4, #4]
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 80082ce:	4b0a      	ldr	r3, [pc, #40]	@ (80082f8 <Navigation_Finish_Review+0x7c0>)
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 80082d6:	2308      	movs	r3, #8
 80082d8:	2100      	movs	r1, #0
 80082da:	f008 fc83 	bl	8010be4 <OS_task_post_event>
}
 80082de:	bf00      	nop
 80082e0:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bdb0      	pop	{r4, r5, r7, pc}
 80082e8:	2000049c 	.word	0x2000049c
 80082ec:	080160dc 	.word	0x080160dc
 80082f0:	08015a14 	.word	0x08015a14
 80082f4:	08015a28 	.word	0x08015a28
 80082f8:	08016810 	.word	0x08016810

080082fc <Navigation_Information>:

void Navigation_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_INFORMATION);
 8008306:	216f      	movs	r1, #111	@ 0x6f
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f007 f9ec 	bl	800f6e6 <DWIN_SetPage>
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <Navigation_Logging>:

void Navigation_Logging(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008318:	b590      	push	{r4, r7, lr}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
    /* show data */
    screen_obj->data_log.reading_type = READING_NEXT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 293d 	strb.w	r2, [r3, #2365]	@ 0x93d
    screen_obj->data_log.is_first = true;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 293e 	strb.w	r2, [r3, #2366]	@ 0x93e
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 8008332:	2008      	movs	r0, #8
 8008334:	f008 fe88 	bl	8011048 <malloc>
 8008338:	4603      	mov	r3, r0
 800833a:	60fb      	str	r3, [r7, #12]
    data_send_esp32->data = (char *)malloc(50);
 800833c:	68fc      	ldr	r4, [r7, #12]
 800833e:	2032      	movs	r0, #50	@ 0x32
 8008340:	f008 fe82 	bl	8011048 <malloc>
 8008344:	4603      	mov	r3, r0
 8008346:	6023      	str	r3, [r4, #0]
    strcpy(data_send_esp32->data,"rfirst\n");
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	490c      	ldr	r1, [pc, #48]	@ (8008380 <Navigation_Logging+0x68>)
 800834e:	461a      	mov	r2, r3
 8008350:	460b      	mov	r3, r1
 8008352:	cb03      	ldmia	r3!, {r0, r1}
 8008354:	6010      	str	r0, [r2, #0]
 8008356:	6051      	str	r1, [r2, #4]
    data_send_esp32->len = strlen("rfirst")+1;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2207      	movs	r2, #7
 800835c:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800835e:	4b09      	ldr	r3, [pc, #36]	@ (8008384 <Navigation_Logging+0x6c>)
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	f107 020c 	add.w	r2, r7, #12
 8008366:	2308      	movs	r3, #8
 8008368:	2100      	movs	r1, #0
 800836a:	f008 fc3b 	bl	8010be4 <OS_task_post_event>

    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_LOGGING);
 800836e:	2170      	movs	r1, #112	@ 0x70
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f007 f9b8 	bl	800f6e6 <DWIN_SetPage>
}
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	bd90      	pop	{r4, r7, pc}
 800837e:	bf00      	nop
 8008380:	08015a38 	.word	0x08015a38
 8008384:	08016810 	.word	0x08016810

08008388 <Navigation_Change_DataLog>:

void Navigation_Change_DataLog(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
    if (screen_event->data == DATA_LOG_PREV) {
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	789b      	ldrb	r3, [r3, #2]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d136      	bne.n	8008408 <Navigation_Change_DataLog+0x80>
        strcpy(_Screen.data_log.next_data, _Screen.data_log.cur_data);    
 800839a:	493a      	ldr	r1, [pc, #232]	@ (8008484 <Navigation_Change_DataLog+0xfc>)
 800839c:	483a      	ldr	r0, [pc, #232]	@ (8008488 <Navigation_Change_DataLog+0x100>)
 800839e:	f00a ffca 	bl	8013336 <strcpy>
        strcpy(_Screen.data_log.cur_data, _Screen.data_log.pre_data);
 80083a2:	493a      	ldr	r1, [pc, #232]	@ (800848c <Navigation_Change_DataLog+0x104>)
 80083a4:	4837      	ldr	r0, [pc, #220]	@ (8008484 <Navigation_Change_DataLog+0xfc>)
 80083a6:	f00a ffc6 	bl	8013336 <strcpy>
        DWIN_SetText((Dwin_t *)&_Screen,VP_Data_Log,_Screen.data_log.cur_data,strlen(_Screen.data_log.cur_data));
 80083aa:	4836      	ldr	r0, [pc, #216]	@ (8008484 <Navigation_Change_DataLog+0xfc>)
 80083ac:	f7f7 feda 	bl	8000164 <strlen>
 80083b0:	4603      	mov	r3, r0
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	4a33      	ldr	r2, [pc, #204]	@ (8008484 <Navigation_Change_DataLog+0xfc>)
 80083b6:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 80083ba:	4835      	ldr	r0, [pc, #212]	@ (8008490 <Navigation_Change_DataLog+0x108>)
 80083bc:	f007 f9ba 	bl	800f734 <DWIN_SetText>

        screen_obj->data_log.reading_type = READING_PREV;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 293d 	strb.w	r2, [r3, #2365]	@ 0x93d
        uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 80083c8:	2008      	movs	r0, #8
 80083ca:	f008 fe3d 	bl	8011048 <malloc>
 80083ce:	4603      	mov	r3, r0
 80083d0:	60fb      	str	r3, [r7, #12]
        data_send_esp32->data = (char *)malloc(50);
 80083d2:	68fc      	ldr	r4, [r7, #12]
 80083d4:	2032      	movs	r0, #50	@ 0x32
 80083d6:	f008 fe37 	bl	8011048 <malloc>
 80083da:	4603      	mov	r3, r0
 80083dc:	6023      	str	r3, [r4, #0]
        strcpy(data_send_esp32->data,"rprev\n");
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a2c      	ldr	r2, [pc, #176]	@ (8008494 <Navigation_Change_DataLog+0x10c>)
 80083e4:	6810      	ldr	r0, [r2, #0]
 80083e6:	6018      	str	r0, [r3, #0]
 80083e8:	8891      	ldrh	r1, [r2, #4]
 80083ea:	7992      	ldrb	r2, [r2, #6]
 80083ec:	8099      	strh	r1, [r3, #4]
 80083ee:	719a      	strb	r2, [r3, #6]
        data_send_esp32->len = strlen("rprev") + 1;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2206      	movs	r2, #6
 80083f4:	605a      	str	r2, [r3, #4]
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));        
 80083f6:	4b28      	ldr	r3, [pc, #160]	@ (8008498 <Navigation_Change_DataLog+0x110>)
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	f107 020c 	add.w	r2, r7, #12
 80083fe:	2308      	movs	r3, #8
 8008400:	2100      	movs	r1, #0
 8008402:	f008 fbef 	bl	8010be4 <OS_task_post_event>
        data_send_esp32->data = (char *)malloc(50);
        strcpy(data_send_esp32->data,"rnext\n");
        data_send_esp32->len = strlen("rnext") +1;
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
    }
}
 8008406:	e039      	b.n	800847c <Navigation_Change_DataLog+0xf4>
    } else if (screen_event->data == DATA_LOG_NEXT) {   
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	789b      	ldrb	r3, [r3, #2]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d135      	bne.n	800847c <Navigation_Change_DataLog+0xf4>
        strcpy(_Screen.data_log.pre_data, _Screen.data_log.cur_data);     
 8008410:	491c      	ldr	r1, [pc, #112]	@ (8008484 <Navigation_Change_DataLog+0xfc>)
 8008412:	481e      	ldr	r0, [pc, #120]	@ (800848c <Navigation_Change_DataLog+0x104>)
 8008414:	f00a ff8f 	bl	8013336 <strcpy>
        strcpy(_Screen.data_log.cur_data, _Screen.data_log.next_data); 
 8008418:	491b      	ldr	r1, [pc, #108]	@ (8008488 <Navigation_Change_DataLog+0x100>)
 800841a:	481a      	ldr	r0, [pc, #104]	@ (8008484 <Navigation_Change_DataLog+0xfc>)
 800841c:	f00a ff8b 	bl	8013336 <strcpy>
        DWIN_SetText((Dwin_t *)&_Screen,VP_Data_Log,_Screen.data_log.cur_data,strlen(_Screen.data_log.cur_data));
 8008420:	4818      	ldr	r0, [pc, #96]	@ (8008484 <Navigation_Change_DataLog+0xfc>)
 8008422:	f7f7 fe9f 	bl	8000164 <strlen>
 8008426:	4603      	mov	r3, r0
 8008428:	b29b      	uxth	r3, r3
 800842a:	4a16      	ldr	r2, [pc, #88]	@ (8008484 <Navigation_Change_DataLog+0xfc>)
 800842c:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 8008430:	4817      	ldr	r0, [pc, #92]	@ (8008490 <Navigation_Change_DataLog+0x108>)
 8008432:	f007 f97f 	bl	800f734 <DWIN_SetText>
        screen_obj->data_log.reading_type = READING_NEXT;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 293d 	strb.w	r2, [r3, #2365]	@ 0x93d
        uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800843e:	2008      	movs	r0, #8
 8008440:	f008 fe02 	bl	8011048 <malloc>
 8008444:	4603      	mov	r3, r0
 8008446:	60bb      	str	r3, [r7, #8]
        data_send_esp32->data = (char *)malloc(50);
 8008448:	68bc      	ldr	r4, [r7, #8]
 800844a:	2032      	movs	r0, #50	@ 0x32
 800844c:	f008 fdfc 	bl	8011048 <malloc>
 8008450:	4603      	mov	r3, r0
 8008452:	6023      	str	r3, [r4, #0]
        strcpy(data_send_esp32->data,"rnext\n");
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a10      	ldr	r2, [pc, #64]	@ (800849c <Navigation_Change_DataLog+0x114>)
 800845a:	6810      	ldr	r0, [r2, #0]
 800845c:	6018      	str	r0, [r3, #0]
 800845e:	8891      	ldrh	r1, [r2, #4]
 8008460:	7992      	ldrb	r2, [r2, #6]
 8008462:	8099      	strh	r1, [r3, #4]
 8008464:	719a      	strb	r2, [r3, #6]
        data_send_esp32->len = strlen("rnext") +1;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2206      	movs	r2, #6
 800846a:	605a      	str	r2, [r3, #4]
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800846c:	4b0a      	ldr	r3, [pc, #40]	@ (8008498 <Navigation_Change_DataLog+0x110>)
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	f107 0208 	add.w	r2, r7, #8
 8008474:	2308      	movs	r3, #8
 8008476:	2100      	movs	r1, #0
 8008478:	f008 fbb4 	bl	8010be4 <OS_task_post_event>
}
 800847c:	bf00      	nop
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	bd90      	pop	{r4, r7, pc}
 8008484:	20001551 	.word	0x20001551
 8008488:	2000167d 	.word	0x2000167d
 800848c:	20001425 	.word	0x20001425
 8008490:	20000e6c 	.word	0x20000e6c
 8008494:	08015a40 	.word	0x08015a40
 8008498:	08016810 	.word	0x08016810
 800849c:	08015a48 	.word	0x08015a48

080084a0 <Navigation_Shutdown>:

void Navigation_Shutdown(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
    if (screen_obj->IC_Testerx[DEVICE_1].state == false &&
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80084b0:	f083 0301 	eor.w	r3, r3, #1
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d012      	beq.n	80084e0 <Navigation_Shutdown+0x40>
    screen_obj->IC_Testerx[DEVICE_2].state == false &&
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 31ac 	ldrb.w	r3, [r3, #428]	@ 0x1ac
 80084c0:	f083 0301 	eor.w	r3, r3, #1
 80084c4:	b2db      	uxtb	r3, r3
    if (screen_obj->IC_Testerx[DEVICE_1].state == false &&
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <Navigation_Shutdown+0x40>
    screen_obj->IC_Testerx[DEVICE_3].state == false ) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 330c 	ldrb.w	r3, [r3, #780]	@ 0x30c
 80084d0:	f083 0301 	eor.w	r3, r3, #1
 80084d4:	b2db      	uxtb	r3, r3
    screen_obj->IC_Testerx[DEVICE_2].state == false &&
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <Navigation_Shutdown+0x40>
        shutdown();
 80084da:	f005 fba7 	bl	800dc2c <shutdown>
    screen_obj->IC_Testerx[DEVICE_3].state == false ) {
 80084de:	e00f      	b.n	8008500 <Navigation_Shutdown+0x60>
    } else {
        screen_obj->screen_error = SCREEN_ERROR_SHUTDOWN;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 293f 	strb.w	r2, [r3, #2367]	@ 0x93f
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning,"Turn off all devices before shutdown",strlen("Turn off all devices before shutdown"));
 80084e8:	2324      	movs	r3, #36	@ 0x24
 80084ea:	4a07      	ldr	r2, [pc, #28]	@ (8008508 <Navigation_Shutdown+0x68>)
 80084ec:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f007 f91f 	bl	800f734 <DWIN_SetText>
        DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_WARNING);
 80084f6:	2177      	movs	r1, #119	@ 0x77
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f007 f8f4 	bl	800f6e6 <DWIN_SetPage>
    }
}
 80084fe:	bf00      	nop
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	08015a50 	.word	0x08015a50

0800850c <ON_OFF_Button>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800850c:	b5b0      	push	{r4, r5, r7, lr}
 800850e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8008512:	af02      	add	r7, sp, #8
 8008514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008518:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800851c:	6018      	str	r0, [r3, #0]
 800851e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008522:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8008526:	6019      	str	r1, [r3, #0]
    // do sth
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state == false) { // dang off -> bat dau 
 8008528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800852c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008536:	4619      	mov	r1, r3
 8008538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800853c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008546:	fb01 f303 	mul.w	r3, r1, r3
 800854a:	4413      	add	r3, r2
 800854c:	334c      	adds	r3, #76	@ 0x4c
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	f083 0301 	eor.w	r3, r3, #1
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d048      	beq.n	80085ec <ON_OFF_Button+0xe0>
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
 800855a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800855e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008568:	4619      	mov	r1, r3
 800856a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800856e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	4413      	add	r3, r2
 800857e:	334a      	adds	r3, #74	@ 0x4a
 8008580:	2200      	movs	r2, #0
 8008582:	701a      	strb	r2, [r3, #0]
        screen_obj->IC_Testerx[screen_obj->curr_device].state = true;
 8008584:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008588:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008592:	4619      	mov	r1, r3
 8008594:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008598:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80085a2:	fb01 f303 	mul.w	r3, r1, r3
 80085a6:	4413      	add	r3, r2
 80085a8:	334c      	adds	r3, #76	@ 0x4c
 80085aa:	2201      	movs	r2, #1
 80085ac:	701a      	strb	r2, [r3, #0]
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 80085ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80085bc:	4619      	mov	r1, r3
 80085be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80085cc:	fb01 f303 	mul.w	r3, r1, r3
 80085d0:	4413      	add	r3, r2
 80085d2:	334c      	adds	r3, #76	@ 0x4c
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	f007 f958 	bl	800f89a <DWIN_SetVariable_Icon>
 80085ea:	e01b      	b.n	8008624 <ON_OFF_Button+0x118>
        // }
        // data_send_esp32->len = strlen(data_send_esp32->data);
        // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
    } else { // dang on -> off
        /* luu vao sd, gui cho esp32 len app */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 80085ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80085f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80085fa:	4619      	mov	r1, r3
 80085fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008600:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800860a:	fb01 f303 	mul.w	r3, r1, r3
 800860e:	4413      	add	r3, r2
 8008610:	3349      	adds	r3, #73	@ 0x49
 8008612:	2265      	movs	r2, #101	@ 0x65
 8008614:	701a      	strb	r2, [r3, #0]
        off_testing(screen_obj);
 8008616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800861a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	f003 fd2c 	bl	800c07c <off_testing>
    }

    /* Send data to esp32 status device */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 8008624:	2008      	movs	r0, #8
 8008626:	f008 fd0f 	bl	8011048 <malloc>
 800862a:	4603      	mov	r3, r0
 800862c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
    data_send_esp32->data = (char *)malloc(50);
 8008630:	f8d7 4200 	ldr.w	r4, [r7, #512]	@ 0x200
 8008634:	2032      	movs	r0, #50	@ 0x32
 8008636:	f008 fd07 	bl	8011048 <malloc>
 800863a:	4603      	mov	r3, r0
 800863c:	6023      	str	r3, [r4, #0]
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800863e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008642:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800864c:	4619      	mov	r1, r3
 800864e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008652:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800865c:	fb01 f303 	mul.w	r3, r1, r3
 8008660:	4413      	add	r3, r2
 8008662:	334c      	adds	r3, #76	@ 0x4c
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d055      	beq.n	8008716 <ON_OFF_Button+0x20a>
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800866a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008674:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800867e:	1c59      	adds	r1, r3, #1
 8008680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008684:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800868e:	461c      	mov	r4, r3
 8008690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008694:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800869e:	fb04 f303 	mul.w	r3, r4, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	334b      	adds	r3, #75	@ 0x4b
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	461c      	mov	r4, r3
 80086aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80086ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	4623      	mov	r3, r4
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	4423      	add	r3, r4
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	4413      	add	r3, r2
 80086be:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80086c2:	681c      	ldr	r4, [r3, #0]
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 80086c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80086c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80086d2:	461d      	mov	r5, r3
 80086d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80086d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80086e2:	fb05 f303 	mul.w	r3, r5, r3
 80086e6:	4413      	add	r3, r2
 80086e8:	334b      	adds	r3, #75	@ 0x4b
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	461d      	mov	r5, r3
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 80086ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80086f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	462b      	mov	r3, r5
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	442b      	add	r3, r5
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	4413      	add	r3, r2
 8008702:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	4623      	mov	r3, r4
 800870c:	460a      	mov	r2, r1
 800870e:	499a      	ldr	r1, [pc, #616]	@ (8008978 <ON_OFF_Button+0x46c>)
 8008710:	f00a fbc8 	bl	8012ea4 <siprintf>
 8008714:	e054      	b.n	80087c0 <ON_OFF_Button+0x2b4>
    } else {
        sprintf(data_send_esp32->data,"d%d,stop,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 8008716:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800871a:	6818      	ldr	r0, [r3, #0]
 800871c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008720:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800872a:	1c59      	adds	r1, r3, #1
 800872c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008730:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800873a:	461c      	mov	r4, r3
 800873c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008740:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800874a:	fb04 f303 	mul.w	r3, r4, r3
 800874e:	4413      	add	r3, r2
 8008750:	334b      	adds	r3, #75	@ 0x4b
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	461c      	mov	r4, r3
 8008756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800875a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	4623      	mov	r3, r4
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	4423      	add	r3, r4
 8008766:	011b      	lsls	r3, r3, #4
 8008768:	4413      	add	r3, r2
 800876a:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800876e:	681c      	ldr	r4, [r3, #0]
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 8008770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008774:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800877e:	461d      	mov	r5, r3
 8008780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008784:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800878e:	fb05 f303 	mul.w	r3, r5, r3
 8008792:	4413      	add	r3, r2
 8008794:	334b      	adds	r3, #75	@ 0x4b
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	461d      	mov	r5, r3
        sprintf(data_send_esp32->data,"d%d,stop,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800879a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800879e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	462b      	mov	r3, r5
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	442b      	add	r3, r5
 80087aa:	011b      	lsls	r3, r3, #4
 80087ac:	4413      	add	r3, r2
 80087ae:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	4623      	mov	r3, r4
 80087b8:	460a      	mov	r2, r1
 80087ba:	4970      	ldr	r1, [pc, #448]	@ (800897c <ON_OFF_Button+0x470>)
 80087bc:	f00a fb72 	bl	8012ea4 <siprintf>
    }
    data_send_esp32->len = strlen(data_send_esp32->data);
 80087c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8d7 4200 	ldr.w	r4, [r7, #512]	@ 0x200
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7f7 fcca 	bl	8000164 <strlen>
 80087d0:	4603      	mov	r3, r0
 80087d2:	6063      	str	r3, [r4, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 80087d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008980 <ON_OFF_Button+0x474>)
 80087d6:	6818      	ldr	r0, [r3, #0]
 80087d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80087dc:	2308      	movs	r3, #8
 80087de:	2100      	movs	r1, #0
 80087e0:	f008 fa00 	bl	8010be4 <OS_task_post_event>
    
    /* Send data test */
    // screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 80087e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80087e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 80087f2:	4619      	mov	r1, r3
 80087f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80087f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008802:	fb01 f303 	mul.w	r3, r1, r3
 8008806:	4413      	add	r3, r2
 8008808:	334c      	adds	r3, #76	@ 0x4c
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 80ae 	beq.w	800896e <ON_OFF_Button+0x462>
        uint8_t can_send_buf[500];
        uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8008812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008816:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008820:	4619      	mov	r1, r3
 8008822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008826:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8008830:	fb01 f303 	mul.w	r3, r1, r3
 8008834:	4413      	add	r3, r2
 8008836:	334b      	adds	r3, #75	@ 0x4b
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        // uint8_t num_test_ic = screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
        // memcpy(can_send_buf,&num_test_ic,1);
        can_send_buf[0] = screen_obj->Program_Testx[index_program].num_pin;
 800883e:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 8008842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008846:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800884a:	6819      	ldr	r1, [r3, #0]
 800884c:	4613      	mov	r3, r2
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	4413      	add	r3, r2
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	440b      	add	r3, r1
 8008856:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800885a:	781a      	ldrb	r2, [r3, #0]
 800885c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008860:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8008864:	701a      	strb	r2, [r3, #0]
        can_send_buf[1] = '\0';
 8008866:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800886a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800886e:	2200      	movs	r2, #0
 8008870:	705a      	strb	r2, [r3, #1]
        can_send_buf[2] = screen_obj->Program_Testx[index_program].num_case;
 8008872:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 8008876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800887a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800887e:	6819      	ldr	r1, [r3, #0]
 8008880:	4613      	mov	r3, r2
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	4413      	add	r3, r2
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	440b      	add	r3, r1
 800888a:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800888e:	781a      	ldrb	r2, [r3, #0]
 8008890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008894:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8008898:	709a      	strb	r2, [r3, #2]
        can_send_buf[3] = '\0';
 800889a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800889e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80088a2:	2200      	movs	r2, #0
 80088a4:	70da      	strb	r2, [r3, #3]
        memcpy(&can_send_buf[4],screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
 80088a6:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 80088aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80088ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80088b2:	6819      	ldr	r1, [r3, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	4413      	add	r3, r2
 80088ba:	011b      	lsls	r3, r3, #4
 80088bc:	440b      	add	r3, r1
 80088be:	f503 6392 	add.w	r3, r3, #1168	@ 0x490
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 80088c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80088cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80088d0:	6819      	ldr	r1, [r3, #0]
 80088d2:	4613      	mov	r3, r2
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	4413      	add	r3, r2
 80088d8:	011b      	lsls	r3, r3, #4
 80088da:	440b      	add	r3, r1
 80088dc:	f203 4394 	addw	r3, r3, #1172	@ 0x494
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f107 0308 	add.w	r3, r7, #8
 80088e8:	3304      	adds	r3, #4
 80088ea:	4601      	mov	r1, r0
 80088ec:	4618      	mov	r0, r3
 80088ee:	f00a fd38 	bl	8013362 <memcpy>
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len + 4);
 80088f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80088f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 8008900:	019b      	lsls	r3, r3, #6
 8008902:	4a20      	ldr	r2, [pc, #128]	@ (8008984 <ON_OFF_Button+0x478>)
 8008904:	1898      	adds	r0, r3, r2
 8008906:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800890a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800890e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008912:	6819      	ldr	r1, [r3, #0]
 8008914:	4613      	mov	r3, r2
 8008916:	005b      	lsls	r3, r3, #1
 8008918:	4413      	add	r3, r2
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	440b      	add	r3, r1
 800891e:	f203 4394 	addw	r3, r3, #1172	@ 0x494
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	3304      	adds	r3, #4
 8008926:	b29a      	uxth	r2, r3
 8008928:	f107 0308 	add.w	r3, r7, #8
 800892c:	4619      	mov	r1, r3
 800892e:	f007 fdf3 	bl	8010518 <isotp_send>

        /* check error */
        managerTX_CAN_t *check_TX_CAN = malloc(sizeof(managerTX_CAN_t));
 8008932:	2008      	movs	r0, #8
 8008934:	f008 fb88 	bl	8011048 <malloc>
 8008938:	4603      	mov	r3, r0
 800893a:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
        check_TX_CAN->ID = (uint32_t)(0x471 + screen_obj->curr_device);
 800893e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008942:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800894c:	f203 4271 	addw	r2, r3, #1137	@ 0x471
 8008950:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008954:	601a      	str	r2, [r3, #0]
        check_TX_CAN->TX_Done = false;
 8008956:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800895a:	2200      	movs	r2, #0
 800895c:	711a      	strb	r2, [r3, #4]
        OS_task_post_event(AO_task_can_bus,START_TIMEOUT_TX,(uint8_t *)&check_TX_CAN,sizeof(managerTX_CAN_t));
 800895e:	4b0a      	ldr	r3, [pc, #40]	@ (8008988 <ON_OFF_Button+0x47c>)
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 8008966:	2308      	movs	r3, #8
 8008968:	2102      	movs	r1, #2
 800896a:	f008 f93b 	bl	8010be4 <OS_task_post_event>
    }
    
}
 800896e:	bf00      	nop
 8008970:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8008974:	46bd      	mov	sp, r7
 8008976:	bdb0      	pop	{r4, r5, r7, pc}
 8008978:	08015a14 	.word	0x08015a14
 800897c:	08015a28 	.word	0x08015a28
 8008980:	08016810 	.word	0x08016810
 8008984:	2000049c 	.word	0x2000049c
 8008988:	080160dc 	.word	0x080160dc

0800898c <select_running_program>:

void select_running_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
    uint8_t programID = screen_event->data; // Get new index program
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	789b      	ldrb	r3, [r3, #2]
 800899a:	73fb      	strb	r3, [r7, #15]

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f002 faa1 	bl	800aee8 <Screen_ShowData_Mainpage>
}
 80089a6:	bf00      	nop
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <select_modify_program>:

void select_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80089b0:	b5b0      	push	{r4, r5, r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
    // Get the index modify program 
    uint8_t index_program = screen_event->data;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	789b      	ldrb	r3, [r3, #2]
 80089be:	75fb      	strb	r3, [r7, #23]
    screen_obj->modify_program_index = index_program;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	7dfa      	ldrb	r2, [r7, #23]
 80089c4:	f883 25b6 	strb.w	r2, [r3, #1462]	@ 0x5b6
    
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 80089c8:	7dfa      	ldrb	r2, [r7, #23]
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	4613      	mov	r3, r2
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	4413      	add	r3, r2
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	440b      	add	r3, r1
 80089d6:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4618      	mov	r0, r3
 80089de:	f7f7 fbc1 	bl	8000164 <strlen>
 80089e2:	4603      	mov	r3, r0
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	3309      	adds	r3, #9
 80089e8:	75bb      	strb	r3, [r7, #22]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 80089ea:	7dfa      	ldrb	r2, [r7, #23]
 80089ec:	6879      	ldr	r1, [r7, #4]
 80089ee:	4613      	mov	r3, r2
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	4413      	add	r3, r2
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	440b      	add	r3, r1
 80089f8:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7f7 fbb0 	bl	8000164 <strlen>
 8008a04:	4603      	mov	r3, r0
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	330f      	adds	r3, #15
 8008a0a:	757b      	strb	r3, [r7, #21]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8008a0c:	7dbb      	ldrb	r3, [r7, #22]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	4618      	mov	r0, r3
 8008a12:	f008 fb19 	bl	8011048 <malloc>
 8008a16:	4603      	mov	r3, r0
 8008a18:	613b      	str	r3, [r7, #16]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8008a1a:	7d7b      	ldrb	r3, [r7, #21]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f008 fb12 	bl	8011048 <malloc>
 8008a24:	4603      	mov	r3, r0
 8008a26:	60fb      	str	r3, [r7, #12]

    strcpy(Text_Name_IC,"IC Name: ");
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	4925      	ldr	r1, [pc, #148]	@ (8008ac0 <select_modify_program+0x110>)
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	460b      	mov	r3, r1
 8008a30:	cb03      	ldmia	r3!, {r0, r1}
 8008a32:	6010      	str	r0, [r2, #0]
 8008a34:	6051      	str	r1, [r2, #4]
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	8113      	strh	r3, [r2, #8]
    strncat(Text_Name_IC,screen_obj->Program_Testx[index_program].Name_IC,size_Name_IC - strlen("IC Name: "));
 8008a3a:	7dfa      	ldrb	r2, [r7, #23]
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	4413      	add	r3, r2
 8008a44:	011b      	lsls	r3, r3, #4
 8008a46:	440b      	add	r3, r1
 8008a48:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008a4c:	6819      	ldr	r1, [r3, #0]
 8008a4e:	7dbb      	ldrb	r3, [r7, #22]
 8008a50:	3b09      	subs	r3, #9
 8008a52:	461a      	mov	r2, r3
 8008a54:	6938      	ldr	r0, [r7, #16]
 8008a56:	f00a fb53 	bl	8013100 <strncat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4a19      	ldr	r2, [pc, #100]	@ (8008ac4 <select_modify_program+0x114>)
 8008a5e:	461c      	mov	r4, r3
 8008a60:	4615      	mov	r5, r2
 8008a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a64:	6020      	str	r0, [r4, #0]
 8008a66:	6061      	str	r1, [r4, #4]
 8008a68:	60a2      	str	r2, [r4, #8]
 8008a6a:	60e3      	str	r3, [r4, #12]
    strncat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC,size_Num_IC - strlen("Number of ICs: "));
 8008a6c:	7dfa      	ldrb	r2, [r7, #23]
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	4613      	mov	r3, r2
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	4413      	add	r3, r2
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	440b      	add	r3, r1
 8008a7a:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8008a7e:	6819      	ldr	r1, [r3, #0]
 8008a80:	7d7b      	ldrb	r3, [r7, #21]
 8008a82:	3b0f      	subs	r3, #15
 8008a84:	461a      	mov	r2, r3
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f00a fb3a 	bl	8013100 <strncat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 8008a8c:	7dbb      	ldrb	r3, [r7, #22]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	f249 5120 	movw	r1, #38176	@ 0x9520
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f006 fe4c 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 8008a9c:	7d7b      	ldrb	r3, [r7, #21]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	f249 5140 	movw	r1, #38208	@ 0x9540
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f006 fe44 	bl	800f734 <DWIN_SetText>

    free(Text_Name_IC);
 8008aac:	6938      	ldr	r0, [r7, #16]
 8008aae:	f008 fad3 	bl	8011058 <free>
    free(Text_Num_IC);
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f008 fad0 	bl	8011058 <free>
}
 8008ab8:	bf00      	nop
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bdb0      	pop	{r4, r5, r7, pc}
 8008ac0:	08015a78 	.word	0x08015a78
 8008ac4:	08015a84 	.word	0x08015a84

08008ac8 <Navigation_num_keyboard>:

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008ac8:	b590      	push	{r4, r7, lr}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	889a      	ldrh	r2, [r3, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	819a      	strh	r2, [r3, #12]
    /* get index vp to show the info of keyboard */
    uint8_t index_condition;
    index_condition = Index_VP(screen_obj->Screen_keyboard.VP_Text,lookup_VP_condition,(sizeof(lookup_VP_condition)/ sizeof(lookup_VP_condition[0])));
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	899b      	ldrh	r3, [r3, #12]
 8008ade:	2207      	movs	r2, #7
 8008ae0:	492e      	ldr	r1, [pc, #184]	@ (8008b9c <Navigation_num_keyboard+0xd4>)
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f001 fb16 	bl	800a114 <Index_VP>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]
    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	330e      	adds	r3, #14
 8008af8:	2232      	movs	r2, #50	@ 0x32
 8008afa:	2100      	movs	r1, #0
 8008afc:	4618      	mov	r0, r3
 8008afe:	f00a fadb 	bl	80130b8 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f103 020e 	add.w	r2, r3, #14
 8008b08:	2332      	movs	r3, #50	@ 0x32
 8008b0a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f006 fe10 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard,text_numkeyboard[index_condition].String_Name,strlen(text_numkeyboard[index_condition].String_Name));
 8008b14:	7bfa      	ldrb	r2, [r7, #15]
 8008b16:	4613      	mov	r3, r2
 8008b18:	011b      	lsls	r3, r3, #4
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	4a20      	ldr	r2, [pc, #128]	@ (8008ba0 <Navigation_num_keyboard+0xd8>)
 8008b20:	189c      	adds	r4, r3, r2
 8008b22:	7bfa      	ldrb	r2, [r7, #15]
 8008b24:	4613      	mov	r3, r2
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba0 <Navigation_num_keyboard+0xd8>)
 8008b2e:	4413      	add	r3, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f7 fb17 	bl	8000164 <strlen>
 8008b36:	4603      	mov	r3, r0
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	f24f 0180 	movw	r1, #61568	@ 0xf080
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f006 fdf7 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowUnit_Keyboard,text_numkeyboard[index_condition].String_Unit,strlen(text_numkeyboard[index_condition].String_Unit));
 8008b46:	7bfa      	ldrb	r2, [r7, #15]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	1a9b      	subs	r3, r3, r2
 8008b4e:	005b      	lsls	r3, r3, #1
 8008b50:	3308      	adds	r3, #8
 8008b52:	4a13      	ldr	r2, [pc, #76]	@ (8008ba0 <Navigation_num_keyboard+0xd8>)
 8008b54:	4413      	add	r3, r2
 8008b56:	1ddc      	adds	r4, r3, #7
 8008b58:	7bfa      	ldrb	r2, [r7, #15]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	011b      	lsls	r3, r3, #4
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	3308      	adds	r3, #8
 8008b64:	4a0e      	ldr	r2, [pc, #56]	@ (8008ba0 <Navigation_num_keyboard+0xd8>)
 8008b66:	4413      	add	r3, r2
 8008b68:	3307      	adds	r3, #7
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7f7 fafa 	bl	8000164 <strlen>
 8008b70:	4603      	mov	r3, r0
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	4622      	mov	r2, r4
 8008b76:	f24f 0150 	movw	r1, #61520	@ 0xf050
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f006 fdda 	bl	800f734 <DWIN_SetText>
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 8008b80:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f006 fe45 	bl	800f814 <DWIN_ClearText>
    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
 8008b8a:	216d      	movs	r1, #109	@ 0x6d
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f006 fdaa 	bl	800f6e6 <DWIN_SetPage>
}
 8008b92:	bf00      	nop
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd90      	pop	{r4, r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20000028 	.word	0x20000028
 8008ba0:	2000007c 	.word	0x2000007c

08008ba4 <Navigation_full_keyboard>:

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	889a      	ldrh	r2, [r3, #4]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	330e      	adds	r3, #14
 8008bc2:	2232      	movs	r2, #50	@ 0x32
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f00a fa76 	bl	80130b8 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f103 020e 	add.w	r2, r3, #14
 8008bd2:	2332      	movs	r3, #50	@ 0x32
 8008bd4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f006 fdab 	bl	800f734 <DWIN_SetText>
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 8008bde:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f006 fe16 	bl	800f814 <DWIN_ClearText>
    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
 8008be8:	2178      	movs	r1, #120	@ 0x78
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f006 fd7b 	bl	800f6e6 <DWIN_SetPage>
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <Save_Information>:

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {\
 8008bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bfa:	b0c7      	sub	sp, #284	@ 0x11c
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c06:	6018      	str	r0, [r3, #0]
 8008c08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8008c10:	6019      	str	r1, [r3, #0]
    /* get data for testing ic */
    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp != NULL) {
 8008c12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008c20:	4619      	mov	r1, r3
 8008c22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	440b      	add	r3, r1
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	4413      	add	r3, r2
 8008c36:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d032      	beq.n	8008ca6 <Save_Information+0xae>
        if (get_data_testing_ic(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,&screen_obj->Program_Testx[screen_obj->modify_program_index]) == false) {
 8008c40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008c4e:	4619      	mov	r1, r3
 8008c50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c54:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	440b      	add	r3, r1
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	4413      	add	r3, r2
 8008c64:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008c78:	4619      	mov	r1, r3
 8008c7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c7e:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8008c82:	460b      	mov	r3, r1
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	440b      	add	r3, r1
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008c8e:	6812      	ldr	r2, [r2, #0]
 8008c90:	4413      	add	r3, r2
 8008c92:	4619      	mov	r1, r3
 8008c94:	f002 fa6c 	bl	800b170 <get_data_testing_ic>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f083 0301 	eor.w	r3, r3, #1
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f040 853f 	bne.w	8009724 <Save_Information+0xb2c>
            return;
        }
    }

    /* update value */
    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp != NULL) {
 8008ca6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008caa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	440b      	add	r3, r1
 8008cc6:	011b      	lsls	r3, r3, #4
 8008cc8:	4413      	add	r3, r2
 8008cca:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 80d9 	beq.w	8008e88 <Save_Information+0x290>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program != NULL) {
 8008cd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	440b      	add	r3, r1
 8008cf6:	011b      	lsls	r3, r3, #4
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d02d      	beq.n	8008d60 <Save_Information+0x168>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program);
 8008d04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d08:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008d12:	4619      	mov	r1, r3
 8008d14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	440b      	add	r3, r1
 8008d24:	011b      	lsls	r3, r3, #4
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f008 f992 	bl	8011058 <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program = NULL;
 8008d34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d38:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008d42:	4619      	mov	r1, r3
 8008d44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	440b      	add	r3, r1
 8008d54:	011b      	lsls	r3, r3, #4
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp));
 8008d60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008d6e:	4619      	mov	r1, r3
 8008d70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	440b      	add	r3, r1
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	4413      	add	r3, r2
 8008d84:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7f7 f9ea 	bl	8000164 <strlen>
 8008d90:	4602      	mov	r2, r0
 8008d92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008da0:	461c      	mov	r4, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f008 f950 	bl	8011048 <malloc>
 8008da8:	4603      	mov	r3, r0
 8008daa:	4619      	mov	r1, r3
 8008dac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008db0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4623      	mov	r3, r4
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	4423      	add	r3, r4
 8008dbc:	011b      	lsls	r3, r3, #4
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008dc4:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8008dc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	460b      	mov	r3, r1
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	440b      	add	r3, r1
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 8008dee:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp
 8008df0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008df4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008dfe:	4619      	mov	r1, r3
 8008e00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	440b      	add	r3, r1
 8008e10:	011b      	lsls	r3, r3, #4
 8008e12:	4413      	add	r3, r2
 8008e14:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8008e18:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp)+1);
 8008e1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	460b      	mov	r3, r1
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	440b      	add	r3, r1
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7f7 f98d 	bl	8000164 <strlen>
 8008e4a:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	461a      	mov	r2, r3
 8008e50:	4629      	mov	r1, r5
 8008e52:	4620      	mov	r0, r4
 8008e54:	f00a fa85 	bl	8013362 <memcpy>
        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp);
 8008e58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008e66:	4619      	mov	r1, r3
 8008e68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	460b      	mov	r3, r1
 8008e74:	005b      	lsls	r3, r3, #1
 8008e76:	440b      	add	r3, r1
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f008 f8e8 	bl	8011058 <free>
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp != NULL) {
 8008e88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008e96:	4619      	mov	r1, r3
 8008e98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	440b      	add	r3, r1
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	4413      	add	r3, r2
 8008eac:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 80ef 	beq.w	8009096 <Save_Information+0x49e>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC != NULL) {
 8008eb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ebc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ecc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	440b      	add	r3, r1
 8008ed8:	011b      	lsls	r3, r3, #4
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d02d      	beq.n	8008f42 <Save_Information+0x34a>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 8008ee6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008efa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	460b      	mov	r3, r1
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	440b      	add	r3, r1
 8008f06:	011b      	lsls	r3, r3, #4
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f008 f8a1 	bl	8011058 <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = NULL;
 8008f16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008f24:	4619      	mov	r1, r3
 8008f26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	460b      	mov	r3, r1
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	440b      	add	r3, r1
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008f3e:	2200      	movs	r2, #0
 8008f40:	601a      	str	r2, [r3, #0]
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp));
 8008f42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008f50:	4619      	mov	r1, r3
 8008f52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	005b      	lsls	r3, r3, #1
 8008f60:	440b      	add	r3, r1
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	4413      	add	r3, r2
 8008f66:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7f7 f8f9 	bl	8000164 <strlen>
 8008f72:	4602      	mov	r2, r0
 8008f74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008f82:	461c      	mov	r4, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f008 f85f 	bl	8011048 <malloc>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	4623      	mov	r3, r4
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	4423      	add	r3, r4
 8008f9e:	011b      	lsls	r3, r3, #4
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008fa6:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 8008fa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	440b      	add	r3, r1
 8008fc8:	011b      	lsls	r3, r3, #4
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8008fd0:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp
 8008fd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008fe6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	460b      	mov	r3, r1
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	440b      	add	r3, r1
 8008ff2:	011b      	lsls	r3, r3, #4
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8008ffa:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp)+1);
 8008ffc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009000:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800900a:	4619      	mov	r1, r3
 800900c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009010:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	460b      	mov	r3, r1
 8009018:	005b      	lsls	r3, r3, #1
 800901a:	440b      	add	r3, r1
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	4413      	add	r3, r2
 8009020:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4618      	mov	r0, r3
 8009028:	f7f7 f89c 	bl	8000164 <strlen>
 800902c:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 800902e:	3301      	adds	r3, #1
 8009030:	461a      	mov	r2, r3
 8009032:	4629      	mov	r1, r5
 8009034:	4620      	mov	r0, r4
 8009036:	f00a f994 	bl	8013362 <memcpy>

        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp);
 800903a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800903e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009048:	4619      	mov	r1, r3
 800904a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800904e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	460b      	mov	r3, r1
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	440b      	add	r3, r1
 800905a:	011b      	lsls	r3, r3, #4
 800905c:	4413      	add	r3, r2
 800905e:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4618      	mov	r0, r3
 8009066:	f007 fff7 	bl	8011058 <free>
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = NULL;
 800906a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800906e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009078:	4619      	mov	r1, r3
 800907a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800907e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	460b      	mov	r3, r1
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	440b      	add	r3, r1
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	4413      	add	r3, r2
 800908e:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp != NULL) {
 8009096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800909a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80090a4:	4619      	mov	r1, r3
 80090a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	460b      	mov	r3, r1
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	440b      	add	r3, r1
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	4413      	add	r3, r2
 80090ba:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80d3 	beq.w	800926c <Save_Information+0x674>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC != NULL) {
 80090c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80090d4:	4619      	mov	r1, r3
 80090d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	460b      	mov	r3, r1
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	440b      	add	r3, r1
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d02d      	beq.n	8009150 <Save_Information+0x558>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 80090f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009102:	4619      	mov	r1, r3
 8009104:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009108:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	460b      	mov	r3, r1
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	440b      	add	r3, r1
 8009114:	011b      	lsls	r3, r3, #4
 8009116:	4413      	add	r3, r2
 8009118:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f007 ff9a 	bl	8011058 <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = NULL;
 8009124:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009128:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009132:	4619      	mov	r1, r3
 8009134:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009138:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	460b      	mov	r3, r1
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	440b      	add	r3, r1
 8009144:	011b      	lsls	r3, r3, #4
 8009146:	4413      	add	r3, r2
 8009148:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
        } 
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = (char *)malloc(2);
 8009150:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009154:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800915e:	461c      	mov	r4, r3
 8009160:	2002      	movs	r0, #2
 8009162:	f007 ff71 	bl	8011048 <malloc>
 8009166:	4603      	mov	r3, r0
 8009168:	4619      	mov	r1, r3
 800916a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800916e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	4623      	mov	r3, r4
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	4423      	add	r3, r4
 800917a:	011b      	lsls	r3, r3, #4
 800917c:	4413      	add	r3, r2
 800917e:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8009182:	6019      	str	r1, [r3, #0]
        memset(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,0,2);
 8009184:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009188:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009192:	4619      	mov	r1, r3
 8009194:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009198:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	460b      	mov	r3, r1
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	440b      	add	r3, r1
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2202      	movs	r2, #2
 80091b0:	2100      	movs	r1, #0
 80091b2:	4618      	mov	r0, r3
 80091b4:	f009 ff80 	bl	80130b8 <memset>
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC[0] = screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp[0];
 80091b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80091c6:	4619      	mov	r1, r3
 80091c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	460b      	mov	r3, r1
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	440b      	add	r3, r1
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	4413      	add	r3, r2
 80091dc:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80091f0:	4618      	mov	r0, r3
 80091f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80091fa:	6819      	ldr	r1, [r3, #0]
 80091fc:	4603      	mov	r3, r0
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	4403      	add	r3, r0
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	440b      	add	r3, r1
 8009206:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	7812      	ldrb	r2, [r2, #0]
 800920e:	701a      	strb	r2, [r3, #0]

        free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp);
 8009210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009214:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800921e:	4619      	mov	r1, r3
 8009220:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009224:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	460b      	mov	r3, r1
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	440b      	add	r3, r1
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	4413      	add	r3, r2
 8009234:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4618      	mov	r0, r3
 800923c:	f007 ff0c 	bl	8011058 <free>
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = NULL;
 8009240:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009244:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800924e:	4619      	mov	r1, r3
 8009250:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009254:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	460b      	mov	r3, r1
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	440b      	add	r3, r1
 8009260:	011b      	lsls	r3, r3, #4
 8009262:	4413      	add	r3, r2
 8009264:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
    }

    /* send to esp32 */
    char buffer_send[200];
    memset(buffer_send,0,200);
 800926c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009270:	22c8      	movs	r2, #200	@ 0xc8
 8009272:	2100      	movs	r1, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f009 ff1f 	bl	80130b8 <memset>
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800927a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800927e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009288:	1c5c      	adds	r4, r3, #1
 800928a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800928e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009298:	4619      	mov	r1, r3
 800929a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800929e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	460b      	mov	r3, r1
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	440b      	add	r3, r1
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80092b2:	681d      	ldr	r5, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 80092b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80092c2:	4619      	mov	r1, r3
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 80092c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	460b      	mov	r3, r1
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	440b      	add	r3, r1
 80092d4:	011b      	lsls	r3, r3, #4
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80092dc:	681a      	ldr	r2, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 80092de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80092ec:	4618      	mov	r0, r3
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 80092ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80092f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092f6:	6819      	ldr	r1, [r3, #0]
 80092f8:	4603      	mov	r3, r0
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	4403      	add	r3, r0
 80092fe:	011b      	lsls	r3, r3, #4
 8009300:	440b      	add	r3, r1
 8009302:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	9200      	str	r2, [sp, #0]
 8009310:	462b      	mov	r3, r5
 8009312:	4622      	mov	r2, r4
 8009314:	49db      	ldr	r1, [pc, #876]	@ (8009684 <Save_Information+0xa8c>)
 8009316:	f009 fdc5 	bl	8012ea4 <siprintf>
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800931a:	2008      	movs	r0, #8
 800931c:	f007 fe94 	bl	8011048 <malloc>
 8009320:	4603      	mov	r3, r0
 8009322:	63bb      	str	r3, [r7, #56]	@ 0x38
    data_send_esp32->data = (char *)malloc(strlen(buffer_send));
 8009324:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009328:	4618      	mov	r0, r3
 800932a:	f7f6 ff1b 	bl	8000164 <strlen>
 800932e:	4603      	mov	r3, r0
 8009330:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8009332:	4618      	mov	r0, r3
 8009334:	f007 fe88 	bl	8011048 <malloc>
 8009338:	4603      	mov	r3, r0
 800933a:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data,"p",screen_obj->modify_program_index + 1);
 800933c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009344:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800934e:	3301      	adds	r3, #1
 8009350:	461a      	mov	r2, r3
 8009352:	49cd      	ldr	r1, [pc, #820]	@ (8009688 <Save_Information+0xa90>)
 8009354:	f00a f805 	bl	8013362 <memcpy>
    memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send));
 8009358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	1c5c      	adds	r4, r3, #1
 800935e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009362:	4618      	mov	r0, r3
 8009364:	f7f6 fefe 	bl	8000164 <strlen>
 8009368:	4602      	mov	r2, r0
 800936a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800936e:	4619      	mov	r1, r3
 8009370:	4620      	mov	r0, r4
 8009372:	f009 fff6 	bl	8013362 <memcpy>
    data_send_esp32->len = strlen(buffer_send) + 1;
 8009376:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800937a:	4618      	mov	r0, r3
 800937c:	f7f6 fef2 	bl	8000164 <strlen>
 8009380:	4602      	mov	r2, r0
 8009382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009384:	3201      	adds	r2, #1
 8009386:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 8009388:	4bc0      	ldr	r3, [pc, #768]	@ (800968c <Save_Information+0xa94>)
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8009390:	2308      	movs	r3, #8
 8009392:	2100      	movs	r1, #0
 8009394:	f007 fc26 	bl	8010be4 <OS_task_post_event>

    /* store data to eeprom */
    char string_data[TOTAL_ONE_PROGRAM_TEST_LEN] = {0};
 8009398:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800939c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093a0:	4618      	mov	r0, r3
 80093a2:	232a      	movs	r3, #42	@ 0x2a
 80093a4:	461a      	mov	r2, r3
 80093a6:	2100      	movs	r1, #0
 80093a8:	f009 fe86 	bl	80130b8 <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 80093ac:	200c      	movs	r0, #12
 80093ae:	f007 fe4b 	bl	8011048 <malloc>
 80093b2:	4603      	mov	r3, r0
 80093b4:	461a      	mov	r2, r3
 80093b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093be:	601a      	str	r2, [r3, #0]
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 80093c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80093ce:	4619      	mov	r1, r3
 80093d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	460b      	mov	r3, r1
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	440b      	add	r3, r1
 80093e0:	011b      	lsls	r3, r3, #4
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80093e8:	681c      	ldr	r4, [r3, #0]
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 80093ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80093f8:	4619      	mov	r1, r3
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 80093fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	460b      	mov	r3, r1
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	440b      	add	r3, r1
 800940a:	011b      	lsls	r3, r3, #4
 800940c:	4413      	add	r3, r2
 800940e:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 8009412:	681a      	ldr	r2, [r3, #0]
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 8009414:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009418:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009422:	4618      	mov	r0, r3
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8009424:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009428:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800942c:	6819      	ldr	r1, [r3, #0]
 800942e:	4603      	mov	r3, r0
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	4403      	add	r3, r0
 8009434:	011b      	lsls	r3, r3, #4
 8009436:	440b      	add	r3, r1
 8009438:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f107 000c 	add.w	r0, r7, #12
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	9200      	str	r2, [sp, #0]
 8009446:	4623      	mov	r3, r4
 8009448:	4a91      	ldr	r2, [pc, #580]	@ (8009690 <Save_Information+0xa98>)
 800944a:	212a      	movs	r1, #42	@ 0x2a
 800944c:	f009 fcf4 	bl	8012e38 <sniprintf>
    data_write->data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 8009450:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009458:	681c      	ldr	r4, [r3, #0]
 800945a:	202a      	movs	r0, #42	@ 0x2a
 800945c:	f007 fdf4 	bl	8011048 <malloc>
 8009460:	4603      	mov	r3, r0
 8009462:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 8009464:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009474:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009478:	461c      	mov	r4, r3
 800947a:	4694      	mov	ip, r2
 800947c:	f104 0e20 	add.w	lr, r4, #32
 8009480:	4665      	mov	r5, ip
 8009482:	4626      	mov	r6, r4
 8009484:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009486:	6028      	str	r0, [r5, #0]
 8009488:	6069      	str	r1, [r5, #4]
 800948a:	60aa      	str	r2, [r5, #8]
 800948c:	60eb      	str	r3, [r5, #12]
 800948e:	3410      	adds	r4, #16
 8009490:	f10c 0c10 	add.w	ip, ip, #16
 8009494:	4574      	cmp	r4, lr
 8009496:	d1f3      	bne.n	8009480 <Save_Information+0x888>
 8009498:	4662      	mov	r2, ip
 800949a:	4623      	mov	r3, r4
 800949c:	cb03      	ldmia	r3!, {r0, r1}
 800949e:	6010      	str	r0, [r2, #0]
 80094a0:	6051      	str	r1, [r2, #4]
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	8113      	strh	r3, [r2, #8]
    data_write->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 80094a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	222a      	movs	r2, #42	@ 0x2a
 80094b2:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_PROGRAM_TEST_X(screen_obj->modify_program_index);
 80094b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80094c2:	461a      	mov	r2, r3
 80094c4:	0052      	lsls	r2, r2, #1
 80094c6:	4413      	add	r3, r2
 80094c8:	461a      	mov	r2, r3
 80094ca:	00d2      	lsls	r2, r2, #3
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	b29a      	uxth	r2, r3
 80094d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3243      	adds	r2, #67	@ 0x43
 80094de:	b292      	uxth	r2, r2
 80094e0:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 80094e2:	4b6c      	ldr	r3, [pc, #432]	@ (8009694 <Save_Information+0xa9c>)
 80094e4:	6818      	ldr	r0, [r3, #0]
 80094e6:	f107 0208 	add.w	r2, r7, #8
 80094ea:	230c      	movs	r3, #12
 80094ec:	2105      	movs	r1, #5
 80094ee:	f007 fb79 	bl	8010be4 <OS_task_post_event>

    // Show data in screen
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 80094f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009500:	4619      	mov	r1, r3
 8009502:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009506:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	460b      	mov	r3, r1
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	440b      	add	r3, r1
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	4413      	add	r3, r2
 8009516:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4618      	mov	r0, r3
 800951e:	f7f6 fe21 	bl	8000164 <strlen>
 8009522:	4603      	mov	r3, r0
 8009524:	b2db      	uxtb	r3, r3
 8009526:	3309      	adds	r3, #9
 8009528:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800952c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009530:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 800953a:	4619      	mov	r1, r3
 800953c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009540:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	460b      	mov	r3, r1
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	440b      	add	r3, r1
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	4413      	add	r3, r2
 8009550:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4618      	mov	r0, r3
 8009558:	f7f6 fe04 	bl	8000164 <strlen>
 800955c:	4603      	mov	r3, r0
 800955e:	b2db      	uxtb	r3, r3
 8009560:	330f      	adds	r3, #15
 8009562:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8009566:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800956a:	3301      	adds	r3, #1
 800956c:	4618      	mov	r0, r3
 800956e:	f007 fd6b 	bl	8011048 <malloc>
 8009572:	4603      	mov	r3, r0
 8009574:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8009578:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800957c:	3301      	adds	r3, #1
 800957e:	4618      	mov	r0, r3
 8009580:	f007 fd62 	bl	8011048 <malloc>
 8009584:	4603      	mov	r3, r0
 8009586:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    strcpy(Text_Name_IC,"IC Name: ");
 800958a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800958e:	4942      	ldr	r1, [pc, #264]	@ (8009698 <Save_Information+0xaa0>)
 8009590:	461a      	mov	r2, r3
 8009592:	460b      	mov	r3, r1
 8009594:	cb03      	ldmia	r3!, {r0, r1}
 8009596:	6010      	str	r0, [r2, #0]
 8009598:	6051      	str	r1, [r2, #4]
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 800959e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80095ac:	4619      	mov	r1, r3
 80095ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	460b      	mov	r3, r1
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	440b      	add	r3, r1
 80095be:	011b      	lsls	r3, r3, #4
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4619      	mov	r1, r3
 80095ca:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80095ce:	f009 fd7b 	bl	80130c8 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 80095d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095d6:	4a31      	ldr	r2, [pc, #196]	@ (800969c <Save_Information+0xaa4>)
 80095d8:	461c      	mov	r4, r3
 80095da:	4615      	mov	r5, r2
 80095dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095de:	6020      	str	r0, [r4, #0]
 80095e0:	6061      	str	r1, [r4, #4]
 80095e2:	60a2      	str	r2, [r4, #8]
 80095e4:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 80095e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80095f4:	4619      	mov	r1, r3
 80095f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	460b      	mov	r3, r1
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	440b      	add	r3, r1
 8009606:	011b      	lsls	r3, r3, #4
 8009608:	4413      	add	r3, r2
 800960a:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4619      	mov	r1, r3
 8009612:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8009616:	f009 fd57 	bl	80130c8 <strcat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800961a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800961e:	b29b      	uxth	r3, r3
 8009620:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009624:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 8009628:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800962c:	f249 5120 	movw	r1, #38176	@ 0x9520
 8009630:	6800      	ldr	r0, [r0, #0]
 8009632:	f006 f87f 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 8009636:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800963a:	b29b      	uxth	r3, r3
 800963c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009640:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 8009644:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8009648:	f249 5140 	movw	r1, #38208	@ 0x9540
 800964c:	6800      	ldr	r0, [r0, #0]
 800964e:	f006 f871 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 8009652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009656:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009660:	461a      	mov	r2, r3
 8009662:	0092      	lsls	r2, r2, #2
 8009664:	4413      	add	r3, r2
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	b29b      	uxth	r3, r3
 800966a:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 800966e:	3b58      	subs	r3, #88	@ 0x58
 8009670:	b29c      	uxth	r4, r3
 8009672:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009676:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009680:	e00e      	b.n	80096a0 <Save_Information+0xaa8>
 8009682:	bf00      	nop
 8009684:	08015a94 	.word	0x08015a94
 8009688:	08015aa0 	.word	0x08015aa0
 800968c:	08016810 	.word	0x08016810
 8009690:	08015aa4 	.word	0x08015aa4
 8009694:	08016808 	.word	0x08016808
 8009698:	08015a78 	.word	0x08015a78
 800969c:	08015a84 	.word	0x08015a84
 80096a0:	4619      	mov	r1, r3
 80096a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	460b      	mov	r3, r1
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	440b      	add	r3, r1
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80096ba:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 80096bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80096ca:	4619      	mov	r1, r3
 80096cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	460b      	mov	r3, r1
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	440b      	add	r3, r1
 80096dc:	011b      	lsls	r3, r3, #4
 80096de:	4413      	add	r3, r2
 80096e0:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7f6 fd3c 	bl	8000164 <strlen>
 80096ec:	4603      	mov	r3, r0
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80096f4:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 80096f8:	462a      	mov	r2, r5
 80096fa:	4621      	mov	r1, r4
 80096fc:	6800      	ldr	r0, [r0, #0]
 80096fe:	f006 f819 	bl	800f734 <DWIN_SetText>

    free(Text_Name_IC);
 8009702:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8009706:	f007 fca7 	bl	8011058 <free>
    free(Text_Num_IC);
 800970a:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 800970e:	f007 fca3 	bl	8011058 <free>
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 8009712:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009716:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800971a:	216b      	movs	r1, #107	@ 0x6b
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	f005 ffe2 	bl	800f6e6 <DWIN_SetPage>
 8009722:	e000      	b.n	8009726 <Save_Information+0xb2e>
            return;
 8009724:	bf00      	nop
}
 8009726:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800972a:	46bd      	mov	sp, r7
 800972c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800972e:	bf00      	nop

08009730 <Enter_password>:

void Enter_password(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009734:	b089      	sub	sp, #36	@ 0x24
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
 800973c:	466b      	mov	r3, sp
 800973e:	461e      	mov	r6, r3
    /* Get the password input */
    uint8_t len = screen_obj->Screen_keyboard.Index_String + 1;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009746:	b2db      	uxtb	r3, r3
 8009748:	3301      	adds	r3, #1
 800974a:	77fb      	strb	r3, [r7, #31]
    char input_pass[len];
 800974c:	7ff9      	ldrb	r1, [r7, #31]
 800974e:	460b      	mov	r3, r1
 8009750:	3b01      	subs	r3, #1
 8009752:	61bb      	str	r3, [r7, #24]
 8009754:	b2cb      	uxtb	r3, r1
 8009756:	2200      	movs	r2, #0
 8009758:	4698      	mov	r8, r3
 800975a:	4691      	mov	r9, r2
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	f04f 0300 	mov.w	r3, #0
 8009764:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009768:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800976c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009770:	b2cb      	uxtb	r3, r1
 8009772:	2200      	movs	r2, #0
 8009774:	461c      	mov	r4, r3
 8009776:	4615      	mov	r5, r2
 8009778:	f04f 0200 	mov.w	r2, #0
 800977c:	f04f 0300 	mov.w	r3, #0
 8009780:	00eb      	lsls	r3, r5, #3
 8009782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009786:	00e2      	lsls	r2, r4, #3
 8009788:	460b      	mov	r3, r1
 800978a:	3307      	adds	r3, #7
 800978c:	08db      	lsrs	r3, r3, #3
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	ebad 0d03 	sub.w	sp, sp, r3
 8009794:	466b      	mov	r3, sp
 8009796:	3300      	adds	r3, #0
 8009798:	617b      	str	r3, [r7, #20]
    strcpy(input_pass,screen_obj->Screen_keyboard.String);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	330e      	adds	r3, #14
 800979e:	4619      	mov	r1, r3
 80097a0:	6978      	ldr	r0, [r7, #20]
 80097a2:	f009 fdc8 	bl	8013336 <strcpy>
    /* Check password */
    if (strcmp(input_pass,MACHINE_PASSWORD) == 0) { /* Correct password */
 80097a6:	493f      	ldr	r1, [pc, #252]	@ (80098a4 <Enter_password+0x174>)
 80097a8:	6978      	ldr	r0, [r7, #20]
 80097aa:	f7f6 fcd1 	bl	8000150 <strcmp>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d16a      	bne.n	800988a <Enter_password+0x15a>
        /* show data page */
        switch (screen_obj->page_setting) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 35b7 	ldrb.w	r3, [r3, #1463]	@ 0x5b7
 80097ba:	2b6b      	cmp	r3, #107	@ 0x6b
 80097bc:	d15c      	bne.n	8009878 <Enter_password+0x148>
            case DWINPAGE_SETTING_PROGRAM : {
                // Show data in screen
                uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7f6 fccd 	bl	8000164 <strlen>
 80097ca:	4603      	mov	r3, r0
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	3309      	adds	r3, #9
 80097d0:	74fb      	strb	r3, [r7, #19]
                uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 80097d8:	4618      	mov	r0, r3
 80097da:	f7f6 fcc3 	bl	8000164 <strlen>
 80097de:	4603      	mov	r3, r0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	330f      	adds	r3, #15
 80097e4:	74bb      	strb	r3, [r7, #18]

                char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 80097e6:	7cfb      	ldrb	r3, [r7, #19]
 80097e8:	3301      	adds	r3, #1
 80097ea:	4618      	mov	r0, r3
 80097ec:	f007 fc2c 	bl	8011048 <malloc>
 80097f0:	4603      	mov	r3, r0
 80097f2:	60fb      	str	r3, [r7, #12]
                char *Text_Num_IC = malloc(size_Num_IC + 1);
 80097f4:	7cbb      	ldrb	r3, [r7, #18]
 80097f6:	3301      	adds	r3, #1
 80097f8:	4618      	mov	r0, r3
 80097fa:	f007 fc25 	bl	8011048 <malloc>
 80097fe:	4603      	mov	r3, r0
 8009800:	60bb      	str	r3, [r7, #8]

                strcpy(Text_Name_IC,"IC Name: ");
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4928      	ldr	r1, [pc, #160]	@ (80098a8 <Enter_password+0x178>)
 8009806:	461a      	mov	r2, r3
 8009808:	460b      	mov	r3, r1
 800980a:	cb03      	ldmia	r3!, {r0, r1}
 800980c:	6010      	str	r0, [r2, #0]
 800980e:	6051      	str	r1, [r2, #4]
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	8113      	strh	r3, [r2, #8]
                strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 800981a:	4619      	mov	r1, r3
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f009 fc53 	bl	80130c8 <strcat>
                strcpy(Text_Num_IC,"Number of ICs: ");
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	4a21      	ldr	r2, [pc, #132]	@ (80098ac <Enter_password+0x17c>)
 8009826:	461c      	mov	r4, r3
 8009828:	4615      	mov	r5, r2
 800982a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800982c:	6020      	str	r0, [r4, #0]
 800982e:	6061      	str	r1, [r4, #4]
 8009830:	60a2      	str	r2, [r4, #8]
 8009832:	60e3      	str	r3, [r4, #12]
                strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 800983a:	4619      	mov	r1, r3
 800983c:	68b8      	ldr	r0, [r7, #8]
 800983e:	f009 fc43 	bl	80130c8 <strcat>

                // Show data in screen
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 8009842:	7cfb      	ldrb	r3, [r7, #19]
 8009844:	b29b      	uxth	r3, r3
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	f249 5120 	movw	r1, #38176	@ 0x9520
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f005 ff71 	bl	800f734 <DWIN_SetText>
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 8009852:	7cbb      	ldrb	r3, [r7, #18]
 8009854:	b29b      	uxth	r3, r3
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	f249 5140 	movw	r1, #38208	@ 0x9540
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f005 ff69 	bl	800f734 <DWIN_SetText>

                free(Text_Name_IC);
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f007 fbf8 	bl	8011058 <free>
                free(Text_Num_IC);
 8009868:	68b8      	ldr	r0, [r7, #8]
 800986a:	f007 fbf5 	bl	8011058 <free>
                // Switch page
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 800986e:	216b      	movs	r1, #107	@ 0x6b
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f005 ff38 	bl	800f6e6 <DWIN_SetPage>
            } break;
 8009876:	e000      	b.n	800987a <Enter_password+0x14a>

            default : break;
 8009878:	bf00      	nop
        }
        /* Goto setting page */
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->page_setting);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 35b7 	ldrb.w	r3, [r3, #1463]	@ 0x5b7
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f005 ff2f 	bl	800f6e6 <DWIN_SetPage>
 8009888:	e006      	b.n	8009898 <Enter_password+0x168>
    } else {
        /* Show text */
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_Password,INCORRECT_PASSWORD_TEXT,strlen(INCORRECT_PASSWORD_TEXT));
 800988a:	2312      	movs	r3, #18
 800988c:	4a08      	ldr	r2, [pc, #32]	@ (80098b0 <Enter_password+0x180>)
 800988e:	f249 5180 	movw	r1, #38272	@ 0x9580
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f005 ff4e 	bl	800f734 <DWIN_SetText>
 8009898:	46b5      	mov	sp, r6
    }
}
 800989a:	bf00      	nop
 800989c:	3724      	adds	r7, #36	@ 0x24
 800989e:	46bd      	mov	sp, r7
 80098a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098a4:	08015ab0 	.word	0x08015ab0
 80098a8:	08015a78 	.word	0x08015a78
 80098ac:	08015a84 	.word	0x08015a84
 80098b0:	08015ab8 	.word	0x08015ab8

080098b4 <Enter_num_keyboard>:

void Enter_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80098b4:	b590      	push	{r4, r7, lr}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
    uint16_t VP_show = screen_obj->Screen_keyboard.VP_Text;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	899b      	ldrh	r3, [r3, #12]
 80098c2:	81fb      	strh	r3, [r7, #14]
    
    /* Show text to VP */
    DWIN_SetText((Dwin_t *)screen_obj,VP_show,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f103 020e 	add.w	r2, r3, #14
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80098d0:	89f9      	ldrh	r1, [r7, #14]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f005 ff2e 	bl	800f734 <DWIN_SetText>

    /* Return page base on VP address */
    switch (VP_show) {
 80098d8:	89fb      	ldrh	r3, [r7, #14]
 80098da:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 80098de:	4293      	cmp	r3, r2
 80098e0:	f000 8176 	beq.w	8009bd0 <Enter_num_keyboard+0x31c>
 80098e4:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 80098e8:	4293      	cmp	r3, r2
 80098ea:	f300 819e 	bgt.w	8009c2a <Enter_num_keyboard+0x376>
 80098ee:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 80098f2:	4293      	cmp	r3, r2
 80098f4:	f000 815e 	beq.w	8009bb4 <Enter_num_keyboard+0x300>
 80098f8:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 80098fc:	4293      	cmp	r3, r2
 80098fe:	f300 8194 	bgt.w	8009c2a <Enter_num_keyboard+0x376>
 8009902:	f249 5260 	movw	r2, #38240	@ 0x9560
 8009906:	4293      	cmp	r3, r2
 8009908:	d047      	beq.n	800999a <Enter_num_keyboard+0xe6>
 800990a:	f249 5260 	movw	r2, #38240	@ 0x9560
 800990e:	4293      	cmp	r3, r2
 8009910:	f300 818b 	bgt.w	8009c2a <Enter_num_keyboard+0x376>
 8009914:	f249 5240 	movw	r2, #38208	@ 0x9540
 8009918:	4293      	cmp	r3, r2
 800991a:	f000 80f0 	beq.w	8009afe <Enter_num_keyboard+0x24a>
 800991e:	f249 5240 	movw	r2, #38208	@ 0x9540
 8009922:	4293      	cmp	r3, r2
 8009924:	f300 8181 	bgt.w	8009c2a <Enter_num_keyboard+0x376>
 8009928:	f249 5220 	movw	r2, #38176	@ 0x9520
 800992c:	4293      	cmp	r3, r2
 800992e:	f000 8092 	beq.w	8009a56 <Enter_num_keyboard+0x1a2>
 8009932:	f249 5220 	movw	r2, #38176	@ 0x9520
 8009936:	4293      	cmp	r3, r2
 8009938:	f300 8177 	bgt.w	8009c2a <Enter_num_keyboard+0x376>
 800993c:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 8009940:	d035      	beq.n	80099ae <Enter_num_keyboard+0xfa>
 8009942:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 8009946:	f300 8170 	bgt.w	8009c2a <Enter_num_keyboard+0x376>
 800994a:	f249 0240 	movw	r2, #36928	@ 0x9040
 800994e:	4293      	cmp	r3, r2
 8009950:	f000 814c 	beq.w	8009bec <Enter_num_keyboard+0x338>
 8009954:	f249 0240 	movw	r2, #36928	@ 0x9040
 8009958:	4293      	cmp	r3, r2
 800995a:	f300 8166 	bgt.w	8009c2a <Enter_num_keyboard+0x376>
 800995e:	f249 0230 	movw	r2, #36912	@ 0x9030
 8009962:	4293      	cmp	r3, r2
 8009964:	f000 8142 	beq.w	8009bec <Enter_num_keyboard+0x338>
 8009968:	f249 0230 	movw	r2, #36912	@ 0x9030
 800996c:	4293      	cmp	r3, r2
 800996e:	f300 815c 	bgt.w	8009c2a <Enter_num_keyboard+0x376>
 8009972:	f249 0220 	movw	r2, #36896	@ 0x9020
 8009976:	4293      	cmp	r3, r2
 8009978:	f000 8138 	beq.w	8009bec <Enter_num_keyboard+0x338>
 800997c:	f249 0220 	movw	r2, #36896	@ 0x9020
 8009980:	4293      	cmp	r3, r2
 8009982:	f300 8152 	bgt.w	8009c2a <Enter_num_keyboard+0x376>
 8009986:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 800998a:	f000 812f 	beq.w	8009bec <Enter_num_keyboard+0x338>
 800998e:	f249 0210 	movw	r2, #36880	@ 0x9010
 8009992:	4293      	cmp	r3, r2
 8009994:	f000 812a 	beq.w	8009bec <Enter_num_keyboard+0x338>
                DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
                DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
            } 
        } break;
        
        default: break;
 8009998:	e147      	b.n	8009c2a <Enter_num_keyboard+0x376>
            DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password); /* Clear warning text if any */
 800999a:	f249 5180 	movw	r1, #38272	@ 0x9580
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f005 ff38 	bl	800f814 <DWIN_ClearText>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 80099a4:	216e      	movs	r1, #110	@ 0x6e
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f005 fe9d 	bl	800f6e6 <DWIN_SetPage>
        } break;
 80099ac:	e142      	b.n	8009c34 <Enter_num_keyboard+0x380>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d107      	bne.n	80099c8 <Enter_num_keyboard+0x114>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 80099b8:	2314      	movs	r3, #20
 80099ba:	4aa0      	ldr	r2, [pc, #640]	@ (8009c3c <Enter_num_keyboard+0x388>)
 80099bc:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f005 feb7 	bl	800f734 <DWIN_SetText>
                return;
 80099c6:	e135      	b.n	8009c34 <Enter_num_keyboard+0x380>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80099ce:	3301      	adds	r3, #1
 80099d0:	461a      	mov	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80099d8:	461c      	mov	r4, r3
 80099da:	4610      	mov	r0, r2
 80099dc:	f007 fb34 	bl	8011048 <malloc>
 80099e0:	4603      	mov	r3, r0
 80099e2:	4619      	mov	r1, r3
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	4623      	mov	r3, r4
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	4423      	add	r3, r4
 80099ec:	011b      	lsls	r3, r3, #4
 80099ee:	4413      	add	r3, r2
 80099f0:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 80099f4:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 80099fc:	4619      	mov	r1, r3
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	440b      	add	r3, r1
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	4413      	add	r3, r2
 8009a0a:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8009a0e:	6818      	ldr	r0, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009a16:	3301      	adds	r3, #1
 8009a18:	461a      	mov	r2, r3
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	f009 fb4c 	bl	80130b8 <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009a26:	4619      	mov	r1, r3
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	440b      	add	r3, r1
 8009a30:	011b      	lsls	r3, r3, #4
 8009a32:	4413      	add	r3, r2
 8009a34:	f203 436c 	addw	r3, r3, #1132	@ 0x46c
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f103 010e 	add.w	r1, r3, #14
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009a46:	461a      	mov	r2, r3
 8009a48:	f009 fc8b 	bl	8013362 <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8009a4c:	216c      	movs	r1, #108	@ 0x6c
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f005 fe49 	bl	800f6e6 <DWIN_SetPage>
        } break;
 8009a54:	e0ee      	b.n	8009c34 <Enter_num_keyboard+0x380>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d107      	bne.n	8009a70 <Enter_num_keyboard+0x1bc>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 8009a60:	2314      	movs	r3, #20
 8009a62:	4a76      	ldr	r2, [pc, #472]	@ (8009c3c <Enter_num_keyboard+0x388>)
 8009a64:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f005 fe63 	bl	800f734 <DWIN_SetText>
                return;
 8009a6e:	e0e1      	b.n	8009c34 <Enter_num_keyboard+0x380>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009a76:	3301      	adds	r3, #1
 8009a78:	461a      	mov	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009a80:	461c      	mov	r4, r3
 8009a82:	4610      	mov	r0, r2
 8009a84:	f007 fae0 	bl	8011048 <malloc>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	4623      	mov	r3, r4
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	4423      	add	r3, r4
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	4413      	add	r3, r2
 8009a98:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8009a9c:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	440b      	add	r3, r1
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8009ab6:	6818      	ldr	r0, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009abe:	3301      	adds	r3, #1
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	f009 faf8 	bl	80130b8 <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009ace:	4619      	mov	r1, r3
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	440b      	add	r3, r1
 8009ad8:	011b      	lsls	r3, r3, #4
 8009ada:	4413      	add	r3, r2
 8009adc:	f203 4374 	addw	r3, r3, #1140	@ 0x474
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f103 010e 	add.w	r1, r3, #14
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009aee:	461a      	mov	r2, r3
 8009af0:	f009 fc37 	bl	8013362 <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8009af4:	216c      	movs	r1, #108	@ 0x6c
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f005 fdf5 	bl	800f6e6 <DWIN_SetPage>
        } break;
 8009afc:	e09a      	b.n	8009c34 <Enter_num_keyboard+0x380>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d107      	bne.n	8009b18 <Enter_num_keyboard+0x264>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 8009b08:	2314      	movs	r3, #20
 8009b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8009c3c <Enter_num_keyboard+0x388>)
 8009b0c:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f005 fe0f 	bl	800f734 <DWIN_SetText>
                return;
 8009b16:	e08d      	b.n	8009c34 <Enter_num_keyboard+0x380>
            if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fc43 	bl	800a3a4 <Screen_CheckInput_Keyboard>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	f040 8084 	bne.w	8009c2e <Enter_num_keyboard+0x37a>
                screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	461a      	mov	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009b36:	461c      	mov	r4, r3
 8009b38:	4610      	mov	r0, r2
 8009b3a:	f007 fa85 	bl	8011048 <malloc>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	4619      	mov	r1, r3
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	4623      	mov	r3, r4
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	4423      	add	r3, r4
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8009b52:	6019      	str	r1, [r3, #0]
                memset(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	460b      	mov	r3, r1
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	440b      	add	r3, r1
 8009b64:	011b      	lsls	r3, r3, #4
 8009b66:	4413      	add	r3, r2
 8009b68:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009b74:	3301      	adds	r3, #1
 8009b76:	461a      	mov	r2, r3
 8009b78:	2100      	movs	r1, #0
 8009b7a:	f009 fa9d 	bl	80130b8 <memset>
                memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009b84:	4619      	mov	r1, r3
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	440b      	add	r3, r1
 8009b8e:	011b      	lsls	r3, r3, #4
 8009b90:	4413      	add	r3, r2
 8009b92:	f203 437c 	addw	r3, r3, #1148	@ 0x47c
 8009b96:	6818      	ldr	r0, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f103 010e 	add.w	r1, r3, #14
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	f009 fbdc 	bl	8013362 <memcpy>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8009baa:	216c      	movs	r1, #108	@ 0x6c
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f005 fd9a 	bl	800f6e6 <DWIN_SetPage>
        } break;
 8009bb2:	e03c      	b.n	8009c2e <Enter_num_keyboard+0x37a>
            strcpy(screen_obj->Wifi_setting.Name_Wifi_temp,screen_obj->Screen_keyboard.String);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f203 5246 	addw	r2, r3, #1350	@ 0x546
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	330e      	adds	r3, #14
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	f009 fbb8 	bl	8013336 <strcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 8009bc6:	2175      	movs	r1, #117	@ 0x75
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f005 fd8c 	bl	800f6e6 <DWIN_SetPage>
        } break;
 8009bce:	e031      	b.n	8009c34 <Enter_num_keyboard+0x380>
            strcpy(screen_obj->Wifi_setting.Password_Wifi_temp,screen_obj->Screen_keyboard.String);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f203 5282 	addw	r2, r3, #1410	@ 0x582
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	330e      	adds	r3, #14
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f009 fbaa 	bl	8013336 <strcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 8009be2:	2175      	movs	r1, #117	@ 0x75
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f005 fd7e 	bl	800f6e6 <DWIN_SetPage>
        } break;
 8009bea:	e023      	b.n	8009c34 <Enter_num_keyboard+0x380>
            if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fbd9 	bl	800a3a4 <Screen_CheckInput_Keyboard>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d11c      	bne.n	8009c32 <Enter_num_keyboard+0x37e>
                get_input_keyboard((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	899b      	ldrh	r3, [r3, #12]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f003 fcca 	bl	800d598 <get_input_keyboard>
                DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	8999      	ldrh	r1, [r3, #12]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f103 020e 	add.w	r2, r3, #14
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f005 fd8d 	bl	800f734 <DWIN_SetText>
                DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 35b4 	ldrb.w	r3, [r3, #1460]	@ 0x5b4
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f005 fd5f 	bl	800f6e6 <DWIN_SetPage>
        } break;
 8009c28:	e003      	b.n	8009c32 <Enter_num_keyboard+0x37e>
        default: break;
 8009c2a:	bf00      	nop
 8009c2c:	e002      	b.n	8009c34 <Enter_num_keyboard+0x380>
        } break;
 8009c2e:	bf00      	nop
 8009c30:	e000      	b.n	8009c34 <Enter_num_keyboard+0x380>
        } break;
 8009c32:	bf00      	nop
    }
}
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd90      	pop	{r4, r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	08015acc 	.word	0x08015acc

08009c40 <Enter_setting_time>:

void Enter_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c44:	b086      	sub	sp, #24
 8009c46:	af04      	add	r7, sp, #16
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
    if (strlen(screen_obj->Time_setting.Day) == 0 ||
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d017      	beq.n	8009c88 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Month) == 0 || 
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f203 53a3 	addw	r3, r3, #1443	@ 0x5a3
 8009c5e:	781b      	ldrb	r3, [r3, #0]
    if (strlen(screen_obj->Time_setting.Day) == 0 ||
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d011      	beq.n	8009c88 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Year) == 0 || 
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f203 53a6 	addw	r3, r3, #1446	@ 0x5a6
 8009c6a:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Month) == 0 || 
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00b      	beq.n	8009c88 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Hour) == 0 || 
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f203 53a9 	addw	r3, r3, #1449	@ 0x5a9
 8009c76:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Year) == 0 || 
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d005      	beq.n	8009c88 <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Minute) == 0 ) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f203 53ac 	addw	r3, r3, #1452	@ 0x5ac
 8009c82:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Hour) == 0 || 
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d107      	bne.n	8009c98 <Enter_setting_time+0x58>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_setting_time,"Enter all times before saving",strlen("Enter all times before saving"));
 8009c88:	231d      	movs	r3, #29
 8009c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8009d04 <Enter_setting_time+0xc4>)
 8009c8c:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f005 fd4f 	bl	800f734 <DWIN_SetText>
        return;
 8009c96:	e031      	b.n	8009cfc <Enter_setting_time+0xbc>
    } else {
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f203 53ac 	addw	r3, r3, #1452	@ 0x5ac
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f007 f9cd 	bl	801103e <atoi>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	b2de      	uxtb	r6, r3
        atoi(screen_obj->Time_setting.Hour),
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f203 53a9 	addw	r3, r3, #1449	@ 0x5a9
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f007 f9c5 	bl	801103e <atoi>
 8009cb4:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009cb6:	fa5f f883 	uxtb.w	r8, r3
        atoi(screen_obj->Time_setting.Day),
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f007 f9bc 	bl	801103e <atoi>
 8009cc6:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009cc8:	b2dc      	uxtb	r4, r3
        atoi(screen_obj->Time_setting.Month),
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f203 53a3 	addw	r3, r3, #1443	@ 0x5a3
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f007 f9b4 	bl	801103e <atoi>
 8009cd6:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009cd8:	b2dd      	uxtb	r5, r3
        atoi(screen_obj->Time_setting.Year));
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f203 53a6 	addw	r3, r3, #1446	@ 0x5a6
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f007 f9ac 	bl	801103e <atoi>
 8009ce6:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	9302      	str	r3, [sp, #8]
 8009cec:	9501      	str	r5, [sp, #4]
 8009cee:	9400      	str	r4, [sp, #0]
 8009cf0:	4643      	mov	r3, r8
 8009cf2:	4632      	mov	r2, r6
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4804      	ldr	r0, [pc, #16]	@ (8009d08 <Enter_setting_time+0xc8>)
 8009cf8:	f005 fc68 	bl	800f5cc <DS3231_Write_time>
    }
}
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d04:	08015ae4 	.word	0x08015ae4
 8009d08:	200019b8 	.word	0x200019b8

08009d0c <Enter_setting_wifi>:

void Enter_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d0e:	b0c9      	sub	sp, #292	@ 0x124
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009d1a:	6018      	str	r0, [r3, #0]
 8009d1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d20:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009d24:	6019      	str	r1, [r3, #0]
    if (screen_obj->Wifi_setting.Name_Wifi_temp[0] != 0) {
 8009d26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f893 3546 	ldrb.w	r3, [r3, #1350]	@ 0x546
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d029      	beq.n	8009d8c <Enter_setting_wifi+0x80>
        memset(screen_obj->Wifi_setting.Name_Wifi,0,sizeof(screen_obj->Wifi_setting.Name_Wifi));
 8009d38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d3c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f503 63a5 	add.w	r3, r3, #1320	@ 0x528
 8009d46:	221e      	movs	r2, #30
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f009 f9b4 	bl	80130b8 <memset>
        strcpy(screen_obj->Wifi_setting.Name_Wifi,screen_obj->Wifi_setting.Name_Wifi_temp);
 8009d50:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d54:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f503 62a5 	add.w	r2, r3, #1320	@ 0x528
 8009d5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f203 5346 	addw	r3, r3, #1350	@ 0x546
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4610      	mov	r0, r2
 8009d70:	f009 fae1 	bl	8013336 <strcpy>
        memset(screen_obj->Wifi_setting.Name_Wifi_temp,0,sizeof(screen_obj->Wifi_setting.Name_Wifi_temp));
 8009d74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f203 5346 	addw	r3, r3, #1350	@ 0x546
 8009d82:	221e      	movs	r2, #30
 8009d84:	2100      	movs	r1, #0
 8009d86:	4618      	mov	r0, r3
 8009d88:	f009 f996 	bl	80130b8 <memset>
    }

    if (screen_obj->Wifi_setting.Password_Wifi_temp[0] != 0) {
 8009d8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009d90:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f893 3582 	ldrb.w	r3, [r3, #1410]	@ 0x582
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d029      	beq.n	8009df2 <Enter_setting_wifi+0xe6>
        memset(screen_obj->Wifi_setting.Password_Wifi,0,sizeof(screen_obj->Wifi_setting.Password_Wifi));
 8009d9e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009da2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8009dac:	221e      	movs	r2, #30
 8009dae:	2100      	movs	r1, #0
 8009db0:	4618      	mov	r0, r3
 8009db2:	f009 f981 	bl	80130b8 <memset>
        strcpy(screen_obj->Wifi_setting.Password_Wifi,screen_obj->Wifi_setting.Password_Wifi_temp);
 8009db6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009dba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f203 5264 	addw	r2, r3, #1380	@ 0x564
 8009dc4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009dc8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f203 5382 	addw	r3, r3, #1410	@ 0x582
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	f009 faae 	bl	8013336 <strcpy>
        memset(screen_obj->Wifi_setting.Password_Wifi_temp,0,sizeof(screen_obj->Wifi_setting.Password_Wifi_temp));
 8009dda:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009dde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f203 5382 	addw	r3, r3, #1410	@ 0x582
 8009de8:	221e      	movs	r2, #30
 8009dea:	2100      	movs	r1, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f009 f963 	bl	80130b8 <memset>
    }

    /* store to eeprom */
    char string_data[DATA_LEN_WIFI_INFO] = {0};
 8009df2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8009df6:	223c      	movs	r2, #60	@ 0x3c
 8009df8:	2100      	movs	r1, #0
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f009 f95c 	bl	80130b8 <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 8009e00:	200c      	movs	r0, #12
 8009e02:	f007 f921 	bl	8011048 <malloc>
 8009e06:	4603      	mov	r3, r0
 8009e08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    snprintf(string_data,DATA_LEN_WIFI_INFO,"%s,%s",screen_obj->Wifi_setting.Name_Wifi,screen_obj->Wifi_setting.Password_Wifi);
 8009e0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009e10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f503 62a5 	add.w	r2, r3, #1320	@ 0x528
 8009e1a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009e1e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8009e28:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	4a5a      	ldr	r2, [pc, #360]	@ (8009f9c <Enter_setting_wifi+0x290>)
 8009e32:	213c      	movs	r1, #60	@ 0x3c
 8009e34:	f009 f800 	bl	8012e38 <sniprintf>
    data_write->data = malloc(DATA_LEN_WIFI_INFO);
 8009e38:	f8d7 40d8 	ldr.w	r4, [r7, #216]	@ 0xd8
 8009e3c:	203c      	movs	r0, #60	@ 0x3c
 8009e3e:	f007 f903 	bl	8011048 <malloc>
 8009e42:	4603      	mov	r3, r0
 8009e44:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,DATA_LEN_WIFI_INFO);
 8009e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 8009e50:	469c      	mov	ip, r3
 8009e52:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8009e56:	4665      	mov	r5, ip
 8009e58:	4626      	mov	r6, r4
 8009e5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009e5c:	6028      	str	r0, [r5, #0]
 8009e5e:	6069      	str	r1, [r5, #4]
 8009e60:	60aa      	str	r2, [r5, #8]
 8009e62:	60eb      	str	r3, [r5, #12]
 8009e64:	3410      	adds	r4, #16
 8009e66:	f10c 0c10 	add.w	ip, ip, #16
 8009e6a:	4574      	cmp	r4, lr
 8009e6c:	d1f3      	bne.n	8009e56 <Enter_setting_wifi+0x14a>
 8009e6e:	4665      	mov	r5, ip
 8009e70:	4623      	mov	r3, r4
 8009e72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e74:	6028      	str	r0, [r5, #0]
 8009e76:	6069      	str	r1, [r5, #4]
 8009e78:	60aa      	str	r2, [r5, #8]
    data_write->data_len = DATA_LEN_WIFI_INFO;
 8009e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e7e:	223c      	movs	r2, #60	@ 0x3c
 8009e80:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_WIFI_INFO;
 8009e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e86:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8009e8a:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 8009e8c:	4b44      	ldr	r3, [pc, #272]	@ (8009fa0 <Enter_setting_wifi+0x294>)
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8009e94:	230c      	movs	r3, #12
 8009e96:	2105      	movs	r1, #5
 8009e98:	f006 fea4 	bl	8010be4 <OS_task_post_event>

    /* send to esp32 */
    char buffer_send[200];
    memset(buffer_send,0,200);
 8009e9c:	f107 0310 	add.w	r3, r7, #16
 8009ea0:	22c8      	movs	r2, #200	@ 0xc8
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f009 f907 	bl	80130b8 <memset>
    sprintf(buffer_send,"%s,%s",screen_obj->Wifi_setting.Name_Wifi,screen_obj->Wifi_setting.Password_Wifi);
 8009eaa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009eae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f503 62a5 	add.w	r2, r3, #1320	@ 0x528
 8009eb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009ebc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 8009ec6:	f107 0010 	add.w	r0, r7, #16
 8009eca:	4934      	ldr	r1, [pc, #208]	@ (8009f9c <Enter_setting_wifi+0x290>)
 8009ecc:	f008 ffea 	bl	8012ea4 <siprintf>
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 8009ed0:	2008      	movs	r0, #8
 8009ed2:	f007 f8b9 	bl	8011048 <malloc>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	461a      	mov	r2, r3
 8009eda:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009ede:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ee2:	601a      	str	r2, [r3, #0]
    data_send_esp32->data = (char *)malloc(strlen(buffer_send));
 8009ee4:	f107 0310 	add.w	r3, r7, #16
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7f6 f93b 	bl	8000164 <strlen>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009ef4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ef8:	681c      	ldr	r4, [r3, #0]
 8009efa:	4610      	mov	r0, r2
 8009efc:	f007 f8a4 	bl	8011048 <malloc>
 8009f00:	4603      	mov	r3, r0
 8009f02:	6023      	str	r3, [r4, #0]
    buffer_send[strlen(buffer_send)] = '\n';
 8009f04:	f107 0310 	add.w	r3, r7, #16
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7f6 f92b 	bl	8000164 <strlen>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f18:	210a      	movs	r1, #10
 8009f1a:	5499      	strb	r1, [r3, r2]
    memcpy(data_send_esp32->data,"w",screen_obj->modify_program_index + 1);
 8009f1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009f20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6818      	ldr	r0, [r3, #0]
 8009f28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009f2c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f893 35b6 	ldrb.w	r3, [r3, #1462]	@ 0x5b6
 8009f36:	3301      	adds	r3, #1
 8009f38:	461a      	mov	r2, r3
 8009f3a:	491a      	ldr	r1, [pc, #104]	@ (8009fa4 <Enter_setting_wifi+0x298>)
 8009f3c:	f009 fa11 	bl	8013362 <memcpy>
    memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send)+1);
 8009f40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009f44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	1c5c      	adds	r4, r3, #1
 8009f4e:	f107 0310 	add.w	r3, r7, #16
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7f6 f906 	bl	8000164 <strlen>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	1c5a      	adds	r2, r3, #1
 8009f5c:	f107 0310 	add.w	r3, r7, #16
 8009f60:	4619      	mov	r1, r3
 8009f62:	4620      	mov	r0, r4
 8009f64:	f009 f9fd 	bl	8013362 <memcpy>
    data_send_esp32->len = strlen(buffer_send) + 2;
 8009f68:	f107 0310 	add.w	r3, r7, #16
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7f6 f8f9 	bl	8000164 <strlen>
 8009f72:	4602      	mov	r2, r0
 8009f74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009f78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3202      	adds	r2, #2
 8009f80:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 8009f82:	4b09      	ldr	r3, [pc, #36]	@ (8009fa8 <Enter_setting_wifi+0x29c>)
 8009f84:	6818      	ldr	r0, [r3, #0]
 8009f86:	f107 020c 	add.w	r2, r7, #12
 8009f8a:	2308      	movs	r3, #8
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	f006 fe29 	bl	8010be4 <OS_task_post_event>
}
 8009f92:	bf00      	nop
 8009f94:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9c:	08015b04 	.word	0x08015b04
 8009fa0:	08016808 	.word	0x08016808
 8009fa4:	08015b0c 	.word	0x08015b0c
 8009fa8:	08016810 	.word	0x08016810

08009fac <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	789b      	ldrb	r3, [r3, #2]
 8009fba:	2bf3      	cmp	r3, #243	@ 0xf3
 8009fbc:	d116      	bne.n	8009fec <Keyboard+0x40>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 8096 	beq.w	800a0f6 <Keyboard+0x14a>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String - 1] = 0;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	739a      	strb	r2, [r3, #14]
            --screen_obj->Screen_keyboard.Index_String;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8009fea:	e084      	b.n	800a0f6 <Keyboard+0x14a>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	789b      	ldrb	r3, [r3, #2]
 8009ff0:	2bf4      	cmp	r3, #244	@ 0xf4
 8009ff2:	d11a      	bne.n	800a02a <Keyboard+0x7e>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	bf14      	ite	ne
 8009ffe:	2301      	movne	r3, #1
 800a000:	2300      	moveq	r3, #0
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f083 0301 	eor.w	r3, r3, #1
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a01c:	461a      	mov	r2, r3
 800a01e:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f005 fc39 	bl	800f89a <DWIN_SetVariable_Icon>
 800a028:	e065      	b.n	800a0f6 <Keyboard+0x14a>
    } else if (screen_event->data == 0xF2) { // Space button
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	789b      	ldrb	r3, [r3, #2]
 800a02e:	2bf2      	cmp	r3, #242	@ 0xf2
 800a030:	d061      	beq.n	800a0f6 <Keyboard+0x14a>
        // screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = 32;
    } else if (screen_event->data == 0xF1) { // Enter button
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	789b      	ldrb	r3, [r3, #2]
 800a036:	2bf1      	cmp	r3, #241	@ 0xf1
 800a038:	d11e      	bne.n	800a078 <Keyboard+0xcc>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f9b2 	bl	800a3a4 <Screen_CheckInput_Keyboard>
 800a040:	4603      	mov	r3, r0
 800a042:	2b01      	cmp	r3, #1
 800a044:	d157      	bne.n	800a0f6 <Keyboard+0x14a>
            // get data
            get_input_keyboard((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	899b      	ldrh	r3, [r3, #12]
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f003 faa3 	bl	800d598 <get_input_keyboard>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	8999      	ldrh	r1, [r3, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f103 020e 	add.w	r2, r3, #14
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f005 fb66 	bl	800f734 <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 35b4 	ldrb.w	r3, [r3, #1460]	@ 0x5b4
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f005 fb38 	bl	800f6e6 <DWIN_SetPage>
 800a076:	e03e      	b.n	800a0f6 <Keyboard+0x14a>
        } 
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	789b      	ldrb	r3, [r3, #2]
 800a07c:	2b40      	cmp	r3, #64	@ 0x40
 800a07e:	d92c      	bls.n	800a0da <Keyboard+0x12e>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	789b      	ldrb	r3, [r3, #2]
 800a084:	2b5a      	cmp	r3, #90	@ 0x5a
 800a086:	d828      	bhi.n	800a0da <Keyboard+0x12e>
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a08e:	f083 0301 	eor.w	r3, r3, #1
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d011      	beq.n	800a0bc <Keyboard+0x110>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	789a      	ldrb	r2, [r3, #2]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a0a2:	1c59      	adds	r1, r3, #1
 800a0a4:	b288      	uxth	r0, r1
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f102 0320 	add.w	r3, r2, #32
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	440b      	add	r3, r1
 800a0b8:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 800a0ba:	e01c      	b.n	800a0f6 <Keyboard+0x14a>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a0c2:	1c5a      	adds	r2, r3, #1
 800a0c4:	b291      	uxth	r1, r2
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	789a      	ldrb	r2, [r3, #2]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	440b      	add	r3, r1
 800a0d6:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 800a0d8:	e00d      	b.n	800a0f6 <Keyboard+0x14a>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	b291      	uxth	r1, r2
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	789a      	ldrb	r2, [r3, #2]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	440b      	add	r3, r1
 800a0f4:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f103 020e 	add.w	r2, r3, #14
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a102:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f005 fb14 	bl	800f734 <DWIN_SetText>
}
 800a10c:	bf00      	nop
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	6039      	str	r1, [r7, #0]
 800a11e:	80fb      	strh	r3, [r7, #6]
 800a120:	4613      	mov	r3, r2
 800a122:	717b      	strb	r3, [r7, #5]
    int left = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 800a128:	797b      	ldrb	r3, [r7, #5]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	613b      	str	r3, [r7, #16]
    int mid;

    while (left <= right) {
 800a12e:	e023      	b.n	800a178 <Index_VP+0x64>
        mid = (left + right) / 2;
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	4413      	add	r3, r2
 800a136:	0fda      	lsrs	r2, r3, #31
 800a138:	4413      	add	r3, r2
 800a13a:	105b      	asrs	r3, r3, #1
 800a13c:	60fb      	str	r3, [r7, #12]
        if (VP_array[mid].VP_address == vp) {
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	4413      	add	r3, r2
 800a146:	881b      	ldrh	r3, [r3, #0]
 800a148:	88fa      	ldrh	r2, [r7, #6]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d105      	bne.n	800a15a <Index_VP+0x46>
            return VP_array[mid].index;  // Found the vp
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	4413      	add	r3, r2
 800a156:	789b      	ldrb	r3, [r3, #2]
 800a158:	e013      	b.n	800a182 <Index_VP+0x6e>
        } else if (VP_array[mid].VP_address > vp) {
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	4413      	add	r3, r2
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	88fa      	ldrh	r2, [r7, #6]
 800a166:	429a      	cmp	r2, r3
 800a168:	d203      	bcs.n	800a172 <Index_VP+0x5e>
            right = mid - 1;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	613b      	str	r3, [r7, #16]
 800a170:	e002      	b.n	800a178 <Index_VP+0x64>
        } else {
            left = mid + 1;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3301      	adds	r3, #1
 800a176:	617b      	str	r3, [r7, #20]
    while (left <= right) {
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	ddd7      	ble.n	800a130 <Index_VP+0x1c>
        }
    }

    return 255;  // VP not found
 800a180:	23ff      	movs	r3, #255	@ 0xff
}
 800a182:	4618      	mov	r0, r3
 800a184:	371c      	adds	r7, #28
 800a186:	46bd      	mov	sp, r7
 800a188:	bc80      	pop	{r7}
 800a18a:	4770      	bx	lr

0800a18c <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig,
                                                                a_handler_enter_sig };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page;
 800a194:	4b46      	ldr	r3, [pc, #280]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a46      	ldr	r2, [pc, #280]	@ (800a2b4 <Screen_init_handler_table+0x128>)
 800a19a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_RETURN]               = Navigation_return;
 800a19c:	4b44      	ldr	r3, [pc, #272]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4a45      	ldr	r2, [pc, #276]	@ (800a2b8 <Screen_init_handler_table+0x12c>)
 800a1a4:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
 800a1a6:	4b42      	ldr	r3, [pc, #264]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3308      	adds	r3, #8
 800a1ac:	4a43      	ldr	r2, [pc, #268]	@ (800a2bc <Screen_init_handler_table+0x130>)
 800a1ae:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
 800a1b0:	4b3f      	ldr	r3, [pc, #252]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3314      	adds	r3, #20
 800a1b6:	4a42      	ldr	r2, [pc, #264]	@ (800a2c0 <Screen_init_handler_table+0x134>)
 800a1b8:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
 800a1ba:	4b3d      	ldr	r3, [pc, #244]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	330c      	adds	r3, #12
 800a1c0:	4a40      	ldr	r2, [pc, #256]	@ (800a2c4 <Screen_init_handler_table+0x138>)
 800a1c2:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_WIFI]         = Navigation_setting_wifi;
 800a1c4:	4b3a      	ldr	r3, [pc, #232]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3310      	adds	r3, #16
 800a1ca:	4a3f      	ldr	r2, [pc, #252]	@ (800a2c8 <Screen_init_handler_table+0x13c>)
 800a1cc:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
 800a1ce:	4b38      	ldr	r3, [pc, #224]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3328      	adds	r3, #40	@ 0x28
 800a1d4:	4a3d      	ldr	r2, [pc, #244]	@ (800a2cc <Screen_init_handler_table+0x140>)
 800a1d6:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_DETAIL_MAINPAGE]      = Navigation_detail_mainpage;
 800a1d8:	4b35      	ldr	r3, [pc, #212]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	332c      	adds	r3, #44	@ 0x2c
 800a1de:	4a3c      	ldr	r2, [pc, #240]	@ (800a2d0 <Screen_init_handler_table+0x144>)
 800a1e0:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_GRAPH_MAINPAGE]       = Navigation_graph_mainpage;
 800a1e2:	4b33      	ldr	r3, [pc, #204]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3330      	adds	r3, #48	@ 0x30
 800a1e8:	4a3a      	ldr	r2, [pc, #232]	@ (800a2d4 <Screen_init_handler_table+0x148>)
 800a1ea:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
 800a1ec:	4b30      	ldr	r3, [pc, #192]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3318      	adds	r3, #24
 800a1f2:	4a39      	ldr	r2, [pc, #228]	@ (800a2d8 <Screen_init_handler_table+0x14c>)
 800a1f4:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
 800a1f6:	4b2e      	ldr	r3, [pc, #184]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	331c      	adds	r3, #28
 800a1fc:	4a37      	ldr	r2, [pc, #220]	@ (800a2dc <Screen_init_handler_table+0x150>)
 800a1fe:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASE_PULSE]    = Navigation_Change_CasePulse;
 800a200:	4b2b      	ldr	r3, [pc, #172]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3334      	adds	r3, #52	@ 0x34
 800a206:	4a36      	ldr	r2, [pc, #216]	@ (800a2e0 <Screen_init_handler_table+0x154>)
 800a208:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_FINISH_REVIEW]        = Navigation_Finish_Review;
 800a20a:	4b29      	ldr	r3, [pc, #164]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3338      	adds	r3, #56	@ 0x38
 800a210:	4a34      	ldr	r2, [pc, #208]	@ (800a2e4 <Screen_init_handler_table+0x158>)
 800a212:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_INFORMATION]          = Navigation_Information;
 800a214:	4b26      	ldr	r3, [pc, #152]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3320      	adds	r3, #32
 800a21a:	4a33      	ldr	r2, [pc, #204]	@ (800a2e8 <Screen_init_handler_table+0x15c>)
 800a21c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_LOGGING]              = Navigation_Logging;
 800a21e:	4b24      	ldr	r3, [pc, #144]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3324      	adds	r3, #36	@ 0x24
 800a224:	4a31      	ldr	r2, [pc, #196]	@ (800a2ec <Screen_init_handler_table+0x160>)
 800a226:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_DATALOG]       = Navigation_Change_DataLog;
 800a228:	4b21      	ldr	r3, [pc, #132]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	333c      	adds	r3, #60	@ 0x3c
 800a22e:	4a30      	ldr	r2, [pc, #192]	@ (800a2f0 <Screen_init_handler_table+0x164>)
 800a230:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SHUTDOWN]             = Navigation_Shutdown;
 800a232:	4b1f      	ldr	r3, [pc, #124]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3340      	adds	r3, #64	@ 0x40
 800a238:	4a2e      	ldr	r2, [pc, #184]	@ (800a2f4 <Screen_init_handler_table+0x168>)
 800a23a:	601a      	str	r2, [r3, #0]
    
    handler_function_table[SIG_SELECTION][ON_OFF_DEV]                       = ON_OFF_Button;
 800a23c:	4b1c      	ldr	r3, [pc, #112]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	4a2d      	ldr	r2, [pc, #180]	@ (800a2f8 <Screen_init_handler_table+0x16c>)
 800a242:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SELECT_PROGRAM]                   = select_running_program;
 800a244:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	3304      	adds	r3, #4
 800a24a:	4a2c      	ldr	r2, [pc, #176]	@ (800a2fc <Screen_init_handler_table+0x170>)
 800a24c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SElECT_MODIFY_PROGRAM]            = select_modify_program;
 800a24e:	4b18      	ldr	r3, [pc, #96]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	3308      	adds	r3, #8
 800a254:	4a2a      	ldr	r2, [pc, #168]	@ (800a300 <Screen_init_handler_table+0x174>)
 800a256:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
 800a258:	4b15      	ldr	r3, [pc, #84]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	4a29      	ldr	r2, [pc, #164]	@ (800a304 <Screen_init_handler_table+0x178>)
 800a25e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;
 800a260:	4b13      	ldr	r3, [pc, #76]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	4a28      	ldr	r2, [pc, #160]	@ (800a308 <Screen_init_handler_table+0x17c>)
 800a266:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;
 800a268:	4b11      	ldr	r3, [pc, #68]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a26a:	695b      	ldr	r3, [r3, #20]
 800a26c:	4a27      	ldr	r2, [pc, #156]	@ (800a30c <Screen_init_handler_table+0x180>)
 800a26e:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_ENTER][ENTER_PASSWORD]                       = Enter_password;
 800a270:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	4a26      	ldr	r2, [pc, #152]	@ (800a310 <Screen_init_handler_table+0x184>)
 800a276:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_NUM_KEYBOARD]                   = Enter_num_keyboard;
 800a278:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	3304      	adds	r3, #4
 800a27e:	4a25      	ldr	r2, [pc, #148]	@ (800a314 <Screen_init_handler_table+0x188>)
 800a280:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_TIME]                           = Enter_setting_time;
 800a282:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	330c      	adds	r3, #12
 800a288:	4a23      	ldr	r2, [pc, #140]	@ (800a318 <Screen_init_handler_table+0x18c>)
 800a28a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_WIFI]                           = Enter_setting_wifi;
 800a28c:	4b08      	ldr	r3, [pc, #32]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	3308      	adds	r3, #8
 800a292:	4a22      	ldr	r2, [pc, #136]	@ (800a31c <Screen_init_handler_table+0x190>)
 800a294:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;
 800a296:	4b06      	ldr	r3, [pc, #24]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	4a21      	ldr	r2, [pc, #132]	@ (800a320 <Screen_init_handler_table+0x194>)
 800a29c:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a03      	ldr	r2, [pc, #12]	@ (800a2b0 <Screen_init_handler_table+0x124>)
 800a2a2:	f8c3 25b0 	str.w	r2, [r3, #1456]	@ 0x5b0
}
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bc80      	pop	{r7}
 800a2ae:	4770      	bx	lr
 800a2b0:	20000150 	.word	0x20000150
 800a2b4:	08007305 	.word	0x08007305
 800a2b8:	08007381 	.word	0x08007381
 800a2bc:	08007343 	.word	0x08007343
 800a2c0:	08007491 	.word	0x08007491
 800a2c4:	080074d9 	.word	0x080074d9
 800a2c8:	08007587 	.word	0x08007587
 800a2cc:	080075ed 	.word	0x080075ed
 800a2d0:	080076f7 	.word	0x080076f7
 800a2d4:	08007761 	.word	0x08007761
 800a2d8:	080077af 	.word	0x080077af
 800a2dc:	08007855 	.word	0x08007855
 800a2e0:	08007a65 	.word	0x08007a65
 800a2e4:	08007b39 	.word	0x08007b39
 800a2e8:	080082fd 	.word	0x080082fd
 800a2ec:	08008319 	.word	0x08008319
 800a2f0:	08008389 	.word	0x08008389
 800a2f4:	080084a1 	.word	0x080084a1
 800a2f8:	0800850d 	.word	0x0800850d
 800a2fc:	0800898d 	.word	0x0800898d
 800a300:	080089b1 	.word	0x080089b1
 800a304:	08008ac9 	.word	0x08008ac9
 800a308:	08008ba5 	.word	0x08008ba5
 800a30c:	08008bf9 	.word	0x08008bf9
 800a310:	08009731 	.word	0x08009731
 800a314:	080098b5 	.word	0x080098b5
 800a318:	08009c41 	.word	0x08009c41
 800a31c:	08009d0d 	.word	0x08009d0d
 800a320:	08009fad 	.word	0x08009fad

0800a324 <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
    // do sth ...
	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800a334:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d107      	bne.n	800a34e <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3308      	adds	r3, #8
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	4798      	blx	r3
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}
 800a34c:	e025      	b.n	800a39a <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b03      	cmp	r3, #3
 800a354:	d107      	bne.n	800a366 <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	330c      	adds	r3, #12
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
}
 800a364:	e019      	b.n	800a39a <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d107      	bne.n	800a37e <Screen_excute_RX_function+0x5a>
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3310      	adds	r3, #16
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	4798      	blx	r3
}
 800a37c:	e00d      	b.n	800a39a <Screen_excute_RX_function+0x76>
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	4413      	add	r3, r2
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	785b      	ldrb	r3, [r3, #1]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	4798      	blx	r3
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const screen_obj) {
 800a3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3a8:	b08f      	sub	sp, #60	@ 0x3c
 800a3aa:	af02      	add	r7, sp, #8
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	466b      	mov	r3, sp
 800a3b0:	461e      	mov	r6, r3
    char string[screen_obj->Screen_keyboard.Index_String];
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3be:	b28b      	uxth	r3, r1
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4698      	mov	r8, r3
 800a3c4:	4691      	mov	r9, r2
 800a3c6:	f04f 0200 	mov.w	r2, #0
 800a3ca:	f04f 0300 	mov.w	r3, #0
 800a3ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a3d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a3d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a3da:	b28b      	uxth	r3, r1
 800a3dc:	2200      	movs	r2, #0
 800a3de:	461c      	mov	r4, r3
 800a3e0:	4615      	mov	r5, r2
 800a3e2:	f04f 0200 	mov.w	r2, #0
 800a3e6:	f04f 0300 	mov.w	r3, #0
 800a3ea:	00eb      	lsls	r3, r5, #3
 800a3ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3f0:	00e2      	lsls	r2, r4, #3
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	3307      	adds	r3, #7
 800a3f6:	08db      	lsrs	r3, r3, #3
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	ebad 0d03 	sub.w	sp, sp, r3
 800a3fe:	ab02      	add	r3, sp, #8
 800a400:	3300      	adds	r3, #0
 800a402:	62bb      	str	r3, [r7, #40]	@ 0x28
    char warm_string[20] = {0};
 800a404:	f107 030c 	add.w	r3, r7, #12
 800a408:	2200      	movs	r2, #0
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	605a      	str	r2, [r3, #4]
 800a40e:	609a      	str	r2, [r3, #8]
 800a410:	60da      	str	r2, [r3, #12]
 800a412:	611a      	str	r2, [r3, #16]
    float data_compare;
    uint8_t index_condition;
    // copy string
    memcpy(string,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f103 010e 	add.w	r1, r3, #14
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a420:	461a      	mov	r2, r3
 800a422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a424:	f008 ff9d 	bl	8013362 <memcpy>
    string[screen_obj->Screen_keyboard.Index_String] = '\0';
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a42e:	461a      	mov	r2, r3
 800a430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a432:	2100      	movs	r1, #0
 800a434:	5499      	strb	r1, [r3, r2]
    /* get index correspond with vp */
    index_condition = Index_VP(screen_obj->Screen_keyboard.VP_Text,lookup_VP_condition,(sizeof(lookup_VP_condition)/ sizeof(lookup_VP_condition[0])));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	899b      	ldrh	r3, [r3, #12]
 800a43a:	2207      	movs	r2, #7
 800a43c:	4938      	ldr	r1, [pc, #224]	@ (800a520 <Screen_CheckInput_Keyboard+0x17c>)
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff fe68 	bl	800a114 <Index_VP>
 800a444:	4603      	mov	r3, r0
 800a446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* compare data with limit */
    data_compare = atof(string);
 800a44a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a44c:	f006 fdf4 	bl	8011038 <atof>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4610      	mov	r0, r2
 800a456:	4619      	mov	r1, r3
 800a458:	f7f6 fb40 	bl	8000adc <__aeabi_d2f>
 800a45c:	4603      	mov	r3, r0
 800a45e:	623b      	str	r3, [r7, #32]
    if (data_compare > screen_obj->Screen_condition[index_condition].max_value) {
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a468:	00db      	lsls	r3, r3, #3
 800a46a:	4413      	add	r3, r2
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4619      	mov	r1, r3
 800a470:	6a38      	ldr	r0, [r7, #32]
 800a472:	f7f6 fbef 	bl	8000c54 <__aeabi_fcmpgt>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d01d      	beq.n	800a4b8 <Screen_CheckInput_Keyboard+0x114>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", screen_obj->Screen_condition[index_condition].max_value);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	4413      	add	r3, r2
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7f5 ffd6 	bl	800043c <__aeabi_f2d>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	f107 000c 	add.w	r0, r7, #12
 800a498:	e9cd 2300 	strd	r2, r3, [sp]
 800a49c:	4a21      	ldr	r2, [pc, #132]	@ (800a524 <Screen_CheckInput_Keyboard+0x180>)
 800a49e:	2114      	movs	r1, #20
 800a4a0:	f008 fcca 	bl	8012e38 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800a4a4:	f107 020c 	add.w	r2, r7, #12
 800a4a8:	2314      	movs	r3, #20
 800a4aa:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f005 f940 	bl	800f734 <DWIN_SetText>
        return Status_ERROR;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e02c      	b.n	800a512 <Screen_CheckInput_Keyboard+0x16e>
    } else if (data_compare < screen_obj->Screen_condition[index_condition].min_value) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4c0:	00db      	lsls	r3, r3, #3
 800a4c2:	4413      	add	r3, r2
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	6a38      	ldr	r0, [r7, #32]
 800a4ca:	f7f6 fba5 	bl	8000c18 <__aeabi_fcmplt>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01d      	beq.n	800a510 <Screen_CheckInput_Keyboard+0x16c>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", screen_obj->Screen_condition[index_condition].min_value);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4dc:	00db      	lsls	r3, r3, #3
 800a4de:	4413      	add	r3, r2
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7f5 ffaa 	bl	800043c <__aeabi_f2d>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	f107 000c 	add.w	r0, r7, #12
 800a4f0:	e9cd 2300 	strd	r2, r3, [sp]
 800a4f4:	4a0c      	ldr	r2, [pc, #48]	@ (800a528 <Screen_CheckInput_Keyboard+0x184>)
 800a4f6:	2114      	movs	r1, #20
 800a4f8:	f008 fc9e 	bl	8012e38 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800a4fc:	f107 020c 	add.w	r2, r7, #12
 800a500:	2314      	movs	r3, #20
 800a502:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f005 f914 	bl	800f734 <DWIN_SetText>
        return Status_ERROR;
 800a50c:	2300      	movs	r3, #0
 800a50e:	e000      	b.n	800a512 <Screen_CheckInput_Keyboard+0x16e>
    } 
    return Status_SUCCESS; 
 800a510:	2301      	movs	r3, #1
 800a512:	46b5      	mov	sp, r6
}
 800a514:	4618      	mov	r0, r3
 800a516:	3734      	adds	r7, #52	@ 0x34
 800a518:	46bd      	mov	sp, r7
 800a51a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a51e:	bf00      	nop
 800a520:	20000028 	.word	0x20000028
 800a524:	08015b10 	.word	0x08015b10
 800a528:	08015b1c 	.word	0x08015b1c

0800a52c <Screen_GetIcon_Pin>:
 * @brief Function used to setup icon with data test
 * 
 * @param obj_screen : object screen
 * @param data_pin : array 2d data test
 */
static void Screen_GetIcon_Pin(Screen_t *const screen_obj, char *data_pin) {
 800a52c:	b590      	push	{r4, r7, lr}
 800a52e:	b0a5      	sub	sp, #148	@ 0x94
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a53c:	4619      	mov	r1, r3
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a544:	fb01 f303 	mul.w	r3, r1, r3
 800a548:	4413      	add	r3, r2
 800a54a:	334b      	adds	r3, #75	@ 0x4b
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	4619      	mov	r1, r3
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	440b      	add	r3, r1
 800a558:	011b      	lsls	r3, r3, #4
 800a55a:	4413      	add	r3, r2
 800a55c:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    
    uint8_t map_array[128] = {0};
 800a566:	f107 030c 	add.w	r3, r7, #12
 800a56a:	2280      	movs	r2, #128	@ 0x80
 800a56c:	2100      	movs	r1, #0
 800a56e:	4618      	mov	r0, r3
 800a570:	f008 fda2 	bl	80130b8 <memset>
    map_array['G'] = ICON_GND;
 800a574:	2302      	movs	r3, #2
 800a576:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    map_array['V'] = ICON_VCC;
 800a57a:	2303      	movs	r3, #3
 800a57c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = malloc(num_pin * sizeof(uint8_t));
 800a580:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a58a:	461c      	mov	r4, r3
 800a58c:	4610      	mov	r0, r2
 800a58e:	f006 fd5b 	bl	8011048 <malloc>
 800a592:	4603      	mov	r3, r0
 800a594:	4619      	mov	r1, r3
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a59c:	fb04 f303 	mul.w	r3, r4, r3
 800a5a0:	4413      	add	r3, r2
 800a5a2:	335c      	adds	r3, #92	@ 0x5c
 800a5a4:	6019      	str	r1, [r3, #0]

    /* Convert data to icon pin config */
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a5ac:	e03c      	b.n	800a628 <Screen_GetIcon_Pin+0xfc>
        if (Pin_x >= 8) {
 800a5ae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a5b2:	2b07      	cmp	r3, #7
 800a5b4:	d90c      	bls.n	800a5d0 <Screen_GetIcon_Pin+0xa4>
            map_array['0'] = ICON_OUTPUT;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_OUTPUT;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_INPUT;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_INPUT;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 800a5ce:	e00b      	b.n	800a5e8 <Screen_GetIcon_Pin+0xbc>
        } else {
            map_array['0'] = ICON_INPUT;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_INPUT;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_OUTPUT;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_OUTPUT;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        }
        screen_obj->IC_Testerx[screen_obj->curr_device].config_pin[Pin_x] = map_array[(uint8_t)(data_pin[Pin_x])];
 800a5e8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a602:	fb00 f303 	mul.w	r3, r0, r3
 800a606:	4413      	add	r3, r2
 800a608:	335c      	adds	r3, #92	@ 0x5c
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a610:	4413      	add	r3, r2
 800a612:	f101 0290 	add.w	r2, r1, #144	@ 0x90
 800a616:	443a      	add	r2, r7
 800a618:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800a61c:	701a      	strb	r2, [r3, #0]
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800a61e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a622:	3301      	adds	r3, #1
 800a624:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a628:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800a62c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800a630:	429a      	cmp	r2, r3
 800a632:	d3bc      	bcc.n	800a5ae <Screen_GetIcon_Pin+0x82>
    }
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop
 800a638:	3794      	adds	r7, #148	@ 0x94
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd90      	pop	{r4, r7, pc}

0800a63e <Screen_GetIcon_Result>:

static void Screen_GetIcon_Result(Screen_t *const screen_obj, char *result) {
 800a63e:	b590      	push	{r4, r7, lr}
 800a640:	b0a5      	sub	sp, #148	@ 0x94
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	6039      	str	r1, [r7, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a64e:	4619      	mov	r1, r3
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a656:	fb01 f303 	mul.w	r3, r1, r3
 800a65a:	4413      	add	r3, r2
 800a65c:	334b      	adds	r3, #75	@ 0x4b
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800a664:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800a668:	6879      	ldr	r1, [r7, #4]
 800a66a:	4613      	mov	r3, r2
 800a66c:	005b      	lsls	r3, r3, #1
 800a66e:	4413      	add	r3, r2
 800a670:	011b      	lsls	r3, r3, #4
 800a672:	440b      	add	r3, r1
 800a674:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800a67e:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	4613      	mov	r3, r2
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	4413      	add	r3, r2
 800a68a:	011b      	lsls	r3, r3, #4
 800a68c:	440b      	add	r3, r1
 800a68e:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
    uint8_t map_array[128] = {0};
 800a698:	f107 030c 	add.w	r3, r7, #12
 800a69c:	2280      	movs	r2, #128	@ 0x80
 800a69e:	2100      	movs	r1, #0
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f008 fd09 	bl	80130b8 <memset>
    map_array['0'] = ICON_LOGIC_LOW;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    map_array['1'] = ICON_LOGIC_HIGH;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    map_array['3'] = ICON_CLOCK_HIGH;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    map_array['4'] = ICON_CLOCK_LOW;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].icon_result = malloc(num_case * num_pin);
 800a6be:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800a6c2:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800a6c6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a6d2:	461c      	mov	r4, r3
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	f006 fcb7 	bl	8011048 <malloc>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	4619      	mov	r1, r3
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a6e4:	fb04 f303 	mul.w	r3, r4, r3
 800a6e8:	4413      	add	r3, r2
 800a6ea:	3364      	adds	r3, #100	@ 0x64
 800a6ec:	6019      	str	r1, [r3, #0]

    /* Convert data to icon result */
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a6f4:	e01f      	b.n	800a736 <Screen_GetIcon_Result+0xf8>
        screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[i] = map_array[(uint8_t)result[i]];
 800a6f6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	4619      	mov	r1, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800a708:	4618      	mov	r0, r3
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a710:	fb00 f303 	mul.w	r3, r0, r3
 800a714:	4413      	add	r3, r2
 800a716:	3364      	adds	r3, #100	@ 0x64
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a71e:	4413      	add	r3, r2
 800a720:	f101 0290 	add.w	r2, r1, #144	@ 0x90
 800a724:	443a      	add	r2, r7
 800a726:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800a72a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800a72c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a730:	3301      	adds	r3, #1
 800a732:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a736:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800a73a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800a73e:	f897 108d 	ldrb.w	r1, [r7, #141]	@ 0x8d
 800a742:	fb01 f303 	mul.w	r3, r1, r3
 800a746:	429a      	cmp	r2, r3
 800a748:	dbd5      	blt.n	800a6f6 <Screen_GetIcon_Result+0xb8>
    }
}
 800a74a:	bf00      	nop
 800a74c:	bf00      	nop
 800a74e:	3794      	adds	r7, #148	@ 0x94
 800a750:	46bd      	mov	sp, r7
 800a752:	bd90      	pop	{r4, r7, pc}

0800a754 <Screen_Init_Variable>:

static void Screen_Init_Variable(Screen_t *const obj_screen) {
 800a754:	b590      	push	{r4, r7, lr}
 800a756:	b0fd      	sub	sp, #500	@ 0x1f4
 800a758:	af00      	add	r7, sp, #0
 800a75a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a75e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a762:	6018      	str	r0, [r3, #0]
    obj_screen->curr_device = DEVICE_1;
 800a764:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a768:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 25b5 	strb.w	r2, [r3, #1461]	@ 0x5b5
    //  obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
    //  obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
    //  obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
    //  obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a774:	2014      	movs	r0, #20
 800a776:	f006 fc67 	bl	8011048 <malloc>
 800a77a:	4603      	mov	r3, r0
 800a77c:	461a      	mov	r2, r3
 800a77e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a782:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f8c3 2468 	str.w	r2, [r3, #1128]	@ 0x468
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a78c:	2014      	movs	r0, #20
 800a78e:	f006 fc5b 	bl	8011048 <malloc>
 800a792:	4603      	mov	r3, r0
 800a794:	461a      	mov	r2, r3
 800a796:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a79a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a7a4:	2014      	movs	r0, #20
 800a7a6:	f006 fc4f 	bl	8011048 <malloc>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a7b2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f8c3 24c8 	str.w	r2, [r3, #1224]	@ 0x4c8
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800a7bc:	2014      	movs	r0, #20
 800a7be:	f006 fc43 	bl	8011048 <malloc>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a7ca:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a7d4:	2014      	movs	r0, #20
 800a7d6:	f006 fc37 	bl	8011048 <malloc>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	461a      	mov	r2, r3
 800a7de:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a7e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a7ec:	2014      	movs	r0, #20
 800a7ee:	f006 fc2b 	bl	8011048 <malloc>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a7fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a804:	2014      	movs	r0, #20
 800a806:	f006 fc1f 	bl	8011048 <malloc>
 800a80a:	4603      	mov	r3, r0
 800a80c:	461a      	mov	r2, r3
 800a80e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a812:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800a81c:	2014      	movs	r0, #20
 800a81e:	f006 fc13 	bl	8011048 <malloc>
 800a822:	4603      	mov	r3, r0
 800a824:	461a      	mov	r2, r3
 800a826:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a82a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a834:	2002      	movs	r0, #2
 800a836:	f006 fc07 	bl	8011048 <malloc>
 800a83a:	4603      	mov	r3, r0
 800a83c:	461a      	mov	r2, r3
 800a83e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a842:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f8c3 2478 	str.w	r2, [r3, #1144]	@ 0x478
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a84c:	2002      	movs	r0, #2
 800a84e:	f006 fbfb 	bl	8011048 <malloc>
 800a852:	4603      	mov	r3, r0
 800a854:	461a      	mov	r2, r3
 800a856:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a85a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a864:	2002      	movs	r0, #2
 800a866:	f006 fbef 	bl	8011048 <malloc>
 800a86a:	4603      	mov	r3, r0
 800a86c:	461a      	mov	r2, r3
 800a86e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a872:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800a87c:	2002      	movs	r0, #2
 800a87e:	f006 fbe3 	bl	8011048 <malloc>
 800a882:	4603      	mov	r3, r0
 800a884:	461a      	mov	r2, r3
 800a886:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a88a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508

    uint8_t buffer[TOTAL_ONE_PROGRAM_TEST_LEN];
    memset(buffer,0,TOTAL_ONE_PROGRAM_TEST_LEN);
 800a894:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a898:	222a      	movs	r2, #42	@ 0x2a
 800a89a:	2100      	movs	r1, #0
 800a89c:	4618      	mov	r0, r3
 800a89e:	f008 fc0b 	bl	80130b8 <memset>
    for (uint8_t i = 0; i < 4; i++) {
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 800a8a8:	e080      	b.n	800a9ac <Screen_Init_Variable+0x258>
        AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(i),&buffer[0],TOTAL_ONE_PROGRAM_TEST_LEN);
 800a8aa:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	0052      	lsls	r2, r2, #1
 800a8b4:	4413      	add	r3, r2
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	00d2      	lsls	r2, r2, #3
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	005b      	lsls	r3, r3, #1
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	3343      	adds	r3, #67	@ 0x43
 800a8c2:	b299      	uxth	r1, r3
 800a8c4:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800a8c8:	232a      	movs	r3, #42	@ 0x2a
 800a8ca:	48e3      	ldr	r0, [pc, #908]	@ (800ac58 <Screen_Init_Variable+0x504>)
 800a8cc:	f004 fd95 	bl	800f3fa <AT24Cxx_read_buffer>
        char *copy_buf = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 800a8d0:	202a      	movs	r0, #42	@ 0x2a
 800a8d2:	f006 fbb9 	bl	8011048 <malloc>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        strcpy(copy_buf,buffer);
 800a8dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 800a8e6:	f008 fd26 	bl	8013336 <strcpy>
        char *pdata = strtok(copy_buf,",");
 800a8ea:	49dc      	ldr	r1, [pc, #880]	@ (800ac5c <Screen_Init_Variable+0x508>)
 800a8ec:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 800a8f0:	f008 fc3e 	bl	8013170 <strtok>
 800a8f4:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
        strcpy(obj_screen->Program_Testx[i].Name_Program,pdata);
 800a8f8:	f897 21ef 	ldrb.w	r2, [r7, #495]	@ 0x1ef
 800a8fc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a900:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a904:	6819      	ldr	r1, [r3, #0]
 800a906:	4613      	mov	r3, r2
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	4413      	add	r3, r2
 800a90c:	011b      	lsls	r3, r3, #4
 800a90e:	440b      	add	r3, r1
 800a910:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 800a91a:	4618      	mov	r0, r3
 800a91c:	f008 fd0b 	bl	8013336 <strcpy>
        pdata = strtok(NULL,",");
 800a920:	49ce      	ldr	r1, [pc, #824]	@ (800ac5c <Screen_Init_Variable+0x508>)
 800a922:	2000      	movs	r0, #0
 800a924:	f008 fc24 	bl	8013170 <strtok>
 800a928:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
        strcpy(obj_screen->Program_Testx[i].Name_IC,pdata);
 800a92c:	f897 21ef 	ldrb.w	r2, [r7, #495]	@ 0x1ef
 800a930:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a934:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a938:	6819      	ldr	r1, [r3, #0]
 800a93a:	4613      	mov	r3, r2
 800a93c:	005b      	lsls	r3, r3, #1
 800a93e:	4413      	add	r3, r2
 800a940:	011b      	lsls	r3, r3, #4
 800a942:	440b      	add	r3, r1
 800a944:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 800a94e:	4618      	mov	r0, r3
 800a950:	f008 fcf1 	bl	8013336 <strcpy>
        pdata = strtok(NULL,",");
 800a954:	49c1      	ldr	r1, [pc, #772]	@ (800ac5c <Screen_Init_Variable+0x508>)
 800a956:	2000      	movs	r0, #0
 800a958:	f008 fc0a 	bl	8013170 <strtok>
 800a95c:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
        snprintf(obj_screen->Program_Testx[i].num_IC, 2, "%c", pdata[0]);
 800a960:	f897 21ef 	ldrb.w	r2, [r7, #495]	@ 0x1ef
 800a964:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a968:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a96c:	6819      	ldr	r1, [r3, #0]
 800a96e:	4613      	mov	r3, r2
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	4413      	add	r3, r2
 800a974:	011b      	lsls	r3, r3, #4
 800a976:	440b      	add	r3, r1
 800a978:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800a97c:	6818      	ldr	r0, [r3, #0]
 800a97e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	4ab6      	ldr	r2, [pc, #728]	@ (800ac60 <Screen_Init_Variable+0x50c>)
 800a986:	2102      	movs	r1, #2
 800a988:	f008 fa56 	bl	8012e38 <sniprintf>
//        memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send) + 2);
//        data_send_esp32->data[strlen(buffer_send) + 2] = 0;
//        data_send_esp32->len = strlen(buffer_send) + 2;
//        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
//
        free(copy_buf);
 800a98c:	f8d7 01d0 	ldr.w	r0, [r7, #464]	@ 0x1d0
 800a990:	f006 fb62 	bl	8011058 <free>
        memset(buffer,0,TOTAL_ONE_PROGRAM_TEST_LEN);
 800a994:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a998:	222a      	movs	r2, #42	@ 0x2a
 800a99a:	2100      	movs	r1, #0
 800a99c:	4618      	mov	r0, r3
 800a99e:	f008 fb8b 	bl	80130b8 <memset>
    for (uint8_t i = 0; i < 4; i++) {
 800a9a2:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 800a9ac:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 800a9b0:	2b03      	cmp	r3, #3
 800a9b2:	f67f af7a 	bls.w	800a8aa <Screen_Init_Variable+0x156>
        // HAL_Delay(100);
    }

    memcpy(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,"IC TESTER 1",strlen("IC TESTER 1"));
 800a9b6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a9ba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	334d      	adds	r3, #77	@ 0x4d
 800a9c2:	220b      	movs	r2, #11
 800a9c4:	49a7      	ldr	r1, [pc, #668]	@ (800ac64 <Screen_Init_Variable+0x510>)
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f008 fccb 	bl	8013362 <memcpy>
    memcpy(obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester,"IC TESTER 2",strlen("IC TESTER 2"));
 800a9cc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a9d0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f203 13ad 	addw	r3, r3, #429	@ 0x1ad
 800a9da:	220b      	movs	r2, #11
 800a9dc:	49a2      	ldr	r1, [pc, #648]	@ (800ac68 <Screen_Init_Variable+0x514>)
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f008 fcbf 	bl	8013362 <memcpy>
    memcpy(obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester,"IC TESTER 3",strlen("IC TESTER 3"));
 800a9e4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800a9e8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f203 330d 	addw	r3, r3, #781	@ 0x30d
 800a9f2:	220b      	movs	r2, #11
 800a9f4:	499d      	ldr	r1, [pc, #628]	@ (800ac6c <Screen_Init_Variable+0x518>)
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f008 fcb3 	bl	8013362 <memcpy>

    char wifi_info[60] = {0};
 800a9fc:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800aa00:	223c      	movs	r2, #60	@ 0x3c
 800aa02:	2100      	movs	r1, #0
 800aa04:	4618      	mov	r0, r3
 800aa06:	f008 fb57 	bl	80130b8 <memset>
    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_WIFI_INFO,&wifi_info[0],DATA_LEN_WIFI_INFO);
 800aa0a:	f507 72b2 	add.w	r2, r7, #356	@ 0x164
 800aa0e:	233c      	movs	r3, #60	@ 0x3c
 800aa10:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800aa14:	4890      	ldr	r0, [pc, #576]	@ (800ac58 <Screen_Init_Variable+0x504>)
 800aa16:	f004 fcf0 	bl	800f3fa <AT24Cxx_read_buffer>
    char *pdata = strtok(wifi_info,",");
 800aa1a:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800aa1e:	498f      	ldr	r1, [pc, #572]	@ (800ac5c <Screen_Init_Variable+0x508>)
 800aa20:	4618      	mov	r0, r3
 800aa22:	f008 fba5 	bl	8013170 <strtok>
 800aa26:	f8c7 01e4 	str.w	r0, [r7, #484]	@ 0x1e4
    memcpy(obj_screen->Wifi_setting.Name_Wifi,pdata,strlen(pdata));
 800aa2a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aa2e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f503 64a5 	add.w	r4, r3, #1320	@ 0x528
 800aa38:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800aa3c:	f7f5 fb92 	bl	8000164 <strlen>
 800aa40:	4603      	mov	r3, r0
 800aa42:	461a      	mov	r2, r3
 800aa44:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f008 fc8a 	bl	8013362 <memcpy>
    pdata = strtok(NULL,",");
 800aa4e:	4983      	ldr	r1, [pc, #524]	@ (800ac5c <Screen_Init_Variable+0x508>)
 800aa50:	2000      	movs	r0, #0
 800aa52:	f008 fb8d 	bl	8013170 <strtok>
 800aa56:	f8c7 01e4 	str.w	r0, [r7, #484]	@ 0x1e4
    memcpy(obj_screen->Wifi_setting.Password_Wifi,pdata,strlen(pdata));
 800aa5a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aa5e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f203 5464 	addw	r4, r3, #1380	@ 0x564
 800aa68:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800aa6c:	f7f5 fb7a 	bl	8000164 <strlen>
 800aa70:	4603      	mov	r3, r0
 800aa72:	461a      	mov	r2, r3
 800aa74:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f008 fc72 	bl	8013362 <memcpy>

    memset(obj_screen->Wifi_setting.Name_Wifi_temp,0,sizeof(obj_screen->Wifi_setting.Name_Wifi_temp));
 800aa7e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aa82:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f203 5346 	addw	r3, r3, #1350	@ 0x546
 800aa8c:	221e      	movs	r2, #30
 800aa8e:	2100      	movs	r1, #0
 800aa90:	4618      	mov	r0, r3
 800aa92:	f008 fb11 	bl	80130b8 <memset>
    memset(obj_screen->Wifi_setting.Password_Wifi_temp,0,sizeof(obj_screen->Wifi_setting.Password_Wifi_temp));
 800aa96:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aa9a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f203 5382 	addw	r3, r3, #1410	@ 0x582
 800aaa4:	221e      	movs	r2, #30
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f008 fb05 	bl	80130b8 <memset>
//    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
    // memcpy(obj_screen->Wifi_setting.Name_Wifi,"Wifi TEST 1",strlen("Wifi TEST 1"));
    // memcpy(obj_screen->Wifi_setting.Password_Wifi,"PASSword 1234",strlen("PASSword 1234"));


    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
 800aaae:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aab2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2265      	movs	r2, #101	@ 0x65
 800aaba:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
 800aabe:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aac2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2265      	movs	r2, #101	@ 0x65
 800aaca:	f883 21a9 	strb.w	r2, [r3, #425]	@ 0x1a9
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 
 800aace:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aad2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2265      	movs	r2, #101	@ 0x65
 800aada:	f883 2309 	strb.w	r2, [r3, #777]	@ 0x309

    obj_screen->IC_Testerx[DEVICE_1].state = false;
 800aade:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aae2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    obj_screen->IC_Testerx[DEVICE_2].state = false;
 800aaee:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aaf2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 21ac 	strb.w	r2, [r3, #428]	@ 0x1ac
    obj_screen->IC_Testerx[DEVICE_3].state = false;
 800aafe:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ab02:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 230c 	strb.w	r2, [r3, #780]	@ 0x30c

    obj_screen->IC_Testerx[DEVICE_1].curr_num_ic = 0;
 800ab0e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ab12:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
 800ab1e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ab22:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f8d3 4468 	ldr.w	r4, [r3, #1128]	@ 0x468
 800ab2c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ab30:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f8d3 3468 	ldr.w	r3, [r3, #1128]	@ 0x468
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7f5 fb12 	bl	8000164 <strlen>
 800ab40:	4603      	mov	r3, r0
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800ab48:	f5a2 70f6 	sub.w	r0, r2, #492	@ 0x1ec
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	f249 2128 	movw	r1, #37416	@ 0x9228
 800ab52:	6800      	ldr	r0, [r0, #0]
 800ab54:	f004 fdee 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
 800ab58:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ab5c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f8d3 4498 	ldr.w	r4, [r3, #1176]	@ 0x498
 800ab66:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ab6a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7f5 faf5 	bl	8000164 <strlen>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800ab82:	f5a2 70f6 	sub.w	r0, r2, #492	@ 0x1ec
 800ab86:	4622      	mov	r2, r4
 800ab88:	f249 2150 	movw	r1, #37456	@ 0x9250
 800ab8c:	6800      	ldr	r0, [r0, #0]
 800ab8e:	f004 fdd1 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
 800ab92:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ab96:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f8d3 44c8 	ldr.w	r4, [r3, #1224]	@ 0x4c8
 800aba0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aba4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 800abae:	4618      	mov	r0, r3
 800abb0:	f7f5 fad8 	bl	8000164 <strlen>
 800abb4:	4603      	mov	r3, r0
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800abbc:	f5a2 70f6 	sub.w	r0, r2, #492	@ 0x1ec
 800abc0:	4622      	mov	r2, r4
 800abc2:	f249 2178 	movw	r1, #37496	@ 0x9278
 800abc6:	6800      	ldr	r0, [r0, #0]
 800abc8:	f004 fdb4 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));
 800abcc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800abd0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f8d3 44f8 	ldr.w	r4, [r3, #1272]	@ 0x4f8
 800abda:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800abde:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f5 fabb 	bl	8000164 <strlen>
 800abee:	4603      	mov	r3, r0
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800abf6:	f5a2 70f6 	sub.w	r0, r2, #492	@ 0x1ec
 800abfa:	4622      	mov	r2, r4
 800abfc:	f249 21a0 	movw	r1, #37536	@ 0x92a0
 800ac00:	6800      	ldr	r0, [r0, #0]
 800ac02:	f004 fd97 	bl	800f734 <DWIN_SetText>

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));
 800ac06:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ac0a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f103 044d 	add.w	r4, r3, #77	@ 0x4d
 800ac14:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ac18:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	334d      	adds	r3, #77	@ 0x4d
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7f5 fa9f 	bl	8000164 <strlen>
 800ac26:	4603      	mov	r3, r0
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800ac2e:	f5a2 70f6 	sub.w	r0, r2, #492	@ 0x1ec
 800ac32:	4622      	mov	r2, r4
 800ac34:	f249 3150 	movw	r1, #37712	@ 0x9350
 800ac38:	6800      	ldr	r0, [r0, #0]
 800ac3a:	f004 fd7b 	bl	800f734 <DWIN_SetText>

    // obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
    // obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
 800ac3e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ac42:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    obj_screen->Screen_keyboard.Index_String = 0;
 800ac4e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ac52:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ac56:	e00b      	b.n	800ac70 <Screen_Init_Variable+0x51c>
 800ac58:	20001988 	.word	0x20001988
 800ac5c:	08015b28 	.word	0x08015b28
 800ac60:	08015b2c 	.word	0x08015b2c
 800ac64:	08015b30 	.word	0x08015b30
 800ac68:	08015b3c 	.word	0x08015b3c
 800ac6c:	08015b48 	.word	0x08015b48
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    obj_screen->Screen_condition = &condition_array[0];
 800ac78:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ac7c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a95      	ldr	r2, [pc, #596]	@ (800aed8 <Screen_Init_Variable+0x784>)
 800ac84:	645a      	str	r2, [r3, #68]	@ 0x44

    uint8_t num_direc_used = 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
    uint8_t *temp_buf = (uint8_t *)malloc(MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800ac8c:	20f0      	movs	r0, #240	@ 0xf0
 800ac8e:	f006 f9db 	bl	8011048 <malloc>
 800ac92:	4603      	mov	r3, r0
 800ac94:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    memset(temp_buf,0,MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800ac98:	22f0      	movs	r2, #240	@ 0xf0
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	f8d7 01dc 	ldr.w	r0, [r7, #476]	@ 0x1dc
 800aca0:	f008 fa0a 	bl	80130b8 <memset>
    direc_EEPROM_t direc_array[MAX_DIRECTORY_USED]; /* array store directory */
    direc_EEPROM_t *pDirectory = NULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    uint16_t mem_addr;
    uint16_t buf_length;

    /* get num directory used */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&temp_buf[0],1);
 800acaa:	2301      	movs	r3, #1
 800acac:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800acb0:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800acb4:	4889      	ldr	r0, [pc, #548]	@ (800aedc <Screen_Init_Variable+0x788>)
 800acb6:	f004 fba0 	bl	800f3fa <AT24Cxx_read_buffer>
    num_direc_used = temp_buf[0];
 800acba:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3

    /* read directory info */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC,temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800acc4:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 800acc8:	b29b      	uxth	r3, r3
 800acca:	461a      	mov	r2, r3
 800accc:	0052      	lsls	r2, r2, #1
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800acd8:	f240 2182 	movw	r1, #642	@ 0x282
 800acdc:	487f      	ldr	r0, [pc, #508]	@ (800aedc <Screen_Init_Variable+0x788>)
 800acde:	f004 fb8c 	bl	800f3fa <AT24Cxx_read_buffer>
    memcpy(&direc_array[0],temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800ace2:	f897 21e3 	ldrb.w	r2, [r7, #483]	@ 0x1e3
 800ace6:	4613      	mov	r3, r2
 800ace8:	005b      	lsls	r3, r3, #1
 800acea:	4413      	add	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	461a      	mov	r2, r3
 800acf0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800acf4:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 800acf8:	4618      	mov	r0, r3
 800acfa:	f008 fb32 	bl	8013362 <memcpy>
    free(temp_buf);
 800acfe:	f8d7 01dc 	ldr.w	r0, [r7, #476]	@ 0x1dc
 800ad02:	f006 f9a9 	bl	8011058 <free>

    char combined_names[100] = {0};
 800ad06:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ad0a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800ad0e:	4618      	mov	r0, r3
 800ad10:	2364      	movs	r3, #100	@ 0x64
 800ad12:	461a      	mov	r2, r3
 800ad14:	2100      	movs	r1, #0
 800ad16:	f008 f9cf 	bl	80130b8 <memset>
    uint16_t current_pos = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec

    for (uint8_t i = 0; i < num_direc_used; i++) {
 800ad20:	2300      	movs	r3, #0
 800ad22:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
 800ad26:	e047      	b.n	800adb8 <Screen_Init_Variable+0x664>
        uint16_t name_len = strlen((char*)direc_array[i].nameIC);
 800ad28:	f897 21eb 	ldrb.w	r2, [r7, #491]	@ 0x1eb
 800ad2c:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800ad30:	4613      	mov	r3, r2
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	4413      	add	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	440b      	add	r3, r1
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7f5 fa12 	bl	8000164 <strlen>
 800ad40:	4603      	mov	r3, r0
 800ad42:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
        if (current_pos + name_len + 2 < sizeof(combined_names)) {
 800ad46:	f8b7 21ec 	ldrh.w	r2, [r7, #492]	@ 0x1ec
 800ad4a:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800ad4e:	4413      	add	r3, r2
 800ad50:	3302      	adds	r3, #2
 800ad52:	2b63      	cmp	r3, #99	@ 0x63
 800ad54:	d82b      	bhi.n	800adae <Screen_Init_Variable+0x65a>
            // Copy the nameIC 
            strcpy(&combined_names[current_pos], (char*)direc_array[i].nameIC);
 800ad56:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	@ 0x1ec
 800ad5a:	f107 0210 	add.w	r2, r7, #16
 800ad5e:	18d0      	adds	r0, r2, r3
 800ad60:	f897 21eb 	ldrb.w	r2, [r7, #491]	@ 0x1eb
 800ad64:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800ad68:	4613      	mov	r3, r2
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	4413      	add	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	440b      	add	r3, r1
 800ad72:	4619      	mov	r1, r3
 800ad74:	f008 fadf 	bl	8013336 <strcpy>
            current_pos += name_len;
 800ad78:	f8b7 21ec 	ldrh.w	r2, [r7, #492]	@ 0x1ec
 800ad7c:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800ad80:	4413      	add	r3, r2
 800ad82:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec
            
            if (i < num_direc_used - 1) {
 800ad86:	f897 21eb 	ldrb.w	r2, [r7, #491]	@ 0x1eb
 800ad8a:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	429a      	cmp	r2, r3
 800ad92:	da0c      	bge.n	800adae <Screen_Init_Variable+0x65a>
                combined_names[current_pos] = ',';
 800ad94:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	@ 0x1ec
 800ad98:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800ad9c:	f5a2 72f0 	sub.w	r2, r2, #480	@ 0x1e0
 800ada0:	212c      	movs	r1, #44	@ 0x2c
 800ada2:	54d1      	strb	r1, [r2, r3]
                current_pos++;
 800ada4:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	@ 0x1ec
 800ada8:	3301      	adds	r3, #1
 800adaa:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800adae:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 800adb2:	3301      	adds	r3, #1
 800adb4:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
 800adb8:	f897 21eb 	ldrb.w	r2, [r7, #491]	@ 0x1eb
 800adbc:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d3b1      	bcc.n	800ad28 <Screen_Init_Variable+0x5d4>
            }
        }
    }
    combined_names[current_pos] = '\0';
 800adc4:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	@ 0x1ec
 800adc8:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 800adcc:	f5a2 72f0 	sub.w	r2, r2, #480	@ 0x1e0
 800add0:	2100      	movs	r1, #0
 800add2:	54d1      	strb	r1, [r2, r3]

    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800add4:	2008      	movs	r0, #8
 800add6:	f006 f937 	bl	8011048 <malloc>
 800adda:	4603      	mov	r3, r0
 800addc:	461a      	mov	r2, r3
 800adde:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ade2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800ade6:	601a      	str	r2, [r3, #0]
    data_send_esp32->data = (char *)malloc(strlen(combined_names) + 1);
 800ade8:	f107 0310 	add.w	r3, r7, #16
 800adec:	4618      	mov	r0, r3
 800adee:	f7f5 f9b9 	bl	8000164 <strlen>
 800adf2:	4603      	mov	r3, r0
 800adf4:	1c5a      	adds	r2, r3, #1
 800adf6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800adfa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800adfe:	681c      	ldr	r4, [r3, #0]
 800ae00:	4610      	mov	r0, r2
 800ae02:	f006 f921 	bl	8011048 <malloc>
 800ae06:	4603      	mov	r3, r0
 800ae08:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data, "n", 1);
 800ae0a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ae0e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2201      	movs	r2, #1
 800ae18:	4931      	ldr	r1, [pc, #196]	@ (800aee0 <Screen_Init_Variable+0x78c>)
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f008 faa1 	bl	8013362 <memcpy>
    memcpy(data_send_esp32->data+1,combined_names,strlen(combined_names));
 800ae20:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ae24:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	1c5c      	adds	r4, r3, #1
 800ae2e:	f107 0310 	add.w	r3, r7, #16
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7f5 f996 	bl	8000164 <strlen>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	f107 0310 	add.w	r3, r7, #16
 800ae3e:	4619      	mov	r1, r3
 800ae40:	4620      	mov	r0, r4
 800ae42:	f008 fa8e 	bl	8013362 <memcpy>
    data_send_esp32->data[strlen(combined_names) + 1] = '\0';
 800ae46:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ae4a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681c      	ldr	r4, [r3, #0]
 800ae52:	f107 0310 	add.w	r3, r7, #16
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7f5 f984 	bl	8000164 <strlen>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	3301      	adds	r3, #1
 800ae60:	4423      	add	r3, r4
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
    data_send_esp32->len = strlen(combined_names) + 1;
 800ae66:	f107 0310 	add.w	r3, r7, #16
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7f5 f97a 	bl	8000164 <strlen>
 800ae70:	4602      	mov	r2, r0
 800ae72:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ae76:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3201      	adds	r2, #1
 800ae7e:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800ae80:	4b18      	ldr	r3, [pc, #96]	@ (800aee4 <Screen_Init_Variable+0x790>)
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	f107 020c 	add.w	r2, r7, #12
 800ae88:	2308      	movs	r3, #8
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	f005 feaa 	bl	8010be4 <OS_task_post_event>


    DWIN_SetVariable_Icon((Dwin_t *)obj_screen,VP_ICON_ON_OFF,obj_screen->IC_Testerx[obj_screen->curr_device].state);
 800ae90:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800ae94:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ae9e:	4619      	mov	r1, r3
 800aea0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aea4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800aeae:	fb01 f303 	mul.w	r3, r1, r3
 800aeb2:	4413      	add	r3, r2
 800aeb4:	334c      	adds	r3, #76	@ 0x4c
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800aebe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800aec2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800aec6:	6818      	ldr	r0, [r3, #0]
 800aec8:	f004 fce7 	bl	800f89a <DWIN_SetVariable_Icon>
}
 800aecc:	bf00      	nop
 800aece:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd90      	pop	{r4, r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20000044 	.word	0x20000044
 800aedc:	20001988 	.word	0x20001988
 800aee0:	08015b54 	.word	0x08015b54
 800aee4:	08016810 	.word	0x08016810

0800aee8 <Screen_ShowData_Mainpage>:

static void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
 800aee8:	b590      	push	{r4, r7, lr}
 800aeea:	b091      	sub	sp, #68	@ 0x44
 800aeec:	af02      	add	r7, sp, #8
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70fb      	strb	r3, [r7, #3]
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    // uint8_t index_program = screen_obj.IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
 800aef4:	78fa      	ldrb	r2, [r7, #3]
 800aef6:	6879      	ldr	r1, [r7, #4]
 800aef8:	4613      	mov	r3, r2
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	4413      	add	r3, r2
 800aefe:	011b      	lsls	r3, r3, #4
 800af00:	440b      	add	r3, r1
 800af02:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4618      	mov	r0, r3
 800af0a:	f006 f898 	bl	801103e <atoi>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800af14:	78fa      	ldrb	r2, [r7, #3]
 800af16:	6879      	ldr	r1, [r7, #4]
 800af18:	4613      	mov	r3, r2
 800af1a:	005b      	lsls	r3, r3, #1
 800af1c:	4413      	add	r3, r2
 800af1e:	011b      	lsls	r3, r3, #4
 800af20:	440b      	add	r3, r1
 800af22:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7f5 f91b 	bl	8000164 <strlen>
 800af2e:	4603      	mov	r3, r0
 800af30:	b2db      	uxtb	r3, r3
 800af32:	3309      	adds	r3, #9
 800af34:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t size_Description_IC = strlen((char *)screen_obj->Program_Testx[index_program].Description_IC);
 800af38:	78fa      	ldrb	r2, [r7, #3]
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	4613      	mov	r3, r2
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	4413      	add	r3, r2
 800af42:	011b      	lsls	r3, r3, #4
 800af44:	440b      	add	r3, r1
 800af46:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7f5 f909 	bl	8000164 <strlen>
 800af52:	4603      	mov	r3, r0
 800af54:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    // uint8_t size_Description_IC = strlen("Desc IC: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC) + 1;
    // uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800af58:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800af5c:	3301      	adds	r3, #1
 800af5e:	4618      	mov	r0, r3
 800af60:	f006 f872 	bl	8011048 <malloc>
 800af64:	4603      	mov	r3, r0
 800af66:	633b      	str	r3, [r7, #48]	@ 0x30
    char *Text_Description_IC = malloc(size_Description_IC);
 800af68:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800af6c:	4618      	mov	r0, r3
 800af6e:	f006 f86b 	bl	8011048 <malloc>
 800af72:	4603      	mov	r3, r0
 800af74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // char *Text_Num_IC = malloc(size_Num_IC + 1);

    strcpy(Text_Name_IC,"IC Name: ");
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	494a      	ldr	r1, [pc, #296]	@ (800b0a4 <Screen_ShowData_Mainpage+0x1bc>)
 800af7a:	461a      	mov	r2, r3
 800af7c:	460b      	mov	r3, r1
 800af7e:	cb03      	ldmia	r3!, {r0, r1}
 800af80:	6010      	str	r0, [r2, #0]
 800af82:	6051      	str	r1, [r2, #4]
 800af84:	881b      	ldrh	r3, [r3, #0]
 800af86:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 800af88:	78fa      	ldrb	r2, [r7, #3]
 800af8a:	6879      	ldr	r1, [r7, #4]
 800af8c:	4613      	mov	r3, r2
 800af8e:	005b      	lsls	r3, r3, #1
 800af90:	4413      	add	r3, r2
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	440b      	add	r3, r1
 800af96:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4619      	mov	r1, r3
 800af9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afa0:	f008 f892 	bl	80130c8 <strcat>
    strncpy(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC,strlen(screen_obj->Program_Testx[index_program].Description_IC));
 800afa4:	78fa      	ldrb	r2, [r7, #3]
 800afa6:	6879      	ldr	r1, [r7, #4]
 800afa8:	4613      	mov	r3, r2
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	4413      	add	r3, r2
 800afae:	011b      	lsls	r3, r3, #4
 800afb0:	440b      	add	r3, r1
 800afb2:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800afb6:	681c      	ldr	r4, [r3, #0]
 800afb8:	78fa      	ldrb	r2, [r7, #3]
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	4613      	mov	r3, r2
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	4413      	add	r3, r2
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	440b      	add	r3, r1
 800afc6:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4618      	mov	r0, r3
 800afce:	f7f5 f8c9 	bl	8000164 <strlen>
 800afd2:	4603      	mov	r3, r0
 800afd4:	461a      	mov	r2, r3
 800afd6:	4621      	mov	r1, r4
 800afd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afda:	f008 f8b6 	bl	801314a <strncpy>
    // strcat(Text_Description_IC,);
    // strcpy(Text_Num_IC,"Number of ICs: ");
    // strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);

    memset(a_select_program,1,MAX_PROGRAM_TEST);
 800afde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800afe2:	2204      	movs	r2, #4
 800afe4:	2101      	movs	r1, #1
 800afe6:	4618      	mov	r0, r3
 800afe8:	f008 f866 	bl	80130b8 <memset>
    // Get the program selected
    a_select_program[index_program] = 0 ;
 800afec:	78fb      	ldrb	r3, [r7, #3]
 800afee:	3338      	adds	r3, #56	@ 0x38
 800aff0:	443b      	add	r3, r7
 800aff2:	2200      	movs	r2, #0
 800aff4:	f803 2c10 	strb.w	r2, [r3, #-16]
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800affe:	4619      	mov	r1, r3
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b006:	fb01 f303 	mul.w	r3, r1, r3
 800b00a:	4413      	add	r3, r2
 800b00c:	334b      	adds	r3, #75	@ 0x4b
 800b00e:	78fa      	ldrb	r2, [r7, #3]
 800b010:	701a      	strb	r2, [r3, #0]

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
 800b012:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b016:	2304      	movs	r3, #4
 800b018:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f004 fc69 	bl	800f8f4 <DWIN_SetArray_Icon>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,Text_Name_IC,size_Name_IC);
 800b022:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b026:	b29b      	uxth	r3, r3
 800b028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b02a:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f004 fb80 	bl	800f734 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,Text_Description_IC,size_Description_IC);
 800b034:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800b038:	b29b      	uxth	r3, r3
 800b03a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b03c:	f249 1150 	movw	r1, #37200	@ 0x9150
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f004 fb77 	bl	800f734 <DWIN_SetText>

    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"Number of ICs: %d / %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic,num_ic);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b04c:	4619      	mov	r1, r3
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b054:	fb01 f303 	mul.w	r3, r1, r3
 800b058:	4413      	add	r3, r2
 800b05a:	334a      	adds	r3, #74	@ 0x4a
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b064:	f107 0008 	add.w	r0, r7, #8
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	4613      	mov	r3, r2
 800b06c:	4a0e      	ldr	r2, [pc, #56]	@ (800b0a8 <Screen_ShowData_Mainpage+0x1c0>)
 800b06e:	211e      	movs	r1, #30
 800b070:	f007 fee2 	bl	8012e38 <sniprintf>
//    uint8_t len = strlen(ShowCase_String);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
 800b074:	f107 0308 	add.w	r3, r7, #8
 800b078:	4618      	mov	r0, r3
 800b07a:	f7f5 f873 	bl	8000164 <strlen>
 800b07e:	4603      	mov	r3, r0
 800b080:	b29b      	uxth	r3, r3
 800b082:	f107 0208 	add.w	r2, r7, #8
 800b086:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f004 fb52 	bl	800f734 <DWIN_SetText>

    /* free malloc */
    free(Text_Name_IC);
 800b090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b092:	f005 ffe1 	bl	8011058 <free>
    free(Text_Description_IC);
 800b096:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b098:	f005 ffde 	bl	8011058 <free>

}
 800b09c:	bf00      	nop
 800b09e:	373c      	adds	r7, #60	@ 0x3c
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd90      	pop	{r4, r7, pc}
 800b0a4:	08015a78 	.word	0x08015a78
 800b0a8:	08015b58 	.word	0x08015b58

0800b0ac <Screen_SetInfo_Pin>:

static void Screen_SetInfo_Pin(Screen_t *const screen_obj) {
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b0c2:	fb01 f303 	mul.w	r3, r1, r3
 800b0c6:	4413      	add	r3, r2
 800b0c8:	334b      	adds	r3, #75	@ 0x4b
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	73fb      	strb	r3, [r7, #15]
    uint16_t Address_VP = VP_Name_Pin;
 800b0ce:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 800b0d2:	82fb      	strh	r3, [r7, #22]
    char *data_copy = malloc(screen_obj->Program_Testx[index_program].data_pin_len + 1);
 800b0d4:	7bfa      	ldrb	r2, [r7, #15]
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	005b      	lsls	r3, r3, #1
 800b0dc:	4413      	add	r3, r2
 800b0de:	011b      	lsls	r3, r3, #4
 800b0e0:	440b      	add	r3, r1
 800b0e2:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f005 ffac 	bl	8011048 <malloc>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	60bb      	str	r3, [r7, #8]
    memcpy(data_copy,screen_obj->Program_Testx[index_program].data_pin,screen_obj->Program_Testx[index_program].data_pin_len);
 800b0f4:	7bfa      	ldrb	r2, [r7, #15]
 800b0f6:	6879      	ldr	r1, [r7, #4]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	4413      	add	r3, r2
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	440b      	add	r3, r1
 800b102:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 800b106:	6818      	ldr	r0, [r3, #0]
 800b108:	7bfa      	ldrb	r2, [r7, #15]
 800b10a:	6879      	ldr	r1, [r7, #4]
 800b10c:	4613      	mov	r3, r2
 800b10e:	005b      	lsls	r3, r3, #1
 800b110:	4413      	add	r3, r2
 800b112:	011b      	lsls	r3, r3, #4
 800b114:	440b      	add	r3, r1
 800b116:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	461a      	mov	r2, r3
 800b11e:	4601      	mov	r1, r0
 800b120:	68b8      	ldr	r0, [r7, #8]
 800b122:	f008 f91e 	bl	8013362 <memcpy>
    char *temp_buf = strtok(data_copy,"\n");
 800b126:	4911      	ldr	r1, [pc, #68]	@ (800b16c <Screen_SetInfo_Pin+0xc0>)
 800b128:	68b8      	ldr	r0, [r7, #8]
 800b12a:	f008 f821 	bl	8013170 <strtok>
 800b12e:	6138      	str	r0, [r7, #16]
    while (temp_buf != NULL) {
 800b130:	e011      	b.n	800b156 <Screen_SetInfo_Pin+0xaa>
        DWIN_SetText((Dwin_t *)screen_obj,Address_VP,temp_buf,strlen(temp_buf));
 800b132:	6938      	ldr	r0, [r7, #16]
 800b134:	f7f5 f816 	bl	8000164 <strlen>
 800b138:	4603      	mov	r3, r0
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	8af9      	ldrh	r1, [r7, #22]
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f004 faf7 	bl	800f734 <DWIN_SetText>
        // sprintf(text_show,"%d",temp_buf);
        temp_buf = strtok(NULL,"\n");
 800b146:	4909      	ldr	r1, [pc, #36]	@ (800b16c <Screen_SetInfo_Pin+0xc0>)
 800b148:	2000      	movs	r0, #0
 800b14a:	f008 f811 	bl	8013170 <strtok>
 800b14e:	6138      	str	r0, [r7, #16]
        Address_VP = Address_VP + 0x10;
 800b150:	8afb      	ldrh	r3, [r7, #22]
 800b152:	3310      	adds	r3, #16
 800b154:	82fb      	strh	r3, [r7, #22]
    while (temp_buf != NULL) {
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1ea      	bne.n	800b132 <Screen_SetInfo_Pin+0x86>
    }
    free(data_copy);
 800b15c:	68b8      	ldr	r0, [r7, #8]
 800b15e:	f005 ff7b 	bl	8011058 <free>
}
 800b162:	bf00      	nop
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	08015b70 	.word	0x08015b70

0800b170 <get_data_testing_ic>:

#pragma endregion FUNCTION SCREEN


static bool get_data_testing_ic(char *searchName,Program_Test_t *pdata_test) {
 800b170:	b590      	push	{r4, r7, lr}
 800b172:	b0d1      	sub	sp, #324	@ 0x144
 800b174:	af00      	add	r7, sp, #0
 800b176:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b17a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800b17e:	6018      	str	r0, [r3, #0]
 800b180:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b184:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b188:	6019      	str	r1, [r3, #0]
    uint8_t num_direc_used = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
    uint8_t *temp_buf = (uint8_t *)malloc(MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800b190:	20f0      	movs	r0, #240	@ 0xf0
 800b192:	f005 ff59 	bl	8011048 <malloc>
 800b196:	4603      	mov	r3, r0
 800b198:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    memset(temp_buf,0,MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800b19c:	22f0      	movs	r2, #240	@ 0xf0
 800b19e:	2100      	movs	r1, #0
 800b1a0:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800b1a4:	f007 ff88 	bl	80130b8 <memset>
    direc_EEPROM_t direc_array[MAX_DIRECTORY_USED]; /* array store directory */
    direc_EEPROM_t *pDirectory = NULL;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    uint16_t mem_addr;
    uint16_t buf_length;
    /* get num directory used */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&temp_buf[0],1);
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b1b4:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800b1b8:	48af      	ldr	r0, [pc, #700]	@ (800b478 <get_data_testing_ic+0x308>)
 800b1ba:	f004 f91e 	bl	800f3fa <AT24Cxx_read_buffer>
    num_direc_used = temp_buf[0];
 800b1be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
    /* read directory info */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC,temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800b1c8:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	0052      	lsls	r2, r2, #1
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b1dc:	f240 2182 	movw	r1, #642	@ 0x282
 800b1e0:	48a5      	ldr	r0, [pc, #660]	@ (800b478 <get_data_testing_ic+0x308>)
 800b1e2:	f004 f90a 	bl	800f3fa <AT24Cxx_read_buffer>
    memcpy(&direc_array[0],temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800b1e6:	f897 213a 	ldrb.w	r2, [r7, #314]	@ 0x13a
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	4413      	add	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	f107 0308 	add.w	r3, r7, #8
 800b1f8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f008 f8b0 	bl	8013362 <memcpy>
    free(temp_buf);
 800b202:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800b206:	f005 ff27 	bl	8011058 <free>
    /* find info of search name ic */
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800b20a:	2300      	movs	r3, #0
 800b20c:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 800b210:	e02c      	b.n	800b26c <get_data_testing_ic+0xfc>
        if (memcmp(searchName,direc_array[i].nameIC,strlen(searchName)) == 0) {
 800b212:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800b216:	f107 0108 	add.w	r1, r7, #8
 800b21a:	4613      	mov	r3, r2
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	18cc      	adds	r4, r1, r3
 800b224:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b228:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800b22c:	6818      	ldr	r0, [r3, #0]
 800b22e:	f7f4 ff99 	bl	8000164 <strlen>
 800b232:	4602      	mov	r2, r0
 800b234:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b238:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800b23c:	4621      	mov	r1, r4
 800b23e:	6818      	ldr	r0, [r3, #0]
 800b240:	f007 ff2a 	bl	8013098 <memcmp>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10b      	bne.n	800b262 <get_data_testing_ic+0xf2>
            pDirectory = &direc_array[i];
 800b24a:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800b24e:	f107 0108 	add.w	r1, r7, #8
 800b252:	4613      	mov	r3, r2
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	4413      	add	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	440b      	add	r3, r1
 800b25c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
            break;
 800b260:	e00a      	b.n	800b278 <get_data_testing_ic+0x108>
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800b262:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800b266:	3301      	adds	r3, #1
 800b268:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 800b26c:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800b270:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 800b274:	429a      	cmp	r2, r3
 800b276:	d3cc      	bcc.n	800b212 <get_data_testing_ic+0xa2>
        }
    }
    /* NOT FOUND NAME IC IN EEPROM */ 
    if (pDirectory == NULL) {
 800b278:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d108      	bne.n	800b292 <get_data_testing_ic+0x122>
        // printf("NOT FOUND NAME IC IN EEPROM\n");
        DWIN_SetText((Dwin_t *)&_Screen,VP_Warning_modify_program,"No data found for this IC",strlen("No data found for this IC"));
 800b280:	2319      	movs	r3, #25
 800b282:	4a7e      	ldr	r2, [pc, #504]	@ (800b47c <get_data_testing_ic+0x30c>)
 800b284:	f24a 0150 	movw	r1, #41040	@ 0xa050
 800b288:	487d      	ldr	r0, [pc, #500]	@ (800b480 <get_data_testing_ic+0x310>)
 800b28a:	f004 fa53 	bl	800f734 <DWIN_SetText>
        return false;
 800b28e:	2300      	movs	r3, #0
 800b290:	e1ee      	b.n	800b670 <get_data_testing_ic+0x500>
    } 

    mem_addr = (uint16_t)((pDirectory->addr[0] << 8) | pDirectory->addr[1]);
 800b292:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800b296:	7a1b      	ldrb	r3, [r3, #8]
 800b298:	b21b      	sxth	r3, r3
 800b29a:	021b      	lsls	r3, r3, #8
 800b29c:	b21a      	sxth	r2, r3
 800b29e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800b2a2:	7a5b      	ldrb	r3, [r3, #9]
 800b2a4:	b21b      	sxth	r3, r3
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	b21b      	sxth	r3, r3
 800b2aa:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    buf_length = (uint16_t)((pDirectory->length[0] << 8) | pDirectory->length[1]);
 800b2ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800b2b2:	7a9b      	ldrb	r3, [r3, #10]
 800b2b4:	b21b      	sxth	r3, r3
 800b2b6:	021b      	lsls	r3, r3, #8
 800b2b8:	b21a      	sxth	r2, r3
 800b2ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800b2be:	7adb      	ldrb	r3, [r3, #11]
 800b2c0:	b21b      	sxth	r3, r3
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	b21b      	sxth	r3, r3
 800b2c6:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    temp_buf = (uint8_t *)malloc(buf_length);
 800b2ca:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f005 feba 	bl	8011048 <malloc>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    AT24Cxx_read_buffer(&eeprom_ob, mem_addr, temp_buf, buf_length);
 800b2da:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800b2de:	f8b7 1132 	ldrh.w	r1, [r7, #306]	@ 0x132
 800b2e2:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b2e6:	4864      	ldr	r0, [pc, #400]	@ (800b478 <get_data_testing_ic+0x308>)
 800b2e8:	f004 f887 	bl	800f3fa <AT24Cxx_read_buffer>

    // Find the first pipe separator
    uint8_t *first_pipe = memchr(temp_buf, '|', buf_length);
 800b2ec:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	217c      	movs	r1, #124	@ 0x7c
 800b2f4:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800b2f8:	f008 f825 	bl	8013346 <memchr>
 800b2fc:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
    if (!first_pipe) return false;
 800b300:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b304:	2b00      	cmp	r3, #0
 800b306:	d101      	bne.n	800b30c <get_data_testing_ic+0x19c>
 800b308:	2300      	movs	r3, #0
 800b30a:	e1b1      	b.n	800b670 <get_data_testing_ic+0x500>

    // Extract pin count
    int pin_count_len = first_pipe - temp_buf;
 800b30c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800b310:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    char* pin_count_str = malloc(pin_count_len + 1);
 800b31a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b31e:	3301      	adds	r3, #1
 800b320:	4618      	mov	r0, r3
 800b322:	f005 fe91 	bl	8011048 <malloc>
 800b326:	4603      	mov	r3, r0
 800b328:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    strncpy(pin_count_str, temp_buf, pin_count_len);
 800b32c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b330:	461a      	mov	r2, r3
 800b332:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800b336:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800b33a:	f007 ff06 	bl	801314a <strncpy>
    pin_count_str[pin_count_len] = '\0';
 800b33e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b342:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800b346:	4413      	add	r3, r2
 800b348:	2200      	movs	r2, #0
 800b34a:	701a      	strb	r2, [r3, #0]
    pdata_test->num_pin = atoi(pin_count_str);
 800b34c:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800b350:	f005 fe75 	bl	801103e <atoi>
 800b354:	4603      	mov	r3, r0
 800b356:	b2da      	uxtb	r2, r3
 800b358:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b35c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	775a      	strb	r2, [r3, #29]
    free(pin_count_str);
 800b364:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800b368:	f005 fe76 	bl	8011058 <free>

    // Find the second pipe separator
    int remaining_len = buf_length - (first_pipe - temp_buf + 1);
 800b36c:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 800b370:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800b374:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b378:	1acb      	subs	r3, r1, r3
 800b37a:	3301      	adds	r3, #1
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint8_t *second_pipe = memchr(first_pipe + 1, '|', remaining_len);
 800b382:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b386:	3301      	adds	r3, #1
 800b388:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b38c:	217c      	movs	r1, #124	@ 0x7c
 800b38e:	4618      	mov	r0, r3
 800b390:	f007 ffd9 	bl	8013346 <memchr>
 800b394:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
    if (!second_pipe) return false;
 800b398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d101      	bne.n	800b3a4 <get_data_testing_ic+0x234>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	e165      	b.n	800b670 <get_data_testing_ic+0x500>

    // Extract test count
    int test_count_len = second_pipe - (first_pipe + 1);
 800b3a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    char* test_count_str = malloc(test_count_len + 1);
 800b3b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f005 fe44 	bl	8011048 <malloc>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    strncpy(test_count_str, first_pipe + 1, test_count_len);
 800b3c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800b3d6:	f007 feb8 	bl	801314a <strncpy>
    test_count_str[test_count_len] = '\0';
 800b3da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b3de:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800b3e2:	4413      	add	r3, r2
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	701a      	strb	r2, [r3, #0]
    pdata_test->num_case = atoi(test_count_str);
 800b3e8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800b3ec:	f005 fe27 	bl	801103e <atoi>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b3f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	771a      	strb	r2, [r3, #28]
    free(test_count_str);
 800b400:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800b404:	f005 fe28 	bl	8011058 <free>

    // Find the third pipe separator (after empty field)
    remaining_len = buf_length - (second_pipe - temp_buf + 1);
 800b408:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 800b40c:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 800b410:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b414:	1acb      	subs	r3, r1, r3
 800b416:	3301      	adds	r3, #1
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint8_t *third_pipe = memchr(second_pipe + 1, '|', remaining_len);
 800b41e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b422:	3301      	adds	r3, #1
 800b424:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b428:	217c      	movs	r1, #124	@ 0x7c
 800b42a:	4618      	mov	r0, r3
 800b42c:	f007 ff8b 	bl	8013346 <memchr>
 800b430:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    if (!third_pipe) return false;
 800b434:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <get_data_testing_ic+0x2d0>
 800b43c:	2300      	movs	r3, #0
 800b43e:	e117      	b.n	800b670 <get_data_testing_ic+0x500>

    // Skip the empty field between second and third pipe
    // Find the fourth pipe separator  
    remaining_len = buf_length - (third_pipe - temp_buf + 1);
 800b440:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 800b444:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800b448:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b44c:	1acb      	subs	r3, r1, r3
 800b44e:	3301      	adds	r3, #1
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint8_t *fourth_pipe = memchr(third_pipe + 1, '|', remaining_len);
 800b456:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b45a:	3301      	adds	r3, #1
 800b45c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b460:	217c      	movs	r1, #124	@ 0x7c
 800b462:	4618      	mov	r0, r3
 800b464:	f007 ff6f 	bl	8013346 <memchr>
 800b468:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    if (!fourth_pipe) return false;
 800b46c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b470:	2b00      	cmp	r3, #0
 800b472:	d107      	bne.n	800b484 <get_data_testing_ic+0x314>
 800b474:	2300      	movs	r3, #0
 800b476:	e0fb      	b.n	800b670 <get_data_testing_ic+0x500>
 800b478:	20001988 	.word	0x20001988
 800b47c:	08015b74 	.word	0x08015b74
 800b480:	20000e6c 	.word	0x20000e6c

    if (pdata_test->Description_IC != NULL) {
 800b484:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b488:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00f      	beq.n	800b4b4 <get_data_testing_ic+0x344>
        free(pdata_test->Description_IC);
 800b494:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b498:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f005 fdd9 	bl	8011058 <free>
        pdata_test->Description_IC = NULL;
 800b4a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b4aa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	619a      	str	r2, [r3, #24]
    }
    // Extract description (between third and fourth pipe)
    int description_len = fourth_pipe - (third_pipe + 1);
 800b4b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    pdata_test->Description_IC = malloc(description_len + 1);
 800b4c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f005 fdbc 	bl	8011048 <malloc>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b4d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	619a      	str	r2, [r3, #24]
    strncpy(pdata_test->Description_IC, third_pipe + 1, description_len);
 800b4e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b4e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	6998      	ldr	r0, [r3, #24]
 800b4ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	f007 fe27 	bl	801314a <strncpy>
    pdata_test->Description_IC[description_len] = '\0';
 800b4fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b500:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	699a      	ldr	r2, [r3, #24]
 800b508:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b50c:	4413      	add	r3, r2
 800b50e:	2200      	movs	r2, #0
 800b510:	701a      	strb	r2, [r3, #0]

    // Find the fifth pipe separator
    remaining_len = buf_length - (fourth_pipe - temp_buf + 1);
 800b512:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 800b516:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800b51a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b51e:	1acb      	subs	r3, r1, r3
 800b520:	3301      	adds	r3, #1
 800b522:	1ad3      	subs	r3, r2, r3
 800b524:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint8_t *fifth_pipe = memchr(fourth_pipe + 1, '|', remaining_len);
 800b528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b52c:	3301      	adds	r3, #1
 800b52e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b532:	217c      	movs	r1, #124	@ 0x7c
 800b534:	4618      	mov	r0, r3
 800b536:	f007 ff06 	bl	8013346 <memchr>
 800b53a:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    if (!fifth_pipe) return false;
 800b53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <get_data_testing_ic+0x3da>
 800b546:	2300      	movs	r3, #0
 800b548:	e092      	b.n	800b670 <get_data_testing_ic+0x500>

    if (pdata_test->data_pin != NULL) {
 800b54a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b54e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00f      	beq.n	800b57a <get_data_testing_ic+0x40a>
        free(pdata_test->data_pin);
 800b55a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b55e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	4618      	mov	r0, r3
 800b568:	f005 fd76 	bl	8011058 <free>
        pdata_test->data_pin = NULL;
 800b56c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b570:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2200      	movs	r2, #0
 800b578:	621a      	str	r2, [r3, #32]
    }
    // Extract pin data (between fourth and fifth pipe)
    int pin_data_len = fifth_pipe - (fourth_pipe + 1);
 800b57a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b57e:	3301      	adds	r3, #1
 800b580:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    pdata_test->data_pin = malloc(pin_data_len);
 800b58a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b58e:	4618      	mov	r0, r3
 800b590:	f005 fd5a 	bl	8011048 <malloc>
 800b594:	4603      	mov	r3, r0
 800b596:	461a      	mov	r2, r3
 800b598:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b59c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	621a      	str	r2, [r3, #32]
    memcpy(pdata_test->data_pin, fourth_pipe + 1, pin_data_len);
 800b5a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b5a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	6a18      	ldr	r0, [r3, #32]
 800b5b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	f007 fed1 	bl	8013362 <memcpy>
    pdata_test->data_pin_len = pin_data_len;
 800b5c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b5ca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	849a      	strh	r2, [r3, #36]	@ 0x24

    if (pdata_test->data_test != NULL) {
 800b5d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b5d6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00f      	beq.n	800b602 <get_data_testing_ic+0x492>
        free(pdata_test->data_test);
 800b5e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b5e6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f005 fd32 	bl	8011058 <free>
        pdata_test->data_test = NULL;
 800b5f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b5f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2200      	movs	r2, #0
 800b600:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    // Extract test data (after fifth pipe)
    uint8_t *test_start = fifth_pipe + 1;
 800b602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b606:	3301      	adds	r3, #1
 800b608:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    int test_data_len = buf_length - (test_start - temp_buf);
 800b60c:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 800b610:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 800b614:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b618:	1acb      	subs	r3, r1, r3
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    pdata_test->data_test = malloc(test_data_len);
 800b620:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b624:	4618      	mov	r0, r3
 800b626:	f005 fd0f 	bl	8011048 <malloc>
 800b62a:	4603      	mov	r3, r0
 800b62c:	461a      	mov	r2, r3
 800b62e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b632:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	629a      	str	r2, [r3, #40]	@ 0x28
    memcpy(pdata_test->data_test, test_start, test_data_len);
 800b63a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b63e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b646:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800b64a:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 800b64e:	4618      	mov	r0, r3
 800b650:	f007 fe87 	bl	8013362 <memcpy>
    pdata_test->data_test_len = test_data_len;
 800b654:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b658:	b29a      	uxth	r2, r3
 800b65a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b65e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	859a      	strh	r2, [r3, #44]	@ 0x2c

    free(temp_buf);
 800b666:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800b66a:	f005 fcf5 	bl	8011058 <free>
    return true;
 800b66e:	2301      	movs	r3, #1
}
 800b670:	4618      	mov	r0, r3
 800b672:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b676:	46bd      	mov	sp, r7
 800b678:	bd90      	pop	{r4, r7, pc}
 800b67a:	bf00      	nop

0800b67c <show_text_short_circuit>:

static void show_text_short_circuit(Screen_t *screen_obj) {
 800b67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b680:	b0c9      	sub	sp, #292	@ 0x124
 800b682:	af00      	add	r7, sp, #0
 800b684:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b688:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b68c:	6018      	str	r0, [r3, #0]
 800b68e:	466b      	mov	r3, sp
 800b690:	461e      	mov	r6, r3
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b692:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b696:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b6a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b6b0:	fb01 f303 	mul.w	r3, r1, r3
 800b6b4:	4413      	add	r3, r2
 800b6b6:	334b      	adds	r3, #75	@ 0x4b
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800b6be:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800b6c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b6c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b6ca:	6819      	ldr	r1, [r3, #0]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	005b      	lsls	r3, r3, #1
 800b6d0:	4413      	add	r3, r2
 800b6d2:	011b      	lsls	r3, r3, #4
 800b6d4:	440b      	add	r3, r1
 800b6d6:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
//    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
    char short_text[150] = "Pin Short to GND/VDD: ";
 800b6e0:	4b88      	ldr	r3, [pc, #544]	@ (800b904 <show_text_short_circuit+0x288>)
 800b6e2:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800b6e6:	461d      	mov	r5, r3
 800b6e8:	6828      	ldr	r0, [r5, #0]
 800b6ea:	6869      	ldr	r1, [r5, #4]
 800b6ec:	68aa      	ldr	r2, [r5, #8]
 800b6ee:	68eb      	ldr	r3, [r5, #12]
 800b6f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b6f2:	6928      	ldr	r0, [r5, #16]
 800b6f4:	6020      	str	r0, [r4, #0]
 800b6f6:	8aab      	ldrh	r3, [r5, #20]
 800b6f8:	7daa      	ldrb	r2, [r5, #22]
 800b6fa:	80a3      	strh	r3, [r4, #4]
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	71a3      	strb	r3, [r4, #6]
 800b700:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800b704:	227f      	movs	r2, #127	@ 0x7f
 800b706:	2100      	movs	r1, #0
 800b708:	4618      	mov	r0, r3
 800b70a:	f007 fcd5 	bl	80130b8 <memset>
    uint8_t buffer[50];
    memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit,num_pin);
 800b70e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b712:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b71c:	4619      	mov	r1, r3
 800b71e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b722:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b72c:	fb01 f303 	mul.w	r3, r1, r3
 800b730:	4413      	add	r3, r2
 800b732:	3368      	adds	r3, #104	@ 0x68
 800b734:	6819      	ldr	r1, [r3, #0]
 800b736:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800b73a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b73e:	4618      	mov	r0, r3
 800b740:	f007 fe0f 	bl	8013362 <memcpy>
    // uint8_t test_short[20] = {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'};
    uint8_t shortPin[num_pin]; /* array store pin short */
 800b744:	f897 1116 	ldrb.w	r1, [r7, #278]	@ 0x116
 800b748:	460b      	mov	r3, r1
 800b74a:	3b01      	subs	r3, #1
 800b74c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b750:	b2cb      	uxtb	r3, r1
 800b752:	2200      	movs	r2, #0
 800b754:	469a      	mov	sl, r3
 800b756:	4693      	mov	fp, r2
 800b758:	f04f 0200 	mov.w	r2, #0
 800b75c:	f04f 0300 	mov.w	r3, #0
 800b760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b76c:	b2cb      	uxtb	r3, r1
 800b76e:	2200      	movs	r2, #0
 800b770:	4698      	mov	r8, r3
 800b772:	4691      	mov	r9, r2
 800b774:	f04f 0200 	mov.w	r2, #0
 800b778:	f04f 0300 	mov.w	r3, #0
 800b77c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b780:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b784:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b788:	460b      	mov	r3, r1
 800b78a:	3307      	adds	r3, #7
 800b78c:	08db      	lsrs	r3, r3, #3
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	ebad 0d03 	sub.w	sp, sp, r3
 800b794:	466b      	mov	r3, sp
 800b796:	3300      	adds	r3, #0
 800b798:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint8_t shortCount = 0;
 800b79c:	2300      	movs	r3, #0
 800b79e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < num_pin; i++) {
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b7a8:	e02c      	b.n	800b804 <show_text_short_circuit+0x188>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] == '0') {
 800b7aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b7ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b7be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b7c8:	fb01 f303 	mul.w	r3, r1, r3
 800b7cc:	4413      	add	r3, r2
 800b7ce:	3368      	adds	r3, #104	@ 0x68
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b7d6:	4413      	add	r3, r2
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	2b30      	cmp	r3, #48	@ 0x30
 800b7dc:	d10d      	bne.n	800b7fa <show_text_short_circuit+0x17e>
            shortPin[shortCount] = i + 1;
 800b7de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7e2:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800b7e6:	3201      	adds	r2, #1
 800b7e8:	b2d1      	uxtb	r1, r2
 800b7ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b7ee:	54d1      	strb	r1, [r2, r3]
            shortCount++;
 800b7f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < num_pin; i++) {
 800b7fa:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b7fe:	3301      	adds	r3, #1
 800b800:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b804:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800b808:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d3cc      	bcc.n	800b7aa <show_text_short_circuit+0x12e>
        }
    }

    if (shortCount == 0) {
 800b810:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b814:	2b00      	cmp	r3, #0
 800b816:	d121      	bne.n	800b85c <show_text_short_circuit+0x1e0>
        strcat(short_text,"None");
 800b818:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7f4 fca1 	bl	8000164 <strlen>
 800b822:	4603      	mov	r3, r0
 800b824:	461a      	mov	r2, r3
 800b826:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b82a:	4413      	add	r3, r2
 800b82c:	4a36      	ldr	r2, [pc, #216]	@ (800b908 <show_text_short_circuit+0x28c>)
 800b82e:	6810      	ldr	r0, [r2, #0]
 800b830:	6018      	str	r0, [r3, #0]
 800b832:	7912      	ldrb	r2, [r2, #4]
 800b834:	711a      	strb	r2, [r3, #4]
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 800b836:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7f4 fc92 	bl	8000164 <strlen>
 800b840:	4603      	mov	r3, r0
 800b842:	b29b      	uxth	r3, r3
 800b844:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800b848:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800b84c:	f5a1 708e 	sub.w	r0, r1, #284	@ 0x11c
 800b850:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800b854:	6800      	ldr	r0, [r0, #0]
 800b856:	f003 ff6d 	bl	800f734 <DWIN_SetText>
 800b85a:	e04b      	b.n	800b8f4 <show_text_short_circuit+0x278>
    } else {
        char tempStr[50];
        for (int i = 0; i < shortCount; i++) {
 800b85c:	2300      	movs	r3, #0
 800b85e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800b862:	e02f      	b.n	800b8c4 <show_text_short_circuit+0x248>
            sprintf(tempStr, "Pin %d", shortPin[i]);
 800b864:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b868:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b86c:	4413      	add	r3, r2
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	461a      	mov	r2, r3
 800b872:	f107 030c 	add.w	r3, r7, #12
 800b876:	4925      	ldr	r1, [pc, #148]	@ (800b90c <show_text_short_circuit+0x290>)
 800b878:	4618      	mov	r0, r3
 800b87a:	f007 fb13 	bl	8012ea4 <siprintf>
            strcat(short_text, tempStr);
 800b87e:	f107 020c 	add.w	r2, r7, #12
 800b882:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b886:	4611      	mov	r1, r2
 800b888:	4618      	mov	r0, r3
 800b88a:	f007 fc1d 	bl	80130c8 <strcat>
            if (i < shortCount - 1) {
 800b88e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b892:	3b01      	subs	r3, #1
 800b894:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b898:	429a      	cmp	r2, r3
 800b89a:	da0e      	bge.n	800b8ba <show_text_short_circuit+0x23e>
                strcat(short_text, ", ");
 800b89c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7f4 fc5f 	bl	8000164 <strlen>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b8ae:	4413      	add	r3, r2
 800b8b0:	4a17      	ldr	r2, [pc, #92]	@ (800b910 <show_text_short_circuit+0x294>)
 800b8b2:	8811      	ldrh	r1, [r2, #0]
 800b8b4:	7892      	ldrb	r2, [r2, #2]
 800b8b6:	8019      	strh	r1, [r3, #0]
 800b8b8:	709a      	strb	r2, [r3, #2]
        for (int i = 0; i < shortCount; i++) {
 800b8ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b8be:	3301      	adds	r3, #1
 800b8c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800b8c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	dbc9      	blt.n	800b864 <show_text_short_circuit+0x1e8>
            }
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 800b8d0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7f4 fc45 	bl	8000164 <strlen>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800b8e2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800b8e6:	f5a1 708e 	sub.w	r0, r1, #284	@ 0x11c
 800b8ea:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800b8ee:	6800      	ldr	r0, [r0, #0]
 800b8f0:	f003 ff20 	bl	800f734 <DWIN_SetText>
 800b8f4:	46b5      	mov	sp, r6
    }
}
 800b8f6:	bf00      	nop
 800b8f8:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b902:	bf00      	nop
 800b904:	08015ba4 	.word	0x08015ba4
 800b908:	08015b90 	.word	0x08015b90
 800b90c:	08015b98 	.word	0x08015b98
 800b910:	08015ba0 	.word	0x08015ba0

0800b914 <show_text_function_test>:

static void show_text_function_test(Screen_t *const screen_obj) {
 800b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b918:	b0d9      	sub	sp, #356	@ 0x164
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b920:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b924:	6018      	str	r0, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b926:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b92a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b934:	4619      	mov	r1, r3
 800b936:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b93a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	4413      	add	r3, r2
 800b94a:	334b      	adds	r3, #75	@ 0x4b
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800b952:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800b956:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b95a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b95e:	6819      	ldr	r1, [r3, #0]
 800b960:	4613      	mov	r3, r2
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	4413      	add	r3, r2
 800b966:	011b      	lsls	r3, r3, #4
 800b968:	440b      	add	r3, r1
 800b96a:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800b974:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800b978:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b97c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b980:	6819      	ldr	r1, [r3, #0]
 800b982:	4613      	mov	r3, r2
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	4413      	add	r3, r2
 800b988:	011b      	lsls	r3, r3, #4
 800b98a:	440b      	add	r3, r1
 800b98c:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	f887 3155 	strb.w	r3, [r7, #341]	@ 0x155

    char case_text[300] = "Self-test result: ";  
 800b996:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b99a:	f5a3 76a0 	sub.w	r6, r3, #320	@ 0x140
 800b99e:	4b9e      	ldr	r3, [pc, #632]	@ (800bc18 <show_text_function_test+0x304>)
 800b9a0:	4634      	mov	r4, r6
 800b9a2:	461d      	mov	r5, r3
 800b9a4:	6828      	ldr	r0, [r5, #0]
 800b9a6:	6869      	ldr	r1, [r5, #4]
 800b9a8:	68aa      	ldr	r2, [r5, #8]
 800b9aa:	68eb      	ldr	r3, [r5, #12]
 800b9ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9ae:	8a2b      	ldrh	r3, [r5, #16]
 800b9b0:	7caa      	ldrb	r2, [r5, #18]
 800b9b2:	8023      	strh	r3, [r4, #0]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	70a3      	strb	r3, [r4, #2]
 800b9b8:	f106 0313 	add.w	r3, r6, #19
 800b9bc:	f240 1219 	movw	r2, #281	@ 0x119
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f007 fb78 	bl	80130b8 <memset>
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
 800b9c8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b9cc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800b9dc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800b9e6:	fb01 f303 	mul.w	r3, r1, r3
 800b9ea:	4413      	add	r3, r2
 800b9ec:	336c      	adds	r3, #108	@ 0x6c
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	2b30      	cmp	r3, #48	@ 0x30
 800b9f2:	f040 80e9 	bne.w	800bbc8 <show_text_function_test+0x2b4>
 800b9f6:	466b      	mov	r3, sp
 800b9f8:	461d      	mov	r5, r3
        uint8_t failedCase[num_case]; 
 800b9fa:	f897 1155 	ldrb.w	r1, [r7, #341]	@ 0x155
 800b9fe:	460b      	mov	r3, r1
 800ba00:	3b01      	subs	r3, #1
 800ba02:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800ba06:	b2cb      	uxtb	r3, r1
 800ba08:	2200      	movs	r2, #0
 800ba0a:	469a      	mov	sl, r3
 800ba0c:	4693      	mov	fp, r2
 800ba0e:	f04f 0200 	mov.w	r2, #0
 800ba12:	f04f 0300 	mov.w	r3, #0
 800ba16:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ba1a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ba1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba22:	b2cb      	uxtb	r3, r1
 800ba24:	2200      	movs	r2, #0
 800ba26:	4698      	mov	r8, r3
 800ba28:	4691      	mov	r9, r2
 800ba2a:	f04f 0200 	mov.w	r2, #0
 800ba2e:	f04f 0300 	mov.w	r3, #0
 800ba32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ba36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ba3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ba3e:	460b      	mov	r3, r1
 800ba40:	3307      	adds	r3, #7
 800ba42:	08db      	lsrs	r3, r3, #3
 800ba44:	00db      	lsls	r3, r3, #3
 800ba46:	ebad 0d03 	sub.w	sp, sp, r3
 800ba4a:	466b      	mov	r3, sp
 800ba4c:	3300      	adds	r3, #0
 800ba4e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        uint8_t failedCount = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
        
        for (uint8_t i = 0; i < num_case; i++) {
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800ba5e:	e032      	b.n	800bac6 <show_text_function_test+0x1b2>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
 800ba60:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ba64:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ba6e:	4619      	mov	r1, r3
 800ba70:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800ba74:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ba7e:	fb01 f303 	mul.w	r3, r1, r3
 800ba82:	4413      	add	r3, r2
 800ba84:	3370      	adds	r3, #112	@ 0x70
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800ba8c:	4413      	add	r3, r2
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b30      	cmp	r3, #48	@ 0x30
 800ba92:	d113      	bne.n	800babc <show_text_function_test+0x1a8>
                if (failedCount < num_case) { // Bounds check!
 800ba94:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 800ba98:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d20d      	bcs.n	800babc <show_text_function_test+0x1a8>
                    failedCase[failedCount] = i + 1;
 800baa0:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800baa4:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 800baa8:	3201      	adds	r2, #1
 800baaa:	b2d1      	uxtb	r1, r2
 800baac:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800bab0:	54d1      	strb	r1, [r2, r3]
                    failedCount++;
 800bab2:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800bab6:	3301      	adds	r3, #1
 800bab8:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
        for (uint8_t i = 0; i < num_case; i++) {
 800babc:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800bac0:	3301      	adds	r3, #1
 800bac2:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800bac6:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 800baca:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800bace:	429a      	cmp	r2, r3
 800bad0:	d3c6      	bcc.n	800ba60 <show_text_function_test+0x14c>
                }
            }
        }

        if (failedCount == 0) {
 800bad2:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10f      	bne.n	800bafa <show_text_function_test+0x1e6>
            strncat(case_text, "Pass", sizeof(case_text) - strlen(case_text) - 1);
 800bada:	f107 0320 	add.w	r3, r7, #32
 800bade:	4618      	mov	r0, r3
 800bae0:	f7f4 fb40 	bl	8000164 <strlen>
 800bae4:	4603      	mov	r3, r0
 800bae6:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800baea:	3301      	adds	r3, #1
 800baec:	f107 0020 	add.w	r0, r7, #32
 800baf0:	461a      	mov	r2, r3
 800baf2:	494a      	ldr	r1, [pc, #296]	@ (800bc1c <show_text_function_test+0x308>)
 800baf4:	f007 fb04 	bl	8013100 <strncat>
 800baf8:	e064      	b.n	800bbc4 <show_text_function_test+0x2b0>
        } else {
            strncat(case_text, "Failed in ", sizeof(case_text) - strlen(case_text) - 1);
 800bafa:	f107 0320 	add.w	r3, r7, #32
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7f4 fb30 	bl	8000164 <strlen>
 800bb04:	4603      	mov	r3, r0
 800bb06:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	f107 0020 	add.w	r0, r7, #32
 800bb10:	461a      	mov	r2, r3
 800bb12:	4943      	ldr	r1, [pc, #268]	@ (800bc20 <show_text_function_test+0x30c>)
 800bb14:	f007 faf4 	bl	8013100 <strncat>
            
            for (int i = 0; i < failedCount; i++) {
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800bb1e:	e04b      	b.n	800bbb8 <show_text_function_test+0x2a4>
                char tempStr[20];
                snprintf(tempStr, sizeof(tempStr), "Case %d", failedCase[i]);
 800bb20:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800bb24:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800bb28:	4413      	add	r3, r2
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	f107 000c 	add.w	r0, r7, #12
 800bb30:	4a3c      	ldr	r2, [pc, #240]	@ (800bc24 <show_text_function_test+0x310>)
 800bb32:	2114      	movs	r1, #20
 800bb34:	f007 f980 	bl	8012e38 <sniprintf>
                
                // Check if we have enough space before concatenating
                if (strlen(case_text) + strlen(tempStr) + 3 < sizeof(case_text)) {
 800bb38:	f107 0320 	add.w	r3, r7, #32
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7f4 fb11 	bl	8000164 <strlen>
 800bb42:	4604      	mov	r4, r0
 800bb44:	f107 030c 	add.w	r3, r7, #12
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7f4 fb0b 	bl	8000164 <strlen>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	4423      	add	r3, r4
 800bb52:	3303      	adds	r3, #3
 800bb54:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800bb58:	d226      	bcs.n	800bba8 <show_text_function_test+0x294>
                    strncat(case_text, tempStr, sizeof(case_text) - strlen(case_text) - 1);
 800bb5a:	f107 0320 	add.w	r3, r7, #32
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7f4 fb00 	bl	8000164 <strlen>
 800bb64:	4603      	mov	r3, r0
 800bb66:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	f107 010c 	add.w	r1, r7, #12
 800bb70:	f107 0020 	add.w	r0, r7, #32
 800bb74:	461a      	mov	r2, r3
 800bb76:	f007 fac3 	bl	8013100 <strncat>
                    if (i < failedCount - 1) {
 800bb7a:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800bb84:	429a      	cmp	r2, r3
 800bb86:	da12      	bge.n	800bbae <show_text_function_test+0x29a>
                        strncat(case_text, ", ", sizeof(case_text) - strlen(case_text) - 1);
 800bb88:	f107 0320 	add.w	r3, r7, #32
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7f4 fae9 	bl	8000164 <strlen>
 800bb92:	4603      	mov	r3, r0
 800bb94:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800bb98:	3301      	adds	r3, #1
 800bb9a:	f107 0020 	add.w	r0, r7, #32
 800bb9e:	461a      	mov	r2, r3
 800bba0:	4921      	ldr	r1, [pc, #132]	@ (800bc28 <show_text_function_test+0x314>)
 800bba2:	f007 faad 	bl	8013100 <strncat>
 800bba6:	e002      	b.n	800bbae <show_text_function_test+0x29a>
                    }
                } else {
                    /* out of space */
                    printf("over flow in show_text_function_test\n");
 800bba8:	4820      	ldr	r0, [pc, #128]	@ (800bc2c <show_text_function_test+0x318>)
 800bbaa:	f007 f93d 	bl	8012e28 <puts>
            for (int i = 0; i < failedCount; i++) {
 800bbae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800bbb8:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800bbbc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	dbad      	blt.n	800bb20 <show_text_function_test+0x20c>
 800bbc4:	46ad      	mov	sp, r5
 800bbc6:	e00e      	b.n	800bbe6 <show_text_function_test+0x2d2>
                }
            }
        }
    } else {
        strncat(case_text, "N/A", sizeof(case_text) - strlen(case_text) - 1);
 800bbc8:	f107 0320 	add.w	r3, r7, #32
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7f4 fac9 	bl	8000164 <strlen>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800bbd8:	3301      	adds	r3, #1
 800bbda:	f107 0020 	add.w	r0, r7, #32
 800bbde:	461a      	mov	r2, r3
 800bbe0:	4913      	ldr	r1, [pc, #76]	@ (800bc30 <show_text_function_test+0x31c>)
 800bbe2:	f007 fa8d 	bl	8013100 <strncat>
    }
    
    DWIN_SetText((Dwin_t *)screen_obj, VP_Text_Test_Function, case_text, strlen(case_text));
 800bbe6:	f107 0320 	add.w	r3, r7, #32
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7f4 faba 	bl	8000164 <strlen>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	f107 0220 	add.w	r2, r7, #32
 800bbf8:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800bbfc:	f5a1 70ae 	sub.w	r0, r1, #348	@ 0x15c
 800bc00:	f44f 4117 	mov.w	r1, #38656	@ 0x9700
 800bc04:	6800      	ldr	r0, [r0, #0]
 800bc06:	f003 fd95 	bl	800f734 <DWIN_SetText>
}
 800bc0a:	bf00      	nop
 800bc0c:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 800bc10:	46bd      	mov	sp, r7
 800bc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc16:	bf00      	nop
 800bc18:	08015c04 	.word	0x08015c04
 800bc1c:	08015bbc 	.word	0x08015bbc
 800bc20:	08015bc4 	.word	0x08015bc4
 800bc24:	08015bd0 	.word	0x08015bd0
 800bc28:	08015ba0 	.word	0x08015ba0
 800bc2c:	08015bd8 	.word	0x08015bd8
 800bc30:	08015c00 	.word	0x08015c00

0800bc34 <get_text_result>:

/* create the string text result */
static void get_text_result(Screen_t *const screen_obj, char *result_line, uint8_t cur_num_ic) {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	71fb      	strb	r3, [r7, #7]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bc48:	4619      	mov	r1, r3
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bc50:	fb01 f303 	mul.w	r3, r1, r3
 800bc54:	4413      	add	r3, r2
 800bc56:	334b      	adds	r3, #75	@ 0x4b
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	753b      	strb	r3, [r7, #20]
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800bc5c:	7d3a      	ldrb	r2, [r7, #20]
 800bc5e:	68f9      	ldr	r1, [r7, #12]
 800bc60:	4613      	mov	r3, r2
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	4413      	add	r3, r2
 800bc66:	011b      	lsls	r3, r3, #4
 800bc68:	440b      	add	r3, r1
 800bc6a:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	74fb      	strb	r3, [r7, #19]
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800bc72:	7d3a      	ldrb	r2, [r7, #20]
 800bc74:	68f9      	ldr	r1, [r7, #12]
 800bc76:	4613      	mov	r3, r2
 800bc78:	005b      	lsls	r3, r3, #1
 800bc7a:	4413      	add	r3, r2
 800bc7c:	011b      	lsls	r3, r3, #4
 800bc7e:	440b      	add	r3, r1
 800bc80:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	74bb      	strb	r3, [r7, #18]
    
    uint8_t has_errors = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < num_pin; i++) {
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	75bb      	strb	r3, [r7, #22]
 800bc90:	e016      	b.n	800bcc0 <get_text_result+0x8c>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] != '1') {
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bc98:	4619      	mov	r1, r3
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bca0:	fb01 f303 	mul.w	r3, r1, r3
 800bca4:	4413      	add	r3, r2
 800bca6:	3368      	adds	r3, #104	@ 0x68
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	7dbb      	ldrb	r3, [r7, #22]
 800bcac:	4413      	add	r3, r2
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b31      	cmp	r3, #49	@ 0x31
 800bcb2:	d002      	beq.n	800bcba <get_text_result+0x86>
            has_errors = 1;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	75fb      	strb	r3, [r7, #23]
            break; // Found error, no need to check more
 800bcb8:	e006      	b.n	800bcc8 <get_text_result+0x94>
    for (uint8_t i = 0; i < num_pin; i++) {
 800bcba:	7dbb      	ldrb	r3, [r7, #22]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	75bb      	strb	r3, [r7, #22]
 800bcc0:	7dba      	ldrb	r2, [r7, #22]
 800bcc2:	7cfb      	ldrb	r3, [r7, #19]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d3e4      	bcc.n	800bc92 <get_text_result+0x5e>
        }
    }

    if (!has_errors) {
 800bcc8:	7dfb      	ldrb	r3, [r7, #23]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d11d      	bne.n	800bd0a <get_text_result+0xd6>
        for (uint8_t i = 0; i < num_case; i++) {
 800bcce:	2300      	movs	r3, #0
 800bcd0:	757b      	strb	r3, [r7, #21]
 800bcd2:	e016      	b.n	800bd02 <get_text_result+0xce>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bcda:	4619      	mov	r1, r3
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bce2:	fb01 f303 	mul.w	r3, r1, r3
 800bce6:	4413      	add	r3, r2
 800bce8:	3370      	adds	r3, #112	@ 0x70
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	7d7b      	ldrb	r3, [r7, #21]
 800bcee:	4413      	add	r3, r2
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2b30      	cmp	r3, #48	@ 0x30
 800bcf4:	d102      	bne.n	800bcfc <get_text_result+0xc8>
                has_errors = 1;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	75fb      	strb	r3, [r7, #23]
                break; // Found error, no need to check more
 800bcfa:	e006      	b.n	800bd0a <get_text_result+0xd6>
        for (uint8_t i = 0; i < num_case; i++) {
 800bcfc:	7d7b      	ldrb	r3, [r7, #21]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	757b      	strb	r3, [r7, #21]
 800bd02:	7d7a      	ldrb	r2, [r7, #21]
 800bd04:	7cbb      	ldrb	r3, [r7, #18]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d3e4      	bcc.n	800bcd4 <get_text_result+0xa0>
            }
        }
    }

    if (has_errors) {
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d007      	beq.n	800bd20 <get_text_result+0xec>
        sprintf((char *)result_line, "IC%d: Self-test result: failed", cur_num_ic + 1);
 800bd10:	79fb      	ldrb	r3, [r7, #7]
 800bd12:	3301      	adds	r3, #1
 800bd14:	461a      	mov	r2, r3
 800bd16:	4908      	ldr	r1, [pc, #32]	@ (800bd38 <get_text_result+0x104>)
 800bd18:	68b8      	ldr	r0, [r7, #8]
 800bd1a:	f007 f8c3 	bl	8012ea4 <siprintf>
    } else {
        sprintf((char *)result_line, "IC%d: Self-test result: pass", cur_num_ic + 1);
    }    
}
 800bd1e:	e006      	b.n	800bd2e <get_text_result+0xfa>
        sprintf((char *)result_line, "IC%d: Self-test result: pass", cur_num_ic + 1);
 800bd20:	79fb      	ldrb	r3, [r7, #7]
 800bd22:	3301      	adds	r3, #1
 800bd24:	461a      	mov	r2, r3
 800bd26:	4905      	ldr	r1, [pc, #20]	@ (800bd3c <get_text_result+0x108>)
 800bd28:	68b8      	ldr	r0, [r7, #8]
 800bd2a:	f007 f8bb 	bl	8012ea4 <siprintf>
}
 800bd2e:	bf00      	nop
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	08015c18 	.word	0x08015c18
 800bd3c:	08015c38 	.word	0x08015c38

0800bd40 <compelte_testing>:

/* using to store data when testing complete */
static void compelte_testing(Screen_t *const screen_obj) {
 800bd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd42:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800bd46:	af0a      	add	r7, sp, #40	@ 0x28
 800bd48:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bd4c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800bd50:	6018      	str	r0, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800bd52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bd56:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bd60:	4619      	mov	r1, r3
 800bd62:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bd66:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bd70:	fb01 f303 	mul.w	r3, r1, r3
 800bd74:	4413      	add	r3, r2
 800bd76:	334b      	adds	r3, #75	@ 0x4b
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
    uint8_t data_time[7];
    DS3231_Read_time(&ds3231,data_time);
 800bd7e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800bd82:	4619      	mov	r1, r3
 800bd84:	48b8      	ldr	r0, [pc, #736]	@ (800c068 <compelte_testing+0x328>)
 800bd86:	f003 fbc3 	bl	800f510 <DS3231_Read_time>

    /* Store data to sd card */
    char buffer[500] = {0};
 800bd8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bd8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bd92:	4618      	mov	r0, r3
 800bd94:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800bd98:	461a      	mov	r2, r3
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	f007 f98c 	bl	80130b8 <memset>
    // memset(buffer,0,300);
    char get_clean_num_ic[2] = {0};
 800bda0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bda4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800bda8:	2200      	movs	r2, #0
 800bdaa:	801a      	strh	r2, [r3, #0]
    get_clean_num_ic[0] = screen_obj->Program_Testx[index_program].num_IC[0];
 800bdac:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 800bdb0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bdb4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800bdb8:	6819      	ldr	r1, [r3, #0]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	4413      	add	r3, r2
 800bdc0:	011b      	lsls	r3, r3, #4
 800bdc2:	440b      	add	r3, r1
 800bdc4:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	781a      	ldrb	r2, [r3, #0]
 800bdcc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bdd0:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800bdd4:	701a      	strb	r2, [r3, #0]
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800bdd6:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 800bdda:	469e      	mov	lr, r3
 800bddc:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 800bde0:	461c      	mov	r4, r3
 800bde2:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 800bde6:	461d      	mov	r5, r3
 800bde8:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 800bdec:	461e      	mov	r6, r3
 800bdee:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 800bdf2:	60bb      	str	r3, [r7, #8]
 800bdf4:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 800bdf8:	607b      	str	r3, [r7, #4]
        ,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,screen_obj->Program_Testx[index_program].Name_IC,get_clean_num_ic,
 800bdfa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bdfe:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800be08:	4619      	mov	r1, r3
 800be0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800be0e:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 800be12:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800be16:	fb01 f303 	mul.w	r3, r1, r3
 800be1a:	3348      	adds	r3, #72	@ 0x48
 800be1c:	6812      	ldr	r2, [r2, #0]
 800be1e:	4413      	add	r3, r2
 800be20:	1d59      	adds	r1, r3, #5
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800be22:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 800be26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800be2a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800be2e:	6818      	ldr	r0, [r3, #0]
 800be30:	4613      	mov	r3, r2
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	4413      	add	r3, r2
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	4403      	add	r3, r0
 800be3a:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800be3e:	681b      	ldr	r3, [r3, #0]
        screen_obj->IC_Testerx[screen_obj->curr_device].result_text);
 800be40:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800be44:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 800be48:	6812      	ldr	r2, [r2, #0]
 800be4a:	f892 25b5 	ldrb.w	r2, [r2, #1461]	@ 0x5b5
 800be4e:	4694      	mov	ip, r2
 800be50:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800be54:	f5a2 7005 	sub.w	r0, r2, #532	@ 0x214
 800be58:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 800be5c:	fb02 f20c 	mul.w	r2, r2, ip
 800be60:	3278      	adds	r2, #120	@ 0x78
 800be62:	6800      	ldr	r0, [r0, #0]
 800be64:	4402      	add	r2, r0
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800be66:	f107 001c 	add.w	r0, r7, #28
 800be6a:	9208      	str	r2, [sp, #32]
 800be6c:	f107 0218 	add.w	r2, r7, #24
 800be70:	9207      	str	r2, [sp, #28]
 800be72:	9306      	str	r3, [sp, #24]
 800be74:	9105      	str	r1, [sp, #20]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	9204      	str	r2, [sp, #16]
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	9303      	str	r3, [sp, #12]
 800be7e:	9602      	str	r6, [sp, #8]
 800be80:	9501      	str	r5, [sp, #4]
 800be82:	9400      	str	r4, [sp, #0]
 800be84:	4673      	mov	r3, lr
 800be86:	4a79      	ldr	r2, [pc, #484]	@ (800c06c <compelte_testing+0x32c>)
 800be88:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800be8c:	f006 ffd4 	bl	8012e38 <sniprintf>
 800be90:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
    // memset(data_store->String_logging,0,strlen(buffer)+1);
    // memcpy(data_store->String_logging,buffer,strlen(buffer));
    // memset(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,0,sizeof(screen_obj->IC_Testerx[screen_obj->curr_device].result_text));
    // OS_task_post_event(AO_task_sd, STORE_DATA_TEST, (uint8_t *)&data_store, sizeof(DataLogging_t));

    memset(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,0,sizeof(screen_obj->IC_Testerx[screen_obj->curr_device].result_text));
 800be94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800be98:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bea2:	4619      	mov	r1, r3
 800bea4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bea8:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 800beac:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800beb0:	fb01 f303 	mul.w	r3, r1, r3
 800beb4:	3378      	adds	r3, #120	@ 0x78
 800beb6:	6812      	ldr	r2, [r2, #0]
 800beb8:	4413      	add	r3, r2
 800beba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bebe:	2100      	movs	r1, #0
 800bec0:	4618      	mov	r0, r3
 800bec2:	f007 f8f9 	bl	80130b8 <memset>
    if (written >= sizeof(buffer)) {
 800bec6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800beca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800bece:	d303      	bcc.n	800bed8 <compelte_testing+0x198>
        printf("ERROR: Buffer overflow in compelte_testing!\n");
 800bed0:	4867      	ldr	r0, [pc, #412]	@ (800c070 <compelte_testing+0x330>)
 800bed2:	f006 ffa9 	bl	8012e28 <puts>
 800bed6:	e0c2      	b.n	800c05e <compelte_testing+0x31e>
        return;
    }

    /* Send data to esp32 */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800bed8:	2008      	movs	r0, #8
 800beda:	f005 f8b5 	bl	8011048 <malloc>
 800bede:	4603      	mov	r3, r0
 800bee0:	461a      	mov	r2, r3
 800bee2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bee6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800beea:	601a      	str	r2, [r3, #0]
    data_send_esp32->data = (char *)malloc(strlen(buffer) + 2);
 800beec:	f107 031c 	add.w	r3, r7, #28
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7f4 f937 	bl	8000164 <strlen>
 800bef6:	4603      	mov	r3, r0
 800bef8:	1c9a      	adds	r2, r3, #2
 800befa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800befe:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bf02:	681c      	ldr	r4, [r3, #0]
 800bf04:	4610      	mov	r0, r2
 800bf06:	f005 f89f 	bl	8011048 <malloc>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data,"h",1);
 800bf0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bf12:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	4955      	ldr	r1, [pc, #340]	@ (800c074 <compelte_testing+0x334>)
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f007 fa1f 	bl	8013362 <memcpy>
    memcpy(data_send_esp32->data+1,buffer,strlen(buffer));
 800bf24:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bf28:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	1c5c      	adds	r4, r3, #1
 800bf32:	f107 031c 	add.w	r3, r7, #28
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7f4 f914 	bl	8000164 <strlen>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	f107 031c 	add.w	r3, r7, #28
 800bf42:	4619      	mov	r1, r3
 800bf44:	4620      	mov	r0, r4
 800bf46:	f007 fa0c 	bl	8013362 <memcpy>
    data_send_esp32->data[strlen(buffer)+1] = '\n';
 800bf4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bf4e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681c      	ldr	r4, [r3, #0]
 800bf56:	f107 031c 	add.w	r3, r7, #28
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7f4 f902 	bl	8000164 <strlen>
 800bf60:	4603      	mov	r3, r0
 800bf62:	3301      	adds	r3, #1
 800bf64:	4423      	add	r3, r4
 800bf66:	220a      	movs	r2, #10
 800bf68:	701a      	strb	r2, [r3, #0]
    data_send_esp32->len = strlen(buffer) + 2;
 800bf6a:	f107 031c 	add.w	r3, r7, #28
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7f4 f8f8 	bl	8000164 <strlen>
 800bf74:	4602      	mov	r2, r0
 800bf76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bf7a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3202      	adds	r2, #2
 800bf82:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800bf84:	4b3c      	ldr	r3, [pc, #240]	@ (800c078 <compelte_testing+0x338>)
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	f107 0214 	add.w	r2, r7, #20
 800bf8c:	2308      	movs	r3, #8
 800bf8e:	2100      	movs	r1, #0
 800bf90:	f004 fe28 	bl	8010be4 <OS_task_post_event>

    screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
 800bf94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bf98:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bfa8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bfb2:	fb01 f303 	mul.w	r3, r1, r3
 800bfb6:	4413      	add	r3, r2
 800bfb8:	334a      	adds	r3, #74	@ 0x4a
 800bfba:	2200      	movs	r2, #0
 800bfbc:	701a      	strb	r2, [r3, #0]
    screen_obj->IC_Testerx[screen_obj->curr_device].state = false;
 800bfbe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bfc2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bfcc:	4619      	mov	r1, r3
 800bfce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bfd2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800bfdc:	fb01 f303 	mul.w	r3, r1, r3
 800bfe0:	4413      	add	r3, r2
 800bfe2:	334c      	adds	r3, #76	@ 0x4c
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	701a      	strb	r2, [r3, #0]
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800bfe8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bfec:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800bff6:	4619      	mov	r1, r3
 800bff8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800bffc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c006:	fb01 f303 	mul.w	r3, r1, r3
 800c00a:	4413      	add	r3, r2
 800c00c:	334c      	adds	r3, #76	@ 0x4c
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	461a      	mov	r2, r3
 800c012:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800c016:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800c01a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c01e:	6818      	ldr	r0, [r3, #0]
 800c020:	f003 fc3b 	bl	800f89a <DWIN_SetVariable_Icon>
    /* switch page */
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
 800c024:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800c028:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c032:	4619      	mov	r1, r3
 800c034:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800c038:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c042:	fb01 f303 	mul.w	r3, r1, r3
 800c046:	4413      	add	r3, r2
 800c048:	3349      	adds	r3, #73	@ 0x49
 800c04a:	7819      	ldrb	r1, [r3, #0]
 800c04c:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 800c050:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800c054:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	f000 fcad 	bl	800c9b8 <show_main_page>

    /* free the array don't using */

}
 800c05e:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 800c062:	46bd      	mov	sp, r7
 800c064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c066:	bf00      	nop
 800c068:	200019b8 	.word	0x200019b8
 800c06c:	08015c58 	.word	0x08015c58
 800c070:	08015c78 	.word	0x08015c78
 800c074:	08015ca4 	.word	0x08015ca4
 800c078:	08016810 	.word	0x08016810

0800c07c <off_testing>:

static void off_testing(Screen_t *screen_obj) {
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
    compelte_testing(screen_obj);
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f7ff fe5b 	bl	800bd40 <compelte_testing>

    /* free array using in have new data test */
    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c090:	4619      	mov	r1, r3
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c098:	fb01 f303 	mul.w	r3, r1, r3
 800c09c:	4413      	add	r3, r2
 800c09e:	3374      	adds	r3, #116	@ 0x74
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00e      	beq.n	800c0c4 <off_testing+0x48>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c0b4:	fb01 f303 	mul.w	r3, r1, r3
 800c0b8:	4413      	add	r3, r2
 800c0ba:	3374      	adds	r3, #116	@ 0x74
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f004 ffca 	bl	8011058 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c0d2:	fb01 f303 	mul.w	r3, r1, r3
 800c0d6:	4413      	add	r3, r2
 800c0d8:	335c      	adds	r3, #92	@ 0x5c
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00e      	beq.n	800c0fe <off_testing+0x82>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c0ee:	fb01 f303 	mul.w	r3, r1, r3
 800c0f2:	4413      	add	r3, r2
 800c0f4:	335c      	adds	r3, #92	@ 0x5c
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f004 ffad 	bl	8011058 <free>
    }
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c104:	4619      	mov	r1, r3
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c10c:	fb01 f303 	mul.w	r3, r1, r3
 800c110:	4413      	add	r3, r2
 800c112:	3364      	adds	r3, #100	@ 0x64
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00e      	beq.n	800c138 <off_testing+0xbc>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c120:	4619      	mov	r1, r3
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c128:	fb01 f303 	mul.w	r3, r1, r3
 800c12c:	4413      	add	r3, r2
 800c12e:	3364      	adds	r3, #100	@ 0x64
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4618      	mov	r0, r3
 800c134:	f004 ff90 	bl	8011058 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c13e:	4619      	mov	r1, r3
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c146:	fb01 f303 	mul.w	r3, r1, r3
 800c14a:	4413      	add	r3, r2
 800c14c:	3368      	adds	r3, #104	@ 0x68
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00e      	beq.n	800c172 <off_testing+0xf6>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c15a:	4619      	mov	r1, r3
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c162:	fb01 f303 	mul.w	r3, r1, r3
 800c166:	4413      	add	r3, r2
 800c168:	3368      	adds	r3, #104	@ 0x68
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4618      	mov	r0, r3
 800c16e:	f004 ff73 	bl	8011058 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c178:	4619      	mov	r1, r3
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c180:	fb01 f303 	mul.w	r3, r1, r3
 800c184:	4413      	add	r3, r2
 800c186:	3370      	adds	r3, #112	@ 0x70
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00e      	beq.n	800c1ac <off_testing+0x130>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c194:	4619      	mov	r1, r3
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c19c:	fb01 f303 	mul.w	r3, r1, r3
 800c1a0:	4413      	add	r3, r2
 800c1a2:	3370      	adds	r3, #112	@ 0x70
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f004 ff56 	bl	8011058 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c1ba:	fb01 f303 	mul.w	r3, r1, r3
 800c1be:	4413      	add	r3, r2
 800c1c0:	3360      	adds	r3, #96	@ 0x60
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00e      	beq.n	800c1e6 <off_testing+0x16a>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c1d6:	fb01 f303 	mul.w	r3, r1, r3
 800c1da:	4413      	add	r3, r2
 800c1dc:	3360      	adds	r3, #96	@ 0x60
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f004 ff39 	bl	8011058 <free>
    }
}
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
	...

0800c1f0 <show_pulse>:

static void show_pulse(Screen_t *screen_obj, uint8_t curr_case) {
 800c1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f4:	b0d4      	sub	sp, #336	@ 0x150
 800c1f6:	af04      	add	r7, sp, #16
 800c1f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c1fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c200:	6018      	str	r0, [r3, #0]
 800c202:	460a      	mov	r2, r1
 800c204:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c208:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800c20c:	701a      	strb	r2, [r3, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 800c20e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c212:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c21c:	4619      	mov	r1, r3
 800c21e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c222:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c22c:	fb01 f303 	mul.w	r3, r1, r3
 800c230:	4413      	add	r3, r2
 800c232:	334b      	adds	r3, #75	@ 0x4b
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	4619      	mov	r1, r3
 800c238:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c23c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	460b      	mov	r3, r1
 800c244:	005b      	lsls	r3, r3, #1
 800c246:	440b      	add	r3, r1
 800c248:	011b      	lsls	r3, r3, #4
 800c24a:	4413      	add	r3, r2
 800c24c:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800c256:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c25a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c264:	4619      	mov	r1, r3
 800c266:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c26a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c274:	fb01 f303 	mul.w	r3, r1, r3
 800c278:	4413      	add	r3, r2
 800c27a:	334b      	adds	r3, #75	@ 0x4b
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 800c282:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 800c286:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c28a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c28e:	6819      	ldr	r1, [r3, #0]
 800c290:	4613      	mov	r3, r2
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	4413      	add	r3, r2
 800c296:	011b      	lsls	r3, r3, #4
 800c298:	440b      	add	r3, r1
 800c29a:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800c2a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c2a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c2b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c2c2:	fb01 f303 	mul.w	r3, r1, r3
 800c2c6:	4413      	add	r3, r2
 800c2c8:	334b      	adds	r3, #75	@ 0x4b
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
    
    char ShowCase_String[15];
    uint8_t index_data;
    uint16_t vp_pulse = VP_Pulse_graph;
 800c2d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2d4:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    uint8_t pins_to_show = num_pin - 2; 
 800c2d8:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 800c2dc:	3b02      	subs	r3, #2
 800c2de:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
    uint8_t skip_index1 = (num_pin / 2) - 1; // skip index
 800c2e2:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 800c2e6:	085b      	lsrs	r3, r3, #1
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    uint8_t skip_index2 = num_pin - 1;       // skip index
 800c2f0:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    uint16_t Address_VP = VP_Text_Pin_Pulse;
 800c2fa:	f249 7350 	movw	r3, #38736	@ 0x9750
 800c2fe:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    uint16_t vp_vertical = VP_vertical_line;
 800c302:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c306:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    uint16_t vp_icon_clock = VP_ICON_CLOCK;
 800c30a:	f44f 4386 	mov.w	r3, #17152	@ 0x4300
 800c30e:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138

    char *data_copy = malloc(screen_obj->Program_Testx[index_program].data_pin_len + 1);
 800c312:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800c316:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c31a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c31e:	6819      	ldr	r1, [r3, #0]
 800c320:	4613      	mov	r3, r2
 800c322:	005b      	lsls	r3, r3, #1
 800c324:	4413      	add	r3, r2
 800c326:	011b      	lsls	r3, r3, #4
 800c328:	440b      	add	r3, r1
 800c32a:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	3301      	adds	r3, #1
 800c332:	4618      	mov	r0, r3
 800c334:	f004 fe88 	bl	8011048 <malloc>
 800c338:	4603      	mov	r3, r0
 800c33a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    memcpy(data_copy, screen_obj->Program_Testx[index_program].data_pin, screen_obj->Program_Testx[index_program].data_pin_len);
 800c33e:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800c342:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c346:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c34a:	6819      	ldr	r1, [r3, #0]
 800c34c:	4613      	mov	r3, r2
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	4413      	add	r3, r2
 800c352:	011b      	lsls	r3, r3, #4
 800c354:	440b      	add	r3, r1
 800c356:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 800c35a:	6818      	ldr	r0, [r3, #0]
 800c35c:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800c360:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c364:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c368:	6819      	ldr	r1, [r3, #0]
 800c36a:	4613      	mov	r3, r2
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	4413      	add	r3, r2
 800c370:	011b      	lsls	r3, r3, #4
 800c372:	440b      	add	r3, r1
 800c374:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	4601      	mov	r1, r0
 800c37e:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800c382:	f006 ffee 	bl	8013362 <memcpy>
    data_copy[screen_obj->Program_Testx[index_program].data_pin_len] = '\0'; 
 800c386:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800c38a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c38e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c392:	6819      	ldr	r1, [r3, #0]
 800c394:	4613      	mov	r3, r2
 800c396:	005b      	lsls	r3, r3, #1
 800c398:	4413      	add	r3, r2
 800c39a:	011b      	lsls	r3, r3, #4
 800c39c:	440b      	add	r3, r1
 800c39e:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c3aa:	4413      	add	r3, r2
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	701a      	strb	r2, [r3, #0]

    char pin_names[18][10];
    uint8_t total_pins = 0;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    char *temp_buf = strtok(data_copy, "\n");
 800c3b6:	49c5      	ldr	r1, [pc, #788]	@ (800c6cc <show_pulse+0x4dc>)
 800c3b8:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800c3bc:	f006 fed8 	bl	8013170 <strtok>
 800c3c0:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

    while (temp_buf != NULL && total_pins < 18) {
 800c3c4:	e018      	b.n	800c3f8 <show_pulse+0x208>
        strcpy(pin_names[total_pins], temp_buf);
 800c3c6:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800c3ca:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	440b      	add	r3, r1
 800c3d8:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f006 ffaa 	bl	8013336 <strcpy>
        total_pins++;
 800c3e2:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        temp_buf = strtok(NULL, "\n");
 800c3ec:	49b7      	ldr	r1, [pc, #732]	@ (800c6cc <show_pulse+0x4dc>)
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	f006 febe 	bl	8013170 <strtok>
 800c3f4:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    while (temp_buf != NULL && total_pins < 18) {
 800c3f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d003      	beq.n	800c408 <show_pulse+0x218>
 800c400:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800c404:	2b11      	cmp	r3, #17
 800c406:	d9de      	bls.n	800c3c6 <show_pulse+0x1d6>
    }

    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1, 
 800c408:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c40c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c416:	4619      	mov	r1, r3
 800c418:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c41c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c426:	fb01 f303 	mul.w	r3, r1, r3
 800c42a:	4413      	add	r3, r2
 800c42c:	3348      	adds	r3, #72	@ 0x48
 800c42e:	781b      	ldrb	r3, [r3, #0]
    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
 800c430:	1c59      	adds	r1, r3, #1
            (pins_to_show + 6) / 7); // Calculate total cases needed
 800c432:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 800c436:	3306      	adds	r3, #6
    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
 800c438:	4aa5      	ldr	r2, [pc, #660]	@ (800c6d0 <show_pulse+0x4e0>)
 800c43a:	fb82 0203 	smull	r0, r2, r2, r3
 800c43e:	441a      	add	r2, r3
 800c440:	1092      	asrs	r2, r2, #2
 800c442:	17db      	asrs	r3, r3, #31
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	460b      	mov	r3, r1
 800c44e:	4aa1      	ldr	r2, [pc, #644]	@ (800c6d4 <show_pulse+0x4e4>)
 800c450:	210f      	movs	r1, #15
 800c452:	f006 fcf1 	bl	8012e38 <sniprintf>

    DWIN_SetText((Dwin_t *)screen_obj, VP_Show_CurrentCase, ShowCase_String, strlen(ShowCase_String));
 800c456:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7f3 fe82 	bl	8000164 <strlen>
 800c460:	4603      	mov	r3, r0
 800c462:	b29b      	uxth	r3, r3
 800c464:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 800c468:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800c46c:	f5a1 709e 	sub.w	r0, r1, #316	@ 0x13c
 800c470:	f249 3180 	movw	r1, #37760	@ 0x9380
 800c474:	6800      	ldr	r0, [r0, #0]
 800c476:	f003 f95d 	bl	800f734 <DWIN_SetText>

    /* TURN OFF ALL CLOCK ICON */
    uint8_t clock_buf[49] = {0};
 800c47a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c47e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800c482:	4618      	mov	r0, r3
 800c484:	2331      	movs	r3, #49	@ 0x31
 800c486:	461a      	mov	r2, r3
 800c488:	2100      	movs	r1, #0
 800c48a:	f006 fe15 	bl	80130b8 <memset>
    memset(clock_buf,ICON_CLOCK_NONE,sizeof(clock_buf));
 800c48e:	f107 031c 	add.w	r3, r7, #28
 800c492:	2231      	movs	r2, #49	@ 0x31
 800c494:	2102      	movs	r1, #2
 800c496:	4618      	mov	r0, r3
 800c498:	f006 fe0e 	bl	80130b8 <memset>
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,clock_buf,49);
 800c49c:	f107 021c 	add.w	r2, r7, #28
 800c4a0:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800c4a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c4a8:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c4ac:	2331      	movs	r3, #49	@ 0x31
 800c4ae:	6800      	ldr	r0, [r0, #0]
 800c4b0:	f003 fa20 	bl	800f8f4 <DWIN_SetArray_Icon>

    for (uint8_t i = 0; i < 7; i++) {
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 800c4ba:	e1c6      	b.n	800c84a <show_pulse+0x65a>
        uint8_t display_pin = (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * 7) + i;
 800c4bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c4c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c4d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c4da:	fb01 f303 	mul.w	r3, r1, r3
 800c4de:	4413      	add	r3, r2
 800c4e0:	3348      	adds	r3, #72	@ 0x48
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	00d2      	lsls	r2, r2, #3
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c4f0:	4413      	add	r3, r2
 800c4f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        
        if (display_pin < pins_to_show) {
 800c4f6:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800c4fa:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 800c4fe:	429a      	cmp	r2, r3
 800c500:	f080 813e 	bcs.w	800c780 <show_pulse+0x590>
            uint8_t actual_pin_index = display_pin;
 800c504:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c508:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            
            // Adjust for skipped indices
            if (actual_pin_index >= skip_index1) {
 800c50c:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800c510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c514:	429a      	cmp	r2, r3
 800c516:	d304      	bcc.n	800c522 <show_pulse+0x332>
                actual_pin_index++; // Skip VCC
 800c518:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800c51c:	3301      	adds	r3, #1
 800c51e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            }
            if (actual_pin_index >= skip_index2) {
 800c522:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800c526:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d304      	bcc.n	800c538 <show_pulse+0x348>
                actual_pin_index++; // Skip GND
 800c52e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800c532:	3301      	adds	r3, #1
 800c534:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            }
            
            // Calculate data index
            index_data = num_case * actual_pin_index;
 800c538:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c53c:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800c540:	fb02 f303 	mul.w	r3, r2, r3
 800c544:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
            
            // Create the line with actual data
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data] == 3) { // UP CLOCK
 800c548:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c54c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c556:	4619      	mov	r1, r3
 800c558:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c55c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c566:	fb01 f303 	mul.w	r3, r1, r3
 800c56a:	4413      	add	r3, r2
 800c56c:	3374      	adds	r3, #116	@ 0x74
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800c574:	4413      	add	r3, r2
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d14a      	bne.n	800c612 <show_pulse+0x422>
                /* don't show pulse graph */
                uint8_t up_clock[7] = {0};
 800c57c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c580:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c584:	461a      	mov	r2, r3
 800c586:	2300      	movs	r3, #0
 800c588:	6013      	str	r3, [r2, #0]
 800c58a:	f8c2 3003 	str.w	r3, [r2, #3]
                memset(up_clock,ICON_CLOCK_NONE,sizeof(up_clock));
 800c58e:	f107 0314 	add.w	r3, r7, #20
 800c592:	2207      	movs	r2, #7
 800c594:	2102      	movs	r1, #2
 800c596:	4618      	mov	r0, r3
 800c598:	f006 fd8e 	bl	80130b8 <memset>
                memset(up_clock,ICON_UP_CLOCK,num_case);
 800c59c:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800c5a0:	f107 0314 	add.w	r3, r7, #20
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f006 fd86 	bl	80130b8 <memset>
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c5ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c5b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c5c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c5ca:	fb01 f303 	mul.w	r3, r1, r3
 800c5ce:	4413      	add	r3, r2
 800c5d0:	3374      	adds	r3, #116	@ 0x74
 800c5d2:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c5d4:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c5d8:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c5da:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800c5de:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c5e2:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c5e6:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800c5ea:	9201      	str	r2, [sp, #4]
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	6800      	ldr	r0, [r0, #0]
 800c5f4:	f003 f9fa 	bl	800f9ec <DWIN_Create_Basic_line>
                                num_case);
                DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,up_clock,sizeof(up_clock));
 800c5f8:	f107 0214 	add.w	r2, r7, #20
 800c5fc:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800c600:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c604:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c608:	2307      	movs	r3, #7
 800c60a:	6800      	ldr	r0, [r0, #0]
 800c60c:	f003 f972 	bl	800f8f4 <DWIN_SetArray_Icon>
 800c610:	e094      	b.n	800c73c <show_pulse+0x54c>
            } else if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data] == 4) {
 800c612:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c616:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c620:	4619      	mov	r1, r3
 800c622:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c626:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c630:	fb01 f303 	mul.w	r3, r1, r3
 800c634:	4413      	add	r3, r2
 800c636:	3374      	adds	r3, #116	@ 0x74
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800c63e:	4413      	add	r3, r2
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	2b04      	cmp	r3, #4
 800c644:	d148      	bne.n	800c6d8 <show_pulse+0x4e8>
                uint8_t down_clock[7] = {0};
 800c646:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c64a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c64e:	461a      	mov	r2, r3
 800c650:	2300      	movs	r3, #0
 800c652:	6013      	str	r3, [r2, #0]
 800c654:	f8c2 3003 	str.w	r3, [r2, #3]
                memset(down_clock,ICON_DOWN_CLOCK,sizeof(down_clock));
 800c658:	f107 030c 	add.w	r3, r7, #12
 800c65c:	2207      	movs	r2, #7
 800c65e:	2100      	movs	r1, #0
 800c660:	4618      	mov	r0, r3
 800c662:	f006 fd29 	bl	80130b8 <memset>
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c666:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c66a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c674:	4619      	mov	r1, r3
 800c676:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c67a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c684:	fb01 f303 	mul.w	r3, r1, r3
 800c688:	4413      	add	r3, r2
 800c68a:	3374      	adds	r3, #116	@ 0x74
 800c68c:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c68e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c692:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c694:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800c698:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c69c:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c6a0:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800c6a4:	9201      	str	r2, [sp, #4]
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	6800      	ldr	r0, [r0, #0]
 800c6ae:	f003 f99d 	bl	800f9ec <DWIN_Create_Basic_line>
                                num_case);
                DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,down_clock,sizeof(down_clock));
 800c6b2:	f107 020c 	add.w	r2, r7, #12
 800c6b6:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 800c6ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c6be:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c6c2:	2307      	movs	r3, #7
 800c6c4:	6800      	ldr	r0, [r0, #0]
 800c6c6:	f003 f915 	bl	800f8f4 <DWIN_SetArray_Icon>
 800c6ca:	e037      	b.n	800c73c <show_pulse+0x54c>
 800c6cc:	08015b70 	.word	0x08015b70
 800c6d0:	92492493 	.word	0x92492493
 800c6d4:	08015a00 	.word	0x08015a00
            } else {
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800c6d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	461a      	mov	r2, r3
 800c6e0:	0052      	lsls	r2, r2, #1
 800c6e2:	4413      	add	r3, r2
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	0112      	lsls	r2, r2, #4
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	3390      	adds	r3, #144	@ 0x90
 800c6ee:	b29e      	uxth	r6, r3
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c6f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c6f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c6fe:	4619      	mov	r1, r3
 800c700:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c704:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c70e:	fb01 f303 	mul.w	r3, r1, r3
 800c712:	4413      	add	r3, r2
 800c714:	3374      	adds	r3, #116	@ 0x74
 800c716:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800c718:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800c71c:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800c71e:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800c722:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c726:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c72a:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 800c72e:	9201      	str	r2, [sp, #4]
 800c730:	9300      	str	r3, [sp, #0]
 800c732:	4633      	mov	r3, r6
 800c734:	2264      	movs	r2, #100	@ 0x64
 800c736:	6800      	ldr	r0, [r0, #0]
 800c738:	f003 f958 	bl	800f9ec <DWIN_Create_Basic_line>
                                num_case);
            }            
            // Set pin name
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
 800c73c:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800c740:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800c744:	4613      	mov	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	005b      	lsls	r3, r3, #1
 800c74c:	18ce      	adds	r6, r1, r3
                        strlen(pin_names[actual_pin_index]));
 800c74e:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 800c752:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800c756:	4613      	mov	r3, r2
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	4413      	add	r3, r2
 800c75c:	005b      	lsls	r3, r3, #1
 800c75e:	440b      	add	r3, r1
 800c760:	4618      	mov	r0, r3
 800c762:	f7f3 fcff 	bl	8000164 <strlen>
 800c766:	4603      	mov	r3, r0
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
 800c768:	b29b      	uxth	r3, r3
 800c76a:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 800c76e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c772:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c776:	4632      	mov	r2, r6
 800c778:	6800      	ldr	r0, [r0, #0]
 800c77a:	f002 ffdb 	bl	800f734 <DWIN_SetText>
 800c77e:	e04f      	b.n	800c820 <show_pulse+0x630>
            
        } else { /* don't using this */
 800c780:	466b      	mov	r3, sp
 800c782:	469a      	mov	sl, r3
            uint8_t low_buf[12 - num_case];
 800c784:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c788:	f1c3 060c 	rsb	r6, r3, #12
 800c78c:	1e73      	subs	r3, r6, #1
 800c78e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c792:	4632      	mov	r2, r6
 800c794:	2300      	movs	r3, #0
 800c796:	4614      	mov	r4, r2
 800c798:	461d      	mov	r5, r3
 800c79a:	f04f 0200 	mov.w	r2, #0
 800c79e:	f04f 0300 	mov.w	r3, #0
 800c7a2:	00eb      	lsls	r3, r5, #3
 800c7a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c7a8:	00e2      	lsls	r2, r4, #3
 800c7aa:	4632      	mov	r2, r6
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	4690      	mov	r8, r2
 800c7b0:	4699      	mov	r9, r3
 800c7b2:	f04f 0200 	mov.w	r2, #0
 800c7b6:	f04f 0300 	mov.w	r3, #0
 800c7ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c7be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c7c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c7c6:	4633      	mov	r3, r6
 800c7c8:	3307      	adds	r3, #7
 800c7ca:	08db      	lsrs	r3, r3, #3
 800c7cc:	00db      	lsls	r3, r3, #3
 800c7ce:	ebad 0d03 	sub.w	sp, sp, r3
 800c7d2:	ab04      	add	r3, sp, #16
 800c7d4:	3300      	adds	r3, #0
 800c7d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            memset(low_buf,0,sizeof(low_buf));
 800c7da:	4633      	mov	r3, r6
 800c7dc:	461a      	mov	r2, r3
 800c7de:	2100      	movs	r1, #0
 800c7e0:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800c7e4:	f006 fc68 	bl	80130b8 <memset>
            DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 800c7e8:	b2f3      	uxtb	r3, r6
 800c7ea:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 800c7ee:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c7f2:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 800c7f6:	9301      	str	r3, [sp, #4]
 800c7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	2300      	movs	r3, #0
 800c800:	2200      	movs	r2, #0
 800c802:	6800      	ldr	r0, [r0, #0]
 800c804:	f003 f8f2 	bl	800f9ec <DWIN_Create_Basic_line>
                                low_buf, 
                                sizeof(low_buf));
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, " ", 1);
 800c808:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 800c80c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c810:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c814:	2301      	movs	r3, #1
 800c816:	4a67      	ldr	r2, [pc, #412]	@ (800c9b4 <show_pulse+0x7c4>)
 800c818:	6800      	ldr	r0, [r0, #0]
 800c81a:	f002 ff8b 	bl	800f734 <DWIN_SetText>
 800c81e:	46d5      	mov	sp, sl
        }
        
        vp_pulse += 0x200;
 800c820:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800c824:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c828:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        
        Address_VP += 0x10;
 800c82c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800c830:	3310      	adds	r3, #16
 800c832:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
        vp_icon_clock += 0x07;
 800c836:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800c83a:	3307      	adds	r3, #7
 800c83c:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    for (uint8_t i = 0; i < 7; i++) {
 800c840:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c844:	3301      	adds	r3, #1
 800c846:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 800c84a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c84e:	2b06      	cmp	r3, #6
 800c850:	f67f ae34 	bls.w	800c4bc <show_pulse+0x2cc>
    }

    for (uint8_t i = 0; i < 14; i++) {
 800c854:	2300      	movs	r3, #0
 800c856:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 800c85a:	e09c      	b.n	800c996 <show_pulse+0x7a6>
        if (i < num_case) {
 800c85c:	f897 212d 	ldrb.w	r2, [r7, #301]	@ 0x12d
 800c860:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c864:	429a      	cmp	r2, r3
 800c866:	d279      	bcs.n	800c95c <show_pulse+0x76c>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '1') {
 800c868:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c86c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c876:	4619      	mov	r1, r3
 800c878:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c87c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800c886:	fb01 f303 	mul.w	r3, r1, r3
 800c88a:	4413      	add	r3, r2
 800c88c:	3370      	adds	r3, #112	@ 0x70
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c894:	4413      	add	r3, r2
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	2b31      	cmp	r3, #49	@ 0x31
 800c89a:	d12f      	bne.n	800c8fc <show_pulse+0x70c>
                DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,100 + (50 * i),110,100 + (50 * i),415,0x01ED);
 800c89c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	0092      	lsls	r2, r2, #2
 800c8a6:	4413      	add	r3, r2
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	0091      	lsls	r1, r2, #2
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4413      	add	r3, r2
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	3364      	adds	r3, #100	@ 0x64
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	0089      	lsls	r1, r1, #2
 800c8c4:	440b      	add	r3, r1
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	0088      	lsls	r0, r1, #2
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	440b      	add	r3, r1
 800c8d0:	005b      	lsls	r3, r3, #1
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	3364      	adds	r3, #100	@ 0x64
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 800c8dc:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c8e0:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 800c8e4:	f240 14ed 	movw	r4, #493	@ 0x1ed
 800c8e8:	9402      	str	r4, [sp, #8]
 800c8ea:	f240 149f 	movw	r4, #415	@ 0x19f
 800c8ee:	9401      	str	r4, [sp, #4]
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	236e      	movs	r3, #110	@ 0x6e
 800c8f4:	6800      	ldr	r0, [r0, #0]
 800c8f6:	f003 fa87 	bl	800fe08 <DWIN_Create_Single_line>
 800c8fa:	e041      	b.n	800c980 <show_pulse+0x790>
            } else {
                DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,100 + (50 * i),110,100 + (50 * i),415,0xF800);
 800c8fc:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c900:	b29b      	uxth	r3, r3
 800c902:	461a      	mov	r2, r3
 800c904:	0092      	lsls	r2, r2, #2
 800c906:	4413      	add	r3, r2
 800c908:	461a      	mov	r2, r3
 800c90a:	0091      	lsls	r1, r2, #2
 800c90c:	461a      	mov	r2, r3
 800c90e:	460b      	mov	r3, r1
 800c910:	4413      	add	r3, r2
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	b29b      	uxth	r3, r3
 800c916:	3364      	adds	r3, #100	@ 0x64
 800c918:	b29a      	uxth	r2, r3
 800c91a:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c91e:	b29b      	uxth	r3, r3
 800c920:	4619      	mov	r1, r3
 800c922:	0089      	lsls	r1, r1, #2
 800c924:	440b      	add	r3, r1
 800c926:	4619      	mov	r1, r3
 800c928:	0088      	lsls	r0, r1, #2
 800c92a:	4619      	mov	r1, r3
 800c92c:	4603      	mov	r3, r0
 800c92e:	440b      	add	r3, r1
 800c930:	005b      	lsls	r3, r3, #1
 800c932:	b29b      	uxth	r3, r3
 800c934:	3364      	adds	r3, #100	@ 0x64
 800c936:	b29b      	uxth	r3, r3
 800c938:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 800c93c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c940:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 800c944:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 800c948:	9402      	str	r4, [sp, #8]
 800c94a:	f240 149f 	movw	r4, #415	@ 0x19f
 800c94e:	9401      	str	r4, [sp, #4]
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	236e      	movs	r3, #110	@ 0x6e
 800c954:	6800      	ldr	r0, [r0, #0]
 800c956:	f003 fa57 	bl	800fe08 <DWIN_Create_Single_line>
 800c95a:	e011      	b.n	800c980 <show_pulse+0x790>
            }
        } else {
            DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,0,0,0,0,0xF800);
 800c95c:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 800c960:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c964:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800c968:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800c96c:	9302      	str	r3, [sp, #8]
 800c96e:	2300      	movs	r3, #0
 800c970:	9301      	str	r3, [sp, #4]
 800c972:	2300      	movs	r3, #0
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	2300      	movs	r3, #0
 800c978:	2200      	movs	r2, #0
 800c97a:	6800      	ldr	r0, [r0, #0]
 800c97c:	f003 fa44 	bl	800fe08 <DWIN_Create_Single_line>
        }
        vp_vertical += 0x200;
 800c980:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800c984:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c988:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    for (uint8_t i = 0; i < 14; i++) {
 800c98c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c990:	3301      	adds	r3, #1
 800c992:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 800c996:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c99a:	2b0d      	cmp	r3, #13
 800c99c:	f67f af5e 	bls.w	800c85c <show_pulse+0x66c>
    }

    free(data_copy);
 800c9a0:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800c9a4:	f004 fb58 	bl	8011058 <free>
}
 800c9a8:	bf00      	nop
 800c9aa:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b4:	08015ca8 	.word	0x08015ca8

0800c9b8 <show_main_page>:

void show_main_page(Screen_t *const screen_obj, uint8_t PageMain, uint8_t curr_program) {
 800c9b8:	b590      	push	{r4, r7, lr}
 800c9ba:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800c9be:	af02      	add	r7, sp, #8
 800c9c0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9c4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9c8:	6018      	str	r0, [r3, #0]
 800c9ca:	4608      	mov	r0, r1
 800c9cc:	4611      	mov	r1, r2
 800c9ce:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9d2:	f2a3 233d 	subw	r3, r3, #573	@ 0x23d
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	701a      	strb	r2, [r3, #0]
 800c9da:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9de:	f2a3 233e 	subw	r3, r3, #574	@ 0x23e
 800c9e2:	460a      	mov	r2, r1
 800c9e4:	701a      	strb	r2, [r3, #0]
    
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800c9e6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9ea:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c9fa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ca04:	fb01 f303 	mul.w	r3, r1, r3
 800ca08:	4413      	add	r3, r2
 800ca0a:	334b      	adds	r3, #75	@ 0x4b
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800ca12:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800ca16:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca1a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ca1e:	6819      	ldr	r1, [r3, #0]
 800ca20:	4613      	mov	r3, r2
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	4413      	add	r3, r2
 800ca26:	011b      	lsls	r3, r3, #4
 800ca28:	440b      	add	r3, r1
 800ca2a:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800ca34:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800ca38:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca3c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ca40:	6819      	ldr	r1, [r3, #0]
 800ca42:	4613      	mov	r3, r2
 800ca44:	005b      	lsls	r3, r3, #1
 800ca46:	4413      	add	r3, r2
 800ca48:	011b      	lsls	r3, r3, #4
 800ca4a:	440b      	add	r3, r1
 800ca4c:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
    switch (PageMain) {
 800ca56:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca5a:	f2a3 233d 	subw	r3, r3, #573	@ 0x23d
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	3b64      	subs	r3, #100	@ 0x64
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	f200 839c 	bhi.w	800d1a0 <show_main_page+0x7e8>
 800ca68:	a201      	add	r2, pc, #4	@ (adr r2, 800ca70 <show_main_page+0xb8>)
 800ca6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6e:	bf00      	nop
 800ca70:	0800cb57 	.word	0x0800cb57
 800ca74:	0800ca81 	.word	0x0800ca81
 800ca78:	0800cc43 	.word	0x0800cc43
 800ca7c:	0800cf31 	.word	0x0800cf31
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 800ca80:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca84:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ca8e:	4619      	mov	r1, r3
 800ca90:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ca94:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800ca98:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ca9c:	fb01 f303 	mul.w	r3, r1, r3
 800caa0:	3348      	adds	r3, #72	@ 0x48
 800caa2:	6812      	ldr	r2, [r2, #0]
 800caa4:	4413      	add	r3, r2
 800caa6:	1d5c      	adds	r4, r3, #5
 800caa8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800caac:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cab6:	4619      	mov	r1, r3
 800cab8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cabc:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800cac0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cac4:	fb01 f303 	mul.w	r3, r1, r3
 800cac8:	3348      	adds	r3, #72	@ 0x48
 800caca:	6812      	ldr	r2, [r2, #0]
 800cacc:	4413      	add	r3, r2
 800cace:	3305      	adds	r3, #5
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7f3 fb47 	bl	8000164 <strlen>
 800cad6:	4603      	mov	r3, r0
 800cad8:	b29b      	uxth	r3, r3
 800cada:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800cade:	f5a2 700f 	sub.w	r0, r2, #572	@ 0x23c
 800cae2:	4622      	mov	r2, r4
 800cae4:	f249 3150 	movw	r1, #37712	@ 0x9350
 800cae8:	6800      	ldr	r0, [r0, #0]
 800caea:	f002 fe23 	bl	800f734 <DWIN_SetText>
            DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800caee:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800caf2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cafc:	4619      	mov	r1, r3
 800cafe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb02:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cb0c:	fb01 f303 	mul.w	r3, r1, r3
 800cb10:	4413      	add	r3, r2
 800cb12:	334c      	adds	r3, #76	@ 0x4c
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb1c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cb20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cb24:	6818      	ldr	r0, [r3, #0]
 800cb26:	f002 feb8 	bl	800f89a <DWIN_SetVariable_Icon>
            Screen_ShowData_Mainpage(screen_obj,curr_program);
 800cb2a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb2e:	f2a3 233e 	subw	r3, r3, #574	@ 0x23e
 800cb32:	781a      	ldrb	r2, [r3, #0]
 800cb34:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb38:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cb3c:	4611      	mov	r1, r2
 800cb3e:	6818      	ldr	r0, [r3, #0]
 800cb40:	f7fe f9d2 	bl	800aee8 <Screen_ShowData_Mainpage>

            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN);
 800cb44:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb48:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cb4c:	2165      	movs	r1, #101	@ 0x65
 800cb4e:	6818      	ldr	r0, [r3, #0]
 800cb50:	f002 fdc9 	bl	800f6e6 <DWIN_SetPage>
        } break;
 800cb54:	e324      	b.n	800d1a0 <show_main_page+0x7e8>
        case DWINPAGE_MAIN_FINISH: {
            /* Show data */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 800cb56:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb5a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cb64:	4619      	mov	r1, r3
 800cb66:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb6a:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800cb6e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cb72:	fb01 f303 	mul.w	r3, r1, r3
 800cb76:	3348      	adds	r3, #72	@ 0x48
 800cb78:	6812      	ldr	r2, [r2, #0]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	1d5c      	adds	r4, r3, #5
 800cb7e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb82:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cb92:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800cb96:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cb9a:	fb01 f303 	mul.w	r3, r1, r3
 800cb9e:	3348      	adds	r3, #72	@ 0x48
 800cba0:	6812      	ldr	r2, [r2, #0]
 800cba2:	4413      	add	r3, r2
 800cba4:	3305      	adds	r3, #5
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7f3 fadc 	bl	8000164 <strlen>
 800cbac:	4603      	mov	r3, r0
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800cbb4:	f5a2 700f 	sub.w	r0, r2, #572	@ 0x23c
 800cbb8:	4622      	mov	r2, r4
 800cbba:	f249 3150 	movw	r1, #37712	@ 0x9350
 800cbbe:	6800      	ldr	r0, [r0, #0]
 800cbc0:	f002 fdb8 	bl	800f734 <DWIN_SetText>
            show_text_short_circuit(screen_obj);
 800cbc4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cbc8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cbcc:	6818      	ldr	r0, [r3, #0]
 800cbce:	f7fe fd55 	bl	800b67c <show_text_short_circuit>
            show_text_function_test(screen_obj);
 800cbd2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cbd6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cbda:	6818      	ldr	r0, [r3, #0]
 800cbdc:	f7fe fe9a 	bl	800b914 <show_text_function_test>
            /* change page if home page */
            if (screen_obj->Ishome) {
 800cbe0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cbe4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f000 82d1 	beq.w	800d196 <show_main_page+0x7de>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800cbf4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cbf8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cc02:	4619      	mov	r1, r3
 800cc04:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc08:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cc12:	fb01 f303 	mul.w	r3, r1, r3
 800cc16:	4413      	add	r3, r2
 800cc18:	334c      	adds	r3, #76	@ 0x4c
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc22:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cc2a:	6818      	ldr	r0, [r3, #0]
 800cc2c:	f002 fe35 	bl	800f89a <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_FINISH);
 800cc30:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc34:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc38:	2164      	movs	r1, #100	@ 0x64
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	f002 fd53 	bl	800f6e6 <DWIN_SetPage>
            }
        } break;
 800cc40:	e2a9      	b.n	800d196 <show_main_page+0x7de>
        case DWINPAGE_MAIN_DETAIL: {
            /* get data and show */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
 800cc42:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc46:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cc50:	4619      	mov	r1, r3
 800cc52:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc56:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cc60:	fb01 f303 	mul.w	r3, r1, r3
 800cc64:	4413      	add	r3, r2
 800cc66:	3348      	adds	r3, #72	@ 0x48
 800cc68:	2200      	movs	r2, #0
 800cc6a:	701a      	strb	r2, [r3, #0]
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
 800cc6c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc70:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc80:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cc8a:	fb01 f303 	mul.w	r3, r1, r3
 800cc8e:	4413      	add	r3, r2
 800cc90:	3348      	adds	r3, #72	@ 0x48
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a
            char ShowCase_String[30];
            Screen_SetInfo_Pin(screen_obj);
 800cc98:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cc9c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cca0:	6818      	ldr	r0, [r3, #0]
 800cca2:	f7fe fa03 	bl	800b0ac <Screen_SetInfo_Pin>
            Screen_GetIcon_Pin(screen_obj,screen_obj->Program_Testx[index_program].data_test);
 800cca6:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800ccaa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ccae:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ccb2:	6819      	ldr	r1, [r3, #0]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	4413      	add	r3, r2
 800ccba:	011b      	lsls	r3, r3, #4
 800ccbc:	440b      	add	r3, r1
 800ccbe:	f503 6392 	add.w	r3, r3, #1168	@ 0x490
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ccc8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cccc:	4611      	mov	r1, r2
 800ccce:	6818      	ldr	r0, [r3, #0]
 800ccd0:	f7fd fc2c 	bl	800a52c <Screen_GetIcon_Pin>
            DWIN_SetArray_Icon(screen_obj,VP_ICON_DIRECTION_PIN,(uint8_t *)(_Screen.IC_Testerx[screen_obj->curr_device].config_pin),num_pin);
 800ccd4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ccd8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cce2:	4619      	mov	r1, r3
 800cce4:	4a90      	ldr	r2, [pc, #576]	@ (800cf28 <show_main_page+0x570>)
 800cce6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ccea:	fb01 f303 	mul.w	r3, r1, r3
 800ccee:	4413      	add	r3, r2
 800ccf0:	335c      	adds	r3, #92	@ 0x5c
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 800ccf8:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800ccfc:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800cd00:	f244 0150 	movw	r1, #16464	@ 0x4050
 800cd04:	6800      	ldr	r0, [r0, #0]
 800cd06:	f002 fdf5 	bl	800f8f4 <DWIN_SetArray_Icon>
            Screen_GetIcon_Result(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800cd0a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd0e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cd18:	4619      	mov	r1, r3
 800cd1a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd1e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cd28:	fb01 f303 	mul.w	r3, r1, r3
 800cd2c:	4413      	add	r3, r2
 800cd2e:	3360      	adds	r3, #96	@ 0x60
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd36:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd3a:	4611      	mov	r1, r2
 800cd3c:	6818      	ldr	r0, [r3, #0]
 800cd3e:	f7fd fc7e 	bl	800a63e <Screen_GetIcon_Result>
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_case*num_pin);
 800cd42:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd46:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cd50:	4619      	mov	r1, r3
 800cd52:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd56:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cd60:	fb01 f303 	mul.w	r3, r1, r3
 800cd64:	4413      	add	r3, r2
 800cd66:	3360      	adds	r3, #96	@ 0x60
 800cd68:	6819      	ldr	r1, [r3, #0]
 800cd6a:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800cd6e:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800cd72:	fb02 f303 	mul.w	r3, r2, r3
 800cd76:	461a      	mov	r2, r3
 800cd78:	f107 0308 	add.w	r3, r7, #8
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f006 faf0 	bl	8013362 <memcpy>
            DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[case_show * num_pin]),num_pin);
 800cd82:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd86:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cd90:	4619      	mov	r1, r3
 800cd92:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cd96:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cda0:	fb01 f303 	mul.w	r3, r1, r3
 800cda4:	4413      	add	r3, r2
 800cda6:	3364      	adds	r3, #100	@ 0x64
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f897 223a 	ldrb.w	r2, [r7, #570]	@ 0x23a
 800cdae:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 800cdb2:	fb01 f202 	mul.w	r2, r1, r2
 800cdb6:	441a      	add	r2, r3
 800cdb8:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 800cdbc:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800cdc0:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800cdc4:	f244 1150 	movw	r1, #16720	@ 0x4150
 800cdc8:	6800      	ldr	r0, [r0, #0]
 800cdca:	f002 fd93 	bl	800f8f4 <DWIN_SetArray_Icon>

            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,num_case);
 800cdce:	f897 323a 	ldrb.w	r3, [r7, #570]	@ 0x23a
 800cdd2:	1c5a      	adds	r2, r3, #1
 800cdd4:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800cdd8:	f507 7007 	add.w	r0, r7, #540	@ 0x21c
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	4613      	mov	r3, r2
 800cde0:	4a52      	ldr	r2, [pc, #328]	@ (800cf2c <show_main_page+0x574>)
 800cde2:	211e      	movs	r1, #30
 800cde4:	f006 f828 	bl	8012e38 <sniprintf>
            DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800cde8:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7f3 f9b9 	bl	8000164 <strlen>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 800cdfa:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800cdfe:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800ce02:	f249 3180 	movw	r1, #37760	@ 0x9380
 800ce06:	6800      	ldr	r0, [r0, #0]
 800ce08:	f002 fc94 	bl	800f734 <DWIN_SetText>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case] == '0') {
 800ce0c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce10:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce20:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ce2a:	fb01 f303 	mul.w	r3, r1, r3
 800ce2e:	4413      	add	r3, r2
 800ce30:	3370      	adds	r3, #112	@ 0x70
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800ce38:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 800ce3c:	6812      	ldr	r2, [r2, #0]
 800ce3e:	f892 25b5 	ldrb.w	r2, [r2, #1461]	@ 0x5b5
 800ce42:	4610      	mov	r0, r2
 800ce44:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800ce48:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 800ce4c:	6811      	ldr	r1, [r2, #0]
 800ce4e:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 800ce52:	fb00 f202 	mul.w	r2, r0, r2
 800ce56:	440a      	add	r2, r1
 800ce58:	3248      	adds	r2, #72	@ 0x48
 800ce5a:	7812      	ldrb	r2, [r2, #0]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b30      	cmp	r3, #48	@ 0x30
 800ce62:	d10b      	bne.n	800ce7c <show_main_page+0x4c4>
                DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0xF800);
 800ce64:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce68:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ce6c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800ce70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ce74:	6818      	ldr	r0, [r3, #0]
 800ce76:	f002 fcdf 	bl	800f838 <DWIN_SetColorText>
 800ce7a:	e00a      	b.n	800ce92 <show_main_page+0x4da>
            } else {
                DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0x01ED);
 800ce7c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce80:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ce84:	f240 12ed 	movw	r2, #493	@ 0x1ed
 800ce88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	f002 fcd3 	bl	800f838 <DWIN_SetColorText>
            }
            /* change page if home page */
            if (screen_obj->Ishome) {
 800ce92:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ce96:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 817a 	beq.w	800d19a <show_main_page+0x7e2>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800cea6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ceaa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ceba:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cec4:	fb01 f303 	mul.w	r3, r1, r3
 800cec8:	4413      	add	r3, r2
 800ceca:	334c      	adds	r3, #76	@ 0x4c
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	461a      	mov	r2, r3
 800ced0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ced4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ced8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cedc:	6818      	ldr	r0, [r3, #0]
 800cede:	f002 fcdc 	bl	800f89a <DWIN_SetVariable_Icon>
                if (screen_obj->Program_Testx[index_program].num_pin == 14) {
 800cee2:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800cee6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800ceea:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ceee:	6819      	ldr	r1, [r3, #0]
 800cef0:	4613      	mov	r3, r2
 800cef2:	005b      	lsls	r3, r3, #1
 800cef4:	4413      	add	r3, r2
 800cef6:	011b      	lsls	r3, r3, #4
 800cef8:	440b      	add	r3, r1
 800cefa:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	2b0e      	cmp	r3, #14
 800cf02:	d108      	bne.n	800cf16 <show_main_page+0x55e>
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL_14PIN);
 800cf04:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cf08:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cf0c:	2168      	movs	r1, #104	@ 0x68
 800cf0e:	6818      	ldr	r0, [r3, #0]
 800cf10:	f002 fbe9 	bl	800f6e6 <DWIN_SetPage>
                } else {
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL);
                }
            }
        } break;
 800cf14:	e141      	b.n	800d19a <show_main_page+0x7e2>
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL);
 800cf16:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cf1a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cf1e:	2166      	movs	r1, #102	@ 0x66
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	f002 fbe0 	bl	800f6e6 <DWIN_SetPage>
        } break;
 800cf26:	e138      	b.n	800d19a <show_main_page+0x7e2>
 800cf28:	20000e6c 	.word	0x20000e6c
 800cf2c:	08015a00 	.word	0x08015a00
        case DWINPAGE_MAIN_PULSE: {
            /* show data */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
 800cf30:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cf34:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cf3e:	4619      	mov	r1, r3
 800cf40:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cf44:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cf4e:	fb01 f303 	mul.w	r3, r1, r3
 800cf52:	4413      	add	r3, r2
 800cf54:	3348      	adds	r3, #72	@ 0x48
 800cf56:	2200      	movs	r2, #0
 800cf58:	701a      	strb	r2, [r3, #0]
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
 800cf5a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cf5e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cf68:	4619      	mov	r1, r3
 800cf6a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cf6e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cf78:	fb01 f303 	mul.w	r3, r1, r3
 800cf7c:	4413      	add	r3, r2
 800cf7e:	3348      	adds	r3, #72	@ 0x48
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
            char ShowCase_String[30];
            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,2);
 800cf86:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 800cf90:	2202      	movs	r2, #2
 800cf92:	9200      	str	r2, [sp, #0]
 800cf94:	4a85      	ldr	r2, [pc, #532]	@ (800d1ac <show_main_page+0x7f4>)
 800cf96:	211e      	movs	r1, #30
 800cf98:	f005 ff4e 	bl	8012e38 <sniprintf>

            screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = malloc(num_case * num_pin);
 800cf9c:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800cfa0:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800cfa4:	fb02 f303 	mul.w	r3, r2, r3
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cfae:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cfb8:	461c      	mov	r4, r3
 800cfba:	4610      	mov	r0, r2
 800cfbc:	f004 f844 	bl	8011048 <malloc>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cfc8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cfd2:	fb04 f303 	mul.w	r3, r4, r3
 800cfd6:	4413      	add	r3, r2
 800cfd8:	3374      	adds	r3, #116	@ 0x74
 800cfda:	6019      	str	r1, [r3, #0]
            transposeArray(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_pin,num_case);
 800cfdc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cfe0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800cfea:	4619      	mov	r1, r3
 800cfec:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800cff0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800cffa:	fb01 f303 	mul.w	r3, r1, r3
 800cffe:	4413      	add	r3, r2
 800d000:	3374      	adds	r3, #116	@ 0x74
 800d002:	6818      	ldr	r0, [r3, #0]
 800d004:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d008:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d012:	4619      	mov	r1, r3
 800d014:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d018:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d022:	fb01 f303 	mul.w	r3, r1, r3
 800d026:	4413      	add	r3, r2
 800d028:	3360      	adds	r3, #96	@ 0x60
 800d02a:	6819      	ldr	r1, [r3, #0]
 800d02c:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800d030:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800d034:	f002 fa0b 	bl	800f44e <transposeArray>
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,num_case * num_pin);
 800d038:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d03c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d046:	4619      	mov	r1, r3
 800d048:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d04c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d056:	fb01 f303 	mul.w	r3, r1, r3
 800d05a:	4413      	add	r3, r2
 800d05c:	3374      	adds	r3, #116	@ 0x74
 800d05e:	6819      	ldr	r1, [r3, #0]
 800d060:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800d064:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800d068:	fb02 f303 	mul.w	r3, r2, r3
 800d06c:	461a      	mov	r2, r3
 800d06e:	f107 0308 	add.w	r3, r7, #8
 800d072:	4618      	mov	r0, r3
 800d074:	f006 f975 	bl	8013362 <memcpy>
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800d078:	2300      	movs	r3, #0
 800d07a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 800d07e:	e036      	b.n	800d0ee <show_main_page+0x736>
                screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] = screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] - '0';
 800d080:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d084:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d08e:	4619      	mov	r1, r3
 800d090:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d094:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d09e:	fb01 f303 	mul.w	r3, r1, r3
 800d0a2:	4413      	add	r3, r2
 800d0a4:	3374      	adds	r3, #116	@ 0x74
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800d0ac:	4413      	add	r3, r2
 800d0ae:	781a      	ldrb	r2, [r3, #0]
 800d0b0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d0b4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d0c4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d0c8:	6819      	ldr	r1, [r3, #0]
 800d0ca:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d0ce:	fb00 f303 	mul.w	r3, r0, r3
 800d0d2:	440b      	add	r3, r1
 800d0d4:	3374      	adds	r3, #116	@ 0x74
 800d0d6:	6819      	ldr	r1, [r3, #0]
 800d0d8:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800d0dc:	440b      	add	r3, r1
 800d0de:	3a30      	subs	r2, #48	@ 0x30
 800d0e0:	b2d2      	uxtb	r2, r2
 800d0e2:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800d0e4:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 800d0ee:	f897 223f 	ldrb.w	r2, [r7, #575]	@ 0x23f
 800d0f2:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800d0f6:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 800d0fa:	fb01 f303 	mul.w	r3, r1, r3
 800d0fe:	429a      	cmp	r2, r3
 800d100:	dbbe      	blt.n	800d080 <show_main_page+0x6c8>
            }

            /* show fist case in pusle page */
            show_pulse(screen_obj,0);
 800d102:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d106:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d10a:	2100      	movs	r1, #0
 800d10c:	6818      	ldr	r0, [r3, #0]
 800d10e:	f7ff f86f 	bl	800c1f0 <show_pulse>
            
            // /* change page if home page */
            if (screen_obj->Ishome) {
 800d112:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d116:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 800d120:	2b00      	cmp	r3, #0
 800d122:	d03c      	beq.n	800d19e <show_main_page+0x7e6>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800d124:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d128:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d132:	4619      	mov	r1, r3
 800d134:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d138:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d142:	fb01 f303 	mul.w	r3, r1, r3
 800d146:	4413      	add	r3, r2
 800d148:	334c      	adds	r3, #76	@ 0x4c
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	461a      	mov	r2, r3
 800d14e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d152:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d156:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d15a:	6818      	ldr	r0, [r3, #0]
 800d15c:	f002 fb9d 	bl	800f89a <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_PULSE);
 800d160:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d164:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800d168:	2167      	movs	r1, #103	@ 0x67
 800d16a:	6818      	ldr	r0, [r3, #0]
 800d16c:	f002 fabb 	bl	800f6e6 <DWIN_SetPage>
                DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800d170:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 800d174:	4618      	mov	r0, r3
 800d176:	f7f2 fff5 	bl	8000164 <strlen>
 800d17a:	4603      	mov	r3, r0
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 800d182:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800d186:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800d18a:	f249 3180 	movw	r1, #37760	@ 0x9380
 800d18e:	6800      	ldr	r0, [r0, #0]
 800d190:	f002 fad0 	bl	800f734 <DWIN_SetText>
            }
            // if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
            //     free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
            //     screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = NULL;
            // }
        } break;
 800d194:	e003      	b.n	800d19e <show_main_page+0x7e6>
        } break;
 800d196:	bf00      	nop
 800d198:	e002      	b.n	800d1a0 <show_main_page+0x7e8>
        } break;
 800d19a:	bf00      	nop
 800d19c:	e000      	b.n	800d1a0 <show_main_page+0x7e8>
        } break;
 800d19e:	bf00      	nop
    }
}
 800d1a0:	bf00      	nop
 800d1a2:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd90      	pop	{r4, r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	08015a00 	.word	0x08015a00

0800d1b0 <get_data_testing_finish>:

void get_data_testing_finish(Screen_t *const screen_obj,uint8_t device, uint8_t *result_array) {
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b0c9      	sub	sp, #292	@ 0x124
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d1ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d1be:	6018      	str	r0, [r3, #0]
 800d1c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d1c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d1c8:	601a      	str	r2, [r3, #0]
 800d1ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d1ce:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d1d2:	460a      	mov	r2, r1
 800d1d4:	701a      	strb	r2, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[device].selected_Program_Index;
 800d1d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d1da:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d1e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d1f0:	fb01 f303 	mul.w	r3, r1, r3
 800d1f4:	4413      	add	r3, r2
 800d1f6:	334b      	adds	r3, #75	@ 0x4b
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800d1fe:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800d202:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d206:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d20a:	6819      	ldr	r1, [r3, #0]
 800d20c:	4613      	mov	r3, r2
 800d20e:	005b      	lsls	r3, r3, #1
 800d210:	4413      	add	r3, r2
 800d212:	011b      	lsls	r3, r3, #4
 800d214:	440b      	add	r3, r1
 800d216:	f203 4385 	addw	r3, r3, #1157	@ 0x485
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800d220:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800d224:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d228:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d22c:	6819      	ldr	r1, [r3, #0]
 800d22e:	4613      	mov	r3, r2
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	4413      	add	r3, r2
 800d234:	011b      	lsls	r3, r3, #4
 800d236:	440b      	add	r3, r1
 800d238:	f203 4384 	addw	r3, r3, #1156	@ 0x484
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
    /* get data test */
    uint8_t buffer[200];
    screen_obj->IC_Testerx[device].isShort = result_array[0];
 800d242:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d246:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d252:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	7819      	ldrb	r1, [r3, #0]
 800d25a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d25e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d268:	fb00 f303 	mul.w	r3, r0, r3
 800d26c:	4413      	add	r3, r2
 800d26e:	336c      	adds	r3, #108	@ 0x6c
 800d270:	460a      	mov	r2, r1
 800d272:	701a      	strb	r2, [r3, #0]
    screen_obj->IC_Testerx[device].data_short_circuit = (char *)malloc(num_pin);
 800d274:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800d278:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d27c:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	461c      	mov	r4, r3
 800d284:	4610      	mov	r0, r2
 800d286:	f003 fedf 	bl	8011048 <malloc>
 800d28a:	4603      	mov	r3, r0
 800d28c:	4619      	mov	r1, r3
 800d28e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d292:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d29c:	fb04 f303 	mul.w	r3, r4, r3
 800d2a0:	4413      	add	r3, r2
 800d2a2:	3368      	adds	r3, #104	@ 0x68
 800d2a4:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_short_circuit,(char *)result_array + 2,num_pin);
 800d2a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d2aa:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d2b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d2c0:	fb01 f303 	mul.w	r3, r1, r3
 800d2c4:	4413      	add	r3, r2
 800d2c6:	3368      	adds	r3, #104	@ 0x68
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d2ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	3302      	adds	r3, #2
 800d2d6:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800d2da:	4619      	mov	r1, r3
 800d2dc:	f005 ff35 	bl	801314a <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_short_circuit,num_pin);
    screen_obj->IC_Testerx[device].data_result = (char *)malloc(num_case * num_pin);
 800d2e0:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800d2e4:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800d2e8:	fb02 f303 	mul.w	r3, r2, r3
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d2f2:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	461c      	mov	r4, r3
 800d2fa:	4610      	mov	r0, r2
 800d2fc:	f003 fea4 	bl	8011048 <malloc>
 800d300:	4603      	mov	r3, r0
 800d302:	4619      	mov	r1, r3
 800d304:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d308:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d312:	fb04 f303 	mul.w	r3, r4, r3
 800d316:	4413      	add	r3, r2
 800d318:	3360      	adds	r3, #96	@ 0x60
 800d31a:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_result,(char *)result_array + (num_pin +3),num_case * num_pin);
 800d31c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d320:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	4619      	mov	r1, r3
 800d328:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d32c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d336:	fb01 f303 	mul.w	r3, r1, r3
 800d33a:	4413      	add	r3, r2
 800d33c:	3360      	adds	r3, #96	@ 0x60
 800d33e:	6818      	ldr	r0, [r3, #0]
 800d340:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800d344:	3303      	adds	r3, #3
 800d346:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800d34a:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800d34e:	6812      	ldr	r2, [r2, #0]
 800d350:	18d1      	adds	r1, r2, r3
 800d352:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800d356:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800d35a:	fb02 f303 	mul.w	r3, r2, r3
 800d35e:	461a      	mov	r2, r3
 800d360:	f005 fef3 	bl	801314a <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_result,num_case * num_pin);
    screen_obj->IC_Testerx[device].data_result_case = (char *)malloc(num_case);
 800d364:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 800d368:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d36c:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	461c      	mov	r4, r3
 800d374:	4610      	mov	r0, r2
 800d376:	f003 fe67 	bl	8011048 <malloc>
 800d37a:	4603      	mov	r3, r0
 800d37c:	4619      	mov	r1, r3
 800d37e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d382:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d38c:	fb04 f303 	mul.w	r3, r4, r3
 800d390:	4413      	add	r3, r2
 800d392:	3370      	adds	r3, #112	@ 0x70
 800d394:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_result_case,(char *)result_array + (num_pin + 5 + num_case * num_pin),num_case);
 800d396:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d39a:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d3a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d3b0:	fb01 f303 	mul.w	r3, r1, r3
 800d3b4:	4413      	add	r3, r2
 800d3b6:	3370      	adds	r3, #112	@ 0x70
 800d3b8:	6818      	ldr	r0, [r3, #0]
 800d3ba:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800d3be:	1d5a      	adds	r2, r3, #5
 800d3c0:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800d3c4:	f897 111e 	ldrb.w	r1, [r7, #286]	@ 0x11e
 800d3c8:	fb01 f303 	mul.w	r3, r1, r3
 800d3cc:	4413      	add	r3, r2
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d3d4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4413      	add	r3, r2
 800d3dc:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	f005 feb2 	bl	801314a <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_result_case,num_case);

    screen_obj->IC_Testerx[device].curr_PageMain = DWINPAGE_MAIN_FINISH;
 800d3e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d3ea:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d3f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d400:	fb01 f303 	mul.w	r3, r1, r3
 800d404:	4413      	add	r3, r2
 800d406:	3349      	adds	r3, #73	@ 0x49
 800d408:	2264      	movs	r2, #100	@ 0x64
 800d40a:	701a      	strb	r2, [r3, #0]
    uint8_t *device_finish = malloc(sizeof(uint8_t));
 800d40c:	2001      	movs	r0, #1
 800d40e:	f003 fe1b 	bl	8011048 <malloc>
 800d412:	4603      	mov	r3, r0
 800d414:	653b      	str	r3, [r7, #80]	@ 0x50
    memcpy(device_finish,&device,sizeof(uint8_t));
 800d416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d418:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800d41c:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 800d420:	7812      	ldrb	r2, [r2, #0]
 800d422:	701a      	strb	r2, [r3, #0]
    
    /* get text result to store  */
    uint8_t result_buffer[60];
    memset(result_buffer,0,60);
 800d424:	f107 0314 	add.w	r3, r7, #20
 800d428:	223c      	movs	r2, #60	@ 0x3c
 800d42a:	2100      	movs	r1, #0
 800d42c:	4618      	mov	r0, r3
 800d42e:	f005 fe43 	bl	80130b8 <memset>
    get_text_result(screen_obj,result_buffer,screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic);
 800d432:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d436:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d440:	4619      	mov	r1, r3
 800d442:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d446:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d450:	fb01 f303 	mul.w	r3, r1, r3
 800d454:	4413      	add	r3, r2
 800d456:	334a      	adds	r3, #74	@ 0x4a
 800d458:	781a      	ldrb	r2, [r3, #0]
 800d45a:	f107 0114 	add.w	r1, r7, #20
 800d45e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d462:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d466:	6818      	ldr	r0, [r3, #0]
 800d468:	f7fe fbe4 	bl	800bc34 <get_text_result>
    if (strlen(screen_obj->IC_Testerx[screen_obj->curr_device].result_text) > 1) {
 800d46c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d470:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d47a:	4619      	mov	r1, r3
 800d47c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d480:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800d484:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d488:	fb01 f303 	mul.w	r3, r1, r3
 800d48c:	3378      	adds	r3, #120	@ 0x78
 800d48e:	6812      	ldr	r2, [r2, #0]
 800d490:	4413      	add	r3, r2
 800d492:	4618      	mov	r0, r3
 800d494:	f7f2 fe66 	bl	8000164 <strlen>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d91a      	bls.n	800d4d4 <get_data_testing_finish+0x324>
        strcat(screen_obj->IC_Testerx[screen_obj->curr_device].result_text," | ");
 800d49e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d4a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d4b2:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800d4b6:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d4ba:	fb01 f303 	mul.w	r3, r1, r3
 800d4be:	3378      	adds	r3, #120	@ 0x78
 800d4c0:	6812      	ldr	r2, [r2, #0]
 800d4c2:	18d4      	adds	r4, r2, r3
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f7f2 fe4d 	bl	8000164 <strlen>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	4423      	add	r3, r4
 800d4ce:	4a17      	ldr	r2, [pc, #92]	@ (800d52c <get_data_testing_finish+0x37c>)
 800d4d0:	6810      	ldr	r0, [r2, #0]
 800d4d2:	6018      	str	r0, [r3, #0]
    }
    strncat(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,result_buffer,strlen(result_buffer));
 800d4d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d4d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800d4e8:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800d4ec:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800d4f0:	fb01 f303 	mul.w	r3, r1, r3
 800d4f4:	3378      	adds	r3, #120	@ 0x78
 800d4f6:	6812      	ldr	r2, [r2, #0]
 800d4f8:	18d4      	adds	r4, r2, r3
 800d4fa:	f107 0314 	add.w	r3, r7, #20
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7f2 fe30 	bl	8000164 <strlen>
 800d504:	4602      	mov	r2, r0
 800d506:	f107 0314 	add.w	r3, r7, #20
 800d50a:	4619      	mov	r1, r3
 800d50c:	4620      	mov	r0, r4
 800d50e:	f005 fdf7 	bl	8013100 <strncat>

    OS_task_post_event(AO_task_screen,DEIVCE_TEST_FINISH,(uint8_t *)&device_finish,sizeof(uint8_t *));
 800d512:	4b07      	ldr	r3, [pc, #28]	@ (800d530 <get_data_testing_finish+0x380>)
 800d514:	6818      	ldr	r0, [r3, #0]
 800d516:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800d51a:	2304      	movs	r3, #4
 800d51c:	2100      	movs	r1, #0
 800d51e:	f003 fb61 	bl	8010be4 <OS_task_post_event>
}
 800d522:	bf00      	nop
 800d524:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd90      	pop	{r4, r7, pc}
 800d52c:	08015cac 	.word	0x08015cac
 800d530:	0801680c 	.word	0x0801680c

0800d534 <warning_page>:

void warning_page(Screen_t *const screen_obj,uint32_t id_slave) {
 800d534:	b580      	push	{r7, lr}
 800d536:	b09a      	sub	sp, #104	@ 0x68
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
    char buffer[90]  = {0};
 800d53e:	f107 030c 	add.w	r3, r7, #12
 800d542:	225a      	movs	r2, #90	@ 0x5a
 800d544:	2100      	movs	r1, #0
 800d546:	4618      	mov	r0, r3
 800d548:	f005 fdb6 	bl	80130b8 <memset>
    snprintf(buffer,sizeof(buffer),"IC Tester %d is not connected to the system. Please check the connection",(id_slave - 0x470));
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800d552:	f107 000c 	add.w	r0, r7, #12
 800d556:	4a0f      	ldr	r2, [pc, #60]	@ (800d594 <warning_page+0x60>)
 800d558:	215a      	movs	r1, #90	@ 0x5a
 800d55a:	f005 fc6d 	bl	8012e38 <sniprintf>
    screen_obj->screen_error = SCREEN_ERROR_CONNECT;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	f883 293f 	strb.w	r2, [r3, #2367]	@ 0x93f
    DWIN_SetText((Dwin_t *)screen_obj,VP_Warning,buffer,strlen(buffer));
 800d566:	f107 030c 	add.w	r3, r7, #12
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7f2 fdfa 	bl	8000164 <strlen>
 800d570:	4603      	mov	r3, r0
 800d572:	b29b      	uxth	r3, r3
 800d574:	f107 020c 	add.w	r2, r7, #12
 800d578:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f002 f8d9 	bl	800f734 <DWIN_SetText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_WARNING);
 800d582:	2177      	movs	r1, #119	@ 0x77
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f002 f8ae 	bl	800f6e6 <DWIN_SetPage>

}
 800d58a:	bf00      	nop
 800d58c:	3768      	adds	r7, #104	@ 0x68
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	08015cb0 	.word	0x08015cb0

0800d598 <get_input_keyboard>:

void get_input_keyboard(Screen_t *const screen_obj,uint16_t VP_input) {
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	807b      	strh	r3, [r7, #2]
    switch (VP_input) {
 800d5a4:	887b      	ldrh	r3, [r7, #2]
 800d5a6:	f249 0240 	movw	r2, #36928	@ 0x9040
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d05d      	beq.n	800d66a <get_input_keyboard+0xd2>
 800d5ae:	f249 0240 	movw	r2, #36928	@ 0x9040
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	dc69      	bgt.n	800d68a <get_input_keyboard+0xf2>
 800d5b6:	f249 0230 	movw	r2, #36912	@ 0x9030
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d045      	beq.n	800d64a <get_input_keyboard+0xb2>
 800d5be:	f249 0230 	movw	r2, #36912	@ 0x9030
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	dc61      	bgt.n	800d68a <get_input_keyboard+0xf2>
 800d5c6:	f249 0220 	movw	r2, #36896	@ 0x9020
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d02d      	beq.n	800d62a <get_input_keyboard+0x92>
 800d5ce:	f249 0220 	movw	r2, #36896	@ 0x9020
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	dc59      	bgt.n	800d68a <get_input_keyboard+0xf2>
 800d5d6:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 800d5da:	d004      	beq.n	800d5e6 <get_input_keyboard+0x4e>
 800d5dc:	f249 0210 	movw	r2, #36880	@ 0x9010
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d012      	beq.n	800d60a <get_input_keyboard+0x72>
        case VP_Year   : {
            memset(screen_obj->Time_setting.Year,0,3);
            memcpy(screen_obj->Time_setting.Year,screen_obj->Screen_keyboard.String,2);
        }
    }
}   
 800d5e4:	e051      	b.n	800d68a <get_input_keyboard+0xf2>
            memset(screen_obj->Time_setting.Hour,0,3);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f203 53a9 	addw	r3, r3, #1449	@ 0x5a9
 800d5ec:	2203      	movs	r2, #3
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f005 fd61 	bl	80130b8 <memset>
            memcpy(screen_obj->Time_setting.Hour,screen_obj->Screen_keyboard.String,2);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f203 53a9 	addw	r3, r3, #1449	@ 0x5a9
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	320e      	adds	r2, #14
 800d600:	8812      	ldrh	r2, [r2, #0]
 800d602:	b292      	uxth	r2, r2
 800d604:	801a      	strh	r2, [r3, #0]
        } break;
 800d606:	bf00      	nop
}   
 800d608:	e03f      	b.n	800d68a <get_input_keyboard+0xf2>
            memset(screen_obj->Time_setting.Minute,0,3);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f203 53ac 	addw	r3, r3, #1452	@ 0x5ac
 800d610:	2203      	movs	r2, #3
 800d612:	2100      	movs	r1, #0
 800d614:	4618      	mov	r0, r3
 800d616:	f005 fd4f 	bl	80130b8 <memset>
            memcpy(screen_obj->Time_setting.Minute,screen_obj->Screen_keyboard.String,2);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f203 53ac 	addw	r3, r3, #1452	@ 0x5ac
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	320e      	adds	r2, #14
 800d624:	8812      	ldrh	r2, [r2, #0]
 800d626:	b292      	uxth	r2, r2
 800d628:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Day,0,3);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800d630:	2203      	movs	r2, #3
 800d632:	2100      	movs	r1, #0
 800d634:	4618      	mov	r0, r3
 800d636:	f005 fd3f 	bl	80130b8 <memset>
            memcpy(screen_obj->Time_setting.Day,screen_obj->Screen_keyboard.String,2);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	320e      	adds	r2, #14
 800d644:	8812      	ldrh	r2, [r2, #0]
 800d646:	b292      	uxth	r2, r2
 800d648:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Month,0,3);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f203 53a3 	addw	r3, r3, #1443	@ 0x5a3
 800d650:	2203      	movs	r2, #3
 800d652:	2100      	movs	r1, #0
 800d654:	4618      	mov	r0, r3
 800d656:	f005 fd2f 	bl	80130b8 <memset>
            memcpy(screen_obj->Time_setting.Month,screen_obj->Screen_keyboard.String,2);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f203 53a3 	addw	r3, r3, #1443	@ 0x5a3
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	320e      	adds	r2, #14
 800d664:	8812      	ldrh	r2, [r2, #0]
 800d666:	b292      	uxth	r2, r2
 800d668:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Year,0,3);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f203 53a6 	addw	r3, r3, #1446	@ 0x5a6
 800d670:	2203      	movs	r2, #3
 800d672:	2100      	movs	r1, #0
 800d674:	4618      	mov	r0, r3
 800d676:	f005 fd1f 	bl	80130b8 <memset>
            memcpy(screen_obj->Time_setting.Year,screen_obj->Screen_keyboard.String,2);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f203 53a6 	addw	r3, r3, #1446	@ 0x5a6
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	320e      	adds	r2, #14
 800d684:	8812      	ldrh	r2, [r2, #0]
 800d686:	b292      	uxth	r2, r2
 800d688:	801a      	strh	r2, [r3, #0]
}   
 800d68a:	bf00      	nop
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
	...

0800d694 <updata_data_program_from_app>:

void updata_data_program_from_app(Screen_t *const screen_obj,char *data,uint16_t len) {
 800d694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d698:	b098      	sub	sp, #96	@ 0x60
 800d69a:	af02      	add	r7, sp, #8
 800d69c:	60f8      	str	r0, [r7, #12]
 800d69e:	60b9      	str	r1, [r7, #8]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	80fb      	strh	r3, [r7, #6]
 800d6a4:	466b      	mov	r3, sp
 800d6a6:	469a      	mov	sl, r3
    /* update value */
    char temp_buf[len];
 800d6a8:	88f9      	ldrh	r1, [r7, #6]
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	3b01      	subs	r3, #1
 800d6ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800d6b0:	b28b      	uxth	r3, r1
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	4698      	mov	r8, r3
 800d6b6:	4691      	mov	r9, r2
 800d6b8:	f04f 0200 	mov.w	r2, #0
 800d6bc:	f04f 0300 	mov.w	r3, #0
 800d6c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d6c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d6c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d6cc:	b28b      	uxth	r3, r1
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	461c      	mov	r4, r3
 800d6d2:	4615      	mov	r5, r2
 800d6d4:	f04f 0200 	mov.w	r2, #0
 800d6d8:	f04f 0300 	mov.w	r3, #0
 800d6dc:	00eb      	lsls	r3, r5, #3
 800d6de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d6e2:	00e2      	lsls	r2, r4, #3
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	3307      	adds	r3, #7
 800d6e8:	08db      	lsrs	r3, r3, #3
 800d6ea:	00db      	lsls	r3, r3, #3
 800d6ec:	ebad 0d03 	sub.w	sp, sp, r3
 800d6f0:	ab02      	add	r3, sp, #8
 800d6f2:	3300      	adds	r3, #0
 800d6f4:	653b      	str	r3, [r7, #80]	@ 0x50
    memset(temp_buf,0,len);
 800d6f6:	88fb      	ldrh	r3, [r7, #6]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d6fe:	f005 fcdb 	bl	80130b8 <memset>
    memcpy(temp_buf,data,len);
 800d702:	88fb      	ldrh	r3, [r7, #6]
 800d704:	461a      	mov	r2, r3
 800d706:	68b9      	ldr	r1, [r7, #8]
 800d708:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d70a:	f005 fe2a 	bl	8013362 <memcpy>
    uint8_t index_program;

    char *pdata = strtok(temp_buf,",");
 800d70e:	498e      	ldr	r1, [pc, #568]	@ (800d948 <updata_data_program_from_app+0x2b4>)
 800d710:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d712:	f005 fd2d 	bl	8013170 <strtok>
 800d716:	64f8      	str	r0, [r7, #76]	@ 0x4c
    index_program = atoi(pdata) - 1;
 800d718:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d71a:	f003 fc90 	bl	801103e <atoi>
 800d71e:	4603      	mov	r3, r0
 800d720:	b2db      	uxtb	r3, r3
 800d722:	3b01      	subs	r3, #1
 800d724:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    if (screen_obj->Program_Testx[index_program].Name_Program != NULL) {
 800d728:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d72c:	68f9      	ldr	r1, [r7, #12]
 800d72e:	4613      	mov	r3, r2
 800d730:	005b      	lsls	r3, r3, #1
 800d732:	4413      	add	r3, r2
 800d734:	011b      	lsls	r3, r3, #4
 800d736:	440b      	add	r3, r1
 800d738:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d019      	beq.n	800d776 <updata_data_program_from_app+0xe2>
        free(screen_obj->Program_Testx[index_program].Name_Program);
 800d742:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d746:	68f9      	ldr	r1, [r7, #12]
 800d748:	4613      	mov	r3, r2
 800d74a:	005b      	lsls	r3, r3, #1
 800d74c:	4413      	add	r3, r2
 800d74e:	011b      	lsls	r3, r3, #4
 800d750:	440b      	add	r3, r1
 800d752:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4618      	mov	r0, r3
 800d75a:	f003 fc7d 	bl	8011058 <free>
        screen_obj->Program_Testx[index_program].Name_Program = NULL;
 800d75e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d762:	68f9      	ldr	r1, [r7, #12]
 800d764:	4613      	mov	r3, r2
 800d766:	005b      	lsls	r3, r3, #1
 800d768:	4413      	add	r3, r2
 800d76a:	011b      	lsls	r3, r3, #4
 800d76c:	440b      	add	r3, r1
 800d76e:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 800d776:	4974      	ldr	r1, [pc, #464]	@ (800d948 <updata_data_program_from_app+0x2b4>)
 800d778:	2000      	movs	r0, #0
 800d77a:	f005 fcf9 	bl	8013170 <strtok>
 800d77e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].Name_Program = (char *)malloc(strlen(pdata) + 1);
 800d780:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d782:	f7f2 fcef 	bl	8000164 <strlen>
 800d786:	4603      	mov	r3, r0
 800d788:	3301      	adds	r3, #1
 800d78a:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 800d78e:	4618      	mov	r0, r3
 800d790:	f003 fc5a 	bl	8011048 <malloc>
 800d794:	4603      	mov	r3, r0
 800d796:	4619      	mov	r1, r3
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	4623      	mov	r3, r4
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	4423      	add	r3, r4
 800d7a0:	011b      	lsls	r3, r3, #4
 800d7a2:	4413      	add	r3, r2
 800d7a4:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d7a8:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].Name_Program, pdata);
 800d7aa:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d7ae:	68f9      	ldr	r1, [r7, #12]
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	005b      	lsls	r3, r3, #1
 800d7b4:	4413      	add	r3, r2
 800d7b6:	011b      	lsls	r3, r3, #4
 800d7b8:	440b      	add	r3, r1
 800d7ba:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f005 fdb7 	bl	8013336 <strcpy>

    if (screen_obj->Program_Testx[index_program].Name_IC != NULL) {
 800d7c8:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d7cc:	68f9      	ldr	r1, [r7, #12]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	4413      	add	r3, r2
 800d7d4:	011b      	lsls	r3, r3, #4
 800d7d6:	440b      	add	r3, r1
 800d7d8:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d019      	beq.n	800d816 <updata_data_program_from_app+0x182>
        free(screen_obj->Program_Testx[index_program].Name_IC);
 800d7e2:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d7e6:	68f9      	ldr	r1, [r7, #12]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	4413      	add	r3, r2
 800d7ee:	011b      	lsls	r3, r3, #4
 800d7f0:	440b      	add	r3, r1
 800d7f2:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f003 fc2d 	bl	8011058 <free>
        screen_obj->Program_Testx[index_program].Name_IC = NULL;
 800d7fe:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d802:	68f9      	ldr	r1, [r7, #12]
 800d804:	4613      	mov	r3, r2
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	4413      	add	r3, r2
 800d80a:	011b      	lsls	r3, r3, #4
 800d80c:	440b      	add	r3, r1
 800d80e:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 800d816:	494c      	ldr	r1, [pc, #304]	@ (800d948 <updata_data_program_from_app+0x2b4>)
 800d818:	2000      	movs	r0, #0
 800d81a:	f005 fca9 	bl	8013170 <strtok>
 800d81e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].Name_IC = (char *)malloc(strlen(pdata) + 1);
 800d820:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d822:	f7f2 fc9f 	bl	8000164 <strlen>
 800d826:	4603      	mov	r3, r0
 800d828:	3301      	adds	r3, #1
 800d82a:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 800d82e:	4618      	mov	r0, r3
 800d830:	f003 fc0a 	bl	8011048 <malloc>
 800d834:	4603      	mov	r3, r0
 800d836:	4619      	mov	r1, r3
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	4623      	mov	r3, r4
 800d83c:	005b      	lsls	r3, r3, #1
 800d83e:	4423      	add	r3, r4
 800d840:	011b      	lsls	r3, r3, #4
 800d842:	4413      	add	r3, r2
 800d844:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d848:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].Name_IC, pdata);
 800d84a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d84e:	68f9      	ldr	r1, [r7, #12]
 800d850:	4613      	mov	r3, r2
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	4413      	add	r3, r2
 800d856:	011b      	lsls	r3, r3, #4
 800d858:	440b      	add	r3, r1
 800d85a:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d862:	4618      	mov	r0, r3
 800d864:	f005 fd67 	bl	8013336 <strcpy>

    if (screen_obj->Program_Testx[index_program].num_IC != NULL) {
 800d868:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d86c:	68f9      	ldr	r1, [r7, #12]
 800d86e:	4613      	mov	r3, r2
 800d870:	005b      	lsls	r3, r3, #1
 800d872:	4413      	add	r3, r2
 800d874:	011b      	lsls	r3, r3, #4
 800d876:	440b      	add	r3, r1
 800d878:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d019      	beq.n	800d8b6 <updata_data_program_from_app+0x222>
        free(screen_obj->Program_Testx[index_program].num_IC);
 800d882:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d886:	68f9      	ldr	r1, [r7, #12]
 800d888:	4613      	mov	r3, r2
 800d88a:	005b      	lsls	r3, r3, #1
 800d88c:	4413      	add	r3, r2
 800d88e:	011b      	lsls	r3, r3, #4
 800d890:	440b      	add	r3, r1
 800d892:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4618      	mov	r0, r3
 800d89a:	f003 fbdd 	bl	8011058 <free>
        screen_obj->Program_Testx[index_program].num_IC = NULL;
 800d89e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d8a2:	68f9      	ldr	r1, [r7, #12]
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	005b      	lsls	r3, r3, #1
 800d8a8:	4413      	add	r3, r2
 800d8aa:	011b      	lsls	r3, r3, #4
 800d8ac:	440b      	add	r3, r1
 800d8ae:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 800d8b6:	4924      	ldr	r1, [pc, #144]	@ (800d948 <updata_data_program_from_app+0x2b4>)
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	f005 fc59 	bl	8013170 <strtok>
 800d8be:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].num_IC = (char *)malloc(strlen(pdata) + 1);
 800d8c0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d8c2:	f7f2 fc4f 	bl	8000164 <strlen>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f003 fbba 	bl	8011048 <malloc>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	4623      	mov	r3, r4
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	4423      	add	r3, r4
 800d8e0:	011b      	lsls	r3, r3, #4
 800d8e2:	4413      	add	r3, r2
 800d8e4:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d8e8:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].num_IC, pdata);
 800d8ea:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d8ee:	68f9      	ldr	r1, [r7, #12]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	4413      	add	r3, r2
 800d8f6:	011b      	lsls	r3, r3, #4
 800d8f8:	440b      	add	r3, r1
 800d8fa:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d902:	4618      	mov	r0, r3
 800d904:	f005 fd17 	bl	8013336 <strcpy>

    /* get data for testing ic */
    if (get_data_testing_ic(screen_obj->Program_Testx[index_program].Name_IC,&screen_obj->Program_Testx[index_program]) == false) {
 800d908:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d90c:	68f9      	ldr	r1, [r7, #12]
 800d90e:	4613      	mov	r3, r2
 800d910:	005b      	lsls	r3, r3, #1
 800d912:	4413      	add	r3, r2
 800d914:	011b      	lsls	r3, r3, #4
 800d916:	440b      	add	r3, r1
 800d918:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d91c:	6818      	ldr	r0, [r3, #0]
 800d91e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d922:	4613      	mov	r3, r2
 800d924:	005b      	lsls	r3, r3, #1
 800d926:	4413      	add	r3, r2
 800d928:	011b      	lsls	r3, r3, #4
 800d92a:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	4413      	add	r3, r2
 800d932:	4619      	mov	r1, r3
 800d934:	f7fd fc1c 	bl	800b170 <get_data_testing_ic>
 800d938:	4603      	mov	r3, r0
 800d93a:	f083 0301 	eor.w	r3, r3, #1
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	d003      	beq.n	800d94c <updata_data_program_from_app+0x2b8>
        return;
 800d944:	46d5      	mov	sp, sl
 800d946:	e164      	b.n	800dc12 <updata_data_program_from_app+0x57e>
 800d948:	08015b28 	.word	0x08015b28
    }

    /* store data to eeprom */
    char string_data[TOTAL_ONE_PROGRAM_TEST_LEN] = {0};
 800d94c:	f107 0314 	add.w	r3, r7, #20
 800d950:	222a      	movs	r2, #42	@ 0x2a
 800d952:	2100      	movs	r1, #0
 800d954:	4618      	mov	r0, r3
 800d956:	f005 fbaf 	bl	80130b8 <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 800d95a:	200c      	movs	r0, #12
 800d95c:	f003 fb74 	bl	8011048 <malloc>
 800d960:	4603      	mov	r3, r0
 800d962:	613b      	str	r3, [r7, #16]
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[index_program].Name_Program
 800d964:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d968:	68f9      	ldr	r1, [r7, #12]
 800d96a:	4613      	mov	r3, r2
 800d96c:	005b      	lsls	r3, r3, #1
 800d96e:	4413      	add	r3, r2
 800d970:	011b      	lsls	r3, r3, #4
 800d972:	440b      	add	r3, r1
 800d974:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800d978:	681c      	ldr	r4, [r3, #0]
 800d97a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d97e:	68f9      	ldr	r1, [r7, #12]
 800d980:	4613      	mov	r3, r2
 800d982:	005b      	lsls	r3, r3, #1
 800d984:	4413      	add	r3, r2
 800d986:	011b      	lsls	r3, r3, #4
 800d988:	440b      	add	r3, r1
 800d98a:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800d98e:	6819      	ldr	r1, [r3, #0]
 800d990:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	4613      	mov	r3, r2
 800d998:	005b      	lsls	r3, r3, #1
 800d99a:	4413      	add	r3, r2
 800d99c:	011b      	lsls	r3, r3, #4
 800d99e:	4403      	add	r3, r0
 800d9a0:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f107 0014 	add.w	r0, r7, #20
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	9100      	str	r1, [sp, #0]
 800d9ae:	4623      	mov	r3, r4
 800d9b0:	4a9a      	ldr	r2, [pc, #616]	@ (800dc1c <updata_data_program_from_app+0x588>)
 800d9b2:	212a      	movs	r1, #42	@ 0x2a
 800d9b4:	f005 fa40 	bl	8012e38 <sniprintf>
    ,screen_obj->Program_Testx[index_program].Name_IC
    ,screen_obj->Program_Testx[index_program].num_IC);
    data_write->data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 800d9b8:	693c      	ldr	r4, [r7, #16]
 800d9ba:	202a      	movs	r0, #42	@ 0x2a
 800d9bc:	f003 fb44 	bl	8011048 <malloc>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	f107 0414 	add.w	r4, r7, #20
 800d9cc:	469c      	mov	ip, r3
 800d9ce:	f104 0e20 	add.w	lr, r4, #32
 800d9d2:	4665      	mov	r5, ip
 800d9d4:	4626      	mov	r6, r4
 800d9d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d9d8:	6028      	str	r0, [r5, #0]
 800d9da:	6069      	str	r1, [r5, #4]
 800d9dc:	60aa      	str	r2, [r5, #8]
 800d9de:	60eb      	str	r3, [r5, #12]
 800d9e0:	3410      	adds	r4, #16
 800d9e2:	f10c 0c10 	add.w	ip, ip, #16
 800d9e6:	4574      	cmp	r4, lr
 800d9e8:	d1f3      	bne.n	800d9d2 <updata_data_program_from_app+0x33e>
 800d9ea:	4662      	mov	r2, ip
 800d9ec:	4623      	mov	r3, r4
 800d9ee:	cb03      	ldmia	r3!, {r0, r1}
 800d9f0:	6010      	str	r0, [r2, #0]
 800d9f2:	6051      	str	r1, [r2, #4]
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	8113      	strh	r3, [r2, #8]
    data_write->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	222a      	movs	r2, #42	@ 0x2a
 800d9fc:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_PROGRAM_TEST_X(index_program);
 800d9fe:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800da02:	b29b      	uxth	r3, r3
 800da04:	461a      	mov	r2, r3
 800da06:	0052      	lsls	r2, r2, #1
 800da08:	4413      	add	r3, r2
 800da0a:	461a      	mov	r2, r3
 800da0c:	00d2      	lsls	r2, r2, #3
 800da0e:	1ad3      	subs	r3, r2, r3
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	b29a      	uxth	r2, r3
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	3243      	adds	r2, #67	@ 0x43
 800da18:	b292      	uxth	r2, r2
 800da1a:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 800da1c:	4b80      	ldr	r3, [pc, #512]	@ (800dc20 <updata_data_program_from_app+0x58c>)
 800da1e:	6818      	ldr	r0, [r3, #0]
 800da20:	f107 0210 	add.w	r2, r7, #16
 800da24:	230c      	movs	r3, #12
 800da26:	2105      	movs	r1, #5
 800da28:	f003 f8dc 	bl	8010be4 <OS_task_post_event>

    // Show data in screen
    if (screen_obj->Ishome) {
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 800da32:	2b00      	cmp	r3, #0
 800da34:	d042      	beq.n	800dabc <updata_data_program_from_app+0x428>
        if (index_program == screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index) {
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f893 35b5 	ldrb.w	r3, [r3, #1461]	@ 0x5b5
 800da3c:	4619      	mov	r1, r3
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800da44:	fb01 f303 	mul.w	r3, r1, r3
 800da48:	4413      	add	r3, r2
 800da4a:	334b      	adds	r3, #75	@ 0x4b
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800da52:	429a      	cmp	r2, r3
 800da54:	d105      	bne.n	800da62 <updata_data_program_from_app+0x3ce>
            Screen_ShowData_Mainpage(screen_obj,index_program);
 800da56:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800da5a:	4619      	mov	r1, r3
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f7fd fa43 	bl	800aee8 <Screen_ShowData_Mainpage>
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800da62:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800da66:	b29b      	uxth	r3, r3
 800da68:	461a      	mov	r2, r3
 800da6a:	0092      	lsls	r2, r2, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	00db      	lsls	r3, r3, #3
 800da70:	b29b      	uxth	r3, r3
 800da72:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 800da76:	3b58      	subs	r3, #88	@ 0x58
 800da78:	b29c      	uxth	r4, r3
 800da7a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800da7e:	68f9      	ldr	r1, [r7, #12]
 800da80:	4613      	mov	r3, r2
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	4413      	add	r3, r2
 800da86:	011b      	lsls	r3, r3, #4
 800da88:	440b      	add	r3, r1
 800da8a:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800da8e:	681d      	ldr	r5, [r3, #0]
            ,strlen(screen_obj->Program_Testx[index_program].Name_Program));
 800da90:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800da94:	68f9      	ldr	r1, [r7, #12]
 800da96:	4613      	mov	r3, r2
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	4413      	add	r3, r2
 800da9c:	011b      	lsls	r3, r3, #4
 800da9e:	440b      	add	r3, r1
 800daa0:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7f2 fb5c 	bl	8000164 <strlen>
 800daac:	4603      	mov	r3, r0
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800daae:	b29b      	uxth	r3, r3
 800dab0:	462a      	mov	r2, r5
 800dab2:	4621      	mov	r1, r4
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f001 fe3d 	bl	800f734 <DWIN_SetText>
 800daba:	e0a9      	b.n	800dc10 <updata_data_program_from_app+0x57c>
    } else {
        uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800dabc:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800dac0:	68f9      	ldr	r1, [r7, #12]
 800dac2:	4613      	mov	r3, r2
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	4413      	add	r3, r2
 800dac8:	011b      	lsls	r3, r3, #4
 800daca:	440b      	add	r3, r1
 800dacc:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7f2 fb46 	bl	8000164 <strlen>
 800dad8:	4603      	mov	r3, r0
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	3309      	adds	r3, #9
 800dade:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 800dae2:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800dae6:	68f9      	ldr	r1, [r7, #12]
 800dae8:	4613      	mov	r3, r2
 800daea:	005b      	lsls	r3, r3, #1
 800daec:	4413      	add	r3, r2
 800daee:	011b      	lsls	r3, r3, #4
 800daf0:	440b      	add	r3, r1
 800daf2:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7f2 fb33 	bl	8000164 <strlen>
 800dafe:	4603      	mov	r3, r0
 800db00:	b2db      	uxtb	r3, r3
 800db02:	330f      	adds	r3, #15
 800db04:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

        char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800db08:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800db0c:	3301      	adds	r3, #1
 800db0e:	4618      	mov	r0, r3
 800db10:	f003 fa9a 	bl	8011048 <malloc>
 800db14:	4603      	mov	r3, r0
 800db16:	647b      	str	r3, [r7, #68]	@ 0x44
        char *Text_Num_IC = malloc(size_Num_IC + 1);
 800db18:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800db1c:	3301      	adds	r3, #1
 800db1e:	4618      	mov	r0, r3
 800db20:	f003 fa92 	bl	8011048 <malloc>
 800db24:	4603      	mov	r3, r0
 800db26:	643b      	str	r3, [r7, #64]	@ 0x40

        strcpy(Text_Name_IC,"IC Name: ");
 800db28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db2a:	493e      	ldr	r1, [pc, #248]	@ (800dc24 <updata_data_program_from_app+0x590>)
 800db2c:	461a      	mov	r2, r3
 800db2e:	460b      	mov	r3, r1
 800db30:	cb03      	ldmia	r3!, {r0, r1}
 800db32:	6010      	str	r0, [r2, #0]
 800db34:	6051      	str	r1, [r2, #4]
 800db36:	881b      	ldrh	r3, [r3, #0]
 800db38:	8113      	strh	r3, [r2, #8]
        strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 800db3a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800db3e:	68f9      	ldr	r1, [r7, #12]
 800db40:	4613      	mov	r3, r2
 800db42:	005b      	lsls	r3, r3, #1
 800db44:	4413      	add	r3, r2
 800db46:	011b      	lsls	r3, r3, #4
 800db48:	440b      	add	r3, r1
 800db4a:	f503 638e 	add.w	r3, r3, #1136	@ 0x470
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4619      	mov	r1, r3
 800db52:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800db54:	f005 fab8 	bl	80130c8 <strcat>
        strcpy(Text_Num_IC,"Number of ICs: ");
 800db58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db5a:	4a33      	ldr	r2, [pc, #204]	@ (800dc28 <updata_data_program_from_app+0x594>)
 800db5c:	461c      	mov	r4, r3
 800db5e:	4615      	mov	r5, r2
 800db60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db62:	6020      	str	r0, [r4, #0]
 800db64:	6061      	str	r1, [r4, #4]
 800db66:	60a2      	str	r2, [r4, #8]
 800db68:	60e3      	str	r3, [r4, #12]
        strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 800db6a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800db6e:	68f9      	ldr	r1, [r7, #12]
 800db70:	4613      	mov	r3, r2
 800db72:	005b      	lsls	r3, r3, #1
 800db74:	4413      	add	r3, r2
 800db76:	011b      	lsls	r3, r3, #4
 800db78:	440b      	add	r3, r1
 800db7a:	f503 638f 	add.w	r3, r3, #1144	@ 0x478
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4619      	mov	r1, r3
 800db82:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800db84:	f005 faa0 	bl	80130c8 <strcat>

        // Show data in screen
        DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800db88:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db90:	f249 5120 	movw	r1, #38176	@ 0x9520
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f001 fdcd 	bl	800f734 <DWIN_SetText>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 800db9a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dba2:	f249 5140 	movw	r1, #38208	@ 0x9540
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f001 fdc4 	bl	800f734 <DWIN_SetText>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800dbac:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	0092      	lsls	r2, r2, #2
 800dbb6:	4413      	add	r3, r2
 800dbb8:	00db      	lsls	r3, r3, #3
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 800dbc0:	3b58      	subs	r3, #88	@ 0x58
 800dbc2:	b29c      	uxth	r4, r3
 800dbc4:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800dbc8:	68f9      	ldr	r1, [r7, #12]
 800dbca:	4613      	mov	r3, r2
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	4413      	add	r3, r2
 800dbd0:	011b      	lsls	r3, r3, #4
 800dbd2:	440b      	add	r3, r1
 800dbd4:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800dbd8:	681d      	ldr	r5, [r3, #0]
            ,strlen(screen_obj->Program_Testx[index_program].Name_Program));
 800dbda:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800dbde:	68f9      	ldr	r1, [r7, #12]
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	4413      	add	r3, r2
 800dbe6:	011b      	lsls	r3, r3, #4
 800dbe8:	440b      	add	r3, r1
 800dbea:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7f2 fab7 	bl	8000164 <strlen>
 800dbf6:	4603      	mov	r3, r0
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	462a      	mov	r2, r5
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f001 fd98 	bl	800f734 <DWIN_SetText>

        free(Text_Name_IC);
 800dc04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800dc06:	f003 fa27 	bl	8011058 <free>
        free(Text_Num_IC);
 800dc0a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800dc0c:	f003 fa24 	bl	8011058 <free>
 800dc10:	46d5      	mov	sp, sl
    }

}
 800dc12:	3758      	adds	r7, #88	@ 0x58
 800dc14:	46bd      	mov	sp, r7
 800dc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc1a:	bf00      	nop
 800dc1c:	08015aa4 	.word	0x08015aa4
 800dc20:	08016808 	.word	0x08016808
 800dc24:	08015a78 	.word	0x08015a78
 800dc28:	08015a84 	.word	0x08015a84

0800dc2c <shutdown>:

void shutdown(void) {
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800dc30:	2200      	movs	r2, #0
 800dc32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dc36:	4802      	ldr	r0, [pc, #8]	@ (800dc40 <shutdown+0x14>)
 800dc38:	f7f5 f998 	bl	8002f6c <HAL_GPIO_WritePin>
}
 800dc3c:	bf00      	nop
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	40010800 	.word	0x40010800

0800dc44 <can_bus_task_init>:
static app_can can_bus_instance;
OS_task * const AO_task_can_bus = &can_bus_instance.task; 
static managerTX_CAN_t *buff_store[MAX_MANAGER_TX_BUF_SIZE]; /* buffer store the data write */


void can_bus_task_init(CAN_HandleTypeDef *pCan) {
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
    printf("init app can bus\n");
 800dc4c:	4810      	ldr	r0, [pc, #64]	@ (800dc90 <can_bus_task_init+0x4c>)
 800dc4e:	f005 f8eb 	bl	8012e28 <puts>
    can_bus_instance.b_counting = false;
 800dc52:	4b10      	ldr	r3, [pc, #64]	@ (800dc94 <can_bus_task_init+0x50>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    can_bus_instance.head_index = 0;
 800dc5a:	4b0e      	ldr	r3, [pc, #56]	@ (800dc94 <can_bus_task_init+0x50>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    can_bus_instance.tail_index = 0;
 800dc62:	4b0c      	ldr	r3, [pc, #48]	@ (800dc94 <can_bus_task_init+0x50>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    can_bus_instance.nUsed = 0;
 800dc6a:	4b0a      	ldr	r3, [pc, #40]	@ (800dc94 <can_bus_task_init+0x50>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    can_bus_instance.end = MAX_MANAGER_TX_BUF_SIZE - 1;
 800dc72:	4b08      	ldr	r3, [pc, #32]	@ (800dc94 <can_bus_task_init+0x50>)
 800dc74:	2204      	movs	r2, #4
 800dc76:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
    can_bus_instance.managerTX_buf = buff_store;
 800dc7a:	4b06      	ldr	r3, [pc, #24]	@ (800dc94 <can_bus_task_init+0x50>)
 800dc7c:	4a06      	ldr	r2, [pc, #24]	@ (800dc98 <can_bus_task_init+0x54>)
 800dc7e:	671a      	str	r2, [r3, #112]	@ 0x70

    can_bus_ctor(&can_bus_instance);
 800dc80:	4804      	ldr	r0, [pc, #16]	@ (800dc94 <can_bus_task_init+0x50>)
 800dc82:	f000 f80b 	bl	800dc9c <can_bus_ctor>

    UNUSED(pCan);
}
 800dc86:	bf00      	nop
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	08015cfc 	.word	0x08015cfc
 800dc94:	2000181c 	.word	0x2000181c
 800dc98:	20001898 	.word	0x20001898

0800dc9c <can_bus_ctor>:

void can_bus_ctor(app_can *pAO) {
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_can_bus,(OS_handler)&can_bus_init,(OS_handler)&can_bus_dispatch);
 800dca4:	4b07      	ldr	r3, [pc, #28]	@ (800dcc4 <can_bus_ctor+0x28>)
 800dca6:	4a08      	ldr	r2, [pc, #32]	@ (800dcc8 <can_bus_ctor+0x2c>)
 800dca8:	4908      	ldr	r1, [pc, #32]	@ (800dccc <can_bus_ctor+0x30>)
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f002 fee8 	bl	8010a80 <OS_task_init>

    OS_TimeEvt_init(&can_bus_instance.te_timeout,TX_TIMEOUT,&can_bus_instance.task);
 800dcb0:	4a04      	ldr	r2, [pc, #16]	@ (800dcc4 <can_bus_ctor+0x28>)
 800dcb2:	2105      	movs	r1, #5
 800dcb4:	4806      	ldr	r0, [pc, #24]	@ (800dcd0 <can_bus_ctor+0x34>)
 800dcb6:	f002 ffb3 	bl	8010c20 <OS_TimeEvt_init>
}
 800dcba:	bf00      	nop
 800dcbc:	3708      	adds	r7, #8
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	2000181c 	.word	0x2000181c
 800dcc8:	0800dcf1 	.word	0x0800dcf1
 800dccc:	0800dcd5 	.word	0x0800dcd5
 800dcd0:	20001838 	.word	0x20001838

0800dcd4 <can_bus_init>:

static void can_bus_init(app_can * const pOS_task, OS_event_t const * const pEvent) {
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Stop(&pOS_task->te_timeout);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	331c      	adds	r3, #28
 800dce2:	4618      	mov	r0, r3
 800dce4:	f002 ffd9 	bl	8010c9a <OS_TimeEvt_Stop>

    UNUSED(pEvent);
}
 800dce8:	bf00      	nop
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <can_bus_dispatch>:

static void can_bus_dispatch(app_can * const pOS_task, OS_event_t const * const pEvent) {
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	881b      	ldrh	r3, [r3, #0]
 800dcfe:	2b05      	cmp	r3, #5
 800dd00:	f200 80dd 	bhi.w	800debe <can_bus_dispatch+0x1ce>
 800dd04:	a201      	add	r2, pc, #4	@ (adr r2, 800dd0c <can_bus_dispatch+0x1c>)
 800dd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0a:	bf00      	nop
 800dd0c:	0800dd25 	.word	0x0800dd25
 800dd10:	0800debf 	.word	0x0800debf
 800dd14:	0800dd2d 	.word	0x0800dd2d
 800dd18:	0800dea3 	.word	0x0800dea3
 800dd1c:	0800debf 	.word	0x0800debf
 800dd20:	0800ddb5 	.word	0x0800ddb5
        case SEND_DATA_CAN_BUS : {
            printf("Send data to device test");
 800dd24:	486a      	ldr	r0, [pc, #424]	@ (800ded0 <can_bus_dispatch+0x1e0>)
 800dd26:	f005 f817 	bl	8012d58 <iprintf>
            
        } break;
 800dd2a:	e0cd      	b.n	800dec8 <can_bus_dispatch+0x1d8>
        case RECEIVE_DATA_CAN_BUS : {

        } break;
        case START_TIMEOUT_TX : {
            printf("start time out\n");
 800dd2c:	4869      	ldr	r0, [pc, #420]	@ (800ded4 <can_bus_dispatch+0x1e4>)
 800dd2e:	f005 f87b 	bl	8012e28 <puts>
            managerTX_CAN_t *check_TX_CAN = (managerTX_CAN_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800dd32:	6838      	ldr	r0, [r7, #0]
 800dd34:	f003 f957 	bl	8010fe6 <get_data_dynamic_event>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	60bb      	str	r3, [r7, #8]
            pOS_task->managerTX_buf[pOS_task->head_index] = check_TX_CAN;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	4413      	add	r3, r2
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d106      	bne.n	800dd68 <can_bus_dispatch+0x78>
                pOS_task->head_index = pOS_task->end;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f893 2077 	ldrb.w	r2, [r3, #119]	@ 0x77
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800dd66:	e007      	b.n	800dd78 <can_bus_dispatch+0x88>
            } else {
                --pOS_task->head_index;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
            }
            ++pOS_task->nUsed;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800dd7e:	3301      	adds	r3, #1
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
            if (pOS_task->b_counting == false) { /* in free, count to check timeout */
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800dd8e:	f083 0301 	eor.w	r3, r3, #1
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	f000 8094 	beq.w	800dec2 <can_bus_dispatch+0x1d2>
                pOS_task->b_counting = true;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                OS_TimeEvt_Set(&pOS_task->te_timeout,500,0); /* run only 1 time */                
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	331c      	adds	r3, #28
 800dda6:	2200      	movs	r2, #0
 800dda8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800ddac:	4618      	mov	r0, r3
 800ddae:	f002 ff5d 	bl	8010c6c <OS_TimeEvt_Set>
            }
        } break;
 800ddb2:	e086      	b.n	800dec2 <can_bus_dispatch+0x1d2>
        case TX_TIMEOUT : {
            managerTX_CAN_t *check_TX_CAN = pOS_task->managerTX_buf[pOS_task->tail_index];
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	4413      	add	r3, r2
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	60fb      	str	r3, [r7, #12]
            if (check_TX_CAN->TX_Done) { // transmit success 
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	791b      	ldrb	r3, [r3, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d024      	beq.n	800de18 <can_bus_dispatch+0x128>
                printf("transmit CAN id %x success\n",check_TX_CAN->ID);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	4840      	ldr	r0, [pc, #256]	@ (800ded8 <can_bus_dispatch+0x1e8>)
 800ddd6:	f004 ffbf 	bl	8012d58 <iprintf>
                if (pOS_task->managerTX_buf[pOS_task->tail_index] != NULL) {
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	4413      	add	r3, r2
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d027      	beq.n	800de3e <can_bus_dispatch+0x14e>
                    free(pOS_task->managerTX_buf[pOS_task->tail_index]);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	4413      	add	r3, r2
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f003 f92a 	bl	8011058 <free>
                    pOS_task->managerTX_buf[pOS_task->tail_index] = NULL;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	4413      	add	r3, r2
 800de12:	2200      	movs	r2, #0
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	e012      	b.n	800de3e <can_bus_dispatch+0x14e>
                }
            } else { // transmit error 
                /* go to warning screen */
                printf("transmit CAN id %x failed\n",check_TX_CAN->ID);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4619      	mov	r1, r3
 800de1e:	482f      	ldr	r0, [pc, #188]	@ (800dedc <can_bus_dispatch+0x1ec>)
 800de20:	f004 ff9a 	bl	8012d58 <iprintf>
                warning_page(&_Screen,check_TX_CAN->ID);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4619      	mov	r1, r3
 800de2a:	482d      	ldr	r0, [pc, #180]	@ (800dee0 <can_bus_dispatch+0x1f0>)
 800de2c:	f7ff fb82 	bl	800d534 <warning_page>
                OS_task_post_event(AO_BlinkyTest,BEGIN_BUZZER,0,0);
 800de30:	4b2c      	ldr	r3, [pc, #176]	@ (800dee4 <can_bus_dispatch+0x1f4>)
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	2300      	movs	r3, #0
 800de36:	2200      	movs	r2, #0
 800de38:	2109      	movs	r1, #9
 800de3a:	f002 fed3 	bl	8010be4 <OS_task_post_event>
            }

            if (pOS_task->tail_index == 0) {
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800de44:	2b00      	cmp	r3, #0
 800de46:	d106      	bne.n	800de56 <can_bus_dispatch+0x166>
                    pOS_task->tail_index = pOS_task->end;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f893 2077 	ldrb.w	r2, [r3, #119]	@ 0x77
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
 800de54:	e007      	b.n	800de66 <can_bus_dispatch+0x176>
                } else {
                    --pOS_task->tail_index;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800de5c:	3b01      	subs	r3, #1
 800de5e:	b2da      	uxtb	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                } 
            --pOS_task->nUsed;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800de6c:	3b01      	subs	r3, #1
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
            pOS_task->b_counting = false;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            /* check buff */
            if (pOS_task->nUsed > 0 ) {
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800de84:	2b00      	cmp	r3, #0
 800de86:	d01e      	beq.n	800dec6 <can_bus_dispatch+0x1d6>
                pOS_task->b_counting = true;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                OS_TimeEvt_Set(&pOS_task->te_timeout,500,0); /* run only 1 time */    
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	331c      	adds	r3, #28
 800de94:	2200      	movs	r2, #0
 800de96:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800de9a:	4618      	mov	r0, r3
 800de9c:	f002 fee6 	bl	8010c6c <OS_TimeEvt_Set>
            }
        } break;
 800dea0:	e011      	b.n	800dec6 <can_bus_dispatch+0x1d6>
        case TX_SUCCESS : {
            // if (pOS_task->b_counting = true) {
                printf("tx receive slave\n");
 800dea2:	4811      	ldr	r0, [pc, #68]	@ (800dee8 <can_bus_dispatch+0x1f8>)
 800dea4:	f004 ffc0 	bl	8012e28 <puts>
                pOS_task->managerTX_buf[pOS_task->tail_index]->TX_Done = true;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4413      	add	r3, r2
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2201      	movs	r2, #1
 800deba:	711a      	strb	r2, [r3, #4]
            // }
        } break; 
 800debc:	e004      	b.n	800dec8 <can_bus_dispatch+0x1d8>
        case TX_FAILED : {

        } break;
        default : break;
 800debe:	bf00      	nop
 800dec0:	e002      	b.n	800dec8 <can_bus_dispatch+0x1d8>
        } break;
 800dec2:	bf00      	nop
 800dec4:	e000      	b.n	800dec8 <can_bus_dispatch+0x1d8>
        } break;
 800dec6:	bf00      	nop
    }
}
 800dec8:	bf00      	nop
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	08015d10 	.word	0x08015d10
 800ded4:	08015d2c 	.word	0x08015d2c
 800ded8:	08015d3c 	.word	0x08015d3c
 800dedc:	08015d58 	.word	0x08015d58
 800dee0:	20000e6c 	.word	0x20000e6c
 800dee4:	08016814 	.word	0x08016814
 800dee8:	08015d74 	.word	0x08015d74

0800deec <eeprom_task_init>:

AT24Cxx_t eeprom_ob;
static write_param_t *write_buf[MAX_WRITE_EEPROM_BUF]; /* buffer store the data write */

/* I2C port using for eeprom */
void eeprom_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 800deec:	b580      	push	{r7, lr}
 800deee:	b08c      	sub	sp, #48	@ 0x30
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	460b      	mov	r3, r1
 800def6:	70fb      	strb	r3, [r7, #3]
//    eeprom_ob.i2c_port = i2c_port;
//    eeprom_ob.dev_address = dev_address;
	
    /* init eeprom */
    if (AT24Cxx_Init(&eeprom_ob,dev_address,i2c_port) == AT24Cxx_Init_OK) {
 800def8:	78fb      	ldrb	r3, [r7, #3]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	4619      	mov	r1, r3
 800defe:	4841      	ldr	r0, [pc, #260]	@ (800e004 <eeprom_task_init+0x118>)
 800df00:	f001 f946 	bl	800f190 <AT24Cxx_Init>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d103      	bne.n	800df12 <eeprom_task_init+0x26>
        /* init success */
        printf("Init eeprom success!!\n");
 800df0a:	483f      	ldr	r0, [pc, #252]	@ (800e008 <eeprom_task_init+0x11c>)
 800df0c:	f004 ff8c 	bl	8012e28 <puts>
 800df10:	e002      	b.n	800df18 <eeprom_task_init+0x2c>
    } else {
        printf("Init eeprom fail!!\n");
 800df12:	483e      	ldr	r0, [pc, #248]	@ (800e00c <eeprom_task_init+0x120>)
 800df14:	f004 ff88 	bl	8012e28 <puts>
    }

      uint8_t data_check = 0;
 800df18:	2300      	movs	r3, #0
 800df1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    // AT24Cxx_read_buffer(&eeprom_ob,MEM_ADDR_CHECK_UPDATA_DATA_TEST,&data_check,1);
    // if (data_check == 0) {
    // } 
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_MEM_ADDR_DIREC_USED,(uint8_t *)&data_check,sizeof(data_check));
 800df1e:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 800df22:	2301      	movs	r3, #1
 800df24:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800df28:	4836      	ldr	r0, [pc, #216]	@ (800e004 <eeprom_task_init+0x118>)
 800df2a:	f001 f97b 	bl	800f224 <AT24Cxx_write_buffer_bloking>
    HAL_Delay(10);
 800df2e:	200a      	movs	r0, #10
 800df30:	f7f3 fe14 	bl	8001b5c <HAL_Delay>

    write_data_test_ic("744051",data_744051,sizeof(data_744051));
 800df34:	22fd      	movs	r2, #253	@ 0xfd
 800df36:	4936      	ldr	r1, [pc, #216]	@ (800e010 <eeprom_task_init+0x124>)
 800df38:	4836      	ldr	r0, [pc, #216]	@ (800e014 <eeprom_task_init+0x128>)
 800df3a:	f000 fac9 	bl	800e4d0 <write_data_test_ic>
    write_data_test_ic("740000",data_7400,sizeof(data_7400));
 800df3e:	2295      	movs	r2, #149	@ 0x95
 800df40:	4935      	ldr	r1, [pc, #212]	@ (800e018 <eeprom_task_init+0x12c>)
 800df42:	4836      	ldr	r0, [pc, #216]	@ (800e01c <eeprom_task_init+0x130>)
 800df44:	f000 fac4 	bl	800e4d0 <write_data_test_ic>
    write_data_test_ic("74139",data_74139,sizeof(data_74139));
 800df48:	22d3      	movs	r2, #211	@ 0xd3
 800df4a:	4935      	ldr	r1, [pc, #212]	@ (800e020 <eeprom_task_init+0x134>)
 800df4c:	4835      	ldr	r0, [pc, #212]	@ (800e024 <eeprom_task_init+0x138>)
 800df4e:	f000 fabf 	bl	800e4d0 <write_data_test_ic>
    write_data_test_ic("7408",data_7408,sizeof(data_7408));
 800df52:	2293      	movs	r2, #147	@ 0x93
 800df54:	4934      	ldr	r1, [pc, #208]	@ (800e028 <eeprom_task_init+0x13c>)
 800df56:	4835      	ldr	r0, [pc, #212]	@ (800e02c <eeprom_task_init+0x140>)
 800df58:	f000 faba 	bl	800e4d0 <write_data_test_ic>
    write_data_test_ic("7402",data_7402,sizeof(data_7402));
 800df5c:	2293      	movs	r2, #147	@ 0x93
 800df5e:	4934      	ldr	r1, [pc, #208]	@ (800e030 <eeprom_task_init+0x144>)
 800df60:	4834      	ldr	r0, [pc, #208]	@ (800e034 <eeprom_task_init+0x148>)
 800df62:	f000 fab5 	bl	800e4d0 <write_data_test_ic>
    write_data_test_ic("74157",data_74157,sizeof(data_74157));
 800df66:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800df6a:	4933      	ldr	r1, [pc, #204]	@ (800e038 <eeprom_task_init+0x14c>)
 800df6c:	4833      	ldr	r0, [pc, #204]	@ (800e03c <eeprom_task_init+0x150>)
 800df6e:	f000 faaf 	bl	800e4d0 <write_data_test_ic>
    write_data_test_ic("74175",data_74175,sizeof(data_74175));
 800df72:	22cb      	movs	r2, #203	@ 0xcb
 800df74:	4932      	ldr	r1, [pc, #200]	@ (800e040 <eeprom_task_init+0x154>)
 800df76:	4833      	ldr	r0, [pc, #204]	@ (800e044 <eeprom_task_init+0x158>)
 800df78:	f000 faaa 	bl	800e4d0 <write_data_test_ic>
    write_data_test_ic("74174",data_74174,sizeof(data_74174));
 800df7c:	22c3      	movs	r2, #195	@ 0xc3
 800df7e:	4932      	ldr	r1, [pc, #200]	@ (800e048 <eeprom_task_init+0x15c>)
 800df80:	4832      	ldr	r0, [pc, #200]	@ (800e04c <eeprom_task_init+0x160>)
 800df82:	f000 faa5 	bl	800e4d0 <write_data_test_ic>
    write_data_test_ic("4027",data_4027,sizeof(data_4027));
 800df86:	22ea      	movs	r2, #234	@ 0xea
 800df88:	4931      	ldr	r1, [pc, #196]	@ (800e050 <eeprom_task_init+0x164>)
 800df8a:	4832      	ldr	r0, [pc, #200]	@ (800e054 <eeprom_task_init+0x168>)
 800df8c:	f000 faa0 	bl	800e4d0 <write_data_test_ic>
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),&buffer,strlen(data_program1));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(1),&buffer,strlen(data_program2));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(2),&buffer,strlen(data_program3));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(3),&buffer,strlen(data_program4));

    char text_program_1[] = "0";
 800df90:	2330      	movs	r3, #48	@ 0x30
 800df92:	81bb      	strh	r3, [r7, #12]
    AT24Cxx_write_buffer(&eeprom_ob,0x02,(uint8_t *)text_program_1,strlen(text_program_1));
 800df94:	f107 030c 	add.w	r3, r7, #12
 800df98:	4618      	mov	r0, r3
 800df9a:	f7f2 f8e3 	bl	8000164 <strlen>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	f107 020c 	add.w	r2, r7, #12
 800dfa6:	2102      	movs	r1, #2
 800dfa8:	4816      	ldr	r0, [pc, #88]	@ (800e004 <eeprom_task_init+0x118>)
 800dfaa:	f001 f913 	bl	800f1d4 <AT24Cxx_write_buffer>
    /* check write data test */


    // AT24Cxx_write_buffer(&eeprom_ob,MEM_ADDR_CHECK_UPDATA_DATA_TEST,&data_check,1);

    eeprom_instance.b_is_writing = false;
 800dfae:	4b2a      	ldr	r3, [pc, #168]	@ (800e058 <eeprom_task_init+0x16c>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    eeprom_instance.data_eeprom.mem_addr = 0x00;
 800dfb6:	4b28      	ldr	r3, [pc, #160]	@ (800e058 <eeprom_task_init+0x16c>)
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
    eeprom_instance.data_eeprom.data = (uint8_t *)0;
 800dfbe:	4b26      	ldr	r3, [pc, #152]	@ (800e058 <eeprom_task_init+0x16c>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = 0;
 800dfc6:	4b24      	ldr	r3, [pc, #144]	@ (800e058 <eeprom_task_init+0x16c>)
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc

    eeprom_instance.write_params_buf = write_buf;
 800dfce:	4b22      	ldr	r3, [pc, #136]	@ (800e058 <eeprom_task_init+0x16c>)
 800dfd0:	4a22      	ldr	r2, [pc, #136]	@ (800e05c <eeprom_task_init+0x170>)
 800dfd2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    eeprom_instance.head_index = 0;
 800dfd6:	4b20      	ldr	r3, [pc, #128]	@ (800e058 <eeprom_task_init+0x16c>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    eeprom_instance.tail_index = 0;
 800dfde:	4b1e      	ldr	r3, [pc, #120]	@ (800e058 <eeprom_task_init+0x16c>)
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    eeprom_instance.end = MAX_WRITE_EEPROM_BUF - 1;
 800dfe6:	4b1c      	ldr	r3, [pc, #112]	@ (800e058 <eeprom_task_init+0x16c>)
 800dfe8:	2209      	movs	r2, #9
 800dfea:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
    eeprom_instance.nUsed = 0;
 800dfee:	4b1a      	ldr	r3, [pc, #104]	@ (800e058 <eeprom_task_init+0x16c>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6

    eeprom_ctor(&eeprom_instance);
 800dff6:	4818      	ldr	r0, [pc, #96]	@ (800e058 <eeprom_task_init+0x16c>)
 800dff8:	f000 f832 	bl	800e060 <eeprom_ctor>
//    printf("Setting info eeprom success\n");
}
 800dffc:	bf00      	nop
 800dffe:	3730      	adds	r7, #48	@ 0x30
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	20001988 	.word	0x20001988
 800e008:	08015d88 	.word	0x08015d88
 800e00c:	08015da0 	.word	0x08015da0
 800e010:	080160e0 	.word	0x080160e0
 800e014:	08015db4 	.word	0x08015db4
 800e018:	080161e0 	.word	0x080161e0
 800e01c:	08015dbc 	.word	0x08015dbc
 800e020:	08016278 	.word	0x08016278
 800e024:	08015dc4 	.word	0x08015dc4
 800e028:	0801634c 	.word	0x0801634c
 800e02c:	08015dcc 	.word	0x08015dcc
 800e030:	08016774 	.word	0x08016774
 800e034:	08015dd4 	.word	0x08015dd4
 800e038:	080163e0 	.word	0x080163e0
 800e03c:	08015ddc 	.word	0x08015ddc
 800e040:	080164f8 	.word	0x080164f8
 800e044:	08015de4 	.word	0x08015de4
 800e048:	080165c4 	.word	0x080165c4
 800e04c:	08015dec 	.word	0x08015dec
 800e050:	08016688 	.word	0x08016688
 800e054:	08015df4 	.word	0x08015df4
 800e058:	200018ac 	.word	0x200018ac
 800e05c:	20001990 	.word	0x20001990

0800e060 <eeprom_ctor>:

void eeprom_ctor(app_eeprom *pAO) {
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
    /* init task */
    OS_task_init(AO_task_eeprom,(OS_handler)&eeprom_init,(OS_handler)&eeprom_dispatch);
 800e068:	4b09      	ldr	r3, [pc, #36]	@ (800e090 <eeprom_ctor+0x30>)
 800e06a:	4a0a      	ldr	r2, [pc, #40]	@ (800e094 <eeprom_ctor+0x34>)
 800e06c:	490a      	ldr	r1, [pc, #40]	@ (800e098 <eeprom_ctor+0x38>)
 800e06e:	4618      	mov	r0, r3
 800e070:	f002 fd06 	bl	8010a80 <OS_task_init>

    /* init time */
    OS_TimeEvt_init(&eeprom_instance.time_wait,FINISH_WRITE,&eeprom_instance.task);
 800e074:	4a06      	ldr	r2, [pc, #24]	@ (800e090 <eeprom_ctor+0x30>)
 800e076:	2103      	movs	r1, #3
 800e078:	4808      	ldr	r0, [pc, #32]	@ (800e09c <eeprom_ctor+0x3c>)
 800e07a:	f002 fdd1 	bl	8010c20 <OS_TimeEvt_init>
    OS_TimeEvt_init(&eeprom_instance.time_check,CHECK_WRITE_BUF,&eeprom_instance.task);
 800e07e:	4a04      	ldr	r2, [pc, #16]	@ (800e090 <eeprom_ctor+0x30>)
 800e080:	2101      	movs	r1, #1
 800e082:	4807      	ldr	r0, [pc, #28]	@ (800e0a0 <eeprom_ctor+0x40>)
 800e084:	f002 fdcc 	bl	8010c20 <OS_TimeEvt_init>
}
 800e088:	bf00      	nop
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	200018ac 	.word	0x200018ac
 800e094:	0800e145 	.word	0x0800e145
 800e098:	0800e0a5 	.word	0x0800e0a5
 800e09c:	200018c8 	.word	0x200018c8
 800e0a0:	2000191c 	.word	0x2000191c

0800e0a4 <eeprom_init>:

static void eeprom_init(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
    /* init time */
    OS_TimeEvt_Stop(&eeprom_instance.time_check); /* don't using time when init */
 800e0ae:	4821      	ldr	r0, [pc, #132]	@ (800e134 <eeprom_init+0x90>)
 800e0b0:	f002 fdf3 	bl	8010c9a <OS_TimeEvt_Stop>
    OS_TimeEvt_Stop(&eeprom_instance.time_wait); 
 800e0b4:	4820      	ldr	r0, [pc, #128]	@ (800e138 <eeprom_init+0x94>)
 800e0b6:	f002 fdf0 	bl	8010c9a <OS_TimeEvt_Stop>

    /* read data program run */
    eeprom_instance.data_eeprom.data = malloc(TOTAL_ALL_PROGRAM_TEST_LEN);
 800e0ba:	20a8      	movs	r0, #168	@ 0xa8
 800e0bc:	f002 ffc4 	bl	8011048 <malloc>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	4b1d      	ldr	r3, [pc, #116]	@ (800e13c <eeprom_init+0x98>)
 800e0c6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = TOTAL_ALL_PROGRAM_TEST_LEN;
 800e0ca:	4b1c      	ldr	r3, [pc, #112]	@ (800e13c <eeprom_init+0x98>)
 800e0cc:	22a8      	movs	r2, #168	@ 0xa8
 800e0ce:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),
 800e0d2:	4b1a      	ldr	r3, [pc, #104]	@ (800e13c <eeprom_init+0x98>)
 800e0d4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800e0d8:	23a8      	movs	r3, #168	@ 0xa8
 800e0da:	2143      	movs	r1, #67	@ 0x43
 800e0dc:	4818      	ldr	r0, [pc, #96]	@ (800e140 <eeprom_init+0x9c>)
 800e0de:	f001 f98c 	bl	800f3fa <AT24Cxx_read_buffer>
                        eeprom_instance.data_eeprom.data,TOTAL_ALL_PROGRAM_TEST_LEN);

    data_eeprom_t *data_eeprom_read = (data_eeprom_t *)malloc(sizeof(data_eeprom_t));
 800e0e2:	200c      	movs	r0, #12
 800e0e4:	f002 ffb0 	bl	8011048 <malloc>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	60fb      	str	r3, [r7, #12]
    data_eeprom_read->data_len = eeprom_instance.data_eeprom.data_len;
 800e0ec:	4b13      	ldr	r3, [pc, #76]	@ (800e13c <eeprom_init+0x98>)
 800e0ee:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	811a      	strh	r2, [r3, #8]
    data_eeprom_read->data = (uint8_t *)malloc(eeprom_instance.data_eeprom.data_len);
 800e0f6:	4b11      	ldr	r3, [pc, #68]	@ (800e13c <eeprom_init+0x98>)
 800e0f8:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f002 ffa3 	bl	8011048 <malloc>
 800e102:	4603      	mov	r3, r0
 800e104:	461a      	mov	r2, r3
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	605a      	str	r2, [r3, #4]
    memcpy(data_eeprom_read->data,eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	4a0b      	ldr	r2, [pc, #44]	@ (800e13c <eeprom_init+0x98>)
 800e110:	f8d2 10c8 	ldr.w	r1, [r2, #200]	@ 0xc8
 800e114:	4a09      	ldr	r2, [pc, #36]	@ (800e13c <eeprom_init+0x98>)
 800e116:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	@ 0xcc
 800e11a:	4618      	mov	r0, r3
 800e11c:	f005 f921 	bl	8013362 <memcpy>
    


    // OS_task_post_event(AO_BlinkyTest,READ_ALL_PROGRAM_TEST,(uint8_t *)&data_eeprom_read,sizeof(data_eeprom_t *));

    free(eeprom_instance.data_eeprom.data);
 800e120:	4b06      	ldr	r3, [pc, #24]	@ (800e13c <eeprom_init+0x98>)
 800e122:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e126:	4618      	mov	r0, r3
 800e128:	f002 ff96 	bl	8011058 <free>

}
 800e12c:	bf00      	nop
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	2000191c 	.word	0x2000191c
 800e138:	200018c8 	.word	0x200018c8
 800e13c:	200018ac 	.word	0x200018ac
 800e140:	20001988 	.word	0x20001988

0800e144 <eeprom_dispatch>:

void eeprom_dispatch(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	2b05      	cmp	r3, #5
 800e154:	f200 816e 	bhi.w	800e434 <eeprom_dispatch+0x2f0>
 800e158:	a201      	add	r2, pc, #4	@ (adr r2, 800e160 <eeprom_dispatch+0x1c>)
 800e15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15e:	bf00      	nop
 800e160:	0800e2b7 	.word	0x0800e2b7
 800e164:	0800e435 	.word	0x0800e435
 800e168:	0800e405 	.word	0x0800e405
 800e16c:	0800e307 	.word	0x0800e307
 800e170:	0800e179 	.word	0x0800e179
 800e174:	0800e1c3 	.word	0x0800e1c3
        case READ_EEPROM : {
            data_eeprom_t *data_read = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e178:	6838      	ldr	r0, [r7, #0]
 800e17a:	f002 ff34 	bl	8010fe6 <get_data_dynamic_event>
 800e17e:	4603      	mov	r3, r0
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	60fb      	str	r3, [r7, #12]
            eeprom_instance.data_eeprom.data = malloc(data_read->data_len);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	891b      	ldrh	r3, [r3, #8]
 800e188:	4618      	mov	r0, r3
 800e18a:	f002 ff5d 	bl	8011048 <malloc>
 800e18e:	4603      	mov	r3, r0
 800e190:	461a      	mov	r2, r3
 800e192:	4bad      	ldr	r3, [pc, #692]	@ (800e448 <eeprom_dispatch+0x304>)
 800e194:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            AT24Cxx_read_buffer(&eeprom_ob,data_read->mem_addr,
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	8819      	ldrh	r1, [r3, #0]
 800e19c:	4baa      	ldr	r3, [pc, #680]	@ (800e448 <eeprom_dispatch+0x304>)
 800e19e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800e1a2:	4ba9      	ldr	r3, [pc, #676]	@ (800e448 <eeprom_dispatch+0x304>)
 800e1a4:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800e1a8:	48a8      	ldr	r0, [pc, #672]	@ (800e44c <eeprom_dispatch+0x308>)
 800e1aa:	f001 f926 	bl	800f3fa <AT24Cxx_read_buffer>
                                eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
            // printf("Data read eeprom : %s\n",eeprom_instance.data_eeprom.data);
            free(eeprom_instance.data_eeprom.data);
 800e1ae:	4ba6      	ldr	r3, [pc, #664]	@ (800e448 <eeprom_dispatch+0x304>)
 800e1b0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f002 ff4f 	bl	8011058 <free>
            free(data_read);
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f002 ff4c 	bl	8011058 <free>
            
        } break;
 800e1c0:	e13d      	b.n	800e43e <eeprom_dispatch+0x2fa>
        case WRITE_EEPROM : {
            printf("Write eeprom\n");
 800e1c2:	48a3      	ldr	r0, [pc, #652]	@ (800e450 <eeprom_dispatch+0x30c>)
 800e1c4:	f004 fe30 	bl	8012e28 <puts>
            data_eeprom_t *data_receive = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e1c8:	6838      	ldr	r0, [r7, #0]
 800e1ca:	f002 ff0c 	bl	8010fe6 <get_data_dynamic_event>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	617b      	str	r3, [r7, #20]
            write_param_t *e_write = (write_param_t *)malloc(sizeof(write_param_t));
 800e1d4:	2010      	movs	r0, #16
 800e1d6:	f002 ff37 	bl	8011048 <malloc>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	613b      	str	r3, [r7, #16]
            // e_write->byte_first_page = AT24C256_PG_SIZE - data_receive->mem_addr % AT24C256_PG_SIZE;
            // e_write->page_write = (data_receive->data_len - e_write->byte_first_page) / AT24C256_PG_SIZE;
            // e_write->byte_remain = (data_receive->data_len - e_write->byte_first_page) % AT24C256_PG_SIZE;
            e_write->data_written = 0;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	815a      	strh	r2, [r3, #10]
            e_write->data_lastlen = 0;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	819a      	strh	r2, [r3, #12]
            e_write->mem_addr = data_receive->mem_addr;
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	881a      	ldrh	r2, [r3, #0]
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	801a      	strh	r2, [r3, #0]
            e_write->data_len = data_receive->data_len;
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	891a      	ldrh	r2, [r3, #8]
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	811a      	strh	r2, [r3, #8]
            e_write->data = (uint8_t *)malloc(data_receive->data_len);
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	891b      	ldrh	r3, [r3, #8]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f002 ff22 	bl	8011048 <malloc>
 800e204:	4603      	mov	r3, r0
 800e206:	461a      	mov	r2, r3
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	605a      	str	r2, [r3, #4]
            memcpy(e_write->data,data_receive->data,data_receive->data_len);
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	6858      	ldr	r0, [r3, #4]
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	6859      	ldr	r1, [r3, #4]
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	891b      	ldrh	r3, [r3, #8]
 800e218:	461a      	mov	r2, r3
 800e21a:	f005 f8a2 	bl	8013362 <memcpy>

            pOS_task->write_params_buf[pOS_task->head_index] = e_write; /* insert to buffer */
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	4413      	add	r3, r2
 800e22e:	693a      	ldr	r2, [r7, #16]
 800e230:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d106      	bne.n	800e24a <eeprom_dispatch+0x106>
                pOS_task->head_index = pOS_task->end;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
 800e248:	e007      	b.n	800e25a <eeprom_dispatch+0x116>
            } else {
                --pOS_task->head_index;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800e250:	3b01      	subs	r3, #1
 800e252:	b2da      	uxtb	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
            }
            ++pOS_task->nUsed;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 800e260:	3301      	adds	r3, #1
 800e262:	b2da      	uxtb	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
            
            if (data_receive->data != NULL) free(data_receive->data);
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d004      	beq.n	800e27c <eeprom_dispatch+0x138>
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	4618      	mov	r0, r3
 800e278:	f002 feee 	bl	8011058 <free>
            free(data_receive);
 800e27c:	6978      	ldr	r0, [r7, #20]
 800e27e:	f002 feeb 	bl	8011058 <free>

            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800e288:	f083 0301 	eor.w	r3, r3, #1
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	2b00      	cmp	r3, #0
 800e290:	f000 80d2 	beq.w	800e438 <eeprom_dispatch+0x2f4>
                pOS_task->b_is_writing = true;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2201      	movs	r2, #1
 800e298:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4413      	add	r3, r2
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f000 f8d0 	bl	800e454 <write_buffer_with_task>
            }
        } break;
 800e2b4:	e0c0      	b.n	800e438 <eeprom_dispatch+0x2f4>
        case WAIT_WRITE_TIMEOUT : {
            /* wait ~10ms for eeprom write complete */
            pOS_task->write_params_buf[pOS_task->tail_index]->data_written += pOS_task->write_params_buf[pOS_task->tail_index]->data_lastlen;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4413      	add	r3, r2
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	8959      	ldrh	r1, [r3, #10]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	4413      	add	r3, r2
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	899a      	ldrh	r2, [r3, #12]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	4403      	add	r3, r0
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	440a      	add	r2, r1
 800e2f2:	b292      	uxth	r2, r2
 800e2f4:	815a      	strh	r2, [r3, #10]

            OS_TimeEvt_Set(&pOS_task->time_wait,11,0); /* run only 1 time */
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	331c      	adds	r3, #28
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	210b      	movs	r1, #11
 800e2fe:	4618      	mov	r0, r3
 800e300:	f002 fcb4 	bl	8010c6c <OS_TimeEvt_Set>
        } break;
 800e304:	e09b      	b.n	800e43e <eeprom_dispatch+0x2fa>
        case FINISH_WRITE : {
            if (pOS_task->write_params_buf[pOS_task->tail_index]->data_written < pOS_task->write_params_buf[pOS_task->tail_index]->data_len) {
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4413      	add	r3, r2
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	895a      	ldrh	r2, [r3, #10]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	440b      	add	r3, r1
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	891b      	ldrh	r3, [r3, #8]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d20c      	bcs.n	800e34c <eeprom_dispatch+0x208>
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4413      	add	r3, r2
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4618      	mov	r0, r3
 800e346:	f000 f885 	bl	800e454 <write_buffer_with_task>
                /* Check buf */
                if (pOS_task->nUsed > 0) {
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
                }
            }
        } break; 
 800e34a:	e077      	b.n	800e43c <eeprom_dispatch+0x2f8>
                if (pOS_task->write_params_buf[pOS_task->tail_index]->data != NULL) {
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4413      	add	r3, r2
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00c      	beq.n	800e37e <eeprom_dispatch+0x23a>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]->data);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4413      	add	r3, r2
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	4618      	mov	r0, r3
 800e37a:	f002 fe6d 	bl	8011058 <free>
                if (pOS_task->write_params_buf[pOS_task->tail_index] != NULL) {
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	4413      	add	r3, r2
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00b      	beq.n	800e3ac <eeprom_dispatch+0x268>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	4413      	add	r3, r2
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f002 fe56 	bl	8011058 <free>
                if (pOS_task->tail_index == 0) {
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <eeprom_dispatch+0x280>
                    pOS_task->tail_index = pOS_task->end;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
 800e3c2:	e007      	b.n	800e3d4 <eeprom_dispatch+0x290>
                    --pOS_task->tail_index;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
                --pOS_task->nUsed;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
                pOS_task->b_is_writing = false;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                if (pOS_task->nUsed > 0) {
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d022      	beq.n	800e43c <eeprom_dispatch+0x2f8>
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
 800e3f6:	4814      	ldr	r0, [pc, #80]	@ (800e448 <eeprom_dispatch+0x304>)
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	2102      	movs	r1, #2
 800e3fe:	f002 fbf1 	bl	8010be4 <OS_task_post_event>
        } break; 
 800e402:	e01b      	b.n	800e43c <eeprom_dispatch+0x2f8>
        case WRITE_EEPROM_IN_BUF : {
            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800e40a:	f083 0301 	eor.w	r3, r3, #1
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	2b00      	cmp	r3, #0
 800e412:	d00f      	beq.n	800e434 <eeprom_dispatch+0x2f0>
                pOS_task->b_is_writing = true;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2201      	movs	r2, #1
 800e418:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4413      	add	r3, r2
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	4618      	mov	r0, r3
 800e430:	f000 f810 	bl	800e454 <write_buffer_with_task>
            }
        }
        default : break;
 800e434:	bf00      	nop
 800e436:	e002      	b.n	800e43e <eeprom_dispatch+0x2fa>
        } break;
 800e438:	bf00      	nop
 800e43a:	e000      	b.n	800e43e <eeprom_dispatch+0x2fa>
        } break; 
 800e43c:	bf00      	nop
    }
}
 800e43e:	bf00      	nop
 800e440:	3718      	adds	r7, #24
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	200018ac 	.word	0x200018ac
 800e44c:	20001988 	.word	0x20001988
 800e450:	08015dfc 	.word	0x08015dfc

0800e454 <write_buffer_with_task>:

static void write_buffer_with_task(write_param_t *pWrite_params) {
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
    uint16_t byte_remain = pWrite_params->data_len - pWrite_params->data_written;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	891a      	ldrh	r2, [r3, #8]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	895b      	ldrh	r3, [r3, #10]
 800e464:	1ad3      	subs	r3, r2, r3
 800e466:	81bb      	strh	r3, [r7, #12]
    uint8_t written_in_page = (pWrite_params->mem_addr + pWrite_params->data_written) % AT24C256_PG_SIZE;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	881b      	ldrh	r3, [r3, #0]
 800e46c:	b2da      	uxtb	r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	895b      	ldrh	r3, [r3, #10]
 800e472:	b2db      	uxtb	r3, r3
 800e474:	4413      	add	r3, r2
 800e476:	b2db      	uxtb	r3, r3
 800e478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e47c:	72fb      	strb	r3, [r7, #11]
    uint8_t byte_in_page = AT24C256_PG_SIZE - written_in_page;
 800e47e:	7afb      	ldrb	r3, [r7, #11]
 800e480:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800e484:	72bb      	strb	r3, [r7, #10]
    uint16_t addr_write = pWrite_params->mem_addr + pWrite_params->data_written;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	881a      	ldrh	r2, [r3, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	895b      	ldrh	r3, [r3, #10]
 800e48e:	4413      	add	r3, r2
 800e490:	813b      	strh	r3, [r7, #8]
    uint8_t len_write;
    if (byte_remain < byte_in_page) {
 800e492:	7abb      	ldrb	r3, [r7, #10]
 800e494:	b29b      	uxth	r3, r3
 800e496:	89ba      	ldrh	r2, [r7, #12]
 800e498:	429a      	cmp	r2, r3
 800e49a:	d202      	bcs.n	800e4a2 <write_buffer_with_task+0x4e>
        len_write = byte_remain;
 800e49c:	89bb      	ldrh	r3, [r7, #12]
 800e49e:	73fb      	strb	r3, [r7, #15]
 800e4a0:	e001      	b.n	800e4a6 <write_buffer_with_task+0x52>
    } else {
        len_write = byte_in_page;
 800e4a2:	7abb      	ldrb	r3, [r7, #10]
 800e4a4:	73fb      	strb	r3, [r7, #15]
    }
    pWrite_params->data_lastlen = len_write;
 800e4a6:	7bfb      	ldrb	r3, [r7, #15]
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	819a      	strh	r2, [r3, #12]
    AT24Cxx_write_buffer(&eeprom_ob,addr_write,pWrite_params->data + pWrite_params->data_written,len_write);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	8952      	ldrh	r2, [r2, #10]
 800e4b6:	441a      	add	r2, r3
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	8939      	ldrh	r1, [r7, #8]
 800e4be:	4803      	ldr	r0, [pc, #12]	@ (800e4cc <write_buffer_with_task+0x78>)
 800e4c0:	f000 fe88 	bl	800f1d4 <AT24Cxx_write_buffer>
}
 800e4c4:	bf00      	nop
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	20001988 	.word	0x20001988

0800e4d0 <write_data_test_ic>:

void write_data_test_ic(const char *icName, const char *Data, uint16_t len) {
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b08c      	sub	sp, #48	@ 0x30
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	80fb      	strh	r3, [r7, #6]
    uint8_t num_direc = 0;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	77fb      	strb	r3, [r7, #31]
    uint16_t dir_addr, data_addr;
    uint16_t mem_pre, len_pre;
    direc_EEPROM_t *Directory_pre;
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 800e4e2:	f107 021f 	add.w	r2, r7, #31
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e4ec:	4842      	ldr	r0, [pc, #264]	@ (800e5f8 <write_data_test_ic+0x128>)
 800e4ee:	f000 ff84 	bl	800f3fa <AT24Cxx_read_buffer>
    dir_addr = START_MEM_ADDR_DATA_DIREC + (num_direc * sizeof(direc_EEPROM_t));
 800e4f2:	7ffb      	ldrb	r3, [r7, #31]
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	0052      	lsls	r2, r2, #1
 800e4f8:	4413      	add	r3, r2
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	f203 2382 	addw	r3, r3, #642	@ 0x282
 800e502:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (num_direc == 0) { /* first */ 
 800e504:	7ffb      	ldrb	r3, [r7, #31]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d103      	bne.n	800e512 <write_data_test_ic+0x42>
        data_addr = START_MEM_ADDR_DATA_TEST ;
 800e50a:	f240 3373 	movw	r3, #883	@ 0x373
 800e50e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800e510:	e033      	b.n	800e57a <write_data_test_ic+0xaa>
    } else {
        uint8_t *temp_buf = (uint8_t *)malloc(sizeof(direc_EEPROM_t));
 800e512:	200c      	movs	r0, #12
 800e514:	f002 fd98 	bl	8011048 <malloc>
 800e518:	4603      	mov	r3, r0
 800e51a:	62bb      	str	r3, [r7, #40]	@ 0x28
        AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC + ((num_direc - 1) * sizeof(direc_EEPROM_t)),temp_buf,sizeof(direc_EEPROM_t));
 800e51c:	7ffb      	ldrb	r3, [r7, #31]
 800e51e:	3b01      	subs	r3, #1
 800e520:	b29b      	uxth	r3, r3
 800e522:	461a      	mov	r2, r3
 800e524:	0052      	lsls	r2, r2, #1
 800e526:	4413      	add	r3, r2
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	f203 2382 	addw	r3, r3, #642	@ 0x282
 800e530:	b299      	uxth	r1, r3
 800e532:	230c      	movs	r3, #12
 800e534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e536:	4830      	ldr	r0, [pc, #192]	@ (800e5f8 <write_data_test_ic+0x128>)
 800e538:	f000 ff5f 	bl	800f3fa <AT24Cxx_read_buffer>
        Directory_pre = (direc_EEPROM_t *)temp_buf;
 800e53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e53e:	627b      	str	r3, [r7, #36]	@ 0x24
        mem_pre = (uint16_t)((Directory_pre->addr[0] << 8) | Directory_pre->addr[1]);
 800e540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e542:	7a1b      	ldrb	r3, [r3, #8]
 800e544:	b21b      	sxth	r3, r3
 800e546:	021b      	lsls	r3, r3, #8
 800e548:	b21a      	sxth	r2, r3
 800e54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54c:	7a5b      	ldrb	r3, [r3, #9]
 800e54e:	b21b      	sxth	r3, r3
 800e550:	4313      	orrs	r3, r2
 800e552:	b21b      	sxth	r3, r3
 800e554:	847b      	strh	r3, [r7, #34]	@ 0x22
        len_pre = (uint16_t)((Directory_pre->length[0] << 8) | Directory_pre->length[1]);
 800e556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e558:	7a9b      	ldrb	r3, [r3, #10]
 800e55a:	b21b      	sxth	r3, r3
 800e55c:	021b      	lsls	r3, r3, #8
 800e55e:	b21a      	sxth	r2, r3
 800e560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e562:	7adb      	ldrb	r3, [r3, #11]
 800e564:	b21b      	sxth	r3, r3
 800e566:	4313      	orrs	r3, r2
 800e568:	b21b      	sxth	r3, r3
 800e56a:	843b      	strh	r3, [r7, #32]
        data_addr = mem_pre + len_pre;
 800e56c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e56e:	8c3b      	ldrh	r3, [r7, #32]
 800e570:	4413      	add	r3, r2
 800e572:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        free(temp_buf);
 800e574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e576:	f002 fd6f 	bl	8011058 <free>
    }
    /* write data */

    AT24Cxx_write_buffer_bloking(&eeprom_ob,data_addr,Data,len);
 800e57a:	88fb      	ldrh	r3, [r7, #6]
 800e57c:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800e57e:	68ba      	ldr	r2, [r7, #8]
 800e580:	481d      	ldr	r0, [pc, #116]	@ (800e5f8 <write_data_test_ic+0x128>)
 800e582:	f000 fe4f 	bl	800f224 <AT24Cxx_write_buffer_bloking>

    /* get the directory data */
    direc_EEPROM_t direc;
    memset(direc.nameIC,0,sizeof(direc.nameIC));
 800e586:	f107 0310 	add.w	r3, r7, #16
 800e58a:	2208      	movs	r2, #8
 800e58c:	2100      	movs	r1, #0
 800e58e:	4618      	mov	r0, r3
 800e590:	f004 fd92 	bl	80130b8 <memset>
    memcpy(direc.nameIC,icName,strlen(icName));
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f7f1 fde5 	bl	8000164 <strlen>
 800e59a:	4602      	mov	r2, r0
 800e59c:	f107 0310 	add.w	r3, r7, #16
 800e5a0:	68f9      	ldr	r1, [r7, #12]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f004 fedd 	bl	8013362 <memcpy>
    direc.addr[0] = ((data_addr >> 8) & 0xFF);
 800e5a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e5aa:	0a1b      	lsrs	r3, r3, #8
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	763b      	strb	r3, [r7, #24]
    direc.addr[1] = ((data_addr) & 0xFF);
 800e5b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	767b      	strb	r3, [r7, #25]
    direc.length[0] = ((len >> 8) & 0xFF);
 800e5b8:	88fb      	ldrh	r3, [r7, #6]
 800e5ba:	0a1b      	lsrs	r3, r3, #8
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	76bb      	strb	r3, [r7, #26]
    direc.length[1] = ((len) & 0xFF);
 800e5c2:	88fb      	ldrh	r3, [r7, #6]
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	76fb      	strb	r3, [r7, #27]
    AT24Cxx_write_buffer_bloking(&eeprom_ob,dir_addr,(uint8_t *)&direc,sizeof(direc_EEPROM_t));
 800e5c8:	f107 0210 	add.w	r2, r7, #16
 800e5cc:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800e5ce:	230c      	movs	r3, #12
 800e5d0:	4809      	ldr	r0, [pc, #36]	@ (800e5f8 <write_data_test_ic+0x128>)
 800e5d2:	f000 fe27 	bl	800f224 <AT24Cxx_write_buffer_bloking>
    ++num_direc;
 800e5d6:	7ffb      	ldrb	r3, [r7, #31]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	77fb      	strb	r3, [r7, #31]
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 800e5de:	f107 021f 	add.w	r2, r7, #31
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e5e8:	4803      	ldr	r0, [pc, #12]	@ (800e5f8 <write_data_test_ic+0x128>)
 800e5ea:	f000 fe1b 	bl	800f224 <AT24Cxx_write_buffer_bloking>
}
 800e5ee:	bf00      	nop
 800e5f0:	3730      	adds	r7, #48	@ 0x30
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	20001988 	.word	0x20001988

0800e5fc <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void);
void I2C2_EV_IRQHandler(void);
void RTC_IRQHandler(void);

void I2C1_ER_IRQHandler(void) { 
 800e5fc:	b480      	push	{r7}
 800e5fe:	af00      	add	r7, sp, #0
    // OS_task_activate(1);  
    // HAL_NVIC_ClearPendingIRQ(I2C1_ER_IRQn); // clear NVIC pending bit
}
 800e600:	bf00      	nop
 800e602:	46bd      	mov	sp, r7
 800e604:	bc80      	pop	{r7}
 800e606:	4770      	bx	lr

0800e608 <RTC_IRQHandler>:
void RTC_IRQHandler(void) {
 800e608:	b580      	push	{r7, lr}
 800e60a:	af00      	add	r7, sp, #0
    OS_task_activate(1);  
 800e60c:	2001      	movs	r0, #1
 800e60e:	f002 fb93 	bl	8010d38 <OS_task_activate>
}
 800e612:	bf00      	nop
 800e614:	bd80      	pop	{r7, pc}

0800e616 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void) {
 800e616:	b580      	push	{r7, lr}
 800e618:	af00      	add	r7, sp, #0
    OS_task_activate(2);
 800e61a:	2002      	movs	r0, #2
 800e61c:	f002 fb8c 	bl	8010d38 <OS_task_activate>
}
 800e620:	bf00      	nop
 800e622:	bd80      	pop	{r7, pc}

0800e624 <BSP_init>:

/* hardware-specific support code run on a specific hardware platform */
void BSP_init(void) {
 800e624:	b580      	push	{r7, lr}
 800e626:	af00      	add	r7, sp, #0
    /* init event pool */
    dynamic_event_pool_init();
 800e628:	f002 fc34 	bl	8010e94 <dynamic_event_pool_init>
    
    /* Set IRQ number for priority used in OS */
    OS_prio_setIRQ(1,RTC_IRQn);
 800e62c:	2103      	movs	r1, #3
 800e62e:	2001      	movs	r0, #1
 800e630:	f002 fc06 	bl	8010e40 <OS_prio_setIRQ>
    OS_prio_setIRQ(2,I2C2_EV_IRQn);
 800e634:	2121      	movs	r1, #33	@ 0x21
 800e636:	2002      	movs	r0, #2
 800e638:	f002 fc02 	bl	8010e40 <OS_prio_setIRQ>

    OS_priority_IRQ(RTC_IRQn,1);
 800e63c:	2101      	movs	r1, #1
 800e63e:	2003      	movs	r0, #3
 800e640:	f002 fbe4 	bl	8010e0c <OS_priority_IRQ>
    OS_priority_IRQ(I2C2_EV_IRQn,2);
 800e644:	2102      	movs	r1, #2
 800e646:	2021      	movs	r0, #33	@ 0x21
 800e648:	f002 fbe0 	bl	8010e0c <OS_priority_IRQ>

    OS_Test_setIRQ(AO_BlinkyTest,RTC_IRQn);    
 800e64c:	4b09      	ldr	r3, [pc, #36]	@ (800e674 <BSP_init+0x50>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2103      	movs	r1, #3
 800e652:	4618      	mov	r0, r3
 800e654:	f002 fc10 	bl	8010e78 <OS_Test_setIRQ>
//    OS_Test_setIRQ(AO_taskPost,RTC_IRQn);
    OS_Test_setIRQ(AO_task_eeprom,RTC_IRQn);
 800e658:	4b07      	ldr	r3, [pc, #28]	@ (800e678 <BSP_init+0x54>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2103      	movs	r1, #3
 800e65e:	4618      	mov	r0, r3
 800e660:	f002 fc0a 	bl	8010e78 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_task_uart_esp32,I2C2_EV_IRQn);
 800e664:	4b05      	ldr	r3, [pc, #20]	@ (800e67c <BSP_init+0x58>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2121      	movs	r1, #33	@ 0x21
 800e66a:	4618      	mov	r0, r3
 800e66c:	f002 fc04 	bl	8010e78 <OS_Test_setIRQ>
}
 800e670:	bf00      	nop
 800e672:	bd80      	pop	{r7, pc}
 800e674:	08016814 	.word	0x08016814
 800e678:	08016808 	.word	0x08016808
 800e67c:	08016810 	.word	0x08016810

0800e680 <ds3231_task_init>:
#include "app_main.h"
#include "../Core/Inc/main.h"

DS3231_t ds3231;

void ds3231_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	460b      	mov	r3, r1
 800e68a:	70fb      	strb	r3, [r7, #3]
    DS3231_Init(&ds3231,i2c_port,dev_address);
 800e68c:	78fb      	ldrb	r3, [r7, #3]
 800e68e:	b29b      	uxth	r3, r3
 800e690:	461a      	mov	r2, r3
 800e692:	6879      	ldr	r1, [r7, #4]
 800e694:	4803      	ldr	r0, [pc, #12]	@ (800e6a4 <ds3231_task_init+0x24>)
 800e696:	f000 ff13 	bl	800f4c0 <DS3231_Init>
 800e69a:	bf00      	nop
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	200019b8 	.word	0x200019b8

0800e6a8 <screen_task_init>:
static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent);

static app_screen screen_instance;
OS_task * const AO_task_screen = &screen_instance.task;

void screen_task_init(void) {
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
    screen_ctor(&screen_instance);
 800e6ac:	4802      	ldr	r0, [pc, #8]	@ (800e6b8 <screen_task_init+0x10>)
 800e6ae:	f000 f805 	bl	800e6bc <screen_ctor>
}
 800e6b2:	bf00      	nop
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	200019c0 	.word	0x200019c0

0800e6bc <screen_ctor>:

void screen_ctor(app_screen *pAO) {
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_screen,(OS_handler)screen_init,(OS_handler)screen_dispatch);
 800e6c4:	4b08      	ldr	r3, [pc, #32]	@ (800e6e8 <screen_ctor+0x2c>)
 800e6c6:	4a09      	ldr	r2, [pc, #36]	@ (800e6ec <screen_ctor+0x30>)
 800e6c8:	4909      	ldr	r1, [pc, #36]	@ (800e6f0 <screen_ctor+0x34>)
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f002 f9d8 	bl	8010a80 <OS_task_init>

    OS_TimeEvt_init(&pAO->te_rtc,UPDATE_RTC,&pAO->task);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	331c      	adds	r3, #28
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	2101      	movs	r1, #1
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f002 faa1 	bl	8010c20 <OS_TimeEvt_init>
}
 800e6de:	bf00      	nop
 800e6e0:	3708      	adds	r7, #8
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	200019c0 	.word	0x200019c0
 800e6ec:	0800e719 	.word	0x0800e719
 800e6f0:	0800e6f5 	.word	0x0800e6f5

0800e6f4 <screen_init>:

static void screen_init(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Set(&pOS_task->te_rtc,100,1000);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	331c      	adds	r3, #28
 800e702:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e706:	2164      	movs	r1, #100	@ 0x64
 800e708:	4618      	mov	r0, r3
 800e70a:	f002 faaf 	bl	8010c6c <OS_TimeEvt_Set>
    UNUSED(pEvent);
} 
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
	...

0800e718 <screen_dispatch>:

static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 800e718:	b580      	push	{r7, lr}
 800e71a:	b08e      	sub	sp, #56	@ 0x38
 800e71c:	af02      	add	r7, sp, #8
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	881b      	ldrh	r3, [r3, #0]
 800e726:	2b03      	cmp	r3, #3
 800e728:	f200 80a9 	bhi.w	800e87e <screen_dispatch+0x166>
 800e72c:	a201      	add	r2, pc, #4	@ (adr r2, 800e734 <screen_dispatch+0x1c>)
 800e72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e732:	bf00      	nop
 800e734:	0800e745 	.word	0x0800e745
 800e738:	0800e76d 	.word	0x0800e76d
 800e73c:	0800e825 	.word	0x0800e825
 800e740:	0800e7e9 	.word	0x0800e7e9
        case DEIVCE_TEST_FINISH : {
            printf("Device test success!!\n");
 800e744:	4850      	ldr	r0, [pc, #320]	@ (800e888 <screen_dispatch+0x170>)
 800e746:	f004 fb6f 	bl	8012e28 <puts>
            uint8_t *device_finish = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e74a:	6838      	ldr	r0, [r7, #0]
 800e74c:	f002 fc4b 	bl	8010fe6 <get_data_dynamic_event>
 800e750:	4603      	mov	r3, r0
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	627b      	str	r3, [r7, #36]	@ 0x24
            show_main_page(&_Screen,DWINPAGE_MAIN_FINISH,*device_finish);
 800e756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	2164      	movs	r1, #100	@ 0x64
 800e75e:	484b      	ldr	r0, [pc, #300]	@ (800e88c <screen_dispatch+0x174>)
 800e760:	f7fe f92a 	bl	800c9b8 <show_main_page>
            free(device_finish);
 800e764:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e766:	f002 fc77 	bl	8011058 <free>
        } break;
 800e76a:	e089      	b.n	800e880 <screen_dispatch+0x168>
        case UPDATE_RTC : {
            // printf("Update RTC\n");
            uint8_t data_time[7];
            DS3231_Read_time(&ds3231, data_time);
 800e76c:	f107 031c 	add.w	r3, r7, #28
 800e770:	4619      	mov	r1, r3
 800e772:	4847      	ldr	r0, [pc, #284]	@ (800e890 <screen_dispatch+0x178>)
 800e774:	f000 fecc 	bl	800f510 <DS3231_Read_time>
            char string[20];
            sprintf(string, "%02d/%02d/20%02d", data_time[4], data_time[5], data_time[6] );
 800e778:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e77c:	461a      	mov	r2, r3
 800e77e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e782:	4619      	mov	r1, r3
 800e784:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800e788:	f107 0008 	add.w	r0, r7, #8
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	460b      	mov	r3, r1
 800e790:	4940      	ldr	r1, [pc, #256]	@ (800e894 <screen_dispatch+0x17c>)
 800e792:	f004 fb87 	bl	8012ea4 <siprintf>
            DWIN_SetText(&_Screen,VP_Time_Day,string,strlen(string));
 800e796:	f107 0308 	add.w	r3, r7, #8
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7f1 fce2 	bl	8000164 <strlen>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	f107 0208 	add.w	r2, r7, #8
 800e7a8:	f649 0120 	movw	r1, #38944	@ 0x9820
 800e7ac:	4837      	ldr	r0, [pc, #220]	@ (800e88c <screen_dispatch+0x174>)
 800e7ae:	f000 ffc1 	bl	800f734 <DWIN_SetText>
            sprintf(string, "%02d:%02d:%02d", data_time[2], data_time[1], data_time[0] );
 800e7b2:	7fbb      	ldrb	r3, [r7, #30]
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	7f7b      	ldrb	r3, [r7, #29]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	7f3b      	ldrb	r3, [r7, #28]
 800e7bc:	f107 0008 	add.w	r0, r7, #8
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	4934      	ldr	r1, [pc, #208]	@ (800e898 <screen_dispatch+0x180>)
 800e7c6:	f004 fb6d 	bl	8012ea4 <siprintf>
            DWIN_SetText(&_Screen,VP_Time_Hour,string,strlen(string));
 800e7ca:	f107 0308 	add.w	r3, r7, #8
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7f1 fcc8 	bl	8000164 <strlen>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	f107 0208 	add.w	r2, r7, #8
 800e7dc:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 800e7e0:	482a      	ldr	r0, [pc, #168]	@ (800e88c <screen_dispatch+0x174>)
 800e7e2:	f000 ffa7 	bl	800f734 <DWIN_SetText>
        } break;
 800e7e6:	e04b      	b.n	800e880 <screen_dispatch+0x168>
        case UPDATA_PROGARM : {
            printf("updata program test\n");
 800e7e8:	482c      	ldr	r0, [pc, #176]	@ (800e89c <screen_dispatch+0x184>)
 800e7ea:	f004 fb1d 	bl	8012e28 <puts>
            Screen_data_t *data_program = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e7ee:	6838      	ldr	r0, [r7, #0]
 800e7f0:	f002 fbf9 	bl	8010fe6 <get_data_dynamic_event>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            updata_data_program_from_app(&_Screen,data_program->data,data_program->len);
 800e7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fc:	6819      	ldr	r1, [r3, #0]
 800e7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e800:	889b      	ldrh	r3, [r3, #4]
 800e802:	461a      	mov	r2, r3
 800e804:	4821      	ldr	r0, [pc, #132]	@ (800e88c <screen_dispatch+0x174>)
 800e806:	f7fe ff45 	bl	800d694 <updata_data_program_from_app>
            if (data_program->data != NULL) free(data_program->data);
 800e80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d004      	beq.n	800e81c <screen_dispatch+0x104>
 800e812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4618      	mov	r0, r3
 800e818:	f002 fc1e 	bl	8011058 <free>
            free(data_program);
 800e81c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e81e:	f002 fc1b 	bl	8011058 <free>
        } break;
 800e822:	e02d      	b.n	800e880 <screen_dispatch+0x168>
        case UPDATE_WIFI_STATE : {
            printf("Update wifi status\n");
 800e824:	481e      	ldr	r0, [pc, #120]	@ (800e8a0 <screen_dispatch+0x188>)
 800e826:	f004 faff 	bl	8012e28 <puts>
            Screen_data_t *data_wifi = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e82a:	6838      	ldr	r0, [r7, #0]
 800e82c:	f002 fbdb 	bl	8010fe6 <get_data_dynamic_event>
 800e830:	4603      	mov	r3, r0
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (data_wifi->data[0] == '0') {
 800e836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	2b30      	cmp	r3, #48	@ 0x30
 800e83e:	d106      	bne.n	800e84e <screen_dispatch+0x136>
                DWIN_SetVariable_Icon(&_Screen,VP_ICON_WIFI,WIFI_OFF);
 800e840:	2201      	movs	r2, #1
 800e842:	f244 2150 	movw	r1, #16976	@ 0x4250
 800e846:	4811      	ldr	r0, [pc, #68]	@ (800e88c <screen_dispatch+0x174>)
 800e848:	f001 f827 	bl	800f89a <DWIN_SetVariable_Icon>
 800e84c:	e00a      	b.n	800e864 <screen_dispatch+0x14c>
            } else if (data_wifi->data[0] == '1') {
 800e84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	2b31      	cmp	r3, #49	@ 0x31
 800e856:	d105      	bne.n	800e864 <screen_dispatch+0x14c>
                DWIN_SetVariable_Icon(&_Screen,VP_ICON_WIFI,WIFI_ON);
 800e858:	2200      	movs	r2, #0
 800e85a:	f244 2150 	movw	r1, #16976	@ 0x4250
 800e85e:	480b      	ldr	r0, [pc, #44]	@ (800e88c <screen_dispatch+0x174>)
 800e860:	f001 f81b 	bl	800f89a <DWIN_SetVariable_Icon>
            }
            if (data_wifi->data != NULL) free(data_wifi->data);
 800e864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d004      	beq.n	800e876 <screen_dispatch+0x15e>
 800e86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4618      	mov	r0, r3
 800e872:	f002 fbf1 	bl	8011058 <free>
            free(data_wifi);
 800e876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e878:	f002 fbee 	bl	8011058 <free>
        } break;
 800e87c:	e000      	b.n	800e880 <screen_dispatch+0x168>
        default: break;
 800e87e:	bf00      	nop
    }
}
 800e880:	bf00      	nop
 800e882:	3730      	adds	r7, #48	@ 0x30
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	08015e0c 	.word	0x08015e0c
 800e88c:	20000e6c 	.word	0x20000e6c
 800e890:	200019b8 	.word	0x200019b8
 800e894:	08015e24 	.word	0x08015e24
 800e898:	08015e38 	.word	0x08015e38
 800e89c:	08015e48 	.word	0x08015e48
 800e8a0:	08015e5c 	.word	0x08015e5c

0800e8a4 <uart_esp32_task_init>:
OS_task * const AO_task_uart_esp32 = &uart_esp32_instance.task;

static uart_esp32_t *buff_store_rx[RX_BUF]; /* buffer store the data write */
static uart_esp32_t *buff_store_tx[TX_BUF]; /* buffer store the data write */

void uart_esp32_task_init(UART_HandleTypeDef *pUart) {
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
    uart_esp32_instance.pUart = pUart;
 800e8ac:	4a1b      	ldr	r2, [pc, #108]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	61d3      	str	r3, [r2, #28]

    uart_esp32_instance.head_index_rx = 0;
 800e8b2:	4b1a      	ldr	r3, [pc, #104]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    uart_esp32_instance.tail_index_rx = 0;
 800e8ba:	4b18      	ldr	r3, [pc, #96]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    uart_esp32_instance.nUsed_rx = 0;
 800e8c2:	4b16      	ldr	r3, [pc, #88]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    uart_esp32_instance.end_rx = RX_BUF - 1;
 800e8ca:	4b14      	ldr	r3, [pc, #80]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8cc:	2209      	movs	r2, #9
 800e8ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    uart_esp32_instance.uart_esp32_buf_rx = buff_store_rx;
 800e8d2:	4b12      	ldr	r3, [pc, #72]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8d4:	4a12      	ldr	r2, [pc, #72]	@ (800e920 <uart_esp32_task_init+0x7c>)
 800e8d6:	621a      	str	r2, [r3, #32]
    uart_esp32_instance.is_rx = false;
 800e8d8:	4b10      	ldr	r3, [pc, #64]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8da:	2200      	movs	r2, #0
 800e8dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    uart_esp32_instance.head_index_tx = 0;
 800e8e0:	4b0e      	ldr	r3, [pc, #56]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    uart_esp32_instance.tail_index_tx = 0;
 800e8e8:	4b0c      	ldr	r3, [pc, #48]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    uart_esp32_instance.nUsed_tx = 0;
 800e8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    uart_esp32_instance.end_tx = TX_BUF - 1;
 800e8f8:	4b08      	ldr	r3, [pc, #32]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e8fa:	220e      	movs	r2, #14
 800e8fc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    uart_esp32_instance.uart_esp32_buf_tx = buff_store_tx;
 800e900:	4b06      	ldr	r3, [pc, #24]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e902:	4a08      	ldr	r2, [pc, #32]	@ (800e924 <uart_esp32_task_init+0x80>)
 800e904:	62da      	str	r2, [r3, #44]	@ 0x2c
    uart_esp32_instance.is_tx = false;
 800e906:	4b05      	ldr	r3, [pc, #20]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    uart_esp32_ctor(&uart_esp32_instance);
 800e90e:	4803      	ldr	r0, [pc, #12]	@ (800e91c <uart_esp32_task_init+0x78>)
 800e910:	f000 f80a 	bl	800e928 <uart_esp32_ctor>

}
 800e914:	bf00      	nop
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	20001a30 	.word	0x20001a30
 800e920:	20001b10 	.word	0x20001b10
 800e924:	20001b38 	.word	0x20001b38

0800e928 <uart_esp32_ctor>:

void uart_esp32_ctor(app_uart_esp32 *pAO) {
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_uart_esp32,(OS_handler)&uart_esp32_init,(OS_handler)&uart_esp32_dispatch);
 800e930:	4b09      	ldr	r3, [pc, #36]	@ (800e958 <uart_esp32_ctor+0x30>)
 800e932:	4a0a      	ldr	r2, [pc, #40]	@ (800e95c <uart_esp32_ctor+0x34>)
 800e934:	490a      	ldr	r1, [pc, #40]	@ (800e960 <uart_esp32_ctor+0x38>)
 800e936:	4618      	mov	r0, r3
 800e938:	f002 f8a2 	bl	8010a80 <OS_task_init>

    OS_TimeEvt_init(&uart_esp32_instance.te_wait_rx,ESP32_RX_TIMEOUT,&uart_esp32_instance.task);
 800e93c:	4a06      	ldr	r2, [pc, #24]	@ (800e958 <uart_esp32_ctor+0x30>)
 800e93e:	2103      	movs	r1, #3
 800e940:	4808      	ldr	r0, [pc, #32]	@ (800e964 <uart_esp32_ctor+0x3c>)
 800e942:	f002 f96d 	bl	8010c20 <OS_TimeEvt_init>
    OS_TimeEvt_init(&uart_esp32_instance.te_wait_tx,ESP32_TX_TIMEOUT,&uart_esp32_instance.task);
 800e946:	4a04      	ldr	r2, [pc, #16]	@ (800e958 <uart_esp32_ctor+0x30>)
 800e948:	2104      	movs	r1, #4
 800e94a:	4807      	ldr	r0, [pc, #28]	@ (800e968 <uart_esp32_ctor+0x40>)
 800e94c:	f002 f968 	bl	8010c20 <OS_TimeEvt_init>
}
 800e950:	bf00      	nop
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	20001a30 	.word	0x20001a30
 800e95c:	0800e981 	.word	0x0800e981
 800e960:	0800e96d 	.word	0x0800e96d
 800e964:	20001a68 	.word	0x20001a68
 800e968:	20001abc 	.word	0x20001abc

0800e96c <uart_esp32_init>:

static void uart_esp32_init(app_uart_esp32 * const pOS_task, OS_event_t const * const pEvent) {
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
    UNUSED(pOS_task);
    UNUSED(pEvent);
}
 800e976:	bf00      	nop
 800e978:	370c      	adds	r7, #12
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bc80      	pop	{r7}
 800e97e:	4770      	bx	lr

0800e980 <uart_esp32_dispatch>:

static void uart_esp32_dispatch(app_uart_esp32 * const pOS_task, OS_event_t const * const pEvent) {
 800e980:	b590      	push	{r4, r7, lr}
 800e982:	f5ad 7d21 	sub.w	sp, sp, #644	@ 0x284
 800e986:	af00      	add	r7, sp, #0
 800e988:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800e98c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e990:	6018      	str	r0, [r3, #0]
 800e992:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800e996:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800e99a:	6019      	str	r1, [r3, #0]
    switch (pEvent->sig) {
 800e99c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800e9a0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	881b      	ldrh	r3, [r3, #0]
 800e9a8:	2b04      	cmp	r3, #4
 800e9aa:	f200 82d9 	bhi.w	800ef60 <uart_esp32_dispatch+0x5e0>
 800e9ae:	a201      	add	r2, pc, #4	@ (adr r2, 800e9b4 <uart_esp32_dispatch+0x34>)
 800e9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b4:	0800e9c9 	.word	0x0800e9c9
 800e9b8:	0800eabb 	.word	0x0800eabb
 800e9bc:	0800ef61 	.word	0x0800ef61
 800e9c0:	0800ebad 	.word	0x0800ebad
 800e9c4:	0800ee41 	.word	0x0800ee41
        case SEND_DATA_ESP32 : {
            printf("Send data to esp32\n");
 800e9c8:	48b1      	ldr	r0, [pc, #708]	@ (800ec90 <uart_esp32_dispatch+0x310>)
 800e9ca:	f004 fa2d 	bl	8012e28 <puts>
            uart_esp32_t *data_send_esp32 = (uart_esp32_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800e9ce:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800e9d2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800e9d6:	6818      	ldr	r0, [r3, #0]
 800e9d8:	f002 fb05 	bl	8010fe6 <get_data_dynamic_event>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
            pOS_task->uart_esp32_buf_tx[pOS_task->head_index_tx] = data_send_esp32;
 800e9e4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800e9e8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9f0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800e9f4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	4413      	add	r3, r2
 800ea02:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 800ea06:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index_tx == 0) {
 800ea08:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ea0c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d10e      	bne.n	800ea38 <uart_esp32_dispatch+0xb8>
                pOS_task->head_index_tx = pOS_task->end_tx;
 800ea1a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ea1e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800ea28:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ea2c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800ea36:	e00f      	b.n	800ea58 <uart_esp32_dispatch+0xd8>
            } else {
                --pOS_task->head_index_tx;
 800ea38:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ea3c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea46:	3b01      	subs	r3, #1
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ea4e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            }
            ++pOS_task->nUsed_tx;
 800ea58:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ea5c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ea66:	3301      	adds	r3, #1
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ea6e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            if (pOS_task->is_tx == false) {
 800ea78:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ea7c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ea86:	f083 0301 	eor.w	r3, r3, #1
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f000 8269 	beq.w	800ef64 <uart_esp32_dispatch+0x5e4>
                pOS_task->is_tx = true;
 800ea92:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ea96:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
//                HAL_UART_Transmit(pOS_task->pUart,data_send_esp32->data,data_send_esp32->len,1000);
                OS_TimeEvt_Set(&pOS_task->te_wait_tx,200,0);
 800eaa2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eaa6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	338c      	adds	r3, #140	@ 0x8c
 800eaae:	2200      	movs	r2, #0
 800eab0:	21c8      	movs	r1, #200	@ 0xc8
 800eab2:	4618      	mov	r0, r3
 800eab4:	f002 f8da 	bl	8010c6c <OS_TimeEvt_Set>
            }
        } break;
 800eab8:	e254      	b.n	800ef64 <uart_esp32_dispatch+0x5e4>
        case RECEIVE_DATA_ESP32 : {
            printf("Receive data from ESP32\n");
 800eaba:	4876      	ldr	r0, [pc, #472]	@ (800ec94 <uart_esp32_dispatch+0x314>)
 800eabc:	f004 f9b4 	bl	8012e28 <puts>
            uart_esp32_t *RX_ESP32 = (uart_esp32_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800eac0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eac4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800eac8:	6818      	ldr	r0, [r3, #0]
 800eaca:	f002 fa8c 	bl	8010fe6 <get_data_dynamic_event>
 800eace:	4603      	mov	r3, r0
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
            pOS_task->uart_esp32_buf_rx[pOS_task->head_index_rx] = RX_ESP32;
 800ead6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eada:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	6a1a      	ldr	r2, [r3, #32]
 800eae2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eae6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	4413      	add	r3, r2
 800eaf4:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 800eaf8:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index_rx == 0) {
 800eafa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eafe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10e      	bne.n	800eb2a <uart_esp32_dispatch+0x1aa>
                pOS_task->head_index_rx = pOS_task->end_rx;
 800eb0c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eb10:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800eb1a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eb1e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800eb28:	e00f      	b.n	800eb4a <uart_esp32_dispatch+0x1ca>
            } else {
                --pOS_task->head_index_rx;
 800eb2a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eb2e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	b2da      	uxtb	r2, r3
 800eb3c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eb40:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            }
            ++pOS_task->nUsed_rx;
 800eb4a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eb4e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800eb58:	3301      	adds	r3, #1
 800eb5a:	b2da      	uxtb	r2, r3
 800eb5c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eb60:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            if (pOS_task->is_rx == false) {
 800eb6a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eb6e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb78:	f083 0301 	eor.w	r3, r3, #1
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	f000 81f2 	beq.w	800ef68 <uart_esp32_dispatch+0x5e8>
                pOS_task->is_rx = true;
 800eb84:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eb88:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                OS_TimeEvt_Set(&pOS_task->te_wait_rx,200,0);
 800eb94:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eb98:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	3338      	adds	r3, #56	@ 0x38
 800eba0:	2200      	movs	r2, #0
 800eba2:	21c8      	movs	r1, #200	@ 0xc8
 800eba4:	4618      	mov	r0, r3
 800eba6:	f002 f861 	bl	8010c6c <OS_TimeEvt_Set>
            }
        } break;
 800ebaa:	e1dd      	b.n	800ef68 <uart_esp32_dispatch+0x5e8>
        case ESP32_RX_TIMEOUT : {
            uart_esp32_t *RX_ESP32 = pOS_task->uart_esp32_buf_rx[pOS_task->tail_index_rx];
 800ebac:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ebb0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6a1a      	ldr	r2, [r3, #32]
 800ebb8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ebbc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ebc6:	009b      	lsls	r3, r3, #2
 800ebc8:	4413      	add	r3, r2
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
            /* check command of data */
            switch (RX_ESP32->data[0]) {
 800ebd0:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2b32      	cmp	r3, #50	@ 0x32
 800ebda:	d05f      	beq.n	800ec9c <uart_esp32_dispatch+0x31c>
 800ebdc:	2b32      	cmp	r3, #50	@ 0x32
 800ebde:	f300 80c2 	bgt.w	800ed66 <uart_esp32_dispatch+0x3e6>
 800ebe2:	2b30      	cmp	r3, #48	@ 0x30
 800ebe4:	d002      	beq.n	800ebec <uart_esp32_dispatch+0x26c>
 800ebe6:	2b31      	cmp	r3, #49	@ 0x31
 800ebe8:	d022      	beq.n	800ec30 <uart_esp32_dispatch+0x2b0>
                        }
                    }
                    /* show data */
                    // DWIN_SetText((Dwin_t *)&_Screen,VP_Data_Log,_Screen.data_log.cur_data,strlen(_Screen.data_log.cur_data));
                }
                default : break;
 800ebea:	e0bc      	b.n	800ed66 <uart_esp32_dispatch+0x3e6>
                    Screen_data_t *data_wifi = malloc(sizeof(Screen_data_t));
 800ebec:	2008      	movs	r0, #8
 800ebee:	f002 fa2b 	bl	8011048 <malloc>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
                    data_wifi->data = malloc(1);
 800ebf8:	f8d7 4268 	ldr.w	r4, [r7, #616]	@ 0x268
 800ebfc:	2001      	movs	r0, #1
 800ebfe:	f002 fa23 	bl	8011048 <malloc>
 800ec02:	4603      	mov	r3, r0
 800ec04:	6023      	str	r3, [r4, #0]
                    data_wifi->data[0] = RX_ESP32->data[2];
 800ec06:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	7892      	ldrb	r2, [r2, #2]
 800ec14:	701a      	strb	r2, [r3, #0]
                    data_wifi->len = 1;
 800ec16:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	809a      	strh	r2, [r3, #4]
                    OS_task_post_event(AO_task_screen,UPDATE_WIFI_STATE,(uint8_t *)&data_wifi,sizeof(Screen_data_t));
 800ec1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ec98 <uart_esp32_dispatch+0x318>)
 800ec20:	6818      	ldr	r0, [r3, #0]
 800ec22:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800ec26:	2308      	movs	r3, #8
 800ec28:	2102      	movs	r1, #2
 800ec2a:	f001 ffdb 	bl	8010be4 <OS_task_post_event>
                } break;
 800ec2e:	e09b      	b.n	800ed68 <uart_esp32_dispatch+0x3e8>
                    Screen_data_t *data_program = malloc(sizeof(Screen_data_t));
 800ec30:	2008      	movs	r0, #8
 800ec32:	f002 fa09 	bl	8011048 <malloc>
 800ec36:	4603      	mov	r3, r0
 800ec38:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
                    data_program->data = malloc(RX_ESP32->len);
 800ec3c:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	f8d7 4264 	ldr.w	r4, [r7, #612]	@ 0x264
 800ec46:	4618      	mov	r0, r3
 800ec48:	f002 f9fe 	bl	8011048 <malloc>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	6023      	str	r3, [r4, #0]
                    memcpy(data_program->data,&RX_ESP32->data[2],RX_ESP32->len - 1);
 800ec50:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800ec54:	6818      	ldr	r0, [r3, #0]
 800ec56:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	1c99      	adds	r1, r3, #2
 800ec5e:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	3b01      	subs	r3, #1
 800ec66:	461a      	mov	r2, r3
 800ec68:	f004 fb7b 	bl	8013362 <memcpy>
                    data_program->len = RX_ESP32->len - 1;
 800ec6c:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800ec78:	3a01      	subs	r2, #1
 800ec7a:	b292      	uxth	r2, r2
 800ec7c:	809a      	strh	r2, [r3, #4]
                    OS_task_post_event(AO_task_screen,UPDATA_PROGARM,(uint8_t *)&data_program,sizeof(Screen_data_t));
 800ec7e:	4b06      	ldr	r3, [pc, #24]	@ (800ec98 <uart_esp32_dispatch+0x318>)
 800ec80:	6818      	ldr	r0, [r3, #0]
 800ec82:	f507 7219 	add.w	r2, r7, #612	@ 0x264
 800ec86:	2308      	movs	r3, #8
 800ec88:	2103      	movs	r1, #3
 800ec8a:	f001 ffab 	bl	8010be4 <OS_task_post_event>
                } break;
 800ec8e:	e06b      	b.n	800ed68 <uart_esp32_dispatch+0x3e8>
 800ec90:	08015e70 	.word	0x08015e70
 800ec94:	08015e84 	.word	0x08015e84
 800ec98:	0801680c 	.word	0x0801680c
                    Screen_data_t *data_log = malloc(sizeof(Screen_data_t));
 800ec9c:	2008      	movs	r0, #8
 800ec9e:	f002 f9d3 	bl	8011048 <malloc>
 800eca2:	4603      	mov	r3, r0
 800eca4:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
                    data_log->data = malloc(RX_ESP32->len);
 800eca8:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f002 f9ca 	bl	8011048 <malloc>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800ecbc:	601a      	str	r2, [r3, #0]
                    memcpy(data_log->data,&RX_ESP32->data[2],RX_ESP32->len - 1);
 800ecbe:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800ecc2:	6818      	ldr	r0, [r3, #0]
 800ecc4:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	1c99      	adds	r1, r3, #2
 800eccc:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	3b01      	subs	r3, #1
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	f004 fb44 	bl	8013362 <memcpy>
                    if (_Screen.data_log.is_first) {
 800ecda:	4ba6      	ldr	r3, [pc, #664]	@ (800ef74 <uart_esp32_dispatch+0x5f4>)
 800ecdc:	f893 393e 	ldrb.w	r3, [r3, #2366]	@ 0x93e
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d02c      	beq.n	800ed3e <uart_esp32_dispatch+0x3be>
                    	_Screen.data_log.is_first = false;
 800ece4:	4ba3      	ldr	r3, [pc, #652]	@ (800ef74 <uart_esp32_dispatch+0x5f4>)
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 293e 	strb.w	r2, [r3, #2366]	@ 0x93e
                        splitHistoryData(&RX_ESP32->data[2], firstRecord, secondRecord);
 800ecec:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	3302      	adds	r3, #2
 800ecf4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ecf8:	f107 010c 	add.w	r1, r7, #12
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f000 f941 	bl	800ef84 <splitHistoryData>
                        memset(_Screen.data_log.pre_data,0,sizeof(_Screen.data_log.pre_data));
 800ed02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ed06:	2100      	movs	r1, #0
 800ed08:	489b      	ldr	r0, [pc, #620]	@ (800ef78 <uart_esp32_dispatch+0x5f8>)
 800ed0a:	f004 f9d5 	bl	80130b8 <memset>
                        strcpy(_Screen.data_log.next_data, secondRecord);     
 800ed0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ed12:	4619      	mov	r1, r3
 800ed14:	4899      	ldr	r0, [pc, #612]	@ (800ef7c <uart_esp32_dispatch+0x5fc>)
 800ed16:	f004 fb0e 	bl	8013336 <strcpy>
                        strcpy(_Screen.data_log.cur_data, firstRecord); 
 800ed1a:	f107 030c 	add.w	r3, r7, #12
 800ed1e:	4619      	mov	r1, r3
 800ed20:	4897      	ldr	r0, [pc, #604]	@ (800ef80 <uart_esp32_dispatch+0x600>)
 800ed22:	f004 fb08 	bl	8013336 <strcpy>
                        DWIN_SetText((Dwin_t *)&_Screen,VP_Data_Log,_Screen.data_log.cur_data,strlen(_Screen.data_log.cur_data));
 800ed26:	4896      	ldr	r0, [pc, #600]	@ (800ef80 <uart_esp32_dispatch+0x600>)
 800ed28:	f7f1 fa1c 	bl	8000164 <strlen>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	4a93      	ldr	r2, [pc, #588]	@ (800ef80 <uart_esp32_dispatch+0x600>)
 800ed32:	f44f 4119 	mov.w	r1, #39168	@ 0x9900
 800ed36:	488f      	ldr	r0, [pc, #572]	@ (800ef74 <uart_esp32_dispatch+0x5f4>)
 800ed38:	f000 fcfc 	bl	800f734 <DWIN_SetText>
                default : break;
 800ed3c:	e013      	b.n	800ed66 <uart_esp32_dispatch+0x3e6>
                        if (_Screen.data_log.reading_type == READING_NEXT) {
 800ed3e:	4b8d      	ldr	r3, [pc, #564]	@ (800ef74 <uart_esp32_dispatch+0x5f4>)
 800ed40:	f893 393d 	ldrb.w	r3, [r3, #2365]	@ 0x93d
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d107      	bne.n	800ed58 <uart_esp32_dispatch+0x3d8>
                            strcpy(_Screen.data_log.next_data, data_log->data); 
 800ed48:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4619      	mov	r1, r3
 800ed50:	488a      	ldr	r0, [pc, #552]	@ (800ef7c <uart_esp32_dispatch+0x5fc>)
 800ed52:	f004 faf0 	bl	8013336 <strcpy>
                default : break;
 800ed56:	e006      	b.n	800ed66 <uart_esp32_dispatch+0x3e6>
                            strcpy(_Screen.data_log.pre_data, data_log->data);   
 800ed58:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4619      	mov	r1, r3
 800ed60:	4885      	ldr	r0, [pc, #532]	@ (800ef78 <uart_esp32_dispatch+0x5f8>)
 800ed62:	f004 fae8 	bl	8013336 <strcpy>
                default : break;
 800ed66:	bf00      	nop

                // check freee RX_ESP32
            } 

            if (pOS_task->tail_index_rx == 0) {
 800ed68:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ed6c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10e      	bne.n	800ed98 <uart_esp32_dispatch+0x418>
                    pOS_task->tail_index_rx = pOS_task->end_rx;
 800ed7a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ed7e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800ed88:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ed8c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800ed96:	e00f      	b.n	800edb8 <uart_esp32_dispatch+0x438>
                } else {
                    --pOS_task->tail_index_rx;
 800ed98:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ed9c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800eda6:	3b01      	subs	r3, #1
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800edae:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                } 
            --pOS_task->nUsed_rx;
 800edb8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800edbc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800edc6:	3b01      	subs	r3, #1
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800edce:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            pOS_task->is_rx = false;
 800edd8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eddc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            /* check buff */
            if (pOS_task->nUsed_rx > 0 ) {
 800ede8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800edec:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d012      	beq.n	800ee20 <uart_esp32_dispatch+0x4a0>
                pOS_task->is_rx = true;
 800edfa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800edfe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2201      	movs	r2, #1
 800ee06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                OS_TimeEvt_Set(&pOS_task->te_wait_rx,200,0); /* run only 1 time */
 800ee0a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ee0e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	3338      	adds	r3, #56	@ 0x38
 800ee16:	2200      	movs	r2, #0
 800ee18:	21c8      	movs	r1, #200	@ 0xc8
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f001 ff26 	bl	8010c6c <OS_TimeEvt_Set>
            }

            if (RX_ESP32->data != NULL) free(RX_ESP32->data);
 800ee20:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d005      	beq.n	800ee36 <uart_esp32_dispatch+0x4b6>
 800ee2a:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f002 f911 	bl	8011058 <free>
            free(RX_ESP32);
 800ee36:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800ee3a:	f002 f90d 	bl	8011058 <free>
        } break;
 800ee3e:	e094      	b.n	800ef6a <uart_esp32_dispatch+0x5ea>
        case ESP32_TX_TIMEOUT : {
            uart_esp32_t *data_send_esp32 = pOS_task->uart_esp32_buf_tx[pOS_task->tail_index_tx];
 800ee40:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ee44:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee4c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ee50:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	4413      	add	r3, r2
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c

            HAL_UART_Transmit(pOS_task->pUart,data_send_esp32->data,data_send_esp32->len,1000);
 800ee64:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ee68:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	69d8      	ldr	r0, [r3, #28]
 800ee70:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800ee74:	6819      	ldr	r1, [r3, #0]
 800ee76:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ee82:	f7f7 fb27 	bl	80064d4 <HAL_UART_Transmit>
            
            if (pOS_task->tail_index_tx == 0) {
 800ee86:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ee8a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d10e      	bne.n	800eeb6 <uart_esp32_dispatch+0x536>
                    pOS_task->tail_index_tx = pOS_task->end_tx;
 800ee98:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ee9c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800eea6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eeaa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eeb4:	e00f      	b.n	800eed6 <uart_esp32_dispatch+0x556>
                } else {
                    --pOS_task->tail_index_tx;
 800eeb6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eeba:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eec4:	3b01      	subs	r3, #1
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eecc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
                } 
            --pOS_task->nUsed_tx;
 800eed6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eeda:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800eee4:	3b01      	subs	r3, #1
 800eee6:	b2da      	uxtb	r2, r3
 800eee8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eeec:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            pOS_task->is_tx = false;
 800eef6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800eefa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            /* check buff */
            if (pOS_task->nUsed_tx > 0 ) {
 800ef06:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ef0a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d013      	beq.n	800ef40 <uart_esp32_dispatch+0x5c0>
                pOS_task->is_tx = true;
 800ef18:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ef1c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                OS_TimeEvt_Set(&pOS_task->te_wait_tx,2000,0); /* run only 1 time */
 800ef28:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800ef2c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	338c      	adds	r3, #140	@ 0x8c
 800ef34:	2200      	movs	r2, #0
 800ef36:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f001 fe96 	bl	8010c6c <OS_TimeEvt_Set>
            }

            if (data_send_esp32->data != NULL) free(data_send_esp32->data);
 800ef40:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d005      	beq.n	800ef56 <uart_esp32_dispatch+0x5d6>
 800ef4a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f002 f881 	bl	8011058 <free>
            free(data_send_esp32);
 800ef56:	f8d7 027c 	ldr.w	r0, [r7, #636]	@ 0x27c
 800ef5a:	f002 f87d 	bl	8011058 <free>
        } break;
 800ef5e:	e004      	b.n	800ef6a <uart_esp32_dispatch+0x5ea>

        default: break;
 800ef60:	bf00      	nop
 800ef62:	e002      	b.n	800ef6a <uart_esp32_dispatch+0x5ea>
        } break;
 800ef64:	bf00      	nop
 800ef66:	e000      	b.n	800ef6a <uart_esp32_dispatch+0x5ea>
        } break;
 800ef68:	bf00      	nop
    }
}
 800ef6a:	bf00      	nop
 800ef6c:	f507 7721 	add.w	r7, r7, #644	@ 0x284
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd90      	pop	{r4, r7, pc}
 800ef74:	20000e6c 	.word	0x20000e6c
 800ef78:	20001425 	.word	0x20001425
 800ef7c:	2000167d 	.word	0x2000167d
 800ef80:	20001551 	.word	0x20001551

0800ef84 <splitHistoryData>:

void splitHistoryData(char* receivedData, char* firstRecord, char* secondRecord) {
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b088      	sub	sp, #32
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	607a      	str	r2, [r7, #4]
    char* pos = receivedData;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	61fb      	str	r3, [r7, #28]
    char* separator = NULL;
 800ef94:	2300      	movs	r3, #0
 800ef96:	61bb      	str	r3, [r7, #24]
    
    // Find the second occurrence of date pattern
    while ((pos = strchr(pos + 1, '|')) != NULL) {
 800ef98:	e01b      	b.n	800efd2 <splitHistoryData+0x4e>
        // Check if next characters look like date (digit/digit/)
        if (pos[1] >= '0' && pos[1] <= '9' && 
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	2b2f      	cmp	r3, #47	@ 0x2f
 800efa2:	d916      	bls.n	800efd2 <splitHistoryData+0x4e>
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	3301      	adds	r3, #1
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	2b39      	cmp	r3, #57	@ 0x39
 800efac:	d811      	bhi.n	800efd2 <splitHistoryData+0x4e>
            pos[2] >= '0' && pos[2] <= '9' && 
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	3302      	adds	r3, #2
 800efb2:	781b      	ldrb	r3, [r3, #0]
        if (pos[1] >= '0' && pos[1] <= '9' && 
 800efb4:	2b2f      	cmp	r3, #47	@ 0x2f
 800efb6:	d90c      	bls.n	800efd2 <splitHistoryData+0x4e>
            pos[2] >= '0' && pos[2] <= '9' && 
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	3302      	adds	r3, #2
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	2b39      	cmp	r3, #57	@ 0x39
 800efc0:	d807      	bhi.n	800efd2 <splitHistoryData+0x4e>
            pos[3] == '/') {
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	3303      	adds	r3, #3
 800efc6:	781b      	ldrb	r3, [r3, #0]
            pos[2] >= '0' && pos[2] <= '9' && 
 800efc8:	2b2f      	cmp	r3, #47	@ 0x2f
 800efca:	d102      	bne.n	800efd2 <splitHistoryData+0x4e>
            separator = pos;
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	61bb      	str	r3, [r7, #24]
            break;
 800efd0:	e009      	b.n	800efe6 <splitHistoryData+0x62>
    while ((pos = strchr(pos + 1, '|')) != NULL) {
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	3301      	adds	r3, #1
 800efd6:	217c      	movs	r1, #124	@ 0x7c
 800efd8:	4618      	mov	r0, r3
 800efda:	f004 f884 	bl	80130e6 <strchr>
 800efde:	61f8      	str	r0, [r7, #28]
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1d9      	bne.n	800ef9a <splitHistoryData+0x16>
        }
    }
    
    if (separator != NULL) {
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d015      	beq.n	800f018 <splitHistoryData+0x94>
        int firstLength = separator - receivedData;
 800efec:	69ba      	ldr	r2, [r7, #24]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	1ad3      	subs	r3, r2, r3
 800eff2:	617b      	str	r3, [r7, #20]
        strncpy(firstRecord, receivedData, firstLength);
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	461a      	mov	r2, r3
 800eff8:	68f9      	ldr	r1, [r7, #12]
 800effa:	68b8      	ldr	r0, [r7, #8]
 800effc:	f004 f8a5 	bl	801314a <strncpy>
        firstRecord[firstLength] = '\0';
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	68ba      	ldr	r2, [r7, #8]
 800f004:	4413      	add	r3, r2
 800f006:	2200      	movs	r2, #0
 800f008:	701a      	strb	r2, [r3, #0]
        
        strcpy(secondRecord, separator + 1);
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	3301      	adds	r3, #1
 800f00e:	4619      	mov	r1, r3
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f004 f990 	bl	8013336 <strcpy>
    } else {
        strcpy(firstRecord, receivedData);
        secondRecord[0] = '\0';
    }
}
 800f016:	e006      	b.n	800f026 <splitHistoryData+0xa2>
        strcpy(firstRecord, receivedData);
 800f018:	68f9      	ldr	r1, [r7, #12]
 800f01a:	68b8      	ldr	r0, [r7, #8]
 800f01c:	f004 f98b 	bl	8013336 <strcpy>
        secondRecord[0] = '\0';
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	701a      	strb	r2, [r3, #0]
}
 800f026:	bf00      	nop
 800f028:	3720      	adds	r7, #32
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
	...

0800f030 <BlinkyTest_app_init>:
uint8_t num_ic = 1;
char uart_string[50];
uint32_t uart_num_test;

/* call in main file to initialization Active object of app using */
void BlinkyTest_app_init(void) {
 800f030:	b580      	push	{r7, lr}
 800f032:	af00      	add	r7, sp, #0
    BlinkyTest_ctor(&Blinky_instance);
 800f034:	4802      	ldr	r0, [pc, #8]	@ (800f040 <BlinkyTest_app_init+0x10>)
 800f036:	f000 f805 	bl	800f044 <BlinkyTest_ctor>
//    data_write.mem_addr = START_ADDR_PROGRAM_TEST_X(1);


    // data_uart.data = malloc(50);
//    uart_num_test = 0;
}
 800f03a:	bf00      	nop
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	20001b74 	.word	0x20001b74

0800f044 <BlinkyTest_ctor>:


void BlinkyTest_ctor(Test_Blinky_OS * const pAO) {
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
    /* Init task */
    OS_task_init(&pAO->task,(OS_handler)&BlinkyTest_init,(OS_handler)&BlinkyTest_Dispatch);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4a0f      	ldr	r2, [pc, #60]	@ (800f08c <BlinkyTest_ctor+0x48>)
 800f050:	490f      	ldr	r1, [pc, #60]	@ (800f090 <BlinkyTest_ctor+0x4c>)
 800f052:	4618      	mov	r0, r3
 800f054:	f001 fd14 	bl	8010a80 <OS_task_init>

    /* init time os if using */
    OS_TimeEvt_init(&pAO->te1,TIMEOUT1_SIG,&pAO->task);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	331c      	adds	r3, #28
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	2100      	movs	r1, #0
 800f060:	4618      	mov	r0, r3
 800f062:	f001 fddd 	bl	8010c20 <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te2,TIMEOUT2_SIG,&pAO->task);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	3370      	adds	r3, #112	@ 0x70
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	2101      	movs	r1, #1
 800f06e:	4618      	mov	r0, r3
 800f070:	f001 fdd6 	bl	8010c20 <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te_buzzer,TIMEOUT_BUZZER,&pAO->task);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	33c4      	adds	r3, #196	@ 0xc4
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	2108      	movs	r1, #8
 800f07c:	4618      	mov	r0, r3
 800f07e:	f001 fdcf 	bl	8010c20 <OS_TimeEvt_init>
    // OS_TimeEvt_init(&pAO->te_eeprom_write,WRITE_PROGRAM_TEST,&pAO->task);
    // OS_TimeEvt_init(&pAO->te_eeprom_read,READ_ONE_PROGRAM_TEST,&pAO->task);
//    OS_TimeEvt_init(&pAO->te_send_data,TEST_SEND_DATA_ESP32,&pAO->task);
}
 800f082:	bf00      	nop
 800f084:	3708      	adds	r7, #8
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	0800f0d1 	.word	0x0800f0d1
 800f090:	0800f095 	.word	0x0800f095

0800f094 <BlinkyTest_init>:

/* The init function of app task (optional) */
void BlinkyTest_init(Test_Blinky_OS * const pOS_task, OS_event_t const * const pEvent) {
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
    
    /* init time for generate event */
    OS_TimeEvt_Set(&pOS_task->te1,
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	331c      	adds	r3, #28
 800f0a2:	22c8      	movs	r2, #200	@ 0xc8
 800f0a4:	2101      	movs	r1, #1
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f001 fde0 	bl	8010c6c <OS_TimeEvt_Set>
    1U,
    200);

    OS_TimeEvt_Set(&pOS_task->te2,
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	3370      	adds	r3, #112	@ 0x70
 800f0b0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800f0b4:	2165      	movs	r1, #101	@ 0x65
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f001 fdd8 	bl	8010c6c <OS_TimeEvt_Set>
    1U + 100,
    300);

    OS_TimeEvt_Stop(&pOS_task->te_buzzer);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	33c4      	adds	r3, #196	@ 0xc4
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f001 fdea 	bl	8010c9a <OS_TimeEvt_Stop>
    /* if don't using this function */
    /*
    * UNSED(pOS_task);
    * UNSED(pEvent);
    */
}
 800f0c6:	bf00      	nop
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
	...

0800f0d0 <BlinkyTest_Dispatch>:

void BlinkyTest_Dispatch(Test_Blinky_OS *const pOS_task, OS_event_t const * const pEvent) {
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	2b09      	cmp	r3, #9
 800f0e0:	d84d      	bhi.n	800f17e <BlinkyTest_Dispatch+0xae>
 800f0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f0e8 <BlinkyTest_Dispatch+0x18>)
 800f0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e8:	0800f111 	.word	0x0800f111
 800f0ec:	0800f11d 	.word	0x0800f11d
 800f0f0:	0800f17f 	.word	0x0800f17f
 800f0f4:	0800f17f 	.word	0x0800f17f
 800f0f8:	0800f17f 	.word	0x0800f17f
 800f0fc:	0800f17f 	.word	0x0800f17f
 800f100:	0800f17f 	.word	0x0800f17f
 800f104:	0800f17f 	.word	0x0800f17f
 800f108:	0800f129 	.word	0x0800f129
 800f10c:	0800f167 	.word	0x0800f167
        case TIMEOUT1_SIG : {
            /* Turn on led */
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800f110:	2201      	movs	r2, #1
 800f112:	2102      	movs	r1, #2
 800f114:	481d      	ldr	r0, [pc, #116]	@ (800f18c <BlinkyTest_Dispatch+0xbc>)
 800f116:	f7f3 ff29 	bl	8002f6c <HAL_GPIO_WritePin>
            // printf("Turn on led\n");
        } break;
 800f11a:	e033      	b.n	800f184 <BlinkyTest_Dispatch+0xb4>
        case TIMEOUT2_SIG : {
            /* Turn off led */
        	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800f11c:	2200      	movs	r2, #0
 800f11e:	2102      	movs	r1, #2
 800f120:	481a      	ldr	r0, [pc, #104]	@ (800f18c <BlinkyTest_Dispatch+0xbc>)
 800f122:	f7f3 ff23 	bl	8002f6c <HAL_GPIO_WritePin>
            // printf("Turn off led\n");
        } break;
 800f126:	e02d      	b.n	800f184 <BlinkyTest_Dispatch+0xb4>
        case TIMEOUT_BUZZER : {
            HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_8);
 800f128:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f12c:	4817      	ldr	r0, [pc, #92]	@ (800f18c <BlinkyTest_Dispatch+0xbc>)
 800f12e:	f7f3 ff35 	bl	8002f9c <HAL_GPIO_TogglePin>
            if (pOS_task->count_buzzer++ >=8) {
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f138:	1c5a      	adds	r2, r3, #1
 800f13a:	b2d1      	uxtb	r1, r2
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	f882 1118 	strb.w	r1, [r2, #280]	@ 0x118
 800f142:	2b07      	cmp	r3, #7
 800f144:	d91d      	bls.n	800f182 <BlinkyTest_Dispatch+0xb2>
            	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, GPIO_PIN_RESET);
 800f146:	2200      	movs	r2, #0
 800f148:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f14c:	480f      	ldr	r0, [pc, #60]	@ (800f18c <BlinkyTest_Dispatch+0xbc>)
 800f14e:	f7f3 ff0d 	bl	8002f6c <HAL_GPIO_WritePin>
                OS_TimeEvt_Stop(&pOS_task->te_buzzer);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	33c4      	adds	r3, #196	@ 0xc4
 800f156:	4618      	mov	r0, r3
 800f158:	f001 fd9f 	bl	8010c9a <OS_TimeEvt_Stop>
                pOS_task->count_buzzer = 0;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
            }
        } break;
 800f164:	e00d      	b.n	800f182 <BlinkyTest_Dispatch+0xb2>
        case BEGIN_BUZZER : {
        	pOS_task->count_buzzer = 0;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2200      	movs	r2, #0
 800f16a:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
            OS_TimeEvt_Set(&pOS_task->te_buzzer,2,200);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	33c4      	adds	r3, #196	@ 0xc4
 800f172:	22c8      	movs	r2, #200	@ 0xc8
 800f174:	2102      	movs	r1, #2
 800f176:	4618      	mov	r0, r3
 800f178:	f001 fd78 	bl	8010c6c <OS_TimeEvt_Set>
            // data_send_t *data_receive = (data_send_t *)(get_data_dynamic_event(pEvent));
            // uint32_t string_len = data_receive->string_len;
            // char print_string[string_len+1];
            // strcpy(print_string,(char *)data_receive->string_post);
//            printf("Data receive: %s %ld\n",print_string,data_receive->data_post);
        } break;
 800f17c:	e002      	b.n	800f184 <BlinkyTest_Dispatch+0xb4>
            // uart_num_test++;
            // sprintf((char *)data_uart.data,"%s: %ld\n","The String Send to ESP32",uart_num_test);
            // data_uart.len = strlen((char *)data_uart.data);
            // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_uart,sizeof(uart_buf));
        } break;
        default: break;
 800f17e:	bf00      	nop
 800f180:	e000      	b.n	800f184 <BlinkyTest_Dispatch+0xb4>
        } break;
 800f182:	bf00      	nop
    }
}
 800f184:	bf00      	nop
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	40010800 	.word	0x40010800

0800f190 <AT24Cxx_Init>:
#include <stdio.h>
#include <stdint.h>

/* Private function prototype */

AT24Cxx_Status AT24Cxx_Init(AT24Cxx_t *pDev, uint8_t dev_address, I2C_HandleTypeDef *dev_i2c) {
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	460b      	mov	r3, r1
 800f19a:	607a      	str	r2, [r7, #4]
 800f19c:	72fb      	strb	r3, [r7, #11]
    pDev->i2c_port = dev_i2c;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	601a      	str	r2, [r3, #0]
    pDev->dev_address = dev_address << 1;
 800f1a4:	7afb      	ldrb	r3, [r7, #11]
 800f1a6:	005b      	lsls	r3, r3, #1
 800f1a8:	b2da      	uxtb	r2, r3
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	711a      	strb	r2, [r3, #4]
    /* Test communication */
    //uint8_t test_buf[1] = {0};
    if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 1, 100) == HAL_OK) {
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6818      	ldr	r0, [r3, #0]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	791b      	ldrb	r3, [r3, #4]
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	2364      	movs	r3, #100	@ 0x64
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	f7f4 fc7a 	bl	8003ab4 <HAL_I2C_IsDeviceReady>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d101      	bne.n	800f1ca <AT24Cxx_Init+0x3a>
        return AT24Cxx_Init_OK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	e000      	b.n	800f1cc <AT24Cxx_Init+0x3c>
    }
    return AT24Cxx_Init_Fail;
 800f1ca:	2301      	movs	r3, #1
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3710      	adds	r7, #16
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <AT24Cxx_write_buffer>:
    } else {
        return AT24Cxx_Error_write;
    }
}

AT24Cxx_Status AT24Cxx_write_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b086      	sub	sp, #24
 800f1d8:	af02      	add	r7, sp, #8
 800f1da:	60f8      	str	r0, [r7, #12]
 800f1dc:	607a      	str	r2, [r7, #4]
 800f1de:	461a      	mov	r2, r3
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	817b      	strh	r3, [r7, #10]
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	813b      	strh	r3, [r7, #8]
    /* Check valid size buffer and address */
    if (mem_addr+buf_length < AT24C256_MAX_ADDR && buf_length < AT24C256_PG_SIZE) {
 800f1e8:	897a      	ldrh	r2, [r7, #10]
 800f1ea:	893b      	ldrh	r3, [r7, #8]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	dc11      	bgt.n	800f21a <AT24Cxx_write_buffer+0x46>
 800f1f6:	893b      	ldrh	r3, [r7, #8]
 800f1f8:	2b3f      	cmp	r3, #63	@ 0x3f
 800f1fa:	d80e      	bhi.n	800f21a <AT24Cxx_write_buffer+0x46>
        HAL_I2C_Mem_Write_IT(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,buf_length);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6818      	ldr	r0, [r3, #0]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	791b      	ldrb	r3, [r3, #4]
 800f204:	4619      	mov	r1, r3
 800f206:	897a      	ldrh	r2, [r7, #10]
 800f208:	893b      	ldrh	r3, [r7, #8]
 800f20a:	9301      	str	r3, [sp, #4]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	9300      	str	r3, [sp, #0]
 800f210:	2310      	movs	r3, #16
 800f212:	f7f4 fba3 	bl	800395c <HAL_I2C_Mem_Write_IT>
        return AT24Cxx_OK;
 800f216:	2302      	movs	r3, #2
 800f218:	e000      	b.n	800f21c <AT24Cxx_write_buffer+0x48>
    } else {
        return AT24Cxx_Error_write;
 800f21a:	2303      	movs	r3, #3
    }
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3710      	adds	r7, #16
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <AT24Cxx_write_buffer_bloking>:

AT24Cxx_Status AT24Cxx_write_buffer_bloking(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 800f224:	b5b0      	push	{r4, r5, r7, lr}
 800f226:	b08a      	sub	sp, #40	@ 0x28
 800f228:	af04      	add	r7, sp, #16
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	607a      	str	r2, [r7, #4]
 800f22e:	461a      	mov	r2, r3
 800f230:	460b      	mov	r3, r1
 800f232:	817b      	strh	r3, [r7, #10]
 800f234:	4613      	mov	r3, r2
 800f236:	813b      	strh	r3, [r7, #8]
    uint8_t page_remaining = AT24C256_PG_SIZE - (mem_addr % AT24C256_PG_SIZE); /* num bytes written in current page from address */
 800f238:	897b      	ldrh	r3, [r7, #10]
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f240:	b2db      	uxtb	r3, r3
 800f242:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800f246:	75fb      	strb	r3, [r7, #23]

    if (buf_length < page_remaining) page_remaining = buf_length;
 800f248:	7dfb      	ldrb	r3, [r7, #23]
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	893a      	ldrh	r2, [r7, #8]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d201      	bcs.n	800f256 <AT24Cxx_write_buffer_bloking+0x32>
 800f252:	893b      	ldrh	r3, [r7, #8]
 800f254:	75fb      	strb	r3, [r7, #23]
    uint8_t page_write = (buf_length - page_remaining) / AT24C256_PG_SIZE;   /* num pages can write full */
 800f256:	893a      	ldrh	r2, [r7, #8]
 800f258:	7dfb      	ldrb	r3, [r7, #23]
 800f25a:	1ad3      	subs	r3, r2, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	da00      	bge.n	800f262 <AT24Cxx_write_buffer_bloking+0x3e>
 800f260:	333f      	adds	r3, #63	@ 0x3f
 800f262:	119b      	asrs	r3, r3, #6
 800f264:	757b      	strb	r3, [r7, #21]
    uint8_t byte_remaining = (buf_length - page_remaining) % AT24C256_PG_SIZE; /* num bytes remain after write all full page */
 800f266:	893a      	ldrh	r2, [r7, #8]
 800f268:	7dfb      	ldrb	r3, [r7, #23]
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	425a      	negs	r2, r3
 800f26e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f272:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f276:	bf58      	it	pl
 800f278:	4253      	negpl	r3, r2
 800f27a:	753b      	strb	r3, [r7, #20]

    /* write in current page */
    if (page_remaining > 0x00 && (mem_addr + page_remaining) < AT24C256_MAX_ADDR) {
 800f27c:	7dfb      	ldrb	r3, [r7, #23]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d025      	beq.n	800f2ce <AT24Cxx_write_buffer_bloking+0xaa>
 800f282:	897a      	ldrh	r2, [r7, #10]
 800f284:	7dfb      	ldrb	r3, [r7, #23]
 800f286:	4413      	add	r3, r2
 800f288:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f28c:	4293      	cmp	r3, r2
 800f28e:	dc1e      	bgt.n	800f2ce <AT24Cxx_write_buffer_bloking+0xaa>
        while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,page_remaining,AT24C256_I2C_TIMOUT) != HAL_OK);
 800f290:	bf00      	nop
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6818      	ldr	r0, [r3, #0]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	791b      	ldrb	r3, [r3, #4]
 800f29a:	461c      	mov	r4, r3
 800f29c:	7dfb      	ldrb	r3, [r7, #23]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	897a      	ldrh	r2, [r7, #10]
 800f2a2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800f2a6:	9102      	str	r1, [sp, #8]
 800f2a8:	9301      	str	r3, [sp, #4]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	9300      	str	r3, [sp, #0]
 800f2ae:	2310      	movs	r3, #16
 800f2b0:	4621      	mov	r1, r4
 800f2b2:	f7f3 ffe5 	bl	8003280 <HAL_I2C_Mem_Write>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1ea      	bne.n	800f292 <AT24Cxx_write_buffer_bloking+0x6e>
        if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6818      	ldr	r0, [r3, #0]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	791b      	ldrb	r3, [r3, #4]
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	2305      	movs	r3, #5
 800f2c8:	2264      	movs	r2, #100	@ 0x64
 800f2ca:	f7f4 fbf3 	bl	8003ab4 <HAL_I2C_IsDeviceReady>
            // printf("transmit i2c success\n");
        }
    }

    /* write full page */
    for (uint8_t cur_page = 0; cur_page < page_write; cur_page ++) {
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	75bb      	strb	r3, [r7, #22]
 800f2d2:	e042      	b.n	800f35a <AT24Cxx_write_buffer_bloking+0x136>
        if ((mem_addr + page_remaining+ (cur_page * AT24C256_PG_SIZE)) > 0x00 && (mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)) < AT24C256_MAX_ADDR) {
 800f2d4:	897a      	ldrh	r2, [r7, #10]
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	441a      	add	r2, r3
 800f2da:	7dbb      	ldrb	r3, [r7, #22]
 800f2dc:	019b      	lsls	r3, r3, #6
 800f2de:	4413      	add	r3, r2
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	dd37      	ble.n	800f354 <AT24Cxx_write_buffer_bloking+0x130>
 800f2e4:	897a      	ldrh	r2, [r7, #10]
 800f2e6:	7dfb      	ldrb	r3, [r7, #23]
 800f2e8:	441a      	add	r2, r3
 800f2ea:	7dbb      	ldrb	r3, [r7, #22]
 800f2ec:	019b      	lsls	r3, r3, #6
 800f2ee:	4413      	add	r3, r2
 800f2f0:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	dc2d      	bgt.n	800f354 <AT24Cxx_write_buffer_bloking+0x130>
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,(uint16_t)(mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)),
 800f2f8:	bf00      	nop
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6818      	ldr	r0, [r3, #0]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	791b      	ldrb	r3, [r3, #4]
 800f302:	461c      	mov	r4, r3
 800f304:	7dfb      	ldrb	r3, [r7, #23]
 800f306:	b29a      	uxth	r2, r3
 800f308:	897b      	ldrh	r3, [r7, #10]
 800f30a:	4413      	add	r3, r2
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	7dbb      	ldrb	r3, [r7, #22]
 800f310:	b29b      	uxth	r3, r3
 800f312:	019b      	lsls	r3, r3, #6
 800f314:	b29b      	uxth	r3, r3
 800f316:	4413      	add	r3, r2
 800f318:	b299      	uxth	r1, r3
                    I2C_MEMADD_SIZE_16BIT,
                    data_buf + page_remaining + (cur_page * AT24C256_PG_SIZE),
 800f31a:	7dfb      	ldrb	r3, [r7, #23]
 800f31c:	7dba      	ldrb	r2, [r7, #22]
 800f31e:	0192      	lsls	r2, r2, #6
 800f320:	4413      	add	r3, r2
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,(uint16_t)(mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)),
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	4413      	add	r3, r2
 800f326:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800f32a:	9202      	str	r2, [sp, #8]
 800f32c:	2240      	movs	r2, #64	@ 0x40
 800f32e:	9201      	str	r2, [sp, #4]
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	2310      	movs	r3, #16
 800f334:	460a      	mov	r2, r1
 800f336:	4621      	mov	r1, r4
 800f338:	f7f3 ffa2 	bl	8003280 <HAL_I2C_Mem_Write>
 800f33c:	4603      	mov	r3, r0
                    AT24C256_PG_SIZE,
                    AT24C256_I2C_TIMOUT) != HAL_OK);
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d1db      	bne.n	800f2fa <AT24Cxx_write_buffer_bloking+0xd6>
            if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	6818      	ldr	r0, [r3, #0]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	791b      	ldrb	r3, [r3, #4]
 800f34a:	4619      	mov	r1, r3
 800f34c:	2305      	movs	r3, #5
 800f34e:	2264      	movs	r2, #100	@ 0x64
 800f350:	f7f4 fbb0 	bl	8003ab4 <HAL_I2C_IsDeviceReady>
    for (uint8_t cur_page = 0; cur_page < page_write; cur_page ++) {
 800f354:	7dbb      	ldrb	r3, [r7, #22]
 800f356:	3301      	adds	r3, #1
 800f358:	75bb      	strb	r3, [r7, #22]
 800f35a:	7dba      	ldrb	r2, [r7, #22]
 800f35c:	7d7b      	ldrb	r3, [r7, #21]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d3b8      	bcc.n	800f2d4 <AT24Cxx_write_buffer_bloking+0xb0>
            }
        }
    }

    /* write bytes after write full page still remain */
    if (byte_remaining != 0) {
 800f362:	7d3b      	ldrb	r3, [r7, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d040      	beq.n	800f3ea <AT24Cxx_write_buffer_bloking+0x1c6>
        if ((mem_addr + page_remaining + (page_write * AT24C256_PG_SIZE)) > 0x00 && (mem_addr + page_remaining+ (page_write * AT24C256_PG_SIZE)) < AT24C256_MAX_ADDR) {
 800f368:	897a      	ldrh	r2, [r7, #10]
 800f36a:	7dfb      	ldrb	r3, [r7, #23]
 800f36c:	441a      	add	r2, r3
 800f36e:	7d7b      	ldrb	r3, [r7, #21]
 800f370:	019b      	lsls	r3, r3, #6
 800f372:	4413      	add	r3, r2
 800f374:	2b00      	cmp	r3, #0
 800f376:	dd38      	ble.n	800f3ea <AT24Cxx_write_buffer_bloking+0x1c6>
 800f378:	897a      	ldrh	r2, [r7, #10]
 800f37a:	7dfb      	ldrb	r3, [r7, #23]
 800f37c:	441a      	add	r2, r3
 800f37e:	7d7b      	ldrb	r3, [r7, #21]
 800f380:	019b      	lsls	r3, r3, #6
 800f382:	4413      	add	r3, r2
 800f384:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f388:	4293      	cmp	r3, r2
 800f38a:	dc2e      	bgt.n	800f3ea <AT24Cxx_write_buffer_bloking+0x1c6>
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 800f38c:	bf00      	nop
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6818      	ldr	r0, [r3, #0]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	791b      	ldrb	r3, [r3, #4]
 800f396:	461d      	mov	r5, r3
                    (uint16_t)(mem_addr + page_remaining + (page_write * AT24C256_PG_SIZE)),
 800f398:	7dfb      	ldrb	r3, [r7, #23]
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	897b      	ldrh	r3, [r7, #10]
 800f39e:	4413      	add	r3, r2
 800f3a0:	b29a      	uxth	r2, r3
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 800f3a2:	7d7b      	ldrb	r3, [r7, #21]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	019b      	lsls	r3, r3, #6
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	4413      	add	r3, r2
 800f3ac:	b299      	uxth	r1, r3
                    I2C_MEMADD_SIZE_16BIT,
                    data_buf + page_remaining + (page_write * AT24C256_PG_SIZE),
 800f3ae:	7dfb      	ldrb	r3, [r7, #23]
 800f3b0:	7d7a      	ldrb	r2, [r7, #21]
 800f3b2:	0192      	lsls	r2, r2, #6
 800f3b4:	4413      	add	r3, r2
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	7d3a      	ldrb	r2, [r7, #20]
 800f3bc:	b292      	uxth	r2, r2
 800f3be:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 800f3c2:	9402      	str	r4, [sp, #8]
 800f3c4:	9201      	str	r2, [sp, #4]
 800f3c6:	9300      	str	r3, [sp, #0]
 800f3c8:	2310      	movs	r3, #16
 800f3ca:	460a      	mov	r2, r1
 800f3cc:	4629      	mov	r1, r5
 800f3ce:	f7f3 ff57 	bl	8003280 <HAL_I2C_Mem_Write>
 800f3d2:	4603      	mov	r3, r0
                    byte_remaining,
                    AT24C256_I2C_TIMOUT) == HAL_OK) {
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d0da      	beq.n	800f38e <AT24Cxx_write_buffer_bloking+0x16a>
                    } 
            if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6818      	ldr	r0, [r3, #0]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	791b      	ldrb	r3, [r3, #4]
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	2305      	movs	r3, #5
 800f3e4:	2264      	movs	r2, #100	@ 0x64
 800f3e6:	f7f4 fb65 	bl	8003ab4 <HAL_I2C_IsDeviceReady>
                // printf("transmit i2c success\n");
            }
        }
    }
    HAL_Delay(10);
 800f3ea:	200a      	movs	r0, #10
 800f3ec:	f7f2 fbb6 	bl	8001b5c <HAL_Delay>
}
 800f3f0:	bf00      	nop
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3718      	adds	r7, #24
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bdb0      	pop	{r4, r5, r7, pc}

0800f3fa <AT24Cxx_read_buffer>:

AT24Cxx_Status AT24Cxx_read_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t *data_ret, uint16_t buf_length) {
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b088      	sub	sp, #32
 800f3fe:	af04      	add	r7, sp, #16
 800f400:	60f8      	str	r0, [r7, #12]
 800f402:	607a      	str	r2, [r7, #4]
 800f404:	461a      	mov	r2, r3
 800f406:	460b      	mov	r3, r1
 800f408:	817b      	strh	r3, [r7, #10]
 800f40a:	4613      	mov	r3, r2
 800f40c:	813b      	strh	r3, [r7, #8]
    if (mem_addr < AT24C256_MAX_ADDR) {
 800f40e:	897b      	ldrh	r3, [r7, #10]
 800f410:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f414:	4293      	cmp	r3, r2
 800f416:	d815      	bhi.n	800f444 <AT24Cxx_read_buffer+0x4a>
        while (HAL_I2C_Mem_Read(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_ret,buf_length,1000) != HAL_OK);
 800f418:	bf00      	nop
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	6818      	ldr	r0, [r3, #0]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	791b      	ldrb	r3, [r3, #4]
 800f422:	4619      	mov	r1, r3
 800f424:	897a      	ldrh	r2, [r7, #10]
 800f426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f42a:	9302      	str	r3, [sp, #8]
 800f42c:	893b      	ldrh	r3, [r7, #8]
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	2310      	movs	r3, #16
 800f436:	f7f4 f81d 	bl	8003474 <HAL_I2C_Mem_Read>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1ec      	bne.n	800f41a <AT24Cxx_read_buffer+0x20>
        return AT24Cxx_OK;
 800f440:	2302      	movs	r3, #2
 800f442:	e000      	b.n	800f446 <AT24Cxx_read_buffer+0x4c>
    } else {
        return AT24Cxx_Error_read;
 800f444:	2304      	movs	r3, #4
    }
}
 800f446:	4618      	mov	r0, r3
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <transposeArray>:

float String2Float(uint8_t *data_string, uint16_t size) {
    
}

void transposeArray(char *Dest, char *Src, uint8_t col, uint8_t row) {
 800f44e:	b480      	push	{r7}
 800f450:	b087      	sub	sp, #28
 800f452:	af00      	add	r7, sp, #0
 800f454:	60f8      	str	r0, [r7, #12]
 800f456:	60b9      	str	r1, [r7, #8]
 800f458:	4611      	mov	r1, r2
 800f45a:	461a      	mov	r2, r3
 800f45c:	460b      	mov	r3, r1
 800f45e:	71fb      	strb	r3, [r7, #7]
 800f460:	4613      	mov	r3, r2
 800f462:	71bb      	strb	r3, [r7, #6]
    for (int i = 0; i < col; i++) {
 800f464:	2300      	movs	r3, #0
 800f466:	617b      	str	r3, [r7, #20]
 800f468:	e020      	b.n	800f4ac <transposeArray+0x5e>
        for (int j = 0; j < row; j++) {
 800f46a:	2300      	movs	r3, #0
 800f46c:	613b      	str	r3, [r7, #16]
 800f46e:	e016      	b.n	800f49e <transposeArray+0x50>
            Dest[i * row + j] = Src[j * col + i];
 800f470:	79fb      	ldrb	r3, [r7, #7]
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	fb03 f202 	mul.w	r2, r3, r2
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	4413      	add	r3, r2
 800f47c:	461a      	mov	r2, r3
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	441a      	add	r2, r3
 800f482:	79bb      	ldrb	r3, [r7, #6]
 800f484:	6979      	ldr	r1, [r7, #20]
 800f486:	fb03 f101 	mul.w	r1, r3, r1
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	440b      	add	r3, r1
 800f48e:	4619      	mov	r1, r3
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	440b      	add	r3, r1
 800f494:	7812      	ldrb	r2, [r2, #0]
 800f496:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < row; j++) {
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	3301      	adds	r3, #1
 800f49c:	613b      	str	r3, [r7, #16]
 800f49e:	79bb      	ldrb	r3, [r7, #6]
 800f4a0:	693a      	ldr	r2, [r7, #16]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	dbe4      	blt.n	800f470 <transposeArray+0x22>
    for (int i = 0; i < col; i++) {
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	617b      	str	r3, [r7, #20]
 800f4ac:	79fb      	ldrb	r3, [r7, #7]
 800f4ae:	697a      	ldr	r2, [r7, #20]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	dbda      	blt.n	800f46a <transposeArray+0x1c>
        }
    }
}
 800f4b4:	bf00      	nop
 800f4b6:	bf00      	nop
 800f4b8:	371c      	adds	r7, #28
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bc80      	pop	{r7}
 800f4be:	4770      	bx	lr

0800f4c0 <DS3231_Init>:
#include "DS3231.h"

static uint8_t decToBcd(int val);
static int bcdToDec(uint8_t val);

DS3231_Status DS3231_Init(DS3231_t *pDS3231, I2C_HandleTypeDef *i2c, uint16_t dev_address) {
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	80fb      	strh	r3, [r7, #6]
    pDS3231->i2c_port = i2c;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	68ba      	ldr	r2, [r7, #8]
 800f4d2:	601a      	str	r2, [r3, #0]

    pDS3231->dev_address = dev_address << 1;
 800f4d4:	88fb      	ldrh	r3, [r7, #6]
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	b2da      	uxtb	r2, r3
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	711a      	strb	r2, [r3, #4]
    if (HAL_I2C_IsDeviceReady(pDS3231->i2c_port,pDS3231->dev_address,1,100) == HAL_OK) {
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	6818      	ldr	r0, [r3, #0]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	791b      	ldrb	r3, [r3, #4]
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	2364      	movs	r3, #100	@ 0x64
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	f7f4 fae1 	bl	8003ab4 <HAL_I2C_IsDeviceReady>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d104      	bne.n	800f502 <DS3231_Init+0x42>
    	printf("Init DS3231 Success\n");
 800f4f8:	4804      	ldr	r0, [pc, #16]	@ (800f50c <DS3231_Init+0x4c>)
 800f4fa:	f003 fc95 	bl	8012e28 <puts>
      return DS3231_Init_OK;
 800f4fe:	2300      	movs	r3, #0
 800f500:	e000      	b.n	800f504 <DS3231_Init+0x44>
    }
    return DS3231_Fail;
 800f502:	2301      	movs	r3, #1
}
 800f504:	4618      	mov	r0, r3
 800f506:	3710      	adds	r7, #16
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	08015e9c 	.word	0x08015e9c

0800f510 <DS3231_Read_time>:

DS3231_Status DS3231_Read_time(DS3231_t *pDS3231, uint8_t *data_read) {
 800f510:	b580      	push	{r7, lr}
 800f512:	b088      	sub	sp, #32
 800f514:	af04      	add	r7, sp, #16
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
    uint8_t get_time[7];
    if (HAL_I2C_Mem_Read(pDS3231->i2c_port, pDS3231->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6818      	ldr	r0, [r3, #0]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	791b      	ldrb	r3, [r3, #4]
 800f522:	4619      	mov	r1, r3
 800f524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f528:	9302      	str	r3, [sp, #8]
 800f52a:	2307      	movs	r3, #7
 800f52c:	9301      	str	r3, [sp, #4]
 800f52e:	f107 0308 	add.w	r3, r7, #8
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	2301      	movs	r3, #1
 800f536:	2200      	movs	r2, #0
 800f538:	f7f3 ff9c 	bl	8003474 <HAL_I2C_Mem_Read>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d001      	beq.n	800f546 <DS3231_Read_time+0x36>
      return DS3231_Fail;
 800f542:	2301      	movs	r3, #1
 800f544:	e03e      	b.n	800f5c4 <DS3231_Read_time+0xb4>
    }
	
  data_read[0] = bcdToDec(get_time[0]);
 800f546:	7a3b      	ldrb	r3, [r7, #8]
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 f8b5 	bl	800f6b8 <bcdToDec>
 800f54e:	4603      	mov	r3, r0
 800f550:	b2da      	uxtb	r2, r3
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	701a      	strb	r2, [r3, #0]
	data_read[1] = bcdToDec(get_time[1]);
 800f556:	7a7b      	ldrb	r3, [r7, #9]
 800f558:	4618      	mov	r0, r3
 800f55a:	f000 f8ad 	bl	800f6b8 <bcdToDec>
 800f55e:	4602      	mov	r2, r0
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	3301      	adds	r3, #1
 800f564:	b2d2      	uxtb	r2, r2
 800f566:	701a      	strb	r2, [r3, #0]
	data_read[2] = bcdToDec(get_time[2]);
 800f568:	7abb      	ldrb	r3, [r7, #10]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f000 f8a4 	bl	800f6b8 <bcdToDec>
 800f570:	4602      	mov	r2, r0
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	3302      	adds	r3, #2
 800f576:	b2d2      	uxtb	r2, r2
 800f578:	701a      	strb	r2, [r3, #0]
	data_read[3] = bcdToDec(get_time[3]);
 800f57a:	7afb      	ldrb	r3, [r7, #11]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f000 f89b 	bl	800f6b8 <bcdToDec>
 800f582:	4602      	mov	r2, r0
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	3303      	adds	r3, #3
 800f588:	b2d2      	uxtb	r2, r2
 800f58a:	701a      	strb	r2, [r3, #0]
	data_read[4] = bcdToDec(get_time[4]);
 800f58c:	7b3b      	ldrb	r3, [r7, #12]
 800f58e:	4618      	mov	r0, r3
 800f590:	f000 f892 	bl	800f6b8 <bcdToDec>
 800f594:	4602      	mov	r2, r0
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	3304      	adds	r3, #4
 800f59a:	b2d2      	uxtb	r2, r2
 800f59c:	701a      	strb	r2, [r3, #0]
	data_read[5] = bcdToDec(get_time[5]);
 800f59e:	7b7b      	ldrb	r3, [r7, #13]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f000 f889 	bl	800f6b8 <bcdToDec>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	3305      	adds	r3, #5
 800f5ac:	b2d2      	uxtb	r2, r2
 800f5ae:	701a      	strb	r2, [r3, #0]
	data_read[6] = bcdToDec(get_time[6]);
 800f5b0:	7bbb      	ldrb	r3, [r7, #14]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f000 f880 	bl	800f6b8 <bcdToDec>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	3306      	adds	r3, #6
 800f5be:	b2d2      	uxtb	r2, r2
 800f5c0:	701a      	strb	r2, [r3, #0]
  return DS3231_Write_OK;
 800f5c2:	2302      	movs	r3, #2
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3710      	adds	r7, #16
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <DS3231_Write_time>:

DS3231_Status DS3231_Write_time(DS3231_t *pDS3231,uint8_t sec, uint8_t min, uint8_t hour, uint8_t day, uint8_t month, uint8_t year) {
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b088      	sub	sp, #32
 800f5d0:	af04      	add	r7, sp, #16
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	4608      	mov	r0, r1
 800f5d6:	4611      	mov	r1, r2
 800f5d8:	461a      	mov	r2, r3
 800f5da:	4603      	mov	r3, r0
 800f5dc:	70fb      	strb	r3, [r7, #3]
 800f5de:	460b      	mov	r3, r1
 800f5e0:	70bb      	strb	r3, [r7, #2]
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	707b      	strb	r3, [r7, #1]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 800f5e6:	78fb      	ldrb	r3, [r7, #3]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f000 f841 	bl	800f670 <decToBcd>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 800f5f2:	78bb      	ldrb	r3, [r7, #2]
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f000 f83b 	bl	800f670 <decToBcd>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 800f5fe:	787b      	ldrb	r3, [r7, #1]
 800f600:	4618      	mov	r0, r3
 800f602:	f000 f835 	bl	800f670 <decToBcd>
 800f606:	4603      	mov	r3, r0
 800f608:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(7);
 800f60a:	2007      	movs	r0, #7
 800f60c:	f000 f830 	bl	800f670 <decToBcd>
 800f610:	4603      	mov	r3, r0
 800f612:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(day);
 800f614:	7e3b      	ldrb	r3, [r7, #24]
 800f616:	4618      	mov	r0, r3
 800f618:	f000 f82a 	bl	800f670 <decToBcd>
 800f61c:	4603      	mov	r3, r0
 800f61e:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 800f620:	7f3b      	ldrb	r3, [r7, #28]
 800f622:	4618      	mov	r0, r3
 800f624:	f000 f824 	bl	800f670 <decToBcd>
 800f628:	4603      	mov	r3, r0
 800f62a:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 800f62c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f630:	4618      	mov	r0, r3
 800f632:	f000 f81d 	bl	800f670 <decToBcd>
 800f636:	4603      	mov	r3, r0
 800f638:	73bb      	strb	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(pDS3231->i2c_port, pDS3231->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, set_time, 7, 1000) != HAL_OK) {
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6818      	ldr	r0, [r3, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	791b      	ldrb	r3, [r3, #4]
 800f642:	4619      	mov	r1, r3
 800f644:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f648:	9302      	str	r3, [sp, #8]
 800f64a:	2307      	movs	r3, #7
 800f64c:	9301      	str	r3, [sp, #4]
 800f64e:	f107 0308 	add.w	r3, r7, #8
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	2301      	movs	r3, #1
 800f656:	2200      	movs	r2, #0
 800f658:	f7f3 fe12 	bl	8003280 <HAL_I2C_Mem_Write>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d001      	beq.n	800f666 <DS3231_Write_time+0x9a>
    return DS3231_Fail;
 800f662:	2301      	movs	r3, #1
 800f664:	e000      	b.n	800f668 <DS3231_Write_time+0x9c>
  }
  return DS3231_Read_OK;
 800f666:	2303      	movs	r3, #3
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3710      	adds	r7, #16
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <decToBcd>:

// Convert normal decimal numbers to binary coded decimal
static uint8_t decToBcd(int val)
{
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a0e      	ldr	r2, [pc, #56]	@ (800f6b4 <decToBcd+0x44>)
 800f67c:	fb82 1203 	smull	r1, r2, r2, r3
 800f680:	1092      	asrs	r2, r2, #2
 800f682:	17db      	asrs	r3, r3, #31
 800f684:	1ad3      	subs	r3, r2, r3
 800f686:	b2db      	uxtb	r3, r3
 800f688:	011b      	lsls	r3, r3, #4
 800f68a:	b2d8      	uxtb	r0, r3
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	4b09      	ldr	r3, [pc, #36]	@ (800f6b4 <decToBcd+0x44>)
 800f690:	fb83 1302 	smull	r1, r3, r3, r2
 800f694:	1099      	asrs	r1, r3, #2
 800f696:	17d3      	asrs	r3, r2, #31
 800f698:	1ac9      	subs	r1, r1, r3
 800f69a:	460b      	mov	r3, r1
 800f69c:	009b      	lsls	r3, r3, #2
 800f69e:	440b      	add	r3, r1
 800f6a0:	005b      	lsls	r3, r3, #1
 800f6a2:	1ad1      	subs	r1, r2, r3
 800f6a4:	b2cb      	uxtb	r3, r1
 800f6a6:	4403      	add	r3, r0
 800f6a8:	b2db      	uxtb	r3, r3
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	370c      	adds	r7, #12
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bc80      	pop	{r7}
 800f6b2:	4770      	bx	lr
 800f6b4:	66666667 	.word	0x66666667

0800f6b8 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
static int bcdToDec(uint8_t val)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	4603      	mov	r3, r0
 800f6c0:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800f6c2:	79fb      	ldrb	r3, [r7, #7]
 800f6c4:	091b      	lsrs	r3, r3, #4
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	4613      	mov	r3, r2
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	4413      	add	r3, r2
 800f6d0:	005b      	lsls	r3, r3, #1
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	79fb      	ldrb	r3, [r7, #7]
 800f6d6:	f003 030f 	and.w	r3, r3, #15
 800f6da:	4413      	add	r3, r2
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	370c      	adds	r7, #12
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bc80      	pop	{r7}
 800f6e4:	4770      	bx	lr

0800f6e6 <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b086      	sub	sp, #24
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 800f6f2:	235a      	movs	r3, #90	@ 0x5a
 800f6f4:	733b      	strb	r3, [r7, #12]
 800f6f6:	23a5      	movs	r3, #165	@ 0xa5
 800f6f8:	737b      	strb	r3, [r7, #13]
 800f6fa:	2307      	movs	r3, #7
 800f6fc:	73bb      	strb	r3, [r7, #14]
 800f6fe:	2382      	movs	r3, #130	@ 0x82
 800f700:	73fb      	strb	r3, [r7, #15]
 800f702:	2300      	movs	r3, #0
 800f704:	743b      	strb	r3, [r7, #16]
 800f706:	2384      	movs	r3, #132	@ 0x84
 800f708:	747b      	strb	r3, [r7, #17]
 800f70a:	235a      	movs	r3, #90	@ 0x5a
 800f70c:	74bb      	strb	r3, [r7, #18]
 800f70e:	2301      	movs	r3, #1
 800f710:	74fb      	strb	r3, [r7, #19]
 800f712:	2300      	movs	r3, #0
 800f714:	753b      	strb	r3, [r7, #20]
 800f716:	78fb      	ldrb	r3, [r7, #3]
 800f718:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6818      	ldr	r0, [r3, #0]
 800f71e:	f107 010c 	add.w	r1, r7, #12
 800f722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f726:	220a      	movs	r2, #10
 800f728:	f7f6 fed4 	bl	80064d4 <HAL_UART_Transmit>
}
 800f72c:	bf00      	nop
 800f72e:	3718      	adds	r7, #24
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, char *textData, uint16_t datalen) {
 800f734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f738:	b08a      	sub	sp, #40	@ 0x28
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	60f8      	str	r0, [r7, #12]
 800f73e:	607a      	str	r2, [r7, #4]
 800f740:	461a      	mov	r2, r3
 800f742:	460b      	mov	r3, r1
 800f744:	817b      	strh	r3, [r7, #10]
 800f746:	4613      	mov	r3, r2
 800f748:	813b      	strh	r3, [r7, #8]
 800f74a:	466b      	mov	r3, sp
 800f74c:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 800f74e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f752:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 800f754:	893b      	ldrh	r3, [r7, #8]
 800f756:	f103 0608 	add.w	r6, r3, #8
 800f75a:	1e73      	subs	r3, r6, #1
 800f75c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f75e:	4632      	mov	r2, r6
 800f760:	2300      	movs	r3, #0
 800f762:	4690      	mov	r8, r2
 800f764:	4699      	mov	r9, r3
 800f766:	f04f 0200 	mov.w	r2, #0
 800f76a:	f04f 0300 	mov.w	r3, #0
 800f76e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f77a:	4632      	mov	r2, r6
 800f77c:	2300      	movs	r3, #0
 800f77e:	4614      	mov	r4, r2
 800f780:	461d      	mov	r5, r3
 800f782:	f04f 0200 	mov.w	r2, #0
 800f786:	f04f 0300 	mov.w	r3, #0
 800f78a:	00eb      	lsls	r3, r5, #3
 800f78c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f790:	00e2      	lsls	r2, r4, #3
 800f792:	4633      	mov	r3, r6
 800f794:	3307      	adds	r3, #7
 800f796:	08db      	lsrs	r3, r3, #3
 800f798:	00db      	lsls	r3, r3, #3
 800f79a:	ebad 0d03 	sub.w	sp, sp, r3
 800f79e:	466b      	mov	r3, sp
 800f7a0:	3300      	adds	r3, #0
 800f7a2:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800f7a4:	235a      	movs	r3, #90	@ 0x5a
 800f7a6:	753b      	strb	r3, [r7, #20]
 800f7a8:	23a5      	movs	r3, #165	@ 0xa5
 800f7aa:	757b      	strb	r3, [r7, #21]
 800f7ac:	893b      	ldrh	r3, [r7, #8]
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	3305      	adds	r3, #5
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	75bb      	strb	r3, [r7, #22]
 800f7b6:	2382      	movs	r3, #130	@ 0x82
 800f7b8:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800f7ba:	897b      	ldrh	r3, [r7, #10]
 800f7bc:	0a1b      	lsrs	r3, r3, #8
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800f7c2:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800f7c4:	897b      	ldrh	r3, [r7, #10]
 800f7c6:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800f7c8:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 800f7ca:	6a3b      	ldr	r3, [r7, #32]
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	f107 0314 	add.w	r3, r7, #20
 800f7d2:	6818      	ldr	r0, [r3, #0]
 800f7d4:	6010      	str	r0, [r2, #0]
 800f7d6:	889b      	ldrh	r3, [r3, #4]
 800f7d8:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 800f7da:	6a3b      	ldr	r3, [r7, #32]
 800f7dc:	3306      	adds	r3, #6
 800f7de:	893a      	ldrh	r2, [r7, #8]
 800f7e0:	6879      	ldr	r1, [r7, #4]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f003 fdbd 	bl	8013362 <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 800f7e8:	893b      	ldrh	r3, [r7, #8]
 800f7ea:	3306      	adds	r3, #6
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	6a3b      	ldr	r3, [r7, #32]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	8bba      	ldrh	r2, [r7, #28]
 800f7f4:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	6818      	ldr	r0, [r3, #0]
 800f7fa:	b2b2      	uxth	r2, r6
 800f7fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f800:	6a39      	ldr	r1, [r7, #32]
 800f802:	f7f6 fe67 	bl	80064d4 <HAL_UART_Transmit>
 800f806:	46d5      	mov	sp, sl
}
 800f808:	bf00      	nop
 800f80a:	3728      	adds	r7, #40	@ 0x28
 800f80c:	46bd      	mov	sp, r7
 800f80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800f814 <DWIN_ClearText>:

void DWIN_ClearText(Dwin_t *pDwin, uint16_t VP_address) {
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	460b      	mov	r3, r1
 800f81e:	807b      	strh	r3, [r7, #2]
    DWIN_SetText(pDwin,VP_address,(uint8_t *)"",strlen(""));
 800f820:	8879      	ldrh	r1, [r7, #2]
 800f822:	2300      	movs	r3, #0
 800f824:	4a03      	ldr	r2, [pc, #12]	@ (800f834 <DWIN_ClearText+0x20>)
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f7ff ff84 	bl	800f734 <DWIN_SetText>
}
 800f82c:	bf00      	nop
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	08015eb0 	.word	0x08015eb0

0800f838 <DWIN_SetColorText>:

void DWIN_SetColorText(Dwin_t *pDwin, uint16_t SP_address, uint16_t color) {
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	460b      	mov	r3, r1
 800f842:	807b      	strh	r3, [r7, #2]
 800f844:	4613      	mov	r3, r2
 800f846:	803b      	strh	r3, [r7, #0]
    SP_address = SP_address | 3; // offset color text
 800f848:	887b      	ldrh	r3, [r7, #2]
 800f84a:	f043 0303 	orr.w	r3, r3, #3
 800f84e:	807b      	strh	r3, [r7, #2]

    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800f850:	235a      	movs	r3, #90	@ 0x5a
 800f852:	723b      	strb	r3, [r7, #8]
 800f854:	23a5      	movs	r3, #165	@ 0xa5
 800f856:	727b      	strb	r3, [r7, #9]
 800f858:	2305      	movs	r3, #5
 800f85a:	72bb      	strb	r3, [r7, #10]
 800f85c:	2382      	movs	r3, #130	@ 0x82
 800f85e:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((SP_address >> 8) & 0xFF), (uint8_t)((SP_address)&0xFF), 
 800f860:	887b      	ldrh	r3, [r7, #2]
 800f862:	0a1b      	lsrs	r3, r3, #8
 800f864:	b29b      	uxth	r3, r3
 800f866:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800f868:	733b      	strb	r3, [r7, #12]
    (uint8_t)((SP_address >> 8) & 0xFF), (uint8_t)((SP_address)&0xFF), 
 800f86a:	887b      	ldrh	r3, [r7, #2]
 800f86c:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800f86e:	737b      	strb	r3, [r7, #13]
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };
 800f870:	883b      	ldrh	r3, [r7, #0]
 800f872:	0a1b      	lsrs	r3, r3, #8
 800f874:	b29b      	uxth	r3, r3
 800f876:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800f878:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };
 800f87a:	883b      	ldrh	r3, [r7, #0]
 800f87c:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 800f87e:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6818      	ldr	r0, [r3, #0]
 800f884:	f107 0108 	add.w	r1, r7, #8
 800f888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f88c:	2208      	movs	r2, #8
 800f88e:	f7f6 fe21 	bl	80064d4 <HAL_UART_Transmit>
}
 800f892:	bf00      	nop
 800f894:	3710      	adds	r7, #16
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <DWIN_SetVariable_Icon>:

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b084      	sub	sp, #16
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	807b      	strh	r3, [r7, #2]
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800f8aa:	235a      	movs	r3, #90	@ 0x5a
 800f8ac:	723b      	strb	r3, [r7, #8]
 800f8ae:	23a5      	movs	r3, #165	@ 0xa5
 800f8b0:	727b      	strb	r3, [r7, #9]
 800f8b2:	2305      	movs	r3, #5
 800f8b4:	72bb      	strb	r3, [r7, #10]
 800f8b6:	2382      	movs	r3, #130	@ 0x82
 800f8b8:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 800f8ba:	887b      	ldrh	r3, [r7, #2]
 800f8bc:	0a1b      	lsrs	r3, r3, #8
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800f8c2:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 800f8c4:	887b      	ldrh	r3, [r7, #2]
 800f8c6:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800f8c8:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 800f8ca:	883b      	ldrh	r3, [r7, #0]
 800f8cc:	0a1b      	lsrs	r3, r3, #8
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800f8d2:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 800f8d4:	883b      	ldrh	r3, [r7, #0]
 800f8d6:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800f8d8:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6818      	ldr	r0, [r3, #0]
 800f8de:	f107 0108 	add.w	r1, r7, #8
 800f8e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f8e6:	2208      	movs	r2, #8
 800f8e8:	f7f6 fdf4 	bl	80064d4 <HAL_UART_Transmit>
}
 800f8ec:	bf00      	nop
 800f8ee:	3710      	adds	r7, #16
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <DWIN_SetArray_Icon>:

void DWIN_SetArray_Icon(Dwin_t *pDwin, uint16_t VP_address_begin, uint8_t *data_array, uint8_t data_length ) {
 800f8f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8f8:	b08b      	sub	sp, #44	@ 0x2c
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	60f8      	str	r0, [r7, #12]
 800f8fe:	607a      	str	r2, [r7, #4]
 800f900:	461a      	mov	r2, r3
 800f902:	460b      	mov	r3, r1
 800f904:	817b      	strh	r3, [r7, #10]
 800f906:	4613      	mov	r3, r2
 800f908:	727b      	strb	r3, [r7, #9]
 800f90a:	466b      	mov	r3, sp
 800f90c:	461e      	mov	r6, r3
    uint16_t Total_Data_Length = data_length * 2;
 800f90e:	7a7b      	ldrb	r3, [r7, #9]
 800f910:	b29b      	uxth	r3, r3
 800f912:	005b      	lsls	r3, r3, #1
 800f914:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t sendBuffer[6 +Total_Data_Length];
 800f916:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f918:	1d99      	adds	r1, r3, #6
 800f91a:	1e4b      	subs	r3, r1, #1
 800f91c:	623b      	str	r3, [r7, #32]
 800f91e:	460a      	mov	r2, r1
 800f920:	2300      	movs	r3, #0
 800f922:	4690      	mov	r8, r2
 800f924:	4699      	mov	r9, r3
 800f926:	f04f 0200 	mov.w	r2, #0
 800f92a:	f04f 0300 	mov.w	r3, #0
 800f92e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f93a:	460a      	mov	r2, r1
 800f93c:	2300      	movs	r3, #0
 800f93e:	4614      	mov	r4, r2
 800f940:	461d      	mov	r5, r3
 800f942:	f04f 0200 	mov.w	r2, #0
 800f946:	f04f 0300 	mov.w	r3, #0
 800f94a:	00eb      	lsls	r3, r5, #3
 800f94c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f950:	00e2      	lsls	r2, r4, #3
 800f952:	460b      	mov	r3, r1
 800f954:	3307      	adds	r3, #7
 800f956:	08db      	lsrs	r3, r3, #3
 800f958:	00db      	lsls	r3, r3, #3
 800f95a:	ebad 0d03 	sub.w	sp, sp, r3
 800f95e:	466b      	mov	r3, sp
 800f960:	3300      	adds	r3, #0
 800f962:	61fb      	str	r3, [r7, #28]
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800f964:	235a      	movs	r3, #90	@ 0x5a
 800f966:	753b      	strb	r3, [r7, #20]
 800f968:	23a5      	movs	r3, #165	@ 0xa5
 800f96a:	757b      	strb	r3, [r7, #21]
 800f96c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	3303      	adds	r3, #3
 800f972:	b2db      	uxtb	r3, r3
 800f974:	75bb      	strb	r3, [r7, #22]
 800f976:	2382      	movs	r3, #130	@ 0x82
 800f978:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800f97a:	897b      	ldrh	r3, [r7, #10]
 800f97c:	0a1b      	lsrs	r3, r3, #8
 800f97e:	b29b      	uxth	r3, r3
 800f980:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800f982:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800f984:	897b      	ldrh	r3, [r7, #10]
 800f986:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800f988:	767b      	strb	r3, [r7, #25]

    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	461a      	mov	r2, r3
 800f98e:	f107 0314 	add.w	r3, r7, #20
 800f992:	6818      	ldr	r0, [r3, #0]
 800f994:	6010      	str	r0, [r2, #0]
 800f996:	889b      	ldrh	r3, [r3, #4]
 800f998:	8093      	strh	r3, [r2, #4]
    /* Convert data array uint8_t to uint16_t */
    for (uint16_t i = 0; i < data_length; i++) {
 800f99a:	2300      	movs	r3, #0
 800f99c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f99e:	e012      	b.n	800f9c6 <DWIN_SetArray_Icon+0xd2>
        sendBuffer[6 + (i * 2)] = 0x00;              // High byte 
 800f9a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f9a2:	3303      	adds	r3, #3
 800f9a4:	005b      	lsls	r3, r3, #1
 800f9a6:	69fa      	ldr	r2, [r7, #28]
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	54d0      	strb	r0, [r2, r3]
        sendBuffer[6 + (i * 2) + 1] = data_array[i]; // Low byte is data
 800f9ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	441a      	add	r2, r3
 800f9b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f9b4:	3303      	adds	r3, #3
 800f9b6:	005b      	lsls	r3, r3, #1
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	7810      	ldrb	r0, [r2, #0]
 800f9bc:	69fa      	ldr	r2, [r7, #28]
 800f9be:	54d0      	strb	r0, [r2, r3]
    for (uint16_t i = 0; i < data_length; i++) {
 800f9c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f9c6:	7a7b      	ldrb	r3, [r7, #9]
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d3e7      	bcc.n	800f9a0 <DWIN_SetArray_Icon+0xac>
    }

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6818      	ldr	r0, [r3, #0]
 800f9d4:	b28a      	uxth	r2, r1
 800f9d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f9da:	69f9      	ldr	r1, [r7, #28]
 800f9dc:	f7f6 fd7a 	bl	80064d4 <HAL_UART_Transmit>
 800f9e0:	46b5      	mov	sp, r6
}
 800f9e2:	bf00      	nop
 800f9e4:	372c      	adds	r7, #44	@ 0x2c
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f9ec <DWIN_Create_Basic_line>:

void DWIN_Create_Basic_line(Dwin_t *pDwin, uint16_t VP_address, uint16_t x_base, uint16_t y_base, uint8_t *array_data, uint8_t size) {
 800f9ec:	b5b0      	push	{r4, r5, r7, lr}
 800f9ee:	b0d0      	sub	sp, #320	@ 0x140
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800f9f6:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800f9fa:	6020      	str	r0, [r4, #0]
 800f9fc:	460c      	mov	r4, r1
 800f9fe:	4610      	mov	r0, r2
 800fa00:	4619      	mov	r1, r3
 800fa02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fa06:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800fa0a:	4622      	mov	r2, r4
 800fa0c:	801a      	strh	r2, [r3, #0]
 800fa0e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fa12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800fa16:	4602      	mov	r2, r0
 800fa18:	801a      	strh	r2, [r3, #0]
 800fa1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fa1e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800fa22:	460a      	mov	r2, r1
 800fa24:	801a      	strh	r2, [r3, #0]
    uint8_t data_length = 11 + (16*size);
 800fa26:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800fa2a:	011b      	lsls	r3, r3, #4
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	330b      	adds	r3, #11
 800fa30:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
    uint16_t num_connection = (size * 4) - 1;
 800fa34:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	3b01      	subs	r3, #1
 800fa40:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800fa44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fa48:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	23ff      	movs	r3, #255	@ 0xff
 800fa50:	461a      	mov	r2, r3
 800fa52:	2100      	movs	r1, #0
 800fa54:	f003 fb30 	bl	80130b8 <memset>
 800fa58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fa5c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fa60:	225a      	movs	r2, #90	@ 0x5a
 800fa62:	701a      	strb	r2, [r3, #0]
 800fa64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fa68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fa6c:	22a5      	movs	r2, #165	@ 0xa5
 800fa6e:	705a      	strb	r2, [r3, #1]
 800fa70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fa74:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fa78:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 800fa7c:	709a      	strb	r2, [r3, #2]
 800fa7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fa82:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fa86:	2282      	movs	r2, #130	@ 0x82
 800fa88:	70da      	strb	r2, [r3, #3]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800fa8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fa8e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800fa92:	881b      	ldrh	r3, [r3, #0]
 800fa94:	0a1b      	lsrs	r3, r3, #8
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800fa9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fa9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800faa2:	711a      	strb	r2, [r3, #4]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800faa4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800faa8:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800faac:	881b      	ldrh	r3, [r3, #0]
 800faae:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800fab0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fab4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fab8:	715a      	strb	r2, [r3, #5]
 800faba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fabe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fac2:	2202      	movs	r2, #2
 800fac4:	71da      	strb	r2, [r3, #7]
                            (uint8_t)((num_connection >> 8) & 0xFF), (uint8_t)(num_connection & 0xFF), 0x01, 0xED };
 800fac6:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 800faca:	0a1b      	lsrs	r3, r3, #8
 800facc:	b29b      	uxth	r3, r3
 800face:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800fad0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fad4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fad8:	721a      	strb	r2, [r3, #8]
                            (uint8_t)((num_connection >> 8) & 0xFF), (uint8_t)(num_connection & 0xFF), 0x01, 0xED };
 800fada:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 800fade:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 800fae0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fae4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fae8:	725a      	strb	r2, [r3, #9]
 800faea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800faee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800faf2:	2201      	movs	r2, #1
 800faf4:	729a      	strb	r2, [r3, #10]
 800faf6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fafa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fafe:	22ed      	movs	r2, #237	@ 0xed
 800fb00:	72da      	strb	r2, [r3, #11]
    uint8_t End_bit[2] = {0xFF, 0x00};
 800fb02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fb06:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fb0a:	22ff      	movs	r2, #255	@ 0xff
 800fb0c:	801a      	strh	r2, [r3, #0]
    uint16_t x1,y1,x2,y2,x3,y3,x4,y4 = 0;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    uint8_t index = 0;
 800fb14:	2300      	movs	r3, #0
 800fb16:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    

    // Create the send Buffer 
    for (uint8_t i = 0; i < size; i++) {
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 800fb20:	e120      	b.n	800fd64 <DWIN_Create_Basic_line+0x378>
        y1 = y2 = y3 = y4 = y_base;
 800fb22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fb26:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800fb2a:	881b      	ldrh	r3, [r3, #0]
 800fb2c:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 800fb30:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800fb34:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 800fb38:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800fb3c:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 800fb40:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800fb44:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        x1 = x_base + (25 * index);
 800fb48:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	461a      	mov	r2, r3
 800fb50:	0092      	lsls	r2, r2, #2
 800fb52:	4413      	add	r3, r2
 800fb54:	461a      	mov	r2, r3
 800fb56:	0091      	lsls	r1, r2, #2
 800fb58:	461a      	mov	r2, r3
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	4413      	add	r3, r2
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fb64:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800fb68:	881b      	ldrh	r3, [r3, #0]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
        ++index; 
 800fb70:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800fb74:	3301      	adds	r3, #1
 800fb76:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        x2 = x_base + (25 * index);
 800fb7a:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	461a      	mov	r2, r3
 800fb82:	0092      	lsls	r2, r2, #2
 800fb84:	4413      	add	r3, r2
 800fb86:	461a      	mov	r2, r3
 800fb88:	0091      	lsls	r1, r2, #2
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	4413      	add	r3, r2
 800fb90:	b29a      	uxth	r2, r3
 800fb92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fb96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800fb9a:	881b      	ldrh	r3, [r3, #0]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
        ++index;
 800fba2:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800fba6:	3301      	adds	r3, #1
 800fba8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        x3 = x2;
 800fbac:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800fbb0:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
        x4 = x_base + (25 * index);
 800fbb4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	461a      	mov	r2, r3
 800fbbc:	0092      	lsls	r2, r2, #2
 800fbbe:	4413      	add	r3, r2
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	0091      	lsls	r1, r2, #2
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	4413      	add	r3, r2
 800fbca:	b29a      	uxth	r2, r3
 800fbcc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fbd0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800fbd4:	881b      	ldrh	r3, [r3, #0]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
        if (array_data[i]) { // HIGH CLOCK
 800fbdc:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800fbe0:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800fbe4:	4413      	add	r3, r2
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d013      	beq.n	800fc14 <DWIN_Create_Basic_line+0x228>
            y1 = y2 = y3 = y4 = y_base - 30;  
 800fbec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fbf0:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800fbf4:	881b      	ldrh	r3, [r3, #0]
 800fbf6:	3b1e      	subs	r3, #30
 800fbf8:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 800fbfc:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800fc00:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 800fc04:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800fc08:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 800fc0c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800fc10:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        }
        // Create clock buffer
        uint8_t Clock_Buffer[] = { (x1 >> 8) & 0xFF, (x1 & 0xFF), (y1 >> 8) & 0xFF, (y1 & 0xFF),
 800fc14:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800fc18:	0a1b      	lsrs	r3, r3, #8
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fc26:	701a      	strb	r2, [r3, #0]
 800fc28:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800fc2c:	b2da      	uxtb	r2, r3
 800fc2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fc36:	705a      	strb	r2, [r3, #1]
 800fc38:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800fc3c:	0a1b      	lsrs	r3, r3, #8
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	b2da      	uxtb	r2, r3
 800fc42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fc4a:	709a      	strb	r2, [r3, #2]
 800fc4c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 800fc50:	b2da      	uxtb	r2, r3
 800fc52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fc5a:	70da      	strb	r2, [r3, #3]
 800fc5c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800fc60:	0a1b      	lsrs	r3, r3, #8
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	b2da      	uxtb	r2, r3
 800fc66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fc6e:	711a      	strb	r2, [r3, #4]
 800fc70:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800fc74:	b2da      	uxtb	r2, r3
 800fc76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fc7e:	715a      	strb	r2, [r3, #5]
 800fc80:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800fc84:	0a1b      	lsrs	r3, r3, #8
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	b2da      	uxtb	r2, r3
 800fc8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fc92:	719a      	strb	r2, [r3, #6]
 800fc94:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 800fc98:	b2da      	uxtb	r2, r3
 800fc9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fc9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fca2:	71da      	strb	r2, [r3, #7]
 800fca4:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 800fca8:	0a1b      	lsrs	r3, r3, #8
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	b2da      	uxtb	r2, r3
 800fcae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fcb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fcb6:	721a      	strb	r2, [r3, #8]
 800fcb8:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 800fcbc:	b2da      	uxtb	r2, r3
 800fcbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fcc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fcc6:	725a      	strb	r2, [r3, #9]
 800fcc8:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800fccc:	0a1b      	lsrs	r3, r3, #8
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	b2da      	uxtb	r2, r3
 800fcd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fcd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fcda:	729a      	strb	r2, [r3, #10]
 800fcdc:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800fce0:	b2da      	uxtb	r2, r3
 800fce2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fce6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fcea:	72da      	strb	r2, [r3, #11]
 800fcec:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 800fcf0:	0a1b      	lsrs	r3, r3, #8
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	b2da      	uxtb	r2, r3
 800fcf6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fcfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fcfe:	731a      	strb	r2, [r3, #12]
 800fd00:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 800fd04:	b2da      	uxtb	r2, r3
 800fd06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fd0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fd0e:	735a      	strb	r2, [r3, #13]
 800fd10:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800fd14:	0a1b      	lsrs	r3, r3, #8
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	b2da      	uxtb	r2, r3
 800fd1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fd1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fd22:	739a      	strb	r2, [r3, #14]
 800fd24:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 800fd28:	b2da      	uxtb	r2, r3
 800fd2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fd2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fd32:	73da      	strb	r2, [r3, #15]
                        (x2 >> 8) & 0xFF, (x2 & 0xFF), (y2 >> 8) & 0xFF, (y2 & 0xFF), 
                        (x3 >> 8) & 0xFF, (x3 & 0xFF), (y3 >> 8) & 0xFF, (y3 & 0xFF), 
                        (x4 >> 8) & 0xFF, (x4 & 0xFF), (y4 >> 8) & 0xFF, (y4 & 0xFF), };

        // add to sendBuffer 
        memcpy(sendBuffer + (12 + 16 * i) ,Clock_Buffer,sizeof(Clock_Buffer));
 800fd34:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800fd38:	011b      	lsls	r3, r3, #4
 800fd3a:	330c      	adds	r3, #12
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fd42:	441a      	add	r2, r3
 800fd44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fd48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fd4c:	4614      	mov	r4, r2
 800fd4e:	461d      	mov	r5, r3
 800fd50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd52:	6020      	str	r0, [r4, #0]
 800fd54:	6061      	str	r1, [r4, #4]
 800fd56:	60a2      	str	r2, [r4, #8]
 800fd58:	60e3      	str	r3, [r4, #12]
    for (uint8_t i = 0; i < size; i++) {
 800fd5a:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800fd5e:	3301      	adds	r3, #1
 800fd60:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 800fd64:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 800fd68:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	f4ff aed8 	bcc.w	800fb22 <DWIN_Create_Basic_line+0x136>
    }
    // End bit 
    memcpy(sendBuffer + (data_length + 1),End_bit,2);
 800fd72:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 800fd76:	3301      	adds	r3, #1
 800fd78:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800fd7c:	4413      	add	r3, r2
 800fd7e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800fd82:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800fd86:	8812      	ldrh	r2, [r2, #0]
 800fd88:	801a      	strh	r2, [r3, #0]


    // Send data
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800fd8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800fd8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	6818      	ldr	r0, [r3, #0]
 800fd96:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fd9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd9e:	22ff      	movs	r2, #255	@ 0xff
 800fda0:	f7f6 fb98 	bl	80064d4 <HAL_UART_Transmit>
}
 800fda4:	bf00      	nop
 800fda6:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bdb0      	pop	{r4, r5, r7, pc}

0800fdae <DWIN_SetWidth_Basic_line>:

void DWIN_SetWidth_Basic_line(Dwin_t *pDwin, uint16_t SP_Address, uint8_t width) {
 800fdae:	b580      	push	{r7, lr}
 800fdb0:	b084      	sub	sp, #16
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	807b      	strh	r3, [r7, #2]
 800fdba:	4613      	mov	r3, r2
 800fdbc:	707b      	strb	r3, [r7, #1]
    SP_Address = SP_Address | 7; // offset width line 
 800fdbe:	887b      	ldrh	r3, [r7, #2]
 800fdc0:	f043 0307 	orr.w	r3, r3, #7
 800fdc4:	807b      	strh	r3, [r7, #2]
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 800fdc6:	235a      	movs	r3, #90	@ 0x5a
 800fdc8:	723b      	strb	r3, [r7, #8]
 800fdca:	23a5      	movs	r3, #165	@ 0xa5
 800fdcc:	727b      	strb	r3, [r7, #9]
 800fdce:	2305      	movs	r3, #5
 800fdd0:	72bb      	strb	r3, [r7, #10]
 800fdd2:	2382      	movs	r3, #130	@ 0x82
 800fdd4:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((SP_Address >> 8) & 0xFF), (uint8_t)(SP_Address & 0xFF),
 800fdd6:	887b      	ldrh	r3, [r7, #2]
 800fdd8:	0a1b      	lsrs	r3, r3, #8
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 800fdde:	733b      	strb	r3, [r7, #12]
    (uint8_t)((SP_Address >> 8) & 0xFF), (uint8_t)(SP_Address & 0xFF),
 800fde0:	887b      	ldrh	r3, [r7, #2]
 800fde2:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 800fde4:	737b      	strb	r3, [r7, #13]
 800fde6:	2300      	movs	r3, #0
 800fde8:	73bb      	strb	r3, [r7, #14]
 800fdea:	787b      	ldrb	r3, [r7, #1]
 800fdec:	73fb      	strb	r3, [r7, #15]
    (uint8_t)(0x00), (uint8_t)(width & 0xFF) };
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),500);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6818      	ldr	r0, [r3, #0]
 800fdf2:	f107 0108 	add.w	r1, r7, #8
 800fdf6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800fdfa:	2208      	movs	r2, #8
 800fdfc:	f7f6 fb6a 	bl	80064d4 <HAL_UART_Transmit>
}
 800fe00:	bf00      	nop
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <DWIN_Create_Single_line>:

void DWIN_Create_Single_line(Dwin_t *pDwin, uint16_t VP_address, uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint16_t color) {
 800fe08:	b590      	push	{r4, r7, lr}
 800fe0a:	b0c5      	sub	sp, #276	@ 0x114
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800fe12:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800fe16:	6020      	str	r0, [r4, #0]
 800fe18:	460c      	mov	r4, r1
 800fe1a:	4610      	mov	r0, r2
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe22:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800fe26:	4622      	mov	r2, r4
 800fe28:	801a      	strh	r2, [r3, #0]
 800fe2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fe32:	4602      	mov	r2, r0
 800fe34:	801a      	strh	r2, [r3, #0]
 800fe36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe3a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800fe3e:	460a      	mov	r2, r1
 800fe40:	801a      	strh	r2, [r3, #0]
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800fe42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe46:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	23ff      	movs	r3, #255	@ 0xff
 800fe4e:	461a      	mov	r2, r3
 800fe50:	2100      	movs	r1, #0
 800fe52:	f003 f931 	bl	80130b8 <memset>
 800fe56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe5a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800fe5e:	225a      	movs	r2, #90	@ 0x5a
 800fe60:	701a      	strb	r2, [r3, #0]
 800fe62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe66:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800fe6a:	22a5      	movs	r2, #165	@ 0xa5
 800fe6c:	705a      	strb	r2, [r3, #1]
 800fe6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe72:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800fe76:	2213      	movs	r2, #19
 800fe78:	709a      	strb	r2, [r3, #2]
 800fe7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe7e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800fe82:	2282      	movs	r2, #130	@ 0x82
 800fe84:	70da      	strb	r2, [r3, #3]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800fe86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe8a:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800fe8e:	881b      	ldrh	r3, [r3, #0]
 800fe90:	0a1b      	lsrs	r3, r3, #8
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800fe96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe9a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800fe9e:	711a      	strb	r2, [r3, #4]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 800fea0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fea4:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800feac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800feb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800feb4:	715a      	strb	r2, [r3, #5]
 800feb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800feba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800febe:	2202      	movs	r2, #2
 800fec0:	71da      	strb	r2, [r3, #7]
 800fec2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fec6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800feca:	2201      	movs	r2, #1
 800fecc:	725a      	strb	r2, [r3, #9]
                            (uint8_t)((0x0001 >> 8) & 0xFF), (uint8_t)(0x0001 & 0xFF),
                            (uint8_t)((color >> 8) & 0xFF), (uint8_t)(color & 0xFF),
 800fece:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800fed2:	0a1b      	lsrs	r3, r3, #8
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800fed8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fedc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800fee0:	729a      	strb	r2, [r3, #10]
                            (uint8_t)((color >> 8) & 0xFF), (uint8_t)(color & 0xFF),
 800fee2:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800fee6:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 800fee8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800feec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800fef0:	72da      	strb	r2, [r3, #11]
 800fef2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800fefa:	881b      	ldrh	r3, [r3, #0]
 800fefc:	0a1b      	lsrs	r3, r3, #8
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff06:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ff0a:	731a      	strb	r2, [r3, #12]
 800ff0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	b2da      	uxtb	r2, r3
 800ff18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff1c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ff20:	735a      	strb	r2, [r3, #13]
 800ff22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff26:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800ff2a:	881b      	ldrh	r3, [r3, #0]
 800ff2c:	0a1b      	lsrs	r3, r3, #8
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	b2da      	uxtb	r2, r3
 800ff32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff36:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ff3a:	739a      	strb	r2, [r3, #14]
 800ff3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff40:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800ff44:	881b      	ldrh	r3, [r3, #0]
 800ff46:	b2da      	uxtb	r2, r3
 800ff48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ff50:	73da      	strb	r2, [r3, #15]
 800ff52:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 800ff56:	0a1b      	lsrs	r3, r3, #8
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	b2da      	uxtb	r2, r3
 800ff5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ff64:	741a      	strb	r2, [r3, #16]
 800ff66:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff70:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ff74:	745a      	strb	r2, [r3, #17]
 800ff76:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800ff7a:	0a1b      	lsrs	r3, r3, #8
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	b2da      	uxtb	r2, r3
 800ff80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ff88:	749a      	strb	r2, [r3, #18]
 800ff8a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800ff8e:	b2da      	uxtb	r2, r3
 800ff90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff94:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ff98:	74da      	strb	r2, [r3, #19]
 800ff9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff9e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ffa2:	22ff      	movs	r2, #255	@ 0xff
 800ffa4:	751a      	strb	r2, [r3, #20]
                            (x_1 >> 8) & 0xFF, (x_1 & 0xFF), (y_1 >> 8) & 0xFF, (y_1 & 0xFF),
                            (x_2 >> 8) & 0xFF, (x_2 & 0xFF), (y_2 >> 8) & 0xFF, (y_2 & 0xFF), 0xFF, 0x00 };
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800ffa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ffaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	6818      	ldr	r0, [r3, #0]
 800ffb2:	f107 0110 	add.w	r1, r7, #16
 800ffb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffba:	22ff      	movs	r2, #255	@ 0xff
 800ffbc:	f7f6 fa8a 	bl	80064d4 <HAL_UART_Transmit>
}
 800ffc0:	bf00      	nop
 800ffc2:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd90      	pop	{r4, r7, pc}

0800ffca <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 800ffca:	b480      	push	{r7}
 800ffcc:	b083      	sub	sp, #12
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
 800ffd2:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	683a      	ldr	r2, [r7, #0]
 800ffd8:	609a      	str	r2, [r3, #8]
}
 800ffda:	bf00      	nop
 800ffdc:	370c      	adds	r7, #12
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bc80      	pop	{r7}
 800ffe2:	4770      	bx	lr

0800ffe4 <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
    uint16_t VPaddress;
    uint16_t lowByte;
    uint16_t highByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	2b5a      	cmp	r3, #90	@ 0x5a
 800fff4:	d133      	bne.n	801005e <DWIN_Listen+0x7a>
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	3301      	adds	r3, #1
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	2ba5      	cmp	r3, #165	@ 0xa5
 800fffe:	d12e      	bne.n	801005e <DWIN_Listen+0x7a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	3303      	adds	r3, #3
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	2b83      	cmp	r3, #131	@ 0x83
 8010008:	d129      	bne.n	801005e <DWIN_Listen+0x7a>
        {
            datalength = RX_Buffer[2];
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	789b      	ldrb	r3, [r3, #2]
 801000e:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 8010010:	7bfb      	ldrb	r3, [r7, #15]
 8010012:	3302      	adds	r3, #2
 8010014:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	3304      	adds	r3, #4
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	b21b      	sxth	r3, r3
 801001e:	021b      	lsls	r3, r3, #8
 8010020:	b21a      	sxth	r2, r3
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	3305      	adds	r3, #5
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	b21b      	sxth	r3, r3
 801002a:	4313      	orrs	r3, r2
 801002c:	b21b      	sxth	r3, r3
 801002e:	81bb      	strh	r3, [r7, #12]
            /* get return key value */
            lowByte = RX_Buffer[datalength];  
 8010030:	7bfb      	ldrb	r3, [r7, #15]
 8010032:	683a      	ldr	r2, [r7, #0]
 8010034:	4413      	add	r3, r2
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	817b      	strh	r3, [r7, #10]
            highByte = RX_Buffer[datalength-1];
 801003a:	7bfb      	ldrb	r3, [r7, #15]
 801003c:	3b01      	subs	r3, #1
 801003e:	683a      	ldr	r2, [r7, #0]
 8010040:	4413      	add	r3, r2
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	813b      	strh	r3, [r7, #8]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	689b      	ldr	r3, [r3, #8]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d007      	beq.n	801005e <DWIN_Listen+0x7a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lowByte,highByte);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	689b      	ldr	r3, [r3, #8]
 8010052:	897a      	ldrh	r2, [r7, #10]
 8010054:	b2d1      	uxtb	r1, r2
 8010056:	893a      	ldrh	r2, [r7, #8]
 8010058:	b2d2      	uxtb	r2, r2
 801005a:	89b8      	ldrh	r0, [r7, #12]
 801005c:	4798      	blx	r3
            }
        }
    }

    
}
 801005e:	bf00      	nop
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}

08010066 <isotp_ms_to_st_min>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 8010066:	b480      	push	{r7}
 8010068:	b085      	sub	sp, #20
 801006a:	af00      	add	r7, sp, #0
 801006c:	4603      	mov	r3, r0
 801006e:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 8010074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010078:	2b00      	cmp	r3, #0
 801007a:	da01      	bge.n	8010080 <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 801007c:	237f      	movs	r3, #127	@ 0x7f
 801007e:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 8010080:	7bfb      	ldrb	r3, [r7, #15]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3714      	adds	r7, #20
 8010086:	46bd      	mov	sp, r7
 8010088:	bc80      	pop	{r7}
 801008a:	4770      	bx	lr

0801008c <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 801008c:	b480      	push	{r7}
 801008e:	b085      	sub	sp, #20
 8010090:	af00      	add	r7, sp, #0
 8010092:	4603      	mov	r3, r0
 8010094:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9) {
 8010096:	79fb      	ldrb	r3, [r7, #7]
 8010098:	2bf0      	cmp	r3, #240	@ 0xf0
 801009a:	d905      	bls.n	80100a8 <isotp_st_min_to_ms+0x1c>
 801009c:	79fb      	ldrb	r3, [r7, #7]
 801009e:	2bf9      	cmp	r3, #249	@ 0xf9
 80100a0:	d802      	bhi.n	80100a8 <isotp_st_min_to_ms+0x1c>
        ms = 1;
 80100a2:	2301      	movs	r3, #1
 80100a4:	73fb      	strb	r3, [r7, #15]
 80100a6:	e008      	b.n	80100ba <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 80100a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	db02      	blt.n	80100b6 <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 80100b0:	79fb      	ldrb	r3, [r7, #7]
 80100b2:	73fb      	strb	r3, [r7, #15]
 80100b4:	e001      	b.n	80100ba <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 80100b6:	2300      	movs	r3, #0
 80100b8:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 80100ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3714      	adds	r7, #20
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bc80      	pop	{r7}
 80100c4:	4770      	bx	lr

080100c6 <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 80100c6:	b580      	push	{r7, lr}
 80100c8:	b086      	sub	sp, #24
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
 80100ce:	4608      	mov	r0, r1
 80100d0:	4611      	mov	r1, r2
 80100d2:	461a      	mov	r2, r3
 80100d4:	4603      	mov	r3, r0
 80100d6:	70fb      	strb	r3, [r7, #3]
 80100d8:	460b      	mov	r3, r1
 80100da:	70bb      	strb	r3, [r7, #2]
 80100dc:	4613      	mov	r3, r2
 80100de:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 80100e0:	7b3b      	ldrb	r3, [r7, #12]
 80100e2:	2203      	movs	r2, #3
 80100e4:	f362 1307 	bfi	r3, r2, #4, #4
 80100e8:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 80100ea:	78fb      	ldrb	r3, [r7, #3]
 80100ec:	f003 030f 	and.w	r3, r3, #15
 80100f0:	b2da      	uxtb	r2, r3
 80100f2:	7b3b      	ldrb	r3, [r7, #12]
 80100f4:	f362 0303 	bfi	r3, r2, #0, #4
 80100f8:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 80100fa:	78bb      	ldrb	r3, [r7, #2]
 80100fc:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 80100fe:	787b      	ldrb	r3, [r7, #1]
 8010100:	4618      	mov	r0, r3
 8010102:	f7ff ffb0 	bl	8010066 <isotp_ms_to_st_min>
 8010106:	4603      	mov	r3, r0
 8010108:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
 801010a:	f107 030c 	add.w	r3, r7, #12
 801010e:	3303      	adds	r3, #3
 8010110:	2205      	movs	r2, #5
 8010112:	2100      	movs	r1, #0
 8010114:	4618      	mov	r0, r3
 8010116:	f002 ffcf 	bl	80130b8 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f107 010c 	add.w	r1, r7, #12
 8010122:	2208      	movs	r2, #8
 8010124:	4618      	mov	r0, r3
 8010126:	f7f1 f9a9 	bl	800147c <isotp_user_send_can>
 801012a:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 801012c:	697b      	ldr	r3, [r7, #20]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3718      	adds	r7, #24
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
	...

08010138 <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 8010138:	b580      	push	{r7, lr}
 801013a:	b086      	sub	sp, #24
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	895b      	ldrh	r3, [r3, #10]
 8010146:	2b07      	cmp	r3, #7
 8010148:	d905      	bls.n	8010156 <isotp_send_single_frame+0x1e>
 801014a:	4b1d      	ldr	r3, [pc, #116]	@ (80101c0 <isotp_send_single_frame+0x88>)
 801014c:	4a1d      	ldr	r2, [pc, #116]	@ (80101c4 <isotp_send_single_frame+0x8c>)
 801014e:	2142      	movs	r1, #66	@ 0x42
 8010150:	481d      	ldr	r0, [pc, #116]	@ (80101c8 <isotp_send_single_frame+0x90>)
 8010152:	f000 ff53 	bl	8010ffc <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 8010156:	7b3b      	ldrb	r3, [r7, #12]
 8010158:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801015c:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	895b      	ldrh	r3, [r3, #10]
 8010162:	f003 030f 	and.w	r3, r3, #15
 8010166:	b2da      	uxtb	r2, r3
 8010168:	7b3b      	ldrb	r3, [r7, #12]
 801016a:	f362 0303 	bfi	r3, r2, #0, #4
 801016e:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6859      	ldr	r1, [r3, #4]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	895b      	ldrh	r3, [r3, #10]
 8010178:	461a      	mov	r2, r3
 801017a:	f107 030c 	add.w	r3, r7, #12
 801017e:	3301      	adds	r3, #1
 8010180:	4618      	mov	r0, r3
 8010182:	f003 f8ee 	bl	8013362 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	895b      	ldrh	r3, [r3, #10]
 801018a:	461a      	mov	r2, r3
 801018c:	f107 030c 	add.w	r3, r7, #12
 8010190:	3301      	adds	r3, #1
 8010192:	1898      	adds	r0, r3, r2
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	895b      	ldrh	r3, [r3, #10]
 8010198:	f1c3 0307 	rsb	r3, r3, #7
 801019c:	461a      	mov	r2, r3
 801019e:	2100      	movs	r1, #0
 80101a0:	f002 ff8a 	bl	80130b8 <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 80101a4:	f107 030c 	add.w	r3, r7, #12
 80101a8:	2208      	movs	r2, #8
 80101aa:	4619      	mov	r1, r3
 80101ac:	6838      	ldr	r0, [r7, #0]
 80101ae:	f7f1 f965 	bl	800147c <isotp_user_send_can>
 80101b2:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 80101b4:	697b      	ldr	r3, [r7, #20]
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3718      	adds	r7, #24
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	08015eb4 	.word	0x08015eb4
 80101c4:	08016818 	.word	0x08016818
 80101c8:	08015ecc 	.word	0x08015ecc

080101cc <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	895b      	ldrh	r3, [r3, #10]
 80101da:	2b07      	cmp	r3, #7
 80101dc:	d805      	bhi.n	80101ea <isotp_send_first_frame+0x1e>
 80101de:	4b1d      	ldr	r3, [pc, #116]	@ (8010254 <isotp_send_first_frame+0x88>)
 80101e0:	4a1d      	ldr	r2, [pc, #116]	@ (8010258 <isotp_send_first_frame+0x8c>)
 80101e2:	215c      	movs	r1, #92	@ 0x5c
 80101e4:	481d      	ldr	r0, [pc, #116]	@ (801025c <isotp_send_first_frame+0x90>)
 80101e6:	f000 ff09 	bl	8010ffc <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 80101ea:	7b3b      	ldrb	r3, [r7, #12]
 80101ec:	2201      	movs	r2, #1
 80101ee:	f362 1307 	bfi	r3, r2, #4, #4
 80101f2:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	895b      	ldrh	r3, [r3, #10]
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	895b      	ldrh	r3, [r3, #10]
 8010200:	0a1b      	lsrs	r3, r3, #8
 8010202:	b29b      	uxth	r3, r3
 8010204:	f003 030f 	and.w	r3, r3, #15
 8010208:	b2da      	uxtb	r2, r3
 801020a:	7b3b      	ldrb	r3, [r7, #12]
 801020c:	f362 0303 	bfi	r3, r2, #0, #4
 8010210:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	685a      	ldr	r2, [r3, #4]
 8010216:	f107 030e 	add.w	r3, r7, #14
 801021a:	6811      	ldr	r1, [r2, #0]
 801021c:	6019      	str	r1, [r3, #0]
 801021e:	8892      	ldrh	r2, [r2, #4]
 8010220:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8010222:	f107 030c 	add.w	r3, r7, #12
 8010226:	2208      	movs	r2, #8
 8010228:	4619      	mov	r1, r3
 801022a:	6838      	ldr	r0, [r7, #0]
 801022c:	f7f1 f926 	bl	800147c <isotp_user_send_can>
 8010230:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d108      	bne.n	801024a <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	899b      	ldrh	r3, [r3, #12]
 801023c:	3306      	adds	r3, #6
 801023e:	b29a      	uxth	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2201      	movs	r2, #1
 8010248:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 801024a:	697b      	ldr	r3, [r7, #20]
}
 801024c:	4618      	mov	r0, r3
 801024e:	3718      	adds	r7, #24
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	08015ee4 	.word	0x08015ee4
 8010258:	08016830 	.word	0x08016830
 801025c:	08015ecc 	.word	0x08015ecc

08010260 <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	895b      	ldrh	r3, [r3, #10]
 801026c:	2b07      	cmp	r3, #7
 801026e:	d805      	bhi.n	801027c <isotp_send_consecutive_frame+0x1c>
 8010270:	4b2d      	ldr	r3, [pc, #180]	@ (8010328 <isotp_send_consecutive_frame+0xc8>)
 8010272:	4a2e      	ldr	r2, [pc, #184]	@ (801032c <isotp_send_consecutive_frame+0xcc>)
 8010274:	2175      	movs	r1, #117	@ 0x75
 8010276:	482e      	ldr	r0, [pc, #184]	@ (8010330 <isotp_send_consecutive_frame+0xd0>)
 8010278:	f000 fec0 	bl	8010ffc <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 801027c:	7a3b      	ldrb	r3, [r7, #8]
 801027e:	2202      	movs	r2, #2
 8010280:	f362 1307 	bfi	r3, r2, #4, #4
 8010284:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	7b9b      	ldrb	r3, [r3, #14]
 801028a:	f003 030f 	and.w	r3, r3, #15
 801028e:	b2da      	uxtb	r2, r3
 8010290:	7a3b      	ldrb	r3, [r7, #8]
 8010292:	f362 0303 	bfi	r3, r2, #0, #4
 8010296:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	895a      	ldrh	r2, [r3, #10]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	899b      	ldrh	r3, [r3, #12]
 80102a0:	1ad3      	subs	r3, r2, r3
 80102a2:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 80102a4:	8afb      	ldrh	r3, [r7, #22]
 80102a6:	2b07      	cmp	r3, #7
 80102a8:	d901      	bls.n	80102ae <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 80102aa:	2307      	movs	r3, #7
 80102ac:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	8992      	ldrh	r2, [r2, #12]
 80102b6:	1899      	adds	r1, r3, r2
 80102b8:	8afa      	ldrh	r2, [r7, #22]
 80102ba:	f107 0308 	add.w	r3, r7, #8
 80102be:	3301      	adds	r3, #1
 80102c0:	4618      	mov	r0, r3
 80102c2:	f003 f84e 	bl	8013362 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0, sizeof(message.as.consecutive_frame.data) - data_length);
 80102c6:	8afb      	ldrh	r3, [r7, #22]
 80102c8:	f107 0208 	add.w	r2, r7, #8
 80102cc:	3201      	adds	r2, #1
 80102ce:	18d0      	adds	r0, r2, r3
 80102d0:	8afb      	ldrh	r3, [r7, #22]
 80102d2:	f1c3 0307 	rsb	r3, r3, #7
 80102d6:	461a      	mov	r2, r3
 80102d8:	2100      	movs	r1, #0
 80102da:	f002 feed 	bl	80130b8 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	f107 0108 	add.w	r1, r7, #8
 80102e6:	2208      	movs	r2, #8
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7f1 f8c7 	bl	800147c <isotp_user_send_can>
 80102ee:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d113      	bne.n	801031e <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	899a      	ldrh	r2, [r3, #12]
 80102fa:	8afb      	ldrh	r3, [r7, #22]
 80102fc:	4413      	add	r3, r2
 80102fe:	b29a      	uxth	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	7b9b      	ldrb	r3, [r3, #14]
 8010308:	3301      	adds	r3, #1
 801030a:	b2da      	uxtb	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	739a      	strb	r2, [r3, #14]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	7b9b      	ldrb	r3, [r3, #14]
 8010314:	2b0f      	cmp	r3, #15
 8010316:	d902      	bls.n	801031e <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	739a      	strb	r2, [r3, #14]
        }
    }
    
    return ret;
 801031e:	693b      	ldr	r3, [r7, #16]
}
 8010320:	4618      	mov	r0, r3
 8010322:	3718      	adds	r7, #24
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	08015ee4 	.word	0x08015ee4
 801032c:	08016848 	.word	0x08016848
 8010330:	08015ecc 	.word	0x08015ecc

08010334 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	4613      	mov	r3, r2
 8010340:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	f003 030f 	and.w	r3, r3, #15
 801034a:	b2db      	uxtb	r3, r3
 801034c:	2b00      	cmp	r3, #0
 801034e:	d008      	beq.n	8010362 <isotp_receive_single_frame+0x2e>
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010358:	b2db      	uxtb	r3, r3
 801035a:	461a      	mov	r2, r3
 801035c:	79fb      	ldrb	r3, [r7, #7]
 801035e:	4293      	cmp	r3, r2
 8010360:	d805      	bhi.n	801036e <isotp_receive_single_frame+0x3a>
        isotp_user_debug("Single-frame length too small.");
 8010362:	480f      	ldr	r0, [pc, #60]	@ (80103a0 <isotp_receive_single_frame+0x6c>)
 8010364:	f7f1 f8bb 	bl	80014de <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8010368:	f06f 0306 	mvn.w	r3, #6
 801036c:	e014      	b.n	8010398 <isotp_receive_single_frame+0x64>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	1c59      	adds	r1, r3, #1
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801037e:	b2db      	uxtb	r3, r3
 8010380:	461a      	mov	r2, r3
 8010382:	f002 ffee 	bl	8013362 <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801038e:	b2db      	uxtb	r3, r3
 8010390:	461a      	mov	r2, r3
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	85da      	strh	r2, [r3, #46]	@ 0x2e
    
    return ISOTP_RET_OK;
 8010396:	2300      	movs	r3, #0
}
 8010398:	4618      	mov	r0, r3
 801039a:	3710      	adds	r7, #16
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	08015ef8 	.word	0x08015ef8

080103a4 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b086      	sub	sp, #24
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	4613      	mov	r3, r2
 80103b0:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 80103b2:	79fb      	ldrb	r3, [r7, #7]
 80103b4:	2b08      	cmp	r3, #8
 80103b6:	d005      	beq.n	80103c4 <isotp_receive_first_frame+0x20>
        isotp_user_debug("First frame should be 8 bytes in length.");
 80103b8:	481e      	ldr	r0, [pc, #120]	@ (8010434 <isotp_receive_first_frame+0x90>)
 80103ba:	f7f1 f890 	bl	80014de <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 80103be:	f06f 0306 	mvn.w	r3, #6
 80103c2:	e033      	b.n	801042c <isotp_receive_first_frame+0x88>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 80103d0:	8afb      	ldrh	r3, [r7, #22]
 80103d2:	021b      	lsls	r3, r3, #8
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	68ba      	ldr	r2, [r7, #8]
 80103d8:	7852      	ldrb	r2, [r2, #1]
 80103da:	4413      	add	r3, r2
 80103dc:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 80103de:	8afb      	ldrh	r3, [r7, #22]
 80103e0:	2b07      	cmp	r3, #7
 80103e2:	d805      	bhi.n	80103f0 <isotp_receive_first_frame+0x4c>
        isotp_user_debug("Should not use multiple frame transmission.");
 80103e4:	4814      	ldr	r0, [pc, #80]	@ (8010438 <isotp_receive_first_frame+0x94>)
 80103e6:	f7f1 f87a 	bl	80014de <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 80103ea:	f06f 0306 	mvn.w	r3, #6
 80103ee:	e01d      	b.n	801042c <isotp_receive_first_frame+0x88>
    }
    
    if (payload_length > link->receive_buf_size) {
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80103f4:	8afa      	ldrh	r2, [r7, #22]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d905      	bls.n	8010406 <isotp_receive_first_frame+0x62>
        isotp_user_debug("Multi-frame response too large for receiving buffer.");
 80103fa:	4810      	ldr	r0, [pc, #64]	@ (801043c <isotp_receive_first_frame+0x98>)
 80103fc:	f7f1 f86f 	bl	80014de <isotp_user_debug>
        return ISOTP_RET_OVERFLOW;
 8010400:	f06f 0302 	mvn.w	r3, #2
 8010404:	e012      	b.n	801042c <isotp_receive_first_frame+0x88>
    }
    
    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	3302      	adds	r3, #2
 801040e:	2206      	movs	r2, #6
 8010410:	4619      	mov	r1, r3
 8010412:	f002 ffa6 	bl	8013362 <memcpy>
    link->receive_size = payload_length;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	8afa      	ldrh	r2, [r7, #22]
 801041a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2206      	movs	r2, #6
 8010420:	861a      	strh	r2, [r3, #48]	@ 0x30
    link->receive_sn = 1;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2201      	movs	r2, #1
 8010426:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    return ISOTP_RET_OK;
 801042a:	2300      	movs	r3, #0
}
 801042c:	4618      	mov	r0, r3
 801042e:	3718      	adds	r7, #24
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	08015f18 	.word	0x08015f18
 8010438:	08015f44 	.word	0x08015f44
 801043c:	08015f70 	.word	0x08015f70

08010440 <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8010440:	b580      	push	{r7, lr}
 8010442:	b086      	sub	sp, #24
 8010444:	af00      	add	r7, sp, #0
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	4613      	mov	r3, r2
 801044c:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8010454:	68ba      	ldr	r2, [r7, #8]
 8010456:	7812      	ldrb	r2, [r2, #0]
 8010458:	f3c2 0203 	ubfx	r2, r2, #0, #4
 801045c:	b2d2      	uxtb	r2, r2
 801045e:	4293      	cmp	r3, r2
 8010460:	d002      	beq.n	8010468 <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 8010462:	f06f 0303 	mvn.w	r3, #3
 8010466:	e038      	b.n	80104da <isotp_receive_consecutive_frame+0x9a>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8010470:	1ad3      	subs	r3, r2, r3
 8010472:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 8010474:	8afb      	ldrh	r3, [r7, #22]
 8010476:	2b07      	cmp	r3, #7
 8010478:	d901      	bls.n	801047e <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 801047a:	2307      	movs	r3, #7
 801047c:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 801047e:	79fa      	ldrb	r2, [r7, #7]
 8010480:	8afb      	ldrh	r3, [r7, #22]
 8010482:	429a      	cmp	r2, r3
 8010484:	dc05      	bgt.n	8010492 <isotp_receive_consecutive_frame+0x52>
        isotp_user_debug("Consecutive frame too short.");
 8010486:	4817      	ldr	r0, [pc, #92]	@ (80104e4 <isotp_receive_consecutive_frame+0xa4>)
 8010488:	f7f1 f829 	bl	80014de <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 801048c:	f06f 0306 	mvn.w	r3, #6
 8010490:	e023      	b.n	80104da <isotp_receive_consecutive_frame+0x9a>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010496:	68fa      	ldr	r2, [r7, #12]
 8010498:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 801049a:	1898      	adds	r0, r3, r2
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	3301      	adds	r3, #1
 80104a0:	8afa      	ldrh	r2, [r7, #22]
 80104a2:	4619      	mov	r1, r3
 80104a4:	f002 ff5d 	bl	8013362 <memcpy>

    link->receive_offset += remaining_bytes;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80104ac:	8afb      	ldrh	r3, [r7, #22]
 80104ae:	4413      	add	r3, r2
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (++(link->receive_sn) > 0x0F) {
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80104bc:	3301      	adds	r3, #1
 80104be:	b2da      	uxtb	r2, r3
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80104cc:	2b0f      	cmp	r3, #15
 80104ce:	d903      	bls.n	80104d8 <isotp_receive_consecutive_frame+0x98>
        link->receive_sn = 0;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2200      	movs	r2, #0
 80104d4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }

    return ISOTP_RET_OK;
 80104d8:	2300      	movs	r3, #0
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3718      	adds	r7, #24
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	08015fa8 	.word	0x08015fa8

080104e8 <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	60f8      	str	r0, [r7, #12]
 80104f0:	60b9      	str	r1, [r7, #8]
 80104f2:	4613      	mov	r3, r2
 80104f4:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 80104f6:	79fb      	ldrb	r3, [r7, #7]
 80104f8:	2b02      	cmp	r3, #2
 80104fa:	d805      	bhi.n	8010508 <isotp_receive_flow_control_frame+0x20>
        isotp_user_debug("Flow control frame too short.");
 80104fc:	4805      	ldr	r0, [pc, #20]	@ (8010514 <isotp_receive_flow_control_frame+0x2c>)
 80104fe:	f7f0 ffee 	bl	80014de <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8010502:	f06f 0306 	mvn.w	r3, #6
 8010506:	e000      	b.n	801050a <isotp_receive_flow_control_frame+0x22>
    }

    return ISOTP_RET_OK;
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3710      	adds	r7, #16
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	08015fc8 	.word	0x08015fc8

08010518 <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	4613      	mov	r3, r2
 8010524:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6819      	ldr	r1, [r3, #0]
 801052a:	88fb      	ldrh	r3, [r7, #6]
 801052c:	68ba      	ldr	r2, [r7, #8]
 801052e:	68f8      	ldr	r0, [r7, #12]
 8010530:	f000 f806 	bl	8010540 <isotp_send_with_id>
 8010534:	4603      	mov	r3, r0
}
 8010536:	4618      	mov	r0, r3
 8010538:	3710      	adds	r7, #16
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
	...

08010540 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 8010540:	b580      	push	{r7, lr}
 8010542:	b0a6      	sub	sp, #152	@ 0x98
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	607a      	str	r2, [r7, #4]
 801054c:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d105      	bne.n	8010560 <isotp_send_with_id+0x20>
        isotp_user_debug("Link is null!");
 8010554:	4833      	ldr	r0, [pc, #204]	@ (8010624 <isotp_send_with_id+0xe4>)
 8010556:	f7f0 ffc2 	bl	80014de <isotp_user_debug>
        return ISOTP_RET_ERROR;
 801055a:	f04f 33ff 	mov.w	r3, #4294967295
 801055e:	e05d      	b.n	801061c <isotp_send_with_id+0xdc>
    }

    if (size > link->send_buf_size) {
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	891b      	ldrh	r3, [r3, #8]
 8010564:	887a      	ldrh	r2, [r7, #2]
 8010566:	429a      	cmp	r2, r3
 8010568:	d90d      	bls.n	8010586 <isotp_send_with_id+0x46>
        isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
 801056a:	482f      	ldr	r0, [pc, #188]	@ (8010628 <isotp_send_with_id+0xe8>)
 801056c:	f7f0 ffb7 	bl	80014de <isotp_user_debug>
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 8010570:	887a      	ldrh	r2, [r7, #2]
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	891b      	ldrh	r3, [r3, #8]
 8010576:	f107 0014 	add.w	r0, r7, #20
 801057a:	492c      	ldr	r1, [pc, #176]	@ (801062c <isotp_send_with_id+0xec>)
 801057c:	f002 fc92 	bl	8012ea4 <siprintf>
        return ISOTP_RET_OVERFLOW;
 8010580:	f06f 0302 	mvn.w	r3, #2
 8010584:	e04a      	b.n	801061c <isotp_send_with_id+0xdc>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f893 3020 	ldrb.w	r3, [r3, #32]
 801058c:	2b01      	cmp	r3, #1
 801058e:	d105      	bne.n	801059c <isotp_send_with_id+0x5c>
        isotp_user_debug("Abort previous message, transmission in progress.\n");
 8010590:	4827      	ldr	r0, [pc, #156]	@ (8010630 <isotp_send_with_id+0xf0>)
 8010592:	f7f0 ffa4 	bl	80014de <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
 8010596:	f06f 0301 	mvn.w	r3, #1
 801059a:	e03f      	b.n	801061c <isotp_send_with_id+0xdc>
    }

    /* copy into local buffer */
    link->send_size = size;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	887a      	ldrh	r2, [r7, #2]
 80105a0:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2200      	movs	r2, #0
 80105a6:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	887a      	ldrh	r2, [r7, #2]
 80105ae:	6879      	ldr	r1, [r7, #4]
 80105b0:	4618      	mov	r0, r3
 80105b2:	f002 fed6 	bl	8013362 <memcpy>

    if (link->send_size < 8) {
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	895b      	ldrh	r3, [r3, #10]
 80105ba:	2b07      	cmp	r3, #7
 80105bc:	d806      	bhi.n	80105cc <isotp_send_with_id+0x8c>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 80105be:	68b9      	ldr	r1, [r7, #8]
 80105c0:	68f8      	ldr	r0, [r7, #12]
 80105c2:	f7ff fdb9 	bl	8010138 <isotp_send_single_frame>
 80105c6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 80105ca:	e025      	b.n	8010618 <isotp_send_with_id+0xd8>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 80105cc:	68b9      	ldr	r1, [r7, #8]
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	f7ff fdfc 	bl	80101cc <isotp_send_first_frame>
 80105d4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 80105d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d11b      	bne.n	8010618 <isotp_send_with_id+0xd8>
            link->send_bs_remain = 0;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2200      	movs	r2, #0
 80105e4:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2200      	movs	r2, #0
 80105ea:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2200      	movs	r2, #0
 80105f0:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 80105f2:	f7f0 ff6d 	bl	80014d0 <isotp_user_get_ms>
 80105f6:	4602      	mov	r2, r0
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80105fc:	f7f0 ff68 	bl	80014d0 <isotp_user_get_ms>
 8010600:	4603      	mov	r3, r0
 8010602:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2200      	movs	r2, #0
 801060e:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2201      	movs	r2, #1
 8010614:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 8010618:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 801061c:	4618      	mov	r0, r3
 801061e:	3798      	adds	r7, #152	@ 0x98
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	08015fe8 	.word	0x08015fe8
 8010628:	08015ff8 	.word	0x08015ff8
 801062c:	0801604c 	.word	0x0801604c
 8010630:	0801607c 	.word	0x0801607c

08010634 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 8010634:	b580      	push	{r7, lr}
 8010636:	b088      	sub	sp, #32
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	60b9      	str	r1, [r7, #8]
 801063e:	4613      	mov	r3, r2
 8010640:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8) {
 8010642:	79fb      	ldrb	r3, [r7, #7]
 8010644:	2b01      	cmp	r3, #1
 8010646:	f240 8143 	bls.w	80108d0 <isotp_on_can_message+0x29c>
 801064a:	79fb      	ldrb	r3, [r7, #7]
 801064c:	2b08      	cmp	r3, #8
 801064e:	f200 813f 	bhi.w	80108d0 <isotp_on_can_message+0x29c>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 8010652:	79fa      	ldrb	r2, [r7, #7]
 8010654:	f107 0314 	add.w	r3, r7, #20
 8010658:	68b9      	ldr	r1, [r7, #8]
 801065a:	4618      	mov	r0, r3
 801065c:	f002 fe81 	bl	8013362 <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 8010660:	79fb      	ldrb	r3, [r7, #7]
 8010662:	f107 0214 	add.w	r2, r7, #20
 8010666:	18d0      	adds	r0, r2, r3
 8010668:	79fb      	ldrb	r3, [r7, #7]
 801066a:	f1c3 0308 	rsb	r3, r3, #8
 801066e:	461a      	mov	r2, r3
 8010670:	2100      	movs	r1, #0
 8010672:	f002 fd21 	bl	80130b8 <memset>

    switch (message.as.common.type) {
 8010676:	7d3b      	ldrb	r3, [r7, #20]
 8010678:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801067c:	b2db      	uxtb	r3, r3
 801067e:	2b03      	cmp	r3, #3
 8010680:	f200 811a 	bhi.w	80108b8 <isotp_on_can_message+0x284>
 8010684:	a201      	add	r2, pc, #4	@ (adr r2, 801068c <isotp_on_can_message+0x58>)
 8010686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801068a:	bf00      	nop
 801068c:	0801069d 	.word	0x0801069d
 8010690:	080106d9 	.word	0x080106d9
 8010694:	08010761 	.word	0x08010761
 8010698:	080107ff 	.word	0x080107ff
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106a2:	2b01      	cmp	r3, #1
 80106a4:	d104      	bne.n	80106b0 <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f06f 0205 	mvn.w	r2, #5
 80106ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80106ae:	e002      	b.n	80106b6 <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2200      	movs	r2, #0
 80106b4:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 80106b6:	79fa      	ldrb	r2, [r7, #7]
 80106b8:	f107 0314 	add.w	r3, r7, #20
 80106bc:	4619      	mov	r1, r3
 80106be:	68f8      	ldr	r0, [r7, #12]
 80106c0:	f7ff fe38 	bl	8010334 <isotp_receive_single_frame>
 80106c4:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f040 80f7 	bne.w	80108bc <isotp_on_can_message+0x288>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2202      	movs	r2, #2
 80106d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            }
            break;
 80106d6:	e0f1      	b.n	80108bc <isotp_on_can_message+0x288>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d104      	bne.n	80106ec <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f06f 0205 	mvn.w	r2, #5
 80106e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80106ea:	e002      	b.n	80106f2 <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2200      	movs	r2, #0
 80106f0:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 80106f2:	79fa      	ldrb	r2, [r7, #7]
 80106f4:	f107 0314 	add.w	r3, r7, #20
 80106f8:	4619      	mov	r1, r3
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f7ff fe52 	bl	80103a4 <isotp_receive_first_frame>
 8010700:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	f113 0f03 	cmn.w	r3, #3
 8010708:	d10e      	bne.n	8010728 <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f06f 0207 	mvn.w	r2, #7
 8010710:	639a      	str	r2, [r3, #56]	@ 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2200      	movs	r2, #0
 8010716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 801071a:	2300      	movs	r3, #0
 801071c:	2200      	movs	r2, #0
 801071e:	2102      	movs	r1, #2
 8010720:	68f8      	ldr	r0, [r7, #12]
 8010722:	f7ff fcd0 	bl	80100c6 <isotp_send_flow_control>
                break;
 8010726:	e0d2      	b.n	80108ce <isotp_on_can_message+0x29a>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 8010728:	69fb      	ldr	r3, [r7, #28]
 801072a:	2b00      	cmp	r3, #0
 801072c:	f040 80c8 	bne.w	80108c0 <isotp_on_can_message+0x28c>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2201      	movs	r2, #1
 8010734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	22c8      	movs	r2, #200	@ 0xc8
 801073c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8010746:	2300      	movs	r3, #0
 8010748:	2100      	movs	r1, #0
 801074a:	68f8      	ldr	r0, [r7, #12]
 801074c:	f7ff fcbb 	bl	80100c6 <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8010750:	f7f0 febe 	bl	80014d0 <isotp_user_get_ms>
 8010754:	4603      	mov	r3, r0
 8010756:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	635a      	str	r2, [r3, #52]	@ 0x34
            }
            
            break;
 801075e:	e0af      	b.n	80108c0 <isotp_on_can_message+0x28c>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010766:	2b01      	cmp	r3, #1
 8010768:	d004      	beq.n	8010774 <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f06f 0205 	mvn.w	r2, #5
 8010770:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 8010772:	e0ac      	b.n	80108ce <isotp_on_can_message+0x29a>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 8010774:	79fa      	ldrb	r2, [r7, #7]
 8010776:	f107 0314 	add.w	r3, r7, #20
 801077a:	4619      	mov	r1, r3
 801077c:	68f8      	ldr	r0, [r7, #12]
 801077e:	f7ff fe5f 	bl	8010440 <isotp_receive_consecutive_frame>
 8010782:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	f113 0f04 	cmn.w	r3, #4
 801078a:	d108      	bne.n	801079e <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	f06f 0203 	mvn.w	r2, #3
 8010792:	639a      	str	r2, [r3, #56]	@ 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2200      	movs	r2, #0
 8010798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                break;
 801079c:	e097      	b.n	80108ce <isotp_on_can_message+0x29a>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	f040 808f 	bne.w	80108c4 <isotp_on_can_message+0x290>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80107a6:	f7f0 fe93 	bl	80014d0 <isotp_user_get_ms>
 80107aa:	4603      	mov	r3, r0
 80107ac:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	635a      	str	r2, [r3, #52]	@ 0x34
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80107bc:	429a      	cmp	r2, r3
 80107be:	d304      	bcc.n	80107ca <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2202      	movs	r2, #2
 80107c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }
            
            break;
 80107c8:	e07c      	b.n	80108c4 <isotp_on_can_message+0x290>
                    if (0 == --link->receive_bs_count) {
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80107d0:	3b01      	subs	r3, #1
 80107d2:	b2da      	uxtb	r2, r3
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d16f      	bne.n	80108c4 <isotp_on_can_message+0x290>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	22c8      	movs	r2, #200	@ 0xc8
 80107e8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80107f2:	2300      	movs	r3, #0
 80107f4:	2100      	movs	r1, #0
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f7ff fc65 	bl	80100c6 <isotp_send_flow_control>
            break;
 80107fc:	e062      	b.n	80108c4 <isotp_on_can_message+0x290>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010804:	2b01      	cmp	r3, #1
 8010806:	d15f      	bne.n	80108c8 <isotp_on_can_message+0x294>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 8010808:	79fa      	ldrb	r2, [r7, #7]
 801080a:	f107 0314 	add.w	r3, r7, #20
 801080e:	4619      	mov	r1, r3
 8010810:	68f8      	ldr	r0, [r7, #12]
 8010812:	f7ff fe69 	bl	80104e8 <isotp_receive_flow_control_frame>
 8010816:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 8010818:	69fb      	ldr	r3, [r7, #28]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d156      	bne.n	80108cc <isotp_on_can_message+0x298>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 801081e:	f7f0 fe57 	bl	80014d0 <isotp_user_get_ms>
 8010822:	4603      	mov	r3, r0
 8010824:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 801082c:	7d3b      	ldrb	r3, [r7, #20]
 801082e:	f003 030f 	and.w	r3, r3, #15
 8010832:	b2db      	uxtb	r3, r3
 8010834:	2b02      	cmp	r3, #2
 8010836:	d108      	bne.n	801084a <isotp_on_can_message+0x216>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f06f 0207 	mvn.w	r2, #7
 801083e:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2202      	movs	r2, #2
 8010844:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 8010848:	e040      	b.n	80108cc <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 801084a:	7d3b      	ldrb	r3, [r7, #20]
 801084c:	f003 030f 	and.w	r3, r3, #15
 8010850:	b2db      	uxtb	r3, r3
 8010852:	2b01      	cmp	r3, #1
 8010854:	d112      	bne.n	801087c <isotp_on_can_message+0x248>
                    link->send_wtf_count += 1;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	7cdb      	ldrb	r3, [r3, #19]
 801085a:	3301      	adds	r3, #1
 801085c:	b2da      	uxtb	r2, r3
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	7cdb      	ldrb	r3, [r3, #19]
 8010866:	2b01      	cmp	r3, #1
 8010868:	d930      	bls.n	80108cc <isotp_on_can_message+0x298>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f06f 0206 	mvn.w	r2, #6
 8010870:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2202      	movs	r2, #2
 8010876:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 801087a:	e027      	b.n	80108cc <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 801087c:	7d3b      	ldrb	r3, [r7, #20]
 801087e:	f003 030f 	and.w	r3, r3, #15
 8010882:	b2db      	uxtb	r3, r3
 8010884:	2b00      	cmp	r3, #0
 8010886:	d121      	bne.n	80108cc <isotp_on_can_message+0x298>
                    if (0 == message.as.flow_control.BS) {
 8010888:	7d7b      	ldrb	r3, [r7, #21]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d104      	bne.n	8010898 <isotp_on_can_message+0x264>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010894:	821a      	strh	r2, [r3, #16]
 8010896:	e003      	b.n	80108a0 <isotp_on_can_message+0x26c>
                        link->send_bs_remain = message.as.flow_control.BS;
 8010898:	7d7b      	ldrb	r3, [r7, #21]
 801089a:	461a      	mov	r2, r3
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 80108a0:	7dbb      	ldrb	r3, [r7, #22]
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7ff fbf2 	bl	801008c <isotp_st_min_to_ms>
 80108a8:	4603      	mov	r3, r0
 80108aa:	461a      	mov	r2, r3
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2200      	movs	r2, #0
 80108b4:	74da      	strb	r2, [r3, #19]
            break;
 80108b6:	e009      	b.n	80108cc <isotp_on_can_message+0x298>
        default:
            break;
 80108b8:	bf00      	nop
 80108ba:	e00a      	b.n	80108d2 <isotp_on_can_message+0x29e>
            break;
 80108bc:	bf00      	nop
 80108be:	e008      	b.n	80108d2 <isotp_on_can_message+0x29e>
            break;
 80108c0:	bf00      	nop
 80108c2:	e006      	b.n	80108d2 <isotp_on_can_message+0x29e>
            break;
 80108c4:	bf00      	nop
 80108c6:	e004      	b.n	80108d2 <isotp_on_can_message+0x29e>
                break;
 80108c8:	bf00      	nop
 80108ca:	e002      	b.n	80108d2 <isotp_on_can_message+0x29e>
            break;
 80108cc:	bf00      	nop
    };
    
    return;
 80108ce:	e000      	b.n	80108d2 <isotp_on_can_message+0x29e>
        return;
 80108d0:	bf00      	nop
}
 80108d2:	3720      	adds	r7, #32
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 80108d8:	b580      	push	{r7, lr}
 80108da:	b086      	sub	sp, #24
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	603b      	str	r3, [r7, #0]
 80108e4:	4613      	mov	r3, r2
 80108e6:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80108ee:	2b02      	cmp	r3, #2
 80108f0:	d002      	beq.n	80108f8 <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 80108f2:	f06f 0304 	mvn.w	r3, #4
 80108f6:	e017      	b.n	8010928 <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80108fc:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 80108fe:	8afa      	ldrh	r2, [r7, #22]
 8010900:	88fb      	ldrh	r3, [r7, #6]
 8010902:	429a      	cmp	r2, r3
 8010904:	d901      	bls.n	801090a <isotp_receive+0x32>
        copylen = payload_size;
 8010906:	88fb      	ldrh	r3, [r7, #6]
 8010908:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801090e:	8afa      	ldrh	r2, [r7, #22]
 8010910:	4619      	mov	r1, r3
 8010912:	68b8      	ldr	r0, [r7, #8]
 8010914:	f002 fd25 	bl	8013362 <memcpy>
    *out_size = copylen;
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	8afa      	ldrh	r2, [r7, #22]
 801091c:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2200      	movs	r2, #0
 8010922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return ISOTP_RET_OK;
 8010926:	2300      	movs	r3, #0
}
 8010928:	4618      	mov	r0, r3
 801092a:	3718      	adds	r7, #24
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	607a      	str	r2, [r7, #4]
 801093c:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 801093e:	2240      	movs	r2, #64	@ 0x40
 8010940:	2100      	movs	r1, #0
 8010942:	68f8      	ldr	r0, [r7, #12]
 8010944:	f002 fbb8 	bl	80130b8 <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2200      	movs	r2, #0
 801094c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2200      	movs	r2, #0
 8010954:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	68ba      	ldr	r2, [r7, #8]
 801095c:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	887a      	ldrh	r2, [r7, #2]
 8010968:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	69ba      	ldr	r2, [r7, #24]
 801096e:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	8bba      	ldrh	r2, [r7, #28]
 8010974:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    return;
 8010976:	bf00      	nop
}
 8010978:	3710      	adds	r7, #16
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}

0801097e <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 801097e:	b590      	push	{r4, r7, lr}
 8010980:	b085      	sub	sp, #20
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f893 3020 	ldrb.w	r3, [r3, #32]
 801098c:	2b01      	cmp	r3, #1
 801098e:	d15c      	bne.n	8010a4a <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 8010994:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010998:	4293      	cmp	r3, r2
 801099a:	d003      	beq.n	80109a4 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	8a1b      	ldrh	r3, [r3, #16]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d041      	beq.n	8010a28 <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d00c      	beq.n	80109c6 <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	7c9b      	ldrb	r3, [r3, #18]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d039      	beq.n	8010a28 <isotp_poll+0xaa>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	695b      	ldr	r3, [r3, #20]
 80109b8:	461c      	mov	r4, r3
 80109ba:	f7f0 fd89 	bl	80014d0 <isotp_user_get_ms>
 80109be:	4603      	mov	r3, r0
 80109c0:	1ae3      	subs	r3, r4, r3
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	da30      	bge.n	8010a28 <isotp_poll+0xaa>
            
            ret = isotp_send_consecutive_frame(link);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff fc4a 	bl	8010260 <isotp_send_consecutive_frame>
 80109cc:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d125      	bne.n	8010a20 <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	8a1b      	ldrh	r3, [r3, #16]
 80109d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80109dc:	4293      	cmp	r3, r2
 80109de:	d005      	beq.n	80109ec <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	8a1b      	ldrh	r3, [r3, #16]
 80109e4:	3b01      	subs	r3, #1
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80109ec:	f7f0 fd70 	bl	80014d0 <isotp_user_get_ms>
 80109f0:	4603      	mov	r3, r0
 80109f2:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 80109fa:	f7f0 fd69 	bl	80014d0 <isotp_user_get_ms>
 80109fe:	4602      	mov	r2, r0
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	7c9b      	ldrb	r3, [r3, #18]
 8010a04:	441a      	add	r2, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	899a      	ldrh	r2, [r3, #12]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	895b      	ldrh	r3, [r3, #10]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d308      	bcc.n	8010a28 <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f883 2020 	strb.w	r2, [r3, #32]
 8010a1e:	e003      	b.n	8010a28 <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2202      	movs	r2, #2
 8010a24:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	699b      	ldr	r3, [r3, #24]
 8010a2c:	461c      	mov	r4, r3
 8010a2e:	f7f0 fd4f 	bl	80014d0 <isotp_user_get_ms>
 8010a32:	4603      	mov	r3, r0
 8010a34:	1ae3      	subs	r3, r4, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	da07      	bge.n	8010a4a <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f06f 0201 	mvn.w	r2, #1
 8010a40:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2202      	movs	r2, #2
 8010a46:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d111      	bne.n	8010a78 <isotp_poll+0xfa>
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a58:	461c      	mov	r4, r3
 8010a5a:	f7f0 fd39 	bl	80014d0 <isotp_user_get_ms>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	1ae3      	subs	r3, r4, r3
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	da08      	bge.n	8010a78 <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f06f 0202 	mvn.w	r2, #2
 8010a6c:	639a      	str	r2, [r3, #56]	@ 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2200      	movs	r2, #0
 8010a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    return;
 8010a76:	bf00      	nop
 8010a78:	bf00      	nop
}
 8010a7a:	3714      	adds	r7, #20
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd90      	pop	{r4, r7, pc}

08010a80 <OS_task_init>:
/* Initialize object by assigning init and dispatch handler function */
void OS_task_init(
    OS_task * const pOS_task,
    OS_handler init,
    OS_handler dispatch) 
{
 8010a80:	b480      	push	{r7}
 8010a82:	b085      	sub	sp, #20
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
    pOS_task->init = init;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	68ba      	ldr	r2, [r7, #8]
 8010a90:	601a      	str	r2, [r3, #0]
    pOS_task->dispatch = dispatch;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	605a      	str	r2, [r3, #4]
}
 8010a98:	bf00      	nop
 8010a9a:	3714      	adds	r7, #20
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bc80      	pop	{r7}
 8010aa0:	4770      	bx	lr

08010aa2 <OS_task_create>:
    OS_task * const pOS_task,
    OS_taskPrio task_prio,
    OS_event_t const **pBuf ,
    OS_EQCt eqLen,
    OS_event_t const * const init_e)
{
 8010aa2:	b580      	push	{r7, lr}
 8010aa4:	b084      	sub	sp, #16
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	60f8      	str	r0, [r7, #12]
 8010aaa:	607a      	str	r2, [r7, #4]
 8010aac:	461a      	mov	r2, r3
 8010aae:	460b      	mov	r3, r1
 8010ab0:	72fb      	strb	r3, [r7, #11]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	72bb      	strb	r3, [r7, #10]
    /* check parameter */
    if ( task_prio > 0  /* the priority must be greater than 0 */
 8010ab6:	7afb      	ldrb	r3, [r7, #11]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d020      	beq.n	8010afe <OS_task_create+0x5c>
        && pBuf != (OS_event_t const **)0 /* The queue exists */
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d01d      	beq.n	8010afe <OS_task_create+0x5c>
        && eqLen > 0) { /* the length greater than 0 */
 8010ac2:	7abb      	ldrb	r3, [r7, #10]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d01a      	beq.n	8010afe <OS_task_create+0x5c>
        pOS_task->qBuf = pBuf;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	687a      	ldr	r2, [r7, #4]
 8010acc:	609a      	str	r2, [r3, #8]
        pOS_task->end = eqLen - 1;
 8010ace:	7abb      	ldrb	r3, [r7, #10]
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	b2da      	uxtb	r2, r3
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	731a      	strb	r2, [r3, #12]
        pOS_task->head = 0;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	735a      	strb	r2, [r3, #13]
        pOS_task->tail = 0;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	739a      	strb	r2, [r3, #14]
        pOS_task->nUsed = 0;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	73da      	strb	r2, [r3, #15]

        /* Set task priority */
        // OS_setTask_priority(pOS_task,task_prio);
        pOS_task->task_piro = task_prio - 1;
 8010aea:	7afb      	ldrb	r3, [r7, #11]
 8010aec:	3b01      	subs	r3, #1
 8010aee:	b2da      	uxtb	r2, r3
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	741a      	strb	r2, [r3, #16]


        /* Initialize task with initialization event */
        (*pOS_task->init)(pOS_task,init_e);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	69b9      	ldr	r1, [r7, #24]
 8010afa:	68f8      	ldr	r0, [r7, #12]
 8010afc:	4798      	blx	r3
    } 
}
 8010afe:	bf00      	nop
 8010b00:	3710      	adds	r7, #16
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
	...

08010b08 <OS_task_post>:
 * @brief Post the event to event queue of task 
 * 
 * @param pOS_task 
 * @param pEvent 
 */ 
void OS_task_post(OS_task *const pOS_task, OS_event_t const * const pEvent) {
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
    OS_ring_buf_tcb *pQueue = &pri_queue[pOS_task->task_piro];
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	7c1b      	ldrb	r3, [r3, #16]
 8010b16:	461a      	mov	r2, r3
 8010b18:	2358      	movs	r3, #88	@ 0x58
 8010b1a:	fb02 f303 	mul.w	r3, r2, r3
 8010b1e:	4a30      	ldr	r2, [pc, #192]	@ (8010be0 <OS_task_post+0xd8>)
 8010b20:	4413      	add	r3, r2
 8010b22:	60fb      	str	r3, [r7, #12]

    /* Check over flow of queue */
    if (pri_queue[pOS_task->task_piro].nUsed >= OS_TASK_PER_PRI || pOS_task->nUsed > pOS_task->end ) { /* full queue */
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	7c1b      	ldrb	r3, [r3, #16]
 8010b28:	4619      	mov	r1, r3
 8010b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8010be0 <OS_task_post+0xd8>)
 8010b2c:	2358      	movs	r3, #88	@ 0x58
 8010b2e:	fb01 f303 	mul.w	r3, r1, r3
 8010b32:	4413      	add	r3, r2
 8010b34:	3303      	adds	r3, #3
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	2b09      	cmp	r3, #9
 8010b3a:	d84d      	bhi.n	8010bd8 <OS_task_post+0xd0>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	7bda      	ldrb	r2, [r3, #15]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	7b1b      	ldrb	r3, [r3, #12]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d847      	bhi.n	8010bd8 <OS_task_post+0xd0>
        return;
    }

    /* insert tcb to queue */
    OS_PORT_CRIT_ENTRY();
 8010b48:	b672      	cpsid	i
    pQueue->buf_tcb[pQueue->head_index].pEvent = pEvent;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	00db      	lsls	r3, r3, #3
 8010b52:	4413      	add	r3, r2
 8010b54:	683a      	ldr	r2, [r7, #0]
 8010b56:	609a      	str	r2, [r3, #8]
    pQueue->buf_tcb[pQueue->head_index].pOS_task = pOS_task;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	00db      	lsls	r3, r3, #3
 8010b60:	4413      	add	r3, r2
 8010b62:	687a      	ldr	r2, [r7, #4]
 8010b64:	605a      	str	r2, [r3, #4]

    if (pQueue->head_index == 0) {
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d103      	bne.n	8010b76 <OS_task_post+0x6e>
        pQueue->head_index = OS_TASK_PER_PRI - 1; /* wrap around to end of the buffer */
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2209      	movs	r2, #9
 8010b72:	701a      	strb	r2, [r3, #0]
 8010b74:	e005      	b.n	8010b82 <OS_task_post+0x7a>
    } else {
        --pQueue->head_index;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	3b01      	subs	r3, #1
 8010b7c:	b2da      	uxtb	r2, r3
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	701a      	strb	r2, [r3, #0]
    }
    ++pQueue->nUsed; /* Increase number event used in queue */
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	78db      	ldrb	r3, [r3, #3]
 8010b86:	3301      	adds	r3, #1
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	70da      	strb	r2, [r3, #3]

    pOS_task->qBuf[pOS_task->head] = pEvent; /* insert event to queue */
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	689a      	ldr	r2, [r3, #8]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	7b5b      	ldrb	r3, [r3, #13]
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	4413      	add	r3, r2
 8010b9a:	683a      	ldr	r2, [r7, #0]
 8010b9c:	601a      	str	r2, [r3, #0]
    if (pOS_task->head == 0) { 
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	7b5b      	ldrb	r3, [r3, #13]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d104      	bne.n	8010bb0 <OS_task_post+0xa8>
        pOS_task->head = pOS_task->end; /* wrap around to end of the buffer */
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	7b1a      	ldrb	r2, [r3, #12]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	735a      	strb	r2, [r3, #13]
 8010bae:	e005      	b.n	8010bbc <OS_task_post+0xb4>
    } else {
        --pOS_task->head;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	7b5b      	ldrb	r3, [r3, #13]
 8010bb4:	3b01      	subs	r3, #1
 8010bb6:	b2da      	uxtb	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	735a      	strb	r2, [r3, #13]
    }
    ++pOS_task->nUsed; /* Increase number event used in queue */
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	7bdb      	ldrb	r3, [r3, #15]
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	73da      	strb	r2, [r3, #15]

    /* Post event -> make the interrupt */
    // OS_PORT_TASK_PEND();
    HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010bcc:	b25b      	sxtb	r3, r3
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7f1 ff79 	bl	8002ac6 <HAL_NVIC_SetPendingIRQ>
    OS_PORT_CRIT_EXIT();
 8010bd4:	b662      	cpsie	i
 8010bd6:	e000      	b.n	8010bda <OS_task_post+0xd2>
        return;
 8010bd8:	bf00      	nop
}
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}
 8010be0:	20001c90 	.word	0x20001c90

08010be4 <OS_task_post_event>:

void OS_task_post_event(OS_task *const pOS_task,uint8_t sig, uint8_t *data, uint32_t size) {
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	607a      	str	r2, [r7, #4]
 8010bee:	603b      	str	r3, [r7, #0]
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	72fb      	strb	r3, [r7, #11]
    OS_event_t *e = get_dynamic_event();
 8010bf4:	f000 f99c 	bl	8010f30 <get_dynamic_event>
 8010bf8:	6178      	str	r0, [r7, #20]
    set_sig_dynamic_event(e,sig);
 8010bfa:	7afb      	ldrb	r3, [r7, #11]
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	6978      	ldr	r0, [r7, #20]
 8010c00:	f000 f9e2 	bl	8010fc8 <set_sig_dynamic_event>
    set_data_dynamic_event(e,data,size);
 8010c04:	683a      	ldr	r2, [r7, #0]
 8010c06:	6879      	ldr	r1, [r7, #4]
 8010c08:	6978      	ldr	r0, [r7, #20]
 8010c0a:	f000 f9bb 	bl	8010f84 <set_data_dynamic_event>
    OS_task_post(pOS_task,e);
 8010c0e:	6979      	ldr	r1, [r7, #20]
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	f7ff ff79 	bl	8010b08 <OS_task_post>
}
 8010c16:	bf00      	nop
 8010c18:	3718      	adds	r7, #24
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}
	...

08010c20 <OS_TimeEvt_init>:

void OS_TimeEvt_init(
    OS_TimeEvt *pOS_Evt,
    uint16_t  sig,
    OS_task *task)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b085      	sub	sp, #20
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	460b      	mov	r3, r1
 8010c2a:	607a      	str	r2, [r7, #4]
 8010c2c:	817b      	strh	r3, [r7, #10]
    pOS_Evt->Time_event.sig = sig;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	897a      	ldrh	r2, [r7, #10]
 8010c32:	801a      	strh	r2, [r3, #0]
//    pOS_Evt->Time_event.data = 0;
    pOS_Evt->Time_event.len = 0;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2200      	movs	r2, #0
 8010c38:	645a      	str	r2, [r3, #68]	@ 0x44
    pOS_Evt->task_post = task;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	64da      	str	r2, [r3, #76]	@ 0x4c
    pOS_Evt->Time_Ctr = 0;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2200      	movs	r2, #0
 8010c44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* add new node to head of liked list */
    pOS_Evt->next = timeEvt_head;
 8010c50:	4b05      	ldr	r3, [pc, #20]	@ (8010c68 <OS_TimeEvt_init+0x48>)
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	649a      	str	r2, [r3, #72]	@ 0x48
    timeEvt_head = pOS_Evt;
 8010c58:	4a03      	ldr	r2, [pc, #12]	@ (8010c68 <OS_TimeEvt_init+0x48>)
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	6013      	str	r3, [r2, #0]
} 
 8010c5e:	bf00      	nop
 8010c60:	3714      	adds	r7, #20
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bc80      	pop	{r7}
 8010c66:	4770      	bx	lr
 8010c68:	20001d98 	.word	0x20001d98

08010c6c <OS_TimeEvt_Set>:
 * 
 * @param pOS_Evt Timer for generating event when TIMEOUT 
 * @param count TIMEOUT value 
 * @param interval interval value for periodic time event
 */
void OS_TimeEvt_Set(OS_TimeEvt *pOS_Evt, uint16_t count, uint16_t interval) {
 8010c6c:	b480      	push	{r7}
 8010c6e:	b083      	sub	sp, #12
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	460b      	mov	r3, r1
 8010c76:	807b      	strh	r3, [r7, #2]
 8010c78:	4613      	mov	r3, r2
 8010c7a:	803b      	strh	r3, [r7, #0]
    OS_PORT_CRIT_ENTRY();
 8010c7c:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = count;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	887a      	ldrh	r2, [r7, #2]
 8010c82:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = interval;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	883a      	ldrh	r2, [r7, #0]
 8010c8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 8010c8e:	b662      	cpsie	i
}
 8010c90:	bf00      	nop
 8010c92:	370c      	adds	r7, #12
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bc80      	pop	{r7}
 8010c98:	4770      	bx	lr

08010c9a <OS_TimeEvt_Stop>:

void OS_TimeEvt_Stop(OS_TimeEvt *pOS_Evt) {
 8010c9a:	b480      	push	{r7}
 8010c9c:	b083      	sub	sp, #12
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 8010ca2:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = 0;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 8010cb4:	b662      	cpsie	i
}
 8010cb6:	bf00      	nop
 8010cb8:	370c      	adds	r7, #12
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bc80      	pop	{r7}
 8010cbe:	4770      	bx	lr

08010cc0 <OS_TimeEvt_tick>:

/**
 * @brief function in systemtick handler (1ms) to execute task time OS 
 * 
 */
void OS_TimeEvt_tick(void) {
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
    /* run for all the node time event */
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 8010cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8010d34 <OS_TimeEvt_tick+0x74>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	607b      	str	r3, [r7, #4]
 8010ccc:	e029      	b.n	8010d22 <OS_TimeEvt_tick+0x62>
        OS_PORT_CRIT_ENTRY();
 8010cce:	b672      	cpsid	i
        if (node->Time_Ctr == 0) { /* down counter = 0  -> stop node */
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d101      	bne.n	8010cde <OS_TimeEvt_tick+0x1e>
            OS_PORT_CRIT_EXIT();
 8010cda:	b662      	cpsie	i
 8010cdc:	e01e      	b.n	8010d1c <OS_TimeEvt_tick+0x5c>
        } else if (node->Time_Ctr == 1) { /* TIMEOUT */
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d110      	bne.n	8010d0a <OS_TimeEvt_tick+0x4a>
            node->Time_Ctr = node->Time_interval;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 8010cf4:	b662      	cpsie	i
            /* Post event */
            // OS_task_post(node->task_post,&node->Time_event);
            OS_task_post_event(node->task_post,node->Time_event.sig,(uint8_t *)0,0);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	881b      	ldrh	r3, [r3, #0]
 8010cfe:	b2d9      	uxtb	r1, r3
 8010d00:	2300      	movs	r3, #0
 8010d02:	2200      	movs	r2, #0
 8010d04:	f7ff ff6e 	bl	8010be4 <OS_task_post_event>
 8010d08:	e008      	b.n	8010d1c <OS_TimeEvt_tick+0x5c>
        } else { /* count down value */
            --node->Time_Ctr;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010d10:	3b01      	subs	r3, #1
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 8010d1a:	b662      	cpsie	i
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010d20:	607b      	str	r3, [r7, #4]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d1d2      	bne.n	8010cce <OS_TimeEvt_tick+0xe>
        }
    }
}
 8010d28:	bf00      	nop
 8010d2a:	bf00      	nop
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	20001d98 	.word	0x20001d98

08010d38 <OS_task_activate>:
/**
 * @brief The task performs an action when it receives an event from the queue. Call in interrupt handler to get event and dispatch
 * 
 * @param pOS_task Task pointer
 */
void OS_task_activate(uint8_t prio_task) {
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b086      	sub	sp, #24
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	4603      	mov	r3, r0
 8010d40:	71fb      	strb	r3, [r7, #7]
    OS_ring_buf_tcb *pQueue = &pri_queue[prio_task - 1];
 8010d42:	79fb      	ldrb	r3, [r7, #7]
 8010d44:	3b01      	subs	r3, #1
 8010d46:	2258      	movs	r2, #88	@ 0x58
 8010d48:	fb02 f303 	mul.w	r3, r2, r3
 8010d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8010e08 <OS_task_activate+0xd0>)
 8010d4e:	4413      	add	r3, r2
 8010d50:	617b      	str	r3, [r7, #20]
    
    if (pQueue->nUsed == 0) { /* don't have tcb */
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	78db      	ldrb	r3, [r3, #3]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d050      	beq.n	8010dfc <OS_task_activate+0xc4>
        return;
    }
    
    uint8_t index = pQueue->tail_index;
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	785b      	ldrb	r3, [r3, #1]
 8010d5e:	74fb      	strb	r3, [r7, #19]
    if (pQueue->tail_index == 0) {
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	785b      	ldrb	r3, [r3, #1]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d103      	bne.n	8010d70 <OS_task_activate+0x38>
        pQueue->tail_index = OS_TASK_PER_PRI - 1; /* wrap around */
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	2209      	movs	r2, #9
 8010d6c:	705a      	strb	r2, [r3, #1]
 8010d6e:	e005      	b.n	8010d7c <OS_task_activate+0x44>
    } else {
        --pQueue->tail_index;
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	785b      	ldrb	r3, [r3, #1]
 8010d74:	3b01      	subs	r3, #1
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	705a      	strb	r2, [r3, #1]
    }

    --pQueue->nUsed;
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	78db      	ldrb	r3, [r3, #3]
 8010d80:	3b01      	subs	r3, #1
 8010d82:	b2da      	uxtb	r2, r3
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	70da      	strb	r2, [r3, #3]

    OS_task *pOS_task = pQueue->buf_tcb[index].pOS_task;
 8010d88:	7cfb      	ldrb	r3, [r7, #19]
 8010d8a:	697a      	ldr	r2, [r7, #20]
 8010d8c:	00db      	lsls	r3, r3, #3
 8010d8e:	4413      	add	r3, r2
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	60fb      	str	r3, [r7, #12]

    /* Check event in queue */
    if (pOS_task->nUsed == 0) { /* don't have event in queue */
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	7bdb      	ldrb	r3, [r3, #15]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d031      	beq.n	8010e00 <OS_task_activate+0xc8>
        return;
    }

    OS_event_t const *e_receive = pQueue->buf_tcb[index].pEvent;
 8010d9c:	7cfb      	ldrb	r3, [r7, #19]
 8010d9e:	697a      	ldr	r2, [r7, #20]
 8010da0:	00db      	lsls	r3, r3, #3
 8010da2:	4413      	add	r3, r2
 8010da4:	689b      	ldr	r3, [r3, #8]
 8010da6:	60bb      	str	r3, [r7, #8]
    if (pOS_task->tail == 0) {
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	7b9b      	ldrb	r3, [r3, #14]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d104      	bne.n	8010dba <OS_task_activate+0x82>
        pOS_task->tail = pOS_task->end; /* wrap around */
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	7b1a      	ldrb	r2, [r3, #12]
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	739a      	strb	r2, [r3, #14]
 8010db8:	e005      	b.n	8010dc6 <OS_task_activate+0x8e>
    } else {
        --pOS_task->tail;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	7b9b      	ldrb	r3, [r3, #14]
 8010dbe:	3b01      	subs	r3, #1
 8010dc0:	b2da      	uxtb	r2, r3
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	739a      	strb	r2, [r3, #14]
    }
    OS_PORT_CRIT_ENTRY();
 8010dc6:	b672      	cpsid	i
    // --pOS_task->nUsed;
    if (--pOS_task->nUsed > 0) { /* check have any event in queue */
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	7bdb      	ldrb	r3, [r3, #15]
 8010dcc:	3b01      	subs	r3, #1
 8010dce:	b2da      	uxtb	r2, r3
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	73da      	strb	r2, [r3, #15]
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	7bdb      	ldrb	r3, [r3, #15]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d005      	beq.n	8010de8 <OS_task_activate+0xb0>
        HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010de0:	b25b      	sxtb	r3, r3
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7f1 fe6f 	bl	8002ac6 <HAL_NVIC_SetPendingIRQ>
    }
    OS_PORT_CRIT_EXIT();
 8010de8:	b662      	cpsie	i

    /* Dispatch the received event to this task */
    (*pOS_task->dispatch)(pOS_task,e_receive);
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	68b9      	ldr	r1, [r7, #8]
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	4798      	blx	r3

    free_dynamic_event(e_receive);
 8010df4:	68b8      	ldr	r0, [r7, #8]
 8010df6:	f000 f86f 	bl	8010ed8 <free_dynamic_event>
 8010dfa:	e002      	b.n	8010e02 <OS_task_activate+0xca>
        return;
 8010dfc:	bf00      	nop
 8010dfe:	e000      	b.n	8010e02 <OS_task_activate+0xca>
        return;
 8010e00:	bf00      	nop
}
 8010e02:	3718      	adds	r7, #24
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	20001c90 	.word	0x20001c90

08010e0c <OS_priority_IRQ>:
 * @brief Set task priority 
 * 
 * @param pOS_task Task pointer 
 * @param prio task priority 
 */
void OS_priority_IRQ(uint8_t IRQ, OS_taskPrio prio) {
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	4603      	mov	r3, r0
 8010e14:	460a      	mov	r2, r1
 8010e16:	71fb      	strb	r3, [r7, #7]
 8010e18:	4613      	mov	r3, r2
 8010e1a:	71bb      	strb	r3, [r7, #6]
    HAL_NVIC_SetPriority(IRQ,(15U - prio),0);
 8010e1c:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8010e20:	79bb      	ldrb	r3, [r7, #6]
 8010e22:	f1c3 030f 	rsb	r3, r3, #15
 8010e26:	2200      	movs	r2, #0
 8010e28:	4619      	mov	r1, r3
 8010e2a:	f7f1 fe16 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQ);
 8010e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7f1 fe2d 	bl	8002a92 <HAL_NVIC_EnableIRQ>
}
 8010e38:	bf00      	nop
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <OS_prio_setIRQ>:
 * @brief Set the number IRQ for specific priority
 * 
 * @param prio priority begin from 1 
 * @param num_irq IRQ number 
 */
void OS_prio_setIRQ(uint8_t prio, uint8_t num_irq) {
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	4603      	mov	r3, r0
 8010e48:	460a      	mov	r2, r1
 8010e4a:	71fb      	strb	r3, [r7, #7]
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	71bb      	strb	r3, [r7, #6]
    if (prio < OS_PRI_MAX) {
 8010e50:	79fb      	ldrb	r3, [r7, #7]
 8010e52:	2b02      	cmp	r3, #2
 8010e54:	d809      	bhi.n	8010e6a <OS_prio_setIRQ+0x2a>
        pri_queue[prio - 1].nvic_irq = num_irq;
 8010e56:	79fb      	ldrb	r3, [r7, #7]
 8010e58:	3b01      	subs	r3, #1
 8010e5a:	79ba      	ldrb	r2, [r7, #6]
 8010e5c:	4905      	ldr	r1, [pc, #20]	@ (8010e74 <OS_prio_setIRQ+0x34>)
 8010e5e:	2058      	movs	r0, #88	@ 0x58
 8010e60:	fb00 f303 	mul.w	r3, r0, r3
 8010e64:	440b      	add	r3, r1
 8010e66:	3354      	adds	r3, #84	@ 0x54
 8010e68:	601a      	str	r2, [r3, #0]
    }
}
 8010e6a:	bf00      	nop
 8010e6c:	370c      	adds	r7, #12
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bc80      	pop	{r7}
 8010e72:	4770      	bx	lr
 8010e74:	20001c90 	.word	0x20001c90

08010e78 <OS_Test_setIRQ>:

void OS_Test_setIRQ(OS_task * const pAO, uint8_t num_irq) {
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	460b      	mov	r3, r1
 8010e82:	70fb      	strb	r3, [r7, #3]
    pAO->nvic_irq = num_irq;
 8010e84:	78fa      	ldrb	r2, [r7, #3]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	619a      	str	r2, [r3, #24]
}
 8010e8a:	bf00      	nop
 8010e8c:	370c      	adds	r7, #12
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bc80      	pop	{r7}
 8010e92:	4770      	bx	lr

08010e94 <dynamic_event_pool_init>:
static OS_event_t dynamic_event_pool[OS_EVT_POOL_SIZE];
static uint8_t dynamic_event_pool_free[OS_EVT_POOL_SIZE]; /* Store index in free */
static uint8_t dynamic_event_free_stack; /* point to the next index freen in pool */


void dynamic_event_pool_init(void) {
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 8010e9a:	b672      	cpsid	i

    dynamic_event_free_stack = 0;
 8010e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8010ed0 <dynamic_event_pool_init+0x3c>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	71fb      	strb	r3, [r7, #7]
 8010ea6:	e006      	b.n	8010eb6 <dynamic_event_pool_init+0x22>
        dynamic_event_pool_free[i] = i; /* Store the index free */
 8010ea8:	79fb      	ldrb	r3, [r7, #7]
 8010eaa:	490a      	ldr	r1, [pc, #40]	@ (8010ed4 <dynamic_event_pool_init+0x40>)
 8010eac:	79fa      	ldrb	r2, [r7, #7]
 8010eae:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 8010eb0:	79fb      	ldrb	r3, [r7, #7]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	71fb      	strb	r3, [r7, #7]
 8010eb6:	79fb      	ldrb	r3, [r7, #7]
 8010eb8:	2b09      	cmp	r3, #9
 8010eba:	d9f5      	bls.n	8010ea8 <dynamic_event_pool_init+0x14>
    }
    dynamic_event_free_stack = OS_EVT_POOL_SIZE;
 8010ebc:	4b04      	ldr	r3, [pc, #16]	@ (8010ed0 <dynamic_event_pool_init+0x3c>)
 8010ebe:	220a      	movs	r2, #10
 8010ec0:	701a      	strb	r2, [r3, #0]
    
    OS_PORT_CRIT_EXIT();
 8010ec2:	b662      	cpsie	i
}
 8010ec4:	bf00      	nop
 8010ec6:	370c      	adds	r7, #12
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bc80      	pop	{r7}
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	20002076 	.word	0x20002076
 8010ed4:	2000206c 	.word	0x2000206c

08010ed8 <free_dynamic_event>:


void free_dynamic_event(OS_event_t *e) {
 8010ed8:	b480      	push	{r7}
 8010eda:	b085      	sub	sp, #20
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 8010ee0:	b672      	cpsid	i

    uint8_t idx = e - dynamic_event_pool; /* Get index of event */
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8010f20 <free_dynamic_event+0x48>)
 8010ee6:	1a9b      	subs	r3, r3, r2
 8010ee8:	10db      	asrs	r3, r3, #3
 8010eea:	4a0e      	ldr	r2, [pc, #56]	@ (8010f24 <free_dynamic_event+0x4c>)
 8010eec:	fb02 f303 	mul.w	r3, r2, r3
 8010ef0:	73fb      	strb	r3, [r7, #15]
//    free(e->data); /* free allocated memory */
    if (idx > 0 && idx < OS_EVT_POOL_SIZE) {
 8010ef2:	7bfb      	ldrb	r3, [r7, #15]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d00c      	beq.n	8010f12 <free_dynamic_event+0x3a>
 8010ef8:	7bfb      	ldrb	r3, [r7, #15]
 8010efa:	2b09      	cmp	r3, #9
 8010efc:	d809      	bhi.n	8010f12 <free_dynamic_event+0x3a>
        dynamic_event_pool_free[dynamic_event_free_stack++] = idx; 
 8010efe:	4b0a      	ldr	r3, [pc, #40]	@ (8010f28 <free_dynamic_event+0x50>)
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	1c5a      	adds	r2, r3, #1
 8010f04:	b2d1      	uxtb	r1, r2
 8010f06:	4a08      	ldr	r2, [pc, #32]	@ (8010f28 <free_dynamic_event+0x50>)
 8010f08:	7011      	strb	r1, [r2, #0]
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	4a07      	ldr	r2, [pc, #28]	@ (8010f2c <free_dynamic_event+0x54>)
 8010f0e:	7bfb      	ldrb	r3, [r7, #15]
 8010f10:	5453      	strb	r3, [r2, r1]
    }

    OS_PORT_CRIT_EXIT();
 8010f12:	b662      	cpsie	i
}
 8010f14:	bf00      	nop
 8010f16:	3714      	adds	r7, #20
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bc80      	pop	{r7}
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	20001d9c 	.word	0x20001d9c
 8010f24:	38e38e39 	.word	0x38e38e39
 8010f28:	20002076 	.word	0x20002076
 8010f2c:	2000206c 	.word	0x2000206c

08010f30 <get_dynamic_event>:

OS_event_t *get_dynamic_event(void) {
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 8010f36:	b672      	cpsid	i
    
    if (dynamic_event_free_stack == 0) return NULL; /* full */
 8010f38:	4b0f      	ldr	r3, [pc, #60]	@ (8010f78 <get_dynamic_event+0x48>)
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d101      	bne.n	8010f44 <get_dynamic_event+0x14>
 8010f40:	2300      	movs	r3, #0
 8010f42:	e013      	b.n	8010f6c <get_dynamic_event+0x3c>
    uint8_t idx = dynamic_event_pool_free[--dynamic_event_free_stack]; /* Get index in free */
 8010f44:	4b0c      	ldr	r3, [pc, #48]	@ (8010f78 <get_dynamic_event+0x48>)
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	3b01      	subs	r3, #1
 8010f4a:	b2da      	uxtb	r2, r3
 8010f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f78 <get_dynamic_event+0x48>)
 8010f4e:	701a      	strb	r2, [r3, #0]
 8010f50:	4b09      	ldr	r3, [pc, #36]	@ (8010f78 <get_dynamic_event+0x48>)
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	461a      	mov	r2, r3
 8010f56:	4b09      	ldr	r3, [pc, #36]	@ (8010f7c <get_dynamic_event+0x4c>)
 8010f58:	5c9b      	ldrb	r3, [r3, r2]
 8010f5a:	71fb      	strb	r3, [r7, #7]
    
    OS_PORT_CRIT_EXIT();
 8010f5c:	b662      	cpsie	i
    return &dynamic_event_pool[idx];
 8010f5e:	79fa      	ldrb	r2, [r7, #7]
 8010f60:	4613      	mov	r3, r2
 8010f62:	00db      	lsls	r3, r3, #3
 8010f64:	4413      	add	r3, r2
 8010f66:	00db      	lsls	r3, r3, #3
 8010f68:	4a05      	ldr	r2, [pc, #20]	@ (8010f80 <get_dynamic_event+0x50>)
 8010f6a:	4413      	add	r3, r2
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	370c      	adds	r7, #12
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bc80      	pop	{r7}
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop
 8010f78:	20002076 	.word	0x20002076
 8010f7c:	2000206c 	.word	0x2000206c
 8010f80:	20001d9c 	.word	0x20001d9c

08010f84 <set_data_dynamic_event>:

void set_data_dynamic_event(OS_event_t *e, uint8_t *data, uint32_t len) {
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
    if (len != 0) {
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d00a      	beq.n	8010fac <set_data_dynamic_event+0x28>
        e->len = len;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy(e->data,data,len);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	3302      	adds	r3, #2
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	68b9      	ldr	r1, [r7, #8]
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f002 f9dc 	bl	8013362 <memcpy>
    } else {
        e->len = len;
        memset(e->data, 0, sizeof(e->data));
    }
}
 8010faa:	e009      	b.n	8010fc0 <set_data_dynamic_event+0x3c>
        e->len = len;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	645a      	str	r2, [r3, #68]	@ 0x44
        memset(e->data, 0, sizeof(e->data));
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	3302      	adds	r3, #2
 8010fb6:	2240      	movs	r2, #64	@ 0x40
 8010fb8:	2100      	movs	r1, #0
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f002 f87c 	bl	80130b8 <memset>
}
 8010fc0:	bf00      	nop
 8010fc2:	3710      	adds	r7, #16
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <set_sig_dynamic_event>:

void set_sig_dynamic_event(OS_event_t *e, uint8_t sig) {
 8010fc8:	b480      	push	{r7}
 8010fca:	b083      	sub	sp, #12
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	70fb      	strb	r3, [r7, #3]
    e->sig = sig;
 8010fd4:	78fb      	ldrb	r3, [r7, #3]
 8010fd6:	b29a      	uxth	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	801a      	strh	r2, [r3, #0]
}
 8010fdc:	bf00      	nop
 8010fde:	370c      	adds	r7, #12
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bc80      	pop	{r7}
 8010fe4:	4770      	bx	lr

08010fe6 <get_data_dynamic_event>:

uint8_t *get_data_dynamic_event(OS_event_t * const e) {
 8010fe6:	b480      	push	{r7}
 8010fe8:	b083      	sub	sp, #12
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
    return (e->data);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	3302      	adds	r3, #2
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	370c      	adds	r7, #12
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bc80      	pop	{r7}
 8010ffa:	4770      	bx	lr

08010ffc <__assert_func>:
 8010ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ffe:	4614      	mov	r4, r2
 8011000:	461a      	mov	r2, r3
 8011002:	4b09      	ldr	r3, [pc, #36]	@ (8011028 <__assert_func+0x2c>)
 8011004:	4605      	mov	r5, r0
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	68d8      	ldr	r0, [r3, #12]
 801100a:	b14c      	cbz	r4, 8011020 <__assert_func+0x24>
 801100c:	4b07      	ldr	r3, [pc, #28]	@ (801102c <__assert_func+0x30>)
 801100e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011012:	9100      	str	r1, [sp, #0]
 8011014:	462b      	mov	r3, r5
 8011016:	4906      	ldr	r1, [pc, #24]	@ (8011030 <__assert_func+0x34>)
 8011018:	f001 fe6e 	bl	8012cf8 <fiprintf>
 801101c:	f002 f9ba 	bl	8013394 <abort>
 8011020:	4b04      	ldr	r3, [pc, #16]	@ (8011034 <__assert_func+0x38>)
 8011022:	461c      	mov	r4, r3
 8011024:	e7f3      	b.n	801100e <__assert_func+0x12>
 8011026:	bf00      	nop
 8011028:	200002e4 	.word	0x200002e4
 801102c:	08016865 	.word	0x08016865
 8011030:	08016872 	.word	0x08016872
 8011034:	080168a0 	.word	0x080168a0

08011038 <atof>:
 8011038:	2100      	movs	r1, #0
 801103a:	f000 bec3 	b.w	8011dc4 <strtod>

0801103e <atoi>:
 801103e:	220a      	movs	r2, #10
 8011040:	2100      	movs	r1, #0
 8011042:	f000 bf47 	b.w	8011ed4 <strtol>
	...

08011048 <malloc>:
 8011048:	4b02      	ldr	r3, [pc, #8]	@ (8011054 <malloc+0xc>)
 801104a:	4601      	mov	r1, r0
 801104c:	6818      	ldr	r0, [r3, #0]
 801104e:	f000 b82d 	b.w	80110ac <_malloc_r>
 8011052:	bf00      	nop
 8011054:	200002e4 	.word	0x200002e4

08011058 <free>:
 8011058:	4b02      	ldr	r3, [pc, #8]	@ (8011064 <free+0xc>)
 801105a:	4601      	mov	r1, r0
 801105c:	6818      	ldr	r0, [r3, #0]
 801105e:	f002 bfff 	b.w	8014060 <_free_r>
 8011062:	bf00      	nop
 8011064:	200002e4 	.word	0x200002e4

08011068 <sbrk_aligned>:
 8011068:	b570      	push	{r4, r5, r6, lr}
 801106a:	4e0f      	ldr	r6, [pc, #60]	@ (80110a8 <sbrk_aligned+0x40>)
 801106c:	460c      	mov	r4, r1
 801106e:	6831      	ldr	r1, [r6, #0]
 8011070:	4605      	mov	r5, r0
 8011072:	b911      	cbnz	r1, 801107a <sbrk_aligned+0x12>
 8011074:	f002 f910 	bl	8013298 <_sbrk_r>
 8011078:	6030      	str	r0, [r6, #0]
 801107a:	4621      	mov	r1, r4
 801107c:	4628      	mov	r0, r5
 801107e:	f002 f90b 	bl	8013298 <_sbrk_r>
 8011082:	1c43      	adds	r3, r0, #1
 8011084:	d103      	bne.n	801108e <sbrk_aligned+0x26>
 8011086:	f04f 34ff 	mov.w	r4, #4294967295
 801108a:	4620      	mov	r0, r4
 801108c:	bd70      	pop	{r4, r5, r6, pc}
 801108e:	1cc4      	adds	r4, r0, #3
 8011090:	f024 0403 	bic.w	r4, r4, #3
 8011094:	42a0      	cmp	r0, r4
 8011096:	d0f8      	beq.n	801108a <sbrk_aligned+0x22>
 8011098:	1a21      	subs	r1, r4, r0
 801109a:	4628      	mov	r0, r5
 801109c:	f002 f8fc 	bl	8013298 <_sbrk_r>
 80110a0:	3001      	adds	r0, #1
 80110a2:	d1f2      	bne.n	801108a <sbrk_aligned+0x22>
 80110a4:	e7ef      	b.n	8011086 <sbrk_aligned+0x1e>
 80110a6:	bf00      	nop
 80110a8:	20002078 	.word	0x20002078

080110ac <_malloc_r>:
 80110ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110b0:	1ccd      	adds	r5, r1, #3
 80110b2:	f025 0503 	bic.w	r5, r5, #3
 80110b6:	3508      	adds	r5, #8
 80110b8:	2d0c      	cmp	r5, #12
 80110ba:	bf38      	it	cc
 80110bc:	250c      	movcc	r5, #12
 80110be:	2d00      	cmp	r5, #0
 80110c0:	4606      	mov	r6, r0
 80110c2:	db01      	blt.n	80110c8 <_malloc_r+0x1c>
 80110c4:	42a9      	cmp	r1, r5
 80110c6:	d904      	bls.n	80110d2 <_malloc_r+0x26>
 80110c8:	230c      	movs	r3, #12
 80110ca:	6033      	str	r3, [r6, #0]
 80110cc:	2000      	movs	r0, #0
 80110ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80111a8 <_malloc_r+0xfc>
 80110d6:	f000 f869 	bl	80111ac <__malloc_lock>
 80110da:	f8d8 3000 	ldr.w	r3, [r8]
 80110de:	461c      	mov	r4, r3
 80110e0:	bb44      	cbnz	r4, 8011134 <_malloc_r+0x88>
 80110e2:	4629      	mov	r1, r5
 80110e4:	4630      	mov	r0, r6
 80110e6:	f7ff ffbf 	bl	8011068 <sbrk_aligned>
 80110ea:	1c43      	adds	r3, r0, #1
 80110ec:	4604      	mov	r4, r0
 80110ee:	d158      	bne.n	80111a2 <_malloc_r+0xf6>
 80110f0:	f8d8 4000 	ldr.w	r4, [r8]
 80110f4:	4627      	mov	r7, r4
 80110f6:	2f00      	cmp	r7, #0
 80110f8:	d143      	bne.n	8011182 <_malloc_r+0xd6>
 80110fa:	2c00      	cmp	r4, #0
 80110fc:	d04b      	beq.n	8011196 <_malloc_r+0xea>
 80110fe:	6823      	ldr	r3, [r4, #0]
 8011100:	4639      	mov	r1, r7
 8011102:	4630      	mov	r0, r6
 8011104:	eb04 0903 	add.w	r9, r4, r3
 8011108:	f002 f8c6 	bl	8013298 <_sbrk_r>
 801110c:	4581      	cmp	r9, r0
 801110e:	d142      	bne.n	8011196 <_malloc_r+0xea>
 8011110:	6821      	ldr	r1, [r4, #0]
 8011112:	4630      	mov	r0, r6
 8011114:	1a6d      	subs	r5, r5, r1
 8011116:	4629      	mov	r1, r5
 8011118:	f7ff ffa6 	bl	8011068 <sbrk_aligned>
 801111c:	3001      	adds	r0, #1
 801111e:	d03a      	beq.n	8011196 <_malloc_r+0xea>
 8011120:	6823      	ldr	r3, [r4, #0]
 8011122:	442b      	add	r3, r5
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	f8d8 3000 	ldr.w	r3, [r8]
 801112a:	685a      	ldr	r2, [r3, #4]
 801112c:	bb62      	cbnz	r2, 8011188 <_malloc_r+0xdc>
 801112e:	f8c8 7000 	str.w	r7, [r8]
 8011132:	e00f      	b.n	8011154 <_malloc_r+0xa8>
 8011134:	6822      	ldr	r2, [r4, #0]
 8011136:	1b52      	subs	r2, r2, r5
 8011138:	d420      	bmi.n	801117c <_malloc_r+0xd0>
 801113a:	2a0b      	cmp	r2, #11
 801113c:	d917      	bls.n	801116e <_malloc_r+0xc2>
 801113e:	1961      	adds	r1, r4, r5
 8011140:	42a3      	cmp	r3, r4
 8011142:	6025      	str	r5, [r4, #0]
 8011144:	bf18      	it	ne
 8011146:	6059      	strne	r1, [r3, #4]
 8011148:	6863      	ldr	r3, [r4, #4]
 801114a:	bf08      	it	eq
 801114c:	f8c8 1000 	streq.w	r1, [r8]
 8011150:	5162      	str	r2, [r4, r5]
 8011152:	604b      	str	r3, [r1, #4]
 8011154:	4630      	mov	r0, r6
 8011156:	f000 f82f 	bl	80111b8 <__malloc_unlock>
 801115a:	f104 000b 	add.w	r0, r4, #11
 801115e:	1d23      	adds	r3, r4, #4
 8011160:	f020 0007 	bic.w	r0, r0, #7
 8011164:	1ac2      	subs	r2, r0, r3
 8011166:	bf1c      	itt	ne
 8011168:	1a1b      	subne	r3, r3, r0
 801116a:	50a3      	strne	r3, [r4, r2]
 801116c:	e7af      	b.n	80110ce <_malloc_r+0x22>
 801116e:	6862      	ldr	r2, [r4, #4]
 8011170:	42a3      	cmp	r3, r4
 8011172:	bf0c      	ite	eq
 8011174:	f8c8 2000 	streq.w	r2, [r8]
 8011178:	605a      	strne	r2, [r3, #4]
 801117a:	e7eb      	b.n	8011154 <_malloc_r+0xa8>
 801117c:	4623      	mov	r3, r4
 801117e:	6864      	ldr	r4, [r4, #4]
 8011180:	e7ae      	b.n	80110e0 <_malloc_r+0x34>
 8011182:	463c      	mov	r4, r7
 8011184:	687f      	ldr	r7, [r7, #4]
 8011186:	e7b6      	b.n	80110f6 <_malloc_r+0x4a>
 8011188:	461a      	mov	r2, r3
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	42a3      	cmp	r3, r4
 801118e:	d1fb      	bne.n	8011188 <_malloc_r+0xdc>
 8011190:	2300      	movs	r3, #0
 8011192:	6053      	str	r3, [r2, #4]
 8011194:	e7de      	b.n	8011154 <_malloc_r+0xa8>
 8011196:	230c      	movs	r3, #12
 8011198:	4630      	mov	r0, r6
 801119a:	6033      	str	r3, [r6, #0]
 801119c:	f000 f80c 	bl	80111b8 <__malloc_unlock>
 80111a0:	e794      	b.n	80110cc <_malloc_r+0x20>
 80111a2:	6005      	str	r5, [r0, #0]
 80111a4:	e7d6      	b.n	8011154 <_malloc_r+0xa8>
 80111a6:	bf00      	nop
 80111a8:	2000207c 	.word	0x2000207c

080111ac <__malloc_lock>:
 80111ac:	4801      	ldr	r0, [pc, #4]	@ (80111b4 <__malloc_lock+0x8>)
 80111ae:	f002 b8c0 	b.w	8013332 <__retarget_lock_acquire_recursive>
 80111b2:	bf00      	nop
 80111b4:	200021c0 	.word	0x200021c0

080111b8 <__malloc_unlock>:
 80111b8:	4801      	ldr	r0, [pc, #4]	@ (80111c0 <__malloc_unlock+0x8>)
 80111ba:	f002 b8bb 	b.w	8013334 <__retarget_lock_release_recursive>
 80111be:	bf00      	nop
 80111c0:	200021c0 	.word	0x200021c0

080111c4 <sulp>:
 80111c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c8:	460f      	mov	r7, r1
 80111ca:	4690      	mov	r8, r2
 80111cc:	f003 fe48 	bl	8014e60 <__ulp>
 80111d0:	4604      	mov	r4, r0
 80111d2:	460d      	mov	r5, r1
 80111d4:	f1b8 0f00 	cmp.w	r8, #0
 80111d8:	d011      	beq.n	80111fe <sulp+0x3a>
 80111da:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80111de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	dd0b      	ble.n	80111fe <sulp+0x3a>
 80111e6:	2400      	movs	r4, #0
 80111e8:	051b      	lsls	r3, r3, #20
 80111ea:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80111ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80111f2:	4622      	mov	r2, r4
 80111f4:	462b      	mov	r3, r5
 80111f6:	f7ef f979 	bl	80004ec <__aeabi_dmul>
 80111fa:	4604      	mov	r4, r0
 80111fc:	460d      	mov	r5, r1
 80111fe:	4620      	mov	r0, r4
 8011200:	4629      	mov	r1, r5
 8011202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011208 <_strtod_l>:
 8011208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120c:	b09f      	sub	sp, #124	@ 0x7c
 801120e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011210:	2200      	movs	r2, #0
 8011212:	460c      	mov	r4, r1
 8011214:	921a      	str	r2, [sp, #104]	@ 0x68
 8011216:	f04f 0a00 	mov.w	sl, #0
 801121a:	f04f 0b00 	mov.w	fp, #0
 801121e:	460a      	mov	r2, r1
 8011220:	9005      	str	r0, [sp, #20]
 8011222:	9219      	str	r2, [sp, #100]	@ 0x64
 8011224:	7811      	ldrb	r1, [r2, #0]
 8011226:	292b      	cmp	r1, #43	@ 0x2b
 8011228:	d048      	beq.n	80112bc <_strtod_l+0xb4>
 801122a:	d836      	bhi.n	801129a <_strtod_l+0x92>
 801122c:	290d      	cmp	r1, #13
 801122e:	d830      	bhi.n	8011292 <_strtod_l+0x8a>
 8011230:	2908      	cmp	r1, #8
 8011232:	d830      	bhi.n	8011296 <_strtod_l+0x8e>
 8011234:	2900      	cmp	r1, #0
 8011236:	d039      	beq.n	80112ac <_strtod_l+0xa4>
 8011238:	2200      	movs	r2, #0
 801123a:	920e      	str	r2, [sp, #56]	@ 0x38
 801123c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801123e:	782a      	ldrb	r2, [r5, #0]
 8011240:	2a30      	cmp	r2, #48	@ 0x30
 8011242:	f040 80b0 	bne.w	80113a6 <_strtod_l+0x19e>
 8011246:	786a      	ldrb	r2, [r5, #1]
 8011248:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801124c:	2a58      	cmp	r2, #88	@ 0x58
 801124e:	d16c      	bne.n	801132a <_strtod_l+0x122>
 8011250:	9302      	str	r3, [sp, #8]
 8011252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011254:	4a8f      	ldr	r2, [pc, #572]	@ (8011494 <_strtod_l+0x28c>)
 8011256:	9301      	str	r3, [sp, #4]
 8011258:	ab1a      	add	r3, sp, #104	@ 0x68
 801125a:	9300      	str	r3, [sp, #0]
 801125c:	9805      	ldr	r0, [sp, #20]
 801125e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011260:	a919      	add	r1, sp, #100	@ 0x64
 8011262:	f002 ffad 	bl	80141c0 <__gethex>
 8011266:	f010 060f 	ands.w	r6, r0, #15
 801126a:	4604      	mov	r4, r0
 801126c:	d005      	beq.n	801127a <_strtod_l+0x72>
 801126e:	2e06      	cmp	r6, #6
 8011270:	d126      	bne.n	80112c0 <_strtod_l+0xb8>
 8011272:	2300      	movs	r3, #0
 8011274:	3501      	adds	r5, #1
 8011276:	9519      	str	r5, [sp, #100]	@ 0x64
 8011278:	930e      	str	r3, [sp, #56]	@ 0x38
 801127a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801127c:	2b00      	cmp	r3, #0
 801127e:	f040 8582 	bne.w	8011d86 <_strtod_l+0xb7e>
 8011282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011284:	b1bb      	cbz	r3, 80112b6 <_strtod_l+0xae>
 8011286:	4650      	mov	r0, sl
 8011288:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 801128c:	b01f      	add	sp, #124	@ 0x7c
 801128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011292:	2920      	cmp	r1, #32
 8011294:	d1d0      	bne.n	8011238 <_strtod_l+0x30>
 8011296:	3201      	adds	r2, #1
 8011298:	e7c3      	b.n	8011222 <_strtod_l+0x1a>
 801129a:	292d      	cmp	r1, #45	@ 0x2d
 801129c:	d1cc      	bne.n	8011238 <_strtod_l+0x30>
 801129e:	2101      	movs	r1, #1
 80112a0:	910e      	str	r1, [sp, #56]	@ 0x38
 80112a2:	1c51      	adds	r1, r2, #1
 80112a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80112a6:	7852      	ldrb	r2, [r2, #1]
 80112a8:	2a00      	cmp	r2, #0
 80112aa:	d1c7      	bne.n	801123c <_strtod_l+0x34>
 80112ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80112ae:	9419      	str	r4, [sp, #100]	@ 0x64
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f040 8566 	bne.w	8011d82 <_strtod_l+0xb7a>
 80112b6:	4650      	mov	r0, sl
 80112b8:	4659      	mov	r1, fp
 80112ba:	e7e7      	b.n	801128c <_strtod_l+0x84>
 80112bc:	2100      	movs	r1, #0
 80112be:	e7ef      	b.n	80112a0 <_strtod_l+0x98>
 80112c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80112c2:	b13a      	cbz	r2, 80112d4 <_strtod_l+0xcc>
 80112c4:	2135      	movs	r1, #53	@ 0x35
 80112c6:	a81c      	add	r0, sp, #112	@ 0x70
 80112c8:	f003 feba 	bl	8015040 <__copybits>
 80112cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80112ce:	9805      	ldr	r0, [sp, #20]
 80112d0:	f003 fa9a 	bl	8014808 <_Bfree>
 80112d4:	3e01      	subs	r6, #1
 80112d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80112d8:	2e04      	cmp	r6, #4
 80112da:	d806      	bhi.n	80112ea <_strtod_l+0xe2>
 80112dc:	e8df f006 	tbb	[pc, r6]
 80112e0:	201d0314 	.word	0x201d0314
 80112e4:	14          	.byte	0x14
 80112e5:	00          	.byte	0x00
 80112e6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80112ea:	05e1      	lsls	r1, r4, #23
 80112ec:	bf48      	it	mi
 80112ee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80112f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80112f6:	0d1b      	lsrs	r3, r3, #20
 80112f8:	051b      	lsls	r3, r3, #20
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d1bd      	bne.n	801127a <_strtod_l+0x72>
 80112fe:	f001 ffed 	bl	80132dc <__errno>
 8011302:	2322      	movs	r3, #34	@ 0x22
 8011304:	6003      	str	r3, [r0, #0]
 8011306:	e7b8      	b.n	801127a <_strtod_l+0x72>
 8011308:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801130c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011310:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011314:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011318:	e7e7      	b.n	80112ea <_strtod_l+0xe2>
 801131a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011498 <_strtod_l+0x290>
 801131e:	e7e4      	b.n	80112ea <_strtod_l+0xe2>
 8011320:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011324:	f04f 3aff 	mov.w	sl, #4294967295
 8011328:	e7df      	b.n	80112ea <_strtod_l+0xe2>
 801132a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801132c:	1c5a      	adds	r2, r3, #1
 801132e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011330:	785b      	ldrb	r3, [r3, #1]
 8011332:	2b30      	cmp	r3, #48	@ 0x30
 8011334:	d0f9      	beq.n	801132a <_strtod_l+0x122>
 8011336:	2b00      	cmp	r3, #0
 8011338:	d09f      	beq.n	801127a <_strtod_l+0x72>
 801133a:	2301      	movs	r3, #1
 801133c:	2700      	movs	r7, #0
 801133e:	220a      	movs	r2, #10
 8011340:	46b9      	mov	r9, r7
 8011342:	9308      	str	r3, [sp, #32]
 8011344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011346:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011348:	930c      	str	r3, [sp, #48]	@ 0x30
 801134a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801134c:	7805      	ldrb	r5, [r0, #0]
 801134e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011352:	b2d9      	uxtb	r1, r3
 8011354:	2909      	cmp	r1, #9
 8011356:	d928      	bls.n	80113aa <_strtod_l+0x1a2>
 8011358:	2201      	movs	r2, #1
 801135a:	4950      	ldr	r1, [pc, #320]	@ (801149c <_strtod_l+0x294>)
 801135c:	f001 fee3 	bl	8013126 <strncmp>
 8011360:	2800      	cmp	r0, #0
 8011362:	d032      	beq.n	80113ca <_strtod_l+0x1c2>
 8011364:	2000      	movs	r0, #0
 8011366:	462a      	mov	r2, r5
 8011368:	4603      	mov	r3, r0
 801136a:	464d      	mov	r5, r9
 801136c:	900a      	str	r0, [sp, #40]	@ 0x28
 801136e:	2a65      	cmp	r2, #101	@ 0x65
 8011370:	d001      	beq.n	8011376 <_strtod_l+0x16e>
 8011372:	2a45      	cmp	r2, #69	@ 0x45
 8011374:	d114      	bne.n	80113a0 <_strtod_l+0x198>
 8011376:	b91d      	cbnz	r5, 8011380 <_strtod_l+0x178>
 8011378:	9a08      	ldr	r2, [sp, #32]
 801137a:	4302      	orrs	r2, r0
 801137c:	d096      	beq.n	80112ac <_strtod_l+0xa4>
 801137e:	2500      	movs	r5, #0
 8011380:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011382:	1c62      	adds	r2, r4, #1
 8011384:	9219      	str	r2, [sp, #100]	@ 0x64
 8011386:	7862      	ldrb	r2, [r4, #1]
 8011388:	2a2b      	cmp	r2, #43	@ 0x2b
 801138a:	d07a      	beq.n	8011482 <_strtod_l+0x27a>
 801138c:	2a2d      	cmp	r2, #45	@ 0x2d
 801138e:	d07e      	beq.n	801148e <_strtod_l+0x286>
 8011390:	f04f 0c00 	mov.w	ip, #0
 8011394:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011398:	2909      	cmp	r1, #9
 801139a:	f240 8085 	bls.w	80114a8 <_strtod_l+0x2a0>
 801139e:	9419      	str	r4, [sp, #100]	@ 0x64
 80113a0:	f04f 0800 	mov.w	r8, #0
 80113a4:	e0a5      	b.n	80114f2 <_strtod_l+0x2ea>
 80113a6:	2300      	movs	r3, #0
 80113a8:	e7c8      	b.n	801133c <_strtod_l+0x134>
 80113aa:	f1b9 0f08 	cmp.w	r9, #8
 80113ae:	bfd8      	it	le
 80113b0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80113b2:	f100 0001 	add.w	r0, r0, #1
 80113b6:	bfd6      	itet	le
 80113b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80113bc:	fb02 3707 	mlagt	r7, r2, r7, r3
 80113c0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80113c2:	f109 0901 	add.w	r9, r9, #1
 80113c6:	9019      	str	r0, [sp, #100]	@ 0x64
 80113c8:	e7bf      	b.n	801134a <_strtod_l+0x142>
 80113ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80113cc:	1c5a      	adds	r2, r3, #1
 80113ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80113d0:	785a      	ldrb	r2, [r3, #1]
 80113d2:	f1b9 0f00 	cmp.w	r9, #0
 80113d6:	d03b      	beq.n	8011450 <_strtod_l+0x248>
 80113d8:	464d      	mov	r5, r9
 80113da:	900a      	str	r0, [sp, #40]	@ 0x28
 80113dc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80113e0:	2b09      	cmp	r3, #9
 80113e2:	d912      	bls.n	801140a <_strtod_l+0x202>
 80113e4:	2301      	movs	r3, #1
 80113e6:	e7c2      	b.n	801136e <_strtod_l+0x166>
 80113e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80113ea:	3001      	adds	r0, #1
 80113ec:	1c5a      	adds	r2, r3, #1
 80113ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80113f0:	785a      	ldrb	r2, [r3, #1]
 80113f2:	2a30      	cmp	r2, #48	@ 0x30
 80113f4:	d0f8      	beq.n	80113e8 <_strtod_l+0x1e0>
 80113f6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80113fa:	2b08      	cmp	r3, #8
 80113fc:	f200 84c8 	bhi.w	8011d90 <_strtod_l+0xb88>
 8011400:	900a      	str	r0, [sp, #40]	@ 0x28
 8011402:	2000      	movs	r0, #0
 8011404:	4605      	mov	r5, r0
 8011406:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011408:	930c      	str	r3, [sp, #48]	@ 0x30
 801140a:	3a30      	subs	r2, #48	@ 0x30
 801140c:	f100 0301 	add.w	r3, r0, #1
 8011410:	d018      	beq.n	8011444 <_strtod_l+0x23c>
 8011412:	462e      	mov	r6, r5
 8011414:	f04f 0e0a 	mov.w	lr, #10
 8011418:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801141a:	4419      	add	r1, r3
 801141c:	910a      	str	r1, [sp, #40]	@ 0x28
 801141e:	1c71      	adds	r1, r6, #1
 8011420:	eba1 0c05 	sub.w	ip, r1, r5
 8011424:	4563      	cmp	r3, ip
 8011426:	dc15      	bgt.n	8011454 <_strtod_l+0x24c>
 8011428:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801142c:	182b      	adds	r3, r5, r0
 801142e:	2b08      	cmp	r3, #8
 8011430:	f105 0501 	add.w	r5, r5, #1
 8011434:	4405      	add	r5, r0
 8011436:	dc1a      	bgt.n	801146e <_strtod_l+0x266>
 8011438:	230a      	movs	r3, #10
 801143a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801143c:	fb03 2301 	mla	r3, r3, r1, r2
 8011440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011442:	2300      	movs	r3, #0
 8011444:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011446:	4618      	mov	r0, r3
 8011448:	1c51      	adds	r1, r2, #1
 801144a:	9119      	str	r1, [sp, #100]	@ 0x64
 801144c:	7852      	ldrb	r2, [r2, #1]
 801144e:	e7c5      	b.n	80113dc <_strtod_l+0x1d4>
 8011450:	4648      	mov	r0, r9
 8011452:	e7ce      	b.n	80113f2 <_strtod_l+0x1ea>
 8011454:	2e08      	cmp	r6, #8
 8011456:	dc05      	bgt.n	8011464 <_strtod_l+0x25c>
 8011458:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801145a:	fb0e f606 	mul.w	r6, lr, r6
 801145e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011460:	460e      	mov	r6, r1
 8011462:	e7dc      	b.n	801141e <_strtod_l+0x216>
 8011464:	2910      	cmp	r1, #16
 8011466:	bfd8      	it	le
 8011468:	fb0e f707 	mulle.w	r7, lr, r7
 801146c:	e7f8      	b.n	8011460 <_strtod_l+0x258>
 801146e:	2b0f      	cmp	r3, #15
 8011470:	bfdc      	itt	le
 8011472:	230a      	movle	r3, #10
 8011474:	fb03 2707 	mlale	r7, r3, r7, r2
 8011478:	e7e3      	b.n	8011442 <_strtod_l+0x23a>
 801147a:	2300      	movs	r3, #0
 801147c:	930a      	str	r3, [sp, #40]	@ 0x28
 801147e:	2301      	movs	r3, #1
 8011480:	e77a      	b.n	8011378 <_strtod_l+0x170>
 8011482:	f04f 0c00 	mov.w	ip, #0
 8011486:	1ca2      	adds	r2, r4, #2
 8011488:	9219      	str	r2, [sp, #100]	@ 0x64
 801148a:	78a2      	ldrb	r2, [r4, #2]
 801148c:	e782      	b.n	8011394 <_strtod_l+0x18c>
 801148e:	f04f 0c01 	mov.w	ip, #1
 8011492:	e7f8      	b.n	8011486 <_strtod_l+0x27e>
 8011494:	08016aac 	.word	0x08016aac
 8011498:	7ff00000 	.word	0x7ff00000
 801149c:	080168a1 	.word	0x080168a1
 80114a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114a2:	1c51      	adds	r1, r2, #1
 80114a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80114a6:	7852      	ldrb	r2, [r2, #1]
 80114a8:	2a30      	cmp	r2, #48	@ 0x30
 80114aa:	d0f9      	beq.n	80114a0 <_strtod_l+0x298>
 80114ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80114b0:	2908      	cmp	r1, #8
 80114b2:	f63f af75 	bhi.w	80113a0 <_strtod_l+0x198>
 80114b6:	f04f 080a 	mov.w	r8, #10
 80114ba:	3a30      	subs	r2, #48	@ 0x30
 80114bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80114be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114c0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80114c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80114c4:	1c56      	adds	r6, r2, #1
 80114c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80114c8:	7852      	ldrb	r2, [r2, #1]
 80114ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80114ce:	f1be 0f09 	cmp.w	lr, #9
 80114d2:	d939      	bls.n	8011548 <_strtod_l+0x340>
 80114d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80114d6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80114da:	1a76      	subs	r6, r6, r1
 80114dc:	2e08      	cmp	r6, #8
 80114de:	dc03      	bgt.n	80114e8 <_strtod_l+0x2e0>
 80114e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80114e2:	4588      	cmp	r8, r1
 80114e4:	bfa8      	it	ge
 80114e6:	4688      	movge	r8, r1
 80114e8:	f1bc 0f00 	cmp.w	ip, #0
 80114ec:	d001      	beq.n	80114f2 <_strtod_l+0x2ea>
 80114ee:	f1c8 0800 	rsb	r8, r8, #0
 80114f2:	2d00      	cmp	r5, #0
 80114f4:	d14e      	bne.n	8011594 <_strtod_l+0x38c>
 80114f6:	9908      	ldr	r1, [sp, #32]
 80114f8:	4308      	orrs	r0, r1
 80114fa:	f47f aebe 	bne.w	801127a <_strtod_l+0x72>
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f47f aed4 	bne.w	80112ac <_strtod_l+0xa4>
 8011504:	2a69      	cmp	r2, #105	@ 0x69
 8011506:	d028      	beq.n	801155a <_strtod_l+0x352>
 8011508:	dc25      	bgt.n	8011556 <_strtod_l+0x34e>
 801150a:	2a49      	cmp	r2, #73	@ 0x49
 801150c:	d025      	beq.n	801155a <_strtod_l+0x352>
 801150e:	2a4e      	cmp	r2, #78	@ 0x4e
 8011510:	f47f aecc 	bne.w	80112ac <_strtod_l+0xa4>
 8011514:	4999      	ldr	r1, [pc, #612]	@ (801177c <_strtod_l+0x574>)
 8011516:	a819      	add	r0, sp, #100	@ 0x64
 8011518:	f003 f874 	bl	8014604 <__match>
 801151c:	2800      	cmp	r0, #0
 801151e:	f43f aec5 	beq.w	80112ac <_strtod_l+0xa4>
 8011522:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	2b28      	cmp	r3, #40	@ 0x28
 8011528:	d12e      	bne.n	8011588 <_strtod_l+0x380>
 801152a:	4995      	ldr	r1, [pc, #596]	@ (8011780 <_strtod_l+0x578>)
 801152c:	aa1c      	add	r2, sp, #112	@ 0x70
 801152e:	a819      	add	r0, sp, #100	@ 0x64
 8011530:	f003 f87c 	bl	801462c <__hexnan>
 8011534:	2805      	cmp	r0, #5
 8011536:	d127      	bne.n	8011588 <_strtod_l+0x380>
 8011538:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801153a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801153e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011542:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011546:	e698      	b.n	801127a <_strtod_l+0x72>
 8011548:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801154a:	fb08 2101 	mla	r1, r8, r1, r2
 801154e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011552:	9209      	str	r2, [sp, #36]	@ 0x24
 8011554:	e7b5      	b.n	80114c2 <_strtod_l+0x2ba>
 8011556:	2a6e      	cmp	r2, #110	@ 0x6e
 8011558:	e7da      	b.n	8011510 <_strtod_l+0x308>
 801155a:	498a      	ldr	r1, [pc, #552]	@ (8011784 <_strtod_l+0x57c>)
 801155c:	a819      	add	r0, sp, #100	@ 0x64
 801155e:	f003 f851 	bl	8014604 <__match>
 8011562:	2800      	cmp	r0, #0
 8011564:	f43f aea2 	beq.w	80112ac <_strtod_l+0xa4>
 8011568:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801156a:	4987      	ldr	r1, [pc, #540]	@ (8011788 <_strtod_l+0x580>)
 801156c:	3b01      	subs	r3, #1
 801156e:	a819      	add	r0, sp, #100	@ 0x64
 8011570:	9319      	str	r3, [sp, #100]	@ 0x64
 8011572:	f003 f847 	bl	8014604 <__match>
 8011576:	b910      	cbnz	r0, 801157e <_strtod_l+0x376>
 8011578:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801157a:	3301      	adds	r3, #1
 801157c:	9319      	str	r3, [sp, #100]	@ 0x64
 801157e:	f04f 0a00 	mov.w	sl, #0
 8011582:	f8df b208 	ldr.w	fp, [pc, #520]	@ 801178c <_strtod_l+0x584>
 8011586:	e678      	b.n	801127a <_strtod_l+0x72>
 8011588:	4881      	ldr	r0, [pc, #516]	@ (8011790 <_strtod_l+0x588>)
 801158a:	f001 fef9 	bl	8013380 <nan>
 801158e:	4682      	mov	sl, r0
 8011590:	468b      	mov	fp, r1
 8011592:	e672      	b.n	801127a <_strtod_l+0x72>
 8011594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011596:	f1b9 0f00 	cmp.w	r9, #0
 801159a:	bf08      	it	eq
 801159c:	46a9      	moveq	r9, r5
 801159e:	eba8 0303 	sub.w	r3, r8, r3
 80115a2:	2d10      	cmp	r5, #16
 80115a4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80115a6:	462c      	mov	r4, r5
 80115a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80115aa:	bfa8      	it	ge
 80115ac:	2410      	movge	r4, #16
 80115ae:	f7ee ff23 	bl	80003f8 <__aeabi_ui2d>
 80115b2:	2d09      	cmp	r5, #9
 80115b4:	4682      	mov	sl, r0
 80115b6:	468b      	mov	fp, r1
 80115b8:	dc11      	bgt.n	80115de <_strtod_l+0x3d6>
 80115ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f43f ae5c 	beq.w	801127a <_strtod_l+0x72>
 80115c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115c4:	dd76      	ble.n	80116b4 <_strtod_l+0x4ac>
 80115c6:	2b16      	cmp	r3, #22
 80115c8:	dc5d      	bgt.n	8011686 <_strtod_l+0x47e>
 80115ca:	4972      	ldr	r1, [pc, #456]	@ (8011794 <_strtod_l+0x58c>)
 80115cc:	4652      	mov	r2, sl
 80115ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80115d2:	465b      	mov	r3, fp
 80115d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115d8:	f7ee ff88 	bl	80004ec <__aeabi_dmul>
 80115dc:	e7d7      	b.n	801158e <_strtod_l+0x386>
 80115de:	4b6d      	ldr	r3, [pc, #436]	@ (8011794 <_strtod_l+0x58c>)
 80115e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80115e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80115e8:	f7ee ff80 	bl	80004ec <__aeabi_dmul>
 80115ec:	4682      	mov	sl, r0
 80115ee:	4638      	mov	r0, r7
 80115f0:	468b      	mov	fp, r1
 80115f2:	f7ee ff01 	bl	80003f8 <__aeabi_ui2d>
 80115f6:	4602      	mov	r2, r0
 80115f8:	460b      	mov	r3, r1
 80115fa:	4650      	mov	r0, sl
 80115fc:	4659      	mov	r1, fp
 80115fe:	f7ee fdbf 	bl	8000180 <__adddf3>
 8011602:	2d0f      	cmp	r5, #15
 8011604:	4682      	mov	sl, r0
 8011606:	468b      	mov	fp, r1
 8011608:	ddd7      	ble.n	80115ba <_strtod_l+0x3b2>
 801160a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801160c:	1b2c      	subs	r4, r5, r4
 801160e:	441c      	add	r4, r3
 8011610:	2c00      	cmp	r4, #0
 8011612:	f340 8093 	ble.w	801173c <_strtod_l+0x534>
 8011616:	f014 030f 	ands.w	r3, r4, #15
 801161a:	d00a      	beq.n	8011632 <_strtod_l+0x42a>
 801161c:	495d      	ldr	r1, [pc, #372]	@ (8011794 <_strtod_l+0x58c>)
 801161e:	4652      	mov	r2, sl
 8011620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011628:	465b      	mov	r3, fp
 801162a:	f7ee ff5f 	bl	80004ec <__aeabi_dmul>
 801162e:	4682      	mov	sl, r0
 8011630:	468b      	mov	fp, r1
 8011632:	f034 040f 	bics.w	r4, r4, #15
 8011636:	d073      	beq.n	8011720 <_strtod_l+0x518>
 8011638:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801163c:	dd49      	ble.n	80116d2 <_strtod_l+0x4ca>
 801163e:	2400      	movs	r4, #0
 8011640:	46a0      	mov	r8, r4
 8011642:	46a1      	mov	r9, r4
 8011644:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011646:	2322      	movs	r3, #34	@ 0x22
 8011648:	f04f 0a00 	mov.w	sl, #0
 801164c:	9a05      	ldr	r2, [sp, #20]
 801164e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 801178c <_strtod_l+0x584>
 8011652:	6013      	str	r3, [r2, #0]
 8011654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011656:	2b00      	cmp	r3, #0
 8011658:	f43f ae0f 	beq.w	801127a <_strtod_l+0x72>
 801165c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801165e:	9805      	ldr	r0, [sp, #20]
 8011660:	f003 f8d2 	bl	8014808 <_Bfree>
 8011664:	4649      	mov	r1, r9
 8011666:	9805      	ldr	r0, [sp, #20]
 8011668:	f003 f8ce 	bl	8014808 <_Bfree>
 801166c:	4641      	mov	r1, r8
 801166e:	9805      	ldr	r0, [sp, #20]
 8011670:	f003 f8ca 	bl	8014808 <_Bfree>
 8011674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011676:	9805      	ldr	r0, [sp, #20]
 8011678:	f003 f8c6 	bl	8014808 <_Bfree>
 801167c:	4621      	mov	r1, r4
 801167e:	9805      	ldr	r0, [sp, #20]
 8011680:	f003 f8c2 	bl	8014808 <_Bfree>
 8011684:	e5f9      	b.n	801127a <_strtod_l+0x72>
 8011686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011688:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801168c:	4293      	cmp	r3, r2
 801168e:	dbbc      	blt.n	801160a <_strtod_l+0x402>
 8011690:	4c40      	ldr	r4, [pc, #256]	@ (8011794 <_strtod_l+0x58c>)
 8011692:	f1c5 050f 	rsb	r5, r5, #15
 8011696:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801169a:	4652      	mov	r2, sl
 801169c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116a0:	465b      	mov	r3, fp
 80116a2:	f7ee ff23 	bl	80004ec <__aeabi_dmul>
 80116a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116a8:	1b5d      	subs	r5, r3, r5
 80116aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80116ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80116b2:	e791      	b.n	80115d8 <_strtod_l+0x3d0>
 80116b4:	3316      	adds	r3, #22
 80116b6:	dba8      	blt.n	801160a <_strtod_l+0x402>
 80116b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116ba:	4650      	mov	r0, sl
 80116bc:	eba3 0808 	sub.w	r8, r3, r8
 80116c0:	4b34      	ldr	r3, [pc, #208]	@ (8011794 <_strtod_l+0x58c>)
 80116c2:	4659      	mov	r1, fp
 80116c4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80116c8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80116cc:	f7ef f838 	bl	8000740 <__aeabi_ddiv>
 80116d0:	e75d      	b.n	801158e <_strtod_l+0x386>
 80116d2:	2300      	movs	r3, #0
 80116d4:	4650      	mov	r0, sl
 80116d6:	4659      	mov	r1, fp
 80116d8:	461e      	mov	r6, r3
 80116da:	4f2f      	ldr	r7, [pc, #188]	@ (8011798 <_strtod_l+0x590>)
 80116dc:	1124      	asrs	r4, r4, #4
 80116de:	2c01      	cmp	r4, #1
 80116e0:	dc21      	bgt.n	8011726 <_strtod_l+0x51e>
 80116e2:	b10b      	cbz	r3, 80116e8 <_strtod_l+0x4e0>
 80116e4:	4682      	mov	sl, r0
 80116e6:	468b      	mov	fp, r1
 80116e8:	492b      	ldr	r1, [pc, #172]	@ (8011798 <_strtod_l+0x590>)
 80116ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80116ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80116f2:	4652      	mov	r2, sl
 80116f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116f8:	465b      	mov	r3, fp
 80116fa:	f7ee fef7 	bl	80004ec <__aeabi_dmul>
 80116fe:	4b23      	ldr	r3, [pc, #140]	@ (801178c <_strtod_l+0x584>)
 8011700:	460a      	mov	r2, r1
 8011702:	400b      	ands	r3, r1
 8011704:	4925      	ldr	r1, [pc, #148]	@ (801179c <_strtod_l+0x594>)
 8011706:	4682      	mov	sl, r0
 8011708:	428b      	cmp	r3, r1
 801170a:	d898      	bhi.n	801163e <_strtod_l+0x436>
 801170c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011710:	428b      	cmp	r3, r1
 8011712:	bf86      	itte	hi
 8011714:	f04f 3aff 	movhi.w	sl, #4294967295
 8011718:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80117a0 <_strtod_l+0x598>
 801171c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011720:	2300      	movs	r3, #0
 8011722:	9308      	str	r3, [sp, #32]
 8011724:	e076      	b.n	8011814 <_strtod_l+0x60c>
 8011726:	07e2      	lsls	r2, r4, #31
 8011728:	d504      	bpl.n	8011734 <_strtod_l+0x52c>
 801172a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801172e:	f7ee fedd 	bl	80004ec <__aeabi_dmul>
 8011732:	2301      	movs	r3, #1
 8011734:	3601      	adds	r6, #1
 8011736:	1064      	asrs	r4, r4, #1
 8011738:	3708      	adds	r7, #8
 801173a:	e7d0      	b.n	80116de <_strtod_l+0x4d6>
 801173c:	d0f0      	beq.n	8011720 <_strtod_l+0x518>
 801173e:	4264      	negs	r4, r4
 8011740:	f014 020f 	ands.w	r2, r4, #15
 8011744:	d00a      	beq.n	801175c <_strtod_l+0x554>
 8011746:	4b13      	ldr	r3, [pc, #76]	@ (8011794 <_strtod_l+0x58c>)
 8011748:	4650      	mov	r0, sl
 801174a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801174e:	4659      	mov	r1, fp
 8011750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011754:	f7ee fff4 	bl	8000740 <__aeabi_ddiv>
 8011758:	4682      	mov	sl, r0
 801175a:	468b      	mov	fp, r1
 801175c:	1124      	asrs	r4, r4, #4
 801175e:	d0df      	beq.n	8011720 <_strtod_l+0x518>
 8011760:	2c1f      	cmp	r4, #31
 8011762:	dd1f      	ble.n	80117a4 <_strtod_l+0x59c>
 8011764:	2400      	movs	r4, #0
 8011766:	46a0      	mov	r8, r4
 8011768:	46a1      	mov	r9, r4
 801176a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801176c:	2322      	movs	r3, #34	@ 0x22
 801176e:	9a05      	ldr	r2, [sp, #20]
 8011770:	f04f 0a00 	mov.w	sl, #0
 8011774:	f04f 0b00 	mov.w	fp, #0
 8011778:	6013      	str	r3, [r2, #0]
 801177a:	e76b      	b.n	8011654 <_strtod_l+0x44c>
 801177c:	080168b0 	.word	0x080168b0
 8011780:	08016a98 	.word	0x08016a98
 8011784:	080168a8 	.word	0x080168a8
 8011788:	08016958 	.word	0x08016958
 801178c:	7ff00000 	.word	0x7ff00000
 8011790:	080168a0 	.word	0x080168a0
 8011794:	08016c20 	.word	0x08016c20
 8011798:	08016bf8 	.word	0x08016bf8
 801179c:	7ca00000 	.word	0x7ca00000
 80117a0:	7fefffff 	.word	0x7fefffff
 80117a4:	f014 0310 	ands.w	r3, r4, #16
 80117a8:	bf18      	it	ne
 80117aa:	236a      	movne	r3, #106	@ 0x6a
 80117ac:	4650      	mov	r0, sl
 80117ae:	9308      	str	r3, [sp, #32]
 80117b0:	4659      	mov	r1, fp
 80117b2:	2300      	movs	r3, #0
 80117b4:	4e77      	ldr	r6, [pc, #476]	@ (8011994 <_strtod_l+0x78c>)
 80117b6:	07e7      	lsls	r7, r4, #31
 80117b8:	d504      	bpl.n	80117c4 <_strtod_l+0x5bc>
 80117ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80117be:	f7ee fe95 	bl	80004ec <__aeabi_dmul>
 80117c2:	2301      	movs	r3, #1
 80117c4:	1064      	asrs	r4, r4, #1
 80117c6:	f106 0608 	add.w	r6, r6, #8
 80117ca:	d1f4      	bne.n	80117b6 <_strtod_l+0x5ae>
 80117cc:	b10b      	cbz	r3, 80117d2 <_strtod_l+0x5ca>
 80117ce:	4682      	mov	sl, r0
 80117d0:	468b      	mov	fp, r1
 80117d2:	9b08      	ldr	r3, [sp, #32]
 80117d4:	b1b3      	cbz	r3, 8011804 <_strtod_l+0x5fc>
 80117d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80117da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80117de:	2b00      	cmp	r3, #0
 80117e0:	4659      	mov	r1, fp
 80117e2:	dd0f      	ble.n	8011804 <_strtod_l+0x5fc>
 80117e4:	2b1f      	cmp	r3, #31
 80117e6:	dd58      	ble.n	801189a <_strtod_l+0x692>
 80117e8:	2b34      	cmp	r3, #52	@ 0x34
 80117ea:	bfd8      	it	le
 80117ec:	f04f 33ff 	movle.w	r3, #4294967295
 80117f0:	f04f 0a00 	mov.w	sl, #0
 80117f4:	bfcf      	iteee	gt
 80117f6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80117fa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80117fe:	4093      	lslle	r3, r2
 8011800:	ea03 0b01 	andle.w	fp, r3, r1
 8011804:	2200      	movs	r2, #0
 8011806:	2300      	movs	r3, #0
 8011808:	4650      	mov	r0, sl
 801180a:	4659      	mov	r1, fp
 801180c:	f7ef f8d6 	bl	80009bc <__aeabi_dcmpeq>
 8011810:	2800      	cmp	r0, #0
 8011812:	d1a7      	bne.n	8011764 <_strtod_l+0x55c>
 8011814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011816:	464a      	mov	r2, r9
 8011818:	9300      	str	r3, [sp, #0]
 801181a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801181c:	462b      	mov	r3, r5
 801181e:	9805      	ldr	r0, [sp, #20]
 8011820:	f003 f85a 	bl	80148d8 <__s2b>
 8011824:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011826:	2800      	cmp	r0, #0
 8011828:	f43f af09 	beq.w	801163e <_strtod_l+0x436>
 801182c:	2400      	movs	r4, #0
 801182e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011832:	2a00      	cmp	r2, #0
 8011834:	eba3 0308 	sub.w	r3, r3, r8
 8011838:	bfa8      	it	ge
 801183a:	2300      	movge	r3, #0
 801183c:	46a0      	mov	r8, r4
 801183e:	9312      	str	r3, [sp, #72]	@ 0x48
 8011840:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011844:	9316      	str	r3, [sp, #88]	@ 0x58
 8011846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011848:	9805      	ldr	r0, [sp, #20]
 801184a:	6859      	ldr	r1, [r3, #4]
 801184c:	f002 ff9c 	bl	8014788 <_Balloc>
 8011850:	4681      	mov	r9, r0
 8011852:	2800      	cmp	r0, #0
 8011854:	f43f aef7 	beq.w	8011646 <_strtod_l+0x43e>
 8011858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801185a:	300c      	adds	r0, #12
 801185c:	691a      	ldr	r2, [r3, #16]
 801185e:	f103 010c 	add.w	r1, r3, #12
 8011862:	3202      	adds	r2, #2
 8011864:	0092      	lsls	r2, r2, #2
 8011866:	f001 fd7c 	bl	8013362 <memcpy>
 801186a:	ab1c      	add	r3, sp, #112	@ 0x70
 801186c:	9301      	str	r3, [sp, #4]
 801186e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	4652      	mov	r2, sl
 8011874:	465b      	mov	r3, fp
 8011876:	9805      	ldr	r0, [sp, #20]
 8011878:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801187c:	f003 fb58 	bl	8014f30 <__d2b>
 8011880:	901a      	str	r0, [sp, #104]	@ 0x68
 8011882:	2800      	cmp	r0, #0
 8011884:	f43f aedf 	beq.w	8011646 <_strtod_l+0x43e>
 8011888:	2101      	movs	r1, #1
 801188a:	9805      	ldr	r0, [sp, #20]
 801188c:	f003 f8ba 	bl	8014a04 <__i2b>
 8011890:	4680      	mov	r8, r0
 8011892:	b948      	cbnz	r0, 80118a8 <_strtod_l+0x6a0>
 8011894:	f04f 0800 	mov.w	r8, #0
 8011898:	e6d5      	b.n	8011646 <_strtod_l+0x43e>
 801189a:	f04f 32ff 	mov.w	r2, #4294967295
 801189e:	fa02 f303 	lsl.w	r3, r2, r3
 80118a2:	ea03 0a0a 	and.w	sl, r3, sl
 80118a6:	e7ad      	b.n	8011804 <_strtod_l+0x5fc>
 80118a8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80118aa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80118ac:	2d00      	cmp	r5, #0
 80118ae:	bfab      	itete	ge
 80118b0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80118b2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80118b4:	18ef      	addge	r7, r5, r3
 80118b6:	1b5e      	sublt	r6, r3, r5
 80118b8:	9b08      	ldr	r3, [sp, #32]
 80118ba:	bfa8      	it	ge
 80118bc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80118be:	eba5 0503 	sub.w	r5, r5, r3
 80118c2:	4415      	add	r5, r2
 80118c4:	4b34      	ldr	r3, [pc, #208]	@ (8011998 <_strtod_l+0x790>)
 80118c6:	f105 35ff 	add.w	r5, r5, #4294967295
 80118ca:	bfb8      	it	lt
 80118cc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80118ce:	429d      	cmp	r5, r3
 80118d0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80118d4:	da50      	bge.n	8011978 <_strtod_l+0x770>
 80118d6:	1b5b      	subs	r3, r3, r5
 80118d8:	2b1f      	cmp	r3, #31
 80118da:	f04f 0101 	mov.w	r1, #1
 80118de:	eba2 0203 	sub.w	r2, r2, r3
 80118e2:	dc3d      	bgt.n	8011960 <_strtod_l+0x758>
 80118e4:	fa01 f303 	lsl.w	r3, r1, r3
 80118e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80118ea:	2300      	movs	r3, #0
 80118ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80118ee:	18bd      	adds	r5, r7, r2
 80118f0:	9b08      	ldr	r3, [sp, #32]
 80118f2:	42af      	cmp	r7, r5
 80118f4:	4416      	add	r6, r2
 80118f6:	441e      	add	r6, r3
 80118f8:	463b      	mov	r3, r7
 80118fa:	bfa8      	it	ge
 80118fc:	462b      	movge	r3, r5
 80118fe:	42b3      	cmp	r3, r6
 8011900:	bfa8      	it	ge
 8011902:	4633      	movge	r3, r6
 8011904:	2b00      	cmp	r3, #0
 8011906:	bfc2      	ittt	gt
 8011908:	1aed      	subgt	r5, r5, r3
 801190a:	1af6      	subgt	r6, r6, r3
 801190c:	1aff      	subgt	r7, r7, r3
 801190e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011910:	2b00      	cmp	r3, #0
 8011912:	dd16      	ble.n	8011942 <_strtod_l+0x73a>
 8011914:	4641      	mov	r1, r8
 8011916:	461a      	mov	r2, r3
 8011918:	9805      	ldr	r0, [sp, #20]
 801191a:	f003 f92b 	bl	8014b74 <__pow5mult>
 801191e:	4680      	mov	r8, r0
 8011920:	2800      	cmp	r0, #0
 8011922:	d0b7      	beq.n	8011894 <_strtod_l+0x68c>
 8011924:	4601      	mov	r1, r0
 8011926:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011928:	9805      	ldr	r0, [sp, #20]
 801192a:	f003 f881 	bl	8014a30 <__multiply>
 801192e:	900a      	str	r0, [sp, #40]	@ 0x28
 8011930:	2800      	cmp	r0, #0
 8011932:	f43f ae88 	beq.w	8011646 <_strtod_l+0x43e>
 8011936:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011938:	9805      	ldr	r0, [sp, #20]
 801193a:	f002 ff65 	bl	8014808 <_Bfree>
 801193e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011940:	931a      	str	r3, [sp, #104]	@ 0x68
 8011942:	2d00      	cmp	r5, #0
 8011944:	dc1d      	bgt.n	8011982 <_strtod_l+0x77a>
 8011946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011948:	2b00      	cmp	r3, #0
 801194a:	dd27      	ble.n	801199c <_strtod_l+0x794>
 801194c:	4649      	mov	r1, r9
 801194e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011950:	9805      	ldr	r0, [sp, #20]
 8011952:	f003 f90f 	bl	8014b74 <__pow5mult>
 8011956:	4681      	mov	r9, r0
 8011958:	bb00      	cbnz	r0, 801199c <_strtod_l+0x794>
 801195a:	f04f 0900 	mov.w	r9, #0
 801195e:	e672      	b.n	8011646 <_strtod_l+0x43e>
 8011960:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011964:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011968:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801196c:	35e2      	adds	r5, #226	@ 0xe2
 801196e:	fa01 f305 	lsl.w	r3, r1, r5
 8011972:	9310      	str	r3, [sp, #64]	@ 0x40
 8011974:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011976:	e7ba      	b.n	80118ee <_strtod_l+0x6e6>
 8011978:	2300      	movs	r3, #0
 801197a:	9310      	str	r3, [sp, #64]	@ 0x40
 801197c:	2301      	movs	r3, #1
 801197e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011980:	e7b5      	b.n	80118ee <_strtod_l+0x6e6>
 8011982:	462a      	mov	r2, r5
 8011984:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011986:	9805      	ldr	r0, [sp, #20]
 8011988:	f003 f94e 	bl	8014c28 <__lshift>
 801198c:	901a      	str	r0, [sp, #104]	@ 0x68
 801198e:	2800      	cmp	r0, #0
 8011990:	d1d9      	bne.n	8011946 <_strtod_l+0x73e>
 8011992:	e658      	b.n	8011646 <_strtod_l+0x43e>
 8011994:	08016ac0 	.word	0x08016ac0
 8011998:	fffffc02 	.word	0xfffffc02
 801199c:	2e00      	cmp	r6, #0
 801199e:	dd07      	ble.n	80119b0 <_strtod_l+0x7a8>
 80119a0:	4649      	mov	r1, r9
 80119a2:	4632      	mov	r2, r6
 80119a4:	9805      	ldr	r0, [sp, #20]
 80119a6:	f003 f93f 	bl	8014c28 <__lshift>
 80119aa:	4681      	mov	r9, r0
 80119ac:	2800      	cmp	r0, #0
 80119ae:	d0d4      	beq.n	801195a <_strtod_l+0x752>
 80119b0:	2f00      	cmp	r7, #0
 80119b2:	dd08      	ble.n	80119c6 <_strtod_l+0x7be>
 80119b4:	4641      	mov	r1, r8
 80119b6:	463a      	mov	r2, r7
 80119b8:	9805      	ldr	r0, [sp, #20]
 80119ba:	f003 f935 	bl	8014c28 <__lshift>
 80119be:	4680      	mov	r8, r0
 80119c0:	2800      	cmp	r0, #0
 80119c2:	f43f ae40 	beq.w	8011646 <_strtod_l+0x43e>
 80119c6:	464a      	mov	r2, r9
 80119c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80119ca:	9805      	ldr	r0, [sp, #20]
 80119cc:	f003 f9b4 	bl	8014d38 <__mdiff>
 80119d0:	4604      	mov	r4, r0
 80119d2:	2800      	cmp	r0, #0
 80119d4:	f43f ae37 	beq.w	8011646 <_strtod_l+0x43e>
 80119d8:	68c3      	ldr	r3, [r0, #12]
 80119da:	4641      	mov	r1, r8
 80119dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80119de:	2300      	movs	r3, #0
 80119e0:	60c3      	str	r3, [r0, #12]
 80119e2:	f003 f98d 	bl	8014d00 <__mcmp>
 80119e6:	2800      	cmp	r0, #0
 80119e8:	da3d      	bge.n	8011a66 <_strtod_l+0x85e>
 80119ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119ec:	ea53 030a 	orrs.w	r3, r3, sl
 80119f0:	d163      	bne.n	8011aba <_strtod_l+0x8b2>
 80119f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d15f      	bne.n	8011aba <_strtod_l+0x8b2>
 80119fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80119fe:	0d1b      	lsrs	r3, r3, #20
 8011a00:	051b      	lsls	r3, r3, #20
 8011a02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011a06:	d958      	bls.n	8011aba <_strtod_l+0x8b2>
 8011a08:	6963      	ldr	r3, [r4, #20]
 8011a0a:	b913      	cbnz	r3, 8011a12 <_strtod_l+0x80a>
 8011a0c:	6923      	ldr	r3, [r4, #16]
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	dd53      	ble.n	8011aba <_strtod_l+0x8b2>
 8011a12:	4621      	mov	r1, r4
 8011a14:	2201      	movs	r2, #1
 8011a16:	9805      	ldr	r0, [sp, #20]
 8011a18:	f003 f906 	bl	8014c28 <__lshift>
 8011a1c:	4641      	mov	r1, r8
 8011a1e:	4604      	mov	r4, r0
 8011a20:	f003 f96e 	bl	8014d00 <__mcmp>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	dd48      	ble.n	8011aba <_strtod_l+0x8b2>
 8011a28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a2c:	9a08      	ldr	r2, [sp, #32]
 8011a2e:	0d1b      	lsrs	r3, r3, #20
 8011a30:	051b      	lsls	r3, r3, #20
 8011a32:	2a00      	cmp	r2, #0
 8011a34:	d062      	beq.n	8011afc <_strtod_l+0x8f4>
 8011a36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011a3a:	d85f      	bhi.n	8011afc <_strtod_l+0x8f4>
 8011a3c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011a40:	f67f ae94 	bls.w	801176c <_strtod_l+0x564>
 8011a44:	4650      	mov	r0, sl
 8011a46:	4659      	mov	r1, fp
 8011a48:	4ba3      	ldr	r3, [pc, #652]	@ (8011cd8 <_strtod_l+0xad0>)
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	f7ee fd4e 	bl	80004ec <__aeabi_dmul>
 8011a50:	4ba2      	ldr	r3, [pc, #648]	@ (8011cdc <_strtod_l+0xad4>)
 8011a52:	4682      	mov	sl, r0
 8011a54:	400b      	ands	r3, r1
 8011a56:	468b      	mov	fp, r1
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	f47f adff 	bne.w	801165c <_strtod_l+0x454>
 8011a5e:	2322      	movs	r3, #34	@ 0x22
 8011a60:	9a05      	ldr	r2, [sp, #20]
 8011a62:	6013      	str	r3, [r2, #0]
 8011a64:	e5fa      	b.n	801165c <_strtod_l+0x454>
 8011a66:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011a6a:	d165      	bne.n	8011b38 <_strtod_l+0x930>
 8011a6c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011a6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a72:	b35a      	cbz	r2, 8011acc <_strtod_l+0x8c4>
 8011a74:	4a9a      	ldr	r2, [pc, #616]	@ (8011ce0 <_strtod_l+0xad8>)
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d12b      	bne.n	8011ad2 <_strtod_l+0x8ca>
 8011a7a:	9b08      	ldr	r3, [sp, #32]
 8011a7c:	4651      	mov	r1, sl
 8011a7e:	b303      	cbz	r3, 8011ac2 <_strtod_l+0x8ba>
 8011a80:	465a      	mov	r2, fp
 8011a82:	4b96      	ldr	r3, [pc, #600]	@ (8011cdc <_strtod_l+0xad4>)
 8011a84:	4013      	ands	r3, r2
 8011a86:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a8e:	d81b      	bhi.n	8011ac8 <_strtod_l+0x8c0>
 8011a90:	0d1b      	lsrs	r3, r3, #20
 8011a92:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011a96:	fa02 f303 	lsl.w	r3, r2, r3
 8011a9a:	4299      	cmp	r1, r3
 8011a9c:	d119      	bne.n	8011ad2 <_strtod_l+0x8ca>
 8011a9e:	4b91      	ldr	r3, [pc, #580]	@ (8011ce4 <_strtod_l+0xadc>)
 8011aa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d102      	bne.n	8011aac <_strtod_l+0x8a4>
 8011aa6:	3101      	adds	r1, #1
 8011aa8:	f43f adcd 	beq.w	8011646 <_strtod_l+0x43e>
 8011aac:	f04f 0a00 	mov.w	sl, #0
 8011ab0:	4b8a      	ldr	r3, [pc, #552]	@ (8011cdc <_strtod_l+0xad4>)
 8011ab2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ab4:	401a      	ands	r2, r3
 8011ab6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011aba:	9b08      	ldr	r3, [sp, #32]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d1c1      	bne.n	8011a44 <_strtod_l+0x83c>
 8011ac0:	e5cc      	b.n	801165c <_strtod_l+0x454>
 8011ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ac6:	e7e8      	b.n	8011a9a <_strtod_l+0x892>
 8011ac8:	4613      	mov	r3, r2
 8011aca:	e7e6      	b.n	8011a9a <_strtod_l+0x892>
 8011acc:	ea53 030a 	orrs.w	r3, r3, sl
 8011ad0:	d0aa      	beq.n	8011a28 <_strtod_l+0x820>
 8011ad2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ad4:	b1db      	cbz	r3, 8011b0e <_strtod_l+0x906>
 8011ad6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ad8:	4213      	tst	r3, r2
 8011ada:	d0ee      	beq.n	8011aba <_strtod_l+0x8b2>
 8011adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ade:	4650      	mov	r0, sl
 8011ae0:	4659      	mov	r1, fp
 8011ae2:	9a08      	ldr	r2, [sp, #32]
 8011ae4:	b1bb      	cbz	r3, 8011b16 <_strtod_l+0x90e>
 8011ae6:	f7ff fb6d 	bl	80111c4 <sulp>
 8011aea:	4602      	mov	r2, r0
 8011aec:	460b      	mov	r3, r1
 8011aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011af2:	f7ee fb45 	bl	8000180 <__adddf3>
 8011af6:	4682      	mov	sl, r0
 8011af8:	468b      	mov	fp, r1
 8011afa:	e7de      	b.n	8011aba <_strtod_l+0x8b2>
 8011afc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011b00:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011b04:	f04f 3aff 	mov.w	sl, #4294967295
 8011b08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011b0c:	e7d5      	b.n	8011aba <_strtod_l+0x8b2>
 8011b0e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011b10:	ea13 0f0a 	tst.w	r3, sl
 8011b14:	e7e1      	b.n	8011ada <_strtod_l+0x8d2>
 8011b16:	f7ff fb55 	bl	80111c4 <sulp>
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	460b      	mov	r3, r1
 8011b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b22:	f7ee fb2b 	bl	800017c <__aeabi_dsub>
 8011b26:	2200      	movs	r2, #0
 8011b28:	2300      	movs	r3, #0
 8011b2a:	4682      	mov	sl, r0
 8011b2c:	468b      	mov	fp, r1
 8011b2e:	f7ee ff45 	bl	80009bc <__aeabi_dcmpeq>
 8011b32:	2800      	cmp	r0, #0
 8011b34:	d0c1      	beq.n	8011aba <_strtod_l+0x8b2>
 8011b36:	e619      	b.n	801176c <_strtod_l+0x564>
 8011b38:	4641      	mov	r1, r8
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f003 fa50 	bl	8014fe0 <__ratio>
 8011b40:	2200      	movs	r2, #0
 8011b42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011b46:	4606      	mov	r6, r0
 8011b48:	460f      	mov	r7, r1
 8011b4a:	f7ee ff4b 	bl	80009e4 <__aeabi_dcmple>
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d06d      	beq.n	8011c2e <_strtod_l+0xa26>
 8011b52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d178      	bne.n	8011c4a <_strtod_l+0xa42>
 8011b58:	f1ba 0f00 	cmp.w	sl, #0
 8011b5c:	d156      	bne.n	8011c0c <_strtod_l+0xa04>
 8011b5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d158      	bne.n	8011c1a <_strtod_l+0xa12>
 8011b68:	2200      	movs	r2, #0
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	4639      	mov	r1, r7
 8011b6e:	4b5e      	ldr	r3, [pc, #376]	@ (8011ce8 <_strtod_l+0xae0>)
 8011b70:	f7ee ff2e 	bl	80009d0 <__aeabi_dcmplt>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	d157      	bne.n	8011c28 <_strtod_l+0xa20>
 8011b78:	4630      	mov	r0, r6
 8011b7a:	4639      	mov	r1, r7
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8011cec <_strtod_l+0xae4>)
 8011b80:	f7ee fcb4 	bl	80004ec <__aeabi_dmul>
 8011b84:	4606      	mov	r6, r0
 8011b86:	460f      	mov	r7, r1
 8011b88:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011b8c:	9606      	str	r6, [sp, #24]
 8011b8e:	9307      	str	r3, [sp, #28]
 8011b90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b94:	4d51      	ldr	r5, [pc, #324]	@ (8011cdc <_strtod_l+0xad4>)
 8011b96:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b9c:	401d      	ands	r5, r3
 8011b9e:	4b54      	ldr	r3, [pc, #336]	@ (8011cf0 <_strtod_l+0xae8>)
 8011ba0:	429d      	cmp	r5, r3
 8011ba2:	f040 80ab 	bne.w	8011cfc <_strtod_l+0xaf4>
 8011ba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ba8:	4650      	mov	r0, sl
 8011baa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011bae:	4659      	mov	r1, fp
 8011bb0:	f003 f956 	bl	8014e60 <__ulp>
 8011bb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011bb8:	f7ee fc98 	bl	80004ec <__aeabi_dmul>
 8011bbc:	4652      	mov	r2, sl
 8011bbe:	465b      	mov	r3, fp
 8011bc0:	f7ee fade 	bl	8000180 <__adddf3>
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	4945      	ldr	r1, [pc, #276]	@ (8011cdc <_strtod_l+0xad4>)
 8011bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8011cf4 <_strtod_l+0xaec>)
 8011bca:	4019      	ands	r1, r3
 8011bcc:	4291      	cmp	r1, r2
 8011bce:	4682      	mov	sl, r0
 8011bd0:	d942      	bls.n	8011c58 <_strtod_l+0xa50>
 8011bd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011bd4:	4b43      	ldr	r3, [pc, #268]	@ (8011ce4 <_strtod_l+0xadc>)
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d103      	bne.n	8011be2 <_strtod_l+0x9da>
 8011bda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bdc:	3301      	adds	r3, #1
 8011bde:	f43f ad32 	beq.w	8011646 <_strtod_l+0x43e>
 8011be2:	f04f 3aff 	mov.w	sl, #4294967295
 8011be6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8011ce4 <_strtod_l+0xadc>
 8011bea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011bec:	9805      	ldr	r0, [sp, #20]
 8011bee:	f002 fe0b 	bl	8014808 <_Bfree>
 8011bf2:	4649      	mov	r1, r9
 8011bf4:	9805      	ldr	r0, [sp, #20]
 8011bf6:	f002 fe07 	bl	8014808 <_Bfree>
 8011bfa:	4641      	mov	r1, r8
 8011bfc:	9805      	ldr	r0, [sp, #20]
 8011bfe:	f002 fe03 	bl	8014808 <_Bfree>
 8011c02:	4621      	mov	r1, r4
 8011c04:	9805      	ldr	r0, [sp, #20]
 8011c06:	f002 fdff 	bl	8014808 <_Bfree>
 8011c0a:	e61c      	b.n	8011846 <_strtod_l+0x63e>
 8011c0c:	f1ba 0f01 	cmp.w	sl, #1
 8011c10:	d103      	bne.n	8011c1a <_strtod_l+0xa12>
 8011c12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f43f ada9 	beq.w	801176c <_strtod_l+0x564>
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	4b36      	ldr	r3, [pc, #216]	@ (8011cf8 <_strtod_l+0xaf0>)
 8011c1e:	2600      	movs	r6, #0
 8011c20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011c24:	4f30      	ldr	r7, [pc, #192]	@ (8011ce8 <_strtod_l+0xae0>)
 8011c26:	e7b3      	b.n	8011b90 <_strtod_l+0x988>
 8011c28:	2600      	movs	r6, #0
 8011c2a:	4f30      	ldr	r7, [pc, #192]	@ (8011cec <_strtod_l+0xae4>)
 8011c2c:	e7ac      	b.n	8011b88 <_strtod_l+0x980>
 8011c2e:	4630      	mov	r0, r6
 8011c30:	4639      	mov	r1, r7
 8011c32:	4b2e      	ldr	r3, [pc, #184]	@ (8011cec <_strtod_l+0xae4>)
 8011c34:	2200      	movs	r2, #0
 8011c36:	f7ee fc59 	bl	80004ec <__aeabi_dmul>
 8011c3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c3c:	4606      	mov	r6, r0
 8011c3e:	460f      	mov	r7, r1
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d0a1      	beq.n	8011b88 <_strtod_l+0x980>
 8011c44:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011c48:	e7a2      	b.n	8011b90 <_strtod_l+0x988>
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	4b26      	ldr	r3, [pc, #152]	@ (8011ce8 <_strtod_l+0xae0>)
 8011c4e:	4616      	mov	r6, r2
 8011c50:	461f      	mov	r7, r3
 8011c52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011c56:	e79b      	b.n	8011b90 <_strtod_l+0x988>
 8011c58:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011c5c:	9b08      	ldr	r3, [sp, #32]
 8011c5e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d1c1      	bne.n	8011bea <_strtod_l+0x9e2>
 8011c66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011c6a:	0d1b      	lsrs	r3, r3, #20
 8011c6c:	051b      	lsls	r3, r3, #20
 8011c6e:	429d      	cmp	r5, r3
 8011c70:	d1bb      	bne.n	8011bea <_strtod_l+0x9e2>
 8011c72:	4630      	mov	r0, r6
 8011c74:	4639      	mov	r1, r7
 8011c76:	f7ee fff7 	bl	8000c68 <__aeabi_d2lz>
 8011c7a:	f7ee fc09 	bl	8000490 <__aeabi_l2d>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	460b      	mov	r3, r1
 8011c82:	4630      	mov	r0, r6
 8011c84:	4639      	mov	r1, r7
 8011c86:	f7ee fa79 	bl	800017c <__aeabi_dsub>
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	4602      	mov	r2, r0
 8011c8e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011c92:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011c96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c98:	ea46 060a 	orr.w	r6, r6, sl
 8011c9c:	431e      	orrs	r6, r3
 8011c9e:	d06a      	beq.n	8011d76 <_strtod_l+0xb6e>
 8011ca0:	a309      	add	r3, pc, #36	@ (adr r3, 8011cc8 <_strtod_l+0xac0>)
 8011ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca6:	f7ee fe93 	bl	80009d0 <__aeabi_dcmplt>
 8011caa:	2800      	cmp	r0, #0
 8011cac:	f47f acd6 	bne.w	801165c <_strtod_l+0x454>
 8011cb0:	a307      	add	r3, pc, #28	@ (adr r3, 8011cd0 <_strtod_l+0xac8>)
 8011cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011cba:	f7ee fea7 	bl	8000a0c <__aeabi_dcmpgt>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	d093      	beq.n	8011bea <_strtod_l+0x9e2>
 8011cc2:	e4cb      	b.n	801165c <_strtod_l+0x454>
 8011cc4:	f3af 8000 	nop.w
 8011cc8:	94a03595 	.word	0x94a03595
 8011ccc:	3fdfffff 	.word	0x3fdfffff
 8011cd0:	35afe535 	.word	0x35afe535
 8011cd4:	3fe00000 	.word	0x3fe00000
 8011cd8:	39500000 	.word	0x39500000
 8011cdc:	7ff00000 	.word	0x7ff00000
 8011ce0:	000fffff 	.word	0x000fffff
 8011ce4:	7fefffff 	.word	0x7fefffff
 8011ce8:	3ff00000 	.word	0x3ff00000
 8011cec:	3fe00000 	.word	0x3fe00000
 8011cf0:	7fe00000 	.word	0x7fe00000
 8011cf4:	7c9fffff 	.word	0x7c9fffff
 8011cf8:	bff00000 	.word	0xbff00000
 8011cfc:	9b08      	ldr	r3, [sp, #32]
 8011cfe:	b323      	cbz	r3, 8011d4a <_strtod_l+0xb42>
 8011d00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011d04:	d821      	bhi.n	8011d4a <_strtod_l+0xb42>
 8011d06:	a328      	add	r3, pc, #160	@ (adr r3, 8011da8 <_strtod_l+0xba0>)
 8011d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	4639      	mov	r1, r7
 8011d10:	f7ee fe68 	bl	80009e4 <__aeabi_dcmple>
 8011d14:	b1a0      	cbz	r0, 8011d40 <_strtod_l+0xb38>
 8011d16:	4639      	mov	r1, r7
 8011d18:	4630      	mov	r0, r6
 8011d1a:	f7ee febf 	bl	8000a9c <__aeabi_d2uiz>
 8011d1e:	2801      	cmp	r0, #1
 8011d20:	bf38      	it	cc
 8011d22:	2001      	movcc	r0, #1
 8011d24:	f7ee fb68 	bl	80003f8 <__aeabi_ui2d>
 8011d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d2a:	4606      	mov	r6, r0
 8011d2c:	460f      	mov	r7, r1
 8011d2e:	b9fb      	cbnz	r3, 8011d70 <_strtod_l+0xb68>
 8011d30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011d34:	9014      	str	r0, [sp, #80]	@ 0x50
 8011d36:	9315      	str	r3, [sp, #84]	@ 0x54
 8011d38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011d3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011d40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011d42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011d46:	1b5b      	subs	r3, r3, r5
 8011d48:	9311      	str	r3, [sp, #68]	@ 0x44
 8011d4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011d4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011d52:	f003 f885 	bl	8014e60 <__ulp>
 8011d56:	4602      	mov	r2, r0
 8011d58:	460b      	mov	r3, r1
 8011d5a:	4650      	mov	r0, sl
 8011d5c:	4659      	mov	r1, fp
 8011d5e:	f7ee fbc5 	bl	80004ec <__aeabi_dmul>
 8011d62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011d66:	f7ee fa0b 	bl	8000180 <__adddf3>
 8011d6a:	4682      	mov	sl, r0
 8011d6c:	468b      	mov	fp, r1
 8011d6e:	e775      	b.n	8011c5c <_strtod_l+0xa54>
 8011d70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011d74:	e7e0      	b.n	8011d38 <_strtod_l+0xb30>
 8011d76:	a30e      	add	r3, pc, #56	@ (adr r3, 8011db0 <_strtod_l+0xba8>)
 8011d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7c:	f7ee fe28 	bl	80009d0 <__aeabi_dcmplt>
 8011d80:	e79d      	b.n	8011cbe <_strtod_l+0xab6>
 8011d82:	2300      	movs	r3, #0
 8011d84:	930e      	str	r3, [sp, #56]	@ 0x38
 8011d86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d88:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011d8a:	6013      	str	r3, [r2, #0]
 8011d8c:	f7ff ba79 	b.w	8011282 <_strtod_l+0x7a>
 8011d90:	2a65      	cmp	r2, #101	@ 0x65
 8011d92:	f43f ab72 	beq.w	801147a <_strtod_l+0x272>
 8011d96:	2a45      	cmp	r2, #69	@ 0x45
 8011d98:	f43f ab6f 	beq.w	801147a <_strtod_l+0x272>
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	f7ff bbaa 	b.w	80114f6 <_strtod_l+0x2ee>
 8011da2:	bf00      	nop
 8011da4:	f3af 8000 	nop.w
 8011da8:	ffc00000 	.word	0xffc00000
 8011dac:	41dfffff 	.word	0x41dfffff
 8011db0:	94a03595 	.word	0x94a03595
 8011db4:	3fcfffff 	.word	0x3fcfffff

08011db8 <_strtod_r>:
 8011db8:	4b01      	ldr	r3, [pc, #4]	@ (8011dc0 <_strtod_r+0x8>)
 8011dba:	f7ff ba25 	b.w	8011208 <_strtod_l>
 8011dbe:	bf00      	nop
 8011dc0:	20000178 	.word	0x20000178

08011dc4 <strtod>:
 8011dc4:	460a      	mov	r2, r1
 8011dc6:	4601      	mov	r1, r0
 8011dc8:	4802      	ldr	r0, [pc, #8]	@ (8011dd4 <strtod+0x10>)
 8011dca:	4b03      	ldr	r3, [pc, #12]	@ (8011dd8 <strtod+0x14>)
 8011dcc:	6800      	ldr	r0, [r0, #0]
 8011dce:	f7ff ba1b 	b.w	8011208 <_strtod_l>
 8011dd2:	bf00      	nop
 8011dd4:	200002e4 	.word	0x200002e4
 8011dd8:	20000178 	.word	0x20000178

08011ddc <_strtol_l.isra.0>:
 8011ddc:	2b24      	cmp	r3, #36	@ 0x24
 8011dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de2:	4686      	mov	lr, r0
 8011de4:	4690      	mov	r8, r2
 8011de6:	d801      	bhi.n	8011dec <_strtol_l.isra.0+0x10>
 8011de8:	2b01      	cmp	r3, #1
 8011dea:	d106      	bne.n	8011dfa <_strtol_l.isra.0+0x1e>
 8011dec:	f001 fa76 	bl	80132dc <__errno>
 8011df0:	2316      	movs	r3, #22
 8011df2:	6003      	str	r3, [r0, #0]
 8011df4:	2000      	movs	r0, #0
 8011df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dfa:	460d      	mov	r5, r1
 8011dfc:	4833      	ldr	r0, [pc, #204]	@ (8011ecc <_strtol_l.isra.0+0xf0>)
 8011dfe:	462a      	mov	r2, r5
 8011e00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e04:	5d06      	ldrb	r6, [r0, r4]
 8011e06:	f016 0608 	ands.w	r6, r6, #8
 8011e0a:	d1f8      	bne.n	8011dfe <_strtol_l.isra.0+0x22>
 8011e0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8011e0e:	d110      	bne.n	8011e32 <_strtol_l.isra.0+0x56>
 8011e10:	2601      	movs	r6, #1
 8011e12:	782c      	ldrb	r4, [r5, #0]
 8011e14:	1c95      	adds	r5, r2, #2
 8011e16:	f033 0210 	bics.w	r2, r3, #16
 8011e1a:	d115      	bne.n	8011e48 <_strtol_l.isra.0+0x6c>
 8011e1c:	2c30      	cmp	r4, #48	@ 0x30
 8011e1e:	d10d      	bne.n	8011e3c <_strtol_l.isra.0+0x60>
 8011e20:	782a      	ldrb	r2, [r5, #0]
 8011e22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011e26:	2a58      	cmp	r2, #88	@ 0x58
 8011e28:	d108      	bne.n	8011e3c <_strtol_l.isra.0+0x60>
 8011e2a:	786c      	ldrb	r4, [r5, #1]
 8011e2c:	3502      	adds	r5, #2
 8011e2e:	2310      	movs	r3, #16
 8011e30:	e00a      	b.n	8011e48 <_strtol_l.isra.0+0x6c>
 8011e32:	2c2b      	cmp	r4, #43	@ 0x2b
 8011e34:	bf04      	itt	eq
 8011e36:	782c      	ldrbeq	r4, [r5, #0]
 8011e38:	1c95      	addeq	r5, r2, #2
 8011e3a:	e7ec      	b.n	8011e16 <_strtol_l.isra.0+0x3a>
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d1f6      	bne.n	8011e2e <_strtol_l.isra.0+0x52>
 8011e40:	2c30      	cmp	r4, #48	@ 0x30
 8011e42:	bf14      	ite	ne
 8011e44:	230a      	movne	r3, #10
 8011e46:	2308      	moveq	r3, #8
 8011e48:	2200      	movs	r2, #0
 8011e4a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011e4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e52:	fbbc f9f3 	udiv	r9, ip, r3
 8011e56:	4610      	mov	r0, r2
 8011e58:	fb03 ca19 	mls	sl, r3, r9, ip
 8011e5c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011e60:	2f09      	cmp	r7, #9
 8011e62:	d80f      	bhi.n	8011e84 <_strtol_l.isra.0+0xa8>
 8011e64:	463c      	mov	r4, r7
 8011e66:	42a3      	cmp	r3, r4
 8011e68:	dd1b      	ble.n	8011ea2 <_strtol_l.isra.0+0xc6>
 8011e6a:	1c57      	adds	r7, r2, #1
 8011e6c:	d007      	beq.n	8011e7e <_strtol_l.isra.0+0xa2>
 8011e6e:	4581      	cmp	r9, r0
 8011e70:	d314      	bcc.n	8011e9c <_strtol_l.isra.0+0xc0>
 8011e72:	d101      	bne.n	8011e78 <_strtol_l.isra.0+0x9c>
 8011e74:	45a2      	cmp	sl, r4
 8011e76:	db11      	blt.n	8011e9c <_strtol_l.isra.0+0xc0>
 8011e78:	2201      	movs	r2, #1
 8011e7a:	fb00 4003 	mla	r0, r0, r3, r4
 8011e7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e82:	e7eb      	b.n	8011e5c <_strtol_l.isra.0+0x80>
 8011e84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011e88:	2f19      	cmp	r7, #25
 8011e8a:	d801      	bhi.n	8011e90 <_strtol_l.isra.0+0xb4>
 8011e8c:	3c37      	subs	r4, #55	@ 0x37
 8011e8e:	e7ea      	b.n	8011e66 <_strtol_l.isra.0+0x8a>
 8011e90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011e94:	2f19      	cmp	r7, #25
 8011e96:	d804      	bhi.n	8011ea2 <_strtol_l.isra.0+0xc6>
 8011e98:	3c57      	subs	r4, #87	@ 0x57
 8011e9a:	e7e4      	b.n	8011e66 <_strtol_l.isra.0+0x8a>
 8011e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8011ea0:	e7ed      	b.n	8011e7e <_strtol_l.isra.0+0xa2>
 8011ea2:	1c53      	adds	r3, r2, #1
 8011ea4:	d108      	bne.n	8011eb8 <_strtol_l.isra.0+0xdc>
 8011ea6:	2322      	movs	r3, #34	@ 0x22
 8011ea8:	4660      	mov	r0, ip
 8011eaa:	f8ce 3000 	str.w	r3, [lr]
 8011eae:	f1b8 0f00 	cmp.w	r8, #0
 8011eb2:	d0a0      	beq.n	8011df6 <_strtol_l.isra.0+0x1a>
 8011eb4:	1e69      	subs	r1, r5, #1
 8011eb6:	e006      	b.n	8011ec6 <_strtol_l.isra.0+0xea>
 8011eb8:	b106      	cbz	r6, 8011ebc <_strtol_l.isra.0+0xe0>
 8011eba:	4240      	negs	r0, r0
 8011ebc:	f1b8 0f00 	cmp.w	r8, #0
 8011ec0:	d099      	beq.n	8011df6 <_strtol_l.isra.0+0x1a>
 8011ec2:	2a00      	cmp	r2, #0
 8011ec4:	d1f6      	bne.n	8011eb4 <_strtol_l.isra.0+0xd8>
 8011ec6:	f8c8 1000 	str.w	r1, [r8]
 8011eca:	e794      	b.n	8011df6 <_strtol_l.isra.0+0x1a>
 8011ecc:	08016ae9 	.word	0x08016ae9

08011ed0 <_strtol_r>:
 8011ed0:	f7ff bf84 	b.w	8011ddc <_strtol_l.isra.0>

08011ed4 <strtol>:
 8011ed4:	4613      	mov	r3, r2
 8011ed6:	460a      	mov	r2, r1
 8011ed8:	4601      	mov	r1, r0
 8011eda:	4802      	ldr	r0, [pc, #8]	@ (8011ee4 <strtol+0x10>)
 8011edc:	6800      	ldr	r0, [r0, #0]
 8011ede:	f7ff bf7d 	b.w	8011ddc <_strtol_l.isra.0>
 8011ee2:	bf00      	nop
 8011ee4:	200002e4 	.word	0x200002e4

08011ee8 <__cvt>:
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eee:	461d      	mov	r5, r3
 8011ef0:	bfbb      	ittet	lt
 8011ef2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8011ef6:	461d      	movlt	r5, r3
 8011ef8:	2300      	movge	r3, #0
 8011efa:	232d      	movlt	r3, #45	@ 0x2d
 8011efc:	b088      	sub	sp, #32
 8011efe:	4614      	mov	r4, r2
 8011f00:	bfb8      	it	lt
 8011f02:	4614      	movlt	r4, r2
 8011f04:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011f06:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8011f08:	7013      	strb	r3, [r2, #0]
 8011f0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011f0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8011f10:	f023 0820 	bic.w	r8, r3, #32
 8011f14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011f18:	d005      	beq.n	8011f26 <__cvt+0x3e>
 8011f1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011f1e:	d100      	bne.n	8011f22 <__cvt+0x3a>
 8011f20:	3601      	adds	r6, #1
 8011f22:	2302      	movs	r3, #2
 8011f24:	e000      	b.n	8011f28 <__cvt+0x40>
 8011f26:	2303      	movs	r3, #3
 8011f28:	aa07      	add	r2, sp, #28
 8011f2a:	9204      	str	r2, [sp, #16]
 8011f2c:	aa06      	add	r2, sp, #24
 8011f2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011f32:	e9cd 3600 	strd	r3, r6, [sp]
 8011f36:	4622      	mov	r2, r4
 8011f38:	462b      	mov	r3, r5
 8011f3a:	f001 fabd 	bl	80134b8 <_dtoa_r>
 8011f3e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011f42:	4607      	mov	r7, r0
 8011f44:	d119      	bne.n	8011f7a <__cvt+0x92>
 8011f46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011f48:	07db      	lsls	r3, r3, #31
 8011f4a:	d50e      	bpl.n	8011f6a <__cvt+0x82>
 8011f4c:	eb00 0906 	add.w	r9, r0, r6
 8011f50:	2200      	movs	r2, #0
 8011f52:	2300      	movs	r3, #0
 8011f54:	4620      	mov	r0, r4
 8011f56:	4629      	mov	r1, r5
 8011f58:	f7ee fd30 	bl	80009bc <__aeabi_dcmpeq>
 8011f5c:	b108      	cbz	r0, 8011f62 <__cvt+0x7a>
 8011f5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8011f62:	2230      	movs	r2, #48	@ 0x30
 8011f64:	9b07      	ldr	r3, [sp, #28]
 8011f66:	454b      	cmp	r3, r9
 8011f68:	d31e      	bcc.n	8011fa8 <__cvt+0xc0>
 8011f6a:	4638      	mov	r0, r7
 8011f6c:	9b07      	ldr	r3, [sp, #28]
 8011f6e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011f70:	1bdb      	subs	r3, r3, r7
 8011f72:	6013      	str	r3, [r2, #0]
 8011f74:	b008      	add	sp, #32
 8011f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f7a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011f7e:	eb00 0906 	add.w	r9, r0, r6
 8011f82:	d1e5      	bne.n	8011f50 <__cvt+0x68>
 8011f84:	7803      	ldrb	r3, [r0, #0]
 8011f86:	2b30      	cmp	r3, #48	@ 0x30
 8011f88:	d10a      	bne.n	8011fa0 <__cvt+0xb8>
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	4620      	mov	r0, r4
 8011f90:	4629      	mov	r1, r5
 8011f92:	f7ee fd13 	bl	80009bc <__aeabi_dcmpeq>
 8011f96:	b918      	cbnz	r0, 8011fa0 <__cvt+0xb8>
 8011f98:	f1c6 0601 	rsb	r6, r6, #1
 8011f9c:	f8ca 6000 	str.w	r6, [sl]
 8011fa0:	f8da 3000 	ldr.w	r3, [sl]
 8011fa4:	4499      	add	r9, r3
 8011fa6:	e7d3      	b.n	8011f50 <__cvt+0x68>
 8011fa8:	1c59      	adds	r1, r3, #1
 8011faa:	9107      	str	r1, [sp, #28]
 8011fac:	701a      	strb	r2, [r3, #0]
 8011fae:	e7d9      	b.n	8011f64 <__cvt+0x7c>

08011fb0 <__exponent>:
 8011fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fb2:	2900      	cmp	r1, #0
 8011fb4:	bfb6      	itet	lt
 8011fb6:	232d      	movlt	r3, #45	@ 0x2d
 8011fb8:	232b      	movge	r3, #43	@ 0x2b
 8011fba:	4249      	neglt	r1, r1
 8011fbc:	2909      	cmp	r1, #9
 8011fbe:	7002      	strb	r2, [r0, #0]
 8011fc0:	7043      	strb	r3, [r0, #1]
 8011fc2:	dd29      	ble.n	8012018 <__exponent+0x68>
 8011fc4:	f10d 0307 	add.w	r3, sp, #7
 8011fc8:	461d      	mov	r5, r3
 8011fca:	270a      	movs	r7, #10
 8011fcc:	fbb1 f6f7 	udiv	r6, r1, r7
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	fb07 1416 	mls	r4, r7, r6, r1
 8011fd6:	3430      	adds	r4, #48	@ 0x30
 8011fd8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011fdc:	460c      	mov	r4, r1
 8011fde:	2c63      	cmp	r4, #99	@ 0x63
 8011fe0:	4631      	mov	r1, r6
 8011fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8011fe6:	dcf1      	bgt.n	8011fcc <__exponent+0x1c>
 8011fe8:	3130      	adds	r1, #48	@ 0x30
 8011fea:	1e94      	subs	r4, r2, #2
 8011fec:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011ff0:	4623      	mov	r3, r4
 8011ff2:	1c41      	adds	r1, r0, #1
 8011ff4:	42ab      	cmp	r3, r5
 8011ff6:	d30a      	bcc.n	801200e <__exponent+0x5e>
 8011ff8:	f10d 0309 	add.w	r3, sp, #9
 8011ffc:	1a9b      	subs	r3, r3, r2
 8011ffe:	42ac      	cmp	r4, r5
 8012000:	bf88      	it	hi
 8012002:	2300      	movhi	r3, #0
 8012004:	3302      	adds	r3, #2
 8012006:	4403      	add	r3, r0
 8012008:	1a18      	subs	r0, r3, r0
 801200a:	b003      	add	sp, #12
 801200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801200e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012012:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012016:	e7ed      	b.n	8011ff4 <__exponent+0x44>
 8012018:	2330      	movs	r3, #48	@ 0x30
 801201a:	3130      	adds	r1, #48	@ 0x30
 801201c:	7083      	strb	r3, [r0, #2]
 801201e:	70c1      	strb	r1, [r0, #3]
 8012020:	1d03      	adds	r3, r0, #4
 8012022:	e7f1      	b.n	8012008 <__exponent+0x58>

08012024 <_printf_float>:
 8012024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012028:	b091      	sub	sp, #68	@ 0x44
 801202a:	460c      	mov	r4, r1
 801202c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8012030:	4616      	mov	r6, r2
 8012032:	461f      	mov	r7, r3
 8012034:	4605      	mov	r5, r0
 8012036:	f001 f8f7 	bl	8013228 <_localeconv_r>
 801203a:	6803      	ldr	r3, [r0, #0]
 801203c:	4618      	mov	r0, r3
 801203e:	9308      	str	r3, [sp, #32]
 8012040:	f7ee f890 	bl	8000164 <strlen>
 8012044:	2300      	movs	r3, #0
 8012046:	930e      	str	r3, [sp, #56]	@ 0x38
 8012048:	f8d8 3000 	ldr.w	r3, [r8]
 801204c:	9009      	str	r0, [sp, #36]	@ 0x24
 801204e:	3307      	adds	r3, #7
 8012050:	f023 0307 	bic.w	r3, r3, #7
 8012054:	f103 0208 	add.w	r2, r3, #8
 8012058:	f894 a018 	ldrb.w	sl, [r4, #24]
 801205c:	f8d4 b000 	ldr.w	fp, [r4]
 8012060:	f8c8 2000 	str.w	r2, [r8]
 8012064:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012068:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801206c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801206e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012072:	f04f 32ff 	mov.w	r2, #4294967295
 8012076:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801207a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801207e:	4b9c      	ldr	r3, [pc, #624]	@ (80122f0 <_printf_float+0x2cc>)
 8012080:	f7ee fcce 	bl	8000a20 <__aeabi_dcmpun>
 8012084:	bb70      	cbnz	r0, 80120e4 <_printf_float+0xc0>
 8012086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801208a:	f04f 32ff 	mov.w	r2, #4294967295
 801208e:	4b98      	ldr	r3, [pc, #608]	@ (80122f0 <_printf_float+0x2cc>)
 8012090:	f7ee fca8 	bl	80009e4 <__aeabi_dcmple>
 8012094:	bb30      	cbnz	r0, 80120e4 <_printf_float+0xc0>
 8012096:	2200      	movs	r2, #0
 8012098:	2300      	movs	r3, #0
 801209a:	4640      	mov	r0, r8
 801209c:	4649      	mov	r1, r9
 801209e:	f7ee fc97 	bl	80009d0 <__aeabi_dcmplt>
 80120a2:	b110      	cbz	r0, 80120aa <_printf_float+0x86>
 80120a4:	232d      	movs	r3, #45	@ 0x2d
 80120a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80120aa:	4a92      	ldr	r2, [pc, #584]	@ (80122f4 <_printf_float+0x2d0>)
 80120ac:	4b92      	ldr	r3, [pc, #584]	@ (80122f8 <_printf_float+0x2d4>)
 80120ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80120b2:	bf8c      	ite	hi
 80120b4:	4690      	movhi	r8, r2
 80120b6:	4698      	movls	r8, r3
 80120b8:	2303      	movs	r3, #3
 80120ba:	f04f 0900 	mov.w	r9, #0
 80120be:	6123      	str	r3, [r4, #16]
 80120c0:	f02b 0304 	bic.w	r3, fp, #4
 80120c4:	6023      	str	r3, [r4, #0]
 80120c6:	4633      	mov	r3, r6
 80120c8:	4621      	mov	r1, r4
 80120ca:	4628      	mov	r0, r5
 80120cc:	9700      	str	r7, [sp, #0]
 80120ce:	aa0f      	add	r2, sp, #60	@ 0x3c
 80120d0:	f000 f9d4 	bl	801247c <_printf_common>
 80120d4:	3001      	adds	r0, #1
 80120d6:	f040 8090 	bne.w	80121fa <_printf_float+0x1d6>
 80120da:	f04f 30ff 	mov.w	r0, #4294967295
 80120de:	b011      	add	sp, #68	@ 0x44
 80120e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e4:	4642      	mov	r2, r8
 80120e6:	464b      	mov	r3, r9
 80120e8:	4640      	mov	r0, r8
 80120ea:	4649      	mov	r1, r9
 80120ec:	f7ee fc98 	bl	8000a20 <__aeabi_dcmpun>
 80120f0:	b148      	cbz	r0, 8012106 <_printf_float+0xe2>
 80120f2:	464b      	mov	r3, r9
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	bfb8      	it	lt
 80120f8:	232d      	movlt	r3, #45	@ 0x2d
 80120fa:	4a80      	ldr	r2, [pc, #512]	@ (80122fc <_printf_float+0x2d8>)
 80120fc:	bfb8      	it	lt
 80120fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012102:	4b7f      	ldr	r3, [pc, #508]	@ (8012300 <_printf_float+0x2dc>)
 8012104:	e7d3      	b.n	80120ae <_printf_float+0x8a>
 8012106:	6863      	ldr	r3, [r4, #4]
 8012108:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801210c:	1c5a      	adds	r2, r3, #1
 801210e:	d13f      	bne.n	8012190 <_printf_float+0x16c>
 8012110:	2306      	movs	r3, #6
 8012112:	6063      	str	r3, [r4, #4]
 8012114:	2200      	movs	r2, #0
 8012116:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801211a:	6023      	str	r3, [r4, #0]
 801211c:	9206      	str	r2, [sp, #24]
 801211e:	aa0e      	add	r2, sp, #56	@ 0x38
 8012120:	e9cd a204 	strd	sl, r2, [sp, #16]
 8012124:	aa0d      	add	r2, sp, #52	@ 0x34
 8012126:	9203      	str	r2, [sp, #12]
 8012128:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801212c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012130:	6863      	ldr	r3, [r4, #4]
 8012132:	4642      	mov	r2, r8
 8012134:	9300      	str	r3, [sp, #0]
 8012136:	4628      	mov	r0, r5
 8012138:	464b      	mov	r3, r9
 801213a:	910a      	str	r1, [sp, #40]	@ 0x28
 801213c:	f7ff fed4 	bl	8011ee8 <__cvt>
 8012140:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012142:	4680      	mov	r8, r0
 8012144:	2947      	cmp	r1, #71	@ 0x47
 8012146:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012148:	d128      	bne.n	801219c <_printf_float+0x178>
 801214a:	1cc8      	adds	r0, r1, #3
 801214c:	db02      	blt.n	8012154 <_printf_float+0x130>
 801214e:	6863      	ldr	r3, [r4, #4]
 8012150:	4299      	cmp	r1, r3
 8012152:	dd40      	ble.n	80121d6 <_printf_float+0x1b2>
 8012154:	f1aa 0a02 	sub.w	sl, sl, #2
 8012158:	fa5f fa8a 	uxtb.w	sl, sl
 801215c:	4652      	mov	r2, sl
 801215e:	3901      	subs	r1, #1
 8012160:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012164:	910d      	str	r1, [sp, #52]	@ 0x34
 8012166:	f7ff ff23 	bl	8011fb0 <__exponent>
 801216a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801216c:	4681      	mov	r9, r0
 801216e:	1813      	adds	r3, r2, r0
 8012170:	2a01      	cmp	r2, #1
 8012172:	6123      	str	r3, [r4, #16]
 8012174:	dc02      	bgt.n	801217c <_printf_float+0x158>
 8012176:	6822      	ldr	r2, [r4, #0]
 8012178:	07d2      	lsls	r2, r2, #31
 801217a:	d501      	bpl.n	8012180 <_printf_float+0x15c>
 801217c:	3301      	adds	r3, #1
 801217e:	6123      	str	r3, [r4, #16]
 8012180:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8012184:	2b00      	cmp	r3, #0
 8012186:	d09e      	beq.n	80120c6 <_printf_float+0xa2>
 8012188:	232d      	movs	r3, #45	@ 0x2d
 801218a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801218e:	e79a      	b.n	80120c6 <_printf_float+0xa2>
 8012190:	2947      	cmp	r1, #71	@ 0x47
 8012192:	d1bf      	bne.n	8012114 <_printf_float+0xf0>
 8012194:	2b00      	cmp	r3, #0
 8012196:	d1bd      	bne.n	8012114 <_printf_float+0xf0>
 8012198:	2301      	movs	r3, #1
 801219a:	e7ba      	b.n	8012112 <_printf_float+0xee>
 801219c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80121a0:	d9dc      	bls.n	801215c <_printf_float+0x138>
 80121a2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80121a6:	d118      	bne.n	80121da <_printf_float+0x1b6>
 80121a8:	2900      	cmp	r1, #0
 80121aa:	6863      	ldr	r3, [r4, #4]
 80121ac:	dd0b      	ble.n	80121c6 <_printf_float+0x1a2>
 80121ae:	6121      	str	r1, [r4, #16]
 80121b0:	b913      	cbnz	r3, 80121b8 <_printf_float+0x194>
 80121b2:	6822      	ldr	r2, [r4, #0]
 80121b4:	07d0      	lsls	r0, r2, #31
 80121b6:	d502      	bpl.n	80121be <_printf_float+0x19a>
 80121b8:	3301      	adds	r3, #1
 80121ba:	440b      	add	r3, r1
 80121bc:	6123      	str	r3, [r4, #16]
 80121be:	f04f 0900 	mov.w	r9, #0
 80121c2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80121c4:	e7dc      	b.n	8012180 <_printf_float+0x15c>
 80121c6:	b913      	cbnz	r3, 80121ce <_printf_float+0x1aa>
 80121c8:	6822      	ldr	r2, [r4, #0]
 80121ca:	07d2      	lsls	r2, r2, #31
 80121cc:	d501      	bpl.n	80121d2 <_printf_float+0x1ae>
 80121ce:	3302      	adds	r3, #2
 80121d0:	e7f4      	b.n	80121bc <_printf_float+0x198>
 80121d2:	2301      	movs	r3, #1
 80121d4:	e7f2      	b.n	80121bc <_printf_float+0x198>
 80121d6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80121da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121dc:	4299      	cmp	r1, r3
 80121de:	db05      	blt.n	80121ec <_printf_float+0x1c8>
 80121e0:	6823      	ldr	r3, [r4, #0]
 80121e2:	6121      	str	r1, [r4, #16]
 80121e4:	07d8      	lsls	r0, r3, #31
 80121e6:	d5ea      	bpl.n	80121be <_printf_float+0x19a>
 80121e8:	1c4b      	adds	r3, r1, #1
 80121ea:	e7e7      	b.n	80121bc <_printf_float+0x198>
 80121ec:	2900      	cmp	r1, #0
 80121ee:	bfcc      	ite	gt
 80121f0:	2201      	movgt	r2, #1
 80121f2:	f1c1 0202 	rsble	r2, r1, #2
 80121f6:	4413      	add	r3, r2
 80121f8:	e7e0      	b.n	80121bc <_printf_float+0x198>
 80121fa:	6823      	ldr	r3, [r4, #0]
 80121fc:	055a      	lsls	r2, r3, #21
 80121fe:	d407      	bmi.n	8012210 <_printf_float+0x1ec>
 8012200:	6923      	ldr	r3, [r4, #16]
 8012202:	4642      	mov	r2, r8
 8012204:	4631      	mov	r1, r6
 8012206:	4628      	mov	r0, r5
 8012208:	47b8      	blx	r7
 801220a:	3001      	adds	r0, #1
 801220c:	d12b      	bne.n	8012266 <_printf_float+0x242>
 801220e:	e764      	b.n	80120da <_printf_float+0xb6>
 8012210:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012214:	f240 80dc 	bls.w	80123d0 <_printf_float+0x3ac>
 8012218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801221c:	2200      	movs	r2, #0
 801221e:	2300      	movs	r3, #0
 8012220:	f7ee fbcc 	bl	80009bc <__aeabi_dcmpeq>
 8012224:	2800      	cmp	r0, #0
 8012226:	d033      	beq.n	8012290 <_printf_float+0x26c>
 8012228:	2301      	movs	r3, #1
 801222a:	4631      	mov	r1, r6
 801222c:	4628      	mov	r0, r5
 801222e:	4a35      	ldr	r2, [pc, #212]	@ (8012304 <_printf_float+0x2e0>)
 8012230:	47b8      	blx	r7
 8012232:	3001      	adds	r0, #1
 8012234:	f43f af51 	beq.w	80120da <_printf_float+0xb6>
 8012238:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801223c:	4543      	cmp	r3, r8
 801223e:	db02      	blt.n	8012246 <_printf_float+0x222>
 8012240:	6823      	ldr	r3, [r4, #0]
 8012242:	07d8      	lsls	r0, r3, #31
 8012244:	d50f      	bpl.n	8012266 <_printf_float+0x242>
 8012246:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801224a:	4631      	mov	r1, r6
 801224c:	4628      	mov	r0, r5
 801224e:	47b8      	blx	r7
 8012250:	3001      	adds	r0, #1
 8012252:	f43f af42 	beq.w	80120da <_printf_float+0xb6>
 8012256:	f04f 0900 	mov.w	r9, #0
 801225a:	f108 38ff 	add.w	r8, r8, #4294967295
 801225e:	f104 0a1a 	add.w	sl, r4, #26
 8012262:	45c8      	cmp	r8, r9
 8012264:	dc09      	bgt.n	801227a <_printf_float+0x256>
 8012266:	6823      	ldr	r3, [r4, #0]
 8012268:	079b      	lsls	r3, r3, #30
 801226a:	f100 8102 	bmi.w	8012472 <_printf_float+0x44e>
 801226e:	68e0      	ldr	r0, [r4, #12]
 8012270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012272:	4298      	cmp	r0, r3
 8012274:	bfb8      	it	lt
 8012276:	4618      	movlt	r0, r3
 8012278:	e731      	b.n	80120de <_printf_float+0xba>
 801227a:	2301      	movs	r3, #1
 801227c:	4652      	mov	r2, sl
 801227e:	4631      	mov	r1, r6
 8012280:	4628      	mov	r0, r5
 8012282:	47b8      	blx	r7
 8012284:	3001      	adds	r0, #1
 8012286:	f43f af28 	beq.w	80120da <_printf_float+0xb6>
 801228a:	f109 0901 	add.w	r9, r9, #1
 801228e:	e7e8      	b.n	8012262 <_printf_float+0x23e>
 8012290:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012292:	2b00      	cmp	r3, #0
 8012294:	dc38      	bgt.n	8012308 <_printf_float+0x2e4>
 8012296:	2301      	movs	r3, #1
 8012298:	4631      	mov	r1, r6
 801229a:	4628      	mov	r0, r5
 801229c:	4a19      	ldr	r2, [pc, #100]	@ (8012304 <_printf_float+0x2e0>)
 801229e:	47b8      	blx	r7
 80122a0:	3001      	adds	r0, #1
 80122a2:	f43f af1a 	beq.w	80120da <_printf_float+0xb6>
 80122a6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80122aa:	ea59 0303 	orrs.w	r3, r9, r3
 80122ae:	d102      	bne.n	80122b6 <_printf_float+0x292>
 80122b0:	6823      	ldr	r3, [r4, #0]
 80122b2:	07d9      	lsls	r1, r3, #31
 80122b4:	d5d7      	bpl.n	8012266 <_printf_float+0x242>
 80122b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80122ba:	4631      	mov	r1, r6
 80122bc:	4628      	mov	r0, r5
 80122be:	47b8      	blx	r7
 80122c0:	3001      	adds	r0, #1
 80122c2:	f43f af0a 	beq.w	80120da <_printf_float+0xb6>
 80122c6:	f04f 0a00 	mov.w	sl, #0
 80122ca:	f104 0b1a 	add.w	fp, r4, #26
 80122ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80122d0:	425b      	negs	r3, r3
 80122d2:	4553      	cmp	r3, sl
 80122d4:	dc01      	bgt.n	80122da <_printf_float+0x2b6>
 80122d6:	464b      	mov	r3, r9
 80122d8:	e793      	b.n	8012202 <_printf_float+0x1de>
 80122da:	2301      	movs	r3, #1
 80122dc:	465a      	mov	r2, fp
 80122de:	4631      	mov	r1, r6
 80122e0:	4628      	mov	r0, r5
 80122e2:	47b8      	blx	r7
 80122e4:	3001      	adds	r0, #1
 80122e6:	f43f aef8 	beq.w	80120da <_printf_float+0xb6>
 80122ea:	f10a 0a01 	add.w	sl, sl, #1
 80122ee:	e7ee      	b.n	80122ce <_printf_float+0x2aa>
 80122f0:	7fefffff 	.word	0x7fefffff
 80122f4:	080168a7 	.word	0x080168a7
 80122f8:	080168a3 	.word	0x080168a3
 80122fc:	080168af 	.word	0x080168af
 8012300:	080168ab 	.word	0x080168ab
 8012304:	080168b3 	.word	0x080168b3
 8012308:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801230a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801230e:	4553      	cmp	r3, sl
 8012310:	bfa8      	it	ge
 8012312:	4653      	movge	r3, sl
 8012314:	2b00      	cmp	r3, #0
 8012316:	4699      	mov	r9, r3
 8012318:	dc36      	bgt.n	8012388 <_printf_float+0x364>
 801231a:	f04f 0b00 	mov.w	fp, #0
 801231e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012322:	f104 021a 	add.w	r2, r4, #26
 8012326:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012328:	930a      	str	r3, [sp, #40]	@ 0x28
 801232a:	eba3 0309 	sub.w	r3, r3, r9
 801232e:	455b      	cmp	r3, fp
 8012330:	dc31      	bgt.n	8012396 <_printf_float+0x372>
 8012332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012334:	459a      	cmp	sl, r3
 8012336:	dc3a      	bgt.n	80123ae <_printf_float+0x38a>
 8012338:	6823      	ldr	r3, [r4, #0]
 801233a:	07da      	lsls	r2, r3, #31
 801233c:	d437      	bmi.n	80123ae <_printf_float+0x38a>
 801233e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012340:	ebaa 0903 	sub.w	r9, sl, r3
 8012344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012346:	ebaa 0303 	sub.w	r3, sl, r3
 801234a:	4599      	cmp	r9, r3
 801234c:	bfa8      	it	ge
 801234e:	4699      	movge	r9, r3
 8012350:	f1b9 0f00 	cmp.w	r9, #0
 8012354:	dc33      	bgt.n	80123be <_printf_float+0x39a>
 8012356:	f04f 0800 	mov.w	r8, #0
 801235a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801235e:	f104 0b1a 	add.w	fp, r4, #26
 8012362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012364:	ebaa 0303 	sub.w	r3, sl, r3
 8012368:	eba3 0309 	sub.w	r3, r3, r9
 801236c:	4543      	cmp	r3, r8
 801236e:	f77f af7a 	ble.w	8012266 <_printf_float+0x242>
 8012372:	2301      	movs	r3, #1
 8012374:	465a      	mov	r2, fp
 8012376:	4631      	mov	r1, r6
 8012378:	4628      	mov	r0, r5
 801237a:	47b8      	blx	r7
 801237c:	3001      	adds	r0, #1
 801237e:	f43f aeac 	beq.w	80120da <_printf_float+0xb6>
 8012382:	f108 0801 	add.w	r8, r8, #1
 8012386:	e7ec      	b.n	8012362 <_printf_float+0x33e>
 8012388:	4642      	mov	r2, r8
 801238a:	4631      	mov	r1, r6
 801238c:	4628      	mov	r0, r5
 801238e:	47b8      	blx	r7
 8012390:	3001      	adds	r0, #1
 8012392:	d1c2      	bne.n	801231a <_printf_float+0x2f6>
 8012394:	e6a1      	b.n	80120da <_printf_float+0xb6>
 8012396:	2301      	movs	r3, #1
 8012398:	4631      	mov	r1, r6
 801239a:	4628      	mov	r0, r5
 801239c:	920a      	str	r2, [sp, #40]	@ 0x28
 801239e:	47b8      	blx	r7
 80123a0:	3001      	adds	r0, #1
 80123a2:	f43f ae9a 	beq.w	80120da <_printf_float+0xb6>
 80123a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80123a8:	f10b 0b01 	add.w	fp, fp, #1
 80123ac:	e7bb      	b.n	8012326 <_printf_float+0x302>
 80123ae:	4631      	mov	r1, r6
 80123b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80123b4:	4628      	mov	r0, r5
 80123b6:	47b8      	blx	r7
 80123b8:	3001      	adds	r0, #1
 80123ba:	d1c0      	bne.n	801233e <_printf_float+0x31a>
 80123bc:	e68d      	b.n	80120da <_printf_float+0xb6>
 80123be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80123c0:	464b      	mov	r3, r9
 80123c2:	4631      	mov	r1, r6
 80123c4:	4628      	mov	r0, r5
 80123c6:	4442      	add	r2, r8
 80123c8:	47b8      	blx	r7
 80123ca:	3001      	adds	r0, #1
 80123cc:	d1c3      	bne.n	8012356 <_printf_float+0x332>
 80123ce:	e684      	b.n	80120da <_printf_float+0xb6>
 80123d0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80123d4:	f1ba 0f01 	cmp.w	sl, #1
 80123d8:	dc01      	bgt.n	80123de <_printf_float+0x3ba>
 80123da:	07db      	lsls	r3, r3, #31
 80123dc:	d536      	bpl.n	801244c <_printf_float+0x428>
 80123de:	2301      	movs	r3, #1
 80123e0:	4642      	mov	r2, r8
 80123e2:	4631      	mov	r1, r6
 80123e4:	4628      	mov	r0, r5
 80123e6:	47b8      	blx	r7
 80123e8:	3001      	adds	r0, #1
 80123ea:	f43f ae76 	beq.w	80120da <_printf_float+0xb6>
 80123ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80123f2:	4631      	mov	r1, r6
 80123f4:	4628      	mov	r0, r5
 80123f6:	47b8      	blx	r7
 80123f8:	3001      	adds	r0, #1
 80123fa:	f43f ae6e 	beq.w	80120da <_printf_float+0xb6>
 80123fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012402:	2200      	movs	r2, #0
 8012404:	2300      	movs	r3, #0
 8012406:	f10a 3aff 	add.w	sl, sl, #4294967295
 801240a:	f7ee fad7 	bl	80009bc <__aeabi_dcmpeq>
 801240e:	b9c0      	cbnz	r0, 8012442 <_printf_float+0x41e>
 8012410:	4653      	mov	r3, sl
 8012412:	f108 0201 	add.w	r2, r8, #1
 8012416:	4631      	mov	r1, r6
 8012418:	4628      	mov	r0, r5
 801241a:	47b8      	blx	r7
 801241c:	3001      	adds	r0, #1
 801241e:	d10c      	bne.n	801243a <_printf_float+0x416>
 8012420:	e65b      	b.n	80120da <_printf_float+0xb6>
 8012422:	2301      	movs	r3, #1
 8012424:	465a      	mov	r2, fp
 8012426:	4631      	mov	r1, r6
 8012428:	4628      	mov	r0, r5
 801242a:	47b8      	blx	r7
 801242c:	3001      	adds	r0, #1
 801242e:	f43f ae54 	beq.w	80120da <_printf_float+0xb6>
 8012432:	f108 0801 	add.w	r8, r8, #1
 8012436:	45d0      	cmp	r8, sl
 8012438:	dbf3      	blt.n	8012422 <_printf_float+0x3fe>
 801243a:	464b      	mov	r3, r9
 801243c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012440:	e6e0      	b.n	8012204 <_printf_float+0x1e0>
 8012442:	f04f 0800 	mov.w	r8, #0
 8012446:	f104 0b1a 	add.w	fp, r4, #26
 801244a:	e7f4      	b.n	8012436 <_printf_float+0x412>
 801244c:	2301      	movs	r3, #1
 801244e:	4642      	mov	r2, r8
 8012450:	e7e1      	b.n	8012416 <_printf_float+0x3f2>
 8012452:	2301      	movs	r3, #1
 8012454:	464a      	mov	r2, r9
 8012456:	4631      	mov	r1, r6
 8012458:	4628      	mov	r0, r5
 801245a:	47b8      	blx	r7
 801245c:	3001      	adds	r0, #1
 801245e:	f43f ae3c 	beq.w	80120da <_printf_float+0xb6>
 8012462:	f108 0801 	add.w	r8, r8, #1
 8012466:	68e3      	ldr	r3, [r4, #12]
 8012468:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801246a:	1a5b      	subs	r3, r3, r1
 801246c:	4543      	cmp	r3, r8
 801246e:	dcf0      	bgt.n	8012452 <_printf_float+0x42e>
 8012470:	e6fd      	b.n	801226e <_printf_float+0x24a>
 8012472:	f04f 0800 	mov.w	r8, #0
 8012476:	f104 0919 	add.w	r9, r4, #25
 801247a:	e7f4      	b.n	8012466 <_printf_float+0x442>

0801247c <_printf_common>:
 801247c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012480:	4616      	mov	r6, r2
 8012482:	4698      	mov	r8, r3
 8012484:	688a      	ldr	r2, [r1, #8]
 8012486:	690b      	ldr	r3, [r1, #16]
 8012488:	4607      	mov	r7, r0
 801248a:	4293      	cmp	r3, r2
 801248c:	bfb8      	it	lt
 801248e:	4613      	movlt	r3, r2
 8012490:	6033      	str	r3, [r6, #0]
 8012492:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012496:	460c      	mov	r4, r1
 8012498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801249c:	b10a      	cbz	r2, 80124a2 <_printf_common+0x26>
 801249e:	3301      	adds	r3, #1
 80124a0:	6033      	str	r3, [r6, #0]
 80124a2:	6823      	ldr	r3, [r4, #0]
 80124a4:	0699      	lsls	r1, r3, #26
 80124a6:	bf42      	ittt	mi
 80124a8:	6833      	ldrmi	r3, [r6, #0]
 80124aa:	3302      	addmi	r3, #2
 80124ac:	6033      	strmi	r3, [r6, #0]
 80124ae:	6825      	ldr	r5, [r4, #0]
 80124b0:	f015 0506 	ands.w	r5, r5, #6
 80124b4:	d106      	bne.n	80124c4 <_printf_common+0x48>
 80124b6:	f104 0a19 	add.w	sl, r4, #25
 80124ba:	68e3      	ldr	r3, [r4, #12]
 80124bc:	6832      	ldr	r2, [r6, #0]
 80124be:	1a9b      	subs	r3, r3, r2
 80124c0:	42ab      	cmp	r3, r5
 80124c2:	dc2b      	bgt.n	801251c <_printf_common+0xa0>
 80124c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80124c8:	6822      	ldr	r2, [r4, #0]
 80124ca:	3b00      	subs	r3, #0
 80124cc:	bf18      	it	ne
 80124ce:	2301      	movne	r3, #1
 80124d0:	0692      	lsls	r2, r2, #26
 80124d2:	d430      	bmi.n	8012536 <_printf_common+0xba>
 80124d4:	4641      	mov	r1, r8
 80124d6:	4638      	mov	r0, r7
 80124d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80124dc:	47c8      	blx	r9
 80124de:	3001      	adds	r0, #1
 80124e0:	d023      	beq.n	801252a <_printf_common+0xae>
 80124e2:	6823      	ldr	r3, [r4, #0]
 80124e4:	6922      	ldr	r2, [r4, #16]
 80124e6:	f003 0306 	and.w	r3, r3, #6
 80124ea:	2b04      	cmp	r3, #4
 80124ec:	bf14      	ite	ne
 80124ee:	2500      	movne	r5, #0
 80124f0:	6833      	ldreq	r3, [r6, #0]
 80124f2:	f04f 0600 	mov.w	r6, #0
 80124f6:	bf08      	it	eq
 80124f8:	68e5      	ldreq	r5, [r4, #12]
 80124fa:	f104 041a 	add.w	r4, r4, #26
 80124fe:	bf08      	it	eq
 8012500:	1aed      	subeq	r5, r5, r3
 8012502:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8012506:	bf08      	it	eq
 8012508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801250c:	4293      	cmp	r3, r2
 801250e:	bfc4      	itt	gt
 8012510:	1a9b      	subgt	r3, r3, r2
 8012512:	18ed      	addgt	r5, r5, r3
 8012514:	42b5      	cmp	r5, r6
 8012516:	d11a      	bne.n	801254e <_printf_common+0xd2>
 8012518:	2000      	movs	r0, #0
 801251a:	e008      	b.n	801252e <_printf_common+0xb2>
 801251c:	2301      	movs	r3, #1
 801251e:	4652      	mov	r2, sl
 8012520:	4641      	mov	r1, r8
 8012522:	4638      	mov	r0, r7
 8012524:	47c8      	blx	r9
 8012526:	3001      	adds	r0, #1
 8012528:	d103      	bne.n	8012532 <_printf_common+0xb6>
 801252a:	f04f 30ff 	mov.w	r0, #4294967295
 801252e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012532:	3501      	adds	r5, #1
 8012534:	e7c1      	b.n	80124ba <_printf_common+0x3e>
 8012536:	2030      	movs	r0, #48	@ 0x30
 8012538:	18e1      	adds	r1, r4, r3
 801253a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801253e:	1c5a      	adds	r2, r3, #1
 8012540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012544:	4422      	add	r2, r4
 8012546:	3302      	adds	r3, #2
 8012548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801254c:	e7c2      	b.n	80124d4 <_printf_common+0x58>
 801254e:	2301      	movs	r3, #1
 8012550:	4622      	mov	r2, r4
 8012552:	4641      	mov	r1, r8
 8012554:	4638      	mov	r0, r7
 8012556:	47c8      	blx	r9
 8012558:	3001      	adds	r0, #1
 801255a:	d0e6      	beq.n	801252a <_printf_common+0xae>
 801255c:	3601      	adds	r6, #1
 801255e:	e7d9      	b.n	8012514 <_printf_common+0x98>

08012560 <_printf_i>:
 8012560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012564:	7e0f      	ldrb	r7, [r1, #24]
 8012566:	4691      	mov	r9, r2
 8012568:	2f78      	cmp	r7, #120	@ 0x78
 801256a:	4680      	mov	r8, r0
 801256c:	460c      	mov	r4, r1
 801256e:	469a      	mov	sl, r3
 8012570:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012576:	d807      	bhi.n	8012588 <_printf_i+0x28>
 8012578:	2f62      	cmp	r7, #98	@ 0x62
 801257a:	d80a      	bhi.n	8012592 <_printf_i+0x32>
 801257c:	2f00      	cmp	r7, #0
 801257e:	f000 80d1 	beq.w	8012724 <_printf_i+0x1c4>
 8012582:	2f58      	cmp	r7, #88	@ 0x58
 8012584:	f000 80b8 	beq.w	80126f8 <_printf_i+0x198>
 8012588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801258c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012590:	e03a      	b.n	8012608 <_printf_i+0xa8>
 8012592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012596:	2b15      	cmp	r3, #21
 8012598:	d8f6      	bhi.n	8012588 <_printf_i+0x28>
 801259a:	a101      	add	r1, pc, #4	@ (adr r1, 80125a0 <_printf_i+0x40>)
 801259c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80125a0:	080125f9 	.word	0x080125f9
 80125a4:	0801260d 	.word	0x0801260d
 80125a8:	08012589 	.word	0x08012589
 80125ac:	08012589 	.word	0x08012589
 80125b0:	08012589 	.word	0x08012589
 80125b4:	08012589 	.word	0x08012589
 80125b8:	0801260d 	.word	0x0801260d
 80125bc:	08012589 	.word	0x08012589
 80125c0:	08012589 	.word	0x08012589
 80125c4:	08012589 	.word	0x08012589
 80125c8:	08012589 	.word	0x08012589
 80125cc:	0801270b 	.word	0x0801270b
 80125d0:	08012637 	.word	0x08012637
 80125d4:	080126c5 	.word	0x080126c5
 80125d8:	08012589 	.word	0x08012589
 80125dc:	08012589 	.word	0x08012589
 80125e0:	0801272d 	.word	0x0801272d
 80125e4:	08012589 	.word	0x08012589
 80125e8:	08012637 	.word	0x08012637
 80125ec:	08012589 	.word	0x08012589
 80125f0:	08012589 	.word	0x08012589
 80125f4:	080126cd 	.word	0x080126cd
 80125f8:	6833      	ldr	r3, [r6, #0]
 80125fa:	1d1a      	adds	r2, r3, #4
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	6032      	str	r2, [r6, #0]
 8012600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012608:	2301      	movs	r3, #1
 801260a:	e09c      	b.n	8012746 <_printf_i+0x1e6>
 801260c:	6833      	ldr	r3, [r6, #0]
 801260e:	6820      	ldr	r0, [r4, #0]
 8012610:	1d19      	adds	r1, r3, #4
 8012612:	6031      	str	r1, [r6, #0]
 8012614:	0606      	lsls	r6, r0, #24
 8012616:	d501      	bpl.n	801261c <_printf_i+0xbc>
 8012618:	681d      	ldr	r5, [r3, #0]
 801261a:	e003      	b.n	8012624 <_printf_i+0xc4>
 801261c:	0645      	lsls	r5, r0, #25
 801261e:	d5fb      	bpl.n	8012618 <_printf_i+0xb8>
 8012620:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012624:	2d00      	cmp	r5, #0
 8012626:	da03      	bge.n	8012630 <_printf_i+0xd0>
 8012628:	232d      	movs	r3, #45	@ 0x2d
 801262a:	426d      	negs	r5, r5
 801262c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012630:	230a      	movs	r3, #10
 8012632:	4858      	ldr	r0, [pc, #352]	@ (8012794 <_printf_i+0x234>)
 8012634:	e011      	b.n	801265a <_printf_i+0xfa>
 8012636:	6821      	ldr	r1, [r4, #0]
 8012638:	6833      	ldr	r3, [r6, #0]
 801263a:	0608      	lsls	r0, r1, #24
 801263c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012640:	d402      	bmi.n	8012648 <_printf_i+0xe8>
 8012642:	0649      	lsls	r1, r1, #25
 8012644:	bf48      	it	mi
 8012646:	b2ad      	uxthmi	r5, r5
 8012648:	2f6f      	cmp	r7, #111	@ 0x6f
 801264a:	6033      	str	r3, [r6, #0]
 801264c:	bf14      	ite	ne
 801264e:	230a      	movne	r3, #10
 8012650:	2308      	moveq	r3, #8
 8012652:	4850      	ldr	r0, [pc, #320]	@ (8012794 <_printf_i+0x234>)
 8012654:	2100      	movs	r1, #0
 8012656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801265a:	6866      	ldr	r6, [r4, #4]
 801265c:	2e00      	cmp	r6, #0
 801265e:	60a6      	str	r6, [r4, #8]
 8012660:	db05      	blt.n	801266e <_printf_i+0x10e>
 8012662:	6821      	ldr	r1, [r4, #0]
 8012664:	432e      	orrs	r6, r5
 8012666:	f021 0104 	bic.w	r1, r1, #4
 801266a:	6021      	str	r1, [r4, #0]
 801266c:	d04b      	beq.n	8012706 <_printf_i+0x1a6>
 801266e:	4616      	mov	r6, r2
 8012670:	fbb5 f1f3 	udiv	r1, r5, r3
 8012674:	fb03 5711 	mls	r7, r3, r1, r5
 8012678:	5dc7      	ldrb	r7, [r0, r7]
 801267a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801267e:	462f      	mov	r7, r5
 8012680:	42bb      	cmp	r3, r7
 8012682:	460d      	mov	r5, r1
 8012684:	d9f4      	bls.n	8012670 <_printf_i+0x110>
 8012686:	2b08      	cmp	r3, #8
 8012688:	d10b      	bne.n	80126a2 <_printf_i+0x142>
 801268a:	6823      	ldr	r3, [r4, #0]
 801268c:	07df      	lsls	r7, r3, #31
 801268e:	d508      	bpl.n	80126a2 <_printf_i+0x142>
 8012690:	6923      	ldr	r3, [r4, #16]
 8012692:	6861      	ldr	r1, [r4, #4]
 8012694:	4299      	cmp	r1, r3
 8012696:	bfde      	ittt	le
 8012698:	2330      	movle	r3, #48	@ 0x30
 801269a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801269e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80126a2:	1b92      	subs	r2, r2, r6
 80126a4:	6122      	str	r2, [r4, #16]
 80126a6:	464b      	mov	r3, r9
 80126a8:	4621      	mov	r1, r4
 80126aa:	4640      	mov	r0, r8
 80126ac:	f8cd a000 	str.w	sl, [sp]
 80126b0:	aa03      	add	r2, sp, #12
 80126b2:	f7ff fee3 	bl	801247c <_printf_common>
 80126b6:	3001      	adds	r0, #1
 80126b8:	d14a      	bne.n	8012750 <_printf_i+0x1f0>
 80126ba:	f04f 30ff 	mov.w	r0, #4294967295
 80126be:	b004      	add	sp, #16
 80126c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126c4:	6823      	ldr	r3, [r4, #0]
 80126c6:	f043 0320 	orr.w	r3, r3, #32
 80126ca:	6023      	str	r3, [r4, #0]
 80126cc:	2778      	movs	r7, #120	@ 0x78
 80126ce:	4832      	ldr	r0, [pc, #200]	@ (8012798 <_printf_i+0x238>)
 80126d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80126d4:	6823      	ldr	r3, [r4, #0]
 80126d6:	6831      	ldr	r1, [r6, #0]
 80126d8:	061f      	lsls	r7, r3, #24
 80126da:	f851 5b04 	ldr.w	r5, [r1], #4
 80126de:	d402      	bmi.n	80126e6 <_printf_i+0x186>
 80126e0:	065f      	lsls	r7, r3, #25
 80126e2:	bf48      	it	mi
 80126e4:	b2ad      	uxthmi	r5, r5
 80126e6:	6031      	str	r1, [r6, #0]
 80126e8:	07d9      	lsls	r1, r3, #31
 80126ea:	bf44      	itt	mi
 80126ec:	f043 0320 	orrmi.w	r3, r3, #32
 80126f0:	6023      	strmi	r3, [r4, #0]
 80126f2:	b11d      	cbz	r5, 80126fc <_printf_i+0x19c>
 80126f4:	2310      	movs	r3, #16
 80126f6:	e7ad      	b.n	8012654 <_printf_i+0xf4>
 80126f8:	4826      	ldr	r0, [pc, #152]	@ (8012794 <_printf_i+0x234>)
 80126fa:	e7e9      	b.n	80126d0 <_printf_i+0x170>
 80126fc:	6823      	ldr	r3, [r4, #0]
 80126fe:	f023 0320 	bic.w	r3, r3, #32
 8012702:	6023      	str	r3, [r4, #0]
 8012704:	e7f6      	b.n	80126f4 <_printf_i+0x194>
 8012706:	4616      	mov	r6, r2
 8012708:	e7bd      	b.n	8012686 <_printf_i+0x126>
 801270a:	6833      	ldr	r3, [r6, #0]
 801270c:	6825      	ldr	r5, [r4, #0]
 801270e:	1d18      	adds	r0, r3, #4
 8012710:	6961      	ldr	r1, [r4, #20]
 8012712:	6030      	str	r0, [r6, #0]
 8012714:	062e      	lsls	r6, r5, #24
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	d501      	bpl.n	801271e <_printf_i+0x1be>
 801271a:	6019      	str	r1, [r3, #0]
 801271c:	e002      	b.n	8012724 <_printf_i+0x1c4>
 801271e:	0668      	lsls	r0, r5, #25
 8012720:	d5fb      	bpl.n	801271a <_printf_i+0x1ba>
 8012722:	8019      	strh	r1, [r3, #0]
 8012724:	2300      	movs	r3, #0
 8012726:	4616      	mov	r6, r2
 8012728:	6123      	str	r3, [r4, #16]
 801272a:	e7bc      	b.n	80126a6 <_printf_i+0x146>
 801272c:	6833      	ldr	r3, [r6, #0]
 801272e:	2100      	movs	r1, #0
 8012730:	1d1a      	adds	r2, r3, #4
 8012732:	6032      	str	r2, [r6, #0]
 8012734:	681e      	ldr	r6, [r3, #0]
 8012736:	6862      	ldr	r2, [r4, #4]
 8012738:	4630      	mov	r0, r6
 801273a:	f000 fe04 	bl	8013346 <memchr>
 801273e:	b108      	cbz	r0, 8012744 <_printf_i+0x1e4>
 8012740:	1b80      	subs	r0, r0, r6
 8012742:	6060      	str	r0, [r4, #4]
 8012744:	6863      	ldr	r3, [r4, #4]
 8012746:	6123      	str	r3, [r4, #16]
 8012748:	2300      	movs	r3, #0
 801274a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801274e:	e7aa      	b.n	80126a6 <_printf_i+0x146>
 8012750:	4632      	mov	r2, r6
 8012752:	4649      	mov	r1, r9
 8012754:	4640      	mov	r0, r8
 8012756:	6923      	ldr	r3, [r4, #16]
 8012758:	47d0      	blx	sl
 801275a:	3001      	adds	r0, #1
 801275c:	d0ad      	beq.n	80126ba <_printf_i+0x15a>
 801275e:	6823      	ldr	r3, [r4, #0]
 8012760:	079b      	lsls	r3, r3, #30
 8012762:	d413      	bmi.n	801278c <_printf_i+0x22c>
 8012764:	68e0      	ldr	r0, [r4, #12]
 8012766:	9b03      	ldr	r3, [sp, #12]
 8012768:	4298      	cmp	r0, r3
 801276a:	bfb8      	it	lt
 801276c:	4618      	movlt	r0, r3
 801276e:	e7a6      	b.n	80126be <_printf_i+0x15e>
 8012770:	2301      	movs	r3, #1
 8012772:	4632      	mov	r2, r6
 8012774:	4649      	mov	r1, r9
 8012776:	4640      	mov	r0, r8
 8012778:	47d0      	blx	sl
 801277a:	3001      	adds	r0, #1
 801277c:	d09d      	beq.n	80126ba <_printf_i+0x15a>
 801277e:	3501      	adds	r5, #1
 8012780:	68e3      	ldr	r3, [r4, #12]
 8012782:	9903      	ldr	r1, [sp, #12]
 8012784:	1a5b      	subs	r3, r3, r1
 8012786:	42ab      	cmp	r3, r5
 8012788:	dcf2      	bgt.n	8012770 <_printf_i+0x210>
 801278a:	e7eb      	b.n	8012764 <_printf_i+0x204>
 801278c:	2500      	movs	r5, #0
 801278e:	f104 0619 	add.w	r6, r4, #25
 8012792:	e7f5      	b.n	8012780 <_printf_i+0x220>
 8012794:	080168b5 	.word	0x080168b5
 8012798:	080168c6 	.word	0x080168c6

0801279c <_scanf_float>:
 801279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a0:	b087      	sub	sp, #28
 80127a2:	9303      	str	r3, [sp, #12]
 80127a4:	688b      	ldr	r3, [r1, #8]
 80127a6:	4691      	mov	r9, r2
 80127a8:	1e5a      	subs	r2, r3, #1
 80127aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80127ae:	bf82      	ittt	hi
 80127b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80127b4:	eb03 0b05 	addhi.w	fp, r3, r5
 80127b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80127bc:	460a      	mov	r2, r1
 80127be:	f04f 0500 	mov.w	r5, #0
 80127c2:	bf88      	it	hi
 80127c4:	608b      	strhi	r3, [r1, #8]
 80127c6:	680b      	ldr	r3, [r1, #0]
 80127c8:	4680      	mov	r8, r0
 80127ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80127ce:	f842 3b1c 	str.w	r3, [r2], #28
 80127d2:	460c      	mov	r4, r1
 80127d4:	bf98      	it	ls
 80127d6:	f04f 0b00 	movls.w	fp, #0
 80127da:	4616      	mov	r6, r2
 80127dc:	46aa      	mov	sl, r5
 80127de:	462f      	mov	r7, r5
 80127e0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80127e4:	9201      	str	r2, [sp, #4]
 80127e6:	9502      	str	r5, [sp, #8]
 80127e8:	68a2      	ldr	r2, [r4, #8]
 80127ea:	b15a      	cbz	r2, 8012804 <_scanf_float+0x68>
 80127ec:	f8d9 3000 	ldr.w	r3, [r9]
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	2b4e      	cmp	r3, #78	@ 0x4e
 80127f4:	d862      	bhi.n	80128bc <_scanf_float+0x120>
 80127f6:	2b40      	cmp	r3, #64	@ 0x40
 80127f8:	d83a      	bhi.n	8012870 <_scanf_float+0xd4>
 80127fa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80127fe:	b2c8      	uxtb	r0, r1
 8012800:	280e      	cmp	r0, #14
 8012802:	d938      	bls.n	8012876 <_scanf_float+0xda>
 8012804:	b11f      	cbz	r7, 801280e <_scanf_float+0x72>
 8012806:	6823      	ldr	r3, [r4, #0]
 8012808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801280c:	6023      	str	r3, [r4, #0]
 801280e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012812:	f1ba 0f01 	cmp.w	sl, #1
 8012816:	f200 8114 	bhi.w	8012a42 <_scanf_float+0x2a6>
 801281a:	9b01      	ldr	r3, [sp, #4]
 801281c:	429e      	cmp	r6, r3
 801281e:	f200 8105 	bhi.w	8012a2c <_scanf_float+0x290>
 8012822:	2001      	movs	r0, #1
 8012824:	b007      	add	sp, #28
 8012826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801282a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801282e:	2a0d      	cmp	r2, #13
 8012830:	d8e8      	bhi.n	8012804 <_scanf_float+0x68>
 8012832:	a101      	add	r1, pc, #4	@ (adr r1, 8012838 <_scanf_float+0x9c>)
 8012834:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012838:	08012981 	.word	0x08012981
 801283c:	08012805 	.word	0x08012805
 8012840:	08012805 	.word	0x08012805
 8012844:	08012805 	.word	0x08012805
 8012848:	080129dd 	.word	0x080129dd
 801284c:	080129b7 	.word	0x080129b7
 8012850:	08012805 	.word	0x08012805
 8012854:	08012805 	.word	0x08012805
 8012858:	0801298f 	.word	0x0801298f
 801285c:	08012805 	.word	0x08012805
 8012860:	08012805 	.word	0x08012805
 8012864:	08012805 	.word	0x08012805
 8012868:	08012805 	.word	0x08012805
 801286c:	0801294b 	.word	0x0801294b
 8012870:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8012874:	e7db      	b.n	801282e <_scanf_float+0x92>
 8012876:	290e      	cmp	r1, #14
 8012878:	d8c4      	bhi.n	8012804 <_scanf_float+0x68>
 801287a:	a001      	add	r0, pc, #4	@ (adr r0, 8012880 <_scanf_float+0xe4>)
 801287c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012880:	0801293b 	.word	0x0801293b
 8012884:	08012805 	.word	0x08012805
 8012888:	0801293b 	.word	0x0801293b
 801288c:	080129cb 	.word	0x080129cb
 8012890:	08012805 	.word	0x08012805
 8012894:	080128dd 	.word	0x080128dd
 8012898:	08012921 	.word	0x08012921
 801289c:	08012921 	.word	0x08012921
 80128a0:	08012921 	.word	0x08012921
 80128a4:	08012921 	.word	0x08012921
 80128a8:	08012921 	.word	0x08012921
 80128ac:	08012921 	.word	0x08012921
 80128b0:	08012921 	.word	0x08012921
 80128b4:	08012921 	.word	0x08012921
 80128b8:	08012921 	.word	0x08012921
 80128bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80128be:	d809      	bhi.n	80128d4 <_scanf_float+0x138>
 80128c0:	2b60      	cmp	r3, #96	@ 0x60
 80128c2:	d8b2      	bhi.n	801282a <_scanf_float+0x8e>
 80128c4:	2b54      	cmp	r3, #84	@ 0x54
 80128c6:	d07b      	beq.n	80129c0 <_scanf_float+0x224>
 80128c8:	2b59      	cmp	r3, #89	@ 0x59
 80128ca:	d19b      	bne.n	8012804 <_scanf_float+0x68>
 80128cc:	2d07      	cmp	r5, #7
 80128ce:	d199      	bne.n	8012804 <_scanf_float+0x68>
 80128d0:	2508      	movs	r5, #8
 80128d2:	e02f      	b.n	8012934 <_scanf_float+0x198>
 80128d4:	2b74      	cmp	r3, #116	@ 0x74
 80128d6:	d073      	beq.n	80129c0 <_scanf_float+0x224>
 80128d8:	2b79      	cmp	r3, #121	@ 0x79
 80128da:	e7f6      	b.n	80128ca <_scanf_float+0x12e>
 80128dc:	6821      	ldr	r1, [r4, #0]
 80128de:	05c8      	lsls	r0, r1, #23
 80128e0:	d51e      	bpl.n	8012920 <_scanf_float+0x184>
 80128e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80128e6:	6021      	str	r1, [r4, #0]
 80128e8:	3701      	adds	r7, #1
 80128ea:	f1bb 0f00 	cmp.w	fp, #0
 80128ee:	d003      	beq.n	80128f8 <_scanf_float+0x15c>
 80128f0:	3201      	adds	r2, #1
 80128f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80128f6:	60a2      	str	r2, [r4, #8]
 80128f8:	68a3      	ldr	r3, [r4, #8]
 80128fa:	3b01      	subs	r3, #1
 80128fc:	60a3      	str	r3, [r4, #8]
 80128fe:	6923      	ldr	r3, [r4, #16]
 8012900:	3301      	adds	r3, #1
 8012902:	6123      	str	r3, [r4, #16]
 8012904:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012908:	3b01      	subs	r3, #1
 801290a:	2b00      	cmp	r3, #0
 801290c:	f8c9 3004 	str.w	r3, [r9, #4]
 8012910:	f340 8083 	ble.w	8012a1a <_scanf_float+0x27e>
 8012914:	f8d9 3000 	ldr.w	r3, [r9]
 8012918:	3301      	adds	r3, #1
 801291a:	f8c9 3000 	str.w	r3, [r9]
 801291e:	e763      	b.n	80127e8 <_scanf_float+0x4c>
 8012920:	eb1a 0105 	adds.w	r1, sl, r5
 8012924:	f47f af6e 	bne.w	8012804 <_scanf_float+0x68>
 8012928:	460d      	mov	r5, r1
 801292a:	468a      	mov	sl, r1
 801292c:	6822      	ldr	r2, [r4, #0]
 801292e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8012932:	6022      	str	r2, [r4, #0]
 8012934:	f806 3b01 	strb.w	r3, [r6], #1
 8012938:	e7de      	b.n	80128f8 <_scanf_float+0x15c>
 801293a:	6822      	ldr	r2, [r4, #0]
 801293c:	0610      	lsls	r0, r2, #24
 801293e:	f57f af61 	bpl.w	8012804 <_scanf_float+0x68>
 8012942:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012946:	6022      	str	r2, [r4, #0]
 8012948:	e7f4      	b.n	8012934 <_scanf_float+0x198>
 801294a:	f1ba 0f00 	cmp.w	sl, #0
 801294e:	d10c      	bne.n	801296a <_scanf_float+0x1ce>
 8012950:	b977      	cbnz	r7, 8012970 <_scanf_float+0x1d4>
 8012952:	6822      	ldr	r2, [r4, #0]
 8012954:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8012958:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801295c:	d108      	bne.n	8012970 <_scanf_float+0x1d4>
 801295e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8012962:	f04f 0a01 	mov.w	sl, #1
 8012966:	6022      	str	r2, [r4, #0]
 8012968:	e7e4      	b.n	8012934 <_scanf_float+0x198>
 801296a:	f1ba 0f02 	cmp.w	sl, #2
 801296e:	d051      	beq.n	8012a14 <_scanf_float+0x278>
 8012970:	2d01      	cmp	r5, #1
 8012972:	d002      	beq.n	801297a <_scanf_float+0x1de>
 8012974:	2d04      	cmp	r5, #4
 8012976:	f47f af45 	bne.w	8012804 <_scanf_float+0x68>
 801297a:	3501      	adds	r5, #1
 801297c:	b2ed      	uxtb	r5, r5
 801297e:	e7d9      	b.n	8012934 <_scanf_float+0x198>
 8012980:	f1ba 0f01 	cmp.w	sl, #1
 8012984:	f47f af3e 	bne.w	8012804 <_scanf_float+0x68>
 8012988:	f04f 0a02 	mov.w	sl, #2
 801298c:	e7d2      	b.n	8012934 <_scanf_float+0x198>
 801298e:	b975      	cbnz	r5, 80129ae <_scanf_float+0x212>
 8012990:	2f00      	cmp	r7, #0
 8012992:	f47f af38 	bne.w	8012806 <_scanf_float+0x6a>
 8012996:	6822      	ldr	r2, [r4, #0]
 8012998:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801299c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80129a0:	f040 80ff 	bne.w	8012ba2 <_scanf_float+0x406>
 80129a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80129a8:	2501      	movs	r5, #1
 80129aa:	6022      	str	r2, [r4, #0]
 80129ac:	e7c2      	b.n	8012934 <_scanf_float+0x198>
 80129ae:	2d03      	cmp	r5, #3
 80129b0:	d0e3      	beq.n	801297a <_scanf_float+0x1de>
 80129b2:	2d05      	cmp	r5, #5
 80129b4:	e7df      	b.n	8012976 <_scanf_float+0x1da>
 80129b6:	2d02      	cmp	r5, #2
 80129b8:	f47f af24 	bne.w	8012804 <_scanf_float+0x68>
 80129bc:	2503      	movs	r5, #3
 80129be:	e7b9      	b.n	8012934 <_scanf_float+0x198>
 80129c0:	2d06      	cmp	r5, #6
 80129c2:	f47f af1f 	bne.w	8012804 <_scanf_float+0x68>
 80129c6:	2507      	movs	r5, #7
 80129c8:	e7b4      	b.n	8012934 <_scanf_float+0x198>
 80129ca:	6822      	ldr	r2, [r4, #0]
 80129cc:	0591      	lsls	r1, r2, #22
 80129ce:	f57f af19 	bpl.w	8012804 <_scanf_float+0x68>
 80129d2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80129d6:	6022      	str	r2, [r4, #0]
 80129d8:	9702      	str	r7, [sp, #8]
 80129da:	e7ab      	b.n	8012934 <_scanf_float+0x198>
 80129dc:	6822      	ldr	r2, [r4, #0]
 80129de:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80129e2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80129e6:	d005      	beq.n	80129f4 <_scanf_float+0x258>
 80129e8:	0550      	lsls	r0, r2, #21
 80129ea:	f57f af0b 	bpl.w	8012804 <_scanf_float+0x68>
 80129ee:	2f00      	cmp	r7, #0
 80129f0:	f000 80d7 	beq.w	8012ba2 <_scanf_float+0x406>
 80129f4:	0591      	lsls	r1, r2, #22
 80129f6:	bf58      	it	pl
 80129f8:	9902      	ldrpl	r1, [sp, #8]
 80129fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80129fe:	bf58      	it	pl
 8012a00:	1a79      	subpl	r1, r7, r1
 8012a02:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8012a06:	f04f 0700 	mov.w	r7, #0
 8012a0a:	bf58      	it	pl
 8012a0c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012a10:	6022      	str	r2, [r4, #0]
 8012a12:	e78f      	b.n	8012934 <_scanf_float+0x198>
 8012a14:	f04f 0a03 	mov.w	sl, #3
 8012a18:	e78c      	b.n	8012934 <_scanf_float+0x198>
 8012a1a:	4649      	mov	r1, r9
 8012a1c:	4640      	mov	r0, r8
 8012a1e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012a22:	4798      	blx	r3
 8012a24:	2800      	cmp	r0, #0
 8012a26:	f43f aedf 	beq.w	80127e8 <_scanf_float+0x4c>
 8012a2a:	e6eb      	b.n	8012804 <_scanf_float+0x68>
 8012a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012a30:	464a      	mov	r2, r9
 8012a32:	4640      	mov	r0, r8
 8012a34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a38:	4798      	blx	r3
 8012a3a:	6923      	ldr	r3, [r4, #16]
 8012a3c:	3b01      	subs	r3, #1
 8012a3e:	6123      	str	r3, [r4, #16]
 8012a40:	e6eb      	b.n	801281a <_scanf_float+0x7e>
 8012a42:	1e6b      	subs	r3, r5, #1
 8012a44:	2b06      	cmp	r3, #6
 8012a46:	d824      	bhi.n	8012a92 <_scanf_float+0x2f6>
 8012a48:	2d02      	cmp	r5, #2
 8012a4a:	d836      	bhi.n	8012aba <_scanf_float+0x31e>
 8012a4c:	9b01      	ldr	r3, [sp, #4]
 8012a4e:	429e      	cmp	r6, r3
 8012a50:	f67f aee7 	bls.w	8012822 <_scanf_float+0x86>
 8012a54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012a58:	464a      	mov	r2, r9
 8012a5a:	4640      	mov	r0, r8
 8012a5c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a60:	4798      	blx	r3
 8012a62:	6923      	ldr	r3, [r4, #16]
 8012a64:	3b01      	subs	r3, #1
 8012a66:	6123      	str	r3, [r4, #16]
 8012a68:	e7f0      	b.n	8012a4c <_scanf_float+0x2b0>
 8012a6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012a6e:	464a      	mov	r2, r9
 8012a70:	4640      	mov	r0, r8
 8012a72:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8012a76:	4798      	blx	r3
 8012a78:	6923      	ldr	r3, [r4, #16]
 8012a7a:	3b01      	subs	r3, #1
 8012a7c:	6123      	str	r3, [r4, #16]
 8012a7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a82:	fa5f fa8a 	uxtb.w	sl, sl
 8012a86:	f1ba 0f02 	cmp.w	sl, #2
 8012a8a:	d1ee      	bne.n	8012a6a <_scanf_float+0x2ce>
 8012a8c:	3d03      	subs	r5, #3
 8012a8e:	b2ed      	uxtb	r5, r5
 8012a90:	1b76      	subs	r6, r6, r5
 8012a92:	6823      	ldr	r3, [r4, #0]
 8012a94:	05da      	lsls	r2, r3, #23
 8012a96:	d530      	bpl.n	8012afa <_scanf_float+0x35e>
 8012a98:	055b      	lsls	r3, r3, #21
 8012a9a:	d511      	bpl.n	8012ac0 <_scanf_float+0x324>
 8012a9c:	9b01      	ldr	r3, [sp, #4]
 8012a9e:	429e      	cmp	r6, r3
 8012aa0:	f67f aebf 	bls.w	8012822 <_scanf_float+0x86>
 8012aa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012aa8:	464a      	mov	r2, r9
 8012aaa:	4640      	mov	r0, r8
 8012aac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012ab0:	4798      	blx	r3
 8012ab2:	6923      	ldr	r3, [r4, #16]
 8012ab4:	3b01      	subs	r3, #1
 8012ab6:	6123      	str	r3, [r4, #16]
 8012ab8:	e7f0      	b.n	8012a9c <_scanf_float+0x300>
 8012aba:	46aa      	mov	sl, r5
 8012abc:	46b3      	mov	fp, r6
 8012abe:	e7de      	b.n	8012a7e <_scanf_float+0x2e2>
 8012ac0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012ac4:	6923      	ldr	r3, [r4, #16]
 8012ac6:	2965      	cmp	r1, #101	@ 0x65
 8012ac8:	f103 33ff 	add.w	r3, r3, #4294967295
 8012acc:	f106 35ff 	add.w	r5, r6, #4294967295
 8012ad0:	6123      	str	r3, [r4, #16]
 8012ad2:	d00c      	beq.n	8012aee <_scanf_float+0x352>
 8012ad4:	2945      	cmp	r1, #69	@ 0x45
 8012ad6:	d00a      	beq.n	8012aee <_scanf_float+0x352>
 8012ad8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012adc:	464a      	mov	r2, r9
 8012ade:	4640      	mov	r0, r8
 8012ae0:	4798      	blx	r3
 8012ae2:	6923      	ldr	r3, [r4, #16]
 8012ae4:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012ae8:	3b01      	subs	r3, #1
 8012aea:	1eb5      	subs	r5, r6, #2
 8012aec:	6123      	str	r3, [r4, #16]
 8012aee:	464a      	mov	r2, r9
 8012af0:	4640      	mov	r0, r8
 8012af2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012af6:	4798      	blx	r3
 8012af8:	462e      	mov	r6, r5
 8012afa:	6822      	ldr	r2, [r4, #0]
 8012afc:	f012 0210 	ands.w	r2, r2, #16
 8012b00:	d001      	beq.n	8012b06 <_scanf_float+0x36a>
 8012b02:	2000      	movs	r0, #0
 8012b04:	e68e      	b.n	8012824 <_scanf_float+0x88>
 8012b06:	7032      	strb	r2, [r6, #0]
 8012b08:	6823      	ldr	r3, [r4, #0]
 8012b0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8012b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012b12:	d125      	bne.n	8012b60 <_scanf_float+0x3c4>
 8012b14:	9b02      	ldr	r3, [sp, #8]
 8012b16:	429f      	cmp	r7, r3
 8012b18:	d00a      	beq.n	8012b30 <_scanf_float+0x394>
 8012b1a:	1bda      	subs	r2, r3, r7
 8012b1c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8012b20:	429e      	cmp	r6, r3
 8012b22:	bf28      	it	cs
 8012b24:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8012b28:	4630      	mov	r0, r6
 8012b2a:	491f      	ldr	r1, [pc, #124]	@ (8012ba8 <_scanf_float+0x40c>)
 8012b2c:	f000 f9ba 	bl	8012ea4 <siprintf>
 8012b30:	2200      	movs	r2, #0
 8012b32:	4640      	mov	r0, r8
 8012b34:	9901      	ldr	r1, [sp, #4]
 8012b36:	f7ff f93f 	bl	8011db8 <_strtod_r>
 8012b3a:	9b03      	ldr	r3, [sp, #12]
 8012b3c:	6825      	ldr	r5, [r4, #0]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f015 0f02 	tst.w	r5, #2
 8012b44:	4606      	mov	r6, r0
 8012b46:	460f      	mov	r7, r1
 8012b48:	f103 0204 	add.w	r2, r3, #4
 8012b4c:	d015      	beq.n	8012b7a <_scanf_float+0x3de>
 8012b4e:	9903      	ldr	r1, [sp, #12]
 8012b50:	600a      	str	r2, [r1, #0]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	e9c3 6700 	strd	r6, r7, [r3]
 8012b58:	68e3      	ldr	r3, [r4, #12]
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	60e3      	str	r3, [r4, #12]
 8012b5e:	e7d0      	b.n	8012b02 <_scanf_float+0x366>
 8012b60:	9b04      	ldr	r3, [sp, #16]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d0e4      	beq.n	8012b30 <_scanf_float+0x394>
 8012b66:	9905      	ldr	r1, [sp, #20]
 8012b68:	230a      	movs	r3, #10
 8012b6a:	4640      	mov	r0, r8
 8012b6c:	3101      	adds	r1, #1
 8012b6e:	f7ff f9af 	bl	8011ed0 <_strtol_r>
 8012b72:	9b04      	ldr	r3, [sp, #16]
 8012b74:	9e05      	ldr	r6, [sp, #20]
 8012b76:	1ac2      	subs	r2, r0, r3
 8012b78:	e7d0      	b.n	8012b1c <_scanf_float+0x380>
 8012b7a:	076d      	lsls	r5, r5, #29
 8012b7c:	d4e7      	bmi.n	8012b4e <_scanf_float+0x3b2>
 8012b7e:	9d03      	ldr	r5, [sp, #12]
 8012b80:	602a      	str	r2, [r5, #0]
 8012b82:	681d      	ldr	r5, [r3, #0]
 8012b84:	4602      	mov	r2, r0
 8012b86:	460b      	mov	r3, r1
 8012b88:	f7ed ff4a 	bl	8000a20 <__aeabi_dcmpun>
 8012b8c:	b120      	cbz	r0, 8012b98 <_scanf_float+0x3fc>
 8012b8e:	4807      	ldr	r0, [pc, #28]	@ (8012bac <_scanf_float+0x410>)
 8012b90:	f000 fbfc 	bl	801338c <nanf>
 8012b94:	6028      	str	r0, [r5, #0]
 8012b96:	e7df      	b.n	8012b58 <_scanf_float+0x3bc>
 8012b98:	4630      	mov	r0, r6
 8012b9a:	4639      	mov	r1, r7
 8012b9c:	f7ed ff9e 	bl	8000adc <__aeabi_d2f>
 8012ba0:	e7f8      	b.n	8012b94 <_scanf_float+0x3f8>
 8012ba2:	2700      	movs	r7, #0
 8012ba4:	e633      	b.n	801280e <_scanf_float+0x72>
 8012ba6:	bf00      	nop
 8012ba8:	080168d7 	.word	0x080168d7
 8012bac:	080168a0 	.word	0x080168a0

08012bb0 <std>:
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	b510      	push	{r4, lr}
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8012bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012bbe:	6083      	str	r3, [r0, #8]
 8012bc0:	8181      	strh	r1, [r0, #12]
 8012bc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8012bc4:	81c2      	strh	r2, [r0, #14]
 8012bc6:	6183      	str	r3, [r0, #24]
 8012bc8:	4619      	mov	r1, r3
 8012bca:	2208      	movs	r2, #8
 8012bcc:	305c      	adds	r0, #92	@ 0x5c
 8012bce:	f000 fa73 	bl	80130b8 <memset>
 8012bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8012c08 <std+0x58>)
 8012bd4:	6224      	str	r4, [r4, #32]
 8012bd6:	6263      	str	r3, [r4, #36]	@ 0x24
 8012bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8012c0c <std+0x5c>)
 8012bda:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8012c10 <std+0x60>)
 8012bde:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012be0:	4b0c      	ldr	r3, [pc, #48]	@ (8012c14 <std+0x64>)
 8012be2:	6323      	str	r3, [r4, #48]	@ 0x30
 8012be4:	4b0c      	ldr	r3, [pc, #48]	@ (8012c18 <std+0x68>)
 8012be6:	429c      	cmp	r4, r3
 8012be8:	d006      	beq.n	8012bf8 <std+0x48>
 8012bea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012bee:	4294      	cmp	r4, r2
 8012bf0:	d002      	beq.n	8012bf8 <std+0x48>
 8012bf2:	33d0      	adds	r3, #208	@ 0xd0
 8012bf4:	429c      	cmp	r4, r3
 8012bf6:	d105      	bne.n	8012c04 <std+0x54>
 8012bf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c00:	f000 bb96 	b.w	8013330 <__retarget_lock_init_recursive>
 8012c04:	bd10      	pop	{r4, pc}
 8012c06:	bf00      	nop
 8012c08:	08012ee9 	.word	0x08012ee9
 8012c0c:	08012f0b 	.word	0x08012f0b
 8012c10:	08012f43 	.word	0x08012f43
 8012c14:	08012f67 	.word	0x08012f67
 8012c18:	20002080 	.word	0x20002080

08012c1c <stdio_exit_handler>:
 8012c1c:	4a02      	ldr	r2, [pc, #8]	@ (8012c28 <stdio_exit_handler+0xc>)
 8012c1e:	4903      	ldr	r1, [pc, #12]	@ (8012c2c <stdio_exit_handler+0x10>)
 8012c20:	4803      	ldr	r0, [pc, #12]	@ (8012c30 <stdio_exit_handler+0x14>)
 8012c22:	f000 b87b 	b.w	8012d1c <_fwalk_sglue>
 8012c26:	bf00      	nop
 8012c28:	2000016c 	.word	0x2000016c
 8012c2c:	08015711 	.word	0x08015711
 8012c30:	200002e8 	.word	0x200002e8

08012c34 <cleanup_stdio>:
 8012c34:	6841      	ldr	r1, [r0, #4]
 8012c36:	4b0c      	ldr	r3, [pc, #48]	@ (8012c68 <cleanup_stdio+0x34>)
 8012c38:	b510      	push	{r4, lr}
 8012c3a:	4299      	cmp	r1, r3
 8012c3c:	4604      	mov	r4, r0
 8012c3e:	d001      	beq.n	8012c44 <cleanup_stdio+0x10>
 8012c40:	f002 fd66 	bl	8015710 <_fflush_r>
 8012c44:	68a1      	ldr	r1, [r4, #8]
 8012c46:	4b09      	ldr	r3, [pc, #36]	@ (8012c6c <cleanup_stdio+0x38>)
 8012c48:	4299      	cmp	r1, r3
 8012c4a:	d002      	beq.n	8012c52 <cleanup_stdio+0x1e>
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f002 fd5f 	bl	8015710 <_fflush_r>
 8012c52:	68e1      	ldr	r1, [r4, #12]
 8012c54:	4b06      	ldr	r3, [pc, #24]	@ (8012c70 <cleanup_stdio+0x3c>)
 8012c56:	4299      	cmp	r1, r3
 8012c58:	d004      	beq.n	8012c64 <cleanup_stdio+0x30>
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c60:	f002 bd56 	b.w	8015710 <_fflush_r>
 8012c64:	bd10      	pop	{r4, pc}
 8012c66:	bf00      	nop
 8012c68:	20002080 	.word	0x20002080
 8012c6c:	200020e8 	.word	0x200020e8
 8012c70:	20002150 	.word	0x20002150

08012c74 <global_stdio_init.part.0>:
 8012c74:	b510      	push	{r4, lr}
 8012c76:	4b0b      	ldr	r3, [pc, #44]	@ (8012ca4 <global_stdio_init.part.0+0x30>)
 8012c78:	4c0b      	ldr	r4, [pc, #44]	@ (8012ca8 <global_stdio_init.part.0+0x34>)
 8012c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8012cac <global_stdio_init.part.0+0x38>)
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	601a      	str	r2, [r3, #0]
 8012c80:	2104      	movs	r1, #4
 8012c82:	2200      	movs	r2, #0
 8012c84:	f7ff ff94 	bl	8012bb0 <std>
 8012c88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	2109      	movs	r1, #9
 8012c90:	f7ff ff8e 	bl	8012bb0 <std>
 8012c94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012c98:	2202      	movs	r2, #2
 8012c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c9e:	2112      	movs	r1, #18
 8012ca0:	f7ff bf86 	b.w	8012bb0 <std>
 8012ca4:	200021b8 	.word	0x200021b8
 8012ca8:	20002080 	.word	0x20002080
 8012cac:	08012c1d 	.word	0x08012c1d

08012cb0 <__sfp_lock_acquire>:
 8012cb0:	4801      	ldr	r0, [pc, #4]	@ (8012cb8 <__sfp_lock_acquire+0x8>)
 8012cb2:	f000 bb3e 	b.w	8013332 <__retarget_lock_acquire_recursive>
 8012cb6:	bf00      	nop
 8012cb8:	200021c1 	.word	0x200021c1

08012cbc <__sfp_lock_release>:
 8012cbc:	4801      	ldr	r0, [pc, #4]	@ (8012cc4 <__sfp_lock_release+0x8>)
 8012cbe:	f000 bb39 	b.w	8013334 <__retarget_lock_release_recursive>
 8012cc2:	bf00      	nop
 8012cc4:	200021c1 	.word	0x200021c1

08012cc8 <__sinit>:
 8012cc8:	b510      	push	{r4, lr}
 8012cca:	4604      	mov	r4, r0
 8012ccc:	f7ff fff0 	bl	8012cb0 <__sfp_lock_acquire>
 8012cd0:	6a23      	ldr	r3, [r4, #32]
 8012cd2:	b11b      	cbz	r3, 8012cdc <__sinit+0x14>
 8012cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cd8:	f7ff bff0 	b.w	8012cbc <__sfp_lock_release>
 8012cdc:	4b04      	ldr	r3, [pc, #16]	@ (8012cf0 <__sinit+0x28>)
 8012cde:	6223      	str	r3, [r4, #32]
 8012ce0:	4b04      	ldr	r3, [pc, #16]	@ (8012cf4 <__sinit+0x2c>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d1f5      	bne.n	8012cd4 <__sinit+0xc>
 8012ce8:	f7ff ffc4 	bl	8012c74 <global_stdio_init.part.0>
 8012cec:	e7f2      	b.n	8012cd4 <__sinit+0xc>
 8012cee:	bf00      	nop
 8012cf0:	08012c35 	.word	0x08012c35
 8012cf4:	200021b8 	.word	0x200021b8

08012cf8 <fiprintf>:
 8012cf8:	b40e      	push	{r1, r2, r3}
 8012cfa:	b503      	push	{r0, r1, lr}
 8012cfc:	4601      	mov	r1, r0
 8012cfe:	ab03      	add	r3, sp, #12
 8012d00:	4805      	ldr	r0, [pc, #20]	@ (8012d18 <fiprintf+0x20>)
 8012d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d06:	6800      	ldr	r0, [r0, #0]
 8012d08:	9301      	str	r3, [sp, #4]
 8012d0a:	f002 fb69 	bl	80153e0 <_vfiprintf_r>
 8012d0e:	b002      	add	sp, #8
 8012d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d14:	b003      	add	sp, #12
 8012d16:	4770      	bx	lr
 8012d18:	200002e4 	.word	0x200002e4

08012d1c <_fwalk_sglue>:
 8012d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d20:	4607      	mov	r7, r0
 8012d22:	4688      	mov	r8, r1
 8012d24:	4614      	mov	r4, r2
 8012d26:	2600      	movs	r6, #0
 8012d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8012d30:	d505      	bpl.n	8012d3e <_fwalk_sglue+0x22>
 8012d32:	6824      	ldr	r4, [r4, #0]
 8012d34:	2c00      	cmp	r4, #0
 8012d36:	d1f7      	bne.n	8012d28 <_fwalk_sglue+0xc>
 8012d38:	4630      	mov	r0, r6
 8012d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d3e:	89ab      	ldrh	r3, [r5, #12]
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d907      	bls.n	8012d54 <_fwalk_sglue+0x38>
 8012d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d48:	3301      	adds	r3, #1
 8012d4a:	d003      	beq.n	8012d54 <_fwalk_sglue+0x38>
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	4638      	mov	r0, r7
 8012d50:	47c0      	blx	r8
 8012d52:	4306      	orrs	r6, r0
 8012d54:	3568      	adds	r5, #104	@ 0x68
 8012d56:	e7e9      	b.n	8012d2c <_fwalk_sglue+0x10>

08012d58 <iprintf>:
 8012d58:	b40f      	push	{r0, r1, r2, r3}
 8012d5a:	b507      	push	{r0, r1, r2, lr}
 8012d5c:	4906      	ldr	r1, [pc, #24]	@ (8012d78 <iprintf+0x20>)
 8012d5e:	ab04      	add	r3, sp, #16
 8012d60:	6808      	ldr	r0, [r1, #0]
 8012d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d66:	6881      	ldr	r1, [r0, #8]
 8012d68:	9301      	str	r3, [sp, #4]
 8012d6a:	f002 fb39 	bl	80153e0 <_vfiprintf_r>
 8012d6e:	b003      	add	sp, #12
 8012d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d74:	b004      	add	sp, #16
 8012d76:	4770      	bx	lr
 8012d78:	200002e4 	.word	0x200002e4

08012d7c <_puts_r>:
 8012d7c:	6a03      	ldr	r3, [r0, #32]
 8012d7e:	b570      	push	{r4, r5, r6, lr}
 8012d80:	4605      	mov	r5, r0
 8012d82:	460e      	mov	r6, r1
 8012d84:	6884      	ldr	r4, [r0, #8]
 8012d86:	b90b      	cbnz	r3, 8012d8c <_puts_r+0x10>
 8012d88:	f7ff ff9e 	bl	8012cc8 <__sinit>
 8012d8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d8e:	07db      	lsls	r3, r3, #31
 8012d90:	d405      	bmi.n	8012d9e <_puts_r+0x22>
 8012d92:	89a3      	ldrh	r3, [r4, #12]
 8012d94:	0598      	lsls	r0, r3, #22
 8012d96:	d402      	bmi.n	8012d9e <_puts_r+0x22>
 8012d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d9a:	f000 faca 	bl	8013332 <__retarget_lock_acquire_recursive>
 8012d9e:	89a3      	ldrh	r3, [r4, #12]
 8012da0:	0719      	lsls	r1, r3, #28
 8012da2:	d502      	bpl.n	8012daa <_puts_r+0x2e>
 8012da4:	6923      	ldr	r3, [r4, #16]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d135      	bne.n	8012e16 <_puts_r+0x9a>
 8012daa:	4621      	mov	r1, r4
 8012dac:	4628      	mov	r0, r5
 8012dae:	f000 f91d 	bl	8012fec <__swsetup_r>
 8012db2:	b380      	cbz	r0, 8012e16 <_puts_r+0x9a>
 8012db4:	f04f 35ff 	mov.w	r5, #4294967295
 8012db8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012dba:	07da      	lsls	r2, r3, #31
 8012dbc:	d405      	bmi.n	8012dca <_puts_r+0x4e>
 8012dbe:	89a3      	ldrh	r3, [r4, #12]
 8012dc0:	059b      	lsls	r3, r3, #22
 8012dc2:	d402      	bmi.n	8012dca <_puts_r+0x4e>
 8012dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012dc6:	f000 fab5 	bl	8013334 <__retarget_lock_release_recursive>
 8012dca:	4628      	mov	r0, r5
 8012dcc:	bd70      	pop	{r4, r5, r6, pc}
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	da04      	bge.n	8012ddc <_puts_r+0x60>
 8012dd2:	69a2      	ldr	r2, [r4, #24]
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	dc17      	bgt.n	8012e08 <_puts_r+0x8c>
 8012dd8:	290a      	cmp	r1, #10
 8012dda:	d015      	beq.n	8012e08 <_puts_r+0x8c>
 8012ddc:	6823      	ldr	r3, [r4, #0]
 8012dde:	1c5a      	adds	r2, r3, #1
 8012de0:	6022      	str	r2, [r4, #0]
 8012de2:	7019      	strb	r1, [r3, #0]
 8012de4:	68a3      	ldr	r3, [r4, #8]
 8012de6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012dea:	3b01      	subs	r3, #1
 8012dec:	60a3      	str	r3, [r4, #8]
 8012dee:	2900      	cmp	r1, #0
 8012df0:	d1ed      	bne.n	8012dce <_puts_r+0x52>
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	da11      	bge.n	8012e1a <_puts_r+0x9e>
 8012df6:	4622      	mov	r2, r4
 8012df8:	210a      	movs	r1, #10
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	f000 f8b7 	bl	8012f6e <__swbuf_r>
 8012e00:	3001      	adds	r0, #1
 8012e02:	d0d7      	beq.n	8012db4 <_puts_r+0x38>
 8012e04:	250a      	movs	r5, #10
 8012e06:	e7d7      	b.n	8012db8 <_puts_r+0x3c>
 8012e08:	4622      	mov	r2, r4
 8012e0a:	4628      	mov	r0, r5
 8012e0c:	f000 f8af 	bl	8012f6e <__swbuf_r>
 8012e10:	3001      	adds	r0, #1
 8012e12:	d1e7      	bne.n	8012de4 <_puts_r+0x68>
 8012e14:	e7ce      	b.n	8012db4 <_puts_r+0x38>
 8012e16:	3e01      	subs	r6, #1
 8012e18:	e7e4      	b.n	8012de4 <_puts_r+0x68>
 8012e1a:	6823      	ldr	r3, [r4, #0]
 8012e1c:	1c5a      	adds	r2, r3, #1
 8012e1e:	6022      	str	r2, [r4, #0]
 8012e20:	220a      	movs	r2, #10
 8012e22:	701a      	strb	r2, [r3, #0]
 8012e24:	e7ee      	b.n	8012e04 <_puts_r+0x88>
	...

08012e28 <puts>:
 8012e28:	4b02      	ldr	r3, [pc, #8]	@ (8012e34 <puts+0xc>)
 8012e2a:	4601      	mov	r1, r0
 8012e2c:	6818      	ldr	r0, [r3, #0]
 8012e2e:	f7ff bfa5 	b.w	8012d7c <_puts_r>
 8012e32:	bf00      	nop
 8012e34:	200002e4 	.word	0x200002e4

08012e38 <sniprintf>:
 8012e38:	b40c      	push	{r2, r3}
 8012e3a:	b530      	push	{r4, r5, lr}
 8012e3c:	4b18      	ldr	r3, [pc, #96]	@ (8012ea0 <sniprintf+0x68>)
 8012e3e:	1e0c      	subs	r4, r1, #0
 8012e40:	681d      	ldr	r5, [r3, #0]
 8012e42:	b09d      	sub	sp, #116	@ 0x74
 8012e44:	da08      	bge.n	8012e58 <sniprintf+0x20>
 8012e46:	238b      	movs	r3, #139	@ 0x8b
 8012e48:	f04f 30ff 	mov.w	r0, #4294967295
 8012e4c:	602b      	str	r3, [r5, #0]
 8012e4e:	b01d      	add	sp, #116	@ 0x74
 8012e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e54:	b002      	add	sp, #8
 8012e56:	4770      	bx	lr
 8012e58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012e5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012e60:	f04f 0300 	mov.w	r3, #0
 8012e64:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012e66:	bf0c      	ite	eq
 8012e68:	4623      	moveq	r3, r4
 8012e6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012e6e:	9304      	str	r3, [sp, #16]
 8012e70:	9307      	str	r3, [sp, #28]
 8012e72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012e76:	9002      	str	r0, [sp, #8]
 8012e78:	9006      	str	r0, [sp, #24]
 8012e7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012e7e:	4628      	mov	r0, r5
 8012e80:	ab21      	add	r3, sp, #132	@ 0x84
 8012e82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012e84:	a902      	add	r1, sp, #8
 8012e86:	9301      	str	r3, [sp, #4]
 8012e88:	f002 f986 	bl	8015198 <_svfiprintf_r>
 8012e8c:	1c43      	adds	r3, r0, #1
 8012e8e:	bfbc      	itt	lt
 8012e90:	238b      	movlt	r3, #139	@ 0x8b
 8012e92:	602b      	strlt	r3, [r5, #0]
 8012e94:	2c00      	cmp	r4, #0
 8012e96:	d0da      	beq.n	8012e4e <sniprintf+0x16>
 8012e98:	2200      	movs	r2, #0
 8012e9a:	9b02      	ldr	r3, [sp, #8]
 8012e9c:	701a      	strb	r2, [r3, #0]
 8012e9e:	e7d6      	b.n	8012e4e <sniprintf+0x16>
 8012ea0:	200002e4 	.word	0x200002e4

08012ea4 <siprintf>:
 8012ea4:	b40e      	push	{r1, r2, r3}
 8012ea6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012eaa:	b510      	push	{r4, lr}
 8012eac:	2400      	movs	r4, #0
 8012eae:	b09d      	sub	sp, #116	@ 0x74
 8012eb0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8012eb2:	9002      	str	r0, [sp, #8]
 8012eb4:	9006      	str	r0, [sp, #24]
 8012eb6:	9107      	str	r1, [sp, #28]
 8012eb8:	9104      	str	r1, [sp, #16]
 8012eba:	4809      	ldr	r0, [pc, #36]	@ (8012ee0 <siprintf+0x3c>)
 8012ebc:	4909      	ldr	r1, [pc, #36]	@ (8012ee4 <siprintf+0x40>)
 8012ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ec2:	9105      	str	r1, [sp, #20]
 8012ec4:	6800      	ldr	r0, [r0, #0]
 8012ec6:	a902      	add	r1, sp, #8
 8012ec8:	9301      	str	r3, [sp, #4]
 8012eca:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012ecc:	f002 f964 	bl	8015198 <_svfiprintf_r>
 8012ed0:	9b02      	ldr	r3, [sp, #8]
 8012ed2:	701c      	strb	r4, [r3, #0]
 8012ed4:	b01d      	add	sp, #116	@ 0x74
 8012ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eda:	b003      	add	sp, #12
 8012edc:	4770      	bx	lr
 8012ede:	bf00      	nop
 8012ee0:	200002e4 	.word	0x200002e4
 8012ee4:	ffff0208 	.word	0xffff0208

08012ee8 <__sread>:
 8012ee8:	b510      	push	{r4, lr}
 8012eea:	460c      	mov	r4, r1
 8012eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ef0:	f000 f9c0 	bl	8013274 <_read_r>
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	bfab      	itete	ge
 8012ef8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012efa:	89a3      	ldrhlt	r3, [r4, #12]
 8012efc:	181b      	addge	r3, r3, r0
 8012efe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012f02:	bfac      	ite	ge
 8012f04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012f06:	81a3      	strhlt	r3, [r4, #12]
 8012f08:	bd10      	pop	{r4, pc}

08012f0a <__swrite>:
 8012f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f0e:	461f      	mov	r7, r3
 8012f10:	898b      	ldrh	r3, [r1, #12]
 8012f12:	4605      	mov	r5, r0
 8012f14:	05db      	lsls	r3, r3, #23
 8012f16:	460c      	mov	r4, r1
 8012f18:	4616      	mov	r6, r2
 8012f1a:	d505      	bpl.n	8012f28 <__swrite+0x1e>
 8012f1c:	2302      	movs	r3, #2
 8012f1e:	2200      	movs	r2, #0
 8012f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f24:	f000 f994 	bl	8013250 <_lseek_r>
 8012f28:	89a3      	ldrh	r3, [r4, #12]
 8012f2a:	4632      	mov	r2, r6
 8012f2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012f30:	81a3      	strh	r3, [r4, #12]
 8012f32:	4628      	mov	r0, r5
 8012f34:	463b      	mov	r3, r7
 8012f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f3e:	f000 b9bb 	b.w	80132b8 <_write_r>

08012f42 <__sseek>:
 8012f42:	b510      	push	{r4, lr}
 8012f44:	460c      	mov	r4, r1
 8012f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f4a:	f000 f981 	bl	8013250 <_lseek_r>
 8012f4e:	1c43      	adds	r3, r0, #1
 8012f50:	89a3      	ldrh	r3, [r4, #12]
 8012f52:	bf15      	itete	ne
 8012f54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012f56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012f5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012f5e:	81a3      	strheq	r3, [r4, #12]
 8012f60:	bf18      	it	ne
 8012f62:	81a3      	strhne	r3, [r4, #12]
 8012f64:	bd10      	pop	{r4, pc}

08012f66 <__sclose>:
 8012f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f6a:	f000 b961 	b.w	8013230 <_close_r>

08012f6e <__swbuf_r>:
 8012f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f70:	460e      	mov	r6, r1
 8012f72:	4614      	mov	r4, r2
 8012f74:	4605      	mov	r5, r0
 8012f76:	b118      	cbz	r0, 8012f80 <__swbuf_r+0x12>
 8012f78:	6a03      	ldr	r3, [r0, #32]
 8012f7a:	b90b      	cbnz	r3, 8012f80 <__swbuf_r+0x12>
 8012f7c:	f7ff fea4 	bl	8012cc8 <__sinit>
 8012f80:	69a3      	ldr	r3, [r4, #24]
 8012f82:	60a3      	str	r3, [r4, #8]
 8012f84:	89a3      	ldrh	r3, [r4, #12]
 8012f86:	071a      	lsls	r2, r3, #28
 8012f88:	d501      	bpl.n	8012f8e <__swbuf_r+0x20>
 8012f8a:	6923      	ldr	r3, [r4, #16]
 8012f8c:	b943      	cbnz	r3, 8012fa0 <__swbuf_r+0x32>
 8012f8e:	4621      	mov	r1, r4
 8012f90:	4628      	mov	r0, r5
 8012f92:	f000 f82b 	bl	8012fec <__swsetup_r>
 8012f96:	b118      	cbz	r0, 8012fa0 <__swbuf_r+0x32>
 8012f98:	f04f 37ff 	mov.w	r7, #4294967295
 8012f9c:	4638      	mov	r0, r7
 8012f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fa0:	6823      	ldr	r3, [r4, #0]
 8012fa2:	6922      	ldr	r2, [r4, #16]
 8012fa4:	b2f6      	uxtb	r6, r6
 8012fa6:	1a98      	subs	r0, r3, r2
 8012fa8:	6963      	ldr	r3, [r4, #20]
 8012faa:	4637      	mov	r7, r6
 8012fac:	4283      	cmp	r3, r0
 8012fae:	dc05      	bgt.n	8012fbc <__swbuf_r+0x4e>
 8012fb0:	4621      	mov	r1, r4
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f002 fbac 	bl	8015710 <_fflush_r>
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	d1ed      	bne.n	8012f98 <__swbuf_r+0x2a>
 8012fbc:	68a3      	ldr	r3, [r4, #8]
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	60a3      	str	r3, [r4, #8]
 8012fc2:	6823      	ldr	r3, [r4, #0]
 8012fc4:	1c5a      	adds	r2, r3, #1
 8012fc6:	6022      	str	r2, [r4, #0]
 8012fc8:	701e      	strb	r6, [r3, #0]
 8012fca:	6962      	ldr	r2, [r4, #20]
 8012fcc:	1c43      	adds	r3, r0, #1
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d004      	beq.n	8012fdc <__swbuf_r+0x6e>
 8012fd2:	89a3      	ldrh	r3, [r4, #12]
 8012fd4:	07db      	lsls	r3, r3, #31
 8012fd6:	d5e1      	bpl.n	8012f9c <__swbuf_r+0x2e>
 8012fd8:	2e0a      	cmp	r6, #10
 8012fda:	d1df      	bne.n	8012f9c <__swbuf_r+0x2e>
 8012fdc:	4621      	mov	r1, r4
 8012fde:	4628      	mov	r0, r5
 8012fe0:	f002 fb96 	bl	8015710 <_fflush_r>
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	d0d9      	beq.n	8012f9c <__swbuf_r+0x2e>
 8012fe8:	e7d6      	b.n	8012f98 <__swbuf_r+0x2a>
	...

08012fec <__swsetup_r>:
 8012fec:	b538      	push	{r3, r4, r5, lr}
 8012fee:	4b29      	ldr	r3, [pc, #164]	@ (8013094 <__swsetup_r+0xa8>)
 8012ff0:	4605      	mov	r5, r0
 8012ff2:	6818      	ldr	r0, [r3, #0]
 8012ff4:	460c      	mov	r4, r1
 8012ff6:	b118      	cbz	r0, 8013000 <__swsetup_r+0x14>
 8012ff8:	6a03      	ldr	r3, [r0, #32]
 8012ffa:	b90b      	cbnz	r3, 8013000 <__swsetup_r+0x14>
 8012ffc:	f7ff fe64 	bl	8012cc8 <__sinit>
 8013000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013004:	0719      	lsls	r1, r3, #28
 8013006:	d422      	bmi.n	801304e <__swsetup_r+0x62>
 8013008:	06da      	lsls	r2, r3, #27
 801300a:	d407      	bmi.n	801301c <__swsetup_r+0x30>
 801300c:	2209      	movs	r2, #9
 801300e:	602a      	str	r2, [r5, #0]
 8013010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013014:	f04f 30ff 	mov.w	r0, #4294967295
 8013018:	81a3      	strh	r3, [r4, #12]
 801301a:	e033      	b.n	8013084 <__swsetup_r+0x98>
 801301c:	0758      	lsls	r0, r3, #29
 801301e:	d512      	bpl.n	8013046 <__swsetup_r+0x5a>
 8013020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013022:	b141      	cbz	r1, 8013036 <__swsetup_r+0x4a>
 8013024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013028:	4299      	cmp	r1, r3
 801302a:	d002      	beq.n	8013032 <__swsetup_r+0x46>
 801302c:	4628      	mov	r0, r5
 801302e:	f001 f817 	bl	8014060 <_free_r>
 8013032:	2300      	movs	r3, #0
 8013034:	6363      	str	r3, [r4, #52]	@ 0x34
 8013036:	89a3      	ldrh	r3, [r4, #12]
 8013038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801303c:	81a3      	strh	r3, [r4, #12]
 801303e:	2300      	movs	r3, #0
 8013040:	6063      	str	r3, [r4, #4]
 8013042:	6923      	ldr	r3, [r4, #16]
 8013044:	6023      	str	r3, [r4, #0]
 8013046:	89a3      	ldrh	r3, [r4, #12]
 8013048:	f043 0308 	orr.w	r3, r3, #8
 801304c:	81a3      	strh	r3, [r4, #12]
 801304e:	6923      	ldr	r3, [r4, #16]
 8013050:	b94b      	cbnz	r3, 8013066 <__swsetup_r+0x7a>
 8013052:	89a3      	ldrh	r3, [r4, #12]
 8013054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801305c:	d003      	beq.n	8013066 <__swsetup_r+0x7a>
 801305e:	4621      	mov	r1, r4
 8013060:	4628      	mov	r0, r5
 8013062:	f002 fba2 	bl	80157aa <__smakebuf_r>
 8013066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801306a:	f013 0201 	ands.w	r2, r3, #1
 801306e:	d00a      	beq.n	8013086 <__swsetup_r+0x9a>
 8013070:	2200      	movs	r2, #0
 8013072:	60a2      	str	r2, [r4, #8]
 8013074:	6962      	ldr	r2, [r4, #20]
 8013076:	4252      	negs	r2, r2
 8013078:	61a2      	str	r2, [r4, #24]
 801307a:	6922      	ldr	r2, [r4, #16]
 801307c:	b942      	cbnz	r2, 8013090 <__swsetup_r+0xa4>
 801307e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013082:	d1c5      	bne.n	8013010 <__swsetup_r+0x24>
 8013084:	bd38      	pop	{r3, r4, r5, pc}
 8013086:	0799      	lsls	r1, r3, #30
 8013088:	bf58      	it	pl
 801308a:	6962      	ldrpl	r2, [r4, #20]
 801308c:	60a2      	str	r2, [r4, #8]
 801308e:	e7f4      	b.n	801307a <__swsetup_r+0x8e>
 8013090:	2000      	movs	r0, #0
 8013092:	e7f7      	b.n	8013084 <__swsetup_r+0x98>
 8013094:	200002e4 	.word	0x200002e4

08013098 <memcmp>:
 8013098:	b510      	push	{r4, lr}
 801309a:	3901      	subs	r1, #1
 801309c:	4402      	add	r2, r0
 801309e:	4290      	cmp	r0, r2
 80130a0:	d101      	bne.n	80130a6 <memcmp+0xe>
 80130a2:	2000      	movs	r0, #0
 80130a4:	e005      	b.n	80130b2 <memcmp+0x1a>
 80130a6:	7803      	ldrb	r3, [r0, #0]
 80130a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80130ac:	42a3      	cmp	r3, r4
 80130ae:	d001      	beq.n	80130b4 <memcmp+0x1c>
 80130b0:	1b18      	subs	r0, r3, r4
 80130b2:	bd10      	pop	{r4, pc}
 80130b4:	3001      	adds	r0, #1
 80130b6:	e7f2      	b.n	801309e <memcmp+0x6>

080130b8 <memset>:
 80130b8:	4603      	mov	r3, r0
 80130ba:	4402      	add	r2, r0
 80130bc:	4293      	cmp	r3, r2
 80130be:	d100      	bne.n	80130c2 <memset+0xa>
 80130c0:	4770      	bx	lr
 80130c2:	f803 1b01 	strb.w	r1, [r3], #1
 80130c6:	e7f9      	b.n	80130bc <memset+0x4>

080130c8 <strcat>:
 80130c8:	4602      	mov	r2, r0
 80130ca:	b510      	push	{r4, lr}
 80130cc:	7814      	ldrb	r4, [r2, #0]
 80130ce:	4613      	mov	r3, r2
 80130d0:	3201      	adds	r2, #1
 80130d2:	2c00      	cmp	r4, #0
 80130d4:	d1fa      	bne.n	80130cc <strcat+0x4>
 80130d6:	3b01      	subs	r3, #1
 80130d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80130dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80130e0:	2a00      	cmp	r2, #0
 80130e2:	d1f9      	bne.n	80130d8 <strcat+0x10>
 80130e4:	bd10      	pop	{r4, pc}

080130e6 <strchr>:
 80130e6:	4603      	mov	r3, r0
 80130e8:	b2c9      	uxtb	r1, r1
 80130ea:	4618      	mov	r0, r3
 80130ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130f0:	b112      	cbz	r2, 80130f8 <strchr+0x12>
 80130f2:	428a      	cmp	r2, r1
 80130f4:	d1f9      	bne.n	80130ea <strchr+0x4>
 80130f6:	4770      	bx	lr
 80130f8:	2900      	cmp	r1, #0
 80130fa:	bf18      	it	ne
 80130fc:	2000      	movne	r0, #0
 80130fe:	4770      	bx	lr

08013100 <strncat>:
 8013100:	b530      	push	{r4, r5, lr}
 8013102:	4604      	mov	r4, r0
 8013104:	7825      	ldrb	r5, [r4, #0]
 8013106:	4623      	mov	r3, r4
 8013108:	3401      	adds	r4, #1
 801310a:	2d00      	cmp	r5, #0
 801310c:	d1fa      	bne.n	8013104 <strncat+0x4>
 801310e:	3a01      	subs	r2, #1
 8013110:	d304      	bcc.n	801311c <strncat+0x1c>
 8013112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013116:	f803 4b01 	strb.w	r4, [r3], #1
 801311a:	b904      	cbnz	r4, 801311e <strncat+0x1e>
 801311c:	bd30      	pop	{r4, r5, pc}
 801311e:	2a00      	cmp	r2, #0
 8013120:	d1f5      	bne.n	801310e <strncat+0xe>
 8013122:	701a      	strb	r2, [r3, #0]
 8013124:	e7f3      	b.n	801310e <strncat+0xe>

08013126 <strncmp>:
 8013126:	b510      	push	{r4, lr}
 8013128:	b16a      	cbz	r2, 8013146 <strncmp+0x20>
 801312a:	3901      	subs	r1, #1
 801312c:	1884      	adds	r4, r0, r2
 801312e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013132:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013136:	429a      	cmp	r2, r3
 8013138:	d103      	bne.n	8013142 <strncmp+0x1c>
 801313a:	42a0      	cmp	r0, r4
 801313c:	d001      	beq.n	8013142 <strncmp+0x1c>
 801313e:	2a00      	cmp	r2, #0
 8013140:	d1f5      	bne.n	801312e <strncmp+0x8>
 8013142:	1ad0      	subs	r0, r2, r3
 8013144:	bd10      	pop	{r4, pc}
 8013146:	4610      	mov	r0, r2
 8013148:	e7fc      	b.n	8013144 <strncmp+0x1e>

0801314a <strncpy>:
 801314a:	4603      	mov	r3, r0
 801314c:	b510      	push	{r4, lr}
 801314e:	3901      	subs	r1, #1
 8013150:	b132      	cbz	r2, 8013160 <strncpy+0x16>
 8013152:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013156:	3a01      	subs	r2, #1
 8013158:	f803 4b01 	strb.w	r4, [r3], #1
 801315c:	2c00      	cmp	r4, #0
 801315e:	d1f7      	bne.n	8013150 <strncpy+0x6>
 8013160:	2100      	movs	r1, #0
 8013162:	441a      	add	r2, r3
 8013164:	4293      	cmp	r3, r2
 8013166:	d100      	bne.n	801316a <strncpy+0x20>
 8013168:	bd10      	pop	{r4, pc}
 801316a:	f803 1b01 	strb.w	r1, [r3], #1
 801316e:	e7f9      	b.n	8013164 <strncpy+0x1a>

08013170 <strtok>:
 8013170:	4b16      	ldr	r3, [pc, #88]	@ (80131cc <strtok+0x5c>)
 8013172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013176:	681f      	ldr	r7, [r3, #0]
 8013178:	4605      	mov	r5, r0
 801317a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801317c:	460e      	mov	r6, r1
 801317e:	b9ec      	cbnz	r4, 80131bc <strtok+0x4c>
 8013180:	2050      	movs	r0, #80	@ 0x50
 8013182:	f7fd ff61 	bl	8011048 <malloc>
 8013186:	4602      	mov	r2, r0
 8013188:	6478      	str	r0, [r7, #68]	@ 0x44
 801318a:	b920      	cbnz	r0, 8013196 <strtok+0x26>
 801318c:	215b      	movs	r1, #91	@ 0x5b
 801318e:	4b10      	ldr	r3, [pc, #64]	@ (80131d0 <strtok+0x60>)
 8013190:	4810      	ldr	r0, [pc, #64]	@ (80131d4 <strtok+0x64>)
 8013192:	f7fd ff33 	bl	8010ffc <__assert_func>
 8013196:	e9c0 4400 	strd	r4, r4, [r0]
 801319a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801319e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80131a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80131a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80131aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80131ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80131b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80131b6:	6184      	str	r4, [r0, #24]
 80131b8:	7704      	strb	r4, [r0, #28]
 80131ba:	6244      	str	r4, [r0, #36]	@ 0x24
 80131bc:	4631      	mov	r1, r6
 80131be:	4628      	mov	r0, r5
 80131c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80131c2:	2301      	movs	r3, #1
 80131c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131c8:	f000 b806 	b.w	80131d8 <__strtok_r>
 80131cc:	200002e4 	.word	0x200002e4
 80131d0:	080168dc 	.word	0x080168dc
 80131d4:	080168f3 	.word	0x080168f3

080131d8 <__strtok_r>:
 80131d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131da:	4604      	mov	r4, r0
 80131dc:	b908      	cbnz	r0, 80131e2 <__strtok_r+0xa>
 80131de:	6814      	ldr	r4, [r2, #0]
 80131e0:	b144      	cbz	r4, 80131f4 <__strtok_r+0x1c>
 80131e2:	460f      	mov	r7, r1
 80131e4:	4620      	mov	r0, r4
 80131e6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80131ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 80131ee:	b91e      	cbnz	r6, 80131f8 <__strtok_r+0x20>
 80131f0:	b965      	cbnz	r5, 801320c <__strtok_r+0x34>
 80131f2:	6015      	str	r5, [r2, #0]
 80131f4:	2000      	movs	r0, #0
 80131f6:	e005      	b.n	8013204 <__strtok_r+0x2c>
 80131f8:	42b5      	cmp	r5, r6
 80131fa:	d1f6      	bne.n	80131ea <__strtok_r+0x12>
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d1f0      	bne.n	80131e2 <__strtok_r+0xa>
 8013200:	6014      	str	r4, [r2, #0]
 8013202:	7003      	strb	r3, [r0, #0]
 8013204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013206:	461c      	mov	r4, r3
 8013208:	e00c      	b.n	8013224 <__strtok_r+0x4c>
 801320a:	b91d      	cbnz	r5, 8013214 <__strtok_r+0x3c>
 801320c:	460e      	mov	r6, r1
 801320e:	4627      	mov	r7, r4
 8013210:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013214:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013218:	42ab      	cmp	r3, r5
 801321a:	d1f6      	bne.n	801320a <__strtok_r+0x32>
 801321c:	2b00      	cmp	r3, #0
 801321e:	d0f2      	beq.n	8013206 <__strtok_r+0x2e>
 8013220:	2300      	movs	r3, #0
 8013222:	703b      	strb	r3, [r7, #0]
 8013224:	6014      	str	r4, [r2, #0]
 8013226:	e7ed      	b.n	8013204 <__strtok_r+0x2c>

08013228 <_localeconv_r>:
 8013228:	4800      	ldr	r0, [pc, #0]	@ (801322c <_localeconv_r+0x4>)
 801322a:	4770      	bx	lr
 801322c:	20000268 	.word	0x20000268

08013230 <_close_r>:
 8013230:	b538      	push	{r3, r4, r5, lr}
 8013232:	2300      	movs	r3, #0
 8013234:	4d05      	ldr	r5, [pc, #20]	@ (801324c <_close_r+0x1c>)
 8013236:	4604      	mov	r4, r0
 8013238:	4608      	mov	r0, r1
 801323a:	602b      	str	r3, [r5, #0]
 801323c:	f7ee fb99 	bl	8001972 <_close>
 8013240:	1c43      	adds	r3, r0, #1
 8013242:	d102      	bne.n	801324a <_close_r+0x1a>
 8013244:	682b      	ldr	r3, [r5, #0]
 8013246:	b103      	cbz	r3, 801324a <_close_r+0x1a>
 8013248:	6023      	str	r3, [r4, #0]
 801324a:	bd38      	pop	{r3, r4, r5, pc}
 801324c:	200021bc 	.word	0x200021bc

08013250 <_lseek_r>:
 8013250:	b538      	push	{r3, r4, r5, lr}
 8013252:	4604      	mov	r4, r0
 8013254:	4608      	mov	r0, r1
 8013256:	4611      	mov	r1, r2
 8013258:	2200      	movs	r2, #0
 801325a:	4d05      	ldr	r5, [pc, #20]	@ (8013270 <_lseek_r+0x20>)
 801325c:	602a      	str	r2, [r5, #0]
 801325e:	461a      	mov	r2, r3
 8013260:	f7ee fbab 	bl	80019ba <_lseek>
 8013264:	1c43      	adds	r3, r0, #1
 8013266:	d102      	bne.n	801326e <_lseek_r+0x1e>
 8013268:	682b      	ldr	r3, [r5, #0]
 801326a:	b103      	cbz	r3, 801326e <_lseek_r+0x1e>
 801326c:	6023      	str	r3, [r4, #0]
 801326e:	bd38      	pop	{r3, r4, r5, pc}
 8013270:	200021bc 	.word	0x200021bc

08013274 <_read_r>:
 8013274:	b538      	push	{r3, r4, r5, lr}
 8013276:	4604      	mov	r4, r0
 8013278:	4608      	mov	r0, r1
 801327a:	4611      	mov	r1, r2
 801327c:	2200      	movs	r2, #0
 801327e:	4d05      	ldr	r5, [pc, #20]	@ (8013294 <_read_r+0x20>)
 8013280:	602a      	str	r2, [r5, #0]
 8013282:	461a      	mov	r2, r3
 8013284:	f7ee fb58 	bl	8001938 <_read>
 8013288:	1c43      	adds	r3, r0, #1
 801328a:	d102      	bne.n	8013292 <_read_r+0x1e>
 801328c:	682b      	ldr	r3, [r5, #0]
 801328e:	b103      	cbz	r3, 8013292 <_read_r+0x1e>
 8013290:	6023      	str	r3, [r4, #0]
 8013292:	bd38      	pop	{r3, r4, r5, pc}
 8013294:	200021bc 	.word	0x200021bc

08013298 <_sbrk_r>:
 8013298:	b538      	push	{r3, r4, r5, lr}
 801329a:	2300      	movs	r3, #0
 801329c:	4d05      	ldr	r5, [pc, #20]	@ (80132b4 <_sbrk_r+0x1c>)
 801329e:	4604      	mov	r4, r0
 80132a0:	4608      	mov	r0, r1
 80132a2:	602b      	str	r3, [r5, #0]
 80132a4:	f7ee fb96 	bl	80019d4 <_sbrk>
 80132a8:	1c43      	adds	r3, r0, #1
 80132aa:	d102      	bne.n	80132b2 <_sbrk_r+0x1a>
 80132ac:	682b      	ldr	r3, [r5, #0]
 80132ae:	b103      	cbz	r3, 80132b2 <_sbrk_r+0x1a>
 80132b0:	6023      	str	r3, [r4, #0]
 80132b2:	bd38      	pop	{r3, r4, r5, pc}
 80132b4:	200021bc 	.word	0x200021bc

080132b8 <_write_r>:
 80132b8:	b538      	push	{r3, r4, r5, lr}
 80132ba:	4604      	mov	r4, r0
 80132bc:	4608      	mov	r0, r1
 80132be:	4611      	mov	r1, r2
 80132c0:	2200      	movs	r2, #0
 80132c2:	4d05      	ldr	r5, [pc, #20]	@ (80132d8 <_write_r+0x20>)
 80132c4:	602a      	str	r2, [r5, #0]
 80132c6:	461a      	mov	r2, r3
 80132c8:	f7ee f8bc 	bl	8001444 <_write>
 80132cc:	1c43      	adds	r3, r0, #1
 80132ce:	d102      	bne.n	80132d6 <_write_r+0x1e>
 80132d0:	682b      	ldr	r3, [r5, #0]
 80132d2:	b103      	cbz	r3, 80132d6 <_write_r+0x1e>
 80132d4:	6023      	str	r3, [r4, #0]
 80132d6:	bd38      	pop	{r3, r4, r5, pc}
 80132d8:	200021bc 	.word	0x200021bc

080132dc <__errno>:
 80132dc:	4b01      	ldr	r3, [pc, #4]	@ (80132e4 <__errno+0x8>)
 80132de:	6818      	ldr	r0, [r3, #0]
 80132e0:	4770      	bx	lr
 80132e2:	bf00      	nop
 80132e4:	200002e4 	.word	0x200002e4

080132e8 <__libc_init_array>:
 80132e8:	b570      	push	{r4, r5, r6, lr}
 80132ea:	2600      	movs	r6, #0
 80132ec:	4d0c      	ldr	r5, [pc, #48]	@ (8013320 <__libc_init_array+0x38>)
 80132ee:	4c0d      	ldr	r4, [pc, #52]	@ (8013324 <__libc_init_array+0x3c>)
 80132f0:	1b64      	subs	r4, r4, r5
 80132f2:	10a4      	asrs	r4, r4, #2
 80132f4:	42a6      	cmp	r6, r4
 80132f6:	d109      	bne.n	801330c <__libc_init_array+0x24>
 80132f8:	f002 fb5e 	bl	80159b8 <_init>
 80132fc:	2600      	movs	r6, #0
 80132fe:	4d0a      	ldr	r5, [pc, #40]	@ (8013328 <__libc_init_array+0x40>)
 8013300:	4c0a      	ldr	r4, [pc, #40]	@ (801332c <__libc_init_array+0x44>)
 8013302:	1b64      	subs	r4, r4, r5
 8013304:	10a4      	asrs	r4, r4, #2
 8013306:	42a6      	cmp	r6, r4
 8013308:	d105      	bne.n	8013316 <__libc_init_array+0x2e>
 801330a:	bd70      	pop	{r4, r5, r6, pc}
 801330c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013310:	4798      	blx	r3
 8013312:	3601      	adds	r6, #1
 8013314:	e7ee      	b.n	80132f4 <__libc_init_array+0xc>
 8013316:	f855 3b04 	ldr.w	r3, [r5], #4
 801331a:	4798      	blx	r3
 801331c:	3601      	adds	r6, #1
 801331e:	e7f2      	b.n	8013306 <__libc_init_array+0x1e>
 8013320:	08016cf0 	.word	0x08016cf0
 8013324:	08016cf0 	.word	0x08016cf0
 8013328:	08016cf0 	.word	0x08016cf0
 801332c:	08016cf4 	.word	0x08016cf4

08013330 <__retarget_lock_init_recursive>:
 8013330:	4770      	bx	lr

08013332 <__retarget_lock_acquire_recursive>:
 8013332:	4770      	bx	lr

08013334 <__retarget_lock_release_recursive>:
 8013334:	4770      	bx	lr

08013336 <strcpy>:
 8013336:	4603      	mov	r3, r0
 8013338:	f811 2b01 	ldrb.w	r2, [r1], #1
 801333c:	f803 2b01 	strb.w	r2, [r3], #1
 8013340:	2a00      	cmp	r2, #0
 8013342:	d1f9      	bne.n	8013338 <strcpy+0x2>
 8013344:	4770      	bx	lr

08013346 <memchr>:
 8013346:	4603      	mov	r3, r0
 8013348:	b510      	push	{r4, lr}
 801334a:	b2c9      	uxtb	r1, r1
 801334c:	4402      	add	r2, r0
 801334e:	4293      	cmp	r3, r2
 8013350:	4618      	mov	r0, r3
 8013352:	d101      	bne.n	8013358 <memchr+0x12>
 8013354:	2000      	movs	r0, #0
 8013356:	e003      	b.n	8013360 <memchr+0x1a>
 8013358:	7804      	ldrb	r4, [r0, #0]
 801335a:	3301      	adds	r3, #1
 801335c:	428c      	cmp	r4, r1
 801335e:	d1f6      	bne.n	801334e <memchr+0x8>
 8013360:	bd10      	pop	{r4, pc}

08013362 <memcpy>:
 8013362:	440a      	add	r2, r1
 8013364:	4291      	cmp	r1, r2
 8013366:	f100 33ff 	add.w	r3, r0, #4294967295
 801336a:	d100      	bne.n	801336e <memcpy+0xc>
 801336c:	4770      	bx	lr
 801336e:	b510      	push	{r4, lr}
 8013370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013374:	4291      	cmp	r1, r2
 8013376:	f803 4f01 	strb.w	r4, [r3, #1]!
 801337a:	d1f9      	bne.n	8013370 <memcpy+0xe>
 801337c:	bd10      	pop	{r4, pc}
	...

08013380 <nan>:
 8013380:	2000      	movs	r0, #0
 8013382:	4901      	ldr	r1, [pc, #4]	@ (8013388 <nan+0x8>)
 8013384:	4770      	bx	lr
 8013386:	bf00      	nop
 8013388:	7ff80000 	.word	0x7ff80000

0801338c <nanf>:
 801338c:	4800      	ldr	r0, [pc, #0]	@ (8013390 <nanf+0x4>)
 801338e:	4770      	bx	lr
 8013390:	7fc00000 	.word	0x7fc00000

08013394 <abort>:
 8013394:	2006      	movs	r0, #6
 8013396:	b508      	push	{r3, lr}
 8013398:	f002 fa86 	bl	80158a8 <raise>
 801339c:	2001      	movs	r0, #1
 801339e:	f7ee fac0 	bl	8001922 <_exit>

080133a2 <quorem>:
 80133a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a6:	6903      	ldr	r3, [r0, #16]
 80133a8:	690c      	ldr	r4, [r1, #16]
 80133aa:	4607      	mov	r7, r0
 80133ac:	42a3      	cmp	r3, r4
 80133ae:	db7e      	blt.n	80134ae <quorem+0x10c>
 80133b0:	3c01      	subs	r4, #1
 80133b2:	00a3      	lsls	r3, r4, #2
 80133b4:	f100 0514 	add.w	r5, r0, #20
 80133b8:	f101 0814 	add.w	r8, r1, #20
 80133bc:	9300      	str	r3, [sp, #0]
 80133be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80133c2:	9301      	str	r3, [sp, #4]
 80133c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80133c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80133cc:	3301      	adds	r3, #1
 80133ce:	429a      	cmp	r2, r3
 80133d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80133d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80133d8:	d32e      	bcc.n	8013438 <quorem+0x96>
 80133da:	f04f 0a00 	mov.w	sl, #0
 80133de:	46c4      	mov	ip, r8
 80133e0:	46ae      	mov	lr, r5
 80133e2:	46d3      	mov	fp, sl
 80133e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80133e8:	b298      	uxth	r0, r3
 80133ea:	fb06 a000 	mla	r0, r6, r0, sl
 80133ee:	0c1b      	lsrs	r3, r3, #16
 80133f0:	0c02      	lsrs	r2, r0, #16
 80133f2:	fb06 2303 	mla	r3, r6, r3, r2
 80133f6:	f8de 2000 	ldr.w	r2, [lr]
 80133fa:	b280      	uxth	r0, r0
 80133fc:	b292      	uxth	r2, r2
 80133fe:	1a12      	subs	r2, r2, r0
 8013400:	445a      	add	r2, fp
 8013402:	f8de 0000 	ldr.w	r0, [lr]
 8013406:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801340a:	b29b      	uxth	r3, r3
 801340c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013410:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013414:	b292      	uxth	r2, r2
 8013416:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801341a:	45e1      	cmp	r9, ip
 801341c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013420:	f84e 2b04 	str.w	r2, [lr], #4
 8013424:	d2de      	bcs.n	80133e4 <quorem+0x42>
 8013426:	9b00      	ldr	r3, [sp, #0]
 8013428:	58eb      	ldr	r3, [r5, r3]
 801342a:	b92b      	cbnz	r3, 8013438 <quorem+0x96>
 801342c:	9b01      	ldr	r3, [sp, #4]
 801342e:	3b04      	subs	r3, #4
 8013430:	429d      	cmp	r5, r3
 8013432:	461a      	mov	r2, r3
 8013434:	d32f      	bcc.n	8013496 <quorem+0xf4>
 8013436:	613c      	str	r4, [r7, #16]
 8013438:	4638      	mov	r0, r7
 801343a:	f001 fc61 	bl	8014d00 <__mcmp>
 801343e:	2800      	cmp	r0, #0
 8013440:	db25      	blt.n	801348e <quorem+0xec>
 8013442:	4629      	mov	r1, r5
 8013444:	2000      	movs	r0, #0
 8013446:	f858 2b04 	ldr.w	r2, [r8], #4
 801344a:	f8d1 c000 	ldr.w	ip, [r1]
 801344e:	fa1f fe82 	uxth.w	lr, r2
 8013452:	fa1f f38c 	uxth.w	r3, ip
 8013456:	eba3 030e 	sub.w	r3, r3, lr
 801345a:	4403      	add	r3, r0
 801345c:	0c12      	lsrs	r2, r2, #16
 801345e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013462:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013466:	b29b      	uxth	r3, r3
 8013468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801346c:	45c1      	cmp	r9, r8
 801346e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013472:	f841 3b04 	str.w	r3, [r1], #4
 8013476:	d2e6      	bcs.n	8013446 <quorem+0xa4>
 8013478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801347c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013480:	b922      	cbnz	r2, 801348c <quorem+0xea>
 8013482:	3b04      	subs	r3, #4
 8013484:	429d      	cmp	r5, r3
 8013486:	461a      	mov	r2, r3
 8013488:	d30b      	bcc.n	80134a2 <quorem+0x100>
 801348a:	613c      	str	r4, [r7, #16]
 801348c:	3601      	adds	r6, #1
 801348e:	4630      	mov	r0, r6
 8013490:	b003      	add	sp, #12
 8013492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013496:	6812      	ldr	r2, [r2, #0]
 8013498:	3b04      	subs	r3, #4
 801349a:	2a00      	cmp	r2, #0
 801349c:	d1cb      	bne.n	8013436 <quorem+0x94>
 801349e:	3c01      	subs	r4, #1
 80134a0:	e7c6      	b.n	8013430 <quorem+0x8e>
 80134a2:	6812      	ldr	r2, [r2, #0]
 80134a4:	3b04      	subs	r3, #4
 80134a6:	2a00      	cmp	r2, #0
 80134a8:	d1ef      	bne.n	801348a <quorem+0xe8>
 80134aa:	3c01      	subs	r4, #1
 80134ac:	e7ea      	b.n	8013484 <quorem+0xe2>
 80134ae:	2000      	movs	r0, #0
 80134b0:	e7ee      	b.n	8013490 <quorem+0xee>
 80134b2:	0000      	movs	r0, r0
 80134b4:	0000      	movs	r0, r0
	...

080134b8 <_dtoa_r>:
 80134b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134bc:	4614      	mov	r4, r2
 80134be:	461d      	mov	r5, r3
 80134c0:	69c7      	ldr	r7, [r0, #28]
 80134c2:	b097      	sub	sp, #92	@ 0x5c
 80134c4:	4681      	mov	r9, r0
 80134c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80134ca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80134cc:	b97f      	cbnz	r7, 80134ee <_dtoa_r+0x36>
 80134ce:	2010      	movs	r0, #16
 80134d0:	f7fd fdba 	bl	8011048 <malloc>
 80134d4:	4602      	mov	r2, r0
 80134d6:	f8c9 001c 	str.w	r0, [r9, #28]
 80134da:	b920      	cbnz	r0, 80134e6 <_dtoa_r+0x2e>
 80134dc:	21ef      	movs	r1, #239	@ 0xef
 80134de:	4bac      	ldr	r3, [pc, #688]	@ (8013790 <_dtoa_r+0x2d8>)
 80134e0:	48ac      	ldr	r0, [pc, #688]	@ (8013794 <_dtoa_r+0x2dc>)
 80134e2:	f7fd fd8b 	bl	8010ffc <__assert_func>
 80134e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80134ea:	6007      	str	r7, [r0, #0]
 80134ec:	60c7      	str	r7, [r0, #12]
 80134ee:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80134f2:	6819      	ldr	r1, [r3, #0]
 80134f4:	b159      	cbz	r1, 801350e <_dtoa_r+0x56>
 80134f6:	685a      	ldr	r2, [r3, #4]
 80134f8:	2301      	movs	r3, #1
 80134fa:	4093      	lsls	r3, r2
 80134fc:	604a      	str	r2, [r1, #4]
 80134fe:	608b      	str	r3, [r1, #8]
 8013500:	4648      	mov	r0, r9
 8013502:	f001 f981 	bl	8014808 <_Bfree>
 8013506:	2200      	movs	r2, #0
 8013508:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801350c:	601a      	str	r2, [r3, #0]
 801350e:	1e2b      	subs	r3, r5, #0
 8013510:	bfaf      	iteee	ge
 8013512:	2300      	movge	r3, #0
 8013514:	2201      	movlt	r2, #1
 8013516:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801351a:	9307      	strlt	r3, [sp, #28]
 801351c:	bfa8      	it	ge
 801351e:	6033      	strge	r3, [r6, #0]
 8013520:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013524:	4b9c      	ldr	r3, [pc, #624]	@ (8013798 <_dtoa_r+0x2e0>)
 8013526:	bfb8      	it	lt
 8013528:	6032      	strlt	r2, [r6, #0]
 801352a:	ea33 0308 	bics.w	r3, r3, r8
 801352e:	d112      	bne.n	8013556 <_dtoa_r+0x9e>
 8013530:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013534:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8013536:	6013      	str	r3, [r2, #0]
 8013538:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801353c:	4323      	orrs	r3, r4
 801353e:	f000 855e 	beq.w	8013ffe <_dtoa_r+0xb46>
 8013542:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8013544:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801379c <_dtoa_r+0x2e4>
 8013548:	2b00      	cmp	r3, #0
 801354a:	f000 8560 	beq.w	801400e <_dtoa_r+0xb56>
 801354e:	f10a 0303 	add.w	r3, sl, #3
 8013552:	f000 bd5a 	b.w	801400a <_dtoa_r+0xb52>
 8013556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801355a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801355e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013562:	2200      	movs	r2, #0
 8013564:	2300      	movs	r3, #0
 8013566:	f7ed fa29 	bl	80009bc <__aeabi_dcmpeq>
 801356a:	4607      	mov	r7, r0
 801356c:	b158      	cbz	r0, 8013586 <_dtoa_r+0xce>
 801356e:	2301      	movs	r3, #1
 8013570:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8013572:	6013      	str	r3, [r2, #0]
 8013574:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8013576:	b113      	cbz	r3, 801357e <_dtoa_r+0xc6>
 8013578:	4b89      	ldr	r3, [pc, #548]	@ (80137a0 <_dtoa_r+0x2e8>)
 801357a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801357c:	6013      	str	r3, [r2, #0]
 801357e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80137a4 <_dtoa_r+0x2ec>
 8013582:	f000 bd44 	b.w	801400e <_dtoa_r+0xb56>
 8013586:	ab14      	add	r3, sp, #80	@ 0x50
 8013588:	9301      	str	r3, [sp, #4]
 801358a:	ab15      	add	r3, sp, #84	@ 0x54
 801358c:	9300      	str	r3, [sp, #0]
 801358e:	4648      	mov	r0, r9
 8013590:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013594:	f001 fccc 	bl	8014f30 <__d2b>
 8013598:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801359c:	9003      	str	r0, [sp, #12]
 801359e:	2e00      	cmp	r6, #0
 80135a0:	d078      	beq.n	8013694 <_dtoa_r+0x1dc>
 80135a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80135a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80135a8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80135ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80135b0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80135b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80135b8:	9712      	str	r7, [sp, #72]	@ 0x48
 80135ba:	4619      	mov	r1, r3
 80135bc:	2200      	movs	r2, #0
 80135be:	4b7a      	ldr	r3, [pc, #488]	@ (80137a8 <_dtoa_r+0x2f0>)
 80135c0:	f7ec fddc 	bl	800017c <__aeabi_dsub>
 80135c4:	a36c      	add	r3, pc, #432	@ (adr r3, 8013778 <_dtoa_r+0x2c0>)
 80135c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ca:	f7ec ff8f 	bl	80004ec <__aeabi_dmul>
 80135ce:	a36c      	add	r3, pc, #432	@ (adr r3, 8013780 <_dtoa_r+0x2c8>)
 80135d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d4:	f7ec fdd4 	bl	8000180 <__adddf3>
 80135d8:	4604      	mov	r4, r0
 80135da:	4630      	mov	r0, r6
 80135dc:	460d      	mov	r5, r1
 80135de:	f7ec ff1b 	bl	8000418 <__aeabi_i2d>
 80135e2:	a369      	add	r3, pc, #420	@ (adr r3, 8013788 <_dtoa_r+0x2d0>)
 80135e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e8:	f7ec ff80 	bl	80004ec <__aeabi_dmul>
 80135ec:	4602      	mov	r2, r0
 80135ee:	460b      	mov	r3, r1
 80135f0:	4620      	mov	r0, r4
 80135f2:	4629      	mov	r1, r5
 80135f4:	f7ec fdc4 	bl	8000180 <__adddf3>
 80135f8:	4604      	mov	r4, r0
 80135fa:	460d      	mov	r5, r1
 80135fc:	f7ed fa26 	bl	8000a4c <__aeabi_d2iz>
 8013600:	2200      	movs	r2, #0
 8013602:	4607      	mov	r7, r0
 8013604:	2300      	movs	r3, #0
 8013606:	4620      	mov	r0, r4
 8013608:	4629      	mov	r1, r5
 801360a:	f7ed f9e1 	bl	80009d0 <__aeabi_dcmplt>
 801360e:	b140      	cbz	r0, 8013622 <_dtoa_r+0x16a>
 8013610:	4638      	mov	r0, r7
 8013612:	f7ec ff01 	bl	8000418 <__aeabi_i2d>
 8013616:	4622      	mov	r2, r4
 8013618:	462b      	mov	r3, r5
 801361a:	f7ed f9cf 	bl	80009bc <__aeabi_dcmpeq>
 801361e:	b900      	cbnz	r0, 8013622 <_dtoa_r+0x16a>
 8013620:	3f01      	subs	r7, #1
 8013622:	2f16      	cmp	r7, #22
 8013624:	d854      	bhi.n	80136d0 <_dtoa_r+0x218>
 8013626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801362a:	4b60      	ldr	r3, [pc, #384]	@ (80137ac <_dtoa_r+0x2f4>)
 801362c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013634:	f7ed f9cc 	bl	80009d0 <__aeabi_dcmplt>
 8013638:	2800      	cmp	r0, #0
 801363a:	d04b      	beq.n	80136d4 <_dtoa_r+0x21c>
 801363c:	2300      	movs	r3, #0
 801363e:	3f01      	subs	r7, #1
 8013640:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013642:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013644:	1b9b      	subs	r3, r3, r6
 8013646:	1e5a      	subs	r2, r3, #1
 8013648:	bf49      	itett	mi
 801364a:	f1c3 0301 	rsbmi	r3, r3, #1
 801364e:	2300      	movpl	r3, #0
 8013650:	9304      	strmi	r3, [sp, #16]
 8013652:	2300      	movmi	r3, #0
 8013654:	9209      	str	r2, [sp, #36]	@ 0x24
 8013656:	bf54      	ite	pl
 8013658:	9304      	strpl	r3, [sp, #16]
 801365a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801365c:	2f00      	cmp	r7, #0
 801365e:	db3b      	blt.n	80136d8 <_dtoa_r+0x220>
 8013660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013662:	970e      	str	r7, [sp, #56]	@ 0x38
 8013664:	443b      	add	r3, r7
 8013666:	9309      	str	r3, [sp, #36]	@ 0x24
 8013668:	2300      	movs	r3, #0
 801366a:	930a      	str	r3, [sp, #40]	@ 0x28
 801366c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801366e:	2b09      	cmp	r3, #9
 8013670:	d865      	bhi.n	801373e <_dtoa_r+0x286>
 8013672:	2b05      	cmp	r3, #5
 8013674:	bfc4      	itt	gt
 8013676:	3b04      	subgt	r3, #4
 8013678:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801367a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801367c:	bfc8      	it	gt
 801367e:	2400      	movgt	r4, #0
 8013680:	f1a3 0302 	sub.w	r3, r3, #2
 8013684:	bfd8      	it	le
 8013686:	2401      	movle	r4, #1
 8013688:	2b03      	cmp	r3, #3
 801368a:	d864      	bhi.n	8013756 <_dtoa_r+0x29e>
 801368c:	e8df f003 	tbb	[pc, r3]
 8013690:	2c385553 	.word	0x2c385553
 8013694:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8013698:	441e      	add	r6, r3
 801369a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801369e:	2b20      	cmp	r3, #32
 80136a0:	bfc1      	itttt	gt
 80136a2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80136a6:	fa08 f803 	lslgt.w	r8, r8, r3
 80136aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80136ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80136b2:	bfd6      	itet	le
 80136b4:	f1c3 0320 	rsble	r3, r3, #32
 80136b8:	ea48 0003 	orrgt.w	r0, r8, r3
 80136bc:	fa04 f003 	lslle.w	r0, r4, r3
 80136c0:	f7ec fe9a 	bl	80003f8 <__aeabi_ui2d>
 80136c4:	2201      	movs	r2, #1
 80136c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80136ca:	3e01      	subs	r6, #1
 80136cc:	9212      	str	r2, [sp, #72]	@ 0x48
 80136ce:	e774      	b.n	80135ba <_dtoa_r+0x102>
 80136d0:	2301      	movs	r3, #1
 80136d2:	e7b5      	b.n	8013640 <_dtoa_r+0x188>
 80136d4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80136d6:	e7b4      	b.n	8013642 <_dtoa_r+0x18a>
 80136d8:	9b04      	ldr	r3, [sp, #16]
 80136da:	1bdb      	subs	r3, r3, r7
 80136dc:	9304      	str	r3, [sp, #16]
 80136de:	427b      	negs	r3, r7
 80136e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80136e2:	2300      	movs	r3, #0
 80136e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80136e6:	e7c1      	b.n	801366c <_dtoa_r+0x1b4>
 80136e8:	2301      	movs	r3, #1
 80136ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80136ee:	eb07 0b03 	add.w	fp, r7, r3
 80136f2:	f10b 0301 	add.w	r3, fp, #1
 80136f6:	2b01      	cmp	r3, #1
 80136f8:	9308      	str	r3, [sp, #32]
 80136fa:	bfb8      	it	lt
 80136fc:	2301      	movlt	r3, #1
 80136fe:	e006      	b.n	801370e <_dtoa_r+0x256>
 8013700:	2301      	movs	r3, #1
 8013702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013704:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013706:	2b00      	cmp	r3, #0
 8013708:	dd28      	ble.n	801375c <_dtoa_r+0x2a4>
 801370a:	469b      	mov	fp, r3
 801370c:	9308      	str	r3, [sp, #32]
 801370e:	2100      	movs	r1, #0
 8013710:	2204      	movs	r2, #4
 8013712:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8013716:	f102 0514 	add.w	r5, r2, #20
 801371a:	429d      	cmp	r5, r3
 801371c:	d926      	bls.n	801376c <_dtoa_r+0x2b4>
 801371e:	6041      	str	r1, [r0, #4]
 8013720:	4648      	mov	r0, r9
 8013722:	f001 f831 	bl	8014788 <_Balloc>
 8013726:	4682      	mov	sl, r0
 8013728:	2800      	cmp	r0, #0
 801372a:	d143      	bne.n	80137b4 <_dtoa_r+0x2fc>
 801372c:	4602      	mov	r2, r0
 801372e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013732:	4b1f      	ldr	r3, [pc, #124]	@ (80137b0 <_dtoa_r+0x2f8>)
 8013734:	e6d4      	b.n	80134e0 <_dtoa_r+0x28>
 8013736:	2300      	movs	r3, #0
 8013738:	e7e3      	b.n	8013702 <_dtoa_r+0x24a>
 801373a:	2300      	movs	r3, #0
 801373c:	e7d5      	b.n	80136ea <_dtoa_r+0x232>
 801373e:	2401      	movs	r4, #1
 8013740:	2300      	movs	r3, #0
 8013742:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013744:	9320      	str	r3, [sp, #128]	@ 0x80
 8013746:	f04f 3bff 	mov.w	fp, #4294967295
 801374a:	2200      	movs	r2, #0
 801374c:	2312      	movs	r3, #18
 801374e:	f8cd b020 	str.w	fp, [sp, #32]
 8013752:	9221      	str	r2, [sp, #132]	@ 0x84
 8013754:	e7db      	b.n	801370e <_dtoa_r+0x256>
 8013756:	2301      	movs	r3, #1
 8013758:	930b      	str	r3, [sp, #44]	@ 0x2c
 801375a:	e7f4      	b.n	8013746 <_dtoa_r+0x28e>
 801375c:	f04f 0b01 	mov.w	fp, #1
 8013760:	465b      	mov	r3, fp
 8013762:	f8cd b020 	str.w	fp, [sp, #32]
 8013766:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 801376a:	e7d0      	b.n	801370e <_dtoa_r+0x256>
 801376c:	3101      	adds	r1, #1
 801376e:	0052      	lsls	r2, r2, #1
 8013770:	e7d1      	b.n	8013716 <_dtoa_r+0x25e>
 8013772:	bf00      	nop
 8013774:	f3af 8000 	nop.w
 8013778:	636f4361 	.word	0x636f4361
 801377c:	3fd287a7 	.word	0x3fd287a7
 8013780:	8b60c8b3 	.word	0x8b60c8b3
 8013784:	3fc68a28 	.word	0x3fc68a28
 8013788:	509f79fb 	.word	0x509f79fb
 801378c:	3fd34413 	.word	0x3fd34413
 8013790:	080168dc 	.word	0x080168dc
 8013794:	08016962 	.word	0x08016962
 8013798:	7ff00000 	.word	0x7ff00000
 801379c:	0801695e 	.word	0x0801695e
 80137a0:	080168b4 	.word	0x080168b4
 80137a4:	080168b3 	.word	0x080168b3
 80137a8:	3ff80000 	.word	0x3ff80000
 80137ac:	08016c20 	.word	0x08016c20
 80137b0:	080169ba 	.word	0x080169ba
 80137b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80137b8:	6018      	str	r0, [r3, #0]
 80137ba:	9b08      	ldr	r3, [sp, #32]
 80137bc:	2b0e      	cmp	r3, #14
 80137be:	f200 80a1 	bhi.w	8013904 <_dtoa_r+0x44c>
 80137c2:	2c00      	cmp	r4, #0
 80137c4:	f000 809e 	beq.w	8013904 <_dtoa_r+0x44c>
 80137c8:	2f00      	cmp	r7, #0
 80137ca:	dd33      	ble.n	8013834 <_dtoa_r+0x37c>
 80137cc:	4b9c      	ldr	r3, [pc, #624]	@ (8013a40 <_dtoa_r+0x588>)
 80137ce:	f007 020f 	and.w	r2, r7, #15
 80137d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80137d6:	05f8      	lsls	r0, r7, #23
 80137d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80137dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80137e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80137e4:	d516      	bpl.n	8013814 <_dtoa_r+0x35c>
 80137e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80137ea:	4b96      	ldr	r3, [pc, #600]	@ (8013a44 <_dtoa_r+0x58c>)
 80137ec:	2603      	movs	r6, #3
 80137ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80137f2:	f7ec ffa5 	bl	8000740 <__aeabi_ddiv>
 80137f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137fa:	f004 040f 	and.w	r4, r4, #15
 80137fe:	4d91      	ldr	r5, [pc, #580]	@ (8013a44 <_dtoa_r+0x58c>)
 8013800:	b954      	cbnz	r4, 8013818 <_dtoa_r+0x360>
 8013802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801380a:	f7ec ff99 	bl	8000740 <__aeabi_ddiv>
 801380e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013812:	e028      	b.n	8013866 <_dtoa_r+0x3ae>
 8013814:	2602      	movs	r6, #2
 8013816:	e7f2      	b.n	80137fe <_dtoa_r+0x346>
 8013818:	07e1      	lsls	r1, r4, #31
 801381a:	d508      	bpl.n	801382e <_dtoa_r+0x376>
 801381c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013820:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013824:	f7ec fe62 	bl	80004ec <__aeabi_dmul>
 8013828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801382c:	3601      	adds	r6, #1
 801382e:	1064      	asrs	r4, r4, #1
 8013830:	3508      	adds	r5, #8
 8013832:	e7e5      	b.n	8013800 <_dtoa_r+0x348>
 8013834:	f000 80af 	beq.w	8013996 <_dtoa_r+0x4de>
 8013838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801383c:	427c      	negs	r4, r7
 801383e:	4b80      	ldr	r3, [pc, #512]	@ (8013a40 <_dtoa_r+0x588>)
 8013840:	f004 020f 	and.w	r2, r4, #15
 8013844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801384c:	f7ec fe4e 	bl	80004ec <__aeabi_dmul>
 8013850:	2602      	movs	r6, #2
 8013852:	2300      	movs	r3, #0
 8013854:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013858:	4d7a      	ldr	r5, [pc, #488]	@ (8013a44 <_dtoa_r+0x58c>)
 801385a:	1124      	asrs	r4, r4, #4
 801385c:	2c00      	cmp	r4, #0
 801385e:	f040 808f 	bne.w	8013980 <_dtoa_r+0x4c8>
 8013862:	2b00      	cmp	r3, #0
 8013864:	d1d3      	bne.n	801380e <_dtoa_r+0x356>
 8013866:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801386a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801386c:	2b00      	cmp	r3, #0
 801386e:	f000 8094 	beq.w	801399a <_dtoa_r+0x4e2>
 8013872:	2200      	movs	r2, #0
 8013874:	4620      	mov	r0, r4
 8013876:	4629      	mov	r1, r5
 8013878:	4b73      	ldr	r3, [pc, #460]	@ (8013a48 <_dtoa_r+0x590>)
 801387a:	f7ed f8a9 	bl	80009d0 <__aeabi_dcmplt>
 801387e:	2800      	cmp	r0, #0
 8013880:	f000 808b 	beq.w	801399a <_dtoa_r+0x4e2>
 8013884:	9b08      	ldr	r3, [sp, #32]
 8013886:	2b00      	cmp	r3, #0
 8013888:	f000 8087 	beq.w	801399a <_dtoa_r+0x4e2>
 801388c:	f1bb 0f00 	cmp.w	fp, #0
 8013890:	dd34      	ble.n	80138fc <_dtoa_r+0x444>
 8013892:	4620      	mov	r0, r4
 8013894:	2200      	movs	r2, #0
 8013896:	4629      	mov	r1, r5
 8013898:	4b6c      	ldr	r3, [pc, #432]	@ (8013a4c <_dtoa_r+0x594>)
 801389a:	f7ec fe27 	bl	80004ec <__aeabi_dmul>
 801389e:	465c      	mov	r4, fp
 80138a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80138a4:	f107 38ff 	add.w	r8, r7, #4294967295
 80138a8:	3601      	adds	r6, #1
 80138aa:	4630      	mov	r0, r6
 80138ac:	f7ec fdb4 	bl	8000418 <__aeabi_i2d>
 80138b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80138b4:	f7ec fe1a 	bl	80004ec <__aeabi_dmul>
 80138b8:	2200      	movs	r2, #0
 80138ba:	4b65      	ldr	r3, [pc, #404]	@ (8013a50 <_dtoa_r+0x598>)
 80138bc:	f7ec fc60 	bl	8000180 <__adddf3>
 80138c0:	4605      	mov	r5, r0
 80138c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80138c6:	2c00      	cmp	r4, #0
 80138c8:	d16a      	bne.n	80139a0 <_dtoa_r+0x4e8>
 80138ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138ce:	2200      	movs	r2, #0
 80138d0:	4b60      	ldr	r3, [pc, #384]	@ (8013a54 <_dtoa_r+0x59c>)
 80138d2:	f7ec fc53 	bl	800017c <__aeabi_dsub>
 80138d6:	4602      	mov	r2, r0
 80138d8:	460b      	mov	r3, r1
 80138da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138de:	462a      	mov	r2, r5
 80138e0:	4633      	mov	r3, r6
 80138e2:	f7ed f893 	bl	8000a0c <__aeabi_dcmpgt>
 80138e6:	2800      	cmp	r0, #0
 80138e8:	f040 8298 	bne.w	8013e1c <_dtoa_r+0x964>
 80138ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80138f0:	462a      	mov	r2, r5
 80138f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80138f6:	f7ed f86b 	bl	80009d0 <__aeabi_dcmplt>
 80138fa:	bb38      	cbnz	r0, 801394c <_dtoa_r+0x494>
 80138fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013900:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8013904:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013906:	2b00      	cmp	r3, #0
 8013908:	f2c0 8157 	blt.w	8013bba <_dtoa_r+0x702>
 801390c:	2f0e      	cmp	r7, #14
 801390e:	f300 8154 	bgt.w	8013bba <_dtoa_r+0x702>
 8013912:	4b4b      	ldr	r3, [pc, #300]	@ (8013a40 <_dtoa_r+0x588>)
 8013914:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013918:	e9d3 3400 	ldrd	r3, r4, [r3]
 801391c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013920:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013922:	2b00      	cmp	r3, #0
 8013924:	f280 80e5 	bge.w	8013af2 <_dtoa_r+0x63a>
 8013928:	9b08      	ldr	r3, [sp, #32]
 801392a:	2b00      	cmp	r3, #0
 801392c:	f300 80e1 	bgt.w	8013af2 <_dtoa_r+0x63a>
 8013930:	d10c      	bne.n	801394c <_dtoa_r+0x494>
 8013932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013936:	2200      	movs	r2, #0
 8013938:	4b46      	ldr	r3, [pc, #280]	@ (8013a54 <_dtoa_r+0x59c>)
 801393a:	f7ec fdd7 	bl	80004ec <__aeabi_dmul>
 801393e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013942:	f7ed f859 	bl	80009f8 <__aeabi_dcmpge>
 8013946:	2800      	cmp	r0, #0
 8013948:	f000 8266 	beq.w	8013e18 <_dtoa_r+0x960>
 801394c:	2400      	movs	r4, #0
 801394e:	4625      	mov	r5, r4
 8013950:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013952:	4656      	mov	r6, sl
 8013954:	ea6f 0803 	mvn.w	r8, r3
 8013958:	2700      	movs	r7, #0
 801395a:	4621      	mov	r1, r4
 801395c:	4648      	mov	r0, r9
 801395e:	f000 ff53 	bl	8014808 <_Bfree>
 8013962:	2d00      	cmp	r5, #0
 8013964:	f000 80bd 	beq.w	8013ae2 <_dtoa_r+0x62a>
 8013968:	b12f      	cbz	r7, 8013976 <_dtoa_r+0x4be>
 801396a:	42af      	cmp	r7, r5
 801396c:	d003      	beq.n	8013976 <_dtoa_r+0x4be>
 801396e:	4639      	mov	r1, r7
 8013970:	4648      	mov	r0, r9
 8013972:	f000 ff49 	bl	8014808 <_Bfree>
 8013976:	4629      	mov	r1, r5
 8013978:	4648      	mov	r0, r9
 801397a:	f000 ff45 	bl	8014808 <_Bfree>
 801397e:	e0b0      	b.n	8013ae2 <_dtoa_r+0x62a>
 8013980:	07e2      	lsls	r2, r4, #31
 8013982:	d505      	bpl.n	8013990 <_dtoa_r+0x4d8>
 8013984:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013988:	f7ec fdb0 	bl	80004ec <__aeabi_dmul>
 801398c:	2301      	movs	r3, #1
 801398e:	3601      	adds	r6, #1
 8013990:	1064      	asrs	r4, r4, #1
 8013992:	3508      	adds	r5, #8
 8013994:	e762      	b.n	801385c <_dtoa_r+0x3a4>
 8013996:	2602      	movs	r6, #2
 8013998:	e765      	b.n	8013866 <_dtoa_r+0x3ae>
 801399a:	46b8      	mov	r8, r7
 801399c:	9c08      	ldr	r4, [sp, #32]
 801399e:	e784      	b.n	80138aa <_dtoa_r+0x3f2>
 80139a0:	4b27      	ldr	r3, [pc, #156]	@ (8013a40 <_dtoa_r+0x588>)
 80139a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80139a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80139a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80139ac:	4454      	add	r4, sl
 80139ae:	2900      	cmp	r1, #0
 80139b0:	d054      	beq.n	8013a5c <_dtoa_r+0x5a4>
 80139b2:	2000      	movs	r0, #0
 80139b4:	4928      	ldr	r1, [pc, #160]	@ (8013a58 <_dtoa_r+0x5a0>)
 80139b6:	f7ec fec3 	bl	8000740 <__aeabi_ddiv>
 80139ba:	4633      	mov	r3, r6
 80139bc:	462a      	mov	r2, r5
 80139be:	f7ec fbdd 	bl	800017c <__aeabi_dsub>
 80139c2:	4656      	mov	r6, sl
 80139c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80139c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80139cc:	f7ed f83e 	bl	8000a4c <__aeabi_d2iz>
 80139d0:	4605      	mov	r5, r0
 80139d2:	f7ec fd21 	bl	8000418 <__aeabi_i2d>
 80139d6:	4602      	mov	r2, r0
 80139d8:	460b      	mov	r3, r1
 80139da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80139de:	f7ec fbcd 	bl	800017c <__aeabi_dsub>
 80139e2:	4602      	mov	r2, r0
 80139e4:	460b      	mov	r3, r1
 80139e6:	3530      	adds	r5, #48	@ 0x30
 80139e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80139ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80139f0:	f806 5b01 	strb.w	r5, [r6], #1
 80139f4:	f7ec ffec 	bl	80009d0 <__aeabi_dcmplt>
 80139f8:	2800      	cmp	r0, #0
 80139fa:	d172      	bne.n	8013ae2 <_dtoa_r+0x62a>
 80139fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a00:	2000      	movs	r0, #0
 8013a02:	4911      	ldr	r1, [pc, #68]	@ (8013a48 <_dtoa_r+0x590>)
 8013a04:	f7ec fbba 	bl	800017c <__aeabi_dsub>
 8013a08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013a0c:	f7ec ffe0 	bl	80009d0 <__aeabi_dcmplt>
 8013a10:	2800      	cmp	r0, #0
 8013a12:	f040 80b4 	bne.w	8013b7e <_dtoa_r+0x6c6>
 8013a16:	42a6      	cmp	r6, r4
 8013a18:	f43f af70 	beq.w	80138fc <_dtoa_r+0x444>
 8013a1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013a20:	2200      	movs	r2, #0
 8013a22:	4b0a      	ldr	r3, [pc, #40]	@ (8013a4c <_dtoa_r+0x594>)
 8013a24:	f7ec fd62 	bl	80004ec <__aeabi_dmul>
 8013a28:	2200      	movs	r2, #0
 8013a2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013a2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a32:	4b06      	ldr	r3, [pc, #24]	@ (8013a4c <_dtoa_r+0x594>)
 8013a34:	f7ec fd5a 	bl	80004ec <__aeabi_dmul>
 8013a38:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013a3c:	e7c4      	b.n	80139c8 <_dtoa_r+0x510>
 8013a3e:	bf00      	nop
 8013a40:	08016c20 	.word	0x08016c20
 8013a44:	08016bf8 	.word	0x08016bf8
 8013a48:	3ff00000 	.word	0x3ff00000
 8013a4c:	40240000 	.word	0x40240000
 8013a50:	401c0000 	.word	0x401c0000
 8013a54:	40140000 	.word	0x40140000
 8013a58:	3fe00000 	.word	0x3fe00000
 8013a5c:	4631      	mov	r1, r6
 8013a5e:	4628      	mov	r0, r5
 8013a60:	f7ec fd44 	bl	80004ec <__aeabi_dmul>
 8013a64:	4656      	mov	r6, sl
 8013a66:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013a6a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8013a6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a70:	f7ec ffec 	bl	8000a4c <__aeabi_d2iz>
 8013a74:	4605      	mov	r5, r0
 8013a76:	f7ec fccf 	bl	8000418 <__aeabi_i2d>
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	460b      	mov	r3, r1
 8013a7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a82:	f7ec fb7b 	bl	800017c <__aeabi_dsub>
 8013a86:	4602      	mov	r2, r0
 8013a88:	460b      	mov	r3, r1
 8013a8a:	3530      	adds	r5, #48	@ 0x30
 8013a8c:	f806 5b01 	strb.w	r5, [r6], #1
 8013a90:	42a6      	cmp	r6, r4
 8013a92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013a96:	f04f 0200 	mov.w	r2, #0
 8013a9a:	d124      	bne.n	8013ae6 <_dtoa_r+0x62e>
 8013a9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013aa0:	4bae      	ldr	r3, [pc, #696]	@ (8013d5c <_dtoa_r+0x8a4>)
 8013aa2:	f7ec fb6d 	bl	8000180 <__adddf3>
 8013aa6:	4602      	mov	r2, r0
 8013aa8:	460b      	mov	r3, r1
 8013aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013aae:	f7ec ffad 	bl	8000a0c <__aeabi_dcmpgt>
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	d163      	bne.n	8013b7e <_dtoa_r+0x6c6>
 8013ab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013aba:	2000      	movs	r0, #0
 8013abc:	49a7      	ldr	r1, [pc, #668]	@ (8013d5c <_dtoa_r+0x8a4>)
 8013abe:	f7ec fb5d 	bl	800017c <__aeabi_dsub>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	460b      	mov	r3, r1
 8013ac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013aca:	f7ec ff81 	bl	80009d0 <__aeabi_dcmplt>
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	f43f af14 	beq.w	80138fc <_dtoa_r+0x444>
 8013ad4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013ad6:	1e73      	subs	r3, r6, #1
 8013ad8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013ada:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013ade:	2b30      	cmp	r3, #48	@ 0x30
 8013ae0:	d0f8      	beq.n	8013ad4 <_dtoa_r+0x61c>
 8013ae2:	4647      	mov	r7, r8
 8013ae4:	e03b      	b.n	8013b5e <_dtoa_r+0x6a6>
 8013ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8013d60 <_dtoa_r+0x8a8>)
 8013ae8:	f7ec fd00 	bl	80004ec <__aeabi_dmul>
 8013aec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013af0:	e7bc      	b.n	8013a6c <_dtoa_r+0x5b4>
 8013af2:	4656      	mov	r6, sl
 8013af4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8013af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013afc:	4620      	mov	r0, r4
 8013afe:	4629      	mov	r1, r5
 8013b00:	f7ec fe1e 	bl	8000740 <__aeabi_ddiv>
 8013b04:	f7ec ffa2 	bl	8000a4c <__aeabi_d2iz>
 8013b08:	4680      	mov	r8, r0
 8013b0a:	f7ec fc85 	bl	8000418 <__aeabi_i2d>
 8013b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b12:	f7ec fceb 	bl	80004ec <__aeabi_dmul>
 8013b16:	4602      	mov	r2, r0
 8013b18:	460b      	mov	r3, r1
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	4629      	mov	r1, r5
 8013b1e:	f7ec fb2d 	bl	800017c <__aeabi_dsub>
 8013b22:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013b26:	9d08      	ldr	r5, [sp, #32]
 8013b28:	f806 4b01 	strb.w	r4, [r6], #1
 8013b2c:	eba6 040a 	sub.w	r4, r6, sl
 8013b30:	42a5      	cmp	r5, r4
 8013b32:	4602      	mov	r2, r0
 8013b34:	460b      	mov	r3, r1
 8013b36:	d133      	bne.n	8013ba0 <_dtoa_r+0x6e8>
 8013b38:	f7ec fb22 	bl	8000180 <__adddf3>
 8013b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b40:	4604      	mov	r4, r0
 8013b42:	460d      	mov	r5, r1
 8013b44:	f7ec ff62 	bl	8000a0c <__aeabi_dcmpgt>
 8013b48:	b9c0      	cbnz	r0, 8013b7c <_dtoa_r+0x6c4>
 8013b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b4e:	4620      	mov	r0, r4
 8013b50:	4629      	mov	r1, r5
 8013b52:	f7ec ff33 	bl	80009bc <__aeabi_dcmpeq>
 8013b56:	b110      	cbz	r0, 8013b5e <_dtoa_r+0x6a6>
 8013b58:	f018 0f01 	tst.w	r8, #1
 8013b5c:	d10e      	bne.n	8013b7c <_dtoa_r+0x6c4>
 8013b5e:	4648      	mov	r0, r9
 8013b60:	9903      	ldr	r1, [sp, #12]
 8013b62:	f000 fe51 	bl	8014808 <_Bfree>
 8013b66:	2300      	movs	r3, #0
 8013b68:	7033      	strb	r3, [r6, #0]
 8013b6a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013b6c:	3701      	adds	r7, #1
 8013b6e:	601f      	str	r7, [r3, #0]
 8013b70:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	f000 824b 	beq.w	801400e <_dtoa_r+0xb56>
 8013b78:	601e      	str	r6, [r3, #0]
 8013b7a:	e248      	b.n	801400e <_dtoa_r+0xb56>
 8013b7c:	46b8      	mov	r8, r7
 8013b7e:	4633      	mov	r3, r6
 8013b80:	461e      	mov	r6, r3
 8013b82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b86:	2a39      	cmp	r2, #57	@ 0x39
 8013b88:	d106      	bne.n	8013b98 <_dtoa_r+0x6e0>
 8013b8a:	459a      	cmp	sl, r3
 8013b8c:	d1f8      	bne.n	8013b80 <_dtoa_r+0x6c8>
 8013b8e:	2230      	movs	r2, #48	@ 0x30
 8013b90:	f108 0801 	add.w	r8, r8, #1
 8013b94:	f88a 2000 	strb.w	r2, [sl]
 8013b98:	781a      	ldrb	r2, [r3, #0]
 8013b9a:	3201      	adds	r2, #1
 8013b9c:	701a      	strb	r2, [r3, #0]
 8013b9e:	e7a0      	b.n	8013ae2 <_dtoa_r+0x62a>
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8013d60 <_dtoa_r+0x8a8>)
 8013ba4:	f7ec fca2 	bl	80004ec <__aeabi_dmul>
 8013ba8:	2200      	movs	r2, #0
 8013baa:	2300      	movs	r3, #0
 8013bac:	4604      	mov	r4, r0
 8013bae:	460d      	mov	r5, r1
 8013bb0:	f7ec ff04 	bl	80009bc <__aeabi_dcmpeq>
 8013bb4:	2800      	cmp	r0, #0
 8013bb6:	d09f      	beq.n	8013af8 <_dtoa_r+0x640>
 8013bb8:	e7d1      	b.n	8013b5e <_dtoa_r+0x6a6>
 8013bba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013bbc:	2a00      	cmp	r2, #0
 8013bbe:	f000 80ea 	beq.w	8013d96 <_dtoa_r+0x8de>
 8013bc2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013bc4:	2a01      	cmp	r2, #1
 8013bc6:	f300 80cd 	bgt.w	8013d64 <_dtoa_r+0x8ac>
 8013bca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013bcc:	2a00      	cmp	r2, #0
 8013bce:	f000 80c1 	beq.w	8013d54 <_dtoa_r+0x89c>
 8013bd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013bd6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013bd8:	9e04      	ldr	r6, [sp, #16]
 8013bda:	9a04      	ldr	r2, [sp, #16]
 8013bdc:	2101      	movs	r1, #1
 8013bde:	441a      	add	r2, r3
 8013be0:	9204      	str	r2, [sp, #16]
 8013be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013be4:	4648      	mov	r0, r9
 8013be6:	441a      	add	r2, r3
 8013be8:	9209      	str	r2, [sp, #36]	@ 0x24
 8013bea:	f000 ff0b 	bl	8014a04 <__i2b>
 8013bee:	4605      	mov	r5, r0
 8013bf0:	b166      	cbz	r6, 8013c0c <_dtoa_r+0x754>
 8013bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	dd09      	ble.n	8013c0c <_dtoa_r+0x754>
 8013bf8:	42b3      	cmp	r3, r6
 8013bfa:	bfa8      	it	ge
 8013bfc:	4633      	movge	r3, r6
 8013bfe:	9a04      	ldr	r2, [sp, #16]
 8013c00:	1af6      	subs	r6, r6, r3
 8013c02:	1ad2      	subs	r2, r2, r3
 8013c04:	9204      	str	r2, [sp, #16]
 8013c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c08:	1ad3      	subs	r3, r2, r3
 8013c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c0e:	b30b      	cbz	r3, 8013c54 <_dtoa_r+0x79c>
 8013c10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	f000 80c6 	beq.w	8013da4 <_dtoa_r+0x8ec>
 8013c18:	2c00      	cmp	r4, #0
 8013c1a:	f000 80c0 	beq.w	8013d9e <_dtoa_r+0x8e6>
 8013c1e:	4629      	mov	r1, r5
 8013c20:	4622      	mov	r2, r4
 8013c22:	4648      	mov	r0, r9
 8013c24:	f000 ffa6 	bl	8014b74 <__pow5mult>
 8013c28:	9a03      	ldr	r2, [sp, #12]
 8013c2a:	4601      	mov	r1, r0
 8013c2c:	4605      	mov	r5, r0
 8013c2e:	4648      	mov	r0, r9
 8013c30:	f000 fefe 	bl	8014a30 <__multiply>
 8013c34:	9903      	ldr	r1, [sp, #12]
 8013c36:	4680      	mov	r8, r0
 8013c38:	4648      	mov	r0, r9
 8013c3a:	f000 fde5 	bl	8014808 <_Bfree>
 8013c3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c40:	1b1b      	subs	r3, r3, r4
 8013c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c44:	f000 80b1 	beq.w	8013daa <_dtoa_r+0x8f2>
 8013c48:	4641      	mov	r1, r8
 8013c4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013c4c:	4648      	mov	r0, r9
 8013c4e:	f000 ff91 	bl	8014b74 <__pow5mult>
 8013c52:	9003      	str	r0, [sp, #12]
 8013c54:	2101      	movs	r1, #1
 8013c56:	4648      	mov	r0, r9
 8013c58:	f000 fed4 	bl	8014a04 <__i2b>
 8013c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c5e:	4604      	mov	r4, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f000 81d8 	beq.w	8014016 <_dtoa_r+0xb5e>
 8013c66:	461a      	mov	r2, r3
 8013c68:	4601      	mov	r1, r0
 8013c6a:	4648      	mov	r0, r9
 8013c6c:	f000 ff82 	bl	8014b74 <__pow5mult>
 8013c70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013c72:	4604      	mov	r4, r0
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	f300 809f 	bgt.w	8013db8 <_dtoa_r+0x900>
 8013c7a:	9b06      	ldr	r3, [sp, #24]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	f040 8097 	bne.w	8013db0 <_dtoa_r+0x8f8>
 8013c82:	9b07      	ldr	r3, [sp, #28]
 8013c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	f040 8093 	bne.w	8013db4 <_dtoa_r+0x8fc>
 8013c8e:	9b07      	ldr	r3, [sp, #28]
 8013c90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013c94:	0d1b      	lsrs	r3, r3, #20
 8013c96:	051b      	lsls	r3, r3, #20
 8013c98:	b133      	cbz	r3, 8013ca8 <_dtoa_r+0x7f0>
 8013c9a:	9b04      	ldr	r3, [sp, #16]
 8013c9c:	3301      	adds	r3, #1
 8013c9e:	9304      	str	r3, [sp, #16]
 8013ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8013caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f000 81b8 	beq.w	8014022 <_dtoa_r+0xb6a>
 8013cb2:	6923      	ldr	r3, [r4, #16]
 8013cb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013cb8:	6918      	ldr	r0, [r3, #16]
 8013cba:	f000 fe57 	bl	801496c <__hi0bits>
 8013cbe:	f1c0 0020 	rsb	r0, r0, #32
 8013cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cc4:	4418      	add	r0, r3
 8013cc6:	f010 001f 	ands.w	r0, r0, #31
 8013cca:	f000 8082 	beq.w	8013dd2 <_dtoa_r+0x91a>
 8013cce:	f1c0 0320 	rsb	r3, r0, #32
 8013cd2:	2b04      	cmp	r3, #4
 8013cd4:	dd73      	ble.n	8013dbe <_dtoa_r+0x906>
 8013cd6:	9b04      	ldr	r3, [sp, #16]
 8013cd8:	f1c0 001c 	rsb	r0, r0, #28
 8013cdc:	4403      	add	r3, r0
 8013cde:	9304      	str	r3, [sp, #16]
 8013ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ce2:	4406      	add	r6, r0
 8013ce4:	4403      	add	r3, r0
 8013ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ce8:	9b04      	ldr	r3, [sp, #16]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	dd05      	ble.n	8013cfa <_dtoa_r+0x842>
 8013cee:	461a      	mov	r2, r3
 8013cf0:	4648      	mov	r0, r9
 8013cf2:	9903      	ldr	r1, [sp, #12]
 8013cf4:	f000 ff98 	bl	8014c28 <__lshift>
 8013cf8:	9003      	str	r0, [sp, #12]
 8013cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	dd05      	ble.n	8013d0c <_dtoa_r+0x854>
 8013d00:	4621      	mov	r1, r4
 8013d02:	461a      	mov	r2, r3
 8013d04:	4648      	mov	r0, r9
 8013d06:	f000 ff8f 	bl	8014c28 <__lshift>
 8013d0a:	4604      	mov	r4, r0
 8013d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d061      	beq.n	8013dd6 <_dtoa_r+0x91e>
 8013d12:	4621      	mov	r1, r4
 8013d14:	9803      	ldr	r0, [sp, #12]
 8013d16:	f000 fff3 	bl	8014d00 <__mcmp>
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	da5b      	bge.n	8013dd6 <_dtoa_r+0x91e>
 8013d1e:	2300      	movs	r3, #0
 8013d20:	220a      	movs	r2, #10
 8013d22:	4648      	mov	r0, r9
 8013d24:	9903      	ldr	r1, [sp, #12]
 8013d26:	f000 fd91 	bl	801484c <__multadd>
 8013d2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d2c:	f107 38ff 	add.w	r8, r7, #4294967295
 8013d30:	9003      	str	r0, [sp, #12]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	f000 8177 	beq.w	8014026 <_dtoa_r+0xb6e>
 8013d38:	4629      	mov	r1, r5
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	220a      	movs	r2, #10
 8013d3e:	4648      	mov	r0, r9
 8013d40:	f000 fd84 	bl	801484c <__multadd>
 8013d44:	f1bb 0f00 	cmp.w	fp, #0
 8013d48:	4605      	mov	r5, r0
 8013d4a:	dc6f      	bgt.n	8013e2c <_dtoa_r+0x974>
 8013d4c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013d4e:	2b02      	cmp	r3, #2
 8013d50:	dc49      	bgt.n	8013de6 <_dtoa_r+0x92e>
 8013d52:	e06b      	b.n	8013e2c <_dtoa_r+0x974>
 8013d54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013d56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013d5a:	e73c      	b.n	8013bd6 <_dtoa_r+0x71e>
 8013d5c:	3fe00000 	.word	0x3fe00000
 8013d60:	40240000 	.word	0x40240000
 8013d64:	9b08      	ldr	r3, [sp, #32]
 8013d66:	1e5c      	subs	r4, r3, #1
 8013d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d6a:	42a3      	cmp	r3, r4
 8013d6c:	db09      	blt.n	8013d82 <_dtoa_r+0x8ca>
 8013d6e:	1b1c      	subs	r4, r3, r4
 8013d70:	9b08      	ldr	r3, [sp, #32]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	f6bf af30 	bge.w	8013bd8 <_dtoa_r+0x720>
 8013d78:	9b04      	ldr	r3, [sp, #16]
 8013d7a:	9a08      	ldr	r2, [sp, #32]
 8013d7c:	1a9e      	subs	r6, r3, r2
 8013d7e:	2300      	movs	r3, #0
 8013d80:	e72b      	b.n	8013bda <_dtoa_r+0x722>
 8013d82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013d86:	1ae3      	subs	r3, r4, r3
 8013d88:	441a      	add	r2, r3
 8013d8a:	940a      	str	r4, [sp, #40]	@ 0x28
 8013d8c:	9e04      	ldr	r6, [sp, #16]
 8013d8e:	2400      	movs	r4, #0
 8013d90:	9b08      	ldr	r3, [sp, #32]
 8013d92:	920e      	str	r2, [sp, #56]	@ 0x38
 8013d94:	e721      	b.n	8013bda <_dtoa_r+0x722>
 8013d96:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013d98:	9e04      	ldr	r6, [sp, #16]
 8013d9a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013d9c:	e728      	b.n	8013bf0 <_dtoa_r+0x738>
 8013d9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013da2:	e751      	b.n	8013c48 <_dtoa_r+0x790>
 8013da4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013da6:	9903      	ldr	r1, [sp, #12]
 8013da8:	e750      	b.n	8013c4c <_dtoa_r+0x794>
 8013daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8013dae:	e751      	b.n	8013c54 <_dtoa_r+0x79c>
 8013db0:	2300      	movs	r3, #0
 8013db2:	e779      	b.n	8013ca8 <_dtoa_r+0x7f0>
 8013db4:	9b06      	ldr	r3, [sp, #24]
 8013db6:	e777      	b.n	8013ca8 <_dtoa_r+0x7f0>
 8013db8:	2300      	movs	r3, #0
 8013dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8013dbc:	e779      	b.n	8013cb2 <_dtoa_r+0x7fa>
 8013dbe:	d093      	beq.n	8013ce8 <_dtoa_r+0x830>
 8013dc0:	9a04      	ldr	r2, [sp, #16]
 8013dc2:	331c      	adds	r3, #28
 8013dc4:	441a      	add	r2, r3
 8013dc6:	9204      	str	r2, [sp, #16]
 8013dc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013dca:	441e      	add	r6, r3
 8013dcc:	441a      	add	r2, r3
 8013dce:	9209      	str	r2, [sp, #36]	@ 0x24
 8013dd0:	e78a      	b.n	8013ce8 <_dtoa_r+0x830>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	e7f4      	b.n	8013dc0 <_dtoa_r+0x908>
 8013dd6:	9b08      	ldr	r3, [sp, #32]
 8013dd8:	46b8      	mov	r8, r7
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	dc20      	bgt.n	8013e20 <_dtoa_r+0x968>
 8013dde:	469b      	mov	fp, r3
 8013de0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013de2:	2b02      	cmp	r3, #2
 8013de4:	dd1e      	ble.n	8013e24 <_dtoa_r+0x96c>
 8013de6:	f1bb 0f00 	cmp.w	fp, #0
 8013dea:	f47f adb1 	bne.w	8013950 <_dtoa_r+0x498>
 8013dee:	4621      	mov	r1, r4
 8013df0:	465b      	mov	r3, fp
 8013df2:	2205      	movs	r2, #5
 8013df4:	4648      	mov	r0, r9
 8013df6:	f000 fd29 	bl	801484c <__multadd>
 8013dfa:	4601      	mov	r1, r0
 8013dfc:	4604      	mov	r4, r0
 8013dfe:	9803      	ldr	r0, [sp, #12]
 8013e00:	f000 ff7e 	bl	8014d00 <__mcmp>
 8013e04:	2800      	cmp	r0, #0
 8013e06:	f77f ada3 	ble.w	8013950 <_dtoa_r+0x498>
 8013e0a:	4656      	mov	r6, sl
 8013e0c:	2331      	movs	r3, #49	@ 0x31
 8013e0e:	f108 0801 	add.w	r8, r8, #1
 8013e12:	f806 3b01 	strb.w	r3, [r6], #1
 8013e16:	e59f      	b.n	8013958 <_dtoa_r+0x4a0>
 8013e18:	46b8      	mov	r8, r7
 8013e1a:	9c08      	ldr	r4, [sp, #32]
 8013e1c:	4625      	mov	r5, r4
 8013e1e:	e7f4      	b.n	8013e0a <_dtoa_r+0x952>
 8013e20:	f8dd b020 	ldr.w	fp, [sp, #32]
 8013e24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	f000 8101 	beq.w	801402e <_dtoa_r+0xb76>
 8013e2c:	2e00      	cmp	r6, #0
 8013e2e:	dd05      	ble.n	8013e3c <_dtoa_r+0x984>
 8013e30:	4629      	mov	r1, r5
 8013e32:	4632      	mov	r2, r6
 8013e34:	4648      	mov	r0, r9
 8013e36:	f000 fef7 	bl	8014c28 <__lshift>
 8013e3a:	4605      	mov	r5, r0
 8013e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d05c      	beq.n	8013efc <_dtoa_r+0xa44>
 8013e42:	4648      	mov	r0, r9
 8013e44:	6869      	ldr	r1, [r5, #4]
 8013e46:	f000 fc9f 	bl	8014788 <_Balloc>
 8013e4a:	4606      	mov	r6, r0
 8013e4c:	b928      	cbnz	r0, 8013e5a <_dtoa_r+0x9a2>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013e54:	4b80      	ldr	r3, [pc, #512]	@ (8014058 <_dtoa_r+0xba0>)
 8013e56:	f7ff bb43 	b.w	80134e0 <_dtoa_r+0x28>
 8013e5a:	692a      	ldr	r2, [r5, #16]
 8013e5c:	f105 010c 	add.w	r1, r5, #12
 8013e60:	3202      	adds	r2, #2
 8013e62:	0092      	lsls	r2, r2, #2
 8013e64:	300c      	adds	r0, #12
 8013e66:	f7ff fa7c 	bl	8013362 <memcpy>
 8013e6a:	2201      	movs	r2, #1
 8013e6c:	4631      	mov	r1, r6
 8013e6e:	4648      	mov	r0, r9
 8013e70:	f000 feda 	bl	8014c28 <__lshift>
 8013e74:	462f      	mov	r7, r5
 8013e76:	4605      	mov	r5, r0
 8013e78:	f10a 0301 	add.w	r3, sl, #1
 8013e7c:	9304      	str	r3, [sp, #16]
 8013e7e:	eb0a 030b 	add.w	r3, sl, fp
 8013e82:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e84:	9b06      	ldr	r3, [sp, #24]
 8013e86:	f003 0301 	and.w	r3, r3, #1
 8013e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e8c:	9b04      	ldr	r3, [sp, #16]
 8013e8e:	4621      	mov	r1, r4
 8013e90:	9803      	ldr	r0, [sp, #12]
 8013e92:	f103 3bff 	add.w	fp, r3, #4294967295
 8013e96:	f7ff fa84 	bl	80133a2 <quorem>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	4639      	mov	r1, r7
 8013e9e:	3330      	adds	r3, #48	@ 0x30
 8013ea0:	9006      	str	r0, [sp, #24]
 8013ea2:	9803      	ldr	r0, [sp, #12]
 8013ea4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ea6:	f000 ff2b 	bl	8014d00 <__mcmp>
 8013eaa:	462a      	mov	r2, r5
 8013eac:	9008      	str	r0, [sp, #32]
 8013eae:	4621      	mov	r1, r4
 8013eb0:	4648      	mov	r0, r9
 8013eb2:	f000 ff41 	bl	8014d38 <__mdiff>
 8013eb6:	68c2      	ldr	r2, [r0, #12]
 8013eb8:	4606      	mov	r6, r0
 8013eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ebc:	bb02      	cbnz	r2, 8013f00 <_dtoa_r+0xa48>
 8013ebe:	4601      	mov	r1, r0
 8013ec0:	9803      	ldr	r0, [sp, #12]
 8013ec2:	f000 ff1d 	bl	8014d00 <__mcmp>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013eca:	4631      	mov	r1, r6
 8013ecc:	4648      	mov	r0, r9
 8013ece:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8013ed2:	f000 fc99 	bl	8014808 <_Bfree>
 8013ed6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013ed8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013eda:	9e04      	ldr	r6, [sp, #16]
 8013edc:	ea42 0103 	orr.w	r1, r2, r3
 8013ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ee2:	4319      	orrs	r1, r3
 8013ee4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ee6:	d10d      	bne.n	8013f04 <_dtoa_r+0xa4c>
 8013ee8:	2b39      	cmp	r3, #57	@ 0x39
 8013eea:	d027      	beq.n	8013f3c <_dtoa_r+0xa84>
 8013eec:	9a08      	ldr	r2, [sp, #32]
 8013eee:	2a00      	cmp	r2, #0
 8013ef0:	dd01      	ble.n	8013ef6 <_dtoa_r+0xa3e>
 8013ef2:	9b06      	ldr	r3, [sp, #24]
 8013ef4:	3331      	adds	r3, #49	@ 0x31
 8013ef6:	f88b 3000 	strb.w	r3, [fp]
 8013efa:	e52e      	b.n	801395a <_dtoa_r+0x4a2>
 8013efc:	4628      	mov	r0, r5
 8013efe:	e7b9      	b.n	8013e74 <_dtoa_r+0x9bc>
 8013f00:	2201      	movs	r2, #1
 8013f02:	e7e2      	b.n	8013eca <_dtoa_r+0xa12>
 8013f04:	9908      	ldr	r1, [sp, #32]
 8013f06:	2900      	cmp	r1, #0
 8013f08:	db04      	blt.n	8013f14 <_dtoa_r+0xa5c>
 8013f0a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8013f0c:	4301      	orrs	r1, r0
 8013f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013f10:	4301      	orrs	r1, r0
 8013f12:	d120      	bne.n	8013f56 <_dtoa_r+0xa9e>
 8013f14:	2a00      	cmp	r2, #0
 8013f16:	ddee      	ble.n	8013ef6 <_dtoa_r+0xa3e>
 8013f18:	2201      	movs	r2, #1
 8013f1a:	9903      	ldr	r1, [sp, #12]
 8013f1c:	4648      	mov	r0, r9
 8013f1e:	9304      	str	r3, [sp, #16]
 8013f20:	f000 fe82 	bl	8014c28 <__lshift>
 8013f24:	4621      	mov	r1, r4
 8013f26:	9003      	str	r0, [sp, #12]
 8013f28:	f000 feea 	bl	8014d00 <__mcmp>
 8013f2c:	2800      	cmp	r0, #0
 8013f2e:	9b04      	ldr	r3, [sp, #16]
 8013f30:	dc02      	bgt.n	8013f38 <_dtoa_r+0xa80>
 8013f32:	d1e0      	bne.n	8013ef6 <_dtoa_r+0xa3e>
 8013f34:	07da      	lsls	r2, r3, #31
 8013f36:	d5de      	bpl.n	8013ef6 <_dtoa_r+0xa3e>
 8013f38:	2b39      	cmp	r3, #57	@ 0x39
 8013f3a:	d1da      	bne.n	8013ef2 <_dtoa_r+0xa3a>
 8013f3c:	2339      	movs	r3, #57	@ 0x39
 8013f3e:	f88b 3000 	strb.w	r3, [fp]
 8013f42:	4633      	mov	r3, r6
 8013f44:	461e      	mov	r6, r3
 8013f46:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013f4a:	3b01      	subs	r3, #1
 8013f4c:	2a39      	cmp	r2, #57	@ 0x39
 8013f4e:	d04e      	beq.n	8013fee <_dtoa_r+0xb36>
 8013f50:	3201      	adds	r2, #1
 8013f52:	701a      	strb	r2, [r3, #0]
 8013f54:	e501      	b.n	801395a <_dtoa_r+0x4a2>
 8013f56:	2a00      	cmp	r2, #0
 8013f58:	dd03      	ble.n	8013f62 <_dtoa_r+0xaaa>
 8013f5a:	2b39      	cmp	r3, #57	@ 0x39
 8013f5c:	d0ee      	beq.n	8013f3c <_dtoa_r+0xa84>
 8013f5e:	3301      	adds	r3, #1
 8013f60:	e7c9      	b.n	8013ef6 <_dtoa_r+0xa3e>
 8013f62:	9a04      	ldr	r2, [sp, #16]
 8013f64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013f66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013f6a:	428a      	cmp	r2, r1
 8013f6c:	d028      	beq.n	8013fc0 <_dtoa_r+0xb08>
 8013f6e:	2300      	movs	r3, #0
 8013f70:	220a      	movs	r2, #10
 8013f72:	9903      	ldr	r1, [sp, #12]
 8013f74:	4648      	mov	r0, r9
 8013f76:	f000 fc69 	bl	801484c <__multadd>
 8013f7a:	42af      	cmp	r7, r5
 8013f7c:	9003      	str	r0, [sp, #12]
 8013f7e:	f04f 0300 	mov.w	r3, #0
 8013f82:	f04f 020a 	mov.w	r2, #10
 8013f86:	4639      	mov	r1, r7
 8013f88:	4648      	mov	r0, r9
 8013f8a:	d107      	bne.n	8013f9c <_dtoa_r+0xae4>
 8013f8c:	f000 fc5e 	bl	801484c <__multadd>
 8013f90:	4607      	mov	r7, r0
 8013f92:	4605      	mov	r5, r0
 8013f94:	9b04      	ldr	r3, [sp, #16]
 8013f96:	3301      	adds	r3, #1
 8013f98:	9304      	str	r3, [sp, #16]
 8013f9a:	e777      	b.n	8013e8c <_dtoa_r+0x9d4>
 8013f9c:	f000 fc56 	bl	801484c <__multadd>
 8013fa0:	4629      	mov	r1, r5
 8013fa2:	4607      	mov	r7, r0
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	220a      	movs	r2, #10
 8013fa8:	4648      	mov	r0, r9
 8013faa:	f000 fc4f 	bl	801484c <__multadd>
 8013fae:	4605      	mov	r5, r0
 8013fb0:	e7f0      	b.n	8013f94 <_dtoa_r+0xadc>
 8013fb2:	f1bb 0f00 	cmp.w	fp, #0
 8013fb6:	bfcc      	ite	gt
 8013fb8:	465e      	movgt	r6, fp
 8013fba:	2601      	movle	r6, #1
 8013fbc:	2700      	movs	r7, #0
 8013fbe:	4456      	add	r6, sl
 8013fc0:	2201      	movs	r2, #1
 8013fc2:	9903      	ldr	r1, [sp, #12]
 8013fc4:	4648      	mov	r0, r9
 8013fc6:	9304      	str	r3, [sp, #16]
 8013fc8:	f000 fe2e 	bl	8014c28 <__lshift>
 8013fcc:	4621      	mov	r1, r4
 8013fce:	9003      	str	r0, [sp, #12]
 8013fd0:	f000 fe96 	bl	8014d00 <__mcmp>
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	dcb4      	bgt.n	8013f42 <_dtoa_r+0xa8a>
 8013fd8:	d102      	bne.n	8013fe0 <_dtoa_r+0xb28>
 8013fda:	9b04      	ldr	r3, [sp, #16]
 8013fdc:	07db      	lsls	r3, r3, #31
 8013fde:	d4b0      	bmi.n	8013f42 <_dtoa_r+0xa8a>
 8013fe0:	4633      	mov	r3, r6
 8013fe2:	461e      	mov	r6, r3
 8013fe4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013fe8:	2a30      	cmp	r2, #48	@ 0x30
 8013fea:	d0fa      	beq.n	8013fe2 <_dtoa_r+0xb2a>
 8013fec:	e4b5      	b.n	801395a <_dtoa_r+0x4a2>
 8013fee:	459a      	cmp	sl, r3
 8013ff0:	d1a8      	bne.n	8013f44 <_dtoa_r+0xa8c>
 8013ff2:	2331      	movs	r3, #49	@ 0x31
 8013ff4:	f108 0801 	add.w	r8, r8, #1
 8013ff8:	f88a 3000 	strb.w	r3, [sl]
 8013ffc:	e4ad      	b.n	801395a <_dtoa_r+0x4a2>
 8013ffe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8014000:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801405c <_dtoa_r+0xba4>
 8014004:	b11b      	cbz	r3, 801400e <_dtoa_r+0xb56>
 8014006:	f10a 0308 	add.w	r3, sl, #8
 801400a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801400c:	6013      	str	r3, [r2, #0]
 801400e:	4650      	mov	r0, sl
 8014010:	b017      	add	sp, #92	@ 0x5c
 8014012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014016:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8014018:	2b01      	cmp	r3, #1
 801401a:	f77f ae2e 	ble.w	8013c7a <_dtoa_r+0x7c2>
 801401e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014020:	930a      	str	r3, [sp, #40]	@ 0x28
 8014022:	2001      	movs	r0, #1
 8014024:	e64d      	b.n	8013cc2 <_dtoa_r+0x80a>
 8014026:	f1bb 0f00 	cmp.w	fp, #0
 801402a:	f77f aed9 	ble.w	8013de0 <_dtoa_r+0x928>
 801402e:	4656      	mov	r6, sl
 8014030:	4621      	mov	r1, r4
 8014032:	9803      	ldr	r0, [sp, #12]
 8014034:	f7ff f9b5 	bl	80133a2 <quorem>
 8014038:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801403c:	f806 3b01 	strb.w	r3, [r6], #1
 8014040:	eba6 020a 	sub.w	r2, r6, sl
 8014044:	4593      	cmp	fp, r2
 8014046:	ddb4      	ble.n	8013fb2 <_dtoa_r+0xafa>
 8014048:	2300      	movs	r3, #0
 801404a:	220a      	movs	r2, #10
 801404c:	4648      	mov	r0, r9
 801404e:	9903      	ldr	r1, [sp, #12]
 8014050:	f000 fbfc 	bl	801484c <__multadd>
 8014054:	9003      	str	r0, [sp, #12]
 8014056:	e7eb      	b.n	8014030 <_dtoa_r+0xb78>
 8014058:	080169ba 	.word	0x080169ba
 801405c:	08016955 	.word	0x08016955

08014060 <_free_r>:
 8014060:	b538      	push	{r3, r4, r5, lr}
 8014062:	4605      	mov	r5, r0
 8014064:	2900      	cmp	r1, #0
 8014066:	d040      	beq.n	80140ea <_free_r+0x8a>
 8014068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801406c:	1f0c      	subs	r4, r1, #4
 801406e:	2b00      	cmp	r3, #0
 8014070:	bfb8      	it	lt
 8014072:	18e4      	addlt	r4, r4, r3
 8014074:	f7fd f89a 	bl	80111ac <__malloc_lock>
 8014078:	4a1c      	ldr	r2, [pc, #112]	@ (80140ec <_free_r+0x8c>)
 801407a:	6813      	ldr	r3, [r2, #0]
 801407c:	b933      	cbnz	r3, 801408c <_free_r+0x2c>
 801407e:	6063      	str	r3, [r4, #4]
 8014080:	6014      	str	r4, [r2, #0]
 8014082:	4628      	mov	r0, r5
 8014084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014088:	f7fd b896 	b.w	80111b8 <__malloc_unlock>
 801408c:	42a3      	cmp	r3, r4
 801408e:	d908      	bls.n	80140a2 <_free_r+0x42>
 8014090:	6820      	ldr	r0, [r4, #0]
 8014092:	1821      	adds	r1, r4, r0
 8014094:	428b      	cmp	r3, r1
 8014096:	bf01      	itttt	eq
 8014098:	6819      	ldreq	r1, [r3, #0]
 801409a:	685b      	ldreq	r3, [r3, #4]
 801409c:	1809      	addeq	r1, r1, r0
 801409e:	6021      	streq	r1, [r4, #0]
 80140a0:	e7ed      	b.n	801407e <_free_r+0x1e>
 80140a2:	461a      	mov	r2, r3
 80140a4:	685b      	ldr	r3, [r3, #4]
 80140a6:	b10b      	cbz	r3, 80140ac <_free_r+0x4c>
 80140a8:	42a3      	cmp	r3, r4
 80140aa:	d9fa      	bls.n	80140a2 <_free_r+0x42>
 80140ac:	6811      	ldr	r1, [r2, #0]
 80140ae:	1850      	adds	r0, r2, r1
 80140b0:	42a0      	cmp	r0, r4
 80140b2:	d10b      	bne.n	80140cc <_free_r+0x6c>
 80140b4:	6820      	ldr	r0, [r4, #0]
 80140b6:	4401      	add	r1, r0
 80140b8:	1850      	adds	r0, r2, r1
 80140ba:	4283      	cmp	r3, r0
 80140bc:	6011      	str	r1, [r2, #0]
 80140be:	d1e0      	bne.n	8014082 <_free_r+0x22>
 80140c0:	6818      	ldr	r0, [r3, #0]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	4408      	add	r0, r1
 80140c6:	6010      	str	r0, [r2, #0]
 80140c8:	6053      	str	r3, [r2, #4]
 80140ca:	e7da      	b.n	8014082 <_free_r+0x22>
 80140cc:	d902      	bls.n	80140d4 <_free_r+0x74>
 80140ce:	230c      	movs	r3, #12
 80140d0:	602b      	str	r3, [r5, #0]
 80140d2:	e7d6      	b.n	8014082 <_free_r+0x22>
 80140d4:	6820      	ldr	r0, [r4, #0]
 80140d6:	1821      	adds	r1, r4, r0
 80140d8:	428b      	cmp	r3, r1
 80140da:	bf01      	itttt	eq
 80140dc:	6819      	ldreq	r1, [r3, #0]
 80140de:	685b      	ldreq	r3, [r3, #4]
 80140e0:	1809      	addeq	r1, r1, r0
 80140e2:	6021      	streq	r1, [r4, #0]
 80140e4:	6063      	str	r3, [r4, #4]
 80140e6:	6054      	str	r4, [r2, #4]
 80140e8:	e7cb      	b.n	8014082 <_free_r+0x22>
 80140ea:	bd38      	pop	{r3, r4, r5, pc}
 80140ec:	2000207c 	.word	0x2000207c

080140f0 <rshift>:
 80140f0:	6903      	ldr	r3, [r0, #16]
 80140f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80140fa:	f100 0414 	add.w	r4, r0, #20
 80140fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014102:	dd46      	ble.n	8014192 <rshift+0xa2>
 8014104:	f011 011f 	ands.w	r1, r1, #31
 8014108:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801410c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014110:	d10c      	bne.n	801412c <rshift+0x3c>
 8014112:	4629      	mov	r1, r5
 8014114:	f100 0710 	add.w	r7, r0, #16
 8014118:	42b1      	cmp	r1, r6
 801411a:	d335      	bcc.n	8014188 <rshift+0x98>
 801411c:	1a9b      	subs	r3, r3, r2
 801411e:	009b      	lsls	r3, r3, #2
 8014120:	1eea      	subs	r2, r5, #3
 8014122:	4296      	cmp	r6, r2
 8014124:	bf38      	it	cc
 8014126:	2300      	movcc	r3, #0
 8014128:	4423      	add	r3, r4
 801412a:	e015      	b.n	8014158 <rshift+0x68>
 801412c:	46a1      	mov	r9, r4
 801412e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014132:	f1c1 0820 	rsb	r8, r1, #32
 8014136:	40cf      	lsrs	r7, r1
 8014138:	f105 0e04 	add.w	lr, r5, #4
 801413c:	4576      	cmp	r6, lr
 801413e:	46f4      	mov	ip, lr
 8014140:	d816      	bhi.n	8014170 <rshift+0x80>
 8014142:	1a9a      	subs	r2, r3, r2
 8014144:	0092      	lsls	r2, r2, #2
 8014146:	3a04      	subs	r2, #4
 8014148:	3501      	adds	r5, #1
 801414a:	42ae      	cmp	r6, r5
 801414c:	bf38      	it	cc
 801414e:	2200      	movcc	r2, #0
 8014150:	18a3      	adds	r3, r4, r2
 8014152:	50a7      	str	r7, [r4, r2]
 8014154:	b107      	cbz	r7, 8014158 <rshift+0x68>
 8014156:	3304      	adds	r3, #4
 8014158:	42a3      	cmp	r3, r4
 801415a:	eba3 0204 	sub.w	r2, r3, r4
 801415e:	bf08      	it	eq
 8014160:	2300      	moveq	r3, #0
 8014162:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014166:	6102      	str	r2, [r0, #16]
 8014168:	bf08      	it	eq
 801416a:	6143      	streq	r3, [r0, #20]
 801416c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014170:	f8dc c000 	ldr.w	ip, [ip]
 8014174:	fa0c fc08 	lsl.w	ip, ip, r8
 8014178:	ea4c 0707 	orr.w	r7, ip, r7
 801417c:	f849 7b04 	str.w	r7, [r9], #4
 8014180:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014184:	40cf      	lsrs	r7, r1
 8014186:	e7d9      	b.n	801413c <rshift+0x4c>
 8014188:	f851 cb04 	ldr.w	ip, [r1], #4
 801418c:	f847 cf04 	str.w	ip, [r7, #4]!
 8014190:	e7c2      	b.n	8014118 <rshift+0x28>
 8014192:	4623      	mov	r3, r4
 8014194:	e7e0      	b.n	8014158 <rshift+0x68>

08014196 <__hexdig_fun>:
 8014196:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801419a:	2b09      	cmp	r3, #9
 801419c:	d802      	bhi.n	80141a4 <__hexdig_fun+0xe>
 801419e:	3820      	subs	r0, #32
 80141a0:	b2c0      	uxtb	r0, r0
 80141a2:	4770      	bx	lr
 80141a4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80141a8:	2b05      	cmp	r3, #5
 80141aa:	d801      	bhi.n	80141b0 <__hexdig_fun+0x1a>
 80141ac:	3847      	subs	r0, #71	@ 0x47
 80141ae:	e7f7      	b.n	80141a0 <__hexdig_fun+0xa>
 80141b0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80141b4:	2b05      	cmp	r3, #5
 80141b6:	d801      	bhi.n	80141bc <__hexdig_fun+0x26>
 80141b8:	3827      	subs	r0, #39	@ 0x27
 80141ba:	e7f1      	b.n	80141a0 <__hexdig_fun+0xa>
 80141bc:	2000      	movs	r0, #0
 80141be:	4770      	bx	lr

080141c0 <__gethex>:
 80141c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141c4:	468a      	mov	sl, r1
 80141c6:	4690      	mov	r8, r2
 80141c8:	b085      	sub	sp, #20
 80141ca:	9302      	str	r3, [sp, #8]
 80141cc:	680b      	ldr	r3, [r1, #0]
 80141ce:	9001      	str	r0, [sp, #4]
 80141d0:	1c9c      	adds	r4, r3, #2
 80141d2:	46a1      	mov	r9, r4
 80141d4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80141d8:	2830      	cmp	r0, #48	@ 0x30
 80141da:	d0fa      	beq.n	80141d2 <__gethex+0x12>
 80141dc:	eba9 0303 	sub.w	r3, r9, r3
 80141e0:	f1a3 0b02 	sub.w	fp, r3, #2
 80141e4:	f7ff ffd7 	bl	8014196 <__hexdig_fun>
 80141e8:	4605      	mov	r5, r0
 80141ea:	2800      	cmp	r0, #0
 80141ec:	d168      	bne.n	80142c0 <__gethex+0x100>
 80141ee:	2201      	movs	r2, #1
 80141f0:	4648      	mov	r0, r9
 80141f2:	499f      	ldr	r1, [pc, #636]	@ (8014470 <__gethex+0x2b0>)
 80141f4:	f7fe ff97 	bl	8013126 <strncmp>
 80141f8:	4607      	mov	r7, r0
 80141fa:	2800      	cmp	r0, #0
 80141fc:	d167      	bne.n	80142ce <__gethex+0x10e>
 80141fe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014202:	4626      	mov	r6, r4
 8014204:	f7ff ffc7 	bl	8014196 <__hexdig_fun>
 8014208:	2800      	cmp	r0, #0
 801420a:	d062      	beq.n	80142d2 <__gethex+0x112>
 801420c:	4623      	mov	r3, r4
 801420e:	7818      	ldrb	r0, [r3, #0]
 8014210:	4699      	mov	r9, r3
 8014212:	2830      	cmp	r0, #48	@ 0x30
 8014214:	f103 0301 	add.w	r3, r3, #1
 8014218:	d0f9      	beq.n	801420e <__gethex+0x4e>
 801421a:	f7ff ffbc 	bl	8014196 <__hexdig_fun>
 801421e:	fab0 f580 	clz	r5, r0
 8014222:	f04f 0b01 	mov.w	fp, #1
 8014226:	096d      	lsrs	r5, r5, #5
 8014228:	464a      	mov	r2, r9
 801422a:	4616      	mov	r6, r2
 801422c:	7830      	ldrb	r0, [r6, #0]
 801422e:	3201      	adds	r2, #1
 8014230:	f7ff ffb1 	bl	8014196 <__hexdig_fun>
 8014234:	2800      	cmp	r0, #0
 8014236:	d1f8      	bne.n	801422a <__gethex+0x6a>
 8014238:	2201      	movs	r2, #1
 801423a:	4630      	mov	r0, r6
 801423c:	498c      	ldr	r1, [pc, #560]	@ (8014470 <__gethex+0x2b0>)
 801423e:	f7fe ff72 	bl	8013126 <strncmp>
 8014242:	2800      	cmp	r0, #0
 8014244:	d13f      	bne.n	80142c6 <__gethex+0x106>
 8014246:	b944      	cbnz	r4, 801425a <__gethex+0x9a>
 8014248:	1c74      	adds	r4, r6, #1
 801424a:	4622      	mov	r2, r4
 801424c:	4616      	mov	r6, r2
 801424e:	7830      	ldrb	r0, [r6, #0]
 8014250:	3201      	adds	r2, #1
 8014252:	f7ff ffa0 	bl	8014196 <__hexdig_fun>
 8014256:	2800      	cmp	r0, #0
 8014258:	d1f8      	bne.n	801424c <__gethex+0x8c>
 801425a:	1ba4      	subs	r4, r4, r6
 801425c:	00a7      	lsls	r7, r4, #2
 801425e:	7833      	ldrb	r3, [r6, #0]
 8014260:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014264:	2b50      	cmp	r3, #80	@ 0x50
 8014266:	d13e      	bne.n	80142e6 <__gethex+0x126>
 8014268:	7873      	ldrb	r3, [r6, #1]
 801426a:	2b2b      	cmp	r3, #43	@ 0x2b
 801426c:	d033      	beq.n	80142d6 <__gethex+0x116>
 801426e:	2b2d      	cmp	r3, #45	@ 0x2d
 8014270:	d034      	beq.n	80142dc <__gethex+0x11c>
 8014272:	2400      	movs	r4, #0
 8014274:	1c71      	adds	r1, r6, #1
 8014276:	7808      	ldrb	r0, [r1, #0]
 8014278:	f7ff ff8d 	bl	8014196 <__hexdig_fun>
 801427c:	1e43      	subs	r3, r0, #1
 801427e:	b2db      	uxtb	r3, r3
 8014280:	2b18      	cmp	r3, #24
 8014282:	d830      	bhi.n	80142e6 <__gethex+0x126>
 8014284:	f1a0 0210 	sub.w	r2, r0, #16
 8014288:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801428c:	f7ff ff83 	bl	8014196 <__hexdig_fun>
 8014290:	f100 3cff 	add.w	ip, r0, #4294967295
 8014294:	fa5f fc8c 	uxtb.w	ip, ip
 8014298:	f1bc 0f18 	cmp.w	ip, #24
 801429c:	f04f 030a 	mov.w	r3, #10
 80142a0:	d91e      	bls.n	80142e0 <__gethex+0x120>
 80142a2:	b104      	cbz	r4, 80142a6 <__gethex+0xe6>
 80142a4:	4252      	negs	r2, r2
 80142a6:	4417      	add	r7, r2
 80142a8:	f8ca 1000 	str.w	r1, [sl]
 80142ac:	b1ed      	cbz	r5, 80142ea <__gethex+0x12a>
 80142ae:	f1bb 0f00 	cmp.w	fp, #0
 80142b2:	bf0c      	ite	eq
 80142b4:	2506      	moveq	r5, #6
 80142b6:	2500      	movne	r5, #0
 80142b8:	4628      	mov	r0, r5
 80142ba:	b005      	add	sp, #20
 80142bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142c0:	2500      	movs	r5, #0
 80142c2:	462c      	mov	r4, r5
 80142c4:	e7b0      	b.n	8014228 <__gethex+0x68>
 80142c6:	2c00      	cmp	r4, #0
 80142c8:	d1c7      	bne.n	801425a <__gethex+0x9a>
 80142ca:	4627      	mov	r7, r4
 80142cc:	e7c7      	b.n	801425e <__gethex+0x9e>
 80142ce:	464e      	mov	r6, r9
 80142d0:	462f      	mov	r7, r5
 80142d2:	2501      	movs	r5, #1
 80142d4:	e7c3      	b.n	801425e <__gethex+0x9e>
 80142d6:	2400      	movs	r4, #0
 80142d8:	1cb1      	adds	r1, r6, #2
 80142da:	e7cc      	b.n	8014276 <__gethex+0xb6>
 80142dc:	2401      	movs	r4, #1
 80142de:	e7fb      	b.n	80142d8 <__gethex+0x118>
 80142e0:	fb03 0002 	mla	r0, r3, r2, r0
 80142e4:	e7ce      	b.n	8014284 <__gethex+0xc4>
 80142e6:	4631      	mov	r1, r6
 80142e8:	e7de      	b.n	80142a8 <__gethex+0xe8>
 80142ea:	4629      	mov	r1, r5
 80142ec:	eba6 0309 	sub.w	r3, r6, r9
 80142f0:	3b01      	subs	r3, #1
 80142f2:	2b07      	cmp	r3, #7
 80142f4:	dc0a      	bgt.n	801430c <__gethex+0x14c>
 80142f6:	9801      	ldr	r0, [sp, #4]
 80142f8:	f000 fa46 	bl	8014788 <_Balloc>
 80142fc:	4604      	mov	r4, r0
 80142fe:	b940      	cbnz	r0, 8014312 <__gethex+0x152>
 8014300:	4602      	mov	r2, r0
 8014302:	21e4      	movs	r1, #228	@ 0xe4
 8014304:	4b5b      	ldr	r3, [pc, #364]	@ (8014474 <__gethex+0x2b4>)
 8014306:	485c      	ldr	r0, [pc, #368]	@ (8014478 <__gethex+0x2b8>)
 8014308:	f7fc fe78 	bl	8010ffc <__assert_func>
 801430c:	3101      	adds	r1, #1
 801430e:	105b      	asrs	r3, r3, #1
 8014310:	e7ef      	b.n	80142f2 <__gethex+0x132>
 8014312:	2300      	movs	r3, #0
 8014314:	f100 0a14 	add.w	sl, r0, #20
 8014318:	4655      	mov	r5, sl
 801431a:	469b      	mov	fp, r3
 801431c:	45b1      	cmp	r9, r6
 801431e:	d337      	bcc.n	8014390 <__gethex+0x1d0>
 8014320:	f845 bb04 	str.w	fp, [r5], #4
 8014324:	eba5 050a 	sub.w	r5, r5, sl
 8014328:	10ad      	asrs	r5, r5, #2
 801432a:	6125      	str	r5, [r4, #16]
 801432c:	4658      	mov	r0, fp
 801432e:	f000 fb1d 	bl	801496c <__hi0bits>
 8014332:	016d      	lsls	r5, r5, #5
 8014334:	f8d8 6000 	ldr.w	r6, [r8]
 8014338:	1a2d      	subs	r5, r5, r0
 801433a:	42b5      	cmp	r5, r6
 801433c:	dd54      	ble.n	80143e8 <__gethex+0x228>
 801433e:	1bad      	subs	r5, r5, r6
 8014340:	4629      	mov	r1, r5
 8014342:	4620      	mov	r0, r4
 8014344:	f000 fe9f 	bl	8015086 <__any_on>
 8014348:	4681      	mov	r9, r0
 801434a:	b178      	cbz	r0, 801436c <__gethex+0x1ac>
 801434c:	f04f 0901 	mov.w	r9, #1
 8014350:	1e6b      	subs	r3, r5, #1
 8014352:	1159      	asrs	r1, r3, #5
 8014354:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014358:	f003 021f 	and.w	r2, r3, #31
 801435c:	fa09 f202 	lsl.w	r2, r9, r2
 8014360:	420a      	tst	r2, r1
 8014362:	d003      	beq.n	801436c <__gethex+0x1ac>
 8014364:	454b      	cmp	r3, r9
 8014366:	dc36      	bgt.n	80143d6 <__gethex+0x216>
 8014368:	f04f 0902 	mov.w	r9, #2
 801436c:	4629      	mov	r1, r5
 801436e:	4620      	mov	r0, r4
 8014370:	f7ff febe 	bl	80140f0 <rshift>
 8014374:	442f      	add	r7, r5
 8014376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801437a:	42bb      	cmp	r3, r7
 801437c:	da42      	bge.n	8014404 <__gethex+0x244>
 801437e:	4621      	mov	r1, r4
 8014380:	9801      	ldr	r0, [sp, #4]
 8014382:	f000 fa41 	bl	8014808 <_Bfree>
 8014386:	2300      	movs	r3, #0
 8014388:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801438a:	25a3      	movs	r5, #163	@ 0xa3
 801438c:	6013      	str	r3, [r2, #0]
 801438e:	e793      	b.n	80142b8 <__gethex+0xf8>
 8014390:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014394:	2a2e      	cmp	r2, #46	@ 0x2e
 8014396:	d012      	beq.n	80143be <__gethex+0x1fe>
 8014398:	2b20      	cmp	r3, #32
 801439a:	d104      	bne.n	80143a6 <__gethex+0x1e6>
 801439c:	f845 bb04 	str.w	fp, [r5], #4
 80143a0:	f04f 0b00 	mov.w	fp, #0
 80143a4:	465b      	mov	r3, fp
 80143a6:	7830      	ldrb	r0, [r6, #0]
 80143a8:	9303      	str	r3, [sp, #12]
 80143aa:	f7ff fef4 	bl	8014196 <__hexdig_fun>
 80143ae:	9b03      	ldr	r3, [sp, #12]
 80143b0:	f000 000f 	and.w	r0, r0, #15
 80143b4:	4098      	lsls	r0, r3
 80143b6:	ea4b 0b00 	orr.w	fp, fp, r0
 80143ba:	3304      	adds	r3, #4
 80143bc:	e7ae      	b.n	801431c <__gethex+0x15c>
 80143be:	45b1      	cmp	r9, r6
 80143c0:	d8ea      	bhi.n	8014398 <__gethex+0x1d8>
 80143c2:	2201      	movs	r2, #1
 80143c4:	4630      	mov	r0, r6
 80143c6:	492a      	ldr	r1, [pc, #168]	@ (8014470 <__gethex+0x2b0>)
 80143c8:	9303      	str	r3, [sp, #12]
 80143ca:	f7fe feac 	bl	8013126 <strncmp>
 80143ce:	9b03      	ldr	r3, [sp, #12]
 80143d0:	2800      	cmp	r0, #0
 80143d2:	d1e1      	bne.n	8014398 <__gethex+0x1d8>
 80143d4:	e7a2      	b.n	801431c <__gethex+0x15c>
 80143d6:	4620      	mov	r0, r4
 80143d8:	1ea9      	subs	r1, r5, #2
 80143da:	f000 fe54 	bl	8015086 <__any_on>
 80143de:	2800      	cmp	r0, #0
 80143e0:	d0c2      	beq.n	8014368 <__gethex+0x1a8>
 80143e2:	f04f 0903 	mov.w	r9, #3
 80143e6:	e7c1      	b.n	801436c <__gethex+0x1ac>
 80143e8:	da09      	bge.n	80143fe <__gethex+0x23e>
 80143ea:	1b75      	subs	r5, r6, r5
 80143ec:	4621      	mov	r1, r4
 80143ee:	462a      	mov	r2, r5
 80143f0:	9801      	ldr	r0, [sp, #4]
 80143f2:	f000 fc19 	bl	8014c28 <__lshift>
 80143f6:	4604      	mov	r4, r0
 80143f8:	1b7f      	subs	r7, r7, r5
 80143fa:	f100 0a14 	add.w	sl, r0, #20
 80143fe:	f04f 0900 	mov.w	r9, #0
 8014402:	e7b8      	b.n	8014376 <__gethex+0x1b6>
 8014404:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014408:	42bd      	cmp	r5, r7
 801440a:	dd6f      	ble.n	80144ec <__gethex+0x32c>
 801440c:	1bed      	subs	r5, r5, r7
 801440e:	42ae      	cmp	r6, r5
 8014410:	dc34      	bgt.n	801447c <__gethex+0x2bc>
 8014412:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014416:	2b02      	cmp	r3, #2
 8014418:	d022      	beq.n	8014460 <__gethex+0x2a0>
 801441a:	2b03      	cmp	r3, #3
 801441c:	d024      	beq.n	8014468 <__gethex+0x2a8>
 801441e:	2b01      	cmp	r3, #1
 8014420:	d115      	bne.n	801444e <__gethex+0x28e>
 8014422:	42ae      	cmp	r6, r5
 8014424:	d113      	bne.n	801444e <__gethex+0x28e>
 8014426:	2e01      	cmp	r6, #1
 8014428:	d10b      	bne.n	8014442 <__gethex+0x282>
 801442a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801442e:	9a02      	ldr	r2, [sp, #8]
 8014430:	2562      	movs	r5, #98	@ 0x62
 8014432:	6013      	str	r3, [r2, #0]
 8014434:	2301      	movs	r3, #1
 8014436:	6123      	str	r3, [r4, #16]
 8014438:	f8ca 3000 	str.w	r3, [sl]
 801443c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801443e:	601c      	str	r4, [r3, #0]
 8014440:	e73a      	b.n	80142b8 <__gethex+0xf8>
 8014442:	4620      	mov	r0, r4
 8014444:	1e71      	subs	r1, r6, #1
 8014446:	f000 fe1e 	bl	8015086 <__any_on>
 801444a:	2800      	cmp	r0, #0
 801444c:	d1ed      	bne.n	801442a <__gethex+0x26a>
 801444e:	4621      	mov	r1, r4
 8014450:	9801      	ldr	r0, [sp, #4]
 8014452:	f000 f9d9 	bl	8014808 <_Bfree>
 8014456:	2300      	movs	r3, #0
 8014458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801445a:	2550      	movs	r5, #80	@ 0x50
 801445c:	6013      	str	r3, [r2, #0]
 801445e:	e72b      	b.n	80142b8 <__gethex+0xf8>
 8014460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014462:	2b00      	cmp	r3, #0
 8014464:	d1f3      	bne.n	801444e <__gethex+0x28e>
 8014466:	e7e0      	b.n	801442a <__gethex+0x26a>
 8014468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801446a:	2b00      	cmp	r3, #0
 801446c:	d1dd      	bne.n	801442a <__gethex+0x26a>
 801446e:	e7ee      	b.n	801444e <__gethex+0x28e>
 8014470:	080168a1 	.word	0x080168a1
 8014474:	080169ba 	.word	0x080169ba
 8014478:	080169cb 	.word	0x080169cb
 801447c:	1e6f      	subs	r7, r5, #1
 801447e:	f1b9 0f00 	cmp.w	r9, #0
 8014482:	d130      	bne.n	80144e6 <__gethex+0x326>
 8014484:	b127      	cbz	r7, 8014490 <__gethex+0x2d0>
 8014486:	4639      	mov	r1, r7
 8014488:	4620      	mov	r0, r4
 801448a:	f000 fdfc 	bl	8015086 <__any_on>
 801448e:	4681      	mov	r9, r0
 8014490:	2301      	movs	r3, #1
 8014492:	4629      	mov	r1, r5
 8014494:	1b76      	subs	r6, r6, r5
 8014496:	2502      	movs	r5, #2
 8014498:	117a      	asrs	r2, r7, #5
 801449a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801449e:	f007 071f 	and.w	r7, r7, #31
 80144a2:	40bb      	lsls	r3, r7
 80144a4:	4213      	tst	r3, r2
 80144a6:	4620      	mov	r0, r4
 80144a8:	bf18      	it	ne
 80144aa:	f049 0902 	orrne.w	r9, r9, #2
 80144ae:	f7ff fe1f 	bl	80140f0 <rshift>
 80144b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80144b6:	f1b9 0f00 	cmp.w	r9, #0
 80144ba:	d047      	beq.n	801454c <__gethex+0x38c>
 80144bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80144c0:	2b02      	cmp	r3, #2
 80144c2:	d015      	beq.n	80144f0 <__gethex+0x330>
 80144c4:	2b03      	cmp	r3, #3
 80144c6:	d017      	beq.n	80144f8 <__gethex+0x338>
 80144c8:	2b01      	cmp	r3, #1
 80144ca:	d109      	bne.n	80144e0 <__gethex+0x320>
 80144cc:	f019 0f02 	tst.w	r9, #2
 80144d0:	d006      	beq.n	80144e0 <__gethex+0x320>
 80144d2:	f8da 3000 	ldr.w	r3, [sl]
 80144d6:	ea49 0903 	orr.w	r9, r9, r3
 80144da:	f019 0f01 	tst.w	r9, #1
 80144de:	d10e      	bne.n	80144fe <__gethex+0x33e>
 80144e0:	f045 0510 	orr.w	r5, r5, #16
 80144e4:	e032      	b.n	801454c <__gethex+0x38c>
 80144e6:	f04f 0901 	mov.w	r9, #1
 80144ea:	e7d1      	b.n	8014490 <__gethex+0x2d0>
 80144ec:	2501      	movs	r5, #1
 80144ee:	e7e2      	b.n	80144b6 <__gethex+0x2f6>
 80144f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144f2:	f1c3 0301 	rsb	r3, r3, #1
 80144f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80144f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d0f0      	beq.n	80144e0 <__gethex+0x320>
 80144fe:	f04f 0c00 	mov.w	ip, #0
 8014502:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014506:	f104 0314 	add.w	r3, r4, #20
 801450a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801450e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014512:	4618      	mov	r0, r3
 8014514:	f853 2b04 	ldr.w	r2, [r3], #4
 8014518:	f1b2 3fff 	cmp.w	r2, #4294967295
 801451c:	d01b      	beq.n	8014556 <__gethex+0x396>
 801451e:	3201      	adds	r2, #1
 8014520:	6002      	str	r2, [r0, #0]
 8014522:	2d02      	cmp	r5, #2
 8014524:	f104 0314 	add.w	r3, r4, #20
 8014528:	d13c      	bne.n	80145a4 <__gethex+0x3e4>
 801452a:	f8d8 2000 	ldr.w	r2, [r8]
 801452e:	3a01      	subs	r2, #1
 8014530:	42b2      	cmp	r2, r6
 8014532:	d109      	bne.n	8014548 <__gethex+0x388>
 8014534:	2201      	movs	r2, #1
 8014536:	1171      	asrs	r1, r6, #5
 8014538:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801453c:	f006 061f 	and.w	r6, r6, #31
 8014540:	fa02 f606 	lsl.w	r6, r2, r6
 8014544:	421e      	tst	r6, r3
 8014546:	d13a      	bne.n	80145be <__gethex+0x3fe>
 8014548:	f045 0520 	orr.w	r5, r5, #32
 801454c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801454e:	601c      	str	r4, [r3, #0]
 8014550:	9b02      	ldr	r3, [sp, #8]
 8014552:	601f      	str	r7, [r3, #0]
 8014554:	e6b0      	b.n	80142b8 <__gethex+0xf8>
 8014556:	4299      	cmp	r1, r3
 8014558:	f843 cc04 	str.w	ip, [r3, #-4]
 801455c:	d8d9      	bhi.n	8014512 <__gethex+0x352>
 801455e:	68a3      	ldr	r3, [r4, #8]
 8014560:	459b      	cmp	fp, r3
 8014562:	db17      	blt.n	8014594 <__gethex+0x3d4>
 8014564:	6861      	ldr	r1, [r4, #4]
 8014566:	9801      	ldr	r0, [sp, #4]
 8014568:	3101      	adds	r1, #1
 801456a:	f000 f90d 	bl	8014788 <_Balloc>
 801456e:	4681      	mov	r9, r0
 8014570:	b918      	cbnz	r0, 801457a <__gethex+0x3ba>
 8014572:	4602      	mov	r2, r0
 8014574:	2184      	movs	r1, #132	@ 0x84
 8014576:	4b19      	ldr	r3, [pc, #100]	@ (80145dc <__gethex+0x41c>)
 8014578:	e6c5      	b.n	8014306 <__gethex+0x146>
 801457a:	6922      	ldr	r2, [r4, #16]
 801457c:	f104 010c 	add.w	r1, r4, #12
 8014580:	3202      	adds	r2, #2
 8014582:	0092      	lsls	r2, r2, #2
 8014584:	300c      	adds	r0, #12
 8014586:	f7fe feec 	bl	8013362 <memcpy>
 801458a:	4621      	mov	r1, r4
 801458c:	9801      	ldr	r0, [sp, #4]
 801458e:	f000 f93b 	bl	8014808 <_Bfree>
 8014592:	464c      	mov	r4, r9
 8014594:	6923      	ldr	r3, [r4, #16]
 8014596:	1c5a      	adds	r2, r3, #1
 8014598:	6122      	str	r2, [r4, #16]
 801459a:	2201      	movs	r2, #1
 801459c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80145a0:	615a      	str	r2, [r3, #20]
 80145a2:	e7be      	b.n	8014522 <__gethex+0x362>
 80145a4:	6922      	ldr	r2, [r4, #16]
 80145a6:	455a      	cmp	r2, fp
 80145a8:	dd0b      	ble.n	80145c2 <__gethex+0x402>
 80145aa:	2101      	movs	r1, #1
 80145ac:	4620      	mov	r0, r4
 80145ae:	f7ff fd9f 	bl	80140f0 <rshift>
 80145b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80145b6:	3701      	adds	r7, #1
 80145b8:	42bb      	cmp	r3, r7
 80145ba:	f6ff aee0 	blt.w	801437e <__gethex+0x1be>
 80145be:	2501      	movs	r5, #1
 80145c0:	e7c2      	b.n	8014548 <__gethex+0x388>
 80145c2:	f016 061f 	ands.w	r6, r6, #31
 80145c6:	d0fa      	beq.n	80145be <__gethex+0x3fe>
 80145c8:	4453      	add	r3, sl
 80145ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80145ce:	f000 f9cd 	bl	801496c <__hi0bits>
 80145d2:	f1c6 0620 	rsb	r6, r6, #32
 80145d6:	42b0      	cmp	r0, r6
 80145d8:	dbe7      	blt.n	80145aa <__gethex+0x3ea>
 80145da:	e7f0      	b.n	80145be <__gethex+0x3fe>
 80145dc:	080169ba 	.word	0x080169ba

080145e0 <L_shift>:
 80145e0:	f1c2 0208 	rsb	r2, r2, #8
 80145e4:	0092      	lsls	r2, r2, #2
 80145e6:	b570      	push	{r4, r5, r6, lr}
 80145e8:	f1c2 0620 	rsb	r6, r2, #32
 80145ec:	6843      	ldr	r3, [r0, #4]
 80145ee:	6804      	ldr	r4, [r0, #0]
 80145f0:	fa03 f506 	lsl.w	r5, r3, r6
 80145f4:	432c      	orrs	r4, r5
 80145f6:	40d3      	lsrs	r3, r2
 80145f8:	6004      	str	r4, [r0, #0]
 80145fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80145fe:	4288      	cmp	r0, r1
 8014600:	d3f4      	bcc.n	80145ec <L_shift+0xc>
 8014602:	bd70      	pop	{r4, r5, r6, pc}

08014604 <__match>:
 8014604:	b530      	push	{r4, r5, lr}
 8014606:	6803      	ldr	r3, [r0, #0]
 8014608:	3301      	adds	r3, #1
 801460a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801460e:	b914      	cbnz	r4, 8014616 <__match+0x12>
 8014610:	6003      	str	r3, [r0, #0]
 8014612:	2001      	movs	r0, #1
 8014614:	bd30      	pop	{r4, r5, pc}
 8014616:	f813 2b01 	ldrb.w	r2, [r3], #1
 801461a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801461e:	2d19      	cmp	r5, #25
 8014620:	bf98      	it	ls
 8014622:	3220      	addls	r2, #32
 8014624:	42a2      	cmp	r2, r4
 8014626:	d0f0      	beq.n	801460a <__match+0x6>
 8014628:	2000      	movs	r0, #0
 801462a:	e7f3      	b.n	8014614 <__match+0x10>

0801462c <__hexnan>:
 801462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014630:	2500      	movs	r5, #0
 8014632:	680b      	ldr	r3, [r1, #0]
 8014634:	4682      	mov	sl, r0
 8014636:	115e      	asrs	r6, r3, #5
 8014638:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801463c:	f013 031f 	ands.w	r3, r3, #31
 8014640:	bf18      	it	ne
 8014642:	3604      	addne	r6, #4
 8014644:	1f37      	subs	r7, r6, #4
 8014646:	4690      	mov	r8, r2
 8014648:	46b9      	mov	r9, r7
 801464a:	463c      	mov	r4, r7
 801464c:	46ab      	mov	fp, r5
 801464e:	b087      	sub	sp, #28
 8014650:	6801      	ldr	r1, [r0, #0]
 8014652:	9301      	str	r3, [sp, #4]
 8014654:	f846 5c04 	str.w	r5, [r6, #-4]
 8014658:	9502      	str	r5, [sp, #8]
 801465a:	784a      	ldrb	r2, [r1, #1]
 801465c:	1c4b      	adds	r3, r1, #1
 801465e:	9303      	str	r3, [sp, #12]
 8014660:	b342      	cbz	r2, 80146b4 <__hexnan+0x88>
 8014662:	4610      	mov	r0, r2
 8014664:	9105      	str	r1, [sp, #20]
 8014666:	9204      	str	r2, [sp, #16]
 8014668:	f7ff fd95 	bl	8014196 <__hexdig_fun>
 801466c:	2800      	cmp	r0, #0
 801466e:	d151      	bne.n	8014714 <__hexnan+0xe8>
 8014670:	9a04      	ldr	r2, [sp, #16]
 8014672:	9905      	ldr	r1, [sp, #20]
 8014674:	2a20      	cmp	r2, #32
 8014676:	d818      	bhi.n	80146aa <__hexnan+0x7e>
 8014678:	9b02      	ldr	r3, [sp, #8]
 801467a:	459b      	cmp	fp, r3
 801467c:	dd13      	ble.n	80146a6 <__hexnan+0x7a>
 801467e:	454c      	cmp	r4, r9
 8014680:	d206      	bcs.n	8014690 <__hexnan+0x64>
 8014682:	2d07      	cmp	r5, #7
 8014684:	dc04      	bgt.n	8014690 <__hexnan+0x64>
 8014686:	462a      	mov	r2, r5
 8014688:	4649      	mov	r1, r9
 801468a:	4620      	mov	r0, r4
 801468c:	f7ff ffa8 	bl	80145e0 <L_shift>
 8014690:	4544      	cmp	r4, r8
 8014692:	d952      	bls.n	801473a <__hexnan+0x10e>
 8014694:	2300      	movs	r3, #0
 8014696:	f1a4 0904 	sub.w	r9, r4, #4
 801469a:	f844 3c04 	str.w	r3, [r4, #-4]
 801469e:	461d      	mov	r5, r3
 80146a0:	464c      	mov	r4, r9
 80146a2:	f8cd b008 	str.w	fp, [sp, #8]
 80146a6:	9903      	ldr	r1, [sp, #12]
 80146a8:	e7d7      	b.n	801465a <__hexnan+0x2e>
 80146aa:	2a29      	cmp	r2, #41	@ 0x29
 80146ac:	d157      	bne.n	801475e <__hexnan+0x132>
 80146ae:	3102      	adds	r1, #2
 80146b0:	f8ca 1000 	str.w	r1, [sl]
 80146b4:	f1bb 0f00 	cmp.w	fp, #0
 80146b8:	d051      	beq.n	801475e <__hexnan+0x132>
 80146ba:	454c      	cmp	r4, r9
 80146bc:	d206      	bcs.n	80146cc <__hexnan+0xa0>
 80146be:	2d07      	cmp	r5, #7
 80146c0:	dc04      	bgt.n	80146cc <__hexnan+0xa0>
 80146c2:	462a      	mov	r2, r5
 80146c4:	4649      	mov	r1, r9
 80146c6:	4620      	mov	r0, r4
 80146c8:	f7ff ff8a 	bl	80145e0 <L_shift>
 80146cc:	4544      	cmp	r4, r8
 80146ce:	d936      	bls.n	801473e <__hexnan+0x112>
 80146d0:	4623      	mov	r3, r4
 80146d2:	f1a8 0204 	sub.w	r2, r8, #4
 80146d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80146da:	429f      	cmp	r7, r3
 80146dc:	f842 1f04 	str.w	r1, [r2, #4]!
 80146e0:	d2f9      	bcs.n	80146d6 <__hexnan+0xaa>
 80146e2:	1b3b      	subs	r3, r7, r4
 80146e4:	f023 0303 	bic.w	r3, r3, #3
 80146e8:	3304      	adds	r3, #4
 80146ea:	3401      	adds	r4, #1
 80146ec:	3e03      	subs	r6, #3
 80146ee:	42b4      	cmp	r4, r6
 80146f0:	bf88      	it	hi
 80146f2:	2304      	movhi	r3, #4
 80146f4:	2200      	movs	r2, #0
 80146f6:	4443      	add	r3, r8
 80146f8:	f843 2b04 	str.w	r2, [r3], #4
 80146fc:	429f      	cmp	r7, r3
 80146fe:	d2fb      	bcs.n	80146f8 <__hexnan+0xcc>
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	b91b      	cbnz	r3, 801470c <__hexnan+0xe0>
 8014704:	4547      	cmp	r7, r8
 8014706:	d128      	bne.n	801475a <__hexnan+0x12e>
 8014708:	2301      	movs	r3, #1
 801470a:	603b      	str	r3, [r7, #0]
 801470c:	2005      	movs	r0, #5
 801470e:	b007      	add	sp, #28
 8014710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014714:	3501      	adds	r5, #1
 8014716:	2d08      	cmp	r5, #8
 8014718:	f10b 0b01 	add.w	fp, fp, #1
 801471c:	dd06      	ble.n	801472c <__hexnan+0x100>
 801471e:	4544      	cmp	r4, r8
 8014720:	d9c1      	bls.n	80146a6 <__hexnan+0x7a>
 8014722:	2300      	movs	r3, #0
 8014724:	2501      	movs	r5, #1
 8014726:	f844 3c04 	str.w	r3, [r4, #-4]
 801472a:	3c04      	subs	r4, #4
 801472c:	6822      	ldr	r2, [r4, #0]
 801472e:	f000 000f 	and.w	r0, r0, #15
 8014732:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014736:	6020      	str	r0, [r4, #0]
 8014738:	e7b5      	b.n	80146a6 <__hexnan+0x7a>
 801473a:	2508      	movs	r5, #8
 801473c:	e7b3      	b.n	80146a6 <__hexnan+0x7a>
 801473e:	9b01      	ldr	r3, [sp, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d0dd      	beq.n	8014700 <__hexnan+0xd4>
 8014744:	f04f 32ff 	mov.w	r2, #4294967295
 8014748:	f1c3 0320 	rsb	r3, r3, #32
 801474c:	40da      	lsrs	r2, r3
 801474e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014752:	4013      	ands	r3, r2
 8014754:	f846 3c04 	str.w	r3, [r6, #-4]
 8014758:	e7d2      	b.n	8014700 <__hexnan+0xd4>
 801475a:	3f04      	subs	r7, #4
 801475c:	e7d0      	b.n	8014700 <__hexnan+0xd4>
 801475e:	2004      	movs	r0, #4
 8014760:	e7d5      	b.n	801470e <__hexnan+0xe2>

08014762 <__ascii_mbtowc>:
 8014762:	b082      	sub	sp, #8
 8014764:	b901      	cbnz	r1, 8014768 <__ascii_mbtowc+0x6>
 8014766:	a901      	add	r1, sp, #4
 8014768:	b142      	cbz	r2, 801477c <__ascii_mbtowc+0x1a>
 801476a:	b14b      	cbz	r3, 8014780 <__ascii_mbtowc+0x1e>
 801476c:	7813      	ldrb	r3, [r2, #0]
 801476e:	600b      	str	r3, [r1, #0]
 8014770:	7812      	ldrb	r2, [r2, #0]
 8014772:	1e10      	subs	r0, r2, #0
 8014774:	bf18      	it	ne
 8014776:	2001      	movne	r0, #1
 8014778:	b002      	add	sp, #8
 801477a:	4770      	bx	lr
 801477c:	4610      	mov	r0, r2
 801477e:	e7fb      	b.n	8014778 <__ascii_mbtowc+0x16>
 8014780:	f06f 0001 	mvn.w	r0, #1
 8014784:	e7f8      	b.n	8014778 <__ascii_mbtowc+0x16>
	...

08014788 <_Balloc>:
 8014788:	b570      	push	{r4, r5, r6, lr}
 801478a:	69c6      	ldr	r6, [r0, #28]
 801478c:	4604      	mov	r4, r0
 801478e:	460d      	mov	r5, r1
 8014790:	b976      	cbnz	r6, 80147b0 <_Balloc+0x28>
 8014792:	2010      	movs	r0, #16
 8014794:	f7fc fc58 	bl	8011048 <malloc>
 8014798:	4602      	mov	r2, r0
 801479a:	61e0      	str	r0, [r4, #28]
 801479c:	b920      	cbnz	r0, 80147a8 <_Balloc+0x20>
 801479e:	216b      	movs	r1, #107	@ 0x6b
 80147a0:	4b17      	ldr	r3, [pc, #92]	@ (8014800 <_Balloc+0x78>)
 80147a2:	4818      	ldr	r0, [pc, #96]	@ (8014804 <_Balloc+0x7c>)
 80147a4:	f7fc fc2a 	bl	8010ffc <__assert_func>
 80147a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80147ac:	6006      	str	r6, [r0, #0]
 80147ae:	60c6      	str	r6, [r0, #12]
 80147b0:	69e6      	ldr	r6, [r4, #28]
 80147b2:	68f3      	ldr	r3, [r6, #12]
 80147b4:	b183      	cbz	r3, 80147d8 <_Balloc+0x50>
 80147b6:	69e3      	ldr	r3, [r4, #28]
 80147b8:	68db      	ldr	r3, [r3, #12]
 80147ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80147be:	b9b8      	cbnz	r0, 80147f0 <_Balloc+0x68>
 80147c0:	2101      	movs	r1, #1
 80147c2:	fa01 f605 	lsl.w	r6, r1, r5
 80147c6:	1d72      	adds	r2, r6, #5
 80147c8:	4620      	mov	r0, r4
 80147ca:	0092      	lsls	r2, r2, #2
 80147cc:	f001 f8aa 	bl	8015924 <_calloc_r>
 80147d0:	b160      	cbz	r0, 80147ec <_Balloc+0x64>
 80147d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80147d6:	e00e      	b.n	80147f6 <_Balloc+0x6e>
 80147d8:	2221      	movs	r2, #33	@ 0x21
 80147da:	2104      	movs	r1, #4
 80147dc:	4620      	mov	r0, r4
 80147de:	f001 f8a1 	bl	8015924 <_calloc_r>
 80147e2:	69e3      	ldr	r3, [r4, #28]
 80147e4:	60f0      	str	r0, [r6, #12]
 80147e6:	68db      	ldr	r3, [r3, #12]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d1e4      	bne.n	80147b6 <_Balloc+0x2e>
 80147ec:	2000      	movs	r0, #0
 80147ee:	bd70      	pop	{r4, r5, r6, pc}
 80147f0:	6802      	ldr	r2, [r0, #0]
 80147f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80147f6:	2300      	movs	r3, #0
 80147f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80147fc:	e7f7      	b.n	80147ee <_Balloc+0x66>
 80147fe:	bf00      	nop
 8014800:	080168dc 	.word	0x080168dc
 8014804:	08016a2b 	.word	0x08016a2b

08014808 <_Bfree>:
 8014808:	b570      	push	{r4, r5, r6, lr}
 801480a:	69c6      	ldr	r6, [r0, #28]
 801480c:	4605      	mov	r5, r0
 801480e:	460c      	mov	r4, r1
 8014810:	b976      	cbnz	r6, 8014830 <_Bfree+0x28>
 8014812:	2010      	movs	r0, #16
 8014814:	f7fc fc18 	bl	8011048 <malloc>
 8014818:	4602      	mov	r2, r0
 801481a:	61e8      	str	r0, [r5, #28]
 801481c:	b920      	cbnz	r0, 8014828 <_Bfree+0x20>
 801481e:	218f      	movs	r1, #143	@ 0x8f
 8014820:	4b08      	ldr	r3, [pc, #32]	@ (8014844 <_Bfree+0x3c>)
 8014822:	4809      	ldr	r0, [pc, #36]	@ (8014848 <_Bfree+0x40>)
 8014824:	f7fc fbea 	bl	8010ffc <__assert_func>
 8014828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801482c:	6006      	str	r6, [r0, #0]
 801482e:	60c6      	str	r6, [r0, #12]
 8014830:	b13c      	cbz	r4, 8014842 <_Bfree+0x3a>
 8014832:	69eb      	ldr	r3, [r5, #28]
 8014834:	6862      	ldr	r2, [r4, #4]
 8014836:	68db      	ldr	r3, [r3, #12]
 8014838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801483c:	6021      	str	r1, [r4, #0]
 801483e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014842:	bd70      	pop	{r4, r5, r6, pc}
 8014844:	080168dc 	.word	0x080168dc
 8014848:	08016a2b 	.word	0x08016a2b

0801484c <__multadd>:
 801484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014850:	4607      	mov	r7, r0
 8014852:	460c      	mov	r4, r1
 8014854:	461e      	mov	r6, r3
 8014856:	2000      	movs	r0, #0
 8014858:	690d      	ldr	r5, [r1, #16]
 801485a:	f101 0c14 	add.w	ip, r1, #20
 801485e:	f8dc 3000 	ldr.w	r3, [ip]
 8014862:	3001      	adds	r0, #1
 8014864:	b299      	uxth	r1, r3
 8014866:	fb02 6101 	mla	r1, r2, r1, r6
 801486a:	0c1e      	lsrs	r6, r3, #16
 801486c:	0c0b      	lsrs	r3, r1, #16
 801486e:	fb02 3306 	mla	r3, r2, r6, r3
 8014872:	b289      	uxth	r1, r1
 8014874:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014878:	4285      	cmp	r5, r0
 801487a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801487e:	f84c 1b04 	str.w	r1, [ip], #4
 8014882:	dcec      	bgt.n	801485e <__multadd+0x12>
 8014884:	b30e      	cbz	r6, 80148ca <__multadd+0x7e>
 8014886:	68a3      	ldr	r3, [r4, #8]
 8014888:	42ab      	cmp	r3, r5
 801488a:	dc19      	bgt.n	80148c0 <__multadd+0x74>
 801488c:	6861      	ldr	r1, [r4, #4]
 801488e:	4638      	mov	r0, r7
 8014890:	3101      	adds	r1, #1
 8014892:	f7ff ff79 	bl	8014788 <_Balloc>
 8014896:	4680      	mov	r8, r0
 8014898:	b928      	cbnz	r0, 80148a6 <__multadd+0x5a>
 801489a:	4602      	mov	r2, r0
 801489c:	21ba      	movs	r1, #186	@ 0xba
 801489e:	4b0c      	ldr	r3, [pc, #48]	@ (80148d0 <__multadd+0x84>)
 80148a0:	480c      	ldr	r0, [pc, #48]	@ (80148d4 <__multadd+0x88>)
 80148a2:	f7fc fbab 	bl	8010ffc <__assert_func>
 80148a6:	6922      	ldr	r2, [r4, #16]
 80148a8:	f104 010c 	add.w	r1, r4, #12
 80148ac:	3202      	adds	r2, #2
 80148ae:	0092      	lsls	r2, r2, #2
 80148b0:	300c      	adds	r0, #12
 80148b2:	f7fe fd56 	bl	8013362 <memcpy>
 80148b6:	4621      	mov	r1, r4
 80148b8:	4638      	mov	r0, r7
 80148ba:	f7ff ffa5 	bl	8014808 <_Bfree>
 80148be:	4644      	mov	r4, r8
 80148c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80148c4:	3501      	adds	r5, #1
 80148c6:	615e      	str	r6, [r3, #20]
 80148c8:	6125      	str	r5, [r4, #16]
 80148ca:	4620      	mov	r0, r4
 80148cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148d0:	080169ba 	.word	0x080169ba
 80148d4:	08016a2b 	.word	0x08016a2b

080148d8 <__s2b>:
 80148d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148dc:	4615      	mov	r5, r2
 80148de:	2209      	movs	r2, #9
 80148e0:	461f      	mov	r7, r3
 80148e2:	3308      	adds	r3, #8
 80148e4:	460c      	mov	r4, r1
 80148e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80148ea:	4606      	mov	r6, r0
 80148ec:	2201      	movs	r2, #1
 80148ee:	2100      	movs	r1, #0
 80148f0:	429a      	cmp	r2, r3
 80148f2:	db09      	blt.n	8014908 <__s2b+0x30>
 80148f4:	4630      	mov	r0, r6
 80148f6:	f7ff ff47 	bl	8014788 <_Balloc>
 80148fa:	b940      	cbnz	r0, 801490e <__s2b+0x36>
 80148fc:	4602      	mov	r2, r0
 80148fe:	21d3      	movs	r1, #211	@ 0xd3
 8014900:	4b18      	ldr	r3, [pc, #96]	@ (8014964 <__s2b+0x8c>)
 8014902:	4819      	ldr	r0, [pc, #100]	@ (8014968 <__s2b+0x90>)
 8014904:	f7fc fb7a 	bl	8010ffc <__assert_func>
 8014908:	0052      	lsls	r2, r2, #1
 801490a:	3101      	adds	r1, #1
 801490c:	e7f0      	b.n	80148f0 <__s2b+0x18>
 801490e:	9b08      	ldr	r3, [sp, #32]
 8014910:	2d09      	cmp	r5, #9
 8014912:	6143      	str	r3, [r0, #20]
 8014914:	f04f 0301 	mov.w	r3, #1
 8014918:	6103      	str	r3, [r0, #16]
 801491a:	dd16      	ble.n	801494a <__s2b+0x72>
 801491c:	f104 0909 	add.w	r9, r4, #9
 8014920:	46c8      	mov	r8, r9
 8014922:	442c      	add	r4, r5
 8014924:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014928:	4601      	mov	r1, r0
 801492a:	220a      	movs	r2, #10
 801492c:	4630      	mov	r0, r6
 801492e:	3b30      	subs	r3, #48	@ 0x30
 8014930:	f7ff ff8c 	bl	801484c <__multadd>
 8014934:	45a0      	cmp	r8, r4
 8014936:	d1f5      	bne.n	8014924 <__s2b+0x4c>
 8014938:	f1a5 0408 	sub.w	r4, r5, #8
 801493c:	444c      	add	r4, r9
 801493e:	1b2d      	subs	r5, r5, r4
 8014940:	1963      	adds	r3, r4, r5
 8014942:	42bb      	cmp	r3, r7
 8014944:	db04      	blt.n	8014950 <__s2b+0x78>
 8014946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801494a:	2509      	movs	r5, #9
 801494c:	340a      	adds	r4, #10
 801494e:	e7f6      	b.n	801493e <__s2b+0x66>
 8014950:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014954:	4601      	mov	r1, r0
 8014956:	220a      	movs	r2, #10
 8014958:	4630      	mov	r0, r6
 801495a:	3b30      	subs	r3, #48	@ 0x30
 801495c:	f7ff ff76 	bl	801484c <__multadd>
 8014960:	e7ee      	b.n	8014940 <__s2b+0x68>
 8014962:	bf00      	nop
 8014964:	080169ba 	.word	0x080169ba
 8014968:	08016a2b 	.word	0x08016a2b

0801496c <__hi0bits>:
 801496c:	4603      	mov	r3, r0
 801496e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014972:	bf3a      	itte	cc
 8014974:	0403      	lslcc	r3, r0, #16
 8014976:	2010      	movcc	r0, #16
 8014978:	2000      	movcs	r0, #0
 801497a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801497e:	bf3c      	itt	cc
 8014980:	021b      	lslcc	r3, r3, #8
 8014982:	3008      	addcc	r0, #8
 8014984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014988:	bf3c      	itt	cc
 801498a:	011b      	lslcc	r3, r3, #4
 801498c:	3004      	addcc	r0, #4
 801498e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014992:	bf3c      	itt	cc
 8014994:	009b      	lslcc	r3, r3, #2
 8014996:	3002      	addcc	r0, #2
 8014998:	2b00      	cmp	r3, #0
 801499a:	db05      	blt.n	80149a8 <__hi0bits+0x3c>
 801499c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80149a0:	f100 0001 	add.w	r0, r0, #1
 80149a4:	bf08      	it	eq
 80149a6:	2020      	moveq	r0, #32
 80149a8:	4770      	bx	lr

080149aa <__lo0bits>:
 80149aa:	6803      	ldr	r3, [r0, #0]
 80149ac:	4602      	mov	r2, r0
 80149ae:	f013 0007 	ands.w	r0, r3, #7
 80149b2:	d00b      	beq.n	80149cc <__lo0bits+0x22>
 80149b4:	07d9      	lsls	r1, r3, #31
 80149b6:	d421      	bmi.n	80149fc <__lo0bits+0x52>
 80149b8:	0798      	lsls	r0, r3, #30
 80149ba:	bf49      	itett	mi
 80149bc:	085b      	lsrmi	r3, r3, #1
 80149be:	089b      	lsrpl	r3, r3, #2
 80149c0:	2001      	movmi	r0, #1
 80149c2:	6013      	strmi	r3, [r2, #0]
 80149c4:	bf5c      	itt	pl
 80149c6:	2002      	movpl	r0, #2
 80149c8:	6013      	strpl	r3, [r2, #0]
 80149ca:	4770      	bx	lr
 80149cc:	b299      	uxth	r1, r3
 80149ce:	b909      	cbnz	r1, 80149d4 <__lo0bits+0x2a>
 80149d0:	2010      	movs	r0, #16
 80149d2:	0c1b      	lsrs	r3, r3, #16
 80149d4:	b2d9      	uxtb	r1, r3
 80149d6:	b909      	cbnz	r1, 80149dc <__lo0bits+0x32>
 80149d8:	3008      	adds	r0, #8
 80149da:	0a1b      	lsrs	r3, r3, #8
 80149dc:	0719      	lsls	r1, r3, #28
 80149de:	bf04      	itt	eq
 80149e0:	091b      	lsreq	r3, r3, #4
 80149e2:	3004      	addeq	r0, #4
 80149e4:	0799      	lsls	r1, r3, #30
 80149e6:	bf04      	itt	eq
 80149e8:	089b      	lsreq	r3, r3, #2
 80149ea:	3002      	addeq	r0, #2
 80149ec:	07d9      	lsls	r1, r3, #31
 80149ee:	d403      	bmi.n	80149f8 <__lo0bits+0x4e>
 80149f0:	085b      	lsrs	r3, r3, #1
 80149f2:	f100 0001 	add.w	r0, r0, #1
 80149f6:	d003      	beq.n	8014a00 <__lo0bits+0x56>
 80149f8:	6013      	str	r3, [r2, #0]
 80149fa:	4770      	bx	lr
 80149fc:	2000      	movs	r0, #0
 80149fe:	4770      	bx	lr
 8014a00:	2020      	movs	r0, #32
 8014a02:	4770      	bx	lr

08014a04 <__i2b>:
 8014a04:	b510      	push	{r4, lr}
 8014a06:	460c      	mov	r4, r1
 8014a08:	2101      	movs	r1, #1
 8014a0a:	f7ff febd 	bl	8014788 <_Balloc>
 8014a0e:	4602      	mov	r2, r0
 8014a10:	b928      	cbnz	r0, 8014a1e <__i2b+0x1a>
 8014a12:	f240 1145 	movw	r1, #325	@ 0x145
 8014a16:	4b04      	ldr	r3, [pc, #16]	@ (8014a28 <__i2b+0x24>)
 8014a18:	4804      	ldr	r0, [pc, #16]	@ (8014a2c <__i2b+0x28>)
 8014a1a:	f7fc faef 	bl	8010ffc <__assert_func>
 8014a1e:	2301      	movs	r3, #1
 8014a20:	6144      	str	r4, [r0, #20]
 8014a22:	6103      	str	r3, [r0, #16]
 8014a24:	bd10      	pop	{r4, pc}
 8014a26:	bf00      	nop
 8014a28:	080169ba 	.word	0x080169ba
 8014a2c:	08016a2b 	.word	0x08016a2b

08014a30 <__multiply>:
 8014a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a34:	4617      	mov	r7, r2
 8014a36:	690a      	ldr	r2, [r1, #16]
 8014a38:	693b      	ldr	r3, [r7, #16]
 8014a3a:	4689      	mov	r9, r1
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	bfa2      	ittt	ge
 8014a40:	463b      	movge	r3, r7
 8014a42:	460f      	movge	r7, r1
 8014a44:	4699      	movge	r9, r3
 8014a46:	693d      	ldr	r5, [r7, #16]
 8014a48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	6879      	ldr	r1, [r7, #4]
 8014a50:	eb05 060a 	add.w	r6, r5, sl
 8014a54:	42b3      	cmp	r3, r6
 8014a56:	b085      	sub	sp, #20
 8014a58:	bfb8      	it	lt
 8014a5a:	3101      	addlt	r1, #1
 8014a5c:	f7ff fe94 	bl	8014788 <_Balloc>
 8014a60:	b930      	cbnz	r0, 8014a70 <__multiply+0x40>
 8014a62:	4602      	mov	r2, r0
 8014a64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014a68:	4b40      	ldr	r3, [pc, #256]	@ (8014b6c <__multiply+0x13c>)
 8014a6a:	4841      	ldr	r0, [pc, #260]	@ (8014b70 <__multiply+0x140>)
 8014a6c:	f7fc fac6 	bl	8010ffc <__assert_func>
 8014a70:	f100 0414 	add.w	r4, r0, #20
 8014a74:	4623      	mov	r3, r4
 8014a76:	2200      	movs	r2, #0
 8014a78:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014a7c:	4573      	cmp	r3, lr
 8014a7e:	d320      	bcc.n	8014ac2 <__multiply+0x92>
 8014a80:	f107 0814 	add.w	r8, r7, #20
 8014a84:	f109 0114 	add.w	r1, r9, #20
 8014a88:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8014a8c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014a90:	9302      	str	r3, [sp, #8]
 8014a92:	1beb      	subs	r3, r5, r7
 8014a94:	3b15      	subs	r3, #21
 8014a96:	f023 0303 	bic.w	r3, r3, #3
 8014a9a:	3304      	adds	r3, #4
 8014a9c:	3715      	adds	r7, #21
 8014a9e:	42bd      	cmp	r5, r7
 8014aa0:	bf38      	it	cc
 8014aa2:	2304      	movcc	r3, #4
 8014aa4:	9301      	str	r3, [sp, #4]
 8014aa6:	9b02      	ldr	r3, [sp, #8]
 8014aa8:	9103      	str	r1, [sp, #12]
 8014aaa:	428b      	cmp	r3, r1
 8014aac:	d80c      	bhi.n	8014ac8 <__multiply+0x98>
 8014aae:	2e00      	cmp	r6, #0
 8014ab0:	dd03      	ble.n	8014aba <__multiply+0x8a>
 8014ab2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d055      	beq.n	8014b66 <__multiply+0x136>
 8014aba:	6106      	str	r6, [r0, #16]
 8014abc:	b005      	add	sp, #20
 8014abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac2:	f843 2b04 	str.w	r2, [r3], #4
 8014ac6:	e7d9      	b.n	8014a7c <__multiply+0x4c>
 8014ac8:	f8b1 a000 	ldrh.w	sl, [r1]
 8014acc:	f1ba 0f00 	cmp.w	sl, #0
 8014ad0:	d01f      	beq.n	8014b12 <__multiply+0xe2>
 8014ad2:	46c4      	mov	ip, r8
 8014ad4:	46a1      	mov	r9, r4
 8014ad6:	2700      	movs	r7, #0
 8014ad8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014adc:	f8d9 3000 	ldr.w	r3, [r9]
 8014ae0:	fa1f fb82 	uxth.w	fp, r2
 8014ae4:	b29b      	uxth	r3, r3
 8014ae6:	fb0a 330b 	mla	r3, sl, fp, r3
 8014aea:	443b      	add	r3, r7
 8014aec:	f8d9 7000 	ldr.w	r7, [r9]
 8014af0:	0c12      	lsrs	r2, r2, #16
 8014af2:	0c3f      	lsrs	r7, r7, #16
 8014af4:	fb0a 7202 	mla	r2, sl, r2, r7
 8014af8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014afc:	b29b      	uxth	r3, r3
 8014afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b02:	4565      	cmp	r5, ip
 8014b04:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014b08:	f849 3b04 	str.w	r3, [r9], #4
 8014b0c:	d8e4      	bhi.n	8014ad8 <__multiply+0xa8>
 8014b0e:	9b01      	ldr	r3, [sp, #4]
 8014b10:	50e7      	str	r7, [r4, r3]
 8014b12:	9b03      	ldr	r3, [sp, #12]
 8014b14:	3104      	adds	r1, #4
 8014b16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014b1a:	f1b9 0f00 	cmp.w	r9, #0
 8014b1e:	d020      	beq.n	8014b62 <__multiply+0x132>
 8014b20:	4647      	mov	r7, r8
 8014b22:	46a4      	mov	ip, r4
 8014b24:	f04f 0a00 	mov.w	sl, #0
 8014b28:	6823      	ldr	r3, [r4, #0]
 8014b2a:	f8b7 b000 	ldrh.w	fp, [r7]
 8014b2e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014b32:	b29b      	uxth	r3, r3
 8014b34:	fb09 220b 	mla	r2, r9, fp, r2
 8014b38:	4452      	add	r2, sl
 8014b3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b3e:	f84c 3b04 	str.w	r3, [ip], #4
 8014b42:	f857 3b04 	ldr.w	r3, [r7], #4
 8014b46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014b4a:	f8bc 3000 	ldrh.w	r3, [ip]
 8014b4e:	42bd      	cmp	r5, r7
 8014b50:	fb09 330a 	mla	r3, r9, sl, r3
 8014b54:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014b58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014b5c:	d8e5      	bhi.n	8014b2a <__multiply+0xfa>
 8014b5e:	9a01      	ldr	r2, [sp, #4]
 8014b60:	50a3      	str	r3, [r4, r2]
 8014b62:	3404      	adds	r4, #4
 8014b64:	e79f      	b.n	8014aa6 <__multiply+0x76>
 8014b66:	3e01      	subs	r6, #1
 8014b68:	e7a1      	b.n	8014aae <__multiply+0x7e>
 8014b6a:	bf00      	nop
 8014b6c:	080169ba 	.word	0x080169ba
 8014b70:	08016a2b 	.word	0x08016a2b

08014b74 <__pow5mult>:
 8014b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b78:	4615      	mov	r5, r2
 8014b7a:	f012 0203 	ands.w	r2, r2, #3
 8014b7e:	4607      	mov	r7, r0
 8014b80:	460e      	mov	r6, r1
 8014b82:	d007      	beq.n	8014b94 <__pow5mult+0x20>
 8014b84:	4c25      	ldr	r4, [pc, #148]	@ (8014c1c <__pow5mult+0xa8>)
 8014b86:	3a01      	subs	r2, #1
 8014b88:	2300      	movs	r3, #0
 8014b8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014b8e:	f7ff fe5d 	bl	801484c <__multadd>
 8014b92:	4606      	mov	r6, r0
 8014b94:	10ad      	asrs	r5, r5, #2
 8014b96:	d03d      	beq.n	8014c14 <__pow5mult+0xa0>
 8014b98:	69fc      	ldr	r4, [r7, #28]
 8014b9a:	b97c      	cbnz	r4, 8014bbc <__pow5mult+0x48>
 8014b9c:	2010      	movs	r0, #16
 8014b9e:	f7fc fa53 	bl	8011048 <malloc>
 8014ba2:	4602      	mov	r2, r0
 8014ba4:	61f8      	str	r0, [r7, #28]
 8014ba6:	b928      	cbnz	r0, 8014bb4 <__pow5mult+0x40>
 8014ba8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014bac:	4b1c      	ldr	r3, [pc, #112]	@ (8014c20 <__pow5mult+0xac>)
 8014bae:	481d      	ldr	r0, [pc, #116]	@ (8014c24 <__pow5mult+0xb0>)
 8014bb0:	f7fc fa24 	bl	8010ffc <__assert_func>
 8014bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014bb8:	6004      	str	r4, [r0, #0]
 8014bba:	60c4      	str	r4, [r0, #12]
 8014bbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014bc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014bc4:	b94c      	cbnz	r4, 8014bda <__pow5mult+0x66>
 8014bc6:	f240 2171 	movw	r1, #625	@ 0x271
 8014bca:	4638      	mov	r0, r7
 8014bcc:	f7ff ff1a 	bl	8014a04 <__i2b>
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	f8c8 0008 	str.w	r0, [r8, #8]
 8014bd8:	6003      	str	r3, [r0, #0]
 8014bda:	f04f 0900 	mov.w	r9, #0
 8014bde:	07eb      	lsls	r3, r5, #31
 8014be0:	d50a      	bpl.n	8014bf8 <__pow5mult+0x84>
 8014be2:	4631      	mov	r1, r6
 8014be4:	4622      	mov	r2, r4
 8014be6:	4638      	mov	r0, r7
 8014be8:	f7ff ff22 	bl	8014a30 <__multiply>
 8014bec:	4680      	mov	r8, r0
 8014bee:	4631      	mov	r1, r6
 8014bf0:	4638      	mov	r0, r7
 8014bf2:	f7ff fe09 	bl	8014808 <_Bfree>
 8014bf6:	4646      	mov	r6, r8
 8014bf8:	106d      	asrs	r5, r5, #1
 8014bfa:	d00b      	beq.n	8014c14 <__pow5mult+0xa0>
 8014bfc:	6820      	ldr	r0, [r4, #0]
 8014bfe:	b938      	cbnz	r0, 8014c10 <__pow5mult+0x9c>
 8014c00:	4622      	mov	r2, r4
 8014c02:	4621      	mov	r1, r4
 8014c04:	4638      	mov	r0, r7
 8014c06:	f7ff ff13 	bl	8014a30 <__multiply>
 8014c0a:	6020      	str	r0, [r4, #0]
 8014c0c:	f8c0 9000 	str.w	r9, [r0]
 8014c10:	4604      	mov	r4, r0
 8014c12:	e7e4      	b.n	8014bde <__pow5mult+0x6a>
 8014c14:	4630      	mov	r0, r6
 8014c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c1a:	bf00      	nop
 8014c1c:	08016bec 	.word	0x08016bec
 8014c20:	080168dc 	.word	0x080168dc
 8014c24:	08016a2b 	.word	0x08016a2b

08014c28 <__lshift>:
 8014c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c2c:	460c      	mov	r4, r1
 8014c2e:	4607      	mov	r7, r0
 8014c30:	4691      	mov	r9, r2
 8014c32:	6923      	ldr	r3, [r4, #16]
 8014c34:	6849      	ldr	r1, [r1, #4]
 8014c36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014c3a:	68a3      	ldr	r3, [r4, #8]
 8014c3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014c40:	f108 0601 	add.w	r6, r8, #1
 8014c44:	42b3      	cmp	r3, r6
 8014c46:	db0b      	blt.n	8014c60 <__lshift+0x38>
 8014c48:	4638      	mov	r0, r7
 8014c4a:	f7ff fd9d 	bl	8014788 <_Balloc>
 8014c4e:	4605      	mov	r5, r0
 8014c50:	b948      	cbnz	r0, 8014c66 <__lshift+0x3e>
 8014c52:	4602      	mov	r2, r0
 8014c54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014c58:	4b27      	ldr	r3, [pc, #156]	@ (8014cf8 <__lshift+0xd0>)
 8014c5a:	4828      	ldr	r0, [pc, #160]	@ (8014cfc <__lshift+0xd4>)
 8014c5c:	f7fc f9ce 	bl	8010ffc <__assert_func>
 8014c60:	3101      	adds	r1, #1
 8014c62:	005b      	lsls	r3, r3, #1
 8014c64:	e7ee      	b.n	8014c44 <__lshift+0x1c>
 8014c66:	2300      	movs	r3, #0
 8014c68:	f100 0114 	add.w	r1, r0, #20
 8014c6c:	f100 0210 	add.w	r2, r0, #16
 8014c70:	4618      	mov	r0, r3
 8014c72:	4553      	cmp	r3, sl
 8014c74:	db33      	blt.n	8014cde <__lshift+0xb6>
 8014c76:	6920      	ldr	r0, [r4, #16]
 8014c78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014c7c:	f104 0314 	add.w	r3, r4, #20
 8014c80:	f019 091f 	ands.w	r9, r9, #31
 8014c84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014c88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014c8c:	d02b      	beq.n	8014ce6 <__lshift+0xbe>
 8014c8e:	468a      	mov	sl, r1
 8014c90:	2200      	movs	r2, #0
 8014c92:	f1c9 0e20 	rsb	lr, r9, #32
 8014c96:	6818      	ldr	r0, [r3, #0]
 8014c98:	fa00 f009 	lsl.w	r0, r0, r9
 8014c9c:	4310      	orrs	r0, r2
 8014c9e:	f84a 0b04 	str.w	r0, [sl], #4
 8014ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ca6:	459c      	cmp	ip, r3
 8014ca8:	fa22 f20e 	lsr.w	r2, r2, lr
 8014cac:	d8f3      	bhi.n	8014c96 <__lshift+0x6e>
 8014cae:	ebac 0304 	sub.w	r3, ip, r4
 8014cb2:	3b15      	subs	r3, #21
 8014cb4:	f023 0303 	bic.w	r3, r3, #3
 8014cb8:	3304      	adds	r3, #4
 8014cba:	f104 0015 	add.w	r0, r4, #21
 8014cbe:	4560      	cmp	r0, ip
 8014cc0:	bf88      	it	hi
 8014cc2:	2304      	movhi	r3, #4
 8014cc4:	50ca      	str	r2, [r1, r3]
 8014cc6:	b10a      	cbz	r2, 8014ccc <__lshift+0xa4>
 8014cc8:	f108 0602 	add.w	r6, r8, #2
 8014ccc:	3e01      	subs	r6, #1
 8014cce:	4638      	mov	r0, r7
 8014cd0:	4621      	mov	r1, r4
 8014cd2:	612e      	str	r6, [r5, #16]
 8014cd4:	f7ff fd98 	bl	8014808 <_Bfree>
 8014cd8:	4628      	mov	r0, r5
 8014cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cde:	f842 0f04 	str.w	r0, [r2, #4]!
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	e7c5      	b.n	8014c72 <__lshift+0x4a>
 8014ce6:	3904      	subs	r1, #4
 8014ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cec:	459c      	cmp	ip, r3
 8014cee:	f841 2f04 	str.w	r2, [r1, #4]!
 8014cf2:	d8f9      	bhi.n	8014ce8 <__lshift+0xc0>
 8014cf4:	e7ea      	b.n	8014ccc <__lshift+0xa4>
 8014cf6:	bf00      	nop
 8014cf8:	080169ba 	.word	0x080169ba
 8014cfc:	08016a2b 	.word	0x08016a2b

08014d00 <__mcmp>:
 8014d00:	4603      	mov	r3, r0
 8014d02:	690a      	ldr	r2, [r1, #16]
 8014d04:	6900      	ldr	r0, [r0, #16]
 8014d06:	b530      	push	{r4, r5, lr}
 8014d08:	1a80      	subs	r0, r0, r2
 8014d0a:	d10e      	bne.n	8014d2a <__mcmp+0x2a>
 8014d0c:	3314      	adds	r3, #20
 8014d0e:	3114      	adds	r1, #20
 8014d10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014d14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014d18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014d1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014d20:	4295      	cmp	r5, r2
 8014d22:	d003      	beq.n	8014d2c <__mcmp+0x2c>
 8014d24:	d205      	bcs.n	8014d32 <__mcmp+0x32>
 8014d26:	f04f 30ff 	mov.w	r0, #4294967295
 8014d2a:	bd30      	pop	{r4, r5, pc}
 8014d2c:	42a3      	cmp	r3, r4
 8014d2e:	d3f3      	bcc.n	8014d18 <__mcmp+0x18>
 8014d30:	e7fb      	b.n	8014d2a <__mcmp+0x2a>
 8014d32:	2001      	movs	r0, #1
 8014d34:	e7f9      	b.n	8014d2a <__mcmp+0x2a>
	...

08014d38 <__mdiff>:
 8014d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d3c:	4689      	mov	r9, r1
 8014d3e:	4606      	mov	r6, r0
 8014d40:	4611      	mov	r1, r2
 8014d42:	4648      	mov	r0, r9
 8014d44:	4614      	mov	r4, r2
 8014d46:	f7ff ffdb 	bl	8014d00 <__mcmp>
 8014d4a:	1e05      	subs	r5, r0, #0
 8014d4c:	d112      	bne.n	8014d74 <__mdiff+0x3c>
 8014d4e:	4629      	mov	r1, r5
 8014d50:	4630      	mov	r0, r6
 8014d52:	f7ff fd19 	bl	8014788 <_Balloc>
 8014d56:	4602      	mov	r2, r0
 8014d58:	b928      	cbnz	r0, 8014d66 <__mdiff+0x2e>
 8014d5a:	f240 2137 	movw	r1, #567	@ 0x237
 8014d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8014e58 <__mdiff+0x120>)
 8014d60:	483e      	ldr	r0, [pc, #248]	@ (8014e5c <__mdiff+0x124>)
 8014d62:	f7fc f94b 	bl	8010ffc <__assert_func>
 8014d66:	2301      	movs	r3, #1
 8014d68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014d6c:	4610      	mov	r0, r2
 8014d6e:	b003      	add	sp, #12
 8014d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d74:	bfbc      	itt	lt
 8014d76:	464b      	movlt	r3, r9
 8014d78:	46a1      	movlt	r9, r4
 8014d7a:	4630      	mov	r0, r6
 8014d7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014d80:	bfba      	itte	lt
 8014d82:	461c      	movlt	r4, r3
 8014d84:	2501      	movlt	r5, #1
 8014d86:	2500      	movge	r5, #0
 8014d88:	f7ff fcfe 	bl	8014788 <_Balloc>
 8014d8c:	4602      	mov	r2, r0
 8014d8e:	b918      	cbnz	r0, 8014d98 <__mdiff+0x60>
 8014d90:	f240 2145 	movw	r1, #581	@ 0x245
 8014d94:	4b30      	ldr	r3, [pc, #192]	@ (8014e58 <__mdiff+0x120>)
 8014d96:	e7e3      	b.n	8014d60 <__mdiff+0x28>
 8014d98:	f100 0b14 	add.w	fp, r0, #20
 8014d9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014da0:	f109 0310 	add.w	r3, r9, #16
 8014da4:	60c5      	str	r5, [r0, #12]
 8014da6:	f04f 0c00 	mov.w	ip, #0
 8014daa:	f109 0514 	add.w	r5, r9, #20
 8014dae:	46d9      	mov	r9, fp
 8014db0:	6926      	ldr	r6, [r4, #16]
 8014db2:	f104 0e14 	add.w	lr, r4, #20
 8014db6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014dba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014dbe:	9301      	str	r3, [sp, #4]
 8014dc0:	9b01      	ldr	r3, [sp, #4]
 8014dc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014dc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014dca:	b281      	uxth	r1, r0
 8014dcc:	9301      	str	r3, [sp, #4]
 8014dce:	fa1f f38a 	uxth.w	r3, sl
 8014dd2:	1a5b      	subs	r3, r3, r1
 8014dd4:	0c00      	lsrs	r0, r0, #16
 8014dd6:	4463      	add	r3, ip
 8014dd8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014ddc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014de0:	b29b      	uxth	r3, r3
 8014de2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014de6:	4576      	cmp	r6, lr
 8014de8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014dec:	f849 3b04 	str.w	r3, [r9], #4
 8014df0:	d8e6      	bhi.n	8014dc0 <__mdiff+0x88>
 8014df2:	1b33      	subs	r3, r6, r4
 8014df4:	3b15      	subs	r3, #21
 8014df6:	f023 0303 	bic.w	r3, r3, #3
 8014dfa:	3415      	adds	r4, #21
 8014dfc:	3304      	adds	r3, #4
 8014dfe:	42a6      	cmp	r6, r4
 8014e00:	bf38      	it	cc
 8014e02:	2304      	movcc	r3, #4
 8014e04:	441d      	add	r5, r3
 8014e06:	445b      	add	r3, fp
 8014e08:	461e      	mov	r6, r3
 8014e0a:	462c      	mov	r4, r5
 8014e0c:	4544      	cmp	r4, r8
 8014e0e:	d30e      	bcc.n	8014e2e <__mdiff+0xf6>
 8014e10:	f108 0103 	add.w	r1, r8, #3
 8014e14:	1b49      	subs	r1, r1, r5
 8014e16:	f021 0103 	bic.w	r1, r1, #3
 8014e1a:	3d03      	subs	r5, #3
 8014e1c:	45a8      	cmp	r8, r5
 8014e1e:	bf38      	it	cc
 8014e20:	2100      	movcc	r1, #0
 8014e22:	440b      	add	r3, r1
 8014e24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014e28:	b199      	cbz	r1, 8014e52 <__mdiff+0x11a>
 8014e2a:	6117      	str	r7, [r2, #16]
 8014e2c:	e79e      	b.n	8014d6c <__mdiff+0x34>
 8014e2e:	46e6      	mov	lr, ip
 8014e30:	f854 1b04 	ldr.w	r1, [r4], #4
 8014e34:	fa1f fc81 	uxth.w	ip, r1
 8014e38:	44f4      	add	ip, lr
 8014e3a:	0c08      	lsrs	r0, r1, #16
 8014e3c:	4471      	add	r1, lr
 8014e3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014e42:	b289      	uxth	r1, r1
 8014e44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014e48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014e4c:	f846 1b04 	str.w	r1, [r6], #4
 8014e50:	e7dc      	b.n	8014e0c <__mdiff+0xd4>
 8014e52:	3f01      	subs	r7, #1
 8014e54:	e7e6      	b.n	8014e24 <__mdiff+0xec>
 8014e56:	bf00      	nop
 8014e58:	080169ba 	.word	0x080169ba
 8014e5c:	08016a2b 	.word	0x08016a2b

08014e60 <__ulp>:
 8014e60:	4b0e      	ldr	r3, [pc, #56]	@ (8014e9c <__ulp+0x3c>)
 8014e62:	400b      	ands	r3, r1
 8014e64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	dc08      	bgt.n	8014e7e <__ulp+0x1e>
 8014e6c:	425b      	negs	r3, r3
 8014e6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014e72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014e76:	da04      	bge.n	8014e82 <__ulp+0x22>
 8014e78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014e7c:	4113      	asrs	r3, r2
 8014e7e:	2200      	movs	r2, #0
 8014e80:	e008      	b.n	8014e94 <__ulp+0x34>
 8014e82:	f1a2 0314 	sub.w	r3, r2, #20
 8014e86:	2b1e      	cmp	r3, #30
 8014e88:	bfd6      	itet	le
 8014e8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014e8e:	2201      	movgt	r2, #1
 8014e90:	40da      	lsrle	r2, r3
 8014e92:	2300      	movs	r3, #0
 8014e94:	4619      	mov	r1, r3
 8014e96:	4610      	mov	r0, r2
 8014e98:	4770      	bx	lr
 8014e9a:	bf00      	nop
 8014e9c:	7ff00000 	.word	0x7ff00000

08014ea0 <__b2d>:
 8014ea0:	6902      	ldr	r2, [r0, #16]
 8014ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ea4:	f100 0614 	add.w	r6, r0, #20
 8014ea8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8014eac:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8014eb0:	4f1e      	ldr	r7, [pc, #120]	@ (8014f2c <__b2d+0x8c>)
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	f7ff fd5a 	bl	801496c <__hi0bits>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	f1c0 0020 	rsb	r0, r0, #32
 8014ebe:	2b0a      	cmp	r3, #10
 8014ec0:	f1a2 0504 	sub.w	r5, r2, #4
 8014ec4:	6008      	str	r0, [r1, #0]
 8014ec6:	dc12      	bgt.n	8014eee <__b2d+0x4e>
 8014ec8:	42ae      	cmp	r6, r5
 8014eca:	bf2c      	ite	cs
 8014ecc:	2200      	movcs	r2, #0
 8014ece:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8014ed2:	f1c3 0c0b 	rsb	ip, r3, #11
 8014ed6:	3315      	adds	r3, #21
 8014ed8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8014edc:	fa04 f303 	lsl.w	r3, r4, r3
 8014ee0:	fa22 f20c 	lsr.w	r2, r2, ip
 8014ee4:	ea4e 0107 	orr.w	r1, lr, r7
 8014ee8:	431a      	orrs	r2, r3
 8014eea:	4610      	mov	r0, r2
 8014eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eee:	42ae      	cmp	r6, r5
 8014ef0:	bf36      	itet	cc
 8014ef2:	f1a2 0508 	subcc.w	r5, r2, #8
 8014ef6:	2200      	movcs	r2, #0
 8014ef8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8014efc:	3b0b      	subs	r3, #11
 8014efe:	d012      	beq.n	8014f26 <__b2d+0x86>
 8014f00:	f1c3 0720 	rsb	r7, r3, #32
 8014f04:	fa22 f107 	lsr.w	r1, r2, r7
 8014f08:	409c      	lsls	r4, r3
 8014f0a:	430c      	orrs	r4, r1
 8014f0c:	42b5      	cmp	r5, r6
 8014f0e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8014f12:	bf94      	ite	ls
 8014f14:	2400      	movls	r4, #0
 8014f16:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8014f1a:	409a      	lsls	r2, r3
 8014f1c:	40fc      	lsrs	r4, r7
 8014f1e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014f22:	4322      	orrs	r2, r4
 8014f24:	e7e1      	b.n	8014eea <__b2d+0x4a>
 8014f26:	ea44 0107 	orr.w	r1, r4, r7
 8014f2a:	e7de      	b.n	8014eea <__b2d+0x4a>
 8014f2c:	3ff00000 	.word	0x3ff00000

08014f30 <__d2b>:
 8014f30:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8014f34:	2101      	movs	r1, #1
 8014f36:	4690      	mov	r8, r2
 8014f38:	4699      	mov	r9, r3
 8014f3a:	9e08      	ldr	r6, [sp, #32]
 8014f3c:	f7ff fc24 	bl	8014788 <_Balloc>
 8014f40:	4604      	mov	r4, r0
 8014f42:	b930      	cbnz	r0, 8014f52 <__d2b+0x22>
 8014f44:	4602      	mov	r2, r0
 8014f46:	f240 310f 	movw	r1, #783	@ 0x30f
 8014f4a:	4b23      	ldr	r3, [pc, #140]	@ (8014fd8 <__d2b+0xa8>)
 8014f4c:	4823      	ldr	r0, [pc, #140]	@ (8014fdc <__d2b+0xac>)
 8014f4e:	f7fc f855 	bl	8010ffc <__assert_func>
 8014f52:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014f56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014f5a:	b10d      	cbz	r5, 8014f60 <__d2b+0x30>
 8014f5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014f60:	9301      	str	r3, [sp, #4]
 8014f62:	f1b8 0300 	subs.w	r3, r8, #0
 8014f66:	d024      	beq.n	8014fb2 <__d2b+0x82>
 8014f68:	4668      	mov	r0, sp
 8014f6a:	9300      	str	r3, [sp, #0]
 8014f6c:	f7ff fd1d 	bl	80149aa <__lo0bits>
 8014f70:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014f74:	b1d8      	cbz	r0, 8014fae <__d2b+0x7e>
 8014f76:	f1c0 0320 	rsb	r3, r0, #32
 8014f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8014f7e:	430b      	orrs	r3, r1
 8014f80:	40c2      	lsrs	r2, r0
 8014f82:	6163      	str	r3, [r4, #20]
 8014f84:	9201      	str	r2, [sp, #4]
 8014f86:	9b01      	ldr	r3, [sp, #4]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	bf0c      	ite	eq
 8014f8c:	2201      	moveq	r2, #1
 8014f8e:	2202      	movne	r2, #2
 8014f90:	61a3      	str	r3, [r4, #24]
 8014f92:	6122      	str	r2, [r4, #16]
 8014f94:	b1ad      	cbz	r5, 8014fc2 <__d2b+0x92>
 8014f96:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014f9a:	4405      	add	r5, r0
 8014f9c:	6035      	str	r5, [r6, #0]
 8014f9e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014fa4:	6018      	str	r0, [r3, #0]
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	b002      	add	sp, #8
 8014faa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8014fae:	6161      	str	r1, [r4, #20]
 8014fb0:	e7e9      	b.n	8014f86 <__d2b+0x56>
 8014fb2:	a801      	add	r0, sp, #4
 8014fb4:	f7ff fcf9 	bl	80149aa <__lo0bits>
 8014fb8:	9b01      	ldr	r3, [sp, #4]
 8014fba:	2201      	movs	r2, #1
 8014fbc:	6163      	str	r3, [r4, #20]
 8014fbe:	3020      	adds	r0, #32
 8014fc0:	e7e7      	b.n	8014f92 <__d2b+0x62>
 8014fc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014fc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014fca:	6030      	str	r0, [r6, #0]
 8014fcc:	6918      	ldr	r0, [r3, #16]
 8014fce:	f7ff fccd 	bl	801496c <__hi0bits>
 8014fd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014fd6:	e7e4      	b.n	8014fa2 <__d2b+0x72>
 8014fd8:	080169ba 	.word	0x080169ba
 8014fdc:	08016a2b 	.word	0x08016a2b

08014fe0 <__ratio>:
 8014fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fe4:	b085      	sub	sp, #20
 8014fe6:	e9cd 1000 	strd	r1, r0, [sp]
 8014fea:	a902      	add	r1, sp, #8
 8014fec:	f7ff ff58 	bl	8014ea0 <__b2d>
 8014ff0:	468b      	mov	fp, r1
 8014ff2:	4606      	mov	r6, r0
 8014ff4:	460f      	mov	r7, r1
 8014ff6:	9800      	ldr	r0, [sp, #0]
 8014ff8:	a903      	add	r1, sp, #12
 8014ffa:	f7ff ff51 	bl	8014ea0 <__b2d>
 8014ffe:	460d      	mov	r5, r1
 8015000:	9b01      	ldr	r3, [sp, #4]
 8015002:	4689      	mov	r9, r1
 8015004:	6919      	ldr	r1, [r3, #16]
 8015006:	9b00      	ldr	r3, [sp, #0]
 8015008:	4604      	mov	r4, r0
 801500a:	691b      	ldr	r3, [r3, #16]
 801500c:	4630      	mov	r0, r6
 801500e:	1ac9      	subs	r1, r1, r3
 8015010:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015014:	1a9b      	subs	r3, r3, r2
 8015016:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801501a:	2b00      	cmp	r3, #0
 801501c:	bfcd      	iteet	gt
 801501e:	463a      	movgt	r2, r7
 8015020:	462a      	movle	r2, r5
 8015022:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015026:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801502a:	bfd8      	it	le
 801502c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8015030:	464b      	mov	r3, r9
 8015032:	4622      	mov	r2, r4
 8015034:	4659      	mov	r1, fp
 8015036:	f7eb fb83 	bl	8000740 <__aeabi_ddiv>
 801503a:	b005      	add	sp, #20
 801503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015040 <__copybits>:
 8015040:	3901      	subs	r1, #1
 8015042:	b570      	push	{r4, r5, r6, lr}
 8015044:	1149      	asrs	r1, r1, #5
 8015046:	6914      	ldr	r4, [r2, #16]
 8015048:	3101      	adds	r1, #1
 801504a:	f102 0314 	add.w	r3, r2, #20
 801504e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015052:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015056:	1f05      	subs	r5, r0, #4
 8015058:	42a3      	cmp	r3, r4
 801505a:	d30c      	bcc.n	8015076 <__copybits+0x36>
 801505c:	1aa3      	subs	r3, r4, r2
 801505e:	3b11      	subs	r3, #17
 8015060:	f023 0303 	bic.w	r3, r3, #3
 8015064:	3211      	adds	r2, #17
 8015066:	42a2      	cmp	r2, r4
 8015068:	bf88      	it	hi
 801506a:	2300      	movhi	r3, #0
 801506c:	4418      	add	r0, r3
 801506e:	2300      	movs	r3, #0
 8015070:	4288      	cmp	r0, r1
 8015072:	d305      	bcc.n	8015080 <__copybits+0x40>
 8015074:	bd70      	pop	{r4, r5, r6, pc}
 8015076:	f853 6b04 	ldr.w	r6, [r3], #4
 801507a:	f845 6f04 	str.w	r6, [r5, #4]!
 801507e:	e7eb      	b.n	8015058 <__copybits+0x18>
 8015080:	f840 3b04 	str.w	r3, [r0], #4
 8015084:	e7f4      	b.n	8015070 <__copybits+0x30>

08015086 <__any_on>:
 8015086:	f100 0214 	add.w	r2, r0, #20
 801508a:	6900      	ldr	r0, [r0, #16]
 801508c:	114b      	asrs	r3, r1, #5
 801508e:	4298      	cmp	r0, r3
 8015090:	b510      	push	{r4, lr}
 8015092:	db11      	blt.n	80150b8 <__any_on+0x32>
 8015094:	dd0a      	ble.n	80150ac <__any_on+0x26>
 8015096:	f011 011f 	ands.w	r1, r1, #31
 801509a:	d007      	beq.n	80150ac <__any_on+0x26>
 801509c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80150a0:	fa24 f001 	lsr.w	r0, r4, r1
 80150a4:	fa00 f101 	lsl.w	r1, r0, r1
 80150a8:	428c      	cmp	r4, r1
 80150aa:	d10b      	bne.n	80150c4 <__any_on+0x3e>
 80150ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80150b0:	4293      	cmp	r3, r2
 80150b2:	d803      	bhi.n	80150bc <__any_on+0x36>
 80150b4:	2000      	movs	r0, #0
 80150b6:	bd10      	pop	{r4, pc}
 80150b8:	4603      	mov	r3, r0
 80150ba:	e7f7      	b.n	80150ac <__any_on+0x26>
 80150bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80150c0:	2900      	cmp	r1, #0
 80150c2:	d0f5      	beq.n	80150b0 <__any_on+0x2a>
 80150c4:	2001      	movs	r0, #1
 80150c6:	e7f6      	b.n	80150b6 <__any_on+0x30>

080150c8 <__ascii_wctomb>:
 80150c8:	4603      	mov	r3, r0
 80150ca:	4608      	mov	r0, r1
 80150cc:	b141      	cbz	r1, 80150e0 <__ascii_wctomb+0x18>
 80150ce:	2aff      	cmp	r2, #255	@ 0xff
 80150d0:	d904      	bls.n	80150dc <__ascii_wctomb+0x14>
 80150d2:	228a      	movs	r2, #138	@ 0x8a
 80150d4:	f04f 30ff 	mov.w	r0, #4294967295
 80150d8:	601a      	str	r2, [r3, #0]
 80150da:	4770      	bx	lr
 80150dc:	2001      	movs	r0, #1
 80150de:	700a      	strb	r2, [r1, #0]
 80150e0:	4770      	bx	lr

080150e2 <__ssputs_r>:
 80150e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150e6:	461f      	mov	r7, r3
 80150e8:	688e      	ldr	r6, [r1, #8]
 80150ea:	4682      	mov	sl, r0
 80150ec:	42be      	cmp	r6, r7
 80150ee:	460c      	mov	r4, r1
 80150f0:	4690      	mov	r8, r2
 80150f2:	680b      	ldr	r3, [r1, #0]
 80150f4:	d82d      	bhi.n	8015152 <__ssputs_r+0x70>
 80150f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80150fa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80150fe:	d026      	beq.n	801514e <__ssputs_r+0x6c>
 8015100:	6965      	ldr	r5, [r4, #20]
 8015102:	6909      	ldr	r1, [r1, #16]
 8015104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015108:	eba3 0901 	sub.w	r9, r3, r1
 801510c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015110:	1c7b      	adds	r3, r7, #1
 8015112:	444b      	add	r3, r9
 8015114:	106d      	asrs	r5, r5, #1
 8015116:	429d      	cmp	r5, r3
 8015118:	bf38      	it	cc
 801511a:	461d      	movcc	r5, r3
 801511c:	0553      	lsls	r3, r2, #21
 801511e:	d527      	bpl.n	8015170 <__ssputs_r+0x8e>
 8015120:	4629      	mov	r1, r5
 8015122:	f7fb ffc3 	bl	80110ac <_malloc_r>
 8015126:	4606      	mov	r6, r0
 8015128:	b360      	cbz	r0, 8015184 <__ssputs_r+0xa2>
 801512a:	464a      	mov	r2, r9
 801512c:	6921      	ldr	r1, [r4, #16]
 801512e:	f7fe f918 	bl	8013362 <memcpy>
 8015132:	89a3      	ldrh	r3, [r4, #12]
 8015134:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801513c:	81a3      	strh	r3, [r4, #12]
 801513e:	6126      	str	r6, [r4, #16]
 8015140:	444e      	add	r6, r9
 8015142:	6026      	str	r6, [r4, #0]
 8015144:	463e      	mov	r6, r7
 8015146:	6165      	str	r5, [r4, #20]
 8015148:	eba5 0509 	sub.w	r5, r5, r9
 801514c:	60a5      	str	r5, [r4, #8]
 801514e:	42be      	cmp	r6, r7
 8015150:	d900      	bls.n	8015154 <__ssputs_r+0x72>
 8015152:	463e      	mov	r6, r7
 8015154:	4632      	mov	r2, r6
 8015156:	4641      	mov	r1, r8
 8015158:	6820      	ldr	r0, [r4, #0]
 801515a:	f000 fb62 	bl	8015822 <memmove>
 801515e:	2000      	movs	r0, #0
 8015160:	68a3      	ldr	r3, [r4, #8]
 8015162:	1b9b      	subs	r3, r3, r6
 8015164:	60a3      	str	r3, [r4, #8]
 8015166:	6823      	ldr	r3, [r4, #0]
 8015168:	4433      	add	r3, r6
 801516a:	6023      	str	r3, [r4, #0]
 801516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015170:	462a      	mov	r2, r5
 8015172:	f000 fbeb 	bl	801594c <_realloc_r>
 8015176:	4606      	mov	r6, r0
 8015178:	2800      	cmp	r0, #0
 801517a:	d1e0      	bne.n	801513e <__ssputs_r+0x5c>
 801517c:	4650      	mov	r0, sl
 801517e:	6921      	ldr	r1, [r4, #16]
 8015180:	f7fe ff6e 	bl	8014060 <_free_r>
 8015184:	230c      	movs	r3, #12
 8015186:	f8ca 3000 	str.w	r3, [sl]
 801518a:	89a3      	ldrh	r3, [r4, #12]
 801518c:	f04f 30ff 	mov.w	r0, #4294967295
 8015190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015194:	81a3      	strh	r3, [r4, #12]
 8015196:	e7e9      	b.n	801516c <__ssputs_r+0x8a>

08015198 <_svfiprintf_r>:
 8015198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801519c:	4698      	mov	r8, r3
 801519e:	898b      	ldrh	r3, [r1, #12]
 80151a0:	4607      	mov	r7, r0
 80151a2:	061b      	lsls	r3, r3, #24
 80151a4:	460d      	mov	r5, r1
 80151a6:	4614      	mov	r4, r2
 80151a8:	b09d      	sub	sp, #116	@ 0x74
 80151aa:	d510      	bpl.n	80151ce <_svfiprintf_r+0x36>
 80151ac:	690b      	ldr	r3, [r1, #16]
 80151ae:	b973      	cbnz	r3, 80151ce <_svfiprintf_r+0x36>
 80151b0:	2140      	movs	r1, #64	@ 0x40
 80151b2:	f7fb ff7b 	bl	80110ac <_malloc_r>
 80151b6:	6028      	str	r0, [r5, #0]
 80151b8:	6128      	str	r0, [r5, #16]
 80151ba:	b930      	cbnz	r0, 80151ca <_svfiprintf_r+0x32>
 80151bc:	230c      	movs	r3, #12
 80151be:	603b      	str	r3, [r7, #0]
 80151c0:	f04f 30ff 	mov.w	r0, #4294967295
 80151c4:	b01d      	add	sp, #116	@ 0x74
 80151c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ca:	2340      	movs	r3, #64	@ 0x40
 80151cc:	616b      	str	r3, [r5, #20]
 80151ce:	2300      	movs	r3, #0
 80151d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80151d2:	2320      	movs	r3, #32
 80151d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80151d8:	2330      	movs	r3, #48	@ 0x30
 80151da:	f04f 0901 	mov.w	r9, #1
 80151de:	f8cd 800c 	str.w	r8, [sp, #12]
 80151e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 801537c <_svfiprintf_r+0x1e4>
 80151e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80151ea:	4623      	mov	r3, r4
 80151ec:	469a      	mov	sl, r3
 80151ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151f2:	b10a      	cbz	r2, 80151f8 <_svfiprintf_r+0x60>
 80151f4:	2a25      	cmp	r2, #37	@ 0x25
 80151f6:	d1f9      	bne.n	80151ec <_svfiprintf_r+0x54>
 80151f8:	ebba 0b04 	subs.w	fp, sl, r4
 80151fc:	d00b      	beq.n	8015216 <_svfiprintf_r+0x7e>
 80151fe:	465b      	mov	r3, fp
 8015200:	4622      	mov	r2, r4
 8015202:	4629      	mov	r1, r5
 8015204:	4638      	mov	r0, r7
 8015206:	f7ff ff6c 	bl	80150e2 <__ssputs_r>
 801520a:	3001      	adds	r0, #1
 801520c:	f000 80a7 	beq.w	801535e <_svfiprintf_r+0x1c6>
 8015210:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015212:	445a      	add	r2, fp
 8015214:	9209      	str	r2, [sp, #36]	@ 0x24
 8015216:	f89a 3000 	ldrb.w	r3, [sl]
 801521a:	2b00      	cmp	r3, #0
 801521c:	f000 809f 	beq.w	801535e <_svfiprintf_r+0x1c6>
 8015220:	2300      	movs	r3, #0
 8015222:	f04f 32ff 	mov.w	r2, #4294967295
 8015226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801522a:	f10a 0a01 	add.w	sl, sl, #1
 801522e:	9304      	str	r3, [sp, #16]
 8015230:	9307      	str	r3, [sp, #28]
 8015232:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015236:	931a      	str	r3, [sp, #104]	@ 0x68
 8015238:	4654      	mov	r4, sl
 801523a:	2205      	movs	r2, #5
 801523c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015240:	484e      	ldr	r0, [pc, #312]	@ (801537c <_svfiprintf_r+0x1e4>)
 8015242:	f7fe f880 	bl	8013346 <memchr>
 8015246:	9a04      	ldr	r2, [sp, #16]
 8015248:	b9d8      	cbnz	r0, 8015282 <_svfiprintf_r+0xea>
 801524a:	06d0      	lsls	r0, r2, #27
 801524c:	bf44      	itt	mi
 801524e:	2320      	movmi	r3, #32
 8015250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015254:	0711      	lsls	r1, r2, #28
 8015256:	bf44      	itt	mi
 8015258:	232b      	movmi	r3, #43	@ 0x2b
 801525a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801525e:	f89a 3000 	ldrb.w	r3, [sl]
 8015262:	2b2a      	cmp	r3, #42	@ 0x2a
 8015264:	d015      	beq.n	8015292 <_svfiprintf_r+0xfa>
 8015266:	4654      	mov	r4, sl
 8015268:	2000      	movs	r0, #0
 801526a:	f04f 0c0a 	mov.w	ip, #10
 801526e:	9a07      	ldr	r2, [sp, #28]
 8015270:	4621      	mov	r1, r4
 8015272:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015276:	3b30      	subs	r3, #48	@ 0x30
 8015278:	2b09      	cmp	r3, #9
 801527a:	d94b      	bls.n	8015314 <_svfiprintf_r+0x17c>
 801527c:	b1b0      	cbz	r0, 80152ac <_svfiprintf_r+0x114>
 801527e:	9207      	str	r2, [sp, #28]
 8015280:	e014      	b.n	80152ac <_svfiprintf_r+0x114>
 8015282:	eba0 0308 	sub.w	r3, r0, r8
 8015286:	fa09 f303 	lsl.w	r3, r9, r3
 801528a:	4313      	orrs	r3, r2
 801528c:	46a2      	mov	sl, r4
 801528e:	9304      	str	r3, [sp, #16]
 8015290:	e7d2      	b.n	8015238 <_svfiprintf_r+0xa0>
 8015292:	9b03      	ldr	r3, [sp, #12]
 8015294:	1d19      	adds	r1, r3, #4
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	9103      	str	r1, [sp, #12]
 801529a:	2b00      	cmp	r3, #0
 801529c:	bfbb      	ittet	lt
 801529e:	425b      	neglt	r3, r3
 80152a0:	f042 0202 	orrlt.w	r2, r2, #2
 80152a4:	9307      	strge	r3, [sp, #28]
 80152a6:	9307      	strlt	r3, [sp, #28]
 80152a8:	bfb8      	it	lt
 80152aa:	9204      	strlt	r2, [sp, #16]
 80152ac:	7823      	ldrb	r3, [r4, #0]
 80152ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80152b0:	d10a      	bne.n	80152c8 <_svfiprintf_r+0x130>
 80152b2:	7863      	ldrb	r3, [r4, #1]
 80152b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80152b6:	d132      	bne.n	801531e <_svfiprintf_r+0x186>
 80152b8:	9b03      	ldr	r3, [sp, #12]
 80152ba:	3402      	adds	r4, #2
 80152bc:	1d1a      	adds	r2, r3, #4
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	9203      	str	r2, [sp, #12]
 80152c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80152c6:	9305      	str	r3, [sp, #20]
 80152c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8015380 <_svfiprintf_r+0x1e8>
 80152cc:	2203      	movs	r2, #3
 80152ce:	4650      	mov	r0, sl
 80152d0:	7821      	ldrb	r1, [r4, #0]
 80152d2:	f7fe f838 	bl	8013346 <memchr>
 80152d6:	b138      	cbz	r0, 80152e8 <_svfiprintf_r+0x150>
 80152d8:	2240      	movs	r2, #64	@ 0x40
 80152da:	9b04      	ldr	r3, [sp, #16]
 80152dc:	eba0 000a 	sub.w	r0, r0, sl
 80152e0:	4082      	lsls	r2, r0
 80152e2:	4313      	orrs	r3, r2
 80152e4:	3401      	adds	r4, #1
 80152e6:	9304      	str	r3, [sp, #16]
 80152e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152ec:	2206      	movs	r2, #6
 80152ee:	4825      	ldr	r0, [pc, #148]	@ (8015384 <_svfiprintf_r+0x1ec>)
 80152f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80152f4:	f7fe f827 	bl	8013346 <memchr>
 80152f8:	2800      	cmp	r0, #0
 80152fa:	d036      	beq.n	801536a <_svfiprintf_r+0x1d2>
 80152fc:	4b22      	ldr	r3, [pc, #136]	@ (8015388 <_svfiprintf_r+0x1f0>)
 80152fe:	bb1b      	cbnz	r3, 8015348 <_svfiprintf_r+0x1b0>
 8015300:	9b03      	ldr	r3, [sp, #12]
 8015302:	3307      	adds	r3, #7
 8015304:	f023 0307 	bic.w	r3, r3, #7
 8015308:	3308      	adds	r3, #8
 801530a:	9303      	str	r3, [sp, #12]
 801530c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801530e:	4433      	add	r3, r6
 8015310:	9309      	str	r3, [sp, #36]	@ 0x24
 8015312:	e76a      	b.n	80151ea <_svfiprintf_r+0x52>
 8015314:	460c      	mov	r4, r1
 8015316:	2001      	movs	r0, #1
 8015318:	fb0c 3202 	mla	r2, ip, r2, r3
 801531c:	e7a8      	b.n	8015270 <_svfiprintf_r+0xd8>
 801531e:	2300      	movs	r3, #0
 8015320:	f04f 0c0a 	mov.w	ip, #10
 8015324:	4619      	mov	r1, r3
 8015326:	3401      	adds	r4, #1
 8015328:	9305      	str	r3, [sp, #20]
 801532a:	4620      	mov	r0, r4
 801532c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015330:	3a30      	subs	r2, #48	@ 0x30
 8015332:	2a09      	cmp	r2, #9
 8015334:	d903      	bls.n	801533e <_svfiprintf_r+0x1a6>
 8015336:	2b00      	cmp	r3, #0
 8015338:	d0c6      	beq.n	80152c8 <_svfiprintf_r+0x130>
 801533a:	9105      	str	r1, [sp, #20]
 801533c:	e7c4      	b.n	80152c8 <_svfiprintf_r+0x130>
 801533e:	4604      	mov	r4, r0
 8015340:	2301      	movs	r3, #1
 8015342:	fb0c 2101 	mla	r1, ip, r1, r2
 8015346:	e7f0      	b.n	801532a <_svfiprintf_r+0x192>
 8015348:	ab03      	add	r3, sp, #12
 801534a:	9300      	str	r3, [sp, #0]
 801534c:	462a      	mov	r2, r5
 801534e:	4638      	mov	r0, r7
 8015350:	4b0e      	ldr	r3, [pc, #56]	@ (801538c <_svfiprintf_r+0x1f4>)
 8015352:	a904      	add	r1, sp, #16
 8015354:	f7fc fe66 	bl	8012024 <_printf_float>
 8015358:	1c42      	adds	r2, r0, #1
 801535a:	4606      	mov	r6, r0
 801535c:	d1d6      	bne.n	801530c <_svfiprintf_r+0x174>
 801535e:	89ab      	ldrh	r3, [r5, #12]
 8015360:	065b      	lsls	r3, r3, #25
 8015362:	f53f af2d 	bmi.w	80151c0 <_svfiprintf_r+0x28>
 8015366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015368:	e72c      	b.n	80151c4 <_svfiprintf_r+0x2c>
 801536a:	ab03      	add	r3, sp, #12
 801536c:	9300      	str	r3, [sp, #0]
 801536e:	462a      	mov	r2, r5
 8015370:	4638      	mov	r0, r7
 8015372:	4b06      	ldr	r3, [pc, #24]	@ (801538c <_svfiprintf_r+0x1f4>)
 8015374:	a904      	add	r1, sp, #16
 8015376:	f7fd f8f3 	bl	8012560 <_printf_i>
 801537a:	e7ed      	b.n	8015358 <_svfiprintf_r+0x1c0>
 801537c:	08016a84 	.word	0x08016a84
 8015380:	08016a8a 	.word	0x08016a8a
 8015384:	08016a8e 	.word	0x08016a8e
 8015388:	08012025 	.word	0x08012025
 801538c:	080150e3 	.word	0x080150e3

08015390 <__sfputc_r>:
 8015390:	6893      	ldr	r3, [r2, #8]
 8015392:	b410      	push	{r4}
 8015394:	3b01      	subs	r3, #1
 8015396:	2b00      	cmp	r3, #0
 8015398:	6093      	str	r3, [r2, #8]
 801539a:	da07      	bge.n	80153ac <__sfputc_r+0x1c>
 801539c:	6994      	ldr	r4, [r2, #24]
 801539e:	42a3      	cmp	r3, r4
 80153a0:	db01      	blt.n	80153a6 <__sfputc_r+0x16>
 80153a2:	290a      	cmp	r1, #10
 80153a4:	d102      	bne.n	80153ac <__sfputc_r+0x1c>
 80153a6:	bc10      	pop	{r4}
 80153a8:	f7fd bde1 	b.w	8012f6e <__swbuf_r>
 80153ac:	6813      	ldr	r3, [r2, #0]
 80153ae:	1c58      	adds	r0, r3, #1
 80153b0:	6010      	str	r0, [r2, #0]
 80153b2:	7019      	strb	r1, [r3, #0]
 80153b4:	4608      	mov	r0, r1
 80153b6:	bc10      	pop	{r4}
 80153b8:	4770      	bx	lr

080153ba <__sfputs_r>:
 80153ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153bc:	4606      	mov	r6, r0
 80153be:	460f      	mov	r7, r1
 80153c0:	4614      	mov	r4, r2
 80153c2:	18d5      	adds	r5, r2, r3
 80153c4:	42ac      	cmp	r4, r5
 80153c6:	d101      	bne.n	80153cc <__sfputs_r+0x12>
 80153c8:	2000      	movs	r0, #0
 80153ca:	e007      	b.n	80153dc <__sfputs_r+0x22>
 80153cc:	463a      	mov	r2, r7
 80153ce:	4630      	mov	r0, r6
 80153d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153d4:	f7ff ffdc 	bl	8015390 <__sfputc_r>
 80153d8:	1c43      	adds	r3, r0, #1
 80153da:	d1f3      	bne.n	80153c4 <__sfputs_r+0xa>
 80153dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080153e0 <_vfiprintf_r>:
 80153e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e4:	460d      	mov	r5, r1
 80153e6:	4614      	mov	r4, r2
 80153e8:	4698      	mov	r8, r3
 80153ea:	4606      	mov	r6, r0
 80153ec:	b09d      	sub	sp, #116	@ 0x74
 80153ee:	b118      	cbz	r0, 80153f8 <_vfiprintf_r+0x18>
 80153f0:	6a03      	ldr	r3, [r0, #32]
 80153f2:	b90b      	cbnz	r3, 80153f8 <_vfiprintf_r+0x18>
 80153f4:	f7fd fc68 	bl	8012cc8 <__sinit>
 80153f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80153fa:	07d9      	lsls	r1, r3, #31
 80153fc:	d405      	bmi.n	801540a <_vfiprintf_r+0x2a>
 80153fe:	89ab      	ldrh	r3, [r5, #12]
 8015400:	059a      	lsls	r2, r3, #22
 8015402:	d402      	bmi.n	801540a <_vfiprintf_r+0x2a>
 8015404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015406:	f7fd ff94 	bl	8013332 <__retarget_lock_acquire_recursive>
 801540a:	89ab      	ldrh	r3, [r5, #12]
 801540c:	071b      	lsls	r3, r3, #28
 801540e:	d501      	bpl.n	8015414 <_vfiprintf_r+0x34>
 8015410:	692b      	ldr	r3, [r5, #16]
 8015412:	b99b      	cbnz	r3, 801543c <_vfiprintf_r+0x5c>
 8015414:	4629      	mov	r1, r5
 8015416:	4630      	mov	r0, r6
 8015418:	f7fd fde8 	bl	8012fec <__swsetup_r>
 801541c:	b170      	cbz	r0, 801543c <_vfiprintf_r+0x5c>
 801541e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015420:	07dc      	lsls	r4, r3, #31
 8015422:	d504      	bpl.n	801542e <_vfiprintf_r+0x4e>
 8015424:	f04f 30ff 	mov.w	r0, #4294967295
 8015428:	b01d      	add	sp, #116	@ 0x74
 801542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801542e:	89ab      	ldrh	r3, [r5, #12]
 8015430:	0598      	lsls	r0, r3, #22
 8015432:	d4f7      	bmi.n	8015424 <_vfiprintf_r+0x44>
 8015434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015436:	f7fd ff7d 	bl	8013334 <__retarget_lock_release_recursive>
 801543a:	e7f3      	b.n	8015424 <_vfiprintf_r+0x44>
 801543c:	2300      	movs	r3, #0
 801543e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015440:	2320      	movs	r3, #32
 8015442:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015446:	2330      	movs	r3, #48	@ 0x30
 8015448:	f04f 0901 	mov.w	r9, #1
 801544c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015450:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80155fc <_vfiprintf_r+0x21c>
 8015454:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015458:	4623      	mov	r3, r4
 801545a:	469a      	mov	sl, r3
 801545c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015460:	b10a      	cbz	r2, 8015466 <_vfiprintf_r+0x86>
 8015462:	2a25      	cmp	r2, #37	@ 0x25
 8015464:	d1f9      	bne.n	801545a <_vfiprintf_r+0x7a>
 8015466:	ebba 0b04 	subs.w	fp, sl, r4
 801546a:	d00b      	beq.n	8015484 <_vfiprintf_r+0xa4>
 801546c:	465b      	mov	r3, fp
 801546e:	4622      	mov	r2, r4
 8015470:	4629      	mov	r1, r5
 8015472:	4630      	mov	r0, r6
 8015474:	f7ff ffa1 	bl	80153ba <__sfputs_r>
 8015478:	3001      	adds	r0, #1
 801547a:	f000 80a7 	beq.w	80155cc <_vfiprintf_r+0x1ec>
 801547e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015480:	445a      	add	r2, fp
 8015482:	9209      	str	r2, [sp, #36]	@ 0x24
 8015484:	f89a 3000 	ldrb.w	r3, [sl]
 8015488:	2b00      	cmp	r3, #0
 801548a:	f000 809f 	beq.w	80155cc <_vfiprintf_r+0x1ec>
 801548e:	2300      	movs	r3, #0
 8015490:	f04f 32ff 	mov.w	r2, #4294967295
 8015494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015498:	f10a 0a01 	add.w	sl, sl, #1
 801549c:	9304      	str	r3, [sp, #16]
 801549e:	9307      	str	r3, [sp, #28]
 80154a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80154a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80154a6:	4654      	mov	r4, sl
 80154a8:	2205      	movs	r2, #5
 80154aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154ae:	4853      	ldr	r0, [pc, #332]	@ (80155fc <_vfiprintf_r+0x21c>)
 80154b0:	f7fd ff49 	bl	8013346 <memchr>
 80154b4:	9a04      	ldr	r2, [sp, #16]
 80154b6:	b9d8      	cbnz	r0, 80154f0 <_vfiprintf_r+0x110>
 80154b8:	06d1      	lsls	r1, r2, #27
 80154ba:	bf44      	itt	mi
 80154bc:	2320      	movmi	r3, #32
 80154be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80154c2:	0713      	lsls	r3, r2, #28
 80154c4:	bf44      	itt	mi
 80154c6:	232b      	movmi	r3, #43	@ 0x2b
 80154c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80154cc:	f89a 3000 	ldrb.w	r3, [sl]
 80154d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80154d2:	d015      	beq.n	8015500 <_vfiprintf_r+0x120>
 80154d4:	4654      	mov	r4, sl
 80154d6:	2000      	movs	r0, #0
 80154d8:	f04f 0c0a 	mov.w	ip, #10
 80154dc:	9a07      	ldr	r2, [sp, #28]
 80154de:	4621      	mov	r1, r4
 80154e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154e4:	3b30      	subs	r3, #48	@ 0x30
 80154e6:	2b09      	cmp	r3, #9
 80154e8:	d94b      	bls.n	8015582 <_vfiprintf_r+0x1a2>
 80154ea:	b1b0      	cbz	r0, 801551a <_vfiprintf_r+0x13a>
 80154ec:	9207      	str	r2, [sp, #28]
 80154ee:	e014      	b.n	801551a <_vfiprintf_r+0x13a>
 80154f0:	eba0 0308 	sub.w	r3, r0, r8
 80154f4:	fa09 f303 	lsl.w	r3, r9, r3
 80154f8:	4313      	orrs	r3, r2
 80154fa:	46a2      	mov	sl, r4
 80154fc:	9304      	str	r3, [sp, #16]
 80154fe:	e7d2      	b.n	80154a6 <_vfiprintf_r+0xc6>
 8015500:	9b03      	ldr	r3, [sp, #12]
 8015502:	1d19      	adds	r1, r3, #4
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	9103      	str	r1, [sp, #12]
 8015508:	2b00      	cmp	r3, #0
 801550a:	bfbb      	ittet	lt
 801550c:	425b      	neglt	r3, r3
 801550e:	f042 0202 	orrlt.w	r2, r2, #2
 8015512:	9307      	strge	r3, [sp, #28]
 8015514:	9307      	strlt	r3, [sp, #28]
 8015516:	bfb8      	it	lt
 8015518:	9204      	strlt	r2, [sp, #16]
 801551a:	7823      	ldrb	r3, [r4, #0]
 801551c:	2b2e      	cmp	r3, #46	@ 0x2e
 801551e:	d10a      	bne.n	8015536 <_vfiprintf_r+0x156>
 8015520:	7863      	ldrb	r3, [r4, #1]
 8015522:	2b2a      	cmp	r3, #42	@ 0x2a
 8015524:	d132      	bne.n	801558c <_vfiprintf_r+0x1ac>
 8015526:	9b03      	ldr	r3, [sp, #12]
 8015528:	3402      	adds	r4, #2
 801552a:	1d1a      	adds	r2, r3, #4
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	9203      	str	r2, [sp, #12]
 8015530:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015534:	9305      	str	r3, [sp, #20]
 8015536:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8015600 <_vfiprintf_r+0x220>
 801553a:	2203      	movs	r2, #3
 801553c:	4650      	mov	r0, sl
 801553e:	7821      	ldrb	r1, [r4, #0]
 8015540:	f7fd ff01 	bl	8013346 <memchr>
 8015544:	b138      	cbz	r0, 8015556 <_vfiprintf_r+0x176>
 8015546:	2240      	movs	r2, #64	@ 0x40
 8015548:	9b04      	ldr	r3, [sp, #16]
 801554a:	eba0 000a 	sub.w	r0, r0, sl
 801554e:	4082      	lsls	r2, r0
 8015550:	4313      	orrs	r3, r2
 8015552:	3401      	adds	r4, #1
 8015554:	9304      	str	r3, [sp, #16]
 8015556:	f814 1b01 	ldrb.w	r1, [r4], #1
 801555a:	2206      	movs	r2, #6
 801555c:	4829      	ldr	r0, [pc, #164]	@ (8015604 <_vfiprintf_r+0x224>)
 801555e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015562:	f7fd fef0 	bl	8013346 <memchr>
 8015566:	2800      	cmp	r0, #0
 8015568:	d03f      	beq.n	80155ea <_vfiprintf_r+0x20a>
 801556a:	4b27      	ldr	r3, [pc, #156]	@ (8015608 <_vfiprintf_r+0x228>)
 801556c:	bb1b      	cbnz	r3, 80155b6 <_vfiprintf_r+0x1d6>
 801556e:	9b03      	ldr	r3, [sp, #12]
 8015570:	3307      	adds	r3, #7
 8015572:	f023 0307 	bic.w	r3, r3, #7
 8015576:	3308      	adds	r3, #8
 8015578:	9303      	str	r3, [sp, #12]
 801557a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801557c:	443b      	add	r3, r7
 801557e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015580:	e76a      	b.n	8015458 <_vfiprintf_r+0x78>
 8015582:	460c      	mov	r4, r1
 8015584:	2001      	movs	r0, #1
 8015586:	fb0c 3202 	mla	r2, ip, r2, r3
 801558a:	e7a8      	b.n	80154de <_vfiprintf_r+0xfe>
 801558c:	2300      	movs	r3, #0
 801558e:	f04f 0c0a 	mov.w	ip, #10
 8015592:	4619      	mov	r1, r3
 8015594:	3401      	adds	r4, #1
 8015596:	9305      	str	r3, [sp, #20]
 8015598:	4620      	mov	r0, r4
 801559a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801559e:	3a30      	subs	r2, #48	@ 0x30
 80155a0:	2a09      	cmp	r2, #9
 80155a2:	d903      	bls.n	80155ac <_vfiprintf_r+0x1cc>
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d0c6      	beq.n	8015536 <_vfiprintf_r+0x156>
 80155a8:	9105      	str	r1, [sp, #20]
 80155aa:	e7c4      	b.n	8015536 <_vfiprintf_r+0x156>
 80155ac:	4604      	mov	r4, r0
 80155ae:	2301      	movs	r3, #1
 80155b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80155b4:	e7f0      	b.n	8015598 <_vfiprintf_r+0x1b8>
 80155b6:	ab03      	add	r3, sp, #12
 80155b8:	9300      	str	r3, [sp, #0]
 80155ba:	462a      	mov	r2, r5
 80155bc:	4630      	mov	r0, r6
 80155be:	4b13      	ldr	r3, [pc, #76]	@ (801560c <_vfiprintf_r+0x22c>)
 80155c0:	a904      	add	r1, sp, #16
 80155c2:	f7fc fd2f 	bl	8012024 <_printf_float>
 80155c6:	4607      	mov	r7, r0
 80155c8:	1c78      	adds	r0, r7, #1
 80155ca:	d1d6      	bne.n	801557a <_vfiprintf_r+0x19a>
 80155cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80155ce:	07d9      	lsls	r1, r3, #31
 80155d0:	d405      	bmi.n	80155de <_vfiprintf_r+0x1fe>
 80155d2:	89ab      	ldrh	r3, [r5, #12]
 80155d4:	059a      	lsls	r2, r3, #22
 80155d6:	d402      	bmi.n	80155de <_vfiprintf_r+0x1fe>
 80155d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80155da:	f7fd feab 	bl	8013334 <__retarget_lock_release_recursive>
 80155de:	89ab      	ldrh	r3, [r5, #12]
 80155e0:	065b      	lsls	r3, r3, #25
 80155e2:	f53f af1f 	bmi.w	8015424 <_vfiprintf_r+0x44>
 80155e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80155e8:	e71e      	b.n	8015428 <_vfiprintf_r+0x48>
 80155ea:	ab03      	add	r3, sp, #12
 80155ec:	9300      	str	r3, [sp, #0]
 80155ee:	462a      	mov	r2, r5
 80155f0:	4630      	mov	r0, r6
 80155f2:	4b06      	ldr	r3, [pc, #24]	@ (801560c <_vfiprintf_r+0x22c>)
 80155f4:	a904      	add	r1, sp, #16
 80155f6:	f7fc ffb3 	bl	8012560 <_printf_i>
 80155fa:	e7e4      	b.n	80155c6 <_vfiprintf_r+0x1e6>
 80155fc:	08016a84 	.word	0x08016a84
 8015600:	08016a8a 	.word	0x08016a8a
 8015604:	08016a8e 	.word	0x08016a8e
 8015608:	08012025 	.word	0x08012025
 801560c:	080153bb 	.word	0x080153bb

08015610 <__sflush_r>:
 8015610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015616:	0716      	lsls	r6, r2, #28
 8015618:	4605      	mov	r5, r0
 801561a:	460c      	mov	r4, r1
 801561c:	d454      	bmi.n	80156c8 <__sflush_r+0xb8>
 801561e:	684b      	ldr	r3, [r1, #4]
 8015620:	2b00      	cmp	r3, #0
 8015622:	dc02      	bgt.n	801562a <__sflush_r+0x1a>
 8015624:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015626:	2b00      	cmp	r3, #0
 8015628:	dd48      	ble.n	80156bc <__sflush_r+0xac>
 801562a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801562c:	2e00      	cmp	r6, #0
 801562e:	d045      	beq.n	80156bc <__sflush_r+0xac>
 8015630:	2300      	movs	r3, #0
 8015632:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015636:	682f      	ldr	r7, [r5, #0]
 8015638:	6a21      	ldr	r1, [r4, #32]
 801563a:	602b      	str	r3, [r5, #0]
 801563c:	d030      	beq.n	80156a0 <__sflush_r+0x90>
 801563e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015640:	89a3      	ldrh	r3, [r4, #12]
 8015642:	0759      	lsls	r1, r3, #29
 8015644:	d505      	bpl.n	8015652 <__sflush_r+0x42>
 8015646:	6863      	ldr	r3, [r4, #4]
 8015648:	1ad2      	subs	r2, r2, r3
 801564a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801564c:	b10b      	cbz	r3, 8015652 <__sflush_r+0x42>
 801564e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015650:	1ad2      	subs	r2, r2, r3
 8015652:	2300      	movs	r3, #0
 8015654:	4628      	mov	r0, r5
 8015656:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015658:	6a21      	ldr	r1, [r4, #32]
 801565a:	47b0      	blx	r6
 801565c:	1c43      	adds	r3, r0, #1
 801565e:	89a3      	ldrh	r3, [r4, #12]
 8015660:	d106      	bne.n	8015670 <__sflush_r+0x60>
 8015662:	6829      	ldr	r1, [r5, #0]
 8015664:	291d      	cmp	r1, #29
 8015666:	d82b      	bhi.n	80156c0 <__sflush_r+0xb0>
 8015668:	4a28      	ldr	r2, [pc, #160]	@ (801570c <__sflush_r+0xfc>)
 801566a:	40ca      	lsrs	r2, r1
 801566c:	07d6      	lsls	r6, r2, #31
 801566e:	d527      	bpl.n	80156c0 <__sflush_r+0xb0>
 8015670:	2200      	movs	r2, #0
 8015672:	6062      	str	r2, [r4, #4]
 8015674:	6922      	ldr	r2, [r4, #16]
 8015676:	04d9      	lsls	r1, r3, #19
 8015678:	6022      	str	r2, [r4, #0]
 801567a:	d504      	bpl.n	8015686 <__sflush_r+0x76>
 801567c:	1c42      	adds	r2, r0, #1
 801567e:	d101      	bne.n	8015684 <__sflush_r+0x74>
 8015680:	682b      	ldr	r3, [r5, #0]
 8015682:	b903      	cbnz	r3, 8015686 <__sflush_r+0x76>
 8015684:	6560      	str	r0, [r4, #84]	@ 0x54
 8015686:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015688:	602f      	str	r7, [r5, #0]
 801568a:	b1b9      	cbz	r1, 80156bc <__sflush_r+0xac>
 801568c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015690:	4299      	cmp	r1, r3
 8015692:	d002      	beq.n	801569a <__sflush_r+0x8a>
 8015694:	4628      	mov	r0, r5
 8015696:	f7fe fce3 	bl	8014060 <_free_r>
 801569a:	2300      	movs	r3, #0
 801569c:	6363      	str	r3, [r4, #52]	@ 0x34
 801569e:	e00d      	b.n	80156bc <__sflush_r+0xac>
 80156a0:	2301      	movs	r3, #1
 80156a2:	4628      	mov	r0, r5
 80156a4:	47b0      	blx	r6
 80156a6:	4602      	mov	r2, r0
 80156a8:	1c50      	adds	r0, r2, #1
 80156aa:	d1c9      	bne.n	8015640 <__sflush_r+0x30>
 80156ac:	682b      	ldr	r3, [r5, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d0c6      	beq.n	8015640 <__sflush_r+0x30>
 80156b2:	2b1d      	cmp	r3, #29
 80156b4:	d001      	beq.n	80156ba <__sflush_r+0xaa>
 80156b6:	2b16      	cmp	r3, #22
 80156b8:	d11d      	bne.n	80156f6 <__sflush_r+0xe6>
 80156ba:	602f      	str	r7, [r5, #0]
 80156bc:	2000      	movs	r0, #0
 80156be:	e021      	b.n	8015704 <__sflush_r+0xf4>
 80156c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80156c4:	b21b      	sxth	r3, r3
 80156c6:	e01a      	b.n	80156fe <__sflush_r+0xee>
 80156c8:	690f      	ldr	r7, [r1, #16]
 80156ca:	2f00      	cmp	r7, #0
 80156cc:	d0f6      	beq.n	80156bc <__sflush_r+0xac>
 80156ce:	0793      	lsls	r3, r2, #30
 80156d0:	bf18      	it	ne
 80156d2:	2300      	movne	r3, #0
 80156d4:	680e      	ldr	r6, [r1, #0]
 80156d6:	bf08      	it	eq
 80156d8:	694b      	ldreq	r3, [r1, #20]
 80156da:	1bf6      	subs	r6, r6, r7
 80156dc:	600f      	str	r7, [r1, #0]
 80156de:	608b      	str	r3, [r1, #8]
 80156e0:	2e00      	cmp	r6, #0
 80156e2:	ddeb      	ble.n	80156bc <__sflush_r+0xac>
 80156e4:	4633      	mov	r3, r6
 80156e6:	463a      	mov	r2, r7
 80156e8:	4628      	mov	r0, r5
 80156ea:	6a21      	ldr	r1, [r4, #32]
 80156ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80156f0:	47e0      	blx	ip
 80156f2:	2800      	cmp	r0, #0
 80156f4:	dc07      	bgt.n	8015706 <__sflush_r+0xf6>
 80156f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80156fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015702:	81a3      	strh	r3, [r4, #12]
 8015704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015706:	4407      	add	r7, r0
 8015708:	1a36      	subs	r6, r6, r0
 801570a:	e7e9      	b.n	80156e0 <__sflush_r+0xd0>
 801570c:	20400001 	.word	0x20400001

08015710 <_fflush_r>:
 8015710:	b538      	push	{r3, r4, r5, lr}
 8015712:	690b      	ldr	r3, [r1, #16]
 8015714:	4605      	mov	r5, r0
 8015716:	460c      	mov	r4, r1
 8015718:	b913      	cbnz	r3, 8015720 <_fflush_r+0x10>
 801571a:	2500      	movs	r5, #0
 801571c:	4628      	mov	r0, r5
 801571e:	bd38      	pop	{r3, r4, r5, pc}
 8015720:	b118      	cbz	r0, 801572a <_fflush_r+0x1a>
 8015722:	6a03      	ldr	r3, [r0, #32]
 8015724:	b90b      	cbnz	r3, 801572a <_fflush_r+0x1a>
 8015726:	f7fd facf 	bl	8012cc8 <__sinit>
 801572a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d0f3      	beq.n	801571a <_fflush_r+0xa>
 8015732:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015734:	07d0      	lsls	r0, r2, #31
 8015736:	d404      	bmi.n	8015742 <_fflush_r+0x32>
 8015738:	0599      	lsls	r1, r3, #22
 801573a:	d402      	bmi.n	8015742 <_fflush_r+0x32>
 801573c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801573e:	f7fd fdf8 	bl	8013332 <__retarget_lock_acquire_recursive>
 8015742:	4628      	mov	r0, r5
 8015744:	4621      	mov	r1, r4
 8015746:	f7ff ff63 	bl	8015610 <__sflush_r>
 801574a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801574c:	4605      	mov	r5, r0
 801574e:	07da      	lsls	r2, r3, #31
 8015750:	d4e4      	bmi.n	801571c <_fflush_r+0xc>
 8015752:	89a3      	ldrh	r3, [r4, #12]
 8015754:	059b      	lsls	r3, r3, #22
 8015756:	d4e1      	bmi.n	801571c <_fflush_r+0xc>
 8015758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801575a:	f7fd fdeb 	bl	8013334 <__retarget_lock_release_recursive>
 801575e:	e7dd      	b.n	801571c <_fflush_r+0xc>

08015760 <__swhatbuf_r>:
 8015760:	b570      	push	{r4, r5, r6, lr}
 8015762:	460c      	mov	r4, r1
 8015764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015768:	4615      	mov	r5, r2
 801576a:	2900      	cmp	r1, #0
 801576c:	461e      	mov	r6, r3
 801576e:	b096      	sub	sp, #88	@ 0x58
 8015770:	da0c      	bge.n	801578c <__swhatbuf_r+0x2c>
 8015772:	89a3      	ldrh	r3, [r4, #12]
 8015774:	2100      	movs	r1, #0
 8015776:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801577a:	bf14      	ite	ne
 801577c:	2340      	movne	r3, #64	@ 0x40
 801577e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015782:	2000      	movs	r0, #0
 8015784:	6031      	str	r1, [r6, #0]
 8015786:	602b      	str	r3, [r5, #0]
 8015788:	b016      	add	sp, #88	@ 0x58
 801578a:	bd70      	pop	{r4, r5, r6, pc}
 801578c:	466a      	mov	r2, sp
 801578e:	f000 f893 	bl	80158b8 <_fstat_r>
 8015792:	2800      	cmp	r0, #0
 8015794:	dbed      	blt.n	8015772 <__swhatbuf_r+0x12>
 8015796:	9901      	ldr	r1, [sp, #4]
 8015798:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801579c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80157a0:	4259      	negs	r1, r3
 80157a2:	4159      	adcs	r1, r3
 80157a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80157a8:	e7eb      	b.n	8015782 <__swhatbuf_r+0x22>

080157aa <__smakebuf_r>:
 80157aa:	898b      	ldrh	r3, [r1, #12]
 80157ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80157ae:	079d      	lsls	r5, r3, #30
 80157b0:	4606      	mov	r6, r0
 80157b2:	460c      	mov	r4, r1
 80157b4:	d507      	bpl.n	80157c6 <__smakebuf_r+0x1c>
 80157b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80157ba:	6023      	str	r3, [r4, #0]
 80157bc:	6123      	str	r3, [r4, #16]
 80157be:	2301      	movs	r3, #1
 80157c0:	6163      	str	r3, [r4, #20]
 80157c2:	b003      	add	sp, #12
 80157c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157c6:	466a      	mov	r2, sp
 80157c8:	ab01      	add	r3, sp, #4
 80157ca:	f7ff ffc9 	bl	8015760 <__swhatbuf_r>
 80157ce:	9f00      	ldr	r7, [sp, #0]
 80157d0:	4605      	mov	r5, r0
 80157d2:	4639      	mov	r1, r7
 80157d4:	4630      	mov	r0, r6
 80157d6:	f7fb fc69 	bl	80110ac <_malloc_r>
 80157da:	b948      	cbnz	r0, 80157f0 <__smakebuf_r+0x46>
 80157dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157e0:	059a      	lsls	r2, r3, #22
 80157e2:	d4ee      	bmi.n	80157c2 <__smakebuf_r+0x18>
 80157e4:	f023 0303 	bic.w	r3, r3, #3
 80157e8:	f043 0302 	orr.w	r3, r3, #2
 80157ec:	81a3      	strh	r3, [r4, #12]
 80157ee:	e7e2      	b.n	80157b6 <__smakebuf_r+0xc>
 80157f0:	89a3      	ldrh	r3, [r4, #12]
 80157f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80157f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80157fa:	81a3      	strh	r3, [r4, #12]
 80157fc:	9b01      	ldr	r3, [sp, #4]
 80157fe:	6020      	str	r0, [r4, #0]
 8015800:	b15b      	cbz	r3, 801581a <__smakebuf_r+0x70>
 8015802:	4630      	mov	r0, r6
 8015804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015808:	f000 f868 	bl	80158dc <_isatty_r>
 801580c:	b128      	cbz	r0, 801581a <__smakebuf_r+0x70>
 801580e:	89a3      	ldrh	r3, [r4, #12]
 8015810:	f023 0303 	bic.w	r3, r3, #3
 8015814:	f043 0301 	orr.w	r3, r3, #1
 8015818:	81a3      	strh	r3, [r4, #12]
 801581a:	89a3      	ldrh	r3, [r4, #12]
 801581c:	431d      	orrs	r5, r3
 801581e:	81a5      	strh	r5, [r4, #12]
 8015820:	e7cf      	b.n	80157c2 <__smakebuf_r+0x18>

08015822 <memmove>:
 8015822:	4288      	cmp	r0, r1
 8015824:	b510      	push	{r4, lr}
 8015826:	eb01 0402 	add.w	r4, r1, r2
 801582a:	d902      	bls.n	8015832 <memmove+0x10>
 801582c:	4284      	cmp	r4, r0
 801582e:	4623      	mov	r3, r4
 8015830:	d807      	bhi.n	8015842 <memmove+0x20>
 8015832:	1e43      	subs	r3, r0, #1
 8015834:	42a1      	cmp	r1, r4
 8015836:	d008      	beq.n	801584a <memmove+0x28>
 8015838:	f811 2b01 	ldrb.w	r2, [r1], #1
 801583c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015840:	e7f8      	b.n	8015834 <memmove+0x12>
 8015842:	4601      	mov	r1, r0
 8015844:	4402      	add	r2, r0
 8015846:	428a      	cmp	r2, r1
 8015848:	d100      	bne.n	801584c <memmove+0x2a>
 801584a:	bd10      	pop	{r4, pc}
 801584c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015850:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015854:	e7f7      	b.n	8015846 <memmove+0x24>

08015856 <_raise_r>:
 8015856:	291f      	cmp	r1, #31
 8015858:	b538      	push	{r3, r4, r5, lr}
 801585a:	4605      	mov	r5, r0
 801585c:	460c      	mov	r4, r1
 801585e:	d904      	bls.n	801586a <_raise_r+0x14>
 8015860:	2316      	movs	r3, #22
 8015862:	6003      	str	r3, [r0, #0]
 8015864:	f04f 30ff 	mov.w	r0, #4294967295
 8015868:	bd38      	pop	{r3, r4, r5, pc}
 801586a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801586c:	b112      	cbz	r2, 8015874 <_raise_r+0x1e>
 801586e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015872:	b94b      	cbnz	r3, 8015888 <_raise_r+0x32>
 8015874:	4628      	mov	r0, r5
 8015876:	f000 f853 	bl	8015920 <_getpid_r>
 801587a:	4622      	mov	r2, r4
 801587c:	4601      	mov	r1, r0
 801587e:	4628      	mov	r0, r5
 8015880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015884:	f000 b83a 	b.w	80158fc <_kill_r>
 8015888:	2b01      	cmp	r3, #1
 801588a:	d00a      	beq.n	80158a2 <_raise_r+0x4c>
 801588c:	1c59      	adds	r1, r3, #1
 801588e:	d103      	bne.n	8015898 <_raise_r+0x42>
 8015890:	2316      	movs	r3, #22
 8015892:	6003      	str	r3, [r0, #0]
 8015894:	2001      	movs	r0, #1
 8015896:	e7e7      	b.n	8015868 <_raise_r+0x12>
 8015898:	2100      	movs	r1, #0
 801589a:	4620      	mov	r0, r4
 801589c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80158a0:	4798      	blx	r3
 80158a2:	2000      	movs	r0, #0
 80158a4:	e7e0      	b.n	8015868 <_raise_r+0x12>
	...

080158a8 <raise>:
 80158a8:	4b02      	ldr	r3, [pc, #8]	@ (80158b4 <raise+0xc>)
 80158aa:	4601      	mov	r1, r0
 80158ac:	6818      	ldr	r0, [r3, #0]
 80158ae:	f7ff bfd2 	b.w	8015856 <_raise_r>
 80158b2:	bf00      	nop
 80158b4:	200002e4 	.word	0x200002e4

080158b8 <_fstat_r>:
 80158b8:	b538      	push	{r3, r4, r5, lr}
 80158ba:	2300      	movs	r3, #0
 80158bc:	4d06      	ldr	r5, [pc, #24]	@ (80158d8 <_fstat_r+0x20>)
 80158be:	4604      	mov	r4, r0
 80158c0:	4608      	mov	r0, r1
 80158c2:	4611      	mov	r1, r2
 80158c4:	602b      	str	r3, [r5, #0]
 80158c6:	f7ec f85f 	bl	8001988 <_fstat>
 80158ca:	1c43      	adds	r3, r0, #1
 80158cc:	d102      	bne.n	80158d4 <_fstat_r+0x1c>
 80158ce:	682b      	ldr	r3, [r5, #0]
 80158d0:	b103      	cbz	r3, 80158d4 <_fstat_r+0x1c>
 80158d2:	6023      	str	r3, [r4, #0]
 80158d4:	bd38      	pop	{r3, r4, r5, pc}
 80158d6:	bf00      	nop
 80158d8:	200021bc 	.word	0x200021bc

080158dc <_isatty_r>:
 80158dc:	b538      	push	{r3, r4, r5, lr}
 80158de:	2300      	movs	r3, #0
 80158e0:	4d05      	ldr	r5, [pc, #20]	@ (80158f8 <_isatty_r+0x1c>)
 80158e2:	4604      	mov	r4, r0
 80158e4:	4608      	mov	r0, r1
 80158e6:	602b      	str	r3, [r5, #0]
 80158e8:	f7ec f85d 	bl	80019a6 <_isatty>
 80158ec:	1c43      	adds	r3, r0, #1
 80158ee:	d102      	bne.n	80158f6 <_isatty_r+0x1a>
 80158f0:	682b      	ldr	r3, [r5, #0]
 80158f2:	b103      	cbz	r3, 80158f6 <_isatty_r+0x1a>
 80158f4:	6023      	str	r3, [r4, #0]
 80158f6:	bd38      	pop	{r3, r4, r5, pc}
 80158f8:	200021bc 	.word	0x200021bc

080158fc <_kill_r>:
 80158fc:	b538      	push	{r3, r4, r5, lr}
 80158fe:	2300      	movs	r3, #0
 8015900:	4d06      	ldr	r5, [pc, #24]	@ (801591c <_kill_r+0x20>)
 8015902:	4604      	mov	r4, r0
 8015904:	4608      	mov	r0, r1
 8015906:	4611      	mov	r1, r2
 8015908:	602b      	str	r3, [r5, #0]
 801590a:	f7eb fffa 	bl	8001902 <_kill>
 801590e:	1c43      	adds	r3, r0, #1
 8015910:	d102      	bne.n	8015918 <_kill_r+0x1c>
 8015912:	682b      	ldr	r3, [r5, #0]
 8015914:	b103      	cbz	r3, 8015918 <_kill_r+0x1c>
 8015916:	6023      	str	r3, [r4, #0]
 8015918:	bd38      	pop	{r3, r4, r5, pc}
 801591a:	bf00      	nop
 801591c:	200021bc 	.word	0x200021bc

08015920 <_getpid_r>:
 8015920:	f7eb bfe8 	b.w	80018f4 <_getpid>

08015924 <_calloc_r>:
 8015924:	b570      	push	{r4, r5, r6, lr}
 8015926:	fba1 5402 	umull	r5, r4, r1, r2
 801592a:	b934      	cbnz	r4, 801593a <_calloc_r+0x16>
 801592c:	4629      	mov	r1, r5
 801592e:	f7fb fbbd 	bl	80110ac <_malloc_r>
 8015932:	4606      	mov	r6, r0
 8015934:	b928      	cbnz	r0, 8015942 <_calloc_r+0x1e>
 8015936:	4630      	mov	r0, r6
 8015938:	bd70      	pop	{r4, r5, r6, pc}
 801593a:	220c      	movs	r2, #12
 801593c:	2600      	movs	r6, #0
 801593e:	6002      	str	r2, [r0, #0]
 8015940:	e7f9      	b.n	8015936 <_calloc_r+0x12>
 8015942:	462a      	mov	r2, r5
 8015944:	4621      	mov	r1, r4
 8015946:	f7fd fbb7 	bl	80130b8 <memset>
 801594a:	e7f4      	b.n	8015936 <_calloc_r+0x12>

0801594c <_realloc_r>:
 801594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015950:	4607      	mov	r7, r0
 8015952:	4614      	mov	r4, r2
 8015954:	460d      	mov	r5, r1
 8015956:	b921      	cbnz	r1, 8015962 <_realloc_r+0x16>
 8015958:	4611      	mov	r1, r2
 801595a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801595e:	f7fb bba5 	b.w	80110ac <_malloc_r>
 8015962:	b92a      	cbnz	r2, 8015970 <_realloc_r+0x24>
 8015964:	f7fe fb7c 	bl	8014060 <_free_r>
 8015968:	4625      	mov	r5, r4
 801596a:	4628      	mov	r0, r5
 801596c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015970:	f000 f81a 	bl	80159a8 <_malloc_usable_size_r>
 8015974:	4284      	cmp	r4, r0
 8015976:	4606      	mov	r6, r0
 8015978:	d802      	bhi.n	8015980 <_realloc_r+0x34>
 801597a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801597e:	d8f4      	bhi.n	801596a <_realloc_r+0x1e>
 8015980:	4621      	mov	r1, r4
 8015982:	4638      	mov	r0, r7
 8015984:	f7fb fb92 	bl	80110ac <_malloc_r>
 8015988:	4680      	mov	r8, r0
 801598a:	b908      	cbnz	r0, 8015990 <_realloc_r+0x44>
 801598c:	4645      	mov	r5, r8
 801598e:	e7ec      	b.n	801596a <_realloc_r+0x1e>
 8015990:	42b4      	cmp	r4, r6
 8015992:	4622      	mov	r2, r4
 8015994:	4629      	mov	r1, r5
 8015996:	bf28      	it	cs
 8015998:	4632      	movcs	r2, r6
 801599a:	f7fd fce2 	bl	8013362 <memcpy>
 801599e:	4629      	mov	r1, r5
 80159a0:	4638      	mov	r0, r7
 80159a2:	f7fe fb5d 	bl	8014060 <_free_r>
 80159a6:	e7f1      	b.n	801598c <_realloc_r+0x40>

080159a8 <_malloc_usable_size_r>:
 80159a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159ac:	1f18      	subs	r0, r3, #4
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	bfbc      	itt	lt
 80159b2:	580b      	ldrlt	r3, [r1, r0]
 80159b4:	18c0      	addlt	r0, r0, r3
 80159b6:	4770      	bx	lr

080159b8 <_init>:
 80159b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ba:	bf00      	nop
 80159bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159be:	bc08      	pop	{r3}
 80159c0:	469e      	mov	lr, r3
 80159c2:	4770      	bx	lr

080159c4 <_fini>:
 80159c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159c6:	bf00      	nop
 80159c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159ca:	bc08      	pop	{r3}
 80159cc:	469e      	mov	lr, r3
 80159ce:	4770      	bx	lr
