
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018274  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001460  08018388  08018388  00019388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080197e8  080197e8  0001b250  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080197e8  080197e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080197f0  080197f0  0001b250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080197f0  080197f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080197f4  080197f4  0001a7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  080197f8  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f84  20000250  08019a48  0001b250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021d4  08019a48  0001c1d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001b250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ece9  00000000  00000000  0001b279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050ff  00000000  00000000  00039f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  0003f068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e9  00000000  00000000  000407d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e489  00000000  00000000  000419b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002433c  00000000  00000000  0005fe42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe28  00000000  00000000  0008417e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113fa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007998  00000000  00000000  00113fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0011b984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000250 	.word	0x20000250
 800012c:	00000000 	.word	0x00000000
 8000130:	0801836c 	.word	0x0801836c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000254 	.word	0x20000254
 800014c:	0801836c 	.word	0x0801836c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff fead 	bl	80009d0 <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc23 	bl	80004ec <__aeabi_dmul>
 8000ca6:	f7ff fef9 	bl	8000a9c <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fba4 	bl	80003f8 <__aeabi_ui2d>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb4:	f7ff fc1a 	bl	80004ec <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fa5c 	bl	800017c <__aeabi_dsub>
 8000cc4:	f7ff feea 	bl	8000a9c <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <SELECT+0x14>)
 8000cde:	f002 fe71 	bl	80039c4 <HAL_GPIO_WritePin>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4802      	ldr	r0, [pc, #8]	@ (8000d00 <DESELECT+0x14>)
 8000cf6:	f002 fe65 	bl	80039c4 <HAL_GPIO_WritePin>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d0e:	bf00      	nop
 8000d10:	4808      	ldr	r0, [pc, #32]	@ (8000d34 <SPI_TxByte+0x30>)
 8000d12:	f006 fc12 	bl	800753a <HAL_SPI_GetState>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d1f9      	bne.n	8000d10 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000d1c:	1df9      	adds	r1, r7, #7
 8000d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d22:	2201      	movs	r2, #1
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <SPI_TxByte+0x30>)
 8000d26:	f006 f91b 	bl	8006f60 <HAL_SPI_Transmit>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200002ec 	.word	0x200002ec

08000d38 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000d3e:	23ff      	movs	r3, #255	@ 0xff
 8000d40:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d46:	bf00      	nop
 8000d48:	4809      	ldr	r0, [pc, #36]	@ (8000d70 <SPI_RxByte+0x38>)
 8000d4a:	f006 fbf6 	bl	800753a <HAL_SPI_GetState>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d1f9      	bne.n	8000d48 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000d54:	1dba      	adds	r2, r7, #6
 8000d56:	1df9      	adds	r1, r7, #7
 8000d58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <SPI_RxByte+0x38>)
 8000d62:	f006 fa41 	bl	80071e8 <HAL_SPI_TransmitReceive>
  
  return data;
 8000d66:	79bb      	ldrb	r3, [r7, #6]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200002ec 	.word	0x200002ec

08000d74 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000d7c:	f7ff ffdc 	bl	8000d38 <SPI_RxByte>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	701a      	strb	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <SD_ReadyWait+0x34>)
 8000d98:	2232      	movs	r2, #50	@ 0x32
 8000d9a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000d9c:	f7ff ffcc 	bl	8000d38 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000da0:	f7ff ffca 	bl	8000d38 <SPI_RxByte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2bff      	cmp	r3, #255	@ 0xff
 8000dac:	d004      	beq.n	8000db8 <SD_ReadyWait+0x28>
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <SD_ReadyWait+0x34>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f3      	bne.n	8000da0 <SD_ReadyWait+0x10>
  
  return res;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000c3a 	.word	0x20000c3a

08000dc8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000dce:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000dd4:	f7ff ff8a 	bl	8000cec <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	e005      	b.n	8000dea <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000dde:	20ff      	movs	r0, #255	@ 0xff
 8000de0:	f7ff ff90 	bl	8000d04 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	3301      	adds	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	ddf6      	ble.n	8000dde <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000df0:	f7ff ff70 	bl	8000cd4 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000df4:	2340      	movs	r3, #64	@ 0x40
 8000df6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000e08:	2395      	movs	r3, #149	@ 0x95
 8000e0a:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e009      	b.n	8000e26 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000e12:	1d3a      	adds	r2, r7, #4
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff72 	bl	8000d04 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	ddf2      	ble.n	8000e12 <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000e2c:	e002      	b.n	8000e34 <SD_PowerOn+0x6c>
  {
    Count--;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000e34:	f7ff ff80 	bl	8000d38 <SPI_RxByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d002      	beq.n	8000e44 <SD_PowerOn+0x7c>
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f4      	bne.n	8000e2e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000e44:	f7ff ff52 	bl	8000cec <DESELECT>
  SPI_TxByte(0XFF);
 8000e48:	20ff      	movs	r0, #255	@ 0xff
 8000e4a:	f7ff ff5b 	bl	8000d04 <SPI_TxByte>
  
  PowerFlag = 1;
 8000e4e:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <SD_PowerOn+0x94>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000026d 	.word	0x2000026d

08000e60 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <SD_PowerOff+0x14>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000026d 	.word	0x2000026d

08000e78 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	@ (8000e88 <SD_CheckPower+0x10>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	2000026d 	.word	0x2000026d

08000e8c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <SD_RxDataBlock+0x68>)
 8000e98:	220a      	movs	r2, #10
 8000e9a:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000e9c:	f7ff ff4c 	bl	8000d38 <SPI_RxByte>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2bff      	cmp	r3, #255	@ 0xff
 8000ea8:	d104      	bne.n	8000eb4 <SD_RxDataBlock+0x28>
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <SD_RxDataBlock+0x68>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f3      	bne.n	8000e9c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000eb8:	d001      	beq.n	8000ebe <SD_RxDataBlock+0x32>
    return FALSE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e016      	b.n	8000eec <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff55 	bl	8000d74 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff4f 	bl	8000d74 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1ed      	bne.n	8000ebe <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000ee2:	f7ff ff29 	bl	8000d38 <SPI_RxByte>
  SPI_RxByte();
 8000ee6:	f7ff ff27 	bl	8000d38 <SPI_RxByte>
  
  return TRUE;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000c39 	.word	0x20000c39

08000ef8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000f08:	f7ff ff42 	bl	8000d90 <SD_ReadyWait>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2bff      	cmp	r3, #255	@ 0xff
 8000f10:	d001      	beq.n	8000f16 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e040      	b.n	8000f98 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fef3 	bl	8000d04 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	2bfd      	cmp	r3, #253	@ 0xfd
 8000f22:	d031      	beq.n	8000f88 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fee7 	bl	8000d04 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fee0 	bl	8000d04 <SPI_TxByte>
    } while (--wc);
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	73bb      	strb	r3, [r7, #14]
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1eb      	bne.n	8000f28 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000f50:	f7ff fef2 	bl	8000d38 <SPI_RxByte>
    SPI_RxByte();
 8000f54:	f7ff fef0 	bl	8000d38 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000f58:	e00b      	b.n	8000f72 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000f5a:	f7ff feed 	bl	8000d38 <SPI_RxByte>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d006      	beq.n	8000f7a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000f6c:	7b7b      	ldrb	r3, [r7, #13]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000f72:	7b7b      	ldrb	r3, [r7, #13]
 8000f74:	2b40      	cmp	r3, #64	@ 0x40
 8000f76:	d9f0      	bls.n	8000f5a <SD_TxDataBlock+0x62>
 8000f78:	e000      	b.n	8000f7c <SD_TxDataBlock+0x84>
        break;
 8000f7a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000f7c:	bf00      	nop
 8000f7e:	f7ff fedb 	bl	8000d38 <SPI_RxByte>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0fa      	beq.n	8000f7e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	d101      	bne.n	8000f96 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000fac:	f7ff fef0 	bl	8000d90 <SD_ReadyWait>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2bff      	cmp	r3, #255	@ 0xff
 8000fb4:	d001      	beq.n	8000fba <SD_SendCmd+0x1a>
    return 0xFF;
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
 8000fb8:	e040      	b.n	800103c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fea1 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	0e1b      	lsrs	r3, r3, #24
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fe9b 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe95 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe8f 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe8a 	bl	8000d04 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b40      	cmp	r3, #64	@ 0x40
 8000ff8:	d101      	bne.n	8000ffe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000ffa:	2395      	movs	r3, #149	@ 0x95
 8000ffc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b48      	cmp	r3, #72	@ 0x48
 8001002:	d101      	bne.n	8001008 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001004:	2387      	movs	r3, #135	@ 0x87
 8001006:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fe7a 	bl	8000d04 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b4c      	cmp	r3, #76	@ 0x4c
 8001014:	d101      	bne.n	800101a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001016:	f7ff fe8f 	bl	8000d38 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800101a:	230a      	movs	r3, #10
 800101c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800101e:	f7ff fe8b 	bl	8000d38 <SPI_RxByte>
 8001022:	4603      	mov	r3, r0
 8001024:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001026:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800102a:	2b00      	cmp	r3, #0
 800102c:	da05      	bge.n	800103a <SD_SendCmd+0x9a>
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	3b01      	subs	r3, #1
 8001032:	73bb      	strb	r3, [r7, #14]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f1      	bne.n	800101e <SD_SendCmd+0x7e>
  
  return res;
 800103a:	7b7b      	ldrb	r3, [r7, #13]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001054:	2301      	movs	r3, #1
 8001056:	e0d5      	b.n	8001204 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001058:	4b6c      	ldr	r3, [pc, #432]	@ (800120c <SD_disk_initialize+0x1c8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <SD_disk_initialize+0x2a>
    return Stat;        
 8001066:	4b69      	ldr	r3, [pc, #420]	@ (800120c <SD_disk_initialize+0x1c8>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	e0ca      	b.n	8001204 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800106e:	f7ff feab 	bl	8000dc8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001072:	f7ff fe2f 	bl	8000cd4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800107a:	2100      	movs	r1, #0
 800107c:	2040      	movs	r0, #64	@ 0x40
 800107e:	f7ff ff8f 	bl	8000fa0 <SD_SendCmd>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	f040 80a5 	bne.w	80011d4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800108a:	4b61      	ldr	r3, [pc, #388]	@ (8001210 <SD_disk_initialize+0x1cc>)
 800108c:	2264      	movs	r2, #100	@ 0x64
 800108e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001090:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001094:	2048      	movs	r0, #72	@ 0x48
 8001096:	f7ff ff83 	bl	8000fa0 <SD_SendCmd>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d158      	bne.n	8001152 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e00c      	b.n	80010c0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80010a6:	7bfc      	ldrb	r4, [r7, #15]
 80010a8:	f7ff fe46 	bl	8000d38 <SPI_RxByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	f104 0310 	add.w	r3, r4, #16
 80010b4:	443b      	add	r3, r7
 80010b6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3301      	adds	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d9ef      	bls.n	80010a6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80010c6:	7abb      	ldrb	r3, [r7, #10]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 8083 	bne.w	80011d4 <SD_disk_initialize+0x190>
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	2baa      	cmp	r3, #170	@ 0xaa
 80010d2:	d17f      	bne.n	80011d4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80010d4:	2100      	movs	r1, #0
 80010d6:	2077      	movs	r0, #119	@ 0x77
 80010d8:	f7ff ff62 	bl	8000fa0 <SD_SendCmd>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d807      	bhi.n	80010f2 <SD_disk_initialize+0xae>
 80010e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010e6:	2069      	movs	r0, #105	@ 0x69
 80010e8:	f7ff ff5a 	bl	8000fa0 <SD_SendCmd>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80010f2:	4b47      	ldr	r3, [pc, #284]	@ (8001210 <SD_disk_initialize+0x1cc>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1eb      	bne.n	80010d4 <SD_disk_initialize+0x90>
 80010fc:	e000      	b.n	8001100 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80010fe:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001100:	4b43      	ldr	r3, [pc, #268]	@ (8001210 <SD_disk_initialize+0x1cc>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d064      	beq.n	80011d4 <SD_disk_initialize+0x190>
 800110a:	2100      	movs	r1, #0
 800110c:	207a      	movs	r0, #122	@ 0x7a
 800110e:	f7ff ff47 	bl	8000fa0 <SD_SendCmd>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d15d      	bne.n	80011d4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e00c      	b.n	8001138 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800111e:	7bfc      	ldrb	r4, [r7, #15]
 8001120:	f7ff fe0a 	bl	8000d38 <SPI_RxByte>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	f104 0310 	add.w	r3, r4, #16
 800112c:	443b      	add	r3, r7
 800112e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3301      	adds	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d9ef      	bls.n	800111e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800113e:	7a3b      	ldrb	r3, [r7, #8]
 8001140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SD_disk_initialize+0x108>
 8001148:	2306      	movs	r3, #6
 800114a:	e000      	b.n	800114e <SD_disk_initialize+0x10a>
 800114c:	2302      	movs	r3, #2
 800114e:	73bb      	strb	r3, [r7, #14]
 8001150:	e040      	b.n	80011d4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001152:	2100      	movs	r1, #0
 8001154:	2077      	movs	r0, #119	@ 0x77
 8001156:	f7ff ff23 	bl	8000fa0 <SD_SendCmd>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d808      	bhi.n	8001172 <SD_disk_initialize+0x12e>
 8001160:	2100      	movs	r1, #0
 8001162:	2069      	movs	r0, #105	@ 0x69
 8001164:	f7ff ff1c 	bl	8000fa0 <SD_SendCmd>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d801      	bhi.n	8001172 <SD_disk_initialize+0x12e>
 800116e:	2302      	movs	r3, #2
 8001170:	e000      	b.n	8001174 <SD_disk_initialize+0x130>
 8001172:	2301      	movs	r3, #1
 8001174:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d10e      	bne.n	800119a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800117c:	2100      	movs	r1, #0
 800117e:	2077      	movs	r0, #119	@ 0x77
 8001180:	f7ff ff0e 	bl	8000fa0 <SD_SendCmd>
 8001184:	4603      	mov	r3, r0
 8001186:	2b01      	cmp	r3, #1
 8001188:	d80e      	bhi.n	80011a8 <SD_disk_initialize+0x164>
 800118a:	2100      	movs	r1, #0
 800118c:	2069      	movs	r0, #105	@ 0x69
 800118e:	f7ff ff07 	bl	8000fa0 <SD_SendCmd>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d107      	bne.n	80011a8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001198:	e00d      	b.n	80011b6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800119a:	2100      	movs	r1, #0
 800119c:	2041      	movs	r0, #65	@ 0x41
 800119e:	f7ff feff 	bl	8000fa0 <SD_SendCmd>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80011a8:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <SD_disk_initialize+0x1cc>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1e1      	bne.n	8001176 <SD_disk_initialize+0x132>
 80011b2:	e000      	b.n	80011b6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80011b4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <SD_disk_initialize+0x1cc>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <SD_disk_initialize+0x18c>
 80011c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c4:	2050      	movs	r0, #80	@ 0x50
 80011c6:	f7ff feeb 	bl	8000fa0 <SD_SendCmd>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80011d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <SD_disk_initialize+0x1d0>)
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80011da:	f7ff fd87 	bl	8000cec <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80011de:	f7ff fdab 	bl	8000d38 <SPI_RxByte>
  
  if (type) 
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <SD_disk_initialize+0x1c8>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <SD_disk_initialize+0x1c8>)
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e001      	b.n	80011fe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80011fa:	f7ff fe31 	bl	8000e60 <SD_PowerOff>
  }
  
  return Stat;
 80011fe:	4b03      	ldr	r3, [pc, #12]	@ (800120c <SD_disk_initialize+0x1c8>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000c39 	.word	0x20000c39
 8001214:	2000026c 	.word	0x2000026c

08001218 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001228:	2301      	movs	r3, #1
 800122a:	e002      	b.n	8001232 <SD_disk_status+0x1a>
  
  return Stat;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <SD_disk_status+0x24>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20000000 	.word	0x20000000

08001240 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <SD_disk_read+0x1c>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <SD_disk_read+0x20>
    return RES_PARERR;
 800125c:	2304      	movs	r3, #4
 800125e:	e051      	b.n	8001304 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001260:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <SD_disk_read+0xcc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800126e:	2303      	movs	r3, #3
 8001270:	e048      	b.n	8001304 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001272:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <SD_disk_read+0xd0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	025b      	lsls	r3, r3, #9
 8001282:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001284:	f7ff fd26 	bl	8000cd4 <SELECT>
  
  if (count == 1) 
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d111      	bne.n	80012b2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2051      	movs	r0, #81	@ 0x51
 8001292:	f7ff fe85 	bl	8000fa0 <SD_SendCmd>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d129      	bne.n	80012f0 <SD_disk_read+0xb0>
 800129c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a0:	68b8      	ldr	r0, [r7, #8]
 80012a2:	f7ff fdf3 	bl	8000e8c <SD_RxDataBlock>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d021      	beq.n	80012f0 <SD_disk_read+0xb0>
      count = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	e01e      	b.n	80012f0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	2052      	movs	r0, #82	@ 0x52
 80012b6:	f7ff fe73 	bl	8000fa0 <SD_SendCmd>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d117      	bne.n	80012f0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80012c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f7ff fde1 	bl	8000e8c <SD_RxDataBlock>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00a      	beq.n	80012e6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012d6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3b01      	subs	r3, #1
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ed      	bne.n	80012c0 <SD_disk_read+0x80>
 80012e4:	e000      	b.n	80012e8 <SD_disk_read+0xa8>
          break;
 80012e6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80012e8:	2100      	movs	r1, #0
 80012ea:	204c      	movs	r0, #76	@ 0x4c
 80012ec:	f7ff fe58 	bl	8000fa0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80012f0:	f7ff fcfc 	bl	8000cec <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80012f4:	f7ff fd20 	bl	8000d38 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000000 	.word	0x20000000
 8001310:	2000026c 	.word	0x2000026c

08001314 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <SD_disk_write+0x1c>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <SD_disk_write+0x20>
    return RES_PARERR;
 8001330:	2304      	movs	r3, #4
 8001332:	e06b      	b.n	800140c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001334:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <SD_disk_write+0x100>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001342:	2303      	movs	r3, #3
 8001344:	e062      	b.n	800140c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001346:	4b33      	ldr	r3, [pc, #204]	@ (8001414 <SD_disk_write+0x100>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001354:	2302      	movs	r3, #2
 8001356:	e059      	b.n	800140c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001358:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <SD_disk_write+0x104>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800136a:	f7ff fcb3 	bl	8000cd4 <SELECT>
  
  if (count == 1) 
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d110      	bne.n	8001396 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	2058      	movs	r0, #88	@ 0x58
 8001378:	f7ff fe12 	bl	8000fa0 <SD_SendCmd>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d13a      	bne.n	80013f8 <SD_disk_write+0xe4>
 8001382:	21fe      	movs	r1, #254	@ 0xfe
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f7ff fdb7 	bl	8000ef8 <SD_TxDataBlock>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d033      	beq.n	80013f8 <SD_disk_write+0xe4>
      count = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	e030      	b.n	80013f8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <SD_disk_write+0x104>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80013a2:	2100      	movs	r1, #0
 80013a4:	2077      	movs	r0, #119	@ 0x77
 80013a6:	f7ff fdfb 	bl	8000fa0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	2057      	movs	r0, #87	@ 0x57
 80013ae:	f7ff fdf7 	bl	8000fa0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	2059      	movs	r0, #89	@ 0x59
 80013b6:	f7ff fdf3 	bl	8000fa0 <SD_SendCmd>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d11b      	bne.n	80013f8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80013c0:	21fc      	movs	r1, #252	@ 0xfc
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f7ff fd98 	bl	8000ef8 <SD_TxDataBlock>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80013d4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ee      	bne.n	80013c0 <SD_disk_write+0xac>
 80013e2:	e000      	b.n	80013e6 <SD_disk_write+0xd2>
          break;
 80013e4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80013e6:	21fd      	movs	r1, #253	@ 0xfd
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fd85 	bl	8000ef8 <SD_TxDataBlock>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80013f8:	f7ff fc78 	bl	8000cec <DESELECT>
  SPI_RxByte();
 80013fc:	f7ff fc9c 	bl	8000d38 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf14      	ite	ne
 8001406:	2301      	movne	r3, #1
 8001408:	2300      	moveq	r3, #0
 800140a:	b2db      	uxtb	r3, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	2000026c 	.word	0x2000026c

0800141c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08b      	sub	sp, #44	@ 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	603a      	str	r2, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
 8001428:	460b      	mov	r3, r1
 800142a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001436:	2304      	movs	r3, #4
 8001438:	e119      	b.n	800166e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	2b05      	cmp	r3, #5
 8001444:	d129      	bne.n	800149a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d017      	beq.n	800147e <SD_disk_ioctl+0x62>
 800144e:	2b02      	cmp	r3, #2
 8001450:	dc1f      	bgt.n	8001492 <SD_disk_ioctl+0x76>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <SD_disk_ioctl+0x40>
 8001456:	2b01      	cmp	r3, #1
 8001458:	d00b      	beq.n	8001472 <SD_disk_ioctl+0x56>
 800145a:	e01a      	b.n	8001492 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800145c:	f7ff fd0c 	bl	8000e78 <SD_CheckPower>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001466:	f7ff fcfb 	bl	8000e60 <SD_PowerOff>
      res = RES_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001470:	e0fb      	b.n	800166a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001472:	f7ff fca9 	bl	8000dc8 <SD_PowerOn>
      res = RES_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800147c:	e0f5      	b.n	800166a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	1c5c      	adds	r4, r3, #1
 8001482:	f7ff fcf9 	bl	8000e78 <SD_CheckPower>
 8001486:	4603      	mov	r3, r0
 8001488:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800148a:	2300      	movs	r3, #0
 800148c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001490:	e0eb      	b.n	800166a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001492:	2304      	movs	r3, #4
 8001494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001498:	e0e7      	b.n	800166a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800149a:	4b77      	ldr	r3, [pc, #476]	@ (8001678 <SD_disk_ioctl+0x25c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0e0      	b.n	800166e <SD_disk_ioctl+0x252>
    
    SELECT();
 80014ac:	f7ff fc12 	bl	8000cd4 <SELECT>
    
    switch (ctrl) 
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	2b0d      	cmp	r3, #13
 80014b4:	f200 80ca 	bhi.w	800164c <SD_disk_ioctl+0x230>
 80014b8:	a201      	add	r2, pc, #4	@ (adr r2, 80014c0 <SD_disk_ioctl+0xa4>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080015b7 	.word	0x080015b7
 80014c4:	080014f9 	.word	0x080014f9
 80014c8:	080015a7 	.word	0x080015a7
 80014cc:	0800164d 	.word	0x0800164d
 80014d0:	0800164d 	.word	0x0800164d
 80014d4:	0800164d 	.word	0x0800164d
 80014d8:	0800164d 	.word	0x0800164d
 80014dc:	0800164d 	.word	0x0800164d
 80014e0:	0800164d 	.word	0x0800164d
 80014e4:	0800164d 	.word	0x0800164d
 80014e8:	0800164d 	.word	0x0800164d
 80014ec:	080015c9 	.word	0x080015c9
 80014f0:	080015ed 	.word	0x080015ed
 80014f4:	08001611 	.word	0x08001611
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80014f8:	2100      	movs	r1, #0
 80014fa:	2049      	movs	r0, #73	@ 0x49
 80014fc:	f7ff fd50 	bl	8000fa0 <SD_SendCmd>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 80a6 	bne.w	8001654 <SD_disk_ioctl+0x238>
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2110      	movs	r1, #16
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fcbc 	bl	8000e8c <SD_RxDataBlock>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 809c 	beq.w	8001654 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	099b      	lsrs	r3, r3, #6
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10d      	bne.n	8001542 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001526:	7d7b      	ldrb	r3, [r7, #21]
 8001528:	461a      	mov	r2, r3
 800152a:	7d3b      	ldrb	r3, [r7, #20]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	4413      	add	r3, r2
 8001532:	b29b      	uxth	r3, r3
 8001534:	3301      	adds	r3, #1
 8001536:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001538:	8bfb      	ldrh	r3, [r7, #30]
 800153a:	029a      	lsls	r2, r3, #10
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e02d      	b.n	800159e <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001542:	7c7b      	ldrb	r3, [r7, #17]
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	b2da      	uxtb	r2, r3
 800154a:	7dbb      	ldrb	r3, [r7, #22]
 800154c:	09db      	lsrs	r3, r3, #7
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b2da      	uxtb	r2, r3
 8001554:	7d7b      	ldrb	r3, [r7, #21]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0306 	and.w	r3, r3, #6
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3302      	adds	r3, #2
 8001566:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800156a:	7d3b      	ldrb	r3, [r7, #20]
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	b2db      	uxtb	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	b29b      	uxth	r3, r3
 8001578:	4413      	add	r3, r2
 800157a:	b29a      	uxth	r2, r3
 800157c:	7cbb      	ldrb	r3, [r7, #18]
 800157e:	029b      	lsls	r3, r3, #10
 8001580:	b29b      	uxth	r3, r3
 8001582:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001586:	b29b      	uxth	r3, r3
 8001588:	4413      	add	r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	3301      	adds	r3, #1
 800158e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001590:	8bfa      	ldrh	r2, [r7, #30]
 8001592:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001596:	3b09      	subs	r3, #9
 8001598:	409a      	lsls	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80015a4:	e056      	b.n	8001654 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ac:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80015b4:	e055      	b.n	8001662 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80015b6:	f7ff fbeb 	bl	8000d90 <SD_ReadyWait>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2bff      	cmp	r3, #255	@ 0xff
 80015be:	d14b      	bne.n	8001658 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80015c6:	e047      	b.n	8001658 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015c8:	2100      	movs	r1, #0
 80015ca:	2049      	movs	r0, #73	@ 0x49
 80015cc:	f7ff fce8 	bl	8000fa0 <SD_SendCmd>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d142      	bne.n	800165c <SD_disk_ioctl+0x240>
 80015d6:	2110      	movs	r1, #16
 80015d8:	6a38      	ldr	r0, [r7, #32]
 80015da:	f7ff fc57 	bl	8000e8c <SD_RxDataBlock>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03b      	beq.n	800165c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80015ea:	e037      	b.n	800165c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015ec:	2100      	movs	r1, #0
 80015ee:	204a      	movs	r0, #74	@ 0x4a
 80015f0:	f7ff fcd6 	bl	8000fa0 <SD_SendCmd>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d132      	bne.n	8001660 <SD_disk_ioctl+0x244>
 80015fa:	2110      	movs	r1, #16
 80015fc:	6a38      	ldr	r0, [r7, #32]
 80015fe:	f7ff fc45 	bl	8000e8c <SD_RxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d02b      	beq.n	8001660 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800160e:	e027      	b.n	8001660 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001610:	2100      	movs	r1, #0
 8001612:	207a      	movs	r0, #122	@ 0x7a
 8001614:	f7ff fcc4 	bl	8000fa0 <SD_SendCmd>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d116      	bne.n	800164c <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001624:	e00b      	b.n	800163e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001626:	6a3c      	ldr	r4, [r7, #32]
 8001628:	1c63      	adds	r3, r4, #1
 800162a:	623b      	str	r3, [r7, #32]
 800162c:	f7ff fb84 	bl	8000d38 <SPI_RxByte>
 8001630:	4603      	mov	r3, r0
 8001632:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001634:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001638:	3301      	adds	r3, #1
 800163a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800163e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001642:	2b03      	cmp	r3, #3
 8001644:	d9ef      	bls.n	8001626 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 800164c:	2304      	movs	r3, #4
 800164e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001652:	e006      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 8001654:	bf00      	nop
 8001656:	e004      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 8001658:	bf00      	nop
 800165a:	e002      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 800165c:	bf00      	nop
 800165e:	e000      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 8001660:	bf00      	nop
    }
    
    DESELECT();
 8001662:	f7ff fb43 	bl	8000cec <DESELECT>
    SPI_RxByte();
 8001666:	f7ff fb67 	bl	8000d38 <SPI_RxByte>
  }
  
  return res;
 800166a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800166e:	4618      	mov	r0, r3
 8001670:	372c      	adds	r7, #44	@ 0x2c
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000

0800167c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001684:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001688:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001694:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001698:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800169c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016a4:	e000      	b.n	80016a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f9      	beq.n	80016a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016b2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ce:	f000 ff0f 	bl	80024f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d2:	f000 f8d7 	bl	8001884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d6:	f000 fa1f 	bl	8001b18 <MX_GPIO_Init>
  MX_CAN_Init();
 80016da:	f000 f913 	bl	8001904 <MX_CAN_Init>
  MX_I2C1_Init();
 80016de:	f000 f963 	bl	80019a8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016e2:	f000 f9c5 	bl	8001a70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 f9ed 	bl	8001ac4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80016ea:	f000 f98b 	bl	8001a04 <MX_SPI1_Init>
  MX_FATFS_Init();
 80016ee:	f006 fe8b 	bl	8008408 <MX_FATFS_Init>
//    AT24Cxx_t pEeprom;
//  AT24Cxx_Init(&pEeprom, 0x50, &hi2c1);
//  char *text_program_1 = "Program test2,74hc560,20";
//  AT24Cxx_write_buffer_bloking(&pEeprom,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)text_program_1,strlen(text_program_1));

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 80016f2:	2264      	movs	r2, #100	@ 0x64
 80016f4:	4947      	ldr	r1, [pc, #284]	@ (8001814 <main+0x14c>)
 80016f6:	4848      	ldr	r0, [pc, #288]	@ (8001818 <main+0x150>)
 80016f8:	f006 f8c0 	bl	800787c <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_CAN_Start(&hcan);
 80016fc:	4847      	ldr	r0, [pc, #284]	@ (800181c <main+0x154>)
 80016fe:	f001 f941 	bl	8002984 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_BUSOFF );
 8001702:	f240 4111 	movw	r1, #1041	@ 0x411
 8001706:	4845      	ldr	r0, [pc, #276]	@ (800181c <main+0x154>)
 8001708:	f001 fb93 	bl	8002e32 <HAL_CAN_ActivateNotification>

//    for (uint8_t i = 0; i < 5; i++) {
//  	printf("SWO Debug!!!\n");
//    }

  BSP_init();
 800170c:	f00f fb00 	bl	8010d10 <BSP_init>

  Post_task_init();
 8001710:	f00f fb4a 	bl	8010da8 <Post_task_init>
  static OS_event_t const *q_app_post[10];
  OS_task_create(AO_taskPost,
 8001714:	4b42      	ldr	r3, [pc, #264]	@ (8001820 <main+0x158>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	230a      	movs	r3, #10
 800171e:	4a41      	ldr	r2, [pc, #260]	@ (8001824 <main+0x15c>)
 8001720:	2101      	movs	r1, #1
 8001722:	f011 fa7c 	bl	8012c1e <OS_task_create>
  1,
  q_app_post,
  ARRAY_ELEMENT(q_app_post),
  (OS_event_t *)0 );

  eeprom_task_init(&hi2c1,EEPROM_ADDRESS);
 8001726:	2150      	movs	r1, #80	@ 0x50
 8001728:	483f      	ldr	r0, [pc, #252]	@ (8001828 <main+0x160>)
 800172a:	f00e ff45 	bl	80105b8 <eeprom_task_init>
  static OS_event_t const *q_eeprom_event[10];
  OS_task_create( AO_task_eeprom,
 800172e:	4b3f      	ldr	r3, [pc, #252]	@ (800182c <main+0x164>)
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	2300      	movs	r3, #0
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	230a      	movs	r3, #10
 8001738:	4a3d      	ldr	r2, [pc, #244]	@ (8001830 <main+0x168>)
 800173a:	2101      	movs	r1, #1
 800173c:	f011 fa6f 	bl	8012c1e <OS_task_create>
  1,
  q_eeprom_event,
  ARRAY_ELEMENT(q_eeprom_event),
  (OS_event_t *)0 );

  uart_esp32_task_init(&huart1);
 8001740:	483c      	ldr	r0, [pc, #240]	@ (8001834 <main+0x16c>)
 8001742:	f00f fd5d 	bl	8011200 <uart_esp32_task_init>
  static OS_event_t const *q_uart_esp32_event[10];
  OS_task_create(AO_task_uart_esp32,
 8001746:	4b3c      	ldr	r3, [pc, #240]	@ (8001838 <main+0x170>)
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	2300      	movs	r3, #0
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	230a      	movs	r3, #10
 8001750:	4a3a      	ldr	r2, [pc, #232]	@ (800183c <main+0x174>)
 8001752:	2101      	movs	r1, #1
 8001754:	f011 fa63 	bl	8012c1e <OS_task_create>
  1,
  q_uart_esp32_event,
  ARRAY_ELEMENT(q_uart_esp32_event),
  (OS_event_t *)0);

  BlinkyTest_app_init();
 8001758:	f00f fdb4 	bl	80112c4 <BlinkyTest_app_init>
  static OS_event_t const *TestOS_blinky[10]; /* Event queue */
  OS_task_create(
 800175c:	4b38      	ldr	r3, [pc, #224]	@ (8001840 <main+0x178>)
 800175e:	681c      	ldr	r4, [r3, #0]
 8001760:	f00f fb0c 	bl	8010d7c <TestOS_Work>
 8001764:	4603      	mov	r3, r0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	230a      	movs	r3, #10
 800176a:	4a36      	ldr	r2, [pc, #216]	@ (8001844 <main+0x17c>)
 800176c:	2101      	movs	r1, #1
 800176e:	4620      	mov	r0, r4
 8001770:	f011 fa55 	bl	8012c1e <OS_task_create>
  TestOS_blinky,
  ARRAY_ELEMENT(TestOS_blinky),
  TestOS_Work()
  );

  screen_task_init();
 8001774:	f00f fb80 	bl	8010e78 <screen_task_init>
  static OS_event_t const *q_screen[10]; /* Event queue */
  OS_task_create(
 8001778:	4b33      	ldr	r3, [pc, #204]	@ (8001848 <main+0x180>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	2300      	movs	r3, #0
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	230a      	movs	r3, #10
 8001782:	4a32      	ldr	r2, [pc, #200]	@ (800184c <main+0x184>)
 8001784:	2101      	movs	r1, #1
 8001786:	f011 fa4a 	bl	8012c1e <OS_task_create>
  1,
  q_screen,
  ARRAY_ELEMENT(q_screen),
  (OS_event_t *)0);

  ds3231_task_init(&hi2c1,ADDRESS_DS3231);
 800178a:	2168      	movs	r1, #104	@ 0x68
 800178c:	4826      	ldr	r0, [pc, #152]	@ (8001828 <main+0x160>)
 800178e:	f00f fb5f 	bl	8010e50 <ds3231_task_init>

  sd_task_init();
 8001792:	f00f fc15 	bl	8010fc0 <sd_task_init>
  static OS_event_t const *q_sd[10];
  OS_task_create(
 8001796:	4b2e      	ldr	r3, [pc, #184]	@ (8001850 <main+0x188>)
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	2300      	movs	r3, #0
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	230a      	movs	r3, #10
 80017a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001854 <main+0x18c>)
 80017a2:	2102      	movs	r1, #2
 80017a4:	f011 fa3b 	bl	8012c1e <OS_task_create>
  2,
  q_sd,
  ARRAY_ELEMENT(q_sd),
  (OS_event_t *)0);

  can_bus_task_init(&hcan);
 80017a8:	481c      	ldr	r0, [pc, #112]	@ (800181c <main+0x154>)
 80017aa:	f00e fdbb 	bl	8010324 <can_bus_task_init>
  static OS_event_t const *Can_app_event[10];
  OS_task_create( AO_task_can_bus,
 80017ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <main+0x190>)
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	230a      	movs	r3, #10
 80017b8:	4a28      	ldr	r2, [pc, #160]	@ (800185c <main+0x194>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	f011 fa2f 	bl	8012c1e <OS_task_create>
  1,
  Can_app_event,
  ARRAY_ELEMENT(Can_app_event),
  (OS_event_t *)0);

  HAL_Delay(5000);
 80017c0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80017c4:	f000 fef6 	bl	80025b4 <HAL_Delay>
  Screen_begin(&huart2);
 80017c8:	4813      	ldr	r0, [pc, #76]	@ (8001818 <main+0x150>)
 80017ca:	f009 fd9f 	bl	800b30c <Screen_begin>
//  sprintf(string, "Time RTC: %d/%d/%d - %d:%d:%d\n",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]);
//  printf("%s",string);

//  isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
//		  	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));
     isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
 80017ce:	23fa      	movs	r3, #250	@ 0xfa
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <main+0x198>)
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	23fa      	movs	r3, #250	@ 0xfa
 80017d8:	4a22      	ldr	r2, [pc, #136]	@ (8001864 <main+0x19c>)
 80017da:	f240 1131 	movw	r1, #305	@ 0x131
 80017de:	4822      	ldr	r0, [pc, #136]	@ (8001868 <main+0x1a0>)
 80017e0:	f011 f964 	bl	8012aac <isotp_init_link>
		   	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));

  isotp_init_link(&CAN_iso[1], 0x132, can_iso_send_buf1 , sizeof(can_iso_send_buf1)
 80017e4:	23fa      	movs	r3, #250	@ 0xfa
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	4b20      	ldr	r3, [pc, #128]	@ (800186c <main+0x1a4>)
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	23fa      	movs	r3, #250	@ 0xfa
 80017ee:	4a20      	ldr	r2, [pc, #128]	@ (8001870 <main+0x1a8>)
 80017f0:	f44f 7199 	mov.w	r1, #306	@ 0x132
 80017f4:	481f      	ldr	r0, [pc, #124]	@ (8001874 <main+0x1ac>)
 80017f6:	f011 f959 	bl	8012aac <isotp_init_link>
		  	  	  	  	  	  	  	, can_iso_recv_buf1, sizeof(can_iso_recv_buf1));

  isotp_init_link(&CAN_iso[2], 0x134, can_iso_send_buf2 , sizeof(can_iso_send_buf2)
 80017fa:	23fa      	movs	r3, #250	@ 0xfa
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <main+0x1b0>)
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	23fa      	movs	r3, #250	@ 0xfa
 8001804:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <main+0x1b4>)
 8001806:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800180a:	481d      	ldr	r0, [pc, #116]	@ (8001880 <main+0x1b8>)
 800180c:	f011 f94e 	bl	8012aac <isotp_init_link>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint32_t pre;
//  pre = 0;
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <main+0x148>
 8001814:	20000abc 	.word	0x20000abc
 8001818:	2000038c 	.word	0x2000038c
 800181c:	20000270 	.word	0x20000270
 8001820:	080192e8 	.word	0x080192e8
 8001824:	20000b20 	.word	0x20000b20
 8001828:	20000298 	.word	0x20000298
 800182c:	080192e4 	.word	0x080192e4
 8001830:	20000b48 	.word	0x20000b48
 8001834:	20000344 	.word	0x20000344
 8001838:	080192f4 	.word	0x080192f4
 800183c:	20000b70 	.word	0x20000b70
 8001840:	080192f8 	.word	0x080192f8
 8001844:	20000b98 	.word	0x20000b98
 8001848:	080192ec 	.word	0x080192ec
 800184c:	20000bc0 	.word	0x20000bc0
 8001850:	080192f0 	.word	0x080192f0
 8001854:	20000be8 	.word	0x20000be8
 8001858:	08018cb4 	.word	0x08018cb4
 800185c:	20000c10 	.word	0x20000c10
 8001860:	200004d4 	.word	0x200004d4
 8001864:	200005d0 	.word	0x200005d0
 8001868:	20000414 	.word	0x20000414
 800186c:	200006cc 	.word	0x200006cc
 8001870:	200007c8 	.word	0x200007c8
 8001874:	20000454 	.word	0x20000454
 8001878:	200008c4 	.word	0x200008c4
 800187c:	200009c0 	.word	0x200009c0
 8001880:	20000494 	.word	0x20000494

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b090      	sub	sp, #64	@ 0x40
 8001888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 0318 	add.w	r3, r7, #24
 800188e:	2228      	movs	r2, #40	@ 0x28
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f013 fcfe 	bl	8015294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018aa:	2301      	movs	r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ae:	2310      	movs	r3, #16
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b2:	2302      	movs	r3, #2
 80018b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018b6:	2300      	movs	r3, #0
 80018b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018ba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80018be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 feb7 	bl	8006638 <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80018d0:	f000 facb 	bl	8001e6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d4:	230f      	movs	r3, #15
 80018d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d8:	2302      	movs	r3, #2
 80018da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2101      	movs	r1, #1
 80018ec:	4618      	mov	r0, r3
 80018ee:	f005 f925 	bl	8006b3c <HAL_RCC_ClockConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80018f8:	f000 fab7 	bl	8001e6a <Error_Handler>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3740      	adds	r7, #64	@ 0x40
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	@ 0x28
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800190a:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <MX_CAN_Init+0x9c>)
 800190c:	4a25      	ldr	r2, [pc, #148]	@ (80019a4 <MX_CAN_Init+0xa0>)
 800190e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001910:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <MX_CAN_Init+0x9c>)
 8001912:	2204      	movs	r2, #4
 8001914:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001916:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <MX_CAN_Init+0x9c>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <MX_CAN_Init+0x9c>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001922:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <MX_CAN_Init+0x9c>)
 8001924:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001928:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <MX_CAN_Init+0x9c>)
 800192c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001930:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001932:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <MX_CAN_Init+0x9c>)
 8001934:	2200      	movs	r2, #0
 8001936:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001938:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <MX_CAN_Init+0x9c>)
 800193a:	2200      	movs	r2, #0
 800193c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800193e:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <MX_CAN_Init+0x9c>)
 8001940:	2200      	movs	r2, #0
 8001942:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <MX_CAN_Init+0x9c>)
 8001946:	2200      	movs	r2, #0
 8001948:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <MX_CAN_Init+0x9c>)
 800194c:	2200      	movs	r2, #0
 800194e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <MX_CAN_Init+0x9c>)
 8001952:	2200      	movs	r2, #0
 8001954:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001956:	4812      	ldr	r0, [pc, #72]	@ (80019a0 <MX_CAN_Init+0x9c>)
 8001958:	f000 fe50 	bl	80025fc <HAL_CAN_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001962:	f000 fa82 	bl	8001e6a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001966:	2301      	movs	r3, #1
 8001968:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 800196a:	230a      	movs	r3, #10
 800196c:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800196e:	2301      	movs	r3, #1
 8001970:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001986:	2301      	movs	r3, #1
 8001988:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800198e:	463b      	mov	r3, r7
 8001990:	4619      	mov	r1, r3
 8001992:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <MX_CAN_Init+0x9c>)
 8001994:	f000 ff2d 	bl	80027f2 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	@ 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000270 	.word	0x20000270
 80019a4:	40006400 	.word	0x40006400

080019a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019ae:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <MX_I2C1_Init+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019b4:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <MX_I2C1_Init+0x58>)
 80019b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019e6:	f002 f805 	bl	80039f4 <HAL_I2C_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019f0:	f000 fa3b 	bl	8001e6a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000298 	.word	0x20000298
 80019fc:	40005400 	.word	0x40005400
 8001a00:	00061a80 	.word	0x00061a80

08001a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a0a:	4a18      	ldr	r2, [pc, #96]	@ (8001a6c <MX_SPI1_Init+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a16:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a22:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a38:	2218      	movs	r2, #24
 8001a3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a50:	220a      	movs	r2, #10
 8001a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <MX_SPI1_Init+0x64>)
 8001a56:	f005 f9ff 	bl	8006e58 <HAL_SPI_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a60:	f000 fa03 	bl	8001e6a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200002ec 	.word	0x200002ec
 8001a6c:	40013000 	.word	0x40013000

08001a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_USART1_UART_Init+0x4c>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	@ (8001ac0 <MX_USART1_UART_Init+0x50>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <MX_USART1_UART_Init+0x4c>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_USART1_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <MX_USART1_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_USART1_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <MX_USART1_UART_Init+0x4c>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <MX_USART1_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <MX_USART1_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_USART1_UART_Init+0x4c>)
 8001aa8:	f005 fe0d 	bl	80076c6 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ab2:	f000 f9da 	bl	8001e6a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000344 	.word	0x20000344
 8001ac0:	40013800 	.word	0x40013800

08001ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <MX_USART2_UART_Init+0x50>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001ad0:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001afc:	f005 fde3 	bl	80076c6 <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b06:	f000 f9b0 	bl	8001e6a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000038c 	.word	0x2000038c
 8001b14:	40004400 	.word	0x40004400

08001b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <MX_GPIO_Init+0x98>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb0 <MX_GPIO_Init+0x98>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <MX_GPIO_Init+0x98>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <MX_GPIO_Init+0x98>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a19      	ldr	r2, [pc, #100]	@ (8001bb0 <MX_GPIO_Init+0x98>)
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <MX_GPIO_Init+0x98>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4814      	ldr	r0, [pc, #80]	@ (8001bb4 <MX_GPIO_Init+0x9c>)
 8001b62:	f001 ff2f 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4813      	ldr	r0, [pc, #76]	@ (8001bb8 <MX_GPIO_Init+0xa0>)
 8001b6c:	f001 ff2a 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_PIN_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
 8001b70:	2302      	movs	r3, #2
 8001b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	4619      	mov	r1, r3
 8001b86:	480b      	ldr	r0, [pc, #44]	@ (8001bb4 <MX_GPIO_Init+0x9c>)
 8001b88:	f001 fd98 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_GPIO_Init+0xa0>)
 8001ba4:	f001 fd8a 	bl	80036bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ba8:	bf00      	nop
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010800 	.word	0x40010800
 8001bb8:	40010c00 	.word	0x40010c00

08001bbc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d10c      	bne.n	8001bee <HAL_UARTEx_RxEventCallback+0x32>
		// Call to callback function screen
		Screen_RX_data(dataRX);
 8001bd4:	4809      	ldr	r0, [pc, #36]	@ (8001bfc <HAL_UARTEx_RxEventCallback+0x40>)
 8001bd6:	f009 fc1d 	bl	800b414 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 8001bda:	2264      	movs	r2, #100	@ 0x64
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <HAL_UARTEx_RxEventCallback+0x40>)
 8001be0:	f013 fb58 	bl	8015294 <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8001be4:	2264      	movs	r2, #100	@ 0x64
 8001be6:	4905      	ldr	r1, [pc, #20]	@ (8001bfc <HAL_UARTEx_RxEventCallback+0x40>)
 8001be8:	4803      	ldr	r0, [pc, #12]	@ (8001bf8 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001bea:	f005 fe47 	bl	800787c <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000038c 	.word	0x2000038c
 8001bfc:	20000abc 	.word	0x20000abc

08001c00 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance) {

		
	}
  /* Transmit complete wait eeprom write */
	if (AO_task_eeprom->dispatch != NULL && AO_task_eeprom->init != NULL ) {
 8001c08:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_I2C_MemTxCpltCallback+0x34>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <HAL_I2C_MemTxCpltCallback+0x2a>
 8001c12:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_I2C_MemTxCpltCallback+0x34>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_I2C_MemTxCpltCallback+0x2a>
	  OS_task_post_event(AO_task_eeprom, WAIT_WRITE_TIMEOUT, (uint8_t *)0, 0);
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_I2C_MemTxCpltCallback+0x34>)
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	2300      	movs	r3, #0
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	f011 f89b 	bl	8012d60 <OS_task_post_event>
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	080192e4 	.word	0x080192e4

08001c38 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c48:	6018      	str	r0, [r3, #0]
	uint8_t payload[500];
  uint16_t act_size = 0;
 8001c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4e:	f5a3 73fb 	sub.w	r3, r3, #502	@ 0x1f6
 8001c52:	2200      	movs	r2, #0
 8001c54:	801a      	strh	r2, [r3, #0]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5a:	f5a3 70fe 	sub.w	r0, r3, #508	@ 0x1fc
 8001c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d8c <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001c60:	4a4b      	ldr	r2, [pc, #300]	@ (8001d90 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001c62:	2101      	movs	r1, #1
 8001c64:	6800      	ldr	r0, [r0, #0]
 8001c66:	f000 ffc3 	bl	8002bf0 <HAL_CAN_GetRxMessage>
//    if (CAN_iso[1].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
//      isotp_receive(&CAN_iso[1], payload, sizeof(payload), &act_size);
//      get_data_testing_finish(&_Screen,DEVICE_1,payload);
//    }
//  }
   if (RxHeader.StdId == 0x471) {
 8001c6a:	4b49      	ldr	r3, [pc, #292]	@ (8001d90 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f240 4271 	movw	r2, #1137	@ 0x471
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d128      	bne.n	8001cc8 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>
     isotp_on_can_message(&CAN_iso[0], RxData, RxHeader.DLC);
 8001c76:	4b46      	ldr	r3, [pc, #280]	@ (8001d90 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4943      	ldr	r1, [pc, #268]	@ (8001d8c <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001c80:	4844      	ldr	r0, [pc, #272]	@ (8001d94 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001c82:	f010 fd95 	bl	80127b0 <isotp_on_can_message>
       if(RxData[0] == 0x30) {
 8001c86:	4b41      	ldr	r3, [pc, #260]	@ (8001d8c <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b30      	cmp	r3, #48	@ 0x30
 8001c8c:	d106      	bne.n	8001c9c <HAL_CAN_RxFifo1MsgPendingCallback+0x64>
         OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 8001c8e:	4b42      	ldr	r3, [pc, #264]	@ (8001d98 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	2300      	movs	r3, #0
 8001c94:	2200      	movs	r2, #0
 8001c96:	2103      	movs	r1, #3
 8001c98:	f011 f862 	bl	8012d60 <OS_task_post_event>
       }
     //printf("%x,%c,%c,%c,%c,%c,%c,%c\n",RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
     if (CAN_iso[0].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d94 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d16d      	bne.n	8001d82 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[0], payload, sizeof(payload), &act_size);
 8001ca6:	f107 030a 	add.w	r3, r7, #10
 8001caa:	f107 010c 	add.w	r1, r7, #12
 8001cae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001cb2:	4838      	ldr	r0, [pc, #224]	@ (8001d94 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001cb4:	f010 fece 	bl	8012a54 <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_1,payload);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4836      	ldr	r0, [pc, #216]	@ (8001d9c <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001cc2:	f00e f93f 	bl	800ff44 <get_data_testing_finish>
     if (CAN_iso[2].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
       isotp_receive(&CAN_iso[2], payload, sizeof(payload), &act_size);
       get_data_testing_finish(&_Screen,DEVICE_3,payload);
     }
   }
}
 8001cc6:	e05c      	b.n	8001d82 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
   } else if (RxHeader.StdId == 0x472) {
 8001cc8:	4b31      	ldr	r3, [pc, #196]	@ (8001d90 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f240 4272 	movw	r2, #1138	@ 0x472
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d128      	bne.n	8001d26 <HAL_CAN_RxFifo1MsgPendingCallback+0xee>
     isotp_on_can_message(&CAN_iso[1], RxData, RxHeader.DLC);
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d90 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	492b      	ldr	r1, [pc, #172]	@ (8001d8c <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001cde:	4830      	ldr	r0, [pc, #192]	@ (8001da0 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001ce0:	f010 fd66 	bl	80127b0 <isotp_on_can_message>
     if(RxData[0] == 0x30) {
 8001ce4:	4b29      	ldr	r3, [pc, #164]	@ (8001d8c <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b30      	cmp	r3, #48	@ 0x30
 8001cea:	d106      	bne.n	8001cfa <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
       OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 8001cec:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2103      	movs	r1, #3
 8001cf6:	f011 f833 	bl	8012d60 <OS_task_post_event>
     if (CAN_iso[1].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8001cfa:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001cfc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d13e      	bne.n	8001d82 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[1], payload, sizeof(payload), &act_size);
 8001d04:	f107 030a 	add.w	r3, r7, #10
 8001d08:	f107 010c 	add.w	r1, r7, #12
 8001d0c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d10:	4823      	ldr	r0, [pc, #140]	@ (8001da0 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001d12:	f010 fe9f 	bl	8012a54 <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_2,payload);
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	481f      	ldr	r0, [pc, #124]	@ (8001d9c <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001d20:	f00e f910 	bl	800ff44 <get_data_testing_finish>
}
 8001d24:	e02d      	b.n	8001d82 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
   } else if (RxHeader.StdId == 0x473) {
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f240 4273 	movw	r2, #1139	@ 0x473
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d127      	bne.n	8001d82 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
     isotp_on_can_message(&CAN_iso[2], RxData, RxHeader.DLC);
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4914      	ldr	r1, [pc, #80]	@ (8001d8c <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001d3c:	4819      	ldr	r0, [pc, #100]	@ (8001da4 <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 8001d3e:	f010 fd37 	bl	80127b0 <isotp_on_can_message>
     if(RxData[0] == 0x30) {
 8001d42:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b30      	cmp	r3, #48	@ 0x30
 8001d48:	d106      	bne.n	8001d58 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>
       OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2200      	movs	r2, #0
 8001d52:	2103      	movs	r1, #3
 8001d54:	f011 f804 	bl	8012d60 <OS_task_post_event>
     if (CAN_iso[2].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8001d58:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001d5a:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d10f      	bne.n	8001d82 <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[2], payload, sizeof(payload), &act_size);
 8001d62:	f107 030a 	add.w	r3, r7, #10
 8001d66:	f107 010c 	add.w	r1, r7, #12
 8001d6a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d6e:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 8001d70:	f010 fe70 	bl	8012a54 <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_3,payload);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	4807      	ldr	r0, [pc, #28]	@ (8001d9c <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001d7e:	f00e f8e1 	bl	800ff44 <get_data_testing_finish>
}
 8001d82:	bf00      	nop
 8001d84:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000408 	.word	0x20000408
 8001d90:	200003ec 	.word	0x200003ec
 8001d94:	20000414 	.word	0x20000414
 8001d98:	08018cb4 	.word	0x08018cb4
 8001d9c:	20000c78 	.word	0x20000c78
 8001da0:	20000454 	.word	0x20000454
 8001da4:	20000494 	.word	0x20000494

08001da8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	uint32_t lastError = HAL_CAN_GetError(hcan);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f001 fa7d 	bl	80032b0 <HAL_CAN_GetError>
 8001db6:	60f8      	str	r0, [r7, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_write>:

int _write(int file, char *ptr, int len) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e009      	b.n	8001de6 <_write+0x26>
        ITM_SendChar(ptr[i]);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fc4e 	bl	800167c <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	dbf1      	blt.n	8001dd2 <_write+0x12>
    }
    return len;
 8001dee:	687b      	ldr	r3, [r7, #4]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <isotp_user_send_can>:

/* FUNCTION USING IN CAN ISO TP */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	4613      	mov	r3, r2
 8001e04:	71fb      	strb	r3, [r7, #7]
  TxHeader.DLC = size;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <isotp_user_send_can+0x48>)
 8001e0a:	6113      	str	r3, [r2, #16]
  TxHeader.StdId = arbitration_id;
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e40 <isotp_user_send_can+0x48>)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6013      	str	r3, [r2, #0]
  TxHeader.IDE = CAN_ID_STD;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <isotp_user_send_can+0x48>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <isotp_user_send_can+0x48>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]

  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) == HAL_OK) {
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <isotp_user_send_can+0x4c>)
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	4907      	ldr	r1, [pc, #28]	@ (8001e40 <isotp_user_send_can+0x48>)
 8001e24:	4808      	ldr	r0, [pc, #32]	@ (8001e48 <isotp_user_send_can+0x50>)
 8001e26:	f000 fdf1 	bl	8002a0c <HAL_CAN_AddTxMessage>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <isotp_user_send_can+0x3c>
	  return ISOTP_RET_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e001      	b.n	8001e38 <isotp_user_send_can+0x40>
  }
  return ISOTP_RET_ERROR;
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200003d4 	.word	0x200003d4
 8001e44:	20000410 	.word	0x20000410
 8001e48:	20000270 	.word	0x20000270

08001e4c <isotp_user_get_ms>:


uint32_t isotp_user_get_ms(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001e50:	f000 fba6 	bl	80025a0 <HAL_GetTick>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <isotp_user_debug>:

void isotp_user_debug(const char* message, ...) {
 8001e5a:	b40f      	push	{r0, r1, r2, r3}
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	b004      	add	sp, #16
 8001e68:	4770      	bx	lr

08001e6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e6e:	b672      	cpsid	i
}
 8001e70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e72:	bf00      	nop
 8001e74:	e7fd      	b.n	8001e72 <Error_Handler+0x8>
	...

08001e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_MspInit+0x5c>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	4a14      	ldr	r2, [pc, #80]	@ (8001ed4 <HAL_MspInit+0x5c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6193      	str	r3, [r2, #24]
 8001e8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <HAL_MspInit+0x5c>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <HAL_MspInit+0x5c>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed4 <HAL_MspInit+0x5c>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <HAL_MspInit+0x5c>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_MspInit+0x60>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <HAL_MspInit+0x60>)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40010000 	.word	0x40010000

08001edc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a28      	ldr	r2, [pc, #160]	@ (8001f98 <HAL_CAN_MspInit+0xbc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d149      	bne.n	8001f90 <HAL_CAN_MspInit+0xb4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001efc:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <HAL_CAN_MspInit+0xc0>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	4a26      	ldr	r2, [pc, #152]	@ (8001f9c <HAL_CAN_MspInit+0xc0>)
 8001f02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	61d3      	str	r3, [r2, #28]
 8001f08:	4b24      	ldr	r3, [pc, #144]	@ (8001f9c <HAL_CAN_MspInit+0xc0>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <HAL_CAN_MspInit+0xc0>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a20      	ldr	r2, [pc, #128]	@ (8001f9c <HAL_CAN_MspInit+0xc0>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <HAL_CAN_MspInit+0xc0>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3a:	f107 0310 	add.w	r3, r7, #16
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4817      	ldr	r0, [pc, #92]	@ (8001fa0 <HAL_CAN_MspInit+0xc4>)
 8001f42:	f001 fbbb 	bl	80036bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4811      	ldr	r0, [pc, #68]	@ (8001fa0 <HAL_CAN_MspInit+0xc4>)
 8001f5c:	f001 fbae 	bl	80036bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2013      	movs	r0, #19
 8001f66:	f001 faa4 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001f6a:	2013      	movs	r0, #19
 8001f6c:	f001 fabd 	bl	80034ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	2015      	movs	r0, #21
 8001f76:	f001 fa9c 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001f7a:	2015      	movs	r0, #21
 8001f7c:	f001 fab5 	bl	80034ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	2016      	movs	r0, #22
 8001f86:	f001 fa94 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001f8a:	2016      	movs	r0, #22
 8001f8c:	f001 faad 	bl	80034ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40006400 	.word	0x40006400
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010800 	.word	0x40010800

08001fa4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <HAL_I2C_MspInit+0x80>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d12b      	bne.n	800201c <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc4:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <HAL_I2C_MspInit+0x84>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a17      	ldr	r2, [pc, #92]	@ (8002028 <HAL_I2C_MspInit+0x84>)
 8001fca:	f043 0308 	orr.w	r3, r3, #8
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <HAL_I2C_MspInit+0x84>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fdc:	23c0      	movs	r3, #192	@ 0xc0
 8001fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe0:	2312      	movs	r3, #18
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	4619      	mov	r1, r3
 8001fee:	480f      	ldr	r0, [pc, #60]	@ (800202c <HAL_I2C_MspInit+0x88>)
 8001ff0:	f001 fb64 	bl	80036bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <HAL_I2C_MspInit+0x84>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8002028 <HAL_I2C_MspInit+0x84>)
 8001ffa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ffe:	61d3      	str	r3, [r2, #28]
 8002000:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_I2C_MspInit+0x84>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	201f      	movs	r0, #31
 8002012:	f001 fa4e 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002016:	201f      	movs	r0, #31
 8002018:	f001 fa67 	bl	80034ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40005400 	.word	0x40005400
 8002028:	40021000 	.word	0x40021000
 800202c:	40010c00 	.word	0x40010c00

08002030 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <HAL_SPI_MspInit+0x88>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d12f      	bne.n	80020b0 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002050:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <HAL_SPI_MspInit+0x8c>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a19      	ldr	r2, [pc, #100]	@ (80020bc <HAL_SPI_MspInit+0x8c>)
 8002056:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <HAL_SPI_MspInit+0x8c>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_SPI_MspInit+0x8c>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a13      	ldr	r2, [pc, #76]	@ (80020bc <HAL_SPI_MspInit+0x8c>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_SPI_MspInit+0x8c>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002080:	23a0      	movs	r3, #160	@ 0xa0
 8002082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4619      	mov	r1, r3
 8002092:	480b      	ldr	r0, [pc, #44]	@ (80020c0 <HAL_SPI_MspInit+0x90>)
 8002094:	f001 fb12 	bl	80036bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002098:	2340      	movs	r3, #64	@ 0x40
 800209a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	4619      	mov	r1, r3
 80020aa:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <HAL_SPI_MspInit+0x90>)
 80020ac:	f001 fb06 	bl	80036bc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80020b0:	bf00      	nop
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40013000 	.word	0x40013000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010800 	.word	0x40010800

080020c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	@ 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a3b      	ldr	r2, [pc, #236]	@ (80021cc <HAL_UART_MspInit+0x108>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d132      	bne.n	800214a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e4:	4b3a      	ldr	r3, [pc, #232]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a39      	ldr	r2, [pc, #228]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 80020ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b37      	ldr	r3, [pc, #220]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fc:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4a33      	ldr	r2, [pc, #204]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	6193      	str	r3, [r2, #24]
 8002108:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 0318 	add.w	r3, r7, #24
 8002126:	4619      	mov	r1, r3
 8002128:	482a      	ldr	r0, [pc, #168]	@ (80021d4 <HAL_UART_MspInit+0x110>)
 800212a:	f001 fac7 	bl	80036bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0318 	add.w	r3, r7, #24
 8002140:	4619      	mov	r1, r3
 8002142:	4824      	ldr	r0, [pc, #144]	@ (80021d4 <HAL_UART_MspInit+0x110>)
 8002144:	f001 faba 	bl	80036bc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002148:	e03c      	b.n	80021c4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a22      	ldr	r2, [pc, #136]	@ (80021d8 <HAL_UART_MspInit+0x114>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d137      	bne.n	80021c4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002154:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	4a1d      	ldr	r2, [pc, #116]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 800215a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800215e:	61d3      	str	r3, [r2, #28]
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a17      	ldr	r2, [pc, #92]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <HAL_UART_MspInit+0x10c>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002184:	2304      	movs	r3, #4
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	f107 0318 	add.w	r3, r7, #24
 8002194:	4619      	mov	r1, r3
 8002196:	480f      	ldr	r0, [pc, #60]	@ (80021d4 <HAL_UART_MspInit+0x110>)
 8002198:	f001 fa90 	bl	80036bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800219c:	2308      	movs	r3, #8
 800219e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 0318 	add.w	r3, r7, #24
 80021ac:	4619      	mov	r1, r3
 80021ae:	4809      	ldr	r0, [pc, #36]	@ (80021d4 <HAL_UART_MspInit+0x110>)
 80021b0:	f001 fa84 	bl	80036bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	2026      	movs	r0, #38	@ 0x26
 80021ba:	f001 f97a 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021be:	2026      	movs	r0, #38	@ 0x26
 80021c0:	f001 f993 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	@ 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40013800 	.word	0x40013800
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010800 	.word	0x40010800
 80021d8:	40004400 	.word	0x40004400

080021dc <SDTimer_Handler>:
/* USER CODE BEGIN PV */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80021e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <SDTimer_Handler+0x3c>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <SDTimer_Handler+0x1c>
    Timer1--;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <SDTimer_Handler+0x3c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <SDTimer_Handler+0x3c>)
 80021f6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <SDTimer_Handler+0x40>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <SDTimer_Handler+0x34>
    Timer2--;
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <SDTimer_Handler+0x40>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <SDTimer_Handler+0x40>)
 800220e:	701a      	strb	r2, [r3, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000c39 	.word	0x20000c39
 800221c:	20000c3a 	.word	0x20000c3a

08002220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <NMI_Handler+0x4>

08002228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <MemManage_Handler+0x4>

08002238 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <UsageFault_Handler+0x4>

08002248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8002272:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <SysTick_Handler+0x6c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3301      	adds	r3, #1
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <SysTick_Handler+0x6c>)
 800227e:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002280:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <SysTick_Handler+0x6c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b09      	cmp	r3, #9
 8002288:	d904      	bls.n	8002294 <SysTick_Handler+0x28>
	  {
	    FatFsCnt = 0;
 800228a:	4b13      	ldr	r3, [pc, #76]	@ (80022d8 <SysTick_Handler+0x6c>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002290:	f7ff ffa4 	bl	80021dc <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002294:	f000 f972 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  OS_TimeEvt_tick();
 8002298:	f010 fdd0 	bl	8012e3c <OS_TimeEvt_tick>

  if (!HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 800229c:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <SysTick_Handler+0x70>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	480f      	ldr	r0, [pc, #60]	@ (80022e0 <SysTick_Handler+0x74>)
 80022a4:	f000 fc81 	bl	8002baa <HAL_CAN_IsTxMessagePending>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <SysTick_Handler+0x62>
//	  isotp_poll(&CAN_iso[0]);
	   for(uint8_t i = 0; i < 3; i++) {
 80022ae:	2300      	movs	r3, #0
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	e009      	b.n	80022c8 <SysTick_Handler+0x5c>
	     isotp_poll(&CAN_iso[i]);
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	019b      	lsls	r3, r3, #6
 80022b8:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <SysTick_Handler+0x78>)
 80022ba:	4413      	add	r3, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f010 fc1c 	bl	8012afa <isotp_poll>
	   for(uint8_t i = 0; i < 3; i++) {
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	3301      	adds	r3, #1
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d9f2      	bls.n	80022b4 <SysTick_Handler+0x48>
	   }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000c38 	.word	0x20000c38
 80022dc:	20000410 	.word	0x20000410
 80022e0:	20000270 	.word	0x20000270
 80022e4:	20000414 	.word	0x20000414

080022e8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80022ee:	f000 fdc5 	bl	8002e7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000270 	.word	0x20000270

080022fc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002300:	4802      	ldr	r0, [pc, #8]	@ (800230c <CAN1_RX1_IRQHandler+0x10>)
 8002302:	f000 fdbb 	bl	8002e7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000270 	.word	0x20000270

08002310 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002314:	4802      	ldr	r0, [pc, #8]	@ (8002320 <CAN1_SCE_IRQHandler+0x10>)
 8002316:	f000 fdb1 	bl	8002e7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000270 	.word	0x20000270

08002324 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002328:	4802      	ldr	r0, [pc, #8]	@ (8002334 <I2C1_EV_IRQHandler+0x10>)
 800232a:	f002 fa03 	bl	8004734 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000298 	.word	0x20000298

08002338 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <USART2_IRQHandler+0x10>)
 800233e:	f005 fafb 	bl	8007938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000038c 	.word	0x2000038c

0800234c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return 1;
 8002350:	2301      	movs	r3, #1
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <_kill>:

int _kill(int pid, int sig)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002364:	f013 f89c 	bl	80154a0 <__errno>
 8002368:	4603      	mov	r3, r0
 800236a:	2216      	movs	r2, #22
 800236c:	601a      	str	r2, [r3, #0]
  return -1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <_exit>:

void _exit (int status)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002382:	f04f 31ff 	mov.w	r1, #4294967295
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ffe7 	bl	800235a <_kill>
  while (1) {}    /* Make sure we hang here */
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <_exit+0x12>

08002390 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e00a      	b.n	80023b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023a2:	f3af 8000 	nop.w
 80023a6:	4601      	mov	r1, r0
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	60ba      	str	r2, [r7, #8]
 80023ae:	b2ca      	uxtb	r2, r1
 80023b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	dbf0      	blt.n	80023a2 <_read+0x12>
  }

  return len;
 80023c0:	687b      	ldr	r3, [r7, #4]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023f0:	605a      	str	r2, [r3, #4]
  return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <_isatty>:

int _isatty(int file)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
	...

0800242c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002434:	4a14      	ldr	r2, [pc, #80]	@ (8002488 <_sbrk+0x5c>)
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <_sbrk+0x60>)
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002440:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <_sbrk+0x64>)
 800244a:	4a12      	ldr	r2, [pc, #72]	@ (8002494 <_sbrk+0x68>)
 800244c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	429a      	cmp	r2, r3
 800245a:	d207      	bcs.n	800246c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800245c:	f013 f820 	bl	80154a0 <__errno>
 8002460:	4603      	mov	r3, r0
 8002462:	220c      	movs	r2, #12
 8002464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	e009      	b.n	8002480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002472:	4b07      	ldr	r3, [pc, #28]	@ (8002490 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	4a05      	ldr	r2, [pc, #20]	@ (8002490 <_sbrk+0x64>)
 800247c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20005000 	.word	0x20005000
 800248c:	00000400 	.word	0x00000400
 8002490:	20000c3c 	.word	0x20000c3c
 8002494:	200021d8 	.word	0x200021d8

08002498 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a4:	f7ff fff8 	bl	8002498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a8:	480b      	ldr	r0, [pc, #44]	@ (80024d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024aa:	490c      	ldr	r1, [pc, #48]	@ (80024dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024ac:	4a0c      	ldr	r2, [pc, #48]	@ (80024e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024c0:	4c09      	ldr	r4, [pc, #36]	@ (80024e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ce:	f012 ffed 	bl	80154ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024d2:	f7ff f8f9 	bl	80016c8 <main>
  bx lr
 80024d6:	4770      	bx	lr
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024dc:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80024e0:	080197f8 	.word	0x080197f8
  ldr r2, =_sbss
 80024e4:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80024e8:	200021d4 	.word	0x200021d4

080024ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC1_2_IRQHandler>
	...

080024f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_Init+0x28>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a07      	ldr	r2, [pc, #28]	@ (8002518 <HAL_Init+0x28>)
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002500:	2003      	movs	r0, #3
 8002502:	f000 ffcb 	bl	800349c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002506:	200f      	movs	r0, #15
 8002508:	f000 f808 	bl	800251c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800250c:	f7ff fcb4 	bl	8001e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000

0800251c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_InitTick+0x54>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_InitTick+0x58>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002532:	fbb3 f3f1 	udiv	r3, r3, r1
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f000 ffe3 	bl	8003506 <HAL_SYSTICK_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00e      	b.n	8002568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d80a      	bhi.n	8002566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002550:	2200      	movs	r2, #0
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f000 ffab 	bl	80034b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800255c:	4a06      	ldr	r2, [pc, #24]	@ (8002578 <HAL_InitTick+0x5c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000004 	.word	0x20000004
 8002574:	2000000c 	.word	0x2000000c
 8002578:	20000008 	.word	0x20000008

0800257c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_IncTick+0x1c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_IncTick+0x20>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a03      	ldr	r2, [pc, #12]	@ (800259c <HAL_IncTick+0x20>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	2000000c 	.word	0x2000000c
 800259c:	20000c40 	.word	0x20000c40

080025a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b02      	ldr	r3, [pc, #8]	@ (80025b0 <HAL_GetTick+0x10>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000c40 	.word	0x20000c40

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffe0 	bl	80025a0 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000000c 	.word	0x2000000c

080025fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0ed      	b.n	80027ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fc5e 	bl	8001edc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002630:	f7ff ffb6 	bl	80025a0 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002636:	e012      	b.n	800265e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002638:	f7ff ffb2 	bl	80025a0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b0a      	cmp	r3, #10
 8002644:	d90b      	bls.n	800265e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2205      	movs	r2, #5
 8002656:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0c5      	b.n	80027ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0e5      	beq.n	8002638 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0202 	bic.w	r2, r2, #2
 800267a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800267c:	f7ff ff90 	bl	80025a0 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002682:	e012      	b.n	80026aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002684:	f7ff ff8c 	bl	80025a0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b0a      	cmp	r3, #10
 8002690:	d90b      	bls.n	80026aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2205      	movs	r2, #5
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e09f      	b.n	80027ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e5      	bne.n	8002684 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7e1b      	ldrb	r3, [r3, #24]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d108      	bne.n	80026d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e007      	b.n	80026e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	7e5b      	ldrb	r3, [r3, #25]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d108      	bne.n	80026fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e007      	b.n	800270c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800270a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7e9b      	ldrb	r3, [r3, #26]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d108      	bne.n	8002726 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0220 	orr.w	r2, r2, #32
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e007      	b.n	8002736 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0220 	bic.w	r2, r2, #32
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7edb      	ldrb	r3, [r3, #27]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0210 	bic.w	r2, r2, #16
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e007      	b.n	8002760 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0210 	orr.w	r2, r2, #16
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7f1b      	ldrb	r3, [r3, #28]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d108      	bne.n	800277a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0208 	orr.w	r2, r2, #8
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e007      	b.n	800278a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0208 	bic.w	r2, r2, #8
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7f5b      	ldrb	r3, [r3, #29]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0204 	orr.w	r2, r2, #4
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e007      	b.n	80027b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0204 	bic.w	r2, r2, #4
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	ea42 0103 	orr.w	r1, r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	1e5a      	subs	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b087      	sub	sp, #28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002808:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d003      	beq.n	8002818 <HAL_CAN_ConfigFilter+0x26>
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b02      	cmp	r3, #2
 8002814:	f040 80aa 	bne.w	800296c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2201      	movs	r2, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d123      	bne.n	800289a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43db      	mvns	r3, r3
 800285c:	401a      	ands	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002874:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3248      	adds	r2, #72	@ 0x48
 800287a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800288e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002890:	6979      	ldr	r1, [r7, #20]
 8002892:	3348      	adds	r3, #72	@ 0x48
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d122      	bne.n	80028e8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3248      	adds	r2, #72	@ 0x48
 80028c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028de:	6979      	ldr	r1, [r7, #20]
 80028e0:	3348      	adds	r3, #72	@ 0x48
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002902:	e007      	b.n	8002914 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	431a      	orrs	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43db      	mvns	r3, r3
 8002926:	401a      	ands	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800292e:	e007      	b.n	8002940 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	431a      	orrs	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	431a      	orrs	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800295e:	f023 0201 	bic.w	r2, r3, #1
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e006      	b.n	800297a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d12e      	bne.n	80029f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029b0:	f7ff fdf6 	bl	80025a0 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029b6:	e012      	b.n	80029de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029b8:	f7ff fdf2 	bl	80025a0 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b0a      	cmp	r3, #10
 80029c4:	d90b      	bls.n	80029de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2205      	movs	r2, #5
 80029d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e012      	b.n	8002a04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e5      	bne.n	80029b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e006      	b.n	8002a04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	@ 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a20:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a2a:	7ffb      	ldrb	r3, [r7, #31]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d003      	beq.n	8002a38 <HAL_CAN_AddTxMessage+0x2c>
 8002a30:	7ffb      	ldrb	r3, [r7, #31]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	f040 80ad 	bne.w	8002b92 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8095 	beq.w	8002b82 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	0e1b      	lsrs	r3, r3, #24
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a62:	2201      	movs	r2, #1
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10d      	bne.n	8002a90 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a7e:	68f9      	ldr	r1, [r7, #12]
 8002a80:	6809      	ldr	r1, [r1, #0]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3318      	adds	r3, #24
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	440b      	add	r3, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e00f      	b.n	8002ab0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a9a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002aa0:	68f9      	ldr	r1, [r7, #12]
 8002aa2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002aa4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3318      	adds	r3, #24
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	440b      	add	r3, r1
 8002aae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3318      	adds	r3, #24
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	440b      	add	r3, r1
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	7d1b      	ldrb	r3, [r3, #20]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d111      	bne.n	8002af0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3318      	adds	r3, #24
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	6811      	ldr	r1, [r2, #0]
 8002ae0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	3318      	adds	r3, #24
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	440b      	add	r3, r1
 8002aec:	3304      	adds	r3, #4
 8002aee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3307      	adds	r3, #7
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	061a      	lsls	r2, r3, #24
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3306      	adds	r3, #6
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	041b      	lsls	r3, r3, #16
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3305      	adds	r3, #5
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	3204      	adds	r2, #4
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	4610      	mov	r0, r2
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	6811      	ldr	r1, [r2, #0]
 8002b18:	ea43 0200 	orr.w	r2, r3, r0
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	440b      	add	r3, r1
 8002b22:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002b26:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3303      	adds	r3, #3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	061a      	lsls	r2, r3, #24
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3302      	adds	r3, #2
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	4313      	orrs	r3, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	7812      	ldrb	r2, [r2, #0]
 8002b48:	4610      	mov	r0, r2
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	6811      	ldr	r1, [r2, #0]
 8002b4e:	ea43 0200 	orr.w	r2, r3, r0
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	440b      	add	r3, r1
 8002b58:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3318      	adds	r3, #24
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	4413      	add	r3, r2
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	6811      	ldr	r1, [r2, #0]
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3318      	adds	r3, #24
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	440b      	add	r3, r1
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e00e      	b.n	8002ba0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e006      	b.n	8002ba0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
  }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3724      	adds	r7, #36	@ 0x24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bbe:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d002      	beq.n	8002bcc <HAL_CAN_IsTxMessagePending+0x22>
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d10b      	bne.n	8002be4 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	069b      	lsls	r3, r3, #26
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	069b      	lsls	r3, r3, #26
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002be0:	2301      	movs	r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002be4:	68fb      	ldr	r3, [r7, #12]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d003      	beq.n	8002c14 <HAL_CAN_GetRxMessage+0x24>
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	f040 8103 	bne.w	8002e1a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10e      	bne.n	8002c38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0f7      	b.n	8002e28 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0e8      	b.n	8002e28 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	331b      	adds	r3, #27
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	4413      	add	r3, r2
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0204 	and.w	r2, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10c      	bne.n	8002c8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	331b      	adds	r3, #27
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	4413      	add	r3, r2
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0d5b      	lsrs	r3, r3, #21
 8002c84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e00b      	b.n	8002ca6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	331b      	adds	r3, #27
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	4413      	add	r3, r2
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	331b      	adds	r3, #27
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	4413      	add	r3, r2
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0202 	and.w	r2, r3, #2
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	331b      	adds	r3, #27
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3304      	adds	r3, #4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	611a      	str	r2, [r3, #16]
 8002cda:	e00b      	b.n	8002cf4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	331b      	adds	r3, #27
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3304      	adds	r3, #4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 020f 	and.w	r2, r3, #15
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	331b      	adds	r3, #27
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	4413      	add	r3, r2
 8002d00:	3304      	adds	r3, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	331b      	adds	r3, #27
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	4413      	add	r3, r2
 8002d18:	3304      	adds	r3, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0a1a      	lsrs	r2, r3, #8
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0c1a      	lsrs	r2, r3, #16
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	3302      	adds	r3, #2
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	0e1a      	lsrs	r2, r3, #24
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	3303      	adds	r3, #3
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0a1a      	lsrs	r2, r3, #8
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	3305      	adds	r3, #5
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	0c1a      	lsrs	r2, r3, #16
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	3306      	adds	r3, #6
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	0e1a      	lsrs	r2, r3, #24
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	3307      	adds	r3, #7
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d108      	bne.n	8002e06 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0220 	orr.w	r2, r2, #32
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	e007      	b.n	8002e16 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0220 	orr.w	r2, r2, #32
 8002e14:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e006      	b.n	8002e28 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e42:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d002      	beq.n	8002e50 <HAL_CAN_ActivateNotification+0x1e>
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d109      	bne.n	8002e64 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6959      	ldr	r1, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e006      	b.n	8002e72 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	@ 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d07c      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f983 	bl	80031ea <HAL_CAN_TxMailbox0CompleteCallback>
 8002ee4:	e016      	b.n	8002f14 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef8:	e00c      	b.n	8002f14 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f0c:	e002      	b.n	8002f14 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f986 	bl	8003220 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d024      	beq.n	8002f68 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f962 	bl	80031fc <HAL_CAN_TxMailbox1CompleteCallback>
 8002f38:	e016      	b.n	8002f68 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d004      	beq.n	8002f4e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4c:	e00c      	b.n	8002f68 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d004      	beq.n	8002f62 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f60:	e002      	b.n	8002f68 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f965 	bl	8003232 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d024      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f941 	bl	800320e <HAL_CAN_TxMailbox2CompleteCallback>
 8002f8c:	e016      	b.n	8002fbc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa0:	e00c      	b.n	8002fbc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb4:	e002      	b.n	8002fbc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f944 	bl	8003244 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2210      	movs	r2, #16
 8002fde:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d006      	beq.n	8003002 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f933 	bl	8003268 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f91b 	bl	8003256 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2210      	movs	r2, #16
 8003042:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2208      	movs	r2, #8
 800305e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f90a 	bl	800327a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d009      	beq.n	8003084 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe fdda 	bl	8001c38 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2210      	movs	r2, #16
 800309e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f8f3 	bl	800328c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d006      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2208      	movs	r2, #8
 80030c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f8eb 	bl	800329e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d07b      	beq.n	80031ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d072      	beq.n	80031c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	f043 0302 	orr.w	r3, r3, #2
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003136:	2b00      	cmp	r3, #0
 8003138:	d043      	beq.n	80031c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d03e      	beq.n	80031c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800314a:	2b60      	cmp	r3, #96	@ 0x60
 800314c:	d02b      	beq.n	80031a6 <HAL_CAN_IRQHandler+0x32a>
 800314e:	2b60      	cmp	r3, #96	@ 0x60
 8003150:	d82e      	bhi.n	80031b0 <HAL_CAN_IRQHandler+0x334>
 8003152:	2b50      	cmp	r3, #80	@ 0x50
 8003154:	d022      	beq.n	800319c <HAL_CAN_IRQHandler+0x320>
 8003156:	2b50      	cmp	r3, #80	@ 0x50
 8003158:	d82a      	bhi.n	80031b0 <HAL_CAN_IRQHandler+0x334>
 800315a:	2b40      	cmp	r3, #64	@ 0x40
 800315c:	d019      	beq.n	8003192 <HAL_CAN_IRQHandler+0x316>
 800315e:	2b40      	cmp	r3, #64	@ 0x40
 8003160:	d826      	bhi.n	80031b0 <HAL_CAN_IRQHandler+0x334>
 8003162:	2b30      	cmp	r3, #48	@ 0x30
 8003164:	d010      	beq.n	8003188 <HAL_CAN_IRQHandler+0x30c>
 8003166:	2b30      	cmp	r3, #48	@ 0x30
 8003168:	d822      	bhi.n	80031b0 <HAL_CAN_IRQHandler+0x334>
 800316a:	2b10      	cmp	r3, #16
 800316c:	d002      	beq.n	8003174 <HAL_CAN_IRQHandler+0x2f8>
 800316e:	2b20      	cmp	r3, #32
 8003170:	d005      	beq.n	800317e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003172:	e01d      	b.n	80031b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	f043 0308 	orr.w	r3, r3, #8
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800317c:	e019      	b.n	80031b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	f043 0310 	orr.w	r3, r3, #16
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003186:	e014      	b.n	80031b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	f043 0320 	orr.w	r3, r3, #32
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003190:	e00f      	b.n	80031b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800319a:	e00a      	b.n	80031b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031a4:	e005      	b.n	80031b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031ae:	e000      	b.n	80031b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80031b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80031c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2204      	movs	r2, #4
 80031c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fe fde3 	bl	8001da8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80031e2:	bf00      	nop
 80031e4:	3728      	adds	r7, #40	@ 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr
	...

080032c8 <__NVIC_SetPriorityGrouping>:
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d8:	4b0c      	ldr	r3, [pc, #48]	@ (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032e4:	4013      	ands	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fa:	4a04      	ldr	r2, [pc, #16]	@ (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	60d3      	str	r3, [r2, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_GetPriorityGrouping>:
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003314:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <__NVIC_GetPriorityGrouping+0x18>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	f003 0307 	and.w	r3, r3, #7
}
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_EnableIRQ>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	2b00      	cmp	r3, #0
 800333c:	db0b      	blt.n	8003356 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	f003 021f 	and.w	r2, r3, #31
 8003344:	4906      	ldr	r1, [pc, #24]	@ (8003360 <__NVIC_EnableIRQ+0x34>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2001      	movs	r0, #1
 800334e:	fa00 f202 	lsl.w	r2, r0, r2
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_SetPendingIRQ>:
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	2b00      	cmp	r3, #0
 8003374:	db0c      	blt.n	8003390 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	4907      	ldr	r1, [pc, #28]	@ (800339c <__NVIC_SetPendingIRQ+0x38>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2001      	movs	r0, #1
 8003386:	fa00 f202 	lsl.w	r2, r0, r2
 800338a:	3340      	adds	r3, #64	@ 0x40
 800338c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_SetPriority>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	6039      	str	r1, [r7, #0]
 80033aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	db0a      	blt.n	80033ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	490c      	ldr	r1, [pc, #48]	@ (80033ec <__NVIC_SetPriority+0x4c>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	440b      	add	r3, r1
 80033c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80033c8:	e00a      	b.n	80033e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4908      	ldr	r1, [pc, #32]	@ (80033f0 <__NVIC_SetPriority+0x50>)
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	3b04      	subs	r3, #4
 80033d8:	0112      	lsls	r2, r2, #4
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	440b      	add	r3, r1
 80033de:	761a      	strb	r2, [r3, #24]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	e000e100 	.word	0xe000e100
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <NVIC_EncodePriority>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	@ 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f1c3 0307 	rsb	r3, r3, #7
 800340e:	2b04      	cmp	r3, #4
 8003410:	bf28      	it	cs
 8003412:	2304      	movcs	r3, #4
 8003414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3304      	adds	r3, #4
 800341a:	2b06      	cmp	r3, #6
 800341c:	d902      	bls.n	8003424 <NVIC_EncodePriority+0x30>
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3b03      	subs	r3, #3
 8003422:	e000      	b.n	8003426 <NVIC_EncodePriority+0x32>
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003428:	f04f 32ff 	mov.w	r2, #4294967295
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	401a      	ands	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800343c:	f04f 31ff 	mov.w	r1, #4294967295
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	43d9      	mvns	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	4313      	orrs	r3, r2
}
 800344e:	4618      	mov	r0, r3
 8003450:	3724      	adds	r7, #36	@ 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <SysTick_Config>:
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003468:	d301      	bcc.n	800346e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <SysTick_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	210f      	movs	r1, #15
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f7ff ff90 	bl	80033a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <SysTick_Config+0x40>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <SysTick_Config+0x40>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff0f 	bl	80032c8 <__NVIC_SetPriorityGrouping>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff24 	bl	8003310 <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff90 	bl	80033f4 <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff5f 	bl	80033a0 <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff17 	bl	800332c <__NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffa2 	bl	8003458 <SysTick_Config>
 8003514:	4603      	mov	r3, r0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff19 	bl	8003364 <__NVIC_SetPendingIRQ>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d008      	beq.n	8003564 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2204      	movs	r2, #4
 8003556:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e020      	b.n	80035a6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 020e 	bic.w	r2, r2, #14
 8003572:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d005      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2204      	movs	r2, #4
 80035cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	e051      	b.n	8003678 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 020e 	bic.w	r2, r2, #14
 80035e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a22      	ldr	r2, [pc, #136]	@ (8003684 <HAL_DMA_Abort_IT+0xd4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d029      	beq.n	8003652 <HAL_DMA_Abort_IT+0xa2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a21      	ldr	r2, [pc, #132]	@ (8003688 <HAL_DMA_Abort_IT+0xd8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_DMA_Abort_IT+0x9e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1f      	ldr	r2, [pc, #124]	@ (800368c <HAL_DMA_Abort_IT+0xdc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01a      	beq.n	8003648 <HAL_DMA_Abort_IT+0x98>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1e      	ldr	r2, [pc, #120]	@ (8003690 <HAL_DMA_Abort_IT+0xe0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d012      	beq.n	8003642 <HAL_DMA_Abort_IT+0x92>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1c      	ldr	r2, [pc, #112]	@ (8003694 <HAL_DMA_Abort_IT+0xe4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00a      	beq.n	800363c <HAL_DMA_Abort_IT+0x8c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1b      	ldr	r2, [pc, #108]	@ (8003698 <HAL_DMA_Abort_IT+0xe8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d102      	bne.n	8003636 <HAL_DMA_Abort_IT+0x86>
 8003630:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003634:	e00e      	b.n	8003654 <HAL_DMA_Abort_IT+0xa4>
 8003636:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800363a:	e00b      	b.n	8003654 <HAL_DMA_Abort_IT+0xa4>
 800363c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003640:	e008      	b.n	8003654 <HAL_DMA_Abort_IT+0xa4>
 8003642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003646:	e005      	b.n	8003654 <HAL_DMA_Abort_IT+0xa4>
 8003648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800364c:	e002      	b.n	8003654 <HAL_DMA_Abort_IT+0xa4>
 800364e:	2310      	movs	r3, #16
 8003650:	e000      	b.n	8003654 <HAL_DMA_Abort_IT+0xa4>
 8003652:	2301      	movs	r3, #1
 8003654:	4a11      	ldr	r2, [pc, #68]	@ (800369c <HAL_DMA_Abort_IT+0xec>)
 8003656:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
    } 
  }
  return status;
 8003678:	7bfb      	ldrb	r3, [r7, #15]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40020008 	.word	0x40020008
 8003688:	4002001c 	.word	0x4002001c
 800368c:	40020030 	.word	0x40020030
 8003690:	40020044 	.word	0x40020044
 8003694:	40020058 	.word	0x40020058
 8003698:	4002006c 	.word	0x4002006c
 800369c:	40020000 	.word	0x40020000

080036a0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80036ae:	b2db      	uxtb	r3, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036bc:	b480      	push	{r7}
 80036be:	b08b      	sub	sp, #44	@ 0x2c
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036c6:	2300      	movs	r3, #0
 80036c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ce:	e169      	b.n	80039a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036d0:	2201      	movs	r2, #1
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	f040 8158 	bne.w	800399e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a9a      	ldr	r2, [pc, #616]	@ (800395c <HAL_GPIO_Init+0x2a0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d05e      	beq.n	80037b6 <HAL_GPIO_Init+0xfa>
 80036f8:	4a98      	ldr	r2, [pc, #608]	@ (800395c <HAL_GPIO_Init+0x2a0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d875      	bhi.n	80037ea <HAL_GPIO_Init+0x12e>
 80036fe:	4a98      	ldr	r2, [pc, #608]	@ (8003960 <HAL_GPIO_Init+0x2a4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d058      	beq.n	80037b6 <HAL_GPIO_Init+0xfa>
 8003704:	4a96      	ldr	r2, [pc, #600]	@ (8003960 <HAL_GPIO_Init+0x2a4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d86f      	bhi.n	80037ea <HAL_GPIO_Init+0x12e>
 800370a:	4a96      	ldr	r2, [pc, #600]	@ (8003964 <HAL_GPIO_Init+0x2a8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d052      	beq.n	80037b6 <HAL_GPIO_Init+0xfa>
 8003710:	4a94      	ldr	r2, [pc, #592]	@ (8003964 <HAL_GPIO_Init+0x2a8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d869      	bhi.n	80037ea <HAL_GPIO_Init+0x12e>
 8003716:	4a94      	ldr	r2, [pc, #592]	@ (8003968 <HAL_GPIO_Init+0x2ac>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d04c      	beq.n	80037b6 <HAL_GPIO_Init+0xfa>
 800371c:	4a92      	ldr	r2, [pc, #584]	@ (8003968 <HAL_GPIO_Init+0x2ac>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d863      	bhi.n	80037ea <HAL_GPIO_Init+0x12e>
 8003722:	4a92      	ldr	r2, [pc, #584]	@ (800396c <HAL_GPIO_Init+0x2b0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d046      	beq.n	80037b6 <HAL_GPIO_Init+0xfa>
 8003728:	4a90      	ldr	r2, [pc, #576]	@ (800396c <HAL_GPIO_Init+0x2b0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d85d      	bhi.n	80037ea <HAL_GPIO_Init+0x12e>
 800372e:	2b12      	cmp	r3, #18
 8003730:	d82a      	bhi.n	8003788 <HAL_GPIO_Init+0xcc>
 8003732:	2b12      	cmp	r3, #18
 8003734:	d859      	bhi.n	80037ea <HAL_GPIO_Init+0x12e>
 8003736:	a201      	add	r2, pc, #4	@ (adr r2, 800373c <HAL_GPIO_Init+0x80>)
 8003738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373c:	080037b7 	.word	0x080037b7
 8003740:	08003791 	.word	0x08003791
 8003744:	080037a3 	.word	0x080037a3
 8003748:	080037e5 	.word	0x080037e5
 800374c:	080037eb 	.word	0x080037eb
 8003750:	080037eb 	.word	0x080037eb
 8003754:	080037eb 	.word	0x080037eb
 8003758:	080037eb 	.word	0x080037eb
 800375c:	080037eb 	.word	0x080037eb
 8003760:	080037eb 	.word	0x080037eb
 8003764:	080037eb 	.word	0x080037eb
 8003768:	080037eb 	.word	0x080037eb
 800376c:	080037eb 	.word	0x080037eb
 8003770:	080037eb 	.word	0x080037eb
 8003774:	080037eb 	.word	0x080037eb
 8003778:	080037eb 	.word	0x080037eb
 800377c:	080037eb 	.word	0x080037eb
 8003780:	08003799 	.word	0x08003799
 8003784:	080037ad 	.word	0x080037ad
 8003788:	4a79      	ldr	r2, [pc, #484]	@ (8003970 <HAL_GPIO_Init+0x2b4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800378e:	e02c      	b.n	80037ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	623b      	str	r3, [r7, #32]
          break;
 8003796:	e029      	b.n	80037ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	3304      	adds	r3, #4
 800379e:	623b      	str	r3, [r7, #32]
          break;
 80037a0:	e024      	b.n	80037ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	3308      	adds	r3, #8
 80037a8:	623b      	str	r3, [r7, #32]
          break;
 80037aa:	e01f      	b.n	80037ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	330c      	adds	r3, #12
 80037b2:	623b      	str	r3, [r7, #32]
          break;
 80037b4:	e01a      	b.n	80037ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d102      	bne.n	80037c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037be:	2304      	movs	r3, #4
 80037c0:	623b      	str	r3, [r7, #32]
          break;
 80037c2:	e013      	b.n	80037ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d105      	bne.n	80037d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037cc:	2308      	movs	r3, #8
 80037ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	611a      	str	r2, [r3, #16]
          break;
 80037d6:	e009      	b.n	80037ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037d8:	2308      	movs	r3, #8
 80037da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	615a      	str	r2, [r3, #20]
          break;
 80037e2:	e003      	b.n	80037ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037e4:	2300      	movs	r3, #0
 80037e6:	623b      	str	r3, [r7, #32]
          break;
 80037e8:	e000      	b.n	80037ec <HAL_GPIO_Init+0x130>
          break;
 80037ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2bff      	cmp	r3, #255	@ 0xff
 80037f0:	d801      	bhi.n	80037f6 <HAL_GPIO_Init+0x13a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	e001      	b.n	80037fa <HAL_GPIO_Init+0x13e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3304      	adds	r3, #4
 80037fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2bff      	cmp	r3, #255	@ 0xff
 8003800:	d802      	bhi.n	8003808 <HAL_GPIO_Init+0x14c>
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	e002      	b.n	800380e <HAL_GPIO_Init+0x152>
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	3b08      	subs	r3, #8
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	210f      	movs	r1, #15
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	6a39      	ldr	r1, [r7, #32]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	431a      	orrs	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80b1 	beq.w	800399e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800383c:	4b4d      	ldr	r3, [pc, #308]	@ (8003974 <HAL_GPIO_Init+0x2b8>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	4a4c      	ldr	r2, [pc, #304]	@ (8003974 <HAL_GPIO_Init+0x2b8>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6193      	str	r3, [r2, #24]
 8003848:	4b4a      	ldr	r3, [pc, #296]	@ (8003974 <HAL_GPIO_Init+0x2b8>)
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003854:	4a48      	ldr	r2, [pc, #288]	@ (8003978 <HAL_GPIO_Init+0x2bc>)
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	089b      	lsrs	r3, r3, #2
 800385a:	3302      	adds	r3, #2
 800385c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003860:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	220f      	movs	r2, #15
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4013      	ands	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a40      	ldr	r2, [pc, #256]	@ (800397c <HAL_GPIO_Init+0x2c0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d013      	beq.n	80038a8 <HAL_GPIO_Init+0x1ec>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3f      	ldr	r2, [pc, #252]	@ (8003980 <HAL_GPIO_Init+0x2c4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00d      	beq.n	80038a4 <HAL_GPIO_Init+0x1e8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3e      	ldr	r2, [pc, #248]	@ (8003984 <HAL_GPIO_Init+0x2c8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <HAL_GPIO_Init+0x1e4>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3d      	ldr	r2, [pc, #244]	@ (8003988 <HAL_GPIO_Init+0x2cc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d101      	bne.n	800389c <HAL_GPIO_Init+0x1e0>
 8003898:	2303      	movs	r3, #3
 800389a:	e006      	b.n	80038aa <HAL_GPIO_Init+0x1ee>
 800389c:	2304      	movs	r3, #4
 800389e:	e004      	b.n	80038aa <HAL_GPIO_Init+0x1ee>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e002      	b.n	80038aa <HAL_GPIO_Init+0x1ee>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_GPIO_Init+0x1ee>
 80038a8:	2300      	movs	r3, #0
 80038aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ac:	f002 0203 	and.w	r2, r2, #3
 80038b0:	0092      	lsls	r2, r2, #2
 80038b2:	4093      	lsls	r3, r2
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038ba:	492f      	ldr	r1, [pc, #188]	@ (8003978 <HAL_GPIO_Init+0x2bc>)
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	3302      	adds	r3, #2
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038d4:	4b2d      	ldr	r3, [pc, #180]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	492c      	ldr	r1, [pc, #176]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]
 80038e0:	e006      	b.n	80038f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038e2:	4b2a      	ldr	r3, [pc, #168]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	4928      	ldr	r1, [pc, #160]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038fc:	4b23      	ldr	r3, [pc, #140]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	4922      	ldr	r1, [pc, #136]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	60cb      	str	r3, [r1, #12]
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800390a:	4b20      	ldr	r3, [pc, #128]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	43db      	mvns	r3, r3
 8003912:	491e      	ldr	r1, [pc, #120]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 8003914:	4013      	ands	r3, r2
 8003916:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003924:	4b19      	ldr	r3, [pc, #100]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	4918      	ldr	r1, [pc, #96]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
 8003930:	e006      	b.n	8003940 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003932:	4b16      	ldr	r3, [pc, #88]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	43db      	mvns	r3, r3
 800393a:	4914      	ldr	r1, [pc, #80]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 800393c:	4013      	ands	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d021      	beq.n	8003990 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800394c:	4b0f      	ldr	r3, [pc, #60]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	490e      	ldr	r1, [pc, #56]	@ (800398c <HAL_GPIO_Init+0x2d0>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
 8003958:	e021      	b.n	800399e <HAL_GPIO_Init+0x2e2>
 800395a:	bf00      	nop
 800395c:	10320000 	.word	0x10320000
 8003960:	10310000 	.word	0x10310000
 8003964:	10220000 	.word	0x10220000
 8003968:	10210000 	.word	0x10210000
 800396c:	10120000 	.word	0x10120000
 8003970:	10110000 	.word	0x10110000
 8003974:	40021000 	.word	0x40021000
 8003978:	40010000 	.word	0x40010000
 800397c:	40010800 	.word	0x40010800
 8003980:	40010c00 	.word	0x40010c00
 8003984:	40011000 	.word	0x40011000
 8003988:	40011400 	.word	0x40011400
 800398c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003990:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <HAL_GPIO_Init+0x304>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	43db      	mvns	r3, r3
 8003998:	4909      	ldr	r1, [pc, #36]	@ (80039c0 <HAL_GPIO_Init+0x304>)
 800399a:	4013      	ands	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	3301      	adds	r3, #1
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	fa22 f303 	lsr.w	r3, r2, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f47f ae8e 	bne.w	80036d0 <HAL_GPIO_Init+0x14>
  }
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	372c      	adds	r7, #44	@ 0x2c
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	40010400 	.word	0x40010400

080039c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
 80039d0:	4613      	mov	r3, r2
 80039d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039d4:	787b      	ldrb	r3, [r7, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039e0:	e003      	b.n	80039ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	041a      	lsls	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	611a      	str	r2, [r3, #16]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e12b      	b.n	8003c5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe fac2 	bl	8001fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	@ 0x24
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a58:	f003 f9b8 	bl	8006dcc <HAL_RCC_GetPCLK1Freq>
 8003a5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4a81      	ldr	r2, [pc, #516]	@ (8003c68 <HAL_I2C_Init+0x274>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d807      	bhi.n	8003a78 <HAL_I2C_Init+0x84>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a80      	ldr	r2, [pc, #512]	@ (8003c6c <HAL_I2C_Init+0x278>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	bf94      	ite	ls
 8003a70:	2301      	movls	r3, #1
 8003a72:	2300      	movhi	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e006      	b.n	8003a86 <HAL_I2C_Init+0x92>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a7d      	ldr	r2, [pc, #500]	@ (8003c70 <HAL_I2C_Init+0x27c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bf94      	ite	ls
 8003a80:	2301      	movls	r3, #1
 8003a82:	2300      	movhi	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e0e7      	b.n	8003c5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a78      	ldr	r2, [pc, #480]	@ (8003c74 <HAL_I2C_Init+0x280>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0c9b      	lsrs	r3, r3, #18
 8003a98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a6a      	ldr	r2, [pc, #424]	@ (8003c68 <HAL_I2C_Init+0x274>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d802      	bhi.n	8003ac8 <HAL_I2C_Init+0xd4>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	e009      	b.n	8003adc <HAL_I2C_Init+0xe8>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	4a69      	ldr	r2, [pc, #420]	@ (8003c78 <HAL_I2C_Init+0x284>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	3301      	adds	r3, #1
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003aee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	495c      	ldr	r1, [pc, #368]	@ (8003c68 <HAL_I2C_Init+0x274>)
 8003af8:	428b      	cmp	r3, r1
 8003afa:	d819      	bhi.n	8003b30 <HAL_I2C_Init+0x13c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1e59      	subs	r1, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b10:	400b      	ands	r3, r1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_I2C_Init+0x138>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1e59      	subs	r1, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2a:	e051      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	e04f      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d111      	bne.n	8003b5c <HAL_I2C_Init+0x168>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e58      	subs	r0, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	440b      	add	r3, r1
 8003b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e012      	b.n	8003b82 <HAL_I2C_Init+0x18e>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e58      	subs	r0, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	0099      	lsls	r1, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b72:	3301      	adds	r3, #1
 8003b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Init+0x196>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e022      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10e      	bne.n	8003bb0 <HAL_I2C_Init+0x1bc>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1e58      	subs	r0, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	440b      	add	r3, r1
 8003ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bae:	e00f      	b.n	8003bd0 <HAL_I2C_Init+0x1dc>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e58      	subs	r0, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	0099      	lsls	r1, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	6809      	ldr	r1, [r1, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6911      	ldr	r1, [r2, #16]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68d2      	ldr	r2, [r2, #12]
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	000186a0 	.word	0x000186a0
 8003c6c:	001e847f 	.word	0x001e847f
 8003c70:	003d08ff 	.word	0x003d08ff
 8003c74:	431bde83 	.word	0x431bde83
 8003c78:	10624dd3 	.word	0x10624dd3

08003c7c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	2b80      	cmp	r3, #128	@ 0x80
 8003c90:	d103      	bne.n	8003c9a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	817b      	strh	r3, [r7, #10]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	813b      	strh	r3, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cbe:	f7fe fc6f 	bl	80025a0 <HAL_GetTick>
 8003cc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	f040 80d9 	bne.w	8003e84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2319      	movs	r3, #25
 8003cd8:	2201      	movs	r2, #1
 8003cda:	496d      	ldr	r1, [pc, #436]	@ (8003e90 <HAL_I2C_Mem_Write+0x1ec>)
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f002 fa29 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e0cc      	b.n	8003e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_I2C_Mem_Write+0x56>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e0c5      	b.n	8003e86 <HAL_I2C_Mem_Write+0x1e2>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d007      	beq.n	8003d20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2221      	movs	r2, #33	@ 0x21
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2240      	movs	r2, #64	@ 0x40
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a4d      	ldr	r2, [pc, #308]	@ (8003e94 <HAL_I2C_Mem_Write+0x1f0>)
 8003d60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d62:	88f8      	ldrh	r0, [r7, #6]
 8003d64:	893a      	ldrh	r2, [r7, #8]
 8003d66:	8979      	ldrh	r1, [r7, #10]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	4603      	mov	r3, r0
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f001 ffb8 	bl	8005ce8 <I2C_RequestMemoryWrite>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d052      	beq.n	8003e24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e081      	b.n	8003e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f002 faee 	bl	8006368 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00d      	beq.n	8003dae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d107      	bne.n	8003daa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e06b      	b.n	8003e86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	781a      	ldrb	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d11b      	bne.n	8003e24 <HAL_I2C_Mem_Write+0x180>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d017      	beq.n	8003e24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1aa      	bne.n	8003d82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f002 fae1 	bl	80063f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d107      	bne.n	8003e54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e016      	b.n	8003e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	00100002 	.word	0x00100002
 8003e94:	ffff0000 	.word	0xffff0000

08003e98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	@ 0x30
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	817b      	strh	r3, [r7, #10]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	813b      	strh	r3, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eb6:	f7fe fb73 	bl	80025a0 <HAL_GetTick>
 8003eba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	f040 8250 	bne.w	800436a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	2319      	movs	r3, #25
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4982      	ldr	r1, [pc, #520]	@ (80040dc <HAL_I2C_Mem_Read+0x244>)
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f002 f92d 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e243      	b.n	800436c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2C_Mem_Read+0x5a>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e23c      	b.n	800436c <HAL_I2C_Mem_Read+0x4d4>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d007      	beq.n	8003f18 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2222      	movs	r2, #34	@ 0x22
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2240      	movs	r2, #64	@ 0x40
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4a62      	ldr	r2, [pc, #392]	@ (80040e0 <HAL_I2C_Mem_Read+0x248>)
 8003f58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f5a:	88f8      	ldrh	r0, [r7, #6]
 8003f5c:	893a      	ldrh	r2, [r7, #8]
 8003f5e:	8979      	ldrh	r1, [r7, #10]
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	4603      	mov	r3, r0
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f001 ff52 	bl	8005e14 <I2C_RequestMemoryRead>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e1f8      	b.n	800436c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d113      	bne.n	8003faa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e1cc      	b.n	8004344 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d11e      	bne.n	8003ff0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fc2:	b672      	cpsid	i
}
 8003fc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fec:	b662      	cpsie	i
}
 8003fee:	e035      	b.n	800405c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d11e      	bne.n	8004036 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004006:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004008:	b672      	cpsid	i
}
 800400a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004032:	b662      	cpsie	i
}
 8004034:	e012      	b.n	800405c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004044:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800405c:	e172      	b.n	8004344 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	2b03      	cmp	r3, #3
 8004064:	f200 811f 	bhi.w	80042a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	2b01      	cmp	r3, #1
 800406e:	d123      	bne.n	80040b8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004072:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f002 fa39 	bl	80064ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e173      	b.n	800436c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040b6:	e145      	b.n	8004344 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d152      	bne.n	8004166 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c6:	2200      	movs	r2, #0
 80040c8:	4906      	ldr	r1, [pc, #24]	@ (80040e4 <HAL_I2C_Mem_Read+0x24c>)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f002 f832 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e148      	b.n	800436c <HAL_I2C_Mem_Read+0x4d4>
 80040da:	bf00      	nop
 80040dc:	00100002 	.word	0x00100002
 80040e0:	ffff0000 	.word	0xffff0000
 80040e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80040e8:	b672      	cpsid	i
}
 80040ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800412e:	b662      	cpsie	i
}
 8004130:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004164:	e0ee      	b.n	8004344 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416c:	2200      	movs	r2, #0
 800416e:	4981      	ldr	r1, [pc, #516]	@ (8004374 <HAL_I2C_Mem_Read+0x4dc>)
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f001 ffdf 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0f5      	b.n	800436c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004190:	b672      	cpsid	i
}
 8004192:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004378 <HAL_I2C_Mem_Read+0x4e0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	08db      	lsrs	r3, r3, #3
 80041cc:	4a6b      	ldr	r2, [pc, #428]	@ (800437c <HAL_I2C_Mem_Read+0x4e4>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0a1a      	lsrs	r2, r3, #8
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	00da      	lsls	r2, r3, #3
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d118      	bne.n	800421e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800420e:	b662      	cpsie	i
}
 8004210:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0a6      	b.n	800436c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b04      	cmp	r3, #4
 800422a:	d1d9      	bne.n	80041e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800426e:	b662      	cpsie	i
}
 8004270:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042a4:	e04e      	b.n	8004344 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f002 f91e 	bl	80064ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e058      	b.n	800436c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d124      	bne.n	8004344 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d107      	bne.n	8004312 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004310:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	f47f ae88 	bne.w	800405e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e000      	b.n	800436c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800436a:	2302      	movs	r3, #2
  }
}
 800436c:	4618      	mov	r0, r3
 800436e:	3728      	adds	r7, #40	@ 0x28
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	00010004 	.word	0x00010004
 8004378:	20000004 	.word	0x20000004
 800437c:	14f8b589 	.word	0x14f8b589

08004380 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	817b      	strh	r3, [r7, #10]
 8004392:	460b      	mov	r3, r1
 8004394:	813b      	strh	r3, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	f040 808a 	bne.w	80044c0 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80043ac:	4b47      	ldr	r3, [pc, #284]	@ (80044cc <HAL_I2C_Mem_Write_IT+0x14c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	4a47      	ldr	r2, [pc, #284]	@ (80044d0 <HAL_I2C_Mem_Write_IT+0x150>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	0a1a      	lsrs	r2, r3, #8
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009a      	lsls	r2, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d112      	bne.n	80043f8 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
 80043f6:	e064      	b.n	80044c2 <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b02      	cmp	r3, #2
 8004404:	d0df      	beq.n	80043c6 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_I2C_Mem_Write_IT+0x94>
 8004410:	2302      	movs	r3, #2
 8004412:	e056      	b.n	80044c2 <HAL_I2C_Mem_Write_IT+0x142>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d007      	beq.n	800443a <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004448:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2221      	movs	r2, #33	@ 0x21
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2240      	movs	r2, #64	@ 0x40
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a3a      	ldr	r2, [r7, #32]
 8004464:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800446a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a16      	ldr	r2, [pc, #88]	@ (80044d4 <HAL_I2C_Mem_Write_IT+0x154>)
 800447a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800447c:	897a      	ldrh	r2, [r7, #10]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004482:	893a      	ldrh	r2, [r7, #8]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044a2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80044ba:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	e000      	b.n	80044c2 <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
  }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	20000004 	.word	0x20000004
 80044d0:	14f8b589 	.word	0x14f8b589
 80044d4:	ffff0000 	.word	0xffff0000

080044d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	@ 0x28
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	460b      	mov	r3, r1
 80044e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80044e8:	f7fe f85a 	bl	80025a0 <HAL_GetTick>
 80044ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	f040 8111 	bne.w	8004722 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2319      	movs	r3, #25
 8004506:	2201      	movs	r2, #1
 8004508:	4988      	ldr	r1, [pc, #544]	@ (800472c <HAL_I2C_IsDeviceReady+0x254>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f001 fe12 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004516:	2302      	movs	r3, #2
 8004518:	e104      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_I2C_IsDeviceReady+0x50>
 8004524:	2302      	movs	r3, #2
 8004526:	e0fd      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d007      	beq.n	800454e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0201 	orr.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800455c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2224      	movs	r2, #36	@ 0x24
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a70      	ldr	r2, [pc, #448]	@ (8004730 <HAL_I2C_IsDeviceReady+0x258>)
 8004570:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004580:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2200      	movs	r2, #0
 800458a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f001 fdd0 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045a8:	d103      	bne.n	80045b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045b0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e0b6      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80045c6:	f7fd ffeb 	bl	80025a0 <HAL_GetTick>
 80045ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	bf0c      	ite	eq
 80045da:	2301      	moveq	r3, #1
 80045dc:	2300      	movne	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f0:	bf0c      	ite	eq
 80045f2:	2301      	moveq	r3, #1
 80045f4:	2300      	movne	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045fa:	e025      	b.n	8004648 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045fc:	f7fd ffd0 	bl	80025a0 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d302      	bcc.n	8004612 <HAL_I2C_IsDeviceReady+0x13a>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	22a0      	movs	r2, #160	@ 0xa0
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b02      	cmp	r3, #2
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2ba0      	cmp	r3, #160	@ 0xa0
 8004652:	d005      	beq.n	8004660 <HAL_I2C_IsDeviceReady+0x188>
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <HAL_I2C_IsDeviceReady+0x188>
 800465a:	7dbb      	ldrb	r3, [r7, #22]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0cd      	beq.n	80045fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b02      	cmp	r3, #2
 8004674:	d129      	bne.n	80046ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004684:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2319      	movs	r3, #25
 80046a2:	2201      	movs	r2, #1
 80046a4:	4921      	ldr	r1, [pc, #132]	@ (800472c <HAL_I2C_IsDeviceReady+0x254>)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f001 fd44 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e036      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e02c      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2319      	movs	r3, #25
 80046ea:	2201      	movs	r2, #1
 80046ec:	490f      	ldr	r1, [pc, #60]	@ (800472c <HAL_I2C_IsDeviceReady+0x254>)
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f001 fd20 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e012      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	3301      	adds	r3, #1
 8004702:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	f4ff af32 	bcc.w	8004572 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004722:	2302      	movs	r3, #2
  }
}
 8004724:	4618      	mov	r0, r3
 8004726:	3720      	adds	r7, #32
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	00100002 	.word	0x00100002
 8004730:	ffff0000 	.word	0xffff0000

08004734 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004754:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800475c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b10      	cmp	r3, #16
 8004762:	d003      	beq.n	800476c <HAL_I2C_EV_IRQHandler+0x38>
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b40      	cmp	r3, #64	@ 0x40
 8004768:	f040 80c1 	bne.w	80048ee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10d      	bne.n	80047a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800478c:	d003      	beq.n	8004796 <HAL_I2C_EV_IRQHandler+0x62>
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004794:	d101      	bne.n	800479a <HAL_I2C_EV_IRQHandler+0x66>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <HAL_I2C_EV_IRQHandler+0x68>
 800479a:	2300      	movs	r3, #0
 800479c:	2b01      	cmp	r3, #1
 800479e:	f000 8132 	beq.w	8004a06 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00c      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0x92>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	0a5b      	lsrs	r3, r3, #9
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d006      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f001 ff22 	bl	8006602 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fce1 	bl	8005186 <I2C_Master_SB>
 80047c4:	e092      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fd56 	bl	8005290 <I2C_Master_ADD10>
 80047e4:	e082      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_I2C_EV_IRQHandler+0xd2>
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	0a5b      	lsrs	r3, r3, #9
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fd6f 	bl	80052e2 <I2C_Master_ADDR>
 8004804:	e072      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d03b      	beq.n	800488a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004820:	f000 80f3 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	09db      	lsrs	r3, r3, #7
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00f      	beq.n	8004850 <HAL_I2C_EV_IRQHandler+0x11c>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <HAL_I2C_EV_IRQHandler+0x11c>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f939 	bl	8004ac0 <I2C_MasterTransmit_TXE>
 800484e:	e04d      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80d6 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	0a5b      	lsrs	r3, r3, #9
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80cf 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800486c:	7bbb      	ldrb	r3, [r7, #14]
 800486e:	2b21      	cmp	r3, #33	@ 0x21
 8004870:	d103      	bne.n	800487a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f9c0 	bl	8004bf8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004878:	e0c7      	b.n	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	2b40      	cmp	r3, #64	@ 0x40
 800487e:	f040 80c4 	bne.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa2e 	bl	8004ce4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004888:	e0bf      	b.n	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004898:	f000 80b7 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00f      	beq.n	80048c8 <HAL_I2C_EV_IRQHandler+0x194>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d009      	beq.n	80048c8 <HAL_I2C_EV_IRQHandler+0x194>
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d103      	bne.n	80048c8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 faa7 	bl	8004e14 <I2C_MasterReceive_RXNE>
 80048c6:	e011      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	089b      	lsrs	r3, r3, #2
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 809a 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	0a5b      	lsrs	r3, r3, #9
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8093 	beq.w	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fb5d 	bl	8004fa4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ea:	e08e      	b.n	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
 80048ec:	e08d      	b.n	8004a0a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	61fb      	str	r3, [r7, #28]
 80048fe:	e007      	b.n	8004910 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d012      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x20e>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	0a5b      	lsrs	r3, r3, #9
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004938:	69b9      	ldr	r1, [r7, #24]
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 ff28 	bl	8005790 <I2C_Slave_ADDR>
 8004940:	e066      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0x22e>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	0a5b      	lsrs	r3, r3, #9
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 ff62 	bl	8005824 <I2C_Slave_STOPF>
 8004960:	e056      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004962:	7bbb      	ldrb	r3, [r7, #14]
 8004964:	2b21      	cmp	r3, #33	@ 0x21
 8004966:	d002      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x23a>
 8004968:	7bbb      	ldrb	r3, [r7, #14]
 800496a:	2b29      	cmp	r3, #41	@ 0x29
 800496c:	d125      	bne.n	80049ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	09db      	lsrs	r3, r3, #7
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00f      	beq.n	800499a <HAL_I2C_EV_IRQHandler+0x266>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	0a9b      	lsrs	r3, r3, #10
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_I2C_EV_IRQHandler+0x266>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fe40 	bl	8005618 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004998:	e039      	b.n	8004a0e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d033      	beq.n	8004a0e <HAL_I2C_EV_IRQHandler+0x2da>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	0a5b      	lsrs	r3, r3, #9
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d02d      	beq.n	8004a0e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fe6d 	bl	8005692 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049b8:	e029      	b.n	8004a0e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	099b      	lsrs	r3, r3, #6
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00f      	beq.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	0a9b      	lsrs	r3, r3, #10
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fe77 	bl	80056d2 <I2C_SlaveReceive_RXNE>
 80049e4:	e014      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00e      	beq.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	0a5b      	lsrs	r3, r3, #9
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fea5 	bl	800574e <I2C_SlaveReceive_BTF>
 8004a04:	e004      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004a06:	bf00      	nop
 8004a08:	e002      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a0a:	bf00      	nop
 8004a0c:	e000      	b.n	8004a10 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a0e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	460b      	mov	r3, r1
 8004a68:	70fb      	strb	r3, [r7, #3]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ace:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ad6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d150      	bne.n	8004b88 <I2C_MasterTransmit_TXE+0xc8>
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b21      	cmp	r3, #33	@ 0x21
 8004aea:	d14d      	bne.n	8004b88 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d01d      	beq.n	8004b2e <I2C_MasterTransmit_TXE+0x6e>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d01a      	beq.n	8004b2e <I2C_MasterTransmit_TXE+0x6e>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004afe:	d016      	beq.n	8004b2e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b0e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2211      	movs	r2, #17
 8004b14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff ff75 	bl	8004a16 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b2c:	e060      	b.n	8004bf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b3c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b4c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d107      	bne.n	8004b78 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fd f845 	bl	8001c00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b76:	e03b      	b.n	8004bf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ff48 	bl	8004a16 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b86:	e033      	b.n	8004bf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b21      	cmp	r3, #33	@ 0x21
 8004b8c:	d005      	beq.n	8004b9a <I2C_MasterTransmit_TXE+0xda>
 8004b8e:	7bbb      	ldrb	r3, [r7, #14]
 8004b90:	2b40      	cmp	r3, #64	@ 0x40
 8004b92:	d12d      	bne.n	8004bf0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	2b22      	cmp	r3, #34	@ 0x22
 8004b98:	d12a      	bne.n	8004bf0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d108      	bne.n	8004bb6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004bb4:	e01c      	b.n	8004bf0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b40      	cmp	r3, #64	@ 0x40
 8004bc0:	d103      	bne.n	8004bca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f88e 	bl	8004ce4 <I2C_MemoryTransmit_TXE_BTF>
}
 8004bc8:	e012      	b.n	8004bf0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	781a      	ldrb	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004bee:	e7ff      	b.n	8004bf0 <I2C_MasterTransmit_TXE+0x130>
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b21      	cmp	r3, #33	@ 0x21
 8004c10:	d164      	bne.n	8004cdc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d012      	beq.n	8004c42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c40:	e04c      	b.n	8004cdc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d01d      	beq.n	8004c84 <I2C_MasterTransmit_BTF+0x8c>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d01a      	beq.n	8004c84 <I2C_MasterTransmit_BTF+0x8c>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c54:	d016      	beq.n	8004c84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2211      	movs	r2, #17
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff feca 	bl	8004a16 <HAL_I2C_MasterTxCpltCallback>
}
 8004c82:	e02b      	b.n	8004cdc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b40      	cmp	r3, #64	@ 0x40
 8004cbc:	d107      	bne.n	8004cce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fc ff9a 	bl	8001c00 <HAL_I2C_MemTxCpltCallback>
}
 8004ccc:	e006      	b.n	8004cdc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff fe9d 	bl	8004a16 <HAL_I2C_MasterTxCpltCallback>
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d11d      	bne.n	8004d38 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d10b      	bne.n	8004d1c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d14:	1c9a      	adds	r2, r3, #2
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004d1a:	e077      	b.n	8004e0c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	121b      	asrs	r3, r3, #8
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d36:	e069      	b.n	8004e0c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10b      	bne.n	8004d58 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d56:	e059      	b.n	8004e0c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d152      	bne.n	8004e06 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b22      	cmp	r3, #34	@ 0x22
 8004d64:	d10d      	bne.n	8004d82 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d74:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d80:	e044      	b.n	8004e0c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d015      	beq.n	8004db8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b21      	cmp	r3, #33	@ 0x21
 8004d90:	d112      	bne.n	8004db8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004db6:	e029      	b.n	8004e0c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d124      	bne.n	8004e0c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b21      	cmp	r3, #33	@ 0x21
 8004dc6:	d121      	bne.n	8004e0c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dd6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004de6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc fefe 	bl	8001c00 <HAL_I2C_MemTxCpltCallback>
}
 8004e04:	e002      	b.n	8004e0c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fe ff38 	bl	8003c7c <I2C_Flush_DR>
}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b22      	cmp	r3, #34	@ 0x22
 8004e26:	f040 80b9 	bne.w	8004f9c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d921      	bls.n	8004e82 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	f040 8096 	bne.w	8004f9c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e7e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e80:	e08c      	b.n	8004f9c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d07f      	beq.n	8004f8a <I2C_MasterReceive_RXNE+0x176>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d002      	beq.n	8004e96 <I2C_MasterReceive_RXNE+0x82>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d179      	bne.n	8004f8a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 faf6 	bl	8006488 <I2C_WaitOnSTOPRequestThroughIT>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d14c      	bne.n	8004f3c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eb0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ec0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b40      	cmp	r3, #64	@ 0x40
 8004efa:	d10a      	bne.n	8004f12 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fdbd 	bl	8004a8a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f10:	e044      	b.n	8004f9c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d002      	beq.n	8004f26 <I2C_MasterReceive_RXNE+0x112>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d103      	bne.n	8004f2e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f2c:	e002      	b.n	8004f34 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2212      	movs	r2, #18
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff fd77 	bl	8004a28 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f3a:	e02f      	b.n	8004f9c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f4a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff fd8a 	bl	8004a9c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f88:	e008      	b.n	8004f9c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f98:	605a      	str	r2, [r3, #4]
}
 8004f9a:	e7ff      	b.n	8004f9c <I2C_MasterReceive_RXNE+0x188>
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d11b      	bne.n	8004ff4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fca:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004ff2:	e0c4      	b.n	800517e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d129      	bne.n	8005052 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800500c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b04      	cmp	r3, #4
 8005012:	d00a      	beq.n	800502a <I2C_MasterReceive_BTF+0x86>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d007      	beq.n	800502a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005028:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005050:	e095      	b.n	800517e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d17d      	bne.n	8005158 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d002      	beq.n	8005068 <I2C_MasterReceive_BTF+0xc4>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b10      	cmp	r3, #16
 8005066:	d108      	bne.n	800507a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e016      	b.n	80050a8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b04      	cmp	r3, #4
 800507e:	d002      	beq.n	8005086 <I2C_MasterReceive_BTF+0xe2>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d108      	bne.n	8005098 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	e007      	b.n	80050a8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005102:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	d10a      	bne.n	800512e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fcaf 	bl	8004a8a <HAL_I2C_MemRxCpltCallback>
}
 800512c:	e027      	b.n	800517e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d002      	beq.n	8005142 <I2C_MasterReceive_BTF+0x19e>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b20      	cmp	r3, #32
 8005140:	d103      	bne.n	800514a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30
 8005148:	e002      	b.n	8005150 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2212      	movs	r2, #18
 800514e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff fc69 	bl	8004a28 <HAL_I2C_MasterRxCpltCallback>
}
 8005156:	e012      	b.n	800517e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b40      	cmp	r3, #64	@ 0x40
 8005198:	d117      	bne.n	80051ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80051b4:	e067      	b.n	8005286 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	611a      	str	r2, [r3, #16]
}
 80051c8:	e05d      	b.n	8005286 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051d2:	d133      	bne.n	800523c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b21      	cmp	r3, #33	@ 0x21
 80051de:	d109      	bne.n	80051f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051f0:	611a      	str	r2, [r3, #16]
 80051f2:	e008      	b.n	8005206 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800520a:	2b00      	cmp	r3, #0
 800520c:	d004      	beq.n	8005218 <I2C_Master_SB+0x92>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	2b00      	cmp	r3, #0
 8005216:	d108      	bne.n	800522a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d032      	beq.n	8005286 <I2C_Master_SB+0x100>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d02d      	beq.n	8005286 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005238:	605a      	str	r2, [r3, #4]
}
 800523a:	e024      	b.n	8005286 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10e      	bne.n	8005262 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005248:	b29b      	uxth	r3, r3
 800524a:	11db      	asrs	r3, r3, #7
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f003 0306 	and.w	r3, r3, #6
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f063 030f 	orn	r3, r3, #15
 8005258:	b2da      	uxtb	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	611a      	str	r2, [r3, #16]
}
 8005260:	e011      	b.n	8005286 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005266:	2b01      	cmp	r3, #1
 8005268:	d10d      	bne.n	8005286 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	b29b      	uxth	r3, r3
 8005270:	11db      	asrs	r3, r3, #7
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 0306 	and.w	r3, r3, #6
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f063 030e 	orn	r3, r3, #14
 800527e:	b2da      	uxtb	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	611a      	str	r2, [r3, #16]
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529c:	b2da      	uxtb	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <I2C_Master_ADD10+0x26>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d108      	bne.n	80052c8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00c      	beq.n	80052d8 <I2C_Master_ADD10+0x48>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052d6:	605a      	str	r2, [r3, #4]
  }
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b091      	sub	sp, #68	@ 0x44
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b22      	cmp	r3, #34	@ 0x22
 800530a:	f040 8174 	bne.w	80055f6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10f      	bne.n	8005336 <I2C_Master_ADDR+0x54>
 8005316:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800531a:	2b40      	cmp	r3, #64	@ 0x40
 800531c:	d10b      	bne.n	8005336 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531e:	2300      	movs	r3, #0
 8005320:	633b      	str	r3, [r7, #48]	@ 0x30
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	633b      	str	r3, [r7, #48]	@ 0x30
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	633b      	str	r3, [r7, #48]	@ 0x30
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	e16b      	b.n	800560e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533a:	2b00      	cmp	r3, #0
 800533c:	d11d      	bne.n	800537a <I2C_Master_ADDR+0x98>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005346:	d118      	bne.n	800537a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005348:	2300      	movs	r3, #0
 800534a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800535c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800536c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	651a      	str	r2, [r3, #80]	@ 0x50
 8005378:	e149      	b.n	800560e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d113      	bne.n	80053ac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005384:	2300      	movs	r3, #0
 8005386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e120      	b.n	80055ee <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	f040 808a 	bne.w	80054cc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053be:	d137      	bne.n	8005430 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053de:	d113      	bne.n	8005408 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f0:	2300      	movs	r3, #0
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	e0f2      	b.n	80055ee <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005408:	2300      	movs	r3, #0
 800540a:	623b      	str	r3, [r7, #32]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	623b      	str	r3, [r7, #32]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	623b      	str	r3, [r7, #32]
 800541c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e0de      	b.n	80055ee <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005432:	2b08      	cmp	r3, #8
 8005434:	d02e      	beq.n	8005494 <I2C_Master_ADDR+0x1b2>
 8005436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005438:	2b20      	cmp	r3, #32
 800543a:	d02b      	beq.n	8005494 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800543c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543e:	2b12      	cmp	r3, #18
 8005440:	d102      	bne.n	8005448 <I2C_Master_ADDR+0x166>
 8005442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005444:	2b01      	cmp	r3, #1
 8005446:	d125      	bne.n	8005494 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544a:	2b04      	cmp	r3, #4
 800544c:	d00e      	beq.n	800546c <I2C_Master_ADDR+0x18a>
 800544e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005450:	2b02      	cmp	r3, #2
 8005452:	d00b      	beq.n	800546c <I2C_Master_ADDR+0x18a>
 8005454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005456:	2b10      	cmp	r3, #16
 8005458:	d008      	beq.n	800546c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e007      	b.n	800547c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800547a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	61fb      	str	r3, [r7, #28]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	e0ac      	b.n	80055ee <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a4:	2300      	movs	r3, #0
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e090      	b.n	80055ee <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d158      	bne.n	8005588 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d021      	beq.n	8005520 <I2C_Master_ADDR+0x23e>
 80054dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d01e      	beq.n	8005520 <I2C_Master_ADDR+0x23e>
 80054e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d01b      	beq.n	8005520 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e012      	b.n	8005546 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800552e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005554:	d14b      	bne.n	80055ee <I2C_Master_ADDR+0x30c>
 8005556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005558:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800555c:	d00b      	beq.n	8005576 <I2C_Master_ADDR+0x294>
 800555e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005560:	2b01      	cmp	r3, #1
 8005562:	d008      	beq.n	8005576 <I2C_Master_ADDR+0x294>
 8005564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005566:	2b08      	cmp	r3, #8
 8005568:	d005      	beq.n	8005576 <I2C_Master_ADDR+0x294>
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	2b10      	cmp	r3, #16
 800556e:	d002      	beq.n	8005576 <I2C_Master_ADDR+0x294>
 8005570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005572:	2b20      	cmp	r3, #32
 8005574:	d13b      	bne.n	80055ee <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	e032      	b.n	80055ee <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005596:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a6:	d117      	bne.n	80055d8 <I2C_Master_ADDR+0x2f6>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055ae:	d00b      	beq.n	80055c8 <I2C_Master_ADDR+0x2e6>
 80055b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d008      	beq.n	80055c8 <I2C_Master_ADDR+0x2e6>
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d005      	beq.n	80055c8 <I2C_Master_ADDR+0x2e6>
 80055bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d002      	beq.n	80055c8 <I2C_Master_ADDR+0x2e6>
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d107      	bne.n	80055d8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80055f4:	e00b      	b.n	800560e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	68bb      	ldr	r3, [r7, #8]
}
 800560c:	e7ff      	b.n	800560e <I2C_Master_ADDR+0x32c>
 800560e:	bf00      	nop
 8005610:	3744      	adds	r7, #68	@ 0x44
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005626:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d02b      	beq.n	800568a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005636:	781a      	ldrb	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d114      	bne.n	800568a <I2C_SlaveTransmit_TXE+0x72>
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b29      	cmp	r3, #41	@ 0x29
 8005664:	d111      	bne.n	800568a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005674:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2221      	movs	r2, #33	@ 0x21
 800567a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2228      	movs	r2, #40	@ 0x28
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff f9d8 	bl	8004a3a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800568a:	bf00      	nop
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d011      	beq.n	80056c8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	781a      	ldrb	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d02c      	beq.n	8005746 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d114      	bne.n	8005746 <I2C_SlaveReceive_RXNE+0x74>
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005720:	d111      	bne.n	8005746 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005730:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2222      	movs	r2, #34	@ 0x22
 8005736:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2228      	movs	r2, #40	@ 0x28
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff f983 	bl	8004a4c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d012      	beq.n	8005786 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800579a:	2300      	movs	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057aa:	2b28      	cmp	r3, #40	@ 0x28
 80057ac:	d127      	bne.n	80057fe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057bc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	089b      	lsrs	r3, r3, #2
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	09db      	lsrs	r3, r3, #7
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	81bb      	strh	r3, [r7, #12]
 80057e0:	e002      	b.n	80057e8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80057f0:	89ba      	ldrh	r2, [r7, #12]
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff f931 	bl	8004a5e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057fc:	e00e      	b.n	800581c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005832:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005842:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005844:	2300      	movs	r3, #0
 8005846:	60bb      	str	r3, [r7, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005870:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800587c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005880:	d172      	bne.n	8005968 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2b22      	cmp	r3, #34	@ 0x22
 8005886:	d002      	beq.n	800588e <I2C_Slave_STOPF+0x6a>
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b2a      	cmp	r3, #42	@ 0x2a
 800588c:	d135      	bne.n	80058fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fd feea 	bl	80036a0 <HAL_DMA_GetState>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d049      	beq.n	8005966 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d6:	4a69      	ldr	r2, [pc, #420]	@ (8005a7c <I2C_Slave_STOPF+0x258>)
 80058d8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fd fe66 	bl	80035b0 <HAL_DMA_Abort_IT>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d03d      	beq.n	8005966 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058f4:	4610      	mov	r0, r2
 80058f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058f8:	e035      	b.n	8005966 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	f043 0204 	orr.w	r2, r3, #4
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800592c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005932:	4618      	mov	r0, r3
 8005934:	f7fd feb4 	bl	80036a0 <HAL_DMA_GetState>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d014      	beq.n	8005968 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005942:	4a4e      	ldr	r2, [pc, #312]	@ (8005a7c <I2C_Slave_STOPF+0x258>)
 8005944:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594a:	4618      	mov	r0, r3
 800594c:	f7fd fe30 	bl	80035b0 <HAL_DMA_Abort_IT>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005960:	4610      	mov	r0, r2
 8005962:	4798      	blx	r3
 8005964:	e000      	b.n	8005968 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005966:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d03e      	beq.n	80059f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b04      	cmp	r3, #4
 800597e:	d112      	bne.n	80059a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b0:	2b40      	cmp	r3, #64	@ 0x40
 80059b2:	d112      	bne.n	80059da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e8:	f043 0204 	orr.w	r2, r3, #4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f843 	bl	8005a84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80059fe:	e039      	b.n	8005a74 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a04:	d109      	bne.n	8005a1a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2228      	movs	r2, #40	@ 0x28
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff f819 	bl	8004a4c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b28      	cmp	r3, #40	@ 0x28
 8005a24:	d111      	bne.n	8005a4a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a15      	ldr	r2, [pc, #84]	@ (8005a80 <I2C_Slave_STOPF+0x25c>)
 8005a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff f818 	bl	8004a78 <HAL_I2C_ListenCpltCallback>
}
 8005a48:	e014      	b.n	8005a74 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4e:	2b22      	cmp	r3, #34	@ 0x22
 8005a50:	d002      	beq.n	8005a58 <I2C_Slave_STOPF+0x234>
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b22      	cmp	r3, #34	@ 0x22
 8005a56:	d10d      	bne.n	8005a74 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fe ffec 	bl	8004a4c <HAL_I2C_SlaveRxCpltCallback>
}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	08005fe5 	.word	0x08005fe5
 8005a80:	ffff0000 	.word	0xffff0000

08005a84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d002      	beq.n	8005aa8 <I2C_ITError+0x24>
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	2b40      	cmp	r3, #64	@ 0x40
 8005aa6:	d10a      	bne.n	8005abe <I2C_ITError+0x3a>
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b22      	cmp	r3, #34	@ 0x22
 8005aac:	d107      	bne.n	8005abe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005abc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ac4:	2b28      	cmp	r3, #40	@ 0x28
 8005ac6:	d107      	bne.n	8005ad8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2228      	movs	r2, #40	@ 0x28
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005ad6:	e015      	b.n	8005b04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae6:	d00a      	beq.n	8005afe <I2C_ITError+0x7a>
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b60      	cmp	r3, #96	@ 0x60
 8005aec:	d007      	beq.n	8005afe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b12:	d162      	bne.n	8005bda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d020      	beq.n	8005b74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b36:	4a6a      	ldr	r2, [pc, #424]	@ (8005ce0 <I2C_ITError+0x25c>)
 8005b38:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fd fd36 	bl	80035b0 <HAL_DMA_Abort_IT>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8089 	beq.w	8005c5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0201 	bic.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4798      	blx	r3
 8005b72:	e074      	b.n	8005c5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	4a59      	ldr	r2, [pc, #356]	@ (8005ce0 <I2C_ITError+0x25c>)
 8005b7a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fd fd15 	bl	80035b0 <HAL_DMA_Abort_IT>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d068      	beq.n	8005c5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b96:	2b40      	cmp	r3, #64	@ 0x40
 8005b98:	d10b      	bne.n	8005bb2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	e041      	b.n	8005c5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b60      	cmp	r3, #96	@ 0x60
 8005be4:	d125      	bne.n	8005c32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfe:	2b40      	cmp	r3, #64	@ 0x40
 8005c00:	d10b      	bne.n	8005c1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0201 	bic.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fe ff3f 	bl	8004aae <HAL_I2C_AbortCpltCallback>
 8005c30:	e015      	b.n	8005c5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c3c:	2b40      	cmp	r3, #64	@ 0x40
 8005c3e:	d10b      	bne.n	8005c58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7fe ff1f 	bl	8004a9c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10e      	bne.n	8005c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d109      	bne.n	8005c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ca2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d113      	bne.n	8005cd8 <I2C_ITError+0x254>
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2b28      	cmp	r3, #40	@ 0x28
 8005cb4:	d110      	bne.n	8005cd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ce4 <I2C_ITError+0x260>)
 8005cba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fe fed0 	bl	8004a78 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	08005fe5 	.word	0x08005fe5
 8005ce4:	ffff0000 	.word	0xffff0000

08005ce8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	817b      	strh	r3, [r7, #10]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	813b      	strh	r3, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fa08 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00d      	beq.n	8005d46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d38:	d103      	bne.n	8005d42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e05f      	b.n	8005e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d46:	897b      	ldrh	r3, [r7, #10]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	492d      	ldr	r1, [pc, #180]	@ (8005e10 <I2C_RequestMemoryWrite+0x128>)
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fa63 	bl	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e04c      	b.n	8005e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d84:	6a39      	ldr	r1, [r7, #32]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 faee 	bl	8006368 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00d      	beq.n	8005dae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d107      	bne.n	8005daa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e02b      	b.n	8005e06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dae:	88fb      	ldrh	r3, [r7, #6]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d105      	bne.n	8005dc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005db4:	893b      	ldrh	r3, [r7, #8]
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	611a      	str	r2, [r3, #16]
 8005dbe:	e021      	b.n	8005e04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dc0:	893b      	ldrh	r3, [r7, #8]
 8005dc2:	0a1b      	lsrs	r3, r3, #8
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd0:	6a39      	ldr	r1, [r7, #32]
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fac8 	bl	8006368 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00d      	beq.n	8005dfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d107      	bne.n	8005df6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e005      	b.n	8005e06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dfa:	893b      	ldrh	r3, [r7, #8]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	00010002 	.word	0x00010002

08005e14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	461a      	mov	r2, r3
 8005e22:	4603      	mov	r3, r0
 8005e24:	817b      	strh	r3, [r7, #10]
 8005e26:	460b      	mov	r3, r1
 8005e28:	813b      	strh	r3, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f96a 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e74:	d103      	bne.n	8005e7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e0aa      	b.n	8005fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e82:	897b      	ldrh	r3, [r7, #10]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e94:	6a3a      	ldr	r2, [r7, #32]
 8005e96:	4952      	ldr	r1, [pc, #328]	@ (8005fe0 <I2C_RequestMemoryRead+0x1cc>)
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f9c5 	bl	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e097      	b.n	8005fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec0:	6a39      	ldr	r1, [r7, #32]
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 fa50 	bl	8006368 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00d      	beq.n	8005eea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d107      	bne.n	8005ee6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ee4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e076      	b.n	8005fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d105      	bne.n	8005efc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ef0:	893b      	ldrh	r3, [r7, #8]
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	611a      	str	r2, [r3, #16]
 8005efa:	e021      	b.n	8005f40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005efc:	893b      	ldrh	r3, [r7, #8]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0c:	6a39      	ldr	r1, [r7, #32]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fa2a 	bl	8006368 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00d      	beq.n	8005f36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d107      	bne.n	8005f32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e050      	b.n	8005fd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f36:	893b      	ldrh	r3, [r7, #8]
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f42:	6a39      	ldr	r1, [r7, #32]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fa0f 	bl	8006368 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00d      	beq.n	8005f6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d107      	bne.n	8005f68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e035      	b.n	8005fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f8d3 	bl	8006134 <I2C_WaitOnFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00d      	beq.n	8005fb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fa2:	d103      	bne.n	8005fac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005faa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e013      	b.n	8005fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fb0:	897b      	ldrh	r3, [r7, #10]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	6a3a      	ldr	r2, [r7, #32]
 8005fc4:	4906      	ldr	r1, [pc, #24]	@ (8005fe0 <I2C_RequestMemoryRead+0x1cc>)
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f92e 	bl	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	00010002 	.word	0x00010002

08005fe4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800612c <I2C_DMAAbort+0x148>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	08db      	lsrs	r3, r3, #3
 8006004:	4a4a      	ldr	r2, [pc, #296]	@ (8006130 <I2C_DMAAbort+0x14c>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	0a1a      	lsrs	r2, r3, #8
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	00da      	lsls	r2, r3, #3
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d106      	bne.n	800602c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800602a:	e00a      	b.n	8006042 <I2C_DMAAbort+0x5e>
    }
    count--;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3b01      	subs	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800603c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006040:	d0ea      	beq.n	8006018 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800604e:	2200      	movs	r2, #0
 8006050:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605e:	2200      	movs	r2, #0
 8006060:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006070:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2200      	movs	r2, #0
 8006076:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006084:	2200      	movs	r2, #0
 8006086:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006094:	2200      	movs	r2, #0
 8006096:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b60      	cmp	r3, #96	@ 0x60
 80060b2:	d10e      	bne.n	80060d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2200      	movs	r2, #0
 80060c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060ca:	6978      	ldr	r0, [r7, #20]
 80060cc:	f7fe fcef 	bl	8004aae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060d0:	e027      	b.n	8006122 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060d2:	7cfb      	ldrb	r3, [r7, #19]
 80060d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80060d8:	2b28      	cmp	r3, #40	@ 0x28
 80060da:	d117      	bne.n	800610c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2200      	movs	r2, #0
 8006100:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2228      	movs	r2, #40	@ 0x28
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800610a:	e007      	b.n	800611c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800611c:	6978      	ldr	r0, [r7, #20]
 800611e:	f7fe fcbd 	bl	8004a9c <HAL_I2C_ErrorCallback>
}
 8006122:	bf00      	nop
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000004 	.word	0x20000004
 8006130:	14f8b589 	.word	0x14f8b589

08006134 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	4613      	mov	r3, r2
 8006142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006144:	e048      	b.n	80061d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d044      	beq.n	80061d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614e:	f7fc fa27 	bl	80025a0 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d302      	bcc.n	8006164 <I2C_WaitOnFlagUntilTimeout+0x30>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d139      	bne.n	80061d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	0c1b      	lsrs	r3, r3, #16
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d10d      	bne.n	800618a <I2C_WaitOnFlagUntilTimeout+0x56>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	43da      	mvns	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4013      	ands	r3, r2
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	e00c      	b.n	80061a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	43da      	mvns	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d116      	bne.n	80061d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c4:	f043 0220 	orr.w	r2, r3, #32
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e023      	b.n	8006220 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	0c1b      	lsrs	r3, r3, #16
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d10d      	bne.n	80061fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	43da      	mvns	r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4013      	ands	r3, r2
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	e00c      	b.n	8006218 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	43da      	mvns	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4013      	ands	r3, r2
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	bf0c      	ite	eq
 8006210:	2301      	moveq	r3, #1
 8006212:	2300      	movne	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	461a      	mov	r2, r3
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	429a      	cmp	r2, r3
 800621c:	d093      	beq.n	8006146 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006236:	e071      	b.n	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006246:	d123      	bne.n	8006290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006256:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627c:	f043 0204 	orr.w	r2, r3, #4
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e067      	b.n	8006360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d041      	beq.n	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006298:	f7fc f982 	bl	80025a0 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d302      	bcc.n	80062ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d136      	bne.n	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d10c      	bne.n	80062d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	43da      	mvns	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4013      	ands	r3, r2
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bf14      	ite	ne
 80062ca:	2301      	movne	r3, #1
 80062cc:	2300      	moveq	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	e00b      	b.n	80062ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	43da      	mvns	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4013      	ands	r3, r2
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	bf14      	ite	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	2300      	moveq	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e021      	b.n	8006360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	0c1b      	lsrs	r3, r3, #16
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10c      	bne.n	8006340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	43da      	mvns	r2, r3
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	4013      	ands	r3, r2
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	bf14      	ite	ne
 8006338:	2301      	movne	r3, #1
 800633a:	2300      	moveq	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e00b      	b.n	8006358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	43da      	mvns	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4013      	ands	r3, r2
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	bf14      	ite	ne
 8006352:	2301      	movne	r3, #1
 8006354:	2300      	moveq	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	f47f af6d 	bne.w	8006238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006374:	e034      	b.n	80063e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 f915 	bl	80065a6 <I2C_IsAcknowledgeFailed>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e034      	b.n	80063f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d028      	beq.n	80063e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638e:	f7fc f907 	bl	80025a0 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	d302      	bcc.n	80063a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d11d      	bne.n	80063e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ae:	2b80      	cmp	r3, #128	@ 0x80
 80063b0:	d016      	beq.n	80063e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063cc:	f043 0220 	orr.w	r2, r3, #32
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e007      	b.n	80063f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ea:	2b80      	cmp	r3, #128	@ 0x80
 80063ec:	d1c3      	bne.n	8006376 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006404:	e034      	b.n	8006470 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f8cd 	bl	80065a6 <I2C_IsAcknowledgeFailed>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e034      	b.n	8006480 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641c:	d028      	beq.n	8006470 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641e:	f7fc f8bf 	bl	80025a0 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	d302      	bcc.n	8006434 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d11d      	bne.n	8006470 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b04      	cmp	r3, #4
 8006440:	d016      	beq.n	8006470 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645c:	f043 0220 	orr.w	r2, r3, #32
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e007      	b.n	8006480 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b04      	cmp	r3, #4
 800647c:	d1c3      	bne.n	8006406 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006494:	4b13      	ldr	r3, [pc, #76]	@ (80064e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	08db      	lsrs	r3, r3, #3
 800649a:	4a13      	ldr	r2, [pc, #76]	@ (80064e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	0a1a      	lsrs	r2, r3, #8
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d107      	bne.n	80064c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ba:	f043 0220 	orr.w	r2, r3, #32
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e008      	b.n	80064d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d4:	d0e9      	beq.n	80064aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20000004 	.word	0x20000004
 80064e8:	14f8b589 	.word	0x14f8b589

080064ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064f8:	e049      	b.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	f003 0310 	and.w	r3, r3, #16
 8006504:	2b10      	cmp	r3, #16
 8006506:	d119      	bne.n	800653c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0210 	mvn.w	r2, #16
 8006510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e030      	b.n	800659e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653c:	f7fc f830 	bl	80025a0 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	429a      	cmp	r2, r3
 800654a:	d302      	bcc.n	8006552 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d11d      	bne.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655c:	2b40      	cmp	r3, #64	@ 0x40
 800655e:	d016      	beq.n	800658e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657a:	f043 0220 	orr.w	r2, r3, #32
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e007      	b.n	800659e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006598:	2b40      	cmp	r3, #64	@ 0x40
 800659a:	d1ae      	bne.n	80064fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065bc:	d11b      	bne.n	80065f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	f043 0204 	orr.w	r2, r3, #4
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bc80      	pop	{r7}
 8006600:	4770      	bx	lr

08006602 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006612:	d103      	bne.n	800661c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800661a:	e007      	b.n	800662c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006624:	d102      	bne.n	800662c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2208      	movs	r2, #8
 800662a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr
	...

08006638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e272      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 8087 	beq.w	8006766 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006658:	4b92      	ldr	r3, [pc, #584]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f003 030c 	and.w	r3, r3, #12
 8006660:	2b04      	cmp	r3, #4
 8006662:	d00c      	beq.n	800667e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006664:	4b8f      	ldr	r3, [pc, #572]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 030c 	and.w	r3, r3, #12
 800666c:	2b08      	cmp	r3, #8
 800666e:	d112      	bne.n	8006696 <HAL_RCC_OscConfig+0x5e>
 8006670:	4b8c      	ldr	r3, [pc, #560]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800667c:	d10b      	bne.n	8006696 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800667e:	4b89      	ldr	r3, [pc, #548]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d06c      	beq.n	8006764 <HAL_RCC_OscConfig+0x12c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d168      	bne.n	8006764 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e24c      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800669e:	d106      	bne.n	80066ae <HAL_RCC_OscConfig+0x76>
 80066a0:	4b80      	ldr	r3, [pc, #512]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a7f      	ldr	r2, [pc, #508]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	e02e      	b.n	800670c <HAL_RCC_OscConfig+0xd4>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10c      	bne.n	80066d0 <HAL_RCC_OscConfig+0x98>
 80066b6:	4b7b      	ldr	r3, [pc, #492]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a7a      	ldr	r2, [pc, #488]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	4b78      	ldr	r3, [pc, #480]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a77      	ldr	r2, [pc, #476]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	e01d      	b.n	800670c <HAL_RCC_OscConfig+0xd4>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066d8:	d10c      	bne.n	80066f4 <HAL_RCC_OscConfig+0xbc>
 80066da:	4b72      	ldr	r3, [pc, #456]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a71      	ldr	r2, [pc, #452]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	4b6f      	ldr	r3, [pc, #444]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a6e      	ldr	r2, [pc, #440]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e00b      	b.n	800670c <HAL_RCC_OscConfig+0xd4>
 80066f4:	4b6b      	ldr	r3, [pc, #428]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a6a      	ldr	r2, [pc, #424]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80066fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	4b68      	ldr	r3, [pc, #416]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a67      	ldr	r2, [pc, #412]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800670a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d013      	beq.n	800673c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006714:	f7fb ff44 	bl	80025a0 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800671c:	f7fb ff40 	bl	80025a0 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	@ 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e200      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672e:	4b5d      	ldr	r3, [pc, #372]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCC_OscConfig+0xe4>
 800673a:	e014      	b.n	8006766 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673c:	f7fb ff30 	bl	80025a0 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006744:	f7fb ff2c 	bl	80025a0 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b64      	cmp	r3, #100	@ 0x64
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e1ec      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006756:	4b53      	ldr	r3, [pc, #332]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x10c>
 8006762:	e000      	b.n	8006766 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d063      	beq.n	800683a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006772:	4b4c      	ldr	r3, [pc, #304]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f003 030c 	and.w	r3, r3, #12
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800677e:	4b49      	ldr	r3, [pc, #292]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f003 030c 	and.w	r3, r3, #12
 8006786:	2b08      	cmp	r3, #8
 8006788:	d11c      	bne.n	80067c4 <HAL_RCC_OscConfig+0x18c>
 800678a:	4b46      	ldr	r3, [pc, #280]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d116      	bne.n	80067c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006796:	4b43      	ldr	r3, [pc, #268]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_RCC_OscConfig+0x176>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d001      	beq.n	80067ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e1c0      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ae:	4b3d      	ldr	r3, [pc, #244]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4939      	ldr	r1, [pc, #228]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067c2:	e03a      	b.n	800683a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d020      	beq.n	800680e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067cc:	4b36      	ldr	r3, [pc, #216]	@ (80068a8 <HAL_RCC_OscConfig+0x270>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d2:	f7fb fee5 	bl	80025a0 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d8:	e008      	b.n	80067ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067da:	f7fb fee1 	bl	80025a0 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e1a1      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ec:	4b2d      	ldr	r3, [pc, #180]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f8:	4b2a      	ldr	r3, [pc, #168]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4927      	ldr	r1, [pc, #156]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006808:	4313      	orrs	r3, r2
 800680a:	600b      	str	r3, [r1, #0]
 800680c:	e015      	b.n	800683a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800680e:	4b26      	ldr	r3, [pc, #152]	@ (80068a8 <HAL_RCC_OscConfig+0x270>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006814:	f7fb fec4 	bl	80025a0 <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800681c:	f7fb fec0 	bl	80025a0 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e180      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682e:	4b1d      	ldr	r3, [pc, #116]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d03a      	beq.n	80068bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d019      	beq.n	8006882 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684e:	4b17      	ldr	r3, [pc, #92]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006854:	f7fb fea4 	bl	80025a0 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800685c:	f7fb fea0 	bl	80025a0 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e160      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686e:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <HAL_RCC_OscConfig+0x26c>)
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800687a:	2001      	movs	r0, #1
 800687c:	f000 face 	bl	8006e1c <RCC_Delay>
 8006880:	e01c      	b.n	80068bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006882:	4b0a      	ldr	r3, [pc, #40]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006888:	f7fb fe8a 	bl	80025a0 <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800688e:	e00f      	b.n	80068b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006890:	f7fb fe86 	bl	80025a0 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d908      	bls.n	80068b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e146      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
 80068a2:	bf00      	nop
 80068a4:	40021000 	.word	0x40021000
 80068a8:	42420000 	.word	0x42420000
 80068ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b0:	4b92      	ldr	r3, [pc, #584]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 80068b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e9      	bne.n	8006890 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80a6 	beq.w	8006a16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ce:	4b8b      	ldr	r3, [pc, #556]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10d      	bne.n	80068f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068da:	4b88      	ldr	r3, [pc, #544]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	4a87      	ldr	r2, [pc, #540]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 80068e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068e4:	61d3      	str	r3, [r2, #28]
 80068e6:	4b85      	ldr	r3, [pc, #532]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ee:	60bb      	str	r3, [r7, #8]
 80068f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068f2:	2301      	movs	r3, #1
 80068f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f6:	4b82      	ldr	r3, [pc, #520]	@ (8006b00 <HAL_RCC_OscConfig+0x4c8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d118      	bne.n	8006934 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006902:	4b7f      	ldr	r3, [pc, #508]	@ (8006b00 <HAL_RCC_OscConfig+0x4c8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a7e      	ldr	r2, [pc, #504]	@ (8006b00 <HAL_RCC_OscConfig+0x4c8>)
 8006908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800690c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800690e:	f7fb fe47 	bl	80025a0 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006916:	f7fb fe43 	bl	80025a0 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b64      	cmp	r3, #100	@ 0x64
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e103      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006928:	4b75      	ldr	r3, [pc, #468]	@ (8006b00 <HAL_RCC_OscConfig+0x4c8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0f0      	beq.n	8006916 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d106      	bne.n	800694a <HAL_RCC_OscConfig+0x312>
 800693c:	4b6f      	ldr	r3, [pc, #444]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	4a6e      	ldr	r2, [pc, #440]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006942:	f043 0301 	orr.w	r3, r3, #1
 8006946:	6213      	str	r3, [r2, #32]
 8006948:	e02d      	b.n	80069a6 <HAL_RCC_OscConfig+0x36e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10c      	bne.n	800696c <HAL_RCC_OscConfig+0x334>
 8006952:	4b6a      	ldr	r3, [pc, #424]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	4a69      	ldr	r2, [pc, #420]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006958:	f023 0301 	bic.w	r3, r3, #1
 800695c:	6213      	str	r3, [r2, #32]
 800695e:	4b67      	ldr	r3, [pc, #412]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	4a66      	ldr	r2, [pc, #408]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006964:	f023 0304 	bic.w	r3, r3, #4
 8006968:	6213      	str	r3, [r2, #32]
 800696a:	e01c      	b.n	80069a6 <HAL_RCC_OscConfig+0x36e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	2b05      	cmp	r3, #5
 8006972:	d10c      	bne.n	800698e <HAL_RCC_OscConfig+0x356>
 8006974:	4b61      	ldr	r3, [pc, #388]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	4a60      	ldr	r2, [pc, #384]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 800697a:	f043 0304 	orr.w	r3, r3, #4
 800697e:	6213      	str	r3, [r2, #32]
 8006980:	4b5e      	ldr	r3, [pc, #376]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	4a5d      	ldr	r2, [pc, #372]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	6213      	str	r3, [r2, #32]
 800698c:	e00b      	b.n	80069a6 <HAL_RCC_OscConfig+0x36e>
 800698e:	4b5b      	ldr	r3, [pc, #364]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	4a5a      	ldr	r2, [pc, #360]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	6213      	str	r3, [r2, #32]
 800699a:	4b58      	ldr	r3, [pc, #352]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	4a57      	ldr	r2, [pc, #348]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 80069a0:	f023 0304 	bic.w	r3, r3, #4
 80069a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d015      	beq.n	80069da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069ae:	f7fb fdf7 	bl	80025a0 <HAL_GetTick>
 80069b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b4:	e00a      	b.n	80069cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b6:	f7fb fdf3 	bl	80025a0 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e0b1      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069cc:	4b4b      	ldr	r3, [pc, #300]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0ee      	beq.n	80069b6 <HAL_RCC_OscConfig+0x37e>
 80069d8:	e014      	b.n	8006a04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069da:	f7fb fde1 	bl	80025a0 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e0:	e00a      	b.n	80069f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e2:	f7fb fddd 	bl	80025a0 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e09b      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069f8:	4b40      	ldr	r3, [pc, #256]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1ee      	bne.n	80069e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d105      	bne.n	8006a16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	4a3b      	ldr	r2, [pc, #236]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006a10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 8087 	beq.w	8006b2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a20:	4b36      	ldr	r3, [pc, #216]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f003 030c 	and.w	r3, r3, #12
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d061      	beq.n	8006af0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d146      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a34:	4b33      	ldr	r3, [pc, #204]	@ (8006b04 <HAL_RCC_OscConfig+0x4cc>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a3a:	f7fb fdb1 	bl	80025a0 <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a40:	e008      	b.n	8006a54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a42:	f7fb fdad 	bl	80025a0 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e06d      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a54:	4b29      	ldr	r3, [pc, #164]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1f0      	bne.n	8006a42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a68:	d108      	bne.n	8006a7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a6a:	4b24      	ldr	r3, [pc, #144]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	4921      	ldr	r1, [pc, #132]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a19      	ldr	r1, [r3, #32]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	491b      	ldr	r1, [pc, #108]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a94:	4b1b      	ldr	r3, [pc, #108]	@ (8006b04 <HAL_RCC_OscConfig+0x4cc>)
 8006a96:	2201      	movs	r2, #1
 8006a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a9a:	f7fb fd81 	bl	80025a0 <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa2:	f7fb fd7d 	bl	80025a0 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e03d      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ab4:	4b11      	ldr	r3, [pc, #68]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0f0      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x46a>
 8006ac0:	e035      	b.n	8006b2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac2:	4b10      	ldr	r3, [pc, #64]	@ (8006b04 <HAL_RCC_OscConfig+0x4cc>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac8:	f7fb fd6a 	bl	80025a0 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad0:	f7fb fd66 	bl	80025a0 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e026      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ae2:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <HAL_RCC_OscConfig+0x4c4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f0      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x498>
 8006aee:	e01e      	b.n	8006b2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d107      	bne.n	8006b08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e019      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
 8006afc:	40021000 	.word	0x40021000
 8006b00:	40007000 	.word	0x40007000
 8006b04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b08:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <HAL_RCC_OscConfig+0x500>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d106      	bne.n	8006b2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d001      	beq.n	8006b2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40021000 	.word	0x40021000

08006b3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0d0      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b50:	4b6a      	ldr	r3, [pc, #424]	@ (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d910      	bls.n	8006b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b5e:	4b67      	ldr	r3, [pc, #412]	@ (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f023 0207 	bic.w	r2, r3, #7
 8006b66:	4965      	ldr	r1, [pc, #404]	@ (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6e:	4b63      	ldr	r3, [pc, #396]	@ (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0b8      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d020      	beq.n	8006bce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b98:	4b59      	ldr	r3, [pc, #356]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4a58      	ldr	r2, [pc, #352]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ba2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bb0:	4b53      	ldr	r3, [pc, #332]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	4a52      	ldr	r2, [pc, #328]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006bba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bbc:	4b50      	ldr	r3, [pc, #320]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	494d      	ldr	r1, [pc, #308]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d040      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d107      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be2:	4b47      	ldr	r3, [pc, #284]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d115      	bne.n	8006c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e07f      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bfa:	4b41      	ldr	r3, [pc, #260]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e073      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e06b      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c1a:	4b39      	ldr	r3, [pc, #228]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f023 0203 	bic.w	r2, r3, #3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4936      	ldr	r1, [pc, #216]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c2c:	f7fb fcb8 	bl	80025a0 <HAL_GetTick>
 8006c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c32:	e00a      	b.n	8006c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c34:	f7fb fcb4 	bl	80025a0 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e053      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f003 020c 	and.w	r2, r3, #12
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d1eb      	bne.n	8006c34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c5c:	4b27      	ldr	r3, [pc, #156]	@ (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d210      	bcs.n	8006c8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6a:	4b24      	ldr	r3, [pc, #144]	@ (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 0207 	bic.w	r2, r3, #7
 8006c72:	4922      	ldr	r1, [pc, #136]	@ (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7a:	4b20      	ldr	r3, [pc, #128]	@ (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d001      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e032      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c98:	4b19      	ldr	r3, [pc, #100]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4916      	ldr	r1, [pc, #88]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cb6:	4b12      	ldr	r3, [pc, #72]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	490e      	ldr	r1, [pc, #56]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cca:	f000 f821 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	091b      	lsrs	r3, r3, #4
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	490a      	ldr	r1, [pc, #40]	@ (8006d04 <HAL_RCC_ClockConfig+0x1c8>)
 8006cdc:	5ccb      	ldrb	r3, [r1, r3]
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	4a09      	ldr	r2, [pc, #36]	@ (8006d08 <HAL_RCC_ClockConfig+0x1cc>)
 8006ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ce6:	4b09      	ldr	r3, [pc, #36]	@ (8006d0c <HAL_RCC_ClockConfig+0x1d0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fb fc16 	bl	800251c <HAL_InitTick>

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40022000 	.word	0x40022000
 8006d00:	40021000 	.word	0x40021000
 8006d04:	08018c08 	.word	0x08018c08
 8006d08:	20000004 	.word	0x20000004
 8006d0c:	20000008 	.word	0x20000008

08006d10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60bb      	str	r3, [r7, #8]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	2300      	movs	r3, #0
 8006d24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f003 030c 	and.w	r3, r3, #12
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d002      	beq.n	8006d40 <HAL_RCC_GetSysClockFreq+0x30>
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d003      	beq.n	8006d46 <HAL_RCC_GetSysClockFreq+0x36>
 8006d3e:	e027      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d40:	4b19      	ldr	r3, [pc, #100]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d42:	613b      	str	r3, [r7, #16]
      break;
 8006d44:	e027      	b.n	8006d96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	0c9b      	lsrs	r3, r3, #18
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	4a17      	ldr	r2, [pc, #92]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d50:	5cd3      	ldrb	r3, [r2, r3]
 8006d52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d010      	beq.n	8006d80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d5e:	4b11      	ldr	r3, [pc, #68]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	0c5b      	lsrs	r3, r3, #17
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	4a11      	ldr	r2, [pc, #68]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006d6a:	5cd3      	ldrb	r3, [r2, r3]
 8006d6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a0d      	ldr	r2, [pc, #52]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d72:	fb03 f202 	mul.w	r2, r3, r2
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e004      	b.n	8006d8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a0c      	ldr	r2, [pc, #48]	@ (8006db4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006d84:	fb02 f303 	mul.w	r3, r2, r3
 8006d88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	613b      	str	r3, [r7, #16]
      break;
 8006d8e:	e002      	b.n	8006d96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d90:	4b05      	ldr	r3, [pc, #20]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d92:	613b      	str	r3, [r7, #16]
      break;
 8006d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d96:	693b      	ldr	r3, [r7, #16]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	371c      	adds	r7, #28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40021000 	.word	0x40021000
 8006da8:	007a1200 	.word	0x007a1200
 8006dac:	08018c20 	.word	0x08018c20
 8006db0:	08018c30 	.word	0x08018c30
 8006db4:	003d0900 	.word	0x003d0900

08006db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dbc:	4b02      	ldr	r3, [pc, #8]	@ (8006dc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr
 8006dc8:	20000004 	.word	0x20000004

08006dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006dd0:	f7ff fff2 	bl	8006db8 <HAL_RCC_GetHCLKFreq>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	0a1b      	lsrs	r3, r3, #8
 8006ddc:	f003 0307 	and.w	r3, r3, #7
 8006de0:	4903      	ldr	r1, [pc, #12]	@ (8006df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006de2:	5ccb      	ldrb	r3, [r1, r3]
 8006de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40021000 	.word	0x40021000
 8006df0:	08018c18 	.word	0x08018c18

08006df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006df8:	f7ff ffde 	bl	8006db8 <HAL_RCC_GetHCLKFreq>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	0adb      	lsrs	r3, r3, #11
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	4903      	ldr	r1, [pc, #12]	@ (8006e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e0a:	5ccb      	ldrb	r3, [r1, r3]
 8006e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40021000 	.word	0x40021000
 8006e18:	08018c18 	.word	0x08018c18

08006e1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e24:	4b0a      	ldr	r3, [pc, #40]	@ (8006e50 <RCC_Delay+0x34>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a0a      	ldr	r2, [pc, #40]	@ (8006e54 <RCC_Delay+0x38>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	0a5b      	lsrs	r3, r3, #9
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	fb02 f303 	mul.w	r3, r2, r3
 8006e36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006e38:	bf00      	nop
  }
  while (Delay --);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	1e5a      	subs	r2, r3, #1
 8006e3e:	60fa      	str	r2, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f9      	bne.n	8006e38 <RCC_Delay+0x1c>
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr
 8006e50:	20000004 	.word	0x20000004
 8006e54:	10624dd3 	.word	0x10624dd3

08006e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e076      	b.n	8006f58 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d108      	bne.n	8006e84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e7a:	d009      	beq.n	8006e90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	61da      	str	r2, [r3, #28]
 8006e82:	e005      	b.n	8006e90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fb f8c0 	bl	8002030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ec6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f00:	431a      	orrs	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f14:	ea42 0103 	orr.w	r1, r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	0c1a      	lsrs	r2, r3, #16
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f002 0204 	and.w	r2, r2, #4
 8006f36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69da      	ldr	r2, [r3, #28]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f70:	f7fb fb16 	bl	80025a0 <HAL_GetTick>
 8006f74:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d001      	beq.n	8006f8a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006f86:	2302      	movs	r3, #2
 8006f88:	e12a      	b.n	80071e0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <HAL_SPI_Transmit+0x36>
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e122      	b.n	80071e0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_SPI_Transmit+0x48>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e11b      	b.n	80071e0 <HAL_SPI_Transmit+0x280>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	88fa      	ldrh	r2, [r7, #6]
 8006fc8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	88fa      	ldrh	r2, [r7, #6]
 8006fce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff6:	d10f      	bne.n	8007018 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007006:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007016:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007022:	2b40      	cmp	r3, #64	@ 0x40
 8007024:	d007      	beq.n	8007036 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007034:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800703e:	d152      	bne.n	80070e6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <HAL_SPI_Transmit+0xee>
 8007048:	8b7b      	ldrh	r3, [r7, #26]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d145      	bne.n	80070da <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007052:	881a      	ldrh	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705e:	1c9a      	adds	r2, r3, #2
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007072:	e032      	b.n	80070da <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b02      	cmp	r3, #2
 8007080:	d112      	bne.n	80070a8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007086:	881a      	ldrh	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007092:	1c9a      	adds	r2, r3, #2
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80070a6:	e018      	b.n	80070da <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070a8:	f7fb fa7a 	bl	80025a0 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d803      	bhi.n	80070c0 <HAL_SPI_Transmit+0x160>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d102      	bne.n	80070c6 <HAL_SPI_Transmit+0x166>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e082      	b.n	80071e0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1c7      	bne.n	8007074 <HAL_SPI_Transmit+0x114>
 80070e4:	e053      	b.n	800718e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <HAL_SPI_Transmit+0x194>
 80070ee:	8b7b      	ldrh	r3, [r7, #26]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d147      	bne.n	8007184 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	330c      	adds	r3, #12
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800711a:	e033      	b.n	8007184 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b02      	cmp	r3, #2
 8007128:	d113      	bne.n	8007152 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	330c      	adds	r3, #12
 8007134:	7812      	ldrb	r2, [r2, #0]
 8007136:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007146:	b29b      	uxth	r3, r3
 8007148:	3b01      	subs	r3, #1
 800714a:	b29a      	uxth	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007150:	e018      	b.n	8007184 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007152:	f7fb fa25 	bl	80025a0 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	429a      	cmp	r2, r3
 8007160:	d803      	bhi.n	800716a <HAL_SPI_Transmit+0x20a>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007168:	d102      	bne.n	8007170 <HAL_SPI_Transmit+0x210>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d109      	bne.n	8007184 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e02d      	b.n	80071e0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1c6      	bne.n	800711c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 fa66 	bl	8007664 <SPI_EndRxTxTransaction>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80071de:	2300      	movs	r3, #0
  }
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3720      	adds	r7, #32
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	@ 0x28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071f6:	2301      	movs	r3, #1
 80071f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071fa:	f7fb f9d1 	bl	80025a0 <HAL_GetTick>
 80071fe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007206:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800720e:	887b      	ldrh	r3, [r7, #2]
 8007210:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007212:	7ffb      	ldrb	r3, [r7, #31]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d00c      	beq.n	8007232 <HAL_SPI_TransmitReceive+0x4a>
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800721e:	d106      	bne.n	800722e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <HAL_SPI_TransmitReceive+0x46>
 8007228:	7ffb      	ldrb	r3, [r7, #31]
 800722a:	2b04      	cmp	r3, #4
 800722c:	d001      	beq.n	8007232 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800722e:	2302      	movs	r3, #2
 8007230:	e17f      	b.n	8007532 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x5c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x5c>
 800723e:	887b      	ldrh	r3, [r7, #2]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e174      	b.n	8007532 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_SPI_TransmitReceive+0x6e>
 8007252:	2302      	movs	r3, #2
 8007254:	e16d      	b.n	8007532 <HAL_SPI_TransmitReceive+0x34a>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b04      	cmp	r3, #4
 8007268:	d003      	beq.n	8007272 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2205      	movs	r2, #5
 800726e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	887a      	ldrh	r2, [r7, #2]
 8007282:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	887a      	ldrh	r2, [r7, #2]
 8007288:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	887a      	ldrh	r2, [r7, #2]
 8007294:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	887a      	ldrh	r2, [r7, #2]
 800729a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b2:	2b40      	cmp	r3, #64	@ 0x40
 80072b4:	d007      	beq.n	80072c6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072ce:	d17e      	bne.n	80073ce <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <HAL_SPI_TransmitReceive+0xf6>
 80072d8:	8afb      	ldrh	r3, [r7, #22]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d16c      	bne.n	80073b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e2:	881a      	ldrh	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	1c9a      	adds	r2, r3, #2
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007302:	e059      	b.n	80073b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b02      	cmp	r3, #2
 8007310:	d11b      	bne.n	800734a <HAL_SPI_TransmitReceive+0x162>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d016      	beq.n	800734a <HAL_SPI_TransmitReceive+0x162>
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	2b01      	cmp	r3, #1
 8007320:	d113      	bne.n	800734a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007326:	881a      	ldrh	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007332:	1c9a      	adds	r2, r3, #2
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b01      	cmp	r3, #1
 8007356:	d119      	bne.n	800738c <HAL_SPI_TransmitReceive+0x1a4>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d014      	beq.n	800738c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736c:	b292      	uxth	r2, r2
 800736e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	1c9a      	adds	r2, r3, #2
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800737e:	b29b      	uxth	r3, r3
 8007380:	3b01      	subs	r3, #1
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007388:	2301      	movs	r3, #1
 800738a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800738c:	f7fb f908 	bl	80025a0 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007398:	429a      	cmp	r2, r3
 800739a:	d80d      	bhi.n	80073b8 <HAL_SPI_TransmitReceive+0x1d0>
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	d009      	beq.n	80073b8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e0bc      	b.n	8007532 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1a0      	bne.n	8007304 <HAL_SPI_TransmitReceive+0x11c>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d19b      	bne.n	8007304 <HAL_SPI_TransmitReceive+0x11c>
 80073cc:	e082      	b.n	80074d4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_SPI_TransmitReceive+0x1f4>
 80073d6:	8afb      	ldrh	r3, [r7, #22]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d171      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	330c      	adds	r3, #12
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007402:	e05d      	b.n	80074c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b02      	cmp	r3, #2
 8007410:	d11c      	bne.n	800744c <HAL_SPI_TransmitReceive+0x264>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007416:	b29b      	uxth	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d017      	beq.n	800744c <HAL_SPI_TransmitReceive+0x264>
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	2b01      	cmp	r3, #1
 8007420:	d114      	bne.n	800744c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	330c      	adds	r3, #12
 800742c:	7812      	ldrb	r2, [r2, #0]
 800742e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800743e:	b29b      	uxth	r3, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b01      	cmp	r3, #1
 8007458:	d119      	bne.n	800748e <HAL_SPI_TransmitReceive+0x2a6>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d014      	beq.n	800748e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007480:	b29b      	uxth	r3, r3
 8007482:	3b01      	subs	r3, #1
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800748a:	2301      	movs	r3, #1
 800748c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800748e:	f7fb f887 	bl	80025a0 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800749a:	429a      	cmp	r2, r3
 800749c:	d803      	bhi.n	80074a6 <HAL_SPI_TransmitReceive+0x2be>
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a4:	d102      	bne.n	80074ac <HAL_SPI_TransmitReceive+0x2c4>
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d109      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e038      	b.n	8007532 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d19c      	bne.n	8007404 <HAL_SPI_TransmitReceive+0x21c>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d197      	bne.n	8007404 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074d4:	6a3a      	ldr	r2, [r7, #32]
 80074d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f8c3 	bl	8007664 <SPI_EndRxTxTransaction>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d008      	beq.n	80074f6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e01d      	b.n	8007532 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074fe:	2300      	movs	r3, #0
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e000      	b.n	8007532 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007530:	2300      	movs	r3, #0
  }
}
 8007532:	4618      	mov	r0, r3
 8007534:	3728      	adds	r7, #40	@ 0x28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007548:	b2db      	uxtb	r3, r3
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr

08007554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007564:	f7fb f81c 	bl	80025a0 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4413      	add	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007574:	f7fb f814 	bl	80025a0 <HAL_GetTick>
 8007578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800757a:	4b39      	ldr	r3, [pc, #228]	@ (8007660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	015b      	lsls	r3, r3, #5
 8007580:	0d1b      	lsrs	r3, r3, #20
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800758a:	e054      	b.n	8007636 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d050      	beq.n	8007636 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007594:	f7fb f804 	bl	80025a0 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d902      	bls.n	80075aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d13d      	bne.n	8007626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075c2:	d111      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075cc:	d004      	beq.n	80075d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d6:	d107      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f0:	d10f      	bne.n	8007612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e017      	b.n	8007656 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	3b01      	subs	r3, #1
 8007634:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	429a      	cmp	r2, r3
 8007652:	d19b      	bne.n	800758c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3720      	adds	r7, #32
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000004 	.word	0x20000004

08007664 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2201      	movs	r2, #1
 8007678:	2102      	movs	r1, #2
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7ff ff6a 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d007      	beq.n	8007696 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768a:	f043 0220 	orr.w	r2, r3, #32
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e013      	b.n	80076be <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2200      	movs	r2, #0
 800769e:	2180      	movs	r1, #128	@ 0x80
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff ff57 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d007      	beq.n	80076bc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b0:	f043 0220 	orr.w	r2, r3, #32
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e000      	b.n	80076be <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e042      	b.n	800775e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d106      	bne.n	80076f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fa fce9 	bl	80020c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2224      	movs	r2, #36	@ 0x24
 80076f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007708:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fdee 	bl	80082ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691a      	ldr	r2, [r3, #16]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800771e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695a      	ldr	r2, [r3, #20]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800772e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800773e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2220      	movs	r2, #32
 8007752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b08a      	sub	sp, #40	@ 0x28
 800776a:	af02      	add	r7, sp, #8
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b20      	cmp	r3, #32
 8007784:	d175      	bne.n	8007872 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <HAL_UART_Transmit+0x2c>
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e06e      	b.n	8007874 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2221      	movs	r2, #33	@ 0x21
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077a4:	f7fa fefc 	bl	80025a0 <HAL_GetTick>
 80077a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077be:	d108      	bne.n	80077d2 <HAL_UART_Transmit+0x6c>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	61bb      	str	r3, [r7, #24]
 80077d0:	e003      	b.n	80077da <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077da:	e02e      	b.n	800783a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2200      	movs	r2, #0
 80077e4:	2180      	movs	r1, #128	@ 0x80
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 fb53 	bl	8007e92 <UART_WaitOnFlagUntilTimeout>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d005      	beq.n	80077fe <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e03a      	b.n	8007874 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10b      	bne.n	800781c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007812:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	3302      	adds	r3, #2
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	e007      	b.n	800782c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	781a      	ldrb	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	3301      	adds	r3, #1
 800782a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1cb      	bne.n	80077dc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2200      	movs	r2, #0
 800784c:	2140      	movs	r1, #64	@ 0x40
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fb1f 	bl	8007e92 <UART_WaitOnFlagUntilTimeout>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2220      	movs	r2, #32
 800785e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e006      	b.n	8007874 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	e000      	b.n	8007874 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007872:	2302      	movs	r3, #2
  }
}
 8007874:	4618      	mov	r0, r3
 8007876:	3720      	adds	r7, #32
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08c      	sub	sp, #48	@ 0x30
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	4613      	mov	r3, r2
 8007888:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b20      	cmp	r3, #32
 8007894:	d14a      	bne.n	800792c <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e043      	b.n	800792e <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2201      	movs	r2, #1
 80078aa:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	461a      	mov	r2, r3
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fb43 	bl	8007f44 <UART_Start_Receive_IT>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80078c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d12c      	bne.n	8007926 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d125      	bne.n	8007920 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078d4:	2300      	movs	r3, #0
 80078d6:	613b      	str	r3, [r7, #16]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	330c      	adds	r3, #12
 80078f0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	617b      	str	r3, [r7, #20]
   return(result);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f043 0310 	orr.w	r3, r3, #16
 8007900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	330c      	adds	r3, #12
 8007908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800790a:	627a      	str	r2, [r7, #36]	@ 0x24
 800790c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6a39      	ldr	r1, [r7, #32]
 8007910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	61fb      	str	r3, [r7, #28]
   return(result);
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e5      	bne.n	80078ea <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800791e:	e002      	b.n	8007926 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800792a:	e000      	b.n	800792e <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800792c:	2302      	movs	r3, #2
  }
}
 800792e:	4618      	mov	r0, r3
 8007930:	3730      	adds	r7, #48	@ 0x30
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b0ba      	sub	sp, #232	@ 0xe8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800795e:	2300      	movs	r3, #0
 8007960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007964:	2300      	movs	r3, #0
 8007966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800796a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10f      	bne.n	800799e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800797e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <HAL_UART_IRQHandler+0x66>
 800798a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fbea 	bl	8008170 <UART_Receive_IT>
      return;
 800799c:	e25b      	b.n	8007e56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800799e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 80de 	beq.w	8007b64 <HAL_UART_IRQHandler+0x22c>
 80079a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d106      	bne.n	80079c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80d1 	beq.w	8007b64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00b      	beq.n	80079e6 <HAL_UART_IRQHandler+0xae>
 80079ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079de:	f043 0201 	orr.w	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00b      	beq.n	8007a0a <HAL_UART_IRQHandler+0xd2>
 80079f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d005      	beq.n	8007a0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a02:	f043 0202 	orr.w	r2, r3, #2
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <HAL_UART_IRQHandler+0xf6>
 8007a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a26:	f043 0204 	orr.w	r2, r3, #4
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a32:	f003 0308 	and.w	r3, r3, #8
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d011      	beq.n	8007a5e <HAL_UART_IRQHandler+0x126>
 8007a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d105      	bne.n	8007a52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d005      	beq.n	8007a5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a56:	f043 0208 	orr.w	r2, r3, #8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 81f2 	beq.w	8007e4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d008      	beq.n	8007a86 <HAL_UART_IRQHandler+0x14e>
 8007a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fb75 	bl	8008170 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	bf14      	ite	ne
 8007a94:	2301      	movne	r3, #1
 8007a96:	2300      	moveq	r3, #0
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d103      	bne.n	8007ab2 <HAL_UART_IRQHandler+0x17a>
 8007aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d04f      	beq.n	8007b52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa7f 	bl	8007fb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d041      	beq.n	8007b4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3314      	adds	r3, #20
 8007acc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3314      	adds	r3, #20
 8007aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007af2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007af6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1d9      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d013      	beq.n	8007b42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b1e:	4a7e      	ldr	r2, [pc, #504]	@ (8007d18 <HAL_UART_IRQHandler+0x3e0>)
 8007b20:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fb fd42 	bl	80035b0 <HAL_DMA_Abort_IT>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d016      	beq.n	8007b60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b40:	e00e      	b.n	8007b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f99c 	bl	8007e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b48:	e00a      	b.n	8007b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f998 	bl	8007e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	e006      	b.n	8007b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f994 	bl	8007e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007b5e:	e175      	b.n	8007e4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	bf00      	nop
    return;
 8007b62:	e173      	b.n	8007e4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	f040 814f 	bne.w	8007e0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b72:	f003 0310 	and.w	r3, r3, #16
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 8148 	beq.w	8007e0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b80:	f003 0310 	and.w	r3, r3, #16
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 8141 	beq.w	8007e0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60bb      	str	r3, [r7, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	60bb      	str	r3, [r7, #8]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	60bb      	str	r3, [r7, #8]
 8007b9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 80b6 	beq.w	8007d1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8145 	beq.w	8007e50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	f080 813e 	bcs.w	8007e50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	f000 8088 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	330c      	adds	r3, #12
 8007bee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	330c      	adds	r3, #12
 8007c10:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c14:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c20:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1d9      	bne.n	8007be8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3314      	adds	r3, #20
 8007c3a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c46:	f023 0301 	bic.w	r3, r3, #1
 8007c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3314      	adds	r3, #20
 8007c54:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c58:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c60:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e1      	bne.n	8007c34 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3314      	adds	r3, #20
 8007c76:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3314      	adds	r3, #20
 8007c90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c94:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c96:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c9a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ca2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e3      	bne.n	8007c70 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	330c      	adds	r3, #12
 8007cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc8:	f023 0310 	bic.w	r3, r3, #16
 8007ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	330c      	adds	r3, #12
 8007cd6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007cda:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007cdc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ce0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e3      	bne.n	8007cb6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fb fc21 	bl	800353a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7f9 ff54 	bl	8001bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d14:	e09c      	b.n	8007e50 <HAL_UART_IRQHandler+0x518>
 8007d16:	bf00      	nop
 8007d18:	0800807b 	.word	0x0800807b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 808e 	beq.w	8007e54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8089 	beq.w	8007e54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007d66:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e3      	bne.n	8007d42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3314      	adds	r3, #20
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	623b      	str	r3, [r7, #32]
   return(result);
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3314      	adds	r3, #20
 8007d9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e3      	bne.n	8007d7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0310 	bic.w	r3, r3, #16
 8007dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007de4:	61fa      	str	r2, [r7, #28]
 8007de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	69b9      	ldr	r1, [r7, #24]
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	617b      	str	r3, [r7, #20]
   return(result);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e3      	bne.n	8007dc0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7f9 fed9 	bl	8001bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e0a:	e023      	b.n	8007e54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d009      	beq.n	8007e2c <HAL_UART_IRQHandler+0x4f4>
 8007e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f93c 	bl	80080a2 <UART_Transmit_IT>
    return;
 8007e2a:	e014      	b.n	8007e56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00e      	beq.n	8007e56 <HAL_UART_IRQHandler+0x51e>
 8007e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f97b 	bl	8008140 <UART_EndTransmit_IT>
    return;
 8007e4a:	e004      	b.n	8007e56 <HAL_UART_IRQHandler+0x51e>
    return;
 8007e4c:	bf00      	nop
 8007e4e:	e002      	b.n	8007e56 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e50:	bf00      	nop
 8007e52:	e000      	b.n	8007e56 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e54:	bf00      	nop
  }
}
 8007e56:	37e8      	adds	r7, #232	@ 0xe8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bc80      	pop	{r7}
 8007e6c:	4770      	bx	lr

08007e6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr

08007e80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr

08007e92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b086      	sub	sp, #24
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	603b      	str	r3, [r7, #0]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ea2:	e03b      	b.n	8007f1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eaa:	d037      	beq.n	8007f1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eac:	f7fa fb78 	bl	80025a0 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	6a3a      	ldr	r2, [r7, #32]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d302      	bcc.n	8007ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e03a      	b.n	8007f3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d023      	beq.n	8007f1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b80      	cmp	r3, #128	@ 0x80
 8007ed8:	d020      	beq.n	8007f1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b40      	cmp	r3, #64	@ 0x40
 8007ede:	d01d      	beq.n	8007f1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0308 	and.w	r3, r3, #8
 8007eea:	2b08      	cmp	r3, #8
 8007eec:	d116      	bne.n	8007f1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007eee:	2300      	movs	r3, #0
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 f856 	bl	8007fb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e00f      	b.n	8007f3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	4013      	ands	r3, r2
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	bf0c      	ite	eq
 8007f2c:	2301      	moveq	r3, #1
 8007f2e:	2300      	movne	r3, #0
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	461a      	mov	r2, r3
 8007f34:	79fb      	ldrb	r3, [r7, #7]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d0b4      	beq.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	88fa      	ldrh	r2, [r7, #6]
 8007f5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	88fa      	ldrh	r2, [r7, #6]
 8007f62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2222      	movs	r2, #34	@ 0x22
 8007f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695a      	ldr	r2, [r3, #20]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0201 	orr.w	r2, r2, #1
 8007f98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0220 	orr.w	r2, r2, #32
 8007fa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr

08007fb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b095      	sub	sp, #84	@ 0x54
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	330c      	adds	r3, #12
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	330c      	adds	r3, #12
 8007fdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fde:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fe4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e5      	bne.n	8007fbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3314      	adds	r3, #20
 8007ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	61fb      	str	r3, [r7, #28]
   return(result);
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	f023 0301 	bic.w	r3, r3, #1
 8008008:	64bb      	str	r3, [r7, #72]	@ 0x48
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3314      	adds	r3, #20
 8008010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008012:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008014:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e5      	bne.n	8007ff2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802a:	2b01      	cmp	r3, #1
 800802c:	d119      	bne.n	8008062 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	330c      	adds	r3, #12
 8008034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	60bb      	str	r3, [r7, #8]
   return(result);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f023 0310 	bic.w	r3, r3, #16
 8008044:	647b      	str	r3, [r7, #68]	@ 0x44
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	330c      	adds	r3, #12
 800804c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800804e:	61ba      	str	r2, [r7, #24]
 8008050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	6979      	ldr	r1, [r7, #20]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	613b      	str	r3, [r7, #16]
   return(result);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e5      	bne.n	800802e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008070:	bf00      	nop
 8008072:	3754      	adds	r7, #84	@ 0x54
 8008074:	46bd      	mov	sp, r7
 8008076:	bc80      	pop	{r7}
 8008078:	4770      	bx	lr

0800807a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008086:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7ff fef3 	bl	8007e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b085      	sub	sp, #20
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b21      	cmp	r3, #33	@ 0x21
 80080b4:	d13e      	bne.n	8008134 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080be:	d114      	bne.n	80080ea <UART_Transmit_IT+0x48>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d110      	bne.n	80080ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	1c9a      	adds	r2, r3, #2
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	621a      	str	r2, [r3, #32]
 80080e8:	e008      	b.n	80080fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	1c59      	adds	r1, r3, #1
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6211      	str	r1, [r2, #32]
 80080f4:	781a      	ldrb	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29b      	uxth	r3, r3
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	4619      	mov	r1, r3
 800810a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10f      	bne.n	8008130 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800811e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800812e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	e000      	b.n	8008136 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008134:	2302      	movs	r3, #2
  }
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr

08008140 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008156:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff fe7b 	bl	8007e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08c      	sub	sp, #48	@ 0x30
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b22      	cmp	r3, #34	@ 0x22
 8008182:	f040 80ae 	bne.w	80082e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800818e:	d117      	bne.n	80081c0 <UART_Receive_IT+0x50>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d113      	bne.n	80081c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008198:	2300      	movs	r3, #0
 800819a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b8:	1c9a      	adds	r2, r3, #2
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80081be:	e026      	b.n	800820e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d2:	d007      	beq.n	80081e4 <UART_Receive_IT+0x74>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <UART_Receive_IT+0x82>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d106      	bne.n	80081f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ee:	701a      	strb	r2, [r3, #0]
 80081f0:	e008      	b.n	8008204 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008202:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008212:	b29b      	uxth	r3, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	b29b      	uxth	r3, r3
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	4619      	mov	r1, r3
 800821c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800821e:	2b00      	cmp	r3, #0
 8008220:	d15d      	bne.n	80082de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0220 	bic.w	r2, r2, #32
 8008230:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008240:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695a      	ldr	r2, [r3, #20]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008264:	2b01      	cmp	r3, #1
 8008266:	d135      	bne.n	80082d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	330c      	adds	r3, #12
 8008274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	613b      	str	r3, [r7, #16]
   return(result);
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f023 0310 	bic.w	r3, r3, #16
 8008284:	627b      	str	r3, [r7, #36]	@ 0x24
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800828e:	623a      	str	r2, [r7, #32]
 8008290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	69f9      	ldr	r1, [r7, #28]
 8008294:	6a3a      	ldr	r2, [r7, #32]
 8008296:	e841 2300 	strex	r3, r2, [r1]
 800829a:	61bb      	str	r3, [r7, #24]
   return(result);
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e5      	bne.n	800826e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0310 	and.w	r3, r3, #16
 80082ac:	2b10      	cmp	r3, #16
 80082ae:	d10a      	bne.n	80082c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7f9 fc75 	bl	8001bbc <HAL_UARTEx_RxEventCallback>
 80082d2:	e002      	b.n	80082da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff fdca 	bl	8007e6e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	e002      	b.n	80082e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	e000      	b.n	80082e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80082e2:	2302      	movs	r3, #2
  }
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3730      	adds	r7, #48	@ 0x30
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	4313      	orrs	r3, r2
 800831a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008326:	f023 030c 	bic.w	r3, r3, #12
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6812      	ldr	r2, [r2, #0]
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	430b      	orrs	r3, r1
 8008332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a2c      	ldr	r2, [pc, #176]	@ (8008400 <UART_SetConfig+0x114>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d103      	bne.n	800835c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008354:	f7fe fd4e 	bl	8006df4 <HAL_RCC_GetPCLK2Freq>
 8008358:	60f8      	str	r0, [r7, #12]
 800835a:	e002      	b.n	8008362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800835c:	f7fe fd36 	bl	8006dcc <HAL_RCC_GetPCLK1Freq>
 8008360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	4613      	mov	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	009a      	lsls	r2, r3, #2
 800836c:	441a      	add	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	fbb2 f3f3 	udiv	r3, r2, r3
 8008378:	4a22      	ldr	r2, [pc, #136]	@ (8008404 <UART_SetConfig+0x118>)
 800837a:	fba2 2303 	umull	r2, r3, r2, r3
 800837e:	095b      	lsrs	r3, r3, #5
 8008380:	0119      	lsls	r1, r3, #4
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009a      	lsls	r2, r3, #2
 800838c:	441a      	add	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	fbb2 f2f3 	udiv	r2, r2, r3
 8008398:	4b1a      	ldr	r3, [pc, #104]	@ (8008404 <UART_SetConfig+0x118>)
 800839a:	fba3 0302 	umull	r0, r3, r3, r2
 800839e:	095b      	lsrs	r3, r3, #5
 80083a0:	2064      	movs	r0, #100	@ 0x64
 80083a2:	fb00 f303 	mul.w	r3, r0, r3
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	3332      	adds	r3, #50	@ 0x32
 80083ac:	4a15      	ldr	r2, [pc, #84]	@ (8008404 <UART_SetConfig+0x118>)
 80083ae:	fba2 2303 	umull	r2, r3, r2, r3
 80083b2:	095b      	lsrs	r3, r3, #5
 80083b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80083b8:	4419      	add	r1, r3
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009a      	lsls	r2, r3, #2
 80083c4:	441a      	add	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80083d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008404 <UART_SetConfig+0x118>)
 80083d2:	fba3 0302 	umull	r0, r3, r3, r2
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	2064      	movs	r0, #100	@ 0x64
 80083da:	fb00 f303 	mul.w	r3, r0, r3
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	3332      	adds	r3, #50	@ 0x32
 80083e4:	4a07      	ldr	r2, [pc, #28]	@ (8008404 <UART_SetConfig+0x118>)
 80083e6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	f003 020f 	and.w	r2, r3, #15
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	440a      	add	r2, r1
 80083f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80083f8:	bf00      	nop
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40013800 	.word	0x40013800
 8008404:	51eb851f 	.word	0x51eb851f

08008408 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800840c:	4904      	ldr	r1, [pc, #16]	@ (8008420 <MX_FATFS_Init+0x18>)
 800840e:	4805      	ldr	r0, [pc, #20]	@ (8008424 <MX_FATFS_Init+0x1c>)
 8008410:	f002 ff6c 	bl	800b2ec <FATFS_LinkDriver>
 8008414:	4603      	mov	r3, r0
 8008416:	461a      	mov	r2, r3
 8008418:	4b03      	ldr	r3, [pc, #12]	@ (8008428 <MX_FATFS_Init+0x20>)
 800841a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800841c:	bf00      	nop
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20000c48 	.word	0x20000c48
 8008424:	20000010 	.word	0x20000010
 8008428:	20000c44 	.word	0x20000c44

0800842c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008430:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008432:	4618      	mov	r0, r3
 8008434:	46bd      	mov	sp, r7
 8008436:	bc80      	pop	{r7}
 8008438:	4770      	bx	lr

0800843a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	4603      	mov	r3, r0
 8008442:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	4618      	mov	r0, r3
 8008448:	f7f8 fdfc 	bl	8001044 <SD_disk_initialize>
 800844c:	4603      	mov	r3, r0
 800844e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	4618      	mov	r0, r3
 8008466:	f7f8 fed7 	bl	8001218 <SD_disk_status>
 800846a:	4603      	mov	r3, r0
 800846c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
 8008482:	4603      	mov	r3, r0
 8008484:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8008486:	7bf8      	ldrb	r0, [r7, #15]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	f7f8 fed7 	bl	8001240 <SD_disk_read>
 8008492:	4603      	mov	r3, r0
 8008494:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	603b      	str	r3, [r7, #0]
 80084aa:	4603      	mov	r3, r0
 80084ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80084ae:	7bf8      	ldrb	r0, [r7, #15]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	68b9      	ldr	r1, [r7, #8]
 80084b6:	f7f8 ff2d 	bl	8001314 <SD_disk_write>
 80084ba:	4603      	mov	r3, r0
 80084bc:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	4603      	mov	r3, r0
 80084ce:	603a      	str	r2, [r7, #0]
 80084d0:	71fb      	strb	r3, [r7, #7]
 80084d2:	460b      	mov	r3, r1
 80084d4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80084d6:	79fb      	ldrb	r3, [r7, #7]
 80084d8:	79b9      	ldrb	r1, [r7, #6]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f8 ff9d 	bl	800141c <SD_disk_ioctl>
 80084e2:	4603      	mov	r3, r0
 80084e4:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	4a08      	ldr	r2, [pc, #32]	@ (8008520 <disk_status+0x30>)
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	79fa      	ldrb	r2, [r7, #7]
 8008508:	4905      	ldr	r1, [pc, #20]	@ (8008520 <disk_status+0x30>)
 800850a:	440a      	add	r2, r1
 800850c:	7a12      	ldrb	r2, [r2, #8]
 800850e:	4610      	mov	r0, r2
 8008510:	4798      	blx	r3
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20000c6c 	.word	0x20000c6c

08008524 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	4a0d      	ldr	r2, [pc, #52]	@ (800856c <disk_initialize+0x48>)
 8008536:	5cd3      	ldrb	r3, [r2, r3]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d111      	bne.n	8008560 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	4a0b      	ldr	r2, [pc, #44]	@ (800856c <disk_initialize+0x48>)
 8008540:	2101      	movs	r1, #1
 8008542:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	4a09      	ldr	r2, [pc, #36]	@ (800856c <disk_initialize+0x48>)
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	79fa      	ldrb	r2, [r7, #7]
 8008552:	4906      	ldr	r1, [pc, #24]	@ (800856c <disk_initialize+0x48>)
 8008554:	440a      	add	r2, r1
 8008556:	7a12      	ldrb	r2, [r2, #8]
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000c6c 	.word	0x20000c6c

08008570 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008570:	b590      	push	{r4, r7, lr}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	607a      	str	r2, [r7, #4]
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	4a0a      	ldr	r2, [pc, #40]	@ (80085ac <disk_read+0x3c>)
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	689c      	ldr	r4, [r3, #8]
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	4a07      	ldr	r2, [pc, #28]	@ (80085ac <disk_read+0x3c>)
 8008590:	4413      	add	r3, r2
 8008592:	7a18      	ldrb	r0, [r3, #8]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	47a0      	blx	r4
 800859c:	4603      	mov	r3, r0
 800859e:	75fb      	strb	r3, [r7, #23]
  return res;
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd90      	pop	{r4, r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20000c6c 	.word	0x20000c6c

080085b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80085b0:	b590      	push	{r4, r7, lr}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	4a0a      	ldr	r2, [pc, #40]	@ (80085ec <disk_write+0x3c>)
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	68dc      	ldr	r4, [r3, #12]
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	4a07      	ldr	r2, [pc, #28]	@ (80085ec <disk_write+0x3c>)
 80085d0:	4413      	add	r3, r2
 80085d2:	7a18      	ldrb	r0, [r3, #8]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	68b9      	ldr	r1, [r7, #8]
 80085da:	47a0      	blx	r4
 80085dc:	4603      	mov	r3, r0
 80085de:	75fb      	strb	r3, [r7, #23]
  return res;
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd90      	pop	{r4, r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20000c6c 	.word	0x20000c6c

080085f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	603a      	str	r2, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
 80085fc:	460b      	mov	r3, r1
 80085fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	4a09      	ldr	r2, [pc, #36]	@ (8008628 <disk_ioctl+0x38>)
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	79fa      	ldrb	r2, [r7, #7]
 800860e:	4906      	ldr	r1, [pc, #24]	@ (8008628 <disk_ioctl+0x38>)
 8008610:	440a      	add	r2, r1
 8008612:	7a10      	ldrb	r0, [r2, #8]
 8008614:	79b9      	ldrb	r1, [r7, #6]
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	4798      	blx	r3
 800861a:	4603      	mov	r3, r0
 800861c:	73fb      	strb	r3, [r7, #15]
  return res;
 800861e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20000c6c 	.word	0x20000c6c

0800862c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008640:	e007      	b.n	8008652 <mem_cpy+0x26>
		*d++ = *s++;
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	1c53      	adds	r3, r2, #1
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	1c59      	adds	r1, r3, #1
 800864c:	6179      	str	r1, [r7, #20]
 800864e:	7812      	ldrb	r2, [r2, #0]
 8008650:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	1e5a      	subs	r2, r3, #1
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1f2      	bne.n	8008642 <mem_cpy+0x16>
}
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr

08008668 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008678:	e005      	b.n	8008686 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	617a      	str	r2, [r7, #20]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	1e5a      	subs	r2, r3, #1
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1f4      	bne.n	800867a <mem_set+0x12>
}
 8008690:	bf00      	nop
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800869c:	b480      	push	{r7}
 800869e:	b089      	sub	sp, #36	@ 0x24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	61fb      	str	r3, [r7, #28]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80086b4:	bf00      	nop
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	1e5a      	subs	r2, r3, #1
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00d      	beq.n	80086dc <mem_cmp+0x40>
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	61fa      	str	r2, [r7, #28]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	4619      	mov	r1, r3
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	61ba      	str	r2, [r7, #24]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	1acb      	subs	r3, r1, r3
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0ec      	beq.n	80086b6 <mem_cmp+0x1a>
	return r;
 80086dc:	697b      	ldr	r3, [r7, #20]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3724      	adds	r7, #36	@ 0x24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr

080086e8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80086f2:	e002      	b.n	80086fa <chk_chr+0x12>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3301      	adds	r3, #1
 80086f8:	607b      	str	r3, [r7, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <chk_chr+0x26>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	4293      	cmp	r3, r2
 800870c:	d1f2      	bne.n	80086f4 <chk_chr+0xc>
	return *str;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	781b      	ldrb	r3, [r3, #0]
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008726:	2300      	movs	r3, #0
 8008728:	60bb      	str	r3, [r7, #8]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	e038      	b.n	80087a2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8008730:	492f      	ldr	r1, [pc, #188]	@ (80087f0 <chk_lock+0xd4>)
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	4613      	mov	r3, r2
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d029      	beq.n	8008798 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008744:	492a      	ldr	r1, [pc, #168]	@ (80087f0 <chk_lock+0xd4>)
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4613      	mov	r3, r2
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	440b      	add	r3, r1
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800875a:	429a      	cmp	r2, r3
 800875c:	d11e      	bne.n	800879c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800875e:	4924      	ldr	r1, [pc, #144]	@ (80087f0 <chk_lock+0xd4>)
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4613      	mov	r3, r2
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	440b      	add	r3, r1
 800876c:	3304      	adds	r3, #4
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008776:	429a      	cmp	r2, r3
 8008778:	d110      	bne.n	800879c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800877a:	491d      	ldr	r1, [pc, #116]	@ (80087f0 <chk_lock+0xd4>)
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4613      	mov	r3, r2
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	3308      	adds	r3, #8
 800878a:	881a      	ldrh	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 8008792:	429a      	cmp	r2, r3
 8008794:	d102      	bne.n	800879c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8008796:	e007      	b.n	80087a8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8008798:	2301      	movs	r3, #1
 800879a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3301      	adds	r3, #1
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d9c3      	bls.n	8008730 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d109      	bne.n	80087c2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <chk_lock+0x9e>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d101      	bne.n	80087be <chk_lock+0xa2>
 80087ba:	2300      	movs	r3, #0
 80087bc:	e013      	b.n	80087e6 <chk_lock+0xca>
 80087be:	2312      	movs	r3, #18
 80087c0:	e011      	b.n	80087e6 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10b      	bne.n	80087e0 <chk_lock+0xc4>
 80087c8:	4909      	ldr	r1, [pc, #36]	@ (80087f0 <chk_lock+0xd4>)
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	4613      	mov	r3, r2
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	330a      	adds	r3, #10
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087de:	d101      	bne.n	80087e4 <chk_lock+0xc8>
 80087e0:	2310      	movs	r3, #16
 80087e2:	e000      	b.n	80087e6 <chk_lock+0xca>
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc80      	pop	{r7}
 80087ee:	4770      	bx	lr
 80087f0:	20000c54 	.word	0x20000c54

080087f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087fa:	2300      	movs	r3, #0
 80087fc:	607b      	str	r3, [r7, #4]
 80087fe:	e002      	b.n	8008806 <enq_lock+0x12>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3301      	adds	r3, #1
 8008804:	607b      	str	r3, [r7, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d809      	bhi.n	8008820 <enq_lock+0x2c>
 800880c:	490a      	ldr	r1, [pc, #40]	@ (8008838 <enq_lock+0x44>)
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	4613      	mov	r3, r2
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	440b      	add	r3, r1
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1ef      	bne.n	8008800 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b02      	cmp	r3, #2
 8008824:	bf14      	ite	ne
 8008826:	2301      	movne	r3, #1
 8008828:	2300      	moveq	r3, #0
 800882a:	b2db      	uxtb	r3, r3
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	20000c54 	.word	0x20000c54

0800883c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	e02b      	b.n	80088a4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800884c:	4955      	ldr	r1, [pc, #340]	@ (80089a4 <inc_lock+0x168>)
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4613      	mov	r3, r2
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	4413      	add	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	440b      	add	r3, r1
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8008862:	429a      	cmp	r2, r3
 8008864:	d11b      	bne.n	800889e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8008866:	494f      	ldr	r1, [pc, #316]	@ (80089a4 <inc_lock+0x168>)
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	4613      	mov	r3, r2
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	4413      	add	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	440b      	add	r3, r1
 8008874:	3304      	adds	r3, #4
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800887e:	429a      	cmp	r2, r3
 8008880:	d10d      	bne.n	800889e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8008882:	4948      	ldr	r1, [pc, #288]	@ (80089a4 <inc_lock+0x168>)
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4613      	mov	r3, r2
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	440b      	add	r3, r1
 8008890:	3308      	adds	r3, #8
 8008892:	881a      	ldrh	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 800889a:	429a      	cmp	r2, r3
 800889c:	d006      	beq.n	80088ac <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3301      	adds	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d9d0      	bls.n	800884c <inc_lock+0x10>
 80088aa:	e000      	b.n	80088ae <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80088ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d145      	bne.n	8008940 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	e002      	b.n	80088c0 <inc_lock+0x84>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3301      	adds	r3, #1
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d809      	bhi.n	80088da <inc_lock+0x9e>
 80088c6:	4937      	ldr	r1, [pc, #220]	@ (80089a4 <inc_lock+0x168>)
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4613      	mov	r3, r2
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1ef      	bne.n	80088ba <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d101      	bne.n	80088e4 <inc_lock+0xa8>
 80088e0:	2300      	movs	r3, #0
 80088e2:	e05a      	b.n	800899a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 80088ea:	482e      	ldr	r0, [pc, #184]	@ (80089a4 <inc_lock+0x168>)
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4613      	mov	r3, r2
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4403      	add	r3, r0
 80088f8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8008900:	4828      	ldr	r0, [pc, #160]	@ (80089a4 <inc_lock+0x168>)
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	4613      	mov	r3, r2
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4403      	add	r3, r0
 800890e:	3304      	adds	r3, #4
 8008910:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 8008918:	4922      	ldr	r1, [pc, #136]	@ (80089a4 <inc_lock+0x168>)
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4613      	mov	r3, r2
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	3308      	adds	r3, #8
 8008928:	4602      	mov	r2, r0
 800892a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800892c:	491d      	ldr	r1, [pc, #116]	@ (80089a4 <inc_lock+0x168>)
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4613      	mov	r3, r2
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	4413      	add	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	440b      	add	r3, r1
 800893a:	330a      	adds	r3, #10
 800893c:	2200      	movs	r2, #0
 800893e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00c      	beq.n	8008960 <inc_lock+0x124>
 8008946:	4917      	ldr	r1, [pc, #92]	@ (80089a4 <inc_lock+0x168>)
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	4613      	mov	r3, r2
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	4413      	add	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	440b      	add	r3, r1
 8008954:	330a      	adds	r3, #10
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <inc_lock+0x124>
 800895c:	2300      	movs	r3, #0
 800895e:	e01c      	b.n	800899a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <inc_lock+0x142>
 8008966:	490f      	ldr	r1, [pc, #60]	@ (80089a4 <inc_lock+0x168>)
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	4613      	mov	r3, r2
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	440b      	add	r3, r1
 8008974:	330a      	adds	r3, #10
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	3301      	adds	r3, #1
 800897a:	b299      	uxth	r1, r3
 800897c:	e001      	b.n	8008982 <inc_lock+0x146>
 800897e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008982:	4808      	ldr	r0, [pc, #32]	@ (80089a4 <inc_lock+0x168>)
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4613      	mov	r3, r2
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4403      	add	r3, r0
 8008990:	330a      	adds	r3, #10
 8008992:	460a      	mov	r2, r1
 8008994:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3301      	adds	r3, #1
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	bc80      	pop	{r7}
 80089a2:	4770      	bx	lr
 80089a4:	20000c54 	.word	0x20000c54

080089a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	607b      	str	r3, [r7, #4]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d82e      	bhi.n	8008a1a <dec_lock+0x72>
		n = Files[i].ctr;
 80089bc:	491b      	ldr	r1, [pc, #108]	@ (8008a2c <dec_lock+0x84>)
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	4613      	mov	r3, r2
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	4413      	add	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	440b      	add	r3, r1
 80089ca:	330a      	adds	r3, #10
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d6:	d101      	bne.n	80089dc <dec_lock+0x34>
 80089d8:	2300      	movs	r3, #0
 80089da:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80089dc:	89fb      	ldrh	r3, [r7, #14]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <dec_lock+0x40>
 80089e2:	89fb      	ldrh	r3, [r7, #14]
 80089e4:	3b01      	subs	r3, #1
 80089e6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80089e8:	4910      	ldr	r1, [pc, #64]	@ (8008a2c <dec_lock+0x84>)
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	4613      	mov	r3, r2
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	440b      	add	r3, r1
 80089f6:	330a      	adds	r3, #10
 80089f8:	89fa      	ldrh	r2, [r7, #14]
 80089fa:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089fc:	89fb      	ldrh	r3, [r7, #14]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d108      	bne.n	8008a14 <dec_lock+0x6c>
 8008a02:	490a      	ldr	r1, [pc, #40]	@ (8008a2c <dec_lock+0x84>)
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	4613      	mov	r3, r2
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	440b      	add	r3, r1
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	737b      	strb	r3, [r7, #13]
 8008a18:	e001      	b.n	8008a1e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008a1e:	7b7b      	ldrb	r3, [r7, #13]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bc80      	pop	{r7}
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	20000c54 	.word	0x20000c54

08008a30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	e016      	b.n	8008a6c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008a3e:	4910      	ldr	r1, [pc, #64]	@ (8008a80 <clear_lock+0x50>)
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4613      	mov	r3, r2
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d108      	bne.n	8008a66 <clear_lock+0x36>
 8008a54:	490a      	ldr	r1, [pc, #40]	@ (8008a80 <clear_lock+0x50>)
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	4413      	add	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d9e5      	bls.n	8008a3e <clear_lock+0xe>
	}
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bc80      	pop	{r7}
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	20000c54 	.word	0x20000c54

08008a84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d038      	beq.n	8008b0c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8008aa0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8008aa8:	6879      	ldr	r1, [r7, #4]
 8008aaa:	2301      	movs	r3, #1
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	f7ff fd7f 	bl	80085b0 <disk_write>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <sync_window+0x3a>
			res = FR_DISK_ERR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	73fb      	strb	r3, [r7, #15]
 8008abc:	e026      	b.n	8008b0c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	1ad2      	subs	r2, r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d218      	bcs.n	8008b0c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8008ae0:	613b      	str	r3, [r7, #16]
 8008ae2:	e010      	b.n	8008b06 <sync_window+0x82>
					wsect += fs->fsize;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	4413      	add	r3, r2
 8008aee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	2301      	movs	r3, #1
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	f7ff fd58 	bl	80085b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	613b      	str	r3, [r7, #16]
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d8eb      	bhi.n	8008ae4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d01b      	beq.n	8008b68 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff ffa7 	bl	8008a84 <sync_window>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d113      	bne.n	8008b68 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	2301      	movs	r3, #1
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	f7ff fd10 	bl	8008570 <disk_read>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d004      	beq.n	8008b60 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008b56:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		}
	}
	return res;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff ff82 	bl	8008a84 <sync_window>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f040 809b 	bne.w	8008cc2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	f040 8088 	bne.w	8008ca8 <sync_fs+0x136>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	f040 8082 	bne.w	8008ca8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008baa:	2100      	movs	r1, #0
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff fd5b 	bl	8008668 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2255      	movs	r2, #85	@ 0x55
 8008bb6:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	22aa      	movs	r2, #170	@ 0xaa
 8008bbe:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2252      	movs	r2, #82	@ 0x52
 8008bc6:	701a      	strb	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2252      	movs	r2, #82	@ 0x52
 8008bcc:	705a      	strb	r2, [r3, #1]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2261      	movs	r2, #97	@ 0x61
 8008bd2:	709a      	strb	r2, [r3, #2]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2241      	movs	r2, #65	@ 0x41
 8008bd8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2272      	movs	r2, #114	@ 0x72
 8008bde:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2272      	movs	r2, #114	@ 0x72
 8008be6:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2241      	movs	r2, #65	@ 0x41
 8008bee:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2261      	movs	r2, #97	@ 0x61
 8008bf6:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	0a1b      	lsrs	r3, r3, #8
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008c22:	0c1b      	lsrs	r3, r3, #16
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008c32:	0e1b      	lsrs	r3, r3, #24
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	0a1b      	lsrs	r3, r3, #8
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008c64:	0c1b      	lsrs	r3, r3, #16
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8008c74:	0e1b      	lsrs	r3, r3, #24
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f7ff fc88 	bl	80085b0 <disk_write>
			fs->fsi_flag = 0;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff fc9c 	bl	80085f0 <disk_ioctl>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	3b02      	subs	r3, #2
 8008cda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ce2:	3b02      	subs	r3, #2
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d301      	bcc.n	8008cee <clust2sect+0x22>
 8008cea:	2300      	movs	r3, #0
 8008cec:	e00a      	b.n	8008d04 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	fb03 f202 	mul.w	r2, r3, r2
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8008d02:	4413      	add	r3, r2
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr

08008d0e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b086      	sub	sp, #24
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d905      	bls.n	8008d2a <get_fat+0x1c>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d302      	bcc.n	8008d30 <get_fat+0x22>
		val = 1;	/* Internal error */
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	617b      	str	r3, [r7, #20]
 8008d2e:	e0a3      	b.n	8008e78 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008d30:	f04f 33ff 	mov.w	r3, #4294967295
 8008d34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d068      	beq.n	8008e12 <get_fat+0x104>
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	f300 808f 	bgt.w	8008e64 <get_fat+0x156>
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d002      	beq.n	8008d50 <get_fat+0x42>
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d03f      	beq.n	8008dce <get_fat+0xc0>
 8008d4e:	e089      	b.n	8008e64 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	085b      	lsrs	r3, r3, #1
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	0a5b      	lsrs	r3, r3, #9
 8008d68:	4413      	add	r3, r2
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff fed2 	bl	8008b16 <move_window>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d178      	bne.n	8008e6a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	60fa      	str	r2, [r7, #12]
 8008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	5cd3      	ldrb	r3, [r2, r3]
 8008d86:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	0a5b      	lsrs	r3, r3, #9
 8008d92:	4413      	add	r3, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff febd 	bl	8008b16 <move_window>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d165      	bne.n	8008e6e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	5cd3      	ldrb	r3, [r2, r3]
 8008dac:	021b      	lsls	r3, r3, #8
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <get_fat+0xb6>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	091b      	lsrs	r3, r3, #4
 8008dc2:	e002      	b.n	8008dca <get_fat+0xbc>
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dca:	617b      	str	r3, [r7, #20]
			break;
 8008dcc:	e054      	b.n	8008e78 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	0a1b      	lsrs	r3, r3, #8
 8008dd8:	4413      	add	r3, r2
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff fe9a 	bl	8008b16 <move_window>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d144      	bne.n	8008e72 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	4413      	add	r3, r2
 8008df4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	b21b      	sxth	r3, r3
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	b21a      	sxth	r2, r3
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	b21b      	sxth	r3, r3
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	b21b      	sxth	r3, r3
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	617b      	str	r3, [r7, #20]
			break;
 8008e10:	e032      	b.n	8008e78 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	09db      	lsrs	r3, r3, #7
 8008e1c:	4413      	add	r3, r2
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff fe78 	bl	8008b16 <move_window>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d124      	bne.n	8008e76 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4413      	add	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	3303      	adds	r3, #3
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	061a      	lsls	r2, r3, #24
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	3302      	adds	r3, #2
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	041b      	lsls	r3, r3, #16
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	021b      	lsls	r3, r3, #8
 8008e54:	4313      	orrs	r3, r2
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	7812      	ldrb	r2, [r2, #0]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008e60:	617b      	str	r3, [r7, #20]
			break;
 8008e62:	e009      	b.n	8008e78 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8008e64:	2301      	movs	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	e006      	b.n	8008e78 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e6a:	bf00      	nop
 8008e6c:	e004      	b.n	8008e78 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e6e:	bf00      	nop
 8008e70:	e002      	b.n	8008e78 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e72:	bf00      	nop
 8008e74:	e000      	b.n	8008e78 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008e76:	bf00      	nop
		}
	}

	return val;
 8008e78:	697b      	ldr	r3, [r7, #20]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b088      	sub	sp, #32
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d905      	bls.n	8008ea0 <put_fat+0x1e>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d302      	bcc.n	8008ea6 <put_fat+0x24>
		res = FR_INT_ERR;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	77fb      	strb	r3, [r7, #31]
 8008ea4:	e0f6      	b.n	8009094 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	f000 809e 	beq.w	8008fee <put_fat+0x16c>
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	f300 80e4 	bgt.w	8009080 <put_fat+0x1fe>
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d002      	beq.n	8008ec2 <put_fat+0x40>
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d06f      	beq.n	8008fa0 <put_fat+0x11e>
 8008ec0:	e0de      	b.n	8009080 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	617b      	str	r3, [r7, #20]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4413      	add	r3, r2
 8008ece:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	0a5b      	lsrs	r3, r3, #9
 8008eda:	4413      	add	r3, r2
 8008edc:	4619      	mov	r1, r3
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff fe19 	bl	8008b16 <move_window>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ee8:	7ffb      	ldrb	r3, [r7, #31]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f040 80cb 	bne.w	8009086 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	617a      	str	r2, [r7, #20]
 8008ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00d      	beq.n	8008f26 <put_fat+0xa4>
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	b25b      	sxtb	r3, r3
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	b25a      	sxtb	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	b25b      	sxtb	r3, r3
 8008f1a:	011b      	lsls	r3, r3, #4
 8008f1c:	b25b      	sxtb	r3, r3
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	b25b      	sxtb	r3, r3
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	e001      	b.n	8008f2a <put_fat+0xa8>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	0a5b      	lsrs	r3, r3, #9
 8008f40:	4413      	add	r3, r2
 8008f42:	4619      	mov	r1, r3
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f7ff fde6 	bl	8008b16 <move_window>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f4e:	7ffb      	ldrb	r3, [r7, #31]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f040 809a 	bne.w	800908a <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4413      	add	r3, r2
 8008f60:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <put_fat+0xf2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	091b      	lsrs	r3, r3, #4
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	e00e      	b.n	8008f92 <put_fat+0x110>
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	b25b      	sxtb	r3, r3
 8008f7a:	f023 030f 	bic.w	r3, r3, #15
 8008f7e:	b25a      	sxtb	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	0a1b      	lsrs	r3, r3, #8
 8008f84:	b25b      	sxtb	r3, r3
 8008f86:	f003 030f 	and.w	r3, r3, #15
 8008f8a:	b25b      	sxtb	r3, r3
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	b25b      	sxtb	r3, r3
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8008f9e:	e079      	b.n	8009094 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	0a1b      	lsrs	r3, r3, #8
 8008faa:	4413      	add	r3, r2
 8008fac:	4619      	mov	r1, r3
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7ff fdb1 	bl	8008b16 <move_window>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fb8:	7ffb      	ldrb	r3, [r7, #31]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d167      	bne.n	800908e <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	005b      	lsls	r3, r3, #1
 8008fc2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	4413      	add	r3, r2
 8008fca:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	701a      	strb	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	0a1b      	lsrs	r3, r3, #8
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8008fec:	e052      	b.n	8009094 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	09db      	lsrs	r3, r3, #7
 8008ff8:	4413      	add	r3, r2
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff fd8a 	bl	8008b16 <move_window>
 8009002:	4603      	mov	r3, r0
 8009004:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009006:	7ffb      	ldrb	r3, [r7, #31]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d142      	bne.n	8009092 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4413      	add	r3, r2
 8009018:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	3303      	adds	r3, #3
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	061a      	lsls	r2, r3, #24
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	3302      	adds	r3, #2
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	041b      	lsls	r3, r3, #16
 800902a:	431a      	orrs	r2, r3
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	3301      	adds	r3, #1
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	4313      	orrs	r3, r2
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	7812      	ldrb	r2, [r2, #0]
 800903a:	4313      	orrs	r3, r2
 800903c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	4313      	orrs	r3, r2
 8009044:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	b2da      	uxtb	r2, r3
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	b29b      	uxth	r3, r3
 8009052:	0a1b      	lsrs	r3, r3, #8
 8009054:	b29a      	uxth	r2, r3
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	3301      	adds	r3, #1
 800905a:	b2d2      	uxtb	r2, r2
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	0c1a      	lsrs	r2, r3, #16
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	3302      	adds	r3, #2
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	0e1a      	lsrs	r2, r3, #24
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	3303      	adds	r3, #3
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800907e:	e009      	b.n	8009094 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8009080:	2302      	movs	r3, #2
 8009082:	77fb      	strb	r3, [r7, #31]
 8009084:	e006      	b.n	8009094 <put_fat+0x212>
			if (res != FR_OK) break;
 8009086:	bf00      	nop
 8009088:	e004      	b.n	8009094 <put_fat+0x212>
			if (res != FR_OK) break;
 800908a:	bf00      	nop
 800908c:	e002      	b.n	8009094 <put_fat+0x212>
			if (res != FR_OK) break;
 800908e:	bf00      	nop
 8009090:	e000      	b.n	8009094 <put_fat+0x212>
			if (res != FR_OK) break;
 8009092:	bf00      	nop
		}
	}

	return res;
 8009094:	7ffb      	ldrb	r3, [r7, #31]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3720      	adds	r7, #32
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d905      	bls.n	80090ba <remove_chain+0x1c>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d302      	bcc.n	80090c0 <remove_chain+0x22>
		res = FR_INT_ERR;
 80090ba:	2302      	movs	r3, #2
 80090bc:	73fb      	strb	r3, [r7, #15]
 80090be:	e043      	b.n	8009148 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80090c4:	e036      	b.n	8009134 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff fe20 	bl	8008d0e <get_fat>
 80090ce:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d035      	beq.n	8009142 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d102      	bne.n	80090e2 <remove_chain+0x44>
 80090dc:	2302      	movs	r3, #2
 80090de:	73fb      	strb	r3, [r7, #15]
 80090e0:	e032      	b.n	8009148 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e8:	d102      	bne.n	80090f0 <remove_chain+0x52>
 80090ea:	2301      	movs	r3, #1
 80090ec:	73fb      	strb	r3, [r7, #15]
 80090ee:	e02b      	b.n	8009148 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80090f0:	2200      	movs	r2, #0
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff fec4 	bl	8008e82 <put_fat>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d120      	bne.n	8009146 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d00f      	beq.n	8009130 <remove_chain+0x92>
				fs->free_clust++;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				fs->fsi_flag |= 1;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8009124:	f043 0301 	orr.w	r3, r3, #1
 8009128:	b2da      	uxtb	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d3c2      	bcc.n	80090c6 <remove_chain+0x28>
 8009140:	e002      	b.n	8009148 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8009146:	bf00      	nop
		}
	}

	return res;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10f      	bne.n	8009182 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8009168:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d005      	beq.n	800917c <create_chain+0x2a>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	429a      	cmp	r2, r3
 800917a:	d31c      	bcc.n	80091b6 <create_chain+0x64>
 800917c:	2301      	movs	r3, #1
 800917e:	613b      	str	r3, [r7, #16]
 8009180:	e019      	b.n	80091b6 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7ff fdc2 	bl	8008d0e <get_fat>
 800918a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d801      	bhi.n	8009196 <create_chain+0x44>
 8009192:	2301      	movs	r3, #1
 8009194:	e076      	b.n	8009284 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919c:	d101      	bne.n	80091a2 <create_chain+0x50>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	e070      	b.n	8009284 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d201      	bcs.n	80091b2 <create_chain+0x60>
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	e068      	b.n	8009284 <create_chain+0x132>
		scl = clst;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	3301      	adds	r3, #1
 80091be:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d307      	bcc.n	80091dc <create_chain+0x8a>
			ncl = 2;
 80091cc:	2302      	movs	r3, #2
 80091ce:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d901      	bls.n	80091dc <create_chain+0x8a>
 80091d8:	2300      	movs	r3, #0
 80091da:	e053      	b.n	8009284 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80091dc:	6979      	ldr	r1, [r7, #20]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff fd95 	bl	8008d0e <get_fat>
 80091e4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00e      	beq.n	800920a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f2:	d002      	beq.n	80091fa <create_chain+0xa8>
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d101      	bne.n	80091fe <create_chain+0xac>
			return cs;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	e042      	b.n	8009284 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	429a      	cmp	r2, r3
 8009204:	d1d9      	bne.n	80091ba <create_chain+0x68>
 8009206:	2300      	movs	r3, #0
 8009208:	e03c      	b.n	8009284 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800920a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800920c:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8009210:	6979      	ldr	r1, [r7, #20]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7ff fe35 	bl	8008e82 <put_fat>
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d109      	bne.n	8009236 <create_chain+0xe4>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d006      	beq.n	8009236 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff fe28 	bl	8008e82 <put_fat>
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d11a      	bne.n	8009272 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800924a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924e:	d018      	beq.n	8009282 <create_chain+0x130>
			fs->free_clust--;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009256:	1e5a      	subs	r2, r3, #1
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8009264:	f043 0301 	orr.w	r3, r3, #1
 8009268:	b2da      	uxtb	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 8009270:	e007      	b.n	8009282 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d102      	bne.n	800927e <create_chain+0x12c>
 8009278:	f04f 33ff 	mov.w	r3, #4294967295
 800927c:	e000      	b.n	8009280 <create_chain+0x12e>
 800927e:	2301      	movs	r3, #1
 8009280:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8009282:	697b      	ldr	r3, [r7, #20]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800929c:	3304      	adds	r3, #4
 800929e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	0a5b      	lsrs	r3, r3, #9
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80092aa:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80092ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80092b2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	1d1a      	adds	r2, r3, #4
 80092b8:	613a      	str	r2, [r7, #16]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <clmt_clust+0x3c>
 80092c4:	2300      	movs	r3, #0
 80092c6:	e010      	b.n	80092ea <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d307      	bcc.n	80092e0 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	3304      	adds	r3, #4
 80092dc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092de:	e7e9      	b.n	80092b4 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80092e0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	4413      	add	r3, r2
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bc80      	pop	{r7}
 80092f2:	4770      	bx	lr

080092f4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	b29a      	uxth	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800930e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d007      	beq.n	8009326 <dir_sdi+0x32>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800931c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	429a      	cmp	r2, r3
 8009324:	d301      	bcc.n	800932a <dir_sdi+0x36>
		return FR_INT_ERR;
 8009326:	2302      	movs	r3, #2
 8009328:	e074      	b.n	8009414 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10c      	bne.n	800934a <dir_sdi+0x56>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009336:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800933a:	2b03      	cmp	r3, #3
 800933c:	d105      	bne.n	800934a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009344:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8009348:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d111      	bne.n	8009374 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009356:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800935a:	461a      	mov	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	4293      	cmp	r3, r2
 8009360:	d301      	bcc.n	8009366 <dir_sdi+0x72>
			return FR_INT_ERR;
 8009362:	2302      	movs	r3, #2
 8009364:	e056      	b.n	8009414 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800936c:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8009370:	613b      	str	r3, [r7, #16]
 8009372:	e032      	b.n	80093da <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800937a:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8009382:	e01e      	b.n	80093c2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800938a:	6979      	ldr	r1, [r7, #20]
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fcbe 	bl	8008d0e <get_fat>
 8009392:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939a:	d101      	bne.n	80093a0 <dir_sdi+0xac>
 800939c:	2301      	movs	r3, #1
 800939e:	e039      	b.n	8009414 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d907      	bls.n	80093b6 <dir_sdi+0xc2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80093ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d301      	bcc.n	80093ba <dir_sdi+0xc6>
				return FR_INT_ERR;
 80093b6:	2302      	movs	r3, #2
 80093b8:	e02c      	b.n	8009414 <dir_sdi+0x120>
			idx -= ic;
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d2dc      	bcs.n	8009384 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80093d0:	6979      	ldr	r1, [r7, #20]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7ff fc7a 	bl	8008ccc <clust2sect>
 80093d8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <dir_sdi+0xf8>
 80093e8:	2302      	movs	r3, #2
 80093ea:	e013      	b.n	8009414 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	091a      	lsrs	r2, r3, #4
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	441a      	add	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009400:	461a      	mov	r2, r3
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	f003 030f 	and.w	r3, r3, #15
 8009408:	015b      	lsls	r3, r3, #5
 800940a:	441a      	add	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800941c:	b590      	push	{r4, r7, lr}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800942c:	3301      	adds	r3, #1
 800942e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	b29b      	uxth	r3, r3
 8009434:	2b00      	cmp	r3, #0
 8009436:	d004      	beq.n	8009442 <dir_next+0x26>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <dir_next+0x2a>
		return FR_NO_FILE;
 8009442:	2304      	movs	r3, #4
 8009444:	e0dd      	b.n	8009602 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f003 030f 	and.w	r3, r3, #15
 800944c:	2b00      	cmp	r3, #0
 800944e:	f040 80c6 	bne.w	80095de <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10b      	bne.n	8009482 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009470:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8009474:	461a      	mov	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4293      	cmp	r3, r2
 800947a:	f0c0 80b0 	bcc.w	80095de <dir_next+0x1c2>
				return FR_NO_FILE;
 800947e:	2304      	movs	r3, #4
 8009480:	e0bf      	b.n	8009602 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	091b      	lsrs	r3, r3, #4
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800948c:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8009490:	3a01      	subs	r2, #1
 8009492:	4013      	ands	r3, r2
 8009494:	2b00      	cmp	r3, #0
 8009496:	f040 80a2 	bne.w	80095de <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80094a6:	4619      	mov	r1, r3
 80094a8:	4610      	mov	r0, r2
 80094aa:	f7ff fc30 	bl	8008d0e <get_fat>
 80094ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d801      	bhi.n	80094ba <dir_next+0x9e>
 80094b6:	2302      	movs	r3, #2
 80094b8:	e0a3      	b.n	8009602 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c0:	d101      	bne.n	80094c6 <dir_next+0xaa>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e09d      	b.n	8009602 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80094cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d374      	bcc.n	80095c0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <dir_next+0xc4>
 80094dc:	2304      	movs	r3, #4
 80094de:	e090      	b.n	8009602 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f7ff fe2f 	bl	8009152 <create_chain>
 80094f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <dir_next+0xe4>
 80094fc:	2307      	movs	r3, #7
 80094fe:	e080      	b.n	8009602 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <dir_next+0xee>
 8009506:	2302      	movs	r3, #2
 8009508:	e07b      	b.n	8009602 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009510:	d101      	bne.n	8009516 <dir_next+0xfa>
 8009512:	2301      	movs	r3, #1
 8009514:	e075      	b.n	8009602 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff fab1 	bl	8008a84 <sync_window>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <dir_next+0x110>
 8009528:	2301      	movs	r3, #1
 800952a:	e06a      	b.n	8009602 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009536:	2100      	movs	r1, #0
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff f895 	bl	8008668 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800954a:	6979      	ldr	r1, [r7, #20]
 800954c:	4610      	mov	r0, r2
 800954e:	f7ff fbbd 	bl	8008ccc <clust2sect>
 8009552:	4603      	mov	r3, r0
 8009554:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009558:	2300      	movs	r3, #0
 800955a:	613b      	str	r3, [r7, #16]
 800955c:	e01b      	b.n	8009596 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009564:	2201      	movs	r2, #1
 8009566:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009570:	4618      	mov	r0, r3
 8009572:	f7ff fa87 	bl	8008a84 <sync_window>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <dir_next+0x164>
 800957c:	2301      	movs	r3, #1
 800957e:	e040      	b.n	8009602 <dir_next+0x1e6>
						dp->fs->winsect++;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009586:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 800958a:	3201      	adds	r2, #1
 800958c:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	3301      	adds	r3, #1
 8009594:	613b      	str	r3, [r7, #16]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800959c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80095a0:	461a      	mov	r2, r3
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d3da      	bcc.n	800955e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80095ae:	f8d3 122c 	ldr.w	r1, [r3, #556]	@ 0x22c
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	1a8a      	subs	r2, r1, r2
 80095bc:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80095ce:	6979      	ldr	r1, [r7, #20]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff fb7b 	bl	8008ccc <clust2sect>
 80095d6:	4602      	mov	r2, r0
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80095ee:	461a      	mov	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	015b      	lsls	r3, r3, #5
 80095f8:	441a      	add	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	bd90      	pop	{r4, r7, pc}

0800960a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8009614:	2100      	movs	r1, #0
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7ff fe6c 	bl	80092f4 <dir_sdi>
 800961c:	4603      	mov	r3, r0
 800961e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d131      	bne.n	800968a <dir_alloc+0x80>
		n = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f7ff fa6c 	bl	8008b16 <move_window>
 800963e:	4603      	mov	r3, r0
 8009640:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d11f      	bne.n	8009688 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2be5      	cmp	r3, #229	@ 0xe5
 8009652:	d005      	beq.n	8009660 <dir_alloc+0x56>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d107      	bne.n	8009670 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	3301      	adds	r3, #1
 8009664:	60bb      	str	r3, [r7, #8]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d102      	bne.n	8009674 <dir_alloc+0x6a>
 800966e:	e00c      	b.n	800968a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009670:	2300      	movs	r3, #0
 8009672:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009674:	2101      	movs	r1, #1
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7ff fed0 	bl	800941c <dir_next>
 800967c:	4603      	mov	r3, r0
 800967e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0d1      	beq.n	800962a <dir_alloc+0x20>
 8009686:	e000      	b.n	800968a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8009688:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	2b04      	cmp	r3, #4
 800968e:	d101      	bne.n	8009694 <dir_alloc+0x8a>
 8009690:	2307      	movs	r3, #7
 8009692:	73fb      	strb	r3, [r7, #15]
	return res;
 8009694:	7bfb      	ldrb	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800969e:	b480      	push	{r7}
 80096a0:	b085      	sub	sp, #20
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	331b      	adds	r3, #27
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	b21b      	sxth	r3, r3
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	b21a      	sxth	r2, r3
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	331a      	adds	r3, #26
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	b21b      	sxth	r3, r3
 80096bc:	4313      	orrs	r3, r2
 80096be:	b21b      	sxth	r3, r3
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d110      	bne.n	80096f0 <ld_clust+0x52>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	3315      	adds	r3, #21
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	b21b      	sxth	r3, r3
 80096d6:	021b      	lsls	r3, r3, #8
 80096d8:	b21a      	sxth	r2, r3
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	3314      	adds	r3, #20
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	b21b      	sxth	r3, r3
 80096e2:	4313      	orrs	r3, r2
 80096e4:	b21b      	sxth	r3, r3
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	041b      	lsls	r3, r3, #16
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]

	return cl;
 80096f0:	68fb      	ldr	r3, [r7, #12]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bc80      	pop	{r7}
 80096fa:	4770      	bx	lr

080096fc <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	331a      	adds	r3, #26
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	b2d2      	uxtb	r2, r2
 800970e:	701a      	strb	r2, [r3, #0]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	0a1b      	lsrs	r3, r3, #8
 8009716:	b29a      	uxth	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	331b      	adds	r3, #27
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	0c1a      	lsrs	r2, r3, #16
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3314      	adds	r3, #20
 8009728:	b2d2      	uxtb	r2, r2
 800972a:	701a      	strb	r2, [r3, #0]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	0c1b      	lsrs	r3, r3, #16
 8009730:	b29b      	uxth	r3, r3
 8009732:	0a1b      	lsrs	r3, r3, #8
 8009734:	b29a      	uxth	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3315      	adds	r3, #21
 800973a:	b2d2      	uxtb	r2, r2
 800973c:	701a      	strb	r2, [r3, #0]
}
 800973e:	bf00      	nop
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	bc80      	pop	{r7}
 8009746:	4770      	bx	lr

08009748 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009750:	2100      	movs	r1, #0
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7ff fdce 	bl	80092f4 <dir_sdi>
 8009758:	4603      	mov	r3, r0
 800975a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <dir_find+0x1e>
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	e03b      	b.n	80097de <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f7ff f9ce 	bl	8008b16 <move_window>
 800977a:	4603      	mov	r3, r0
 800977c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d128      	bne.n	80097d6 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800978a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d102      	bne.n	800979e <dir_find+0x56>
 8009798:	2304      	movs	r3, #4
 800979a:	75fb      	strb	r3, [r7, #23]
 800979c:	e01e      	b.n	80097dc <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	330b      	adds	r3, #11
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	f003 0308 	and.w	r3, r3, #8
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <dir_find+0x7a>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80097b2:	220b      	movs	r2, #11
 80097b4:	4619      	mov	r1, r3
 80097b6:	6938      	ldr	r0, [r7, #16]
 80097b8:	f7fe ff70 	bl	800869c <mem_cmp>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00b      	beq.n	80097da <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80097c2:	2100      	movs	r1, #0
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff fe29 	bl	800941c <dir_next>
 80097ca:	4603      	mov	r3, r0
 80097cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0c8      	beq.n	8009766 <dir_find+0x1e>
 80097d4:	e002      	b.n	80097dc <dir_find+0x94>
		if (res != FR_OK) break;
 80097d6:	bf00      	nop
 80097d8:	e000      	b.n	80097dc <dir_find+0x94>
			break;
 80097da:	bf00      	nop

	return res;
 80097dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80097ee:	2101      	movs	r1, #1
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff ff0a 	bl	800960a <dir_alloc>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d126      	bne.n	800984e <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800980c:	4619      	mov	r1, r3
 800980e:	4610      	mov	r0, r2
 8009810:	f7ff f981 	bl	8008b16 <move_window>
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d117      	bne.n	800984e <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009824:	2220      	movs	r2, #32
 8009826:	2100      	movs	r1, #0
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe ff1d 	bl	8008668 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800983a:	220b      	movs	r2, #11
 800983c:	4619      	mov	r1, r3
 800983e:	f7fe fef5 	bl	800862c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009848:	2201      	movs	r2, #1
 800984a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	e002      	b.n	8009870 <create_name+0x18>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3301      	adds	r3, #1
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b2f      	cmp	r3, #47	@ 0x2f
 8009876:	d0f8      	beq.n	800986a <create_name+0x12>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b5c      	cmp	r3, #92	@ 0x5c
 800987e:	d0f4      	beq.n	800986a <create_name+0x12>
	sfn = dp->fn;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009886:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009888:	220b      	movs	r2, #11
 800988a:	2120      	movs	r1, #32
 800988c:	68b8      	ldr	r0, [r7, #8]
 800988e:	f7fe feeb 	bl	8008668 <mem_set>
	si = i = b = 0; ni = 8;
 8009892:	2300      	movs	r3, #0
 8009894:	77fb      	strb	r3, [r7, #31]
 8009896:	2300      	movs	r3, #0
 8009898:	613b      	str	r3, [r7, #16]
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	617b      	str	r3, [r7, #20]
 800989e:	2308      	movs	r3, #8
 80098a0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	617a      	str	r2, [r7, #20]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4413      	add	r3, r2
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80098b0:	7fbb      	ldrb	r3, [r7, #30]
 80098b2:	2b20      	cmp	r3, #32
 80098b4:	d953      	bls.n	800995e <create_name+0x106>
 80098b6:	7fbb      	ldrb	r3, [r7, #30]
 80098b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80098ba:	d050      	beq.n	800995e <create_name+0x106>
 80098bc:	7fbb      	ldrb	r3, [r7, #30]
 80098be:	2b5c      	cmp	r3, #92	@ 0x5c
 80098c0:	d04d      	beq.n	800995e <create_name+0x106>
		if (c == '.' || i >= ni) {
 80098c2:	7fbb      	ldrb	r3, [r7, #30]
 80098c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80098c6:	d003      	beq.n	80098d0 <create_name+0x78>
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d30f      	bcc.n	80098f0 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	2b08      	cmp	r3, #8
 80098d4:	d102      	bne.n	80098dc <create_name+0x84>
 80098d6:	7fbb      	ldrb	r3, [r7, #30]
 80098d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80098da:	d001      	beq.n	80098e0 <create_name+0x88>
 80098dc:	2306      	movs	r3, #6
 80098de:	e073      	b.n	80099c8 <create_name+0x170>
			i = 8; ni = 11;
 80098e0:	2308      	movs	r3, #8
 80098e2:	613b      	str	r3, [r7, #16]
 80098e4:	230b      	movs	r3, #11
 80098e6:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80098e8:	7ffb      	ldrb	r3, [r7, #31]
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	77fb      	strb	r3, [r7, #31]
 80098ee:	e035      	b.n	800995c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 80098f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	da08      	bge.n	800990a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 80098f8:	7ffb      	ldrb	r3, [r7, #31]
 80098fa:	f043 0303 	orr.w	r3, r3, #3
 80098fe:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009900:	7fbb      	ldrb	r3, [r7, #30]
 8009902:	3b80      	subs	r3, #128	@ 0x80
 8009904:	4a32      	ldr	r2, [pc, #200]	@ (80099d0 <create_name+0x178>)
 8009906:	5cd3      	ldrb	r3, [r2, r3]
 8009908:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800990a:	7fbb      	ldrb	r3, [r7, #30]
 800990c:	4619      	mov	r1, r3
 800990e:	4831      	ldr	r0, [pc, #196]	@ (80099d4 <create_name+0x17c>)
 8009910:	f7fe feea 	bl	80086e8 <chk_chr>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <create_name+0xc6>
				return FR_INVALID_NAME;
 800991a:	2306      	movs	r3, #6
 800991c:	e054      	b.n	80099c8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800991e:	7fbb      	ldrb	r3, [r7, #30]
 8009920:	2b40      	cmp	r3, #64	@ 0x40
 8009922:	d907      	bls.n	8009934 <create_name+0xdc>
 8009924:	7fbb      	ldrb	r3, [r7, #30]
 8009926:	2b5a      	cmp	r3, #90	@ 0x5a
 8009928:	d804      	bhi.n	8009934 <create_name+0xdc>
				b |= 2;
 800992a:	7ffb      	ldrb	r3, [r7, #31]
 800992c:	f043 0302 	orr.w	r3, r3, #2
 8009930:	77fb      	strb	r3, [r7, #31]
 8009932:	e00c      	b.n	800994e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8009934:	7fbb      	ldrb	r3, [r7, #30]
 8009936:	2b60      	cmp	r3, #96	@ 0x60
 8009938:	d909      	bls.n	800994e <create_name+0xf6>
 800993a:	7fbb      	ldrb	r3, [r7, #30]
 800993c:	2b7a      	cmp	r3, #122	@ 0x7a
 800993e:	d806      	bhi.n	800994e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8009940:	7ffb      	ldrb	r3, [r7, #31]
 8009942:	f043 0301 	orr.w	r3, r3, #1
 8009946:	77fb      	strb	r3, [r7, #31]
 8009948:	7fbb      	ldrb	r3, [r7, #30]
 800994a:	3b20      	subs	r3, #32
 800994c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	613a      	str	r2, [r7, #16]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	4413      	add	r3, r2
 8009958:	7fba      	ldrb	r2, [r7, #30]
 800995a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800995c:	e7a1      	b.n	80098a2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	441a      	add	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009968:	7fbb      	ldrb	r3, [r7, #30]
 800996a:	2b20      	cmp	r3, #32
 800996c:	d801      	bhi.n	8009972 <create_name+0x11a>
 800996e:	2304      	movs	r3, #4
 8009970:	e000      	b.n	8009974 <create_name+0x11c>
 8009972:	2300      	movs	r3, #0
 8009974:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <create_name+0x128>
 800997c:	2306      	movs	r3, #6
 800997e:	e023      	b.n	80099c8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2be5      	cmp	r3, #229	@ 0xe5
 8009986:	d102      	bne.n	800998e <create_name+0x136>
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	2205      	movs	r2, #5
 800998c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	2b08      	cmp	r3, #8
 8009992:	d102      	bne.n	800999a <create_name+0x142>
 8009994:	7ffb      	ldrb	r3, [r7, #31]
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800999a:	7ffb      	ldrb	r3, [r7, #31]
 800999c:	f003 0303 	and.w	r3, r3, #3
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d103      	bne.n	80099ac <create_name+0x154>
 80099a4:	7fbb      	ldrb	r3, [r7, #30]
 80099a6:	f043 0310 	orr.w	r3, r3, #16
 80099aa:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80099ac:	7ffb      	ldrb	r3, [r7, #31]
 80099ae:	f003 030c 	and.w	r3, r3, #12
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	d103      	bne.n	80099be <create_name+0x166>
 80099b6:	7fbb      	ldrb	r3, [r7, #30]
 80099b8:	f043 0308 	orr.w	r3, r3, #8
 80099bc:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	330b      	adds	r3, #11
 80099c2:	7fba      	ldrb	r2, [r7, #30]
 80099c4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80099c6:	2300      	movs	r3, #0
#endif
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3720      	adds	r7, #32
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	08018c34 	.word	0x08018c34
 80099d4:	08018388 	.word	0x08018388

080099d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80099e8:	d003      	beq.n	80099f2 <follow_path+0x1a>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b5c      	cmp	r3, #92	@ 0x5c
 80099f0:	d102      	bne.n	80099f8 <follow_path+0x20>
		path++;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	3301      	adds	r3, #1
 80099f6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	2b1f      	cmp	r3, #31
 8009a06:	d80a      	bhi.n	8009a1e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8009a08:	2100      	movs	r1, #0
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff fc72 	bl	80092f4 <dir_sdi>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8009a1c:	e045      	b.n	8009aaa <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009a1e:	463b      	mov	r3, r7
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff ff18 	bl	8009858 <create_name>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d136      	bne.n	8009aa0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fe88 	bl	8009748 <dir_find>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009a42:	7adb      	ldrb	r3, [r3, #11]
 8009a44:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d128      	bne.n	8009aa4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	f003 0304 	and.w	r3, r3, #4
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d123      	bne.n	8009aa4 <follow_path+0xcc>
 8009a5c:	2305      	movs	r3, #5
 8009a5e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8009a60:	e020      	b.n	8009aa4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d11d      	bne.n	8009aa8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009a72:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	330b      	adds	r3, #11
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	f003 0310 	and.w	r3, r3, #16
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d102      	bne.n	8009a88 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8009a82:	2305      	movs	r3, #5
 8009a84:	73fb      	strb	r3, [r7, #15]
 8009a86:	e010      	b.n	8009aaa <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7ff fe04 	bl	800969e <ld_clust>
 8009a96:	4602      	mov	r2, r0
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009a9e:	e7be      	b.n	8009a1e <follow_path+0x46>
			if (res != FR_OK) break;
 8009aa0:	bf00      	nop
 8009aa2:	e002      	b.n	8009aaa <follow_path+0xd2>
				break;
 8009aa4:	bf00      	nop
 8009aa6:	e000      	b.n	8009aaa <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009aa8:	bf00      	nop
		}
	}

	return res;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009abc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d031      	beq.n	8009b2e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	e002      	b.n	8009ad8 <get_ldnumber+0x24>
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d903      	bls.n	8009ae8 <get_ldnumber+0x34>
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b3a      	cmp	r3, #58	@ 0x3a
 8009ae6:	d1f4      	bne.n	8009ad2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b3a      	cmp	r3, #58	@ 0x3a
 8009aee:	d11c      	bne.n	8009b2a <get_ldnumber+0x76>
			tp = *path;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	60fa      	str	r2, [r7, #12]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	3b30      	subs	r3, #48	@ 0x30
 8009b00:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b09      	cmp	r3, #9
 8009b06:	d80e      	bhi.n	8009b26 <get_ldnumber+0x72>
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d10a      	bne.n	8009b26 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d107      	bne.n	8009b26 <get_ldnumber+0x72>
					vol = (int)i;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	e002      	b.n	8009b30 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009b2e:	693b      	ldr	r3, [r7, #16]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bc80      	pop	{r7}
 8009b38:	4770      	bx	lr
	...

08009b3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f04f 32ff 	mov.w	r2, #4294967295
 8009b54:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7fe ffdb 	bl	8008b16 <move_window>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <check_fs+0x2e>
		return 3;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e04b      	b.n	8009c02 <check_fs+0xc6>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009b70:	3301      	adds	r3, #1
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	b21b      	sxth	r3, r3
 8009b76:	021b      	lsls	r3, r3, #8
 8009b78:	b21a      	sxth	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8009b80:	b21b      	sxth	r3, r3
 8009b82:	4313      	orrs	r3, r2
 8009b84:	b21b      	sxth	r3, r3
 8009b86:	4a21      	ldr	r2, [pc, #132]	@ (8009c0c <check_fs+0xd0>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d001      	beq.n	8009b90 <check_fs+0x54>
		return 2;
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e038      	b.n	8009c02 <check_fs+0xc6>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3336      	adds	r3, #54	@ 0x36
 8009b94:	3303      	adds	r3, #3
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	061a      	lsls	r2, r3, #24
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	3336      	adds	r3, #54	@ 0x36
 8009b9e:	3302      	adds	r3, #2
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	041b      	lsls	r3, r3, #16
 8009ba4:	431a      	orrs	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3336      	adds	r3, #54	@ 0x36
 8009baa:	3301      	adds	r3, #1
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	021b      	lsls	r3, r3, #8
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009bbe:	4a14      	ldr	r2, [pc, #80]	@ (8009c10 <check_fs+0xd4>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d101      	bne.n	8009bc8 <check_fs+0x8c>
		return 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e01c      	b.n	8009c02 <check_fs+0xc6>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3352      	adds	r3, #82	@ 0x52
 8009bcc:	3303      	adds	r3, #3
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	061a      	lsls	r2, r3, #24
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3352      	adds	r3, #82	@ 0x52
 8009bd6:	3302      	adds	r3, #2
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	041b      	lsls	r3, r3, #16
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3352      	adds	r3, #82	@ 0x52
 8009be2:	3301      	adds	r3, #1
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	021b      	lsls	r3, r3, #8
 8009be8:	4313      	orrs	r3, r2
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009bf6:	4a06      	ldr	r2, [pc, #24]	@ (8009c10 <check_fs+0xd4>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d101      	bne.n	8009c00 <check_fs+0xc4>
		return 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	e000      	b.n	8009c02 <check_fs+0xc6>

	return 1;
 8009c00:	2301      	movs	r3, #1
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	ffffaa55 	.word	0xffffaa55
 8009c10:	00544146 	.word	0x00544146

08009c14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b096      	sub	sp, #88	@ 0x58
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009c28:	68b8      	ldr	r0, [r7, #8]
 8009c2a:	f7ff ff43 	bl	8009ab4 <get_ldnumber>
 8009c2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	da01      	bge.n	8009c3a <find_volume+0x26>
 8009c36:	230b      	movs	r3, #11
 8009c38:	e2ae      	b.n	800a198 <find_volume+0x584>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009c3a:	4a9e      	ldr	r2, [pc, #632]	@ (8009eb4 <find_volume+0x2a0>)
 8009c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <find_volume+0x3a>
 8009c4a:	230c      	movs	r3, #12
 8009c4c:	e2a4      	b.n	800a198 <find_volume+0x584>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c52:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c56:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01b      	beq.n	8009c96 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c60:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fe fc43 	bl	80084f0 <disk_status>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009c70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c74:	f003 0301 	and.w	r3, r3, #1
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10c      	bne.n	8009c96 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009c7c:	79fb      	ldrb	r3, [r7, #7]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d007      	beq.n	8009c92 <find_volume+0x7e>
 8009c82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c86:	f003 0304 	and.w	r3, r3, #4
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8009c8e:	230a      	movs	r3, #10
 8009c90:	e282      	b.n	800a198 <find_volume+0x584>
			return FR_OK;				/* The file system object is valid */
 8009c92:	2300      	movs	r3, #0
 8009c94:	e280      	b.n	800a198 <find_volume+0x584>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009caa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fc38 	bl	8008524 <disk_initialize>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009cba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e266      	b.n	800a198 <find_volume+0x584>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d007      	beq.n	8009ce0 <find_volume+0xcc>
 8009cd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8009cdc:	230a      	movs	r3, #10
 8009cde:	e25b      	b.n	800a198 <find_volume+0x584>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8009ce4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ce6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ce8:	f7ff ff28 	bl	8009b3c <check_fs>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8009cf2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d153      	bne.n	8009da2 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cfe:	e028      	b.n	8009d52 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8009d00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d04:	011b      	lsls	r3, r3, #4
 8009d06:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009d0a:	4413      	add	r3, r2
 8009d0c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d10:	3304      	adds	r3, #4
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d012      	beq.n	8009d3e <find_volume+0x12a>
 8009d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1a:	330b      	adds	r3, #11
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	061a      	lsls	r2, r3, #24
 8009d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d22:	330a      	adds	r3, #10
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	041b      	lsls	r3, r3, #16
 8009d28:	431a      	orrs	r2, r3
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2c:	3309      	adds	r3, #9
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	021b      	lsls	r3, r3, #8
 8009d32:	4313      	orrs	r3, r2
 8009d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d36:	3208      	adds	r2, #8
 8009d38:	7812      	ldrb	r2, [r2, #0]
 8009d3a:	431a      	orrs	r2, r3
 8009d3c:	e000      	b.n	8009d40 <find_volume+0x12c>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	3358      	adds	r3, #88	@ 0x58
 8009d46:	443b      	add	r3, r7
 8009d48:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d4e:	3301      	adds	r3, #1
 8009d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d9d3      	bls.n	8009d00 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8009d58:	2300      	movs	r3, #0
 8009d5a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <find_volume+0x154>
 8009d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d64:	3b01      	subs	r3, #1
 8009d66:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8009d68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	3358      	adds	r3, #88	@ 0x58
 8009d6e:	443b      	add	r3, r7
 8009d70:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009d74:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d005      	beq.n	8009d88 <find_volume+0x174>
 8009d7c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009d7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009d80:	f7ff fedc 	bl	8009b3c <check_fs>
 8009d84:	4603      	mov	r3, r0
 8009d86:	e000      	b.n	8009d8a <find_volume+0x176>
 8009d88:	2302      	movs	r3, #2
 8009d8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d005      	beq.n	8009da2 <find_volume+0x18e>
 8009d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d98:	3301      	adds	r3, #1
 8009d9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d9e2      	bls.n	8009d68 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009da2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d101      	bne.n	8009dae <find_volume+0x19a>
 8009daa:	2301      	movs	r3, #1
 8009dac:	e1f4      	b.n	800a198 <find_volume+0x584>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009dae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <find_volume+0x1a6>
 8009db6:	230d      	movs	r3, #13
 8009db8:	e1ee      	b.n	800a198 <find_volume+0x584>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dbc:	7b1b      	ldrb	r3, [r3, #12]
 8009dbe:	b21b      	sxth	r3, r3
 8009dc0:	021b      	lsls	r3, r3, #8
 8009dc2:	b21a      	sxth	r2, r3
 8009dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc6:	7adb      	ldrb	r3, [r3, #11]
 8009dc8:	b21b      	sxth	r3, r3
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	b21b      	sxth	r3, r3
 8009dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dd2:	d001      	beq.n	8009dd8 <find_volume+0x1c4>
		return FR_NO_FILESYSTEM;
 8009dd4:	230d      	movs	r3, #13
 8009dd6:	e1df      	b.n	800a198 <find_volume+0x584>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dda:	7ddb      	ldrb	r3, [r3, #23]
 8009ddc:	b21b      	sxth	r3, r3
 8009dde:	021b      	lsls	r3, r3, #8
 8009de0:	b21a      	sxth	r2, r3
 8009de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de4:	7d9b      	ldrb	r3, [r3, #22]
 8009de6:	b21b      	sxth	r3, r3
 8009de8:	4313      	orrs	r3, r2
 8009dea:	b21b      	sxth	r3, r3
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8009df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d112      	bne.n	8009e1c <find_volume+0x208>
 8009df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8009dfc:	061a      	lsls	r2, r3, #24
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e00:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8009e04:	041b      	lsls	r3, r3, #16
 8009e06:	431a      	orrs	r2, r3
 8009e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009e0e:	021b      	lsls	r3, r3, #8
 8009e10:	4313      	orrs	r3, r2
 8009e12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e14:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8009e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e20:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e26:	7c1a      	ldrb	r2, [r3, #16]
 8009e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2a:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e30:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d006      	beq.n	8009e46 <find_volume+0x232>
 8009e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3a:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d001      	beq.n	8009e46 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8009e42:	230d      	movs	r3, #13
 8009e44:	e1a8      	b.n	800a198 <find_volume+0x584>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e48:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e50:	fb02 f303 	mul.w	r3, r2, r3
 8009e54:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e58:	7b5a      	ldrb	r2, [r3, #13]
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5c:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8009e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e62:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <find_volume+0x26c>
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8009e70:	461a      	mov	r2, r3
 8009e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e74:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8009e80:	230d      	movs	r3, #13
 8009e82:	e189      	b.n	800a198 <find_volume+0x584>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e86:	7c9b      	ldrb	r3, [r3, #18]
 8009e88:	b21b      	sxth	r3, r3
 8009e8a:	021b      	lsls	r3, r3, #8
 8009e8c:	b21a      	sxth	r2, r3
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e90:	7c5b      	ldrb	r3, [r3, #17]
 8009e92:	b21b      	sxth	r3, r3
 8009e94:	4313      	orrs	r3, r2
 8009e96:	b21b      	sxth	r3, r3
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9c:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8009ea6:	f003 030f 	and.w	r3, r3, #15
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8009eb0:	230d      	movs	r3, #13
 8009eb2:	e171      	b.n	800a198 <find_volume+0x584>
 8009eb4:	20000c4c 	.word	0x20000c4c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eba:	7d1b      	ldrb	r3, [r3, #20]
 8009ebc:	b21b      	sxth	r3, r3
 8009ebe:	021b      	lsls	r3, r3, #8
 8009ec0:	b21a      	sxth	r2, r3
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec4:	7cdb      	ldrb	r3, [r3, #19]
 8009ec6:	b21b      	sxth	r3, r3
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	b21b      	sxth	r3, r3
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d112      	bne.n	8009efc <find_volume+0x2e8>
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009edc:	061a      	lsls	r2, r3, #24
 8009ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009ee4:	041b      	lsls	r3, r3, #16
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009eee:	021b      	lsls	r3, r3, #8
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ef4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efe:	7bdb      	ldrb	r3, [r3, #15]
 8009f00:	b21b      	sxth	r3, r3
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	b21a      	sxth	r2, r3
 8009f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f08:	7b9b      	ldrb	r3, [r3, #14]
 8009f0a:	b21b      	sxth	r3, r3
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	b21b      	sxth	r3, r3
 8009f10:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8009f12:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <find_volume+0x308>
 8009f18:	230d      	movs	r3, #13
 8009f1a:	e13d      	b.n	800a198 <find_volume+0x584>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009f1c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f20:	4413      	add	r3, r2
 8009f22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f24:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8009f28:	0912      	lsrs	r2, r2, #4
 8009f2a:	b292      	uxth	r2, r2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009f30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d201      	bcs.n	8009f3c <find_volume+0x328>
 8009f38:	230d      	movs	r3, #13
 8009f3a:	e12d      	b.n	800a198 <find_volume+0x584>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009f3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f44:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8009f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f4c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <find_volume+0x344>
 8009f54:	230d      	movs	r3, #13
 8009f56:	e11f      	b.n	800a198 <find_volume+0x584>
	fmt = FS_FAT12;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f60:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d902      	bls.n	8009f6e <find_volume+0x35a>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f70:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d902      	bls.n	8009f7e <find_volume+0x36a>
 8009f78:	2303      	movs	r3, #3
 8009f7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f80:	1c9a      	adds	r2, r3, #2
 8009f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8009f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f8c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009f90:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f94:	441a      	add	r2, r3
 8009f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f98:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8009f9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa0:	441a      	add	r2, r3
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa4:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 8009fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d121      	bne.n	8009ff4 <find_volume+0x3e0>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <find_volume+0x3aa>
 8009fba:	230d      	movs	r3, #13
 8009fbc:	e0ec      	b.n	800a198 <find_volume+0x584>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009fc4:	061a      	lsls	r2, r3, #24
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8009fcc:	041b      	lsls	r3, r3, #16
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009fd6:	021b      	lsls	r3, r3, #8
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fdc:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe4:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ff2:	e025      	b.n	800a040 <find_volume+0x42c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d101      	bne.n	800a002 <find_volume+0x3ee>
 8009ffe:	230d      	movs	r3, #13
 800a000:	e0ca      	b.n	800a198 <find_volume+0x584>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a004:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 800a008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a00a:	441a      	add	r2, r3
 800a00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a012:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a016:	2b02      	cmp	r3, #2
 800a018:	d104      	bne.n	800a024 <find_volume+0x410>
 800a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	e00c      	b.n	800a03e <find_volume+0x42a>
 800a024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a026:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800a02a:	4613      	mov	r3, r2
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	4413      	add	r3, r2
 800a030:	085a      	lsrs	r2, r3, #1
 800a032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a034:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800a03e:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a042:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800a046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a048:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a04c:	0a5b      	lsrs	r3, r3, #9
 800a04e:	429a      	cmp	r2, r3
 800a050:	d201      	bcs.n	800a056 <find_volume+0x442>
		return FR_NO_FILESYSTEM;
 800a052:	230d      	movs	r3, #13
 800a054:	e0a0      	b.n	800a198 <find_volume+0x584>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a058:	f04f 32ff 	mov.w	r2, #4294967295
 800a05c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 800a060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a062:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a068:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800a06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06e:	2280      	movs	r2, #128	@ 0x80
 800a070:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a074:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d179      	bne.n	800a170 <find_volume+0x55c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a082:	b21b      	sxth	r3, r3
 800a084:	021b      	lsls	r3, r3, #8
 800a086:	b21a      	sxth	r2, r3
 800a088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a08e:	b21b      	sxth	r3, r3
 800a090:	4313      	orrs	r3, r2
 800a092:	b21b      	sxth	r3, r3
 800a094:	2b01      	cmp	r3, #1
 800a096:	d16b      	bne.n	800a170 <find_volume+0x55c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a09a:	3301      	adds	r3, #1
 800a09c:	4619      	mov	r1, r3
 800a09e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a0a0:	f7fe fd39 	bl	8008b16 <move_window>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d162      	bne.n	800a170 <find_volume+0x55c>
	{
		fs->fsi_flag = 0;
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b4:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800a0b8:	b21b      	sxth	r3, r3
 800a0ba:	021b      	lsls	r3, r3, #8
 800a0bc:	b21a      	sxth	r2, r3
 800a0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c0:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800a0c4:	b21b      	sxth	r3, r3
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	b21b      	sxth	r3, r3
 800a0ca:	4a35      	ldr	r2, [pc, #212]	@ (800a1a0 <find_volume+0x58c>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d14f      	bne.n	800a170 <find_volume+0x55c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d2:	78db      	ldrb	r3, [r3, #3]
 800a0d4:	061a      	lsls	r2, r3, #24
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d8:	789b      	ldrb	r3, [r3, #2]
 800a0da:	041b      	lsls	r3, r3, #16
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e0:	785b      	ldrb	r3, [r3, #1]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0e8:	7812      	ldrb	r2, [r2, #0]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	4a2d      	ldr	r2, [pc, #180]	@ (800a1a4 <find_volume+0x590>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d13e      	bne.n	800a170 <find_volume+0x55c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f4:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800a0f8:	061a      	lsls	r2, r3, #24
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800a100:	041b      	lsls	r3, r3, #16
 800a102:	431a      	orrs	r2, r3
 800a104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a106:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	4313      	orrs	r3, r2
 800a10e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a110:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 800a114:	4313      	orrs	r3, r2
 800a116:	4a24      	ldr	r2, [pc, #144]	@ (800a1a8 <find_volume+0x594>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d129      	bne.n	800a170 <find_volume+0x55c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800a11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11e:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800a122:	061a      	lsls	r2, r3, #24
 800a124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a126:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800a12a:	041b      	lsls	r3, r3, #16
 800a12c:	431a      	orrs	r2, r3
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800a134:	021b      	lsls	r3, r3, #8
 800a136:	4313      	orrs	r3, r2
 800a138:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a13a:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800a13e:	431a      	orrs	r2, r3
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800a146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a148:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800a14c:	061a      	lsls	r2, r3, #24
 800a14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a150:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800a154:	041b      	lsls	r3, r3, #16
 800a156:	431a      	orrs	r2, r3
 800a158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a15a:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	4313      	orrs	r3, r2
 800a162:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a164:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800a168:	431a      	orrs	r2, r3
 800a16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800a170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a172:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a176:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800a17a:	4b0c      	ldr	r3, [pc, #48]	@ (800a1ac <find_volume+0x598>)
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	3301      	adds	r3, #1
 800a180:	b29a      	uxth	r2, r3
 800a182:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ac <find_volume+0x598>)
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	4b09      	ldr	r3, [pc, #36]	@ (800a1ac <find_volume+0x598>)
 800a188:	881a      	ldrh	r2, [r3, #0]
 800a18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18c:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800a190:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a192:	f7fe fc4d 	bl	8008a30 <clear_lock>
#endif

	return FR_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3758      	adds	r7, #88	@ 0x58
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	ffffaa55 	.word	0xffffaa55
 800a1a4:	41615252 	.word	0x41615252
 800a1a8:	61417272 	.word	0x61417272
 800a1ac:	20000c50 	.word	0x20000c50

0800a1b0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d022      	beq.n	800a208 <validate+0x58>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01d      	beq.n	800a208 <validate+0x58>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a1d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d016      	beq.n	800a208 <validate+0x58>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a1e0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d10c      	bne.n	800a208 <validate+0x58>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a1f4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe f979 	bl	80084f0 <disk_status>
 800a1fe:	4603      	mov	r3, r0
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <validate+0x5c>
		return FR_INVALID_OBJECT;
 800a208:	2309      	movs	r3, #9
 800a20a:	e000      	b.n	800a20e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	4613      	mov	r3, r2
 800a224:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800a22a:	f107 0310 	add.w	r3, r7, #16
 800a22e:	4618      	mov	r0, r3
 800a230:	f7ff fc40 	bl	8009ab4 <get_ldnumber>
 800a234:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da01      	bge.n	800a240 <f_mount+0x28>
 800a23c:	230b      	movs	r3, #11
 800a23e:	e02d      	b.n	800a29c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a240:	4a18      	ldr	r2, [pc, #96]	@ (800a2a4 <f_mount+0x8c>)
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a248:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800a250:	69b8      	ldr	r0, [r7, #24]
 800a252:	f7fe fbed 	bl	8008a30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	490d      	ldr	r1, [pc, #52]	@ (800a2a4 <f_mount+0x8c>)
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <f_mount+0x6a>
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d001      	beq.n	800a286 <f_mount+0x6e>
 800a282:	2300      	movs	r3, #0
 800a284:	e00a      	b.n	800a29c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800a286:	f107 0108 	add.w	r1, r7, #8
 800a28a:	f107 030c 	add.w	r3, r7, #12
 800a28e:	2200      	movs	r2, #0
 800a290:	4618      	mov	r0, r3
 800a292:	f7ff fcbf 	bl	8009c14 <find_volume>
 800a296:	4603      	mov	r3, r0
 800a298:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3720      	adds	r7, #32
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	20000c4c 	.word	0x20000c4c

0800a2a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a2b4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a2b8:	6018      	str	r0, [r3, #0]
 800a2ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a2be:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800a2c2:	6019      	str	r1, [r3, #0]
 800a2c4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a2c8:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a2cc:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800a2ce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a2d2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <f_open+0x38>
 800a2dc:	2309      	movs	r3, #9
 800a2de:	e253      	b.n	800a788 <f_open+0x4e0>
	fp->fs = 0;			/* Clear file object */
 800a2e0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a2e4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a2f0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a2f4:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a2f8:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800a2fc:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 800a300:	7812      	ldrb	r2, [r2, #0]
 800a302:	f002 021f 	and.w	r2, r2, #31
 800a306:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a308:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a30c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	f023 0301 	bic.w	r3, r3, #1
 800a316:	b2da      	uxtb	r2, r3
 800a318:	f107 0108 	add.w	r1, r7, #8
 800a31c:	f107 0320 	add.w	r3, r7, #32
 800a320:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fc75 	bl	8009c14 <find_volume>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800a330:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800a334:	2b00      	cmp	r3, #0
 800a336:	f040 8225 	bne.w	800a784 <f_open+0x4dc>
		INIT_BUF(dj);
 800a33a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a33e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a342:	f107 0214 	add.w	r2, r7, #20
 800a346:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800a34a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a34e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	f107 0320 	add.w	r3, r7, #32
 800a358:	4611      	mov	r1, r2
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff fb3c 	bl	80099d8 <follow_path>
 800a360:	4603      	mov	r3, r0
 800a362:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		dir = dj.dir;
 800a366:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a36a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a36e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a372:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a376:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d11b      	bne.n	800a3b6 <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 800a37e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a382:	2b00      	cmp	r3, #0
 800a384:	d103      	bne.n	800a38e <f_open+0xe6>
				res = FR_INVALID_NAME;
 800a386:	2306      	movs	r3, #6
 800a388:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800a38c:	e013      	b.n	800a3b6 <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a38e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a392:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	bf8c      	ite	hi
 800a39c:	2301      	movhi	r3, #1
 800a39e:	2300      	movls	r3, #0
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	f107 0320 	add.w	r3, r7, #32
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe f9b6 	bl	800871c <chk_lock>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a3b6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a3ba:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	f003 031c 	and.w	r3, r3, #28
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 80e6 	beq.w	800a596 <f_open+0x2ee>
			if (res != FR_OK) {					/* No file, create new */
 800a3ca:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d027      	beq.n	800a422 <f_open+0x17a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a3d2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d10e      	bne.n	800a3f8 <f_open+0x150>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a3da:	f7fe fa0b 	bl	80087f4 <enq_lock>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <f_open+0x14a>
 800a3e4:	f107 0320 	add.w	r3, r7, #32
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff f9fc 	bl	80097e6 <dir_register>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	e000      	b.n	800a3f4 <f_open+0x14c>
 800a3f2:	2312      	movs	r3, #18
 800a3f4:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a3f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a3fc:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a400:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800a404:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 800a408:	7812      	ldrb	r2, [r2, #0]
 800a40a:	f042 0208 	orr.w	r2, r2, #8
 800a40e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800a410:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a414:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a418:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a41c:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 800a420:	e017      	b.n	800a452 <f_open+0x1aa>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a422:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a426:	330b      	adds	r3, #11
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	f003 0311 	and.w	r3, r3, #17
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <f_open+0x192>
					res = FR_DENIED;
 800a432:	2307      	movs	r3, #7
 800a434:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800a438:	e00b      	b.n	800a452 <f_open+0x1aa>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a43a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a43e:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d002      	beq.n	800a452 <f_open+0x1aa>
						res = FR_EXIST;
 800a44c:	2308      	movs	r3, #8
 800a44e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a452:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800a456:	2b00      	cmp	r3, #0
 800a458:	f040 80c1 	bne.w	800a5de <f_open+0x336>
 800a45c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a460:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	f003 0308 	and.w	r3, r3, #8
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 80b7 	beq.w	800a5de <f_open+0x336>
				dw = GET_FATTIME();				/* Created time */
 800a470:	f7fd ffdc 	bl	800842c <get_fattime>
 800a474:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a478:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a47c:	330e      	adds	r3, #14
 800a47e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 800a482:	b2d2      	uxtb	r2, r2
 800a484:	701a      	strb	r2, [r3, #0]
 800a486:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	0a1b      	lsrs	r3, r3, #8
 800a48e:	b29a      	uxth	r2, r3
 800a490:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a494:	330f      	adds	r3, #15
 800a496:	b2d2      	uxtb	r2, r2
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800a49e:	0c1a      	lsrs	r2, r3, #16
 800a4a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a4a4:	3310      	adds	r3, #16
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800a4ae:	0e1a      	lsrs	r2, r3, #24
 800a4b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a4b4:	3311      	adds	r3, #17
 800a4b6:	b2d2      	uxtb	r2, r2
 800a4b8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a4ba:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a4be:	330b      	adds	r3, #11
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a4c4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a4c8:	331c      	adds	r3, #28
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	701a      	strb	r2, [r3, #0]
 800a4ce:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a4d2:	331d      	adds	r3, #29
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	701a      	strb	r2, [r3, #0]
 800a4d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a4dc:	331e      	adds	r3, #30
 800a4de:	2200      	movs	r2, #0
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a4e6:	331f      	adds	r3, #31
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a4ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a4f0:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a4f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a4f8:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff f8ce 	bl	800969e <ld_clust>
 800a502:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800a506:	2100      	movs	r1, #0
 800a508:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 800a50c:	f7ff f8f6 	bl	80096fc <st_clust>
				dj.fs->wflag = 1;
 800a510:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a514:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a518:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800a522:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800a526:	2b00      	cmp	r3, #0
 800a528:	d059      	beq.n	800a5de <f_open+0x336>
					dw = dj.fs->winsect;
 800a52a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a52e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a532:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a536:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800a53a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
					res = remove_chain(dj.fs, cl);
 800a53e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a542:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a546:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a54a:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe fda5 	bl	800909e <remove_chain>
 800a554:	4603      	mov	r3, r0
 800a556:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
					if (res == FR_OK) {
 800a55a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d13d      	bne.n	800a5de <f_open+0x336>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a562:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a566:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a56a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a56e:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 800a572:	3a01      	subs	r2, #1
 800a574:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 800a578:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a57c:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a580:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a584:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe fac4 	bl	8008b16 <move_window>
 800a58e:	4603      	mov	r3, r0
 800a590:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800a594:	e023      	b.n	800a5de <f_open+0x336>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800a596:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d11f      	bne.n	800a5de <f_open+0x336>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a59e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a5a2:	330b      	adds	r3, #11
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	f003 0310 	and.w	r3, r3, #16
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <f_open+0x30e>
					res = FR_NO_FILE;
 800a5ae:	2304      	movs	r3, #4
 800a5b0:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 800a5b4:	e013      	b.n	800a5de <f_open+0x336>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a5b6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a5ba:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	f003 0302 	and.w	r3, r3, #2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00a      	beq.n	800a5de <f_open+0x336>
 800a5c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a5cc:	330b      	adds	r3, #11
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <f_open+0x336>
						res = FR_DENIED;
 800a5d8:	2307      	movs	r3, #7
 800a5da:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800a5de:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d151      	bne.n	800a68a <f_open+0x3e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a5e6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a5ea:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	f003 0308 	and.w	r3, r3, #8
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00b      	beq.n	800a610 <f_open+0x368>
				mode |= FA__WRITTEN;
 800a5f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a5fc:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a600:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800a604:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 800a608:	7812      	ldrb	r2, [r2, #0]
 800a60a:	f042 0220 	orr.w	r2, r2, #32
 800a60e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a610:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a614:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a618:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a61c:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 800a620:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a624:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 800a62e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a632:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800a63c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a640:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a644:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	bf8c      	ite	hi
 800a64e:	2301      	movhi	r3, #1
 800a650:	2300      	movls	r3, #0
 800a652:	b2db      	uxtb	r3, r3
 800a654:	461a      	mov	r2, r3
 800a656:	f107 0320 	add.w	r3, r7, #32
 800a65a:	4611      	mov	r1, r2
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fe f8ed 	bl	800883c <inc_lock>
 800a662:	4602      	mov	r2, r0
 800a664:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a668:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800a672:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a676:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800a680:	2b00      	cmp	r3, #0
 800a682:	d102      	bne.n	800a68a <f_open+0x3e2>
 800a684:	2302      	movs	r3, #2
 800a686:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800a68a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d178      	bne.n	800a784 <f_open+0x4dc>
			fp->flag = mode;					/* File access mode */
 800a692:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a696:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800a6a0:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 800a6a4:	7812      	ldrb	r2, [r2, #0]
 800a6a6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 800a6aa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a6ae:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a6ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a6be:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a6c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a6c6:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe ffe7 	bl	800969e <ld_clust>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a6d6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a6e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a6e4:	331f      	adds	r3, #31
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	061a      	lsls	r2, r3, #24
 800a6ea:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a6ee:	331e      	adds	r3, #30
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	041b      	lsls	r3, r3, #16
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800a6fa:	331d      	adds	r3, #29
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	021b      	lsls	r3, r3, #8
 800a700:	4313      	orrs	r3, r2
 800a702:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800a706:	321c      	adds	r2, #28
 800a708:	7812      	ldrb	r2, [r2, #0]
 800a70a:	431a      	orrs	r2, r3
 800a70c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a710:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 800a71a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a71e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2200      	movs	r2, #0
 800a726:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 800a72a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a72e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2200      	movs	r2, #0
 800a736:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800a73a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a73e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2200      	movs	r2, #0
 800a746:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800a74a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a74e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800a752:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800a756:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a75a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 800a764:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a768:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a772:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800a776:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800a77a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800a784:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 800a788:	4618      	mov	r0, r3
 800a78a:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b08a      	sub	sp, #40	@ 0x28
 800a796:	af00      	add	r7, sp, #0
 800a798:	60f8      	str	r0, [r7, #12]
 800a79a:	60b9      	str	r1, [r7, #8]
 800a79c:	607a      	str	r2, [r7, #4]
 800a79e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f7ff fd00 	bl	800a1b0 <validate>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d001      	beq.n	800a7be <f_write+0x2c>
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	e192      	b.n	800aae4 <f_write+0x352>
	if (fp->err)							/* Check error */
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d003      	beq.n	800a7d0 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800a7ce:	e189      	b.n	800aae4 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a7d6:	f003 0302 	and.w	r3, r3, #2
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d101      	bne.n	800a7e2 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a7de:	2307      	movs	r3, #7
 800a7e0:	e180      	b.n	800aae4 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	441a      	add	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	f080 8158 	bcs.w	800aaa8 <f_write+0x316>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800a7fc:	e154      	b.n	800aaa8 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800a804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f040 8114 	bne.w	800aa36 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800a814:	0a5b      	lsrs	r3, r3, #9
 800a816:	b2da      	uxtb	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a81e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800a822:	3b01      	subs	r3, #1
 800a824:	b2db      	uxtb	r3, r3
 800a826:	4013      	ands	r3, r2
 800a828:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800a82a:	7dbb      	ldrb	r3, [r7, #22]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d151      	bne.n	800a8d4 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10f      	bne.n	800a85a <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a840:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800a842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a844:	2b00      	cmp	r3, #0
 800a846:	d121      	bne.n	800a88c <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a84e:	2100      	movs	r1, #0
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe fc7e 	bl	8009152 <create_chain>
 800a856:	6278      	str	r0, [r7, #36]	@ 0x24
 800a858:	e018      	b.n	800a88c <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800a860:	2b00      	cmp	r3, #0
 800a862:	d008      	beq.n	800a876 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800a86a:	4619      	mov	r1, r3
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f7fe fd0d 	bl	800928c <clmt_clust>
 800a872:	6278      	str	r0, [r7, #36]	@ 0x24
 800a874:	e00a      	b.n	800a88c <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a882:	4619      	mov	r1, r3
 800a884:	4610      	mov	r0, r2
 800a886:	f7fe fc64 	bl	8009152 <create_chain>
 800a88a:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 810f 	beq.w	800aab2 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	2b01      	cmp	r3, #1
 800a898:	d105      	bne.n	800a8a6 <f_write+0x114>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2202      	movs	r2, #2
 800a89e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	e11e      	b.n	800aae4 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ac:	d105      	bne.n	800a8ba <f_write+0x128>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e114      	b.n	800aae4 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d103      	bne.n	800a8d4 <f_write+0x142>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8d0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a8da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d01d      	beq.n	800a91e <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a8e8:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800a8ec:	68f9      	ldr	r1, [r7, #12]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	f7fd fe5b 	bl	80085b0 <disk_write>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d005      	beq.n	800a90c <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800a908:	2301      	movs	r3, #1
 800a90a:	e0eb      	b.n	800aae4 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a916:	b2da      	uxtb	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a92a:	4619      	mov	r1, r3
 800a92c:	4610      	mov	r0, r2
 800a92e:	f7fe f9cd 	bl	8008ccc <clust2sect>
 800a932:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d105      	bne.n	800a946 <f_write+0x1b4>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2202      	movs	r2, #2
 800a93e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800a942:	2302      	movs	r3, #2
 800a944:	e0ce      	b.n	800aae4 <f_write+0x352>
			sect += csect;
 800a946:	7dbb      	ldrb	r3, [r7, #22]
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	4413      	add	r3, r2
 800a94c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	0a5b      	lsrs	r3, r3, #9
 800a952:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d048      	beq.n	800a9ec <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a95a:	7dba      	ldrb	r2, [r7, #22]
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	4413      	add	r3, r2
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800a966:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d908      	bls.n	800a980 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a974:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800a978:	461a      	mov	r2, r3
 800a97a:	7dbb      	ldrb	r3, [r7, #22]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a986:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	69b9      	ldr	r1, [r7, #24]
 800a990:	f7fd fe0e 	bl	80085b0 <disk_write>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d005      	beq.n	800a9a6 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e09e      	b.n	800aae4 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	69fa      	ldr	r2, [r7, #28]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d916      	bls.n	800a9e4 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	025b      	lsls	r3, r3, #9
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	f7fd fe2d 	bl	800862c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800a9d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	025b      	lsls	r3, r3, #9
 800a9e8:	623b      	str	r3, [r7, #32]
				continue;
 800a9ea:	e047      	b.n	800aa7c <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d01a      	beq.n	800aa2e <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d212      	bcs.n	800aa2e <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800aa0e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800aa12:	68f9      	ldr	r1, [r7, #12]
 800aa14:	2301      	movs	r3, #1
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	f7fd fdaa 	bl	8008570 <disk_read>
 800aa1c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d005      	beq.n	800aa2e <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e05a      	b.n	800aae4 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800aa3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa40:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800aa44:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800aa46:	6a3a      	ldr	r2, [r7, #32]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d901      	bls.n	800aa52 <f_write+0x2c0>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800aa58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	6a3a      	ldr	r2, [r7, #32]
 800aa62:	69b9      	ldr	r1, [r7, #24]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fd fde1 	bl	800862c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800aa70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800aa7c:	69ba      	ldr	r2, [r7, #24]
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	4413      	add	r3, r2
 800aa82:	61bb      	str	r3, [r7, #24]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800aa8a:	6a3b      	ldr	r3, [r7, #32]
 800aa8c:	441a      	add	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	441a      	add	r2, r3
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	601a      	str	r2, [r3, #0]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f47f aea7 	bne.w	800a7fe <f_write+0x6c>
 800aab0:	e000      	b.n	800aab4 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aab2:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d905      	bls.n	800aad0 <f_write+0x33e>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800aad6:	f043 0320 	orr.w	r3, r3, #32
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3728      	adds	r7, #40	@ 0x28
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7ff fb5b 	bl	800a1b0 <validate>
 800aafa:	4603      	mov	r3, r0
 800aafc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f040 80a8 	bne.w	800ac56 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800ab0c:	f003 0320 	and.w	r3, r3, #32
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 80a0 	beq.w	800ac56 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800ab1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d019      	beq.n	800ab58 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ab2a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800ab36:	2301      	movs	r3, #1
 800ab38:	f7fd fd3a 	bl	80085b0 <disk_write>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800ab42:	2301      	movs	r3, #1
 800ab44:	e088      	b.n	800ac58 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800ab4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7fd ffd5 	bl	8008b16 <move_window>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d16f      	bne.n	800ac56 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ab7c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	330b      	adds	r3, #11
 800ab82:	781a      	ldrb	r2, [r3, #0]
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	330b      	adds	r3, #11
 800ab88:	f042 0220 	orr.w	r2, r2, #32
 800ab8c:	b2d2      	uxtb	r2, r2
 800ab8e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	331c      	adds	r3, #28
 800ab9a:	b2d2      	uxtb	r2, r2
 800ab9c:	701a      	strb	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	0a1b      	lsrs	r3, r3, #8
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	331d      	adds	r3, #29
 800abae:	b2d2      	uxtb	r2, r2
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800abb8:	0c1a      	lsrs	r2, r3, #16
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	331e      	adds	r3, #30
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	701a      	strb	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800abc8:	0e1a      	lsrs	r2, r3, #24
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	331f      	adds	r3, #31
 800abce:	b2d2      	uxtb	r2, r2
 800abd0:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800abd8:	4619      	mov	r1, r3
 800abda:	6938      	ldr	r0, [r7, #16]
 800abdc:	f7fe fd8e 	bl	80096fc <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800abe0:	f7fd fc24 	bl	800842c <get_fattime>
 800abe4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	3316      	adds	r3, #22
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	b2d2      	uxtb	r2, r2
 800abee:	701a      	strb	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	0a1b      	lsrs	r3, r3, #8
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	3317      	adds	r3, #23
 800abfc:	b2d2      	uxtb	r2, r2
 800abfe:	701a      	strb	r2, [r3, #0]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	0c1a      	lsrs	r2, r3, #16
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	3318      	adds	r3, #24
 800ac08:	b2d2      	uxtb	r2, r2
 800ac0a:	701a      	strb	r2, [r3, #0]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	0e1a      	lsrs	r2, r3, #24
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	3319      	adds	r3, #25
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	3312      	adds	r3, #18
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	3313      	adds	r3, #19
 800ac24:	2200      	movs	r2, #0
 800ac26:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800ac2e:	f023 0320 	bic.w	r3, r3, #32
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fd ff90 	bl	8008b72 <sync_fs>
 800ac52:	4603      	mov	r3, r0
 800ac54:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff ff3f 	bl	800aaec <f_sync>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d116      	bne.n	800aca6 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff fa99 	bl	800a1b0 <validate>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10e      	bne.n	800aca6 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fd fe8a 	bl	80089a8 <dec_lock>
 800ac94:	4603      	mov	r3, r0
 800ac96:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d103      	bne.n	800aca6 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b090      	sub	sp, #64	@ 0x40
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff fa78 	bl	800a1b0 <validate>
 800acc0:	4603      	mov	r3, r0
 800acc2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800acc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <f_lseek+0x24>
 800acce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800acd2:	e247      	b.n	800b164 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800ace4:	e23e      	b.n	800b164 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 80f2 	beq.w	800aed6 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf8:	d164      	bne.n	800adc4 <f_lseek+0x114>
			tbl = fp->cltbl;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800ad00:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ad02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad04:	1d1a      	adds	r2, r3, #4
 800ad06:	627a      	str	r2, [r7, #36]	@ 0x24
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	617b      	str	r3, [r7, #20]
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ad16:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ad18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d041      	beq.n	800ada2 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad20:	613b      	str	r3, [r7, #16]
 800ad22:	2300      	movs	r3, #0
 800ad24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad28:	3302      	adds	r3, #2
 800ad2a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad32:	3301      	adds	r3, #1
 800ad34:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ad3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fd ffe5 	bl	8008d0e <get_fat>
 800ad44:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800ad46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d805      	bhi.n	800ad58 <f_lseek+0xa8>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800ad54:	2302      	movs	r3, #2
 800ad56:	e205      	b.n	800b164 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ad58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5e:	d105      	bne.n	800ad6c <f_lseek+0xbc>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e1fb      	b.n	800b164 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d0da      	beq.n	800ad2c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ad76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d809      	bhi.n	800ad92 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad80:	1d1a      	adds	r2, r3, #4
 800ad82:	627a      	str	r2, [r7, #36]	@ 0x24
 800ad84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8a:	1d1a      	adds	r2, r3, #4
 800ad8c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ad98:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ad9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d3bd      	bcc.n	800ad1e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800ada8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adaa:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800adac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d803      	bhi.n	800adbc <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 800adb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb6:	2200      	movs	r2, #0
 800adb8:	601a      	str	r2, [r3, #0]
 800adba:	e1d1      	b.n	800b160 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800adbc:	2311      	movs	r3, #17
 800adbe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800adc2:	e1cd      	b.n	800b160 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d903      	bls.n	800add8 <f_lseek+0x128>
				ofs = fp->fsize;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800add6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			if (ofs) {
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 81bc 	beq.w	800b160 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	3b01      	subs	r3, #1
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7fe fa4c 	bl	800928c <clmt_clust>
 800adf4:	4602      	mov	r2, r0
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	f7fd ff5e 	bl	8008ccc <clust2sect>
 800ae10:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d105      	bne.n	800ae24 <f_lseek+0x174>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800ae20:	2302      	movs	r3, #2
 800ae22:	e19f      	b.n	800b164 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	3b01      	subs	r3, #1
 800ae28:	0a5b      	lsrs	r3, r3, #9
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800ae30:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800ae34:	3a01      	subs	r2, #1
 800ae36:	4013      	ands	r3, r2
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800ae44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f000 8189 	beq.w	800b160 <f_lseek+0x4b0>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	f000 8182 	beq.w	800b160 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800ae62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d01d      	beq.n	800aea6 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ae70:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f7fd fb97 	bl	80085b0 <disk_write>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d005      	beq.n	800ae94 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800ae90:	2301      	movs	r3, #1
 800ae92:	e167      	b.n	800b164 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800ae9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae9e:	b2da      	uxtb	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800aeac:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	69ba      	ldr	r2, [r7, #24]
 800aeb6:	f7fd fb5b 	bl	8008570 <disk_read>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d005      	beq.n	800aecc <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800aec8:	2301      	movs	r3, #1
 800aeca:	e14b      	b.n	800b164 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	69ba      	ldr	r2, [r7, #24]
 800aed0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 800aed4:	e144      	b.n	800b160 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800aedc:	683a      	ldr	r2, [r7, #0]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d90a      	bls.n	800aef8 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d103      	bne.n	800aef8 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800aef6:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800aefe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800af00:	2300      	movs	r3, #0
 800af02:	637b      	str	r3, [r7, #52]	@ 0x34
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af08:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		if (ofs) {
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f000 80c6 	beq.w	800b0a0 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800af1a:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800af1e:	025b      	lsls	r3, r3, #9
 800af20:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01e      	beq.n	800af66 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	1e5a      	subs	r2, r3, #1
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	fbb2 f2f3 	udiv	r2, r2, r3
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	1e59      	subs	r1, r3, #1
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d312      	bcc.n	800af66 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800af40:	6a3b      	ldr	r3, [r7, #32]
 800af42:	1e5a      	subs	r2, r3, #1
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	425b      	negs	r3, r3
 800af48:	401a      	ands	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				ofs -= fp->fptr;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800af62:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af64:	e029      	b.n	800afba <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800af6c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800af6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af70:	2b00      	cmp	r3, #0
 800af72:	d11e      	bne.n	800afb2 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800af7a:	2100      	movs	r1, #0
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe f8e8 	bl	8009152 <create_chain>
 800af82:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800af84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af86:	2b01      	cmp	r3, #1
 800af88:	d105      	bne.n	800af96 <f_lseek+0x2e6>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2202      	movs	r2, #2
 800af8e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800af92:	2302      	movs	r3, #2
 800af94:	e0e6      	b.n	800b164 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800af96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9c:	d105      	bne.n	800afaa <f_lseek+0x2fa>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800afa6:	2301      	movs	r3, #1
 800afa8:	e0dc      	b.n	800b164 <f_lseek+0x4b4>
					fp->sclust = clst;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800afae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				}
#endif
				fp->clust = clst;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800afb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			if (clst != 0) {
 800afba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d06f      	beq.n	800b0a0 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 800afc0:	e047      	b.n	800b052 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00d      	beq.n	800afec <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800afd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800afd8:	4618      	mov	r0, r3
 800afda:	f7fe f8ba 	bl	8009152 <create_chain>
 800afde:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800afe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10a      	bne.n	800affc <f_lseek+0x34c>
							ofs = bcs; break;
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	603b      	str	r3, [r7, #0]
 800afea:	e036      	b.n	800b05a <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800aff2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fd fe8a 	bl	8008d0e <get_fat>
 800affa:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800affc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b002:	d105      	bne.n	800b010 <f_lseek+0x360>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800b00c:	2301      	movs	r3, #1
 800b00e:	e0a9      	b.n	800b164 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800b010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b012:	2b01      	cmp	r3, #1
 800b014:	d907      	bls.n	800b026 <f_lseek+0x376>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800b01c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b022:	429a      	cmp	r2, r3
 800b024:	d305      	bcc.n	800b032 <f_lseek+0x382>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2202      	movs	r2, #2
 800b02a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800b02e:	2302      	movs	r3, #2
 800b030:	e098      	b.n	800b164 <f_lseek+0x4b4>
					fp->clust = clst;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b036:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
					fp->fptr += bcs;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	441a      	add	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
					ofs -= bcs;
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	429a      	cmp	r2, r3
 800b058:	d8b3      	bhi.n	800afc2 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	441a      	add	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				if (ofs % SS(fp->fs)) {
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b070:	2b00      	cmp	r3, #0
 800b072:	d015      	beq.n	800b0a0 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800b07a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fd fe25 	bl	8008ccc <clust2sect>
 800b082:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b086:	2b00      	cmp	r3, #0
 800b088:	d105      	bne.n	800b096 <f_lseek+0x3e6>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2202      	movs	r2, #2
 800b08e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800b092:	2302      	movs	r3, #2
 800b094:	e066      	b.n	800b164 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	0a5b      	lsrs	r3, r3, #9
 800b09a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b09c:	4413      	add	r3, r2
 800b09e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800b0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d041      	beq.n	800b132 <f_lseek+0x482>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b0b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d03b      	beq.n	800b132 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800b0c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d01d      	beq.n	800b104 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800b0ce:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800b0da:	2301      	movs	r3, #1
 800b0dc:	f7fd fa68 	bl	80085b0 <disk_write>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d005      	beq.n	800b0f2 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e038      	b.n	800b164 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800b0f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800b10a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	2301      	movs	r3, #1
 800b112:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b114:	f7fd fa2c 	bl	8008570 <disk_read>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d005      	beq.n	800b12a <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800b126:	2301      	movs	r3, #1
 800b128:	e01c      	b.n	800b164 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b12e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800b13e:	429a      	cmp	r2, r3
 800b140:	d90e      	bls.n	800b160 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->flag |= FA__WRITTEN;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800b154:	f043 0320 	orr.w	r3, r3, #32
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800b160:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b164:	4618      	mov	r0, r3
 800b166:	3740      	adds	r7, #64	@ 0x40
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800b178:	78fb      	ldrb	r3, [r7, #3]
 800b17a:	2b0a      	cmp	r3, #10
 800b17c:	d103      	bne.n	800b186 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b17e:	210d      	movs	r1, #13
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7ff fff3 	bl	800b16c <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	db25      	blt.n	800b1de <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	1c5a      	adds	r2, r3, #1
 800b196:	60fa      	str	r2, [r7, #12]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	4413      	add	r3, r2
 800b19c:	78fa      	ldrb	r2, [r7, #3]
 800b19e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2b3c      	cmp	r3, #60	@ 0x3c
 800b1a4:	dd12      	ble.n	800b1cc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6818      	ldr	r0, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f103 010c 	add.w	r1, r3, #12
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	f107 0308 	add.w	r3, r7, #8
 800b1b6:	f7ff faec 	bl	800a792 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d101      	bne.n	800b1c6 <putc_bfd+0x5a>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e001      	b.n	800b1ca <putc_bfd+0x5e>
 800b1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ca:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	609a      	str	r2, [r3, #8]
 800b1dc:	e000      	b.n	800b1e0 <putc_bfd+0x74>
	if (i < 0) return;
 800b1de:	bf00      	nop
}
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b1e6:	b590      	push	{r4, r7, lr}
 800b1e8:	b097      	sub	sp, #92	@ 0x5c
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	613b      	str	r3, [r7, #16]
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800b1fc:	e009      	b.n	800b212 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	607a      	str	r2, [r7, #4]
 800b204:	781a      	ldrb	r2, [r3, #0]
 800b206:	f107 030c 	add.w	r3, r7, #12
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff ffad 	bl	800b16c <putc_bfd>
	while (*str)			/* Put the string */
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1f1      	bne.n	800b1fe <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	db15      	blt.n	800b24c <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	461c      	mov	r4, r3
 800b226:	f107 0208 	add.w	r2, r7, #8
 800b22a:	f107 030c 	add.w	r3, r7, #12
 800b22e:	f103 010c 	add.w	r1, r3, #12
 800b232:	4613      	mov	r3, r2
 800b234:	4622      	mov	r2, r4
 800b236:	f7ff faac 	bl	800a792 <f_write>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d105      	bne.n	800b24c <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	4293      	cmp	r3, r2
 800b246:	d101      	bne.n	800b24c <f_puts+0x66>
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	e001      	b.n	800b250 <f_puts+0x6a>
	return EOF;
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b250:	4618      	mov	r0, r3
 800b252:	375c      	adds	r7, #92	@ 0x5c
 800b254:	46bd      	mov	sp, r7
 800b256:	bd90      	pop	{r4, r7, pc}

0800b258 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b258:	b480      	push	{r7}
 800b25a:	b087      	sub	sp, #28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	4613      	mov	r3, r2
 800b264:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b266:	2301      	movs	r3, #1
 800b268:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b26e:	4b1e      	ldr	r3, [pc, #120]	@ (800b2e8 <FATFS_LinkDriverEx+0x90>)
 800b270:	7a5b      	ldrb	r3, [r3, #9]
 800b272:	b2db      	uxtb	r3, r3
 800b274:	2b01      	cmp	r3, #1
 800b276:	d831      	bhi.n	800b2dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b278:	4b1b      	ldr	r3, [pc, #108]	@ (800b2e8 <FATFS_LinkDriverEx+0x90>)
 800b27a:	7a5b      	ldrb	r3, [r3, #9]
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	461a      	mov	r2, r3
 800b280:	4b19      	ldr	r3, [pc, #100]	@ (800b2e8 <FATFS_LinkDriverEx+0x90>)
 800b282:	2100      	movs	r1, #0
 800b284:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b286:	4b18      	ldr	r3, [pc, #96]	@ (800b2e8 <FATFS_LinkDriverEx+0x90>)
 800b288:	7a5b      	ldrb	r3, [r3, #9]
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	4a16      	ldr	r2, [pc, #88]	@ (800b2e8 <FATFS_LinkDriverEx+0x90>)
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b296:	4b14      	ldr	r3, [pc, #80]	@ (800b2e8 <FATFS_LinkDriverEx+0x90>)
 800b298:	7a5b      	ldrb	r3, [r3, #9]
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	461a      	mov	r2, r3
 800b29e:	4b12      	ldr	r3, [pc, #72]	@ (800b2e8 <FATFS_LinkDriverEx+0x90>)
 800b2a0:	4413      	add	r3, r2
 800b2a2:	79fa      	ldrb	r2, [r7, #7]
 800b2a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b2a6:	4b10      	ldr	r3, [pc, #64]	@ (800b2e8 <FATFS_LinkDriverEx+0x90>)
 800b2a8:	7a5b      	ldrb	r3, [r3, #9]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	1c5a      	adds	r2, r3, #1
 800b2ae:	b2d1      	uxtb	r1, r2
 800b2b0:	4a0d      	ldr	r2, [pc, #52]	@ (800b2e8 <FATFS_LinkDriverEx+0x90>)
 800b2b2:	7251      	strb	r1, [r2, #9]
 800b2b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b2b6:	7dbb      	ldrb	r3, [r7, #22]
 800b2b8:	3330      	adds	r3, #48	@ 0x30
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	223a      	movs	r2, #58	@ 0x3a
 800b2c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	3302      	adds	r3, #2
 800b2cc:	222f      	movs	r2, #47	@ 0x2f
 800b2ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	3303      	adds	r3, #3
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	371c      	adds	r7, #28
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bc80      	pop	{r7}
 800b2e6:	4770      	bx	lr
 800b2e8:	20000c6c 	.word	0x20000c6c

0800b2ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff ffac 	bl	800b258 <FATFS_LinkDriverEx>
 800b300:	4603      	mov	r3, r0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
	...

0800b30c <Screen_begin>:
    [CONDITION_YEAR]     = {.max_value = 99, .min_value = 1},
    [CONDITION_HOUR]     = {.max_value = 23, .min_value = 0},
    [CONDITION_MINUTE]   = {.max_value = 59, .min_value = 0}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 800b314:	4a38      	ldr	r2, [pc, #224]	@ (800b3f8 <Screen_begin+0xec>)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 800b31a:	4837      	ldr	r0, [pc, #220]	@ (800b3f8 <Screen_begin+0xec>)
 800b31c:	f002 f9bc 	bl	800d698 <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 800b320:	4936      	ldr	r1, [pc, #216]	@ (800b3fc <Screen_begin+0xf0>)
 800b322:	4835      	ldr	r0, [pc, #212]	@ (800b3f8 <Screen_begin+0xec>)
 800b324:	f006 ff10 	bl	8012148 <DWIN_SetCallback>

    Screen_Init_Variable(&_Screen);
 800b328:	4833      	ldr	r0, [pc, #204]	@ (800b3f8 <Screen_begin+0xec>)
 800b32a:	f002 fc5f 	bl	800dbec <Screen_Init_Variable>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 800b32e:	4b32      	ldr	r3, [pc, #200]	@ (800b3f8 <Screen_begin+0xec>)
 800b330:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b334:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 800b336:	4b30      	ldr	r3, [pc, #192]	@ (800b3f8 <Screen_begin+0xec>)
 800b338:	2200      	movs	r2, #0
 800b33a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;
 800b33e:	4b2e      	ldr	r3, [pc, #184]	@ (800b3f8 <Screen_begin+0xec>)
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    _Screen.pre_page = 106;
 800b346:	4b2c      	ldr	r3, [pc, #176]	@ (800b3f8 <Screen_begin+0xec>)
 800b348:	226a      	movs	r2, #106	@ 0x6a
 800b34a:	f883 24d8 	strb.w	r2, [r3, #1240]	@ 0x4d8
    _Screen.Ishome = true;
 800b34e:	4b2a      	ldr	r3, [pc, #168]	@ (800b3f8 <Screen_begin+0xec>)
 800b350:	2201      	movs	r2, #1
 800b352:	f883 24dc 	strb.w	r2, [r3, #1244]	@ 0x4dc

    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST1].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST1]));
 800b356:	4b28      	ldr	r3, [pc, #160]	@ (800b3f8 <Screen_begin+0xec>)
 800b358:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b35c:	4928      	ldr	r1, [pc, #160]	@ (800b400 <Screen_begin+0xf4>)
 800b35e:	4618      	mov	r0, r3
 800b360:	f002 ff1e 	bl	800e1a0 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST2].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST2]));
 800b364:	4b24      	ldr	r3, [pc, #144]	@ (800b3f8 <Screen_begin+0xec>)
 800b366:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 800b36a:	4926      	ldr	r1, [pc, #152]	@ (800b404 <Screen_begin+0xf8>)
 800b36c:	4618      	mov	r0, r3
 800b36e:	f002 ff17 	bl	800e1a0 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST3].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST3]));
 800b372:	4b21      	ldr	r3, [pc, #132]	@ (800b3f8 <Screen_begin+0xec>)
 800b374:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 800b378:	4923      	ldr	r1, [pc, #140]	@ (800b408 <Screen_begin+0xfc>)
 800b37a:	4618      	mov	r0, r3
 800b37c:	f002 ff10 	bl	800e1a0 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST4].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST4]));
 800b380:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f8 <Screen_begin+0xec>)
 800b382:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 800b386:	4921      	ldr	r1, [pc, #132]	@ (800b40c <Screen_begin+0x100>)
 800b388:	4618      	mov	r0, r3
 800b38a:	f002 ff09 	bl	800e1a0 <get_data_testing_ic>

    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x11D0,2);
 800b38e:	2202      	movs	r2, #2
 800b390:	f241 11d0 	movw	r1, #4560	@ 0x11d0
 800b394:	4818      	ldr	r0, [pc, #96]	@ (800b3f8 <Screen_begin+0xec>)
 800b396:	f006 fdc9 	bl	8011f2c <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x13D0,2);
 800b39a:	2202      	movs	r2, #2
 800b39c:	f241 31d0 	movw	r1, #5072	@ 0x13d0
 800b3a0:	4815      	ldr	r0, [pc, #84]	@ (800b3f8 <Screen_begin+0xec>)
 800b3a2:	f006 fdc3 	bl	8011f2c <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x15D0,2);
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	f241 51d0 	movw	r1, #5584	@ 0x15d0
 800b3ac:	4812      	ldr	r0, [pc, #72]	@ (800b3f8 <Screen_begin+0xec>)
 800b3ae:	f006 fdbd 	bl	8011f2c <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x17D0,2);
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	f241 71d0 	movw	r1, #6096	@ 0x17d0
 800b3b8:	480f      	ldr	r0, [pc, #60]	@ (800b3f8 <Screen_begin+0xec>)
 800b3ba:	f006 fdb7 	bl	8011f2c <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x19D0,2);
 800b3be:	2202      	movs	r2, #2
 800b3c0:	f641 11d0 	movw	r1, #6608	@ 0x19d0
 800b3c4:	480c      	ldr	r0, [pc, #48]	@ (800b3f8 <Screen_begin+0xec>)
 800b3c6:	f006 fdb1 	bl	8011f2c <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1BD0,2);
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	f641 31d0 	movw	r1, #7120	@ 0x1bd0
 800b3d0:	4809      	ldr	r0, [pc, #36]	@ (800b3f8 <Screen_begin+0xec>)
 800b3d2:	f006 fdab 	bl	8011f2c <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1DD0,2);
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	f641 51d0 	movw	r1, #7632	@ 0x1dd0
 800b3dc:	4806      	ldr	r0, [pc, #24]	@ (800b3f8 <Screen_begin+0xec>)
 800b3de:	f006 fda5 	bl	8011f2c <DWIN_SetWidth_Basic_line>

    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
 800b3e2:	2165      	movs	r1, #101	@ 0x65
 800b3e4:	4804      	ldr	r0, [pc, #16]	@ (800b3f8 <Screen_begin+0xec>)
 800b3e6:	f006 fa6e 	bl	80118c6 <DWIN_SetPage>
    printf("Init screen done\n");
 800b3ea:	4809      	ldr	r0, [pc, #36]	@ (800b410 <Screen_begin+0x104>)
 800b3ec:	f009 fddc 	bl	8014fa8 <puts>
}
 800b3f0:	bf00      	nop
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	20000c78 	.word	0x20000c78
 800b3fc:	0800b431 	.word	0x0800b431
 800b400:	20001050 	.word	0x20001050
 800b404:	20001080 	.word	0x20001080
 800b408:	200010b0 	.word	0x200010b0
 800b40c:	200010e0 	.word	0x200010e0
 800b410:	080183e0 	.word	0x080183e0

0800b414 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 800b41c:	6879      	ldr	r1, [r7, #4]
 800b41e:	4803      	ldr	r0, [pc, #12]	@ (800b42c <Screen_RX_data+0x18>)
 800b420:	f006 fe9f 	bl	8012162 <DWIN_Listen>
}
 800b424:	bf00      	nop
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	20000c78 	.word	0x20000c78

0800b430 <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	4603      	mov	r3, r0
 800b438:	80fb      	strh	r3, [r7, #6]
 800b43a:	460b      	mov	r3, r1
 800b43c:	717b      	strb	r3, [r7, #5]
 800b43e:	4613      	mov	r3, r2
 800b440:	713b      	strb	r3, [r7, #4]
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
 800b442:	88fb      	ldrh	r3, [r7, #6]
 800b444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b448:	4293      	cmp	r3, r2
 800b44a:	d01b      	beq.n	800b484 <Screen_RX_Callback+0x54>
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 800b44c:	88fb      	ldrh	r3, [r7, #6]
 800b44e:	2207      	movs	r2, #7
 800b450:	490e      	ldr	r1, [pc, #56]	@ (800b48c <Screen_RX_Callback+0x5c>)
 800b452:	4618      	mov	r0, r3
 800b454:	f002 f8e3 	bl	800d61e <Index_VP>
 800b458:	4603      	mov	r3, r0
 800b45a:	723b      	strb	r3, [r7, #8]
        screen_event.action = lowByte;
 800b45c:	797b      	ldrb	r3, [r7, #5]
 800b45e:	727b      	strb	r3, [r7, #9]
        screen_event.data = highByte;
 800b460:	793b      	ldrb	r3, [r7, #4]
 800b462:	72bb      	strb	r3, [r7, #10]
        screen_event.keyvalue = (uint16_t)((highByte<<8) | (lowByte&0xFF));
 800b464:	793b      	ldrb	r3, [r7, #4]
 800b466:	b21b      	sxth	r3, r3
 800b468:	021b      	lsls	r3, r3, #8
 800b46a:	b21a      	sxth	r2, r3
 800b46c:	797b      	ldrb	r3, [r7, #5]
 800b46e:	b21b      	sxth	r3, r3
 800b470:	4313      	orrs	r3, r2
 800b472:	b21b      	sxth	r3, r3
 800b474:	b29b      	uxth	r3, r3
 800b476:	81bb      	strh	r3, [r7, #12]

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
 800b478:	f107 0308 	add.w	r3, r7, #8
 800b47c:	4619      	mov	r1, r3
 800b47e:	4804      	ldr	r0, [pc, #16]	@ (800b490 <Screen_RX_Callback+0x60>)
 800b480:	f002 f9ba 	bl	800d7f8 <Screen_excute_RX_function>
    }
}
 800b484:	bf00      	nop
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	20000024 	.word	0x20000024
 800b490:	20000c78 	.word	0x20000c78

0800b494 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 800b49e:	2174      	movs	r1, #116	@ 0x74
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f006 fa10 	bl	80118c6 <DWIN_SetPage>
    screen_obj->Ishome = false;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 24dc 	strb.w	r2, [r3, #1244]	@ 0x4dc
}
 800b4ae:	bf00      	nop
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b084      	sub	sp, #16
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
 800b4be:	6039      	str	r1, [r7, #0]
    uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b4ce:	fb01 f303 	mul.w	r3, r1, r3
 800b4d2:	4413      	add	r3, r2
 800b4d4:	334b      	adds	r3, #75	@ 0x4b
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	73fb      	strb	r3, [r7, #15]
    UNUSED(current_program);
    // Show data

    // Switch page
    screen_obj->Ishome = true;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 24dc 	strb.w	r2, [r3, #1244]	@ 0x4dc
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,PROGRAM_TEST1);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b4f0:	fb01 f303 	mul.w	r3, r1, r3
 800b4f4:	4413      	add	r3, r2
 800b4f6:	3349      	adds	r3, #73	@ 0x49
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f004 f982 	bl	800f808 <show_main_page>
    // DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
}   
 800b504:	bf00      	nop
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <Navigation_return>:

void Navigation_return(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
    if (screen_obj->Ishome) {
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 34dc 	ldrb.w	r3, [r3, #1244]	@ 0x4dc
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00f      	beq.n	800b540 <Navigation_return+0x34>
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b526:	4619      	mov	r1, r3
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b52e:	fb01 f303 	mul.w	r3, r1, r3
 800b532:	4413      	add	r3, r2
 800b534:	3349      	adds	r3, #73	@ 0x49
 800b536:	2265      	movs	r2, #101	@ 0x65
 800b538:	701a      	strb	r2, [r3, #0]
        off_testing(screen_obj);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f003 fd28 	bl	800ef90 <off_testing>
        // show_main_page(screen_obj,DWINPAGE_MAIN,screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index);
    } else {

    }
}
 800b540:	bf00      	nop
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <Navigation_setting_program>:

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]

    // Switch page
    // DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
    /* Get the setting page */
    screen_obj->page_setting = DWINPAGE_SETTING_PROGRAM;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	226b      	movs	r2, #107	@ 0x6b
 800b556:	f883 24db 	strb.w	r2, [r3, #1243]	@ 0x4db
    // Switch page password 
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password,"",strlen(""));
 800b55a:	2300      	movs	r3, #0
 800b55c:	4a06      	ldr	r2, [pc, #24]	@ (800b578 <Navigation_setting_program+0x30>)
 800b55e:	f249 5160 	movw	r1, #38240	@ 0x9560
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f006 f9d6 	bl	8011914 <DWIN_SetText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 800b568:	216e      	movs	r1, #110	@ 0x6e
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f006 f9ab 	bl	80118c6 <DWIN_SetPage>
}
 800b570:	bf00      	nop
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	080183f4 	.word	0x080183f4

0800b57c <Navigation_setting_time>:

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
 800b586:	2176      	movs	r1, #118	@ 0x76
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f006 f99c 	bl	80118c6 <DWIN_SetPage>
}
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <Navigation_setting_wifi>:

void Navigation_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b596:	b590      	push	{r4, r7, lr}
 800b598:	b083      	sub	sp, #12
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	6039      	str	r1, [r7, #0]
    /* show data */
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Wifi,screen_obj->Wifi_setting.Name_Wifi,strlen(screen_obj->Wifi_setting.Name_Wifi));
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f503 6493 	add.w	r4, r3, #1176	@ 0x498
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7f4 fdd9 	bl	8000164 <strlen>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	f249 51a0 	movw	r1, #38304	@ 0x95a0
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f006 f9a9 	bl	8011914 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password_Wifi,screen_obj->Wifi_setting.Password_Wifi,strlen(screen_obj->Wifi_setting.Password_Wifi));
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f203 44b6 	addw	r4, r3, #1206	@ 0x4b6
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f203 43b6 	addw	r3, r3, #1206	@ 0x4b6
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7f4 fdc8 	bl	8000164 <strlen>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	4622      	mov	r2, r4
 800b5da:	f249 51d0 	movw	r1, #38352	@ 0x95d0
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f006 f998 	bl	8011914 <DWIN_SetText>

    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 800b5e4:	2175      	movs	r1, #117	@ 0x75
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f006 f96d 	bl	80118c6 <DWIN_SetPage>
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd90      	pop	{r4, r7, pc}

0800b5f4 <Navigation_modify_program>:

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b5f4:	b590      	push	{r4, r7, lr}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800b604:	4619      	mov	r1, r3
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	460b      	mov	r3, r1
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	440b      	add	r3, r1
 800b60e:	011b      	lsls	r3, r3, #4
 800b610:	4413      	add	r3, r2
 800b612:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800b616:	681c      	ldr	r4, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800b61e:	4619      	mov	r1, r3
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	440b      	add	r3, r1
 800b628:	011b      	lsls	r3, r3, #4
 800b62a:	4413      	add	r3, r2
 800b62c:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4618      	mov	r0, r3
 800b634:	f7f4 fd96 	bl	8000164 <strlen>
 800b638:	4603      	mov	r3, r0
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	4622      	mov	r2, r4
 800b63e:	f44f 4115 	mov.w	r1, #38144	@ 0x9500
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f006 f966 	bl	8011914 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800b64e:	4619      	mov	r1, r3
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	460b      	mov	r3, r1
 800b654:	005b      	lsls	r3, r3, #1
 800b656:	440b      	add	r3, r1
 800b658:	011b      	lsls	r3, r3, #4
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800b660:	681c      	ldr	r4, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800b668:	4619      	mov	r1, r3
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	440b      	add	r3, r1
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	4413      	add	r3, r2
 800b676:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7f4 fd71 	bl	8000164 <strlen>
 800b682:	4603      	mov	r3, r0
 800b684:	b29b      	uxth	r3, r3
 800b686:	4622      	mov	r2, r4
 800b688:	f249 5120 	movw	r1, #38176	@ 0x9520
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f006 f941 	bl	8011914 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC));
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800b698:	4619      	mov	r1, r3
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	460b      	mov	r3, r1
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	440b      	add	r3, r1
 800b6a2:	011b      	lsls	r3, r3, #4
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800b6aa:	681c      	ldr	r4, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	005b      	lsls	r3, r3, #1
 800b6ba:	440b      	add	r3, r1
 800b6bc:	011b      	lsls	r3, r3, #4
 800b6be:	4413      	add	r3, r2
 800b6c0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7f4 fd4c 	bl	8000164 <strlen>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	f249 5140 	movw	r1, #38208	@ 0x9540
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f006 f91c 	bl	8011914 <DWIN_SetText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800b6dc:	216c      	movs	r1, #108	@ 0x6c
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f006 f8f1 	bl	80118c6 <DWIN_SetPage>
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd90      	pop	{r4, r7, pc}

0800b6ec <Navigation_detail_mainpage>:

void Navigation_detail_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b704:	fb01 f303 	mul.w	r3, r1, r3
 800b708:	4413      	add	r3, r2
 800b70a:	336c      	adds	r3, #108	@ 0x6c
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b30      	cmp	r3, #48	@ 0x30
 800b710:	d11d      	bne.n	800b74e <Navigation_detail_mainpage+0x62>
        /* change main page */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_DETAIL;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b718:	4619      	mov	r1, r3
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b720:	fb01 f303 	mul.w	r3, r1, r3
 800b724:	4413      	add	r3, r2
 800b726:	3349      	adds	r3, #73	@ 0x49
 800b728:	2266      	movs	r2, #102	@ 0x66
 800b72a:	701a      	strb	r2, [r3, #0]
        // Switch page
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b732:	4619      	mov	r1, r3
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b73a:	fb01 f303 	mul.w	r3, r1, r3
 800b73e:	4413      	add	r3, r2
 800b740:	3349      	adds	r3, #73	@ 0x49
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	2200      	movs	r2, #0
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f004 f85d 	bl	800f808 <show_main_page>
    }
}
 800b74e:	bf00      	nop
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <Navigation_graph_mainpage>:

void Navigation_graph_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b756:	b580      	push	{r7, lr}
 800b758:	b082      	sub	sp, #8
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
    /* change main page */
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_PULSE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b766:	4619      	mov	r1, r3
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b76e:	fb01 f303 	mul.w	r3, r1, r3
 800b772:	4413      	add	r3, r2
 800b774:	3349      	adds	r3, #73	@ 0x49
 800b776:	2267      	movs	r2, #103	@ 0x67
 800b778:	701a      	strb	r2, [r3, #0]
    // Switch page
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b780:	4619      	mov	r1, r3
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b788:	fb01 f303 	mul.w	r3, r1, r3
 800b78c:	4413      	add	r3, r2
 800b78e:	3349      	adds	r3, #73	@ 0x49
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2200      	movs	r2, #0
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f004 f836 	bl	800f808 <show_main_page>
}
 800b79c:	bf00      	nop
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <Navigation_Change_MainPage>:

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	789b      	ldrb	r3, [r3, #2]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d111      	bne.n	800b7da <Navigation_Change_MainPage+0x36>
        screen_obj->curr_device++;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b7bc:	3301      	adds	r3, #1
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f883 24d9 	strb.w	r2, [r3, #1241]	@ 0x4d9
        if (screen_obj->curr_device == MAX_DEVICE) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	d119      	bne.n	800b804 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_1;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 24d9 	strb.w	r2, [r3, #1241]	@ 0x4d9
 800b7d8:	e014      	b.n	800b804 <Navigation_Change_MainPage+0x60>
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	789b      	ldrb	r3, [r3, #2]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d110      	bne.n	800b804 <Navigation_Change_MainPage+0x60>
        screen_obj->curr_device--;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f883 24d9 	strb.w	r2, [r3, #1241]	@ 0x4d9
        if (screen_obj->curr_device == 255 ) {
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b7f8:	2bff      	cmp	r3, #255	@ 0xff
 800b7fa:	d103      	bne.n	800b804 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_3;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2202      	movs	r2, #2
 800b800:	f883 24d9 	strb.w	r2, [r3, #1241]	@ 0x4d9
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b80a:	4619      	mov	r1, r3
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b812:	fb01 f303 	mul.w	r3, r1, r3
 800b816:	4413      	add	r3, r2
 800b818:	334b      	adds	r3, #75	@ 0x4b
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	73fb      	strb	r3, [r7, #15]

    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,curr_program);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b824:	4619      	mov	r1, r3
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b82c:	fb01 f303 	mul.w	r3, r1, r3
 800b830:	4413      	add	r3, r2
 800b832:	3349      	adds	r3, #73	@ 0x49
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	7bfa      	ldrb	r2, [r7, #15]
 800b838:	4619      	mov	r1, r3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f003 ffe4 	bl	800f808 <show_main_page>
}
 800b840:	bf00      	nop
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <Navigation_Change_CaseTest>:

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800b848:	b580      	push	{r7, lr}
 800b84a:	b08e      	sub	sp, #56	@ 0x38
 800b84c:	af02      	add	r7, sp, #8
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b858:	4619      	mov	r1, r3
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b860:	fb01 f303 	mul.w	r3, r1, r3
 800b864:	4413      	add	r3, r2
 800b866:	334b      	adds	r3, #75	@ 0x4b
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	4619      	mov	r1, r3
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	460b      	mov	r3, r1
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	440b      	add	r3, r1
 800b874:	011b      	lsls	r3, r3, #4
 800b876:	4413      	add	r3, r2
 800b878:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b888:	4619      	mov	r1, r3
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b890:	fb01 f303 	mul.w	r3, r1, r3
 800b894:	4413      	add	r3, r2
 800b896:	334b      	adds	r3, #75	@ 0x4b
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 800b89e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	4413      	add	r3, r2
 800b8aa:	011b      	lsls	r3, r3, #4
 800b8ac:	440b      	add	r3, r1
 800b8ae:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	789b      	ldrb	r3, [r3, #2]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d124      	bne.n	800b90a <Navigation_Change_CaseTest+0xc2>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b8ce:	fb01 f303 	mul.w	r3, r1, r3
 800b8d2:	4413      	add	r3, r2
 800b8d4:	3348      	adds	r3, #72	@ 0x48
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d042      	beq.n	800b962 <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b8e2:	6879      	ldr	r1, [r7, #4]
 800b8e4:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800b8e8:	fb03 f202 	mul.w	r2, r3, r2
 800b8ec:	440a      	add	r2, r1
 800b8ee:	3248      	adds	r2, #72	@ 0x48
 800b8f0:	7812      	ldrb	r2, [r2, #0]
 800b8f2:	3a01      	subs	r2, #1
 800b8f4:	b2d0      	uxtb	r0, r2
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800b8fc:	fb01 f303 	mul.w	r3, r1, r3
 800b900:	4413      	add	r3, r2
 800b902:	3348      	adds	r3, #72	@ 0x48
 800b904:	4602      	mov	r2, r0
 800b906:	701a      	strb	r2, [r3, #0]
 800b908:	e02b      	b.n	800b962 <Navigation_Change_CaseTest+0x11a>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	789b      	ldrb	r3, [r3, #2]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d127      	bne.n	800b962 <Navigation_Change_CaseTest+0x11a>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b918:	4619      	mov	r1, r3
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b920:	fb01 f303 	mul.w	r3, r1, r3
 800b924:	4413      	add	r3, r2
 800b926:	3348      	adds	r3, #72	@ 0x48
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	461a      	mov	r2, r3
 800b92c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b930:	3b01      	subs	r3, #1
 800b932:	429a      	cmp	r2, r3
 800b934:	da15      	bge.n	800b962 <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b93c:	6879      	ldr	r1, [r7, #4]
 800b93e:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800b942:	fb03 f202 	mul.w	r2, r3, r2
 800b946:	440a      	add	r2, r1
 800b948:	3248      	adds	r2, #72	@ 0x48
 800b94a:	7812      	ldrb	r2, [r2, #0]
 800b94c:	3201      	adds	r2, #1
 800b94e:	b2d0      	uxtb	r0, r2
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800b956:	fb01 f303 	mul.w	r3, r1, r3
 800b95a:	4413      	add	r3, r2
 800b95c:	3348      	adds	r3, #72	@ 0x48
 800b95e:	4602      	mov	r2, r0
 800b960:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Show data */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b968:	4619      	mov	r1, r3
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b970:	fb01 f303 	mul.w	r3, r1, r3
 800b974:	4413      	add	r3, r2
 800b976:	3348      	adds	r3, #72	@ 0x48
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b980:	f107 000c 	add.w	r0, r7, #12
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	4613      	mov	r3, r2
 800b988:	4a1d      	ldr	r2, [pc, #116]	@ (800ba00 <Navigation_Change_CaseTest+0x1b8>)
 800b98a:	211e      	movs	r1, #30
 800b98c:	f009 fb14 	bl	8014fb8 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800b990:	f107 030c 	add.w	r3, r7, #12
 800b994:	4618      	mov	r0, r3
 800b996:	f7f4 fbe5 	bl	8000164 <strlen>
 800b99a:	4603      	mov	r3, r0
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	f107 020c 	add.w	r2, r7, #12
 800b9a2:	f249 3180 	movw	r1, #37760	@ 0x9380
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f005 ffb4 	bl	8011914 <DWIN_SetText>
    // DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
    DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * num_pin]),num_pin);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800b9ba:	fb01 f303 	mul.w	r3, r1, r3
 800b9be:	4413      	add	r3, r2
 800b9c0:	3364      	adds	r3, #100	@ 0x64
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	f892 24d9 	ldrb.w	r2, [r2, #1241]	@ 0x4d9
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	6879      	ldr	r1, [r7, #4]
 800b9ce:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800b9d2:	fb00 f202 	mul.w	r2, r0, r2
 800b9d6:	440a      	add	r2, r1
 800b9d8:	3248      	adds	r2, #72	@ 0x48
 800b9da:	7812      	ldrb	r2, [r2, #0]
 800b9dc:	4611      	mov	r1, r2
 800b9de:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800b9e2:	fb01 f202 	mul.w	r2, r1, r2
 800b9e6:	441a      	add	r2, r3
 800b9e8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b9ec:	f244 1150 	movw	r1, #16720	@ 0x4150
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f006 f83e 	bl	8011a72 <DWIN_SetArray_Icon>
}
 800b9f6:	bf00      	nop
 800b9f8:	3730      	adds	r7, #48	@ 0x30
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	080183f8 	.word	0x080183f8

0800ba04 <Navigation_Change_CasePulse>:

void Navigation_Change_CasePulse(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
    if (screen_event->data == DATA_PREV_CASE) {
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	789b      	ldrb	r3, [r3, #2]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d124      	bne.n	800ba60 <Navigation_Change_CasePulse+0x5c>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ba24:	fb01 f303 	mul.w	r3, r1, r3
 800ba28:	4413      	add	r3, r2
 800ba2a:	3348      	adds	r3, #72	@ 0x48
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d03e      	beq.n	800bab0 <Navigation_Change_CasePulse+0xac>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800ba38:	6879      	ldr	r1, [r7, #4]
 800ba3a:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800ba3e:	fb03 f202 	mul.w	r2, r3, r2
 800ba42:	440a      	add	r2, r1
 800ba44:	3248      	adds	r2, #72	@ 0x48
 800ba46:	7812      	ldrb	r2, [r2, #0]
 800ba48:	3a01      	subs	r2, #1
 800ba4a:	b2d0      	uxtb	r0, r2
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800ba52:	fb01 f303 	mul.w	r3, r1, r3
 800ba56:	4413      	add	r3, r2
 800ba58:	3348      	adds	r3, #72	@ 0x48
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	701a      	strb	r2, [r3, #0]
 800ba5e:	e027      	b.n	800bab0 <Navigation_Change_CasePulse+0xac>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	789b      	ldrb	r3, [r3, #2]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d123      	bne.n	800bab0 <Navigation_Change_CasePulse+0xac>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < 1) {
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800ba6e:	4619      	mov	r1, r3
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ba76:	fb01 f303 	mul.w	r3, r1, r3
 800ba7a:	4413      	add	r3, r2
 800ba7c:	3348      	adds	r3, #72	@ 0x48
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d115      	bne.n	800bab0 <Navigation_Change_CasePulse+0xac>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800ba8a:	6879      	ldr	r1, [r7, #4]
 800ba8c:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800ba90:	fb03 f202 	mul.w	r2, r3, r2
 800ba94:	440a      	add	r2, r1
 800ba96:	3248      	adds	r2, #72	@ 0x48
 800ba98:	7812      	ldrb	r2, [r2, #0]
 800ba9a:	3201      	adds	r2, #1
 800ba9c:	b2d0      	uxtb	r0, r2
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800baa4:	fb01 f303 	mul.w	r3, r1, r3
 800baa8:	4413      	add	r3, r2
 800baaa:	3348      	adds	r3, #72	@ 0x48
 800baac:	4602      	mov	r2, r0
 800baae:	701a      	strb	r2, [r3, #0]
        }
    }

    show_pulse(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_case);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bab6:	4619      	mov	r1, r3
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800babe:	fb01 f303 	mul.w	r3, r1, r3
 800bac2:	4413      	add	r3, r2
 800bac4:	3348      	adds	r3, #72	@ 0x48
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f003 fbb4 	bl	800f238 <show_pulse>
}
 800bad0:	bf00      	nop
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <Navigation_Finish_Review>:

void Navigation_Finish_Review(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800bad8:	b580      	push	{r7, lr}
 800bada:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800bade:	af02      	add	r7, sp, #8
 800bae0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bae4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bae8:	6018      	str	r0, [r3, #0]
 800baea:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800baee:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 800baf2:	6019      	str	r1, [r3, #0]
    uint8_t curr_num_ic = ++screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
 800baf4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800baf8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bb02:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800bb06:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 800bb0a:	6811      	ldr	r1, [r2, #0]
 800bb0c:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800bb10:	fb03 f202 	mul.w	r2, r3, r2
 800bb14:	440a      	add	r2, r1
 800bb16:	324a      	adds	r2, #74	@ 0x4a
 800bb18:	7812      	ldrb	r2, [r2, #0]
 800bb1a:	3201      	adds	r2, #1
 800bb1c:	b2d0      	uxtb	r0, r2
 800bb1e:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800bb22:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 800bb26:	6811      	ldr	r1, [r2, #0]
 800bb28:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800bb2c:	fb03 f202 	mul.w	r2, r3, r2
 800bb30:	440a      	add	r2, r1
 800bb32:	324a      	adds	r2, #74	@ 0x4a
 800bb34:	4601      	mov	r1, r0
 800bb36:	7011      	strb	r1, [r2, #0]
 800bb38:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800bb3c:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 800bb40:	6812      	ldr	r2, [r2, #0]
 800bb42:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800bb46:	fb01 f303 	mul.w	r3, r1, r3
 800bb4a:	4413      	add	r3, r2
 800bb4c:	334a      	adds	r3, #74	@ 0x4a
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800bb54:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bb58:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bb62:	4619      	mov	r1, r3
 800bb64:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bb68:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bb72:	fb01 f303 	mul.w	r3, r1, r3
 800bb76:	4413      	add	r3, r2
 800bb78:	334b      	adds	r3, #75	@ 0x4b
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
 800bb80:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800bb84:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bb88:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bb8c:	6819      	ldr	r1, [r3, #0]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	005b      	lsls	r3, r3, #1
 800bb92:	4413      	add	r3, r2
 800bb94:	011b      	lsls	r3, r3, #4
 800bb96:	440b      	add	r3, r1
 800bb98:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f007 fb0b 	bl	80131ba <atoi>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 800bbaa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bbae:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bbb8:	4619      	mov	r1, r3
 800bbba:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bbbe:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bbc8:	fb01 f303 	mul.w	r3, r1, r3
 800bbcc:	4413      	add	r3, r2
 800bbce:	3349      	adds	r3, #73	@ 0x49
 800bbd0:	2265      	movs	r2, #101	@ 0x65
 800bbd2:	701a      	strb	r2, [r3, #0]
    /* show number of testing ic */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d / %d",curr_num_ic,num_ic);
 800bbd4:	f897 2227 	ldrb.w	r2, [r7, #551]	@ 0x227
 800bbd8:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 800bbdc:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	4adb      	ldr	r2, [pc, #876]	@ (800bf54 <Navigation_Finish_Review+0x47c>)
 800bbe6:	211e      	movs	r1, #30
 800bbe8:	f009 f9e6 	bl	8014fb8 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
 800bbec:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7f4 fab7 	bl	8000164 <strlen>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	f507 7201 	add.w	r2, r7, #516	@ 0x204
 800bbfe:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 800bc02:	f5a1 7009 	sub.w	r0, r1, #548	@ 0x224
 800bc06:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 800bc0a:	6800      	ldr	r0, [r0, #0]
 800bc0c:	f005 fe82 	bl	8011914 <DWIN_SetText>
    if (curr_num_ic < num_ic) {
 800bc10:	f897 2227 	ldrb.w	r2, [r7, #551]	@ 0x227
 800bc14:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	f080 81ce 	bcs.w	800bfba <Navigation_Finish_Review+0x4e2>
        /* switch page */
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
 800bc1e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bc22:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bc32:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bc3c:	fb01 f303 	mul.w	r3, r1, r3
 800bc40:	4413      	add	r3, r2
 800bc42:	3349      	adds	r3, #73	@ 0x49
 800bc44:	7819      	ldrb	r1, [r3, #0]
 800bc46:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800bc4a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bc4e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	f003 fdd8 	bl	800f808 <show_main_page>

        /* free array using in have new data test */
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
 800bc58:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bc5c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bc66:	4619      	mov	r1, r3
 800bc68:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bc6c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bc76:	fb01 f303 	mul.w	r3, r1, r3
 800bc7a:	4413      	add	r3, r2
 800bc7c:	3374      	adds	r3, #116	@ 0x74
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d016      	beq.n	800bcb2 <Navigation_Finish_Review+0x1da>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
 800bc84:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bc88:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bc92:	4619      	mov	r1, r3
 800bc94:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bc98:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bca2:	fb01 f303 	mul.w	r3, r1, r3
 800bca6:	4413      	add	r3, r2
 800bca8:	3374      	adds	r3, #116	@ 0x74
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f007 fa91 	bl	80131d4 <free>
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
 800bcb2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bcb6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bcc6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bcd0:	fb01 f303 	mul.w	r3, r1, r3
 800bcd4:	4413      	add	r3, r2
 800bcd6:	335c      	adds	r3, #92	@ 0x5c
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d016      	beq.n	800bd0c <Navigation_Finish_Review+0x234>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
 800bcde:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bce2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bcec:	4619      	mov	r1, r3
 800bcee:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bcf2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bcfc:	fb01 f303 	mul.w	r3, r1, r3
 800bd00:	4413      	add	r3, r2
 800bd02:	335c      	adds	r3, #92	@ 0x5c
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f007 fa64 	bl	80131d4 <free>
        }
        
        if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
 800bd0c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bd10:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bd20:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bd2a:	fb01 f303 	mul.w	r3, r1, r3
 800bd2e:	4413      	add	r3, r2
 800bd30:	3364      	adds	r3, #100	@ 0x64
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d016      	beq.n	800bd66 <Navigation_Finish_Review+0x28e>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
 800bd38:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bd3c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bd46:	4619      	mov	r1, r3
 800bd48:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bd4c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bd56:	fb01 f303 	mul.w	r3, r1, r3
 800bd5a:	4413      	add	r3, r2
 800bd5c:	3364      	adds	r3, #100	@ 0x64
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f007 fa37 	bl	80131d4 <free>
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
 800bd66:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bd6a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bd74:	4619      	mov	r1, r3
 800bd76:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bd7a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bd84:	fb01 f303 	mul.w	r3, r1, r3
 800bd88:	4413      	add	r3, r2
 800bd8a:	3368      	adds	r3, #104	@ 0x68
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d016      	beq.n	800bdc0 <Navigation_Finish_Review+0x2e8>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
 800bd92:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bd96:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bda0:	4619      	mov	r1, r3
 800bda2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bda6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bdb0:	fb01 f303 	mul.w	r3, r1, r3
 800bdb4:	4413      	add	r3, r2
 800bdb6:	3368      	adds	r3, #104	@ 0x68
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f007 fa0a 	bl	80131d4 <free>
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
 800bdc0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bdc4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bdce:	4619      	mov	r1, r3
 800bdd0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bdd4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bdde:	fb01 f303 	mul.w	r3, r1, r3
 800bde2:	4413      	add	r3, r2
 800bde4:	3370      	adds	r3, #112	@ 0x70
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d016      	beq.n	800be1a <Navigation_Finish_Review+0x342>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
 800bdec:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bdf0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800be00:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800be0a:	fb01 f303 	mul.w	r3, r1, r3
 800be0e:	4413      	add	r3, r2
 800be10:	3370      	adds	r3, #112	@ 0x70
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4618      	mov	r0, r3
 800be16:	f007 f9dd 	bl	80131d4 <free>
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
 800be1a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800be1e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800be28:	4619      	mov	r1, r3
 800be2a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800be2e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800be38:	fb01 f303 	mul.w	r3, r1, r3
 800be3c:	4413      	add	r3, r2
 800be3e:	3360      	adds	r3, #96	@ 0x60
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d016      	beq.n	800be74 <Navigation_Finish_Review+0x39c>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800be46:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800be4a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800be54:	4619      	mov	r1, r3
 800be56:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800be5a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800be64:	fb01 f303 	mul.w	r3, r1, r3
 800be68:	4413      	add	r3, r2
 800be6a:	3360      	adds	r3, #96	@ 0x60
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4618      	mov	r0, r3
 800be70:	f007 f9b0 	bl	80131d4 <free>
        }

        /* check error */
        managerTX_CAN_t *check_TX_CAN = malloc(sizeof(managerTX_CAN_t));
 800be74:	2008      	movs	r0, #8
 800be76:	f007 f9a5 	bl	80131c4 <malloc>
 800be7a:	4603      	mov	r3, r0
 800be7c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
        check_TX_CAN->ID = CAN_iso[screen_obj->curr_device].send_arbitration_id;
 800be80:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800be84:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800be8e:	461a      	mov	r2, r3
 800be90:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800be94:	4930      	ldr	r1, [pc, #192]	@ (800bf58 <Navigation_Finish_Review+0x480>)
 800be96:	0192      	lsls	r2, r2, #6
 800be98:	440a      	add	r2, r1
 800be9a:	6812      	ldr	r2, [r2, #0]
 800be9c:	601a      	str	r2, [r3, #0]
        check_TX_CAN->TX_Done = false;
 800be9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800bea2:	2200      	movs	r2, #0
 800bea4:	711a      	strb	r2, [r3, #4]
        OS_task_post_event(AO_task_can_bus,START_TIMEOUT_TX,(uint8_t *)&check_TX_CAN,sizeof(managerTX_CAN_t));
 800bea6:	4b2d      	ldr	r3, [pc, #180]	@ (800bf5c <Navigation_Finish_Review+0x484>)
 800bea8:	6818      	ldr	r0, [r3, #0]
 800beaa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800beae:	2308      	movs	r3, #8
 800beb0:	2102      	movs	r1, #2
 800beb2:	f006 ff55 	bl	8012d60 <OS_task_post_event>

        /* send data to tester */
        uint8_t can_send_buf[500];
        can_send_buf[0] = screen_obj->Program_Testx[index_program].num_pin;
 800beb6:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800beba:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bebe:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bec2:	6819      	ldr	r1, [r3, #0]
 800bec4:	4613      	mov	r3, r2
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	4413      	add	r3, r2
 800beca:	011b      	lsls	r3, r3, #4
 800becc:	440b      	add	r3, r1
 800bece:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800bed2:	781a      	ldrb	r2, [r3, #0]
 800bed4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bed8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800bedc:	701a      	strb	r2, [r3, #0]
        can_send_buf[1] = '\0';
 800bede:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bee2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800bee6:	2200      	movs	r2, #0
 800bee8:	705a      	strb	r2, [r3, #1]
        can_send_buf[2] = screen_obj->Program_Testx[index_program].num_case;
 800beea:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800beee:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bef2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bef6:	6819      	ldr	r1, [r3, #0]
 800bef8:	4613      	mov	r3, r2
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	4413      	add	r3, r2
 800befe:	011b      	lsls	r3, r3, #4
 800bf00:	440b      	add	r3, r1
 800bf02:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800bf06:	781a      	ldrb	r2, [r3, #0]
 800bf08:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bf0c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800bf10:	709a      	strb	r2, [r3, #2]
        can_send_buf[3] = '\0';
 800bf12:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bf16:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	70da      	strb	r2, [r3, #3]
        memcpy(&can_send_buf[4],screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
 800bf1e:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800bf22:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bf26:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bf2a:	6819      	ldr	r1, [r3, #0]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	005b      	lsls	r3, r3, #1
 800bf30:	4413      	add	r3, r2
 800bf32:	011b      	lsls	r3, r3, #4
 800bf34:	440b      	add	r3, r1
 800bf36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bf3a:	6818      	ldr	r0, [r3, #0]
 800bf3c:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800bf40:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bf44:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bf48:	6819      	ldr	r1, [r3, #0]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	005b      	lsls	r3, r3, #1
 800bf4e:	4413      	add	r3, r2
 800bf50:	011b      	lsls	r3, r3, #4
 800bf52:	e005      	b.n	800bf60 <Navigation_Finish_Review+0x488>
 800bf54:	08018404 	.word	0x08018404
 800bf58:	20000414 	.word	0x20000414
 800bf5c:	08018cb4 	.word	0x08018cb4
 800bf60:	440b      	add	r3, r1
 800bf62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	f107 030c 	add.w	r3, r7, #12
 800bf6e:	3304      	adds	r3, #4
 800bf70:	4601      	mov	r1, r0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f009 fad7 	bl	8015526 <memcpy>
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len + 4);
 800bf78:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bf7c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800bf86:	019b      	lsls	r3, r3, #6
 800bf88:	4a12      	ldr	r2, [pc, #72]	@ (800bfd4 <Navigation_Finish_Review+0x4fc>)
 800bf8a:	1898      	adds	r0, r3, r2
 800bf8c:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800bf90:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bf94:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bf98:	6819      	ldr	r1, [r3, #0]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	005b      	lsls	r3, r3, #1
 800bf9e:	4413      	add	r3, r2
 800bfa0:	011b      	lsls	r3, r3, #4
 800bfa2:	440b      	add	r3, r1
 800bfa4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bfa8:	881b      	ldrh	r3, [r3, #0]
 800bfaa:	3304      	adds	r3, #4
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	f107 030c 	add.w	r3, r7, #12
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	f006 fb6e 	bl	8012694 <isotp_send>
    } else { /* testing enough number */ 
        off_testing(screen_obj);

    }   
}
 800bfb8:	e006      	b.n	800bfc8 <Navigation_Finish_Review+0x4f0>
        off_testing(screen_obj);
 800bfba:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800bfbe:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800bfc2:	6818      	ldr	r0, [r3, #0]
 800bfc4:	f002 ffe4 	bl	800ef90 <off_testing>
}
 800bfc8:	bf00      	nop
 800bfca:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20000414 	.word	0x20000414

0800bfd8 <Navigation_Information>:

void Navigation_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_INFORMATION);
 800bfe2:	216f      	movs	r1, #111	@ 0x6f
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f005 fc6e 	bl	80118c6 <DWIN_SetPage>
}
 800bfea:	bf00      	nop
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <Navigation_Logging>:

void Navigation_Logging(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b082      	sub	sp, #8
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	6039      	str	r1, [r7, #0]
    /* show data */
    
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_LOGGING);
 800bffc:	2170      	movs	r1, #112	@ 0x70
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f005 fc61 	bl	80118c6 <DWIN_SetPage>
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <ON_OFF_Button>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c00c:	b5b0      	push	{r4, r5, r7, lr}
 800c00e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800c012:	af02      	add	r7, sp, #8
 800c014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c018:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c01c:	6018      	str	r0, [r3, #0]
 800c01e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c022:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800c026:	6019      	str	r1, [r3, #0]
    // do sth
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state == false) { // dang off -> bat dau 
 800c028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c02c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c036:	4619      	mov	r1, r3
 800c038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c03c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c046:	fb01 f303 	mul.w	r3, r1, r3
 800c04a:	4413      	add	r3, r2
 800c04c:	334c      	adds	r3, #76	@ 0x4c
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	f083 0301 	eor.w	r3, r3, #1
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	f000 811f 	beq.w	800c29a <ON_OFF_Button+0x28e>
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
 800c05c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c060:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c06a:	4619      	mov	r1, r3
 800c06c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c070:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c07a:	fb01 f303 	mul.w	r3, r1, r3
 800c07e:	4413      	add	r3, r2
 800c080:	334a      	adds	r3, #74	@ 0x4a
 800c082:	2200      	movs	r2, #0
 800c084:	701a      	strb	r2, [r3, #0]
        screen_obj->IC_Testerx[screen_obj->curr_device].state = true;
 800c086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c08a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c094:	4619      	mov	r1, r3
 800c096:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c09a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c0a4:	fb01 f303 	mul.w	r3, r1, r3
 800c0a8:	4413      	add	r3, r2
 800c0aa:	334c      	adds	r3, #76	@ 0x4c
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	701a      	strb	r2, [r3, #0]
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800c0b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c0b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c0be:	4619      	mov	r1, r3
 800c0c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c0c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c0ce:	fb01 f303 	mul.w	r3, r1, r3
 800c0d2:	4413      	add	r3, r2
 800c0d4:	334c      	adds	r3, #76	@ 0x4c
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c0de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c0e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c0e6:	6818      	ldr	r0, [r3, #0]
 800c0e8:	f005 fc96 	bl	8011a18 <DWIN_SetVariable_Icon>
    
        /* Send data to esp32 status device */
        uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800c0ec:	2008      	movs	r0, #8
 800c0ee:	f007 f869 	bl	80131c4 <malloc>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
        data_send_esp32->data = (char *)malloc(50);
 800c0f8:	f8d7 4200 	ldr.w	r4, [r7, #512]	@ 0x200
 800c0fc:	2032      	movs	r0, #50	@ 0x32
 800c0fe:	f007 f861 	bl	80131c4 <malloc>
 800c102:	4603      	mov	r3, r0
 800c104:	6023      	str	r3, [r4, #0]
        if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800c106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c10a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c114:	4619      	mov	r1, r3
 800c116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c11a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c124:	fb01 f303 	mul.w	r3, r1, r3
 800c128:	4413      	add	r3, r2
 800c12a:	334c      	adds	r3, #76	@ 0x4c
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d055      	beq.n	800c1de <ON_OFF_Button+0x1d2>
            sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800c132:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800c136:	6818      	ldr	r0, [r3, #0]
 800c138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c13c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c146:	1c59      	adds	r1, r3, #1
 800c148:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c14c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c156:	461c      	mov	r4, r3
 800c158:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c15c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c166:	fb04 f303 	mul.w	r3, r4, r3
 800c16a:	4413      	add	r3, r2
 800c16c:	334b      	adds	r3, #75	@ 0x4b
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	461c      	mov	r4, r3
 800c172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c176:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	4623      	mov	r3, r4
 800c17e:	005b      	lsls	r3, r3, #1
 800c180:	4423      	add	r3, r4
 800c182:	011b      	lsls	r3, r3, #4
 800c184:	4413      	add	r3, r2
 800c186:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800c18a:	681c      	ldr	r4, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800c18c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c190:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c19a:	461d      	mov	r5, r3
 800c19c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c1a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c1aa:	fb05 f303 	mul.w	r3, r5, r3
 800c1ae:	4413      	add	r3, r2
 800c1b0:	334b      	adds	r3, #75	@ 0x4b
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	461d      	mov	r5, r3
            sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800c1b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c1ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	462b      	mov	r3, r5
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	442b      	add	r3, r5
 800c1c6:	011b      	lsls	r3, r3, #4
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	4623      	mov	r3, r4
 800c1d4:	460a      	mov	r2, r1
 800c1d6:	49a4      	ldr	r1, [pc, #656]	@ (800c468 <ON_OFF_Button+0x45c>)
 800c1d8:	f008 ff24 	bl	8015024 <siprintf>
 800c1dc:	e04a      	b.n	800c274 <ON_OFF_Button+0x268>
        } else {
            sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800c1de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800c1e2:	6818      	ldr	r0, [r3, #0]
 800c1e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c1e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c1f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c202:	fb01 f303 	mul.w	r3, r1, r3
 800c206:	4413      	add	r3, r2
 800c208:	334b      	adds	r3, #75	@ 0x4b
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	4619      	mov	r1, r3
 800c20e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c212:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	460b      	mov	r3, r1
 800c21a:	005b      	lsls	r3, r3, #1
 800c21c:	440b      	add	r3, r1
 800c21e:	011b      	lsls	r3, r3, #4
 800c220:	4413      	add	r3, r2
 800c222:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800c226:	6819      	ldr	r1, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800c228:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c22c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c236:	461c      	mov	r4, r3
 800c238:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c23c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c246:	fb04 f303 	mul.w	r3, r4, r3
 800c24a:	4413      	add	r3, r2
 800c24c:	334b      	adds	r3, #75	@ 0x4b
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	461c      	mov	r4, r3
            sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800c252:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c256:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	4623      	mov	r3, r4
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	4423      	add	r3, r4
 800c262:	011b      	lsls	r3, r3, #4
 800c264:	4413      	add	r3, r2
 800c266:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	460a      	mov	r2, r1
 800c26e:	497f      	ldr	r1, [pc, #508]	@ (800c46c <ON_OFF_Button+0x460>)
 800c270:	f008 fed8 	bl	8015024 <siprintf>
        }
        data_send_esp32->len = strlen(data_send_esp32->data);
 800c274:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f8d7 4200 	ldr.w	r4, [r7, #512]	@ 0x200
 800c27e:	4618      	mov	r0, r3
 800c280:	f7f3 ff70 	bl	8000164 <strlen>
 800c284:	4603      	mov	r3, r0
 800c286:	6063      	str	r3, [r4, #4]
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800c288:	4b79      	ldr	r3, [pc, #484]	@ (800c470 <ON_OFF_Button+0x464>)
 800c28a:	6818      	ldr	r0, [r3, #0]
 800c28c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800c290:	2308      	movs	r3, #8
 800c292:	2100      	movs	r1, #0
 800c294:	f006 fd64 	bl	8012d60 <OS_task_post_event>
 800c298:	e01b      	b.n	800c2d2 <ON_OFF_Button+0x2c6>
    } else { // dang on -> off
        /* luu vao sd, gui cho esp32 len app */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 800c29a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c29e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c2ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c2b8:	fb01 f303 	mul.w	r3, r1, r3
 800c2bc:	4413      	add	r3, r2
 800c2be:	3349      	adds	r3, #73	@ 0x49
 800c2c0:	2265      	movs	r2, #101	@ 0x65
 800c2c2:	701a      	strb	r2, [r3, #0]
        off_testing(screen_obj);
 800c2c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c2c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c2cc:	6818      	ldr	r0, [r3, #0]
 800c2ce:	f002 fe5f 	bl	800ef90 <off_testing>
    }
    
    /* Send data test */
    // screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800c2d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c2d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c2e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c2f0:	fb01 f303 	mul.w	r3, r1, r3
 800c2f4:	4413      	add	r3, r2
 800c2f6:	334c      	adds	r3, #76	@ 0x4c
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	f000 80ae 	beq.w	800c45c <ON_OFF_Button+0x450>
        uint8_t can_send_buf[500];
        uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800c300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c304:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c30e:	4619      	mov	r1, r3
 800c310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c314:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c31e:	fb01 f303 	mul.w	r3, r1, r3
 800c322:	4413      	add	r3, r2
 800c324:	334b      	adds	r3, #75	@ 0x4b
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        // uint8_t num_test_ic = screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
        // memcpy(can_send_buf,&num_test_ic,1);
        can_send_buf[0] = screen_obj->Program_Testx[index_program].num_pin;
 800c32c:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800c330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c334:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c338:	6819      	ldr	r1, [r3, #0]
 800c33a:	4613      	mov	r3, r2
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	4413      	add	r3, r2
 800c340:	011b      	lsls	r3, r3, #4
 800c342:	440b      	add	r3, r1
 800c344:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800c348:	781a      	ldrb	r2, [r3, #0]
 800c34a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c34e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c352:	701a      	strb	r2, [r3, #0]
        can_send_buf[1] = '\0';
 800c354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c358:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c35c:	2200      	movs	r2, #0
 800c35e:	705a      	strb	r2, [r3, #1]
        can_send_buf[2] = screen_obj->Program_Testx[index_program].num_case;
 800c360:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800c364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c368:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c36c:	6819      	ldr	r1, [r3, #0]
 800c36e:	4613      	mov	r3, r2
 800c370:	005b      	lsls	r3, r3, #1
 800c372:	4413      	add	r3, r2
 800c374:	011b      	lsls	r3, r3, #4
 800c376:	440b      	add	r3, r1
 800c378:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800c37c:	781a      	ldrb	r2, [r3, #0]
 800c37e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c382:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c386:	709a      	strb	r2, [r3, #2]
        can_send_buf[3] = '\0';
 800c388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c38c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c390:	2200      	movs	r2, #0
 800c392:	70da      	strb	r2, [r3, #3]
        memcpy(&can_send_buf[4],screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
 800c394:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800c398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c39c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c3a0:	6819      	ldr	r1, [r3, #0]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	005b      	lsls	r3, r3, #1
 800c3a6:	4413      	add	r3, r2
 800c3a8:	011b      	lsls	r3, r3, #4
 800c3aa:	440b      	add	r3, r1
 800c3ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c3b0:	6818      	ldr	r0, [r3, #0]
 800c3b2:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800c3b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c3ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c3be:	6819      	ldr	r1, [r3, #0]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	4413      	add	r3, r2
 800c3c6:	011b      	lsls	r3, r3, #4
 800c3c8:	440b      	add	r3, r1
 800c3ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	f107 0308 	add.w	r3, r7, #8
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	4601      	mov	r1, r0
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f009 f8a3 	bl	8015526 <memcpy>
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len + 4);
 800c3e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c3e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c3ee:	019b      	lsls	r3, r3, #6
 800c3f0:	4a20      	ldr	r2, [pc, #128]	@ (800c474 <ON_OFF_Button+0x468>)
 800c3f2:	1898      	adds	r0, r3, r2
 800c3f4:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800c3f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c3fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c400:	6819      	ldr	r1, [r3, #0]
 800c402:	4613      	mov	r3, r2
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	4413      	add	r3, r2
 800c408:	011b      	lsls	r3, r3, #4
 800c40a:	440b      	add	r3, r1
 800c40c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	3304      	adds	r3, #4
 800c414:	b29a      	uxth	r2, r3
 800c416:	f107 0308 	add.w	r3, r7, #8
 800c41a:	4619      	mov	r1, r3
 800c41c:	f006 f93a 	bl	8012694 <isotp_send>

        /* check error */
        managerTX_CAN_t *check_TX_CAN = malloc(sizeof(managerTX_CAN_t));
 800c420:	2008      	movs	r0, #8
 800c422:	f006 fecf 	bl	80131c4 <malloc>
 800c426:	4603      	mov	r3, r0
 800c428:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
        check_TX_CAN->ID = (uint32_t)(0x471 + screen_obj->curr_device);
 800c42c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800c430:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800c43a:	f203 4271 	addw	r2, r3, #1137	@ 0x471
 800c43e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800c442:	601a      	str	r2, [r3, #0]
        check_TX_CAN->TX_Done = false;
 800c444:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800c448:	2200      	movs	r2, #0
 800c44a:	711a      	strb	r2, [r3, #4]
        OS_task_post_event(AO_task_can_bus,START_TIMEOUT_TX,(uint8_t *)&check_TX_CAN,sizeof(managerTX_CAN_t));
 800c44c:	4b0a      	ldr	r3, [pc, #40]	@ (800c478 <ON_OFF_Button+0x46c>)
 800c44e:	6818      	ldr	r0, [r3, #0]
 800c450:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 800c454:	2308      	movs	r3, #8
 800c456:	2102      	movs	r1, #2
 800c458:	f006 fc82 	bl	8012d60 <OS_task_post_event>
    }
    
}
 800c45c:	bf00      	nop
 800c45e:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800c462:	46bd      	mov	sp, r7
 800c464:	bdb0      	pop	{r4, r5, r7, pc}
 800c466:	bf00      	nop
 800c468:	0801840c 	.word	0x0801840c
 800c46c:	08018420 	.word	0x08018420
 800c470:	080192f4 	.word	0x080192f4
 800c474:	20000414 	.word	0x20000414
 800c478:	08018cb4 	.word	0x08018cb4

0800c47c <select_running_program>:

void select_running_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
    uint8_t programID = screen_event->data; // Get new index program
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	789b      	ldrb	r3, [r3, #2]
 800c48a:	73fb      	strb	r3, [r7, #15]

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f001 fd3f 	bl	800df14 <Screen_ShowData_Mainpage>
}
 800c496:	bf00      	nop
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
	...

0800c4a0 <select_modify_program>:

void select_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c4a0:	b5b0      	push	{r4, r5, r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
    // Get the index modify program 
    uint8_t index_program = screen_event->data;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	789b      	ldrb	r3, [r3, #2]
 800c4ae:	75fb      	strb	r3, [r7, #23]
    screen_obj->modify_program_index = index_program;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	7dfa      	ldrb	r2, [r7, #23]
 800c4b4:	f883 24da 	strb.w	r2, [r3, #1242]	@ 0x4da
    
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800c4b8:	7dfa      	ldrb	r2, [r7, #23]
 800c4ba:	6879      	ldr	r1, [r7, #4]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	4413      	add	r3, r2
 800c4c2:	011b      	lsls	r3, r3, #4
 800c4c4:	440b      	add	r3, r1
 800c4c6:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7f3 fe49 	bl	8000164 <strlen>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	3309      	adds	r3, #9
 800c4d8:	75bb      	strb	r3, [r7, #22]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 800c4da:	7dfa      	ldrb	r2, [r7, #23]
 800c4dc:	6879      	ldr	r1, [r7, #4]
 800c4de:	4613      	mov	r3, r2
 800c4e0:	005b      	lsls	r3, r3, #1
 800c4e2:	4413      	add	r3, r2
 800c4e4:	011b      	lsls	r3, r3, #4
 800c4e6:	440b      	add	r3, r1
 800c4e8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7f3 fe38 	bl	8000164 <strlen>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	330f      	adds	r3, #15
 800c4fa:	757b      	strb	r3, [r7, #21]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800c4fc:	7dbb      	ldrb	r3, [r7, #22]
 800c4fe:	3301      	adds	r3, #1
 800c500:	4618      	mov	r0, r3
 800c502:	f006 fe5f 	bl	80131c4 <malloc>
 800c506:	4603      	mov	r3, r0
 800c508:	613b      	str	r3, [r7, #16]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 800c50a:	7d7b      	ldrb	r3, [r7, #21]
 800c50c:	3301      	adds	r3, #1
 800c50e:	4618      	mov	r0, r3
 800c510:	f006 fe58 	bl	80131c4 <malloc>
 800c514:	4603      	mov	r3, r0
 800c516:	60fb      	str	r3, [r7, #12]

    strcpy(Text_Name_IC,"IC Name: ");
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	4925      	ldr	r1, [pc, #148]	@ (800c5b0 <select_modify_program+0x110>)
 800c51c:	461a      	mov	r2, r3
 800c51e:	460b      	mov	r3, r1
 800c520:	cb03      	ldmia	r3!, {r0, r1}
 800c522:	6010      	str	r0, [r2, #0]
 800c524:	6051      	str	r1, [r2, #4]
 800c526:	881b      	ldrh	r3, [r3, #0]
 800c528:	8113      	strh	r3, [r2, #8]
    strncat(Text_Name_IC,screen_obj->Program_Testx[index_program].Name_IC,size_Name_IC - strlen("IC Name: "));
 800c52a:	7dfa      	ldrb	r2, [r7, #23]
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	4613      	mov	r3, r2
 800c530:	005b      	lsls	r3, r3, #1
 800c532:	4413      	add	r3, r2
 800c534:	011b      	lsls	r3, r3, #4
 800c536:	440b      	add	r3, r1
 800c538:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800c53c:	6819      	ldr	r1, [r3, #0]
 800c53e:	7dbb      	ldrb	r3, [r7, #22]
 800c540:	3b09      	subs	r3, #9
 800c542:	461a      	mov	r2, r3
 800c544:	6938      	ldr	r0, [r7, #16]
 800c546:	f008 febc 	bl	80152c2 <strncat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	4a19      	ldr	r2, [pc, #100]	@ (800c5b4 <select_modify_program+0x114>)
 800c54e:	461c      	mov	r4, r3
 800c550:	4615      	mov	r5, r2
 800c552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c554:	6020      	str	r0, [r4, #0]
 800c556:	6061      	str	r1, [r4, #4]
 800c558:	60a2      	str	r2, [r4, #8]
 800c55a:	60e3      	str	r3, [r4, #12]
    strncat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC,size_Num_IC - strlen("Number of ICs: "));
 800c55c:	7dfa      	ldrb	r2, [r7, #23]
 800c55e:	6879      	ldr	r1, [r7, #4]
 800c560:	4613      	mov	r3, r2
 800c562:	005b      	lsls	r3, r3, #1
 800c564:	4413      	add	r3, r2
 800c566:	011b      	lsls	r3, r3, #4
 800c568:	440b      	add	r3, r1
 800c56a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800c56e:	6819      	ldr	r1, [r3, #0]
 800c570:	7d7b      	ldrb	r3, [r7, #21]
 800c572:	3b0f      	subs	r3, #15
 800c574:	461a      	mov	r2, r3
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f008 fea3 	bl	80152c2 <strncat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800c57c:	7dbb      	ldrb	r3, [r7, #22]
 800c57e:	b29b      	uxth	r3, r3
 800c580:	693a      	ldr	r2, [r7, #16]
 800c582:	f249 5120 	movw	r1, #38176	@ 0x9520
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f005 f9c4 	bl	8011914 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 800c58c:	7d7b      	ldrb	r3, [r7, #21]
 800c58e:	b29b      	uxth	r3, r3
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	f249 5140 	movw	r1, #38208	@ 0x9540
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f005 f9bc 	bl	8011914 <DWIN_SetText>

    free(Text_Name_IC);
 800c59c:	6938      	ldr	r0, [r7, #16]
 800c59e:	f006 fe19 	bl	80131d4 <free>
    free(Text_Num_IC);
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f006 fe16 	bl	80131d4 <free>
}
 800c5a8:	bf00      	nop
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bdb0      	pop	{r4, r5, r7, pc}
 800c5b0:	0801842c 	.word	0x0801842c
 800c5b4:	08018438 	.word	0x08018438

0800c5b8 <Navigation_num_keyboard>:

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	889a      	ldrh	r2, [r3, #4]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	330e      	adds	r3, #14
 800c5d6:	2232      	movs	r2, #50	@ 0x32
 800c5d8:	2100      	movs	r1, #0
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f008 fe5a 	bl	8015294 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f103 020e 	add.w	r2, r3, #14
 800c5e6:	2332      	movs	r3, #50	@ 0x32
 800c5e8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f005 f991 	bl	8011914 <DWIN_SetText>
    // DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard)

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
 800c5f2:	216d      	movs	r1, #109	@ 0x6d
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f005 f966 	bl	80118c6 <DWIN_SetPage>
}
 800c5fa:	bf00      	nop
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <Navigation_full_keyboard>:

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c602:	b580      	push	{r7, lr}
 800c604:	b082      	sub	sp, #8
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	889a      	ldrh	r2, [r3, #4]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	330e      	adds	r3, #14
 800c620:	2232      	movs	r2, #50	@ 0x32
 800c622:	2100      	movs	r1, #0
 800c624:	4618      	mov	r0, r3
 800c626:	f008 fe35 	bl	8015294 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f103 020e 	add.w	r2, r3, #14
 800c630:	2332      	movs	r3, #50	@ 0x32
 800c632:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f005 f96c 	bl	8011914 <DWIN_SetText>

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
 800c63c:	2178      	movs	r1, #120	@ 0x78
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f005 f941 	bl	80118c6 <DWIN_SetPage>
}
 800c644:	bf00      	nop
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <Save_Information>:

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c64e:	b0c7      	sub	sp, #284	@ 0x11c
 800c650:	af02      	add	r7, sp, #8
 800c652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c656:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c65a:	6018      	str	r0, [r3, #0]
 800c65c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c660:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c664:	6019      	str	r1, [r3, #0]
    /* update value */
    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp != NULL) {
 800c666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c66a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c674:	4619      	mov	r1, r3
 800c676:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c67a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	460b      	mov	r3, r1
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	440b      	add	r3, r1
 800c686:	011b      	lsls	r3, r3, #4
 800c688:	4413      	add	r3, r2
 800c68a:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 80c3 	beq.w	800c81c <Save_Information+0x1d0>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program != NULL) {
 800c696:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c69a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c6aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	440b      	add	r3, r1
 800c6b6:	011b      	lsls	r3, r3, #4
 800c6b8:	4413      	add	r3, r2
 800c6ba:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d017      	beq.n	800c6f4 <Save_Information+0xa8>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program);
 800c6c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c6c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c6d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	460b      	mov	r3, r1
 800c6e0:	005b      	lsls	r3, r3, #1
 800c6e2:	440b      	add	r3, r1
 800c6e4:	011b      	lsls	r3, r3, #4
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f006 fd70 	bl	80131d4 <free>
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp));
 800c6f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c6f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c702:	4619      	mov	r1, r3
 800c704:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c708:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	460b      	mov	r3, r1
 800c710:	005b      	lsls	r3, r3, #1
 800c712:	440b      	add	r3, r1
 800c714:	011b      	lsls	r3, r3, #4
 800c716:	4413      	add	r3, r2
 800c718:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f3 fd20 	bl	8000164 <strlen>
 800c724:	4602      	mov	r2, r0
 800c726:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c72a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c734:	461c      	mov	r4, r3
 800c736:	4610      	mov	r0, r2
 800c738:	f006 fd44 	bl	80131c4 <malloc>
 800c73c:	4603      	mov	r3, r0
 800c73e:	4619      	mov	r1, r3
 800c740:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c744:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	4623      	mov	r3, r4
 800c74c:	005b      	lsls	r3, r3, #1
 800c74e:	4423      	add	r3, r4
 800c750:	011b      	lsls	r3, r3, #4
 800c752:	4413      	add	r3, r2
 800c754:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800c758:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800c75a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c75e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c768:	4619      	mov	r1, r3
 800c76a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c76e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	460b      	mov	r3, r1
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	440b      	add	r3, r1
 800c77a:	011b      	lsls	r3, r3, #4
 800c77c:	4413      	add	r3, r2
 800c77e:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800c782:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp
 800c784:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c788:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c792:	4619      	mov	r1, r3
 800c794:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c798:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	460b      	mov	r3, r1
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	440b      	add	r3, r1
 800c7a4:	011b      	lsls	r3, r3, #4
 800c7a6:	4413      	add	r3, r2
 800c7a8:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800c7ac:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp)+1);
 800c7ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c7b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c7bc:	4619      	mov	r1, r3
 800c7be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c7c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	005b      	lsls	r3, r3, #1
 800c7cc:	440b      	add	r3, r1
 800c7ce:	011b      	lsls	r3, r3, #4
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7f3 fcc3 	bl	8000164 <strlen>
 800c7de:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f008 fe9d 	bl	8015526 <memcpy>
        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp);
 800c7ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c7f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c800:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	460b      	mov	r3, r1
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	440b      	add	r3, r1
 800c80c:	011b      	lsls	r3, r3, #4
 800c80e:	4413      	add	r3, r2
 800c810:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4618      	mov	r0, r3
 800c818:	f006 fcdc 	bl	80131d4 <free>
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp != NULL) {
 800c81c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c820:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c82a:	4619      	mov	r1, r3
 800c82c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c830:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	460b      	mov	r3, r1
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	440b      	add	r3, r1
 800c83c:	011b      	lsls	r3, r3, #4
 800c83e:	4413      	add	r3, r2
 800c840:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	f000 80ef 	beq.w	800ca2a <Save_Information+0x3de>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC != NULL) {
 800c84c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c850:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c85a:	4619      	mov	r1, r3
 800c85c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c860:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	460b      	mov	r3, r1
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	440b      	add	r3, r1
 800c86c:	011b      	lsls	r3, r3, #4
 800c86e:	4413      	add	r3, r2
 800c870:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d02d      	beq.n	800c8d6 <Save_Information+0x28a>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 800c87a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c87e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c888:	4619      	mov	r1, r3
 800c88a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c88e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	460b      	mov	r3, r1
 800c896:	005b      	lsls	r3, r3, #1
 800c898:	440b      	add	r3, r1
 800c89a:	011b      	lsls	r3, r3, #4
 800c89c:	4413      	add	r3, r2
 800c89e:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f006 fc95 	bl	80131d4 <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = NULL;
 800c8aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c8ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c8be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	440b      	add	r3, r1
 800c8ca:	011b      	lsls	r3, r3, #4
 800c8cc:	4413      	add	r3, r2
 800c8ce:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	601a      	str	r2, [r3, #0]
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp));
 800c8d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c8da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c8ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	440b      	add	r3, r1
 800c8f6:	011b      	lsls	r3, r3, #4
 800c8f8:	4413      	add	r3, r2
 800c8fa:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4618      	mov	r0, r3
 800c902:	f7f3 fc2f 	bl	8000164 <strlen>
 800c906:	4602      	mov	r2, r0
 800c908:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c90c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c916:	461c      	mov	r4, r3
 800c918:	4610      	mov	r0, r2
 800c91a:	f006 fc53 	bl	80131c4 <malloc>
 800c91e:	4603      	mov	r3, r0
 800c920:	4619      	mov	r1, r3
 800c922:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c926:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	4623      	mov	r3, r4
 800c92e:	005b      	lsls	r3, r3, #1
 800c930:	4423      	add	r3, r4
 800c932:	011b      	lsls	r3, r3, #4
 800c934:	4413      	add	r3, r2
 800c936:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800c93a:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 800c93c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c940:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c94a:	4619      	mov	r1, r3
 800c94c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c950:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	460b      	mov	r3, r1
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	440b      	add	r3, r1
 800c95c:	011b      	lsls	r3, r3, #4
 800c95e:	4413      	add	r3, r2
 800c960:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800c964:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp
 800c966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c96a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c974:	4619      	mov	r1, r3
 800c976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c97a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	460b      	mov	r3, r1
 800c982:	005b      	lsls	r3, r3, #1
 800c984:	440b      	add	r3, r1
 800c986:	011b      	lsls	r3, r3, #4
 800c988:	4413      	add	r3, r2
 800c98a:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800c98e:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp)+1);
 800c990:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c994:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c99e:	4619      	mov	r1, r3
 800c9a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c9a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	440b      	add	r3, r1
 800c9b0:	011b      	lsls	r3, r3, #4
 800c9b2:	4413      	add	r3, r2
 800c9b4:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7f3 fbd2 	bl	8000164 <strlen>
 800c9c0:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f008 fdac 	bl	8015526 <memcpy>

        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp);
 800c9ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c9d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800c9dc:	4619      	mov	r1, r3
 800c9de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c9e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	005b      	lsls	r3, r3, #1
 800c9ec:	440b      	add	r3, r1
 800c9ee:	011b      	lsls	r3, r3, #4
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f006 fbeb 	bl	80131d4 <free>
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = NULL;
 800c9fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	005b      	lsls	r3, r3, #1
 800ca1c:	440b      	add	r3, r1
 800ca1e:	011b      	lsls	r3, r3, #4
 800ca20:	4413      	add	r3, r2
 800ca22:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800ca26:	2200      	movs	r2, #0
 800ca28:	601a      	str	r2, [r3, #0]
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp != NULL) {
 800ca2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800ca38:	4619      	mov	r1, r3
 800ca3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	460b      	mov	r3, r1
 800ca46:	005b      	lsls	r3, r3, #1
 800ca48:	440b      	add	r3, r1
 800ca4a:	011b      	lsls	r3, r3, #4
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f000 80ef 	beq.w	800cc38 <Save_Information+0x5ec>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC != NULL) {
 800ca5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800ca68:	4619      	mov	r1, r3
 800ca6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	460b      	mov	r3, r1
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	440b      	add	r3, r1
 800ca7a:	011b      	lsls	r3, r3, #4
 800ca7c:	4413      	add	r3, r2
 800ca7e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d02d      	beq.n	800cae4 <Save_Information+0x498>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800ca88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800ca96:	4619      	mov	r1, r3
 800ca98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	460b      	mov	r3, r1
 800caa4:	005b      	lsls	r3, r3, #1
 800caa6:	440b      	add	r3, r1
 800caa8:	011b      	lsls	r3, r3, #4
 800caaa:	4413      	add	r3, r2
 800caac:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f006 fb8e 	bl	80131d4 <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = NULL;
 800cab8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cabc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cac6:	4619      	mov	r1, r3
 800cac8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cacc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	460b      	mov	r3, r1
 800cad4:	005b      	lsls	r3, r3, #1
 800cad6:	440b      	add	r3, r1
 800cad8:	011b      	lsls	r3, r3, #4
 800cada:	4413      	add	r3, r2
 800cadc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cae0:	2200      	movs	r2, #0
 800cae2:	601a      	str	r2, [r3, #0]
        } 
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp));
 800cae4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cae8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800caf2:	4619      	mov	r1, r3
 800caf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800caf8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	460b      	mov	r3, r1
 800cb00:	005b      	lsls	r3, r3, #1
 800cb02:	440b      	add	r3, r1
 800cb04:	011b      	lsls	r3, r3, #4
 800cb06:	4413      	add	r3, r2
 800cb08:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7f3 fb28 	bl	8000164 <strlen>
 800cb14:	4602      	mov	r2, r0
 800cb16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cb24:	461c      	mov	r4, r3
 800cb26:	4610      	mov	r0, r2
 800cb28:	f006 fb4c 	bl	80131c4 <malloc>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	4619      	mov	r1, r3
 800cb30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	4623      	mov	r3, r4
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	4423      	add	r3, r4
 800cb40:	011b      	lsls	r3, r3, #4
 800cb42:	4413      	add	r3, r2
 800cb44:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cb48:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC
 800cb4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cb58:	4619      	mov	r1, r3
 800cb5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	460b      	mov	r3, r1
 800cb66:	005b      	lsls	r3, r3, #1
 800cb68:	440b      	add	r3, r1
 800cb6a:	011b      	lsls	r3, r3, #4
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cb72:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp
 800cb74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cb82:	4619      	mov	r1, r3
 800cb84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb88:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	460b      	mov	r3, r1
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	440b      	add	r3, r1
 800cb94:	011b      	lsls	r3, r3, #4
 800cb96:	4413      	add	r3, r2
 800cb98:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800cb9c:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp)+1);
 800cb9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cba2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cbac:	4619      	mov	r1, r3
 800cbae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cbb2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	460b      	mov	r3, r1
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	440b      	add	r3, r1
 800cbbe:	011b      	lsls	r3, r3, #4
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7f3 facb 	bl	8000164 <strlen>
 800cbce:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	4629      	mov	r1, r5
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f008 fca5 	bl	8015526 <memcpy>

        free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp);
 800cbdc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cbe0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cbea:	4619      	mov	r1, r3
 800cbec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cbf0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	005b      	lsls	r3, r3, #1
 800cbfa:	440b      	add	r3, r1
 800cbfc:	011b      	lsls	r3, r3, #4
 800cbfe:	4413      	add	r3, r2
 800cc00:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f006 fae4 	bl	80131d4 <free>
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = NULL;
 800cc0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	460b      	mov	r3, r1
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	440b      	add	r3, r1
 800cc2c:	011b      	lsls	r3, r3, #4
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]
    }

    /* send to esp32 */
    char buffer_send[200];
    memset(buffer_send,0,200);
 800cc38:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cc3c:	22c8      	movs	r2, #200	@ 0xc8
 800cc3e:	2100      	movs	r1, #0
 800cc40:	4618      	mov	r0, r3
 800cc42:	f008 fb27 	bl	8015294 <memset>
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800cc46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cc54:	1c5c      	adds	r4, r3, #1
 800cc56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cc64:	4619      	mov	r1, r3
 800cc66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	460b      	mov	r3, r1
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	440b      	add	r3, r1
 800cc76:	011b      	lsls	r3, r3, #4
 800cc78:	4413      	add	r3, r2
 800cc7a:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cc7e:	681d      	ldr	r5, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800cc80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cc8e:	4619      	mov	r1, r3
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800cc90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	440b      	add	r3, r1
 800cca0:	011b      	lsls	r3, r3, #4
 800cca2:	4413      	add	r3, r2
 800cca4:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cca8:	681a      	ldr	r2, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800ccaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ccae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800ccb8:	4618      	mov	r0, r3
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800ccba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ccbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ccc2:	6819      	ldr	r1, [r3, #0]
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	4403      	add	r3, r0
 800ccca:	011b      	lsls	r3, r3, #4
 800cccc:	440b      	add	r3, r1
 800ccce:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	9200      	str	r2, [sp, #0]
 800ccdc:	462b      	mov	r3, r5
 800ccde:	4622      	mov	r2, r4
 800cce0:	49db      	ldr	r1, [pc, #876]	@ (800d050 <Save_Information+0xa04>)
 800cce2:	f008 f99f 	bl	8015024 <siprintf>
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800cce6:	2008      	movs	r0, #8
 800cce8:	f006 fa6c 	bl	80131c4 <malloc>
 800ccec:	4603      	mov	r3, r0
 800ccee:	63bb      	str	r3, [r7, #56]	@ 0x38
    data_send_esp32->data = (char *)malloc(strlen(buffer_send));
 800ccf0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7f3 fa35 	bl	8000164 <strlen>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f006 fa60 	bl	80131c4 <malloc>
 800cd04:	4603      	mov	r3, r0
 800cd06:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data,"p",screen_obj->modify_program_index + 1);
 800cd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0a:	6818      	ldr	r0, [r3, #0]
 800cd0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	49cd      	ldr	r1, [pc, #820]	@ (800d054 <Save_Information+0xa08>)
 800cd20:	f008 fc01 	bl	8015526 <memcpy>
    memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send));
 800cd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	1c5c      	adds	r4, r3, #1
 800cd2a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7f3 fa18 	bl	8000164 <strlen>
 800cd34:	4602      	mov	r2, r0
 800cd36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f008 fbf2 	bl	8015526 <memcpy>
    data_send_esp32->len = strlen(buffer_send) + 1;
 800cd42:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7f3 fa0c 	bl	8000164 <strlen>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd50:	3201      	adds	r2, #1
 800cd52:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800cd54:	4bc0      	ldr	r3, [pc, #768]	@ (800d058 <Save_Information+0xa0c>)
 800cd56:	6818      	ldr	r0, [r3, #0]
 800cd58:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800cd5c:	2308      	movs	r3, #8
 800cd5e:	2100      	movs	r1, #0
 800cd60:	f005 fffe 	bl	8012d60 <OS_task_post_event>

    /* store data to eeprom */
    char string_data[TOTAL_ONE_PROGRAM_TEST_LEN] = {0};
 800cd64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	232a      	movs	r3, #42	@ 0x2a
 800cd70:	461a      	mov	r2, r3
 800cd72:	2100      	movs	r1, #0
 800cd74:	f008 fa8e 	bl	8015294 <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 800cd78:	200c      	movs	r0, #12
 800cd7a:	f006 fa23 	bl	80131c4 <malloc>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	461a      	mov	r2, r3
 800cd82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd8a:	601a      	str	r2, [r3, #0]
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800cd8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cda0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	460b      	mov	r3, r1
 800cda8:	005b      	lsls	r3, r3, #1
 800cdaa:	440b      	add	r3, r1
 800cdac:	011b      	lsls	r3, r3, #4
 800cdae:	4413      	add	r3, r2
 800cdb0:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cdb4:	681c      	ldr	r4, [r3, #0]
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 800cdb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cdba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cdc4:	4619      	mov	r1, r3
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800cdc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cdca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	440b      	add	r3, r1
 800cdd6:	011b      	lsls	r3, r3, #4
 800cdd8:	4413      	add	r3, r2
 800cdda:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cdde:	681a      	ldr	r2, [r3, #0]
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800cde0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cde4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cdee:	4618      	mov	r0, r3
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800cdf0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cdf4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cdf8:	6819      	ldr	r1, [r3, #0]
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	4403      	add	r3, r0
 800ce00:	011b      	lsls	r3, r3, #4
 800ce02:	440b      	add	r3, r1
 800ce04:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f107 000c 	add.w	r0, r7, #12
 800ce0e:	9301      	str	r3, [sp, #4]
 800ce10:	9200      	str	r2, [sp, #0]
 800ce12:	4623      	mov	r3, r4
 800ce14:	4a91      	ldr	r2, [pc, #580]	@ (800d05c <Save_Information+0xa10>)
 800ce16:	212a      	movs	r1, #42	@ 0x2a
 800ce18:	f008 f8ce 	bl	8014fb8 <sniprintf>
    data_write->data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 800ce1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce24:	681c      	ldr	r4, [r3, #0]
 800ce26:	202a      	movs	r0, #42	@ 0x2a
 800ce28:	f006 f9cc 	bl	80131c4 <malloc>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 800ce30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce44:	461c      	mov	r4, r3
 800ce46:	4694      	mov	ip, r2
 800ce48:	f104 0e20 	add.w	lr, r4, #32
 800ce4c:	4665      	mov	r5, ip
 800ce4e:	4626      	mov	r6, r4
 800ce50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ce52:	6028      	str	r0, [r5, #0]
 800ce54:	6069      	str	r1, [r5, #4]
 800ce56:	60aa      	str	r2, [r5, #8]
 800ce58:	60eb      	str	r3, [r5, #12]
 800ce5a:	3410      	adds	r4, #16
 800ce5c:	f10c 0c10 	add.w	ip, ip, #16
 800ce60:	4574      	cmp	r4, lr
 800ce62:	d1f3      	bne.n	800ce4c <Save_Information+0x800>
 800ce64:	4662      	mov	r2, ip
 800ce66:	4623      	mov	r3, r4
 800ce68:	cb03      	ldmia	r3!, {r0, r1}
 800ce6a:	6010      	str	r0, [r2, #0]
 800ce6c:	6051      	str	r1, [r2, #4]
 800ce6e:	881b      	ldrh	r3, [r3, #0]
 800ce70:	8113      	strh	r3, [r2, #8]
    data_write->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 800ce72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	222a      	movs	r2, #42	@ 0x2a
 800ce7e:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_PROGRAM_TEST_X(screen_obj->modify_program_index);
 800ce80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800ce8e:	461a      	mov	r2, r3
 800ce90:	0052      	lsls	r2, r2, #1
 800ce92:	4413      	add	r3, r2
 800ce94:	461a      	mov	r2, r3
 800ce96:	00d2      	lsls	r2, r2, #3
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	3243      	adds	r2, #67	@ 0x43
 800ceaa:	b292      	uxth	r2, r2
 800ceac:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 800ceae:	4b6c      	ldr	r3, [pc, #432]	@ (800d060 <Save_Information+0xa14>)
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	f107 0208 	add.w	r2, r7, #8
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	2105      	movs	r1, #5
 800ceba:	f005 ff51 	bl	8012d60 <OS_task_post_event>

    // Show data in screen
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 800cebe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cec2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cecc:	4619      	mov	r1, r3
 800cece:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ced2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	460b      	mov	r3, r1
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	440b      	add	r3, r1
 800cede:	011b      	lsls	r3, r3, #4
 800cee0:	4413      	add	r3, r2
 800cee2:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7f3 f93b 	bl	8000164 <strlen>
 800ceee:	4603      	mov	r3, r0
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	3309      	adds	r3, #9
 800cef4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800cef8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cefc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cf06:	4619      	mov	r1, r3
 800cf08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	460b      	mov	r3, r1
 800cf14:	005b      	lsls	r3, r3, #1
 800cf16:	440b      	add	r3, r1
 800cf18:	011b      	lsls	r3, r3, #4
 800cf1a:	4413      	add	r3, r2
 800cf1c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7f3 f91e 	bl	8000164 <strlen>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	330f      	adds	r3, #15
 800cf2e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800cf32:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800cf36:	3301      	adds	r3, #1
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f006 f943 	bl	80131c4 <malloc>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 800cf44:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800cf48:	3301      	adds	r3, #1
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f006 f93a 	bl	80131c4 <malloc>
 800cf50:	4603      	mov	r3, r0
 800cf52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    strcpy(Text_Name_IC,"IC Name: ");
 800cf56:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800cf5a:	4942      	ldr	r1, [pc, #264]	@ (800d064 <Save_Information+0xa18>)
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	460b      	mov	r3, r1
 800cf60:	cb03      	ldmia	r3!, {r0, r1}
 800cf62:	6010      	str	r0, [r2, #0]
 800cf64:	6051      	str	r1, [r2, #4]
 800cf66:	881b      	ldrh	r3, [r3, #0]
 800cf68:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 800cf6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cf78:	4619      	mov	r1, r3
 800cf7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	460b      	mov	r3, r1
 800cf86:	005b      	lsls	r3, r3, #1
 800cf88:	440b      	add	r3, r1
 800cf8a:	011b      	lsls	r3, r3, #4
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4619      	mov	r1, r3
 800cf96:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800cf9a:	f008 f983 	bl	80152a4 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 800cf9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa2:	4a31      	ldr	r2, [pc, #196]	@ (800d068 <Save_Information+0xa1c>)
 800cfa4:	461c      	mov	r4, r3
 800cfa6:	4615      	mov	r5, r2
 800cfa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfaa:	6020      	str	r0, [r4, #0]
 800cfac:	6061      	str	r1, [r4, #4]
 800cfae:	60a2      	str	r2, [r4, #8]
 800cfb0:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800cfb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	440b      	add	r3, r1
 800cfd2:	011b      	lsls	r3, r3, #4
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 800cfe2:	f008 f95f 	bl	80152a4 <strcat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800cfe6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800cff0:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 800cff4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800cff8:	f249 5120 	movw	r1, #38176	@ 0x9520
 800cffc:	6800      	ldr	r0, [r0, #0]
 800cffe:	f004 fc89 	bl	8011914 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 800d002:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800d006:	b29b      	uxth	r3, r3
 800d008:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800d00c:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 800d010:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800d014:	f249 5140 	movw	r1, #38208	@ 0x9540
 800d018:	6800      	ldr	r0, [r0, #0]
 800d01a:	f004 fc7b 	bl	8011914 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800d01e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d022:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d02c:	461a      	mov	r2, r3
 800d02e:	0092      	lsls	r2, r2, #2
 800d030:	4413      	add	r3, r2
 800d032:	00db      	lsls	r3, r3, #3
 800d034:	b29b      	uxth	r3, r3
 800d036:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 800d03a:	3b58      	subs	r3, #88	@ 0x58
 800d03c:	b29c      	uxth	r4, r3
 800d03e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d042:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d04c:	e00e      	b.n	800d06c <Save_Information+0xa20>
 800d04e:	bf00      	nop
 800d050:	08018448 	.word	0x08018448
 800d054:	08018454 	.word	0x08018454
 800d058:	080192f4 	.word	0x080192f4
 800d05c:	08018458 	.word	0x08018458
 800d060:	080192e4 	.word	0x080192e4
 800d064:	0801842c 	.word	0x0801842c
 800d068:	08018438 	.word	0x08018438
 800d06c:	4619      	mov	r1, r3
 800d06e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d072:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	460b      	mov	r3, r1
 800d07a:	005b      	lsls	r3, r3, #1
 800d07c:	440b      	add	r3, r1
 800d07e:	011b      	lsls	r3, r3, #4
 800d080:	4413      	add	r3, r2
 800d082:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d086:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 800d088:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d08c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d096:	4619      	mov	r1, r3
 800d098:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d09c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	005b      	lsls	r3, r3, #1
 800d0a6:	440b      	add	r3, r1
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	4413      	add	r3, r2
 800d0ac:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7f3 f856 	bl	8000164 <strlen>
 800d0b8:	4603      	mov	r3, r0
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800d0c0:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 800d0c4:	462a      	mov	r2, r5
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	6800      	ldr	r0, [r0, #0]
 800d0ca:	f004 fc23 	bl	8011914 <DWIN_SetText>

    free(Text_Name_IC);
 800d0ce:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800d0d2:	f006 f87f 	bl	80131d4 <free>
    free(Text_Num_IC);
 800d0d6:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 800d0da:	f006 f87b 	bl	80131d4 <free>
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 800d0de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d0e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d0e6:	216b      	movs	r1, #107	@ 0x6b
 800d0e8:	6818      	ldr	r0, [r3, #0]
 800d0ea:	f004 fbec 	bl	80118c6 <DWIN_SetPage>
}
 800d0ee:	bf00      	nop
 800d0f0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0f8 <Enter_password>:

void Enter_password(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800d0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0fc:	b089      	sub	sp, #36	@ 0x24
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	6039      	str	r1, [r7, #0]
 800d104:	466b      	mov	r3, sp
 800d106:	461e      	mov	r6, r3
    /* Get the password input */
    uint8_t len = screen_obj->Screen_keyboard.Index_String + 1;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	3301      	adds	r3, #1
 800d112:	77fb      	strb	r3, [r7, #31]
    char input_pass[len];
 800d114:	7ff9      	ldrb	r1, [r7, #31]
 800d116:	460b      	mov	r3, r1
 800d118:	3b01      	subs	r3, #1
 800d11a:	61bb      	str	r3, [r7, #24]
 800d11c:	b2cb      	uxtb	r3, r1
 800d11e:	2200      	movs	r2, #0
 800d120:	4698      	mov	r8, r3
 800d122:	4691      	mov	r9, r2
 800d124:	f04f 0200 	mov.w	r2, #0
 800d128:	f04f 0300 	mov.w	r3, #0
 800d12c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d130:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d134:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d138:	b2cb      	uxtb	r3, r1
 800d13a:	2200      	movs	r2, #0
 800d13c:	461c      	mov	r4, r3
 800d13e:	4615      	mov	r5, r2
 800d140:	f04f 0200 	mov.w	r2, #0
 800d144:	f04f 0300 	mov.w	r3, #0
 800d148:	00eb      	lsls	r3, r5, #3
 800d14a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d14e:	00e2      	lsls	r2, r4, #3
 800d150:	460b      	mov	r3, r1
 800d152:	3307      	adds	r3, #7
 800d154:	08db      	lsrs	r3, r3, #3
 800d156:	00db      	lsls	r3, r3, #3
 800d158:	ebad 0d03 	sub.w	sp, sp, r3
 800d15c:	466b      	mov	r3, sp
 800d15e:	3300      	adds	r3, #0
 800d160:	617b      	str	r3, [r7, #20]
    strcpy(input_pass,screen_obj->Screen_keyboard.String);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	330e      	adds	r3, #14
 800d166:	4619      	mov	r1, r3
 800d168:	6978      	ldr	r0, [r7, #20]
 800d16a:	f008 f9c6 	bl	80154fa <strcpy>
    /* Check password */
    if (strcmp(input_pass,MACHINE_PASSWORD) == 0) { /* Correct password */
 800d16e:	493f      	ldr	r1, [pc, #252]	@ (800d26c <Enter_password+0x174>)
 800d170:	6978      	ldr	r0, [r7, #20]
 800d172:	f7f2 ffed 	bl	8000150 <strcmp>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d16a      	bne.n	800d252 <Enter_password+0x15a>
        /* show data page */
        switch (screen_obj->page_setting) {
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 34db 	ldrb.w	r3, [r3, #1243]	@ 0x4db
 800d182:	2b6b      	cmp	r3, #107	@ 0x6b
 800d184:	d15c      	bne.n	800d240 <Enter_password+0x148>
            case DWINPAGE_SETTING_PROGRAM : {
                // Show data in screen
                uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7f2 ffe9 	bl	8000164 <strlen>
 800d192:	4603      	mov	r3, r0
 800d194:	b2db      	uxtb	r3, r3
 800d196:	3309      	adds	r3, #9
 800d198:	74fb      	strb	r3, [r7, #19]
                uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7f2 ffdf 	bl	8000164 <strlen>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	330f      	adds	r3, #15
 800d1ac:	74bb      	strb	r3, [r7, #18]

                char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800d1ae:	7cfb      	ldrb	r3, [r7, #19]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f006 f806 	bl	80131c4 <malloc>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	60fb      	str	r3, [r7, #12]
                char *Text_Num_IC = malloc(size_Num_IC + 1);
 800d1bc:	7cbb      	ldrb	r3, [r7, #18]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f005 ffff 	bl	80131c4 <malloc>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	60bb      	str	r3, [r7, #8]

                strcpy(Text_Name_IC,"IC Name: ");
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	4928      	ldr	r1, [pc, #160]	@ (800d270 <Enter_password+0x178>)
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	cb03      	ldmia	r3!, {r0, r1}
 800d1d4:	6010      	str	r0, [r2, #0]
 800d1d6:	6051      	str	r1, [r2, #4]
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	8113      	strh	r3, [r2, #8]
                strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f008 f85d 	bl	80152a4 <strcat>
                strcpy(Text_Num_IC,"Number of ICs: ");
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	4a21      	ldr	r2, [pc, #132]	@ (800d274 <Enter_password+0x17c>)
 800d1ee:	461c      	mov	r4, r3
 800d1f0:	4615      	mov	r5, r2
 800d1f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1f4:	6020      	str	r0, [r4, #0]
 800d1f6:	6061      	str	r1, [r4, #4]
 800d1f8:	60a2      	str	r2, [r4, #8]
 800d1fa:	60e3      	str	r3, [r4, #12]
                strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 800d202:	4619      	mov	r1, r3
 800d204:	68b8      	ldr	r0, [r7, #8]
 800d206:	f008 f84d 	bl	80152a4 <strcat>

                // Show data in screen
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800d20a:	7cfb      	ldrb	r3, [r7, #19]
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	f249 5120 	movw	r1, #38176	@ 0x9520
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f004 fb7d 	bl	8011914 <DWIN_SetText>
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 800d21a:	7cbb      	ldrb	r3, [r7, #18]
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	f249 5140 	movw	r1, #38208	@ 0x9540
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f004 fb75 	bl	8011914 <DWIN_SetText>

                free(Text_Name_IC);
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f005 ffd2 	bl	80131d4 <free>
                free(Text_Num_IC);
 800d230:	68b8      	ldr	r0, [r7, #8]
 800d232:	f005 ffcf 	bl	80131d4 <free>
                // Switch page
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 800d236:	216b      	movs	r1, #107	@ 0x6b
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f004 fb44 	bl	80118c6 <DWIN_SetPage>
            } break;
 800d23e:	e000      	b.n	800d242 <Enter_password+0x14a>

            default : break;
 800d240:	bf00      	nop
        }
        /* Goto setting page */
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->page_setting);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f893 34db 	ldrb.w	r3, [r3, #1243]	@ 0x4db
 800d248:	4619      	mov	r1, r3
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f004 fb3b 	bl	80118c6 <DWIN_SetPage>
 800d250:	e006      	b.n	800d260 <Enter_password+0x168>
    } else {
        /* Show text */
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_Password,INCORRECT_PASSWORD_TEXT,strlen(INCORRECT_PASSWORD_TEXT));
 800d252:	2312      	movs	r3, #18
 800d254:	4a08      	ldr	r2, [pc, #32]	@ (800d278 <Enter_password+0x180>)
 800d256:	f249 5180 	movw	r1, #38272	@ 0x9580
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f004 fb5a 	bl	8011914 <DWIN_SetText>
 800d260:	46b5      	mov	sp, r6
    }
}
 800d262:	bf00      	nop
 800d264:	3724      	adds	r7, #36	@ 0x24
 800d266:	46bd      	mov	sp, r7
 800d268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d26c:	08018464 	.word	0x08018464
 800d270:	0801842c 	.word	0x0801842c
 800d274:	08018438 	.word	0x08018438
 800d278:	0801846c 	.word	0x0801846c

0800d27c <Enter_num_keyboard>:

void Enter_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800d27c:	b590      	push	{r4, r7, lr}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
    uint16_t VP_show = screen_obj->Screen_keyboard.VP_Text;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	899b      	ldrh	r3, [r3, #12]
 800d28a:	81fb      	strh	r3, [r7, #14]
    
    /* Show text to VP */
    DWIN_SetText((Dwin_t *)screen_obj,VP_show,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f103 020e 	add.w	r2, r3, #14
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d298:	89f9      	ldrh	r1, [r7, #14]
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f004 fb3a 	bl	8011914 <DWIN_SetText>

    /* Return page base on VP address */
    switch (VP_show) {
 800d2a0:	89fb      	ldrh	r3, [r7, #14]
 800d2a2:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	f000 8109 	beq.w	800d4be <Enter_num_keyboard+0x242>
 800d2ac:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	f300 8109 	bgt.w	800d4c8 <Enter_num_keyboard+0x24c>
 800d2b6:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	f000 80ff 	beq.w	800d4be <Enter_num_keyboard+0x242>
 800d2c0:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	f300 80ff 	bgt.w	800d4c8 <Enter_num_keyboard+0x24c>
 800d2ca:	f249 5260 	movw	r2, #38240	@ 0x9560
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d016      	beq.n	800d300 <Enter_num_keyboard+0x84>
 800d2d2:	f249 5260 	movw	r2, #38240	@ 0x9560
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	f300 80f6 	bgt.w	800d4c8 <Enter_num_keyboard+0x24c>
 800d2dc:	f249 5240 	movw	r2, #38208	@ 0x9540
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	f000 80a5 	beq.w	800d430 <Enter_num_keyboard+0x1b4>
 800d2e6:	f249 5240 	movw	r2, #38208	@ 0x9540
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	f300 80ec 	bgt.w	800d4c8 <Enter_num_keyboard+0x24c>
 800d2f0:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 800d2f4:	d00e      	beq.n	800d314 <Enter_num_keyboard+0x98>
 800d2f6:	f249 5220 	movw	r2, #38176	@ 0x9520
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d051      	beq.n	800d3a2 <Enter_num_keyboard+0x126>
        } break;
        case VP_Name_Wifi :
        case VP_Password_Wifi : {
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
        } break;
        default: break;
 800d2fe:	e0e3      	b.n	800d4c8 <Enter_num_keyboard+0x24c>
            DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password); /* Clear warning text if any */
 800d300:	f249 5180 	movw	r1, #38272	@ 0x9580
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f004 fb75 	bl	80119f4 <DWIN_ClearText>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 800d30a:	216e      	movs	r1, #110	@ 0x6e
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f004 fada 	bl	80118c6 <DWIN_SetPage>
        } break;
 800d312:	e0da      	b.n	800d4ca <Enter_num_keyboard+0x24e>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d31a:	3301      	adds	r3, #1
 800d31c:	461a      	mov	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d324:	461c      	mov	r4, r3
 800d326:	4610      	mov	r0, r2
 800d328:	f005 ff4c 	bl	80131c4 <malloc>
 800d32c:	4603      	mov	r3, r0
 800d32e:	4619      	mov	r1, r3
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	4623      	mov	r3, r4
 800d334:	005b      	lsls	r3, r3, #1
 800d336:	4423      	add	r3, r4
 800d338:	011b      	lsls	r3, r3, #4
 800d33a:	4413      	add	r3, r2
 800d33c:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800d340:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d348:	4619      	mov	r1, r3
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	440b      	add	r3, r1
 800d352:	011b      	lsls	r3, r3, #4
 800d354:	4413      	add	r3, r2
 800d356:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800d35a:	6818      	ldr	r0, [r3, #0]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d362:	3301      	adds	r3, #1
 800d364:	461a      	mov	r2, r3
 800d366:	2100      	movs	r1, #0
 800d368:	f007 ff94 	bl	8015294 <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d372:	4619      	mov	r1, r3
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	460b      	mov	r3, r1
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	440b      	add	r3, r1
 800d37c:	011b      	lsls	r3, r3, #4
 800d37e:	4413      	add	r3, r2
 800d380:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800d384:	6818      	ldr	r0, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f103 010e 	add.w	r1, r3, #14
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d392:	461a      	mov	r2, r3
 800d394:	f008 f8c7 	bl	8015526 <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800d398:	216c      	movs	r1, #108	@ 0x6c
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f004 fa93 	bl	80118c6 <DWIN_SetPage>
        } break;
 800d3a0:	e093      	b.n	800d4ca <Enter_num_keyboard+0x24e>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d3b2:	461c      	mov	r4, r3
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	f005 ff05 	bl	80131c4 <malloc>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	4619      	mov	r1, r3
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	4623      	mov	r3, r4
 800d3c2:	005b      	lsls	r3, r3, #1
 800d3c4:	4423      	add	r3, r4
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	4413      	add	r3, r2
 800d3ca:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800d3ce:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	460b      	mov	r3, r1
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	440b      	add	r3, r1
 800d3e0:	011b      	lsls	r3, r3, #4
 800d3e2:	4413      	add	r3, r2
 800d3e4:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800d3e8:	6818      	ldr	r0, [r3, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	2100      	movs	r1, #0
 800d3f6:	f007 ff4d 	bl	8015294 <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d400:	4619      	mov	r1, r3
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	005b      	lsls	r3, r3, #1
 800d408:	440b      	add	r3, r1
 800d40a:	011b      	lsls	r3, r3, #4
 800d40c:	4413      	add	r3, r2
 800d40e:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800d412:	6818      	ldr	r0, [r3, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f103 010e 	add.w	r1, r3, #14
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d420:	461a      	mov	r2, r3
 800d422:	f008 f880 	bl	8015526 <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800d426:	216c      	movs	r1, #108	@ 0x6c
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f004 fa4c 	bl	80118c6 <DWIN_SetPage>
        } break;
 800d42e:	e04c      	b.n	800d4ca <Enter_num_keyboard+0x24e>
            screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d436:	3301      	adds	r3, #1
 800d438:	461a      	mov	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d440:	461c      	mov	r4, r3
 800d442:	4610      	mov	r0, r2
 800d444:	f005 febe 	bl	80131c4 <malloc>
 800d448:	4603      	mov	r3, r0
 800d44a:	4619      	mov	r1, r3
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	4623      	mov	r3, r4
 800d450:	005b      	lsls	r3, r3, #1
 800d452:	4423      	add	r3, r4
 800d454:	011b      	lsls	r3, r3, #4
 800d456:	4413      	add	r3, r2
 800d458:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800d45c:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d464:	4619      	mov	r1, r3
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	005b      	lsls	r3, r3, #1
 800d46c:	440b      	add	r3, r1
 800d46e:	011b      	lsls	r3, r3, #4
 800d470:	4413      	add	r3, r2
 800d472:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800d476:	6818      	ldr	r0, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d47e:	3301      	adds	r3, #1
 800d480:	461a      	mov	r2, r3
 800d482:	2100      	movs	r1, #0
 800d484:	f007 ff06 	bl	8015294 <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f893 34da 	ldrb.w	r3, [r3, #1242]	@ 0x4da
 800d48e:	4619      	mov	r1, r3
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	460b      	mov	r3, r1
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	440b      	add	r3, r1
 800d498:	011b      	lsls	r3, r3, #4
 800d49a:	4413      	add	r3, r2
 800d49c:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800d4a0:	6818      	ldr	r0, [r3, #0]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f103 010e 	add.w	r1, r3, #14
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	f008 f839 	bl	8015526 <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800d4b4:	216c      	movs	r1, #108	@ 0x6c
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f004 fa05 	bl	80118c6 <DWIN_SetPage>
        } break;
 800d4bc:	e005      	b.n	800d4ca <Enter_num_keyboard+0x24e>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 800d4be:	2175      	movs	r1, #117	@ 0x75
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f004 fa00 	bl	80118c6 <DWIN_SetPage>
        } break;
 800d4c6:	e000      	b.n	800d4ca <Enter_num_keyboard+0x24e>
        default: break;
 800d4c8:	bf00      	nop
    }
}
 800d4ca:	bf00      	nop
 800d4cc:	3714      	adds	r7, #20
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd90      	pop	{r4, r7, pc}

0800d4d2 <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	789b      	ldrb	r3, [r3, #2]
 800d4e0:	2bf3      	cmp	r3, #243	@ 0xf3
 800d4e2:	d10e      	bne.n	800d502 <Keyboard+0x30>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f000 8088 	beq.w	800d600 <Keyboard+0x12e>
            --screen_obj->Screen_keyboard.Index_String;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800d500:	e07e      	b.n	800d600 <Keyboard+0x12e>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	789b      	ldrb	r3, [r3, #2]
 800d506:	2bf4      	cmp	r3, #244	@ 0xf4
 800d508:	d11a      	bne.n	800d540 <Keyboard+0x6e>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d510:	2b00      	cmp	r3, #0
 800d512:	bf14      	ite	ne
 800d514:	2301      	movne	r3, #1
 800d516:	2300      	moveq	r3, #0
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	f083 0301 	eor.w	r3, r3, #1
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	f003 0301 	and.w	r3, r3, #1
 800d524:	b2da      	uxtb	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d532:	461a      	mov	r2, r3
 800d534:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f004 fa6d 	bl	8011a18 <DWIN_SetVariable_Icon>
 800d53e:	e05f      	b.n	800d600 <Keyboard+0x12e>
    } else if (screen_event->data == 0xF2) { // Space button
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	789b      	ldrb	r3, [r3, #2]
 800d544:	2bf2      	cmp	r3, #242	@ 0xf2
 800d546:	d05b      	beq.n	800d600 <Keyboard+0x12e>
        // screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = 32;
    } else if (screen_event->data == 0xF1) { // Enter button
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	789b      	ldrb	r3, [r3, #2]
 800d54c:	2bf1      	cmp	r3, #241	@ 0xf1
 800d54e:	d118      	bne.n	800d582 <Keyboard+0xb0>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f991 	bl	800d878 <Screen_CheckInput_Keyboard>
 800d556:	4603      	mov	r3, r0
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d151      	bne.n	800d600 <Keyboard+0x12e>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	8999      	ldrh	r1, [r3, #12]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f103 020e 	add.w	r2, r3, #14
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f004 f9d1 	bl	8011914 <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f893 34d8 	ldrb.w	r3, [r3, #1240]	@ 0x4d8
 800d578:	4619      	mov	r1, r3
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f004 f9a3 	bl	80118c6 <DWIN_SetPage>
 800d580:	e03e      	b.n	800d600 <Keyboard+0x12e>
        }
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	789b      	ldrb	r3, [r3, #2]
 800d586:	2b40      	cmp	r3, #64	@ 0x40
 800d588:	d92c      	bls.n	800d5e4 <Keyboard+0x112>
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	789b      	ldrb	r3, [r3, #2]
 800d58e:	2b5a      	cmp	r3, #90	@ 0x5a
 800d590:	d828      	bhi.n	800d5e4 <Keyboard+0x112>
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d598:	f083 0301 	eor.w	r3, r3, #1
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d011      	beq.n	800d5c6 <Keyboard+0xf4>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	789a      	ldrb	r2, [r3, #2]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d5ac:	1c59      	adds	r1, r3, #1
 800d5ae:	b288      	uxth	r0, r1
 800d5b0:	6879      	ldr	r1, [r7, #4]
 800d5b2:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	f102 0320 	add.w	r3, r2, #32
 800d5bc:	b2da      	uxtb	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	440b      	add	r3, r1
 800d5c2:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 800d5c4:	e01c      	b.n	800d600 <Keyboard+0x12e>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d5cc:	1c5a      	adds	r2, r3, #1
 800d5ce:	b291      	uxth	r1, r2
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	789a      	ldrb	r2, [r3, #2]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	440b      	add	r3, r1
 800d5e0:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 800d5e2:	e00d      	b.n	800d600 <Keyboard+0x12e>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	b291      	uxth	r1, r2
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	789a      	ldrb	r2, [r3, #2]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	440b      	add	r3, r1
 800d5fe:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f103 020e 	add.w	r2, r3, #14
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d60c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f004 f97f 	bl	8011914 <DWIN_SetText>
}
 800d616:	bf00      	nop
 800d618:	3708      	adds	r7, #8
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 800d61e:	b480      	push	{r7}
 800d620:	b087      	sub	sp, #28
 800d622:	af00      	add	r7, sp, #0
 800d624:	4603      	mov	r3, r0
 800d626:	6039      	str	r1, [r7, #0]
 800d628:	80fb      	strh	r3, [r7, #6]
 800d62a:	4613      	mov	r3, r2
 800d62c:	717b      	strb	r3, [r7, #5]
    int left = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 800d632:	797b      	ldrb	r3, [r7, #5]
 800d634:	3b01      	subs	r3, #1
 800d636:	613b      	str	r3, [r7, #16]
    int mid;

    while (left <= right) {
 800d638:	e023      	b.n	800d682 <Index_VP+0x64>
        mid = (left + right) / 2;
 800d63a:	697a      	ldr	r2, [r7, #20]
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	4413      	add	r3, r2
 800d640:	0fda      	lsrs	r2, r3, #31
 800d642:	4413      	add	r3, r2
 800d644:	105b      	asrs	r3, r3, #1
 800d646:	60fb      	str	r3, [r7, #12]
        if (VP_array[mid].VP_address == vp) {
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	4413      	add	r3, r2
 800d650:	881b      	ldrh	r3, [r3, #0]
 800d652:	88fa      	ldrh	r2, [r7, #6]
 800d654:	429a      	cmp	r2, r3
 800d656:	d105      	bne.n	800d664 <Index_VP+0x46>
            return VP_array[mid].index;  // Found the vp
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	683a      	ldr	r2, [r7, #0]
 800d65e:	4413      	add	r3, r2
 800d660:	789b      	ldrb	r3, [r3, #2]
 800d662:	e013      	b.n	800d68c <Index_VP+0x6e>
        } else if (VP_array[mid].VP_address > vp) {
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	683a      	ldr	r2, [r7, #0]
 800d66a:	4413      	add	r3, r2
 800d66c:	881b      	ldrh	r3, [r3, #0]
 800d66e:	88fa      	ldrh	r2, [r7, #6]
 800d670:	429a      	cmp	r2, r3
 800d672:	d203      	bcs.n	800d67c <Index_VP+0x5e>
            right = mid - 1;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	3b01      	subs	r3, #1
 800d678:	613b      	str	r3, [r7, #16]
 800d67a:	e002      	b.n	800d682 <Index_VP+0x64>
        } else {
            left = mid + 1;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	3301      	adds	r3, #1
 800d680:	617b      	str	r3, [r7, #20]
    while (left <= right) {
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	429a      	cmp	r2, r3
 800d688:	ddd7      	ble.n	800d63a <Index_VP+0x1c>
        }
    }

    return 255;  // VP not found
 800d68a:	23ff      	movs	r3, #255	@ 0xff
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	371c      	adds	r7, #28
 800d690:	46bd      	mov	sp, r7
 800d692:	bc80      	pop	{r7}
 800d694:	4770      	bx	lr
	...

0800d698 <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig,
                                                                a_handler_enter_sig };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page;
 800d6a0:	4b3c      	ldr	r3, [pc, #240]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a3c      	ldr	r2, [pc, #240]	@ (800d798 <Screen_init_handler_table+0x100>)
 800d6a6:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_RETURN]               = Navigation_return;
 800d6a8:	4b3a      	ldr	r3, [pc, #232]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3304      	adds	r3, #4
 800d6ae:	4a3b      	ldr	r2, [pc, #236]	@ (800d79c <Screen_init_handler_table+0x104>)
 800d6b0:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
 800d6b2:	4b38      	ldr	r3, [pc, #224]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	4a39      	ldr	r2, [pc, #228]	@ (800d7a0 <Screen_init_handler_table+0x108>)
 800d6ba:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
 800d6bc:	4b35      	ldr	r3, [pc, #212]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	3314      	adds	r3, #20
 800d6c2:	4a38      	ldr	r2, [pc, #224]	@ (800d7a4 <Screen_init_handler_table+0x10c>)
 800d6c4:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
 800d6c6:	4b33      	ldr	r3, [pc, #204]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	330c      	adds	r3, #12
 800d6cc:	4a36      	ldr	r2, [pc, #216]	@ (800d7a8 <Screen_init_handler_table+0x110>)
 800d6ce:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_WIFI]         = Navigation_setting_wifi;
 800d6d0:	4b30      	ldr	r3, [pc, #192]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3310      	adds	r3, #16
 800d6d6:	4a35      	ldr	r2, [pc, #212]	@ (800d7ac <Screen_init_handler_table+0x114>)
 800d6d8:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
 800d6da:	4b2e      	ldr	r3, [pc, #184]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	3328      	adds	r3, #40	@ 0x28
 800d6e0:	4a33      	ldr	r2, [pc, #204]	@ (800d7b0 <Screen_init_handler_table+0x118>)
 800d6e2:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_DETAIL_MAINPAGE]      = Navigation_detail_mainpage;
 800d6e4:	4b2b      	ldr	r3, [pc, #172]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	332c      	adds	r3, #44	@ 0x2c
 800d6ea:	4a32      	ldr	r2, [pc, #200]	@ (800d7b4 <Screen_init_handler_table+0x11c>)
 800d6ec:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_GRAPH_MAINPAGE]       = Navigation_graph_mainpage;
 800d6ee:	4b29      	ldr	r3, [pc, #164]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3330      	adds	r3, #48	@ 0x30
 800d6f4:	4a30      	ldr	r2, [pc, #192]	@ (800d7b8 <Screen_init_handler_table+0x120>)
 800d6f6:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
 800d6f8:	4b26      	ldr	r3, [pc, #152]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	3318      	adds	r3, #24
 800d6fe:	4a2f      	ldr	r2, [pc, #188]	@ (800d7bc <Screen_init_handler_table+0x124>)
 800d700:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
 800d702:	4b24      	ldr	r3, [pc, #144]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	331c      	adds	r3, #28
 800d708:	4a2d      	ldr	r2, [pc, #180]	@ (800d7c0 <Screen_init_handler_table+0x128>)
 800d70a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASE_PULSE]    = Navigation_Change_CasePulse;
 800d70c:	4b21      	ldr	r3, [pc, #132]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3334      	adds	r3, #52	@ 0x34
 800d712:	4a2c      	ldr	r2, [pc, #176]	@ (800d7c4 <Screen_init_handler_table+0x12c>)
 800d714:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_FINISH_REVIEW]        = Navigation_Finish_Review;
 800d716:	4b1f      	ldr	r3, [pc, #124]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	3338      	adds	r3, #56	@ 0x38
 800d71c:	4a2a      	ldr	r2, [pc, #168]	@ (800d7c8 <Screen_init_handler_table+0x130>)
 800d71e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_INFORMATION]          = Navigation_Information;
 800d720:	4b1c      	ldr	r3, [pc, #112]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3320      	adds	r3, #32
 800d726:	4a29      	ldr	r2, [pc, #164]	@ (800d7cc <Screen_init_handler_table+0x134>)
 800d728:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_LOGGING]              = Navigation_Logging;
 800d72a:	4b1a      	ldr	r3, [pc, #104]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	3324      	adds	r3, #36	@ 0x24
 800d730:	4a27      	ldr	r2, [pc, #156]	@ (800d7d0 <Screen_init_handler_table+0x138>)
 800d732:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SELECTION][ON_OFF_DEV]                       = ON_OFF_Button;
 800d734:	4b17      	ldr	r3, [pc, #92]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	4a26      	ldr	r2, [pc, #152]	@ (800d7d4 <Screen_init_handler_table+0x13c>)
 800d73a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SELECT_PROGRAM]                   = select_running_program;
 800d73c:	4b15      	ldr	r3, [pc, #84]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	3304      	adds	r3, #4
 800d742:	4a25      	ldr	r2, [pc, #148]	@ (800d7d8 <Screen_init_handler_table+0x140>)
 800d744:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SElECT_MODIFY_PROGRAM]            = select_modify_program;
 800d746:	4b13      	ldr	r3, [pc, #76]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	3308      	adds	r3, #8
 800d74c:	4a23      	ldr	r2, [pc, #140]	@ (800d7dc <Screen_init_handler_table+0x144>)
 800d74e:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
 800d750:	4b10      	ldr	r3, [pc, #64]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	4a22      	ldr	r2, [pc, #136]	@ (800d7e0 <Screen_init_handler_table+0x148>)
 800d756:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;
 800d758:	4b0e      	ldr	r3, [pc, #56]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	4a21      	ldr	r2, [pc, #132]	@ (800d7e4 <Screen_init_handler_table+0x14c>)
 800d75e:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;
 800d760:	4b0c      	ldr	r3, [pc, #48]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d762:	695b      	ldr	r3, [r3, #20]
 800d764:	4a20      	ldr	r2, [pc, #128]	@ (800d7e8 <Screen_init_handler_table+0x150>)
 800d766:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_ENTER][ENTER_PASSWORD]                       = Enter_password;
 800d768:	4b0a      	ldr	r3, [pc, #40]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	4a1f      	ldr	r2, [pc, #124]	@ (800d7ec <Screen_init_handler_table+0x154>)
 800d76e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_NUM_KEYBOARD]                   = Enter_num_keyboard;
 800d770:	4b08      	ldr	r3, [pc, #32]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	3304      	adds	r3, #4
 800d776:	4a1e      	ldr	r2, [pc, #120]	@ (800d7f0 <Screen_init_handler_table+0x158>)
 800d778:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;
 800d77a:	4b06      	ldr	r3, [pc, #24]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	4a1d      	ldr	r2, [pc, #116]	@ (800d7f4 <Screen_init_handler_table+0x15c>)
 800d780:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4a03      	ldr	r2, [pc, #12]	@ (800d794 <Screen_init_handler_table+0xfc>)
 800d786:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4
}
 800d78a:	bf00      	nop
 800d78c:	370c      	adds	r7, #12
 800d78e:	46bd      	mov	sp, r7
 800d790:	bc80      	pop	{r7}
 800d792:	4770      	bx	lr
 800d794:	20000040 	.word	0x20000040
 800d798:	0800b495 	.word	0x0800b495
 800d79c:	0800b50d 	.word	0x0800b50d
 800d7a0:	0800b4b7 	.word	0x0800b4b7
 800d7a4:	0800b549 	.word	0x0800b549
 800d7a8:	0800b57d 	.word	0x0800b57d
 800d7ac:	0800b597 	.word	0x0800b597
 800d7b0:	0800b5f5 	.word	0x0800b5f5
 800d7b4:	0800b6ed 	.word	0x0800b6ed
 800d7b8:	0800b757 	.word	0x0800b757
 800d7bc:	0800b7a5 	.word	0x0800b7a5
 800d7c0:	0800b849 	.word	0x0800b849
 800d7c4:	0800ba05 	.word	0x0800ba05
 800d7c8:	0800bad9 	.word	0x0800bad9
 800d7cc:	0800bfd9 	.word	0x0800bfd9
 800d7d0:	0800bff3 	.word	0x0800bff3
 800d7d4:	0800c00d 	.word	0x0800c00d
 800d7d8:	0800c47d 	.word	0x0800c47d
 800d7dc:	0800c4a1 	.word	0x0800c4a1
 800d7e0:	0800c5b9 	.word	0x0800c5b9
 800d7e4:	0800c603 	.word	0x0800c603
 800d7e8:	0800c64d 	.word	0x0800c64d
 800d7ec:	0800d0f9 	.word	0x0800d0f9
 800d7f0:	0800d27d 	.word	0x0800d27d
 800d7f4:	0800d4d3 	.word	0x0800d4d3

0800d7f8 <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
    // do sth ...
	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d808:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d107      	bne.n	800d822 <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	3308      	adds	r3, #8
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6839      	ldr	r1, [r7, #0]
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	4798      	blx	r3
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}
 800d820:	e025      	b.n	800d86e <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	2b03      	cmp	r3, #3
 800d828:	d107      	bne.n	800d83a <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	330c      	adds	r3, #12
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	4798      	blx	r3
}
 800d838:	e019      	b.n	800d86e <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	2b04      	cmp	r3, #4
 800d840:	d107      	bne.n	800d852 <Screen_excute_RX_function+0x5a>
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	3310      	adds	r3, #16
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	4798      	blx	r3
}
 800d850:	e00d      	b.n	800d86e <Screen_excute_RX_function+0x76>
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	4413      	add	r3, r2
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	785b      	ldrb	r3, [r3, #1]
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	4413      	add	r3, r2
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	4798      	blx	r3
}
 800d86e:	bf00      	nop
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
	...

0800d878 <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const obj_screen) {
 800d878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d87c:	b08d      	sub	sp, #52	@ 0x34
 800d87e:	af02      	add	r7, sp, #8
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	466b      	mov	r3, sp
 800d884:	461e      	mov	r6, r3
    char string[obj_screen->Screen_keyboard.Index_String];
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800d88c:	460b      	mov	r3, r1
 800d88e:	3b01      	subs	r3, #1
 800d890:	627b      	str	r3, [r7, #36]	@ 0x24
 800d892:	b28b      	uxth	r3, r1
 800d894:	2200      	movs	r2, #0
 800d896:	4698      	mov	r8, r3
 800d898:	4691      	mov	r9, r2
 800d89a:	f04f 0200 	mov.w	r2, #0
 800d89e:	f04f 0300 	mov.w	r3, #0
 800d8a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d8a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d8aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d8ae:	b28b      	uxth	r3, r1
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	461c      	mov	r4, r3
 800d8b4:	4615      	mov	r5, r2
 800d8b6:	f04f 0200 	mov.w	r2, #0
 800d8ba:	f04f 0300 	mov.w	r3, #0
 800d8be:	00eb      	lsls	r3, r5, #3
 800d8c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d8c4:	00e2      	lsls	r2, r4, #3
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	3307      	adds	r3, #7
 800d8ca:	08db      	lsrs	r3, r3, #3
 800d8cc:	00db      	lsls	r3, r3, #3
 800d8ce:	ebad 0d03 	sub.w	sp, sp, r3
 800d8d2:	ab02      	add	r3, sp, #8
 800d8d4:	3300      	adds	r3, #0
 800d8d6:	623b      	str	r3, [r7, #32]
    char warm_string[20] = {0};
 800d8d8:	f107 0308 	add.w	r3, r7, #8
 800d8dc:	2200      	movs	r2, #0
 800d8de:	601a      	str	r2, [r3, #0]
 800d8e0:	605a      	str	r2, [r3, #4]
 800d8e2:	609a      	str	r2, [r3, #8]
 800d8e4:	60da      	str	r2, [r3, #12]
 800d8e6:	611a      	str	r2, [r3, #16]
    float data_compare;
    // copy string
    memcpy(string,obj_screen->Screen_keyboard.String,obj_screen->Screen_keyboard.Index_String);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f103 010e 	add.w	r1, r3, #14
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	6a38      	ldr	r0, [r7, #32]
 800d8f8:	f007 fe15 	bl	8015526 <memcpy>
    /* compare data with limit */
    data_compare = atof(string);
 800d8fc:	6a38      	ldr	r0, [r7, #32]
 800d8fe:	f005 fc59 	bl	80131b4 <atof>
 800d902:	4602      	mov	r2, r0
 800d904:	460b      	mov	r3, r1
 800d906:	4610      	mov	r0, r2
 800d908:	4619      	mov	r1, r3
 800d90a:	f7f3 f8e7 	bl	8000adc <__aeabi_d2f>
 800d90e:	4603      	mov	r3, r0
 800d910:	61fb      	str	r3, [r7, #28]
    if (data_compare > obj_screen->Screen_condition->max_value) {
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4619      	mov	r1, r3
 800d91a:	69f8      	ldr	r0, [r7, #28]
 800d91c:	f7f3 f99a 	bl	8000c54 <__aeabi_fcmpgt>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d019      	beq.n	800d95a <Screen_CheckInput_Keyboard+0xe2>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", obj_screen->Screen_condition->max_value);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7f2 fd85 	bl	800043c <__aeabi_f2d>
 800d932:	4602      	mov	r2, r0
 800d934:	460b      	mov	r3, r1
 800d936:	f107 0008 	add.w	r0, r7, #8
 800d93a:	e9cd 2300 	strd	r2, r3, [sp]
 800d93e:	4a1c      	ldr	r2, [pc, #112]	@ (800d9b0 <Screen_CheckInput_Keyboard+0x138>)
 800d940:	2114      	movs	r1, #20
 800d942:	f007 fb39 	bl	8014fb8 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800d946:	f107 0208 	add.w	r2, r7, #8
 800d94a:	2314      	movs	r3, #20
 800d94c:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f003 ffdf 	bl	8011914 <DWIN_SetText>
        return Status_ERROR;
 800d956:	2300      	movs	r3, #0
 800d958:	e024      	b.n	800d9a4 <Screen_CheckInput_Keyboard+0x12c>
    } else if (data_compare < obj_screen->Screen_condition->min_value) {
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	4619      	mov	r1, r3
 800d962:	69f8      	ldr	r0, [r7, #28]
 800d964:	f7f3 f958 	bl	8000c18 <__aeabi_fcmplt>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d019      	beq.n	800d9a2 <Screen_CheckInput_Keyboard+0x12a>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", obj_screen->Screen_condition->min_value);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	4618      	mov	r0, r3
 800d976:	f7f2 fd61 	bl	800043c <__aeabi_f2d>
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	f107 0008 	add.w	r0, r7, #8
 800d982:	e9cd 2300 	strd	r2, r3, [sp]
 800d986:	4a0b      	ldr	r2, [pc, #44]	@ (800d9b4 <Screen_CheckInput_Keyboard+0x13c>)
 800d988:	2114      	movs	r1, #20
 800d98a:	f007 fb15 	bl	8014fb8 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800d98e:	f107 0208 	add.w	r2, r7, #8
 800d992:	2314      	movs	r3, #20
 800d994:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f003 ffbb 	bl	8011914 <DWIN_SetText>
        return Status_ERROR;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e000      	b.n	800d9a4 <Screen_CheckInput_Keyboard+0x12c>
    } 
    return Status_SUCCESS; 
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	46b5      	mov	sp, r6
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	372c      	adds	r7, #44	@ 0x2c
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9b0:	08018480 	.word	0x08018480
 800d9b4:	0801848c 	.word	0x0801848c

0800d9b8 <Screen_GetIcon_Pin>:
 * @brief Function used to setup icon with data test
 * 
 * @param obj_screen : object screen
 * @param data_pin : array 2d data test
 */
static void Screen_GetIcon_Pin(Screen_t *const screen_obj, char *data_pin) {
 800d9b8:	b590      	push	{r4, r7, lr}
 800d9ba:	b0a5      	sub	sp, #148	@ 0x94
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800d9d0:	fb01 f303 	mul.w	r3, r1, r3
 800d9d4:	4413      	add	r3, r2
 800d9d6:	334b      	adds	r3, #75	@ 0x4b
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	4619      	mov	r1, r3
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	460b      	mov	r3, r1
 800d9e0:	005b      	lsls	r3, r3, #1
 800d9e2:	440b      	add	r3, r1
 800d9e4:	011b      	lsls	r3, r3, #4
 800d9e6:	4413      	add	r3, r2
 800d9e8:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    
    uint8_t map_array[128] = {0};
 800d9f2:	f107 030c 	add.w	r3, r7, #12
 800d9f6:	2280      	movs	r2, #128	@ 0x80
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f007 fc4a 	bl	8015294 <memset>
    map_array['G'] = ICON_GND;
 800da00:	2302      	movs	r3, #2
 800da02:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    map_array['V'] = ICON_VCC;
 800da06:	2303      	movs	r3, #3
 800da08:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = malloc(num_pin * sizeof(uint8_t));
 800da0c:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800da16:	461c      	mov	r4, r3
 800da18:	4610      	mov	r0, r2
 800da1a:	f005 fbd3 	bl	80131c4 <malloc>
 800da1e:	4603      	mov	r3, r0
 800da20:	4619      	mov	r1, r3
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800da28:	fb04 f303 	mul.w	r3, r4, r3
 800da2c:	4413      	add	r3, r2
 800da2e:	335c      	adds	r3, #92	@ 0x5c
 800da30:	6019      	str	r1, [r3, #0]

    /* Convert data to icon pin config */
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800da32:	2300      	movs	r3, #0
 800da34:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800da38:	e03c      	b.n	800dab4 <Screen_GetIcon_Pin+0xfc>
        if (Pin_x >= 8) {
 800da3a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da3e:	2b07      	cmp	r3, #7
 800da40:	d90c      	bls.n	800da5c <Screen_GetIcon_Pin+0xa4>
            map_array['0'] = ICON_OUTPUT;
 800da42:	2301      	movs	r3, #1
 800da44:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_OUTPUT;
 800da48:	2301      	movs	r3, #1
 800da4a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_INPUT;
 800da4e:	2300      	movs	r3, #0
 800da50:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_INPUT;
 800da54:	2300      	movs	r3, #0
 800da56:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 800da5a:	e00b      	b.n	800da74 <Screen_GetIcon_Pin+0xbc>
        } else {
            map_array['0'] = ICON_INPUT;
 800da5c:	2300      	movs	r3, #0
 800da5e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_INPUT;
 800da62:	2300      	movs	r3, #0
 800da64:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_OUTPUT;
 800da68:	2301      	movs	r3, #1
 800da6a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_OUTPUT;
 800da6e:	2301      	movs	r3, #1
 800da70:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        }
        screen_obj->IC_Testerx[screen_obj->curr_device].config_pin[Pin_x] = map_array[(uint8_t)(data_pin[Pin_x])];
 800da74:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	4413      	add	r3, r2
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	4619      	mov	r1, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800da86:	4618      	mov	r0, r3
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800da8e:	fb00 f303 	mul.w	r3, r0, r3
 800da92:	4413      	add	r3, r2
 800da94:	335c      	adds	r3, #92	@ 0x5c
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da9c:	4413      	add	r3, r2
 800da9e:	f101 0290 	add.w	r2, r1, #144	@ 0x90
 800daa2:	443a      	add	r2, r7
 800daa4:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800daa8:	701a      	strb	r2, [r3, #0]
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800daaa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800daae:	3301      	adds	r3, #1
 800dab0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800dab4:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800dab8:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d3bc      	bcc.n	800da3a <Screen_GetIcon_Pin+0x82>
    }
}
 800dac0:	bf00      	nop
 800dac2:	bf00      	nop
 800dac4:	3794      	adds	r7, #148	@ 0x94
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd90      	pop	{r4, r7, pc}

0800daca <Screen_GetIcon_Result>:

static void Screen_GetIcon_Result(Screen_t *const screen_obj, char *result) {
 800daca:	b590      	push	{r4, r7, lr}
 800dacc:	b0a5      	sub	sp, #148	@ 0x94
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	6039      	str	r1, [r7, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800dada:	4619      	mov	r1, r3
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800dae2:	fb01 f303 	mul.w	r3, r1, r3
 800dae6:	4413      	add	r3, r2
 800dae8:	334b      	adds	r3, #75	@ 0x4b
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800daf0:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800daf4:	6879      	ldr	r1, [r7, #4]
 800daf6:	4613      	mov	r3, r2
 800daf8:	005b      	lsls	r3, r3, #1
 800dafa:	4413      	add	r3, r2
 800dafc:	011b      	lsls	r3, r3, #4
 800dafe:	440b      	add	r3, r1
 800db00:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800db0a:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800db0e:	6879      	ldr	r1, [r7, #4]
 800db10:	4613      	mov	r3, r2
 800db12:	005b      	lsls	r3, r3, #1
 800db14:	4413      	add	r3, r2
 800db16:	011b      	lsls	r3, r3, #4
 800db18:	440b      	add	r3, r1
 800db1a:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
    uint8_t map_array[128] = {0};
 800db24:	f107 030c 	add.w	r3, r7, #12
 800db28:	2280      	movs	r2, #128	@ 0x80
 800db2a:	2100      	movs	r1, #0
 800db2c:	4618      	mov	r0, r3
 800db2e:	f007 fbb1 	bl	8015294 <memset>
    map_array['0'] = ICON_LOGIC_LOW;
 800db32:	2300      	movs	r3, #0
 800db34:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    map_array['1'] = ICON_LOGIC_HIGH;
 800db38:	2301      	movs	r3, #1
 800db3a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    map_array['L'] = ICON_CLOCK_LOW;
 800db3e:	2302      	movs	r3, #2
 800db40:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
    map_array['H'] = ICON_CLOCK_HIGH;
 800db44:	2303      	movs	r3, #3
 800db46:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    map_array['V'] = ICON_LOGIC_NONE;
 800db4a:	2304      	movs	r3, #4
 800db4c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    map_array['G'] = ICON_LOGIC_NONE;
 800db50:	2304      	movs	r3, #4
 800db52:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].icon_result = malloc(num_case * num_pin);
 800db56:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800db5a:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800db5e:	fb02 f303 	mul.w	r3, r2, r3
 800db62:	461a      	mov	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800db6a:	461c      	mov	r4, r3
 800db6c:	4610      	mov	r0, r2
 800db6e:	f005 fb29 	bl	80131c4 <malloc>
 800db72:	4603      	mov	r3, r0
 800db74:	4619      	mov	r1, r3
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800db7c:	fb04 f303 	mul.w	r3, r4, r3
 800db80:	4413      	add	r3, r2
 800db82:	3364      	adds	r3, #100	@ 0x64
 800db84:	6019      	str	r1, [r3, #0]

    /* Convert data to icon result */
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800db86:	2300      	movs	r3, #0
 800db88:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800db8c:	e01f      	b.n	800dbce <Screen_GetIcon_Result+0x104>
        screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[i] = map_array[(uint8_t)result[i]];
 800db8e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800db92:	683a      	ldr	r2, [r7, #0]
 800db94:	4413      	add	r3, r2
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	4619      	mov	r1, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800dba0:	4618      	mov	r0, r3
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800dba8:	fb00 f303 	mul.w	r3, r0, r3
 800dbac:	4413      	add	r3, r2
 800dbae:	3364      	adds	r3, #100	@ 0x64
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dbb6:	4413      	add	r3, r2
 800dbb8:	f101 0290 	add.w	r2, r1, #144	@ 0x90
 800dbbc:	443a      	add	r2, r7
 800dbbe:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800dbc2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800dbc4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dbc8:	3301      	adds	r3, #1
 800dbca:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800dbce:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800dbd2:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800dbd6:	f897 108d 	ldrb.w	r1, [r7, #141]	@ 0x8d
 800dbda:	fb01 f303 	mul.w	r3, r1, r3
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	dbd5      	blt.n	800db8e <Screen_GetIcon_Result+0xc4>
    }
}
 800dbe2:	bf00      	nop
 800dbe4:	bf00      	nop
 800dbe6:	3794      	adds	r7, #148	@ 0x94
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd90      	pop	{r4, r7, pc}

0800dbec <Screen_Init_Variable>:

static void Screen_Init_Variable(Screen_t *const obj_screen) {
 800dbec:	b5b0      	push	{r4, r5, r7, lr}
 800dbee:	b090      	sub	sp, #64	@ 0x40
 800dbf0:	af02      	add	r7, sp, #8
 800dbf2:	6078      	str	r0, [r7, #4]
    obj_screen->curr_device = DEVICE_1;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 24d9 	strb.w	r2, [r3, #1241]	@ 0x4d9
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));

     obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4aba      	ldr	r2, [pc, #744]	@ (800dee8 <Screen_Init_Variable+0x2fc>)
 800dc00:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
     obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4ab9      	ldr	r2, [pc, #740]	@ (800deec <Screen_Init_Variable+0x300>)
 800dc08:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
     obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4ab8      	ldr	r2, [pc, #736]	@ (800def0 <Screen_Init_Variable+0x304>)
 800dc10:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
     obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4ab7      	ldr	r2, [pc, #732]	@ (800def4 <Screen_Init_Variable+0x308>)
 800dc18:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800dc1c:	2014      	movs	r0, #20
 800dc1e:	f005 fad1 	bl	80131c4 <malloc>
 800dc22:	4603      	mov	r3, r0
 800dc24:	461a      	mov	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800dc2c:	2014      	movs	r0, #20
 800dc2e:	f005 fac9 	bl	80131c4 <malloc>
 800dc32:	4603      	mov	r3, r0
 800dc34:	461a      	mov	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800dc3c:	2014      	movs	r0, #20
 800dc3e:	f005 fac1 	bl	80131c4 <malloc>
 800dc42:	4603      	mov	r3, r0
 800dc44:	461a      	mov	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800dc4c:	2014      	movs	r0, #20
 800dc4e:	f005 fab9 	bl	80131c4 <malloc>
 800dc52:	4603      	mov	r3, r0
 800dc54:	461a      	mov	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8c3 2468 	str.w	r2, [r3, #1128]	@ 0x468

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800dc5c:	2014      	movs	r0, #20
 800dc5e:	f005 fab1 	bl	80131c4 <malloc>
 800dc62:	4603      	mov	r3, r0
 800dc64:	461a      	mov	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800dc6c:	2014      	movs	r0, #20
 800dc6e:	f005 faa9 	bl	80131c4 <malloc>
 800dc72:	4603      	mov	r3, r0
 800dc74:	461a      	mov	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800dc7c:	2014      	movs	r0, #20
 800dc7e:	f005 faa1 	bl	80131c4 <malloc>
 800dc82:	4603      	mov	r3, r0
 800dc84:	461a      	mov	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800dc8c:	2014      	movs	r0, #20
 800dc8e:	f005 fa99 	bl	80131c4 <malloc>
 800dc92:	4603      	mov	r3, r0
 800dc94:	461a      	mov	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470

    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800dc9c:	2002      	movs	r0, #2
 800dc9e:	f005 fa91 	bl	80131c4 <malloc>
 800dca2:	4603      	mov	r3, r0
 800dca4:	461a      	mov	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800dcac:	2002      	movs	r0, #2
 800dcae:	f005 fa89 	bl	80131c4 <malloc>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800dcbc:	2002      	movs	r0, #2
 800dcbe:	f005 fa81 	bl	80131c4 <malloc>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800dccc:	2002      	movs	r0, #2
 800dcce:	f005 fa79 	bl	80131c4 <malloc>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8c3 2478 	str.w	r2, [r3, #1144]	@ 0x478

    uint8_t buffer[TOTAL_ONE_PROGRAM_TEST_LEN];
    for (uint8_t i = 0; i < 4; i++) {
 800dcdc:	2300      	movs	r3, #0
 800dcde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dce2:	e043      	b.n	800dd6c <Screen_Init_Variable+0x180>
        AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(i),&buffer[0],TOTAL_ONE_PROGRAM_TEST_LEN);
 800dce4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	461a      	mov	r2, r3
 800dcec:	0052      	lsls	r2, r2, #1
 800dcee:	4413      	add	r3, r2
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	00d2      	lsls	r2, r2, #3
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	005b      	lsls	r3, r3, #1
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	3343      	adds	r3, #67	@ 0x43
 800dcfc:	b299      	uxth	r1, r3
 800dcfe:	f107 020c 	add.w	r2, r7, #12
 800dd02:	232a      	movs	r3, #42	@ 0x2a
 800dd04:	487c      	ldr	r0, [pc, #496]	@ (800def8 <Screen_Init_Variable+0x30c>)
 800dd06:	f003 fcde 	bl	80116c6 <AT24Cxx_read_buffer>
        sscanf((char *)buffer, "%[^,],%[^,],%[^,\n]",
 800dd0a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800dd0e:	6879      	ldr	r1, [r7, #4]
 800dd10:	4613      	mov	r3, r2
 800dd12:	005b      	lsls	r3, r3, #1
 800dd14:	4413      	add	r3, r2
 800dd16:	011b      	lsls	r3, r3, #4
 800dd18:	440b      	add	r3, r1
 800dd1a:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800dd1e:	681c      	ldr	r4, [r3, #0]
 800dd20:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800dd24:	6879      	ldr	r1, [r7, #4]
 800dd26:	4613      	mov	r3, r2
 800dd28:	005b      	lsls	r3, r3, #1
 800dd2a:	4413      	add	r3, r2
 800dd2c:	011b      	lsls	r3, r3, #4
 800dd2e:	440b      	add	r3, r1
 800dd30:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800dd34:	681d      	ldr	r5, [r3, #0]
 800dd36:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800dd3a:	6879      	ldr	r1, [r7, #4]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	4413      	add	r3, r2
 800dd42:	011b      	lsls	r3, r3, #4
 800dd44:	440b      	add	r3, r1
 800dd46:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f107 000c 	add.w	r0, r7, #12
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	462b      	mov	r3, r5
 800dd54:	4622      	mov	r2, r4
 800dd56:	4969      	ldr	r1, [pc, #420]	@ (800defc <Screen_Init_Variable+0x310>)
 800dd58:	f007 f986 	bl	8015068 <siscanf>
        // memcpy(data_send_esp32->data,"p",1);
        // memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send));
        // data_send_esp32->len = strlen(buffer_send) + 1;
        // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));

        HAL_Delay(100);
 800dd5c:	2064      	movs	r0, #100	@ 0x64
 800dd5e:	f7f4 fc29 	bl	80025b4 <HAL_Delay>
    for (uint8_t i = 0; i < 4; i++) {
 800dd62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd66:	3301      	adds	r3, #1
 800dd68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dd6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d9b7      	bls.n	800dce4 <Screen_Init_Variable+0xf8>
    }

    memcpy(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,"IC TESTER 1",strlen("IC TESTER 1"));
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	334d      	adds	r3, #77	@ 0x4d
 800dd78:	220b      	movs	r2, #11
 800dd7a:	4961      	ldr	r1, [pc, #388]	@ (800df00 <Screen_Init_Variable+0x314>)
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f007 fbd2 	bl	8015526 <memcpy>
    memcpy(obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester,"IC TESTER 2",strlen("IC TESTER 2"));
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f203 137d 	addw	r3, r3, #381	@ 0x17d
 800dd88:	220b      	movs	r2, #11
 800dd8a:	495e      	ldr	r1, [pc, #376]	@ (800df04 <Screen_Init_Variable+0x318>)
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f007 fbca 	bl	8015526 <memcpy>
    memcpy(obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester,"IC TESTER 3",strlen("IC TESTER 3"));
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f203 23ad 	addw	r3, r3, #685	@ 0x2ad
 800dd98:	220b      	movs	r2, #11
 800dd9a:	495b      	ldr	r1, [pc, #364]	@ (800df08 <Screen_Init_Variable+0x31c>)
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f007 fbc2 	bl	8015526 <memcpy>

    memcpy(obj_screen->Wifi_setting.Name_Wifi,"Wifi TEST 1",strlen("Wifi TEST 1"));
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 800dda8:	220b      	movs	r2, #11
 800ddaa:	4958      	ldr	r1, [pc, #352]	@ (800df0c <Screen_Init_Variable+0x320>)
 800ddac:	4618      	mov	r0, r3
 800ddae:	f007 fbba 	bl	8015526 <memcpy>
    memcpy(obj_screen->Wifi_setting.Password_Wifi,"PASSword 1234",strlen("PASSword 1234"));
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f203 43b6 	addw	r3, r3, #1206	@ 0x4b6
 800ddb8:	220d      	movs	r2, #13
 800ddba:	4955      	ldr	r1, [pc, #340]	@ (800df10 <Screen_Init_Variable+0x324>)
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f007 fbb2 	bl	8015526 <memcpy>

    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2265      	movs	r2, #101	@ 0x65
 800ddc6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2265      	movs	r2, #101	@ 0x65
 800ddce:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2265      	movs	r2, #101	@ 0x65
 800ddd6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

    obj_screen->IC_Testerx[DEVICE_1].state = false;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    obj_screen->IC_Testerx[DEVICE_2].state = false;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
    obj_screen->IC_Testerx[DEVICE_3].state = false;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f883 22ac 	strb.w	r2, [r3, #684]	@ 0x2ac

    obj_screen->IC_Testerx[DEVICE_1].curr_num_ic = 0;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8d3 43d8 	ldr.w	r4, [r3, #984]	@ 0x3d8
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800de06:	4618      	mov	r0, r3
 800de08:	f7f2 f9ac 	bl	8000164 <strlen>
 800de0c:	4603      	mov	r3, r0
 800de0e:	b29b      	uxth	r3, r3
 800de10:	4622      	mov	r2, r4
 800de12:	f249 2128 	movw	r1, #37416	@ 0x9228
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f003 fd7c 	bl	8011914 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 4408 	ldr.w	r4, [r3, #1032]	@ 0x408
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800de28:	4618      	mov	r0, r3
 800de2a:	f7f2 f99b 	bl	8000164 <strlen>
 800de2e:	4603      	mov	r3, r0
 800de30:	b29b      	uxth	r3, r3
 800de32:	4622      	mov	r2, r4
 800de34:	f249 2150 	movw	r1, #37456	@ 0x9250
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f003 fd6b 	bl	8011914 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 4438 	ldr.w	r4, [r3, #1080]	@ 0x438
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 3438 	ldr.w	r3, [r3, #1080]	@ 0x438
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7f2 f98a 	bl	8000164 <strlen>
 800de50:	4603      	mov	r3, r0
 800de52:	b29b      	uxth	r3, r3
 800de54:	4622      	mov	r2, r4
 800de56:	f249 2178 	movw	r1, #37496	@ 0x9278
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f003 fd5a 	bl	8011914 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 4468 	ldr.w	r4, [r3, #1128]	@ 0x468
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 3468 	ldr.w	r3, [r3, #1128]	@ 0x468
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7f2 f979 	bl	8000164 <strlen>
 800de72:	4603      	mov	r3, r0
 800de74:	b29b      	uxth	r3, r3
 800de76:	4622      	mov	r2, r4
 800de78:	f249 21a0 	movw	r1, #37536	@ 0x92a0
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f003 fd49 	bl	8011914 <DWIN_SetText>

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f103 044d 	add.w	r4, r3, #77	@ 0x4d
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	334d      	adds	r3, #77	@ 0x4d
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7f2 f969 	bl	8000164 <strlen>
 800de92:	4603      	mov	r3, r0
 800de94:	b29b      	uxth	r3, r3
 800de96:	4622      	mov	r2, r4
 800de98:	f249 3150 	movw	r1, #37712	@ 0x9350
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f003 fd39 	bl	8011914 <DWIN_SetText>

    // obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
    // obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    obj_screen->Screen_keyboard.Index_String = 0;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    Screen_ShowData_Mainpage(obj_screen,PROGRAM_TEST1);
 800deb2:	2100      	movs	r1, #0
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 f82d 	bl	800df14 <Screen_ShowData_Mainpage>
    DWIN_SetVariable_Icon((Dwin_t *)obj_screen,VP_ICON_ON_OFF,obj_screen->IC_Testerx[obj_screen->curr_device].state);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800dec0:	4619      	mov	r1, r3
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800dec8:	fb01 f303 	mul.w	r3, r1, r3
 800decc:	4413      	add	r3, r2
 800dece:	334c      	adds	r3, #76	@ 0x4c
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	461a      	mov	r2, r3
 800ded4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f003 fd9d 	bl	8011a18 <DWIN_SetVariable_Icon>
}
 800dede:	bf00      	nop
 800dee0:	3738      	adds	r7, #56	@ 0x38
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bdb0      	pop	{r4, r5, r7, pc}
 800dee6:	bf00      	nop
 800dee8:	08018498 	.word	0x08018498
 800deec:	080184b0 	.word	0x080184b0
 800def0:	080184c8 	.word	0x080184c8
 800def4:	080184e0 	.word	0x080184e0
 800def8:	2000132c 	.word	0x2000132c
 800defc:	080184f8 	.word	0x080184f8
 800df00:	0801850c 	.word	0x0801850c
 800df04:	08018518 	.word	0x08018518
 800df08:	08018524 	.word	0x08018524
 800df0c:	08018530 	.word	0x08018530
 800df10:	0801853c 	.word	0x0801853c

0800df14 <Screen_ShowData_Mainpage>:

static void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
 800df14:	b5b0      	push	{r4, r5, r7, lr}
 800df16:	b090      	sub	sp, #64	@ 0x40
 800df18:	af02      	add	r7, sp, #8
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	460b      	mov	r3, r1
 800df1e:	70fb      	strb	r3, [r7, #3]
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    // uint8_t index_program = screen_obj.IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
 800df20:	78fa      	ldrb	r2, [r7, #3]
 800df22:	6879      	ldr	r1, [r7, #4]
 800df24:	4613      	mov	r3, r2
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	4413      	add	r3, r2
 800df2a:	011b      	lsls	r3, r3, #4
 800df2c:	440b      	add	r3, r1
 800df2e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4618      	mov	r0, r3
 800df36:	f005 f940 	bl	80131ba <atoi>
 800df3a:	4603      	mov	r3, r0
 800df3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800df40:	78fa      	ldrb	r2, [r7, #3]
 800df42:	6879      	ldr	r1, [r7, #4]
 800df44:	4613      	mov	r3, r2
 800df46:	005b      	lsls	r3, r3, #1
 800df48:	4413      	add	r3, r2
 800df4a:	011b      	lsls	r3, r3, #4
 800df4c:	440b      	add	r3, r1
 800df4e:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4618      	mov	r0, r3
 800df56:	f7f2 f905 	bl	8000164 <strlen>
 800df5a:	4603      	mov	r3, r0
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	3309      	adds	r3, #9
 800df60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t size_Description_IC = strlen("IC Description: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC);
 800df64:	78fa      	ldrb	r2, [r7, #3]
 800df66:	6879      	ldr	r1, [r7, #4]
 800df68:	4613      	mov	r3, r2
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	4413      	add	r3, r2
 800df6e:	011b      	lsls	r3, r3, #4
 800df70:	440b      	add	r3, r1
 800df72:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7f2 f8f3 	bl	8000164 <strlen>
 800df7e:	4603      	mov	r3, r0
 800df80:	b2db      	uxtb	r3, r3
 800df82:	3310      	adds	r3, #16
 800df84:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    // uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800df88:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800df8c:	3301      	adds	r3, #1
 800df8e:	4618      	mov	r0, r3
 800df90:	f005 f918 	bl	80131c4 <malloc>
 800df94:	4603      	mov	r3, r0
 800df96:	633b      	str	r3, [r7, #48]	@ 0x30
    char *Text_Description_IC = malloc(size_Description_IC + 1);
 800df98:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800df9c:	3301      	adds	r3, #1
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f005 f910 	bl	80131c4 <malloc>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // char *Text_Num_IC = malloc(size_Num_IC + 1);

    strcpy(Text_Name_IC,"IC Name: ");
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfaa:	4949      	ldr	r1, [pc, #292]	@ (800e0d0 <Screen_ShowData_Mainpage+0x1bc>)
 800dfac:	461a      	mov	r2, r3
 800dfae:	460b      	mov	r3, r1
 800dfb0:	cb03      	ldmia	r3!, {r0, r1}
 800dfb2:	6010      	str	r0, [r2, #0]
 800dfb4:	6051      	str	r1, [r2, #4]
 800dfb6:	881b      	ldrh	r3, [r3, #0]
 800dfb8:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 800dfba:	78fa      	ldrb	r2, [r7, #3]
 800dfbc:	6879      	ldr	r1, [r7, #4]
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	4413      	add	r3, r2
 800dfc4:	011b      	lsls	r3, r3, #4
 800dfc6:	440b      	add	r3, r1
 800dfc8:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4619      	mov	r1, r3
 800dfd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfd2:	f007 f967 	bl	80152a4 <strcat>
    strcpy(Text_Description_IC,"IC Description: ");
 800dfd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd8:	4a3e      	ldr	r2, [pc, #248]	@ (800e0d4 <Screen_ShowData_Mainpage+0x1c0>)
 800dfda:	461d      	mov	r5, r3
 800dfdc:	4614      	mov	r4, r2
 800dfde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfe0:	6028      	str	r0, [r5, #0]
 800dfe2:	6069      	str	r1, [r5, #4]
 800dfe4:	60aa      	str	r2, [r5, #8]
 800dfe6:	60eb      	str	r3, [r5, #12]
 800dfe8:	7823      	ldrb	r3, [r4, #0]
 800dfea:	742b      	strb	r3, [r5, #16]
    strcat(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC);
 800dfec:	78fa      	ldrb	r2, [r7, #3]
 800dfee:	6879      	ldr	r1, [r7, #4]
 800dff0:	4613      	mov	r3, r2
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	4413      	add	r3, r2
 800dff6:	011b      	lsls	r3, r3, #4
 800dff8:	440b      	add	r3, r1
 800dffa:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4619      	mov	r1, r3
 800e002:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e004:	f007 f94e 	bl	80152a4 <strcat>
    // strcpy(Text_Num_IC,"Number of ICs: ");
    // strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);

    memset(a_select_program,1,MAX_PROGRAM_TEST);
 800e008:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e00c:	2204      	movs	r2, #4
 800e00e:	2101      	movs	r1, #1
 800e010:	4618      	mov	r0, r3
 800e012:	f007 f93f 	bl	8015294 <memset>
    // Get the program selected
    a_select_program[index_program] = 0 ;
 800e016:	78fb      	ldrb	r3, [r7, #3]
 800e018:	3338      	adds	r3, #56	@ 0x38
 800e01a:	443b      	add	r3, r7
 800e01c:	2200      	movs	r2, #0
 800e01e:	f803 2c10 	strb.w	r2, [r3, #-16]
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800e028:	4619      	mov	r1, r3
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e030:	fb01 f303 	mul.w	r3, r1, r3
 800e034:	4413      	add	r3, r2
 800e036:	334b      	adds	r3, #75	@ 0x4b
 800e038:	78fa      	ldrb	r2, [r7, #3]
 800e03a:	701a      	strb	r2, [r3, #0]

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
 800e03c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e040:	2304      	movs	r3, #4
 800e042:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f003 fd13 	bl	8011a72 <DWIN_SetArray_Icon>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,Text_Name_IC,size_Name_IC);
 800e04c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e050:	b29b      	uxth	r3, r3
 800e052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e054:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f003 fc5b 	bl	8011914 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,Text_Description_IC,size_Description_IC);
 800e05e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800e062:	b29b      	uxth	r3, r3
 800e064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e066:	f249 1150 	movw	r1, #37200	@ 0x9150
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f003 fc52 	bl	8011914 <DWIN_SetText>

    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"Number of ICs: %d / %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic,num_ic);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800e076:	4619      	mov	r1, r3
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e07e:	fb01 f303 	mul.w	r3, r1, r3
 800e082:	4413      	add	r3, r2
 800e084:	334a      	adds	r3, #74	@ 0x4a
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	461a      	mov	r2, r3
 800e08a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e08e:	f107 0008 	add.w	r0, r7, #8
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	4613      	mov	r3, r2
 800e096:	4a10      	ldr	r2, [pc, #64]	@ (800e0d8 <Screen_ShowData_Mainpage+0x1c4>)
 800e098:	211e      	movs	r1, #30
 800e09a:	f006 ff8d 	bl	8014fb8 <sniprintf>
//    uint8_t len = strlen(ShowCase_String);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
 800e09e:	f107 0308 	add.w	r3, r7, #8
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7f2 f85e 	bl	8000164 <strlen>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	f107 0208 	add.w	r2, r7, #8
 800e0b0:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f003 fc2d 	bl	8011914 <DWIN_SetText>

    /* free malloc */
    free(Text_Name_IC);
 800e0ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0bc:	f005 f88a 	bl	80131d4 <free>
    free(Text_Description_IC);
 800e0c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0c2:	f005 f887 	bl	80131d4 <free>

}
 800e0c6:	bf00      	nop
 800e0c8:	3738      	adds	r7, #56	@ 0x38
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bdb0      	pop	{r4, r5, r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	0801842c 	.word	0x0801842c
 800e0d4:	0801854c 	.word	0x0801854c
 800e0d8:	08018560 	.word	0x08018560

0800e0dc <Screen_SetInfo_Pin>:

static void Screen_SetInfo_Pin(Screen_t *const screen_obj) {
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b086      	sub	sp, #24
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e0f2:	fb01 f303 	mul.w	r3, r1, r3
 800e0f6:	4413      	add	r3, r2
 800e0f8:	334b      	adds	r3, #75	@ 0x4b
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	73fb      	strb	r3, [r7, #15]
    uint16_t Address_VP = VP_Name_Pin;
 800e0fe:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 800e102:	82fb      	strh	r3, [r7, #22]
    char *data_copy = malloc(screen_obj->Program_Testx[index_program].data_pin_len + 1);
 800e104:	7bfa      	ldrb	r2, [r7, #15]
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	4613      	mov	r3, r2
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	4413      	add	r3, r2
 800e10e:	011b      	lsls	r3, r3, #4
 800e110:	440b      	add	r3, r1
 800e112:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800e116:	881b      	ldrh	r3, [r3, #0]
 800e118:	3301      	adds	r3, #1
 800e11a:	4618      	mov	r0, r3
 800e11c:	f005 f852 	bl	80131c4 <malloc>
 800e120:	4603      	mov	r3, r0
 800e122:	60bb      	str	r3, [r7, #8]
    memcpy(data_copy,screen_obj->Program_Testx[index_program].data_pin,screen_obj->Program_Testx[index_program].data_pin_len);
 800e124:	7bfa      	ldrb	r2, [r7, #15]
 800e126:	6879      	ldr	r1, [r7, #4]
 800e128:	4613      	mov	r3, r2
 800e12a:	005b      	lsls	r3, r3, #1
 800e12c:	4413      	add	r3, r2
 800e12e:	011b      	lsls	r3, r3, #4
 800e130:	440b      	add	r3, r1
 800e132:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800e136:	6818      	ldr	r0, [r3, #0]
 800e138:	7bfa      	ldrb	r2, [r7, #15]
 800e13a:	6879      	ldr	r1, [r7, #4]
 800e13c:	4613      	mov	r3, r2
 800e13e:	005b      	lsls	r3, r3, #1
 800e140:	4413      	add	r3, r2
 800e142:	011b      	lsls	r3, r3, #4
 800e144:	440b      	add	r3, r1
 800e146:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800e14a:	881b      	ldrh	r3, [r3, #0]
 800e14c:	461a      	mov	r2, r3
 800e14e:	4601      	mov	r1, r0
 800e150:	68b8      	ldr	r0, [r7, #8]
 800e152:	f007 f9e8 	bl	8015526 <memcpy>
    char *temp_buf = strtok(data_copy,"\n");
 800e156:	4911      	ldr	r1, [pc, #68]	@ (800e19c <Screen_SetInfo_Pin+0xc0>)
 800e158:	68b8      	ldr	r0, [r7, #8]
 800e15a:	f007 f8eb 	bl	8015334 <strtok>
 800e15e:	6138      	str	r0, [r7, #16]
    while (temp_buf != NULL) {
 800e160:	e011      	b.n	800e186 <Screen_SetInfo_Pin+0xaa>
        DWIN_SetText((Dwin_t *)screen_obj,Address_VP,temp_buf,strlen(temp_buf));
 800e162:	6938      	ldr	r0, [r7, #16]
 800e164:	f7f1 fffe 	bl	8000164 <strlen>
 800e168:	4603      	mov	r3, r0
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	8af9      	ldrh	r1, [r7, #22]
 800e16e:	693a      	ldr	r2, [r7, #16]
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f003 fbcf 	bl	8011914 <DWIN_SetText>
        // sprintf(text_show,"%d",temp_buf);
        temp_buf = strtok(NULL,"\n");
 800e176:	4909      	ldr	r1, [pc, #36]	@ (800e19c <Screen_SetInfo_Pin+0xc0>)
 800e178:	2000      	movs	r0, #0
 800e17a:	f007 f8db 	bl	8015334 <strtok>
 800e17e:	6138      	str	r0, [r7, #16]
        Address_VP = Address_VP + 0x10;
 800e180:	8afb      	ldrh	r3, [r7, #22]
 800e182:	3310      	adds	r3, #16
 800e184:	82fb      	strh	r3, [r7, #22]
    while (temp_buf != NULL) {
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1ea      	bne.n	800e162 <Screen_SetInfo_Pin+0x86>
    }
    free(data_copy);
 800e18c:	68b8      	ldr	r0, [r7, #8]
 800e18e:	f005 f821 	bl	80131d4 <free>
}
 800e192:	bf00      	nop
 800e194:	3718      	adds	r7, #24
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	08018578 	.word	0x08018578

0800e1a0 <get_data_testing_ic>:

#pragma endregion FUNCTION SCREEN


static void get_data_testing_ic(char *searchName,Program_Test_t *pdata_test) {
 800e1a0:	b590      	push	{r4, r7, lr}
 800e1a2:	b0cf      	sub	sp, #316	@ 0x13c
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e1ae:	6018      	str	r0, [r3, #0]
 800e1b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1b4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e1b8:	6019      	str	r1, [r3, #0]
    uint8_t num_direc_used = 0;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    uint8_t *temp_buf = (uint8_t *)malloc(MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800e1c0:	20f0      	movs	r0, #240	@ 0xf0
 800e1c2:	f004 ffff 	bl	80131c4 <malloc>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    memset(temp_buf,0,MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800e1cc:	22f0      	movs	r2, #240	@ 0xf0
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800e1d4:	f007 f85e 	bl	8015294 <memset>
    direc_EEPROM_t direc_array[MAX_DIRECTORY_USED]; /* array store directory */
    direc_EEPROM_t *pDirectory = NULL;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    uint16_t mem_addr;
    uint16_t buf_length;
    /* get num directory used */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&temp_buf[0],1);
 800e1de:	2301      	movs	r3, #1
 800e1e0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800e1e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e1e8:	48d3      	ldr	r0, [pc, #844]	@ (800e538 <get_data_testing_ic+0x398>)
 800e1ea:	f003 fa6c 	bl	80116c6 <AT24Cxx_read_buffer>
    num_direc_used = temp_buf[0];
 800e1ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    /* read directory info */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC,temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800e1f8:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	461a      	mov	r2, r3
 800e200:	0052      	lsls	r2, r2, #1
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	b29b      	uxth	r3, r3
 800e208:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800e20c:	f240 2102 	movw	r1, #514	@ 0x202
 800e210:	48c9      	ldr	r0, [pc, #804]	@ (800e538 <get_data_testing_ic+0x398>)
 800e212:	f003 fa58 	bl	80116c6 <AT24Cxx_read_buffer>
    memcpy(&direc_array[0],temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800e216:	f897 2132 	ldrb.w	r2, [r7, #306]	@ 0x132
 800e21a:	4613      	mov	r3, r2
 800e21c:	005b      	lsls	r3, r3, #1
 800e21e:	4413      	add	r3, r2
 800e220:	009b      	lsls	r3, r3, #2
 800e222:	461a      	mov	r2, r3
 800e224:	f107 030c 	add.w	r3, r7, #12
 800e228:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800e22c:	4618      	mov	r0, r3
 800e22e:	f007 f97a 	bl	8015526 <memcpy>
    free(temp_buf);
 800e232:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800e236:	f004 ffcd 	bl	80131d4 <free>
    /* find info of search name ic */
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800e23a:	2300      	movs	r3, #0
 800e23c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 800e240:	e02c      	b.n	800e29c <get_data_testing_ic+0xfc>
        if (memcmp(searchName,direc_array[i].nameIC,strlen(searchName)) == 0) {
 800e242:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800e246:	f107 010c 	add.w	r1, r7, #12
 800e24a:	4613      	mov	r3, r2
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	4413      	add	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	18cc      	adds	r4, r1, r3
 800e254:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e258:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e25c:	6818      	ldr	r0, [r3, #0]
 800e25e:	f7f1 ff81 	bl	8000164 <strlen>
 800e262:	4602      	mov	r2, r0
 800e264:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e268:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e26c:	4621      	mov	r1, r4
 800e26e:	6818      	ldr	r0, [r3, #0]
 800e270:	f007 f800 	bl	8015274 <memcmp>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d10b      	bne.n	800e292 <get_data_testing_ic+0xf2>
            pDirectory = &direc_array[i];
 800e27a:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800e27e:	f107 010c 	add.w	r1, r7, #12
 800e282:	4613      	mov	r3, r2
 800e284:	005b      	lsls	r3, r3, #1
 800e286:	4413      	add	r3, r2
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	440b      	add	r3, r1
 800e28c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            break;
 800e290:	e00a      	b.n	800e2a8 <get_data_testing_ic+0x108>
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800e292:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800e296:	3301      	adds	r3, #1
 800e298:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 800e29c:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800e2a0:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d3cc      	bcc.n	800e242 <get_data_testing_ic+0xa2>
        }
    }
    /* NOT FOUND NAME IC IN EEPROM */ 
    if (pDirectory == NULL) {
 800e2a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d103      	bne.n	800e2b8 <get_data_testing_ic+0x118>
        printf("NOT FOUND NAME IC IN EEPROM\n");
 800e2b0:	48a2      	ldr	r0, [pc, #648]	@ (800e53c <get_data_testing_ic+0x39c>)
 800e2b2:	f006 fe79 	bl	8014fa8 <puts>
        return;
 800e2b6:	e13a      	b.n	800e52e <get_data_testing_ic+0x38e>
    } 
    mem_addr = (uint16_t)((pDirectory->addr[0] << 8) | pDirectory->addr[1]);
 800e2b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2bc:	7a1b      	ldrb	r3, [r3, #8]
 800e2be:	b21b      	sxth	r3, r3
 800e2c0:	021b      	lsls	r3, r3, #8
 800e2c2:	b21a      	sxth	r2, r3
 800e2c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2c8:	7a5b      	ldrb	r3, [r3, #9]
 800e2ca:	b21b      	sxth	r3, r3
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	b21b      	sxth	r3, r3
 800e2d0:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    buf_length = (uint16_t)((pDirectory->length[0] << 8) | pDirectory->length[1]);
 800e2d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2d8:	7a9b      	ldrb	r3, [r3, #10]
 800e2da:	b21b      	sxth	r3, r3
 800e2dc:	021b      	lsls	r3, r3, #8
 800e2de:	b21a      	sxth	r2, r3
 800e2e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2e4:	7adb      	ldrb	r3, [r3, #11]
 800e2e6:	b21b      	sxth	r3, r3
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	b21b      	sxth	r3, r3
 800e2ec:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    temp_buf = (uint8_t *)malloc(buf_length);
 800e2f0:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f004 ff65 	bl	80131c4 <malloc>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    AT24Cxx_read_buffer(&eeprom_ob,mem_addr,temp_buf,buf_length);
 800e300:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800e304:	f8b7 112a 	ldrh.w	r1, [r7, #298]	@ 0x12a
 800e308:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800e30c:	488a      	ldr	r0, [pc, #552]	@ (800e538 <get_data_testing_ic+0x398>)
 800e30e:	f003 f9da 	bl	80116c6 <AT24Cxx_read_buffer>
    // Find the first pipe separator
    uint8_t *first_pipe = memchr(temp_buf, '|', buf_length);
 800e312:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800e316:	461a      	mov	r2, r3
 800e318:	217c      	movs	r1, #124	@ 0x7c
 800e31a:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800e31e:	f007 f8f4 	bl	801550a <memchr>
 800e322:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (!first_pipe) return;
 800e326:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f000 80fa 	beq.w	800e524 <get_data_testing_ic+0x384>
    
    // Extract pin count
    int pin_count_len = first_pipe - temp_buf;
 800e330:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800e334:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    char* pin_count_str = malloc(pin_count_len + 1);
 800e33e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e342:	3301      	adds	r3, #1
 800e344:	4618      	mov	r0, r3
 800e346:	f004 ff3d 	bl	80131c4 <malloc>
 800e34a:	4603      	mov	r3, r0
 800e34c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    strncpy(pin_count_str, temp_buf, pin_count_len);
 800e350:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e354:	461a      	mov	r2, r3
 800e356:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800e35a:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800e35e:	f006 ffd5 	bl	801530c <strncpy>
    pin_count_str[pin_count_len] = '\0';
 800e362:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e366:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e36a:	4413      	add	r3, r2
 800e36c:	2200      	movs	r2, #0
 800e36e:	701a      	strb	r2, [r3, #0]
    pdata_test->num_pin = atoi(pin_count_str);
 800e370:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800e374:	f004 ff21 	bl	80131ba <atoi>
 800e378:	4603      	mov	r3, r0
 800e37a:	b2da      	uxtb	r2, r3
 800e37c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e380:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	775a      	strb	r2, [r3, #29]
    free(pin_count_str);
 800e388:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800e38c:	f004 ff22 	bl	80131d4 <free>
    
    // Find the second pipe separator
    int remaining_len = buf_length - (first_pipe - temp_buf + 1);
 800e390:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 800e394:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800e398:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e39c:	1acb      	subs	r3, r1, r3
 800e39e:	3301      	adds	r3, #1
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t *second_pipe = memchr(first_pipe + 1, '|', remaining_len);
 800e3a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e3b0:	217c      	movs	r1, #124	@ 0x7c
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f007 f8a9 	bl	801550a <memchr>
 800e3b8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (!second_pipe) return;
 800e3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 80b1 	beq.w	800e528 <get_data_testing_ic+0x388>
    
    // Extract test count
    int test_count_len = second_pipe - (first_pipe + 1);
 800e3c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    char* test_count_str = malloc(test_count_len + 1);
 800e3d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e3da:	3301      	adds	r3, #1
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f004 fef1 	bl	80131c4 <malloc>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    strncpy(test_count_str, first_pipe + 1, test_count_len);
 800e3e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800e3f8:	f006 ff88 	bl	801530c <strncpy>
    test_count_str[test_count_len] = '\0';
 800e3fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e400:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e404:	4413      	add	r3, r2
 800e406:	2200      	movs	r2, #0
 800e408:	701a      	strb	r2, [r3, #0]
    pdata_test->num_case= atoi(test_count_str);
 800e40a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800e40e:	f004 fed4 	bl	80131ba <atoi>
 800e412:	4603      	mov	r3, r0
 800e414:	b2da      	uxtb	r2, r3
 800e416:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e41a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	771a      	strb	r2, [r3, #28]
    free(test_count_str);
 800e422:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800e426:	f004 fed5 	bl	80131d4 <free>
    
    // Find the third pipe separator using memchr (searches through \0)
    remaining_len = buf_length - (second_pipe - temp_buf + 1);
 800e42a:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 800e42e:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800e432:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e436:	1acb      	subs	r3, r1, r3
 800e438:	3301      	adds	r3, #1
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t *third_pipe = memchr(second_pipe + 1, '|', remaining_len);
 800e440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e444:	3301      	adds	r3, #1
 800e446:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e44a:	217c      	movs	r1, #124	@ 0x7c
 800e44c:	4618      	mov	r0, r3
 800e44e:	f007 f85c 	bl	801550a <memchr>
 800e452:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    if (!third_pipe) return;
 800e456:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d066      	beq.n	800e52c <get_data_testing_ic+0x38c>
    
    // Extract pin data (between second and third pipe)
    int pin_data_len = third_pipe - (second_pipe + 1);
 800e45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e462:	3301      	adds	r3, #1
 800e464:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    pdata_test->data_pin = malloc(pin_data_len);
 800e46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e472:	4618      	mov	r0, r3
 800e474:	f004 fea6 	bl	80131c4 <malloc>
 800e478:	4603      	mov	r3, r0
 800e47a:	461a      	mov	r2, r3
 800e47c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e480:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	621a      	str	r2, [r3, #32]
    memcpy(pdata_test->data_pin, second_pipe + 1, pin_data_len);
 800e488:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e48c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6a18      	ldr	r0, [r3, #32]
 800e494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e498:	3301      	adds	r3, #1
 800e49a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e49e:	4619      	mov	r1, r3
 800e4a0:	f007 f841 	bl	8015526 <memcpy>
    pdata_test->data_pin_len = pin_data_len;
 800e4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e4ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    
    // Extract test data (after third pipe)
    uint8_t *test_start = third_pipe + 1;
 800e4b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    int test_data_len = buf_length - (test_start - temp_buf);
 800e4c0:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 800e4c4:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800e4c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e4cc:	1acb      	subs	r3, r1, r3
 800e4ce:	1ad3      	subs	r3, r2, r3
 800e4d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    pdata_test->data_test = malloc(test_data_len);
 800e4d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f004 fe73 	bl	80131c4 <malloc>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e4e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	629a      	str	r2, [r3, #40]	@ 0x28
    memcpy(pdata_test->data_test, test_start, test_data_len);
 800e4ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e4f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4fa:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800e4fe:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800e502:	4618      	mov	r0, r3
 800e504:	f007 f80f 	bl	8015526 <memcpy>
    pdata_test->data_test_len = test_data_len;
 800e508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e512:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	859a      	strh	r2, [r3, #44]	@ 0x2c

    free(temp_buf);
 800e51a:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800e51e:	f004 fe59 	bl	80131d4 <free>
 800e522:	e004      	b.n	800e52e <get_data_testing_ic+0x38e>
    if (!first_pipe) return;
 800e524:	bf00      	nop
 800e526:	e002      	b.n	800e52e <get_data_testing_ic+0x38e>
    if (!second_pipe) return;
 800e528:	bf00      	nop
 800e52a:	e000      	b.n	800e52e <get_data_testing_ic+0x38e>
    if (!third_pipe) return;
 800e52c:	bf00      	nop
//    uint8_t array_buf[200];
//    memcpy(array_buf,pdata_test->data_pin,pin_data_len);
//    uint8_t array_buf2[200];
//    memcpy(array_buf2,pdata_test->data_test,test_data_len);
}
 800e52e:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800e532:	46bd      	mov	sp, r7
 800e534:	bd90      	pop	{r4, r7, pc}
 800e536:	bf00      	nop
 800e538:	2000132c 	.word	0x2000132c
 800e53c:	0801857c 	.word	0x0801857c

0800e540 <show_text_short_circuit>:

static void show_text_short_circuit(Screen_t *screen_obj) {
 800e540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e544:	b0c9      	sub	sp, #292	@ 0x124
 800e546:	af00      	add	r7, sp, #0
 800e548:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e54c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e550:	6018      	str	r0, [r3, #0]
 800e552:	466b      	mov	r3, sp
 800e554:	461e      	mov	r6, r3
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800e556:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e55a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800e564:	4619      	mov	r1, r3
 800e566:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e56a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e574:	fb01 f303 	mul.w	r3, r1, r3
 800e578:	4413      	add	r3, r2
 800e57a:	334b      	adds	r3, #75	@ 0x4b
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800e582:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800e586:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e58a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e58e:	6819      	ldr	r1, [r3, #0]
 800e590:	4613      	mov	r3, r2
 800e592:	005b      	lsls	r3, r3, #1
 800e594:	4413      	add	r3, r2
 800e596:	011b      	lsls	r3, r3, #4
 800e598:	440b      	add	r3, r1
 800e59a:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
//    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
    char short_text[150] = "Pin Short to GND/VDD: ";
 800e5a4:	4b88      	ldr	r3, [pc, #544]	@ (800e7c8 <show_text_short_circuit+0x288>)
 800e5a6:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800e5aa:	461d      	mov	r5, r3
 800e5ac:	6828      	ldr	r0, [r5, #0]
 800e5ae:	6869      	ldr	r1, [r5, #4]
 800e5b0:	68aa      	ldr	r2, [r5, #8]
 800e5b2:	68eb      	ldr	r3, [r5, #12]
 800e5b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5b6:	6928      	ldr	r0, [r5, #16]
 800e5b8:	6020      	str	r0, [r4, #0]
 800e5ba:	8aab      	ldrh	r3, [r5, #20]
 800e5bc:	7daa      	ldrb	r2, [r5, #22]
 800e5be:	80a3      	strh	r3, [r4, #4]
 800e5c0:	4613      	mov	r3, r2
 800e5c2:	71a3      	strb	r3, [r4, #6]
 800e5c4:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800e5c8:	227f      	movs	r2, #127	@ 0x7f
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f006 fe61 	bl	8015294 <memset>
    uint8_t buffer[50];
    memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit,num_pin);
 800e5d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e5d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e5e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e5f0:	fb01 f303 	mul.w	r3, r1, r3
 800e5f4:	4413      	add	r3, r2
 800e5f6:	3368      	adds	r3, #104	@ 0x68
 800e5f8:	6819      	ldr	r1, [r3, #0]
 800e5fa:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800e5fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e602:	4618      	mov	r0, r3
 800e604:	f006 ff8f 	bl	8015526 <memcpy>
    // uint8_t test_short[20] = {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'};
    uint8_t shortPin[num_pin]; /* array store pin short */
 800e608:	f897 1116 	ldrb.w	r1, [r7, #278]	@ 0x116
 800e60c:	460b      	mov	r3, r1
 800e60e:	3b01      	subs	r3, #1
 800e610:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800e614:	b2cb      	uxtb	r3, r1
 800e616:	2200      	movs	r2, #0
 800e618:	469a      	mov	sl, r3
 800e61a:	4693      	mov	fp, r2
 800e61c:	f04f 0200 	mov.w	r2, #0
 800e620:	f04f 0300 	mov.w	r3, #0
 800e624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e62c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e630:	b2cb      	uxtb	r3, r1
 800e632:	2200      	movs	r2, #0
 800e634:	4698      	mov	r8, r3
 800e636:	4691      	mov	r9, r2
 800e638:	f04f 0200 	mov.w	r2, #0
 800e63c:	f04f 0300 	mov.w	r3, #0
 800e640:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e644:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e648:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e64c:	460b      	mov	r3, r1
 800e64e:	3307      	adds	r3, #7
 800e650:	08db      	lsrs	r3, r3, #3
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	ebad 0d03 	sub.w	sp, sp, r3
 800e658:	466b      	mov	r3, sp
 800e65a:	3300      	adds	r3, #0
 800e65c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint8_t shortCount = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < num_pin; i++) {
 800e666:	2300      	movs	r3, #0
 800e668:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800e66c:	e02c      	b.n	800e6c8 <show_text_short_circuit+0x188>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] == '0') {
 800e66e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e672:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800e67c:	4619      	mov	r1, r3
 800e67e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e682:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e68c:	fb01 f303 	mul.w	r3, r1, r3
 800e690:	4413      	add	r3, r2
 800e692:	3368      	adds	r3, #104	@ 0x68
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800e69a:	4413      	add	r3, r2
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	2b30      	cmp	r3, #48	@ 0x30
 800e6a0:	d10d      	bne.n	800e6be <show_text_short_circuit+0x17e>
            shortPin[shortCount] = i + 1;
 800e6a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800e6a6:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800e6aa:	3201      	adds	r2, #1
 800e6ac:	b2d1      	uxtb	r1, r2
 800e6ae:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e6b2:	54d1      	strb	r1, [r2, r3]
            shortCount++;
 800e6b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < num_pin; i++) {
 800e6be:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800e6c8:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800e6cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d3cc      	bcc.n	800e66e <show_text_short_circuit+0x12e>
        }
    }

    if (shortCount == 0) {
 800e6d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d121      	bne.n	800e720 <show_text_short_circuit+0x1e0>
        strcat(short_text,"None");
 800e6dc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7f1 fd3f 	bl	8000164 <strlen>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e6ee:	4413      	add	r3, r2
 800e6f0:	4a36      	ldr	r2, [pc, #216]	@ (800e7cc <show_text_short_circuit+0x28c>)
 800e6f2:	6810      	ldr	r0, [r2, #0]
 800e6f4:	6018      	str	r0, [r3, #0]
 800e6f6:	7912      	ldrb	r2, [r2, #4]
 800e6f8:	711a      	strb	r2, [r3, #4]
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 800e6fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7f1 fd30 	bl	8000164 <strlen>
 800e704:	4603      	mov	r3, r0
 800e706:	b29b      	uxth	r3, r3
 800e708:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800e70c:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800e710:	f5a1 708e 	sub.w	r0, r1, #284	@ 0x11c
 800e714:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800e718:	6800      	ldr	r0, [r0, #0]
 800e71a:	f003 f8fb 	bl	8011914 <DWIN_SetText>
 800e71e:	e04b      	b.n	800e7b8 <show_text_short_circuit+0x278>
    } else {
        char tempStr[50];
        for (int i = 0; i < shortCount; i++) {
 800e720:	2300      	movs	r3, #0
 800e722:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800e726:	e02f      	b.n	800e788 <show_text_short_circuit+0x248>
            sprintf(tempStr, "Pin %d", shortPin[i]);
 800e728:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e72c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e730:	4413      	add	r3, r2
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	461a      	mov	r2, r3
 800e736:	f107 030c 	add.w	r3, r7, #12
 800e73a:	4925      	ldr	r1, [pc, #148]	@ (800e7d0 <show_text_short_circuit+0x290>)
 800e73c:	4618      	mov	r0, r3
 800e73e:	f006 fc71 	bl	8015024 <siprintf>
            strcat(short_text, tempStr);
 800e742:	f107 020c 	add.w	r2, r7, #12
 800e746:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e74a:	4611      	mov	r1, r2
 800e74c:	4618      	mov	r0, r3
 800e74e:	f006 fda9 	bl	80152a4 <strcat>
            if (i < shortCount - 1) {
 800e752:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800e756:	3b01      	subs	r3, #1
 800e758:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e75c:	429a      	cmp	r2, r3
 800e75e:	da0e      	bge.n	800e77e <show_text_short_circuit+0x23e>
                strcat(short_text, ", ");
 800e760:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e764:	4618      	mov	r0, r3
 800e766:	f7f1 fcfd 	bl	8000164 <strlen>
 800e76a:	4603      	mov	r3, r0
 800e76c:	461a      	mov	r2, r3
 800e76e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e772:	4413      	add	r3, r2
 800e774:	4a17      	ldr	r2, [pc, #92]	@ (800e7d4 <show_text_short_circuit+0x294>)
 800e776:	8811      	ldrh	r1, [r2, #0]
 800e778:	7892      	ldrb	r2, [r2, #2]
 800e77a:	8019      	strh	r1, [r3, #0]
 800e77c:	709a      	strb	r2, [r3, #2]
        for (int i = 0; i < shortCount; i++) {
 800e77e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e782:	3301      	adds	r3, #1
 800e784:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800e788:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800e78c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e790:	429a      	cmp	r2, r3
 800e792:	dbc9      	blt.n	800e728 <show_text_short_circuit+0x1e8>
            }
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 800e794:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800e798:	4618      	mov	r0, r3
 800e79a:	f7f1 fce3 	bl	8000164 <strlen>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800e7a6:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800e7aa:	f5a1 708e 	sub.w	r0, r1, #284	@ 0x11c
 800e7ae:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800e7b2:	6800      	ldr	r0, [r0, #0]
 800e7b4:	f003 f8ae 	bl	8011914 <DWIN_SetText>
 800e7b8:	46b5      	mov	sp, r6
    }
}
 800e7ba:	bf00      	nop
 800e7bc:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c6:	bf00      	nop
 800e7c8:	080185ac 	.word	0x080185ac
 800e7cc:	08018598 	.word	0x08018598
 800e7d0:	080185a0 	.word	0x080185a0
 800e7d4:	080185a8 	.word	0x080185a8

0800e7d8 <show_text_function_test>:

static void show_text_function_test(Screen_t *const screen_obj) {
 800e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7dc:	b0d9      	sub	sp, #356	@ 0x164
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800e7e4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800e7e8:	6018      	str	r0, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800e7ea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800e7ee:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800e7fe:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e808:	fb01 f303 	mul.w	r3, r1, r3
 800e80c:	4413      	add	r3, r2
 800e80e:	334b      	adds	r3, #75	@ 0x4b
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800e816:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800e81a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800e81e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800e822:	6819      	ldr	r1, [r3, #0]
 800e824:	4613      	mov	r3, r2
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	4413      	add	r3, r2
 800e82a:	011b      	lsls	r3, r3, #4
 800e82c:	440b      	add	r3, r1
 800e82e:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800e838:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800e83c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800e840:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800e844:	6819      	ldr	r1, [r3, #0]
 800e846:	4613      	mov	r3, r2
 800e848:	005b      	lsls	r3, r3, #1
 800e84a:	4413      	add	r3, r2
 800e84c:	011b      	lsls	r3, r3, #4
 800e84e:	440b      	add	r3, r1
 800e850:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	f887 3155 	strb.w	r3, [r7, #341]	@ 0x155

    char case_text[300] = "Self-test result: ";  
 800e85a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800e85e:	f5a3 76a0 	sub.w	r6, r3, #320	@ 0x140
 800e862:	4b9e      	ldr	r3, [pc, #632]	@ (800eadc <show_text_function_test+0x304>)
 800e864:	4634      	mov	r4, r6
 800e866:	461d      	mov	r5, r3
 800e868:	6828      	ldr	r0, [r5, #0]
 800e86a:	6869      	ldr	r1, [r5, #4]
 800e86c:	68aa      	ldr	r2, [r5, #8]
 800e86e:	68eb      	ldr	r3, [r5, #12]
 800e870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e872:	8a2b      	ldrh	r3, [r5, #16]
 800e874:	7caa      	ldrb	r2, [r5, #18]
 800e876:	8023      	strh	r3, [r4, #0]
 800e878:	4613      	mov	r3, r2
 800e87a:	70a3      	strb	r3, [r4, #2]
 800e87c:	f106 0313 	add.w	r3, r6, #19
 800e880:	f240 1219 	movw	r2, #281	@ 0x119
 800e884:	2100      	movs	r1, #0
 800e886:	4618      	mov	r0, r3
 800e888:	f006 fd04 	bl	8015294 <memset>
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
 800e88c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800e890:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800e89a:	4619      	mov	r1, r3
 800e89c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800e8a0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e8aa:	fb01 f303 	mul.w	r3, r1, r3
 800e8ae:	4413      	add	r3, r2
 800e8b0:	336c      	adds	r3, #108	@ 0x6c
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b30      	cmp	r3, #48	@ 0x30
 800e8b6:	f040 80e9 	bne.w	800ea8c <show_text_function_test+0x2b4>
 800e8ba:	466b      	mov	r3, sp
 800e8bc:	461d      	mov	r5, r3
        uint8_t failedCase[num_case]; 
 800e8be:	f897 1155 	ldrb.w	r1, [r7, #341]	@ 0x155
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800e8ca:	b2cb      	uxtb	r3, r1
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	469a      	mov	sl, r3
 800e8d0:	4693      	mov	fp, r2
 800e8d2:	f04f 0200 	mov.w	r2, #0
 800e8d6:	f04f 0300 	mov.w	r3, #0
 800e8da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e8de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e8e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e8e6:	b2cb      	uxtb	r3, r1
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	4698      	mov	r8, r3
 800e8ec:	4691      	mov	r9, r2
 800e8ee:	f04f 0200 	mov.w	r2, #0
 800e8f2:	f04f 0300 	mov.w	r3, #0
 800e8f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e8fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e8fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e902:	460b      	mov	r3, r1
 800e904:	3307      	adds	r3, #7
 800e906:	08db      	lsrs	r3, r3, #3
 800e908:	00db      	lsls	r3, r3, #3
 800e90a:	ebad 0d03 	sub.w	sp, sp, r3
 800e90e:	466b      	mov	r3, sp
 800e910:	3300      	adds	r3, #0
 800e912:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        uint8_t failedCount = 0;
 800e916:	2300      	movs	r3, #0
 800e918:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
        
        for (uint8_t i = 0; i < num_case; i++) {
 800e91c:	2300      	movs	r3, #0
 800e91e:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800e922:	e032      	b.n	800e98a <show_text_function_test+0x1b2>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
 800e924:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800e928:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800e932:	4619      	mov	r1, r3
 800e934:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800e938:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e942:	fb01 f303 	mul.w	r3, r1, r3
 800e946:	4413      	add	r3, r2
 800e948:	3370      	adds	r3, #112	@ 0x70
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800e950:	4413      	add	r3, r2
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	2b30      	cmp	r3, #48	@ 0x30
 800e956:	d113      	bne.n	800e980 <show_text_function_test+0x1a8>
                if (failedCount < num_case) { // Bounds check!
 800e958:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 800e95c:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800e960:	429a      	cmp	r2, r3
 800e962:	d20d      	bcs.n	800e980 <show_text_function_test+0x1a8>
                    failedCase[failedCount] = i + 1;
 800e964:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800e968:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 800e96c:	3201      	adds	r2, #1
 800e96e:	b2d1      	uxtb	r1, r2
 800e970:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800e974:	54d1      	strb	r1, [r2, r3]
                    failedCount++;
 800e976:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800e97a:	3301      	adds	r3, #1
 800e97c:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
        for (uint8_t i = 0; i < num_case; i++) {
 800e980:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800e984:	3301      	adds	r3, #1
 800e986:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800e98a:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 800e98e:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800e992:	429a      	cmp	r2, r3
 800e994:	d3c6      	bcc.n	800e924 <show_text_function_test+0x14c>
                }
            }
        }

        if (failedCount == 0) {
 800e996:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d10f      	bne.n	800e9be <show_text_function_test+0x1e6>
            strncat(case_text, "Pass", sizeof(case_text) - strlen(case_text) - 1);
 800e99e:	f107 0320 	add.w	r3, r7, #32
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7f1 fbde 	bl	8000164 <strlen>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	f107 0020 	add.w	r0, r7, #32
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	494a      	ldr	r1, [pc, #296]	@ (800eae0 <show_text_function_test+0x308>)
 800e9b8:	f006 fc83 	bl	80152c2 <strncat>
 800e9bc:	e064      	b.n	800ea88 <show_text_function_test+0x2b0>
        } else {
            strncat(case_text, "Failed in ", sizeof(case_text) - strlen(case_text) - 1);
 800e9be:	f107 0320 	add.w	r3, r7, #32
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7f1 fbce 	bl	8000164 <strlen>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	f107 0020 	add.w	r0, r7, #32
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	4943      	ldr	r1, [pc, #268]	@ (800eae4 <show_text_function_test+0x30c>)
 800e9d8:	f006 fc73 	bl	80152c2 <strncat>
            
            for (int i = 0; i < failedCount; i++) {
 800e9dc:	2300      	movs	r3, #0
 800e9de:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800e9e2:	e04b      	b.n	800ea7c <show_text_function_test+0x2a4>
                char tempStr[20];
                snprintf(tempStr, sizeof(tempStr), "Case %d", failedCase[i]);
 800e9e4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800e9e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800e9ec:	4413      	add	r3, r2
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	f107 000c 	add.w	r0, r7, #12
 800e9f4:	4a3c      	ldr	r2, [pc, #240]	@ (800eae8 <show_text_function_test+0x310>)
 800e9f6:	2114      	movs	r1, #20
 800e9f8:	f006 fade 	bl	8014fb8 <sniprintf>
                
                // Check if we have enough space before concatenating
                if (strlen(case_text) + strlen(tempStr) + 3 < sizeof(case_text)) {
 800e9fc:	f107 0320 	add.w	r3, r7, #32
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7f1 fbaf 	bl	8000164 <strlen>
 800ea06:	4604      	mov	r4, r0
 800ea08:	f107 030c 	add.w	r3, r7, #12
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7f1 fba9 	bl	8000164 <strlen>
 800ea12:	4603      	mov	r3, r0
 800ea14:	4423      	add	r3, r4
 800ea16:	3303      	adds	r3, #3
 800ea18:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800ea1c:	d226      	bcs.n	800ea6c <show_text_function_test+0x294>
                    strncat(case_text, tempStr, sizeof(case_text) - strlen(case_text) - 1);
 800ea1e:	f107 0320 	add.w	r3, r7, #32
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7f1 fb9e 	bl	8000164 <strlen>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800ea2e:	3301      	adds	r3, #1
 800ea30:	f107 010c 	add.w	r1, r7, #12
 800ea34:	f107 0020 	add.w	r0, r7, #32
 800ea38:	461a      	mov	r2, r3
 800ea3a:	f006 fc42 	bl	80152c2 <strncat>
                    if (i < failedCount - 1) {
 800ea3e:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800ea42:	3b01      	subs	r3, #1
 800ea44:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	da12      	bge.n	800ea72 <show_text_function_test+0x29a>
                        strncat(case_text, ", ", sizeof(case_text) - strlen(case_text) - 1);
 800ea4c:	f107 0320 	add.w	r3, r7, #32
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7f1 fb87 	bl	8000164 <strlen>
 800ea56:	4603      	mov	r3, r0
 800ea58:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	f107 0020 	add.w	r0, r7, #32
 800ea62:	461a      	mov	r2, r3
 800ea64:	4921      	ldr	r1, [pc, #132]	@ (800eaec <show_text_function_test+0x314>)
 800ea66:	f006 fc2c 	bl	80152c2 <strncat>
 800ea6a:	e002      	b.n	800ea72 <show_text_function_test+0x29a>
                    }
                } else {
                    /* out of space */
                    printf("over flow in show_text_function_test\n");
 800ea6c:	4820      	ldr	r0, [pc, #128]	@ (800eaf0 <show_text_function_test+0x318>)
 800ea6e:	f006 fa9b 	bl	8014fa8 <puts>
            for (int i = 0; i < failedCount; i++) {
 800ea72:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800ea76:	3301      	adds	r3, #1
 800ea78:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800ea7c:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800ea80:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800ea84:	429a      	cmp	r2, r3
 800ea86:	dbad      	blt.n	800e9e4 <show_text_function_test+0x20c>
 800ea88:	46ad      	mov	sp, r5
 800ea8a:	e00e      	b.n	800eaaa <show_text_function_test+0x2d2>
                }
            }
        }
    } else {
        strncat(case_text, "N/A", sizeof(case_text) - strlen(case_text) - 1);
 800ea8c:	f107 0320 	add.w	r3, r7, #32
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7f1 fb67 	bl	8000164 <strlen>
 800ea96:	4603      	mov	r3, r0
 800ea98:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	f107 0020 	add.w	r0, r7, #32
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	4913      	ldr	r1, [pc, #76]	@ (800eaf4 <show_text_function_test+0x31c>)
 800eaa6:	f006 fc0c 	bl	80152c2 <strncat>
    }
    
    DWIN_SetText((Dwin_t *)screen_obj, VP_Text_Test_Function, case_text, strlen(case_text));
 800eaaa:	f107 0320 	add.w	r3, r7, #32
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7f1 fb58 	bl	8000164 <strlen>
 800eab4:	4603      	mov	r3, r0
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	f107 0220 	add.w	r2, r7, #32
 800eabc:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800eac0:	f5a1 70ae 	sub.w	r0, r1, #348	@ 0x15c
 800eac4:	f44f 4117 	mov.w	r1, #38656	@ 0x9700
 800eac8:	6800      	ldr	r0, [r0, #0]
 800eaca:	f002 ff23 	bl	8011914 <DWIN_SetText>
}
 800eace:	bf00      	nop
 800ead0:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 800ead4:	46bd      	mov	sp, r7
 800ead6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eada:	bf00      	nop
 800eadc:	0801860c 	.word	0x0801860c
 800eae0:	080185c4 	.word	0x080185c4
 800eae4:	080185cc 	.word	0x080185cc
 800eae8:	080185d8 	.word	0x080185d8
 800eaec:	080185a8 	.word	0x080185a8
 800eaf0:	080185e0 	.word	0x080185e0
 800eaf4:	08018608 	.word	0x08018608

0800eaf8 <get_text_result>:

/* create the string text result */
static void get_text_result(Screen_t *const screen_obj, char *result_line, uint8_t cur_num_ic) {
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	4613      	mov	r3, r2
 800eb04:	71fb      	strb	r3, [r7, #7]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	68fa      	ldr	r2, [r7, #12]
 800eb10:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800eb14:	fb01 f303 	mul.w	r3, r1, r3
 800eb18:	4413      	add	r3, r2
 800eb1a:	334b      	adds	r3, #75	@ 0x4b
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	753b      	strb	r3, [r7, #20]
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800eb20:	7d3a      	ldrb	r2, [r7, #20]
 800eb22:	68f9      	ldr	r1, [r7, #12]
 800eb24:	4613      	mov	r3, r2
 800eb26:	005b      	lsls	r3, r3, #1
 800eb28:	4413      	add	r3, r2
 800eb2a:	011b      	lsls	r3, r3, #4
 800eb2c:	440b      	add	r3, r1
 800eb2e:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	74fb      	strb	r3, [r7, #19]
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800eb36:	7d3a      	ldrb	r2, [r7, #20]
 800eb38:	68f9      	ldr	r1, [r7, #12]
 800eb3a:	4613      	mov	r3, r2
 800eb3c:	005b      	lsls	r3, r3, #1
 800eb3e:	4413      	add	r3, r2
 800eb40:	011b      	lsls	r3, r3, #4
 800eb42:	440b      	add	r3, r1
 800eb44:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	74bb      	strb	r3, [r7, #18]
    
    uint8_t has_errors = 0;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < num_pin; i++) {
 800eb50:	2300      	movs	r3, #0
 800eb52:	75bb      	strb	r3, [r7, #22]
 800eb54:	e016      	b.n	800eb84 <get_text_result+0x8c>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] != '1') {
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	68fa      	ldr	r2, [r7, #12]
 800eb60:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800eb64:	fb01 f303 	mul.w	r3, r1, r3
 800eb68:	4413      	add	r3, r2
 800eb6a:	3368      	adds	r3, #104	@ 0x68
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	7dbb      	ldrb	r3, [r7, #22]
 800eb70:	4413      	add	r3, r2
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	2b31      	cmp	r3, #49	@ 0x31
 800eb76:	d002      	beq.n	800eb7e <get_text_result+0x86>
            has_errors = 1;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	75fb      	strb	r3, [r7, #23]
            break; // Found error, no need to check more
 800eb7c:	e006      	b.n	800eb8c <get_text_result+0x94>
    for (uint8_t i = 0; i < num_pin; i++) {
 800eb7e:	7dbb      	ldrb	r3, [r7, #22]
 800eb80:	3301      	adds	r3, #1
 800eb82:	75bb      	strb	r3, [r7, #22]
 800eb84:	7dba      	ldrb	r2, [r7, #22]
 800eb86:	7cfb      	ldrb	r3, [r7, #19]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d3e4      	bcc.n	800eb56 <get_text_result+0x5e>
        }
    }

    if (!has_errors) {
 800eb8c:	7dfb      	ldrb	r3, [r7, #23]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d11d      	bne.n	800ebce <get_text_result+0xd6>
        for (uint8_t i = 0; i < num_case; i++) {
 800eb92:	2300      	movs	r3, #0
 800eb94:	757b      	strb	r3, [r7, #21]
 800eb96:	e016      	b.n	800ebc6 <get_text_result+0xce>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800eb9e:	4619      	mov	r1, r3
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800eba6:	fb01 f303 	mul.w	r3, r1, r3
 800ebaa:	4413      	add	r3, r2
 800ebac:	3370      	adds	r3, #112	@ 0x70
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	7d7b      	ldrb	r3, [r7, #21]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	2b30      	cmp	r3, #48	@ 0x30
 800ebb8:	d102      	bne.n	800ebc0 <get_text_result+0xc8>
                has_errors = 1;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	75fb      	strb	r3, [r7, #23]
                break; // Found error, no need to check more
 800ebbe:	e006      	b.n	800ebce <get_text_result+0xd6>
        for (uint8_t i = 0; i < num_case; i++) {
 800ebc0:	7d7b      	ldrb	r3, [r7, #21]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	757b      	strb	r3, [r7, #21]
 800ebc6:	7d7a      	ldrb	r2, [r7, #21]
 800ebc8:	7cbb      	ldrb	r3, [r7, #18]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d3e4      	bcc.n	800eb98 <get_text_result+0xa0>
            }
        }
    }

    if (has_errors) {
 800ebce:	7dfb      	ldrb	r3, [r7, #23]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d007      	beq.n	800ebe4 <get_text_result+0xec>
        sprintf((char *)result_line, "IC%d: Self-test result: failed", cur_num_ic + 1);
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	461a      	mov	r2, r3
 800ebda:	4908      	ldr	r1, [pc, #32]	@ (800ebfc <get_text_result+0x104>)
 800ebdc:	68b8      	ldr	r0, [r7, #8]
 800ebde:	f006 fa21 	bl	8015024 <siprintf>
    } else {
        sprintf((char *)result_line, "IC%d: Self-test result: pass", cur_num_ic + 1);
    }    
}
 800ebe2:	e006      	b.n	800ebf2 <get_text_result+0xfa>
        sprintf((char *)result_line, "IC%d: Self-test result: pass", cur_num_ic + 1);
 800ebe4:	79fb      	ldrb	r3, [r7, #7]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	461a      	mov	r2, r3
 800ebea:	4905      	ldr	r1, [pc, #20]	@ (800ec00 <get_text_result+0x108>)
 800ebec:	68b8      	ldr	r0, [r7, #8]
 800ebee:	f006 fa19 	bl	8015024 <siprintf>
}
 800ebf2:	bf00      	nop
 800ebf4:	3718      	adds	r7, #24
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	08018620 	.word	0x08018620
 800ec00:	08018640 	.word	0x08018640

0800ec04 <compelte_testing>:

/* using to store data when testing complete */
static void compelte_testing(Screen_t *const screen_obj) {
 800ec04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec06:	b0e1      	sub	sp, #388	@ 0x184
 800ec08:	af0a      	add	r7, sp, #40	@ 0x28
 800ec0a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec0e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ec12:	6018      	str	r0, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800ec14:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec18:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800ec22:	4619      	mov	r1, r3
 800ec24:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec28:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ec32:	fb01 f303 	mul.w	r3, r1, r3
 800ec36:	4413      	add	r3, r2
 800ec38:	334b      	adds	r3, #75	@ 0x4b
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    uint8_t data_time[7];
    DS3231_Read_time(&ds3231,data_time);
 800ec40:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800ec44:	4619      	mov	r1, r3
 800ec46:	48cc      	ldr	r0, [pc, #816]	@ (800ef78 <compelte_testing+0x374>)
 800ec48:	f002 fdc8 	bl	80117dc <DS3231_Read_time>

    /* Store data to sd card */
    char buffer[300] = {0};
 800ec4c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800ec54:	4618      	mov	r0, r3
 800ec56:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	f006 fb19 	bl	8015294 <memset>
    // memset(buffer,0,300);
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800ec62:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800ec66:	469e      	mov	lr, r3
 800ec68:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 800ec6c:	461d      	mov	r5, r3
 800ec6e:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 800ec72:	461e      	mov	r6, r3
 800ec74:	f897 314a 	ldrb.w	r3, [r7, #330]	@ 0x14a
 800ec78:	60bb      	str	r3, [r7, #8]
 800ec7a:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
 800ec7e:	607b      	str	r3, [r7, #4]
 800ec80:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800ec84:	603b      	str	r3, [r7, #0]
        ,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,screen_obj->Program_Testx[index_program].Name_IC,screen_obj->Program_Testx[index_program].num_IC,
 800ec86:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec8a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800ec94:	4619      	mov	r1, r3
 800ec96:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ec9a:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800ec9e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800eca2:	fb01 f303 	mul.w	r3, r1, r3
 800eca6:	3348      	adds	r3, #72	@ 0x48
 800eca8:	6812      	ldr	r2, [r2, #0]
 800ecaa:	4413      	add	r3, r2
 800ecac:	1d59      	adds	r1, r3, #5
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800ecae:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800ecb2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ecb6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ecba:	6818      	ldr	r0, [r3, #0]
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	005b      	lsls	r3, r3, #1
 800ecc0:	4413      	add	r3, r2
 800ecc2:	011b      	lsls	r3, r3, #4
 800ecc4:	4403      	add	r3, r0
 800ecc6:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800ecca:	6818      	ldr	r0, [r3, #0]
 800eccc:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800ecd0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ecd4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ecd8:	681c      	ldr	r4, [r3, #0]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	005b      	lsls	r3, r3, #1
 800ecde:	4413      	add	r3, r2
 800ece0:	011b      	lsls	r3, r3, #4
 800ece2:	4423      	add	r3, r4
 800ece4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ece8:	681b      	ldr	r3, [r3, #0]
        screen_obj->IC_Testerx[screen_obj->curr_device].result_text);
 800ecea:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800ecee:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800ecf2:	6812      	ldr	r2, [r2, #0]
 800ecf4:	f892 24d9 	ldrb.w	r2, [r2, #1241]	@ 0x4d9
 800ecf8:	4694      	mov	ip, r2
 800ecfa:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800ecfe:	f5a2 74a6 	sub.w	r4, r2, #332	@ 0x14c
 800ed02:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800ed06:	fb02 f20c 	mul.w	r2, r2, ip
 800ed0a:	3278      	adds	r2, #120	@ 0x78
 800ed0c:	6824      	ldr	r4, [r4, #0]
 800ed0e:	4422      	add	r2, r4
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800ed10:	f107 041c 	add.w	r4, r7, #28
 800ed14:	9208      	str	r2, [sp, #32]
 800ed16:	9307      	str	r3, [sp, #28]
 800ed18:	9006      	str	r0, [sp, #24]
 800ed1a:	9105      	str	r1, [sp, #20]
 800ed1c:	683a      	ldr	r2, [r7, #0]
 800ed1e:	9204      	str	r2, [sp, #16]
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	9203      	str	r2, [sp, #12]
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	9302      	str	r3, [sp, #8]
 800ed28:	9601      	str	r6, [sp, #4]
 800ed2a:	9500      	str	r5, [sp, #0]
 800ed2c:	4673      	mov	r3, lr
 800ed2e:	4a93      	ldr	r2, [pc, #588]	@ (800ef7c <compelte_testing+0x378>)
 800ed30:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800ed34:	4620      	mov	r0, r4
 800ed36:	f006 f93f 	bl	8014fb8 <sniprintf>
 800ed3a:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150
    DataLogging_t *data_store = (DataLogging_t *)malloc(sizeof(DataLogging_t));
 800ed3e:	2008      	movs	r0, #8
 800ed40:	f004 fa40 	bl	80131c4 <malloc>
 800ed44:	4603      	mov	r3, r0
 800ed46:	461a      	mov	r2, r3
 800ed48:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ed4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800ed50:	601a      	str	r2, [r3, #0]
    data_store->String_logging = malloc(strlen(buffer)+1);
 800ed52:	f107 031c 	add.w	r3, r7, #28
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7f1 fa04 	bl	8000164 <strlen>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	1c5a      	adds	r2, r3, #1
 800ed60:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ed64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800ed68:	681c      	ldr	r4, [r3, #0]
 800ed6a:	4610      	mov	r0, r2
 800ed6c:	f004 fa2a 	bl	80131c4 <malloc>
 800ed70:	4603      	mov	r3, r0
 800ed72:	6063      	str	r3, [r4, #4]
    memset(data_store->String_logging,0,strlen(buffer)+1);
 800ed74:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ed78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	685c      	ldr	r4, [r3, #4]
 800ed80:	f107 031c 	add.w	r3, r7, #28
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7f1 f9ed 	bl	8000164 <strlen>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	461a      	mov	r2, r3
 800ed90:	2100      	movs	r1, #0
 800ed92:	4620      	mov	r0, r4
 800ed94:	f006 fa7e 	bl	8015294 <memset>
    memcpy(data_store->String_logging,buffer,strlen(buffer));
 800ed98:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ed9c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	685c      	ldr	r4, [r3, #4]
 800eda4:	f107 031c 	add.w	r3, r7, #28
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7f1 f9db 	bl	8000164 <strlen>
 800edae:	4602      	mov	r2, r0
 800edb0:	f107 031c 	add.w	r3, r7, #28
 800edb4:	4619      	mov	r1, r3
 800edb6:	4620      	mov	r0, r4
 800edb8:	f006 fbb5 	bl	8015526 <memcpy>
    memset(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,0,sizeof(screen_obj->IC_Testerx[screen_obj->curr_device].result_text));
 800edbc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800edc0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800edca:	4619      	mov	r1, r3
 800edcc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800edd0:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800edd4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800edd8:	fb01 f303 	mul.w	r3, r1, r3
 800eddc:	3378      	adds	r3, #120	@ 0x78
 800edde:	6812      	ldr	r2, [r2, #0]
 800ede0:	4413      	add	r3, r2
 800ede2:	22fa      	movs	r2, #250	@ 0xfa
 800ede4:	2100      	movs	r1, #0
 800ede6:	4618      	mov	r0, r3
 800ede8:	f006 fa54 	bl	8015294 <memset>
    OS_task_post_event(AO_task_sd, STORE_DATA_TEST, (uint8_t *)&data_store, sizeof(DataLogging_t));
 800edec:	4b64      	ldr	r3, [pc, #400]	@ (800ef80 <compelte_testing+0x37c>)
 800edee:	6818      	ldr	r0, [r3, #0]
 800edf0:	f107 0218 	add.w	r2, r7, #24
 800edf4:	2308      	movs	r3, #8
 800edf6:	2100      	movs	r1, #0
 800edf8:	f003 ffb2 	bl	8012d60 <OS_task_post_event>

    if (written >= sizeof(buffer)) {
 800edfc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800ee00:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800ee04:	d303      	bcc.n	800ee0e <compelte_testing+0x20a>
        printf("ERROR: Buffer overflow in compelte_testing!\n");
 800ee06:	485f      	ldr	r0, [pc, #380]	@ (800ef84 <compelte_testing+0x380>)
 800ee08:	f006 f8ce 	bl	8014fa8 <puts>
 800ee0c:	e0b0      	b.n	800ef70 <compelte_testing+0x36c>
        return;
    }

    /* Send data to esp32 */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800ee0e:	2008      	movs	r0, #8
 800ee10:	f004 f9d8 	bl	80131c4 <malloc>
 800ee14:	4603      	mov	r3, r0
 800ee16:	461a      	mov	r2, r3
 800ee18:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee1c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ee20:	601a      	str	r2, [r3, #0]
    data_send_esp32->data = (char *)malloc(strlen(buffer));
 800ee22:	f107 031c 	add.w	r3, r7, #28
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7f1 f99c 	bl	8000164 <strlen>
 800ee2c:	4602      	mov	r2, r0
 800ee2e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee32:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ee36:	681c      	ldr	r4, [r3, #0]
 800ee38:	4610      	mov	r0, r2
 800ee3a:	f004 f9c3 	bl	80131c4 <malloc>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data,"h",1);
 800ee42:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee46:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	494d      	ldr	r1, [pc, #308]	@ (800ef88 <compelte_testing+0x384>)
 800ee52:	4618      	mov	r0, r3
 800ee54:	f006 fb67 	bl	8015526 <memcpy>
    memcpy(data_send_esp32->data+1,buffer,strlen(buffer));
 800ee58:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee5c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	1c5c      	adds	r4, r3, #1
 800ee66:	f107 031c 	add.w	r3, r7, #28
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7f1 f97a 	bl	8000164 <strlen>
 800ee70:	4602      	mov	r2, r0
 800ee72:	f107 031c 	add.w	r3, r7, #28
 800ee76:	4619      	mov	r1, r3
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f006 fb54 	bl	8015526 <memcpy>
    data_send_esp32->len = strlen(buffer);
 800ee7e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ee82:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ee86:	681c      	ldr	r4, [r3, #0]
 800ee88:	f107 031c 	add.w	r3, r7, #28
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f1 f969 	bl	8000164 <strlen>
 800ee92:	4603      	mov	r3, r0
 800ee94:	6063      	str	r3, [r4, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800ee96:	4b3d      	ldr	r3, [pc, #244]	@ (800ef8c <compelte_testing+0x388>)
 800ee98:	6818      	ldr	r0, [r3, #0]
 800ee9a:	f107 0214 	add.w	r2, r7, #20
 800ee9e:	2308      	movs	r3, #8
 800eea0:	2100      	movs	r1, #0
 800eea2:	f003 ff5d 	bl	8012d60 <OS_task_post_event>

    screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
 800eea6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eeaa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eeba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800eec4:	fb01 f303 	mul.w	r3, r1, r3
 800eec8:	4413      	add	r3, r2
 800eeca:	334a      	adds	r3, #74	@ 0x4a
 800eecc:	2200      	movs	r2, #0
 800eece:	701a      	strb	r2, [r3, #0]
    screen_obj->IC_Testerx[screen_obj->curr_device].state = false;
 800eed0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eed4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800eede:	4619      	mov	r1, r3
 800eee0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eee4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800eeee:	fb01 f303 	mul.w	r3, r1, r3
 800eef2:	4413      	add	r3, r2
 800eef4:	334c      	adds	r3, #76	@ 0x4c
 800eef6:	2200      	movs	r2, #0
 800eef8:	701a      	strb	r2, [r3, #0]
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800eefa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800eefe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800ef08:	4619      	mov	r1, r3
 800ef0a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ef0e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ef18:	fb01 f303 	mul.w	r3, r1, r3
 800ef1c:	4413      	add	r3, r2
 800ef1e:	334c      	adds	r3, #76	@ 0x4c
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	461a      	mov	r2, r3
 800ef24:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ef28:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ef2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ef30:	6818      	ldr	r0, [r3, #0]
 800ef32:	f002 fd71 	bl	8011a18 <DWIN_SetVariable_Icon>
    /* switch page */
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
 800ef36:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ef3a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800ef44:	4619      	mov	r1, r3
 800ef46:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ef4a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ef54:	fb01 f303 	mul.w	r3, r1, r3
 800ef58:	4413      	add	r3, r2
 800ef5a:	3349      	adds	r3, #73	@ 0x49
 800ef5c:	7819      	ldrb	r1, [r3, #0]
 800ef5e:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800ef62:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800ef66:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ef6a:	6818      	ldr	r0, [r3, #0]
 800ef6c:	f000 fc4c 	bl	800f808 <show_main_page>

    /* free the array don't using */

}
 800ef70:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef78:	20001460 	.word	0x20001460
 800ef7c:	08018660 	.word	0x08018660
 800ef80:	080192f0 	.word	0x080192f0
 800ef84:	08018680 	.word	0x08018680
 800ef88:	080186ac 	.word	0x080186ac
 800ef8c:	080192f4 	.word	0x080192f4

0800ef90 <off_testing>:

static void off_testing(Screen_t *screen_obj) {
 800ef90:	b5b0      	push	{r4, r5, r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af02      	add	r7, sp, #8
 800ef96:	6078      	str	r0, [r7, #4]
    compelte_testing(screen_obj);
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f7ff fe33 	bl	800ec04 <compelte_testing>

    /* free array using in have new data test */
    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800efa4:	4619      	mov	r1, r3
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800efac:	fb01 f303 	mul.w	r3, r1, r3
 800efb0:	4413      	add	r3, r2
 800efb2:	3374      	adds	r3, #116	@ 0x74
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00e      	beq.n	800efd8 <off_testing+0x48>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800efc0:	4619      	mov	r1, r3
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800efc8:	fb01 f303 	mul.w	r3, r1, r3
 800efcc:	4413      	add	r3, r2
 800efce:	3374      	adds	r3, #116	@ 0x74
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f004 f8fe 	bl	80131d4 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800efde:	4619      	mov	r1, r3
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800efe6:	fb01 f303 	mul.w	r3, r1, r3
 800efea:	4413      	add	r3, r2
 800efec:	335c      	adds	r3, #92	@ 0x5c
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00e      	beq.n	800f012 <off_testing+0x82>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800effa:	4619      	mov	r1, r3
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f002:	fb01 f303 	mul.w	r3, r1, r3
 800f006:	4413      	add	r3, r2
 800f008:	335c      	adds	r3, #92	@ 0x5c
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f004 f8e1 	bl	80131d4 <free>
    }
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f018:	4619      	mov	r1, r3
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f020:	fb01 f303 	mul.w	r3, r1, r3
 800f024:	4413      	add	r3, r2
 800f026:	3364      	adds	r3, #100	@ 0x64
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00e      	beq.n	800f04c <off_testing+0xbc>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f034:	4619      	mov	r1, r3
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f03c:	fb01 f303 	mul.w	r3, r1, r3
 800f040:	4413      	add	r3, r2
 800f042:	3364      	adds	r3, #100	@ 0x64
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4618      	mov	r0, r3
 800f048:	f004 f8c4 	bl	80131d4 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f052:	4619      	mov	r1, r3
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f05a:	fb01 f303 	mul.w	r3, r1, r3
 800f05e:	4413      	add	r3, r2
 800f060:	3368      	adds	r3, #104	@ 0x68
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00e      	beq.n	800f086 <off_testing+0xf6>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f06e:	4619      	mov	r1, r3
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f076:	fb01 f303 	mul.w	r3, r1, r3
 800f07a:	4413      	add	r3, r2
 800f07c:	3368      	adds	r3, #104	@ 0x68
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4618      	mov	r0, r3
 800f082:	f004 f8a7 	bl	80131d4 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f08c:	4619      	mov	r1, r3
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f094:	fb01 f303 	mul.w	r3, r1, r3
 800f098:	4413      	add	r3, r2
 800f09a:	3370      	adds	r3, #112	@ 0x70
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00e      	beq.n	800f0c0 <off_testing+0x130>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f0b0:	fb01 f303 	mul.w	r3, r1, r3
 800f0b4:	4413      	add	r3, r2
 800f0b6:	3370      	adds	r3, #112	@ 0x70
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f004 f88a 	bl	80131d4 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f0ce:	fb01 f303 	mul.w	r3, r1, r3
 800f0d2:	4413      	add	r3, r2
 800f0d4:	3360      	adds	r3, #96	@ 0x60
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d00e      	beq.n	800f0fa <off_testing+0x16a>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f0ea:	fb01 f303 	mul.w	r3, r1, r3
 800f0ee:	4413      	add	r3, r2
 800f0f0:	3360      	adds	r3, #96	@ 0x60
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f004 f86d 	bl	80131d4 <free>
    }

    /* Send data to esp32 status device */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800f0fa:	2008      	movs	r0, #8
 800f0fc:	f004 f862 	bl	80131c4 <malloc>
 800f100:	4603      	mov	r3, r0
 800f102:	60fb      	str	r3, [r7, #12]
    data_send_esp32->data = (char *)malloc(50);
 800f104:	68fc      	ldr	r4, [r7, #12]
 800f106:	2032      	movs	r0, #50	@ 0x32
 800f108:	f004 f85c 	bl	80131c4 <malloc>
 800f10c:	4603      	mov	r3, r0
 800f10e:	6023      	str	r3, [r4, #0]
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f116:	4619      	mov	r1, r3
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f11e:	fb01 f303 	mul.w	r3, r1, r3
 800f122:	4413      	add	r3, r2
 800f124:	334c      	adds	r3, #76	@ 0x4c
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d038      	beq.n	800f19e <off_testing+0x20e>
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	6818      	ldr	r0, [r3, #0]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f136:	1c59      	adds	r1, r3, #1
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f13e:	461c      	mov	r4, r3
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f146:	fb04 f303 	mul.w	r3, r4, r3
 800f14a:	4413      	add	r3, r2
 800f14c:	334b      	adds	r3, #75	@ 0x4b
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	461c      	mov	r4, r3
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	4623      	mov	r3, r4
 800f156:	005b      	lsls	r3, r3, #1
 800f158:	4423      	add	r3, r4
 800f15a:	011b      	lsls	r3, r3, #4
 800f15c:	4413      	add	r3, r2
 800f15e:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800f162:	681c      	ldr	r4, [r3, #0]
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f16a:	461d      	mov	r5, r3
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f172:	fb05 f303 	mul.w	r3, r5, r3
 800f176:	4413      	add	r3, r2
 800f178:	334b      	adds	r3, #75	@ 0x4b
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	461d      	mov	r5, r3
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	462b      	mov	r3, r5
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	442b      	add	r3, r5
 800f186:	011b      	lsls	r3, r3, #4
 800f188:	4413      	add	r3, r2
 800f18a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	9300      	str	r3, [sp, #0]
 800f192:	4623      	mov	r3, r4
 800f194:	460a      	mov	r2, r1
 800f196:	4925      	ldr	r1, [pc, #148]	@ (800f22c <off_testing+0x29c>)
 800f198:	f005 ff44 	bl	8015024 <siprintf>
 800f19c:	e031      	b.n	800f202 <off_testing+0x272>
    } else {
        sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f1b0:	fb01 f303 	mul.w	r3, r1, r3
 800f1b4:	4413      	add	r3, r2
 800f1b6:	334b      	adds	r3, #75	@ 0x4b
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	687a      	ldr	r2, [r7, #4]
 800f1be:	460b      	mov	r3, r1
 800f1c0:	005b      	lsls	r3, r3, #1
 800f1c2:	440b      	add	r3, r1
 800f1c4:	011b      	lsls	r3, r3, #4
 800f1c6:	4413      	add	r3, r2
 800f1c8:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800f1cc:	6819      	ldr	r1, [r3, #0]
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f1d4:	461c      	mov	r4, r3
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f1dc:	fb04 f303 	mul.w	r3, r4, r3
 800f1e0:	4413      	add	r3, r2
 800f1e2:	334b      	adds	r3, #75	@ 0x4b
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	461c      	mov	r4, r3
        sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	4623      	mov	r3, r4
 800f1ec:	005b      	lsls	r3, r3, #1
 800f1ee:	4423      	add	r3, r4
 800f1f0:	011b      	lsls	r3, r3, #4
 800f1f2:	4413      	add	r3, r2
 800f1f4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	460a      	mov	r2, r1
 800f1fc:	490c      	ldr	r1, [pc, #48]	@ (800f230 <off_testing+0x2a0>)
 800f1fe:	f005 ff11 	bl	8015024 <siprintf>
    }
    data_send_esp32->len = strlen(data_send_esp32->data);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	68fc      	ldr	r4, [r7, #12]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7f0 ffab 	bl	8000164 <strlen>
 800f20e:	4603      	mov	r3, r0
 800f210:	6063      	str	r3, [r4, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800f212:	4b08      	ldr	r3, [pc, #32]	@ (800f234 <off_testing+0x2a4>)
 800f214:	6818      	ldr	r0, [r3, #0]
 800f216:	f107 020c 	add.w	r2, r7, #12
 800f21a:	2308      	movs	r3, #8
 800f21c:	2100      	movs	r1, #0
 800f21e:	f003 fd9f 	bl	8012d60 <OS_task_post_event>
}
 800f222:	bf00      	nop
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bdb0      	pop	{r4, r5, r7, pc}
 800f22a:	bf00      	nop
 800f22c:	0801840c 	.word	0x0801840c
 800f230:	08018420 	.word	0x08018420
 800f234:	080192f4 	.word	0x080192f4

0800f238 <show_pulse>:

static void show_pulse(Screen_t *screen_obj, uint8_t curr_case) {
 800f238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f23c:	f5ad 6d8c 	sub.w	sp, sp, #1120	@ 0x460
 800f240:	af04      	add	r7, sp, #16
 800f242:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f246:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f24a:	6018      	str	r0, [r3, #0]
 800f24c:	460a      	mov	r2, r1
 800f24e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f252:	f2a3 434d 	subw	r3, r3, #1101	@ 0x44d
 800f256:	701a      	strb	r2, [r3, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 800f258:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f25c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f266:	4619      	mov	r1, r3
 800f268:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f26c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f276:	fb01 f303 	mul.w	r3, r1, r3
 800f27a:	4413      	add	r3, r2
 800f27c:	334b      	adds	r3, #75	@ 0x4b
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	4619      	mov	r1, r3
 800f282:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f286:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	460b      	mov	r3, r1
 800f28e:	005b      	lsls	r3, r3, #1
 800f290:	440b      	add	r3, r1
 800f292:	011b      	lsls	r3, r3, #4
 800f294:	4413      	add	r3, r2
 800f296:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	f887 3441 	strb.w	r3, [r7, #1089]	@ 0x441
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800f2a0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f2a4:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f2b4:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f2be:	fb01 f303 	mul.w	r3, r1, r3
 800f2c2:	4413      	add	r3, r2
 800f2c4:	334b      	adds	r3, #75	@ 0x4b
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	f887 3440 	strb.w	r3, [r7, #1088]	@ 0x440
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 800f2cc:	f897 2440 	ldrb.w	r2, [r7, #1088]	@ 0x440
 800f2d0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f2d4:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f2d8:	6819      	ldr	r1, [r3, #0]
 800f2da:	4613      	mov	r3, r2
 800f2dc:	005b      	lsls	r3, r3, #1
 800f2de:	4413      	add	r3, r2
 800f2e0:	011b      	lsls	r3, r3, #4
 800f2e2:	440b      	add	r3, r1
 800f2e4:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800f2ee:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f2f2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f302:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f30c:	fb01 f303 	mul.w	r3, r1, r3
 800f310:	4413      	add	r3, r2
 800f312:	334b      	adds	r3, #75	@ 0x4b
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	f887 343e 	strb.w	r3, [r7, #1086]	@ 0x43e
    
    char ShowCase_String[30];
    uint8_t index_data;
    uint16_t vp_pulse = 0x1000;
 800f31a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f31e:	f8a7 344e 	strh.w	r3, [r7, #1102]	@ 0x44e
    uint8_t pins_to_show = num_pin - 2; 
 800f322:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
 800f326:	3b02      	subs	r3, #2
 800f328:	f887 343d 	strb.w	r3, [r7, #1085]	@ 0x43d
    uint8_t skip_index1 = (num_pin / 2) - 1; // First skip index
 800f32c:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
 800f330:	085b      	lsrs	r3, r3, #1
 800f332:	b2db      	uxtb	r3, r3
 800f334:	3b01      	subs	r3, #1
 800f336:	f887 343c 	strb.w	r3, [r7, #1084]	@ 0x43c
    uint8_t skip_index2 = num_pin - 1;       // Second skip index
 800f33a:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
 800f33e:	3b01      	subs	r3, #1
 800f340:	f887 343b 	strb.w	r3, [r7, #1083]	@ 0x43b
    uint16_t Address_VP = VP_Text_Pin_Pulse;
 800f344:	f249 7350 	movw	r3, #38736	@ 0x9750
 800f348:	f8a7 344c 	strh.w	r3, [r7, #1100]	@ 0x44c
    uint16_t vp_vertical = VP_vertical_line;
 800f34c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f350:	f8a7 344a 	strh.w	r3, [r7, #1098]	@ 0x44a

    char *data_copy = malloc(screen_obj->Program_Testx[index_program].data_pin_len + 1);
 800f354:	f897 243e 	ldrb.w	r2, [r7, #1086]	@ 0x43e
 800f358:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f35c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f360:	6819      	ldr	r1, [r3, #0]
 800f362:	4613      	mov	r3, r2
 800f364:	005b      	lsls	r3, r3, #1
 800f366:	4413      	add	r3, r2
 800f368:	011b      	lsls	r3, r3, #4
 800f36a:	440b      	add	r3, r1
 800f36c:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	3301      	adds	r3, #1
 800f374:	4618      	mov	r0, r3
 800f376:	f003 ff25 	bl	80131c4 <malloc>
 800f37a:	4603      	mov	r3, r0
 800f37c:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
    memcpy(data_copy, screen_obj->Program_Testx[index_program].data_pin, screen_obj->Program_Testx[index_program].data_pin_len);
 800f380:	f897 243e 	ldrb.w	r2, [r7, #1086]	@ 0x43e
 800f384:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f388:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f38c:	6819      	ldr	r1, [r3, #0]
 800f38e:	4613      	mov	r3, r2
 800f390:	005b      	lsls	r3, r3, #1
 800f392:	4413      	add	r3, r2
 800f394:	011b      	lsls	r3, r3, #4
 800f396:	440b      	add	r3, r1
 800f398:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800f39c:	6818      	ldr	r0, [r3, #0]
 800f39e:	f897 243e 	ldrb.w	r2, [r7, #1086]	@ 0x43e
 800f3a2:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f3a6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f3aa:	6819      	ldr	r1, [r3, #0]
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	005b      	lsls	r3, r3, #1
 800f3b0:	4413      	add	r3, r2
 800f3b2:	011b      	lsls	r3, r3, #4
 800f3b4:	440b      	add	r3, r1
 800f3b6:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800f3ba:	881b      	ldrh	r3, [r3, #0]
 800f3bc:	461a      	mov	r2, r3
 800f3be:	4601      	mov	r1, r0
 800f3c0:	f8d7 0434 	ldr.w	r0, [r7, #1076]	@ 0x434
 800f3c4:	f006 f8af 	bl	8015526 <memcpy>
    data_copy[screen_obj->Program_Testx[index_program].data_pin_len] = '\0'; // Null terminate
 800f3c8:	f897 243e 	ldrb.w	r2, [r7, #1086]	@ 0x43e
 800f3cc:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f3d0:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f3d4:	6819      	ldr	r1, [r3, #0]
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	005b      	lsls	r3, r3, #1
 800f3da:	4413      	add	r3, r2
 800f3dc:	011b      	lsls	r3, r3, #4
 800f3de:	440b      	add	r3, r1
 800f3e0:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800f3e4:	881b      	ldrh	r3, [r3, #0]
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800f3ec:	4413      	add	r3, r2
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	701a      	strb	r2, [r3, #0]

    // First, collect all pin names into an array
    char pin_names[32][32]; // Adjust size as needed
    uint8_t total_pins = 0;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	f887 3449 	strb.w	r3, [r7, #1097]	@ 0x449
    char *temp_buf = strtok(data_copy, "\n");
 800f3f8:	49b5      	ldr	r1, [pc, #724]	@ (800f6d0 <show_pulse+0x498>)
 800f3fa:	f8d7 0434 	ldr.w	r0, [r7, #1076]	@ 0x434
 800f3fe:	f005 ff99 	bl	8015334 <strtok>
 800f402:	f8c7 0444 	str.w	r0, [r7, #1092]	@ 0x444

    while (temp_buf != NULL && total_pins < 32) {
 800f406:	e015      	b.n	800f434 <show_pulse+0x1fc>
        strcpy(pin_names[total_pins], temp_buf);
 800f408:	f897 3449 	ldrb.w	r3, [r7, #1097]	@ 0x449
 800f40c:	f107 0208 	add.w	r2, r7, #8
 800f410:	015b      	lsls	r3, r3, #5
 800f412:	4413      	add	r3, r2
 800f414:	f8d7 1444 	ldr.w	r1, [r7, #1092]	@ 0x444
 800f418:	4618      	mov	r0, r3
 800f41a:	f006 f86e 	bl	80154fa <strcpy>
        total_pins++;
 800f41e:	f897 3449 	ldrb.w	r3, [r7, #1097]	@ 0x449
 800f422:	3301      	adds	r3, #1
 800f424:	f887 3449 	strb.w	r3, [r7, #1097]	@ 0x449
        temp_buf = strtok(NULL, "\n");
 800f428:	49a9      	ldr	r1, [pc, #676]	@ (800f6d0 <show_pulse+0x498>)
 800f42a:	2000      	movs	r0, #0
 800f42c:	f005 ff82 	bl	8015334 <strtok>
 800f430:	f8c7 0444 	str.w	r0, [r7, #1092]	@ 0x444
    while (temp_buf != NULL && total_pins < 32) {
 800f434:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d003      	beq.n	800f444 <show_pulse+0x20c>
 800f43c:	f897 3449 	ldrb.w	r3, [r7, #1097]	@ 0x449
 800f440:	2b1f      	cmp	r3, #31
 800f442:	d9e1      	bls.n	800f408 <show_pulse+0x1d0>
    }

    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1, 
 800f444:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f448:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f452:	4619      	mov	r1, r3
 800f454:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f458:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f462:	fb01 f303 	mul.w	r3, r1, r3
 800f466:	4413      	add	r3, r2
 800f468:	3348      	adds	r3, #72	@ 0x48
 800f46a:	781b      	ldrb	r3, [r3, #0]
    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
 800f46c:	1c59      	adds	r1, r3, #1
            (pins_to_show + 6) / 7); // Calculate total cases needed
 800f46e:	f897 343d 	ldrb.w	r3, [r7, #1085]	@ 0x43d
 800f472:	3306      	adds	r3, #6
    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
 800f474:	4a97      	ldr	r2, [pc, #604]	@ (800f6d4 <show_pulse+0x49c>)
 800f476:	fb82 0203 	smull	r0, r2, r2, r3
 800f47a:	441a      	add	r2, r3
 800f47c:	1092      	asrs	r2, r2, #2
 800f47e:	17db      	asrs	r3, r3, #31
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	460b      	mov	r3, r1
 800f48a:	4a93      	ldr	r2, [pc, #588]	@ (800f6d8 <show_pulse+0x4a0>)
 800f48c:	211e      	movs	r1, #30
 800f48e:	f005 fd93 	bl	8014fb8 <sniprintf>

    DWIN_SetText((Dwin_t *)screen_obj, VP_Show_CurrentCase, ShowCase_String, strlen(ShowCase_String));
 800f492:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800f496:	4618      	mov	r0, r3
 800f498:	f7f0 fe64 	bl	8000164 <strlen>
 800f49c:	4603      	mov	r3, r0
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 800f4a4:	f507 618a 	add.w	r1, r7, #1104	@ 0x450
 800f4a8:	f2a1 404c 	subw	r0, r1, #1100	@ 0x44c
 800f4ac:	f249 3180 	movw	r1, #37760	@ 0x9380
 800f4b0:	6800      	ldr	r0, [r0, #0]
 800f4b2:	f002 fa2f 	bl	8011914 <DWIN_SetText>

    for (uint8_t i = 0; i < 7; i++) {
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	f887 3443 	strb.w	r3, [r7, #1091]	@ 0x443
 800f4bc:	e192      	b.n	800f7e4 <show_pulse+0x5ac>
        uint8_t display_pin = (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * 7) + i;
 800f4be:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f4c2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f4d2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f4d6:	681a      	ldr	r2, [r3, #0]
 800f4d8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f4dc:	fb01 f303 	mul.w	r3, r1, r3
 800f4e0:	4413      	add	r3, r2
 800f4e2:	3348      	adds	r3, #72	@ 0x48
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	00d2      	lsls	r2, r2, #3
 800f4ea:	1ad3      	subs	r3, r2, r3
 800f4ec:	b2da      	uxtb	r2, r3
 800f4ee:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 800f4f2:	4413      	add	r3, r2
 800f4f4:	f887 3433 	strb.w	r3, [r7, #1075]	@ 0x433
        
        if (display_pin < pins_to_show) {
 800f4f8:	f897 2433 	ldrb.w	r2, [r7, #1075]	@ 0x433
 800f4fc:	f897 343d 	ldrb.w	r3, [r7, #1085]	@ 0x43d
 800f500:	429a      	cmp	r2, r3
 800f502:	f080 80eb 	bcs.w	800f6dc <show_pulse+0x4a4>
            uint8_t actual_pin_index = display_pin;
 800f506:	f897 3433 	ldrb.w	r3, [r7, #1075]	@ 0x433
 800f50a:	f887 3442 	strb.w	r3, [r7, #1090]	@ 0x442
            
            // Adjust for skipped indices
            if (actual_pin_index >= skip_index1) {
 800f50e:	f897 2442 	ldrb.w	r2, [r7, #1090]	@ 0x442
 800f512:	f897 343c 	ldrb.w	r3, [r7, #1084]	@ 0x43c
 800f516:	429a      	cmp	r2, r3
 800f518:	d304      	bcc.n	800f524 <show_pulse+0x2ec>
                actual_pin_index++; // Skip VCC
 800f51a:	f897 3442 	ldrb.w	r3, [r7, #1090]	@ 0x442
 800f51e:	3301      	adds	r3, #1
 800f520:	f887 3442 	strb.w	r3, [r7, #1090]	@ 0x442
            }
            if (actual_pin_index >= skip_index2) {
 800f524:	f897 2442 	ldrb.w	r2, [r7, #1090]	@ 0x442
 800f528:	f897 343b 	ldrb.w	r3, [r7, #1083]	@ 0x43b
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d304      	bcc.n	800f53a <show_pulse+0x302>
                actual_pin_index++; // Skip GND
 800f530:	f897 3442 	ldrb.w	r3, [r7, #1090]	@ 0x442
 800f534:	3301      	adds	r3, #1
 800f536:	f887 3442 	strb.w	r3, [r7, #1090]	@ 0x442
            }
            
            // Calculate data index
            index_data = num_case * actual_pin_index;
 800f53a:	f897 3441 	ldrb.w	r3, [r7, #1089]	@ 0x441
 800f53e:	f897 2442 	ldrb.w	r2, [r7, #1090]	@ 0x442
 800f542:	fb02 f303 	mul.w	r3, r2, r3
 800f546:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427
            
            // Create the line with actual data

            DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800f54a:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 800f54e:	b29b      	uxth	r3, r3
 800f550:	461a      	mov	r2, r3
 800f552:	0052      	lsls	r2, r2, #1
 800f554:	4413      	add	r3, r2
 800f556:	461a      	mov	r2, r3
 800f558:	0112      	lsls	r2, r2, #4
 800f55a:	1ad3      	subs	r3, r2, r3
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	3390      	adds	r3, #144	@ 0x90
 800f560:	b29e      	uxth	r6, r3
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800f562:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f566:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f570:	4619      	mov	r1, r3
 800f572:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f576:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f580:	fb01 f303 	mul.w	r3, r1, r3
 800f584:	4413      	add	r3, r2
 800f586:	3374      	adds	r3, #116	@ 0x74
 800f588:	681a      	ldr	r2, [r3, #0]
            DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800f58a:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 800f58e:	4413      	add	r3, r2
            DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800f590:	f8b7 144e 	ldrh.w	r1, [r7, #1102]	@ 0x44e
 800f594:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 800f598:	f2a2 404c 	subw	r0, r2, #1100	@ 0x44c
 800f59c:	f897 2441 	ldrb.w	r2, [r7, #1089]	@ 0x441
 800f5a0:	9201      	str	r2, [sp, #4]
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	4633      	mov	r3, r6
 800f5a6:	2264      	movs	r2, #100	@ 0x64
 800f5a8:	6800      	ldr	r0, [r0, #0]
 800f5aa:	f002 fade 	bl	8011b6a <DWIN_Create_Basic_line>
                                num_case);

            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case) {
 800f5ae:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f5b2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f5bc:	4619      	mov	r1, r3
 800f5be:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f5c2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f5cc:	fb01 f303 	mul.w	r3, r1, r3
 800f5d0:	4413      	add	r3, r2
 800f5d2:	3370      	adds	r3, #112	@ 0x70
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d02f      	beq.n	800f63a <show_pulse+0x402>
                DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,100 + (50 * i),110,100 + (50 * i),415,0x01ED);
 800f5da:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	0092      	lsls	r2, r2, #2
 800f5e4:	4413      	add	r3, r2
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	0091      	lsls	r1, r2, #2
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	4413      	add	r3, r2
 800f5f0:	005b      	lsls	r3, r3, #1
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	3364      	adds	r3, #100	@ 0x64
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	4619      	mov	r1, r3
 800f600:	0089      	lsls	r1, r1, #2
 800f602:	440b      	add	r3, r1
 800f604:	4619      	mov	r1, r3
 800f606:	0088      	lsls	r0, r1, #2
 800f608:	4619      	mov	r1, r3
 800f60a:	4603      	mov	r3, r0
 800f60c:	440b      	add	r3, r1
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	b29b      	uxth	r3, r3
 800f612:	3364      	adds	r3, #100	@ 0x64
 800f614:	b29b      	uxth	r3, r3
 800f616:	f8b7 144a 	ldrh.w	r1, [r7, #1098]	@ 0x44a
 800f61a:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 800f61e:	f2a0 404c 	subw	r0, r0, #1100	@ 0x44c
 800f622:	f240 16ed 	movw	r6, #493	@ 0x1ed
 800f626:	9602      	str	r6, [sp, #8]
 800f628:	f240 169f 	movw	r6, #415	@ 0x19f
 800f62c:	9601      	str	r6, [sp, #4]
 800f62e:	9300      	str	r3, [sp, #0]
 800f630:	236e      	movs	r3, #110	@ 0x6e
 800f632:	6800      	ldr	r0, [r0, #0]
 800f634:	f002 fca7 	bl	8011f86 <DWIN_Create_Single_line>
 800f638:	e02e      	b.n	800f698 <show_pulse+0x460>
            } else {
                DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,100 + (50 * i),110,100 + (50 * i),415,0xF800);
 800f63a:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 800f63e:	b29b      	uxth	r3, r3
 800f640:	461a      	mov	r2, r3
 800f642:	0092      	lsls	r2, r2, #2
 800f644:	4413      	add	r3, r2
 800f646:	461a      	mov	r2, r3
 800f648:	0091      	lsls	r1, r2, #2
 800f64a:	461a      	mov	r2, r3
 800f64c:	460b      	mov	r3, r1
 800f64e:	4413      	add	r3, r2
 800f650:	005b      	lsls	r3, r3, #1
 800f652:	b29b      	uxth	r3, r3
 800f654:	3364      	adds	r3, #100	@ 0x64
 800f656:	b29a      	uxth	r2, r3
 800f658:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	4619      	mov	r1, r3
 800f660:	0089      	lsls	r1, r1, #2
 800f662:	440b      	add	r3, r1
 800f664:	4619      	mov	r1, r3
 800f666:	0088      	lsls	r0, r1, #2
 800f668:	4619      	mov	r1, r3
 800f66a:	4603      	mov	r3, r0
 800f66c:	440b      	add	r3, r1
 800f66e:	005b      	lsls	r3, r3, #1
 800f670:	b29b      	uxth	r3, r3
 800f672:	3364      	adds	r3, #100	@ 0x64
 800f674:	b29b      	uxth	r3, r3
 800f676:	f8b7 144a 	ldrh.w	r1, [r7, #1098]	@ 0x44a
 800f67a:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 800f67e:	f2a0 404c 	subw	r0, r0, #1100	@ 0x44c
 800f682:	f44f 4678 	mov.w	r6, #63488	@ 0xf800
 800f686:	9602      	str	r6, [sp, #8]
 800f688:	f240 169f 	movw	r6, #415	@ 0x19f
 800f68c:	9601      	str	r6, [sp, #4]
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	236e      	movs	r3, #110	@ 0x6e
 800f692:	6800      	ldr	r0, [r0, #0]
 800f694:	f002 fc77 	bl	8011f86 <DWIN_Create_Single_line>
            }
            
            // Set pin name
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
 800f698:	f897 3442 	ldrb.w	r3, [r7, #1090]	@ 0x442
 800f69c:	f107 0208 	add.w	r2, r7, #8
 800f6a0:	015b      	lsls	r3, r3, #5
 800f6a2:	18d6      	adds	r6, r2, r3
                        strlen(pin_names[actual_pin_index]));
 800f6a4:	f897 3442 	ldrb.w	r3, [r7, #1090]	@ 0x442
 800f6a8:	f107 0208 	add.w	r2, r7, #8
 800f6ac:	015b      	lsls	r3, r3, #5
 800f6ae:	4413      	add	r3, r2
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7f0 fd57 	bl	8000164 <strlen>
 800f6b6:	4603      	mov	r3, r0
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	f8b7 144c 	ldrh.w	r1, [r7, #1100]	@ 0x44c
 800f6be:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 800f6c2:	f2a2 404c 	subw	r0, r2, #1100	@ 0x44c
 800f6c6:	4632      	mov	r2, r6
 800f6c8:	6800      	ldr	r0, [r0, #0]
 800f6ca:	f002 f923 	bl	8011914 <DWIN_SetText>
 800f6ce:	e073      	b.n	800f7b8 <show_pulse+0x580>
 800f6d0:	08018578 	.word	0x08018578
 800f6d4:	92492493 	.word	0x92492493
 800f6d8:	080183f8 	.word	0x080183f8
            
        } else { /* don't using this */
 800f6dc:	466b      	mov	r3, sp
 800f6de:	469a      	mov	sl, r3
            uint8_t low_buf[12 - num_case];
 800f6e0:	f897 3441 	ldrb.w	r3, [r7, #1089]	@ 0x441
 800f6e4:	f1c3 060c 	rsb	r6, r3, #12
 800f6e8:	1e73      	subs	r3, r6, #1
 800f6ea:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 800f6ee:	4632      	mov	r2, r6
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	4614      	mov	r4, r2
 800f6f4:	461d      	mov	r5, r3
 800f6f6:	f04f 0200 	mov.w	r2, #0
 800f6fa:	f04f 0300 	mov.w	r3, #0
 800f6fe:	00eb      	lsls	r3, r5, #3
 800f700:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f704:	00e2      	lsls	r2, r4, #3
 800f706:	4632      	mov	r2, r6
 800f708:	2300      	movs	r3, #0
 800f70a:	4690      	mov	r8, r2
 800f70c:	4699      	mov	r9, r3
 800f70e:	f04f 0200 	mov.w	r2, #0
 800f712:	f04f 0300 	mov.w	r3, #0
 800f716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f71a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f71e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f722:	4633      	mov	r3, r6
 800f724:	3307      	adds	r3, #7
 800f726:	08db      	lsrs	r3, r3, #3
 800f728:	00db      	lsls	r3, r3, #3
 800f72a:	ebad 0d03 	sub.w	sp, sp, r3
 800f72e:	ab04      	add	r3, sp, #16
 800f730:	3300      	adds	r3, #0
 800f732:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
            memset(low_buf,0,sizeof(low_buf));
 800f736:	4633      	mov	r3, r6
 800f738:	461a      	mov	r2, r3
 800f73a:	2100      	movs	r1, #0
 800f73c:	f8d7 0428 	ldr.w	r0, [r7, #1064]	@ 0x428
 800f740:	f005 fda8 	bl	8015294 <memset>
            DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 800f744:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 800f748:	b29b      	uxth	r3, r3
 800f74a:	461a      	mov	r2, r3
 800f74c:	0052      	lsls	r2, r2, #1
 800f74e:	4413      	add	r3, r2
 800f750:	461a      	mov	r2, r3
 800f752:	0112      	lsls	r2, r2, #4
 800f754:	1ad3      	subs	r3, r2, r3
 800f756:	b29b      	uxth	r3, r3
 800f758:	3390      	adds	r3, #144	@ 0x90
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	b2f3      	uxtb	r3, r6
 800f75e:	f8b7 144e 	ldrh.w	r1, [r7, #1102]	@ 0x44e
 800f762:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 800f766:	f2a0 404c 	subw	r0, r0, #1100	@ 0x44c
 800f76a:	9301      	str	r3, [sp, #4]
 800f76c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 800f770:	9300      	str	r3, [sp, #0]
 800f772:	4613      	mov	r3, r2
 800f774:	2264      	movs	r2, #100	@ 0x64
 800f776:	6800      	ldr	r0, [r0, #0]
 800f778:	f002 f9f7 	bl	8011b6a <DWIN_Create_Basic_line>
                                low_buf, 
                                sizeof(low_buf));
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, " ", 1);
 800f77c:	f8b7 144c 	ldrh.w	r1, [r7, #1100]	@ 0x44c
 800f780:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f784:	f2a3 404c 	subw	r0, r3, #1100	@ 0x44c
 800f788:	2301      	movs	r3, #1
 800f78a:	4a1e      	ldr	r2, [pc, #120]	@ (800f804 <show_pulse+0x5cc>)
 800f78c:	6800      	ldr	r0, [r0, #0]
 800f78e:	f002 f8c1 	bl	8011914 <DWIN_SetText>
            DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,0,0,0,0,0xF800);
 800f792:	f8b7 144a 	ldrh.w	r1, [r7, #1098]	@ 0x44a
 800f796:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800f79a:	f2a3 404c 	subw	r0, r3, #1100	@ 0x44c
 800f79e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800f7a2:	9302      	str	r3, [sp, #8]
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	9301      	str	r3, [sp, #4]
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	6800      	ldr	r0, [r0, #0]
 800f7b2:	f002 fbe8 	bl	8011f86 <DWIN_Create_Single_line>
 800f7b6:	46d5      	mov	sp, sl
        }
        
        vp_pulse += 0x200;
 800f7b8:	f8b7 344e 	ldrh.w	r3, [r7, #1102]	@ 0x44e
 800f7bc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f7c0:	f8a7 344e 	strh.w	r3, [r7, #1102]	@ 0x44e
        vp_vertical += 0x200;
 800f7c4:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	@ 0x44a
 800f7c8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f7cc:	f8a7 344a 	strh.w	r3, [r7, #1098]	@ 0x44a
        Address_VP += 0x10;
 800f7d0:	f8b7 344c 	ldrh.w	r3, [r7, #1100]	@ 0x44c
 800f7d4:	3310      	adds	r3, #16
 800f7d6:	f8a7 344c 	strh.w	r3, [r7, #1100]	@ 0x44c
    for (uint8_t i = 0; i < 7; i++) {
 800f7da:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 800f7de:	3301      	adds	r3, #1
 800f7e0:	f887 3443 	strb.w	r3, [r7, #1091]	@ 0x443
 800f7e4:	f897 3443 	ldrb.w	r3, [r7, #1091]	@ 0x443
 800f7e8:	2b06      	cmp	r3, #6
 800f7ea:	f67f ae68 	bls.w	800f4be <show_pulse+0x286>
    }

    free(data_copy);
 800f7ee:	f8d7 0434 	ldr.w	r0, [r7, #1076]	@ 0x434
 800f7f2:	f003 fcef 	bl	80131d4 <free>
}
 800f7f6:	bf00      	nop
 800f7f8:	f507 678a 	add.w	r7, r7, #1104	@ 0x450
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f802:	bf00      	nop
 800f804:	080186b0 	.word	0x080186b0

0800f808 <show_main_page>:

void show_main_page(Screen_t *const screen_obj, uint8_t PageMain, uint8_t curr_program) {
 800f808:	b590      	push	{r4, r7, lr}
 800f80a:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800f80e:	af02      	add	r7, sp, #8
 800f810:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f814:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f818:	6018      	str	r0, [r3, #0]
 800f81a:	4608      	mov	r0, r1
 800f81c:	4611      	mov	r1, r2
 800f81e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f822:	f2a3 233d 	subw	r3, r3, #573	@ 0x23d
 800f826:	4602      	mov	r2, r0
 800f828:	701a      	strb	r2, [r3, #0]
 800f82a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f82e:	f2a3 233e 	subw	r3, r3, #574	@ 0x23e
 800f832:	460a      	mov	r2, r1
 800f834:	701a      	strb	r2, [r3, #0]
    
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800f836:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f83a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f844:	4619      	mov	r1, r3
 800f846:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f84a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f854:	fb01 f303 	mul.w	r3, r1, r3
 800f858:	4413      	add	r3, r2
 800f85a:	334b      	adds	r3, #75	@ 0x4b
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800f862:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800f866:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f86a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f86e:	6819      	ldr	r1, [r3, #0]
 800f870:	4613      	mov	r3, r2
 800f872:	005b      	lsls	r3, r3, #1
 800f874:	4413      	add	r3, r2
 800f876:	011b      	lsls	r3, r3, #4
 800f878:	440b      	add	r3, r1
 800f87a:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800f884:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800f888:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f88c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f890:	6819      	ldr	r1, [r3, #0]
 800f892:	4613      	mov	r3, r2
 800f894:	005b      	lsls	r3, r3, #1
 800f896:	4413      	add	r3, r2
 800f898:	011b      	lsls	r3, r3, #4
 800f89a:	440b      	add	r3, r1
 800f89c:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
    switch (PageMain) {
 800f8a6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f8aa:	f2a3 233d 	subw	r3, r3, #573	@ 0x23d
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	3b64      	subs	r3, #100	@ 0x64
 800f8b2:	2b03      	cmp	r3, #3
 800f8b4:	f200 8340 	bhi.w	800ff38 <show_main_page+0x730>
 800f8b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f8c0 <show_main_page+0xb8>)
 800f8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8be:	bf00      	nop
 800f8c0:	0800f9a7 	.word	0x0800f9a7
 800f8c4:	0800f8d1 	.word	0x0800f8d1
 800f8c8:	0800fa93 	.word	0x0800fa93
 800f8cc:	0800fcbf 	.word	0x0800fcbf
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 800f8d0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f8d4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f8de:	4619      	mov	r1, r3
 800f8e0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f8e4:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800f8e8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f8ec:	fb01 f303 	mul.w	r3, r1, r3
 800f8f0:	3348      	adds	r3, #72	@ 0x48
 800f8f2:	6812      	ldr	r2, [r2, #0]
 800f8f4:	4413      	add	r3, r2
 800f8f6:	1d5c      	adds	r4, r3, #5
 800f8f8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f8fc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f906:	4619      	mov	r1, r3
 800f908:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f90c:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800f910:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f914:	fb01 f303 	mul.w	r3, r1, r3
 800f918:	3348      	adds	r3, #72	@ 0x48
 800f91a:	6812      	ldr	r2, [r2, #0]
 800f91c:	4413      	add	r3, r2
 800f91e:	3305      	adds	r3, #5
 800f920:	4618      	mov	r0, r3
 800f922:	f7f0 fc1f 	bl	8000164 <strlen>
 800f926:	4603      	mov	r3, r0
 800f928:	b29b      	uxth	r3, r3
 800f92a:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800f92e:	f5a2 700f 	sub.w	r0, r2, #572	@ 0x23c
 800f932:	4622      	mov	r2, r4
 800f934:	f249 3150 	movw	r1, #37712	@ 0x9350
 800f938:	6800      	ldr	r0, [r0, #0]
 800f93a:	f001 ffeb 	bl	8011914 <DWIN_SetText>
            DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800f93e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f942:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f94c:	4619      	mov	r1, r3
 800f94e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f952:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f95c:	fb01 f303 	mul.w	r3, r1, r3
 800f960:	4413      	add	r3, r2
 800f962:	334c      	adds	r3, #76	@ 0x4c
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	461a      	mov	r2, r3
 800f968:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f96c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f970:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f974:	6818      	ldr	r0, [r3, #0]
 800f976:	f002 f84f 	bl	8011a18 <DWIN_SetVariable_Icon>
            Screen_ShowData_Mainpage(screen_obj,curr_program);
 800f97a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f97e:	f2a3 233e 	subw	r3, r3, #574	@ 0x23e
 800f982:	781a      	ldrb	r2, [r3, #0]
 800f984:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f988:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f98c:	4611      	mov	r1, r2
 800f98e:	6818      	ldr	r0, [r3, #0]
 800f990:	f7fe fac0 	bl	800df14 <Screen_ShowData_Mainpage>

            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN);
 800f994:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f998:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f99c:	2165      	movs	r1, #101	@ 0x65
 800f99e:	6818      	ldr	r0, [r3, #0]
 800f9a0:	f001 ff91 	bl	80118c6 <DWIN_SetPage>
        } break;
 800f9a4:	e2c8      	b.n	800ff38 <show_main_page+0x730>
        case DWINPAGE_MAIN_FINISH: {
            /* Show data */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 800f9a6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f9aa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f9ba:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800f9be:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f9c2:	fb01 f303 	mul.w	r3, r1, r3
 800f9c6:	3348      	adds	r3, #72	@ 0x48
 800f9c8:	6812      	ldr	r2, [r2, #0]
 800f9ca:	4413      	add	r3, r2
 800f9cc:	1d5c      	adds	r4, r3, #5
 800f9ce:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f9d2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800f9dc:	4619      	mov	r1, r3
 800f9de:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800f9e2:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800f9e6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f9ea:	fb01 f303 	mul.w	r3, r1, r3
 800f9ee:	3348      	adds	r3, #72	@ 0x48
 800f9f0:	6812      	ldr	r2, [r2, #0]
 800f9f2:	4413      	add	r3, r2
 800f9f4:	3305      	adds	r3, #5
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7f0 fbb4 	bl	8000164 <strlen>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800fa04:	f5a2 700f 	sub.w	r0, r2, #572	@ 0x23c
 800fa08:	4622      	mov	r2, r4
 800fa0a:	f249 3150 	movw	r1, #37712	@ 0x9350
 800fa0e:	6800      	ldr	r0, [r0, #0]
 800fa10:	f001 ff80 	bl	8011914 <DWIN_SetText>
            show_text_short_circuit(screen_obj);
 800fa14:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fa18:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fa1c:	6818      	ldr	r0, [r3, #0]
 800fa1e:	f7fe fd8f 	bl	800e540 <show_text_short_circuit>
            show_text_function_test(screen_obj);
 800fa22:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fa26:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fa2a:	6818      	ldr	r0, [r3, #0]
 800fa2c:	f7fe fed4 	bl	800e7d8 <show_text_function_test>
            /* change page if home page */
            if (screen_obj->Ishome) {
 800fa30:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fa34:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f893 34dc 	ldrb.w	r3, [r3, #1244]	@ 0x4dc
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f000 8275 	beq.w	800ff2e <show_main_page+0x726>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800fa44:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fa48:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fa52:	4619      	mov	r1, r3
 800fa54:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fa58:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fa62:	fb01 f303 	mul.w	r3, r1, r3
 800fa66:	4413      	add	r3, r2
 800fa68:	334c      	adds	r3, #76	@ 0x4c
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fa72:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fa76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800fa7a:	6818      	ldr	r0, [r3, #0]
 800fa7c:	f001 ffcc 	bl	8011a18 <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_FINISH);
 800fa80:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fa84:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fa88:	2164      	movs	r1, #100	@ 0x64
 800fa8a:	6818      	ldr	r0, [r3, #0]
 800fa8c:	f001 ff1b 	bl	80118c6 <DWIN_SetPage>
            }
        } break;
 800fa90:	e24d      	b.n	800ff2e <show_main_page+0x726>
        case DWINPAGE_MAIN_DETAIL: {
            /* get data and show */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
 800fa92:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fa96:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800faa0:	4619      	mov	r1, r3
 800faa2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800faa6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fab0:	fb01 f303 	mul.w	r3, r1, r3
 800fab4:	4413      	add	r3, r2
 800fab6:	3348      	adds	r3, #72	@ 0x48
 800fab8:	2200      	movs	r2, #0
 800faba:	701a      	strb	r2, [r3, #0]
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
 800fabc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fac0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800faca:	4619      	mov	r1, r3
 800facc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fad0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fada:	fb01 f303 	mul.w	r3, r1, r3
 800fade:	4413      	add	r3, r2
 800fae0:	3348      	adds	r3, #72	@ 0x48
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a
            char ShowCase_String[30];
            Screen_SetInfo_Pin(screen_obj);
 800fae8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800faec:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800faf0:	6818      	ldr	r0, [r3, #0]
 800faf2:	f7fe faf3 	bl	800e0dc <Screen_SetInfo_Pin>
            Screen_GetIcon_Pin(screen_obj,screen_obj->Program_Testx[index_program].data_test);
 800faf6:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 800fafa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fafe:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fb02:	6819      	ldr	r1, [r3, #0]
 800fb04:	4613      	mov	r3, r2
 800fb06:	005b      	lsls	r3, r3, #1
 800fb08:	4413      	add	r3, r2
 800fb0a:	011b      	lsls	r3, r3, #4
 800fb0c:	440b      	add	r3, r1
 800fb0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fb18:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fb1c:	4611      	mov	r1, r2
 800fb1e:	6818      	ldr	r0, [r3, #0]
 800fb20:	f7fd ff4a 	bl	800d9b8 <Screen_GetIcon_Pin>
            DWIN_SetArray_Icon(screen_obj,VP_ICON_DIRECTION_PIN,(uint8_t *)(_Screen.IC_Testerx[screen_obj->curr_device].config_pin),num_pin);
 800fb24:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fb28:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fb32:	4619      	mov	r1, r3
 800fb34:	4ab6      	ldr	r2, [pc, #728]	@ (800fe10 <show_main_page+0x608>)
 800fb36:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fb3a:	fb01 f303 	mul.w	r3, r1, r3
 800fb3e:	4413      	add	r3, r2
 800fb40:	335c      	adds	r3, #92	@ 0x5c
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 800fb48:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fb4c:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800fb50:	f244 0150 	movw	r1, #16464	@ 0x4050
 800fb54:	6800      	ldr	r0, [r0, #0]
 800fb56:	f001 ff8c 	bl	8011a72 <DWIN_SetArray_Icon>
            Screen_GetIcon_Result(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800fb5a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fb5e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fb68:	4619      	mov	r1, r3
 800fb6a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fb6e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fb78:	fb01 f303 	mul.w	r3, r1, r3
 800fb7c:	4413      	add	r3, r2
 800fb7e:	3360      	adds	r3, #96	@ 0x60
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fb86:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fb8a:	4611      	mov	r1, r2
 800fb8c:	6818      	ldr	r0, [r3, #0]
 800fb8e:	f7fd ff9c 	bl	800daca <Screen_GetIcon_Result>
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_case*num_pin);
 800fb92:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fb96:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fba0:	4619      	mov	r1, r3
 800fba2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fba6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fbb0:	fb01 f303 	mul.w	r3, r1, r3
 800fbb4:	4413      	add	r3, r2
 800fbb6:	3360      	adds	r3, #96	@ 0x60
 800fbb8:	6819      	ldr	r1, [r3, #0]
 800fbba:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800fbbe:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800fbc2:	fb02 f303 	mul.w	r3, r2, r3
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	f107 0308 	add.w	r3, r7, #8
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f005 fcaa 	bl	8015526 <memcpy>
            DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[case_show * num_pin]),num_pin);
 800fbd2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fbd6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fbe6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fbf0:	fb01 f303 	mul.w	r3, r1, r3
 800fbf4:	4413      	add	r3, r2
 800fbf6:	3364      	adds	r3, #100	@ 0x64
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f897 223a 	ldrb.w	r2, [r7, #570]	@ 0x23a
 800fbfe:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 800fc02:	fb01 f202 	mul.w	r2, r1, r2
 800fc06:	441a      	add	r2, r3
 800fc08:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 800fc0c:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fc10:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800fc14:	f244 1150 	movw	r1, #16720	@ 0x4150
 800fc18:	6800      	ldr	r0, [r0, #0]
 800fc1a:	f001 ff2a 	bl	8011a72 <DWIN_SetArray_Icon>
            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,num_case);
 800fc1e:	f897 323a 	ldrb.w	r3, [r7, #570]	@ 0x23a
 800fc22:	1c5a      	adds	r2, r3, #1
 800fc24:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800fc28:	f507 7007 	add.w	r0, r7, #540	@ 0x21c
 800fc2c:	9300      	str	r3, [sp, #0]
 800fc2e:	4613      	mov	r3, r2
 800fc30:	4a78      	ldr	r2, [pc, #480]	@ (800fe14 <show_main_page+0x60c>)
 800fc32:	211e      	movs	r1, #30
 800fc34:	f005 f9c0 	bl	8014fb8 <sniprintf>
            DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800fc38:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7f0 fa91 	bl	8000164 <strlen>
 800fc42:	4603      	mov	r3, r0
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 800fc4a:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800fc4e:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800fc52:	f249 3180 	movw	r1, #37760	@ 0x9380
 800fc56:	6800      	ldr	r0, [r0, #0]
 800fc58:	f001 fe5c 	bl	8011914 <DWIN_SetText>
            /* change page if home page */
            if (screen_obj->Ishome) {
 800fc5c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fc60:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f893 34dc 	ldrb.w	r3, [r3, #1244]	@ 0x4dc
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f000 8161 	beq.w	800ff32 <show_main_page+0x72a>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800fc70:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fc74:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fc7e:	4619      	mov	r1, r3
 800fc80:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fc84:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fc8e:	fb01 f303 	mul.w	r3, r1, r3
 800fc92:	4413      	add	r3, r2
 800fc94:	334c      	adds	r3, #76	@ 0x4c
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	461a      	mov	r2, r3
 800fc9a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fc9e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fca2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800fca6:	6818      	ldr	r0, [r3, #0]
 800fca8:	f001 feb6 	bl	8011a18 <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL);
 800fcac:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fcb0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fcb4:	2166      	movs	r1, #102	@ 0x66
 800fcb6:	6818      	ldr	r0, [r3, #0]
 800fcb8:	f001 fe05 	bl	80118c6 <DWIN_SetPage>
            }
        } break;
 800fcbc:	e139      	b.n	800ff32 <show_main_page+0x72a>
        case DWINPAGE_MAIN_PULSE: {
            /* show data */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
 800fcbe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fcc2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fccc:	4619      	mov	r1, r3
 800fcce:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fcd2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fcdc:	fb01 f303 	mul.w	r3, r1, r3
 800fce0:	4413      	add	r3, r2
 800fce2:	3348      	adds	r3, #72	@ 0x48
 800fce4:	2200      	movs	r2, #0
 800fce6:	701a      	strb	r2, [r3, #0]
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
 800fce8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fcec:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fcfc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fd06:	fb01 f303 	mul.w	r3, r1, r3
 800fd0a:	4413      	add	r3, r2
 800fd0c:	3348      	adds	r3, #72	@ 0x48
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
            char ShowCase_String[30];
            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,2);
 800fd14:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 800fd18:	3301      	adds	r3, #1
 800fd1a:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 800fd1e:	2202      	movs	r2, #2
 800fd20:	9200      	str	r2, [sp, #0]
 800fd22:	4a3c      	ldr	r2, [pc, #240]	@ (800fe14 <show_main_page+0x60c>)
 800fd24:	211e      	movs	r1, #30
 800fd26:	f005 f947 	bl	8014fb8 <sniprintf>

            screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = malloc(num_case * num_pin);
 800fd2a:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800fd2e:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800fd32:	fb02 f303 	mul.w	r3, r2, r3
 800fd36:	461a      	mov	r2, r3
 800fd38:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fd3c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fd46:	461c      	mov	r4, r3
 800fd48:	4610      	mov	r0, r2
 800fd4a:	f003 fa3b 	bl	80131c4 <malloc>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	4619      	mov	r1, r3
 800fd52:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fd56:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fd60:	fb04 f303 	mul.w	r3, r4, r3
 800fd64:	4413      	add	r3, r2
 800fd66:	3374      	adds	r3, #116	@ 0x74
 800fd68:	6019      	str	r1, [r3, #0]
            transposeArray(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_pin,num_case);
 800fd6a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fd6e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fd78:	4619      	mov	r1, r3
 800fd7a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fd7e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fd88:	fb01 f303 	mul.w	r3, r1, r3
 800fd8c:	4413      	add	r3, r2
 800fd8e:	3374      	adds	r3, #116	@ 0x74
 800fd90:	6818      	ldr	r0, [r3, #0]
 800fd92:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fd96:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fda0:	4619      	mov	r1, r3
 800fda2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fda6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fdb0:	fb01 f303 	mul.w	r3, r1, r3
 800fdb4:	4413      	add	r3, r2
 800fdb6:	3360      	adds	r3, #96	@ 0x60
 800fdb8:	6819      	ldr	r1, [r3, #0]
 800fdba:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800fdbe:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800fdc2:	f001 fcaa 	bl	801171a <transposeArray>
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,num_case * num_pin);
 800fdc6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fdca:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fdda:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fde4:	fb01 f303 	mul.w	r3, r1, r3
 800fde8:	4413      	add	r3, r2
 800fdea:	3374      	adds	r3, #116	@ 0x74
 800fdec:	6819      	ldr	r1, [r3, #0]
 800fdee:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800fdf2:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 800fdf6:	fb02 f303 	mul.w	r3, r2, r3
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	f107 0308 	add.w	r3, r7, #8
 800fe00:	4618      	mov	r0, r3
 800fe02:	f005 fb90 	bl	8015526 <memcpy>
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800fe06:	2300      	movs	r3, #0
 800fe08:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 800fe0c:	e03b      	b.n	800fe86 <show_main_page+0x67e>
 800fe0e:	bf00      	nop
 800fe10:	20000c78 	.word	0x20000c78
 800fe14:	080183f8 	.word	0x080183f8
                screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] = screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] - '0';
 800fe18:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fe1c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fe26:	4619      	mov	r1, r3
 800fe28:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fe2c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fe36:	fb01 f303 	mul.w	r3, r1, r3
 800fe3a:	4413      	add	r3, r2
 800fe3c:	3374      	adds	r3, #116	@ 0x74
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800fe44:	4413      	add	r3, r2
 800fe46:	781a      	ldrb	r2, [r3, #0]
 800fe48:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fe4c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800fe56:	4618      	mov	r0, r3
 800fe58:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fe5c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fe60:	6819      	ldr	r1, [r3, #0]
 800fe62:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fe66:	fb00 f303 	mul.w	r3, r0, r3
 800fe6a:	440b      	add	r3, r1
 800fe6c:	3374      	adds	r3, #116	@ 0x74
 800fe6e:	6819      	ldr	r1, [r3, #0]
 800fe70:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800fe74:	440b      	add	r3, r1
 800fe76:	3a30      	subs	r2, #48	@ 0x30
 800fe78:	b2d2      	uxtb	r2, r2
 800fe7a:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800fe7c:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800fe80:	3301      	adds	r3, #1
 800fe82:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 800fe86:	f897 223f 	ldrb.w	r2, [r7, #575]	@ 0x23f
 800fe8a:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 800fe8e:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 800fe92:	fb01 f303 	mul.w	r3, r1, r3
 800fe96:	429a      	cmp	r2, r3
 800fe98:	dbbe      	blt.n	800fe18 <show_main_page+0x610>
            }

            /* show fist case in pusle page */
            show_pulse(screen_obj,0);
 800fe9a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fe9e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fea2:	2100      	movs	r1, #0
 800fea4:	6818      	ldr	r0, [r3, #0]
 800fea6:	f7ff f9c7 	bl	800f238 <show_pulse>
            //         vp_pulse += 0x200;
            //     }
            // }
            
            // /* change page if home page */
            if (screen_obj->Ishome) {
 800feaa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800feae:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	f893 34dc 	ldrb.w	r3, [r3, #1244]	@ 0x4dc
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d03c      	beq.n	800ff36 <show_main_page+0x72e>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800febc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fec0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 800feca:	4619      	mov	r1, r3
 800fecc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fed0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800fed4:	681a      	ldr	r2, [r3, #0]
 800fed6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800feda:	fb01 f303 	mul.w	r3, r1, r3
 800fede:	4413      	add	r3, r2
 800fee0:	334c      	adds	r3, #76	@ 0x4c
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	461a      	mov	r2, r3
 800fee6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800feea:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800feee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800fef2:	6818      	ldr	r0, [r3, #0]
 800fef4:	f001 fd90 	bl	8011a18 <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_PULSE);
 800fef8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800fefc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800ff00:	2167      	movs	r1, #103	@ 0x67
 800ff02:	6818      	ldr	r0, [r3, #0]
 800ff04:	f001 fcdf 	bl	80118c6 <DWIN_SetPage>
                DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800ff08:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7f0 f929 	bl	8000164 <strlen>
 800ff12:	4603      	mov	r3, r0
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 800ff1a:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800ff1e:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 800ff22:	f249 3180 	movw	r1, #37760	@ 0x9380
 800ff26:	6800      	ldr	r0, [r0, #0]
 800ff28:	f001 fcf4 	bl	8011914 <DWIN_SetText>
            }
        } break;
 800ff2c:	e003      	b.n	800ff36 <show_main_page+0x72e>
        } break;
 800ff2e:	bf00      	nop
 800ff30:	e002      	b.n	800ff38 <show_main_page+0x730>
        } break;
 800ff32:	bf00      	nop
 800ff34:	e000      	b.n	800ff38 <show_main_page+0x730>
        } break;
 800ff36:	bf00      	nop
    }
}
 800ff38:	bf00      	nop
 800ff3a:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd90      	pop	{r4, r7, pc}
 800ff42:	bf00      	nop

0800ff44 <get_data_testing_finish>:

void get_data_testing_finish(Screen_t *const screen_obj,uint8_t device, uint8_t *result_array) {
 800ff44:	b590      	push	{r4, r7, lr}
 800ff46:	b0c9      	sub	sp, #292	@ 0x124
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff4e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ff52:	6018      	str	r0, [r3, #0]
 800ff54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800ff5c:	601a      	str	r2, [r3, #0]
 800ff5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff62:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800ff66:	460a      	mov	r2, r1
 800ff68:	701a      	strb	r2, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[device].selected_Program_Index;
 800ff6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff6e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	4619      	mov	r1, r3
 800ff76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ff84:	fb01 f303 	mul.w	r3, r1, r3
 800ff88:	4413      	add	r3, r2
 800ff8a:	334b      	adds	r3, #75	@ 0x4b
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800ff92:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800ff96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff9a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ff9e:	6819      	ldr	r1, [r3, #0]
 800ffa0:	4613      	mov	r3, r2
 800ffa2:	005b      	lsls	r3, r3, #1
 800ffa4:	4413      	add	r3, r2
 800ffa6:	011b      	lsls	r3, r3, #4
 800ffa8:	440b      	add	r3, r1
 800ffaa:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800ffb4:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800ffb8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ffbc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ffc0:	6819      	ldr	r1, [r3, #0]
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	005b      	lsls	r3, r3, #1
 800ffc6:	4413      	add	r3, r2
 800ffc8:	011b      	lsls	r3, r3, #4
 800ffca:	440b      	add	r3, r1
 800ffcc:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
    /* get data test */
    uint8_t buffer[200];
    screen_obj->IC_Testerx[device].isShort = result_array[0];
 800ffd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ffda:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ffe6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	7819      	ldrb	r1, [r3, #0]
 800ffee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fff2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fffc:	fb00 f303 	mul.w	r3, r0, r3
 8010000:	4413      	add	r3, r2
 8010002:	336c      	adds	r3, #108	@ 0x6c
 8010004:	460a      	mov	r2, r1
 8010006:	701a      	strb	r2, [r3, #0]
    screen_obj->IC_Testerx[device].data_short_circuit = (char *)malloc(num_pin);
 8010008:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 801000c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010010:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	461c      	mov	r4, r3
 8010018:	4610      	mov	r0, r2
 801001a:	f003 f8d3 	bl	80131c4 <malloc>
 801001e:	4603      	mov	r3, r0
 8010020:	4619      	mov	r1, r3
 8010022:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010026:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010030:	fb04 f303 	mul.w	r3, r4, r3
 8010034:	4413      	add	r3, r2
 8010036:	3368      	adds	r3, #104	@ 0x68
 8010038:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_short_circuit,(char *)result_array + 2,num_pin);
 801003a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801003e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	4619      	mov	r1, r3
 8010046:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801004a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010054:	fb01 f303 	mul.w	r3, r1, r3
 8010058:	4413      	add	r3, r2
 801005a:	3368      	adds	r3, #104	@ 0x68
 801005c:	6818      	ldr	r0, [r3, #0]
 801005e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010062:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	3302      	adds	r3, #2
 801006a:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 801006e:	4619      	mov	r1, r3
 8010070:	f005 f94c 	bl	801530c <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_short_circuit,num_pin);
    screen_obj->IC_Testerx[device].data_result = (char *)malloc(num_case * num_pin);
 8010074:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8010078:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 801007c:	fb02 f303 	mul.w	r3, r2, r3
 8010080:	461a      	mov	r2, r3
 8010082:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010086:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	461c      	mov	r4, r3
 801008e:	4610      	mov	r0, r2
 8010090:	f003 f898 	bl	80131c4 <malloc>
 8010094:	4603      	mov	r3, r0
 8010096:	4619      	mov	r1, r3
 8010098:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801009c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80100a6:	fb04 f303 	mul.w	r3, r4, r3
 80100aa:	4413      	add	r3, r2
 80100ac:	3360      	adds	r3, #96	@ 0x60
 80100ae:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_result,(char *)result_array + (num_pin +3),num_case * num_pin);
 80100b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80100b4:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	4619      	mov	r1, r3
 80100bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80100c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80100ca:	fb01 f303 	mul.w	r3, r1, r3
 80100ce:	4413      	add	r3, r2
 80100d0:	3360      	adds	r3, #96	@ 0x60
 80100d2:	6818      	ldr	r0, [r3, #0]
 80100d4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80100d8:	3303      	adds	r3, #3
 80100da:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80100de:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80100e2:	6812      	ldr	r2, [r2, #0]
 80100e4:	18d1      	adds	r1, r2, r3
 80100e6:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80100ea:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 80100ee:	fb02 f303 	mul.w	r3, r2, r3
 80100f2:	461a      	mov	r2, r3
 80100f4:	f005 f90a 	bl	801530c <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_result,num_case * num_pin);
    screen_obj->IC_Testerx[device].data_result_case = (char *)malloc(num_case);
 80100f8:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 80100fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010100:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	461c      	mov	r4, r3
 8010108:	4610      	mov	r0, r2
 801010a:	f003 f85b 	bl	80131c4 <malloc>
 801010e:	4603      	mov	r3, r0
 8010110:	4619      	mov	r1, r3
 8010112:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010116:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010120:	fb04 f303 	mul.w	r3, r4, r3
 8010124:	4413      	add	r3, r2
 8010126:	3370      	adds	r3, #112	@ 0x70
 8010128:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_result_case,(char *)result_array + (num_pin + 5 + num_case * num_pin),num_case);
 801012a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801012e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	4619      	mov	r1, r3
 8010136:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801013a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010144:	fb01 f303 	mul.w	r3, r1, r3
 8010148:	4413      	add	r3, r2
 801014a:	3370      	adds	r3, #112	@ 0x70
 801014c:	6818      	ldr	r0, [r3, #0]
 801014e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8010152:	1d5a      	adds	r2, r3, #5
 8010154:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8010158:	f897 111e 	ldrb.w	r1, [r7, #286]	@ 0x11e
 801015c:	fb01 f303 	mul.w	r3, r1, r3
 8010160:	4413      	add	r3, r2
 8010162:	461a      	mov	r2, r3
 8010164:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010168:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4413      	add	r3, r2
 8010170:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 8010174:	4619      	mov	r1, r3
 8010176:	f005 f8c9 	bl	801530c <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_result_case,num_case);

    screen_obj->IC_Testerx[device].curr_PageMain = DWINPAGE_MAIN_FINISH;
 801017a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801017e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	4619      	mov	r1, r3
 8010186:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801018a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010194:	fb01 f303 	mul.w	r3, r1, r3
 8010198:	4413      	add	r3, r2
 801019a:	3349      	adds	r3, #73	@ 0x49
 801019c:	2264      	movs	r2, #100	@ 0x64
 801019e:	701a      	strb	r2, [r3, #0]
    uint8_t *device_finish = malloc(sizeof(uint8_t));
 80101a0:	2001      	movs	r0, #1
 80101a2:	f003 f80f 	bl	80131c4 <malloc>
 80101a6:	4603      	mov	r3, r0
 80101a8:	653b      	str	r3, [r7, #80]	@ 0x50
    memcpy(device_finish,&device,sizeof(uint8_t));
 80101aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101ac:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80101b0:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 80101b4:	7812      	ldrb	r2, [r2, #0]
 80101b6:	701a      	strb	r2, [r3, #0]
    
    /* get text result to store  */
    uint8_t result_buffer[60];
    memset(result_buffer,0,60);
 80101b8:	f107 0314 	add.w	r3, r7, #20
 80101bc:	223c      	movs	r2, #60	@ 0x3c
 80101be:	2100      	movs	r1, #0
 80101c0:	4618      	mov	r0, r3
 80101c2:	f005 f867 	bl	8015294 <memset>
    get_text_result(screen_obj,result_buffer,screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic);
 80101c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80101ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 80101d4:	4619      	mov	r1, r3
 80101d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80101da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80101e4:	fb01 f303 	mul.w	r3, r1, r3
 80101e8:	4413      	add	r3, r2
 80101ea:	334a      	adds	r3, #74	@ 0x4a
 80101ec:	781a      	ldrb	r2, [r3, #0]
 80101ee:	f107 0114 	add.w	r1, r7, #20
 80101f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80101f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80101fa:	6818      	ldr	r0, [r3, #0]
 80101fc:	f7fe fc7c 	bl	800eaf8 <get_text_result>
    if (strlen(screen_obj->IC_Testerx[screen_obj->curr_device].result_text) > 1) {
 8010200:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010204:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 801020e:	4619      	mov	r1, r3
 8010210:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010214:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8010218:	f44f 7398 	mov.w	r3, #304	@ 0x130
 801021c:	fb01 f303 	mul.w	r3, r1, r3
 8010220:	3378      	adds	r3, #120	@ 0x78
 8010222:	6812      	ldr	r2, [r2, #0]
 8010224:	4413      	add	r3, r2
 8010226:	4618      	mov	r0, r3
 8010228:	f7ef ff9c 	bl	8000164 <strlen>
 801022c:	4603      	mov	r3, r0
 801022e:	2b01      	cmp	r3, #1
 8010230:	d91a      	bls.n	8010268 <get_data_testing_finish+0x324>
        strcat(screen_obj->IC_Testerx[screen_obj->curr_device].result_text," | ");
 8010232:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010236:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 8010240:	4619      	mov	r1, r3
 8010242:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010246:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 801024a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 801024e:	fb01 f303 	mul.w	r3, r1, r3
 8010252:	3378      	adds	r3, #120	@ 0x78
 8010254:	6812      	ldr	r2, [r2, #0]
 8010256:	18d4      	adds	r4, r2, r3
 8010258:	4620      	mov	r0, r4
 801025a:	f7ef ff83 	bl	8000164 <strlen>
 801025e:	4603      	mov	r3, r0
 8010260:	4423      	add	r3, r4
 8010262:	4a17      	ldr	r2, [pc, #92]	@ (80102c0 <get_data_testing_finish+0x37c>)
 8010264:	6810      	ldr	r0, [r2, #0]
 8010266:	6018      	str	r0, [r3, #0]
    }
    strncat(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,result_buffer,strlen(result_buffer));
 8010268:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801026c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f893 34d9 	ldrb.w	r3, [r3, #1241]	@ 0x4d9
 8010276:	4619      	mov	r1, r3
 8010278:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801027c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8010280:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010284:	fb01 f303 	mul.w	r3, r1, r3
 8010288:	3378      	adds	r3, #120	@ 0x78
 801028a:	6812      	ldr	r2, [r2, #0]
 801028c:	18d4      	adds	r4, r2, r3
 801028e:	f107 0314 	add.w	r3, r7, #20
 8010292:	4618      	mov	r0, r3
 8010294:	f7ef ff66 	bl	8000164 <strlen>
 8010298:	4602      	mov	r2, r0
 801029a:	f107 0314 	add.w	r3, r7, #20
 801029e:	4619      	mov	r1, r3
 80102a0:	4620      	mov	r0, r4
 80102a2:	f005 f80e 	bl	80152c2 <strncat>

    OS_task_post_event(AO_task_screen,DEIVCE_TEST_FINISH,(uint8_t *)&device_finish,sizeof(uint8_t *));
 80102a6:	4b07      	ldr	r3, [pc, #28]	@ (80102c4 <get_data_testing_finish+0x380>)
 80102a8:	6818      	ldr	r0, [r3, #0]
 80102aa:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80102ae:	2304      	movs	r3, #4
 80102b0:	2100      	movs	r1, #0
 80102b2:	f002 fd55 	bl	8012d60 <OS_task_post_event>
}
 80102b6:	bf00      	nop
 80102b8:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd90      	pop	{r4, r7, pc}
 80102c0:	080186b4 	.word	0x080186b4
 80102c4:	080192ec 	.word	0x080192ec

080102c8 <warning_page>:

void warning_page(Screen_t *const screen_obj,uint32_t id_slave) {
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b09a      	sub	sp, #104	@ 0x68
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6039      	str	r1, [r7, #0]
    char buffer[90]  = {0};
 80102d2:	f107 030c 	add.w	r3, r7, #12
 80102d6:	225a      	movs	r2, #90	@ 0x5a
 80102d8:	2100      	movs	r1, #0
 80102da:	4618      	mov	r0, r3
 80102dc:	f004 ffda 	bl	8015294 <memset>
    snprintf(buffer,sizeof(buffer),"IC Tester %d is not connected to the system. Please check the connection",(id_slave - 0x470));
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80102e6:	f107 000c 	add.w	r0, r7, #12
 80102ea:	4a0d      	ldr	r2, [pc, #52]	@ (8010320 <warning_page+0x58>)
 80102ec:	215a      	movs	r1, #90	@ 0x5a
 80102ee:	f004 fe63 	bl	8014fb8 <sniprintf>

    DWIN_SetText((Dwin_t *)screen_obj,VP_Warining,buffer,strlen(buffer));
 80102f2:	f107 030c 	add.w	r3, r7, #12
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7ef ff34 	bl	8000164 <strlen>
 80102fc:	4603      	mov	r3, r0
 80102fe:	b29b      	uxth	r3, r3
 8010300:	f107 020c 	add.w	r2, r7, #12
 8010304:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f001 fb03 	bl	8011914 <DWIN_SetText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_WARNING);
 801030e:	2177      	movs	r1, #119	@ 0x77
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f001 fad8 	bl	80118c6 <DWIN_SetPage>

}
 8010316:	bf00      	nop
 8010318:	3768      	adds	r7, #104	@ 0x68
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	080186b8 	.word	0x080186b8

08010324 <can_bus_task_init>:
static app_can can_bus_instance;
OS_task * const AO_task_can_bus = &can_bus_instance.task; 
static managerTX_CAN_t *buff_store[MAX_MANAGER_TX_BUF_SIZE]; /* buffer store the data write */


void can_bus_task_init(CAN_HandleTypeDef *pCan) {
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
    printf("init app can bus\n");
 801032c:	4810      	ldr	r0, [pc, #64]	@ (8010370 <can_bus_task_init+0x4c>)
 801032e:	f004 fe3b 	bl	8014fa8 <puts>
    can_bus_instance.b_counting = false;
 8010332:	4b10      	ldr	r3, [pc, #64]	@ (8010374 <can_bus_task_init+0x50>)
 8010334:	2200      	movs	r2, #0
 8010336:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    can_bus_instance.head_index = 0;
 801033a:	4b0e      	ldr	r3, [pc, #56]	@ (8010374 <can_bus_task_init+0x50>)
 801033c:	2200      	movs	r2, #0
 801033e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    can_bus_instance.tail_index = 0;
 8010342:	4b0c      	ldr	r3, [pc, #48]	@ (8010374 <can_bus_task_init+0x50>)
 8010344:	2200      	movs	r2, #0
 8010346:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    can_bus_instance.nUsed = 0;
 801034a:	4b0a      	ldr	r3, [pc, #40]	@ (8010374 <can_bus_task_init+0x50>)
 801034c:	2200      	movs	r2, #0
 801034e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    can_bus_instance.end = MAX_MANAGER_TX_BUF_SIZE - 1;
 8010352:	4b08      	ldr	r3, [pc, #32]	@ (8010374 <can_bus_task_init+0x50>)
 8010354:	2204      	movs	r2, #4
 8010356:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
    can_bus_instance.managerTX_buf = buff_store;
 801035a:	4b06      	ldr	r3, [pc, #24]	@ (8010374 <can_bus_task_init+0x50>)
 801035c:	4a06      	ldr	r2, [pc, #24]	@ (8010378 <can_bus_task_init+0x54>)
 801035e:	671a      	str	r2, [r3, #112]	@ 0x70

    can_bus_ctor(&can_bus_instance);
 8010360:	4804      	ldr	r0, [pc, #16]	@ (8010374 <can_bus_task_init+0x50>)
 8010362:	f000 f80b 	bl	801037c <can_bus_ctor>

    UNUSED(pCan);
}
 8010366:	bf00      	nop
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	08018704 	.word	0x08018704
 8010374:	200011c0 	.word	0x200011c0
 8010378:	2000123c 	.word	0x2000123c

0801037c <can_bus_ctor>:

void can_bus_ctor(app_can *pAO) {
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_can_bus,(OS_handler)&can_bus_init,(OS_handler)&can_bus_dispatch);
 8010384:	4b07      	ldr	r3, [pc, #28]	@ (80103a4 <can_bus_ctor+0x28>)
 8010386:	4a08      	ldr	r2, [pc, #32]	@ (80103a8 <can_bus_ctor+0x2c>)
 8010388:	4908      	ldr	r1, [pc, #32]	@ (80103ac <can_bus_ctor+0x30>)
 801038a:	4618      	mov	r0, r3
 801038c:	f002 fc36 	bl	8012bfc <OS_task_init>

    OS_TimeEvt_init(&can_bus_instance.te_timeout,TX_TIMEOUT,&can_bus_instance.task);
 8010390:	4a04      	ldr	r2, [pc, #16]	@ (80103a4 <can_bus_ctor+0x28>)
 8010392:	2105      	movs	r1, #5
 8010394:	4806      	ldr	r0, [pc, #24]	@ (80103b0 <can_bus_ctor+0x34>)
 8010396:	f002 fd01 	bl	8012d9c <OS_TimeEvt_init>
}
 801039a:	bf00      	nop
 801039c:	3708      	adds	r7, #8
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	200011c0 	.word	0x200011c0
 80103a8:	080103d1 	.word	0x080103d1
 80103ac:	080103b5 	.word	0x080103b5
 80103b0:	200011dc 	.word	0x200011dc

080103b4 <can_bus_init>:

static void can_bus_init(app_can * const pOS_task, OS_event_t const * const pEvent) {
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Stop(&pOS_task->te_timeout);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	331c      	adds	r3, #28
 80103c2:	4618      	mov	r0, r3
 80103c4:	f002 fd27 	bl	8012e16 <OS_TimeEvt_Stop>

    UNUSED(pEvent);
}
 80103c8:	bf00      	nop
 80103ca:	3708      	adds	r7, #8
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <can_bus_dispatch>:

static void can_bus_dispatch(app_can * const pOS_task, OS_event_t const * const pEvent) {
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	881b      	ldrh	r3, [r3, #0]
 80103de:	2b05      	cmp	r3, #5
 80103e0:	f200 80d4 	bhi.w	801058c <can_bus_dispatch+0x1bc>
 80103e4:	a201      	add	r2, pc, #4	@ (adr r2, 80103ec <can_bus_dispatch+0x1c>)
 80103e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ea:	bf00      	nop
 80103ec:	08010405 	.word	0x08010405
 80103f0:	0801058d 	.word	0x0801058d
 80103f4:	0801040d 	.word	0x0801040d
 80103f8:	08010571 	.word	0x08010571
 80103fc:	0801058d 	.word	0x0801058d
 8010400:	08010493 	.word	0x08010493
        case SEND_DATA_CAN_BUS : {
            printf("Send data to device test");
 8010404:	4866      	ldr	r0, [pc, #408]	@ (80105a0 <can_bus_dispatch+0x1d0>)
 8010406:	f004 fd67 	bl	8014ed8 <iprintf>
            
        } break;
 801040a:	e0c4      	b.n	8010596 <can_bus_dispatch+0x1c6>
        case RECEIVE_DATA_CAN_BUS : {

        } break;
        case START_TIMEOUT_TX : {
            printf("start time out\n");
 801040c:	4865      	ldr	r0, [pc, #404]	@ (80105a4 <can_bus_dispatch+0x1d4>)
 801040e:	f004 fdcb 	bl	8014fa8 <puts>
            managerTX_CAN_t *check_TX_CAN = (managerTX_CAN_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 8010412:	6838      	ldr	r0, [r7, #0]
 8010414:	f002 fea5 	bl	8013162 <get_data_dynamic_event>
 8010418:	4603      	mov	r3, r0
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	60bb      	str	r3, [r7, #8]
            pOS_task->managerTX_buf[pOS_task->head_index] = check_TX_CAN;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	4413      	add	r3, r2
 801042c:	68ba      	ldr	r2, [r7, #8]
 801042e:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010436:	2b00      	cmp	r3, #0
 8010438:	d106      	bne.n	8010448 <can_bus_dispatch+0x78>
                pOS_task->head_index = pOS_task->end;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f893 2077 	ldrb.w	r2, [r3, #119]	@ 0x77
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8010446:	e007      	b.n	8010458 <can_bus_dispatch+0x88>
            } else {
                --pOS_task->head_index;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801044e:	3b01      	subs	r3, #1
 8010450:	b2da      	uxtb	r2, r3
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
            }
            ++pOS_task->nUsed;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 801045e:	3301      	adds	r3, #1
 8010460:	b2da      	uxtb	r2, r3
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
            if (pOS_task->b_counting == false) { /* in free, count to check timeout */
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801046e:	f083 0301 	eor.w	r3, r3, #1
 8010472:	b2db      	uxtb	r3, r3
 8010474:	2b00      	cmp	r3, #0
 8010476:	f000 808b 	beq.w	8010590 <can_bus_dispatch+0x1c0>
                pOS_task->b_counting = true;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2201      	movs	r2, #1
 801047e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                OS_TimeEvt_Set(&pOS_task->te_timeout,200,0); /* run only 1 time */                
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	331c      	adds	r3, #28
 8010486:	2200      	movs	r2, #0
 8010488:	21c8      	movs	r1, #200	@ 0xc8
 801048a:	4618      	mov	r0, r3
 801048c:	f002 fcac 	bl	8012de8 <OS_TimeEvt_Set>
            }
        } break;
 8010490:	e07e      	b.n	8010590 <can_bus_dispatch+0x1c0>
        case TX_TIMEOUT : {
            managerTX_CAN_t *check_TX_CAN = pOS_task->managerTX_buf[pOS_task->tail_index];
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 801049c:	009b      	lsls	r3, r3, #2
 801049e:	4413      	add	r3, r2
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	60fb      	str	r3, [r7, #12]
            if (check_TX_CAN->TX_Done) { // transmit success 
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	791b      	ldrb	r3, [r3, #4]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d024      	beq.n	80104f6 <can_bus_dispatch+0x126>
                printf("transmit CAN id %x success\n",check_TX_CAN->ID);
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	4619      	mov	r1, r3
 80104b2:	483d      	ldr	r0, [pc, #244]	@ (80105a8 <can_bus_dispatch+0x1d8>)
 80104b4:	f004 fd10 	bl	8014ed8 <iprintf>
                if (pOS_task->managerTX_buf[pOS_task->tail_index] != NULL) {
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	4413      	add	r3, r2
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d020      	beq.n	801050e <can_bus_dispatch+0x13e>
                    free(pOS_task->managerTX_buf[pOS_task->tail_index]);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	4413      	add	r3, r2
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	4618      	mov	r0, r3
 80104de:	f002 fe79 	bl	80131d4 <free>
                    pOS_task->managerTX_buf[pOS_task->tail_index] = NULL;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80104ec:	009b      	lsls	r3, r3, #2
 80104ee:	4413      	add	r3, r2
 80104f0:	2200      	movs	r2, #0
 80104f2:	601a      	str	r2, [r3, #0]
 80104f4:	e00b      	b.n	801050e <can_bus_dispatch+0x13e>
                }
            } else { // transmit error 
                /* go to warning screen */
                printf("transmit CAN id %x failed\n",check_TX_CAN->ID);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4619      	mov	r1, r3
 80104fc:	482b      	ldr	r0, [pc, #172]	@ (80105ac <can_bus_dispatch+0x1dc>)
 80104fe:	f004 fceb 	bl	8014ed8 <iprintf>
                warning_page(&_Screen,check_TX_CAN->ID);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	4619      	mov	r1, r3
 8010508:	4829      	ldr	r0, [pc, #164]	@ (80105b0 <can_bus_dispatch+0x1e0>)
 801050a:	f7ff fedd 	bl	80102c8 <warning_page>
            }

            if (pOS_task->tail_index == 0) {
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8010514:	2b00      	cmp	r3, #0
 8010516:	d106      	bne.n	8010526 <can_bus_dispatch+0x156>
                    pOS_task->tail_index = pOS_task->end;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f893 2077 	ldrb.w	r2, [r3, #119]	@ 0x77
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
 8010524:	e007      	b.n	8010536 <can_bus_dispatch+0x166>
                } else {
                    --pOS_task->tail_index;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 801052c:	3b01      	subs	r3, #1
 801052e:	b2da      	uxtb	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                } 
            --pOS_task->nUsed;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 801053c:	3b01      	subs	r3, #1
 801053e:	b2da      	uxtb	r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
            pOS_task->b_counting = false;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            /* check buff */
            if (pOS_task->nUsed > 0 ) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8010554:	2b00      	cmp	r3, #0
 8010556:	d01d      	beq.n	8010594 <can_bus_dispatch+0x1c4>
                pOS_task->b_counting = true;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2201      	movs	r2, #1
 801055c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                OS_TimeEvt_Set(&pOS_task->te_timeout,200,0); /* run only 1 time */    
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	331c      	adds	r3, #28
 8010564:	2200      	movs	r2, #0
 8010566:	21c8      	movs	r1, #200	@ 0xc8
 8010568:	4618      	mov	r0, r3
 801056a:	f002 fc3d 	bl	8012de8 <OS_TimeEvt_Set>
            }
        } break;
 801056e:	e011      	b.n	8010594 <can_bus_dispatch+0x1c4>
        case TX_SUCCESS : {
            // if (pOS_task->b_counting = true) {
                printf("tx receive slave\n");
 8010570:	4810      	ldr	r0, [pc, #64]	@ (80105b4 <can_bus_dispatch+0x1e4>)
 8010572:	f004 fd19 	bl	8014fa8 <puts>
                pOS_task->managerTX_buf[pOS_task->tail_index]->TX_Done = true;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8010580:	009b      	lsls	r3, r3, #2
 8010582:	4413      	add	r3, r2
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2201      	movs	r2, #1
 8010588:	711a      	strb	r2, [r3, #4]
            // }
        } break; 
 801058a:	e004      	b.n	8010596 <can_bus_dispatch+0x1c6>
        case TX_FAILED : {

        } break;
        default : break;
 801058c:	bf00      	nop
 801058e:	e002      	b.n	8010596 <can_bus_dispatch+0x1c6>
        } break;
 8010590:	bf00      	nop
 8010592:	e000      	b.n	8010596 <can_bus_dispatch+0x1c6>
        } break;
 8010594:	bf00      	nop
    }
}
 8010596:	bf00      	nop
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	08018718 	.word	0x08018718
 80105a4:	08018734 	.word	0x08018734
 80105a8:	08018744 	.word	0x08018744
 80105ac:	08018760 	.word	0x08018760
 80105b0:	20000c78 	.word	0x20000c78
 80105b4:	0801877c 	.word	0x0801877c

080105b8 <eeprom_task_init>:

AT24Cxx_t eeprom_ob;
static write_param_t *write_buf[MAX_WRITE_EEPROM_BUF]; /* buffer store the data write */

/* I2C port using for eeprom */
void eeprom_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b08c      	sub	sp, #48	@ 0x30
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	460b      	mov	r3, r1
 80105c2:	70fb      	strb	r3, [r7, #3]
//    eeprom_ob.i2c_port = i2c_port;
//    eeprom_ob.dev_address = dev_address;
	
    /* init eeprom */
    if (AT24Cxx_Init(&eeprom_ob,dev_address,i2c_port) == AT24Cxx_Init_OK) {
 80105c4:	78fb      	ldrb	r3, [r7, #3]
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	4619      	mov	r1, r3
 80105ca:	4847      	ldr	r0, [pc, #284]	@ (80106e8 <eeprom_task_init+0x130>)
 80105cc:	f000 ff46 	bl	801145c <AT24Cxx_Init>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d103      	bne.n	80105de <eeprom_task_init+0x26>
        /* init success */
        printf("Init eeprom success!!\n");
 80105d6:	4845      	ldr	r0, [pc, #276]	@ (80106ec <eeprom_task_init+0x134>)
 80105d8:	f004 fce6 	bl	8014fa8 <puts>
 80105dc:	e002      	b.n	80105e4 <eeprom_task_init+0x2c>
    } else {
        printf("Init eeprom fail!!\n");
 80105de:	4844      	ldr	r0, [pc, #272]	@ (80106f0 <eeprom_task_init+0x138>)
 80105e0:	f004 fce2 	bl	8014fa8 <puts>
    }

      uint8_t data_check = 0;
 80105e4:	2300      	movs	r3, #0
 80105e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    // AT24Cxx_read_buffer(&eeprom_ob,MEM_ADDR_CHECK_UPDATA_DATA_TEST,&data_check,1);
    // if (data_check == 0) {
    // } 
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_MEM_ADDR_DIREC_USED,(uint8_t *)&data_check,sizeof(data_check));
 80105ea:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 80105ee:	2301      	movs	r3, #1
 80105f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80105f4:	483c      	ldr	r0, [pc, #240]	@ (80106e8 <eeprom_task_init+0x130>)
 80105f6:	f000 ff7b 	bl	80114f0 <AT24Cxx_write_buffer_bloking>
    HAL_Delay(10);
 80105fa:	200a      	movs	r0, #10
 80105fc:	f7f1 ffda 	bl	80025b4 <HAL_Delay>

    write_data_test_ic("744051",data_744051,sizeof(data_744051));
 8010600:	22c3      	movs	r2, #195	@ 0xc3
 8010602:	493c      	ldr	r1, [pc, #240]	@ (80106f4 <eeprom_task_init+0x13c>)
 8010604:	483c      	ldr	r0, [pc, #240]	@ (80106f8 <eeprom_task_init+0x140>)
 8010606:	f000 fad9 	bl	8010bbc <write_data_test_ic>
    write_data_test_ic("740000",data_7400,sizeof(data_7400));
 801060a:	226f      	movs	r2, #111	@ 0x6f
 801060c:	493b      	ldr	r1, [pc, #236]	@ (80106fc <eeprom_task_init+0x144>)
 801060e:	483c      	ldr	r0, [pc, #240]	@ (8010700 <eeprom_task_init+0x148>)
 8010610:	f000 fad4 	bl	8010bbc <write_data_test_ic>
    write_data_test_ic("74139",data_74139,sizeof(data_74139));
 8010614:	22ab      	movs	r2, #171	@ 0xab
 8010616:	493b      	ldr	r1, [pc, #236]	@ (8010704 <eeprom_task_init+0x14c>)
 8010618:	483b      	ldr	r0, [pc, #236]	@ (8010708 <eeprom_task_init+0x150>)
 801061a:	f000 facf 	bl	8010bbc <write_data_test_ic>
    write_data_test_ic("74164",data_74164,sizeof(data_74164));
 801061e:	22ad      	movs	r2, #173	@ 0xad
 8010620:	493a      	ldr	r1, [pc, #232]	@ (801070c <eeprom_task_init+0x154>)
 8010622:	483b      	ldr	r0, [pc, #236]	@ (8010710 <eeprom_task_init+0x158>)
 8010624:	f000 faca 	bl	8010bbc <write_data_test_ic>
    write_data_test_ic("7408",data_7408,sizeof(data_7408));
 8010628:	226f      	movs	r2, #111	@ 0x6f
 801062a:	493a      	ldr	r1, [pc, #232]	@ (8010714 <eeprom_task_init+0x15c>)
 801062c:	483a      	ldr	r0, [pc, #232]	@ (8010718 <eeprom_task_init+0x160>)
 801062e:	f000 fac5 	bl	8010bbc <write_data_test_ic>
    write_data_test_ic("74157",data_74157,sizeof(data_74157));
 8010632:	22ea      	movs	r2, #234	@ 0xea
 8010634:	4939      	ldr	r1, [pc, #228]	@ (801071c <eeprom_task_init+0x164>)
 8010636:	483a      	ldr	r0, [pc, #232]	@ (8010720 <eeprom_task_init+0x168>)
 8010638:	f000 fac0 	bl	8010bbc <write_data_test_ic>
    write_data_test_ic("40175",data_40175,sizeof(data_40175));
 801063c:	2282      	movs	r2, #130	@ 0x82
 801063e:	4939      	ldr	r1, [pc, #228]	@ (8010724 <eeprom_task_init+0x16c>)
 8010640:	4839      	ldr	r0, [pc, #228]	@ (8010728 <eeprom_task_init+0x170>)
 8010642:	f000 fabb 	bl	8010bbc <write_data_test_ic>
    write_data_test_ic("40174",data_40174,sizeof(data_40174));
 8010646:	227d      	movs	r2, #125	@ 0x7d
 8010648:	4938      	ldr	r1, [pc, #224]	@ (801072c <eeprom_task_init+0x174>)
 801064a:	4839      	ldr	r0, [pc, #228]	@ (8010730 <eeprom_task_init+0x178>)
 801064c:	f000 fab6 	bl	8010bbc <write_data_test_ic>
    write_data_test_ic("4027",data_4027,sizeof(data_4027));
 8010650:	2296      	movs	r2, #150	@ 0x96
 8010652:	4938      	ldr	r1, [pc, #224]	@ (8010734 <eeprom_task_init+0x17c>)
 8010654:	4838      	ldr	r0, [pc, #224]	@ (8010738 <eeprom_task_init+0x180>)
 8010656:	f000 fab1 	bl	8010bbc <write_data_test_ic>
    write_data_test_ic("74165",data_74165,sizeof(data_74165));
 801065a:	22a2      	movs	r2, #162	@ 0xa2
 801065c:	4937      	ldr	r1, [pc, #220]	@ (801073c <eeprom_task_init+0x184>)
 801065e:	4838      	ldr	r0, [pc, #224]	@ (8010740 <eeprom_task_init+0x188>)
 8010660:	f000 faac 	bl	8010bbc <write_data_test_ic>


    uint8_t num_direc;
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 8010664:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 8010668:	2301      	movs	r3, #1
 801066a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801066e:	481e      	ldr	r0, [pc, #120]	@ (80106e8 <eeprom_task_init+0x130>)
 8010670:	f001 f829 	bl	80116c6 <AT24Cxx_read_buffer>
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),&buffer,strlen(data_program1));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(1),&buffer,strlen(data_program2));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(2),&buffer,strlen(data_program3));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(3),&buffer,strlen(data_program4));

    char text_program_1[] = "0";
 8010674:	2330      	movs	r3, #48	@ 0x30
 8010676:	81bb      	strh	r3, [r7, #12]
    AT24Cxx_write_buffer(&eeprom_ob,0x02,(uint8_t *)text_program_1,strlen(text_program_1));
 8010678:	f107 030c 	add.w	r3, r7, #12
 801067c:	4618      	mov	r0, r3
 801067e:	f7ef fd71 	bl	8000164 <strlen>
 8010682:	4603      	mov	r3, r0
 8010684:	b29b      	uxth	r3, r3
 8010686:	f107 020c 	add.w	r2, r7, #12
 801068a:	2102      	movs	r1, #2
 801068c:	4816      	ldr	r0, [pc, #88]	@ (80106e8 <eeprom_task_init+0x130>)
 801068e:	f000 ff07 	bl	80114a0 <AT24Cxx_write_buffer>
    /* check write data test */


    // AT24Cxx_write_buffer(&eeprom_ob,MEM_ADDR_CHECK_UPDATA_DATA_TEST,&data_check,1);

    eeprom_instance.b_is_writing = false;
 8010692:	4b2c      	ldr	r3, [pc, #176]	@ (8010744 <eeprom_task_init+0x18c>)
 8010694:	2200      	movs	r2, #0
 8010696:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    eeprom_instance.data_eeprom.mem_addr = 0x00;
 801069a:	4b2a      	ldr	r3, [pc, #168]	@ (8010744 <eeprom_task_init+0x18c>)
 801069c:	2200      	movs	r2, #0
 801069e:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
    eeprom_instance.data_eeprom.data = (uint8_t *)0;
 80106a2:	4b28      	ldr	r3, [pc, #160]	@ (8010744 <eeprom_task_init+0x18c>)
 80106a4:	2200      	movs	r2, #0
 80106a6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = 0;
 80106aa:	4b26      	ldr	r3, [pc, #152]	@ (8010744 <eeprom_task_init+0x18c>)
 80106ac:	2200      	movs	r2, #0
 80106ae:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc

    eeprom_instance.write_params_buf = write_buf;
 80106b2:	4b24      	ldr	r3, [pc, #144]	@ (8010744 <eeprom_task_init+0x18c>)
 80106b4:	4a24      	ldr	r2, [pc, #144]	@ (8010748 <eeprom_task_init+0x190>)
 80106b6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    eeprom_instance.head_index = 0;
 80106ba:	4b22      	ldr	r3, [pc, #136]	@ (8010744 <eeprom_task_init+0x18c>)
 80106bc:	2200      	movs	r2, #0
 80106be:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    eeprom_instance.tail_index = 0;
 80106c2:	4b20      	ldr	r3, [pc, #128]	@ (8010744 <eeprom_task_init+0x18c>)
 80106c4:	2200      	movs	r2, #0
 80106c6:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    eeprom_instance.end = MAX_WRITE_EEPROM_BUF - 1;
 80106ca:	4b1e      	ldr	r3, [pc, #120]	@ (8010744 <eeprom_task_init+0x18c>)
 80106cc:	2209      	movs	r2, #9
 80106ce:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
    eeprom_instance.nUsed = 0;
 80106d2:	4b1c      	ldr	r3, [pc, #112]	@ (8010744 <eeprom_task_init+0x18c>)
 80106d4:	2200      	movs	r2, #0
 80106d6:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6

    eeprom_ctor(&eeprom_instance);
 80106da:	481a      	ldr	r0, [pc, #104]	@ (8010744 <eeprom_task_init+0x18c>)
 80106dc:	f000 f836 	bl	801074c <eeprom_ctor>
//    printf("Setting info eeprom success\n");
}
 80106e0:	bf00      	nop
 80106e2:	3730      	adds	r7, #48	@ 0x30
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}
 80106e8:	2000132c 	.word	0x2000132c
 80106ec:	08018790 	.word	0x08018790
 80106f0:	080187a8 	.word	0x080187a8
 80106f4:	08018cb8 	.word	0x08018cb8
 80106f8:	080187bc 	.word	0x080187bc
 80106fc:	08018d7c 	.word	0x08018d7c
 8010700:	080187c4 	.word	0x080187c4
 8010704:	08018dec 	.word	0x08018dec
 8010708:	080187cc 	.word	0x080187cc
 801070c:	08019190 	.word	0x08019190
 8010710:	080187d4 	.word	0x080187d4
 8010714:	08018e98 	.word	0x08018e98
 8010718:	080187dc 	.word	0x080187dc
 801071c:	08018f08 	.word	0x08018f08
 8010720:	080187e4 	.word	0x080187e4
 8010724:	08018ff4 	.word	0x08018ff4
 8010728:	080187ec 	.word	0x080187ec
 801072c:	08019078 	.word	0x08019078
 8010730:	080187f4 	.word	0x080187f4
 8010734:	080190f8 	.word	0x080190f8
 8010738:	080187fc 	.word	0x080187fc
 801073c:	08019240 	.word	0x08019240
 8010740:	08018804 	.word	0x08018804
 8010744:	20001250 	.word	0x20001250
 8010748:	20001334 	.word	0x20001334

0801074c <eeprom_ctor>:

void eeprom_ctor(app_eeprom *pAO) {
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
    /* init task */
    OS_task_init(AO_task_eeprom,(OS_handler)&eeprom_init,(OS_handler)&eeprom_dispatch);
 8010754:	4b09      	ldr	r3, [pc, #36]	@ (801077c <eeprom_ctor+0x30>)
 8010756:	4a0a      	ldr	r2, [pc, #40]	@ (8010780 <eeprom_ctor+0x34>)
 8010758:	490a      	ldr	r1, [pc, #40]	@ (8010784 <eeprom_ctor+0x38>)
 801075a:	4618      	mov	r0, r3
 801075c:	f002 fa4e 	bl	8012bfc <OS_task_init>

    /* init time */
    OS_TimeEvt_init(&eeprom_instance.time_wait,FINISH_WRITE,&eeprom_instance.task);
 8010760:	4a06      	ldr	r2, [pc, #24]	@ (801077c <eeprom_ctor+0x30>)
 8010762:	2103      	movs	r1, #3
 8010764:	4808      	ldr	r0, [pc, #32]	@ (8010788 <eeprom_ctor+0x3c>)
 8010766:	f002 fb19 	bl	8012d9c <OS_TimeEvt_init>
    OS_TimeEvt_init(&eeprom_instance.time_check,CHECK_WRITE_BUF,&eeprom_instance.task);
 801076a:	4a04      	ldr	r2, [pc, #16]	@ (801077c <eeprom_ctor+0x30>)
 801076c:	2101      	movs	r1, #1
 801076e:	4807      	ldr	r0, [pc, #28]	@ (801078c <eeprom_ctor+0x40>)
 8010770:	f002 fb14 	bl	8012d9c <OS_TimeEvt_init>
}
 8010774:	bf00      	nop
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	20001250 	.word	0x20001250
 8010780:	08010831 	.word	0x08010831
 8010784:	08010791 	.word	0x08010791
 8010788:	2000126c 	.word	0x2000126c
 801078c:	200012c0 	.word	0x200012c0

08010790 <eeprom_init>:

static void eeprom_init(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
    /* init time */
    OS_TimeEvt_Stop(&eeprom_instance.time_check); /* don't using time when init */
 801079a:	4821      	ldr	r0, [pc, #132]	@ (8010820 <eeprom_init+0x90>)
 801079c:	f002 fb3b 	bl	8012e16 <OS_TimeEvt_Stop>
    OS_TimeEvt_Stop(&eeprom_instance.time_wait); 
 80107a0:	4820      	ldr	r0, [pc, #128]	@ (8010824 <eeprom_init+0x94>)
 80107a2:	f002 fb38 	bl	8012e16 <OS_TimeEvt_Stop>

    /* read data program run */
    eeprom_instance.data_eeprom.data = malloc(TOTAL_ALL_PROGRAM_TEST_LEN);
 80107a6:	20a8      	movs	r0, #168	@ 0xa8
 80107a8:	f002 fd0c 	bl	80131c4 <malloc>
 80107ac:	4603      	mov	r3, r0
 80107ae:	461a      	mov	r2, r3
 80107b0:	4b1d      	ldr	r3, [pc, #116]	@ (8010828 <eeprom_init+0x98>)
 80107b2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = TOTAL_ALL_PROGRAM_TEST_LEN;
 80107b6:	4b1c      	ldr	r3, [pc, #112]	@ (8010828 <eeprom_init+0x98>)
 80107b8:	22a8      	movs	r2, #168	@ 0xa8
 80107ba:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),
 80107be:	4b1a      	ldr	r3, [pc, #104]	@ (8010828 <eeprom_init+0x98>)
 80107c0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80107c4:	23a8      	movs	r3, #168	@ 0xa8
 80107c6:	2143      	movs	r1, #67	@ 0x43
 80107c8:	4818      	ldr	r0, [pc, #96]	@ (801082c <eeprom_init+0x9c>)
 80107ca:	f000 ff7c 	bl	80116c6 <AT24Cxx_read_buffer>
                        eeprom_instance.data_eeprom.data,TOTAL_ALL_PROGRAM_TEST_LEN);

    data_eeprom_t *data_eeprom_read = (data_eeprom_t *)malloc(sizeof(data_eeprom_t));
 80107ce:	200c      	movs	r0, #12
 80107d0:	f002 fcf8 	bl	80131c4 <malloc>
 80107d4:	4603      	mov	r3, r0
 80107d6:	60fb      	str	r3, [r7, #12]
    data_eeprom_read->data_len = eeprom_instance.data_eeprom.data_len;
 80107d8:	4b13      	ldr	r3, [pc, #76]	@ (8010828 <eeprom_init+0x98>)
 80107da:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	811a      	strh	r2, [r3, #8]
    data_eeprom_read->data = (uint8_t *)malloc(eeprom_instance.data_eeprom.data_len);
 80107e2:	4b11      	ldr	r3, [pc, #68]	@ (8010828 <eeprom_init+0x98>)
 80107e4:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 80107e8:	4618      	mov	r0, r3
 80107ea:	f002 fceb 	bl	80131c4 <malloc>
 80107ee:	4603      	mov	r3, r0
 80107f0:	461a      	mov	r2, r3
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	605a      	str	r2, [r3, #4]
    memcpy(data_eeprom_read->data,eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	4a0b      	ldr	r2, [pc, #44]	@ (8010828 <eeprom_init+0x98>)
 80107fc:	f8d2 10c8 	ldr.w	r1, [r2, #200]	@ 0xc8
 8010800:	4a09      	ldr	r2, [pc, #36]	@ (8010828 <eeprom_init+0x98>)
 8010802:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	@ 0xcc
 8010806:	4618      	mov	r0, r3
 8010808:	f004 fe8d 	bl	8015526 <memcpy>
    


    // OS_task_post_event(AO_BlinkyTest,READ_ALL_PROGRAM_TEST,(uint8_t *)&data_eeprom_read,sizeof(data_eeprom_t *));

    free(eeprom_instance.data_eeprom.data);
 801080c:	4b06      	ldr	r3, [pc, #24]	@ (8010828 <eeprom_init+0x98>)
 801080e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010812:	4618      	mov	r0, r3
 8010814:	f002 fcde 	bl	80131d4 <free>

}
 8010818:	bf00      	nop
 801081a:	3710      	adds	r7, #16
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	200012c0 	.word	0x200012c0
 8010824:	2000126c 	.word	0x2000126c
 8010828:	20001250 	.word	0x20001250
 801082c:	2000132c 	.word	0x2000132c

08010830 <eeprom_dispatch>:

void eeprom_dispatch(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 8010830:	b580      	push	{r7, lr}
 8010832:	b086      	sub	sp, #24
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	881b      	ldrh	r3, [r3, #0]
 801083e:	2b05      	cmp	r3, #5
 8010840:	f200 816e 	bhi.w	8010b20 <eeprom_dispatch+0x2f0>
 8010844:	a201      	add	r2, pc, #4	@ (adr r2, 801084c <eeprom_dispatch+0x1c>)
 8010846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801084a:	bf00      	nop
 801084c:	080109a3 	.word	0x080109a3
 8010850:	08010b21 	.word	0x08010b21
 8010854:	08010af1 	.word	0x08010af1
 8010858:	080109f3 	.word	0x080109f3
 801085c:	08010865 	.word	0x08010865
 8010860:	080108af 	.word	0x080108af
        case READ_EEPROM : {
            data_eeprom_t *data_read = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 8010864:	6838      	ldr	r0, [r7, #0]
 8010866:	f002 fc7c 	bl	8013162 <get_data_dynamic_event>
 801086a:	4603      	mov	r3, r0
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	60fb      	str	r3, [r7, #12]
            eeprom_instance.data_eeprom.data = malloc(data_read->data_len);
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	891b      	ldrh	r3, [r3, #8]
 8010874:	4618      	mov	r0, r3
 8010876:	f002 fca5 	bl	80131c4 <malloc>
 801087a:	4603      	mov	r3, r0
 801087c:	461a      	mov	r2, r3
 801087e:	4bad      	ldr	r3, [pc, #692]	@ (8010b34 <eeprom_dispatch+0x304>)
 8010880:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            AT24Cxx_read_buffer(&eeprom_ob,data_read->mem_addr,
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	8819      	ldrh	r1, [r3, #0]
 8010888:	4baa      	ldr	r3, [pc, #680]	@ (8010b34 <eeprom_dispatch+0x304>)
 801088a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 801088e:	4ba9      	ldr	r3, [pc, #676]	@ (8010b34 <eeprom_dispatch+0x304>)
 8010890:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8010894:	48a8      	ldr	r0, [pc, #672]	@ (8010b38 <eeprom_dispatch+0x308>)
 8010896:	f000 ff16 	bl	80116c6 <AT24Cxx_read_buffer>
                                eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
            // printf("Data read eeprom : %s\n",eeprom_instance.data_eeprom.data);
            free(eeprom_instance.data_eeprom.data);
 801089a:	4ba6      	ldr	r3, [pc, #664]	@ (8010b34 <eeprom_dispatch+0x304>)
 801089c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80108a0:	4618      	mov	r0, r3
 80108a2:	f002 fc97 	bl	80131d4 <free>
            free(data_read);
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f002 fc94 	bl	80131d4 <free>
            
        } break;
 80108ac:	e13d      	b.n	8010b2a <eeprom_dispatch+0x2fa>
        case WRITE_EEPROM : {
            printf("Write eeprom\n");
 80108ae:	48a3      	ldr	r0, [pc, #652]	@ (8010b3c <eeprom_dispatch+0x30c>)
 80108b0:	f004 fb7a 	bl	8014fa8 <puts>
            data_eeprom_t *data_receive = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 80108b4:	6838      	ldr	r0, [r7, #0]
 80108b6:	f002 fc54 	bl	8013162 <get_data_dynamic_event>
 80108ba:	4603      	mov	r3, r0
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	617b      	str	r3, [r7, #20]
            write_param_t *e_write = (write_param_t *)malloc(sizeof(write_param_t));
 80108c0:	2010      	movs	r0, #16
 80108c2:	f002 fc7f 	bl	80131c4 <malloc>
 80108c6:	4603      	mov	r3, r0
 80108c8:	613b      	str	r3, [r7, #16]
            // e_write->byte_first_page = AT24C256_PG_SIZE - data_receive->mem_addr % AT24C256_PG_SIZE;
            // e_write->page_write = (data_receive->data_len - e_write->byte_first_page) / AT24C256_PG_SIZE;
            // e_write->byte_remain = (data_receive->data_len - e_write->byte_first_page) % AT24C256_PG_SIZE;
            e_write->data_written = 0;
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	2200      	movs	r2, #0
 80108ce:	815a      	strh	r2, [r3, #10]
            e_write->data_lastlen = 0;
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	2200      	movs	r2, #0
 80108d4:	819a      	strh	r2, [r3, #12]
            e_write->mem_addr = data_receive->mem_addr;
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	881a      	ldrh	r2, [r3, #0]
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	801a      	strh	r2, [r3, #0]
            e_write->data_len = data_receive->data_len;
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	891a      	ldrh	r2, [r3, #8]
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	811a      	strh	r2, [r3, #8]
            e_write->data = (uint8_t *)malloc(data_receive->data_len);
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	891b      	ldrh	r3, [r3, #8]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f002 fc6a 	bl	80131c4 <malloc>
 80108f0:	4603      	mov	r3, r0
 80108f2:	461a      	mov	r2, r3
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	605a      	str	r2, [r3, #4]
            memcpy(e_write->data,data_receive->data,data_receive->data_len);
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	6858      	ldr	r0, [r3, #4]
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	6859      	ldr	r1, [r3, #4]
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	891b      	ldrh	r3, [r3, #8]
 8010904:	461a      	mov	r2, r3
 8010906:	f004 fe0e 	bl	8015526 <memcpy>

            pOS_task->write_params_buf[pOS_task->head_index] = e_write; /* insert to buffer */
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	4413      	add	r3, r2
 801091a:	693a      	ldr	r2, [r7, #16]
 801091c:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8010924:	2b00      	cmp	r3, #0
 8010926:	d106      	bne.n	8010936 <eeprom_dispatch+0x106>
                pOS_task->head_index = pOS_task->end;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
 8010934:	e007      	b.n	8010946 <eeprom_dispatch+0x116>
            } else {
                --pOS_task->head_index;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 801093c:	3b01      	subs	r3, #1
 801093e:	b2da      	uxtb	r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
            }
            ++pOS_task->nUsed;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 801094c:	3301      	adds	r3, #1
 801094e:	b2da      	uxtb	r2, r3
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
            
            if (data_receive->data != NULL) free(data_receive->data);
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d004      	beq.n	8010968 <eeprom_dispatch+0x138>
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	4618      	mov	r0, r3
 8010964:	f002 fc36 	bl	80131d4 <free>
            free(data_receive);
 8010968:	6978      	ldr	r0, [r7, #20]
 801096a:	f002 fc33 	bl	80131d4 <free>

            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8010974:	f083 0301 	eor.w	r3, r3, #1
 8010978:	b2db      	uxtb	r3, r3
 801097a:	2b00      	cmp	r3, #0
 801097c:	f000 80d2 	beq.w	8010b24 <eeprom_dispatch+0x2f4>
                pOS_task->b_is_writing = true;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2201      	movs	r2, #1
 8010984:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4413      	add	r3, r2
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	4618      	mov	r0, r3
 801099c:	f000 f8d0 	bl	8010b40 <write_buffer_with_task>
            }
        } break;
 80109a0:	e0c0      	b.n	8010b24 <eeprom_dispatch+0x2f4>
        case WAIT_WRITE_TIMEOUT : {
            /* wait ~10ms for eeprom write complete */
            pOS_task->write_params_buf[pOS_task->tail_index]->data_written += pOS_task->write_params_buf[pOS_task->tail_index]->data_lastlen;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80109ae:	009b      	lsls	r3, r3, #2
 80109b0:	4413      	add	r3, r2
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	8959      	ldrh	r1, [r3, #10]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	4413      	add	r3, r2
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	899a      	ldrh	r2, [r3, #12]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	4403      	add	r3, r0
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	440a      	add	r2, r1
 80109de:	b292      	uxth	r2, r2
 80109e0:	815a      	strh	r2, [r3, #10]

            OS_TimeEvt_Set(&pOS_task->time_wait,11,0); /* run only 1 time */
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	331c      	adds	r3, #28
 80109e6:	2200      	movs	r2, #0
 80109e8:	210b      	movs	r1, #11
 80109ea:	4618      	mov	r0, r3
 80109ec:	f002 f9fc 	bl	8012de8 <OS_TimeEvt_Set>
        } break;
 80109f0:	e09b      	b.n	8010b2a <eeprom_dispatch+0x2fa>
        case FINISH_WRITE : {
            if (pOS_task->write_params_buf[pOS_task->tail_index]->data_written < pOS_task->write_params_buf[pOS_task->tail_index]->data_len) {
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	4413      	add	r3, r2
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	895a      	ldrh	r2, [r3, #10]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	440b      	add	r3, r1
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	891b      	ldrh	r3, [r3, #8]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d20c      	bcs.n	8010a38 <eeprom_dispatch+0x208>
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8010a2a:	009b      	lsls	r3, r3, #2
 8010a2c:	4413      	add	r3, r2
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f000 f885 	bl	8010b40 <write_buffer_with_task>
                /* Check buf */
                if (pOS_task->nUsed > 0) {
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
                }
            }
        } break; 
 8010a36:	e077      	b.n	8010b28 <eeprom_dispatch+0x2f8>
                if (pOS_task->write_params_buf[pOS_task->tail_index]->data != NULL) {
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8010a44:	009b      	lsls	r3, r3, #2
 8010a46:	4413      	add	r3, r2
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d00c      	beq.n	8010a6a <eeprom_dispatch+0x23a>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]->data);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8010a5c:	009b      	lsls	r3, r3, #2
 8010a5e:	4413      	add	r3, r2
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f002 fbb5 	bl	80131d4 <free>
                if (pOS_task->write_params_buf[pOS_task->tail_index] != NULL) {
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8010a76:	009b      	lsls	r3, r3, #2
 8010a78:	4413      	add	r3, r2
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d00b      	beq.n	8010a98 <eeprom_dispatch+0x268>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8010a8c:	009b      	lsls	r3, r3, #2
 8010a8e:	4413      	add	r3, r2
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	4618      	mov	r0, r3
 8010a94:	f002 fb9e 	bl	80131d4 <free>
                if (pOS_task->tail_index == 0) {
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d106      	bne.n	8010ab0 <eeprom_dispatch+0x280>
                    pOS_task->tail_index = pOS_task->end;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
 8010aae:	e007      	b.n	8010ac0 <eeprom_dispatch+0x290>
                    --pOS_task->tail_index;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8010ab6:	3b01      	subs	r3, #1
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
                --pOS_task->nUsed;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 8010ac6:	3b01      	subs	r3, #1
 8010ac8:	b2da      	uxtb	r2, r3
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
                pOS_task->b_is_writing = false;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                if (pOS_task->nUsed > 0) {
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d022      	beq.n	8010b28 <eeprom_dispatch+0x2f8>
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
 8010ae2:	4814      	ldr	r0, [pc, #80]	@ (8010b34 <eeprom_dispatch+0x304>)
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	2102      	movs	r1, #2
 8010aea:	f002 f939 	bl	8012d60 <OS_task_post_event>
        } break; 
 8010aee:	e01b      	b.n	8010b28 <eeprom_dispatch+0x2f8>
        case WRITE_EEPROM_IN_BUF : {
            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 8010af6:	f083 0301 	eor.w	r3, r3, #1
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d00f      	beq.n	8010b20 <eeprom_dispatch+0x2f0>
                pOS_task->b_is_writing = true;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2201      	movs	r2, #1
 8010b04:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8010b14:	009b      	lsls	r3, r3, #2
 8010b16:	4413      	add	r3, r2
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f000 f810 	bl	8010b40 <write_buffer_with_task>
            }
        }
        default : break;
 8010b20:	bf00      	nop
 8010b22:	e002      	b.n	8010b2a <eeprom_dispatch+0x2fa>
        } break;
 8010b24:	bf00      	nop
 8010b26:	e000      	b.n	8010b2a <eeprom_dispatch+0x2fa>
        } break; 
 8010b28:	bf00      	nop
    }
}
 8010b2a:	bf00      	nop
 8010b2c:	3718      	adds	r7, #24
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	20001250 	.word	0x20001250
 8010b38:	2000132c 	.word	0x2000132c
 8010b3c:	0801880c 	.word	0x0801880c

08010b40 <write_buffer_with_task>:

static void write_buffer_with_task(write_param_t *pWrite_params) {
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
    uint16_t byte_remain = pWrite_params->data_len - pWrite_params->data_written;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	891a      	ldrh	r2, [r3, #8]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	895b      	ldrh	r3, [r3, #10]
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	81bb      	strh	r3, [r7, #12]
    uint8_t written_in_page = (pWrite_params->mem_addr + pWrite_params->data_written) % AT24C256_PG_SIZE;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	881b      	ldrh	r3, [r3, #0]
 8010b58:	b2da      	uxtb	r2, r3
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	895b      	ldrh	r3, [r3, #10]
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	4413      	add	r3, r2
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b68:	72fb      	strb	r3, [r7, #11]
    uint8_t byte_in_page = AT24C256_PG_SIZE - written_in_page;
 8010b6a:	7afb      	ldrb	r3, [r7, #11]
 8010b6c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8010b70:	72bb      	strb	r3, [r7, #10]
    uint16_t addr_write = pWrite_params->mem_addr + pWrite_params->data_written;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	881a      	ldrh	r2, [r3, #0]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	895b      	ldrh	r3, [r3, #10]
 8010b7a:	4413      	add	r3, r2
 8010b7c:	813b      	strh	r3, [r7, #8]
    uint8_t len_write;
    if (byte_remain < byte_in_page) {
 8010b7e:	7abb      	ldrb	r3, [r7, #10]
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	89ba      	ldrh	r2, [r7, #12]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d202      	bcs.n	8010b8e <write_buffer_with_task+0x4e>
        len_write = byte_remain;
 8010b88:	89bb      	ldrh	r3, [r7, #12]
 8010b8a:	73fb      	strb	r3, [r7, #15]
 8010b8c:	e001      	b.n	8010b92 <write_buffer_with_task+0x52>
    } else {
        len_write = byte_in_page;
 8010b8e:	7abb      	ldrb	r3, [r7, #10]
 8010b90:	73fb      	strb	r3, [r7, #15]
    }
    pWrite_params->data_lastlen = len_write;
 8010b92:	7bfb      	ldrb	r3, [r7, #15]
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	819a      	strh	r2, [r3, #12]
    AT24Cxx_write_buffer(&eeprom_ob,addr_write,pWrite_params->data + pWrite_params->data_written,len_write);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	8952      	ldrh	r2, [r2, #10]
 8010ba2:	441a      	add	r2, r3
 8010ba4:	7bfb      	ldrb	r3, [r7, #15]
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	8939      	ldrh	r1, [r7, #8]
 8010baa:	4803      	ldr	r0, [pc, #12]	@ (8010bb8 <write_buffer_with_task+0x78>)
 8010bac:	f000 fc78 	bl	80114a0 <AT24Cxx_write_buffer>
}
 8010bb0:	bf00      	nop
 8010bb2:	3710      	adds	r7, #16
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	2000132c 	.word	0x2000132c

08010bbc <write_data_test_ic>:

void write_data_test_ic(const char *icName, const char *Data, uint16_t len) {
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b08c      	sub	sp, #48	@ 0x30
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	4613      	mov	r3, r2
 8010bc8:	80fb      	strh	r3, [r7, #6]
    uint8_t num_direc = 0;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	77fb      	strb	r3, [r7, #31]
    uint16_t dir_addr, data_addr;
    uint16_t mem_pre, len_pre;
    direc_EEPROM_t *Directory_pre;
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 8010bce:	f107 021f 	add.w	r2, r7, #31
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010bd8:	4842      	ldr	r0, [pc, #264]	@ (8010ce4 <write_data_test_ic+0x128>)
 8010bda:	f000 fd74 	bl	80116c6 <AT24Cxx_read_buffer>
    dir_addr = START_MEM_ADDR_DATA_DIREC + (num_direc * sizeof(direc_EEPROM_t));
 8010bde:	7ffb      	ldrb	r3, [r7, #31]
 8010be0:	461a      	mov	r2, r3
 8010be2:	0052      	lsls	r2, r2, #1
 8010be4:	4413      	add	r3, r2
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	f203 2302 	addw	r3, r3, #514	@ 0x202
 8010bee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (num_direc == 0) { /* first */ 
 8010bf0:	7ffb      	ldrb	r3, [r7, #31]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d103      	bne.n	8010bfe <write_data_test_ic+0x42>
        data_addr = START_MEM_ADDR_DATA_TEST ;
 8010bf6:	f240 23f3 	movw	r3, #755	@ 0x2f3
 8010bfa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010bfc:	e033      	b.n	8010c66 <write_data_test_ic+0xaa>
    } else {
        uint8_t *temp_buf = (uint8_t *)malloc(sizeof(direc_EEPROM_t));
 8010bfe:	200c      	movs	r0, #12
 8010c00:	f002 fae0 	bl	80131c4 <malloc>
 8010c04:	4603      	mov	r3, r0
 8010c06:	62bb      	str	r3, [r7, #40]	@ 0x28
        AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC + ((num_direc - 1) * sizeof(direc_EEPROM_t)),temp_buf,sizeof(direc_EEPROM_t));
 8010c08:	7ffb      	ldrb	r3, [r7, #31]
 8010c0a:	3b01      	subs	r3, #1
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	461a      	mov	r2, r3
 8010c10:	0052      	lsls	r2, r2, #1
 8010c12:	4413      	add	r3, r2
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	f203 2302 	addw	r3, r3, #514	@ 0x202
 8010c1c:	b299      	uxth	r1, r3
 8010c1e:	230c      	movs	r3, #12
 8010c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c22:	4830      	ldr	r0, [pc, #192]	@ (8010ce4 <write_data_test_ic+0x128>)
 8010c24:	f000 fd4f 	bl	80116c6 <AT24Cxx_read_buffer>
        Directory_pre = (direc_EEPROM_t *)temp_buf;
 8010c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        mem_pre = (uint16_t)((Directory_pre->addr[0] << 8) | Directory_pre->addr[1]);
 8010c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c2e:	7a1b      	ldrb	r3, [r3, #8]
 8010c30:	b21b      	sxth	r3, r3
 8010c32:	021b      	lsls	r3, r3, #8
 8010c34:	b21a      	sxth	r2, r3
 8010c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c38:	7a5b      	ldrb	r3, [r3, #9]
 8010c3a:	b21b      	sxth	r3, r3
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	b21b      	sxth	r3, r3
 8010c40:	847b      	strh	r3, [r7, #34]	@ 0x22
        len_pre = (uint16_t)((Directory_pre->length[0] << 8) | Directory_pre->length[1]);
 8010c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c44:	7a9b      	ldrb	r3, [r3, #10]
 8010c46:	b21b      	sxth	r3, r3
 8010c48:	021b      	lsls	r3, r3, #8
 8010c4a:	b21a      	sxth	r2, r3
 8010c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c4e:	7adb      	ldrb	r3, [r3, #11]
 8010c50:	b21b      	sxth	r3, r3
 8010c52:	4313      	orrs	r3, r2
 8010c54:	b21b      	sxth	r3, r3
 8010c56:	843b      	strh	r3, [r7, #32]
        data_addr = mem_pre + len_pre;
 8010c58:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010c5a:	8c3b      	ldrh	r3, [r7, #32]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        free(temp_buf);
 8010c60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010c62:	f002 fab7 	bl	80131d4 <free>
    }
    /* write data */

    AT24Cxx_write_buffer_bloking(&eeprom_ob,data_addr,Data,len);
 8010c66:	88fb      	ldrh	r3, [r7, #6]
 8010c68:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8010c6a:	68ba      	ldr	r2, [r7, #8]
 8010c6c:	481d      	ldr	r0, [pc, #116]	@ (8010ce4 <write_data_test_ic+0x128>)
 8010c6e:	f000 fc3f 	bl	80114f0 <AT24Cxx_write_buffer_bloking>

    /* get the directory data */
    direc_EEPROM_t direc;
    memset(direc.nameIC,0,sizeof(direc.nameIC));
 8010c72:	f107 0310 	add.w	r3, r7, #16
 8010c76:	2208      	movs	r2, #8
 8010c78:	2100      	movs	r1, #0
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f004 fb0a 	bl	8015294 <memset>
    memcpy(direc.nameIC,icName,strlen(icName));
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f7ef fa6f 	bl	8000164 <strlen>
 8010c86:	4602      	mov	r2, r0
 8010c88:	f107 0310 	add.w	r3, r7, #16
 8010c8c:	68f9      	ldr	r1, [r7, #12]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f004 fc49 	bl	8015526 <memcpy>
    direc.addr[0] = ((data_addr >> 8) & 0xFF);
 8010c94:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010c96:	0a1b      	lsrs	r3, r3, #8
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	763b      	strb	r3, [r7, #24]
    direc.addr[1] = ((data_addr) & 0xFF);
 8010c9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	767b      	strb	r3, [r7, #25]
    direc.length[0] = ((len >> 8) & 0xFF);
 8010ca4:	88fb      	ldrh	r3, [r7, #6]
 8010ca6:	0a1b      	lsrs	r3, r3, #8
 8010ca8:	b29b      	uxth	r3, r3
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	76bb      	strb	r3, [r7, #26]
    direc.length[1] = ((len) & 0xFF);
 8010cae:	88fb      	ldrh	r3, [r7, #6]
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	76fb      	strb	r3, [r7, #27]
    AT24Cxx_write_buffer_bloking(&eeprom_ob,dir_addr,(uint8_t *)&direc,sizeof(direc_EEPROM_t));
 8010cb4:	f107 0210 	add.w	r2, r7, #16
 8010cb8:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8010cba:	230c      	movs	r3, #12
 8010cbc:	4809      	ldr	r0, [pc, #36]	@ (8010ce4 <write_data_test_ic+0x128>)
 8010cbe:	f000 fc17 	bl	80114f0 <AT24Cxx_write_buffer_bloking>
    ++num_direc;
 8010cc2:	7ffb      	ldrb	r3, [r7, #31]
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	77fb      	strb	r3, [r7, #31]
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 8010cca:	f107 021f 	add.w	r2, r7, #31
 8010cce:	2301      	movs	r3, #1
 8010cd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010cd4:	4803      	ldr	r0, [pc, #12]	@ (8010ce4 <write_data_test_ic+0x128>)
 8010cd6:	f000 fc0b 	bl	80114f0 <AT24Cxx_write_buffer_bloking>
}
 8010cda:	bf00      	nop
 8010cdc:	3730      	adds	r7, #48	@ 0x30
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	2000132c 	.word	0x2000132c

08010ce8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void);
void I2C2_EV_IRQHandler(void);
void RTC_IRQHandler(void);

void I2C1_ER_IRQHandler(void) { 
 8010ce8:	b480      	push	{r7}
 8010cea:	af00      	add	r7, sp, #0
    // OS_task_activate(1);  
    // HAL_NVIC_ClearPendingIRQ(I2C1_ER_IRQn); // clear NVIC pending bit
}
 8010cec:	bf00      	nop
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bc80      	pop	{r7}
 8010cf2:	4770      	bx	lr

08010cf4 <RTC_IRQHandler>:
void RTC_IRQHandler(void) {
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	af00      	add	r7, sp, #0
    OS_task_activate(1);  
 8010cf8:	2001      	movs	r0, #1
 8010cfa:	f002 f8db 	bl	8012eb4 <OS_task_activate>
}
 8010cfe:	bf00      	nop
 8010d00:	bd80      	pop	{r7, pc}

08010d02 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void) {
 8010d02:	b580      	push	{r7, lr}
 8010d04:	af00      	add	r7, sp, #0
    OS_task_activate(2);
 8010d06:	2002      	movs	r0, #2
 8010d08:	f002 f8d4 	bl	8012eb4 <OS_task_activate>
}
 8010d0c:	bf00      	nop
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <BSP_init>:

/* hardware-specific support code run on a specific hardware platform */
void BSP_init(void) {
 8010d10:	b580      	push	{r7, lr}
 8010d12:	af00      	add	r7, sp, #0
    /* init event pool */
    dynamic_event_pool_init();
 8010d14:	f002 f97c 	bl	8013010 <dynamic_event_pool_init>
    
    /* Set IRQ number for priority used in OS */
    OS_prio_setIRQ(1,RTC_IRQn);
 8010d18:	2103      	movs	r1, #3
 8010d1a:	2001      	movs	r0, #1
 8010d1c:	f002 f94e 	bl	8012fbc <OS_prio_setIRQ>
    OS_prio_setIRQ(2,I2C2_EV_IRQn);
 8010d20:	2121      	movs	r1, #33	@ 0x21
 8010d22:	2002      	movs	r0, #2
 8010d24:	f002 f94a 	bl	8012fbc <OS_prio_setIRQ>

    OS_priority_IRQ(RTC_IRQn,1);
 8010d28:	2101      	movs	r1, #1
 8010d2a:	2003      	movs	r0, #3
 8010d2c:	f002 f92c 	bl	8012f88 <OS_priority_IRQ>
    OS_priority_IRQ(I2C2_EV_IRQn,2);
 8010d30:	2102      	movs	r1, #2
 8010d32:	2021      	movs	r0, #33	@ 0x21
 8010d34:	f002 f928 	bl	8012f88 <OS_priority_IRQ>

    OS_Test_setIRQ(AO_BlinkyTest,RTC_IRQn);    
 8010d38:	4b0c      	ldr	r3, [pc, #48]	@ (8010d6c <BSP_init+0x5c>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2103      	movs	r1, #3
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f002 f958 	bl	8012ff4 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_taskPost,RTC_IRQn);
 8010d44:	4b0a      	ldr	r3, [pc, #40]	@ (8010d70 <BSP_init+0x60>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2103      	movs	r1, #3
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f002 f952 	bl	8012ff4 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_task_eeprom,RTC_IRQn);
 8010d50:	4b08      	ldr	r3, [pc, #32]	@ (8010d74 <BSP_init+0x64>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	2103      	movs	r1, #3
 8010d56:	4618      	mov	r0, r3
 8010d58:	f002 f94c 	bl	8012ff4 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_task_uart_esp32,I2C2_EV_IRQn);
 8010d5c:	4b06      	ldr	r3, [pc, #24]	@ (8010d78 <BSP_init+0x68>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	2121      	movs	r1, #33	@ 0x21
 8010d62:	4618      	mov	r0, r3
 8010d64:	f002 f946 	bl	8012ff4 <OS_Test_setIRQ>
}
 8010d68:	bf00      	nop
 8010d6a:	bd80      	pop	{r7, pc}
 8010d6c:	080192f8 	.word	0x080192f8
 8010d70:	080192e8 	.word	0x080192e8
 8010d74:	080192e4 	.word	0x080192e4
 8010d78:	080192f4 	.word	0x080192f4

08010d7c <TestOS_Work>:

/* ============================= function using for initialization task ============================= */ 

/* the value using for app test os */
OS_event_t const *TestOS_Work(void) {
 8010d7c:	b480      	push	{r7}
 8010d7e:	af00      	add	r7, sp, #0
    static TestOS_Evt workTest_blinky ;
    workTest_blinky.appEvt.sig = 0; /* unused */
 8010d80:	4b08      	ldr	r3, [pc, #32]	@ (8010da4 <TestOS_Work+0x28>)
 8010d82:	2200      	movs	r2, #0
 8010d84:	801a      	strh	r2, [r3, #0]
    workTest_blinky.ticks1 = 300; /* 500 ms */
 8010d86:	4b07      	ldr	r3, [pc, #28]	@ (8010da4 <TestOS_Work+0x28>)
 8010d88:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8010d8c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    workTest_blinky.ticks2 = 500;
 8010d90:	4b04      	ldr	r3, [pc, #16]	@ (8010da4 <TestOS_Work+0x28>)
 8010d92:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8010d96:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* return the OS_event_t type */
    return &workTest_blinky.appEvt;
 8010d9a:	4b02      	ldr	r3, [pc, #8]	@ (8010da4 <TestOS_Work+0x28>)
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bc80      	pop	{r7}
 8010da2:	4770      	bx	lr
 8010da4:	2000135c 	.word	0x2000135c

08010da8 <Post_task_init>:
static app_post Post_instance;
OS_task * const AO_taskPost = &Post_instance.task;

data_send_t data_send;

void Post_task_init(void) {
 8010da8:	b5b0      	push	{r4, r5, r7, lr}
 8010daa:	af00      	add	r7, sp, #0
    PostApp_ctor(&Post_instance);
 8010dac:	480a      	ldr	r0, [pc, #40]	@ (8010dd8 <Post_task_init+0x30>)
 8010dae:	f000 f81b 	bl	8010de8 <PostApp_ctor>

    strcpy(data_send.string_post,(char *)"Hello task test: ");
 8010db2:	4a0a      	ldr	r2, [pc, #40]	@ (8010ddc <Post_task_init+0x34>)
 8010db4:	4b0a      	ldr	r3, [pc, #40]	@ (8010de0 <Post_task_init+0x38>)
 8010db6:	4614      	mov	r4, r2
 8010db8:	461d      	mov	r5, r3
 8010dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010dbe:	682b      	ldr	r3, [r5, #0]
 8010dc0:	8023      	strh	r3, [r4, #0]
    data_send.string_len = strlen(data_send.string_post);
 8010dc2:	4806      	ldr	r0, [pc, #24]	@ (8010ddc <Post_task_init+0x34>)
 8010dc4:	f7ef f9ce 	bl	8000164 <strlen>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	4a06      	ldr	r2, [pc, #24]	@ (8010de4 <Post_task_init+0x3c>)
 8010dcc:	6053      	str	r3, [r2, #4]
    data_send.data_post = 0;
 8010dce:	4b05      	ldr	r3, [pc, #20]	@ (8010de4 <Post_task_init+0x3c>)
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	601a      	str	r2, [r3, #0]
}
 8010dd4:	bf00      	nop
 8010dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8010dd8:	200013a8 	.word	0x200013a8
 8010ddc:	20001420 	.word	0x20001420
 8010de0:	0801881c 	.word	0x0801881c
 8010de4:	20001418 	.word	0x20001418

08010de8 <PostApp_ctor>:

void PostApp_ctor(app_post *pAO) {
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
    /* init task */
    OS_task_init(AO_taskPost,(OS_handler)&PostApp_init,(OS_handler)&PostApp_dispatch);
 8010df0:	4b04      	ldr	r3, [pc, #16]	@ (8010e04 <PostApp_ctor+0x1c>)
 8010df2:	4a05      	ldr	r2, [pc, #20]	@ (8010e08 <PostApp_ctor+0x20>)
 8010df4:	4905      	ldr	r1, [pc, #20]	@ (8010e0c <PostApp_ctor+0x24>)
 8010df6:	4618      	mov	r0, r3
 8010df8:	f001 ff00 	bl	8012bfc <OS_task_init>

    /* init time */
    // OS_TimeEvt_init(&Post_instance.te,POST_DATA_TIMEOUT,&Post_instance.task);
}
 8010dfc:	bf00      	nop
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	200013a8 	.word	0x200013a8
 8010e08:	08010e25 	.word	0x08010e25
 8010e0c:	08010e11 	.word	0x08010e11

08010e10 <PostApp_init>:

void PostApp_init(app_post * const pOS_task, OS_event_t const * const pEvent) {
 8010e10:	b480      	push	{r7}
 8010e12:	b083      	sub	sp, #12
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6039      	str	r1, [r7, #0]
    // OS_TimeEvt_Set(&pOS_task->te,20,500);
    // OS_TimeEvt_Stop(&Post_instance.te);
}
 8010e1a:	bf00      	nop
 8010e1c:	370c      	adds	r7, #12
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bc80      	pop	{r7}
 8010e22:	4770      	bx	lr

08010e24 <PostApp_dispatch>:

void PostApp_dispatch(app_post * const pOS_task, OS_event_t const * const pEvent) {
 8010e24:	b480      	push	{r7}
 8010e26:	b083      	sub	sp, #12
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
 8010e2c:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	881b      	ldrh	r3, [r3, #0]
 8010e32:	2b02      	cmp	r3, #2
 8010e34:	d104      	bne.n	8010e40 <PostApp_dispatch+0x1c>
        case POST_DATA_TIMEOUT : {
//            printf("Post data to test task!\n");
            // data_send_t *pdata_send = malloc(sizeof(data_send_t*));
            ++data_send.data_post;
 8010e36:	4b05      	ldr	r3, [pc, #20]	@ (8010e4c <PostApp_dispatch+0x28>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	4a03      	ldr	r2, [pc, #12]	@ (8010e4c <PostApp_dispatch+0x28>)
 8010e3e:	6013      	str	r3, [r2, #0]
            // pdata_send->data_post = data_send.data_post;
            // if (AO_BlinkyTest->dispatch != NULL) {
            //     OS_task_post_event(AO_BlinkyTest,PRINT_POST_DATA,(uint8_t *)&data_send,sizeof(data_send_t));
            // }
        }
        default: break;
 8010e40:	bf00      	nop
    }
}
 8010e42:	bf00      	nop
 8010e44:	370c      	adds	r7, #12
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bc80      	pop	{r7}
 8010e4a:	4770      	bx	lr
 8010e4c:	20001418 	.word	0x20001418

08010e50 <ds3231_task_init>:
#include "app_main.h"
#include "../Core/Inc/main.h"

DS3231_t ds3231;

void ds3231_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	70fb      	strb	r3, [r7, #3]
    DS3231_Init(&ds3231,i2c_port,dev_address);
 8010e5c:	78fb      	ldrb	r3, [r7, #3]
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	461a      	mov	r2, r3
 8010e62:	6879      	ldr	r1, [r7, #4]
 8010e64:	4803      	ldr	r0, [pc, #12]	@ (8010e74 <ds3231_task_init+0x24>)
 8010e66:	f000 fc91 	bl	801178c <DS3231_Init>
 8010e6a:	bf00      	nop
 8010e6c:	3708      	adds	r7, #8
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	20001460 	.word	0x20001460

08010e78 <screen_task_init>:
static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent);

static app_screen screen_instance;
OS_task * const AO_task_screen = &screen_instance.task;

void screen_task_init(void) {
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	af00      	add	r7, sp, #0
    screen_ctor(&screen_instance);
 8010e7c:	4802      	ldr	r0, [pc, #8]	@ (8010e88 <screen_task_init+0x10>)
 8010e7e:	f000 f805 	bl	8010e8c <screen_ctor>
}
 8010e82:	bf00      	nop
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	20001468 	.word	0x20001468

08010e8c <screen_ctor>:

void screen_ctor(app_screen *pAO) {
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_screen,(OS_handler)screen_init,(OS_handler)screen_dispatch);
 8010e94:	4b08      	ldr	r3, [pc, #32]	@ (8010eb8 <screen_ctor+0x2c>)
 8010e96:	4a09      	ldr	r2, [pc, #36]	@ (8010ebc <screen_ctor+0x30>)
 8010e98:	4909      	ldr	r1, [pc, #36]	@ (8010ec0 <screen_ctor+0x34>)
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f001 feae 	bl	8012bfc <OS_task_init>

    OS_TimeEvt_init(&pAO->te_rtc,UPDATE_RTC,&pAO->task);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	331c      	adds	r3, #28
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	2101      	movs	r1, #1
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f001 ff77 	bl	8012d9c <OS_TimeEvt_init>
}
 8010eae:	bf00      	nop
 8010eb0:	3708      	adds	r7, #8
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	20001468 	.word	0x20001468
 8010ebc:	08010ee9 	.word	0x08010ee9
 8010ec0:	08010ec5 	.word	0x08010ec5

08010ec4 <screen_init>:

static void screen_init(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Set(&pOS_task->te_rtc,100,1000);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	331c      	adds	r3, #28
 8010ed2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010ed6:	2164      	movs	r1, #100	@ 0x64
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f001 ff85 	bl	8012de8 <OS_TimeEvt_Set>
    UNUSED(pEvent);
} 
 8010ede:	bf00      	nop
 8010ee0:	3708      	adds	r7, #8
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
	...

08010ee8 <screen_dispatch>:

static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b08c      	sub	sp, #48	@ 0x30
 8010eec:	af02      	add	r7, sp, #8
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	881b      	ldrh	r3, [r3, #0]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d002      	beq.n	8010f00 <screen_dispatch+0x18>
 8010efa:	2b01      	cmp	r3, #1
 8010efc:	d014      	beq.n	8010f28 <screen_dispatch+0x40>
            DWIN_SetText(&_Screen,VP_Time_Hour,string,strlen(string));
        } break;
        // case DEVICE_ERROR_TX_CAN : {
        //     warning_page(&_Screen,)
        // }
        default: break;
 8010efe:	e051      	b.n	8010fa4 <screen_dispatch+0xbc>
            printf("Device test success!!\n");
 8010f00:	482a      	ldr	r0, [pc, #168]	@ (8010fac <screen_dispatch+0xc4>)
 8010f02:	f004 f851 	bl	8014fa8 <puts>
            uint8_t *device_finish = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 8010f06:	6838      	ldr	r0, [r7, #0]
 8010f08:	f002 f92b 	bl	8013162 <get_data_dynamic_event>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	627b      	str	r3, [r7, #36]	@ 0x24
            show_main_page(&_Screen,DWINPAGE_MAIN_FINISH,*device_finish);
 8010f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	461a      	mov	r2, r3
 8010f18:	2164      	movs	r1, #100	@ 0x64
 8010f1a:	4825      	ldr	r0, [pc, #148]	@ (8010fb0 <screen_dispatch+0xc8>)
 8010f1c:	f7fe fc74 	bl	800f808 <show_main_page>
            free(device_finish);
 8010f20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010f22:	f002 f957 	bl	80131d4 <free>
        } break;
 8010f26:	e03d      	b.n	8010fa4 <screen_dispatch+0xbc>
            DS3231_Read_time(&ds3231, data_time);
 8010f28:	f107 031c 	add.w	r3, r7, #28
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	4821      	ldr	r0, [pc, #132]	@ (8010fb4 <screen_dispatch+0xcc>)
 8010f30:	f000 fc54 	bl	80117dc <DS3231_Read_time>
            sprintf(string, "%02d/%02d/20%02d", data_time[4], data_time[5], data_time[6] );
 8010f34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010f38:	461a      	mov	r2, r3
 8010f3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010f3e:	4619      	mov	r1, r3
 8010f40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010f44:	f107 0008 	add.w	r0, r7, #8
 8010f48:	9300      	str	r3, [sp, #0]
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	491a      	ldr	r1, [pc, #104]	@ (8010fb8 <screen_dispatch+0xd0>)
 8010f4e:	f004 f869 	bl	8015024 <siprintf>
            DWIN_SetText(&_Screen,VP_Time_Day,string,strlen(string));
 8010f52:	f107 0308 	add.w	r3, r7, #8
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7ef f904 	bl	8000164 <strlen>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	f107 0208 	add.w	r2, r7, #8
 8010f64:	f649 0120 	movw	r1, #38944	@ 0x9820
 8010f68:	4811      	ldr	r0, [pc, #68]	@ (8010fb0 <screen_dispatch+0xc8>)
 8010f6a:	f000 fcd3 	bl	8011914 <DWIN_SetText>
            sprintf(string, "%02d:%02d:%02d", data_time[2], data_time[1], data_time[0] );
 8010f6e:	7fbb      	ldrb	r3, [r7, #30]
 8010f70:	461a      	mov	r2, r3
 8010f72:	7f7b      	ldrb	r3, [r7, #29]
 8010f74:	4619      	mov	r1, r3
 8010f76:	7f3b      	ldrb	r3, [r7, #28]
 8010f78:	f107 0008 	add.w	r0, r7, #8
 8010f7c:	9300      	str	r3, [sp, #0]
 8010f7e:	460b      	mov	r3, r1
 8010f80:	490e      	ldr	r1, [pc, #56]	@ (8010fbc <screen_dispatch+0xd4>)
 8010f82:	f004 f84f 	bl	8015024 <siprintf>
            DWIN_SetText(&_Screen,VP_Time_Hour,string,strlen(string));
 8010f86:	f107 0308 	add.w	r3, r7, #8
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7ef f8ea 	bl	8000164 <strlen>
 8010f90:	4603      	mov	r3, r0
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	f107 0208 	add.w	r2, r7, #8
 8010f98:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8010f9c:	4804      	ldr	r0, [pc, #16]	@ (8010fb0 <screen_dispatch+0xc8>)
 8010f9e:	f000 fcb9 	bl	8011914 <DWIN_SetText>
        } break;
 8010fa2:	bf00      	nop
    }
}
 8010fa4:	bf00      	nop
 8010fa6:	3728      	adds	r7, #40	@ 0x28
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	08018830 	.word	0x08018830
 8010fb0:	20000c78 	.word	0x20000c78
 8010fb4:	20001460 	.word	0x20001460
 8010fb8:	08018848 	.word	0x08018848
 8010fbc:	0801885c 	.word	0x0801885c

08010fc0 <sd_task_init>:
static void sd_dispatch(app_sd * const pOS_task, OS_event_t const * const pEvent);

static app_sd sd_instance;
OS_task * const AO_task_sd = &sd_instance.task;

void sd_task_init(void) {
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	af00      	add	r7, sp, #0
    init_data_logging();
 8010fc4:	f000 f850 	bl	8011068 <init_data_logging>
//    }
//
//    printf("\n=== Get records from index 1 to 3 ===\n");
//    get_data_range_by_index(2, 3);

    sd_ctor(&sd_instance);
 8010fc8:	4802      	ldr	r0, [pc, #8]	@ (8010fd4 <sd_task_init+0x14>)
 8010fca:	f000 f805 	bl	8010fd8 <sd_ctor>
}
 8010fce:	bf00      	nop
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	20001a68 	.word	0x20001a68

08010fd8 <sd_ctor>:

void sd_ctor(app_sd *pAO) {
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_sd,(OS_handler)&sd_init,(OS_handler)&sd_dispatch);
 8010fe0:	4b04      	ldr	r3, [pc, #16]	@ (8010ff4 <sd_ctor+0x1c>)
 8010fe2:	4a05      	ldr	r2, [pc, #20]	@ (8010ff8 <sd_ctor+0x20>)
 8010fe4:	4905      	ldr	r1, [pc, #20]	@ (8010ffc <sd_ctor+0x24>)
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f001 fe08 	bl	8012bfc <OS_task_init>

}
 8010fec:	bf00      	nop
 8010fee:	3708      	adds	r7, #8
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	20001a68 	.word	0x20001a68
 8010ff8:	08011015 	.word	0x08011015
 8010ffc:	08011001 	.word	0x08011001

08011000 <sd_init>:

static void sd_init(app_sd * const pOS_task, OS_event_t const * const pEvent) {
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	6039      	str	r1, [r7, #0]
    UNUSED(pOS_task);
    UNUSED(pEvent);
}
 801100a:	bf00      	nop
 801100c:	370c      	adds	r7, #12
 801100e:	46bd      	mov	sp, r7
 8011010:	bc80      	pop	{r7}
 8011012:	4770      	bx	lr

08011014 <sd_dispatch>:

static void sd_dispatch(app_sd * const pOS_task, OS_event_t const * const pEvent) {
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d118      	bne.n	8011058 <sd_dispatch+0x44>
        case STORE_DATA_TEST : {
            printf("Store data to sd card\n");
 8011026:	480f      	ldr	r0, [pc, #60]	@ (8011064 <sd_dispatch+0x50>)
 8011028:	f003 ffbe 	bl	8014fa8 <puts>
            DataLogging_t *data_store = (DataLogging_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 801102c:	6838      	ldr	r0, [r7, #0]
 801102e:	f002 f898 	bl	8013162 <get_data_dynamic_event>
 8011032:	4603      	mov	r3, r0
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	60fb      	str	r3, [r7, #12]
            add_data(data_store);
 8011038:	68f8      	ldr	r0, [r7, #12]
 801103a:	f000 f87d 	bl	8011138 <add_data>
            if (data_store->String_logging != NULL) free(data_store->String_logging);
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d004      	beq.n	8011050 <sd_dispatch+0x3c>
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	4618      	mov	r0, r3
 801104c:	f002 f8c2 	bl	80131d4 <free>
            free(data_store);
 8011050:	68f8      	ldr	r0, [r7, #12]
 8011052:	f002 f8bf 	bl	80131d4 <free>
        } break;
 8011056:	e000      	b.n	801105a <sd_dispatch+0x46>

        default : break;
 8011058:	bf00      	nop
    }
}
 801105a:	bf00      	nop
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop
 8011064:	0801886c 	.word	0x0801886c

08011068 <init_data_logging>:


static void init_data_logging(void) {
 8011068:	b580      	push	{r7, lr}
 801106a:	af00      	add	r7, sp, #0

   fresult = f_mount(&fs, "0:", 1);
 801106c:	2201      	movs	r2, #1
 801106e:	4927      	ldr	r1, [pc, #156]	@ (801110c <init_data_logging+0xa4>)
 8011070:	4827      	ldr	r0, [pc, #156]	@ (8011110 <init_data_logging+0xa8>)
 8011072:	f7f9 f8d1 	bl	800a218 <f_mount>
 8011076:	4603      	mov	r3, r0
 8011078:	461a      	mov	r2, r3
 801107a:	4b26      	ldr	r3, [pc, #152]	@ (8011114 <init_data_logging+0xac>)
 801107c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 801107e:	4b25      	ldr	r3, [pc, #148]	@ (8011114 <init_data_logging+0xac>)
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d006      	beq.n	8011094 <init_data_logging+0x2c>
       printf ("ERROR with code:%d!!! in mounting SD CARD...\n\n",fresult);
 8011086:	4b23      	ldr	r3, [pc, #140]	@ (8011114 <init_data_logging+0xac>)
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	4619      	mov	r1, r3
 801108c:	4822      	ldr	r0, [pc, #136]	@ (8011118 <init_data_logging+0xb0>)
 801108e:	f003 ff23 	bl	8014ed8 <iprintf>
 8011092:	e002      	b.n	801109a <init_data_logging+0x32>
	}
	else{
       printf("SD CARD mounted successfully...\n\n");
 8011094:	4821      	ldr	r0, [pc, #132]	@ (801111c <init_data_logging+0xb4>)
 8011096:	f003 ff87 	bl	8014fa8 <puts>
   }

	fresult = f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 801109a:	2213      	movs	r2, #19
 801109c:	4920      	ldr	r1, [pc, #128]	@ (8011120 <init_data_logging+0xb8>)
 801109e:	4821      	ldr	r0, [pc, #132]	@ (8011124 <init_data_logging+0xbc>)
 80110a0:	f7f9 f902 	bl	800a2a8 <f_open>
 80110a4:	4603      	mov	r3, r0
 80110a6:	461a      	mov	r2, r3
 80110a8:	4b1a      	ldr	r3, [pc, #104]	@ (8011114 <init_data_logging+0xac>)
 80110aa:	701a      	strb	r2, [r3, #0]
   if (f_size(&fil) == 0) {
 80110ac:	4b1d      	ldr	r3, [pc, #116]	@ (8011124 <init_data_logging+0xbc>)
 80110ae:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d116      	bne.n	80110e4 <init_data_logging+0x7c>
       f_close(&fil);
 80110b6:	481b      	ldr	r0, [pc, #108]	@ (8011124 <init_data_logging+0xbc>)
 80110b8:	f7f9 fdd2 	bl	800ac60 <f_close>
       fresult = f_open(&fil, "data.txt", FA_WRITE);
 80110bc:	2202      	movs	r2, #2
 80110be:	4918      	ldr	r1, [pc, #96]	@ (8011120 <init_data_logging+0xb8>)
 80110c0:	4818      	ldr	r0, [pc, #96]	@ (8011124 <init_data_logging+0xbc>)
 80110c2:	f7f9 f8f1 	bl	800a2a8 <f_open>
 80110c6:	4603      	mov	r3, r0
 80110c8:	461a      	mov	r2, r3
 80110ca:	4b12      	ldr	r3, [pc, #72]	@ (8011114 <init_data_logging+0xac>)
 80110cc:	701a      	strb	r2, [r3, #0]
       f_puts("Timestamp,Temperature,Humidity,Pressure\n", &fil);
 80110ce:	4915      	ldr	r1, [pc, #84]	@ (8011124 <init_data_logging+0xbc>)
 80110d0:	4815      	ldr	r0, [pc, #84]	@ (8011128 <init_data_logging+0xc0>)
 80110d2:	f7fa f888 	bl	800b1e6 <f_puts>
       f_close(&fil);
 80110d6:	4813      	ldr	r0, [pc, #76]	@ (8011124 <init_data_logging+0xbc>)
 80110d8:	f7f9 fdc2 	bl	800ac60 <f_close>
       printf("Data file created\n");
 80110dc:	4813      	ldr	r0, [pc, #76]	@ (801112c <init_data_logging+0xc4>)
 80110de:	f003 ff63 	bl	8014fa8 <puts>
 80110e2:	e005      	b.n	80110f0 <init_data_logging+0x88>
   } else {
       f_close(&fil);
 80110e4:	480f      	ldr	r0, [pc, #60]	@ (8011124 <init_data_logging+0xbc>)
 80110e6:	f7f9 fdbb 	bl	800ac60 <f_close>
       printf("Data file exists\n");
 80110ea:	4811      	ldr	r0, [pc, #68]	@ (8011130 <init_data_logging+0xc8>)
 80110ec:	f003 ff5c 	bl	8014fa8 <puts>
   }

   fresult = f_open(&fil, "index.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80110f0:	2213      	movs	r2, #19
 80110f2:	4910      	ldr	r1, [pc, #64]	@ (8011134 <init_data_logging+0xcc>)
 80110f4:	480b      	ldr	r0, [pc, #44]	@ (8011124 <init_data_logging+0xbc>)
 80110f6:	f7f9 f8d7 	bl	800a2a8 <f_open>
 80110fa:	4603      	mov	r3, r0
 80110fc:	461a      	mov	r2, r3
 80110fe:	4b05      	ldr	r3, [pc, #20]	@ (8011114 <init_data_logging+0xac>)
 8011100:	701a      	strb	r2, [r3, #0]
   f_close(&fil);
 8011102:	4808      	ldr	r0, [pc, #32]	@ (8011124 <init_data_logging+0xbc>)
 8011104:	f7f9 fdac 	bl	800ac60 <f_close>
}
 8011108:	bf00      	nop
 801110a:	bd80      	pop	{r7, pc}
 801110c:	08018884 	.word	0x08018884
 8011110:	200014d8 	.word	0x200014d8
 8011114:	20001934 	.word	0x20001934
 8011118:	08018888 	.word	0x08018888
 801111c:	080188b8 	.word	0x080188b8
 8011120:	080188dc 	.word	0x080188dc
 8011124:	20001708 	.word	0x20001708
 8011128:	080188e8 	.word	0x080188e8
 801112c:	08018914 	.word	0x08018914
 8011130:	08018928 	.word	0x08018928
 8011134:	0801893c 	.word	0x0801893c

08011138 <add_data>:

// Write data with index update
static void add_data(DataLogging_t *data) {
 8011138:	b580      	push	{r7, lr}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
   fresult = f_open(&fil, "data.txt", FA_OPEN_EXISTING | FA_WRITE | FA_READ);
 8011140:	2203      	movs	r2, #3
 8011142:	4926      	ldr	r1, [pc, #152]	@ (80111dc <add_data+0xa4>)
 8011144:	4826      	ldr	r0, [pc, #152]	@ (80111e0 <add_data+0xa8>)
 8011146:	f7f9 f8af 	bl	800a2a8 <f_open>
 801114a:	4603      	mov	r3, r0
 801114c:	461a      	mov	r2, r3
 801114e:	4b25      	ldr	r3, [pc, #148]	@ (80111e4 <add_data+0xac>)
 8011150:	701a      	strb	r2, [r3, #0]
   if (fresult != FR_OK) {
 8011152:	4b24      	ldr	r3, [pc, #144]	@ (80111e4 <add_data+0xac>)
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d003      	beq.n	8011162 <add_data+0x2a>
       printf("Error: Cannot open data.txt\n");
 801115a:	4823      	ldr	r0, [pc, #140]	@ (80111e8 <add_data+0xb0>)
 801115c:	f003 ff24 	bl	8014fa8 <puts>
       return;
 8011160:	e039      	b.n	80111d6 <add_data+0x9e>
   }

   uint32_t position = f_size(&fil);
 8011162:	4b1f      	ldr	r3, [pc, #124]	@ (80111e0 <add_data+0xa8>)
 8011164:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011168:	60fb      	str	r3, [r7, #12]
   f_lseek(&fil, position);
 801116a:	68f9      	ldr	r1, [r7, #12]
 801116c:	481c      	ldr	r0, [pc, #112]	@ (80111e0 <add_data+0xa8>)
 801116e:	f7f9 fd9f 	bl	800acb0 <f_lseek>

   // Write data
   sprintf(buffer, "%s\n", data->String_logging);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	685b      	ldr	r3, [r3, #4]
 8011176:	461a      	mov	r2, r3
 8011178:	491c      	ldr	r1, [pc, #112]	@ (80111ec <add_data+0xb4>)
 801117a:	481d      	ldr	r0, [pc, #116]	@ (80111f0 <add_data+0xb8>)
 801117c:	f003 ff52 	bl	8015024 <siprintf>
   f_puts(buffer, &fil);
 8011180:	4917      	ldr	r1, [pc, #92]	@ (80111e0 <add_data+0xa8>)
 8011182:	481b      	ldr	r0, [pc, #108]	@ (80111f0 <add_data+0xb8>)
 8011184:	f7fa f82f 	bl	800b1e6 <f_puts>
   f_close(&fil);
 8011188:	4815      	ldr	r0, [pc, #84]	@ (80111e0 <add_data+0xa8>)
 801118a:	f7f9 fd69 	bl	800ac60 <f_close>

   // Add position to index file
   IndexEntry index_entry = {position};
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	60bb      	str	r3, [r7, #8]

   fresult = f_open(&fil, "index.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8011192:	2213      	movs	r2, #19
 8011194:	4917      	ldr	r1, [pc, #92]	@ (80111f4 <add_data+0xbc>)
 8011196:	4812      	ldr	r0, [pc, #72]	@ (80111e0 <add_data+0xa8>)
 8011198:	f7f9 f886 	bl	800a2a8 <f_open>
 801119c:	4603      	mov	r3, r0
 801119e:	461a      	mov	r2, r3
 80111a0:	4b10      	ldr	r3, [pc, #64]	@ (80111e4 <add_data+0xac>)
 80111a2:	701a      	strb	r2, [r3, #0]
   if (fresult != FR_OK) {
 80111a4:	4b0f      	ldr	r3, [pc, #60]	@ (80111e4 <add_data+0xac>)
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d003      	beq.n	80111b4 <add_data+0x7c>
       printf("Error: Cannot open index.txt\n");
 80111ac:	4812      	ldr	r0, [pc, #72]	@ (80111f8 <add_data+0xc0>)
 80111ae:	f003 fefb 	bl	8014fa8 <puts>
       return;
 80111b2:	e010      	b.n	80111d6 <add_data+0x9e>
   }

   f_lseek(&fil, f_size(&fil));
 80111b4:	4b0a      	ldr	r3, [pc, #40]	@ (80111e0 <add_data+0xa8>)
 80111b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80111ba:	4619      	mov	r1, r3
 80111bc:	4808      	ldr	r0, [pc, #32]	@ (80111e0 <add_data+0xa8>)
 80111be:	f7f9 fd77 	bl	800acb0 <f_lseek>
   f_write(&fil, &index_entry, sizeof(IndexEntry), &bw);
 80111c2:	f107 0108 	add.w	r1, r7, #8
 80111c6:	4b0d      	ldr	r3, [pc, #52]	@ (80111fc <add_data+0xc4>)
 80111c8:	2204      	movs	r2, #4
 80111ca:	4805      	ldr	r0, [pc, #20]	@ (80111e0 <add_data+0xa8>)
 80111cc:	f7f9 fae1 	bl	800a792 <f_write>
   f_close(&fil);
 80111d0:	4803      	ldr	r0, [pc, #12]	@ (80111e0 <add_data+0xa8>)
 80111d2:	f7f9 fd45 	bl	800ac60 <f_close>
}
 80111d6:	3710      	adds	r7, #16
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	080188dc 	.word	0x080188dc
 80111e0:	20001708 	.word	0x20001708
 80111e4:	20001934 	.word	0x20001934
 80111e8:	08018948 	.word	0x08018948
 80111ec:	08018964 	.word	0x08018964
 80111f0:	20001938 	.word	0x20001938
 80111f4:	0801893c 	.word	0x0801893c
 80111f8:	08018968 	.word	0x08018968
 80111fc:	20001a64 	.word	0x20001a64

08011200 <uart_esp32_task_init>:

static app_uart_esp32 uart_esp32_instance;
OS_task * const AO_task_uart_esp32 = &uart_esp32_instance.task;


void uart_esp32_task_init(UART_HandleTypeDef *pUart) {
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
    uart_esp32_instance.pUart = pUart;
 8011208:	4a04      	ldr	r2, [pc, #16]	@ (801121c <uart_esp32_task_init+0x1c>)
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	61d3      	str	r3, [r2, #28]
    
    uart_esp32_ctor(&uart_esp32_instance);
 801120e:	4803      	ldr	r0, [pc, #12]	@ (801121c <uart_esp32_task_init+0x1c>)
 8011210:	f000 f806 	bl	8011220 <uart_esp32_ctor>

}
 8011214:	bf00      	nop
 8011216:	3708      	adds	r7, #8
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	20001a84 	.word	0x20001a84

08011220 <uart_esp32_ctor>:

void uart_esp32_ctor(app_uart_esp32 *pAO) {
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_uart_esp32,(OS_handler)&uart_esp32_init,(OS_handler)&uart_esp32_dispatch);
 8011228:	4b04      	ldr	r3, [pc, #16]	@ (801123c <uart_esp32_ctor+0x1c>)
 801122a:	4a05      	ldr	r2, [pc, #20]	@ (8011240 <uart_esp32_ctor+0x20>)
 801122c:	4905      	ldr	r1, [pc, #20]	@ (8011244 <uart_esp32_ctor+0x24>)
 801122e:	4618      	mov	r0, r3
 8011230:	f001 fce4 	bl	8012bfc <OS_task_init>
}
 8011234:	bf00      	nop
 8011236:	3708      	adds	r7, #8
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}
 801123c:	20001a84 	.word	0x20001a84
 8011240:	0801125d 	.word	0x0801125d
 8011244:	08011249 	.word	0x08011249

08011248 <uart_esp32_init>:

static void uart_esp32_init(app_uart_esp32 * const pOS_task, OS_event_t const * const pEvent) {
 8011248:	b480      	push	{r7}
 801124a:	b083      	sub	sp, #12
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
    UNUSED(pOS_task);
    UNUSED(pEvent);
}
 8011252:	bf00      	nop
 8011254:	370c      	adds	r7, #12
 8011256:	46bd      	mov	sp, r7
 8011258:	bc80      	pop	{r7}
 801125a:	4770      	bx	lr

0801125c <uart_esp32_dispatch>:

static void uart_esp32_dispatch(app_uart_esp32 * const pOS_task, OS_event_t const * const pEvent) {
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	881b      	ldrh	r3, [r3, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d002      	beq.n	8011274 <uart_esp32_dispatch+0x18>
 801126e:	2b01      	cmp	r3, #1
 8011270:	d021      	beq.n	80112b6 <uart_esp32_dispatch+0x5a>
        } break;
        case RECEIVE_DATA_ESP32 : {
            
        } break;

        default: break;
 8011272:	e021      	b.n	80112b8 <uart_esp32_dispatch+0x5c>
            printf("Send data to esp32\n");
 8011274:	4812      	ldr	r0, [pc, #72]	@ (80112c0 <uart_esp32_dispatch+0x64>)
 8011276:	f003 fe97 	bl	8014fa8 <puts>
            uart_esp32_t *data_send_esp32 = (uart_esp32_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 801127a:	6838      	ldr	r0, [r7, #0]
 801127c:	f001 ff71 	bl	8013162 <get_data_dynamic_event>
 8011280:	4603      	mov	r3, r0
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	60fb      	str	r3, [r7, #12]
            HAL_UART_Transmit(pOS_task->pUart,data_send_esp32->data,data_send_esp32->len,1000);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	69d8      	ldr	r0, [r3, #28]
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	6819      	ldr	r1, [r3, #0]
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	b29a      	uxth	r2, r3
 8011294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011298:	f7f6 fa65 	bl	8007766 <HAL_UART_Transmit>
            if (data_send_esp32->data != NULL) free(data_send_esp32->data);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d004      	beq.n	80112ae <uart_esp32_dispatch+0x52>
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4618      	mov	r0, r3
 80112aa:	f001 ff93 	bl	80131d4 <free>
            free(data_send_esp32);
 80112ae:	68f8      	ldr	r0, [r7, #12]
 80112b0:	f001 ff90 	bl	80131d4 <free>
        } break;
 80112b4:	e000      	b.n	80112b8 <uart_esp32_dispatch+0x5c>
        } break;
 80112b6:	bf00      	nop
    }
}
 80112b8:	bf00      	nop
 80112ba:	3710      	adds	r7, #16
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	080189c8 	.word	0x080189c8

080112c4 <BlinkyTest_app_init>:
uint8_t num_ic = 1;
char uart_string[50];
uint32_t uart_num_test;

/* call in main file to initialization Active object of app using */
void BlinkyTest_app_init(void) {
 80112c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af02      	add	r7, sp, #8
    BlinkyTest_ctor(&Blinky_instance);
 80112ca:	481e      	ldr	r0, [pc, #120]	@ (8011344 <BlinkyTest_app_init+0x80>)
 80112cc:	f000 f84a 	bl	8011364 <BlinkyTest_ctor>

    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%d",name_program,name_ic,num_ic);
 80112d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011348 <BlinkyTest_app_init+0x84>)
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	9301      	str	r3, [sp, #4]
 80112d6:	4b1d      	ldr	r3, [pc, #116]	@ (801134c <BlinkyTest_app_init+0x88>)
 80112d8:	9300      	str	r3, [sp, #0]
 80112da:	4b1d      	ldr	r3, [pc, #116]	@ (8011350 <BlinkyTest_app_init+0x8c>)
 80112dc:	4a1d      	ldr	r2, [pc, #116]	@ (8011354 <BlinkyTest_app_init+0x90>)
 80112de:	212a      	movs	r1, #42	@ 0x2a
 80112e0:	481d      	ldr	r0, [pc, #116]	@ (8011358 <BlinkyTest_app_init+0x94>)
 80112e2:	f003 fe69 	bl	8014fb8 <sniprintf>
    data_write.data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 80112e6:	202a      	movs	r0, #42	@ 0x2a
 80112e8:	f001 ff6c 	bl	80131c4 <malloc>
 80112ec:	4603      	mov	r3, r0
 80112ee:	461a      	mov	r2, r3
 80112f0:	4b1a      	ldr	r3, [pc, #104]	@ (801135c <BlinkyTest_app_init+0x98>)
 80112f2:	605a      	str	r2, [r3, #4]
    memcpy(data_write.data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 80112f4:	4b19      	ldr	r3, [pc, #100]	@ (801135c <BlinkyTest_app_init+0x98>)
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	4a17      	ldr	r2, [pc, #92]	@ (8011358 <BlinkyTest_app_init+0x94>)
 80112fa:	4614      	mov	r4, r2
 80112fc:	469c      	mov	ip, r3
 80112fe:	f104 0e20 	add.w	lr, r4, #32
 8011302:	4665      	mov	r5, ip
 8011304:	4626      	mov	r6, r4
 8011306:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011308:	6028      	str	r0, [r5, #0]
 801130a:	6069      	str	r1, [r5, #4]
 801130c:	60aa      	str	r2, [r5, #8]
 801130e:	60eb      	str	r3, [r5, #12]
 8011310:	3410      	adds	r4, #16
 8011312:	f10c 0c10 	add.w	ip, ip, #16
 8011316:	4574      	cmp	r4, lr
 8011318:	d1f3      	bne.n	8011302 <BlinkyTest_app_init+0x3e>
 801131a:	4662      	mov	r2, ip
 801131c:	4623      	mov	r3, r4
 801131e:	cb03      	ldmia	r3!, {r0, r1}
 8011320:	6010      	str	r0, [r2, #0]
 8011322:	6051      	str	r1, [r2, #4]
 8011324:	881b      	ldrh	r3, [r3, #0]
 8011326:	8113      	strh	r3, [r2, #8]
    data_write.data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 8011328:	4b0c      	ldr	r3, [pc, #48]	@ (801135c <BlinkyTest_app_init+0x98>)
 801132a:	222a      	movs	r2, #42	@ 0x2a
 801132c:	811a      	strh	r2, [r3, #8]
    data_write.mem_addr = START_ADDR_PROGRAM_TEST_X(1);
 801132e:	4b0b      	ldr	r3, [pc, #44]	@ (801135c <BlinkyTest_app_init+0x98>)
 8011330:	226d      	movs	r2, #109	@ 0x6d
 8011332:	801a      	strh	r2, [r3, #0]


    // data_uart.data = malloc(50);
    uart_num_test = 0;
 8011334:	4b0a      	ldr	r3, [pc, #40]	@ (8011360 <BlinkyTest_app_init+0x9c>)
 8011336:	2200      	movs	r2, #0
 8011338:	601a      	str	r2, [r3, #0]
}
 801133a:	bf00      	nop
 801133c:	3704      	adds	r7, #4
 801133e:	46bd      	mov	sp, r7
 8011340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011342:	bf00      	nop
 8011344:	20001aa4 	.word	0x20001aa4
 8011348:	20000084 	.word	0x20000084
 801134c:	20000070 	.word	0x20000070
 8011350:	2000005c 	.word	0x2000005c
 8011354:	080189dc 	.word	0x080189dc
 8011358:	20001c70 	.word	0x20001c70
 801135c:	20001c64 	.word	0x20001c64
 8011360:	20001c9c 	.word	0x20001c9c

08011364 <BlinkyTest_ctor>:


void BlinkyTest_ctor(Test_Blinky_OS * const pAO) {
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
    /* Init task */
    OS_task_init(&pAO->task,(OS_handler)&BlinkyTest_init,(OS_handler)&BlinkyTest_Dispatch);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4a0f      	ldr	r2, [pc, #60]	@ (80113ac <BlinkyTest_ctor+0x48>)
 8011370:	490f      	ldr	r1, [pc, #60]	@ (80113b0 <BlinkyTest_ctor+0x4c>)
 8011372:	4618      	mov	r0, r3
 8011374:	f001 fc42 	bl	8012bfc <OS_task_init>

    /* init time os if using */
    OS_TimeEvt_init(&pAO->te1,TIMEOUT1_SIG,&pAO->task);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	331c      	adds	r3, #28
 801137c:	687a      	ldr	r2, [r7, #4]
 801137e:	2100      	movs	r1, #0
 8011380:	4618      	mov	r0, r3
 8011382:	f001 fd0b 	bl	8012d9c <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te2,TIMEOUT2_SIG,&pAO->task);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	3370      	adds	r3, #112	@ 0x70
 801138a:	687a      	ldr	r2, [r7, #4]
 801138c:	2101      	movs	r1, #1
 801138e:	4618      	mov	r0, r3
 8011390:	f001 fd04 	bl	8012d9c <OS_TimeEvt_init>
    // OS_TimeEvt_init(&pAO->te_eeprom_write,WRITE_PROGRAM_TEST,&pAO->task);
    // OS_TimeEvt_init(&pAO->te_eeprom_read,READ_ONE_PROGRAM_TEST,&pAO->task);
    OS_TimeEvt_init(&pAO->te_send_data,TEST_SEND_DATA_ESP32,&pAO->task);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	2107      	movs	r1, #7
 801139e:	4618      	mov	r0, r3
 80113a0:	f001 fcfc 	bl	8012d9c <OS_TimeEvt_init>
}
 80113a4:	bf00      	nop
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	080113fd 	.word	0x080113fd
 80113b0:	080113b5 	.word	0x080113b5

080113b4 <BlinkyTest_init>:

/* The init function of app task (optional) */
void BlinkyTest_init(Test_Blinky_OS * const pOS_task, OS_event_t const * const pEvent) {
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b082      	sub	sp, #8
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	6039      	str	r1, [r7, #0]
    
    /* init time for generate event */
    OS_TimeEvt_Set(&pOS_task->te1,
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f103 001c 	add.w	r0, r3, #28
    1U,
    OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks1);
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
    OS_TimeEvt_Set(&pOS_task->te1,
 80113ca:	461a      	mov	r2, r3
 80113cc:	2101      	movs	r1, #1
 80113ce:	f001 fd0b 	bl	8012de8 <OS_TimeEvt_Set>

    OS_TimeEvt_Set(&pOS_task->te2,
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f103 0070 	add.w	r0, r3, #112	@ 0x70
    1U + (OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks2 / 4),
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
    OS_TimeEvt_Set(&pOS_task->te2,
 80113de:	089b      	lsrs	r3, r3, #2
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	3301      	adds	r3, #1
 80113e4:	b299      	uxth	r1, r3
    OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks2);
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
    OS_TimeEvt_Set(&pOS_task->te2,
 80113ec:	461a      	mov	r2, r3
 80113ee:	f001 fcfb 	bl	8012de8 <OS_TimeEvt_Set>
    /* if don't using this function */
    /*
    * UNSED(pOS_task);
    * UNSED(pEvent);
    */
}
 80113f2:	bf00      	nop
 80113f4:	3708      	adds	r7, #8
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
	...

080113fc <BlinkyTest_Dispatch>:

void BlinkyTest_Dispatch(Test_Blinky_OS *const pOS_task, OS_event_t const * const pEvent) {
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	881b      	ldrh	r3, [r3, #0]
 801140a:	2b07      	cmp	r3, #7
 801140c:	d81e      	bhi.n	801144c <BlinkyTest_Dispatch+0x50>
 801140e:	a201      	add	r2, pc, #4	@ (adr r2, 8011414 <BlinkyTest_Dispatch+0x18>)
 8011410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011414:	08011435 	.word	0x08011435
 8011418:	08011441 	.word	0x08011441
 801141c:	0801144d 	.word	0x0801144d
 8011420:	0801144d 	.word	0x0801144d
 8011424:	0801144d 	.word	0x0801144d
 8011428:	0801144d 	.word	0x0801144d
 801142c:	0801144d 	.word	0x0801144d
 8011430:	0801144d 	.word	0x0801144d
        case TIMEOUT1_SIG : {
            /* Turn on led */
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8011434:	2201      	movs	r2, #1
 8011436:	2102      	movs	r1, #2
 8011438:	4807      	ldr	r0, [pc, #28]	@ (8011458 <BlinkyTest_Dispatch+0x5c>)
 801143a:	f7f2 fac3 	bl	80039c4 <HAL_GPIO_WritePin>
            // printf("Turn on led\n");
        } break;
 801143e:	e006      	b.n	801144e <BlinkyTest_Dispatch+0x52>
        case TIMEOUT2_SIG : {
            /* Turn off led */
        	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8011440:	2200      	movs	r2, #0
 8011442:	2102      	movs	r1, #2
 8011444:	4804      	ldr	r0, [pc, #16]	@ (8011458 <BlinkyTest_Dispatch+0x5c>)
 8011446:	f7f2 fabd 	bl	80039c4 <HAL_GPIO_WritePin>
            // printf("Turn off led\n");
        } break;
 801144a:	e000      	b.n	801144e <BlinkyTest_Dispatch+0x52>
            // uart_num_test++;
            // sprintf((char *)data_uart.data,"%s: %ld\n","The String Send to ESP32",uart_num_test);
            // data_uart.len = strlen((char *)data_uart.data);
            // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_uart,sizeof(uart_buf));
        } break;
        default: break;
 801144c:	bf00      	nop
    }
}
 801144e:	bf00      	nop
 8011450:	3708      	adds	r7, #8
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
 8011456:	bf00      	nop
 8011458:	40010800 	.word	0x40010800

0801145c <AT24Cxx_Init>:
#include <stdio.h>
#include <stdint.h>

/* Private function prototype */

AT24Cxx_Status AT24Cxx_Init(AT24Cxx_t *pDev, uint8_t dev_address, I2C_HandleTypeDef *dev_i2c) {
 801145c:	b580      	push	{r7, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	af00      	add	r7, sp, #0
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	460b      	mov	r3, r1
 8011466:	607a      	str	r2, [r7, #4]
 8011468:	72fb      	strb	r3, [r7, #11]
    pDev->i2c_port = dev_i2c;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	601a      	str	r2, [r3, #0]
    pDev->dev_address = dev_address << 1;
 8011470:	7afb      	ldrb	r3, [r7, #11]
 8011472:	005b      	lsls	r3, r3, #1
 8011474:	b2da      	uxtb	r2, r3
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	711a      	strb	r2, [r3, #4]
    /* Test communication */
    //uint8_t test_buf[1] = {0};
    if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 1, 100) == HAL_OK) {
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	6818      	ldr	r0, [r3, #0]
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	791b      	ldrb	r3, [r3, #4]
 8011482:	4619      	mov	r1, r3
 8011484:	2364      	movs	r3, #100	@ 0x64
 8011486:	2201      	movs	r2, #1
 8011488:	f7f3 f826 	bl	80044d8 <HAL_I2C_IsDeviceReady>
 801148c:	4603      	mov	r3, r0
 801148e:	2b00      	cmp	r3, #0
 8011490:	d101      	bne.n	8011496 <AT24Cxx_Init+0x3a>
        return AT24Cxx_Init_OK;
 8011492:	2300      	movs	r3, #0
 8011494:	e000      	b.n	8011498 <AT24Cxx_Init+0x3c>
    }
    return AT24Cxx_Init_Fail;
 8011496:	2301      	movs	r3, #1
}
 8011498:	4618      	mov	r0, r3
 801149a:	3710      	adds	r7, #16
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <AT24Cxx_write_buffer>:
    } else {
        return AT24Cxx_Error_write;
    }
}

AT24Cxx_Status AT24Cxx_write_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b086      	sub	sp, #24
 80114a4:	af02      	add	r7, sp, #8
 80114a6:	60f8      	str	r0, [r7, #12]
 80114a8:	607a      	str	r2, [r7, #4]
 80114aa:	461a      	mov	r2, r3
 80114ac:	460b      	mov	r3, r1
 80114ae:	817b      	strh	r3, [r7, #10]
 80114b0:	4613      	mov	r3, r2
 80114b2:	813b      	strh	r3, [r7, #8]
    /* Check valid size buffer and address */
    if (mem_addr+buf_length < AT24C256_MAX_ADDR && buf_length < AT24C256_PG_SIZE) {
 80114b4:	897a      	ldrh	r2, [r7, #10]
 80114b6:	893b      	ldrh	r3, [r7, #8]
 80114b8:	4413      	add	r3, r2
 80114ba:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80114be:	4293      	cmp	r3, r2
 80114c0:	dc11      	bgt.n	80114e6 <AT24Cxx_write_buffer+0x46>
 80114c2:	893b      	ldrh	r3, [r7, #8]
 80114c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80114c6:	d80e      	bhi.n	80114e6 <AT24Cxx_write_buffer+0x46>
        HAL_I2C_Mem_Write_IT(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,buf_length);
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6818      	ldr	r0, [r3, #0]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	791b      	ldrb	r3, [r3, #4]
 80114d0:	4619      	mov	r1, r3
 80114d2:	897a      	ldrh	r2, [r7, #10]
 80114d4:	893b      	ldrh	r3, [r7, #8]
 80114d6:	9301      	str	r3, [sp, #4]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	9300      	str	r3, [sp, #0]
 80114dc:	2310      	movs	r3, #16
 80114de:	f7f2 ff4f 	bl	8004380 <HAL_I2C_Mem_Write_IT>
        return AT24Cxx_OK;
 80114e2:	2302      	movs	r3, #2
 80114e4:	e000      	b.n	80114e8 <AT24Cxx_write_buffer+0x48>
    } else {
        return AT24Cxx_Error_write;
 80114e6:	2303      	movs	r3, #3
    }
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <AT24Cxx_write_buffer_bloking>:

AT24Cxx_Status AT24Cxx_write_buffer_bloking(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 80114f0:	b5b0      	push	{r4, r5, r7, lr}
 80114f2:	b08a      	sub	sp, #40	@ 0x28
 80114f4:	af04      	add	r7, sp, #16
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	607a      	str	r2, [r7, #4]
 80114fa:	461a      	mov	r2, r3
 80114fc:	460b      	mov	r3, r1
 80114fe:	817b      	strh	r3, [r7, #10]
 8011500:	4613      	mov	r3, r2
 8011502:	813b      	strh	r3, [r7, #8]
    uint8_t page_remaining = AT24C256_PG_SIZE - (mem_addr % AT24C256_PG_SIZE); /* num bytes written in current page from address */
 8011504:	897b      	ldrh	r3, [r7, #10]
 8011506:	b2db      	uxtb	r3, r3
 8011508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801150c:	b2db      	uxtb	r3, r3
 801150e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8011512:	75fb      	strb	r3, [r7, #23]

    if (buf_length < page_remaining) page_remaining = buf_length;
 8011514:	7dfb      	ldrb	r3, [r7, #23]
 8011516:	b29b      	uxth	r3, r3
 8011518:	893a      	ldrh	r2, [r7, #8]
 801151a:	429a      	cmp	r2, r3
 801151c:	d201      	bcs.n	8011522 <AT24Cxx_write_buffer_bloking+0x32>
 801151e:	893b      	ldrh	r3, [r7, #8]
 8011520:	75fb      	strb	r3, [r7, #23]
    uint8_t page_write = (buf_length - page_remaining) / AT24C256_PG_SIZE;   /* num pages can write full */
 8011522:	893a      	ldrh	r2, [r7, #8]
 8011524:	7dfb      	ldrb	r3, [r7, #23]
 8011526:	1ad3      	subs	r3, r2, r3
 8011528:	2b00      	cmp	r3, #0
 801152a:	da00      	bge.n	801152e <AT24Cxx_write_buffer_bloking+0x3e>
 801152c:	333f      	adds	r3, #63	@ 0x3f
 801152e:	119b      	asrs	r3, r3, #6
 8011530:	757b      	strb	r3, [r7, #21]
    uint8_t byte_remaining = (buf_length - page_remaining) % AT24C256_PG_SIZE; /* num bytes remain after write all full page */
 8011532:	893a      	ldrh	r2, [r7, #8]
 8011534:	7dfb      	ldrb	r3, [r7, #23]
 8011536:	1ad3      	subs	r3, r2, r3
 8011538:	425a      	negs	r2, r3
 801153a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801153e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011542:	bf58      	it	pl
 8011544:	4253      	negpl	r3, r2
 8011546:	753b      	strb	r3, [r7, #20]

    /* write in current page */
    if (page_remaining > 0x00 && (mem_addr + page_remaining) < AT24C256_MAX_ADDR) {
 8011548:	7dfb      	ldrb	r3, [r7, #23]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d025      	beq.n	801159a <AT24Cxx_write_buffer_bloking+0xaa>
 801154e:	897a      	ldrh	r2, [r7, #10]
 8011550:	7dfb      	ldrb	r3, [r7, #23]
 8011552:	4413      	add	r3, r2
 8011554:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8011558:	4293      	cmp	r3, r2
 801155a:	dc1e      	bgt.n	801159a <AT24Cxx_write_buffer_bloking+0xaa>
        while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,page_remaining,AT24C256_I2C_TIMOUT) != HAL_OK);
 801155c:	bf00      	nop
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	6818      	ldr	r0, [r3, #0]
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	791b      	ldrb	r3, [r3, #4]
 8011566:	461c      	mov	r4, r3
 8011568:	7dfb      	ldrb	r3, [r7, #23]
 801156a:	b29b      	uxth	r3, r3
 801156c:	897a      	ldrh	r2, [r7, #10]
 801156e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8011572:	9102      	str	r1, [sp, #8]
 8011574:	9301      	str	r3, [sp, #4]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	2310      	movs	r3, #16
 801157c:	4621      	mov	r1, r4
 801157e:	f7f2 fb91 	bl	8003ca4 <HAL_I2C_Mem_Write>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d1ea      	bne.n	801155e <AT24Cxx_write_buffer_bloking+0x6e>
        if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6818      	ldr	r0, [r3, #0]
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	791b      	ldrb	r3, [r3, #4]
 8011590:	4619      	mov	r1, r3
 8011592:	2305      	movs	r3, #5
 8011594:	2264      	movs	r2, #100	@ 0x64
 8011596:	f7f2 ff9f 	bl	80044d8 <HAL_I2C_IsDeviceReady>
            // printf("transmit i2c success\n");
        }
    }

    /* write full page */
    for (uint8_t cur_page = 0; cur_page < page_write; cur_page ++) {
 801159a:	2300      	movs	r3, #0
 801159c:	75bb      	strb	r3, [r7, #22]
 801159e:	e042      	b.n	8011626 <AT24Cxx_write_buffer_bloking+0x136>
        if ((mem_addr + page_remaining+ (cur_page * AT24C256_PG_SIZE)) > 0x00 && (mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)) < AT24C256_MAX_ADDR) {
 80115a0:	897a      	ldrh	r2, [r7, #10]
 80115a2:	7dfb      	ldrb	r3, [r7, #23]
 80115a4:	441a      	add	r2, r3
 80115a6:	7dbb      	ldrb	r3, [r7, #22]
 80115a8:	019b      	lsls	r3, r3, #6
 80115aa:	4413      	add	r3, r2
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	dd37      	ble.n	8011620 <AT24Cxx_write_buffer_bloking+0x130>
 80115b0:	897a      	ldrh	r2, [r7, #10]
 80115b2:	7dfb      	ldrb	r3, [r7, #23]
 80115b4:	441a      	add	r2, r3
 80115b6:	7dbb      	ldrb	r3, [r7, #22]
 80115b8:	019b      	lsls	r3, r3, #6
 80115ba:	4413      	add	r3, r2
 80115bc:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80115c0:	4293      	cmp	r3, r2
 80115c2:	dc2d      	bgt.n	8011620 <AT24Cxx_write_buffer_bloking+0x130>
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,(uint16_t)(mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)),
 80115c4:	bf00      	nop
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	6818      	ldr	r0, [r3, #0]
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	791b      	ldrb	r3, [r3, #4]
 80115ce:	461c      	mov	r4, r3
 80115d0:	7dfb      	ldrb	r3, [r7, #23]
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	897b      	ldrh	r3, [r7, #10]
 80115d6:	4413      	add	r3, r2
 80115d8:	b29a      	uxth	r2, r3
 80115da:	7dbb      	ldrb	r3, [r7, #22]
 80115dc:	b29b      	uxth	r3, r3
 80115de:	019b      	lsls	r3, r3, #6
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	4413      	add	r3, r2
 80115e4:	b299      	uxth	r1, r3
                    I2C_MEMADD_SIZE_16BIT,
                    data_buf + page_remaining + (cur_page * AT24C256_PG_SIZE),
 80115e6:	7dfb      	ldrb	r3, [r7, #23]
 80115e8:	7dba      	ldrb	r2, [r7, #22]
 80115ea:	0192      	lsls	r2, r2, #6
 80115ec:	4413      	add	r3, r2
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,(uint16_t)(mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)),
 80115ee:	687a      	ldr	r2, [r7, #4]
 80115f0:	4413      	add	r3, r2
 80115f2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80115f6:	9202      	str	r2, [sp, #8]
 80115f8:	2240      	movs	r2, #64	@ 0x40
 80115fa:	9201      	str	r2, [sp, #4]
 80115fc:	9300      	str	r3, [sp, #0]
 80115fe:	2310      	movs	r3, #16
 8011600:	460a      	mov	r2, r1
 8011602:	4621      	mov	r1, r4
 8011604:	f7f2 fb4e 	bl	8003ca4 <HAL_I2C_Mem_Write>
 8011608:	4603      	mov	r3, r0
                    AT24C256_PG_SIZE,
                    AT24C256_I2C_TIMOUT) != HAL_OK);
 801160a:	2b00      	cmp	r3, #0
 801160c:	d1db      	bne.n	80115c6 <AT24Cxx_write_buffer_bloking+0xd6>
            if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	6818      	ldr	r0, [r3, #0]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	791b      	ldrb	r3, [r3, #4]
 8011616:	4619      	mov	r1, r3
 8011618:	2305      	movs	r3, #5
 801161a:	2264      	movs	r2, #100	@ 0x64
 801161c:	f7f2 ff5c 	bl	80044d8 <HAL_I2C_IsDeviceReady>
    for (uint8_t cur_page = 0; cur_page < page_write; cur_page ++) {
 8011620:	7dbb      	ldrb	r3, [r7, #22]
 8011622:	3301      	adds	r3, #1
 8011624:	75bb      	strb	r3, [r7, #22]
 8011626:	7dba      	ldrb	r2, [r7, #22]
 8011628:	7d7b      	ldrb	r3, [r7, #21]
 801162a:	429a      	cmp	r2, r3
 801162c:	d3b8      	bcc.n	80115a0 <AT24Cxx_write_buffer_bloking+0xb0>
            }
        }
    }

    /* write bytes after write full page still remain */
    if (byte_remaining != 0) {
 801162e:	7d3b      	ldrb	r3, [r7, #20]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d040      	beq.n	80116b6 <AT24Cxx_write_buffer_bloking+0x1c6>
        if ((mem_addr + page_remaining + (page_write * AT24C256_PG_SIZE)) > 0x00 && (mem_addr + page_remaining+ (page_write * AT24C256_PG_SIZE)) < AT24C256_MAX_ADDR) {
 8011634:	897a      	ldrh	r2, [r7, #10]
 8011636:	7dfb      	ldrb	r3, [r7, #23]
 8011638:	441a      	add	r2, r3
 801163a:	7d7b      	ldrb	r3, [r7, #21]
 801163c:	019b      	lsls	r3, r3, #6
 801163e:	4413      	add	r3, r2
 8011640:	2b00      	cmp	r3, #0
 8011642:	dd38      	ble.n	80116b6 <AT24Cxx_write_buffer_bloking+0x1c6>
 8011644:	897a      	ldrh	r2, [r7, #10]
 8011646:	7dfb      	ldrb	r3, [r7, #23]
 8011648:	441a      	add	r2, r3
 801164a:	7d7b      	ldrb	r3, [r7, #21]
 801164c:	019b      	lsls	r3, r3, #6
 801164e:	4413      	add	r3, r2
 8011650:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8011654:	4293      	cmp	r3, r2
 8011656:	dc2e      	bgt.n	80116b6 <AT24Cxx_write_buffer_bloking+0x1c6>
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 8011658:	bf00      	nop
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	6818      	ldr	r0, [r3, #0]
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	791b      	ldrb	r3, [r3, #4]
 8011662:	461d      	mov	r5, r3
                    (uint16_t)(mem_addr + page_remaining + (page_write * AT24C256_PG_SIZE)),
 8011664:	7dfb      	ldrb	r3, [r7, #23]
 8011666:	b29a      	uxth	r2, r3
 8011668:	897b      	ldrh	r3, [r7, #10]
 801166a:	4413      	add	r3, r2
 801166c:	b29a      	uxth	r2, r3
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 801166e:	7d7b      	ldrb	r3, [r7, #21]
 8011670:	b29b      	uxth	r3, r3
 8011672:	019b      	lsls	r3, r3, #6
 8011674:	b29b      	uxth	r3, r3
 8011676:	4413      	add	r3, r2
 8011678:	b299      	uxth	r1, r3
                    I2C_MEMADD_SIZE_16BIT,
                    data_buf + page_remaining + (page_write * AT24C256_PG_SIZE),
 801167a:	7dfb      	ldrb	r3, [r7, #23]
 801167c:	7d7a      	ldrb	r2, [r7, #21]
 801167e:	0192      	lsls	r2, r2, #6
 8011680:	4413      	add	r3, r2
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	4413      	add	r3, r2
 8011686:	7d3a      	ldrb	r2, [r7, #20]
 8011688:	b292      	uxth	r2, r2
 801168a:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 801168e:	9402      	str	r4, [sp, #8]
 8011690:	9201      	str	r2, [sp, #4]
 8011692:	9300      	str	r3, [sp, #0]
 8011694:	2310      	movs	r3, #16
 8011696:	460a      	mov	r2, r1
 8011698:	4629      	mov	r1, r5
 801169a:	f7f2 fb03 	bl	8003ca4 <HAL_I2C_Mem_Write>
 801169e:	4603      	mov	r3, r0
                    byte_remaining,
                    AT24C256_I2C_TIMOUT) == HAL_OK) {
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d0da      	beq.n	801165a <AT24Cxx_write_buffer_bloking+0x16a>
                    } 
            if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6818      	ldr	r0, [r3, #0]
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	791b      	ldrb	r3, [r3, #4]
 80116ac:	4619      	mov	r1, r3
 80116ae:	2305      	movs	r3, #5
 80116b0:	2264      	movs	r2, #100	@ 0x64
 80116b2:	f7f2 ff11 	bl	80044d8 <HAL_I2C_IsDeviceReady>
                // printf("transmit i2c success\n");
            }
        }
    }
    HAL_Delay(10);
 80116b6:	200a      	movs	r0, #10
 80116b8:	f7f0 ff7c 	bl	80025b4 <HAL_Delay>
}
 80116bc:	bf00      	nop
 80116be:	4618      	mov	r0, r3
 80116c0:	3718      	adds	r7, #24
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bdb0      	pop	{r4, r5, r7, pc}

080116c6 <AT24Cxx_read_buffer>:

AT24Cxx_Status AT24Cxx_read_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t *data_ret, uint16_t buf_length) {
 80116c6:	b580      	push	{r7, lr}
 80116c8:	b088      	sub	sp, #32
 80116ca:	af04      	add	r7, sp, #16
 80116cc:	60f8      	str	r0, [r7, #12]
 80116ce:	607a      	str	r2, [r7, #4]
 80116d0:	461a      	mov	r2, r3
 80116d2:	460b      	mov	r3, r1
 80116d4:	817b      	strh	r3, [r7, #10]
 80116d6:	4613      	mov	r3, r2
 80116d8:	813b      	strh	r3, [r7, #8]
    if (mem_addr < AT24C256_MAX_ADDR) {
 80116da:	897b      	ldrh	r3, [r7, #10]
 80116dc:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80116e0:	4293      	cmp	r3, r2
 80116e2:	d815      	bhi.n	8011710 <AT24Cxx_read_buffer+0x4a>
        while (HAL_I2C_Mem_Read(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_ret,buf_length,1000) != HAL_OK);
 80116e4:	bf00      	nop
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	6818      	ldr	r0, [r3, #0]
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	791b      	ldrb	r3, [r3, #4]
 80116ee:	4619      	mov	r1, r3
 80116f0:	897a      	ldrh	r2, [r7, #10]
 80116f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80116f6:	9302      	str	r3, [sp, #8]
 80116f8:	893b      	ldrh	r3, [r7, #8]
 80116fa:	9301      	str	r3, [sp, #4]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	9300      	str	r3, [sp, #0]
 8011700:	2310      	movs	r3, #16
 8011702:	f7f2 fbc9 	bl	8003e98 <HAL_I2C_Mem_Read>
 8011706:	4603      	mov	r3, r0
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1ec      	bne.n	80116e6 <AT24Cxx_read_buffer+0x20>
        return AT24Cxx_OK;
 801170c:	2302      	movs	r3, #2
 801170e:	e000      	b.n	8011712 <AT24Cxx_read_buffer+0x4c>
    } else {
        return AT24Cxx_Error_read;
 8011710:	2304      	movs	r3, #4
    }
}
 8011712:	4618      	mov	r0, r3
 8011714:	3710      	adds	r7, #16
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}

0801171a <transposeArray>:

float String2Float(uint8_t *data_string, uint16_t size) {
    
}

void transposeArray(char *Dest, char *Src, uint8_t col, uint8_t row) {
 801171a:	b480      	push	{r7}
 801171c:	b087      	sub	sp, #28
 801171e:	af00      	add	r7, sp, #0
 8011720:	60f8      	str	r0, [r7, #12]
 8011722:	60b9      	str	r1, [r7, #8]
 8011724:	4611      	mov	r1, r2
 8011726:	461a      	mov	r2, r3
 8011728:	460b      	mov	r3, r1
 801172a:	71fb      	strb	r3, [r7, #7]
 801172c:	4613      	mov	r3, r2
 801172e:	71bb      	strb	r3, [r7, #6]
    for (int i = 0; i < col; i++) {
 8011730:	2300      	movs	r3, #0
 8011732:	617b      	str	r3, [r7, #20]
 8011734:	e020      	b.n	8011778 <transposeArray+0x5e>
        for (int j = 0; j < row; j++) {
 8011736:	2300      	movs	r3, #0
 8011738:	613b      	str	r3, [r7, #16]
 801173a:	e016      	b.n	801176a <transposeArray+0x50>
            Dest[i * row + j] = Src[j * col + i];
 801173c:	79fb      	ldrb	r3, [r7, #7]
 801173e:	693a      	ldr	r2, [r7, #16]
 8011740:	fb03 f202 	mul.w	r2, r3, r2
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	4413      	add	r3, r2
 8011748:	461a      	mov	r2, r3
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	441a      	add	r2, r3
 801174e:	79bb      	ldrb	r3, [r7, #6]
 8011750:	6979      	ldr	r1, [r7, #20]
 8011752:	fb03 f101 	mul.w	r1, r3, r1
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	440b      	add	r3, r1
 801175a:	4619      	mov	r1, r3
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	440b      	add	r3, r1
 8011760:	7812      	ldrb	r2, [r2, #0]
 8011762:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < row; j++) {
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	3301      	adds	r3, #1
 8011768:	613b      	str	r3, [r7, #16]
 801176a:	79bb      	ldrb	r3, [r7, #6]
 801176c:	693a      	ldr	r2, [r7, #16]
 801176e:	429a      	cmp	r2, r3
 8011770:	dbe4      	blt.n	801173c <transposeArray+0x22>
    for (int i = 0; i < col; i++) {
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	3301      	adds	r3, #1
 8011776:	617b      	str	r3, [r7, #20]
 8011778:	79fb      	ldrb	r3, [r7, #7]
 801177a:	697a      	ldr	r2, [r7, #20]
 801177c:	429a      	cmp	r2, r3
 801177e:	dbda      	blt.n	8011736 <transposeArray+0x1c>
        }
    }
}
 8011780:	bf00      	nop
 8011782:	bf00      	nop
 8011784:	371c      	adds	r7, #28
 8011786:	46bd      	mov	sp, r7
 8011788:	bc80      	pop	{r7}
 801178a:	4770      	bx	lr

0801178c <DS3231_Init>:
#include "DS3231.h"

static uint8_t decToBcd(int val);
static int bcdToDec(uint8_t val);

DS3231_Status DS3231_Init(DS3231_t *pDS3231, I2C_HandleTypeDef *i2c, uint16_t dev_address) {
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	60f8      	str	r0, [r7, #12]
 8011794:	60b9      	str	r1, [r7, #8]
 8011796:	4613      	mov	r3, r2
 8011798:	80fb      	strh	r3, [r7, #6]
    pDS3231->i2c_port = i2c;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	68ba      	ldr	r2, [r7, #8]
 801179e:	601a      	str	r2, [r3, #0]

    pDS3231->dev_address = dev_address << 1;
 80117a0:	88fb      	ldrh	r3, [r7, #6]
 80117a2:	b2db      	uxtb	r3, r3
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	b2da      	uxtb	r2, r3
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	711a      	strb	r2, [r3, #4]
    if (HAL_I2C_IsDeviceReady(pDS3231->i2c_port,pDS3231->dev_address,1,100) == HAL_OK) {
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	6818      	ldr	r0, [r3, #0]
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	791b      	ldrb	r3, [r3, #4]
 80117b4:	4619      	mov	r1, r3
 80117b6:	2364      	movs	r3, #100	@ 0x64
 80117b8:	2201      	movs	r2, #1
 80117ba:	f7f2 fe8d 	bl	80044d8 <HAL_I2C_IsDeviceReady>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d104      	bne.n	80117ce <DS3231_Init+0x42>
    	printf("Init DS3231 Success\n");
 80117c4:	4804      	ldr	r0, [pc, #16]	@ (80117d8 <DS3231_Init+0x4c>)
 80117c6:	f003 fbef 	bl	8014fa8 <puts>
      return DS3231_Init_OK;
 80117ca:	2300      	movs	r3, #0
 80117cc:	e000      	b.n	80117d0 <DS3231_Init+0x44>
    }
    return DS3231_Fail;
 80117ce:	2301      	movs	r3, #1
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3710      	adds	r7, #16
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	080189e8 	.word	0x080189e8

080117dc <DS3231_Read_time>:

DS3231_Status DS3231_Read_time(DS3231_t *pDS3231, uint8_t *data_read) {
 80117dc:	b580      	push	{r7, lr}
 80117de:	b088      	sub	sp, #32
 80117e0:	af04      	add	r7, sp, #16
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
    uint8_t get_time[7];
    if (HAL_I2C_Mem_Read(pDS3231->i2c_port, pDS3231->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6818      	ldr	r0, [r3, #0]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	791b      	ldrb	r3, [r3, #4]
 80117ee:	4619      	mov	r1, r3
 80117f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80117f4:	9302      	str	r3, [sp, #8]
 80117f6:	2307      	movs	r3, #7
 80117f8:	9301      	str	r3, [sp, #4]
 80117fa:	f107 0308 	add.w	r3, r7, #8
 80117fe:	9300      	str	r3, [sp, #0]
 8011800:	2301      	movs	r3, #1
 8011802:	2200      	movs	r2, #0
 8011804:	f7f2 fb48 	bl	8003e98 <HAL_I2C_Mem_Read>
 8011808:	4603      	mov	r3, r0
 801180a:	2b00      	cmp	r3, #0
 801180c:	d001      	beq.n	8011812 <DS3231_Read_time+0x36>
      return DS3231_Fail;
 801180e:	2301      	movs	r3, #1
 8011810:	e03e      	b.n	8011890 <DS3231_Read_time+0xb4>
    }
	
  data_read[0] = bcdToDec(get_time[0]);
 8011812:	7a3b      	ldrb	r3, [r7, #8]
 8011814:	4618      	mov	r0, r3
 8011816:	f000 f83f 	bl	8011898 <bcdToDec>
 801181a:	4603      	mov	r3, r0
 801181c:	b2da      	uxtb	r2, r3
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	701a      	strb	r2, [r3, #0]
	data_read[1] = bcdToDec(get_time[1]);
 8011822:	7a7b      	ldrb	r3, [r7, #9]
 8011824:	4618      	mov	r0, r3
 8011826:	f000 f837 	bl	8011898 <bcdToDec>
 801182a:	4602      	mov	r2, r0
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	3301      	adds	r3, #1
 8011830:	b2d2      	uxtb	r2, r2
 8011832:	701a      	strb	r2, [r3, #0]
	data_read[2] = bcdToDec(get_time[2]);
 8011834:	7abb      	ldrb	r3, [r7, #10]
 8011836:	4618      	mov	r0, r3
 8011838:	f000 f82e 	bl	8011898 <bcdToDec>
 801183c:	4602      	mov	r2, r0
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	3302      	adds	r3, #2
 8011842:	b2d2      	uxtb	r2, r2
 8011844:	701a      	strb	r2, [r3, #0]
	data_read[3] = bcdToDec(get_time[3]);
 8011846:	7afb      	ldrb	r3, [r7, #11]
 8011848:	4618      	mov	r0, r3
 801184a:	f000 f825 	bl	8011898 <bcdToDec>
 801184e:	4602      	mov	r2, r0
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	3303      	adds	r3, #3
 8011854:	b2d2      	uxtb	r2, r2
 8011856:	701a      	strb	r2, [r3, #0]
	data_read[4] = bcdToDec(get_time[4]);
 8011858:	7b3b      	ldrb	r3, [r7, #12]
 801185a:	4618      	mov	r0, r3
 801185c:	f000 f81c 	bl	8011898 <bcdToDec>
 8011860:	4602      	mov	r2, r0
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	3304      	adds	r3, #4
 8011866:	b2d2      	uxtb	r2, r2
 8011868:	701a      	strb	r2, [r3, #0]
	data_read[5] = bcdToDec(get_time[5]);
 801186a:	7b7b      	ldrb	r3, [r7, #13]
 801186c:	4618      	mov	r0, r3
 801186e:	f000 f813 	bl	8011898 <bcdToDec>
 8011872:	4602      	mov	r2, r0
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	3305      	adds	r3, #5
 8011878:	b2d2      	uxtb	r2, r2
 801187a:	701a      	strb	r2, [r3, #0]
	data_read[6] = bcdToDec(get_time[6]);
 801187c:	7bbb      	ldrb	r3, [r7, #14]
 801187e:	4618      	mov	r0, r3
 8011880:	f000 f80a 	bl	8011898 <bcdToDec>
 8011884:	4602      	mov	r2, r0
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	3306      	adds	r3, #6
 801188a:	b2d2      	uxtb	r2, r2
 801188c:	701a      	strb	r2, [r3, #0]
  return DS3231_Write_OK;
 801188e:	2302      	movs	r3, #2
}
 8011890:	4618      	mov	r0, r3
 8011892:	3710      	adds	r7, #16
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
static int bcdToDec(uint8_t val)
{
 8011898:	b480      	push	{r7}
 801189a:	b083      	sub	sp, #12
 801189c:	af00      	add	r7, sp, #0
 801189e:	4603      	mov	r3, r0
 80118a0:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80118a2:	79fb      	ldrb	r3, [r7, #7]
 80118a4:	091b      	lsrs	r3, r3, #4
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	461a      	mov	r2, r3
 80118aa:	4613      	mov	r3, r2
 80118ac:	009b      	lsls	r3, r3, #2
 80118ae:	4413      	add	r3, r2
 80118b0:	005b      	lsls	r3, r3, #1
 80118b2:	461a      	mov	r2, r3
 80118b4:	79fb      	ldrb	r3, [r7, #7]
 80118b6:	f003 030f 	and.w	r3, r3, #15
 80118ba:	4413      	add	r3, r2
}
 80118bc:	4618      	mov	r0, r3
 80118be:	370c      	adds	r7, #12
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bc80      	pop	{r7}
 80118c4:	4770      	bx	lr

080118c6 <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 80118c6:	b580      	push	{r7, lr}
 80118c8:	b086      	sub	sp, #24
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	6078      	str	r0, [r7, #4]
 80118ce:	460b      	mov	r3, r1
 80118d0:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 80118d2:	235a      	movs	r3, #90	@ 0x5a
 80118d4:	733b      	strb	r3, [r7, #12]
 80118d6:	23a5      	movs	r3, #165	@ 0xa5
 80118d8:	737b      	strb	r3, [r7, #13]
 80118da:	2307      	movs	r3, #7
 80118dc:	73bb      	strb	r3, [r7, #14]
 80118de:	2382      	movs	r3, #130	@ 0x82
 80118e0:	73fb      	strb	r3, [r7, #15]
 80118e2:	2300      	movs	r3, #0
 80118e4:	743b      	strb	r3, [r7, #16]
 80118e6:	2384      	movs	r3, #132	@ 0x84
 80118e8:	747b      	strb	r3, [r7, #17]
 80118ea:	235a      	movs	r3, #90	@ 0x5a
 80118ec:	74bb      	strb	r3, [r7, #18]
 80118ee:	2301      	movs	r3, #1
 80118f0:	74fb      	strb	r3, [r7, #19]
 80118f2:	2300      	movs	r3, #0
 80118f4:	753b      	strb	r3, [r7, #20]
 80118f6:	78fb      	ldrb	r3, [r7, #3]
 80118f8:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6818      	ldr	r0, [r3, #0]
 80118fe:	f107 010c 	add.w	r1, r7, #12
 8011902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011906:	220a      	movs	r2, #10
 8011908:	f7f5 ff2d 	bl	8007766 <HAL_UART_Transmit>
}
 801190c:	bf00      	nop
 801190e:	3718      	adds	r7, #24
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, char *textData, uint16_t datalen) {
 8011914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011918:	b08a      	sub	sp, #40	@ 0x28
 801191a:	af00      	add	r7, sp, #0
 801191c:	60f8      	str	r0, [r7, #12]
 801191e:	607a      	str	r2, [r7, #4]
 8011920:	461a      	mov	r2, r3
 8011922:	460b      	mov	r3, r1
 8011924:	817b      	strh	r3, [r7, #10]
 8011926:	4613      	mov	r3, r2
 8011928:	813b      	strh	r3, [r7, #8]
 801192a:	466b      	mov	r3, sp
 801192c:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 801192e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011932:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 8011934:	893b      	ldrh	r3, [r7, #8]
 8011936:	f103 0608 	add.w	r6, r3, #8
 801193a:	1e73      	subs	r3, r6, #1
 801193c:	627b      	str	r3, [r7, #36]	@ 0x24
 801193e:	4632      	mov	r2, r6
 8011940:	2300      	movs	r3, #0
 8011942:	4690      	mov	r8, r2
 8011944:	4699      	mov	r9, r3
 8011946:	f04f 0200 	mov.w	r2, #0
 801194a:	f04f 0300 	mov.w	r3, #0
 801194e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801195a:	4632      	mov	r2, r6
 801195c:	2300      	movs	r3, #0
 801195e:	4614      	mov	r4, r2
 8011960:	461d      	mov	r5, r3
 8011962:	f04f 0200 	mov.w	r2, #0
 8011966:	f04f 0300 	mov.w	r3, #0
 801196a:	00eb      	lsls	r3, r5, #3
 801196c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011970:	00e2      	lsls	r2, r4, #3
 8011972:	4633      	mov	r3, r6
 8011974:	3307      	adds	r3, #7
 8011976:	08db      	lsrs	r3, r3, #3
 8011978:	00db      	lsls	r3, r3, #3
 801197a:	ebad 0d03 	sub.w	sp, sp, r3
 801197e:	466b      	mov	r3, sp
 8011980:	3300      	adds	r3, #0
 8011982:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8011984:	235a      	movs	r3, #90	@ 0x5a
 8011986:	753b      	strb	r3, [r7, #20]
 8011988:	23a5      	movs	r3, #165	@ 0xa5
 801198a:	757b      	strb	r3, [r7, #21]
 801198c:	893b      	ldrh	r3, [r7, #8]
 801198e:	b2db      	uxtb	r3, r3
 8011990:	3305      	adds	r3, #5
 8011992:	b2db      	uxtb	r3, r3
 8011994:	75bb      	strb	r3, [r7, #22]
 8011996:	2382      	movs	r3, #130	@ 0x82
 8011998:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 801199a:	897b      	ldrh	r3, [r7, #10]
 801199c:	0a1b      	lsrs	r3, r3, #8
 801199e:	b29b      	uxth	r3, r3
 80119a0:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 80119a2:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 80119a4:	897b      	ldrh	r3, [r7, #10]
 80119a6:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 80119a8:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 80119aa:	6a3b      	ldr	r3, [r7, #32]
 80119ac:	461a      	mov	r2, r3
 80119ae:	f107 0314 	add.w	r3, r7, #20
 80119b2:	6818      	ldr	r0, [r3, #0]
 80119b4:	6010      	str	r0, [r2, #0]
 80119b6:	889b      	ldrh	r3, [r3, #4]
 80119b8:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 80119ba:	6a3b      	ldr	r3, [r7, #32]
 80119bc:	3306      	adds	r3, #6
 80119be:	893a      	ldrh	r2, [r7, #8]
 80119c0:	6879      	ldr	r1, [r7, #4]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f003 fdaf 	bl	8015526 <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 80119c8:	893b      	ldrh	r3, [r7, #8]
 80119ca:	3306      	adds	r3, #6
 80119cc:	461a      	mov	r2, r3
 80119ce:	6a3b      	ldr	r3, [r7, #32]
 80119d0:	4413      	add	r3, r2
 80119d2:	8bba      	ldrh	r2, [r7, #28]
 80119d4:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6818      	ldr	r0, [r3, #0]
 80119da:	b2b2      	uxth	r2, r6
 80119dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80119e0:	6a39      	ldr	r1, [r7, #32]
 80119e2:	f7f5 fec0 	bl	8007766 <HAL_UART_Transmit>
 80119e6:	46d5      	mov	sp, sl
}
 80119e8:	bf00      	nop
 80119ea:	3728      	adds	r7, #40	@ 0x28
 80119ec:	46bd      	mov	sp, r7
 80119ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080119f4 <DWIN_ClearText>:

void DWIN_ClearText(Dwin_t *pDwin, uint16_t VP_address) {
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	460b      	mov	r3, r1
 80119fe:	807b      	strh	r3, [r7, #2]
    DWIN_SetText(pDwin,VP_address,(uint8_t *)"",strlen(""));
 8011a00:	8879      	ldrh	r1, [r7, #2]
 8011a02:	2300      	movs	r3, #0
 8011a04:	4a03      	ldr	r2, [pc, #12]	@ (8011a14 <DWIN_ClearText+0x20>)
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f7ff ff84 	bl	8011914 <DWIN_SetText>
}
 8011a0c:	bf00      	nop
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	080189fc 	.word	0x080189fc

08011a18 <DWIN_SetVariable_Icon>:
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
}

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b084      	sub	sp, #16
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	460b      	mov	r3, r1
 8011a22:	807b      	strh	r3, [r7, #2]
 8011a24:	4613      	mov	r3, r2
 8011a26:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8011a28:	235a      	movs	r3, #90	@ 0x5a
 8011a2a:	723b      	strb	r3, [r7, #8]
 8011a2c:	23a5      	movs	r3, #165	@ 0xa5
 8011a2e:	727b      	strb	r3, [r7, #9]
 8011a30:	2305      	movs	r3, #5
 8011a32:	72bb      	strb	r3, [r7, #10]
 8011a34:	2382      	movs	r3, #130	@ 0x82
 8011a36:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 8011a38:	887b      	ldrh	r3, [r7, #2]
 8011a3a:	0a1b      	lsrs	r3, r3, #8
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8011a40:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 8011a42:	887b      	ldrh	r3, [r7, #2]
 8011a44:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8011a46:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 8011a48:	883b      	ldrh	r3, [r7, #0]
 8011a4a:	0a1b      	lsrs	r3, r3, #8
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8011a50:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 8011a52:	883b      	ldrh	r3, [r7, #0]
 8011a54:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8011a56:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6818      	ldr	r0, [r3, #0]
 8011a5c:	f107 0108 	add.w	r1, r7, #8
 8011a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011a64:	2208      	movs	r2, #8
 8011a66:	f7f5 fe7e 	bl	8007766 <HAL_UART_Transmit>
}
 8011a6a:	bf00      	nop
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}

08011a72 <DWIN_SetArray_Icon>:

void DWIN_SetArray_Icon(Dwin_t *pDwin, uint16_t VP_address_begin, uint8_t *data_array, uint8_t data_length ) {
 8011a72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a76:	b08b      	sub	sp, #44	@ 0x2c
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	607a      	str	r2, [r7, #4]
 8011a7e:	461a      	mov	r2, r3
 8011a80:	460b      	mov	r3, r1
 8011a82:	817b      	strh	r3, [r7, #10]
 8011a84:	4613      	mov	r3, r2
 8011a86:	727b      	strb	r3, [r7, #9]
 8011a88:	466b      	mov	r3, sp
 8011a8a:	461e      	mov	r6, r3
    uint16_t Total_Data_Length = data_length * 2;
 8011a8c:	7a7b      	ldrb	r3, [r7, #9]
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	005b      	lsls	r3, r3, #1
 8011a92:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t sendBuffer[6 +Total_Data_Length];
 8011a94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011a96:	1d99      	adds	r1, r3, #6
 8011a98:	1e4b      	subs	r3, r1, #1
 8011a9a:	623b      	str	r3, [r7, #32]
 8011a9c:	460a      	mov	r2, r1
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	4690      	mov	r8, r2
 8011aa2:	4699      	mov	r9, r3
 8011aa4:	f04f 0200 	mov.w	r2, #0
 8011aa8:	f04f 0300 	mov.w	r3, #0
 8011aac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011ab0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011ab4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011ab8:	460a      	mov	r2, r1
 8011aba:	2300      	movs	r3, #0
 8011abc:	4614      	mov	r4, r2
 8011abe:	461d      	mov	r5, r3
 8011ac0:	f04f 0200 	mov.w	r2, #0
 8011ac4:	f04f 0300 	mov.w	r3, #0
 8011ac8:	00eb      	lsls	r3, r5, #3
 8011aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011ace:	00e2      	lsls	r2, r4, #3
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	3307      	adds	r3, #7
 8011ad4:	08db      	lsrs	r3, r3, #3
 8011ad6:	00db      	lsls	r3, r3, #3
 8011ad8:	ebad 0d03 	sub.w	sp, sp, r3
 8011adc:	466b      	mov	r3, sp
 8011ade:	3300      	adds	r3, #0
 8011ae0:	61fb      	str	r3, [r7, #28]
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 8011ae2:	235a      	movs	r3, #90	@ 0x5a
 8011ae4:	753b      	strb	r3, [r7, #20]
 8011ae6:	23a5      	movs	r3, #165	@ 0xa5
 8011ae8:	757b      	strb	r3, [r7, #21]
 8011aea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011aec:	b2db      	uxtb	r3, r3
 8011aee:	3303      	adds	r3, #3
 8011af0:	b2db      	uxtb	r3, r3
 8011af2:	75bb      	strb	r3, [r7, #22]
 8011af4:	2382      	movs	r3, #130	@ 0x82
 8011af6:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 8011af8:	897b      	ldrh	r3, [r7, #10]
 8011afa:	0a1b      	lsrs	r3, r3, #8
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 8011b00:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 8011b02:	897b      	ldrh	r3, [r7, #10]
 8011b04:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 8011b06:	767b      	strb	r3, [r7, #25]

    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	f107 0314 	add.w	r3, r7, #20
 8011b10:	6818      	ldr	r0, [r3, #0]
 8011b12:	6010      	str	r0, [r2, #0]
 8011b14:	889b      	ldrh	r3, [r3, #4]
 8011b16:	8093      	strh	r3, [r2, #4]
    /* Convert data array uint8_t to uint16_t */
    for (uint16_t i = 0; i < data_length; i++) {
 8011b18:	2300      	movs	r3, #0
 8011b1a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011b1c:	e012      	b.n	8011b44 <DWIN_SetArray_Icon+0xd2>
        sendBuffer[6 + (i * 2)] = 0x00;              // High byte 
 8011b1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011b20:	3303      	adds	r3, #3
 8011b22:	005b      	lsls	r3, r3, #1
 8011b24:	69fa      	ldr	r2, [r7, #28]
 8011b26:	2000      	movs	r0, #0
 8011b28:	54d0      	strb	r0, [r2, r3]
        sendBuffer[6 + (i * 2) + 1] = data_array[i]; // Low byte is data
 8011b2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	441a      	add	r2, r3
 8011b30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011b32:	3303      	adds	r3, #3
 8011b34:	005b      	lsls	r3, r3, #1
 8011b36:	3301      	adds	r3, #1
 8011b38:	7810      	ldrb	r0, [r2, #0]
 8011b3a:	69fa      	ldr	r2, [r7, #28]
 8011b3c:	54d0      	strb	r0, [r2, r3]
    for (uint16_t i = 0; i < data_length; i++) {
 8011b3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011b40:	3301      	adds	r3, #1
 8011b42:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011b44:	7a7b      	ldrb	r3, [r7, #9]
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d3e7      	bcc.n	8011b1e <DWIN_SetArray_Icon+0xac>
    }

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	6818      	ldr	r0, [r3, #0]
 8011b52:	b28a      	uxth	r2, r1
 8011b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b58:	69f9      	ldr	r1, [r7, #28]
 8011b5a:	f7f5 fe04 	bl	8007766 <HAL_UART_Transmit>
 8011b5e:	46b5      	mov	sp, r6
}
 8011b60:	bf00      	nop
 8011b62:	372c      	adds	r7, #44	@ 0x2c
 8011b64:	46bd      	mov	sp, r7
 8011b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011b6a <DWIN_Create_Basic_line>:

void DWIN_Create_Basic_line(Dwin_t *pDwin, uint16_t VP_address, uint16_t x_base, uint16_t y_base, uint8_t *array_data, uint8_t size) {
 8011b6a:	b5b0      	push	{r4, r5, r7, lr}
 8011b6c:	b0d0      	sub	sp, #320	@ 0x140
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 8011b74:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8011b78:	6020      	str	r0, [r4, #0]
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	4610      	mov	r0, r2
 8011b7e:	4619      	mov	r1, r3
 8011b80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011b84:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8011b88:	4622      	mov	r2, r4
 8011b8a:	801a      	strh	r2, [r3, #0]
 8011b8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011b90:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011b94:	4602      	mov	r2, r0
 8011b96:	801a      	strh	r2, [r3, #0]
 8011b98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011b9c:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8011ba0:	460a      	mov	r2, r1
 8011ba2:	801a      	strh	r2, [r3, #0]
    uint8_t data_length = 11 + (16*size);
 8011ba4:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8011ba8:	011b      	lsls	r3, r3, #4
 8011baa:	b2db      	uxtb	r3, r3
 8011bac:	330b      	adds	r3, #11
 8011bae:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
    uint16_t num_connection = (size * 4) - 1;
 8011bb2:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	3b01      	subs	r3, #1
 8011bbe:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 8011bc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011bc6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011bca:	4618      	mov	r0, r3
 8011bcc:	23ff      	movs	r3, #255	@ 0xff
 8011bce:	461a      	mov	r2, r3
 8011bd0:	2100      	movs	r1, #0
 8011bd2:	f003 fb5f 	bl	8015294 <memset>
 8011bd6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011bda:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011bde:	225a      	movs	r2, #90	@ 0x5a
 8011be0:	701a      	strb	r2, [r3, #0]
 8011be2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011be6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011bea:	22a5      	movs	r2, #165	@ 0xa5
 8011bec:	705a      	strb	r2, [r3, #1]
 8011bee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011bf2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011bf6:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 8011bfa:	709a      	strb	r2, [r3, #2]
 8011bfc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c00:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011c04:	2282      	movs	r2, #130	@ 0x82
 8011c06:	70da      	strb	r2, [r3, #3]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 8011c08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c0c:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8011c10:	881b      	ldrh	r3, [r3, #0]
 8011c12:	0a1b      	lsrs	r3, r3, #8
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 8011c18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c1c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011c20:	711a      	strb	r2, [r3, #4]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 8011c22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c26:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8011c2a:	881b      	ldrh	r3, [r3, #0]
 8011c2c:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 8011c2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c32:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011c36:	715a      	strb	r2, [r3, #5]
 8011c38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011c40:	2202      	movs	r2, #2
 8011c42:	71da      	strb	r2, [r3, #7]
                            (uint8_t)((num_connection >> 8) & 0xFF), (uint8_t)(num_connection & 0xFF), 0x01, 0xED };
 8011c44:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8011c48:	0a1b      	lsrs	r3, r3, #8
 8011c4a:	b29b      	uxth	r3, r3
 8011c4c:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 8011c4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c52:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011c56:	721a      	strb	r2, [r3, #8]
                            (uint8_t)((num_connection >> 8) & 0xFF), (uint8_t)(num_connection & 0xFF), 0x01, 0xED };
 8011c58:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8011c5c:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 8011c5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011c66:	725a      	strb	r2, [r3, #9]
 8011c68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011c70:	2201      	movs	r2, #1
 8011c72:	729a      	strb	r2, [r3, #10]
 8011c74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011c7c:	22ed      	movs	r2, #237	@ 0xed
 8011c7e:	72da      	strb	r2, [r3, #11]
    uint8_t End_bit[2] = {0xFF, 0x00};
 8011c80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c84:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011c88:	22ff      	movs	r2, #255	@ 0xff
 8011c8a:	801a      	strh	r2, [r3, #0]
    uint16_t x1,y1,x2,y2,x3,y3,x4,y4 = 0;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    uint8_t index = 0;
 8011c92:	2300      	movs	r3, #0
 8011c94:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    

    // Create the send Buffer 
    for (uint8_t i = 0; i < size; i++) {
 8011c98:	2300      	movs	r3, #0
 8011c9a:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 8011c9e:	e120      	b.n	8011ee2 <DWIN_Create_Basic_line+0x378>
        y1 = y2 = y3 = y4 = y_base;
 8011ca0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011ca4:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8011ca8:	881b      	ldrh	r3, [r3, #0]
 8011caa:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 8011cae:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8011cb2:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 8011cb6:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8011cba:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 8011cbe:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8011cc2:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        x1 = x_base + (25 * index);
 8011cc6:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	461a      	mov	r2, r3
 8011cce:	0092      	lsls	r2, r2, #2
 8011cd0:	4413      	add	r3, r2
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	0091      	lsls	r1, r2, #2
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	460b      	mov	r3, r1
 8011cda:	4413      	add	r3, r2
 8011cdc:	b29a      	uxth	r2, r3
 8011cde:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011ce2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011ce6:	881b      	ldrh	r3, [r3, #0]
 8011ce8:	4413      	add	r3, r2
 8011cea:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
        ++index; 
 8011cee:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        x2 = x_base + (25 * index);
 8011cf8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	461a      	mov	r2, r3
 8011d00:	0092      	lsls	r2, r2, #2
 8011d02:	4413      	add	r3, r2
 8011d04:	461a      	mov	r2, r3
 8011d06:	0091      	lsls	r1, r2, #2
 8011d08:	461a      	mov	r2, r3
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	4413      	add	r3, r2
 8011d0e:	b29a      	uxth	r2, r3
 8011d10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011d14:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011d18:	881b      	ldrh	r3, [r3, #0]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
        ++index;
 8011d20:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8011d24:	3301      	adds	r3, #1
 8011d26:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        x3 = x2;
 8011d2a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8011d2e:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
        x4 = x_base + (25 * index);
 8011d32:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	461a      	mov	r2, r3
 8011d3a:	0092      	lsls	r2, r2, #2
 8011d3c:	4413      	add	r3, r2
 8011d3e:	461a      	mov	r2, r3
 8011d40:	0091      	lsls	r1, r2, #2
 8011d42:	461a      	mov	r2, r3
 8011d44:	460b      	mov	r3, r1
 8011d46:	4413      	add	r3, r2
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011d4e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011d52:	881b      	ldrh	r3, [r3, #0]
 8011d54:	4413      	add	r3, r2
 8011d56:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
        if (array_data[i]) { // HIGH CLOCK
 8011d5a:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8011d5e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011d62:	4413      	add	r3, r2
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d013      	beq.n	8011d92 <DWIN_Create_Basic_line+0x228>
            y1 = y2 = y3 = y4 = y_base - 30;  
 8011d6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011d6e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8011d72:	881b      	ldrh	r3, [r3, #0]
 8011d74:	3b1e      	subs	r3, #30
 8011d76:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 8011d7a:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8011d7e:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 8011d82:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8011d86:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 8011d8a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8011d8e:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        }
        // Create clock buffer
        uint8_t Clock_Buffer[] = { (x1 >> 8) & 0xFF, (x1 & 0xFF), (y1 >> 8) & 0xFF, (y1 & 0xFF),
 8011d92:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8011d96:	0a1b      	lsrs	r3, r3, #8
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	b2da      	uxtb	r2, r3
 8011d9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011da0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011da4:	701a      	strb	r2, [r3, #0]
 8011da6:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8011daa:	b2da      	uxtb	r2, r3
 8011dac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011db0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011db4:	705a      	strb	r2, [r3, #1]
 8011db6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8011dba:	0a1b      	lsrs	r3, r3, #8
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	b2da      	uxtb	r2, r3
 8011dc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011dc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011dc8:	709a      	strb	r2, [r3, #2]
 8011dca:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8011dce:	b2da      	uxtb	r2, r3
 8011dd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011dd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011dd8:	70da      	strb	r2, [r3, #3]
 8011dda:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8011dde:	0a1b      	lsrs	r3, r3, #8
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	b2da      	uxtb	r2, r3
 8011de4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011de8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011dec:	711a      	strb	r2, [r3, #4]
 8011dee:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8011df2:	b2da      	uxtb	r2, r3
 8011df4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011df8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011dfc:	715a      	strb	r2, [r3, #5]
 8011dfe:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8011e02:	0a1b      	lsrs	r3, r3, #8
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	b2da      	uxtb	r2, r3
 8011e08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e10:	719a      	strb	r2, [r3, #6]
 8011e12:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8011e16:	b2da      	uxtb	r2, r3
 8011e18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e20:	71da      	strb	r2, [r3, #7]
 8011e22:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8011e26:	0a1b      	lsrs	r3, r3, #8
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	b2da      	uxtb	r2, r3
 8011e2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e34:	721a      	strb	r2, [r3, #8]
 8011e36:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8011e3a:	b2da      	uxtb	r2, r3
 8011e3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e44:	725a      	strb	r2, [r3, #9]
 8011e46:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8011e4a:	0a1b      	lsrs	r3, r3, #8
 8011e4c:	b29b      	uxth	r3, r3
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e58:	729a      	strb	r2, [r3, #10]
 8011e5a:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8011e5e:	b2da      	uxtb	r2, r3
 8011e60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e68:	72da      	strb	r2, [r3, #11]
 8011e6a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8011e6e:	0a1b      	lsrs	r3, r3, #8
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	b2da      	uxtb	r2, r3
 8011e74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e7c:	731a      	strb	r2, [r3, #12]
 8011e7e:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8011e82:	b2da      	uxtb	r2, r3
 8011e84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e8c:	735a      	strb	r2, [r3, #13]
 8011e8e:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8011e92:	0a1b      	lsrs	r3, r3, #8
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	b2da      	uxtb	r2, r3
 8011e98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ea0:	739a      	strb	r2, [r3, #14]
 8011ea2:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8011ea6:	b2da      	uxtb	r2, r3
 8011ea8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011eac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011eb0:	73da      	strb	r2, [r3, #15]
                        (x2 >> 8) & 0xFF, (x2 & 0xFF), (y2 >> 8) & 0xFF, (y2 & 0xFF), 
                        (x3 >> 8) & 0xFF, (x3 & 0xFF), (y3 >> 8) & 0xFF, (y3 & 0xFF), 
                        (x4 >> 8) & 0xFF, (x4 & 0xFF), (y4 >> 8) & 0xFF, (y4 & 0xFF), };

        // add to sendBuffer 
        memcpy(sendBuffer + (12 + 16 * i) ,Clock_Buffer,sizeof(Clock_Buffer));
 8011eb2:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8011eb6:	011b      	lsls	r3, r3, #4
 8011eb8:	330c      	adds	r3, #12
 8011eba:	461a      	mov	r2, r3
 8011ebc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011ec0:	441a      	add	r2, r3
 8011ec2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011ec6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011eca:	4614      	mov	r4, r2
 8011ecc:	461d      	mov	r5, r3
 8011ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ed0:	6020      	str	r0, [r4, #0]
 8011ed2:	6061      	str	r1, [r4, #4]
 8011ed4:	60a2      	str	r2, [r4, #8]
 8011ed6:	60e3      	str	r3, [r4, #12]
    for (uint8_t i = 0; i < size; i++) {
 8011ed8:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8011edc:	3301      	adds	r3, #1
 8011ede:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 8011ee2:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 8011ee6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8011eea:	429a      	cmp	r2, r3
 8011eec:	f4ff aed8 	bcc.w	8011ca0 <DWIN_Create_Basic_line+0x136>
    }
    // End bit 
    memcpy(sendBuffer + (data_length + 1),End_bit,2);
 8011ef0:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8011ef4:	3301      	adds	r3, #1
 8011ef6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011efa:	4413      	add	r3, r2
 8011efc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8011f00:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8011f04:	8812      	ldrh	r2, [r2, #0]
 8011f06:	801a      	strh	r2, [r3, #0]


    // Send data
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8011f08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011f0c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	6818      	ldr	r0, [r3, #0]
 8011f14:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011f18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011f1c:	22ff      	movs	r2, #255	@ 0xff
 8011f1e:	f7f5 fc22 	bl	8007766 <HAL_UART_Transmit>
}
 8011f22:	bf00      	nop
 8011f24:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bdb0      	pop	{r4, r5, r7, pc}

08011f2c <DWIN_SetWidth_Basic_line>:

void DWIN_SetWidth_Basic_line(Dwin_t *pDwin, uint16_t SP_Address, uint8_t width) {
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	460b      	mov	r3, r1
 8011f36:	807b      	strh	r3, [r7, #2]
 8011f38:	4613      	mov	r3, r2
 8011f3a:	707b      	strb	r3, [r7, #1]
    SP_Address = SP_Address | 7; // offset width line 
 8011f3c:	887b      	ldrh	r3, [r7, #2]
 8011f3e:	f043 0307 	orr.w	r3, r3, #7
 8011f42:	807b      	strh	r3, [r7, #2]
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 8011f44:	235a      	movs	r3, #90	@ 0x5a
 8011f46:	723b      	strb	r3, [r7, #8]
 8011f48:	23a5      	movs	r3, #165	@ 0xa5
 8011f4a:	727b      	strb	r3, [r7, #9]
 8011f4c:	2305      	movs	r3, #5
 8011f4e:	72bb      	strb	r3, [r7, #10]
 8011f50:	2382      	movs	r3, #130	@ 0x82
 8011f52:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((SP_Address >> 8) & 0xFF), (uint8_t)(SP_Address & 0xFF),
 8011f54:	887b      	ldrh	r3, [r7, #2]
 8011f56:	0a1b      	lsrs	r3, r3, #8
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 8011f5c:	733b      	strb	r3, [r7, #12]
    (uint8_t)((SP_Address >> 8) & 0xFF), (uint8_t)(SP_Address & 0xFF),
 8011f5e:	887b      	ldrh	r3, [r7, #2]
 8011f60:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 8011f62:	737b      	strb	r3, [r7, #13]
 8011f64:	2300      	movs	r3, #0
 8011f66:	73bb      	strb	r3, [r7, #14]
 8011f68:	787b      	ldrb	r3, [r7, #1]
 8011f6a:	73fb      	strb	r3, [r7, #15]
    (uint8_t)(0x00), (uint8_t)(width & 0xFF) };
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),500);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6818      	ldr	r0, [r3, #0]
 8011f70:	f107 0108 	add.w	r1, r7, #8
 8011f74:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011f78:	2208      	movs	r2, #8
 8011f7a:	f7f5 fbf4 	bl	8007766 <HAL_UART_Transmit>
}
 8011f7e:	bf00      	nop
 8011f80:	3710      	adds	r7, #16
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}

08011f86 <DWIN_Create_Single_line>:

void DWIN_Create_Single_line(Dwin_t *pDwin, uint16_t VP_address, uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint16_t color) {
 8011f86:	b590      	push	{r4, r7, lr}
 8011f88:	b0c5      	sub	sp, #276	@ 0x114
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 8011f90:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8011f94:	6020      	str	r0, [r4, #0]
 8011f96:	460c      	mov	r4, r1
 8011f98:	4610      	mov	r0, r2
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011fa0:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8011fa4:	4622      	mov	r2, r4
 8011fa6:	801a      	strh	r2, [r3, #0]
 8011fa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	801a      	strh	r2, [r3, #0]
 8011fb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011fb8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8011fbc:	460a      	mov	r2, r1
 8011fbe:	801a      	strh	r2, [r3, #0]
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 8011fc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011fc4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8011fc8:	4618      	mov	r0, r3
 8011fca:	23ff      	movs	r3, #255	@ 0xff
 8011fcc:	461a      	mov	r2, r3
 8011fce:	2100      	movs	r1, #0
 8011fd0:	f003 f960 	bl	8015294 <memset>
 8011fd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011fd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8011fdc:	225a      	movs	r2, #90	@ 0x5a
 8011fde:	701a      	strb	r2, [r3, #0]
 8011fe0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011fe4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8011fe8:	22a5      	movs	r2, #165	@ 0xa5
 8011fea:	705a      	strb	r2, [r3, #1]
 8011fec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011ff0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8011ff4:	2213      	movs	r2, #19
 8011ff6:	709a      	strb	r2, [r3, #2]
 8011ff8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011ffc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8012000:	2282      	movs	r2, #130	@ 0x82
 8012002:	70da      	strb	r2, [r3, #3]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 8012004:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012008:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 801200c:	881b      	ldrh	r3, [r3, #0]
 801200e:	0a1b      	lsrs	r3, r3, #8
 8012010:	b29b      	uxth	r3, r3
 8012012:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 8012014:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012018:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801201c:	711a      	strb	r2, [r3, #4]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 801201e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012022:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8012026:	881b      	ldrh	r3, [r3, #0]
 8012028:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 801202a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801202e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8012032:	715a      	strb	r2, [r3, #5]
 8012034:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012038:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801203c:	2202      	movs	r2, #2
 801203e:	71da      	strb	r2, [r3, #7]
 8012040:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012044:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8012048:	2201      	movs	r2, #1
 801204a:	725a      	strb	r2, [r3, #9]
                            (uint8_t)((0x0001 >> 8) & 0xFF), (uint8_t)(0x0001 & 0xFF),
                            (uint8_t)((color >> 8) & 0xFF), (uint8_t)(color & 0xFF),
 801204c:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8012050:	0a1b      	lsrs	r3, r3, #8
 8012052:	b29b      	uxth	r3, r3
 8012054:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 8012056:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801205a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801205e:	729a      	strb	r2, [r3, #10]
                            (uint8_t)((color >> 8) & 0xFF), (uint8_t)(color & 0xFF),
 8012060:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8012064:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 8012066:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801206a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801206e:	72da      	strb	r2, [r3, #11]
 8012070:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012078:	881b      	ldrh	r3, [r3, #0]
 801207a:	0a1b      	lsrs	r3, r3, #8
 801207c:	b29b      	uxth	r3, r3
 801207e:	b2da      	uxtb	r2, r3
 8012080:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012084:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8012088:	731a      	strb	r2, [r3, #12]
 801208a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801208e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012092:	881b      	ldrh	r3, [r3, #0]
 8012094:	b2da      	uxtb	r2, r3
 8012096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801209a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801209e:	735a      	strb	r2, [r3, #13]
 80120a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80120a4:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80120a8:	881b      	ldrh	r3, [r3, #0]
 80120aa:	0a1b      	lsrs	r3, r3, #8
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80120b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80120b8:	739a      	strb	r2, [r3, #14]
 80120ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80120be:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80120c2:	881b      	ldrh	r3, [r3, #0]
 80120c4:	b2da      	uxtb	r2, r3
 80120c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80120ca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80120ce:	73da      	strb	r2, [r3, #15]
 80120d0:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 80120d4:	0a1b      	lsrs	r3, r3, #8
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	b2da      	uxtb	r2, r3
 80120da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80120de:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80120e2:	741a      	strb	r2, [r3, #16]
 80120e4:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 80120e8:	b2da      	uxtb	r2, r3
 80120ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80120ee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80120f2:	745a      	strb	r2, [r3, #17]
 80120f4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80120f8:	0a1b      	lsrs	r3, r3, #8
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	b2da      	uxtb	r2, r3
 80120fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012102:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8012106:	749a      	strb	r2, [r3, #18]
 8012108:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 801210c:	b2da      	uxtb	r2, r3
 801210e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012112:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8012116:	74da      	strb	r2, [r3, #19]
 8012118:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801211c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8012120:	22ff      	movs	r2, #255	@ 0xff
 8012122:	751a      	strb	r2, [r3, #20]
                            (x_1 >> 8) & 0xFF, (x_1 & 0xFF), (y_1 >> 8) & 0xFF, (y_1 & 0xFF),
                            (x_2 >> 8) & 0xFF, (x_2 & 0xFF), (y_2 >> 8) & 0xFF, (y_2 & 0xFF), 0xFF, 0x00 };
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8012124:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	6818      	ldr	r0, [r3, #0]
 8012130:	f107 0110 	add.w	r1, r7, #16
 8012134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012138:	22ff      	movs	r2, #255	@ 0xff
 801213a:	f7f5 fb14 	bl	8007766 <HAL_UART_Transmit>
}
 801213e:	bf00      	nop
 8012140:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8012144:	46bd      	mov	sp, r7
 8012146:	bd90      	pop	{r4, r7, pc}

08012148 <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	683a      	ldr	r2, [r7, #0]
 8012156:	609a      	str	r2, [r3, #8]
}
 8012158:	bf00      	nop
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	bc80      	pop	{r7}
 8012160:	4770      	bx	lr

08012162 <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 8012162:	b580      	push	{r7, lr}
 8012164:	b084      	sub	sp, #16
 8012166:	af00      	add	r7, sp, #0
 8012168:	6078      	str	r0, [r7, #4]
 801216a:	6039      	str	r1, [r7, #0]
    uint16_t VPaddress;
    uint16_t lowByte;
    uint16_t highByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	2b5a      	cmp	r3, #90	@ 0x5a
 8012172:	d133      	bne.n	80121dc <DWIN_Listen+0x7a>
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	3301      	adds	r3, #1
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	2ba5      	cmp	r3, #165	@ 0xa5
 801217c:	d12e      	bne.n	80121dc <DWIN_Listen+0x7a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	3303      	adds	r3, #3
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	2b83      	cmp	r3, #131	@ 0x83
 8012186:	d129      	bne.n	80121dc <DWIN_Listen+0x7a>
        {
            datalength = RX_Buffer[2];
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	789b      	ldrb	r3, [r3, #2]
 801218c:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 801218e:	7bfb      	ldrb	r3, [r7, #15]
 8012190:	3302      	adds	r3, #2
 8012192:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	3304      	adds	r3, #4
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	b21b      	sxth	r3, r3
 801219c:	021b      	lsls	r3, r3, #8
 801219e:	b21a      	sxth	r2, r3
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	3305      	adds	r3, #5
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	b21b      	sxth	r3, r3
 80121a8:	4313      	orrs	r3, r2
 80121aa:	b21b      	sxth	r3, r3
 80121ac:	81bb      	strh	r3, [r7, #12]
            /* get return key value */
            lowByte = RX_Buffer[datalength];  
 80121ae:	7bfb      	ldrb	r3, [r7, #15]
 80121b0:	683a      	ldr	r2, [r7, #0]
 80121b2:	4413      	add	r3, r2
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	817b      	strh	r3, [r7, #10]
            highByte = RX_Buffer[datalength-1];
 80121b8:	7bfb      	ldrb	r3, [r7, #15]
 80121ba:	3b01      	subs	r3, #1
 80121bc:	683a      	ldr	r2, [r7, #0]
 80121be:	4413      	add	r3, r2
 80121c0:	781b      	ldrb	r3, [r3, #0]
 80121c2:	813b      	strh	r3, [r7, #8]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	689b      	ldr	r3, [r3, #8]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d007      	beq.n	80121dc <DWIN_Listen+0x7a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lowByte,highByte);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	689b      	ldr	r3, [r3, #8]
 80121d0:	897a      	ldrh	r2, [r7, #10]
 80121d2:	b2d1      	uxtb	r1, r2
 80121d4:	893a      	ldrh	r2, [r7, #8]
 80121d6:	b2d2      	uxtb	r2, r2
 80121d8:	89b8      	ldrh	r0, [r7, #12]
 80121da:	4798      	blx	r3
            }
        }
    }

    
}
 80121dc:	bf00      	nop
 80121de:	3710      	adds	r7, #16
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <isotp_ms_to_st_min>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 80121e4:	b480      	push	{r7}
 80121e6:	b085      	sub	sp, #20
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	4603      	mov	r3, r0
 80121ec:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 80121ee:	79fb      	ldrb	r3, [r7, #7]
 80121f0:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 80121f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	da01      	bge.n	80121fe <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 80121fa:	237f      	movs	r3, #127	@ 0x7f
 80121fc:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 80121fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012200:	4618      	mov	r0, r3
 8012202:	3714      	adds	r7, #20
 8012204:	46bd      	mov	sp, r7
 8012206:	bc80      	pop	{r7}
 8012208:	4770      	bx	lr

0801220a <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 801220a:	b480      	push	{r7}
 801220c:	b085      	sub	sp, #20
 801220e:	af00      	add	r7, sp, #0
 8012210:	4603      	mov	r3, r0
 8012212:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9) {
 8012214:	79fb      	ldrb	r3, [r7, #7]
 8012216:	2bf0      	cmp	r3, #240	@ 0xf0
 8012218:	d905      	bls.n	8012226 <isotp_st_min_to_ms+0x1c>
 801221a:	79fb      	ldrb	r3, [r7, #7]
 801221c:	2bf9      	cmp	r3, #249	@ 0xf9
 801221e:	d802      	bhi.n	8012226 <isotp_st_min_to_ms+0x1c>
        ms = 1;
 8012220:	2301      	movs	r3, #1
 8012222:	73fb      	strb	r3, [r7, #15]
 8012224:	e008      	b.n	8012238 <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 8012226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801222a:	2b00      	cmp	r3, #0
 801222c:	db02      	blt.n	8012234 <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 801222e:	79fb      	ldrb	r3, [r7, #7]
 8012230:	73fb      	strb	r3, [r7, #15]
 8012232:	e001      	b.n	8012238 <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 8012234:	2300      	movs	r3, #0
 8012236:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 8012238:	7bfb      	ldrb	r3, [r7, #15]
}
 801223a:	4618      	mov	r0, r3
 801223c:	3714      	adds	r7, #20
 801223e:	46bd      	mov	sp, r7
 8012240:	bc80      	pop	{r7}
 8012242:	4770      	bx	lr

08012244 <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 8012244:	b580      	push	{r7, lr}
 8012246:	b086      	sub	sp, #24
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	4608      	mov	r0, r1
 801224e:	4611      	mov	r1, r2
 8012250:	461a      	mov	r2, r3
 8012252:	4603      	mov	r3, r0
 8012254:	70fb      	strb	r3, [r7, #3]
 8012256:	460b      	mov	r3, r1
 8012258:	70bb      	strb	r3, [r7, #2]
 801225a:	4613      	mov	r3, r2
 801225c:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 801225e:	7b3b      	ldrb	r3, [r7, #12]
 8012260:	2203      	movs	r2, #3
 8012262:	f362 1307 	bfi	r3, r2, #4, #4
 8012266:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 8012268:	78fb      	ldrb	r3, [r7, #3]
 801226a:	f003 030f 	and.w	r3, r3, #15
 801226e:	b2da      	uxtb	r2, r3
 8012270:	7b3b      	ldrb	r3, [r7, #12]
 8012272:	f362 0303 	bfi	r3, r2, #0, #4
 8012276:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 8012278:	78bb      	ldrb	r3, [r7, #2]
 801227a:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 801227c:	787b      	ldrb	r3, [r7, #1]
 801227e:	4618      	mov	r0, r3
 8012280:	f7ff ffb0 	bl	80121e4 <isotp_ms_to_st_min>
 8012284:	4603      	mov	r3, r0
 8012286:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
 8012288:	f107 030c 	add.w	r3, r7, #12
 801228c:	3303      	adds	r3, #3
 801228e:	2205      	movs	r2, #5
 8012290:	2100      	movs	r1, #0
 8012292:	4618      	mov	r0, r3
 8012294:	f002 fffe 	bl	8015294 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f107 010c 	add.w	r1, r7, #12
 80122a0:	2208      	movs	r2, #8
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7ef fda8 	bl	8001df8 <isotp_user_send_can>
 80122a8:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 80122aa:	697b      	ldr	r3, [r7, #20]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3718      	adds	r7, #24
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	895b      	ldrh	r3, [r3, #10]
 80122c2:	2b07      	cmp	r3, #7
 80122c4:	d905      	bls.n	80122d2 <isotp_send_single_frame+0x1e>
 80122c6:	4b1d      	ldr	r3, [pc, #116]	@ (801233c <isotp_send_single_frame+0x88>)
 80122c8:	4a1d      	ldr	r2, [pc, #116]	@ (8012340 <isotp_send_single_frame+0x8c>)
 80122ca:	2142      	movs	r1, #66	@ 0x42
 80122cc:	481d      	ldr	r0, [pc, #116]	@ (8012344 <isotp_send_single_frame+0x90>)
 80122ce:	f000 ff53 	bl	8013178 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 80122d2:	7b3b      	ldrb	r3, [r7, #12]
 80122d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80122d8:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	895b      	ldrh	r3, [r3, #10]
 80122de:	f003 030f 	and.w	r3, r3, #15
 80122e2:	b2da      	uxtb	r2, r3
 80122e4:	7b3b      	ldrb	r3, [r7, #12]
 80122e6:	f362 0303 	bfi	r3, r2, #0, #4
 80122ea:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6859      	ldr	r1, [r3, #4]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	895b      	ldrh	r3, [r3, #10]
 80122f4:	461a      	mov	r2, r3
 80122f6:	f107 030c 	add.w	r3, r7, #12
 80122fa:	3301      	adds	r3, #1
 80122fc:	4618      	mov	r0, r3
 80122fe:	f003 f912 	bl	8015526 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	895b      	ldrh	r3, [r3, #10]
 8012306:	461a      	mov	r2, r3
 8012308:	f107 030c 	add.w	r3, r7, #12
 801230c:	3301      	adds	r3, #1
 801230e:	1898      	adds	r0, r3, r2
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	895b      	ldrh	r3, [r3, #10]
 8012314:	f1c3 0307 	rsb	r3, r3, #7
 8012318:	461a      	mov	r2, r3
 801231a:	2100      	movs	r1, #0
 801231c:	f002 ffba 	bl	8015294 <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8012320:	f107 030c 	add.w	r3, r7, #12
 8012324:	2208      	movs	r2, #8
 8012326:	4619      	mov	r1, r3
 8012328:	6838      	ldr	r0, [r7, #0]
 801232a:	f7ef fd65 	bl	8001df8 <isotp_user_send_can>
 801232e:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 8012330:	697b      	ldr	r3, [r7, #20]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3718      	adds	r7, #24
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
 801233a:	bf00      	nop
 801233c:	08018a00 	.word	0x08018a00
 8012340:	080192fc 	.word	0x080192fc
 8012344:	08018a18 	.word	0x08018a18

08012348 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 8012348:	b580      	push	{r7, lr}
 801234a:	b086      	sub	sp, #24
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	895b      	ldrh	r3, [r3, #10]
 8012356:	2b07      	cmp	r3, #7
 8012358:	d805      	bhi.n	8012366 <isotp_send_first_frame+0x1e>
 801235a:	4b1d      	ldr	r3, [pc, #116]	@ (80123d0 <isotp_send_first_frame+0x88>)
 801235c:	4a1d      	ldr	r2, [pc, #116]	@ (80123d4 <isotp_send_first_frame+0x8c>)
 801235e:	215c      	movs	r1, #92	@ 0x5c
 8012360:	481d      	ldr	r0, [pc, #116]	@ (80123d8 <isotp_send_first_frame+0x90>)
 8012362:	f000 ff09 	bl	8013178 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 8012366:	7b3b      	ldrb	r3, [r7, #12]
 8012368:	2201      	movs	r2, #1
 801236a:	f362 1307 	bfi	r3, r2, #4, #4
 801236e:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	895b      	ldrh	r3, [r3, #10]
 8012374:	b2db      	uxtb	r3, r3
 8012376:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	895b      	ldrh	r3, [r3, #10]
 801237c:	0a1b      	lsrs	r3, r3, #8
 801237e:	b29b      	uxth	r3, r3
 8012380:	f003 030f 	and.w	r3, r3, #15
 8012384:	b2da      	uxtb	r2, r3
 8012386:	7b3b      	ldrb	r3, [r7, #12]
 8012388:	f362 0303 	bfi	r3, r2, #0, #4
 801238c:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	685a      	ldr	r2, [r3, #4]
 8012392:	f107 030e 	add.w	r3, r7, #14
 8012396:	6811      	ldr	r1, [r2, #0]
 8012398:	6019      	str	r1, [r3, #0]
 801239a:	8892      	ldrh	r2, [r2, #4]
 801239c:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 801239e:	f107 030c 	add.w	r3, r7, #12
 80123a2:	2208      	movs	r2, #8
 80123a4:	4619      	mov	r1, r3
 80123a6:	6838      	ldr	r0, [r7, #0]
 80123a8:	f7ef fd26 	bl	8001df8 <isotp_user_send_can>
 80123ac:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d108      	bne.n	80123c6 <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	899b      	ldrh	r3, [r3, #12]
 80123b8:	3306      	adds	r3, #6
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2201      	movs	r2, #1
 80123c4:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 80123c6:	697b      	ldr	r3, [r7, #20]
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3718      	adds	r7, #24
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	08018a30 	.word	0x08018a30
 80123d4:	08019314 	.word	0x08019314
 80123d8:	08018a18 	.word	0x08018a18

080123dc <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	895b      	ldrh	r3, [r3, #10]
 80123e8:	2b07      	cmp	r3, #7
 80123ea:	d805      	bhi.n	80123f8 <isotp_send_consecutive_frame+0x1c>
 80123ec:	4b2d      	ldr	r3, [pc, #180]	@ (80124a4 <isotp_send_consecutive_frame+0xc8>)
 80123ee:	4a2e      	ldr	r2, [pc, #184]	@ (80124a8 <isotp_send_consecutive_frame+0xcc>)
 80123f0:	2175      	movs	r1, #117	@ 0x75
 80123f2:	482e      	ldr	r0, [pc, #184]	@ (80124ac <isotp_send_consecutive_frame+0xd0>)
 80123f4:	f000 fec0 	bl	8013178 <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 80123f8:	7a3b      	ldrb	r3, [r7, #8]
 80123fa:	2202      	movs	r2, #2
 80123fc:	f362 1307 	bfi	r3, r2, #4, #4
 8012400:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	7b9b      	ldrb	r3, [r3, #14]
 8012406:	f003 030f 	and.w	r3, r3, #15
 801240a:	b2da      	uxtb	r2, r3
 801240c:	7a3b      	ldrb	r3, [r7, #8]
 801240e:	f362 0303 	bfi	r3, r2, #0, #4
 8012412:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	895a      	ldrh	r2, [r3, #10]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	899b      	ldrh	r3, [r3, #12]
 801241c:	1ad3      	subs	r3, r2, r3
 801241e:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 8012420:	8afb      	ldrh	r3, [r7, #22]
 8012422:	2b07      	cmp	r3, #7
 8012424:	d901      	bls.n	801242a <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 8012426:	2307      	movs	r3, #7
 8012428:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	8992      	ldrh	r2, [r2, #12]
 8012432:	1899      	adds	r1, r3, r2
 8012434:	8afa      	ldrh	r2, [r7, #22]
 8012436:	f107 0308 	add.w	r3, r7, #8
 801243a:	3301      	adds	r3, #1
 801243c:	4618      	mov	r0, r3
 801243e:	f003 f872 	bl	8015526 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0, sizeof(message.as.consecutive_frame.data) - data_length);
 8012442:	8afb      	ldrh	r3, [r7, #22]
 8012444:	f107 0208 	add.w	r2, r7, #8
 8012448:	3201      	adds	r2, #1
 801244a:	18d0      	adds	r0, r2, r3
 801244c:	8afb      	ldrh	r3, [r7, #22]
 801244e:	f1c3 0307 	rsb	r3, r3, #7
 8012452:	461a      	mov	r2, r3
 8012454:	2100      	movs	r1, #0
 8012456:	f002 ff1d 	bl	8015294 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	f107 0108 	add.w	r1, r7, #8
 8012462:	2208      	movs	r2, #8
 8012464:	4618      	mov	r0, r3
 8012466:	f7ef fcc7 	bl	8001df8 <isotp_user_send_can>
 801246a:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d113      	bne.n	801249a <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	899a      	ldrh	r2, [r3, #12]
 8012476:	8afb      	ldrh	r3, [r7, #22]
 8012478:	4413      	add	r3, r2
 801247a:	b29a      	uxth	r2, r3
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	7b9b      	ldrb	r3, [r3, #14]
 8012484:	3301      	adds	r3, #1
 8012486:	b2da      	uxtb	r2, r3
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	739a      	strb	r2, [r3, #14]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	7b9b      	ldrb	r3, [r3, #14]
 8012490:	2b0f      	cmp	r3, #15
 8012492:	d902      	bls.n	801249a <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2200      	movs	r2, #0
 8012498:	739a      	strb	r2, [r3, #14]
        }
    }
    
    return ret;
 801249a:	693b      	ldr	r3, [r7, #16]
}
 801249c:	4618      	mov	r0, r3
 801249e:	3718      	adds	r7, #24
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	08018a30 	.word	0x08018a30
 80124a8:	0801932c 	.word	0x0801932c
 80124ac:	08018a18 	.word	0x08018a18

080124b0 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	4613      	mov	r3, r2
 80124bc:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	781b      	ldrb	r3, [r3, #0]
 80124c2:	f003 030f 	and.w	r3, r3, #15
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d008      	beq.n	80124de <isotp_receive_single_frame+0x2e>
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	461a      	mov	r2, r3
 80124d8:	79fb      	ldrb	r3, [r7, #7]
 80124da:	4293      	cmp	r3, r2
 80124dc:	d805      	bhi.n	80124ea <isotp_receive_single_frame+0x3a>
        isotp_user_debug("Single-frame length too small.");
 80124de:	480f      	ldr	r0, [pc, #60]	@ (801251c <isotp_receive_single_frame+0x6c>)
 80124e0:	f7ef fcbb 	bl	8001e5a <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 80124e4:	f06f 0306 	mvn.w	r3, #6
 80124e8:	e014      	b.n	8012514 <isotp_receive_single_frame+0x64>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	1c59      	adds	r1, r3, #1
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80124fa:	b2db      	uxtb	r3, r3
 80124fc:	461a      	mov	r2, r3
 80124fe:	f003 f812 	bl	8015526 <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801250a:	b2db      	uxtb	r3, r3
 801250c:	461a      	mov	r2, r3
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	85da      	strh	r2, [r3, #46]	@ 0x2e
    
    return ISOTP_RET_OK;
 8012512:	2300      	movs	r3, #0
}
 8012514:	4618      	mov	r0, r3
 8012516:	3710      	adds	r7, #16
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	08018a44 	.word	0x08018a44

08012520 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8012520:	b580      	push	{r7, lr}
 8012522:	b086      	sub	sp, #24
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	4613      	mov	r3, r2
 801252c:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 801252e:	79fb      	ldrb	r3, [r7, #7]
 8012530:	2b08      	cmp	r3, #8
 8012532:	d005      	beq.n	8012540 <isotp_receive_first_frame+0x20>
        isotp_user_debug("First frame should be 8 bytes in length.");
 8012534:	481e      	ldr	r0, [pc, #120]	@ (80125b0 <isotp_receive_first_frame+0x90>)
 8012536:	f7ef fc90 	bl	8001e5a <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 801253a:	f06f 0306 	mvn.w	r3, #6
 801253e:	e033      	b.n	80125a8 <isotp_receive_first_frame+0x88>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012548:	b2db      	uxtb	r3, r3
 801254a:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 801254c:	8afb      	ldrh	r3, [r7, #22]
 801254e:	021b      	lsls	r3, r3, #8
 8012550:	b29b      	uxth	r3, r3
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	7852      	ldrb	r2, [r2, #1]
 8012556:	4413      	add	r3, r2
 8012558:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 801255a:	8afb      	ldrh	r3, [r7, #22]
 801255c:	2b07      	cmp	r3, #7
 801255e:	d805      	bhi.n	801256c <isotp_receive_first_frame+0x4c>
        isotp_user_debug("Should not use multiple frame transmission.");
 8012560:	4814      	ldr	r0, [pc, #80]	@ (80125b4 <isotp_receive_first_frame+0x94>)
 8012562:	f7ef fc7a 	bl	8001e5a <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8012566:	f06f 0306 	mvn.w	r3, #6
 801256a:	e01d      	b.n	80125a8 <isotp_receive_first_frame+0x88>
    }
    
    if (payload_length > link->receive_buf_size) {
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012570:	8afa      	ldrh	r2, [r7, #22]
 8012572:	429a      	cmp	r2, r3
 8012574:	d905      	bls.n	8012582 <isotp_receive_first_frame+0x62>
        isotp_user_debug("Multi-frame response too large for receiving buffer.");
 8012576:	4810      	ldr	r0, [pc, #64]	@ (80125b8 <isotp_receive_first_frame+0x98>)
 8012578:	f7ef fc6f 	bl	8001e5a <isotp_user_debug>
        return ISOTP_RET_OVERFLOW;
 801257c:	f06f 0302 	mvn.w	r3, #2
 8012580:	e012      	b.n	80125a8 <isotp_receive_first_frame+0x88>
    }
    
    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	3302      	adds	r3, #2
 801258a:	2206      	movs	r2, #6
 801258c:	4619      	mov	r1, r3
 801258e:	f002 ffca 	bl	8015526 <memcpy>
    link->receive_size = payload_length;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	8afa      	ldrh	r2, [r7, #22]
 8012596:	85da      	strh	r2, [r3, #46]	@ 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	2206      	movs	r2, #6
 801259c:	861a      	strh	r2, [r3, #48]	@ 0x30
    link->receive_sn = 1;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	2201      	movs	r2, #1
 80125a2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    return ISOTP_RET_OK;
 80125a6:	2300      	movs	r3, #0
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3718      	adds	r7, #24
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	08018a64 	.word	0x08018a64
 80125b4:	08018a90 	.word	0x08018a90
 80125b8:	08018abc 	.word	0x08018abc

080125bc <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80125bc:	b580      	push	{r7, lr}
 80125be:	b086      	sub	sp, #24
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	60f8      	str	r0, [r7, #12]
 80125c4:	60b9      	str	r1, [r7, #8]
 80125c6:	4613      	mov	r3, r2
 80125c8:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80125d0:	68ba      	ldr	r2, [r7, #8]
 80125d2:	7812      	ldrb	r2, [r2, #0]
 80125d4:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80125d8:	b2d2      	uxtb	r2, r2
 80125da:	4293      	cmp	r3, r2
 80125dc:	d002      	beq.n	80125e4 <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 80125de:	f06f 0303 	mvn.w	r3, #3
 80125e2:	e038      	b.n	8012656 <isotp_receive_consecutive_frame+0x9a>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80125ec:	1ad3      	subs	r3, r2, r3
 80125ee:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 80125f0:	8afb      	ldrh	r3, [r7, #22]
 80125f2:	2b07      	cmp	r3, #7
 80125f4:	d901      	bls.n	80125fa <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 80125f6:	2307      	movs	r3, #7
 80125f8:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 80125fa:	79fa      	ldrb	r2, [r7, #7]
 80125fc:	8afb      	ldrh	r3, [r7, #22]
 80125fe:	429a      	cmp	r2, r3
 8012600:	dc05      	bgt.n	801260e <isotp_receive_consecutive_frame+0x52>
        isotp_user_debug("Consecutive frame too short.");
 8012602:	4817      	ldr	r0, [pc, #92]	@ (8012660 <isotp_receive_consecutive_frame+0xa4>)
 8012604:	f7ef fc29 	bl	8001e5a <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8012608:	f06f 0306 	mvn.w	r3, #6
 801260c:	e023      	b.n	8012656 <isotp_receive_consecutive_frame+0x9a>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012612:	68fa      	ldr	r2, [r7, #12]
 8012614:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 8012616:	1898      	adds	r0, r3, r2
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	3301      	adds	r3, #1
 801261c:	8afa      	ldrh	r2, [r7, #22]
 801261e:	4619      	mov	r1, r3
 8012620:	f002 ff81 	bl	8015526 <memcpy>

    link->receive_offset += remaining_bytes;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8012628:	8afb      	ldrh	r3, [r7, #22]
 801262a:	4413      	add	r3, r2
 801262c:	b29a      	uxth	r2, r3
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (++(link->receive_sn) > 0x0F) {
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012638:	3301      	adds	r3, #1
 801263a:	b2da      	uxtb	r2, r3
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012648:	2b0f      	cmp	r3, #15
 801264a:	d903      	bls.n	8012654 <isotp_receive_consecutive_frame+0x98>
        link->receive_sn = 0;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2200      	movs	r2, #0
 8012650:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }

    return ISOTP_RET_OK;
 8012654:	2300      	movs	r3, #0
}
 8012656:	4618      	mov	r0, r3
 8012658:	3718      	adds	r7, #24
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	08018af4 	.word	0x08018af4

08012664 <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	60f8      	str	r0, [r7, #12]
 801266c:	60b9      	str	r1, [r7, #8]
 801266e:	4613      	mov	r3, r2
 8012670:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 8012672:	79fb      	ldrb	r3, [r7, #7]
 8012674:	2b02      	cmp	r3, #2
 8012676:	d805      	bhi.n	8012684 <isotp_receive_flow_control_frame+0x20>
        isotp_user_debug("Flow control frame too short.");
 8012678:	4805      	ldr	r0, [pc, #20]	@ (8012690 <isotp_receive_flow_control_frame+0x2c>)
 801267a:	f7ef fbee 	bl	8001e5a <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 801267e:	f06f 0306 	mvn.w	r3, #6
 8012682:	e000      	b.n	8012686 <isotp_receive_flow_control_frame+0x22>
    }

    return ISOTP_RET_OK;
 8012684:	2300      	movs	r3, #0
}
 8012686:	4618      	mov	r0, r3
 8012688:	3710      	adds	r7, #16
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	08018b14 	.word	0x08018b14

08012694 <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	60b9      	str	r1, [r7, #8]
 801269e:	4613      	mov	r3, r2
 80126a0:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	6819      	ldr	r1, [r3, #0]
 80126a6:	88fb      	ldrh	r3, [r7, #6]
 80126a8:	68ba      	ldr	r2, [r7, #8]
 80126aa:	68f8      	ldr	r0, [r7, #12]
 80126ac:	f000 f806 	bl	80126bc <isotp_send_with_id>
 80126b0:	4603      	mov	r3, r0
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3710      	adds	r7, #16
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
	...

080126bc <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 80126bc:	b580      	push	{r7, lr}
 80126be:	b0a6      	sub	sp, #152	@ 0x98
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	607a      	str	r2, [r7, #4]
 80126c8:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d105      	bne.n	80126dc <isotp_send_with_id+0x20>
        isotp_user_debug("Link is null!");
 80126d0:	4833      	ldr	r0, [pc, #204]	@ (80127a0 <isotp_send_with_id+0xe4>)
 80126d2:	f7ef fbc2 	bl	8001e5a <isotp_user_debug>
        return ISOTP_RET_ERROR;
 80126d6:	f04f 33ff 	mov.w	r3, #4294967295
 80126da:	e05d      	b.n	8012798 <isotp_send_with_id+0xdc>
    }

    if (size > link->send_buf_size) {
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	891b      	ldrh	r3, [r3, #8]
 80126e0:	887a      	ldrh	r2, [r7, #2]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d90d      	bls.n	8012702 <isotp_send_with_id+0x46>
        isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
 80126e6:	482f      	ldr	r0, [pc, #188]	@ (80127a4 <isotp_send_with_id+0xe8>)
 80126e8:	f7ef fbb7 	bl	8001e5a <isotp_user_debug>
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 80126ec:	887a      	ldrh	r2, [r7, #2]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	891b      	ldrh	r3, [r3, #8]
 80126f2:	f107 0014 	add.w	r0, r7, #20
 80126f6:	492c      	ldr	r1, [pc, #176]	@ (80127a8 <isotp_send_with_id+0xec>)
 80126f8:	f002 fc94 	bl	8015024 <siprintf>
        return ISOTP_RET_OVERFLOW;
 80126fc:	f06f 0302 	mvn.w	r3, #2
 8012700:	e04a      	b.n	8012798 <isotp_send_with_id+0xdc>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012708:	2b01      	cmp	r3, #1
 801270a:	d105      	bne.n	8012718 <isotp_send_with_id+0x5c>
        isotp_user_debug("Abort previous message, transmission in progress.\n");
 801270c:	4827      	ldr	r0, [pc, #156]	@ (80127ac <isotp_send_with_id+0xf0>)
 801270e:	f7ef fba4 	bl	8001e5a <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
 8012712:	f06f 0301 	mvn.w	r3, #1
 8012716:	e03f      	b.n	8012798 <isotp_send_with_id+0xdc>
    }

    /* copy into local buffer */
    link->send_size = size;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	887a      	ldrh	r2, [r7, #2]
 801271c:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	2200      	movs	r2, #0
 8012722:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	685b      	ldr	r3, [r3, #4]
 8012728:	887a      	ldrh	r2, [r7, #2]
 801272a:	6879      	ldr	r1, [r7, #4]
 801272c:	4618      	mov	r0, r3
 801272e:	f002 fefa 	bl	8015526 <memcpy>

    if (link->send_size < 8) {
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	895b      	ldrh	r3, [r3, #10]
 8012736:	2b07      	cmp	r3, #7
 8012738:	d806      	bhi.n	8012748 <isotp_send_with_id+0x8c>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 801273a:	68b9      	ldr	r1, [r7, #8]
 801273c:	68f8      	ldr	r0, [r7, #12]
 801273e:	f7ff fdb9 	bl	80122b4 <isotp_send_single_frame>
 8012742:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8012746:	e025      	b.n	8012794 <isotp_send_with_id+0xd8>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 8012748:	68b9      	ldr	r1, [r7, #8]
 801274a:	68f8      	ldr	r0, [r7, #12]
 801274c:	f7ff fdfc 	bl	8012348 <isotp_send_first_frame>
 8012750:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 8012754:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012758:	2b00      	cmp	r3, #0
 801275a:	d11b      	bne.n	8012794 <isotp_send_with_id+0xd8>
            link->send_bs_remain = 0;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2200      	movs	r2, #0
 8012760:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2200      	movs	r2, #0
 8012766:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	2200      	movs	r2, #0
 801276c:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 801276e:	f7ef fb6d 	bl	8001e4c <isotp_user_get_ms>
 8012772:	4602      	mov	r2, r0
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8012778:	f7ef fb68 	bl	8001e4c <isotp_user_get_ms>
 801277c:	4603      	mov	r3, r0
 801277e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	2200      	movs	r2, #0
 801278a:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	2201      	movs	r2, #1
 8012790:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 8012794:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 8012798:	4618      	mov	r0, r3
 801279a:	3798      	adds	r7, #152	@ 0x98
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	08018b34 	.word	0x08018b34
 80127a4:	08018b44 	.word	0x08018b44
 80127a8:	08018b98 	.word	0x08018b98
 80127ac:	08018bc8 	.word	0x08018bc8

080127b0 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b088      	sub	sp, #32
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	60f8      	str	r0, [r7, #12]
 80127b8:	60b9      	str	r1, [r7, #8]
 80127ba:	4613      	mov	r3, r2
 80127bc:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8) {
 80127be:	79fb      	ldrb	r3, [r7, #7]
 80127c0:	2b01      	cmp	r3, #1
 80127c2:	f240 8143 	bls.w	8012a4c <isotp_on_can_message+0x29c>
 80127c6:	79fb      	ldrb	r3, [r7, #7]
 80127c8:	2b08      	cmp	r3, #8
 80127ca:	f200 813f 	bhi.w	8012a4c <isotp_on_can_message+0x29c>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 80127ce:	79fa      	ldrb	r2, [r7, #7]
 80127d0:	f107 0314 	add.w	r3, r7, #20
 80127d4:	68b9      	ldr	r1, [r7, #8]
 80127d6:	4618      	mov	r0, r3
 80127d8:	f002 fea5 	bl	8015526 <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 80127dc:	79fb      	ldrb	r3, [r7, #7]
 80127de:	f107 0214 	add.w	r2, r7, #20
 80127e2:	18d0      	adds	r0, r2, r3
 80127e4:	79fb      	ldrb	r3, [r7, #7]
 80127e6:	f1c3 0308 	rsb	r3, r3, #8
 80127ea:	461a      	mov	r2, r3
 80127ec:	2100      	movs	r1, #0
 80127ee:	f002 fd51 	bl	8015294 <memset>

    switch (message.as.common.type) {
 80127f2:	7d3b      	ldrb	r3, [r7, #20]
 80127f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	2b03      	cmp	r3, #3
 80127fc:	f200 811a 	bhi.w	8012a34 <isotp_on_can_message+0x284>
 8012800:	a201      	add	r2, pc, #4	@ (adr r2, 8012808 <isotp_on_can_message+0x58>)
 8012802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012806:	bf00      	nop
 8012808:	08012819 	.word	0x08012819
 801280c:	08012855 	.word	0x08012855
 8012810:	080128dd 	.word	0x080128dd
 8012814:	0801297b 	.word	0x0801297b
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801281e:	2b01      	cmp	r3, #1
 8012820:	d104      	bne.n	801282c <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	f06f 0205 	mvn.w	r2, #5
 8012828:	639a      	str	r2, [r3, #56]	@ 0x38
 801282a:	e002      	b.n	8012832 <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2200      	movs	r2, #0
 8012830:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 8012832:	79fa      	ldrb	r2, [r7, #7]
 8012834:	f107 0314 	add.w	r3, r7, #20
 8012838:	4619      	mov	r1, r3
 801283a:	68f8      	ldr	r0, [r7, #12]
 801283c:	f7ff fe38 	bl	80124b0 <isotp_receive_single_frame>
 8012840:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 8012842:	69fb      	ldr	r3, [r7, #28]
 8012844:	2b00      	cmp	r3, #0
 8012846:	f040 80f7 	bne.w	8012a38 <isotp_on_can_message+0x288>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	2202      	movs	r2, #2
 801284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            }
            break;
 8012852:	e0f1      	b.n	8012a38 <isotp_on_can_message+0x288>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801285a:	2b01      	cmp	r3, #1
 801285c:	d104      	bne.n	8012868 <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	f06f 0205 	mvn.w	r2, #5
 8012864:	639a      	str	r2, [r3, #56]	@ 0x38
 8012866:	e002      	b.n	801286e <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2200      	movs	r2, #0
 801286c:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 801286e:	79fa      	ldrb	r2, [r7, #7]
 8012870:	f107 0314 	add.w	r3, r7, #20
 8012874:	4619      	mov	r1, r3
 8012876:	68f8      	ldr	r0, [r7, #12]
 8012878:	f7ff fe52 	bl	8012520 <isotp_receive_first_frame>
 801287c:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	f113 0f03 	cmn.w	r3, #3
 8012884:	d10e      	bne.n	80128a4 <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f06f 0207 	mvn.w	r2, #7
 801288c:	639a      	str	r2, [r3, #56]	@ 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	2200      	movs	r2, #0
 8012892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 8012896:	2300      	movs	r3, #0
 8012898:	2200      	movs	r2, #0
 801289a:	2102      	movs	r1, #2
 801289c:	68f8      	ldr	r0, [r7, #12]
 801289e:	f7ff fcd1 	bl	8012244 <isotp_send_flow_control>
                break;
 80128a2:	e0d2      	b.n	8012a4a <isotp_on_can_message+0x29a>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	f040 80c8 	bne.w	8012a3c <isotp_on_can_message+0x28c>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2201      	movs	r2, #1
 80128b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	22c8      	movs	r2, #200	@ 0xc8
 80128b8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80128c2:	2300      	movs	r3, #0
 80128c4:	2100      	movs	r1, #0
 80128c6:	68f8      	ldr	r0, [r7, #12]
 80128c8:	f7ff fcbc 	bl	8012244 <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80128cc:	f7ef fabe 	bl	8001e4c <isotp_user_get_ms>
 80128d0:	4603      	mov	r3, r0
 80128d2:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	635a      	str	r2, [r3, #52]	@ 0x34
            }
            
            break;
 80128da:	e0af      	b.n	8012a3c <isotp_on_can_message+0x28c>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d004      	beq.n	80128f0 <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f06f 0205 	mvn.w	r2, #5
 80128ec:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 80128ee:	e0ac      	b.n	8012a4a <isotp_on_can_message+0x29a>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 80128f0:	79fa      	ldrb	r2, [r7, #7]
 80128f2:	f107 0314 	add.w	r3, r7, #20
 80128f6:	4619      	mov	r1, r3
 80128f8:	68f8      	ldr	r0, [r7, #12]
 80128fa:	f7ff fe5f 	bl	80125bc <isotp_receive_consecutive_frame>
 80128fe:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	f113 0f04 	cmn.w	r3, #4
 8012906:	d108      	bne.n	801291a <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	f06f 0203 	mvn.w	r2, #3
 801290e:	639a      	str	r2, [r3, #56]	@ 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2200      	movs	r2, #0
 8012914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                break;
 8012918:	e097      	b.n	8012a4a <isotp_on_can_message+0x29a>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 801291a:	69fb      	ldr	r3, [r7, #28]
 801291c:	2b00      	cmp	r3, #0
 801291e:	f040 808f 	bne.w	8012a40 <isotp_on_can_message+0x290>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8012922:	f7ef fa93 	bl	8001e4c <isotp_user_get_ms>
 8012926:	4603      	mov	r3, r0
 8012928:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	635a      	str	r2, [r3, #52]	@ 0x34
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012938:	429a      	cmp	r2, r3
 801293a:	d304      	bcc.n	8012946 <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	2202      	movs	r2, #2
 8012940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }
            
            break;
 8012944:	e07c      	b.n	8012a40 <isotp_on_can_message+0x290>
                    if (0 == --link->receive_bs_count) {
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801294c:	3b01      	subs	r3, #1
 801294e:	b2da      	uxtb	r2, r3
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801295c:	2b00      	cmp	r3, #0
 801295e:	d16f      	bne.n	8012a40 <isotp_on_can_message+0x290>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	22c8      	movs	r2, #200	@ 0xc8
 8012964:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 801296e:	2300      	movs	r3, #0
 8012970:	2100      	movs	r1, #0
 8012972:	68f8      	ldr	r0, [r7, #12]
 8012974:	f7ff fc66 	bl	8012244 <isotp_send_flow_control>
            break;
 8012978:	e062      	b.n	8012a40 <isotp_on_can_message+0x290>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012980:	2b01      	cmp	r3, #1
 8012982:	d15f      	bne.n	8012a44 <isotp_on_can_message+0x294>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 8012984:	79fa      	ldrb	r2, [r7, #7]
 8012986:	f107 0314 	add.w	r3, r7, #20
 801298a:	4619      	mov	r1, r3
 801298c:	68f8      	ldr	r0, [r7, #12]
 801298e:	f7ff fe69 	bl	8012664 <isotp_receive_flow_control_frame>
 8012992:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d156      	bne.n	8012a48 <isotp_on_can_message+0x298>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 801299a:	f7ef fa57 	bl	8001e4c <isotp_user_get_ms>
 801299e:	4603      	mov	r3, r0
 80129a0:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 80129a8:	7d3b      	ldrb	r3, [r7, #20]
 80129aa:	f003 030f 	and.w	r3, r3, #15
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	2b02      	cmp	r3, #2
 80129b2:	d108      	bne.n	80129c6 <isotp_on_can_message+0x216>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f06f 0207 	mvn.w	r2, #7
 80129ba:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2202      	movs	r2, #2
 80129c0:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 80129c4:	e040      	b.n	8012a48 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 80129c6:	7d3b      	ldrb	r3, [r7, #20]
 80129c8:	f003 030f 	and.w	r3, r3, #15
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d112      	bne.n	80129f8 <isotp_on_can_message+0x248>
                    link->send_wtf_count += 1;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	7cdb      	ldrb	r3, [r3, #19]
 80129d6:	3301      	adds	r3, #1
 80129d8:	b2da      	uxtb	r2, r3
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	7cdb      	ldrb	r3, [r3, #19]
 80129e2:	2b01      	cmp	r3, #1
 80129e4:	d930      	bls.n	8012a48 <isotp_on_can_message+0x298>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	f06f 0206 	mvn.w	r2, #6
 80129ec:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2202      	movs	r2, #2
 80129f2:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 80129f6:	e027      	b.n	8012a48 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 80129f8:	7d3b      	ldrb	r3, [r7, #20]
 80129fa:	f003 030f 	and.w	r3, r3, #15
 80129fe:	b2db      	uxtb	r3, r3
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d121      	bne.n	8012a48 <isotp_on_can_message+0x298>
                    if (0 == message.as.flow_control.BS) {
 8012a04:	7d7b      	ldrb	r3, [r7, #21]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d104      	bne.n	8012a14 <isotp_on_can_message+0x264>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012a10:	821a      	strh	r2, [r3, #16]
 8012a12:	e003      	b.n	8012a1c <isotp_on_can_message+0x26c>
                        link->send_bs_remain = message.as.flow_control.BS;
 8012a14:	7d7b      	ldrb	r3, [r7, #21]
 8012a16:	461a      	mov	r2, r3
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 8012a1c:	7dbb      	ldrb	r3, [r7, #22]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7ff fbf3 	bl	801220a <isotp_st_min_to_ms>
 8012a24:	4603      	mov	r3, r0
 8012a26:	461a      	mov	r2, r3
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	74da      	strb	r2, [r3, #19]
            break;
 8012a32:	e009      	b.n	8012a48 <isotp_on_can_message+0x298>
        default:
            break;
 8012a34:	bf00      	nop
 8012a36:	e00a      	b.n	8012a4e <isotp_on_can_message+0x29e>
            break;
 8012a38:	bf00      	nop
 8012a3a:	e008      	b.n	8012a4e <isotp_on_can_message+0x29e>
            break;
 8012a3c:	bf00      	nop
 8012a3e:	e006      	b.n	8012a4e <isotp_on_can_message+0x29e>
            break;
 8012a40:	bf00      	nop
 8012a42:	e004      	b.n	8012a4e <isotp_on_can_message+0x29e>
                break;
 8012a44:	bf00      	nop
 8012a46:	e002      	b.n	8012a4e <isotp_on_can_message+0x29e>
            break;
 8012a48:	bf00      	nop
    };
    
    return;
 8012a4a:	e000      	b.n	8012a4e <isotp_on_can_message+0x29e>
        return;
 8012a4c:	bf00      	nop
}
 8012a4e:	3720      	adds	r7, #32
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}

08012a54 <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b086      	sub	sp, #24
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	60f8      	str	r0, [r7, #12]
 8012a5c:	60b9      	str	r1, [r7, #8]
 8012a5e:	603b      	str	r3, [r7, #0]
 8012a60:	4613      	mov	r3, r2
 8012a62:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012a6a:	2b02      	cmp	r3, #2
 8012a6c:	d002      	beq.n	8012a74 <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 8012a6e:	f06f 0304 	mvn.w	r3, #4
 8012a72:	e017      	b.n	8012aa4 <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8012a78:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 8012a7a:	8afa      	ldrh	r2, [r7, #22]
 8012a7c:	88fb      	ldrh	r3, [r7, #6]
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d901      	bls.n	8012a86 <isotp_receive+0x32>
        copylen = payload_size;
 8012a82:	88fb      	ldrh	r3, [r7, #6]
 8012a84:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a8a:	8afa      	ldrh	r2, [r7, #22]
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	68b8      	ldr	r0, [r7, #8]
 8012a90:	f002 fd49 	bl	8015526 <memcpy>
    *out_size = copylen;
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	8afa      	ldrh	r2, [r7, #22]
 8012a98:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return ISOTP_RET_OK;
 8012aa2:	2300      	movs	r3, #0
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3718      	adds	r7, #24
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}

08012aac <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b084      	sub	sp, #16
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	60f8      	str	r0, [r7, #12]
 8012ab4:	60b9      	str	r1, [r7, #8]
 8012ab6:	607a      	str	r2, [r7, #4]
 8012ab8:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 8012aba:	2240      	movs	r2, #64	@ 0x40
 8012abc:	2100      	movs	r1, #0
 8012abe:	68f8      	ldr	r0, [r7, #12]
 8012ac0:	f002 fbe8 	bl	8015294 <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	68ba      	ldr	r2, [r7, #8]
 8012ad8:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	887a      	ldrh	r2, [r7, #2]
 8012ae4:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	69ba      	ldr	r2, [r7, #24]
 8012aea:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	8bba      	ldrh	r2, [r7, #28]
 8012af0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    return;
 8012af2:	bf00      	nop
}
 8012af4:	3710      	adds	r7, #16
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}

08012afa <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 8012afa:	b590      	push	{r4, r7, lr}
 8012afc:	b085      	sub	sp, #20
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d15c      	bne.n	8012bc6 <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 8012b10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d003      	beq.n	8012b20 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	8a1b      	ldrh	r3, [r3, #16]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d041      	beq.n	8012ba4 <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d00c      	beq.n	8012b42 <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	7c9b      	ldrb	r3, [r3, #18]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d039      	beq.n	8012ba4 <isotp_poll+0xaa>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	695b      	ldr	r3, [r3, #20]
 8012b34:	461c      	mov	r4, r3
 8012b36:	f7ef f989 	bl	8001e4c <isotp_user_get_ms>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	1ae3      	subs	r3, r4, r3
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	da30      	bge.n	8012ba4 <isotp_poll+0xaa>
            
            ret = isotp_send_consecutive_frame(link);
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f7ff fc4a 	bl	80123dc <isotp_send_consecutive_frame>
 8012b48:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d125      	bne.n	8012b9c <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	8a1b      	ldrh	r3, [r3, #16]
 8012b54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	d005      	beq.n	8012b68 <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	8a1b      	ldrh	r3, [r3, #16]
 8012b60:	3b01      	subs	r3, #1
 8012b62:	b29a      	uxth	r2, r3
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8012b68:	f7ef f970 	bl	8001e4c <isotp_user_get_ms>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 8012b76:	f7ef f969 	bl	8001e4c <isotp_user_get_ms>
 8012b7a:	4602      	mov	r2, r0
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	7c9b      	ldrb	r3, [r3, #18]
 8012b80:	441a      	add	r2, r3
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	899a      	ldrh	r2, [r3, #12]
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	895b      	ldrh	r3, [r3, #10]
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	d308      	bcc.n	8012ba4 <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2200      	movs	r2, #0
 8012b96:	f883 2020 	strb.w	r2, [r3, #32]
 8012b9a:	e003      	b.n	8012ba4 <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2202      	movs	r2, #2
 8012ba0:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	699b      	ldr	r3, [r3, #24]
 8012ba8:	461c      	mov	r4, r3
 8012baa:	f7ef f94f 	bl	8001e4c <isotp_user_get_ms>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	1ae3      	subs	r3, r4, r3
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	da07      	bge.n	8012bc6 <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f06f 0201 	mvn.w	r2, #1
 8012bbc:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2202      	movs	r2, #2
 8012bc2:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d111      	bne.n	8012bf4 <isotp_poll+0xfa>
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012bd4:	461c      	mov	r4, r3
 8012bd6:	f7ef f939 	bl	8001e4c <isotp_user_get_ms>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	1ae3      	subs	r3, r4, r3
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	da08      	bge.n	8012bf4 <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f06f 0202 	mvn.w	r2, #2
 8012be8:	639a      	str	r2, [r3, #56]	@ 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2200      	movs	r2, #0
 8012bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    return;
 8012bf2:	bf00      	nop
 8012bf4:	bf00      	nop
}
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd90      	pop	{r4, r7, pc}

08012bfc <OS_task_init>:
/* Initialize object by assigning init and dispatch handler function */
void OS_task_init(
    OS_task * const pOS_task,
    OS_handler init,
    OS_handler dispatch) 
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b085      	sub	sp, #20
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	607a      	str	r2, [r7, #4]
    pOS_task->init = init;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	68ba      	ldr	r2, [r7, #8]
 8012c0c:	601a      	str	r2, [r3, #0]
    pOS_task->dispatch = dispatch;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	605a      	str	r2, [r3, #4]
}
 8012c14:	bf00      	nop
 8012c16:	3714      	adds	r7, #20
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bc80      	pop	{r7}
 8012c1c:	4770      	bx	lr

08012c1e <OS_task_create>:
    OS_task * const pOS_task,
    OS_taskPrio task_prio,
    OS_event_t const **pBuf ,
    OS_EQCt eqLen,
    OS_event_t const * const init_e)
{
 8012c1e:	b580      	push	{r7, lr}
 8012c20:	b084      	sub	sp, #16
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	60f8      	str	r0, [r7, #12]
 8012c26:	607a      	str	r2, [r7, #4]
 8012c28:	461a      	mov	r2, r3
 8012c2a:	460b      	mov	r3, r1
 8012c2c:	72fb      	strb	r3, [r7, #11]
 8012c2e:	4613      	mov	r3, r2
 8012c30:	72bb      	strb	r3, [r7, #10]
    /* check parameter */
    if ( task_prio > 0  /* the priority must be greater than 0 */
 8012c32:	7afb      	ldrb	r3, [r7, #11]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d020      	beq.n	8012c7a <OS_task_create+0x5c>
        && pBuf != (OS_event_t const **)0 /* The queue exists */
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d01d      	beq.n	8012c7a <OS_task_create+0x5c>
        && eqLen > 0) { /* the length greater than 0 */
 8012c3e:	7abb      	ldrb	r3, [r7, #10]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d01a      	beq.n	8012c7a <OS_task_create+0x5c>
        pOS_task->qBuf = pBuf;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	687a      	ldr	r2, [r7, #4]
 8012c48:	609a      	str	r2, [r3, #8]
        pOS_task->end = eqLen - 1;
 8012c4a:	7abb      	ldrb	r3, [r7, #10]
 8012c4c:	3b01      	subs	r3, #1
 8012c4e:	b2da      	uxtb	r2, r3
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	731a      	strb	r2, [r3, #12]
        pOS_task->head = 0;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2200      	movs	r2, #0
 8012c58:	735a      	strb	r2, [r3, #13]
        pOS_task->tail = 0;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	739a      	strb	r2, [r3, #14]
        pOS_task->nUsed = 0;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2200      	movs	r2, #0
 8012c64:	73da      	strb	r2, [r3, #15]

        /* Set task priority */
        // OS_setTask_priority(pOS_task,task_prio);
        pOS_task->task_piro = task_prio - 1;
 8012c66:	7afb      	ldrb	r3, [r7, #11]
 8012c68:	3b01      	subs	r3, #1
 8012c6a:	b2da      	uxtb	r2, r3
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	741a      	strb	r2, [r3, #16]


        /* Initialize task with initialization event */
        (*pOS_task->init)(pOS_task,init_e);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	69b9      	ldr	r1, [r7, #24]
 8012c76:	68f8      	ldr	r0, [r7, #12]
 8012c78:	4798      	blx	r3
    } 
}
 8012c7a:	bf00      	nop
 8012c7c:	3710      	adds	r7, #16
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
	...

08012c84 <OS_task_post>:
 * @brief Post the event to event queue of task 
 * 
 * @param pOS_task 
 * @param pEvent 
 */ 
void OS_task_post(OS_task *const pOS_task, OS_event_t const * const pEvent) {
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	6039      	str	r1, [r7, #0]
    OS_ring_buf_tcb *pQueue = &pri_queue[pOS_task->task_piro];
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	7c1b      	ldrb	r3, [r3, #16]
 8012c92:	461a      	mov	r2, r3
 8012c94:	2358      	movs	r3, #88	@ 0x58
 8012c96:	fb02 f303 	mul.w	r3, r2, r3
 8012c9a:	4a30      	ldr	r2, [pc, #192]	@ (8012d5c <OS_task_post+0xd8>)
 8012c9c:	4413      	add	r3, r2
 8012c9e:	60fb      	str	r3, [r7, #12]

    /* Check over flow of queue */
    if (pri_queue[pOS_task->task_piro].nUsed >= OS_TASK_PER_PRI || pOS_task->nUsed > pOS_task->end ) { /* full queue */
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	7c1b      	ldrb	r3, [r3, #16]
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8012d5c <OS_task_post+0xd8>)
 8012ca8:	2358      	movs	r3, #88	@ 0x58
 8012caa:	fb01 f303 	mul.w	r3, r1, r3
 8012cae:	4413      	add	r3, r2
 8012cb0:	3303      	adds	r3, #3
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	2b09      	cmp	r3, #9
 8012cb6:	d84d      	bhi.n	8012d54 <OS_task_post+0xd0>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	7bda      	ldrb	r2, [r3, #15]
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	7b1b      	ldrb	r3, [r3, #12]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d847      	bhi.n	8012d54 <OS_task_post+0xd0>
        return;
    }

    /* insert tcb to queue */
    OS_PORT_CRIT_ENTRY();
 8012cc4:	b672      	cpsid	i
    pQueue->buf_tcb[pQueue->head_index].pEvent = pEvent;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	68fa      	ldr	r2, [r7, #12]
 8012ccc:	00db      	lsls	r3, r3, #3
 8012cce:	4413      	add	r3, r2
 8012cd0:	683a      	ldr	r2, [r7, #0]
 8012cd2:	609a      	str	r2, [r3, #8]
    pQueue->buf_tcb[pQueue->head_index].pOS_task = pOS_task;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	68fa      	ldr	r2, [r7, #12]
 8012cda:	00db      	lsls	r3, r3, #3
 8012cdc:	4413      	add	r3, r2
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	605a      	str	r2, [r3, #4]

    if (pQueue->head_index == 0) {
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d103      	bne.n	8012cf2 <OS_task_post+0x6e>
        pQueue->head_index = OS_TASK_PER_PRI - 1; /* wrap around to end of the buffer */
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	2209      	movs	r2, #9
 8012cee:	701a      	strb	r2, [r3, #0]
 8012cf0:	e005      	b.n	8012cfe <OS_task_post+0x7a>
    } else {
        --pQueue->head_index;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	781b      	ldrb	r3, [r3, #0]
 8012cf6:	3b01      	subs	r3, #1
 8012cf8:	b2da      	uxtb	r2, r3
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	701a      	strb	r2, [r3, #0]
    }
    ++pQueue->nUsed; /* Increase number event used in queue */
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	78db      	ldrb	r3, [r3, #3]
 8012d02:	3301      	adds	r3, #1
 8012d04:	b2da      	uxtb	r2, r3
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	70da      	strb	r2, [r3, #3]

    pOS_task->qBuf[pOS_task->head] = pEvent; /* insert event to queue */
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	689a      	ldr	r2, [r3, #8]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	7b5b      	ldrb	r3, [r3, #13]
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	4413      	add	r3, r2
 8012d16:	683a      	ldr	r2, [r7, #0]
 8012d18:	601a      	str	r2, [r3, #0]
    if (pOS_task->head == 0) { 
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	7b5b      	ldrb	r3, [r3, #13]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d104      	bne.n	8012d2c <OS_task_post+0xa8>
        pOS_task->head = pOS_task->end; /* wrap around to end of the buffer */
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	7b1a      	ldrb	r2, [r3, #12]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	735a      	strb	r2, [r3, #13]
 8012d2a:	e005      	b.n	8012d38 <OS_task_post+0xb4>
    } else {
        --pOS_task->head;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	7b5b      	ldrb	r3, [r3, #13]
 8012d30:	3b01      	subs	r3, #1
 8012d32:	b2da      	uxtb	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	735a      	strb	r2, [r3, #13]
    }
    ++pOS_task->nUsed; /* Increase number event used in queue */
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	7bdb      	ldrb	r3, [r3, #15]
 8012d3c:	3301      	adds	r3, #1
 8012d3e:	b2da      	uxtb	r2, r3
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	73da      	strb	r2, [r3, #15]

    /* Post event -> make the interrupt */
    // OS_PORT_TASK_PEND();
    HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d48:	b25b      	sxtb	r3, r3
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7f0 fbe7 	bl	800351e <HAL_NVIC_SetPendingIRQ>
    OS_PORT_CRIT_EXIT();
 8012d50:	b662      	cpsie	i
 8012d52:	e000      	b.n	8012d56 <OS_task_post+0xd2>
        return;
 8012d54:	bf00      	nop
}
 8012d56:	3710      	adds	r7, #16
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	20001ca0 	.word	0x20001ca0

08012d60 <OS_task_post_event>:

void OS_task_post_event(OS_task *const pOS_task,uint8_t sig, uint8_t *data, uint32_t size) {
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b086      	sub	sp, #24
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	607a      	str	r2, [r7, #4]
 8012d6a:	603b      	str	r3, [r7, #0]
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	72fb      	strb	r3, [r7, #11]
    OS_event_t *e = get_dynamic_event();
 8012d70:	f000 f99c 	bl	80130ac <get_dynamic_event>
 8012d74:	6178      	str	r0, [r7, #20]
    set_sig_dynamic_event(e,sig);
 8012d76:	7afb      	ldrb	r3, [r7, #11]
 8012d78:	4619      	mov	r1, r3
 8012d7a:	6978      	ldr	r0, [r7, #20]
 8012d7c:	f000 f9e2 	bl	8013144 <set_sig_dynamic_event>
    set_data_dynamic_event(e,data,size);
 8012d80:	683a      	ldr	r2, [r7, #0]
 8012d82:	6879      	ldr	r1, [r7, #4]
 8012d84:	6978      	ldr	r0, [r7, #20]
 8012d86:	f000 f9bb 	bl	8013100 <set_data_dynamic_event>
    OS_task_post(pOS_task,e);
 8012d8a:	6979      	ldr	r1, [r7, #20]
 8012d8c:	68f8      	ldr	r0, [r7, #12]
 8012d8e:	f7ff ff79 	bl	8012c84 <OS_task_post>
}
 8012d92:	bf00      	nop
 8012d94:	3718      	adds	r7, #24
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
	...

08012d9c <OS_TimeEvt_init>:

void OS_TimeEvt_init(
    OS_TimeEvt *pOS_Evt,
    uint16_t  sig,
    OS_task *task)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b085      	sub	sp, #20
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	60f8      	str	r0, [r7, #12]
 8012da4:	460b      	mov	r3, r1
 8012da6:	607a      	str	r2, [r7, #4]
 8012da8:	817b      	strh	r3, [r7, #10]
    pOS_Evt->Time_event.sig = sig;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	897a      	ldrh	r2, [r7, #10]
 8012dae:	801a      	strh	r2, [r3, #0]
//    pOS_Evt->Time_event.data = 0;
    pOS_Evt->Time_event.len = 0;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2200      	movs	r2, #0
 8012db4:	645a      	str	r2, [r3, #68]	@ 0x44
    pOS_Evt->task_post = task;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	64da      	str	r2, [r3, #76]	@ 0x4c
    pOS_Evt->Time_Ctr = 0;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* add new node to head of liked list */
    pOS_Evt->next = timeEvt_head;
 8012dcc:	4b05      	ldr	r3, [pc, #20]	@ (8012de4 <OS_TimeEvt_init+0x48>)
 8012dce:	681a      	ldr	r2, [r3, #0]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	649a      	str	r2, [r3, #72]	@ 0x48
    timeEvt_head = pOS_Evt;
 8012dd4:	4a03      	ldr	r2, [pc, #12]	@ (8012de4 <OS_TimeEvt_init+0x48>)
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	6013      	str	r3, [r2, #0]
} 
 8012dda:	bf00      	nop
 8012ddc:	3714      	adds	r7, #20
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bc80      	pop	{r7}
 8012de2:	4770      	bx	lr
 8012de4:	20001da8 	.word	0x20001da8

08012de8 <OS_TimeEvt_Set>:
 * 
 * @param pOS_Evt Timer for generating event when TIMEOUT 
 * @param count TIMEOUT value 
 * @param interval interval value for periodic time event
 */
void OS_TimeEvt_Set(OS_TimeEvt *pOS_Evt, uint16_t count, uint16_t interval) {
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	460b      	mov	r3, r1
 8012df2:	807b      	strh	r3, [r7, #2]
 8012df4:	4613      	mov	r3, r2
 8012df6:	803b      	strh	r3, [r7, #0]
    OS_PORT_CRIT_ENTRY();
 8012df8:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = count;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	887a      	ldrh	r2, [r7, #2]
 8012dfe:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = interval;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	883a      	ldrh	r2, [r7, #0]
 8012e06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 8012e0a:	b662      	cpsie	i
}
 8012e0c:	bf00      	nop
 8012e0e:	370c      	adds	r7, #12
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bc80      	pop	{r7}
 8012e14:	4770      	bx	lr

08012e16 <OS_TimeEvt_Stop>:

void OS_TimeEvt_Stop(OS_TimeEvt *pOS_Evt) {
 8012e16:	b480      	push	{r7}
 8012e18:	b083      	sub	sp, #12
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 8012e1e:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = 0;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2200      	movs	r2, #0
 8012e24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 8012e30:	b662      	cpsie	i
}
 8012e32:	bf00      	nop
 8012e34:	370c      	adds	r7, #12
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bc80      	pop	{r7}
 8012e3a:	4770      	bx	lr

08012e3c <OS_TimeEvt_tick>:

/**
 * @brief function in systemtick handler (1ms) to execute task time OS 
 * 
 */
void OS_TimeEvt_tick(void) {
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b082      	sub	sp, #8
 8012e40:	af00      	add	r7, sp, #0
    /* run for all the node time event */
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 8012e42:	4b1b      	ldr	r3, [pc, #108]	@ (8012eb0 <OS_TimeEvt_tick+0x74>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	607b      	str	r3, [r7, #4]
 8012e48:	e029      	b.n	8012e9e <OS_TimeEvt_tick+0x62>
        OS_PORT_CRIT_ENTRY();
 8012e4a:	b672      	cpsid	i
        if (node->Time_Ctr == 0) { /* down counter = 0  -> stop node */
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d101      	bne.n	8012e5a <OS_TimeEvt_tick+0x1e>
            OS_PORT_CRIT_EXIT();
 8012e56:	b662      	cpsie	i
 8012e58:	e01e      	b.n	8012e98 <OS_TimeEvt_tick+0x5c>
        } else if (node->Time_Ctr == 1) { /* TIMEOUT */
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d110      	bne.n	8012e86 <OS_TimeEvt_tick+0x4a>
            node->Time_Ctr = node->Time_interval;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 8012e70:	b662      	cpsie	i
            /* Post event */
            // OS_task_post(node->task_post,&node->Time_event);
            OS_task_post_event(node->task_post,node->Time_event.sig,(uint8_t *)0,0);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	881b      	ldrh	r3, [r3, #0]
 8012e7a:	b2d9      	uxtb	r1, r3
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	2200      	movs	r2, #0
 8012e80:	f7ff ff6e 	bl	8012d60 <OS_task_post_event>
 8012e84:	e008      	b.n	8012e98 <OS_TimeEvt_tick+0x5c>
        } else { /* count down value */
            --node->Time_Ctr;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012e8c:	3b01      	subs	r3, #1
 8012e8e:	b29a      	uxth	r2, r3
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 8012e96:	b662      	cpsie	i
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012e9c:	607b      	str	r3, [r7, #4]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d1d2      	bne.n	8012e4a <OS_TimeEvt_tick+0xe>
        }
    }
}
 8012ea4:	bf00      	nop
 8012ea6:	bf00      	nop
 8012ea8:	3708      	adds	r7, #8
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}
 8012eae:	bf00      	nop
 8012eb0:	20001da8 	.word	0x20001da8

08012eb4 <OS_task_activate>:
/**
 * @brief The task performs an action when it receives an event from the queue. Call in interrupt handler to get event and dispatch
 * 
 * @param pOS_task Task pointer
 */
void OS_task_activate(uint8_t prio_task) {
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b086      	sub	sp, #24
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	4603      	mov	r3, r0
 8012ebc:	71fb      	strb	r3, [r7, #7]
    OS_ring_buf_tcb *pQueue = &pri_queue[prio_task - 1];
 8012ebe:	79fb      	ldrb	r3, [r7, #7]
 8012ec0:	3b01      	subs	r3, #1
 8012ec2:	2258      	movs	r2, #88	@ 0x58
 8012ec4:	fb02 f303 	mul.w	r3, r2, r3
 8012ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8012f84 <OS_task_activate+0xd0>)
 8012eca:	4413      	add	r3, r2
 8012ecc:	617b      	str	r3, [r7, #20]
    
    if (pQueue->nUsed == 0) { /* don't have tcb */
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	78db      	ldrb	r3, [r3, #3]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d050      	beq.n	8012f78 <OS_task_activate+0xc4>
        return;
    }
    
    uint8_t index = pQueue->tail_index;
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	785b      	ldrb	r3, [r3, #1]
 8012eda:	74fb      	strb	r3, [r7, #19]
    if (pQueue->tail_index == 0) {
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	785b      	ldrb	r3, [r3, #1]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d103      	bne.n	8012eec <OS_task_activate+0x38>
        pQueue->tail_index = OS_TASK_PER_PRI - 1; /* wrap around */
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	2209      	movs	r2, #9
 8012ee8:	705a      	strb	r2, [r3, #1]
 8012eea:	e005      	b.n	8012ef8 <OS_task_activate+0x44>
    } else {
        --pQueue->tail_index;
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	785b      	ldrb	r3, [r3, #1]
 8012ef0:	3b01      	subs	r3, #1
 8012ef2:	b2da      	uxtb	r2, r3
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	705a      	strb	r2, [r3, #1]
    }

    --pQueue->nUsed;
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	78db      	ldrb	r3, [r3, #3]
 8012efc:	3b01      	subs	r3, #1
 8012efe:	b2da      	uxtb	r2, r3
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	70da      	strb	r2, [r3, #3]

    OS_task *pOS_task = pQueue->buf_tcb[index].pOS_task;
 8012f04:	7cfb      	ldrb	r3, [r7, #19]
 8012f06:	697a      	ldr	r2, [r7, #20]
 8012f08:	00db      	lsls	r3, r3, #3
 8012f0a:	4413      	add	r3, r2
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	60fb      	str	r3, [r7, #12]

    /* Check event in queue */
    if (pOS_task->nUsed == 0) { /* don't have event in queue */
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	7bdb      	ldrb	r3, [r3, #15]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d031      	beq.n	8012f7c <OS_task_activate+0xc8>
        return;
    }

    OS_event_t const *e_receive = pQueue->buf_tcb[index].pEvent;
 8012f18:	7cfb      	ldrb	r3, [r7, #19]
 8012f1a:	697a      	ldr	r2, [r7, #20]
 8012f1c:	00db      	lsls	r3, r3, #3
 8012f1e:	4413      	add	r3, r2
 8012f20:	689b      	ldr	r3, [r3, #8]
 8012f22:	60bb      	str	r3, [r7, #8]
    if (pOS_task->tail == 0) {
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	7b9b      	ldrb	r3, [r3, #14]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d104      	bne.n	8012f36 <OS_task_activate+0x82>
        pOS_task->tail = pOS_task->end; /* wrap around */
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	7b1a      	ldrb	r2, [r3, #12]
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	739a      	strb	r2, [r3, #14]
 8012f34:	e005      	b.n	8012f42 <OS_task_activate+0x8e>
    } else {
        --pOS_task->tail;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	7b9b      	ldrb	r3, [r3, #14]
 8012f3a:	3b01      	subs	r3, #1
 8012f3c:	b2da      	uxtb	r2, r3
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	739a      	strb	r2, [r3, #14]
    }
    OS_PORT_CRIT_ENTRY();
 8012f42:	b672      	cpsid	i
    // --pOS_task->nUsed;
    if (--pOS_task->nUsed > 0) { /* check have any event in queue */
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	7bdb      	ldrb	r3, [r3, #15]
 8012f48:	3b01      	subs	r3, #1
 8012f4a:	b2da      	uxtb	r2, r3
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	73da      	strb	r2, [r3, #15]
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	7bdb      	ldrb	r3, [r3, #15]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d005      	beq.n	8012f64 <OS_task_activate+0xb0>
        HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f5c:	b25b      	sxtb	r3, r3
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7f0 fadd 	bl	800351e <HAL_NVIC_SetPendingIRQ>
    }
    OS_PORT_CRIT_EXIT();
 8012f64:	b662      	cpsie	i

    /* Dispatch the received event to this task */
    (*pOS_task->dispatch)(pOS_task,e_receive);
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	68b9      	ldr	r1, [r7, #8]
 8012f6c:	68f8      	ldr	r0, [r7, #12]
 8012f6e:	4798      	blx	r3

    free_dynamic_event(e_receive);
 8012f70:	68b8      	ldr	r0, [r7, #8]
 8012f72:	f000 f86f 	bl	8013054 <free_dynamic_event>
 8012f76:	e002      	b.n	8012f7e <OS_task_activate+0xca>
        return;
 8012f78:	bf00      	nop
 8012f7a:	e000      	b.n	8012f7e <OS_task_activate+0xca>
        return;
 8012f7c:	bf00      	nop
}
 8012f7e:	3718      	adds	r7, #24
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	20001ca0 	.word	0x20001ca0

08012f88 <OS_priority_IRQ>:
 * @brief Set task priority 
 * 
 * @param pOS_task Task pointer 
 * @param prio task priority 
 */
void OS_priority_IRQ(uint8_t IRQ, OS_taskPrio prio) {
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b082      	sub	sp, #8
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	4603      	mov	r3, r0
 8012f90:	460a      	mov	r2, r1
 8012f92:	71fb      	strb	r3, [r7, #7]
 8012f94:	4613      	mov	r3, r2
 8012f96:	71bb      	strb	r3, [r7, #6]
    HAL_NVIC_SetPriority(IRQ,(15U - prio),0);
 8012f98:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8012f9c:	79bb      	ldrb	r3, [r7, #6]
 8012f9e:	f1c3 030f 	rsb	r3, r3, #15
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	4619      	mov	r1, r3
 8012fa6:	f7f0 fa84 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQ);
 8012faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7f0 fa9b 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8012fb4:	bf00      	nop
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <OS_prio_setIRQ>:
 * @brief Set the number IRQ for specific priority
 * 
 * @param prio priority begin from 1 
 * @param num_irq IRQ number 
 */
void OS_prio_setIRQ(uint8_t prio, uint8_t num_irq) {
 8012fbc:	b480      	push	{r7}
 8012fbe:	b083      	sub	sp, #12
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	460a      	mov	r2, r1
 8012fc6:	71fb      	strb	r3, [r7, #7]
 8012fc8:	4613      	mov	r3, r2
 8012fca:	71bb      	strb	r3, [r7, #6]
    if (prio < OS_PRI_MAX) {
 8012fcc:	79fb      	ldrb	r3, [r7, #7]
 8012fce:	2b02      	cmp	r3, #2
 8012fd0:	d809      	bhi.n	8012fe6 <OS_prio_setIRQ+0x2a>
        pri_queue[prio - 1].nvic_irq = num_irq;
 8012fd2:	79fb      	ldrb	r3, [r7, #7]
 8012fd4:	3b01      	subs	r3, #1
 8012fd6:	79ba      	ldrb	r2, [r7, #6]
 8012fd8:	4905      	ldr	r1, [pc, #20]	@ (8012ff0 <OS_prio_setIRQ+0x34>)
 8012fda:	2058      	movs	r0, #88	@ 0x58
 8012fdc:	fb00 f303 	mul.w	r3, r0, r3
 8012fe0:	440b      	add	r3, r1
 8012fe2:	3354      	adds	r3, #84	@ 0x54
 8012fe4:	601a      	str	r2, [r3, #0]
    }
}
 8012fe6:	bf00      	nop
 8012fe8:	370c      	adds	r7, #12
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bc80      	pop	{r7}
 8012fee:	4770      	bx	lr
 8012ff0:	20001ca0 	.word	0x20001ca0

08012ff4 <OS_Test_setIRQ>:

void OS_Test_setIRQ(OS_task * const pAO, uint8_t num_irq) {
 8012ff4:	b480      	push	{r7}
 8012ff6:	b083      	sub	sp, #12
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	460b      	mov	r3, r1
 8012ffe:	70fb      	strb	r3, [r7, #3]
    pAO->nvic_irq = num_irq;
 8013000:	78fa      	ldrb	r2, [r7, #3]
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	619a      	str	r2, [r3, #24]
}
 8013006:	bf00      	nop
 8013008:	370c      	adds	r7, #12
 801300a:	46bd      	mov	sp, r7
 801300c:	bc80      	pop	{r7}
 801300e:	4770      	bx	lr

08013010 <dynamic_event_pool_init>:
static OS_event_t dynamic_event_pool[OS_EVT_POOL_SIZE];
static uint8_t dynamic_event_pool_free[OS_EVT_POOL_SIZE]; /* Store index in free */
static uint8_t dynamic_event_free_stack; /* point to the next index freen in pool */


void dynamic_event_pool_init(void) {
 8013010:	b480      	push	{r7}
 8013012:	b083      	sub	sp, #12
 8013014:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 8013016:	b672      	cpsid	i

    dynamic_event_free_stack = 0;
 8013018:	4b0c      	ldr	r3, [pc, #48]	@ (801304c <dynamic_event_pool_init+0x3c>)
 801301a:	2200      	movs	r2, #0
 801301c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 801301e:	2300      	movs	r3, #0
 8013020:	71fb      	strb	r3, [r7, #7]
 8013022:	e006      	b.n	8013032 <dynamic_event_pool_init+0x22>
        dynamic_event_pool_free[i] = i; /* Store the index free */
 8013024:	79fb      	ldrb	r3, [r7, #7]
 8013026:	490a      	ldr	r1, [pc, #40]	@ (8013050 <dynamic_event_pool_init+0x40>)
 8013028:	79fa      	ldrb	r2, [r7, #7]
 801302a:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 801302c:	79fb      	ldrb	r3, [r7, #7]
 801302e:	3301      	adds	r3, #1
 8013030:	71fb      	strb	r3, [r7, #7]
 8013032:	79fb      	ldrb	r3, [r7, #7]
 8013034:	2b09      	cmp	r3, #9
 8013036:	d9f5      	bls.n	8013024 <dynamic_event_pool_init+0x14>
    }
    dynamic_event_free_stack = OS_EVT_POOL_SIZE;
 8013038:	4b04      	ldr	r3, [pc, #16]	@ (801304c <dynamic_event_pool_init+0x3c>)
 801303a:	220a      	movs	r2, #10
 801303c:	701a      	strb	r2, [r3, #0]
    
    OS_PORT_CRIT_EXIT();
 801303e:	b662      	cpsie	i
}
 8013040:	bf00      	nop
 8013042:	370c      	adds	r7, #12
 8013044:	46bd      	mov	sp, r7
 8013046:	bc80      	pop	{r7}
 8013048:	4770      	bx	lr
 801304a:	bf00      	nop
 801304c:	20002086 	.word	0x20002086
 8013050:	2000207c 	.word	0x2000207c

08013054 <free_dynamic_event>:


void free_dynamic_event(OS_event_t *e) {
 8013054:	b480      	push	{r7}
 8013056:	b085      	sub	sp, #20
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 801305c:	b672      	cpsid	i

    uint8_t idx = e - dynamic_event_pool; /* Get index of event */
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	4a0e      	ldr	r2, [pc, #56]	@ (801309c <free_dynamic_event+0x48>)
 8013062:	1a9b      	subs	r3, r3, r2
 8013064:	10db      	asrs	r3, r3, #3
 8013066:	4a0e      	ldr	r2, [pc, #56]	@ (80130a0 <free_dynamic_event+0x4c>)
 8013068:	fb02 f303 	mul.w	r3, r2, r3
 801306c:	73fb      	strb	r3, [r7, #15]
//    free(e->data); /* free allocated memory */
    if (idx > 0 && idx < OS_EVT_POOL_SIZE) {
 801306e:	7bfb      	ldrb	r3, [r7, #15]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d00c      	beq.n	801308e <free_dynamic_event+0x3a>
 8013074:	7bfb      	ldrb	r3, [r7, #15]
 8013076:	2b09      	cmp	r3, #9
 8013078:	d809      	bhi.n	801308e <free_dynamic_event+0x3a>
        dynamic_event_pool_free[dynamic_event_free_stack++] = idx; 
 801307a:	4b0a      	ldr	r3, [pc, #40]	@ (80130a4 <free_dynamic_event+0x50>)
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	1c5a      	adds	r2, r3, #1
 8013080:	b2d1      	uxtb	r1, r2
 8013082:	4a08      	ldr	r2, [pc, #32]	@ (80130a4 <free_dynamic_event+0x50>)
 8013084:	7011      	strb	r1, [r2, #0]
 8013086:	4619      	mov	r1, r3
 8013088:	4a07      	ldr	r2, [pc, #28]	@ (80130a8 <free_dynamic_event+0x54>)
 801308a:	7bfb      	ldrb	r3, [r7, #15]
 801308c:	5453      	strb	r3, [r2, r1]
    }

    OS_PORT_CRIT_EXIT();
 801308e:	b662      	cpsie	i
}
 8013090:	bf00      	nop
 8013092:	3714      	adds	r7, #20
 8013094:	46bd      	mov	sp, r7
 8013096:	bc80      	pop	{r7}
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	20001dac 	.word	0x20001dac
 80130a0:	38e38e39 	.word	0x38e38e39
 80130a4:	20002086 	.word	0x20002086
 80130a8:	2000207c 	.word	0x2000207c

080130ac <get_dynamic_event>:

OS_event_t *get_dynamic_event(void) {
 80130ac:	b480      	push	{r7}
 80130ae:	b083      	sub	sp, #12
 80130b0:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 80130b2:	b672      	cpsid	i
    
    if (dynamic_event_free_stack == 0) return NULL; /* full */
 80130b4:	4b0f      	ldr	r3, [pc, #60]	@ (80130f4 <get_dynamic_event+0x48>)
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d101      	bne.n	80130c0 <get_dynamic_event+0x14>
 80130bc:	2300      	movs	r3, #0
 80130be:	e013      	b.n	80130e8 <get_dynamic_event+0x3c>
    uint8_t idx = dynamic_event_pool_free[--dynamic_event_free_stack]; /* Get index in free */
 80130c0:	4b0c      	ldr	r3, [pc, #48]	@ (80130f4 <get_dynamic_event+0x48>)
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	3b01      	subs	r3, #1
 80130c6:	b2da      	uxtb	r2, r3
 80130c8:	4b0a      	ldr	r3, [pc, #40]	@ (80130f4 <get_dynamic_event+0x48>)
 80130ca:	701a      	strb	r2, [r3, #0]
 80130cc:	4b09      	ldr	r3, [pc, #36]	@ (80130f4 <get_dynamic_event+0x48>)
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	461a      	mov	r2, r3
 80130d2:	4b09      	ldr	r3, [pc, #36]	@ (80130f8 <get_dynamic_event+0x4c>)
 80130d4:	5c9b      	ldrb	r3, [r3, r2]
 80130d6:	71fb      	strb	r3, [r7, #7]
    
    OS_PORT_CRIT_EXIT();
 80130d8:	b662      	cpsie	i
    return &dynamic_event_pool[idx];
 80130da:	79fa      	ldrb	r2, [r7, #7]
 80130dc:	4613      	mov	r3, r2
 80130de:	00db      	lsls	r3, r3, #3
 80130e0:	4413      	add	r3, r2
 80130e2:	00db      	lsls	r3, r3, #3
 80130e4:	4a05      	ldr	r2, [pc, #20]	@ (80130fc <get_dynamic_event+0x50>)
 80130e6:	4413      	add	r3, r2
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	370c      	adds	r7, #12
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bc80      	pop	{r7}
 80130f0:	4770      	bx	lr
 80130f2:	bf00      	nop
 80130f4:	20002086 	.word	0x20002086
 80130f8:	2000207c 	.word	0x2000207c
 80130fc:	20001dac 	.word	0x20001dac

08013100 <set_data_dynamic_event>:

void set_data_dynamic_event(OS_event_t *e, uint8_t *data, uint32_t len) {
 8013100:	b580      	push	{r7, lr}
 8013102:	b084      	sub	sp, #16
 8013104:	af00      	add	r7, sp, #0
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	607a      	str	r2, [r7, #4]
    if (len != 0) {
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d00a      	beq.n	8013128 <set_data_dynamic_event+0x28>
        e->len = len;
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy(e->data,data,len);
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	3302      	adds	r3, #2
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	68b9      	ldr	r1, [r7, #8]
 8013120:	4618      	mov	r0, r3
 8013122:	f002 fa00 	bl	8015526 <memcpy>
    } else {
        e->len = len;
        memset(e->data, 0, sizeof(e->data));
    }
}
 8013126:	e009      	b.n	801313c <set_data_dynamic_event+0x3c>
        e->len = len;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	687a      	ldr	r2, [r7, #4]
 801312c:	645a      	str	r2, [r3, #68]	@ 0x44
        memset(e->data, 0, sizeof(e->data));
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	3302      	adds	r3, #2
 8013132:	2240      	movs	r2, #64	@ 0x40
 8013134:	2100      	movs	r1, #0
 8013136:	4618      	mov	r0, r3
 8013138:	f002 f8ac 	bl	8015294 <memset>
}
 801313c:	bf00      	nop
 801313e:	3710      	adds	r7, #16
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <set_sig_dynamic_event>:

void set_sig_dynamic_event(OS_event_t *e, uint8_t sig) {
 8013144:	b480      	push	{r7}
 8013146:	b083      	sub	sp, #12
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	460b      	mov	r3, r1
 801314e:	70fb      	strb	r3, [r7, #3]
    e->sig = sig;
 8013150:	78fb      	ldrb	r3, [r7, #3]
 8013152:	b29a      	uxth	r2, r3
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	801a      	strh	r2, [r3, #0]
}
 8013158:	bf00      	nop
 801315a:	370c      	adds	r7, #12
 801315c:	46bd      	mov	sp, r7
 801315e:	bc80      	pop	{r7}
 8013160:	4770      	bx	lr

08013162 <get_data_dynamic_event>:

uint8_t *get_data_dynamic_event(OS_event_t * const e) {
 8013162:	b480      	push	{r7}
 8013164:	b083      	sub	sp, #12
 8013166:	af00      	add	r7, sp, #0
 8013168:	6078      	str	r0, [r7, #4]
    return (e->data);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	3302      	adds	r3, #2
}
 801316e:	4618      	mov	r0, r3
 8013170:	370c      	adds	r7, #12
 8013172:	46bd      	mov	sp, r7
 8013174:	bc80      	pop	{r7}
 8013176:	4770      	bx	lr

08013178 <__assert_func>:
 8013178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801317a:	4614      	mov	r4, r2
 801317c:	461a      	mov	r2, r3
 801317e:	4b09      	ldr	r3, [pc, #36]	@ (80131a4 <__assert_func+0x2c>)
 8013180:	4605      	mov	r5, r0
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	68d8      	ldr	r0, [r3, #12]
 8013186:	b14c      	cbz	r4, 801319c <__assert_func+0x24>
 8013188:	4b07      	ldr	r3, [pc, #28]	@ (80131a8 <__assert_func+0x30>)
 801318a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801318e:	9100      	str	r1, [sp, #0]
 8013190:	462b      	mov	r3, r5
 8013192:	4906      	ldr	r1, [pc, #24]	@ (80131ac <__assert_func+0x34>)
 8013194:	f001 fe70 	bl	8014e78 <fiprintf>
 8013198:	f002 f9de 	bl	8015558 <abort>
 801319c:	4b04      	ldr	r3, [pc, #16]	@ (80131b0 <__assert_func+0x38>)
 801319e:	461c      	mov	r4, r3
 80131a0:	e7f3      	b.n	801318a <__assert_func+0x12>
 80131a2:	bf00      	nop
 80131a4:	20000200 	.word	0x20000200
 80131a8:	08019349 	.word	0x08019349
 80131ac:	08019356 	.word	0x08019356
 80131b0:	08019384 	.word	0x08019384

080131b4 <atof>:
 80131b4:	2100      	movs	r1, #0
 80131b6:	f000 bec5 	b.w	8013f44 <strtod>

080131ba <atoi>:
 80131ba:	220a      	movs	r2, #10
 80131bc:	2100      	movs	r1, #0
 80131be:	f000 bf49 	b.w	8014054 <strtol>
	...

080131c4 <malloc>:
 80131c4:	4b02      	ldr	r3, [pc, #8]	@ (80131d0 <malloc+0xc>)
 80131c6:	4601      	mov	r1, r0
 80131c8:	6818      	ldr	r0, [r3, #0]
 80131ca:	f000 b82d 	b.w	8013228 <_malloc_r>
 80131ce:	bf00      	nop
 80131d0:	20000200 	.word	0x20000200

080131d4 <free>:
 80131d4:	4b02      	ldr	r3, [pc, #8]	@ (80131e0 <free+0xc>)
 80131d6:	4601      	mov	r1, r0
 80131d8:	6818      	ldr	r0, [r3, #0]
 80131da:	f003 b821 	b.w	8016220 <_free_r>
 80131de:	bf00      	nop
 80131e0:	20000200 	.word	0x20000200

080131e4 <sbrk_aligned>:
 80131e4:	b570      	push	{r4, r5, r6, lr}
 80131e6:	4e0f      	ldr	r6, [pc, #60]	@ (8013224 <sbrk_aligned+0x40>)
 80131e8:	460c      	mov	r4, r1
 80131ea:	6831      	ldr	r1, [r6, #0]
 80131ec:	4605      	mov	r5, r0
 80131ee:	b911      	cbnz	r1, 80131f6 <sbrk_aligned+0x12>
 80131f0:	f002 f934 	bl	801545c <_sbrk_r>
 80131f4:	6030      	str	r0, [r6, #0]
 80131f6:	4621      	mov	r1, r4
 80131f8:	4628      	mov	r0, r5
 80131fa:	f002 f92f 	bl	801545c <_sbrk_r>
 80131fe:	1c43      	adds	r3, r0, #1
 8013200:	d103      	bne.n	801320a <sbrk_aligned+0x26>
 8013202:	f04f 34ff 	mov.w	r4, #4294967295
 8013206:	4620      	mov	r0, r4
 8013208:	bd70      	pop	{r4, r5, r6, pc}
 801320a:	1cc4      	adds	r4, r0, #3
 801320c:	f024 0403 	bic.w	r4, r4, #3
 8013210:	42a0      	cmp	r0, r4
 8013212:	d0f8      	beq.n	8013206 <sbrk_aligned+0x22>
 8013214:	1a21      	subs	r1, r4, r0
 8013216:	4628      	mov	r0, r5
 8013218:	f002 f920 	bl	801545c <_sbrk_r>
 801321c:	3001      	adds	r0, #1
 801321e:	d1f2      	bne.n	8013206 <sbrk_aligned+0x22>
 8013220:	e7ef      	b.n	8013202 <sbrk_aligned+0x1e>
 8013222:	bf00      	nop
 8013224:	20002088 	.word	0x20002088

08013228 <_malloc_r>:
 8013228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801322c:	1ccd      	adds	r5, r1, #3
 801322e:	f025 0503 	bic.w	r5, r5, #3
 8013232:	3508      	adds	r5, #8
 8013234:	2d0c      	cmp	r5, #12
 8013236:	bf38      	it	cc
 8013238:	250c      	movcc	r5, #12
 801323a:	2d00      	cmp	r5, #0
 801323c:	4606      	mov	r6, r0
 801323e:	db01      	blt.n	8013244 <_malloc_r+0x1c>
 8013240:	42a9      	cmp	r1, r5
 8013242:	d904      	bls.n	801324e <_malloc_r+0x26>
 8013244:	230c      	movs	r3, #12
 8013246:	6033      	str	r3, [r6, #0]
 8013248:	2000      	movs	r0, #0
 801324a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801324e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013324 <_malloc_r+0xfc>
 8013252:	f000 f869 	bl	8013328 <__malloc_lock>
 8013256:	f8d8 3000 	ldr.w	r3, [r8]
 801325a:	461c      	mov	r4, r3
 801325c:	bb44      	cbnz	r4, 80132b0 <_malloc_r+0x88>
 801325e:	4629      	mov	r1, r5
 8013260:	4630      	mov	r0, r6
 8013262:	f7ff ffbf 	bl	80131e4 <sbrk_aligned>
 8013266:	1c43      	adds	r3, r0, #1
 8013268:	4604      	mov	r4, r0
 801326a:	d158      	bne.n	801331e <_malloc_r+0xf6>
 801326c:	f8d8 4000 	ldr.w	r4, [r8]
 8013270:	4627      	mov	r7, r4
 8013272:	2f00      	cmp	r7, #0
 8013274:	d143      	bne.n	80132fe <_malloc_r+0xd6>
 8013276:	2c00      	cmp	r4, #0
 8013278:	d04b      	beq.n	8013312 <_malloc_r+0xea>
 801327a:	6823      	ldr	r3, [r4, #0]
 801327c:	4639      	mov	r1, r7
 801327e:	4630      	mov	r0, r6
 8013280:	eb04 0903 	add.w	r9, r4, r3
 8013284:	f002 f8ea 	bl	801545c <_sbrk_r>
 8013288:	4581      	cmp	r9, r0
 801328a:	d142      	bne.n	8013312 <_malloc_r+0xea>
 801328c:	6821      	ldr	r1, [r4, #0]
 801328e:	4630      	mov	r0, r6
 8013290:	1a6d      	subs	r5, r5, r1
 8013292:	4629      	mov	r1, r5
 8013294:	f7ff ffa6 	bl	80131e4 <sbrk_aligned>
 8013298:	3001      	adds	r0, #1
 801329a:	d03a      	beq.n	8013312 <_malloc_r+0xea>
 801329c:	6823      	ldr	r3, [r4, #0]
 801329e:	442b      	add	r3, r5
 80132a0:	6023      	str	r3, [r4, #0]
 80132a2:	f8d8 3000 	ldr.w	r3, [r8]
 80132a6:	685a      	ldr	r2, [r3, #4]
 80132a8:	bb62      	cbnz	r2, 8013304 <_malloc_r+0xdc>
 80132aa:	f8c8 7000 	str.w	r7, [r8]
 80132ae:	e00f      	b.n	80132d0 <_malloc_r+0xa8>
 80132b0:	6822      	ldr	r2, [r4, #0]
 80132b2:	1b52      	subs	r2, r2, r5
 80132b4:	d420      	bmi.n	80132f8 <_malloc_r+0xd0>
 80132b6:	2a0b      	cmp	r2, #11
 80132b8:	d917      	bls.n	80132ea <_malloc_r+0xc2>
 80132ba:	1961      	adds	r1, r4, r5
 80132bc:	42a3      	cmp	r3, r4
 80132be:	6025      	str	r5, [r4, #0]
 80132c0:	bf18      	it	ne
 80132c2:	6059      	strne	r1, [r3, #4]
 80132c4:	6863      	ldr	r3, [r4, #4]
 80132c6:	bf08      	it	eq
 80132c8:	f8c8 1000 	streq.w	r1, [r8]
 80132cc:	5162      	str	r2, [r4, r5]
 80132ce:	604b      	str	r3, [r1, #4]
 80132d0:	4630      	mov	r0, r6
 80132d2:	f000 f82f 	bl	8013334 <__malloc_unlock>
 80132d6:	f104 000b 	add.w	r0, r4, #11
 80132da:	1d23      	adds	r3, r4, #4
 80132dc:	f020 0007 	bic.w	r0, r0, #7
 80132e0:	1ac2      	subs	r2, r0, r3
 80132e2:	bf1c      	itt	ne
 80132e4:	1a1b      	subne	r3, r3, r0
 80132e6:	50a3      	strne	r3, [r4, r2]
 80132e8:	e7af      	b.n	801324a <_malloc_r+0x22>
 80132ea:	6862      	ldr	r2, [r4, #4]
 80132ec:	42a3      	cmp	r3, r4
 80132ee:	bf0c      	ite	eq
 80132f0:	f8c8 2000 	streq.w	r2, [r8]
 80132f4:	605a      	strne	r2, [r3, #4]
 80132f6:	e7eb      	b.n	80132d0 <_malloc_r+0xa8>
 80132f8:	4623      	mov	r3, r4
 80132fa:	6864      	ldr	r4, [r4, #4]
 80132fc:	e7ae      	b.n	801325c <_malloc_r+0x34>
 80132fe:	463c      	mov	r4, r7
 8013300:	687f      	ldr	r7, [r7, #4]
 8013302:	e7b6      	b.n	8013272 <_malloc_r+0x4a>
 8013304:	461a      	mov	r2, r3
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	42a3      	cmp	r3, r4
 801330a:	d1fb      	bne.n	8013304 <_malloc_r+0xdc>
 801330c:	2300      	movs	r3, #0
 801330e:	6053      	str	r3, [r2, #4]
 8013310:	e7de      	b.n	80132d0 <_malloc_r+0xa8>
 8013312:	230c      	movs	r3, #12
 8013314:	4630      	mov	r0, r6
 8013316:	6033      	str	r3, [r6, #0]
 8013318:	f000 f80c 	bl	8013334 <__malloc_unlock>
 801331c:	e794      	b.n	8013248 <_malloc_r+0x20>
 801331e:	6005      	str	r5, [r0, #0]
 8013320:	e7d6      	b.n	80132d0 <_malloc_r+0xa8>
 8013322:	bf00      	nop
 8013324:	2000208c 	.word	0x2000208c

08013328 <__malloc_lock>:
 8013328:	4801      	ldr	r0, [pc, #4]	@ (8013330 <__malloc_lock+0x8>)
 801332a:	f002 b8e4 	b.w	80154f6 <__retarget_lock_acquire_recursive>
 801332e:	bf00      	nop
 8013330:	200021d0 	.word	0x200021d0

08013334 <__malloc_unlock>:
 8013334:	4801      	ldr	r0, [pc, #4]	@ (801333c <__malloc_unlock+0x8>)
 8013336:	f002 b8df 	b.w	80154f8 <__retarget_lock_release_recursive>
 801333a:	bf00      	nop
 801333c:	200021d0 	.word	0x200021d0

08013340 <sulp>:
 8013340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013344:	460f      	mov	r7, r1
 8013346:	4690      	mov	r8, r2
 8013348:	f003 fe6a 	bl	8017020 <__ulp>
 801334c:	4604      	mov	r4, r0
 801334e:	460d      	mov	r5, r1
 8013350:	f1b8 0f00 	cmp.w	r8, #0
 8013354:	d011      	beq.n	801337a <sulp+0x3a>
 8013356:	f3c7 530a 	ubfx	r3, r7, #20, #11
 801335a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801335e:	2b00      	cmp	r3, #0
 8013360:	dd0b      	ble.n	801337a <sulp+0x3a>
 8013362:	2400      	movs	r4, #0
 8013364:	051b      	lsls	r3, r3, #20
 8013366:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801336a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801336e:	4622      	mov	r2, r4
 8013370:	462b      	mov	r3, r5
 8013372:	f7ed f8bb 	bl	80004ec <__aeabi_dmul>
 8013376:	4604      	mov	r4, r0
 8013378:	460d      	mov	r5, r1
 801337a:	4620      	mov	r0, r4
 801337c:	4629      	mov	r1, r5
 801337e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013382:	0000      	movs	r0, r0
 8013384:	0000      	movs	r0, r0
	...

08013388 <_strtod_l>:
 8013388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801338c:	b09f      	sub	sp, #124	@ 0x7c
 801338e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013390:	2200      	movs	r2, #0
 8013392:	460c      	mov	r4, r1
 8013394:	921a      	str	r2, [sp, #104]	@ 0x68
 8013396:	f04f 0a00 	mov.w	sl, #0
 801339a:	f04f 0b00 	mov.w	fp, #0
 801339e:	460a      	mov	r2, r1
 80133a0:	9005      	str	r0, [sp, #20]
 80133a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80133a4:	7811      	ldrb	r1, [r2, #0]
 80133a6:	292b      	cmp	r1, #43	@ 0x2b
 80133a8:	d048      	beq.n	801343c <_strtod_l+0xb4>
 80133aa:	d836      	bhi.n	801341a <_strtod_l+0x92>
 80133ac:	290d      	cmp	r1, #13
 80133ae:	d830      	bhi.n	8013412 <_strtod_l+0x8a>
 80133b0:	2908      	cmp	r1, #8
 80133b2:	d830      	bhi.n	8013416 <_strtod_l+0x8e>
 80133b4:	2900      	cmp	r1, #0
 80133b6:	d039      	beq.n	801342c <_strtod_l+0xa4>
 80133b8:	2200      	movs	r2, #0
 80133ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80133bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80133be:	782a      	ldrb	r2, [r5, #0]
 80133c0:	2a30      	cmp	r2, #48	@ 0x30
 80133c2:	f040 80b0 	bne.w	8013526 <_strtod_l+0x19e>
 80133c6:	786a      	ldrb	r2, [r5, #1]
 80133c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80133cc:	2a58      	cmp	r2, #88	@ 0x58
 80133ce:	d16c      	bne.n	80134aa <_strtod_l+0x122>
 80133d0:	9302      	str	r3, [sp, #8]
 80133d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133d4:	4a8f      	ldr	r2, [pc, #572]	@ (8013614 <_strtod_l+0x28c>)
 80133d6:	9301      	str	r3, [sp, #4]
 80133d8:	ab1a      	add	r3, sp, #104	@ 0x68
 80133da:	9300      	str	r3, [sp, #0]
 80133dc:	9805      	ldr	r0, [sp, #20]
 80133de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80133e0:	a919      	add	r1, sp, #100	@ 0x64
 80133e2:	f002 ffcd 	bl	8016380 <__gethex>
 80133e6:	f010 060f 	ands.w	r6, r0, #15
 80133ea:	4604      	mov	r4, r0
 80133ec:	d005      	beq.n	80133fa <_strtod_l+0x72>
 80133ee:	2e06      	cmp	r6, #6
 80133f0:	d126      	bne.n	8013440 <_strtod_l+0xb8>
 80133f2:	2300      	movs	r3, #0
 80133f4:	3501      	adds	r5, #1
 80133f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80133f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80133fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	f040 8582 	bne.w	8013f06 <_strtod_l+0xb7e>
 8013402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013404:	b1bb      	cbz	r3, 8013436 <_strtod_l+0xae>
 8013406:	4650      	mov	r0, sl
 8013408:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 801340c:	b01f      	add	sp, #124	@ 0x7c
 801340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013412:	2920      	cmp	r1, #32
 8013414:	d1d0      	bne.n	80133b8 <_strtod_l+0x30>
 8013416:	3201      	adds	r2, #1
 8013418:	e7c3      	b.n	80133a2 <_strtod_l+0x1a>
 801341a:	292d      	cmp	r1, #45	@ 0x2d
 801341c:	d1cc      	bne.n	80133b8 <_strtod_l+0x30>
 801341e:	2101      	movs	r1, #1
 8013420:	910e      	str	r1, [sp, #56]	@ 0x38
 8013422:	1c51      	adds	r1, r2, #1
 8013424:	9119      	str	r1, [sp, #100]	@ 0x64
 8013426:	7852      	ldrb	r2, [r2, #1]
 8013428:	2a00      	cmp	r2, #0
 801342a:	d1c7      	bne.n	80133bc <_strtod_l+0x34>
 801342c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801342e:	9419      	str	r4, [sp, #100]	@ 0x64
 8013430:	2b00      	cmp	r3, #0
 8013432:	f040 8566 	bne.w	8013f02 <_strtod_l+0xb7a>
 8013436:	4650      	mov	r0, sl
 8013438:	4659      	mov	r1, fp
 801343a:	e7e7      	b.n	801340c <_strtod_l+0x84>
 801343c:	2100      	movs	r1, #0
 801343e:	e7ef      	b.n	8013420 <_strtod_l+0x98>
 8013440:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013442:	b13a      	cbz	r2, 8013454 <_strtod_l+0xcc>
 8013444:	2135      	movs	r1, #53	@ 0x35
 8013446:	a81c      	add	r0, sp, #112	@ 0x70
 8013448:	f003 feda 	bl	8017200 <__copybits>
 801344c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801344e:	9805      	ldr	r0, [sp, #20]
 8013450:	f003 faba 	bl	80169c8 <_Bfree>
 8013454:	3e01      	subs	r6, #1
 8013456:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013458:	2e04      	cmp	r6, #4
 801345a:	d806      	bhi.n	801346a <_strtod_l+0xe2>
 801345c:	e8df f006 	tbb	[pc, r6]
 8013460:	201d0314 	.word	0x201d0314
 8013464:	14          	.byte	0x14
 8013465:	00          	.byte	0x00
 8013466:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801346a:	05e1      	lsls	r1, r4, #23
 801346c:	bf48      	it	mi
 801346e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013472:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013476:	0d1b      	lsrs	r3, r3, #20
 8013478:	051b      	lsls	r3, r3, #20
 801347a:	2b00      	cmp	r3, #0
 801347c:	d1bd      	bne.n	80133fa <_strtod_l+0x72>
 801347e:	f002 f80f 	bl	80154a0 <__errno>
 8013482:	2322      	movs	r3, #34	@ 0x22
 8013484:	6003      	str	r3, [r0, #0]
 8013486:	e7b8      	b.n	80133fa <_strtod_l+0x72>
 8013488:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801348c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013490:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013494:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013498:	e7e7      	b.n	801346a <_strtod_l+0xe2>
 801349a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8013618 <_strtod_l+0x290>
 801349e:	e7e4      	b.n	801346a <_strtod_l+0xe2>
 80134a0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80134a4:	f04f 3aff 	mov.w	sl, #4294967295
 80134a8:	e7df      	b.n	801346a <_strtod_l+0xe2>
 80134aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80134ac:	1c5a      	adds	r2, r3, #1
 80134ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80134b0:	785b      	ldrb	r3, [r3, #1]
 80134b2:	2b30      	cmp	r3, #48	@ 0x30
 80134b4:	d0f9      	beq.n	80134aa <_strtod_l+0x122>
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d09f      	beq.n	80133fa <_strtod_l+0x72>
 80134ba:	2301      	movs	r3, #1
 80134bc:	2700      	movs	r7, #0
 80134be:	220a      	movs	r2, #10
 80134c0:	46b9      	mov	r9, r7
 80134c2:	9308      	str	r3, [sp, #32]
 80134c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80134c6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80134c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80134ca:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80134cc:	7805      	ldrb	r5, [r0, #0]
 80134ce:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80134d2:	b2d9      	uxtb	r1, r3
 80134d4:	2909      	cmp	r1, #9
 80134d6:	d928      	bls.n	801352a <_strtod_l+0x1a2>
 80134d8:	2201      	movs	r2, #1
 80134da:	4950      	ldr	r1, [pc, #320]	@ (801361c <_strtod_l+0x294>)
 80134dc:	f001 ff04 	bl	80152e8 <strncmp>
 80134e0:	2800      	cmp	r0, #0
 80134e2:	d032      	beq.n	801354a <_strtod_l+0x1c2>
 80134e4:	2000      	movs	r0, #0
 80134e6:	462a      	mov	r2, r5
 80134e8:	4603      	mov	r3, r0
 80134ea:	464d      	mov	r5, r9
 80134ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80134ee:	2a65      	cmp	r2, #101	@ 0x65
 80134f0:	d001      	beq.n	80134f6 <_strtod_l+0x16e>
 80134f2:	2a45      	cmp	r2, #69	@ 0x45
 80134f4:	d114      	bne.n	8013520 <_strtod_l+0x198>
 80134f6:	b91d      	cbnz	r5, 8013500 <_strtod_l+0x178>
 80134f8:	9a08      	ldr	r2, [sp, #32]
 80134fa:	4302      	orrs	r2, r0
 80134fc:	d096      	beq.n	801342c <_strtod_l+0xa4>
 80134fe:	2500      	movs	r5, #0
 8013500:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013502:	1c62      	adds	r2, r4, #1
 8013504:	9219      	str	r2, [sp, #100]	@ 0x64
 8013506:	7862      	ldrb	r2, [r4, #1]
 8013508:	2a2b      	cmp	r2, #43	@ 0x2b
 801350a:	d07a      	beq.n	8013602 <_strtod_l+0x27a>
 801350c:	2a2d      	cmp	r2, #45	@ 0x2d
 801350e:	d07e      	beq.n	801360e <_strtod_l+0x286>
 8013510:	f04f 0c00 	mov.w	ip, #0
 8013514:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013518:	2909      	cmp	r1, #9
 801351a:	f240 8085 	bls.w	8013628 <_strtod_l+0x2a0>
 801351e:	9419      	str	r4, [sp, #100]	@ 0x64
 8013520:	f04f 0800 	mov.w	r8, #0
 8013524:	e0a5      	b.n	8013672 <_strtod_l+0x2ea>
 8013526:	2300      	movs	r3, #0
 8013528:	e7c8      	b.n	80134bc <_strtod_l+0x134>
 801352a:	f1b9 0f08 	cmp.w	r9, #8
 801352e:	bfd8      	it	le
 8013530:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8013532:	f100 0001 	add.w	r0, r0, #1
 8013536:	bfd6      	itet	le
 8013538:	fb02 3301 	mlale	r3, r2, r1, r3
 801353c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8013540:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8013542:	f109 0901 	add.w	r9, r9, #1
 8013546:	9019      	str	r0, [sp, #100]	@ 0x64
 8013548:	e7bf      	b.n	80134ca <_strtod_l+0x142>
 801354a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801354c:	1c5a      	adds	r2, r3, #1
 801354e:	9219      	str	r2, [sp, #100]	@ 0x64
 8013550:	785a      	ldrb	r2, [r3, #1]
 8013552:	f1b9 0f00 	cmp.w	r9, #0
 8013556:	d03b      	beq.n	80135d0 <_strtod_l+0x248>
 8013558:	464d      	mov	r5, r9
 801355a:	900a      	str	r0, [sp, #40]	@ 0x28
 801355c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013560:	2b09      	cmp	r3, #9
 8013562:	d912      	bls.n	801358a <_strtod_l+0x202>
 8013564:	2301      	movs	r3, #1
 8013566:	e7c2      	b.n	80134ee <_strtod_l+0x166>
 8013568:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801356a:	3001      	adds	r0, #1
 801356c:	1c5a      	adds	r2, r3, #1
 801356e:	9219      	str	r2, [sp, #100]	@ 0x64
 8013570:	785a      	ldrb	r2, [r3, #1]
 8013572:	2a30      	cmp	r2, #48	@ 0x30
 8013574:	d0f8      	beq.n	8013568 <_strtod_l+0x1e0>
 8013576:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801357a:	2b08      	cmp	r3, #8
 801357c:	f200 84c8 	bhi.w	8013f10 <_strtod_l+0xb88>
 8013580:	900a      	str	r0, [sp, #40]	@ 0x28
 8013582:	2000      	movs	r0, #0
 8013584:	4605      	mov	r5, r0
 8013586:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013588:	930c      	str	r3, [sp, #48]	@ 0x30
 801358a:	3a30      	subs	r2, #48	@ 0x30
 801358c:	f100 0301 	add.w	r3, r0, #1
 8013590:	d018      	beq.n	80135c4 <_strtod_l+0x23c>
 8013592:	462e      	mov	r6, r5
 8013594:	f04f 0e0a 	mov.w	lr, #10
 8013598:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801359a:	4419      	add	r1, r3
 801359c:	910a      	str	r1, [sp, #40]	@ 0x28
 801359e:	1c71      	adds	r1, r6, #1
 80135a0:	eba1 0c05 	sub.w	ip, r1, r5
 80135a4:	4563      	cmp	r3, ip
 80135a6:	dc15      	bgt.n	80135d4 <_strtod_l+0x24c>
 80135a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80135ac:	182b      	adds	r3, r5, r0
 80135ae:	2b08      	cmp	r3, #8
 80135b0:	f105 0501 	add.w	r5, r5, #1
 80135b4:	4405      	add	r5, r0
 80135b6:	dc1a      	bgt.n	80135ee <_strtod_l+0x266>
 80135b8:	230a      	movs	r3, #10
 80135ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80135bc:	fb03 2301 	mla	r3, r3, r1, r2
 80135c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80135c2:	2300      	movs	r3, #0
 80135c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80135c6:	4618      	mov	r0, r3
 80135c8:	1c51      	adds	r1, r2, #1
 80135ca:	9119      	str	r1, [sp, #100]	@ 0x64
 80135cc:	7852      	ldrb	r2, [r2, #1]
 80135ce:	e7c5      	b.n	801355c <_strtod_l+0x1d4>
 80135d0:	4648      	mov	r0, r9
 80135d2:	e7ce      	b.n	8013572 <_strtod_l+0x1ea>
 80135d4:	2e08      	cmp	r6, #8
 80135d6:	dc05      	bgt.n	80135e4 <_strtod_l+0x25c>
 80135d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80135da:	fb0e f606 	mul.w	r6, lr, r6
 80135de:	960b      	str	r6, [sp, #44]	@ 0x2c
 80135e0:	460e      	mov	r6, r1
 80135e2:	e7dc      	b.n	801359e <_strtod_l+0x216>
 80135e4:	2910      	cmp	r1, #16
 80135e6:	bfd8      	it	le
 80135e8:	fb0e f707 	mulle.w	r7, lr, r7
 80135ec:	e7f8      	b.n	80135e0 <_strtod_l+0x258>
 80135ee:	2b0f      	cmp	r3, #15
 80135f0:	bfdc      	itt	le
 80135f2:	230a      	movle	r3, #10
 80135f4:	fb03 2707 	mlale	r7, r3, r7, r2
 80135f8:	e7e3      	b.n	80135c2 <_strtod_l+0x23a>
 80135fa:	2300      	movs	r3, #0
 80135fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80135fe:	2301      	movs	r3, #1
 8013600:	e77a      	b.n	80134f8 <_strtod_l+0x170>
 8013602:	f04f 0c00 	mov.w	ip, #0
 8013606:	1ca2      	adds	r2, r4, #2
 8013608:	9219      	str	r2, [sp, #100]	@ 0x64
 801360a:	78a2      	ldrb	r2, [r4, #2]
 801360c:	e782      	b.n	8013514 <_strtod_l+0x18c>
 801360e:	f04f 0c01 	mov.w	ip, #1
 8013612:	e7f8      	b.n	8013606 <_strtod_l+0x27e>
 8013614:	080195a8 	.word	0x080195a8
 8013618:	7ff00000 	.word	0x7ff00000
 801361c:	08019385 	.word	0x08019385
 8013620:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013622:	1c51      	adds	r1, r2, #1
 8013624:	9119      	str	r1, [sp, #100]	@ 0x64
 8013626:	7852      	ldrb	r2, [r2, #1]
 8013628:	2a30      	cmp	r2, #48	@ 0x30
 801362a:	d0f9      	beq.n	8013620 <_strtod_l+0x298>
 801362c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013630:	2908      	cmp	r1, #8
 8013632:	f63f af75 	bhi.w	8013520 <_strtod_l+0x198>
 8013636:	f04f 080a 	mov.w	r8, #10
 801363a:	3a30      	subs	r2, #48	@ 0x30
 801363c:	9209      	str	r2, [sp, #36]	@ 0x24
 801363e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013640:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013642:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013644:	1c56      	adds	r6, r2, #1
 8013646:	9619      	str	r6, [sp, #100]	@ 0x64
 8013648:	7852      	ldrb	r2, [r2, #1]
 801364a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801364e:	f1be 0f09 	cmp.w	lr, #9
 8013652:	d939      	bls.n	80136c8 <_strtod_l+0x340>
 8013654:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013656:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801365a:	1a76      	subs	r6, r6, r1
 801365c:	2e08      	cmp	r6, #8
 801365e:	dc03      	bgt.n	8013668 <_strtod_l+0x2e0>
 8013660:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013662:	4588      	cmp	r8, r1
 8013664:	bfa8      	it	ge
 8013666:	4688      	movge	r8, r1
 8013668:	f1bc 0f00 	cmp.w	ip, #0
 801366c:	d001      	beq.n	8013672 <_strtod_l+0x2ea>
 801366e:	f1c8 0800 	rsb	r8, r8, #0
 8013672:	2d00      	cmp	r5, #0
 8013674:	d14e      	bne.n	8013714 <_strtod_l+0x38c>
 8013676:	9908      	ldr	r1, [sp, #32]
 8013678:	4308      	orrs	r0, r1
 801367a:	f47f aebe 	bne.w	80133fa <_strtod_l+0x72>
 801367e:	2b00      	cmp	r3, #0
 8013680:	f47f aed4 	bne.w	801342c <_strtod_l+0xa4>
 8013684:	2a69      	cmp	r2, #105	@ 0x69
 8013686:	d028      	beq.n	80136da <_strtod_l+0x352>
 8013688:	dc25      	bgt.n	80136d6 <_strtod_l+0x34e>
 801368a:	2a49      	cmp	r2, #73	@ 0x49
 801368c:	d025      	beq.n	80136da <_strtod_l+0x352>
 801368e:	2a4e      	cmp	r2, #78	@ 0x4e
 8013690:	f47f aecc 	bne.w	801342c <_strtod_l+0xa4>
 8013694:	4999      	ldr	r1, [pc, #612]	@ (80138fc <_strtod_l+0x574>)
 8013696:	a819      	add	r0, sp, #100	@ 0x64
 8013698:	f003 f894 	bl	80167c4 <__match>
 801369c:	2800      	cmp	r0, #0
 801369e:	f43f aec5 	beq.w	801342c <_strtod_l+0xa4>
 80136a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	2b28      	cmp	r3, #40	@ 0x28
 80136a8:	d12e      	bne.n	8013708 <_strtod_l+0x380>
 80136aa:	4995      	ldr	r1, [pc, #596]	@ (8013900 <_strtod_l+0x578>)
 80136ac:	aa1c      	add	r2, sp, #112	@ 0x70
 80136ae:	a819      	add	r0, sp, #100	@ 0x64
 80136b0:	f003 f89c 	bl	80167ec <__hexnan>
 80136b4:	2805      	cmp	r0, #5
 80136b6:	d127      	bne.n	8013708 <_strtod_l+0x380>
 80136b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80136ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80136be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80136c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80136c6:	e698      	b.n	80133fa <_strtod_l+0x72>
 80136c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80136ca:	fb08 2101 	mla	r1, r8, r1, r2
 80136ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80136d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80136d4:	e7b5      	b.n	8013642 <_strtod_l+0x2ba>
 80136d6:	2a6e      	cmp	r2, #110	@ 0x6e
 80136d8:	e7da      	b.n	8013690 <_strtod_l+0x308>
 80136da:	498a      	ldr	r1, [pc, #552]	@ (8013904 <_strtod_l+0x57c>)
 80136dc:	a819      	add	r0, sp, #100	@ 0x64
 80136de:	f003 f871 	bl	80167c4 <__match>
 80136e2:	2800      	cmp	r0, #0
 80136e4:	f43f aea2 	beq.w	801342c <_strtod_l+0xa4>
 80136e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80136ea:	4987      	ldr	r1, [pc, #540]	@ (8013908 <_strtod_l+0x580>)
 80136ec:	3b01      	subs	r3, #1
 80136ee:	a819      	add	r0, sp, #100	@ 0x64
 80136f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80136f2:	f003 f867 	bl	80167c4 <__match>
 80136f6:	b910      	cbnz	r0, 80136fe <_strtod_l+0x376>
 80136f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80136fa:	3301      	adds	r3, #1
 80136fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80136fe:	f04f 0a00 	mov.w	sl, #0
 8013702:	f8df b208 	ldr.w	fp, [pc, #520]	@ 801390c <_strtod_l+0x584>
 8013706:	e678      	b.n	80133fa <_strtod_l+0x72>
 8013708:	4881      	ldr	r0, [pc, #516]	@ (8013910 <_strtod_l+0x588>)
 801370a:	f001 ff1b 	bl	8015544 <nan>
 801370e:	4682      	mov	sl, r0
 8013710:	468b      	mov	fp, r1
 8013712:	e672      	b.n	80133fa <_strtod_l+0x72>
 8013714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013716:	f1b9 0f00 	cmp.w	r9, #0
 801371a:	bf08      	it	eq
 801371c:	46a9      	moveq	r9, r5
 801371e:	eba8 0303 	sub.w	r3, r8, r3
 8013722:	2d10      	cmp	r5, #16
 8013724:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013726:	462c      	mov	r4, r5
 8013728:	9309      	str	r3, [sp, #36]	@ 0x24
 801372a:	bfa8      	it	ge
 801372c:	2410      	movge	r4, #16
 801372e:	f7ec fe63 	bl	80003f8 <__aeabi_ui2d>
 8013732:	2d09      	cmp	r5, #9
 8013734:	4682      	mov	sl, r0
 8013736:	468b      	mov	fp, r1
 8013738:	dc11      	bgt.n	801375e <_strtod_l+0x3d6>
 801373a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801373c:	2b00      	cmp	r3, #0
 801373e:	f43f ae5c 	beq.w	80133fa <_strtod_l+0x72>
 8013742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013744:	dd76      	ble.n	8013834 <_strtod_l+0x4ac>
 8013746:	2b16      	cmp	r3, #22
 8013748:	dc5d      	bgt.n	8013806 <_strtod_l+0x47e>
 801374a:	4972      	ldr	r1, [pc, #456]	@ (8013914 <_strtod_l+0x58c>)
 801374c:	4652      	mov	r2, sl
 801374e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013752:	465b      	mov	r3, fp
 8013754:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013758:	f7ec fec8 	bl	80004ec <__aeabi_dmul>
 801375c:	e7d7      	b.n	801370e <_strtod_l+0x386>
 801375e:	4b6d      	ldr	r3, [pc, #436]	@ (8013914 <_strtod_l+0x58c>)
 8013760:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013764:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013768:	f7ec fec0 	bl	80004ec <__aeabi_dmul>
 801376c:	4682      	mov	sl, r0
 801376e:	4638      	mov	r0, r7
 8013770:	468b      	mov	fp, r1
 8013772:	f7ec fe41 	bl	80003f8 <__aeabi_ui2d>
 8013776:	4602      	mov	r2, r0
 8013778:	460b      	mov	r3, r1
 801377a:	4650      	mov	r0, sl
 801377c:	4659      	mov	r1, fp
 801377e:	f7ec fcff 	bl	8000180 <__adddf3>
 8013782:	2d0f      	cmp	r5, #15
 8013784:	4682      	mov	sl, r0
 8013786:	468b      	mov	fp, r1
 8013788:	ddd7      	ble.n	801373a <_strtod_l+0x3b2>
 801378a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801378c:	1b2c      	subs	r4, r5, r4
 801378e:	441c      	add	r4, r3
 8013790:	2c00      	cmp	r4, #0
 8013792:	f340 8093 	ble.w	80138bc <_strtod_l+0x534>
 8013796:	f014 030f 	ands.w	r3, r4, #15
 801379a:	d00a      	beq.n	80137b2 <_strtod_l+0x42a>
 801379c:	495d      	ldr	r1, [pc, #372]	@ (8013914 <_strtod_l+0x58c>)
 801379e:	4652      	mov	r2, sl
 80137a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80137a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137a8:	465b      	mov	r3, fp
 80137aa:	f7ec fe9f 	bl	80004ec <__aeabi_dmul>
 80137ae:	4682      	mov	sl, r0
 80137b0:	468b      	mov	fp, r1
 80137b2:	f034 040f 	bics.w	r4, r4, #15
 80137b6:	d073      	beq.n	80138a0 <_strtod_l+0x518>
 80137b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80137bc:	dd49      	ble.n	8013852 <_strtod_l+0x4ca>
 80137be:	2400      	movs	r4, #0
 80137c0:	46a0      	mov	r8, r4
 80137c2:	46a1      	mov	r9, r4
 80137c4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80137c6:	2322      	movs	r3, #34	@ 0x22
 80137c8:	f04f 0a00 	mov.w	sl, #0
 80137cc:	9a05      	ldr	r2, [sp, #20]
 80137ce:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 801390c <_strtod_l+0x584>
 80137d2:	6013      	str	r3, [r2, #0]
 80137d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	f43f ae0f 	beq.w	80133fa <_strtod_l+0x72>
 80137dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80137de:	9805      	ldr	r0, [sp, #20]
 80137e0:	f003 f8f2 	bl	80169c8 <_Bfree>
 80137e4:	4649      	mov	r1, r9
 80137e6:	9805      	ldr	r0, [sp, #20]
 80137e8:	f003 f8ee 	bl	80169c8 <_Bfree>
 80137ec:	4641      	mov	r1, r8
 80137ee:	9805      	ldr	r0, [sp, #20]
 80137f0:	f003 f8ea 	bl	80169c8 <_Bfree>
 80137f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80137f6:	9805      	ldr	r0, [sp, #20]
 80137f8:	f003 f8e6 	bl	80169c8 <_Bfree>
 80137fc:	4621      	mov	r1, r4
 80137fe:	9805      	ldr	r0, [sp, #20]
 8013800:	f003 f8e2 	bl	80169c8 <_Bfree>
 8013804:	e5f9      	b.n	80133fa <_strtod_l+0x72>
 8013806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013808:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801380c:	4293      	cmp	r3, r2
 801380e:	dbbc      	blt.n	801378a <_strtod_l+0x402>
 8013810:	4c40      	ldr	r4, [pc, #256]	@ (8013914 <_strtod_l+0x58c>)
 8013812:	f1c5 050f 	rsb	r5, r5, #15
 8013816:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801381a:	4652      	mov	r2, sl
 801381c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013820:	465b      	mov	r3, fp
 8013822:	f7ec fe63 	bl	80004ec <__aeabi_dmul>
 8013826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013828:	1b5d      	subs	r5, r3, r5
 801382a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801382e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013832:	e791      	b.n	8013758 <_strtod_l+0x3d0>
 8013834:	3316      	adds	r3, #22
 8013836:	dba8      	blt.n	801378a <_strtod_l+0x402>
 8013838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801383a:	4650      	mov	r0, sl
 801383c:	eba3 0808 	sub.w	r8, r3, r8
 8013840:	4b34      	ldr	r3, [pc, #208]	@ (8013914 <_strtod_l+0x58c>)
 8013842:	4659      	mov	r1, fp
 8013844:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013848:	e9d8 2300 	ldrd	r2, r3, [r8]
 801384c:	f7ec ff78 	bl	8000740 <__aeabi_ddiv>
 8013850:	e75d      	b.n	801370e <_strtod_l+0x386>
 8013852:	2300      	movs	r3, #0
 8013854:	4650      	mov	r0, sl
 8013856:	4659      	mov	r1, fp
 8013858:	461e      	mov	r6, r3
 801385a:	4f2f      	ldr	r7, [pc, #188]	@ (8013918 <_strtod_l+0x590>)
 801385c:	1124      	asrs	r4, r4, #4
 801385e:	2c01      	cmp	r4, #1
 8013860:	dc21      	bgt.n	80138a6 <_strtod_l+0x51e>
 8013862:	b10b      	cbz	r3, 8013868 <_strtod_l+0x4e0>
 8013864:	4682      	mov	sl, r0
 8013866:	468b      	mov	fp, r1
 8013868:	492b      	ldr	r1, [pc, #172]	@ (8013918 <_strtod_l+0x590>)
 801386a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801386e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013872:	4652      	mov	r2, sl
 8013874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013878:	465b      	mov	r3, fp
 801387a:	f7ec fe37 	bl	80004ec <__aeabi_dmul>
 801387e:	4b23      	ldr	r3, [pc, #140]	@ (801390c <_strtod_l+0x584>)
 8013880:	460a      	mov	r2, r1
 8013882:	400b      	ands	r3, r1
 8013884:	4925      	ldr	r1, [pc, #148]	@ (801391c <_strtod_l+0x594>)
 8013886:	4682      	mov	sl, r0
 8013888:	428b      	cmp	r3, r1
 801388a:	d898      	bhi.n	80137be <_strtod_l+0x436>
 801388c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013890:	428b      	cmp	r3, r1
 8013892:	bf86      	itte	hi
 8013894:	f04f 3aff 	movhi.w	sl, #4294967295
 8013898:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8013920 <_strtod_l+0x598>
 801389c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80138a0:	2300      	movs	r3, #0
 80138a2:	9308      	str	r3, [sp, #32]
 80138a4:	e076      	b.n	8013994 <_strtod_l+0x60c>
 80138a6:	07e2      	lsls	r2, r4, #31
 80138a8:	d504      	bpl.n	80138b4 <_strtod_l+0x52c>
 80138aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80138ae:	f7ec fe1d 	bl	80004ec <__aeabi_dmul>
 80138b2:	2301      	movs	r3, #1
 80138b4:	3601      	adds	r6, #1
 80138b6:	1064      	asrs	r4, r4, #1
 80138b8:	3708      	adds	r7, #8
 80138ba:	e7d0      	b.n	801385e <_strtod_l+0x4d6>
 80138bc:	d0f0      	beq.n	80138a0 <_strtod_l+0x518>
 80138be:	4264      	negs	r4, r4
 80138c0:	f014 020f 	ands.w	r2, r4, #15
 80138c4:	d00a      	beq.n	80138dc <_strtod_l+0x554>
 80138c6:	4b13      	ldr	r3, [pc, #76]	@ (8013914 <_strtod_l+0x58c>)
 80138c8:	4650      	mov	r0, sl
 80138ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138ce:	4659      	mov	r1, fp
 80138d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d4:	f7ec ff34 	bl	8000740 <__aeabi_ddiv>
 80138d8:	4682      	mov	sl, r0
 80138da:	468b      	mov	fp, r1
 80138dc:	1124      	asrs	r4, r4, #4
 80138de:	d0df      	beq.n	80138a0 <_strtod_l+0x518>
 80138e0:	2c1f      	cmp	r4, #31
 80138e2:	dd1f      	ble.n	8013924 <_strtod_l+0x59c>
 80138e4:	2400      	movs	r4, #0
 80138e6:	46a0      	mov	r8, r4
 80138e8:	46a1      	mov	r9, r4
 80138ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80138ec:	2322      	movs	r3, #34	@ 0x22
 80138ee:	9a05      	ldr	r2, [sp, #20]
 80138f0:	f04f 0a00 	mov.w	sl, #0
 80138f4:	f04f 0b00 	mov.w	fp, #0
 80138f8:	6013      	str	r3, [r2, #0]
 80138fa:	e76b      	b.n	80137d4 <_strtod_l+0x44c>
 80138fc:	08019394 	.word	0x08019394
 8013900:	08019594 	.word	0x08019594
 8013904:	0801938c 	.word	0x0801938c
 8013908:	0801943a 	.word	0x0801943a
 801390c:	7ff00000 	.word	0x7ff00000
 8013910:	08019384 	.word	0x08019384
 8013914:	08019720 	.word	0x08019720
 8013918:	080196f8 	.word	0x080196f8
 801391c:	7ca00000 	.word	0x7ca00000
 8013920:	7fefffff 	.word	0x7fefffff
 8013924:	f014 0310 	ands.w	r3, r4, #16
 8013928:	bf18      	it	ne
 801392a:	236a      	movne	r3, #106	@ 0x6a
 801392c:	4650      	mov	r0, sl
 801392e:	9308      	str	r3, [sp, #32]
 8013930:	4659      	mov	r1, fp
 8013932:	2300      	movs	r3, #0
 8013934:	4e77      	ldr	r6, [pc, #476]	@ (8013b14 <_strtod_l+0x78c>)
 8013936:	07e7      	lsls	r7, r4, #31
 8013938:	d504      	bpl.n	8013944 <_strtod_l+0x5bc>
 801393a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801393e:	f7ec fdd5 	bl	80004ec <__aeabi_dmul>
 8013942:	2301      	movs	r3, #1
 8013944:	1064      	asrs	r4, r4, #1
 8013946:	f106 0608 	add.w	r6, r6, #8
 801394a:	d1f4      	bne.n	8013936 <_strtod_l+0x5ae>
 801394c:	b10b      	cbz	r3, 8013952 <_strtod_l+0x5ca>
 801394e:	4682      	mov	sl, r0
 8013950:	468b      	mov	fp, r1
 8013952:	9b08      	ldr	r3, [sp, #32]
 8013954:	b1b3      	cbz	r3, 8013984 <_strtod_l+0x5fc>
 8013956:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801395a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801395e:	2b00      	cmp	r3, #0
 8013960:	4659      	mov	r1, fp
 8013962:	dd0f      	ble.n	8013984 <_strtod_l+0x5fc>
 8013964:	2b1f      	cmp	r3, #31
 8013966:	dd58      	ble.n	8013a1a <_strtod_l+0x692>
 8013968:	2b34      	cmp	r3, #52	@ 0x34
 801396a:	bfd8      	it	le
 801396c:	f04f 33ff 	movle.w	r3, #4294967295
 8013970:	f04f 0a00 	mov.w	sl, #0
 8013974:	bfcf      	iteee	gt
 8013976:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801397a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801397e:	4093      	lslle	r3, r2
 8013980:	ea03 0b01 	andle.w	fp, r3, r1
 8013984:	2200      	movs	r2, #0
 8013986:	2300      	movs	r3, #0
 8013988:	4650      	mov	r0, sl
 801398a:	4659      	mov	r1, fp
 801398c:	f7ed f816 	bl	80009bc <__aeabi_dcmpeq>
 8013990:	2800      	cmp	r0, #0
 8013992:	d1a7      	bne.n	80138e4 <_strtod_l+0x55c>
 8013994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013996:	464a      	mov	r2, r9
 8013998:	9300      	str	r3, [sp, #0]
 801399a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801399c:	462b      	mov	r3, r5
 801399e:	9805      	ldr	r0, [sp, #20]
 80139a0:	f003 f87a 	bl	8016a98 <__s2b>
 80139a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80139a6:	2800      	cmp	r0, #0
 80139a8:	f43f af09 	beq.w	80137be <_strtod_l+0x436>
 80139ac:	2400      	movs	r4, #0
 80139ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80139b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139b2:	2a00      	cmp	r2, #0
 80139b4:	eba3 0308 	sub.w	r3, r3, r8
 80139b8:	bfa8      	it	ge
 80139ba:	2300      	movge	r3, #0
 80139bc:	46a0      	mov	r8, r4
 80139be:	9312      	str	r3, [sp, #72]	@ 0x48
 80139c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80139c4:	9316      	str	r3, [sp, #88]	@ 0x58
 80139c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80139c8:	9805      	ldr	r0, [sp, #20]
 80139ca:	6859      	ldr	r1, [r3, #4]
 80139cc:	f002 ffbc 	bl	8016948 <_Balloc>
 80139d0:	4681      	mov	r9, r0
 80139d2:	2800      	cmp	r0, #0
 80139d4:	f43f aef7 	beq.w	80137c6 <_strtod_l+0x43e>
 80139d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80139da:	300c      	adds	r0, #12
 80139dc:	691a      	ldr	r2, [r3, #16]
 80139de:	f103 010c 	add.w	r1, r3, #12
 80139e2:	3202      	adds	r2, #2
 80139e4:	0092      	lsls	r2, r2, #2
 80139e6:	f001 fd9e 	bl	8015526 <memcpy>
 80139ea:	ab1c      	add	r3, sp, #112	@ 0x70
 80139ec:	9301      	str	r3, [sp, #4]
 80139ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	4652      	mov	r2, sl
 80139f4:	465b      	mov	r3, fp
 80139f6:	9805      	ldr	r0, [sp, #20]
 80139f8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80139fc:	f003 fb78 	bl	80170f0 <__d2b>
 8013a00:	901a      	str	r0, [sp, #104]	@ 0x68
 8013a02:	2800      	cmp	r0, #0
 8013a04:	f43f aedf 	beq.w	80137c6 <_strtod_l+0x43e>
 8013a08:	2101      	movs	r1, #1
 8013a0a:	9805      	ldr	r0, [sp, #20]
 8013a0c:	f003 f8da 	bl	8016bc4 <__i2b>
 8013a10:	4680      	mov	r8, r0
 8013a12:	b948      	cbnz	r0, 8013a28 <_strtod_l+0x6a0>
 8013a14:	f04f 0800 	mov.w	r8, #0
 8013a18:	e6d5      	b.n	80137c6 <_strtod_l+0x43e>
 8013a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8013a22:	ea03 0a0a 	and.w	sl, r3, sl
 8013a26:	e7ad      	b.n	8013984 <_strtod_l+0x5fc>
 8013a28:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013a2a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013a2c:	2d00      	cmp	r5, #0
 8013a2e:	bfab      	itete	ge
 8013a30:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013a32:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013a34:	18ef      	addge	r7, r5, r3
 8013a36:	1b5e      	sublt	r6, r3, r5
 8013a38:	9b08      	ldr	r3, [sp, #32]
 8013a3a:	bfa8      	it	ge
 8013a3c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013a3e:	eba5 0503 	sub.w	r5, r5, r3
 8013a42:	4415      	add	r5, r2
 8013a44:	4b34      	ldr	r3, [pc, #208]	@ (8013b18 <_strtod_l+0x790>)
 8013a46:	f105 35ff 	add.w	r5, r5, #4294967295
 8013a4a:	bfb8      	it	lt
 8013a4c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013a4e:	429d      	cmp	r5, r3
 8013a50:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013a54:	da50      	bge.n	8013af8 <_strtod_l+0x770>
 8013a56:	1b5b      	subs	r3, r3, r5
 8013a58:	2b1f      	cmp	r3, #31
 8013a5a:	f04f 0101 	mov.w	r1, #1
 8013a5e:	eba2 0203 	sub.w	r2, r2, r3
 8013a62:	dc3d      	bgt.n	8013ae0 <_strtod_l+0x758>
 8013a64:	fa01 f303 	lsl.w	r3, r1, r3
 8013a68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	9310      	str	r3, [sp, #64]	@ 0x40
 8013a6e:	18bd      	adds	r5, r7, r2
 8013a70:	9b08      	ldr	r3, [sp, #32]
 8013a72:	42af      	cmp	r7, r5
 8013a74:	4416      	add	r6, r2
 8013a76:	441e      	add	r6, r3
 8013a78:	463b      	mov	r3, r7
 8013a7a:	bfa8      	it	ge
 8013a7c:	462b      	movge	r3, r5
 8013a7e:	42b3      	cmp	r3, r6
 8013a80:	bfa8      	it	ge
 8013a82:	4633      	movge	r3, r6
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	bfc2      	ittt	gt
 8013a88:	1aed      	subgt	r5, r5, r3
 8013a8a:	1af6      	subgt	r6, r6, r3
 8013a8c:	1aff      	subgt	r7, r7, r3
 8013a8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	dd16      	ble.n	8013ac2 <_strtod_l+0x73a>
 8013a94:	4641      	mov	r1, r8
 8013a96:	461a      	mov	r2, r3
 8013a98:	9805      	ldr	r0, [sp, #20]
 8013a9a:	f003 f94b 	bl	8016d34 <__pow5mult>
 8013a9e:	4680      	mov	r8, r0
 8013aa0:	2800      	cmp	r0, #0
 8013aa2:	d0b7      	beq.n	8013a14 <_strtod_l+0x68c>
 8013aa4:	4601      	mov	r1, r0
 8013aa6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013aa8:	9805      	ldr	r0, [sp, #20]
 8013aaa:	f003 f8a1 	bl	8016bf0 <__multiply>
 8013aae:	900a      	str	r0, [sp, #40]	@ 0x28
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	f43f ae88 	beq.w	80137c6 <_strtod_l+0x43e>
 8013ab6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013ab8:	9805      	ldr	r0, [sp, #20]
 8013aba:	f002 ff85 	bl	80169c8 <_Bfree>
 8013abe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ac2:	2d00      	cmp	r5, #0
 8013ac4:	dc1d      	bgt.n	8013b02 <_strtod_l+0x77a>
 8013ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	dd27      	ble.n	8013b1c <_strtod_l+0x794>
 8013acc:	4649      	mov	r1, r9
 8013ace:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013ad0:	9805      	ldr	r0, [sp, #20]
 8013ad2:	f003 f92f 	bl	8016d34 <__pow5mult>
 8013ad6:	4681      	mov	r9, r0
 8013ad8:	bb00      	cbnz	r0, 8013b1c <_strtod_l+0x794>
 8013ada:	f04f 0900 	mov.w	r9, #0
 8013ade:	e672      	b.n	80137c6 <_strtod_l+0x43e>
 8013ae0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013ae4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013ae8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013aec:	35e2      	adds	r5, #226	@ 0xe2
 8013aee:	fa01 f305 	lsl.w	r3, r1, r5
 8013af2:	9310      	str	r3, [sp, #64]	@ 0x40
 8013af4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013af6:	e7ba      	b.n	8013a6e <_strtod_l+0x6e6>
 8013af8:	2300      	movs	r3, #0
 8013afa:	9310      	str	r3, [sp, #64]	@ 0x40
 8013afc:	2301      	movs	r3, #1
 8013afe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013b00:	e7b5      	b.n	8013a6e <_strtod_l+0x6e6>
 8013b02:	462a      	mov	r2, r5
 8013b04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013b06:	9805      	ldr	r0, [sp, #20]
 8013b08:	f003 f96e 	bl	8016de8 <__lshift>
 8013b0c:	901a      	str	r0, [sp, #104]	@ 0x68
 8013b0e:	2800      	cmp	r0, #0
 8013b10:	d1d9      	bne.n	8013ac6 <_strtod_l+0x73e>
 8013b12:	e658      	b.n	80137c6 <_strtod_l+0x43e>
 8013b14:	080195c0 	.word	0x080195c0
 8013b18:	fffffc02 	.word	0xfffffc02
 8013b1c:	2e00      	cmp	r6, #0
 8013b1e:	dd07      	ble.n	8013b30 <_strtod_l+0x7a8>
 8013b20:	4649      	mov	r1, r9
 8013b22:	4632      	mov	r2, r6
 8013b24:	9805      	ldr	r0, [sp, #20]
 8013b26:	f003 f95f 	bl	8016de8 <__lshift>
 8013b2a:	4681      	mov	r9, r0
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	d0d4      	beq.n	8013ada <_strtod_l+0x752>
 8013b30:	2f00      	cmp	r7, #0
 8013b32:	dd08      	ble.n	8013b46 <_strtod_l+0x7be>
 8013b34:	4641      	mov	r1, r8
 8013b36:	463a      	mov	r2, r7
 8013b38:	9805      	ldr	r0, [sp, #20]
 8013b3a:	f003 f955 	bl	8016de8 <__lshift>
 8013b3e:	4680      	mov	r8, r0
 8013b40:	2800      	cmp	r0, #0
 8013b42:	f43f ae40 	beq.w	80137c6 <_strtod_l+0x43e>
 8013b46:	464a      	mov	r2, r9
 8013b48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013b4a:	9805      	ldr	r0, [sp, #20]
 8013b4c:	f003 f9d4 	bl	8016ef8 <__mdiff>
 8013b50:	4604      	mov	r4, r0
 8013b52:	2800      	cmp	r0, #0
 8013b54:	f43f ae37 	beq.w	80137c6 <_strtod_l+0x43e>
 8013b58:	68c3      	ldr	r3, [r0, #12]
 8013b5a:	4641      	mov	r1, r8
 8013b5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013b5e:	2300      	movs	r3, #0
 8013b60:	60c3      	str	r3, [r0, #12]
 8013b62:	f003 f9ad 	bl	8016ec0 <__mcmp>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	da3d      	bge.n	8013be6 <_strtod_l+0x85e>
 8013b6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b6c:	ea53 030a 	orrs.w	r3, r3, sl
 8013b70:	d163      	bne.n	8013c3a <_strtod_l+0x8b2>
 8013b72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d15f      	bne.n	8013c3a <_strtod_l+0x8b2>
 8013b7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013b7e:	0d1b      	lsrs	r3, r3, #20
 8013b80:	051b      	lsls	r3, r3, #20
 8013b82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013b86:	d958      	bls.n	8013c3a <_strtod_l+0x8b2>
 8013b88:	6963      	ldr	r3, [r4, #20]
 8013b8a:	b913      	cbnz	r3, 8013b92 <_strtod_l+0x80a>
 8013b8c:	6923      	ldr	r3, [r4, #16]
 8013b8e:	2b01      	cmp	r3, #1
 8013b90:	dd53      	ble.n	8013c3a <_strtod_l+0x8b2>
 8013b92:	4621      	mov	r1, r4
 8013b94:	2201      	movs	r2, #1
 8013b96:	9805      	ldr	r0, [sp, #20]
 8013b98:	f003 f926 	bl	8016de8 <__lshift>
 8013b9c:	4641      	mov	r1, r8
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	f003 f98e 	bl	8016ec0 <__mcmp>
 8013ba4:	2800      	cmp	r0, #0
 8013ba6:	dd48      	ble.n	8013c3a <_strtod_l+0x8b2>
 8013ba8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013bac:	9a08      	ldr	r2, [sp, #32]
 8013bae:	0d1b      	lsrs	r3, r3, #20
 8013bb0:	051b      	lsls	r3, r3, #20
 8013bb2:	2a00      	cmp	r2, #0
 8013bb4:	d062      	beq.n	8013c7c <_strtod_l+0x8f4>
 8013bb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013bba:	d85f      	bhi.n	8013c7c <_strtod_l+0x8f4>
 8013bbc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013bc0:	f67f ae94 	bls.w	80138ec <_strtod_l+0x564>
 8013bc4:	4650      	mov	r0, sl
 8013bc6:	4659      	mov	r1, fp
 8013bc8:	4ba3      	ldr	r3, [pc, #652]	@ (8013e58 <_strtod_l+0xad0>)
 8013bca:	2200      	movs	r2, #0
 8013bcc:	f7ec fc8e 	bl	80004ec <__aeabi_dmul>
 8013bd0:	4ba2      	ldr	r3, [pc, #648]	@ (8013e5c <_strtod_l+0xad4>)
 8013bd2:	4682      	mov	sl, r0
 8013bd4:	400b      	ands	r3, r1
 8013bd6:	468b      	mov	fp, r1
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	f47f adff 	bne.w	80137dc <_strtod_l+0x454>
 8013bde:	2322      	movs	r3, #34	@ 0x22
 8013be0:	9a05      	ldr	r2, [sp, #20]
 8013be2:	6013      	str	r3, [r2, #0]
 8013be4:	e5fa      	b.n	80137dc <_strtod_l+0x454>
 8013be6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013bea:	d165      	bne.n	8013cb8 <_strtod_l+0x930>
 8013bec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013bee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013bf2:	b35a      	cbz	r2, 8013c4c <_strtod_l+0x8c4>
 8013bf4:	4a9a      	ldr	r2, [pc, #616]	@ (8013e60 <_strtod_l+0xad8>)
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d12b      	bne.n	8013c52 <_strtod_l+0x8ca>
 8013bfa:	9b08      	ldr	r3, [sp, #32]
 8013bfc:	4651      	mov	r1, sl
 8013bfe:	b303      	cbz	r3, 8013c42 <_strtod_l+0x8ba>
 8013c00:	465a      	mov	r2, fp
 8013c02:	4b96      	ldr	r3, [pc, #600]	@ (8013e5c <_strtod_l+0xad4>)
 8013c04:	4013      	ands	r3, r2
 8013c06:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0e:	d81b      	bhi.n	8013c48 <_strtod_l+0x8c0>
 8013c10:	0d1b      	lsrs	r3, r3, #20
 8013c12:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013c16:	fa02 f303 	lsl.w	r3, r2, r3
 8013c1a:	4299      	cmp	r1, r3
 8013c1c:	d119      	bne.n	8013c52 <_strtod_l+0x8ca>
 8013c1e:	4b91      	ldr	r3, [pc, #580]	@ (8013e64 <_strtod_l+0xadc>)
 8013c20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d102      	bne.n	8013c2c <_strtod_l+0x8a4>
 8013c26:	3101      	adds	r1, #1
 8013c28:	f43f adcd 	beq.w	80137c6 <_strtod_l+0x43e>
 8013c2c:	f04f 0a00 	mov.w	sl, #0
 8013c30:	4b8a      	ldr	r3, [pc, #552]	@ (8013e5c <_strtod_l+0xad4>)
 8013c32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013c34:	401a      	ands	r2, r3
 8013c36:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013c3a:	9b08      	ldr	r3, [sp, #32]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d1c1      	bne.n	8013bc4 <_strtod_l+0x83c>
 8013c40:	e5cc      	b.n	80137dc <_strtod_l+0x454>
 8013c42:	f04f 33ff 	mov.w	r3, #4294967295
 8013c46:	e7e8      	b.n	8013c1a <_strtod_l+0x892>
 8013c48:	4613      	mov	r3, r2
 8013c4a:	e7e6      	b.n	8013c1a <_strtod_l+0x892>
 8013c4c:	ea53 030a 	orrs.w	r3, r3, sl
 8013c50:	d0aa      	beq.n	8013ba8 <_strtod_l+0x820>
 8013c52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013c54:	b1db      	cbz	r3, 8013c8e <_strtod_l+0x906>
 8013c56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013c58:	4213      	tst	r3, r2
 8013c5a:	d0ee      	beq.n	8013c3a <_strtod_l+0x8b2>
 8013c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c5e:	4650      	mov	r0, sl
 8013c60:	4659      	mov	r1, fp
 8013c62:	9a08      	ldr	r2, [sp, #32]
 8013c64:	b1bb      	cbz	r3, 8013c96 <_strtod_l+0x90e>
 8013c66:	f7ff fb6b 	bl	8013340 <sulp>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	460b      	mov	r3, r1
 8013c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013c72:	f7ec fa85 	bl	8000180 <__adddf3>
 8013c76:	4682      	mov	sl, r0
 8013c78:	468b      	mov	fp, r1
 8013c7a:	e7de      	b.n	8013c3a <_strtod_l+0x8b2>
 8013c7c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013c80:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013c84:	f04f 3aff 	mov.w	sl, #4294967295
 8013c88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013c8c:	e7d5      	b.n	8013c3a <_strtod_l+0x8b2>
 8013c8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013c90:	ea13 0f0a 	tst.w	r3, sl
 8013c94:	e7e1      	b.n	8013c5a <_strtod_l+0x8d2>
 8013c96:	f7ff fb53 	bl	8013340 <sulp>
 8013c9a:	4602      	mov	r2, r0
 8013c9c:	460b      	mov	r3, r1
 8013c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013ca2:	f7ec fa6b 	bl	800017c <__aeabi_dsub>
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	2300      	movs	r3, #0
 8013caa:	4682      	mov	sl, r0
 8013cac:	468b      	mov	fp, r1
 8013cae:	f7ec fe85 	bl	80009bc <__aeabi_dcmpeq>
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d0c1      	beq.n	8013c3a <_strtod_l+0x8b2>
 8013cb6:	e619      	b.n	80138ec <_strtod_l+0x564>
 8013cb8:	4641      	mov	r1, r8
 8013cba:	4620      	mov	r0, r4
 8013cbc:	f003 fa70 	bl	80171a0 <__ratio>
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013cc6:	4606      	mov	r6, r0
 8013cc8:	460f      	mov	r7, r1
 8013cca:	f7ec fe8b 	bl	80009e4 <__aeabi_dcmple>
 8013cce:	2800      	cmp	r0, #0
 8013cd0:	d06d      	beq.n	8013dae <_strtod_l+0xa26>
 8013cd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d178      	bne.n	8013dca <_strtod_l+0xa42>
 8013cd8:	f1ba 0f00 	cmp.w	sl, #0
 8013cdc:	d156      	bne.n	8013d8c <_strtod_l+0xa04>
 8013cde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d158      	bne.n	8013d9a <_strtod_l+0xa12>
 8013ce8:	2200      	movs	r2, #0
 8013cea:	4630      	mov	r0, r6
 8013cec:	4639      	mov	r1, r7
 8013cee:	4b5e      	ldr	r3, [pc, #376]	@ (8013e68 <_strtod_l+0xae0>)
 8013cf0:	f7ec fe6e 	bl	80009d0 <__aeabi_dcmplt>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	d157      	bne.n	8013da8 <_strtod_l+0xa20>
 8013cf8:	4630      	mov	r0, r6
 8013cfa:	4639      	mov	r1, r7
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8013e6c <_strtod_l+0xae4>)
 8013d00:	f7ec fbf4 	bl	80004ec <__aeabi_dmul>
 8013d04:	4606      	mov	r6, r0
 8013d06:	460f      	mov	r7, r1
 8013d08:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013d0c:	9606      	str	r6, [sp, #24]
 8013d0e:	9307      	str	r3, [sp, #28]
 8013d10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d14:	4d51      	ldr	r5, [pc, #324]	@ (8013e5c <_strtod_l+0xad4>)
 8013d16:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013d1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d1c:	401d      	ands	r5, r3
 8013d1e:	4b54      	ldr	r3, [pc, #336]	@ (8013e70 <_strtod_l+0xae8>)
 8013d20:	429d      	cmp	r5, r3
 8013d22:	f040 80ab 	bne.w	8013e7c <_strtod_l+0xaf4>
 8013d26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d28:	4650      	mov	r0, sl
 8013d2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013d2e:	4659      	mov	r1, fp
 8013d30:	f003 f976 	bl	8017020 <__ulp>
 8013d34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d38:	f7ec fbd8 	bl	80004ec <__aeabi_dmul>
 8013d3c:	4652      	mov	r2, sl
 8013d3e:	465b      	mov	r3, fp
 8013d40:	f7ec fa1e 	bl	8000180 <__adddf3>
 8013d44:	460b      	mov	r3, r1
 8013d46:	4945      	ldr	r1, [pc, #276]	@ (8013e5c <_strtod_l+0xad4>)
 8013d48:	4a4a      	ldr	r2, [pc, #296]	@ (8013e74 <_strtod_l+0xaec>)
 8013d4a:	4019      	ands	r1, r3
 8013d4c:	4291      	cmp	r1, r2
 8013d4e:	4682      	mov	sl, r0
 8013d50:	d942      	bls.n	8013dd8 <_strtod_l+0xa50>
 8013d52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013d54:	4b43      	ldr	r3, [pc, #268]	@ (8013e64 <_strtod_l+0xadc>)
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d103      	bne.n	8013d62 <_strtod_l+0x9da>
 8013d5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	f43f ad32 	beq.w	80137c6 <_strtod_l+0x43e>
 8013d62:	f04f 3aff 	mov.w	sl, #4294967295
 8013d66:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8013e64 <_strtod_l+0xadc>
 8013d6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013d6c:	9805      	ldr	r0, [sp, #20]
 8013d6e:	f002 fe2b 	bl	80169c8 <_Bfree>
 8013d72:	4649      	mov	r1, r9
 8013d74:	9805      	ldr	r0, [sp, #20]
 8013d76:	f002 fe27 	bl	80169c8 <_Bfree>
 8013d7a:	4641      	mov	r1, r8
 8013d7c:	9805      	ldr	r0, [sp, #20]
 8013d7e:	f002 fe23 	bl	80169c8 <_Bfree>
 8013d82:	4621      	mov	r1, r4
 8013d84:	9805      	ldr	r0, [sp, #20]
 8013d86:	f002 fe1f 	bl	80169c8 <_Bfree>
 8013d8a:	e61c      	b.n	80139c6 <_strtod_l+0x63e>
 8013d8c:	f1ba 0f01 	cmp.w	sl, #1
 8013d90:	d103      	bne.n	8013d9a <_strtod_l+0xa12>
 8013d92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	f43f ada9 	beq.w	80138ec <_strtod_l+0x564>
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	4b36      	ldr	r3, [pc, #216]	@ (8013e78 <_strtod_l+0xaf0>)
 8013d9e:	2600      	movs	r6, #0
 8013da0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013da4:	4f30      	ldr	r7, [pc, #192]	@ (8013e68 <_strtod_l+0xae0>)
 8013da6:	e7b3      	b.n	8013d10 <_strtod_l+0x988>
 8013da8:	2600      	movs	r6, #0
 8013daa:	4f30      	ldr	r7, [pc, #192]	@ (8013e6c <_strtod_l+0xae4>)
 8013dac:	e7ac      	b.n	8013d08 <_strtod_l+0x980>
 8013dae:	4630      	mov	r0, r6
 8013db0:	4639      	mov	r1, r7
 8013db2:	4b2e      	ldr	r3, [pc, #184]	@ (8013e6c <_strtod_l+0xae4>)
 8013db4:	2200      	movs	r2, #0
 8013db6:	f7ec fb99 	bl	80004ec <__aeabi_dmul>
 8013dba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013dbc:	4606      	mov	r6, r0
 8013dbe:	460f      	mov	r7, r1
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d0a1      	beq.n	8013d08 <_strtod_l+0x980>
 8013dc4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013dc8:	e7a2      	b.n	8013d10 <_strtod_l+0x988>
 8013dca:	2200      	movs	r2, #0
 8013dcc:	4b26      	ldr	r3, [pc, #152]	@ (8013e68 <_strtod_l+0xae0>)
 8013dce:	4616      	mov	r6, r2
 8013dd0:	461f      	mov	r7, r3
 8013dd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013dd6:	e79b      	b.n	8013d10 <_strtod_l+0x988>
 8013dd8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013ddc:	9b08      	ldr	r3, [sp, #32]
 8013dde:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d1c1      	bne.n	8013d6a <_strtod_l+0x9e2>
 8013de6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013dea:	0d1b      	lsrs	r3, r3, #20
 8013dec:	051b      	lsls	r3, r3, #20
 8013dee:	429d      	cmp	r5, r3
 8013df0:	d1bb      	bne.n	8013d6a <_strtod_l+0x9e2>
 8013df2:	4630      	mov	r0, r6
 8013df4:	4639      	mov	r1, r7
 8013df6:	f7ec ff37 	bl	8000c68 <__aeabi_d2lz>
 8013dfa:	f7ec fb49 	bl	8000490 <__aeabi_l2d>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	460b      	mov	r3, r1
 8013e02:	4630      	mov	r0, r6
 8013e04:	4639      	mov	r1, r7
 8013e06:	f7ec f9b9 	bl	800017c <__aeabi_dsub>
 8013e0a:	460b      	mov	r3, r1
 8013e0c:	4602      	mov	r2, r0
 8013e0e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013e12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013e16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e18:	ea46 060a 	orr.w	r6, r6, sl
 8013e1c:	431e      	orrs	r6, r3
 8013e1e:	d06a      	beq.n	8013ef6 <_strtod_l+0xb6e>
 8013e20:	a309      	add	r3, pc, #36	@ (adr r3, 8013e48 <_strtod_l+0xac0>)
 8013e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e26:	f7ec fdd3 	bl	80009d0 <__aeabi_dcmplt>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	f47f acd6 	bne.w	80137dc <_strtod_l+0x454>
 8013e30:	a307      	add	r3, pc, #28	@ (adr r3, 8013e50 <_strtod_l+0xac8>)
 8013e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013e3a:	f7ec fde7 	bl	8000a0c <__aeabi_dcmpgt>
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	d093      	beq.n	8013d6a <_strtod_l+0x9e2>
 8013e42:	e4cb      	b.n	80137dc <_strtod_l+0x454>
 8013e44:	f3af 8000 	nop.w
 8013e48:	94a03595 	.word	0x94a03595
 8013e4c:	3fdfffff 	.word	0x3fdfffff
 8013e50:	35afe535 	.word	0x35afe535
 8013e54:	3fe00000 	.word	0x3fe00000
 8013e58:	39500000 	.word	0x39500000
 8013e5c:	7ff00000 	.word	0x7ff00000
 8013e60:	000fffff 	.word	0x000fffff
 8013e64:	7fefffff 	.word	0x7fefffff
 8013e68:	3ff00000 	.word	0x3ff00000
 8013e6c:	3fe00000 	.word	0x3fe00000
 8013e70:	7fe00000 	.word	0x7fe00000
 8013e74:	7c9fffff 	.word	0x7c9fffff
 8013e78:	bff00000 	.word	0xbff00000
 8013e7c:	9b08      	ldr	r3, [sp, #32]
 8013e7e:	b323      	cbz	r3, 8013eca <_strtod_l+0xb42>
 8013e80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013e84:	d821      	bhi.n	8013eca <_strtod_l+0xb42>
 8013e86:	a328      	add	r3, pc, #160	@ (adr r3, 8013f28 <_strtod_l+0xba0>)
 8013e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8c:	4630      	mov	r0, r6
 8013e8e:	4639      	mov	r1, r7
 8013e90:	f7ec fda8 	bl	80009e4 <__aeabi_dcmple>
 8013e94:	b1a0      	cbz	r0, 8013ec0 <_strtod_l+0xb38>
 8013e96:	4639      	mov	r1, r7
 8013e98:	4630      	mov	r0, r6
 8013e9a:	f7ec fdff 	bl	8000a9c <__aeabi_d2uiz>
 8013e9e:	2801      	cmp	r0, #1
 8013ea0:	bf38      	it	cc
 8013ea2:	2001      	movcc	r0, #1
 8013ea4:	f7ec faa8 	bl	80003f8 <__aeabi_ui2d>
 8013ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013eaa:	4606      	mov	r6, r0
 8013eac:	460f      	mov	r7, r1
 8013eae:	b9fb      	cbnz	r3, 8013ef0 <_strtod_l+0xb68>
 8013eb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013eb4:	9014      	str	r0, [sp, #80]	@ 0x50
 8013eb6:	9315      	str	r3, [sp, #84]	@ 0x54
 8013eb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013ebc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013ec0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013ec2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013ec6:	1b5b      	subs	r3, r3, r5
 8013ec8:	9311      	str	r3, [sp, #68]	@ 0x44
 8013eca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013ece:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013ed2:	f003 f8a5 	bl	8017020 <__ulp>
 8013ed6:	4602      	mov	r2, r0
 8013ed8:	460b      	mov	r3, r1
 8013eda:	4650      	mov	r0, sl
 8013edc:	4659      	mov	r1, fp
 8013ede:	f7ec fb05 	bl	80004ec <__aeabi_dmul>
 8013ee2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013ee6:	f7ec f94b 	bl	8000180 <__adddf3>
 8013eea:	4682      	mov	sl, r0
 8013eec:	468b      	mov	fp, r1
 8013eee:	e775      	b.n	8013ddc <_strtod_l+0xa54>
 8013ef0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013ef4:	e7e0      	b.n	8013eb8 <_strtod_l+0xb30>
 8013ef6:	a30e      	add	r3, pc, #56	@ (adr r3, 8013f30 <_strtod_l+0xba8>)
 8013ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efc:	f7ec fd68 	bl	80009d0 <__aeabi_dcmplt>
 8013f00:	e79d      	b.n	8013e3e <_strtod_l+0xab6>
 8013f02:	2300      	movs	r3, #0
 8013f04:	930e      	str	r3, [sp, #56]	@ 0x38
 8013f06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013f08:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013f0a:	6013      	str	r3, [r2, #0]
 8013f0c:	f7ff ba79 	b.w	8013402 <_strtod_l+0x7a>
 8013f10:	2a65      	cmp	r2, #101	@ 0x65
 8013f12:	f43f ab72 	beq.w	80135fa <_strtod_l+0x272>
 8013f16:	2a45      	cmp	r2, #69	@ 0x45
 8013f18:	f43f ab6f 	beq.w	80135fa <_strtod_l+0x272>
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	f7ff bbaa 	b.w	8013676 <_strtod_l+0x2ee>
 8013f22:	bf00      	nop
 8013f24:	f3af 8000 	nop.w
 8013f28:	ffc00000 	.word	0xffc00000
 8013f2c:	41dfffff 	.word	0x41dfffff
 8013f30:	94a03595 	.word	0x94a03595
 8013f34:	3fcfffff 	.word	0x3fcfffff

08013f38 <_strtod_r>:
 8013f38:	4b01      	ldr	r3, [pc, #4]	@ (8013f40 <_strtod_r+0x8>)
 8013f3a:	f7ff ba25 	b.w	8013388 <_strtod_l>
 8013f3e:	bf00      	nop
 8013f40:	20000094 	.word	0x20000094

08013f44 <strtod>:
 8013f44:	460a      	mov	r2, r1
 8013f46:	4601      	mov	r1, r0
 8013f48:	4802      	ldr	r0, [pc, #8]	@ (8013f54 <strtod+0x10>)
 8013f4a:	4b03      	ldr	r3, [pc, #12]	@ (8013f58 <strtod+0x14>)
 8013f4c:	6800      	ldr	r0, [r0, #0]
 8013f4e:	f7ff ba1b 	b.w	8013388 <_strtod_l>
 8013f52:	bf00      	nop
 8013f54:	20000200 	.word	0x20000200
 8013f58:	20000094 	.word	0x20000094

08013f5c <_strtol_l.isra.0>:
 8013f5c:	2b24      	cmp	r3, #36	@ 0x24
 8013f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f62:	4686      	mov	lr, r0
 8013f64:	4690      	mov	r8, r2
 8013f66:	d801      	bhi.n	8013f6c <_strtol_l.isra.0+0x10>
 8013f68:	2b01      	cmp	r3, #1
 8013f6a:	d106      	bne.n	8013f7a <_strtol_l.isra.0+0x1e>
 8013f6c:	f001 fa98 	bl	80154a0 <__errno>
 8013f70:	2316      	movs	r3, #22
 8013f72:	6003      	str	r3, [r0, #0]
 8013f74:	2000      	movs	r0, #0
 8013f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f7a:	460d      	mov	r5, r1
 8013f7c:	4833      	ldr	r0, [pc, #204]	@ (801404c <_strtol_l.isra.0+0xf0>)
 8013f7e:	462a      	mov	r2, r5
 8013f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f84:	5d06      	ldrb	r6, [r0, r4]
 8013f86:	f016 0608 	ands.w	r6, r6, #8
 8013f8a:	d1f8      	bne.n	8013f7e <_strtol_l.isra.0+0x22>
 8013f8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8013f8e:	d110      	bne.n	8013fb2 <_strtol_l.isra.0+0x56>
 8013f90:	2601      	movs	r6, #1
 8013f92:	782c      	ldrb	r4, [r5, #0]
 8013f94:	1c95      	adds	r5, r2, #2
 8013f96:	f033 0210 	bics.w	r2, r3, #16
 8013f9a:	d115      	bne.n	8013fc8 <_strtol_l.isra.0+0x6c>
 8013f9c:	2c30      	cmp	r4, #48	@ 0x30
 8013f9e:	d10d      	bne.n	8013fbc <_strtol_l.isra.0+0x60>
 8013fa0:	782a      	ldrb	r2, [r5, #0]
 8013fa2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013fa6:	2a58      	cmp	r2, #88	@ 0x58
 8013fa8:	d108      	bne.n	8013fbc <_strtol_l.isra.0+0x60>
 8013faa:	786c      	ldrb	r4, [r5, #1]
 8013fac:	3502      	adds	r5, #2
 8013fae:	2310      	movs	r3, #16
 8013fb0:	e00a      	b.n	8013fc8 <_strtol_l.isra.0+0x6c>
 8013fb2:	2c2b      	cmp	r4, #43	@ 0x2b
 8013fb4:	bf04      	itt	eq
 8013fb6:	782c      	ldrbeq	r4, [r5, #0]
 8013fb8:	1c95      	addeq	r5, r2, #2
 8013fba:	e7ec      	b.n	8013f96 <_strtol_l.isra.0+0x3a>
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d1f6      	bne.n	8013fae <_strtol_l.isra.0+0x52>
 8013fc0:	2c30      	cmp	r4, #48	@ 0x30
 8013fc2:	bf14      	ite	ne
 8013fc4:	230a      	movne	r3, #10
 8013fc6:	2308      	moveq	r3, #8
 8013fc8:	2200      	movs	r2, #0
 8013fca:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013fce:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013fd2:	fbbc f9f3 	udiv	r9, ip, r3
 8013fd6:	4610      	mov	r0, r2
 8013fd8:	fb03 ca19 	mls	sl, r3, r9, ip
 8013fdc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013fe0:	2f09      	cmp	r7, #9
 8013fe2:	d80f      	bhi.n	8014004 <_strtol_l.isra.0+0xa8>
 8013fe4:	463c      	mov	r4, r7
 8013fe6:	42a3      	cmp	r3, r4
 8013fe8:	dd1b      	ble.n	8014022 <_strtol_l.isra.0+0xc6>
 8013fea:	1c57      	adds	r7, r2, #1
 8013fec:	d007      	beq.n	8013ffe <_strtol_l.isra.0+0xa2>
 8013fee:	4581      	cmp	r9, r0
 8013ff0:	d314      	bcc.n	801401c <_strtol_l.isra.0+0xc0>
 8013ff2:	d101      	bne.n	8013ff8 <_strtol_l.isra.0+0x9c>
 8013ff4:	45a2      	cmp	sl, r4
 8013ff6:	db11      	blt.n	801401c <_strtol_l.isra.0+0xc0>
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	fb00 4003 	mla	r0, r0, r3, r4
 8013ffe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014002:	e7eb      	b.n	8013fdc <_strtol_l.isra.0+0x80>
 8014004:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014008:	2f19      	cmp	r7, #25
 801400a:	d801      	bhi.n	8014010 <_strtol_l.isra.0+0xb4>
 801400c:	3c37      	subs	r4, #55	@ 0x37
 801400e:	e7ea      	b.n	8013fe6 <_strtol_l.isra.0+0x8a>
 8014010:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014014:	2f19      	cmp	r7, #25
 8014016:	d804      	bhi.n	8014022 <_strtol_l.isra.0+0xc6>
 8014018:	3c57      	subs	r4, #87	@ 0x57
 801401a:	e7e4      	b.n	8013fe6 <_strtol_l.isra.0+0x8a>
 801401c:	f04f 32ff 	mov.w	r2, #4294967295
 8014020:	e7ed      	b.n	8013ffe <_strtol_l.isra.0+0xa2>
 8014022:	1c53      	adds	r3, r2, #1
 8014024:	d108      	bne.n	8014038 <_strtol_l.isra.0+0xdc>
 8014026:	2322      	movs	r3, #34	@ 0x22
 8014028:	4660      	mov	r0, ip
 801402a:	f8ce 3000 	str.w	r3, [lr]
 801402e:	f1b8 0f00 	cmp.w	r8, #0
 8014032:	d0a0      	beq.n	8013f76 <_strtol_l.isra.0+0x1a>
 8014034:	1e69      	subs	r1, r5, #1
 8014036:	e006      	b.n	8014046 <_strtol_l.isra.0+0xea>
 8014038:	b106      	cbz	r6, 801403c <_strtol_l.isra.0+0xe0>
 801403a:	4240      	negs	r0, r0
 801403c:	f1b8 0f00 	cmp.w	r8, #0
 8014040:	d099      	beq.n	8013f76 <_strtol_l.isra.0+0x1a>
 8014042:	2a00      	cmp	r2, #0
 8014044:	d1f6      	bne.n	8014034 <_strtol_l.isra.0+0xd8>
 8014046:	f8c8 1000 	str.w	r1, [r8]
 801404a:	e794      	b.n	8013f76 <_strtol_l.isra.0+0x1a>
 801404c:	080195e9 	.word	0x080195e9

08014050 <_strtol_r>:
 8014050:	f7ff bf84 	b.w	8013f5c <_strtol_l.isra.0>

08014054 <strtol>:
 8014054:	4613      	mov	r3, r2
 8014056:	460a      	mov	r2, r1
 8014058:	4601      	mov	r1, r0
 801405a:	4802      	ldr	r0, [pc, #8]	@ (8014064 <strtol+0x10>)
 801405c:	6800      	ldr	r0, [r0, #0]
 801405e:	f7ff bf7d 	b.w	8013f5c <_strtol_l.isra.0>
 8014062:	bf00      	nop
 8014064:	20000200 	.word	0x20000200

08014068 <__cvt>:
 8014068:	2b00      	cmp	r3, #0
 801406a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801406e:	461d      	mov	r5, r3
 8014070:	bfbb      	ittet	lt
 8014072:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8014076:	461d      	movlt	r5, r3
 8014078:	2300      	movge	r3, #0
 801407a:	232d      	movlt	r3, #45	@ 0x2d
 801407c:	b088      	sub	sp, #32
 801407e:	4614      	mov	r4, r2
 8014080:	bfb8      	it	lt
 8014082:	4614      	movlt	r4, r2
 8014084:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014086:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8014088:	7013      	strb	r3, [r2, #0]
 801408a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801408c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8014090:	f023 0820 	bic.w	r8, r3, #32
 8014094:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014098:	d005      	beq.n	80140a6 <__cvt+0x3e>
 801409a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801409e:	d100      	bne.n	80140a2 <__cvt+0x3a>
 80140a0:	3601      	adds	r6, #1
 80140a2:	2302      	movs	r3, #2
 80140a4:	e000      	b.n	80140a8 <__cvt+0x40>
 80140a6:	2303      	movs	r3, #3
 80140a8:	aa07      	add	r2, sp, #28
 80140aa:	9204      	str	r2, [sp, #16]
 80140ac:	aa06      	add	r2, sp, #24
 80140ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80140b2:	e9cd 3600 	strd	r3, r6, [sp]
 80140b6:	4622      	mov	r2, r4
 80140b8:	462b      	mov	r3, r5
 80140ba:	f001 fadd 	bl	8015678 <_dtoa_r>
 80140be:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80140c2:	4607      	mov	r7, r0
 80140c4:	d119      	bne.n	80140fa <__cvt+0x92>
 80140c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80140c8:	07db      	lsls	r3, r3, #31
 80140ca:	d50e      	bpl.n	80140ea <__cvt+0x82>
 80140cc:	eb00 0906 	add.w	r9, r0, r6
 80140d0:	2200      	movs	r2, #0
 80140d2:	2300      	movs	r3, #0
 80140d4:	4620      	mov	r0, r4
 80140d6:	4629      	mov	r1, r5
 80140d8:	f7ec fc70 	bl	80009bc <__aeabi_dcmpeq>
 80140dc:	b108      	cbz	r0, 80140e2 <__cvt+0x7a>
 80140de:	f8cd 901c 	str.w	r9, [sp, #28]
 80140e2:	2230      	movs	r2, #48	@ 0x30
 80140e4:	9b07      	ldr	r3, [sp, #28]
 80140e6:	454b      	cmp	r3, r9
 80140e8:	d31e      	bcc.n	8014128 <__cvt+0xc0>
 80140ea:	4638      	mov	r0, r7
 80140ec:	9b07      	ldr	r3, [sp, #28]
 80140ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80140f0:	1bdb      	subs	r3, r3, r7
 80140f2:	6013      	str	r3, [r2, #0]
 80140f4:	b008      	add	sp, #32
 80140f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80140fe:	eb00 0906 	add.w	r9, r0, r6
 8014102:	d1e5      	bne.n	80140d0 <__cvt+0x68>
 8014104:	7803      	ldrb	r3, [r0, #0]
 8014106:	2b30      	cmp	r3, #48	@ 0x30
 8014108:	d10a      	bne.n	8014120 <__cvt+0xb8>
 801410a:	2200      	movs	r2, #0
 801410c:	2300      	movs	r3, #0
 801410e:	4620      	mov	r0, r4
 8014110:	4629      	mov	r1, r5
 8014112:	f7ec fc53 	bl	80009bc <__aeabi_dcmpeq>
 8014116:	b918      	cbnz	r0, 8014120 <__cvt+0xb8>
 8014118:	f1c6 0601 	rsb	r6, r6, #1
 801411c:	f8ca 6000 	str.w	r6, [sl]
 8014120:	f8da 3000 	ldr.w	r3, [sl]
 8014124:	4499      	add	r9, r3
 8014126:	e7d3      	b.n	80140d0 <__cvt+0x68>
 8014128:	1c59      	adds	r1, r3, #1
 801412a:	9107      	str	r1, [sp, #28]
 801412c:	701a      	strb	r2, [r3, #0]
 801412e:	e7d9      	b.n	80140e4 <__cvt+0x7c>

08014130 <__exponent>:
 8014130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014132:	2900      	cmp	r1, #0
 8014134:	bfb6      	itet	lt
 8014136:	232d      	movlt	r3, #45	@ 0x2d
 8014138:	232b      	movge	r3, #43	@ 0x2b
 801413a:	4249      	neglt	r1, r1
 801413c:	2909      	cmp	r1, #9
 801413e:	7002      	strb	r2, [r0, #0]
 8014140:	7043      	strb	r3, [r0, #1]
 8014142:	dd29      	ble.n	8014198 <__exponent+0x68>
 8014144:	f10d 0307 	add.w	r3, sp, #7
 8014148:	461d      	mov	r5, r3
 801414a:	270a      	movs	r7, #10
 801414c:	fbb1 f6f7 	udiv	r6, r1, r7
 8014150:	461a      	mov	r2, r3
 8014152:	fb07 1416 	mls	r4, r7, r6, r1
 8014156:	3430      	adds	r4, #48	@ 0x30
 8014158:	f802 4c01 	strb.w	r4, [r2, #-1]
 801415c:	460c      	mov	r4, r1
 801415e:	2c63      	cmp	r4, #99	@ 0x63
 8014160:	4631      	mov	r1, r6
 8014162:	f103 33ff 	add.w	r3, r3, #4294967295
 8014166:	dcf1      	bgt.n	801414c <__exponent+0x1c>
 8014168:	3130      	adds	r1, #48	@ 0x30
 801416a:	1e94      	subs	r4, r2, #2
 801416c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014170:	4623      	mov	r3, r4
 8014172:	1c41      	adds	r1, r0, #1
 8014174:	42ab      	cmp	r3, r5
 8014176:	d30a      	bcc.n	801418e <__exponent+0x5e>
 8014178:	f10d 0309 	add.w	r3, sp, #9
 801417c:	1a9b      	subs	r3, r3, r2
 801417e:	42ac      	cmp	r4, r5
 8014180:	bf88      	it	hi
 8014182:	2300      	movhi	r3, #0
 8014184:	3302      	adds	r3, #2
 8014186:	4403      	add	r3, r0
 8014188:	1a18      	subs	r0, r3, r0
 801418a:	b003      	add	sp, #12
 801418c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801418e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014192:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014196:	e7ed      	b.n	8014174 <__exponent+0x44>
 8014198:	2330      	movs	r3, #48	@ 0x30
 801419a:	3130      	adds	r1, #48	@ 0x30
 801419c:	7083      	strb	r3, [r0, #2]
 801419e:	70c1      	strb	r1, [r0, #3]
 80141a0:	1d03      	adds	r3, r0, #4
 80141a2:	e7f1      	b.n	8014188 <__exponent+0x58>

080141a4 <_printf_float>:
 80141a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141a8:	b091      	sub	sp, #68	@ 0x44
 80141aa:	460c      	mov	r4, r1
 80141ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80141b0:	4616      	mov	r6, r2
 80141b2:	461f      	mov	r7, r3
 80141b4:	4605      	mov	r5, r0
 80141b6:	f001 f919 	bl	80153ec <_localeconv_r>
 80141ba:	6803      	ldr	r3, [r0, #0]
 80141bc:	4618      	mov	r0, r3
 80141be:	9308      	str	r3, [sp, #32]
 80141c0:	f7eb ffd0 	bl	8000164 <strlen>
 80141c4:	2300      	movs	r3, #0
 80141c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80141c8:	f8d8 3000 	ldr.w	r3, [r8]
 80141cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80141ce:	3307      	adds	r3, #7
 80141d0:	f023 0307 	bic.w	r3, r3, #7
 80141d4:	f103 0208 	add.w	r2, r3, #8
 80141d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80141dc:	f8d4 b000 	ldr.w	fp, [r4]
 80141e0:	f8c8 2000 	str.w	r2, [r8]
 80141e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80141e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80141ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80141ee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80141f2:	f04f 32ff 	mov.w	r2, #4294967295
 80141f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80141fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80141fe:	4b9c      	ldr	r3, [pc, #624]	@ (8014470 <_printf_float+0x2cc>)
 8014200:	f7ec fc0e 	bl	8000a20 <__aeabi_dcmpun>
 8014204:	bb70      	cbnz	r0, 8014264 <_printf_float+0xc0>
 8014206:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801420a:	f04f 32ff 	mov.w	r2, #4294967295
 801420e:	4b98      	ldr	r3, [pc, #608]	@ (8014470 <_printf_float+0x2cc>)
 8014210:	f7ec fbe8 	bl	80009e4 <__aeabi_dcmple>
 8014214:	bb30      	cbnz	r0, 8014264 <_printf_float+0xc0>
 8014216:	2200      	movs	r2, #0
 8014218:	2300      	movs	r3, #0
 801421a:	4640      	mov	r0, r8
 801421c:	4649      	mov	r1, r9
 801421e:	f7ec fbd7 	bl	80009d0 <__aeabi_dcmplt>
 8014222:	b110      	cbz	r0, 801422a <_printf_float+0x86>
 8014224:	232d      	movs	r3, #45	@ 0x2d
 8014226:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801422a:	4a92      	ldr	r2, [pc, #584]	@ (8014474 <_printf_float+0x2d0>)
 801422c:	4b92      	ldr	r3, [pc, #584]	@ (8014478 <_printf_float+0x2d4>)
 801422e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014232:	bf8c      	ite	hi
 8014234:	4690      	movhi	r8, r2
 8014236:	4698      	movls	r8, r3
 8014238:	2303      	movs	r3, #3
 801423a:	f04f 0900 	mov.w	r9, #0
 801423e:	6123      	str	r3, [r4, #16]
 8014240:	f02b 0304 	bic.w	r3, fp, #4
 8014244:	6023      	str	r3, [r4, #0]
 8014246:	4633      	mov	r3, r6
 8014248:	4621      	mov	r1, r4
 801424a:	4628      	mov	r0, r5
 801424c:	9700      	str	r7, [sp, #0]
 801424e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8014250:	f000 f9d4 	bl	80145fc <_printf_common>
 8014254:	3001      	adds	r0, #1
 8014256:	f040 8090 	bne.w	801437a <_printf_float+0x1d6>
 801425a:	f04f 30ff 	mov.w	r0, #4294967295
 801425e:	b011      	add	sp, #68	@ 0x44
 8014260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014264:	4642      	mov	r2, r8
 8014266:	464b      	mov	r3, r9
 8014268:	4640      	mov	r0, r8
 801426a:	4649      	mov	r1, r9
 801426c:	f7ec fbd8 	bl	8000a20 <__aeabi_dcmpun>
 8014270:	b148      	cbz	r0, 8014286 <_printf_float+0xe2>
 8014272:	464b      	mov	r3, r9
 8014274:	2b00      	cmp	r3, #0
 8014276:	bfb8      	it	lt
 8014278:	232d      	movlt	r3, #45	@ 0x2d
 801427a:	4a80      	ldr	r2, [pc, #512]	@ (801447c <_printf_float+0x2d8>)
 801427c:	bfb8      	it	lt
 801427e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014282:	4b7f      	ldr	r3, [pc, #508]	@ (8014480 <_printf_float+0x2dc>)
 8014284:	e7d3      	b.n	801422e <_printf_float+0x8a>
 8014286:	6863      	ldr	r3, [r4, #4]
 8014288:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801428c:	1c5a      	adds	r2, r3, #1
 801428e:	d13f      	bne.n	8014310 <_printf_float+0x16c>
 8014290:	2306      	movs	r3, #6
 8014292:	6063      	str	r3, [r4, #4]
 8014294:	2200      	movs	r2, #0
 8014296:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801429a:	6023      	str	r3, [r4, #0]
 801429c:	9206      	str	r2, [sp, #24]
 801429e:	aa0e      	add	r2, sp, #56	@ 0x38
 80142a0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80142a4:	aa0d      	add	r2, sp, #52	@ 0x34
 80142a6:	9203      	str	r2, [sp, #12]
 80142a8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80142ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80142b0:	6863      	ldr	r3, [r4, #4]
 80142b2:	4642      	mov	r2, r8
 80142b4:	9300      	str	r3, [sp, #0]
 80142b6:	4628      	mov	r0, r5
 80142b8:	464b      	mov	r3, r9
 80142ba:	910a      	str	r1, [sp, #40]	@ 0x28
 80142bc:	f7ff fed4 	bl	8014068 <__cvt>
 80142c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80142c2:	4680      	mov	r8, r0
 80142c4:	2947      	cmp	r1, #71	@ 0x47
 80142c6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80142c8:	d128      	bne.n	801431c <_printf_float+0x178>
 80142ca:	1cc8      	adds	r0, r1, #3
 80142cc:	db02      	blt.n	80142d4 <_printf_float+0x130>
 80142ce:	6863      	ldr	r3, [r4, #4]
 80142d0:	4299      	cmp	r1, r3
 80142d2:	dd40      	ble.n	8014356 <_printf_float+0x1b2>
 80142d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80142d8:	fa5f fa8a 	uxtb.w	sl, sl
 80142dc:	4652      	mov	r2, sl
 80142de:	3901      	subs	r1, #1
 80142e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80142e4:	910d      	str	r1, [sp, #52]	@ 0x34
 80142e6:	f7ff ff23 	bl	8014130 <__exponent>
 80142ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80142ec:	4681      	mov	r9, r0
 80142ee:	1813      	adds	r3, r2, r0
 80142f0:	2a01      	cmp	r2, #1
 80142f2:	6123      	str	r3, [r4, #16]
 80142f4:	dc02      	bgt.n	80142fc <_printf_float+0x158>
 80142f6:	6822      	ldr	r2, [r4, #0]
 80142f8:	07d2      	lsls	r2, r2, #31
 80142fa:	d501      	bpl.n	8014300 <_printf_float+0x15c>
 80142fc:	3301      	adds	r3, #1
 80142fe:	6123      	str	r3, [r4, #16]
 8014300:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8014304:	2b00      	cmp	r3, #0
 8014306:	d09e      	beq.n	8014246 <_printf_float+0xa2>
 8014308:	232d      	movs	r3, #45	@ 0x2d
 801430a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801430e:	e79a      	b.n	8014246 <_printf_float+0xa2>
 8014310:	2947      	cmp	r1, #71	@ 0x47
 8014312:	d1bf      	bne.n	8014294 <_printf_float+0xf0>
 8014314:	2b00      	cmp	r3, #0
 8014316:	d1bd      	bne.n	8014294 <_printf_float+0xf0>
 8014318:	2301      	movs	r3, #1
 801431a:	e7ba      	b.n	8014292 <_printf_float+0xee>
 801431c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014320:	d9dc      	bls.n	80142dc <_printf_float+0x138>
 8014322:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014326:	d118      	bne.n	801435a <_printf_float+0x1b6>
 8014328:	2900      	cmp	r1, #0
 801432a:	6863      	ldr	r3, [r4, #4]
 801432c:	dd0b      	ble.n	8014346 <_printf_float+0x1a2>
 801432e:	6121      	str	r1, [r4, #16]
 8014330:	b913      	cbnz	r3, 8014338 <_printf_float+0x194>
 8014332:	6822      	ldr	r2, [r4, #0]
 8014334:	07d0      	lsls	r0, r2, #31
 8014336:	d502      	bpl.n	801433e <_printf_float+0x19a>
 8014338:	3301      	adds	r3, #1
 801433a:	440b      	add	r3, r1
 801433c:	6123      	str	r3, [r4, #16]
 801433e:	f04f 0900 	mov.w	r9, #0
 8014342:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014344:	e7dc      	b.n	8014300 <_printf_float+0x15c>
 8014346:	b913      	cbnz	r3, 801434e <_printf_float+0x1aa>
 8014348:	6822      	ldr	r2, [r4, #0]
 801434a:	07d2      	lsls	r2, r2, #31
 801434c:	d501      	bpl.n	8014352 <_printf_float+0x1ae>
 801434e:	3302      	adds	r3, #2
 8014350:	e7f4      	b.n	801433c <_printf_float+0x198>
 8014352:	2301      	movs	r3, #1
 8014354:	e7f2      	b.n	801433c <_printf_float+0x198>
 8014356:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801435a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801435c:	4299      	cmp	r1, r3
 801435e:	db05      	blt.n	801436c <_printf_float+0x1c8>
 8014360:	6823      	ldr	r3, [r4, #0]
 8014362:	6121      	str	r1, [r4, #16]
 8014364:	07d8      	lsls	r0, r3, #31
 8014366:	d5ea      	bpl.n	801433e <_printf_float+0x19a>
 8014368:	1c4b      	adds	r3, r1, #1
 801436a:	e7e7      	b.n	801433c <_printf_float+0x198>
 801436c:	2900      	cmp	r1, #0
 801436e:	bfcc      	ite	gt
 8014370:	2201      	movgt	r2, #1
 8014372:	f1c1 0202 	rsble	r2, r1, #2
 8014376:	4413      	add	r3, r2
 8014378:	e7e0      	b.n	801433c <_printf_float+0x198>
 801437a:	6823      	ldr	r3, [r4, #0]
 801437c:	055a      	lsls	r2, r3, #21
 801437e:	d407      	bmi.n	8014390 <_printf_float+0x1ec>
 8014380:	6923      	ldr	r3, [r4, #16]
 8014382:	4642      	mov	r2, r8
 8014384:	4631      	mov	r1, r6
 8014386:	4628      	mov	r0, r5
 8014388:	47b8      	blx	r7
 801438a:	3001      	adds	r0, #1
 801438c:	d12b      	bne.n	80143e6 <_printf_float+0x242>
 801438e:	e764      	b.n	801425a <_printf_float+0xb6>
 8014390:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014394:	f240 80dc 	bls.w	8014550 <_printf_float+0x3ac>
 8014398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801439c:	2200      	movs	r2, #0
 801439e:	2300      	movs	r3, #0
 80143a0:	f7ec fb0c 	bl	80009bc <__aeabi_dcmpeq>
 80143a4:	2800      	cmp	r0, #0
 80143a6:	d033      	beq.n	8014410 <_printf_float+0x26c>
 80143a8:	2301      	movs	r3, #1
 80143aa:	4631      	mov	r1, r6
 80143ac:	4628      	mov	r0, r5
 80143ae:	4a35      	ldr	r2, [pc, #212]	@ (8014484 <_printf_float+0x2e0>)
 80143b0:	47b8      	blx	r7
 80143b2:	3001      	adds	r0, #1
 80143b4:	f43f af51 	beq.w	801425a <_printf_float+0xb6>
 80143b8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80143bc:	4543      	cmp	r3, r8
 80143be:	db02      	blt.n	80143c6 <_printf_float+0x222>
 80143c0:	6823      	ldr	r3, [r4, #0]
 80143c2:	07d8      	lsls	r0, r3, #31
 80143c4:	d50f      	bpl.n	80143e6 <_printf_float+0x242>
 80143c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80143ca:	4631      	mov	r1, r6
 80143cc:	4628      	mov	r0, r5
 80143ce:	47b8      	blx	r7
 80143d0:	3001      	adds	r0, #1
 80143d2:	f43f af42 	beq.w	801425a <_printf_float+0xb6>
 80143d6:	f04f 0900 	mov.w	r9, #0
 80143da:	f108 38ff 	add.w	r8, r8, #4294967295
 80143de:	f104 0a1a 	add.w	sl, r4, #26
 80143e2:	45c8      	cmp	r8, r9
 80143e4:	dc09      	bgt.n	80143fa <_printf_float+0x256>
 80143e6:	6823      	ldr	r3, [r4, #0]
 80143e8:	079b      	lsls	r3, r3, #30
 80143ea:	f100 8102 	bmi.w	80145f2 <_printf_float+0x44e>
 80143ee:	68e0      	ldr	r0, [r4, #12]
 80143f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143f2:	4298      	cmp	r0, r3
 80143f4:	bfb8      	it	lt
 80143f6:	4618      	movlt	r0, r3
 80143f8:	e731      	b.n	801425e <_printf_float+0xba>
 80143fa:	2301      	movs	r3, #1
 80143fc:	4652      	mov	r2, sl
 80143fe:	4631      	mov	r1, r6
 8014400:	4628      	mov	r0, r5
 8014402:	47b8      	blx	r7
 8014404:	3001      	adds	r0, #1
 8014406:	f43f af28 	beq.w	801425a <_printf_float+0xb6>
 801440a:	f109 0901 	add.w	r9, r9, #1
 801440e:	e7e8      	b.n	80143e2 <_printf_float+0x23e>
 8014410:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014412:	2b00      	cmp	r3, #0
 8014414:	dc38      	bgt.n	8014488 <_printf_float+0x2e4>
 8014416:	2301      	movs	r3, #1
 8014418:	4631      	mov	r1, r6
 801441a:	4628      	mov	r0, r5
 801441c:	4a19      	ldr	r2, [pc, #100]	@ (8014484 <_printf_float+0x2e0>)
 801441e:	47b8      	blx	r7
 8014420:	3001      	adds	r0, #1
 8014422:	f43f af1a 	beq.w	801425a <_printf_float+0xb6>
 8014426:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801442a:	ea59 0303 	orrs.w	r3, r9, r3
 801442e:	d102      	bne.n	8014436 <_printf_float+0x292>
 8014430:	6823      	ldr	r3, [r4, #0]
 8014432:	07d9      	lsls	r1, r3, #31
 8014434:	d5d7      	bpl.n	80143e6 <_printf_float+0x242>
 8014436:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801443a:	4631      	mov	r1, r6
 801443c:	4628      	mov	r0, r5
 801443e:	47b8      	blx	r7
 8014440:	3001      	adds	r0, #1
 8014442:	f43f af0a 	beq.w	801425a <_printf_float+0xb6>
 8014446:	f04f 0a00 	mov.w	sl, #0
 801444a:	f104 0b1a 	add.w	fp, r4, #26
 801444e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014450:	425b      	negs	r3, r3
 8014452:	4553      	cmp	r3, sl
 8014454:	dc01      	bgt.n	801445a <_printf_float+0x2b6>
 8014456:	464b      	mov	r3, r9
 8014458:	e793      	b.n	8014382 <_printf_float+0x1de>
 801445a:	2301      	movs	r3, #1
 801445c:	465a      	mov	r2, fp
 801445e:	4631      	mov	r1, r6
 8014460:	4628      	mov	r0, r5
 8014462:	47b8      	blx	r7
 8014464:	3001      	adds	r0, #1
 8014466:	f43f aef8 	beq.w	801425a <_printf_float+0xb6>
 801446a:	f10a 0a01 	add.w	sl, sl, #1
 801446e:	e7ee      	b.n	801444e <_printf_float+0x2aa>
 8014470:	7fefffff 	.word	0x7fefffff
 8014474:	0801938b 	.word	0x0801938b
 8014478:	08019387 	.word	0x08019387
 801447c:	08019393 	.word	0x08019393
 8014480:	0801938f 	.word	0x0801938f
 8014484:	0801958d 	.word	0x0801958d
 8014488:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801448a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801448e:	4553      	cmp	r3, sl
 8014490:	bfa8      	it	ge
 8014492:	4653      	movge	r3, sl
 8014494:	2b00      	cmp	r3, #0
 8014496:	4699      	mov	r9, r3
 8014498:	dc36      	bgt.n	8014508 <_printf_float+0x364>
 801449a:	f04f 0b00 	mov.w	fp, #0
 801449e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80144a2:	f104 021a 	add.w	r2, r4, #26
 80144a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80144a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80144aa:	eba3 0309 	sub.w	r3, r3, r9
 80144ae:	455b      	cmp	r3, fp
 80144b0:	dc31      	bgt.n	8014516 <_printf_float+0x372>
 80144b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144b4:	459a      	cmp	sl, r3
 80144b6:	dc3a      	bgt.n	801452e <_printf_float+0x38a>
 80144b8:	6823      	ldr	r3, [r4, #0]
 80144ba:	07da      	lsls	r2, r3, #31
 80144bc:	d437      	bmi.n	801452e <_printf_float+0x38a>
 80144be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144c0:	ebaa 0903 	sub.w	r9, sl, r3
 80144c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144c6:	ebaa 0303 	sub.w	r3, sl, r3
 80144ca:	4599      	cmp	r9, r3
 80144cc:	bfa8      	it	ge
 80144ce:	4699      	movge	r9, r3
 80144d0:	f1b9 0f00 	cmp.w	r9, #0
 80144d4:	dc33      	bgt.n	801453e <_printf_float+0x39a>
 80144d6:	f04f 0800 	mov.w	r8, #0
 80144da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80144de:	f104 0b1a 	add.w	fp, r4, #26
 80144e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144e4:	ebaa 0303 	sub.w	r3, sl, r3
 80144e8:	eba3 0309 	sub.w	r3, r3, r9
 80144ec:	4543      	cmp	r3, r8
 80144ee:	f77f af7a 	ble.w	80143e6 <_printf_float+0x242>
 80144f2:	2301      	movs	r3, #1
 80144f4:	465a      	mov	r2, fp
 80144f6:	4631      	mov	r1, r6
 80144f8:	4628      	mov	r0, r5
 80144fa:	47b8      	blx	r7
 80144fc:	3001      	adds	r0, #1
 80144fe:	f43f aeac 	beq.w	801425a <_printf_float+0xb6>
 8014502:	f108 0801 	add.w	r8, r8, #1
 8014506:	e7ec      	b.n	80144e2 <_printf_float+0x33e>
 8014508:	4642      	mov	r2, r8
 801450a:	4631      	mov	r1, r6
 801450c:	4628      	mov	r0, r5
 801450e:	47b8      	blx	r7
 8014510:	3001      	adds	r0, #1
 8014512:	d1c2      	bne.n	801449a <_printf_float+0x2f6>
 8014514:	e6a1      	b.n	801425a <_printf_float+0xb6>
 8014516:	2301      	movs	r3, #1
 8014518:	4631      	mov	r1, r6
 801451a:	4628      	mov	r0, r5
 801451c:	920a      	str	r2, [sp, #40]	@ 0x28
 801451e:	47b8      	blx	r7
 8014520:	3001      	adds	r0, #1
 8014522:	f43f ae9a 	beq.w	801425a <_printf_float+0xb6>
 8014526:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014528:	f10b 0b01 	add.w	fp, fp, #1
 801452c:	e7bb      	b.n	80144a6 <_printf_float+0x302>
 801452e:	4631      	mov	r1, r6
 8014530:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014534:	4628      	mov	r0, r5
 8014536:	47b8      	blx	r7
 8014538:	3001      	adds	r0, #1
 801453a:	d1c0      	bne.n	80144be <_printf_float+0x31a>
 801453c:	e68d      	b.n	801425a <_printf_float+0xb6>
 801453e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014540:	464b      	mov	r3, r9
 8014542:	4631      	mov	r1, r6
 8014544:	4628      	mov	r0, r5
 8014546:	4442      	add	r2, r8
 8014548:	47b8      	blx	r7
 801454a:	3001      	adds	r0, #1
 801454c:	d1c3      	bne.n	80144d6 <_printf_float+0x332>
 801454e:	e684      	b.n	801425a <_printf_float+0xb6>
 8014550:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8014554:	f1ba 0f01 	cmp.w	sl, #1
 8014558:	dc01      	bgt.n	801455e <_printf_float+0x3ba>
 801455a:	07db      	lsls	r3, r3, #31
 801455c:	d536      	bpl.n	80145cc <_printf_float+0x428>
 801455e:	2301      	movs	r3, #1
 8014560:	4642      	mov	r2, r8
 8014562:	4631      	mov	r1, r6
 8014564:	4628      	mov	r0, r5
 8014566:	47b8      	blx	r7
 8014568:	3001      	adds	r0, #1
 801456a:	f43f ae76 	beq.w	801425a <_printf_float+0xb6>
 801456e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014572:	4631      	mov	r1, r6
 8014574:	4628      	mov	r0, r5
 8014576:	47b8      	blx	r7
 8014578:	3001      	adds	r0, #1
 801457a:	f43f ae6e 	beq.w	801425a <_printf_float+0xb6>
 801457e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014582:	2200      	movs	r2, #0
 8014584:	2300      	movs	r3, #0
 8014586:	f10a 3aff 	add.w	sl, sl, #4294967295
 801458a:	f7ec fa17 	bl	80009bc <__aeabi_dcmpeq>
 801458e:	b9c0      	cbnz	r0, 80145c2 <_printf_float+0x41e>
 8014590:	4653      	mov	r3, sl
 8014592:	f108 0201 	add.w	r2, r8, #1
 8014596:	4631      	mov	r1, r6
 8014598:	4628      	mov	r0, r5
 801459a:	47b8      	blx	r7
 801459c:	3001      	adds	r0, #1
 801459e:	d10c      	bne.n	80145ba <_printf_float+0x416>
 80145a0:	e65b      	b.n	801425a <_printf_float+0xb6>
 80145a2:	2301      	movs	r3, #1
 80145a4:	465a      	mov	r2, fp
 80145a6:	4631      	mov	r1, r6
 80145a8:	4628      	mov	r0, r5
 80145aa:	47b8      	blx	r7
 80145ac:	3001      	adds	r0, #1
 80145ae:	f43f ae54 	beq.w	801425a <_printf_float+0xb6>
 80145b2:	f108 0801 	add.w	r8, r8, #1
 80145b6:	45d0      	cmp	r8, sl
 80145b8:	dbf3      	blt.n	80145a2 <_printf_float+0x3fe>
 80145ba:	464b      	mov	r3, r9
 80145bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80145c0:	e6e0      	b.n	8014384 <_printf_float+0x1e0>
 80145c2:	f04f 0800 	mov.w	r8, #0
 80145c6:	f104 0b1a 	add.w	fp, r4, #26
 80145ca:	e7f4      	b.n	80145b6 <_printf_float+0x412>
 80145cc:	2301      	movs	r3, #1
 80145ce:	4642      	mov	r2, r8
 80145d0:	e7e1      	b.n	8014596 <_printf_float+0x3f2>
 80145d2:	2301      	movs	r3, #1
 80145d4:	464a      	mov	r2, r9
 80145d6:	4631      	mov	r1, r6
 80145d8:	4628      	mov	r0, r5
 80145da:	47b8      	blx	r7
 80145dc:	3001      	adds	r0, #1
 80145de:	f43f ae3c 	beq.w	801425a <_printf_float+0xb6>
 80145e2:	f108 0801 	add.w	r8, r8, #1
 80145e6:	68e3      	ldr	r3, [r4, #12]
 80145e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80145ea:	1a5b      	subs	r3, r3, r1
 80145ec:	4543      	cmp	r3, r8
 80145ee:	dcf0      	bgt.n	80145d2 <_printf_float+0x42e>
 80145f0:	e6fd      	b.n	80143ee <_printf_float+0x24a>
 80145f2:	f04f 0800 	mov.w	r8, #0
 80145f6:	f104 0919 	add.w	r9, r4, #25
 80145fa:	e7f4      	b.n	80145e6 <_printf_float+0x442>

080145fc <_printf_common>:
 80145fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014600:	4616      	mov	r6, r2
 8014602:	4698      	mov	r8, r3
 8014604:	688a      	ldr	r2, [r1, #8]
 8014606:	690b      	ldr	r3, [r1, #16]
 8014608:	4607      	mov	r7, r0
 801460a:	4293      	cmp	r3, r2
 801460c:	bfb8      	it	lt
 801460e:	4613      	movlt	r3, r2
 8014610:	6033      	str	r3, [r6, #0]
 8014612:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014616:	460c      	mov	r4, r1
 8014618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801461c:	b10a      	cbz	r2, 8014622 <_printf_common+0x26>
 801461e:	3301      	adds	r3, #1
 8014620:	6033      	str	r3, [r6, #0]
 8014622:	6823      	ldr	r3, [r4, #0]
 8014624:	0699      	lsls	r1, r3, #26
 8014626:	bf42      	ittt	mi
 8014628:	6833      	ldrmi	r3, [r6, #0]
 801462a:	3302      	addmi	r3, #2
 801462c:	6033      	strmi	r3, [r6, #0]
 801462e:	6825      	ldr	r5, [r4, #0]
 8014630:	f015 0506 	ands.w	r5, r5, #6
 8014634:	d106      	bne.n	8014644 <_printf_common+0x48>
 8014636:	f104 0a19 	add.w	sl, r4, #25
 801463a:	68e3      	ldr	r3, [r4, #12]
 801463c:	6832      	ldr	r2, [r6, #0]
 801463e:	1a9b      	subs	r3, r3, r2
 8014640:	42ab      	cmp	r3, r5
 8014642:	dc2b      	bgt.n	801469c <_printf_common+0xa0>
 8014644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014648:	6822      	ldr	r2, [r4, #0]
 801464a:	3b00      	subs	r3, #0
 801464c:	bf18      	it	ne
 801464e:	2301      	movne	r3, #1
 8014650:	0692      	lsls	r2, r2, #26
 8014652:	d430      	bmi.n	80146b6 <_printf_common+0xba>
 8014654:	4641      	mov	r1, r8
 8014656:	4638      	mov	r0, r7
 8014658:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801465c:	47c8      	blx	r9
 801465e:	3001      	adds	r0, #1
 8014660:	d023      	beq.n	80146aa <_printf_common+0xae>
 8014662:	6823      	ldr	r3, [r4, #0]
 8014664:	6922      	ldr	r2, [r4, #16]
 8014666:	f003 0306 	and.w	r3, r3, #6
 801466a:	2b04      	cmp	r3, #4
 801466c:	bf14      	ite	ne
 801466e:	2500      	movne	r5, #0
 8014670:	6833      	ldreq	r3, [r6, #0]
 8014672:	f04f 0600 	mov.w	r6, #0
 8014676:	bf08      	it	eq
 8014678:	68e5      	ldreq	r5, [r4, #12]
 801467a:	f104 041a 	add.w	r4, r4, #26
 801467e:	bf08      	it	eq
 8014680:	1aed      	subeq	r5, r5, r3
 8014682:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8014686:	bf08      	it	eq
 8014688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801468c:	4293      	cmp	r3, r2
 801468e:	bfc4      	itt	gt
 8014690:	1a9b      	subgt	r3, r3, r2
 8014692:	18ed      	addgt	r5, r5, r3
 8014694:	42b5      	cmp	r5, r6
 8014696:	d11a      	bne.n	80146ce <_printf_common+0xd2>
 8014698:	2000      	movs	r0, #0
 801469a:	e008      	b.n	80146ae <_printf_common+0xb2>
 801469c:	2301      	movs	r3, #1
 801469e:	4652      	mov	r2, sl
 80146a0:	4641      	mov	r1, r8
 80146a2:	4638      	mov	r0, r7
 80146a4:	47c8      	blx	r9
 80146a6:	3001      	adds	r0, #1
 80146a8:	d103      	bne.n	80146b2 <_printf_common+0xb6>
 80146aa:	f04f 30ff 	mov.w	r0, #4294967295
 80146ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146b2:	3501      	adds	r5, #1
 80146b4:	e7c1      	b.n	801463a <_printf_common+0x3e>
 80146b6:	2030      	movs	r0, #48	@ 0x30
 80146b8:	18e1      	adds	r1, r4, r3
 80146ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80146be:	1c5a      	adds	r2, r3, #1
 80146c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80146c4:	4422      	add	r2, r4
 80146c6:	3302      	adds	r3, #2
 80146c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80146cc:	e7c2      	b.n	8014654 <_printf_common+0x58>
 80146ce:	2301      	movs	r3, #1
 80146d0:	4622      	mov	r2, r4
 80146d2:	4641      	mov	r1, r8
 80146d4:	4638      	mov	r0, r7
 80146d6:	47c8      	blx	r9
 80146d8:	3001      	adds	r0, #1
 80146da:	d0e6      	beq.n	80146aa <_printf_common+0xae>
 80146dc:	3601      	adds	r6, #1
 80146de:	e7d9      	b.n	8014694 <_printf_common+0x98>

080146e0 <_printf_i>:
 80146e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80146e4:	7e0f      	ldrb	r7, [r1, #24]
 80146e6:	4691      	mov	r9, r2
 80146e8:	2f78      	cmp	r7, #120	@ 0x78
 80146ea:	4680      	mov	r8, r0
 80146ec:	460c      	mov	r4, r1
 80146ee:	469a      	mov	sl, r3
 80146f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80146f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80146f6:	d807      	bhi.n	8014708 <_printf_i+0x28>
 80146f8:	2f62      	cmp	r7, #98	@ 0x62
 80146fa:	d80a      	bhi.n	8014712 <_printf_i+0x32>
 80146fc:	2f00      	cmp	r7, #0
 80146fe:	f000 80d1 	beq.w	80148a4 <_printf_i+0x1c4>
 8014702:	2f58      	cmp	r7, #88	@ 0x58
 8014704:	f000 80b8 	beq.w	8014878 <_printf_i+0x198>
 8014708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801470c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014710:	e03a      	b.n	8014788 <_printf_i+0xa8>
 8014712:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014716:	2b15      	cmp	r3, #21
 8014718:	d8f6      	bhi.n	8014708 <_printf_i+0x28>
 801471a:	a101      	add	r1, pc, #4	@ (adr r1, 8014720 <_printf_i+0x40>)
 801471c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014720:	08014779 	.word	0x08014779
 8014724:	0801478d 	.word	0x0801478d
 8014728:	08014709 	.word	0x08014709
 801472c:	08014709 	.word	0x08014709
 8014730:	08014709 	.word	0x08014709
 8014734:	08014709 	.word	0x08014709
 8014738:	0801478d 	.word	0x0801478d
 801473c:	08014709 	.word	0x08014709
 8014740:	08014709 	.word	0x08014709
 8014744:	08014709 	.word	0x08014709
 8014748:	08014709 	.word	0x08014709
 801474c:	0801488b 	.word	0x0801488b
 8014750:	080147b7 	.word	0x080147b7
 8014754:	08014845 	.word	0x08014845
 8014758:	08014709 	.word	0x08014709
 801475c:	08014709 	.word	0x08014709
 8014760:	080148ad 	.word	0x080148ad
 8014764:	08014709 	.word	0x08014709
 8014768:	080147b7 	.word	0x080147b7
 801476c:	08014709 	.word	0x08014709
 8014770:	08014709 	.word	0x08014709
 8014774:	0801484d 	.word	0x0801484d
 8014778:	6833      	ldr	r3, [r6, #0]
 801477a:	1d1a      	adds	r2, r3, #4
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	6032      	str	r2, [r6, #0]
 8014780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014784:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014788:	2301      	movs	r3, #1
 801478a:	e09c      	b.n	80148c6 <_printf_i+0x1e6>
 801478c:	6833      	ldr	r3, [r6, #0]
 801478e:	6820      	ldr	r0, [r4, #0]
 8014790:	1d19      	adds	r1, r3, #4
 8014792:	6031      	str	r1, [r6, #0]
 8014794:	0606      	lsls	r6, r0, #24
 8014796:	d501      	bpl.n	801479c <_printf_i+0xbc>
 8014798:	681d      	ldr	r5, [r3, #0]
 801479a:	e003      	b.n	80147a4 <_printf_i+0xc4>
 801479c:	0645      	lsls	r5, r0, #25
 801479e:	d5fb      	bpl.n	8014798 <_printf_i+0xb8>
 80147a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80147a4:	2d00      	cmp	r5, #0
 80147a6:	da03      	bge.n	80147b0 <_printf_i+0xd0>
 80147a8:	232d      	movs	r3, #45	@ 0x2d
 80147aa:	426d      	negs	r5, r5
 80147ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80147b0:	230a      	movs	r3, #10
 80147b2:	4858      	ldr	r0, [pc, #352]	@ (8014914 <_printf_i+0x234>)
 80147b4:	e011      	b.n	80147da <_printf_i+0xfa>
 80147b6:	6821      	ldr	r1, [r4, #0]
 80147b8:	6833      	ldr	r3, [r6, #0]
 80147ba:	0608      	lsls	r0, r1, #24
 80147bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80147c0:	d402      	bmi.n	80147c8 <_printf_i+0xe8>
 80147c2:	0649      	lsls	r1, r1, #25
 80147c4:	bf48      	it	mi
 80147c6:	b2ad      	uxthmi	r5, r5
 80147c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80147ca:	6033      	str	r3, [r6, #0]
 80147cc:	bf14      	ite	ne
 80147ce:	230a      	movne	r3, #10
 80147d0:	2308      	moveq	r3, #8
 80147d2:	4850      	ldr	r0, [pc, #320]	@ (8014914 <_printf_i+0x234>)
 80147d4:	2100      	movs	r1, #0
 80147d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80147da:	6866      	ldr	r6, [r4, #4]
 80147dc:	2e00      	cmp	r6, #0
 80147de:	60a6      	str	r6, [r4, #8]
 80147e0:	db05      	blt.n	80147ee <_printf_i+0x10e>
 80147e2:	6821      	ldr	r1, [r4, #0]
 80147e4:	432e      	orrs	r6, r5
 80147e6:	f021 0104 	bic.w	r1, r1, #4
 80147ea:	6021      	str	r1, [r4, #0]
 80147ec:	d04b      	beq.n	8014886 <_printf_i+0x1a6>
 80147ee:	4616      	mov	r6, r2
 80147f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80147f4:	fb03 5711 	mls	r7, r3, r1, r5
 80147f8:	5dc7      	ldrb	r7, [r0, r7]
 80147fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80147fe:	462f      	mov	r7, r5
 8014800:	42bb      	cmp	r3, r7
 8014802:	460d      	mov	r5, r1
 8014804:	d9f4      	bls.n	80147f0 <_printf_i+0x110>
 8014806:	2b08      	cmp	r3, #8
 8014808:	d10b      	bne.n	8014822 <_printf_i+0x142>
 801480a:	6823      	ldr	r3, [r4, #0]
 801480c:	07df      	lsls	r7, r3, #31
 801480e:	d508      	bpl.n	8014822 <_printf_i+0x142>
 8014810:	6923      	ldr	r3, [r4, #16]
 8014812:	6861      	ldr	r1, [r4, #4]
 8014814:	4299      	cmp	r1, r3
 8014816:	bfde      	ittt	le
 8014818:	2330      	movle	r3, #48	@ 0x30
 801481a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801481e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014822:	1b92      	subs	r2, r2, r6
 8014824:	6122      	str	r2, [r4, #16]
 8014826:	464b      	mov	r3, r9
 8014828:	4621      	mov	r1, r4
 801482a:	4640      	mov	r0, r8
 801482c:	f8cd a000 	str.w	sl, [sp]
 8014830:	aa03      	add	r2, sp, #12
 8014832:	f7ff fee3 	bl	80145fc <_printf_common>
 8014836:	3001      	adds	r0, #1
 8014838:	d14a      	bne.n	80148d0 <_printf_i+0x1f0>
 801483a:	f04f 30ff 	mov.w	r0, #4294967295
 801483e:	b004      	add	sp, #16
 8014840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014844:	6823      	ldr	r3, [r4, #0]
 8014846:	f043 0320 	orr.w	r3, r3, #32
 801484a:	6023      	str	r3, [r4, #0]
 801484c:	2778      	movs	r7, #120	@ 0x78
 801484e:	4832      	ldr	r0, [pc, #200]	@ (8014918 <_printf_i+0x238>)
 8014850:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014854:	6823      	ldr	r3, [r4, #0]
 8014856:	6831      	ldr	r1, [r6, #0]
 8014858:	061f      	lsls	r7, r3, #24
 801485a:	f851 5b04 	ldr.w	r5, [r1], #4
 801485e:	d402      	bmi.n	8014866 <_printf_i+0x186>
 8014860:	065f      	lsls	r7, r3, #25
 8014862:	bf48      	it	mi
 8014864:	b2ad      	uxthmi	r5, r5
 8014866:	6031      	str	r1, [r6, #0]
 8014868:	07d9      	lsls	r1, r3, #31
 801486a:	bf44      	itt	mi
 801486c:	f043 0320 	orrmi.w	r3, r3, #32
 8014870:	6023      	strmi	r3, [r4, #0]
 8014872:	b11d      	cbz	r5, 801487c <_printf_i+0x19c>
 8014874:	2310      	movs	r3, #16
 8014876:	e7ad      	b.n	80147d4 <_printf_i+0xf4>
 8014878:	4826      	ldr	r0, [pc, #152]	@ (8014914 <_printf_i+0x234>)
 801487a:	e7e9      	b.n	8014850 <_printf_i+0x170>
 801487c:	6823      	ldr	r3, [r4, #0]
 801487e:	f023 0320 	bic.w	r3, r3, #32
 8014882:	6023      	str	r3, [r4, #0]
 8014884:	e7f6      	b.n	8014874 <_printf_i+0x194>
 8014886:	4616      	mov	r6, r2
 8014888:	e7bd      	b.n	8014806 <_printf_i+0x126>
 801488a:	6833      	ldr	r3, [r6, #0]
 801488c:	6825      	ldr	r5, [r4, #0]
 801488e:	1d18      	adds	r0, r3, #4
 8014890:	6961      	ldr	r1, [r4, #20]
 8014892:	6030      	str	r0, [r6, #0]
 8014894:	062e      	lsls	r6, r5, #24
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	d501      	bpl.n	801489e <_printf_i+0x1be>
 801489a:	6019      	str	r1, [r3, #0]
 801489c:	e002      	b.n	80148a4 <_printf_i+0x1c4>
 801489e:	0668      	lsls	r0, r5, #25
 80148a0:	d5fb      	bpl.n	801489a <_printf_i+0x1ba>
 80148a2:	8019      	strh	r1, [r3, #0]
 80148a4:	2300      	movs	r3, #0
 80148a6:	4616      	mov	r6, r2
 80148a8:	6123      	str	r3, [r4, #16]
 80148aa:	e7bc      	b.n	8014826 <_printf_i+0x146>
 80148ac:	6833      	ldr	r3, [r6, #0]
 80148ae:	2100      	movs	r1, #0
 80148b0:	1d1a      	adds	r2, r3, #4
 80148b2:	6032      	str	r2, [r6, #0]
 80148b4:	681e      	ldr	r6, [r3, #0]
 80148b6:	6862      	ldr	r2, [r4, #4]
 80148b8:	4630      	mov	r0, r6
 80148ba:	f000 fe26 	bl	801550a <memchr>
 80148be:	b108      	cbz	r0, 80148c4 <_printf_i+0x1e4>
 80148c0:	1b80      	subs	r0, r0, r6
 80148c2:	6060      	str	r0, [r4, #4]
 80148c4:	6863      	ldr	r3, [r4, #4]
 80148c6:	6123      	str	r3, [r4, #16]
 80148c8:	2300      	movs	r3, #0
 80148ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80148ce:	e7aa      	b.n	8014826 <_printf_i+0x146>
 80148d0:	4632      	mov	r2, r6
 80148d2:	4649      	mov	r1, r9
 80148d4:	4640      	mov	r0, r8
 80148d6:	6923      	ldr	r3, [r4, #16]
 80148d8:	47d0      	blx	sl
 80148da:	3001      	adds	r0, #1
 80148dc:	d0ad      	beq.n	801483a <_printf_i+0x15a>
 80148de:	6823      	ldr	r3, [r4, #0]
 80148e0:	079b      	lsls	r3, r3, #30
 80148e2:	d413      	bmi.n	801490c <_printf_i+0x22c>
 80148e4:	68e0      	ldr	r0, [r4, #12]
 80148e6:	9b03      	ldr	r3, [sp, #12]
 80148e8:	4298      	cmp	r0, r3
 80148ea:	bfb8      	it	lt
 80148ec:	4618      	movlt	r0, r3
 80148ee:	e7a6      	b.n	801483e <_printf_i+0x15e>
 80148f0:	2301      	movs	r3, #1
 80148f2:	4632      	mov	r2, r6
 80148f4:	4649      	mov	r1, r9
 80148f6:	4640      	mov	r0, r8
 80148f8:	47d0      	blx	sl
 80148fa:	3001      	adds	r0, #1
 80148fc:	d09d      	beq.n	801483a <_printf_i+0x15a>
 80148fe:	3501      	adds	r5, #1
 8014900:	68e3      	ldr	r3, [r4, #12]
 8014902:	9903      	ldr	r1, [sp, #12]
 8014904:	1a5b      	subs	r3, r3, r1
 8014906:	42ab      	cmp	r3, r5
 8014908:	dcf2      	bgt.n	80148f0 <_printf_i+0x210>
 801490a:	e7eb      	b.n	80148e4 <_printf_i+0x204>
 801490c:	2500      	movs	r5, #0
 801490e:	f104 0619 	add.w	r6, r4, #25
 8014912:	e7f5      	b.n	8014900 <_printf_i+0x220>
 8014914:	08019397 	.word	0x08019397
 8014918:	080193a8 	.word	0x080193a8

0801491c <_scanf_float>:
 801491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014920:	b087      	sub	sp, #28
 8014922:	9303      	str	r3, [sp, #12]
 8014924:	688b      	ldr	r3, [r1, #8]
 8014926:	4691      	mov	r9, r2
 8014928:	1e5a      	subs	r2, r3, #1
 801492a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801492e:	bf82      	ittt	hi
 8014930:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014934:	eb03 0b05 	addhi.w	fp, r3, r5
 8014938:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801493c:	460a      	mov	r2, r1
 801493e:	f04f 0500 	mov.w	r5, #0
 8014942:	bf88      	it	hi
 8014944:	608b      	strhi	r3, [r1, #8]
 8014946:	680b      	ldr	r3, [r1, #0]
 8014948:	4680      	mov	r8, r0
 801494a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801494e:	f842 3b1c 	str.w	r3, [r2], #28
 8014952:	460c      	mov	r4, r1
 8014954:	bf98      	it	ls
 8014956:	f04f 0b00 	movls.w	fp, #0
 801495a:	4616      	mov	r6, r2
 801495c:	46aa      	mov	sl, r5
 801495e:	462f      	mov	r7, r5
 8014960:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014964:	9201      	str	r2, [sp, #4]
 8014966:	9502      	str	r5, [sp, #8]
 8014968:	68a2      	ldr	r2, [r4, #8]
 801496a:	b15a      	cbz	r2, 8014984 <_scanf_float+0x68>
 801496c:	f8d9 3000 	ldr.w	r3, [r9]
 8014970:	781b      	ldrb	r3, [r3, #0]
 8014972:	2b4e      	cmp	r3, #78	@ 0x4e
 8014974:	d862      	bhi.n	8014a3c <_scanf_float+0x120>
 8014976:	2b40      	cmp	r3, #64	@ 0x40
 8014978:	d83a      	bhi.n	80149f0 <_scanf_float+0xd4>
 801497a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801497e:	b2c8      	uxtb	r0, r1
 8014980:	280e      	cmp	r0, #14
 8014982:	d938      	bls.n	80149f6 <_scanf_float+0xda>
 8014984:	b11f      	cbz	r7, 801498e <_scanf_float+0x72>
 8014986:	6823      	ldr	r3, [r4, #0]
 8014988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801498c:	6023      	str	r3, [r4, #0]
 801498e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014992:	f1ba 0f01 	cmp.w	sl, #1
 8014996:	f200 8114 	bhi.w	8014bc2 <_scanf_float+0x2a6>
 801499a:	9b01      	ldr	r3, [sp, #4]
 801499c:	429e      	cmp	r6, r3
 801499e:	f200 8105 	bhi.w	8014bac <_scanf_float+0x290>
 80149a2:	2001      	movs	r0, #1
 80149a4:	b007      	add	sp, #28
 80149a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149aa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80149ae:	2a0d      	cmp	r2, #13
 80149b0:	d8e8      	bhi.n	8014984 <_scanf_float+0x68>
 80149b2:	a101      	add	r1, pc, #4	@ (adr r1, 80149b8 <_scanf_float+0x9c>)
 80149b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80149b8:	08014b01 	.word	0x08014b01
 80149bc:	08014985 	.word	0x08014985
 80149c0:	08014985 	.word	0x08014985
 80149c4:	08014985 	.word	0x08014985
 80149c8:	08014b5d 	.word	0x08014b5d
 80149cc:	08014b37 	.word	0x08014b37
 80149d0:	08014985 	.word	0x08014985
 80149d4:	08014985 	.word	0x08014985
 80149d8:	08014b0f 	.word	0x08014b0f
 80149dc:	08014985 	.word	0x08014985
 80149e0:	08014985 	.word	0x08014985
 80149e4:	08014985 	.word	0x08014985
 80149e8:	08014985 	.word	0x08014985
 80149ec:	08014acb 	.word	0x08014acb
 80149f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80149f4:	e7db      	b.n	80149ae <_scanf_float+0x92>
 80149f6:	290e      	cmp	r1, #14
 80149f8:	d8c4      	bhi.n	8014984 <_scanf_float+0x68>
 80149fa:	a001      	add	r0, pc, #4	@ (adr r0, 8014a00 <_scanf_float+0xe4>)
 80149fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014a00:	08014abb 	.word	0x08014abb
 8014a04:	08014985 	.word	0x08014985
 8014a08:	08014abb 	.word	0x08014abb
 8014a0c:	08014b4b 	.word	0x08014b4b
 8014a10:	08014985 	.word	0x08014985
 8014a14:	08014a5d 	.word	0x08014a5d
 8014a18:	08014aa1 	.word	0x08014aa1
 8014a1c:	08014aa1 	.word	0x08014aa1
 8014a20:	08014aa1 	.word	0x08014aa1
 8014a24:	08014aa1 	.word	0x08014aa1
 8014a28:	08014aa1 	.word	0x08014aa1
 8014a2c:	08014aa1 	.word	0x08014aa1
 8014a30:	08014aa1 	.word	0x08014aa1
 8014a34:	08014aa1 	.word	0x08014aa1
 8014a38:	08014aa1 	.word	0x08014aa1
 8014a3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8014a3e:	d809      	bhi.n	8014a54 <_scanf_float+0x138>
 8014a40:	2b60      	cmp	r3, #96	@ 0x60
 8014a42:	d8b2      	bhi.n	80149aa <_scanf_float+0x8e>
 8014a44:	2b54      	cmp	r3, #84	@ 0x54
 8014a46:	d07b      	beq.n	8014b40 <_scanf_float+0x224>
 8014a48:	2b59      	cmp	r3, #89	@ 0x59
 8014a4a:	d19b      	bne.n	8014984 <_scanf_float+0x68>
 8014a4c:	2d07      	cmp	r5, #7
 8014a4e:	d199      	bne.n	8014984 <_scanf_float+0x68>
 8014a50:	2508      	movs	r5, #8
 8014a52:	e02f      	b.n	8014ab4 <_scanf_float+0x198>
 8014a54:	2b74      	cmp	r3, #116	@ 0x74
 8014a56:	d073      	beq.n	8014b40 <_scanf_float+0x224>
 8014a58:	2b79      	cmp	r3, #121	@ 0x79
 8014a5a:	e7f6      	b.n	8014a4a <_scanf_float+0x12e>
 8014a5c:	6821      	ldr	r1, [r4, #0]
 8014a5e:	05c8      	lsls	r0, r1, #23
 8014a60:	d51e      	bpl.n	8014aa0 <_scanf_float+0x184>
 8014a62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014a66:	6021      	str	r1, [r4, #0]
 8014a68:	3701      	adds	r7, #1
 8014a6a:	f1bb 0f00 	cmp.w	fp, #0
 8014a6e:	d003      	beq.n	8014a78 <_scanf_float+0x15c>
 8014a70:	3201      	adds	r2, #1
 8014a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a76:	60a2      	str	r2, [r4, #8]
 8014a78:	68a3      	ldr	r3, [r4, #8]
 8014a7a:	3b01      	subs	r3, #1
 8014a7c:	60a3      	str	r3, [r4, #8]
 8014a7e:	6923      	ldr	r3, [r4, #16]
 8014a80:	3301      	adds	r3, #1
 8014a82:	6123      	str	r3, [r4, #16]
 8014a84:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014a88:	3b01      	subs	r3, #1
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	f8c9 3004 	str.w	r3, [r9, #4]
 8014a90:	f340 8083 	ble.w	8014b9a <_scanf_float+0x27e>
 8014a94:	f8d9 3000 	ldr.w	r3, [r9]
 8014a98:	3301      	adds	r3, #1
 8014a9a:	f8c9 3000 	str.w	r3, [r9]
 8014a9e:	e763      	b.n	8014968 <_scanf_float+0x4c>
 8014aa0:	eb1a 0105 	adds.w	r1, sl, r5
 8014aa4:	f47f af6e 	bne.w	8014984 <_scanf_float+0x68>
 8014aa8:	460d      	mov	r5, r1
 8014aaa:	468a      	mov	sl, r1
 8014aac:	6822      	ldr	r2, [r4, #0]
 8014aae:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014ab2:	6022      	str	r2, [r4, #0]
 8014ab4:	f806 3b01 	strb.w	r3, [r6], #1
 8014ab8:	e7de      	b.n	8014a78 <_scanf_float+0x15c>
 8014aba:	6822      	ldr	r2, [r4, #0]
 8014abc:	0610      	lsls	r0, r2, #24
 8014abe:	f57f af61 	bpl.w	8014984 <_scanf_float+0x68>
 8014ac2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014ac6:	6022      	str	r2, [r4, #0]
 8014ac8:	e7f4      	b.n	8014ab4 <_scanf_float+0x198>
 8014aca:	f1ba 0f00 	cmp.w	sl, #0
 8014ace:	d10c      	bne.n	8014aea <_scanf_float+0x1ce>
 8014ad0:	b977      	cbnz	r7, 8014af0 <_scanf_float+0x1d4>
 8014ad2:	6822      	ldr	r2, [r4, #0]
 8014ad4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014ad8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014adc:	d108      	bne.n	8014af0 <_scanf_float+0x1d4>
 8014ade:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014ae2:	f04f 0a01 	mov.w	sl, #1
 8014ae6:	6022      	str	r2, [r4, #0]
 8014ae8:	e7e4      	b.n	8014ab4 <_scanf_float+0x198>
 8014aea:	f1ba 0f02 	cmp.w	sl, #2
 8014aee:	d051      	beq.n	8014b94 <_scanf_float+0x278>
 8014af0:	2d01      	cmp	r5, #1
 8014af2:	d002      	beq.n	8014afa <_scanf_float+0x1de>
 8014af4:	2d04      	cmp	r5, #4
 8014af6:	f47f af45 	bne.w	8014984 <_scanf_float+0x68>
 8014afa:	3501      	adds	r5, #1
 8014afc:	b2ed      	uxtb	r5, r5
 8014afe:	e7d9      	b.n	8014ab4 <_scanf_float+0x198>
 8014b00:	f1ba 0f01 	cmp.w	sl, #1
 8014b04:	f47f af3e 	bne.w	8014984 <_scanf_float+0x68>
 8014b08:	f04f 0a02 	mov.w	sl, #2
 8014b0c:	e7d2      	b.n	8014ab4 <_scanf_float+0x198>
 8014b0e:	b975      	cbnz	r5, 8014b2e <_scanf_float+0x212>
 8014b10:	2f00      	cmp	r7, #0
 8014b12:	f47f af38 	bne.w	8014986 <_scanf_float+0x6a>
 8014b16:	6822      	ldr	r2, [r4, #0]
 8014b18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014b1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014b20:	f040 80ff 	bne.w	8014d22 <_scanf_float+0x406>
 8014b24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014b28:	2501      	movs	r5, #1
 8014b2a:	6022      	str	r2, [r4, #0]
 8014b2c:	e7c2      	b.n	8014ab4 <_scanf_float+0x198>
 8014b2e:	2d03      	cmp	r5, #3
 8014b30:	d0e3      	beq.n	8014afa <_scanf_float+0x1de>
 8014b32:	2d05      	cmp	r5, #5
 8014b34:	e7df      	b.n	8014af6 <_scanf_float+0x1da>
 8014b36:	2d02      	cmp	r5, #2
 8014b38:	f47f af24 	bne.w	8014984 <_scanf_float+0x68>
 8014b3c:	2503      	movs	r5, #3
 8014b3e:	e7b9      	b.n	8014ab4 <_scanf_float+0x198>
 8014b40:	2d06      	cmp	r5, #6
 8014b42:	f47f af1f 	bne.w	8014984 <_scanf_float+0x68>
 8014b46:	2507      	movs	r5, #7
 8014b48:	e7b4      	b.n	8014ab4 <_scanf_float+0x198>
 8014b4a:	6822      	ldr	r2, [r4, #0]
 8014b4c:	0591      	lsls	r1, r2, #22
 8014b4e:	f57f af19 	bpl.w	8014984 <_scanf_float+0x68>
 8014b52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014b56:	6022      	str	r2, [r4, #0]
 8014b58:	9702      	str	r7, [sp, #8]
 8014b5a:	e7ab      	b.n	8014ab4 <_scanf_float+0x198>
 8014b5c:	6822      	ldr	r2, [r4, #0]
 8014b5e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014b62:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014b66:	d005      	beq.n	8014b74 <_scanf_float+0x258>
 8014b68:	0550      	lsls	r0, r2, #21
 8014b6a:	f57f af0b 	bpl.w	8014984 <_scanf_float+0x68>
 8014b6e:	2f00      	cmp	r7, #0
 8014b70:	f000 80d7 	beq.w	8014d22 <_scanf_float+0x406>
 8014b74:	0591      	lsls	r1, r2, #22
 8014b76:	bf58      	it	pl
 8014b78:	9902      	ldrpl	r1, [sp, #8]
 8014b7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014b7e:	bf58      	it	pl
 8014b80:	1a79      	subpl	r1, r7, r1
 8014b82:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014b86:	f04f 0700 	mov.w	r7, #0
 8014b8a:	bf58      	it	pl
 8014b8c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014b90:	6022      	str	r2, [r4, #0]
 8014b92:	e78f      	b.n	8014ab4 <_scanf_float+0x198>
 8014b94:	f04f 0a03 	mov.w	sl, #3
 8014b98:	e78c      	b.n	8014ab4 <_scanf_float+0x198>
 8014b9a:	4649      	mov	r1, r9
 8014b9c:	4640      	mov	r0, r8
 8014b9e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014ba2:	4798      	blx	r3
 8014ba4:	2800      	cmp	r0, #0
 8014ba6:	f43f aedf 	beq.w	8014968 <_scanf_float+0x4c>
 8014baa:	e6eb      	b.n	8014984 <_scanf_float+0x68>
 8014bac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014bb0:	464a      	mov	r2, r9
 8014bb2:	4640      	mov	r0, r8
 8014bb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014bb8:	4798      	blx	r3
 8014bba:	6923      	ldr	r3, [r4, #16]
 8014bbc:	3b01      	subs	r3, #1
 8014bbe:	6123      	str	r3, [r4, #16]
 8014bc0:	e6eb      	b.n	801499a <_scanf_float+0x7e>
 8014bc2:	1e6b      	subs	r3, r5, #1
 8014bc4:	2b06      	cmp	r3, #6
 8014bc6:	d824      	bhi.n	8014c12 <_scanf_float+0x2f6>
 8014bc8:	2d02      	cmp	r5, #2
 8014bca:	d836      	bhi.n	8014c3a <_scanf_float+0x31e>
 8014bcc:	9b01      	ldr	r3, [sp, #4]
 8014bce:	429e      	cmp	r6, r3
 8014bd0:	f67f aee7 	bls.w	80149a2 <_scanf_float+0x86>
 8014bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014bd8:	464a      	mov	r2, r9
 8014bda:	4640      	mov	r0, r8
 8014bdc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014be0:	4798      	blx	r3
 8014be2:	6923      	ldr	r3, [r4, #16]
 8014be4:	3b01      	subs	r3, #1
 8014be6:	6123      	str	r3, [r4, #16]
 8014be8:	e7f0      	b.n	8014bcc <_scanf_float+0x2b0>
 8014bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014bee:	464a      	mov	r2, r9
 8014bf0:	4640      	mov	r0, r8
 8014bf2:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014bf6:	4798      	blx	r3
 8014bf8:	6923      	ldr	r3, [r4, #16]
 8014bfa:	3b01      	subs	r3, #1
 8014bfc:	6123      	str	r3, [r4, #16]
 8014bfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c02:	fa5f fa8a 	uxtb.w	sl, sl
 8014c06:	f1ba 0f02 	cmp.w	sl, #2
 8014c0a:	d1ee      	bne.n	8014bea <_scanf_float+0x2ce>
 8014c0c:	3d03      	subs	r5, #3
 8014c0e:	b2ed      	uxtb	r5, r5
 8014c10:	1b76      	subs	r6, r6, r5
 8014c12:	6823      	ldr	r3, [r4, #0]
 8014c14:	05da      	lsls	r2, r3, #23
 8014c16:	d530      	bpl.n	8014c7a <_scanf_float+0x35e>
 8014c18:	055b      	lsls	r3, r3, #21
 8014c1a:	d511      	bpl.n	8014c40 <_scanf_float+0x324>
 8014c1c:	9b01      	ldr	r3, [sp, #4]
 8014c1e:	429e      	cmp	r6, r3
 8014c20:	f67f aebf 	bls.w	80149a2 <_scanf_float+0x86>
 8014c24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014c28:	464a      	mov	r2, r9
 8014c2a:	4640      	mov	r0, r8
 8014c2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014c30:	4798      	blx	r3
 8014c32:	6923      	ldr	r3, [r4, #16]
 8014c34:	3b01      	subs	r3, #1
 8014c36:	6123      	str	r3, [r4, #16]
 8014c38:	e7f0      	b.n	8014c1c <_scanf_float+0x300>
 8014c3a:	46aa      	mov	sl, r5
 8014c3c:	46b3      	mov	fp, r6
 8014c3e:	e7de      	b.n	8014bfe <_scanf_float+0x2e2>
 8014c40:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014c44:	6923      	ldr	r3, [r4, #16]
 8014c46:	2965      	cmp	r1, #101	@ 0x65
 8014c48:	f103 33ff 	add.w	r3, r3, #4294967295
 8014c4c:	f106 35ff 	add.w	r5, r6, #4294967295
 8014c50:	6123      	str	r3, [r4, #16]
 8014c52:	d00c      	beq.n	8014c6e <_scanf_float+0x352>
 8014c54:	2945      	cmp	r1, #69	@ 0x45
 8014c56:	d00a      	beq.n	8014c6e <_scanf_float+0x352>
 8014c58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014c5c:	464a      	mov	r2, r9
 8014c5e:	4640      	mov	r0, r8
 8014c60:	4798      	blx	r3
 8014c62:	6923      	ldr	r3, [r4, #16]
 8014c64:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014c68:	3b01      	subs	r3, #1
 8014c6a:	1eb5      	subs	r5, r6, #2
 8014c6c:	6123      	str	r3, [r4, #16]
 8014c6e:	464a      	mov	r2, r9
 8014c70:	4640      	mov	r0, r8
 8014c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014c76:	4798      	blx	r3
 8014c78:	462e      	mov	r6, r5
 8014c7a:	6822      	ldr	r2, [r4, #0]
 8014c7c:	f012 0210 	ands.w	r2, r2, #16
 8014c80:	d001      	beq.n	8014c86 <_scanf_float+0x36a>
 8014c82:	2000      	movs	r0, #0
 8014c84:	e68e      	b.n	80149a4 <_scanf_float+0x88>
 8014c86:	7032      	strb	r2, [r6, #0]
 8014c88:	6823      	ldr	r3, [r4, #0]
 8014c8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014c92:	d125      	bne.n	8014ce0 <_scanf_float+0x3c4>
 8014c94:	9b02      	ldr	r3, [sp, #8]
 8014c96:	429f      	cmp	r7, r3
 8014c98:	d00a      	beq.n	8014cb0 <_scanf_float+0x394>
 8014c9a:	1bda      	subs	r2, r3, r7
 8014c9c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014ca0:	429e      	cmp	r6, r3
 8014ca2:	bf28      	it	cs
 8014ca4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014ca8:	4630      	mov	r0, r6
 8014caa:	491f      	ldr	r1, [pc, #124]	@ (8014d28 <_scanf_float+0x40c>)
 8014cac:	f000 f9ba 	bl	8015024 <siprintf>
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	4640      	mov	r0, r8
 8014cb4:	9901      	ldr	r1, [sp, #4]
 8014cb6:	f7ff f93f 	bl	8013f38 <_strtod_r>
 8014cba:	9b03      	ldr	r3, [sp, #12]
 8014cbc:	6825      	ldr	r5, [r4, #0]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	f015 0f02 	tst.w	r5, #2
 8014cc4:	4606      	mov	r6, r0
 8014cc6:	460f      	mov	r7, r1
 8014cc8:	f103 0204 	add.w	r2, r3, #4
 8014ccc:	d015      	beq.n	8014cfa <_scanf_float+0x3de>
 8014cce:	9903      	ldr	r1, [sp, #12]
 8014cd0:	600a      	str	r2, [r1, #0]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	e9c3 6700 	strd	r6, r7, [r3]
 8014cd8:	68e3      	ldr	r3, [r4, #12]
 8014cda:	3301      	adds	r3, #1
 8014cdc:	60e3      	str	r3, [r4, #12]
 8014cde:	e7d0      	b.n	8014c82 <_scanf_float+0x366>
 8014ce0:	9b04      	ldr	r3, [sp, #16]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d0e4      	beq.n	8014cb0 <_scanf_float+0x394>
 8014ce6:	9905      	ldr	r1, [sp, #20]
 8014ce8:	230a      	movs	r3, #10
 8014cea:	4640      	mov	r0, r8
 8014cec:	3101      	adds	r1, #1
 8014cee:	f7ff f9af 	bl	8014050 <_strtol_r>
 8014cf2:	9b04      	ldr	r3, [sp, #16]
 8014cf4:	9e05      	ldr	r6, [sp, #20]
 8014cf6:	1ac2      	subs	r2, r0, r3
 8014cf8:	e7d0      	b.n	8014c9c <_scanf_float+0x380>
 8014cfa:	076d      	lsls	r5, r5, #29
 8014cfc:	d4e7      	bmi.n	8014cce <_scanf_float+0x3b2>
 8014cfe:	9d03      	ldr	r5, [sp, #12]
 8014d00:	602a      	str	r2, [r5, #0]
 8014d02:	681d      	ldr	r5, [r3, #0]
 8014d04:	4602      	mov	r2, r0
 8014d06:	460b      	mov	r3, r1
 8014d08:	f7eb fe8a 	bl	8000a20 <__aeabi_dcmpun>
 8014d0c:	b120      	cbz	r0, 8014d18 <_scanf_float+0x3fc>
 8014d0e:	4807      	ldr	r0, [pc, #28]	@ (8014d2c <_scanf_float+0x410>)
 8014d10:	f000 fc1e 	bl	8015550 <nanf>
 8014d14:	6028      	str	r0, [r5, #0]
 8014d16:	e7df      	b.n	8014cd8 <_scanf_float+0x3bc>
 8014d18:	4630      	mov	r0, r6
 8014d1a:	4639      	mov	r1, r7
 8014d1c:	f7eb fede 	bl	8000adc <__aeabi_d2f>
 8014d20:	e7f8      	b.n	8014d14 <_scanf_float+0x3f8>
 8014d22:	2700      	movs	r7, #0
 8014d24:	e633      	b.n	801498e <_scanf_float+0x72>
 8014d26:	bf00      	nop
 8014d28:	080193b9 	.word	0x080193b9
 8014d2c:	08019384 	.word	0x08019384

08014d30 <std>:
 8014d30:	2300      	movs	r3, #0
 8014d32:	b510      	push	{r4, lr}
 8014d34:	4604      	mov	r4, r0
 8014d36:	e9c0 3300 	strd	r3, r3, [r0]
 8014d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014d3e:	6083      	str	r3, [r0, #8]
 8014d40:	8181      	strh	r1, [r0, #12]
 8014d42:	6643      	str	r3, [r0, #100]	@ 0x64
 8014d44:	81c2      	strh	r2, [r0, #14]
 8014d46:	6183      	str	r3, [r0, #24]
 8014d48:	4619      	mov	r1, r3
 8014d4a:	2208      	movs	r2, #8
 8014d4c:	305c      	adds	r0, #92	@ 0x5c
 8014d4e:	f000 faa1 	bl	8015294 <memset>
 8014d52:	4b0d      	ldr	r3, [pc, #52]	@ (8014d88 <std+0x58>)
 8014d54:	6224      	str	r4, [r4, #32]
 8014d56:	6263      	str	r3, [r4, #36]	@ 0x24
 8014d58:	4b0c      	ldr	r3, [pc, #48]	@ (8014d8c <std+0x5c>)
 8014d5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8014d90 <std+0x60>)
 8014d5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014d60:	4b0c      	ldr	r3, [pc, #48]	@ (8014d94 <std+0x64>)
 8014d62:	6323      	str	r3, [r4, #48]	@ 0x30
 8014d64:	4b0c      	ldr	r3, [pc, #48]	@ (8014d98 <std+0x68>)
 8014d66:	429c      	cmp	r4, r3
 8014d68:	d006      	beq.n	8014d78 <std+0x48>
 8014d6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014d6e:	4294      	cmp	r4, r2
 8014d70:	d002      	beq.n	8014d78 <std+0x48>
 8014d72:	33d0      	adds	r3, #208	@ 0xd0
 8014d74:	429c      	cmp	r4, r3
 8014d76:	d105      	bne.n	8014d84 <std+0x54>
 8014d78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d80:	f000 bbb8 	b.w	80154f4 <__retarget_lock_init_recursive>
 8014d84:	bd10      	pop	{r4, pc}
 8014d86:	bf00      	nop
 8014d88:	080150c1 	.word	0x080150c1
 8014d8c:	080150e7 	.word	0x080150e7
 8014d90:	0801511f 	.word	0x0801511f
 8014d94:	08015143 	.word	0x08015143
 8014d98:	20002090 	.word	0x20002090

08014d9c <stdio_exit_handler>:
 8014d9c:	4a02      	ldr	r2, [pc, #8]	@ (8014da8 <stdio_exit_handler+0xc>)
 8014d9e:	4903      	ldr	r1, [pc, #12]	@ (8014dac <stdio_exit_handler+0x10>)
 8014da0:	4803      	ldr	r0, [pc, #12]	@ (8014db0 <stdio_exit_handler+0x14>)
 8014da2:	f000 b87b 	b.w	8014e9c <_fwalk_sglue>
 8014da6:	bf00      	nop
 8014da8:	20000088 	.word	0x20000088
 8014dac:	08017f05 	.word	0x08017f05
 8014db0:	20000204 	.word	0x20000204

08014db4 <cleanup_stdio>:
 8014db4:	6841      	ldr	r1, [r0, #4]
 8014db6:	4b0c      	ldr	r3, [pc, #48]	@ (8014de8 <cleanup_stdio+0x34>)
 8014db8:	b510      	push	{r4, lr}
 8014dba:	4299      	cmp	r1, r3
 8014dbc:	4604      	mov	r4, r0
 8014dbe:	d001      	beq.n	8014dc4 <cleanup_stdio+0x10>
 8014dc0:	f003 f8a0 	bl	8017f04 <_fflush_r>
 8014dc4:	68a1      	ldr	r1, [r4, #8]
 8014dc6:	4b09      	ldr	r3, [pc, #36]	@ (8014dec <cleanup_stdio+0x38>)
 8014dc8:	4299      	cmp	r1, r3
 8014dca:	d002      	beq.n	8014dd2 <cleanup_stdio+0x1e>
 8014dcc:	4620      	mov	r0, r4
 8014dce:	f003 f899 	bl	8017f04 <_fflush_r>
 8014dd2:	68e1      	ldr	r1, [r4, #12]
 8014dd4:	4b06      	ldr	r3, [pc, #24]	@ (8014df0 <cleanup_stdio+0x3c>)
 8014dd6:	4299      	cmp	r1, r3
 8014dd8:	d004      	beq.n	8014de4 <cleanup_stdio+0x30>
 8014dda:	4620      	mov	r0, r4
 8014ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014de0:	f003 b890 	b.w	8017f04 <_fflush_r>
 8014de4:	bd10      	pop	{r4, pc}
 8014de6:	bf00      	nop
 8014de8:	20002090 	.word	0x20002090
 8014dec:	200020f8 	.word	0x200020f8
 8014df0:	20002160 	.word	0x20002160

08014df4 <global_stdio_init.part.0>:
 8014df4:	b510      	push	{r4, lr}
 8014df6:	4b0b      	ldr	r3, [pc, #44]	@ (8014e24 <global_stdio_init.part.0+0x30>)
 8014df8:	4c0b      	ldr	r4, [pc, #44]	@ (8014e28 <global_stdio_init.part.0+0x34>)
 8014dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8014e2c <global_stdio_init.part.0+0x38>)
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	601a      	str	r2, [r3, #0]
 8014e00:	2104      	movs	r1, #4
 8014e02:	2200      	movs	r2, #0
 8014e04:	f7ff ff94 	bl	8014d30 <std>
 8014e08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014e0c:	2201      	movs	r2, #1
 8014e0e:	2109      	movs	r1, #9
 8014e10:	f7ff ff8e 	bl	8014d30 <std>
 8014e14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014e18:	2202      	movs	r2, #2
 8014e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e1e:	2112      	movs	r1, #18
 8014e20:	f7ff bf86 	b.w	8014d30 <std>
 8014e24:	200021c8 	.word	0x200021c8
 8014e28:	20002090 	.word	0x20002090
 8014e2c:	08014d9d 	.word	0x08014d9d

08014e30 <__sfp_lock_acquire>:
 8014e30:	4801      	ldr	r0, [pc, #4]	@ (8014e38 <__sfp_lock_acquire+0x8>)
 8014e32:	f000 bb60 	b.w	80154f6 <__retarget_lock_acquire_recursive>
 8014e36:	bf00      	nop
 8014e38:	200021d1 	.word	0x200021d1

08014e3c <__sfp_lock_release>:
 8014e3c:	4801      	ldr	r0, [pc, #4]	@ (8014e44 <__sfp_lock_release+0x8>)
 8014e3e:	f000 bb5b 	b.w	80154f8 <__retarget_lock_release_recursive>
 8014e42:	bf00      	nop
 8014e44:	200021d1 	.word	0x200021d1

08014e48 <__sinit>:
 8014e48:	b510      	push	{r4, lr}
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	f7ff fff0 	bl	8014e30 <__sfp_lock_acquire>
 8014e50:	6a23      	ldr	r3, [r4, #32]
 8014e52:	b11b      	cbz	r3, 8014e5c <__sinit+0x14>
 8014e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e58:	f7ff bff0 	b.w	8014e3c <__sfp_lock_release>
 8014e5c:	4b04      	ldr	r3, [pc, #16]	@ (8014e70 <__sinit+0x28>)
 8014e5e:	6223      	str	r3, [r4, #32]
 8014e60:	4b04      	ldr	r3, [pc, #16]	@ (8014e74 <__sinit+0x2c>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d1f5      	bne.n	8014e54 <__sinit+0xc>
 8014e68:	f7ff ffc4 	bl	8014df4 <global_stdio_init.part.0>
 8014e6c:	e7f2      	b.n	8014e54 <__sinit+0xc>
 8014e6e:	bf00      	nop
 8014e70:	08014db5 	.word	0x08014db5
 8014e74:	200021c8 	.word	0x200021c8

08014e78 <fiprintf>:
 8014e78:	b40e      	push	{r1, r2, r3}
 8014e7a:	b503      	push	{r0, r1, lr}
 8014e7c:	4601      	mov	r1, r0
 8014e7e:	ab03      	add	r3, sp, #12
 8014e80:	4805      	ldr	r0, [pc, #20]	@ (8014e98 <fiprintf+0x20>)
 8014e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e86:	6800      	ldr	r0, [r0, #0]
 8014e88:	9301      	str	r3, [sp, #4]
 8014e8a:	f002 fd57 	bl	801793c <_vfiprintf_r>
 8014e8e:	b002      	add	sp, #8
 8014e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e94:	b003      	add	sp, #12
 8014e96:	4770      	bx	lr
 8014e98:	20000200 	.word	0x20000200

08014e9c <_fwalk_sglue>:
 8014e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ea0:	4607      	mov	r7, r0
 8014ea2:	4688      	mov	r8, r1
 8014ea4:	4614      	mov	r4, r2
 8014ea6:	2600      	movs	r6, #0
 8014ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014eac:	f1b9 0901 	subs.w	r9, r9, #1
 8014eb0:	d505      	bpl.n	8014ebe <_fwalk_sglue+0x22>
 8014eb2:	6824      	ldr	r4, [r4, #0]
 8014eb4:	2c00      	cmp	r4, #0
 8014eb6:	d1f7      	bne.n	8014ea8 <_fwalk_sglue+0xc>
 8014eb8:	4630      	mov	r0, r6
 8014eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ebe:	89ab      	ldrh	r3, [r5, #12]
 8014ec0:	2b01      	cmp	r3, #1
 8014ec2:	d907      	bls.n	8014ed4 <_fwalk_sglue+0x38>
 8014ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ec8:	3301      	adds	r3, #1
 8014eca:	d003      	beq.n	8014ed4 <_fwalk_sglue+0x38>
 8014ecc:	4629      	mov	r1, r5
 8014ece:	4638      	mov	r0, r7
 8014ed0:	47c0      	blx	r8
 8014ed2:	4306      	orrs	r6, r0
 8014ed4:	3568      	adds	r5, #104	@ 0x68
 8014ed6:	e7e9      	b.n	8014eac <_fwalk_sglue+0x10>

08014ed8 <iprintf>:
 8014ed8:	b40f      	push	{r0, r1, r2, r3}
 8014eda:	b507      	push	{r0, r1, r2, lr}
 8014edc:	4906      	ldr	r1, [pc, #24]	@ (8014ef8 <iprintf+0x20>)
 8014ede:	ab04      	add	r3, sp, #16
 8014ee0:	6808      	ldr	r0, [r1, #0]
 8014ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ee6:	6881      	ldr	r1, [r0, #8]
 8014ee8:	9301      	str	r3, [sp, #4]
 8014eea:	f002 fd27 	bl	801793c <_vfiprintf_r>
 8014eee:	b003      	add	sp, #12
 8014ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ef4:	b004      	add	sp, #16
 8014ef6:	4770      	bx	lr
 8014ef8:	20000200 	.word	0x20000200

08014efc <_puts_r>:
 8014efc:	6a03      	ldr	r3, [r0, #32]
 8014efe:	b570      	push	{r4, r5, r6, lr}
 8014f00:	4605      	mov	r5, r0
 8014f02:	460e      	mov	r6, r1
 8014f04:	6884      	ldr	r4, [r0, #8]
 8014f06:	b90b      	cbnz	r3, 8014f0c <_puts_r+0x10>
 8014f08:	f7ff ff9e 	bl	8014e48 <__sinit>
 8014f0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f0e:	07db      	lsls	r3, r3, #31
 8014f10:	d405      	bmi.n	8014f1e <_puts_r+0x22>
 8014f12:	89a3      	ldrh	r3, [r4, #12]
 8014f14:	0598      	lsls	r0, r3, #22
 8014f16:	d402      	bmi.n	8014f1e <_puts_r+0x22>
 8014f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f1a:	f000 faec 	bl	80154f6 <__retarget_lock_acquire_recursive>
 8014f1e:	89a3      	ldrh	r3, [r4, #12]
 8014f20:	0719      	lsls	r1, r3, #28
 8014f22:	d502      	bpl.n	8014f2a <_puts_r+0x2e>
 8014f24:	6923      	ldr	r3, [r4, #16]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d135      	bne.n	8014f96 <_puts_r+0x9a>
 8014f2a:	4621      	mov	r1, r4
 8014f2c:	4628      	mov	r0, r5
 8014f2e:	f000 f94b 	bl	80151c8 <__swsetup_r>
 8014f32:	b380      	cbz	r0, 8014f96 <_puts_r+0x9a>
 8014f34:	f04f 35ff 	mov.w	r5, #4294967295
 8014f38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f3a:	07da      	lsls	r2, r3, #31
 8014f3c:	d405      	bmi.n	8014f4a <_puts_r+0x4e>
 8014f3e:	89a3      	ldrh	r3, [r4, #12]
 8014f40:	059b      	lsls	r3, r3, #22
 8014f42:	d402      	bmi.n	8014f4a <_puts_r+0x4e>
 8014f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f46:	f000 fad7 	bl	80154f8 <__retarget_lock_release_recursive>
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	bd70      	pop	{r4, r5, r6, pc}
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	da04      	bge.n	8014f5c <_puts_r+0x60>
 8014f52:	69a2      	ldr	r2, [r4, #24]
 8014f54:	429a      	cmp	r2, r3
 8014f56:	dc17      	bgt.n	8014f88 <_puts_r+0x8c>
 8014f58:	290a      	cmp	r1, #10
 8014f5a:	d015      	beq.n	8014f88 <_puts_r+0x8c>
 8014f5c:	6823      	ldr	r3, [r4, #0]
 8014f5e:	1c5a      	adds	r2, r3, #1
 8014f60:	6022      	str	r2, [r4, #0]
 8014f62:	7019      	strb	r1, [r3, #0]
 8014f64:	68a3      	ldr	r3, [r4, #8]
 8014f66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014f6a:	3b01      	subs	r3, #1
 8014f6c:	60a3      	str	r3, [r4, #8]
 8014f6e:	2900      	cmp	r1, #0
 8014f70:	d1ed      	bne.n	8014f4e <_puts_r+0x52>
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	da11      	bge.n	8014f9a <_puts_r+0x9e>
 8014f76:	4622      	mov	r2, r4
 8014f78:	210a      	movs	r1, #10
 8014f7a:	4628      	mov	r0, r5
 8014f7c:	f000 f8e5 	bl	801514a <__swbuf_r>
 8014f80:	3001      	adds	r0, #1
 8014f82:	d0d7      	beq.n	8014f34 <_puts_r+0x38>
 8014f84:	250a      	movs	r5, #10
 8014f86:	e7d7      	b.n	8014f38 <_puts_r+0x3c>
 8014f88:	4622      	mov	r2, r4
 8014f8a:	4628      	mov	r0, r5
 8014f8c:	f000 f8dd 	bl	801514a <__swbuf_r>
 8014f90:	3001      	adds	r0, #1
 8014f92:	d1e7      	bne.n	8014f64 <_puts_r+0x68>
 8014f94:	e7ce      	b.n	8014f34 <_puts_r+0x38>
 8014f96:	3e01      	subs	r6, #1
 8014f98:	e7e4      	b.n	8014f64 <_puts_r+0x68>
 8014f9a:	6823      	ldr	r3, [r4, #0]
 8014f9c:	1c5a      	adds	r2, r3, #1
 8014f9e:	6022      	str	r2, [r4, #0]
 8014fa0:	220a      	movs	r2, #10
 8014fa2:	701a      	strb	r2, [r3, #0]
 8014fa4:	e7ee      	b.n	8014f84 <_puts_r+0x88>
	...

08014fa8 <puts>:
 8014fa8:	4b02      	ldr	r3, [pc, #8]	@ (8014fb4 <puts+0xc>)
 8014faa:	4601      	mov	r1, r0
 8014fac:	6818      	ldr	r0, [r3, #0]
 8014fae:	f7ff bfa5 	b.w	8014efc <_puts_r>
 8014fb2:	bf00      	nop
 8014fb4:	20000200 	.word	0x20000200

08014fb8 <sniprintf>:
 8014fb8:	b40c      	push	{r2, r3}
 8014fba:	b530      	push	{r4, r5, lr}
 8014fbc:	4b18      	ldr	r3, [pc, #96]	@ (8015020 <sniprintf+0x68>)
 8014fbe:	1e0c      	subs	r4, r1, #0
 8014fc0:	681d      	ldr	r5, [r3, #0]
 8014fc2:	b09d      	sub	sp, #116	@ 0x74
 8014fc4:	da08      	bge.n	8014fd8 <sniprintf+0x20>
 8014fc6:	238b      	movs	r3, #139	@ 0x8b
 8014fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8014fcc:	602b      	str	r3, [r5, #0]
 8014fce:	b01d      	add	sp, #116	@ 0x74
 8014fd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014fd4:	b002      	add	sp, #8
 8014fd6:	4770      	bx	lr
 8014fd8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014fdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014fe0:	f04f 0300 	mov.w	r3, #0
 8014fe4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014fe6:	bf0c      	ite	eq
 8014fe8:	4623      	moveq	r3, r4
 8014fea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014fee:	9304      	str	r3, [sp, #16]
 8014ff0:	9307      	str	r3, [sp, #28]
 8014ff2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014ff6:	9002      	str	r0, [sp, #8]
 8014ff8:	9006      	str	r0, [sp, #24]
 8014ffa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ffe:	4628      	mov	r0, r5
 8015000:	ab21      	add	r3, sp, #132	@ 0x84
 8015002:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015004:	a902      	add	r1, sp, #8
 8015006:	9301      	str	r3, [sp, #4]
 8015008:	f002 f9a6 	bl	8017358 <_svfiprintf_r>
 801500c:	1c43      	adds	r3, r0, #1
 801500e:	bfbc      	itt	lt
 8015010:	238b      	movlt	r3, #139	@ 0x8b
 8015012:	602b      	strlt	r3, [r5, #0]
 8015014:	2c00      	cmp	r4, #0
 8015016:	d0da      	beq.n	8014fce <sniprintf+0x16>
 8015018:	2200      	movs	r2, #0
 801501a:	9b02      	ldr	r3, [sp, #8]
 801501c:	701a      	strb	r2, [r3, #0]
 801501e:	e7d6      	b.n	8014fce <sniprintf+0x16>
 8015020:	20000200 	.word	0x20000200

08015024 <siprintf>:
 8015024:	b40e      	push	{r1, r2, r3}
 8015026:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801502a:	b510      	push	{r4, lr}
 801502c:	2400      	movs	r4, #0
 801502e:	b09d      	sub	sp, #116	@ 0x74
 8015030:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015032:	9002      	str	r0, [sp, #8]
 8015034:	9006      	str	r0, [sp, #24]
 8015036:	9107      	str	r1, [sp, #28]
 8015038:	9104      	str	r1, [sp, #16]
 801503a:	4809      	ldr	r0, [pc, #36]	@ (8015060 <siprintf+0x3c>)
 801503c:	4909      	ldr	r1, [pc, #36]	@ (8015064 <siprintf+0x40>)
 801503e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015042:	9105      	str	r1, [sp, #20]
 8015044:	6800      	ldr	r0, [r0, #0]
 8015046:	a902      	add	r1, sp, #8
 8015048:	9301      	str	r3, [sp, #4]
 801504a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801504c:	f002 f984 	bl	8017358 <_svfiprintf_r>
 8015050:	9b02      	ldr	r3, [sp, #8]
 8015052:	701c      	strb	r4, [r3, #0]
 8015054:	b01d      	add	sp, #116	@ 0x74
 8015056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801505a:	b003      	add	sp, #12
 801505c:	4770      	bx	lr
 801505e:	bf00      	nop
 8015060:	20000200 	.word	0x20000200
 8015064:	ffff0208 	.word	0xffff0208

08015068 <siscanf>:
 8015068:	b40e      	push	{r1, r2, r3}
 801506a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801506e:	b570      	push	{r4, r5, r6, lr}
 8015070:	2500      	movs	r5, #0
 8015072:	b09d      	sub	sp, #116	@ 0x74
 8015074:	ac21      	add	r4, sp, #132	@ 0x84
 8015076:	f854 6b04 	ldr.w	r6, [r4], #4
 801507a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801507e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8015080:	9002      	str	r0, [sp, #8]
 8015082:	9006      	str	r0, [sp, #24]
 8015084:	f7eb f86e 	bl	8000164 <strlen>
 8015088:	4b0b      	ldr	r3, [pc, #44]	@ (80150b8 <siscanf+0x50>)
 801508a:	9003      	str	r0, [sp, #12]
 801508c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801508e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015092:	9007      	str	r0, [sp, #28]
 8015094:	4809      	ldr	r0, [pc, #36]	@ (80150bc <siscanf+0x54>)
 8015096:	f8ad 3016 	strh.w	r3, [sp, #22]
 801509a:	4632      	mov	r2, r6
 801509c:	4623      	mov	r3, r4
 801509e:	a902      	add	r1, sp, #8
 80150a0:	6800      	ldr	r0, [r0, #0]
 80150a2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80150a4:	9514      	str	r5, [sp, #80]	@ 0x50
 80150a6:	9401      	str	r4, [sp, #4]
 80150a8:	f002 faac 	bl	8017604 <__ssvfiscanf_r>
 80150ac:	b01d      	add	sp, #116	@ 0x74
 80150ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150b2:	b003      	add	sp, #12
 80150b4:	4770      	bx	lr
 80150b6:	bf00      	nop
 80150b8:	080150e3 	.word	0x080150e3
 80150bc:	20000200 	.word	0x20000200

080150c0 <__sread>:
 80150c0:	b510      	push	{r4, lr}
 80150c2:	460c      	mov	r4, r1
 80150c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150c8:	f000 f9b6 	bl	8015438 <_read_r>
 80150cc:	2800      	cmp	r0, #0
 80150ce:	bfab      	itete	ge
 80150d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80150d2:	89a3      	ldrhlt	r3, [r4, #12]
 80150d4:	181b      	addge	r3, r3, r0
 80150d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80150da:	bfac      	ite	ge
 80150dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80150de:	81a3      	strhlt	r3, [r4, #12]
 80150e0:	bd10      	pop	{r4, pc}

080150e2 <__seofread>:
 80150e2:	2000      	movs	r0, #0
 80150e4:	4770      	bx	lr

080150e6 <__swrite>:
 80150e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150ea:	461f      	mov	r7, r3
 80150ec:	898b      	ldrh	r3, [r1, #12]
 80150ee:	4605      	mov	r5, r0
 80150f0:	05db      	lsls	r3, r3, #23
 80150f2:	460c      	mov	r4, r1
 80150f4:	4616      	mov	r6, r2
 80150f6:	d505      	bpl.n	8015104 <__swrite+0x1e>
 80150f8:	2302      	movs	r3, #2
 80150fa:	2200      	movs	r2, #0
 80150fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015100:	f000 f988 	bl	8015414 <_lseek_r>
 8015104:	89a3      	ldrh	r3, [r4, #12]
 8015106:	4632      	mov	r2, r6
 8015108:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801510c:	81a3      	strh	r3, [r4, #12]
 801510e:	4628      	mov	r0, r5
 8015110:	463b      	mov	r3, r7
 8015112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801511a:	f000 b9af 	b.w	801547c <_write_r>

0801511e <__sseek>:
 801511e:	b510      	push	{r4, lr}
 8015120:	460c      	mov	r4, r1
 8015122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015126:	f000 f975 	bl	8015414 <_lseek_r>
 801512a:	1c43      	adds	r3, r0, #1
 801512c:	89a3      	ldrh	r3, [r4, #12]
 801512e:	bf15      	itete	ne
 8015130:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801513a:	81a3      	strheq	r3, [r4, #12]
 801513c:	bf18      	it	ne
 801513e:	81a3      	strhne	r3, [r4, #12]
 8015140:	bd10      	pop	{r4, pc}

08015142 <__sclose>:
 8015142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015146:	f000 b955 	b.w	80153f4 <_close_r>

0801514a <__swbuf_r>:
 801514a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801514c:	460e      	mov	r6, r1
 801514e:	4614      	mov	r4, r2
 8015150:	4605      	mov	r5, r0
 8015152:	b118      	cbz	r0, 801515c <__swbuf_r+0x12>
 8015154:	6a03      	ldr	r3, [r0, #32]
 8015156:	b90b      	cbnz	r3, 801515c <__swbuf_r+0x12>
 8015158:	f7ff fe76 	bl	8014e48 <__sinit>
 801515c:	69a3      	ldr	r3, [r4, #24]
 801515e:	60a3      	str	r3, [r4, #8]
 8015160:	89a3      	ldrh	r3, [r4, #12]
 8015162:	071a      	lsls	r2, r3, #28
 8015164:	d501      	bpl.n	801516a <__swbuf_r+0x20>
 8015166:	6923      	ldr	r3, [r4, #16]
 8015168:	b943      	cbnz	r3, 801517c <__swbuf_r+0x32>
 801516a:	4621      	mov	r1, r4
 801516c:	4628      	mov	r0, r5
 801516e:	f000 f82b 	bl	80151c8 <__swsetup_r>
 8015172:	b118      	cbz	r0, 801517c <__swbuf_r+0x32>
 8015174:	f04f 37ff 	mov.w	r7, #4294967295
 8015178:	4638      	mov	r0, r7
 801517a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801517c:	6823      	ldr	r3, [r4, #0]
 801517e:	6922      	ldr	r2, [r4, #16]
 8015180:	b2f6      	uxtb	r6, r6
 8015182:	1a98      	subs	r0, r3, r2
 8015184:	6963      	ldr	r3, [r4, #20]
 8015186:	4637      	mov	r7, r6
 8015188:	4283      	cmp	r3, r0
 801518a:	dc05      	bgt.n	8015198 <__swbuf_r+0x4e>
 801518c:	4621      	mov	r1, r4
 801518e:	4628      	mov	r0, r5
 8015190:	f002 feb8 	bl	8017f04 <_fflush_r>
 8015194:	2800      	cmp	r0, #0
 8015196:	d1ed      	bne.n	8015174 <__swbuf_r+0x2a>
 8015198:	68a3      	ldr	r3, [r4, #8]
 801519a:	3b01      	subs	r3, #1
 801519c:	60a3      	str	r3, [r4, #8]
 801519e:	6823      	ldr	r3, [r4, #0]
 80151a0:	1c5a      	adds	r2, r3, #1
 80151a2:	6022      	str	r2, [r4, #0]
 80151a4:	701e      	strb	r6, [r3, #0]
 80151a6:	6962      	ldr	r2, [r4, #20]
 80151a8:	1c43      	adds	r3, r0, #1
 80151aa:	429a      	cmp	r2, r3
 80151ac:	d004      	beq.n	80151b8 <__swbuf_r+0x6e>
 80151ae:	89a3      	ldrh	r3, [r4, #12]
 80151b0:	07db      	lsls	r3, r3, #31
 80151b2:	d5e1      	bpl.n	8015178 <__swbuf_r+0x2e>
 80151b4:	2e0a      	cmp	r6, #10
 80151b6:	d1df      	bne.n	8015178 <__swbuf_r+0x2e>
 80151b8:	4621      	mov	r1, r4
 80151ba:	4628      	mov	r0, r5
 80151bc:	f002 fea2 	bl	8017f04 <_fflush_r>
 80151c0:	2800      	cmp	r0, #0
 80151c2:	d0d9      	beq.n	8015178 <__swbuf_r+0x2e>
 80151c4:	e7d6      	b.n	8015174 <__swbuf_r+0x2a>
	...

080151c8 <__swsetup_r>:
 80151c8:	b538      	push	{r3, r4, r5, lr}
 80151ca:	4b29      	ldr	r3, [pc, #164]	@ (8015270 <__swsetup_r+0xa8>)
 80151cc:	4605      	mov	r5, r0
 80151ce:	6818      	ldr	r0, [r3, #0]
 80151d0:	460c      	mov	r4, r1
 80151d2:	b118      	cbz	r0, 80151dc <__swsetup_r+0x14>
 80151d4:	6a03      	ldr	r3, [r0, #32]
 80151d6:	b90b      	cbnz	r3, 80151dc <__swsetup_r+0x14>
 80151d8:	f7ff fe36 	bl	8014e48 <__sinit>
 80151dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151e0:	0719      	lsls	r1, r3, #28
 80151e2:	d422      	bmi.n	801522a <__swsetup_r+0x62>
 80151e4:	06da      	lsls	r2, r3, #27
 80151e6:	d407      	bmi.n	80151f8 <__swsetup_r+0x30>
 80151e8:	2209      	movs	r2, #9
 80151ea:	602a      	str	r2, [r5, #0]
 80151ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80151f0:	f04f 30ff 	mov.w	r0, #4294967295
 80151f4:	81a3      	strh	r3, [r4, #12]
 80151f6:	e033      	b.n	8015260 <__swsetup_r+0x98>
 80151f8:	0758      	lsls	r0, r3, #29
 80151fa:	d512      	bpl.n	8015222 <__swsetup_r+0x5a>
 80151fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80151fe:	b141      	cbz	r1, 8015212 <__swsetup_r+0x4a>
 8015200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015204:	4299      	cmp	r1, r3
 8015206:	d002      	beq.n	801520e <__swsetup_r+0x46>
 8015208:	4628      	mov	r0, r5
 801520a:	f001 f809 	bl	8016220 <_free_r>
 801520e:	2300      	movs	r3, #0
 8015210:	6363      	str	r3, [r4, #52]	@ 0x34
 8015212:	89a3      	ldrh	r3, [r4, #12]
 8015214:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015218:	81a3      	strh	r3, [r4, #12]
 801521a:	2300      	movs	r3, #0
 801521c:	6063      	str	r3, [r4, #4]
 801521e:	6923      	ldr	r3, [r4, #16]
 8015220:	6023      	str	r3, [r4, #0]
 8015222:	89a3      	ldrh	r3, [r4, #12]
 8015224:	f043 0308 	orr.w	r3, r3, #8
 8015228:	81a3      	strh	r3, [r4, #12]
 801522a:	6923      	ldr	r3, [r4, #16]
 801522c:	b94b      	cbnz	r3, 8015242 <__swsetup_r+0x7a>
 801522e:	89a3      	ldrh	r3, [r4, #12]
 8015230:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015238:	d003      	beq.n	8015242 <__swsetup_r+0x7a>
 801523a:	4621      	mov	r1, r4
 801523c:	4628      	mov	r0, r5
 801523e:	f002 feae 	bl	8017f9e <__smakebuf_r>
 8015242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015246:	f013 0201 	ands.w	r2, r3, #1
 801524a:	d00a      	beq.n	8015262 <__swsetup_r+0x9a>
 801524c:	2200      	movs	r2, #0
 801524e:	60a2      	str	r2, [r4, #8]
 8015250:	6962      	ldr	r2, [r4, #20]
 8015252:	4252      	negs	r2, r2
 8015254:	61a2      	str	r2, [r4, #24]
 8015256:	6922      	ldr	r2, [r4, #16]
 8015258:	b942      	cbnz	r2, 801526c <__swsetup_r+0xa4>
 801525a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801525e:	d1c5      	bne.n	80151ec <__swsetup_r+0x24>
 8015260:	bd38      	pop	{r3, r4, r5, pc}
 8015262:	0799      	lsls	r1, r3, #30
 8015264:	bf58      	it	pl
 8015266:	6962      	ldrpl	r2, [r4, #20]
 8015268:	60a2      	str	r2, [r4, #8]
 801526a:	e7f4      	b.n	8015256 <__swsetup_r+0x8e>
 801526c:	2000      	movs	r0, #0
 801526e:	e7f7      	b.n	8015260 <__swsetup_r+0x98>
 8015270:	20000200 	.word	0x20000200

08015274 <memcmp>:
 8015274:	b510      	push	{r4, lr}
 8015276:	3901      	subs	r1, #1
 8015278:	4402      	add	r2, r0
 801527a:	4290      	cmp	r0, r2
 801527c:	d101      	bne.n	8015282 <memcmp+0xe>
 801527e:	2000      	movs	r0, #0
 8015280:	e005      	b.n	801528e <memcmp+0x1a>
 8015282:	7803      	ldrb	r3, [r0, #0]
 8015284:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015288:	42a3      	cmp	r3, r4
 801528a:	d001      	beq.n	8015290 <memcmp+0x1c>
 801528c:	1b18      	subs	r0, r3, r4
 801528e:	bd10      	pop	{r4, pc}
 8015290:	3001      	adds	r0, #1
 8015292:	e7f2      	b.n	801527a <memcmp+0x6>

08015294 <memset>:
 8015294:	4603      	mov	r3, r0
 8015296:	4402      	add	r2, r0
 8015298:	4293      	cmp	r3, r2
 801529a:	d100      	bne.n	801529e <memset+0xa>
 801529c:	4770      	bx	lr
 801529e:	f803 1b01 	strb.w	r1, [r3], #1
 80152a2:	e7f9      	b.n	8015298 <memset+0x4>

080152a4 <strcat>:
 80152a4:	4602      	mov	r2, r0
 80152a6:	b510      	push	{r4, lr}
 80152a8:	7814      	ldrb	r4, [r2, #0]
 80152aa:	4613      	mov	r3, r2
 80152ac:	3201      	adds	r2, #1
 80152ae:	2c00      	cmp	r4, #0
 80152b0:	d1fa      	bne.n	80152a8 <strcat+0x4>
 80152b2:	3b01      	subs	r3, #1
 80152b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80152b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80152bc:	2a00      	cmp	r2, #0
 80152be:	d1f9      	bne.n	80152b4 <strcat+0x10>
 80152c0:	bd10      	pop	{r4, pc}

080152c2 <strncat>:
 80152c2:	b530      	push	{r4, r5, lr}
 80152c4:	4604      	mov	r4, r0
 80152c6:	7825      	ldrb	r5, [r4, #0]
 80152c8:	4623      	mov	r3, r4
 80152ca:	3401      	adds	r4, #1
 80152cc:	2d00      	cmp	r5, #0
 80152ce:	d1fa      	bne.n	80152c6 <strncat+0x4>
 80152d0:	3a01      	subs	r2, #1
 80152d2:	d304      	bcc.n	80152de <strncat+0x1c>
 80152d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152d8:	f803 4b01 	strb.w	r4, [r3], #1
 80152dc:	b904      	cbnz	r4, 80152e0 <strncat+0x1e>
 80152de:	bd30      	pop	{r4, r5, pc}
 80152e0:	2a00      	cmp	r2, #0
 80152e2:	d1f5      	bne.n	80152d0 <strncat+0xe>
 80152e4:	701a      	strb	r2, [r3, #0]
 80152e6:	e7f3      	b.n	80152d0 <strncat+0xe>

080152e8 <strncmp>:
 80152e8:	b510      	push	{r4, lr}
 80152ea:	b16a      	cbz	r2, 8015308 <strncmp+0x20>
 80152ec:	3901      	subs	r1, #1
 80152ee:	1884      	adds	r4, r0, r2
 80152f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d103      	bne.n	8015304 <strncmp+0x1c>
 80152fc:	42a0      	cmp	r0, r4
 80152fe:	d001      	beq.n	8015304 <strncmp+0x1c>
 8015300:	2a00      	cmp	r2, #0
 8015302:	d1f5      	bne.n	80152f0 <strncmp+0x8>
 8015304:	1ad0      	subs	r0, r2, r3
 8015306:	bd10      	pop	{r4, pc}
 8015308:	4610      	mov	r0, r2
 801530a:	e7fc      	b.n	8015306 <strncmp+0x1e>

0801530c <strncpy>:
 801530c:	4603      	mov	r3, r0
 801530e:	b510      	push	{r4, lr}
 8015310:	3901      	subs	r1, #1
 8015312:	b132      	cbz	r2, 8015322 <strncpy+0x16>
 8015314:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015318:	3a01      	subs	r2, #1
 801531a:	f803 4b01 	strb.w	r4, [r3], #1
 801531e:	2c00      	cmp	r4, #0
 8015320:	d1f7      	bne.n	8015312 <strncpy+0x6>
 8015322:	2100      	movs	r1, #0
 8015324:	441a      	add	r2, r3
 8015326:	4293      	cmp	r3, r2
 8015328:	d100      	bne.n	801532c <strncpy+0x20>
 801532a:	bd10      	pop	{r4, pc}
 801532c:	f803 1b01 	strb.w	r1, [r3], #1
 8015330:	e7f9      	b.n	8015326 <strncpy+0x1a>
	...

08015334 <strtok>:
 8015334:	4b16      	ldr	r3, [pc, #88]	@ (8015390 <strtok+0x5c>)
 8015336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801533a:	681f      	ldr	r7, [r3, #0]
 801533c:	4605      	mov	r5, r0
 801533e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8015340:	460e      	mov	r6, r1
 8015342:	b9ec      	cbnz	r4, 8015380 <strtok+0x4c>
 8015344:	2050      	movs	r0, #80	@ 0x50
 8015346:	f7fd ff3d 	bl	80131c4 <malloc>
 801534a:	4602      	mov	r2, r0
 801534c:	6478      	str	r0, [r7, #68]	@ 0x44
 801534e:	b920      	cbnz	r0, 801535a <strtok+0x26>
 8015350:	215b      	movs	r1, #91	@ 0x5b
 8015352:	4b10      	ldr	r3, [pc, #64]	@ (8015394 <strtok+0x60>)
 8015354:	4810      	ldr	r0, [pc, #64]	@ (8015398 <strtok+0x64>)
 8015356:	f7fd ff0f 	bl	8013178 <__assert_func>
 801535a:	e9c0 4400 	strd	r4, r4, [r0]
 801535e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8015362:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8015366:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801536a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801536e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8015372:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8015376:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801537a:	6184      	str	r4, [r0, #24]
 801537c:	7704      	strb	r4, [r0, #28]
 801537e:	6244      	str	r4, [r0, #36]	@ 0x24
 8015380:	4631      	mov	r1, r6
 8015382:	4628      	mov	r0, r5
 8015384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015386:	2301      	movs	r3, #1
 8015388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801538c:	f000 b806 	b.w	801539c <__strtok_r>
 8015390:	20000200 	.word	0x20000200
 8015394:	080193be 	.word	0x080193be
 8015398:	080193d5 	.word	0x080193d5

0801539c <__strtok_r>:
 801539c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801539e:	4604      	mov	r4, r0
 80153a0:	b908      	cbnz	r0, 80153a6 <__strtok_r+0xa>
 80153a2:	6814      	ldr	r4, [r2, #0]
 80153a4:	b144      	cbz	r4, 80153b8 <__strtok_r+0x1c>
 80153a6:	460f      	mov	r7, r1
 80153a8:	4620      	mov	r0, r4
 80153aa:	f814 5b01 	ldrb.w	r5, [r4], #1
 80153ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80153b2:	b91e      	cbnz	r6, 80153bc <__strtok_r+0x20>
 80153b4:	b965      	cbnz	r5, 80153d0 <__strtok_r+0x34>
 80153b6:	6015      	str	r5, [r2, #0]
 80153b8:	2000      	movs	r0, #0
 80153ba:	e005      	b.n	80153c8 <__strtok_r+0x2c>
 80153bc:	42b5      	cmp	r5, r6
 80153be:	d1f6      	bne.n	80153ae <__strtok_r+0x12>
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d1f0      	bne.n	80153a6 <__strtok_r+0xa>
 80153c4:	6014      	str	r4, [r2, #0]
 80153c6:	7003      	strb	r3, [r0, #0]
 80153c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153ca:	461c      	mov	r4, r3
 80153cc:	e00c      	b.n	80153e8 <__strtok_r+0x4c>
 80153ce:	b91d      	cbnz	r5, 80153d8 <__strtok_r+0x3c>
 80153d0:	460e      	mov	r6, r1
 80153d2:	4627      	mov	r7, r4
 80153d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80153d8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80153dc:	42ab      	cmp	r3, r5
 80153de:	d1f6      	bne.n	80153ce <__strtok_r+0x32>
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d0f2      	beq.n	80153ca <__strtok_r+0x2e>
 80153e4:	2300      	movs	r3, #0
 80153e6:	703b      	strb	r3, [r7, #0]
 80153e8:	6014      	str	r4, [r2, #0]
 80153ea:	e7ed      	b.n	80153c8 <__strtok_r+0x2c>

080153ec <_localeconv_r>:
 80153ec:	4800      	ldr	r0, [pc, #0]	@ (80153f0 <_localeconv_r+0x4>)
 80153ee:	4770      	bx	lr
 80153f0:	20000184 	.word	0x20000184

080153f4 <_close_r>:
 80153f4:	b538      	push	{r3, r4, r5, lr}
 80153f6:	2300      	movs	r3, #0
 80153f8:	4d05      	ldr	r5, [pc, #20]	@ (8015410 <_close_r+0x1c>)
 80153fa:	4604      	mov	r4, r0
 80153fc:	4608      	mov	r0, r1
 80153fe:	602b      	str	r3, [r5, #0]
 8015400:	f7ec ffe3 	bl	80023ca <_close>
 8015404:	1c43      	adds	r3, r0, #1
 8015406:	d102      	bne.n	801540e <_close_r+0x1a>
 8015408:	682b      	ldr	r3, [r5, #0]
 801540a:	b103      	cbz	r3, 801540e <_close_r+0x1a>
 801540c:	6023      	str	r3, [r4, #0]
 801540e:	bd38      	pop	{r3, r4, r5, pc}
 8015410:	200021cc 	.word	0x200021cc

08015414 <_lseek_r>:
 8015414:	b538      	push	{r3, r4, r5, lr}
 8015416:	4604      	mov	r4, r0
 8015418:	4608      	mov	r0, r1
 801541a:	4611      	mov	r1, r2
 801541c:	2200      	movs	r2, #0
 801541e:	4d05      	ldr	r5, [pc, #20]	@ (8015434 <_lseek_r+0x20>)
 8015420:	602a      	str	r2, [r5, #0]
 8015422:	461a      	mov	r2, r3
 8015424:	f7ec fff5 	bl	8002412 <_lseek>
 8015428:	1c43      	adds	r3, r0, #1
 801542a:	d102      	bne.n	8015432 <_lseek_r+0x1e>
 801542c:	682b      	ldr	r3, [r5, #0]
 801542e:	b103      	cbz	r3, 8015432 <_lseek_r+0x1e>
 8015430:	6023      	str	r3, [r4, #0]
 8015432:	bd38      	pop	{r3, r4, r5, pc}
 8015434:	200021cc 	.word	0x200021cc

08015438 <_read_r>:
 8015438:	b538      	push	{r3, r4, r5, lr}
 801543a:	4604      	mov	r4, r0
 801543c:	4608      	mov	r0, r1
 801543e:	4611      	mov	r1, r2
 8015440:	2200      	movs	r2, #0
 8015442:	4d05      	ldr	r5, [pc, #20]	@ (8015458 <_read_r+0x20>)
 8015444:	602a      	str	r2, [r5, #0]
 8015446:	461a      	mov	r2, r3
 8015448:	f7ec ffa2 	bl	8002390 <_read>
 801544c:	1c43      	adds	r3, r0, #1
 801544e:	d102      	bne.n	8015456 <_read_r+0x1e>
 8015450:	682b      	ldr	r3, [r5, #0]
 8015452:	b103      	cbz	r3, 8015456 <_read_r+0x1e>
 8015454:	6023      	str	r3, [r4, #0]
 8015456:	bd38      	pop	{r3, r4, r5, pc}
 8015458:	200021cc 	.word	0x200021cc

0801545c <_sbrk_r>:
 801545c:	b538      	push	{r3, r4, r5, lr}
 801545e:	2300      	movs	r3, #0
 8015460:	4d05      	ldr	r5, [pc, #20]	@ (8015478 <_sbrk_r+0x1c>)
 8015462:	4604      	mov	r4, r0
 8015464:	4608      	mov	r0, r1
 8015466:	602b      	str	r3, [r5, #0]
 8015468:	f7ec ffe0 	bl	800242c <_sbrk>
 801546c:	1c43      	adds	r3, r0, #1
 801546e:	d102      	bne.n	8015476 <_sbrk_r+0x1a>
 8015470:	682b      	ldr	r3, [r5, #0]
 8015472:	b103      	cbz	r3, 8015476 <_sbrk_r+0x1a>
 8015474:	6023      	str	r3, [r4, #0]
 8015476:	bd38      	pop	{r3, r4, r5, pc}
 8015478:	200021cc 	.word	0x200021cc

0801547c <_write_r>:
 801547c:	b538      	push	{r3, r4, r5, lr}
 801547e:	4604      	mov	r4, r0
 8015480:	4608      	mov	r0, r1
 8015482:	4611      	mov	r1, r2
 8015484:	2200      	movs	r2, #0
 8015486:	4d05      	ldr	r5, [pc, #20]	@ (801549c <_write_r+0x20>)
 8015488:	602a      	str	r2, [r5, #0]
 801548a:	461a      	mov	r2, r3
 801548c:	f7ec fc98 	bl	8001dc0 <_write>
 8015490:	1c43      	adds	r3, r0, #1
 8015492:	d102      	bne.n	801549a <_write_r+0x1e>
 8015494:	682b      	ldr	r3, [r5, #0]
 8015496:	b103      	cbz	r3, 801549a <_write_r+0x1e>
 8015498:	6023      	str	r3, [r4, #0]
 801549a:	bd38      	pop	{r3, r4, r5, pc}
 801549c:	200021cc 	.word	0x200021cc

080154a0 <__errno>:
 80154a0:	4b01      	ldr	r3, [pc, #4]	@ (80154a8 <__errno+0x8>)
 80154a2:	6818      	ldr	r0, [r3, #0]
 80154a4:	4770      	bx	lr
 80154a6:	bf00      	nop
 80154a8:	20000200 	.word	0x20000200

080154ac <__libc_init_array>:
 80154ac:	b570      	push	{r4, r5, r6, lr}
 80154ae:	2600      	movs	r6, #0
 80154b0:	4d0c      	ldr	r5, [pc, #48]	@ (80154e4 <__libc_init_array+0x38>)
 80154b2:	4c0d      	ldr	r4, [pc, #52]	@ (80154e8 <__libc_init_array+0x3c>)
 80154b4:	1b64      	subs	r4, r4, r5
 80154b6:	10a4      	asrs	r4, r4, #2
 80154b8:	42a6      	cmp	r6, r4
 80154ba:	d109      	bne.n	80154d0 <__libc_init_array+0x24>
 80154bc:	f002 ff56 	bl	801836c <_init>
 80154c0:	2600      	movs	r6, #0
 80154c2:	4d0a      	ldr	r5, [pc, #40]	@ (80154ec <__libc_init_array+0x40>)
 80154c4:	4c0a      	ldr	r4, [pc, #40]	@ (80154f0 <__libc_init_array+0x44>)
 80154c6:	1b64      	subs	r4, r4, r5
 80154c8:	10a4      	asrs	r4, r4, #2
 80154ca:	42a6      	cmp	r6, r4
 80154cc:	d105      	bne.n	80154da <__libc_init_array+0x2e>
 80154ce:	bd70      	pop	{r4, r5, r6, pc}
 80154d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80154d4:	4798      	blx	r3
 80154d6:	3601      	adds	r6, #1
 80154d8:	e7ee      	b.n	80154b8 <__libc_init_array+0xc>
 80154da:	f855 3b04 	ldr.w	r3, [r5], #4
 80154de:	4798      	blx	r3
 80154e0:	3601      	adds	r6, #1
 80154e2:	e7f2      	b.n	80154ca <__libc_init_array+0x1e>
 80154e4:	080197f0 	.word	0x080197f0
 80154e8:	080197f0 	.word	0x080197f0
 80154ec:	080197f0 	.word	0x080197f0
 80154f0:	080197f4 	.word	0x080197f4

080154f4 <__retarget_lock_init_recursive>:
 80154f4:	4770      	bx	lr

080154f6 <__retarget_lock_acquire_recursive>:
 80154f6:	4770      	bx	lr

080154f8 <__retarget_lock_release_recursive>:
 80154f8:	4770      	bx	lr

080154fa <strcpy>:
 80154fa:	4603      	mov	r3, r0
 80154fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015500:	f803 2b01 	strb.w	r2, [r3], #1
 8015504:	2a00      	cmp	r2, #0
 8015506:	d1f9      	bne.n	80154fc <strcpy+0x2>
 8015508:	4770      	bx	lr

0801550a <memchr>:
 801550a:	4603      	mov	r3, r0
 801550c:	b510      	push	{r4, lr}
 801550e:	b2c9      	uxtb	r1, r1
 8015510:	4402      	add	r2, r0
 8015512:	4293      	cmp	r3, r2
 8015514:	4618      	mov	r0, r3
 8015516:	d101      	bne.n	801551c <memchr+0x12>
 8015518:	2000      	movs	r0, #0
 801551a:	e003      	b.n	8015524 <memchr+0x1a>
 801551c:	7804      	ldrb	r4, [r0, #0]
 801551e:	3301      	adds	r3, #1
 8015520:	428c      	cmp	r4, r1
 8015522:	d1f6      	bne.n	8015512 <memchr+0x8>
 8015524:	bd10      	pop	{r4, pc}

08015526 <memcpy>:
 8015526:	440a      	add	r2, r1
 8015528:	4291      	cmp	r1, r2
 801552a:	f100 33ff 	add.w	r3, r0, #4294967295
 801552e:	d100      	bne.n	8015532 <memcpy+0xc>
 8015530:	4770      	bx	lr
 8015532:	b510      	push	{r4, lr}
 8015534:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015538:	4291      	cmp	r1, r2
 801553a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801553e:	d1f9      	bne.n	8015534 <memcpy+0xe>
 8015540:	bd10      	pop	{r4, pc}
	...

08015544 <nan>:
 8015544:	2000      	movs	r0, #0
 8015546:	4901      	ldr	r1, [pc, #4]	@ (801554c <nan+0x8>)
 8015548:	4770      	bx	lr
 801554a:	bf00      	nop
 801554c:	7ff80000 	.word	0x7ff80000

08015550 <nanf>:
 8015550:	4800      	ldr	r0, [pc, #0]	@ (8015554 <nanf+0x4>)
 8015552:	4770      	bx	lr
 8015554:	7fc00000 	.word	0x7fc00000

08015558 <abort>:
 8015558:	2006      	movs	r0, #6
 801555a:	b508      	push	{r3, lr}
 801555c:	f002 fe0e 	bl	801817c <raise>
 8015560:	2001      	movs	r0, #1
 8015562:	f7ec ff0a 	bl	800237a <_exit>

08015566 <quorem>:
 8015566:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801556a:	6903      	ldr	r3, [r0, #16]
 801556c:	690c      	ldr	r4, [r1, #16]
 801556e:	4607      	mov	r7, r0
 8015570:	42a3      	cmp	r3, r4
 8015572:	db7e      	blt.n	8015672 <quorem+0x10c>
 8015574:	3c01      	subs	r4, #1
 8015576:	00a3      	lsls	r3, r4, #2
 8015578:	f100 0514 	add.w	r5, r0, #20
 801557c:	f101 0814 	add.w	r8, r1, #20
 8015580:	9300      	str	r3, [sp, #0]
 8015582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015586:	9301      	str	r3, [sp, #4]
 8015588:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801558c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015590:	3301      	adds	r3, #1
 8015592:	429a      	cmp	r2, r3
 8015594:	fbb2 f6f3 	udiv	r6, r2, r3
 8015598:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801559c:	d32e      	bcc.n	80155fc <quorem+0x96>
 801559e:	f04f 0a00 	mov.w	sl, #0
 80155a2:	46c4      	mov	ip, r8
 80155a4:	46ae      	mov	lr, r5
 80155a6:	46d3      	mov	fp, sl
 80155a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80155ac:	b298      	uxth	r0, r3
 80155ae:	fb06 a000 	mla	r0, r6, r0, sl
 80155b2:	0c1b      	lsrs	r3, r3, #16
 80155b4:	0c02      	lsrs	r2, r0, #16
 80155b6:	fb06 2303 	mla	r3, r6, r3, r2
 80155ba:	f8de 2000 	ldr.w	r2, [lr]
 80155be:	b280      	uxth	r0, r0
 80155c0:	b292      	uxth	r2, r2
 80155c2:	1a12      	subs	r2, r2, r0
 80155c4:	445a      	add	r2, fp
 80155c6:	f8de 0000 	ldr.w	r0, [lr]
 80155ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80155d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80155d8:	b292      	uxth	r2, r2
 80155da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80155de:	45e1      	cmp	r9, ip
 80155e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80155e4:	f84e 2b04 	str.w	r2, [lr], #4
 80155e8:	d2de      	bcs.n	80155a8 <quorem+0x42>
 80155ea:	9b00      	ldr	r3, [sp, #0]
 80155ec:	58eb      	ldr	r3, [r5, r3]
 80155ee:	b92b      	cbnz	r3, 80155fc <quorem+0x96>
 80155f0:	9b01      	ldr	r3, [sp, #4]
 80155f2:	3b04      	subs	r3, #4
 80155f4:	429d      	cmp	r5, r3
 80155f6:	461a      	mov	r2, r3
 80155f8:	d32f      	bcc.n	801565a <quorem+0xf4>
 80155fa:	613c      	str	r4, [r7, #16]
 80155fc:	4638      	mov	r0, r7
 80155fe:	f001 fc5f 	bl	8016ec0 <__mcmp>
 8015602:	2800      	cmp	r0, #0
 8015604:	db25      	blt.n	8015652 <quorem+0xec>
 8015606:	4629      	mov	r1, r5
 8015608:	2000      	movs	r0, #0
 801560a:	f858 2b04 	ldr.w	r2, [r8], #4
 801560e:	f8d1 c000 	ldr.w	ip, [r1]
 8015612:	fa1f fe82 	uxth.w	lr, r2
 8015616:	fa1f f38c 	uxth.w	r3, ip
 801561a:	eba3 030e 	sub.w	r3, r3, lr
 801561e:	4403      	add	r3, r0
 8015620:	0c12      	lsrs	r2, r2, #16
 8015622:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015626:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801562a:	b29b      	uxth	r3, r3
 801562c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015630:	45c1      	cmp	r9, r8
 8015632:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015636:	f841 3b04 	str.w	r3, [r1], #4
 801563a:	d2e6      	bcs.n	801560a <quorem+0xa4>
 801563c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015640:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015644:	b922      	cbnz	r2, 8015650 <quorem+0xea>
 8015646:	3b04      	subs	r3, #4
 8015648:	429d      	cmp	r5, r3
 801564a:	461a      	mov	r2, r3
 801564c:	d30b      	bcc.n	8015666 <quorem+0x100>
 801564e:	613c      	str	r4, [r7, #16]
 8015650:	3601      	adds	r6, #1
 8015652:	4630      	mov	r0, r6
 8015654:	b003      	add	sp, #12
 8015656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801565a:	6812      	ldr	r2, [r2, #0]
 801565c:	3b04      	subs	r3, #4
 801565e:	2a00      	cmp	r2, #0
 8015660:	d1cb      	bne.n	80155fa <quorem+0x94>
 8015662:	3c01      	subs	r4, #1
 8015664:	e7c6      	b.n	80155f4 <quorem+0x8e>
 8015666:	6812      	ldr	r2, [r2, #0]
 8015668:	3b04      	subs	r3, #4
 801566a:	2a00      	cmp	r2, #0
 801566c:	d1ef      	bne.n	801564e <quorem+0xe8>
 801566e:	3c01      	subs	r4, #1
 8015670:	e7ea      	b.n	8015648 <quorem+0xe2>
 8015672:	2000      	movs	r0, #0
 8015674:	e7ee      	b.n	8015654 <quorem+0xee>
	...

08015678 <_dtoa_r>:
 8015678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801567c:	4614      	mov	r4, r2
 801567e:	461d      	mov	r5, r3
 8015680:	69c7      	ldr	r7, [r0, #28]
 8015682:	b097      	sub	sp, #92	@ 0x5c
 8015684:	4681      	mov	r9, r0
 8015686:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801568a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801568c:	b97f      	cbnz	r7, 80156ae <_dtoa_r+0x36>
 801568e:	2010      	movs	r0, #16
 8015690:	f7fd fd98 	bl	80131c4 <malloc>
 8015694:	4602      	mov	r2, r0
 8015696:	f8c9 001c 	str.w	r0, [r9, #28]
 801569a:	b920      	cbnz	r0, 80156a6 <_dtoa_r+0x2e>
 801569c:	21ef      	movs	r1, #239	@ 0xef
 801569e:	4bac      	ldr	r3, [pc, #688]	@ (8015950 <_dtoa_r+0x2d8>)
 80156a0:	48ac      	ldr	r0, [pc, #688]	@ (8015954 <_dtoa_r+0x2dc>)
 80156a2:	f7fd fd69 	bl	8013178 <__assert_func>
 80156a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80156aa:	6007      	str	r7, [r0, #0]
 80156ac:	60c7      	str	r7, [r0, #12]
 80156ae:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80156b2:	6819      	ldr	r1, [r3, #0]
 80156b4:	b159      	cbz	r1, 80156ce <_dtoa_r+0x56>
 80156b6:	685a      	ldr	r2, [r3, #4]
 80156b8:	2301      	movs	r3, #1
 80156ba:	4093      	lsls	r3, r2
 80156bc:	604a      	str	r2, [r1, #4]
 80156be:	608b      	str	r3, [r1, #8]
 80156c0:	4648      	mov	r0, r9
 80156c2:	f001 f981 	bl	80169c8 <_Bfree>
 80156c6:	2200      	movs	r2, #0
 80156c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80156cc:	601a      	str	r2, [r3, #0]
 80156ce:	1e2b      	subs	r3, r5, #0
 80156d0:	bfaf      	iteee	ge
 80156d2:	2300      	movge	r3, #0
 80156d4:	2201      	movlt	r2, #1
 80156d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80156da:	9307      	strlt	r3, [sp, #28]
 80156dc:	bfa8      	it	ge
 80156de:	6033      	strge	r3, [r6, #0]
 80156e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80156e4:	4b9c      	ldr	r3, [pc, #624]	@ (8015958 <_dtoa_r+0x2e0>)
 80156e6:	bfb8      	it	lt
 80156e8:	6032      	strlt	r2, [r6, #0]
 80156ea:	ea33 0308 	bics.w	r3, r3, r8
 80156ee:	d112      	bne.n	8015716 <_dtoa_r+0x9e>
 80156f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80156f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80156f6:	6013      	str	r3, [r2, #0]
 80156f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80156fc:	4323      	orrs	r3, r4
 80156fe:	f000 855e 	beq.w	80161be <_dtoa_r+0xb46>
 8015702:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8015704:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801595c <_dtoa_r+0x2e4>
 8015708:	2b00      	cmp	r3, #0
 801570a:	f000 8560 	beq.w	80161ce <_dtoa_r+0xb56>
 801570e:	f10a 0303 	add.w	r3, sl, #3
 8015712:	f000 bd5a 	b.w	80161ca <_dtoa_r+0xb52>
 8015716:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801571a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801571e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015722:	2200      	movs	r2, #0
 8015724:	2300      	movs	r3, #0
 8015726:	f7eb f949 	bl	80009bc <__aeabi_dcmpeq>
 801572a:	4607      	mov	r7, r0
 801572c:	b158      	cbz	r0, 8015746 <_dtoa_r+0xce>
 801572e:	2301      	movs	r3, #1
 8015730:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8015732:	6013      	str	r3, [r2, #0]
 8015734:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8015736:	b113      	cbz	r3, 801573e <_dtoa_r+0xc6>
 8015738:	4b89      	ldr	r3, [pc, #548]	@ (8015960 <_dtoa_r+0x2e8>)
 801573a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801573c:	6013      	str	r3, [r2, #0]
 801573e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8015964 <_dtoa_r+0x2ec>
 8015742:	f000 bd44 	b.w	80161ce <_dtoa_r+0xb56>
 8015746:	ab14      	add	r3, sp, #80	@ 0x50
 8015748:	9301      	str	r3, [sp, #4]
 801574a:	ab15      	add	r3, sp, #84	@ 0x54
 801574c:	9300      	str	r3, [sp, #0]
 801574e:	4648      	mov	r0, r9
 8015750:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015754:	f001 fccc 	bl	80170f0 <__d2b>
 8015758:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801575c:	9003      	str	r0, [sp, #12]
 801575e:	2e00      	cmp	r6, #0
 8015760:	d078      	beq.n	8015854 <_dtoa_r+0x1dc>
 8015762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015768:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801576c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015770:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015774:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015778:	9712      	str	r7, [sp, #72]	@ 0x48
 801577a:	4619      	mov	r1, r3
 801577c:	2200      	movs	r2, #0
 801577e:	4b7a      	ldr	r3, [pc, #488]	@ (8015968 <_dtoa_r+0x2f0>)
 8015780:	f7ea fcfc 	bl	800017c <__aeabi_dsub>
 8015784:	a36c      	add	r3, pc, #432	@ (adr r3, 8015938 <_dtoa_r+0x2c0>)
 8015786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801578a:	f7ea feaf 	bl	80004ec <__aeabi_dmul>
 801578e:	a36c      	add	r3, pc, #432	@ (adr r3, 8015940 <_dtoa_r+0x2c8>)
 8015790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015794:	f7ea fcf4 	bl	8000180 <__adddf3>
 8015798:	4604      	mov	r4, r0
 801579a:	4630      	mov	r0, r6
 801579c:	460d      	mov	r5, r1
 801579e:	f7ea fe3b 	bl	8000418 <__aeabi_i2d>
 80157a2:	a369      	add	r3, pc, #420	@ (adr r3, 8015948 <_dtoa_r+0x2d0>)
 80157a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157a8:	f7ea fea0 	bl	80004ec <__aeabi_dmul>
 80157ac:	4602      	mov	r2, r0
 80157ae:	460b      	mov	r3, r1
 80157b0:	4620      	mov	r0, r4
 80157b2:	4629      	mov	r1, r5
 80157b4:	f7ea fce4 	bl	8000180 <__adddf3>
 80157b8:	4604      	mov	r4, r0
 80157ba:	460d      	mov	r5, r1
 80157bc:	f7eb f946 	bl	8000a4c <__aeabi_d2iz>
 80157c0:	2200      	movs	r2, #0
 80157c2:	4607      	mov	r7, r0
 80157c4:	2300      	movs	r3, #0
 80157c6:	4620      	mov	r0, r4
 80157c8:	4629      	mov	r1, r5
 80157ca:	f7eb f901 	bl	80009d0 <__aeabi_dcmplt>
 80157ce:	b140      	cbz	r0, 80157e2 <_dtoa_r+0x16a>
 80157d0:	4638      	mov	r0, r7
 80157d2:	f7ea fe21 	bl	8000418 <__aeabi_i2d>
 80157d6:	4622      	mov	r2, r4
 80157d8:	462b      	mov	r3, r5
 80157da:	f7eb f8ef 	bl	80009bc <__aeabi_dcmpeq>
 80157de:	b900      	cbnz	r0, 80157e2 <_dtoa_r+0x16a>
 80157e0:	3f01      	subs	r7, #1
 80157e2:	2f16      	cmp	r7, #22
 80157e4:	d854      	bhi.n	8015890 <_dtoa_r+0x218>
 80157e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80157ea:	4b60      	ldr	r3, [pc, #384]	@ (801596c <_dtoa_r+0x2f4>)
 80157ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80157f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f4:	f7eb f8ec 	bl	80009d0 <__aeabi_dcmplt>
 80157f8:	2800      	cmp	r0, #0
 80157fa:	d04b      	beq.n	8015894 <_dtoa_r+0x21c>
 80157fc:	2300      	movs	r3, #0
 80157fe:	3f01      	subs	r7, #1
 8015800:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015802:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015804:	1b9b      	subs	r3, r3, r6
 8015806:	1e5a      	subs	r2, r3, #1
 8015808:	bf49      	itett	mi
 801580a:	f1c3 0301 	rsbmi	r3, r3, #1
 801580e:	2300      	movpl	r3, #0
 8015810:	9304      	strmi	r3, [sp, #16]
 8015812:	2300      	movmi	r3, #0
 8015814:	9209      	str	r2, [sp, #36]	@ 0x24
 8015816:	bf54      	ite	pl
 8015818:	9304      	strpl	r3, [sp, #16]
 801581a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801581c:	2f00      	cmp	r7, #0
 801581e:	db3b      	blt.n	8015898 <_dtoa_r+0x220>
 8015820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015822:	970e      	str	r7, [sp, #56]	@ 0x38
 8015824:	443b      	add	r3, r7
 8015826:	9309      	str	r3, [sp, #36]	@ 0x24
 8015828:	2300      	movs	r3, #0
 801582a:	930a      	str	r3, [sp, #40]	@ 0x28
 801582c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801582e:	2b09      	cmp	r3, #9
 8015830:	d865      	bhi.n	80158fe <_dtoa_r+0x286>
 8015832:	2b05      	cmp	r3, #5
 8015834:	bfc4      	itt	gt
 8015836:	3b04      	subgt	r3, #4
 8015838:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801583a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801583c:	bfc8      	it	gt
 801583e:	2400      	movgt	r4, #0
 8015840:	f1a3 0302 	sub.w	r3, r3, #2
 8015844:	bfd8      	it	le
 8015846:	2401      	movle	r4, #1
 8015848:	2b03      	cmp	r3, #3
 801584a:	d864      	bhi.n	8015916 <_dtoa_r+0x29e>
 801584c:	e8df f003 	tbb	[pc, r3]
 8015850:	2c385553 	.word	0x2c385553
 8015854:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8015858:	441e      	add	r6, r3
 801585a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801585e:	2b20      	cmp	r3, #32
 8015860:	bfc1      	itttt	gt
 8015862:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015866:	fa08 f803 	lslgt.w	r8, r8, r3
 801586a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801586e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015872:	bfd6      	itet	le
 8015874:	f1c3 0320 	rsble	r3, r3, #32
 8015878:	ea48 0003 	orrgt.w	r0, r8, r3
 801587c:	fa04 f003 	lslle.w	r0, r4, r3
 8015880:	f7ea fdba 	bl	80003f8 <__aeabi_ui2d>
 8015884:	2201      	movs	r2, #1
 8015886:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801588a:	3e01      	subs	r6, #1
 801588c:	9212      	str	r2, [sp, #72]	@ 0x48
 801588e:	e774      	b.n	801577a <_dtoa_r+0x102>
 8015890:	2301      	movs	r3, #1
 8015892:	e7b5      	b.n	8015800 <_dtoa_r+0x188>
 8015894:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015896:	e7b4      	b.n	8015802 <_dtoa_r+0x18a>
 8015898:	9b04      	ldr	r3, [sp, #16]
 801589a:	1bdb      	subs	r3, r3, r7
 801589c:	9304      	str	r3, [sp, #16]
 801589e:	427b      	negs	r3, r7
 80158a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80158a2:	2300      	movs	r3, #0
 80158a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80158a6:	e7c1      	b.n	801582c <_dtoa_r+0x1b4>
 80158a8:	2301      	movs	r3, #1
 80158aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80158ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80158ae:	eb07 0b03 	add.w	fp, r7, r3
 80158b2:	f10b 0301 	add.w	r3, fp, #1
 80158b6:	2b01      	cmp	r3, #1
 80158b8:	9308      	str	r3, [sp, #32]
 80158ba:	bfb8      	it	lt
 80158bc:	2301      	movlt	r3, #1
 80158be:	e006      	b.n	80158ce <_dtoa_r+0x256>
 80158c0:	2301      	movs	r3, #1
 80158c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80158c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	dd28      	ble.n	801591c <_dtoa_r+0x2a4>
 80158ca:	469b      	mov	fp, r3
 80158cc:	9308      	str	r3, [sp, #32]
 80158ce:	2100      	movs	r1, #0
 80158d0:	2204      	movs	r2, #4
 80158d2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80158d6:	f102 0514 	add.w	r5, r2, #20
 80158da:	429d      	cmp	r5, r3
 80158dc:	d926      	bls.n	801592c <_dtoa_r+0x2b4>
 80158de:	6041      	str	r1, [r0, #4]
 80158e0:	4648      	mov	r0, r9
 80158e2:	f001 f831 	bl	8016948 <_Balloc>
 80158e6:	4682      	mov	sl, r0
 80158e8:	2800      	cmp	r0, #0
 80158ea:	d143      	bne.n	8015974 <_dtoa_r+0x2fc>
 80158ec:	4602      	mov	r2, r0
 80158ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80158f2:	4b1f      	ldr	r3, [pc, #124]	@ (8015970 <_dtoa_r+0x2f8>)
 80158f4:	e6d4      	b.n	80156a0 <_dtoa_r+0x28>
 80158f6:	2300      	movs	r3, #0
 80158f8:	e7e3      	b.n	80158c2 <_dtoa_r+0x24a>
 80158fa:	2300      	movs	r3, #0
 80158fc:	e7d5      	b.n	80158aa <_dtoa_r+0x232>
 80158fe:	2401      	movs	r4, #1
 8015900:	2300      	movs	r3, #0
 8015902:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015904:	9320      	str	r3, [sp, #128]	@ 0x80
 8015906:	f04f 3bff 	mov.w	fp, #4294967295
 801590a:	2200      	movs	r2, #0
 801590c:	2312      	movs	r3, #18
 801590e:	f8cd b020 	str.w	fp, [sp, #32]
 8015912:	9221      	str	r2, [sp, #132]	@ 0x84
 8015914:	e7db      	b.n	80158ce <_dtoa_r+0x256>
 8015916:	2301      	movs	r3, #1
 8015918:	930b      	str	r3, [sp, #44]	@ 0x2c
 801591a:	e7f4      	b.n	8015906 <_dtoa_r+0x28e>
 801591c:	f04f 0b01 	mov.w	fp, #1
 8015920:	465b      	mov	r3, fp
 8015922:	f8cd b020 	str.w	fp, [sp, #32]
 8015926:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 801592a:	e7d0      	b.n	80158ce <_dtoa_r+0x256>
 801592c:	3101      	adds	r1, #1
 801592e:	0052      	lsls	r2, r2, #1
 8015930:	e7d1      	b.n	80158d6 <_dtoa_r+0x25e>
 8015932:	bf00      	nop
 8015934:	f3af 8000 	nop.w
 8015938:	636f4361 	.word	0x636f4361
 801593c:	3fd287a7 	.word	0x3fd287a7
 8015940:	8b60c8b3 	.word	0x8b60c8b3
 8015944:	3fc68a28 	.word	0x3fc68a28
 8015948:	509f79fb 	.word	0x509f79fb
 801594c:	3fd34413 	.word	0x3fd34413
 8015950:	080193be 	.word	0x080193be
 8015954:	08019444 	.word	0x08019444
 8015958:	7ff00000 	.word	0x7ff00000
 801595c:	08019440 	.word	0x08019440
 8015960:	0801958e 	.word	0x0801958e
 8015964:	0801958d 	.word	0x0801958d
 8015968:	3ff80000 	.word	0x3ff80000
 801596c:	08019720 	.word	0x08019720
 8015970:	0801949c 	.word	0x0801949c
 8015974:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015978:	6018      	str	r0, [r3, #0]
 801597a:	9b08      	ldr	r3, [sp, #32]
 801597c:	2b0e      	cmp	r3, #14
 801597e:	f200 80a1 	bhi.w	8015ac4 <_dtoa_r+0x44c>
 8015982:	2c00      	cmp	r4, #0
 8015984:	f000 809e 	beq.w	8015ac4 <_dtoa_r+0x44c>
 8015988:	2f00      	cmp	r7, #0
 801598a:	dd33      	ble.n	80159f4 <_dtoa_r+0x37c>
 801598c:	4b9c      	ldr	r3, [pc, #624]	@ (8015c00 <_dtoa_r+0x588>)
 801598e:	f007 020f 	and.w	r2, r7, #15
 8015992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015996:	05f8      	lsls	r0, r7, #23
 8015998:	e9d3 3400 	ldrd	r3, r4, [r3]
 801599c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80159a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80159a4:	d516      	bpl.n	80159d4 <_dtoa_r+0x35c>
 80159a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80159aa:	4b96      	ldr	r3, [pc, #600]	@ (8015c04 <_dtoa_r+0x58c>)
 80159ac:	2603      	movs	r6, #3
 80159ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80159b2:	f7ea fec5 	bl	8000740 <__aeabi_ddiv>
 80159b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80159ba:	f004 040f 	and.w	r4, r4, #15
 80159be:	4d91      	ldr	r5, [pc, #580]	@ (8015c04 <_dtoa_r+0x58c>)
 80159c0:	b954      	cbnz	r4, 80159d8 <_dtoa_r+0x360>
 80159c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80159c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159ca:	f7ea feb9 	bl	8000740 <__aeabi_ddiv>
 80159ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80159d2:	e028      	b.n	8015a26 <_dtoa_r+0x3ae>
 80159d4:	2602      	movs	r6, #2
 80159d6:	e7f2      	b.n	80159be <_dtoa_r+0x346>
 80159d8:	07e1      	lsls	r1, r4, #31
 80159da:	d508      	bpl.n	80159ee <_dtoa_r+0x376>
 80159dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80159e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80159e4:	f7ea fd82 	bl	80004ec <__aeabi_dmul>
 80159e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80159ec:	3601      	adds	r6, #1
 80159ee:	1064      	asrs	r4, r4, #1
 80159f0:	3508      	adds	r5, #8
 80159f2:	e7e5      	b.n	80159c0 <_dtoa_r+0x348>
 80159f4:	f000 80af 	beq.w	8015b56 <_dtoa_r+0x4de>
 80159f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80159fc:	427c      	negs	r4, r7
 80159fe:	4b80      	ldr	r3, [pc, #512]	@ (8015c00 <_dtoa_r+0x588>)
 8015a00:	f004 020f 	and.w	r2, r4, #15
 8015a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a0c:	f7ea fd6e 	bl	80004ec <__aeabi_dmul>
 8015a10:	2602      	movs	r6, #2
 8015a12:	2300      	movs	r3, #0
 8015a14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015a18:	4d7a      	ldr	r5, [pc, #488]	@ (8015c04 <_dtoa_r+0x58c>)
 8015a1a:	1124      	asrs	r4, r4, #4
 8015a1c:	2c00      	cmp	r4, #0
 8015a1e:	f040 808f 	bne.w	8015b40 <_dtoa_r+0x4c8>
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d1d3      	bne.n	80159ce <_dtoa_r+0x356>
 8015a26:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8015a2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	f000 8094 	beq.w	8015b5a <_dtoa_r+0x4e2>
 8015a32:	2200      	movs	r2, #0
 8015a34:	4620      	mov	r0, r4
 8015a36:	4629      	mov	r1, r5
 8015a38:	4b73      	ldr	r3, [pc, #460]	@ (8015c08 <_dtoa_r+0x590>)
 8015a3a:	f7ea ffc9 	bl	80009d0 <__aeabi_dcmplt>
 8015a3e:	2800      	cmp	r0, #0
 8015a40:	f000 808b 	beq.w	8015b5a <_dtoa_r+0x4e2>
 8015a44:	9b08      	ldr	r3, [sp, #32]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	f000 8087 	beq.w	8015b5a <_dtoa_r+0x4e2>
 8015a4c:	f1bb 0f00 	cmp.w	fp, #0
 8015a50:	dd34      	ble.n	8015abc <_dtoa_r+0x444>
 8015a52:	4620      	mov	r0, r4
 8015a54:	2200      	movs	r2, #0
 8015a56:	4629      	mov	r1, r5
 8015a58:	4b6c      	ldr	r3, [pc, #432]	@ (8015c0c <_dtoa_r+0x594>)
 8015a5a:	f7ea fd47 	bl	80004ec <__aeabi_dmul>
 8015a5e:	465c      	mov	r4, fp
 8015a60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015a64:	f107 38ff 	add.w	r8, r7, #4294967295
 8015a68:	3601      	adds	r6, #1
 8015a6a:	4630      	mov	r0, r6
 8015a6c:	f7ea fcd4 	bl	8000418 <__aeabi_i2d>
 8015a70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015a74:	f7ea fd3a 	bl	80004ec <__aeabi_dmul>
 8015a78:	2200      	movs	r2, #0
 8015a7a:	4b65      	ldr	r3, [pc, #404]	@ (8015c10 <_dtoa_r+0x598>)
 8015a7c:	f7ea fb80 	bl	8000180 <__adddf3>
 8015a80:	4605      	mov	r5, r0
 8015a82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015a86:	2c00      	cmp	r4, #0
 8015a88:	d16a      	bne.n	8015b60 <_dtoa_r+0x4e8>
 8015a8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	4b60      	ldr	r3, [pc, #384]	@ (8015c14 <_dtoa_r+0x59c>)
 8015a92:	f7ea fb73 	bl	800017c <__aeabi_dsub>
 8015a96:	4602      	mov	r2, r0
 8015a98:	460b      	mov	r3, r1
 8015a9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a9e:	462a      	mov	r2, r5
 8015aa0:	4633      	mov	r3, r6
 8015aa2:	f7ea ffb3 	bl	8000a0c <__aeabi_dcmpgt>
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	f040 8298 	bne.w	8015fdc <_dtoa_r+0x964>
 8015aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ab0:	462a      	mov	r2, r5
 8015ab2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015ab6:	f7ea ff8b 	bl	80009d0 <__aeabi_dcmplt>
 8015aba:	bb38      	cbnz	r0, 8015b0c <_dtoa_r+0x494>
 8015abc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8015ac0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8015ac4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	f2c0 8157 	blt.w	8015d7a <_dtoa_r+0x702>
 8015acc:	2f0e      	cmp	r7, #14
 8015ace:	f300 8154 	bgt.w	8015d7a <_dtoa_r+0x702>
 8015ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8015c00 <_dtoa_r+0x588>)
 8015ad4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015ad8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015adc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8015ae0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f280 80e5 	bge.w	8015cb2 <_dtoa_r+0x63a>
 8015ae8:	9b08      	ldr	r3, [sp, #32]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	f300 80e1 	bgt.w	8015cb2 <_dtoa_r+0x63a>
 8015af0:	d10c      	bne.n	8015b0c <_dtoa_r+0x494>
 8015af2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015af6:	2200      	movs	r2, #0
 8015af8:	4b46      	ldr	r3, [pc, #280]	@ (8015c14 <_dtoa_r+0x59c>)
 8015afa:	f7ea fcf7 	bl	80004ec <__aeabi_dmul>
 8015afe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015b02:	f7ea ff79 	bl	80009f8 <__aeabi_dcmpge>
 8015b06:	2800      	cmp	r0, #0
 8015b08:	f000 8266 	beq.w	8015fd8 <_dtoa_r+0x960>
 8015b0c:	2400      	movs	r4, #0
 8015b0e:	4625      	mov	r5, r4
 8015b10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015b12:	4656      	mov	r6, sl
 8015b14:	ea6f 0803 	mvn.w	r8, r3
 8015b18:	2700      	movs	r7, #0
 8015b1a:	4621      	mov	r1, r4
 8015b1c:	4648      	mov	r0, r9
 8015b1e:	f000 ff53 	bl	80169c8 <_Bfree>
 8015b22:	2d00      	cmp	r5, #0
 8015b24:	f000 80bd 	beq.w	8015ca2 <_dtoa_r+0x62a>
 8015b28:	b12f      	cbz	r7, 8015b36 <_dtoa_r+0x4be>
 8015b2a:	42af      	cmp	r7, r5
 8015b2c:	d003      	beq.n	8015b36 <_dtoa_r+0x4be>
 8015b2e:	4639      	mov	r1, r7
 8015b30:	4648      	mov	r0, r9
 8015b32:	f000 ff49 	bl	80169c8 <_Bfree>
 8015b36:	4629      	mov	r1, r5
 8015b38:	4648      	mov	r0, r9
 8015b3a:	f000 ff45 	bl	80169c8 <_Bfree>
 8015b3e:	e0b0      	b.n	8015ca2 <_dtoa_r+0x62a>
 8015b40:	07e2      	lsls	r2, r4, #31
 8015b42:	d505      	bpl.n	8015b50 <_dtoa_r+0x4d8>
 8015b44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015b48:	f7ea fcd0 	bl	80004ec <__aeabi_dmul>
 8015b4c:	2301      	movs	r3, #1
 8015b4e:	3601      	adds	r6, #1
 8015b50:	1064      	asrs	r4, r4, #1
 8015b52:	3508      	adds	r5, #8
 8015b54:	e762      	b.n	8015a1c <_dtoa_r+0x3a4>
 8015b56:	2602      	movs	r6, #2
 8015b58:	e765      	b.n	8015a26 <_dtoa_r+0x3ae>
 8015b5a:	46b8      	mov	r8, r7
 8015b5c:	9c08      	ldr	r4, [sp, #32]
 8015b5e:	e784      	b.n	8015a6a <_dtoa_r+0x3f2>
 8015b60:	4b27      	ldr	r3, [pc, #156]	@ (8015c00 <_dtoa_r+0x588>)
 8015b62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015b64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015b68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015b6c:	4454      	add	r4, sl
 8015b6e:	2900      	cmp	r1, #0
 8015b70:	d054      	beq.n	8015c1c <_dtoa_r+0x5a4>
 8015b72:	2000      	movs	r0, #0
 8015b74:	4928      	ldr	r1, [pc, #160]	@ (8015c18 <_dtoa_r+0x5a0>)
 8015b76:	f7ea fde3 	bl	8000740 <__aeabi_ddiv>
 8015b7a:	4633      	mov	r3, r6
 8015b7c:	462a      	mov	r2, r5
 8015b7e:	f7ea fafd 	bl	800017c <__aeabi_dsub>
 8015b82:	4656      	mov	r6, sl
 8015b84:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015b88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b8c:	f7ea ff5e 	bl	8000a4c <__aeabi_d2iz>
 8015b90:	4605      	mov	r5, r0
 8015b92:	f7ea fc41 	bl	8000418 <__aeabi_i2d>
 8015b96:	4602      	mov	r2, r0
 8015b98:	460b      	mov	r3, r1
 8015b9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b9e:	f7ea faed 	bl	800017c <__aeabi_dsub>
 8015ba2:	4602      	mov	r2, r0
 8015ba4:	460b      	mov	r3, r1
 8015ba6:	3530      	adds	r5, #48	@ 0x30
 8015ba8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015bac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015bb0:	f806 5b01 	strb.w	r5, [r6], #1
 8015bb4:	f7ea ff0c 	bl	80009d0 <__aeabi_dcmplt>
 8015bb8:	2800      	cmp	r0, #0
 8015bba:	d172      	bne.n	8015ca2 <_dtoa_r+0x62a>
 8015bbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015bc0:	2000      	movs	r0, #0
 8015bc2:	4911      	ldr	r1, [pc, #68]	@ (8015c08 <_dtoa_r+0x590>)
 8015bc4:	f7ea fada 	bl	800017c <__aeabi_dsub>
 8015bc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015bcc:	f7ea ff00 	bl	80009d0 <__aeabi_dcmplt>
 8015bd0:	2800      	cmp	r0, #0
 8015bd2:	f040 80b4 	bne.w	8015d3e <_dtoa_r+0x6c6>
 8015bd6:	42a6      	cmp	r6, r4
 8015bd8:	f43f af70 	beq.w	8015abc <_dtoa_r+0x444>
 8015bdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015be0:	2200      	movs	r2, #0
 8015be2:	4b0a      	ldr	r3, [pc, #40]	@ (8015c0c <_dtoa_r+0x594>)
 8015be4:	f7ea fc82 	bl	80004ec <__aeabi_dmul>
 8015be8:	2200      	movs	r2, #0
 8015bea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015bf2:	4b06      	ldr	r3, [pc, #24]	@ (8015c0c <_dtoa_r+0x594>)
 8015bf4:	f7ea fc7a 	bl	80004ec <__aeabi_dmul>
 8015bf8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015bfc:	e7c4      	b.n	8015b88 <_dtoa_r+0x510>
 8015bfe:	bf00      	nop
 8015c00:	08019720 	.word	0x08019720
 8015c04:	080196f8 	.word	0x080196f8
 8015c08:	3ff00000 	.word	0x3ff00000
 8015c0c:	40240000 	.word	0x40240000
 8015c10:	401c0000 	.word	0x401c0000
 8015c14:	40140000 	.word	0x40140000
 8015c18:	3fe00000 	.word	0x3fe00000
 8015c1c:	4631      	mov	r1, r6
 8015c1e:	4628      	mov	r0, r5
 8015c20:	f7ea fc64 	bl	80004ec <__aeabi_dmul>
 8015c24:	4656      	mov	r6, sl
 8015c26:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015c2a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8015c2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c30:	f7ea ff0c 	bl	8000a4c <__aeabi_d2iz>
 8015c34:	4605      	mov	r5, r0
 8015c36:	f7ea fbef 	bl	8000418 <__aeabi_i2d>
 8015c3a:	4602      	mov	r2, r0
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c42:	f7ea fa9b 	bl	800017c <__aeabi_dsub>
 8015c46:	4602      	mov	r2, r0
 8015c48:	460b      	mov	r3, r1
 8015c4a:	3530      	adds	r5, #48	@ 0x30
 8015c4c:	f806 5b01 	strb.w	r5, [r6], #1
 8015c50:	42a6      	cmp	r6, r4
 8015c52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015c56:	f04f 0200 	mov.w	r2, #0
 8015c5a:	d124      	bne.n	8015ca6 <_dtoa_r+0x62e>
 8015c5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015c60:	4bae      	ldr	r3, [pc, #696]	@ (8015f1c <_dtoa_r+0x8a4>)
 8015c62:	f7ea fa8d 	bl	8000180 <__adddf3>
 8015c66:	4602      	mov	r2, r0
 8015c68:	460b      	mov	r3, r1
 8015c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c6e:	f7ea fecd 	bl	8000a0c <__aeabi_dcmpgt>
 8015c72:	2800      	cmp	r0, #0
 8015c74:	d163      	bne.n	8015d3e <_dtoa_r+0x6c6>
 8015c76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015c7a:	2000      	movs	r0, #0
 8015c7c:	49a7      	ldr	r1, [pc, #668]	@ (8015f1c <_dtoa_r+0x8a4>)
 8015c7e:	f7ea fa7d 	bl	800017c <__aeabi_dsub>
 8015c82:	4602      	mov	r2, r0
 8015c84:	460b      	mov	r3, r1
 8015c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c8a:	f7ea fea1 	bl	80009d0 <__aeabi_dcmplt>
 8015c8e:	2800      	cmp	r0, #0
 8015c90:	f43f af14 	beq.w	8015abc <_dtoa_r+0x444>
 8015c94:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015c96:	1e73      	subs	r3, r6, #1
 8015c98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015c9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015c9e:	2b30      	cmp	r3, #48	@ 0x30
 8015ca0:	d0f8      	beq.n	8015c94 <_dtoa_r+0x61c>
 8015ca2:	4647      	mov	r7, r8
 8015ca4:	e03b      	b.n	8015d1e <_dtoa_r+0x6a6>
 8015ca6:	4b9e      	ldr	r3, [pc, #632]	@ (8015f20 <_dtoa_r+0x8a8>)
 8015ca8:	f7ea fc20 	bl	80004ec <__aeabi_dmul>
 8015cac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015cb0:	e7bc      	b.n	8015c2c <_dtoa_r+0x5b4>
 8015cb2:	4656      	mov	r6, sl
 8015cb4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8015cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	4629      	mov	r1, r5
 8015cc0:	f7ea fd3e 	bl	8000740 <__aeabi_ddiv>
 8015cc4:	f7ea fec2 	bl	8000a4c <__aeabi_d2iz>
 8015cc8:	4680      	mov	r8, r0
 8015cca:	f7ea fba5 	bl	8000418 <__aeabi_i2d>
 8015cce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cd2:	f7ea fc0b 	bl	80004ec <__aeabi_dmul>
 8015cd6:	4602      	mov	r2, r0
 8015cd8:	460b      	mov	r3, r1
 8015cda:	4620      	mov	r0, r4
 8015cdc:	4629      	mov	r1, r5
 8015cde:	f7ea fa4d 	bl	800017c <__aeabi_dsub>
 8015ce2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015ce6:	9d08      	ldr	r5, [sp, #32]
 8015ce8:	f806 4b01 	strb.w	r4, [r6], #1
 8015cec:	eba6 040a 	sub.w	r4, r6, sl
 8015cf0:	42a5      	cmp	r5, r4
 8015cf2:	4602      	mov	r2, r0
 8015cf4:	460b      	mov	r3, r1
 8015cf6:	d133      	bne.n	8015d60 <_dtoa_r+0x6e8>
 8015cf8:	f7ea fa42 	bl	8000180 <__adddf3>
 8015cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d00:	4604      	mov	r4, r0
 8015d02:	460d      	mov	r5, r1
 8015d04:	f7ea fe82 	bl	8000a0c <__aeabi_dcmpgt>
 8015d08:	b9c0      	cbnz	r0, 8015d3c <_dtoa_r+0x6c4>
 8015d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d0e:	4620      	mov	r0, r4
 8015d10:	4629      	mov	r1, r5
 8015d12:	f7ea fe53 	bl	80009bc <__aeabi_dcmpeq>
 8015d16:	b110      	cbz	r0, 8015d1e <_dtoa_r+0x6a6>
 8015d18:	f018 0f01 	tst.w	r8, #1
 8015d1c:	d10e      	bne.n	8015d3c <_dtoa_r+0x6c4>
 8015d1e:	4648      	mov	r0, r9
 8015d20:	9903      	ldr	r1, [sp, #12]
 8015d22:	f000 fe51 	bl	80169c8 <_Bfree>
 8015d26:	2300      	movs	r3, #0
 8015d28:	7033      	strb	r3, [r6, #0]
 8015d2a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8015d2c:	3701      	adds	r7, #1
 8015d2e:	601f      	str	r7, [r3, #0]
 8015d30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	f000 824b 	beq.w	80161ce <_dtoa_r+0xb56>
 8015d38:	601e      	str	r6, [r3, #0]
 8015d3a:	e248      	b.n	80161ce <_dtoa_r+0xb56>
 8015d3c:	46b8      	mov	r8, r7
 8015d3e:	4633      	mov	r3, r6
 8015d40:	461e      	mov	r6, r3
 8015d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d46:	2a39      	cmp	r2, #57	@ 0x39
 8015d48:	d106      	bne.n	8015d58 <_dtoa_r+0x6e0>
 8015d4a:	459a      	cmp	sl, r3
 8015d4c:	d1f8      	bne.n	8015d40 <_dtoa_r+0x6c8>
 8015d4e:	2230      	movs	r2, #48	@ 0x30
 8015d50:	f108 0801 	add.w	r8, r8, #1
 8015d54:	f88a 2000 	strb.w	r2, [sl]
 8015d58:	781a      	ldrb	r2, [r3, #0]
 8015d5a:	3201      	adds	r2, #1
 8015d5c:	701a      	strb	r2, [r3, #0]
 8015d5e:	e7a0      	b.n	8015ca2 <_dtoa_r+0x62a>
 8015d60:	2200      	movs	r2, #0
 8015d62:	4b6f      	ldr	r3, [pc, #444]	@ (8015f20 <_dtoa_r+0x8a8>)
 8015d64:	f7ea fbc2 	bl	80004ec <__aeabi_dmul>
 8015d68:	2200      	movs	r2, #0
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	4604      	mov	r4, r0
 8015d6e:	460d      	mov	r5, r1
 8015d70:	f7ea fe24 	bl	80009bc <__aeabi_dcmpeq>
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d09f      	beq.n	8015cb8 <_dtoa_r+0x640>
 8015d78:	e7d1      	b.n	8015d1e <_dtoa_r+0x6a6>
 8015d7a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015d7c:	2a00      	cmp	r2, #0
 8015d7e:	f000 80ea 	beq.w	8015f56 <_dtoa_r+0x8de>
 8015d82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015d84:	2a01      	cmp	r2, #1
 8015d86:	f300 80cd 	bgt.w	8015f24 <_dtoa_r+0x8ac>
 8015d8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015d8c:	2a00      	cmp	r2, #0
 8015d8e:	f000 80c1 	beq.w	8015f14 <_dtoa_r+0x89c>
 8015d92:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015d96:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015d98:	9e04      	ldr	r6, [sp, #16]
 8015d9a:	9a04      	ldr	r2, [sp, #16]
 8015d9c:	2101      	movs	r1, #1
 8015d9e:	441a      	add	r2, r3
 8015da0:	9204      	str	r2, [sp, #16]
 8015da2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015da4:	4648      	mov	r0, r9
 8015da6:	441a      	add	r2, r3
 8015da8:	9209      	str	r2, [sp, #36]	@ 0x24
 8015daa:	f000 ff0b 	bl	8016bc4 <__i2b>
 8015dae:	4605      	mov	r5, r0
 8015db0:	b166      	cbz	r6, 8015dcc <_dtoa_r+0x754>
 8015db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	dd09      	ble.n	8015dcc <_dtoa_r+0x754>
 8015db8:	42b3      	cmp	r3, r6
 8015dba:	bfa8      	it	ge
 8015dbc:	4633      	movge	r3, r6
 8015dbe:	9a04      	ldr	r2, [sp, #16]
 8015dc0:	1af6      	subs	r6, r6, r3
 8015dc2:	1ad2      	subs	r2, r2, r3
 8015dc4:	9204      	str	r2, [sp, #16]
 8015dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015dc8:	1ad3      	subs	r3, r2, r3
 8015dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8015dcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015dce:	b30b      	cbz	r3, 8015e14 <_dtoa_r+0x79c>
 8015dd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	f000 80c6 	beq.w	8015f64 <_dtoa_r+0x8ec>
 8015dd8:	2c00      	cmp	r4, #0
 8015dda:	f000 80c0 	beq.w	8015f5e <_dtoa_r+0x8e6>
 8015dde:	4629      	mov	r1, r5
 8015de0:	4622      	mov	r2, r4
 8015de2:	4648      	mov	r0, r9
 8015de4:	f000 ffa6 	bl	8016d34 <__pow5mult>
 8015de8:	9a03      	ldr	r2, [sp, #12]
 8015dea:	4601      	mov	r1, r0
 8015dec:	4605      	mov	r5, r0
 8015dee:	4648      	mov	r0, r9
 8015df0:	f000 fefe 	bl	8016bf0 <__multiply>
 8015df4:	9903      	ldr	r1, [sp, #12]
 8015df6:	4680      	mov	r8, r0
 8015df8:	4648      	mov	r0, r9
 8015dfa:	f000 fde5 	bl	80169c8 <_Bfree>
 8015dfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e00:	1b1b      	subs	r3, r3, r4
 8015e02:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e04:	f000 80b1 	beq.w	8015f6a <_dtoa_r+0x8f2>
 8015e08:	4641      	mov	r1, r8
 8015e0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015e0c:	4648      	mov	r0, r9
 8015e0e:	f000 ff91 	bl	8016d34 <__pow5mult>
 8015e12:	9003      	str	r0, [sp, #12]
 8015e14:	2101      	movs	r1, #1
 8015e16:	4648      	mov	r0, r9
 8015e18:	f000 fed4 	bl	8016bc4 <__i2b>
 8015e1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e1e:	4604      	mov	r4, r0
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	f000 81d8 	beq.w	80161d6 <_dtoa_r+0xb5e>
 8015e26:	461a      	mov	r2, r3
 8015e28:	4601      	mov	r1, r0
 8015e2a:	4648      	mov	r0, r9
 8015e2c:	f000 ff82 	bl	8016d34 <__pow5mult>
 8015e30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8015e32:	4604      	mov	r4, r0
 8015e34:	2b01      	cmp	r3, #1
 8015e36:	f300 809f 	bgt.w	8015f78 <_dtoa_r+0x900>
 8015e3a:	9b06      	ldr	r3, [sp, #24]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	f040 8097 	bne.w	8015f70 <_dtoa_r+0x8f8>
 8015e42:	9b07      	ldr	r3, [sp, #28]
 8015e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	f040 8093 	bne.w	8015f74 <_dtoa_r+0x8fc>
 8015e4e:	9b07      	ldr	r3, [sp, #28]
 8015e50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015e54:	0d1b      	lsrs	r3, r3, #20
 8015e56:	051b      	lsls	r3, r3, #20
 8015e58:	b133      	cbz	r3, 8015e68 <_dtoa_r+0x7f0>
 8015e5a:	9b04      	ldr	r3, [sp, #16]
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	9304      	str	r3, [sp, #16]
 8015e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e62:	3301      	adds	r3, #1
 8015e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e66:	2301      	movs	r3, #1
 8015e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	f000 81b8 	beq.w	80161e2 <_dtoa_r+0xb6a>
 8015e72:	6923      	ldr	r3, [r4, #16]
 8015e74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015e78:	6918      	ldr	r0, [r3, #16]
 8015e7a:	f000 fe57 	bl	8016b2c <__hi0bits>
 8015e7e:	f1c0 0020 	rsb	r0, r0, #32
 8015e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e84:	4418      	add	r0, r3
 8015e86:	f010 001f 	ands.w	r0, r0, #31
 8015e8a:	f000 8082 	beq.w	8015f92 <_dtoa_r+0x91a>
 8015e8e:	f1c0 0320 	rsb	r3, r0, #32
 8015e92:	2b04      	cmp	r3, #4
 8015e94:	dd73      	ble.n	8015f7e <_dtoa_r+0x906>
 8015e96:	9b04      	ldr	r3, [sp, #16]
 8015e98:	f1c0 001c 	rsb	r0, r0, #28
 8015e9c:	4403      	add	r3, r0
 8015e9e:	9304      	str	r3, [sp, #16]
 8015ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ea2:	4406      	add	r6, r0
 8015ea4:	4403      	add	r3, r0
 8015ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ea8:	9b04      	ldr	r3, [sp, #16]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	dd05      	ble.n	8015eba <_dtoa_r+0x842>
 8015eae:	461a      	mov	r2, r3
 8015eb0:	4648      	mov	r0, r9
 8015eb2:	9903      	ldr	r1, [sp, #12]
 8015eb4:	f000 ff98 	bl	8016de8 <__lshift>
 8015eb8:	9003      	str	r0, [sp, #12]
 8015eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	dd05      	ble.n	8015ecc <_dtoa_r+0x854>
 8015ec0:	4621      	mov	r1, r4
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	4648      	mov	r0, r9
 8015ec6:	f000 ff8f 	bl	8016de8 <__lshift>
 8015eca:	4604      	mov	r4, r0
 8015ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d061      	beq.n	8015f96 <_dtoa_r+0x91e>
 8015ed2:	4621      	mov	r1, r4
 8015ed4:	9803      	ldr	r0, [sp, #12]
 8015ed6:	f000 fff3 	bl	8016ec0 <__mcmp>
 8015eda:	2800      	cmp	r0, #0
 8015edc:	da5b      	bge.n	8015f96 <_dtoa_r+0x91e>
 8015ede:	2300      	movs	r3, #0
 8015ee0:	220a      	movs	r2, #10
 8015ee2:	4648      	mov	r0, r9
 8015ee4:	9903      	ldr	r1, [sp, #12]
 8015ee6:	f000 fd91 	bl	8016a0c <__multadd>
 8015eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015eec:	f107 38ff 	add.w	r8, r7, #4294967295
 8015ef0:	9003      	str	r0, [sp, #12]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	f000 8177 	beq.w	80161e6 <_dtoa_r+0xb6e>
 8015ef8:	4629      	mov	r1, r5
 8015efa:	2300      	movs	r3, #0
 8015efc:	220a      	movs	r2, #10
 8015efe:	4648      	mov	r0, r9
 8015f00:	f000 fd84 	bl	8016a0c <__multadd>
 8015f04:	f1bb 0f00 	cmp.w	fp, #0
 8015f08:	4605      	mov	r5, r0
 8015f0a:	dc6f      	bgt.n	8015fec <_dtoa_r+0x974>
 8015f0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8015f0e:	2b02      	cmp	r3, #2
 8015f10:	dc49      	bgt.n	8015fa6 <_dtoa_r+0x92e>
 8015f12:	e06b      	b.n	8015fec <_dtoa_r+0x974>
 8015f14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015f16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015f1a:	e73c      	b.n	8015d96 <_dtoa_r+0x71e>
 8015f1c:	3fe00000 	.word	0x3fe00000
 8015f20:	40240000 	.word	0x40240000
 8015f24:	9b08      	ldr	r3, [sp, #32]
 8015f26:	1e5c      	subs	r4, r3, #1
 8015f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f2a:	42a3      	cmp	r3, r4
 8015f2c:	db09      	blt.n	8015f42 <_dtoa_r+0x8ca>
 8015f2e:	1b1c      	subs	r4, r3, r4
 8015f30:	9b08      	ldr	r3, [sp, #32]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	f6bf af30 	bge.w	8015d98 <_dtoa_r+0x720>
 8015f38:	9b04      	ldr	r3, [sp, #16]
 8015f3a:	9a08      	ldr	r2, [sp, #32]
 8015f3c:	1a9e      	subs	r6, r3, r2
 8015f3e:	2300      	movs	r3, #0
 8015f40:	e72b      	b.n	8015d9a <_dtoa_r+0x722>
 8015f42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f46:	1ae3      	subs	r3, r4, r3
 8015f48:	441a      	add	r2, r3
 8015f4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8015f4c:	9e04      	ldr	r6, [sp, #16]
 8015f4e:	2400      	movs	r4, #0
 8015f50:	9b08      	ldr	r3, [sp, #32]
 8015f52:	920e      	str	r2, [sp, #56]	@ 0x38
 8015f54:	e721      	b.n	8015d9a <_dtoa_r+0x722>
 8015f56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015f58:	9e04      	ldr	r6, [sp, #16]
 8015f5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015f5c:	e728      	b.n	8015db0 <_dtoa_r+0x738>
 8015f5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8015f62:	e751      	b.n	8015e08 <_dtoa_r+0x790>
 8015f64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015f66:	9903      	ldr	r1, [sp, #12]
 8015f68:	e750      	b.n	8015e0c <_dtoa_r+0x794>
 8015f6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f6e:	e751      	b.n	8015e14 <_dtoa_r+0x79c>
 8015f70:	2300      	movs	r3, #0
 8015f72:	e779      	b.n	8015e68 <_dtoa_r+0x7f0>
 8015f74:	9b06      	ldr	r3, [sp, #24]
 8015f76:	e777      	b.n	8015e68 <_dtoa_r+0x7f0>
 8015f78:	2300      	movs	r3, #0
 8015f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f7c:	e779      	b.n	8015e72 <_dtoa_r+0x7fa>
 8015f7e:	d093      	beq.n	8015ea8 <_dtoa_r+0x830>
 8015f80:	9a04      	ldr	r2, [sp, #16]
 8015f82:	331c      	adds	r3, #28
 8015f84:	441a      	add	r2, r3
 8015f86:	9204      	str	r2, [sp, #16]
 8015f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f8a:	441e      	add	r6, r3
 8015f8c:	441a      	add	r2, r3
 8015f8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f90:	e78a      	b.n	8015ea8 <_dtoa_r+0x830>
 8015f92:	4603      	mov	r3, r0
 8015f94:	e7f4      	b.n	8015f80 <_dtoa_r+0x908>
 8015f96:	9b08      	ldr	r3, [sp, #32]
 8015f98:	46b8      	mov	r8, r7
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	dc20      	bgt.n	8015fe0 <_dtoa_r+0x968>
 8015f9e:	469b      	mov	fp, r3
 8015fa0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8015fa2:	2b02      	cmp	r3, #2
 8015fa4:	dd1e      	ble.n	8015fe4 <_dtoa_r+0x96c>
 8015fa6:	f1bb 0f00 	cmp.w	fp, #0
 8015faa:	f47f adb1 	bne.w	8015b10 <_dtoa_r+0x498>
 8015fae:	4621      	mov	r1, r4
 8015fb0:	465b      	mov	r3, fp
 8015fb2:	2205      	movs	r2, #5
 8015fb4:	4648      	mov	r0, r9
 8015fb6:	f000 fd29 	bl	8016a0c <__multadd>
 8015fba:	4601      	mov	r1, r0
 8015fbc:	4604      	mov	r4, r0
 8015fbe:	9803      	ldr	r0, [sp, #12]
 8015fc0:	f000 ff7e 	bl	8016ec0 <__mcmp>
 8015fc4:	2800      	cmp	r0, #0
 8015fc6:	f77f ada3 	ble.w	8015b10 <_dtoa_r+0x498>
 8015fca:	4656      	mov	r6, sl
 8015fcc:	2331      	movs	r3, #49	@ 0x31
 8015fce:	f108 0801 	add.w	r8, r8, #1
 8015fd2:	f806 3b01 	strb.w	r3, [r6], #1
 8015fd6:	e59f      	b.n	8015b18 <_dtoa_r+0x4a0>
 8015fd8:	46b8      	mov	r8, r7
 8015fda:	9c08      	ldr	r4, [sp, #32]
 8015fdc:	4625      	mov	r5, r4
 8015fde:	e7f4      	b.n	8015fca <_dtoa_r+0x952>
 8015fe0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8015fe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	f000 8101 	beq.w	80161ee <_dtoa_r+0xb76>
 8015fec:	2e00      	cmp	r6, #0
 8015fee:	dd05      	ble.n	8015ffc <_dtoa_r+0x984>
 8015ff0:	4629      	mov	r1, r5
 8015ff2:	4632      	mov	r2, r6
 8015ff4:	4648      	mov	r0, r9
 8015ff6:	f000 fef7 	bl	8016de8 <__lshift>
 8015ffa:	4605      	mov	r5, r0
 8015ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d05c      	beq.n	80160bc <_dtoa_r+0xa44>
 8016002:	4648      	mov	r0, r9
 8016004:	6869      	ldr	r1, [r5, #4]
 8016006:	f000 fc9f 	bl	8016948 <_Balloc>
 801600a:	4606      	mov	r6, r0
 801600c:	b928      	cbnz	r0, 801601a <_dtoa_r+0x9a2>
 801600e:	4602      	mov	r2, r0
 8016010:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016014:	4b80      	ldr	r3, [pc, #512]	@ (8016218 <_dtoa_r+0xba0>)
 8016016:	f7ff bb43 	b.w	80156a0 <_dtoa_r+0x28>
 801601a:	692a      	ldr	r2, [r5, #16]
 801601c:	f105 010c 	add.w	r1, r5, #12
 8016020:	3202      	adds	r2, #2
 8016022:	0092      	lsls	r2, r2, #2
 8016024:	300c      	adds	r0, #12
 8016026:	f7ff fa7e 	bl	8015526 <memcpy>
 801602a:	2201      	movs	r2, #1
 801602c:	4631      	mov	r1, r6
 801602e:	4648      	mov	r0, r9
 8016030:	f000 feda 	bl	8016de8 <__lshift>
 8016034:	462f      	mov	r7, r5
 8016036:	4605      	mov	r5, r0
 8016038:	f10a 0301 	add.w	r3, sl, #1
 801603c:	9304      	str	r3, [sp, #16]
 801603e:	eb0a 030b 	add.w	r3, sl, fp
 8016042:	930a      	str	r3, [sp, #40]	@ 0x28
 8016044:	9b06      	ldr	r3, [sp, #24]
 8016046:	f003 0301 	and.w	r3, r3, #1
 801604a:	9309      	str	r3, [sp, #36]	@ 0x24
 801604c:	9b04      	ldr	r3, [sp, #16]
 801604e:	4621      	mov	r1, r4
 8016050:	9803      	ldr	r0, [sp, #12]
 8016052:	f103 3bff 	add.w	fp, r3, #4294967295
 8016056:	f7ff fa86 	bl	8015566 <quorem>
 801605a:	4603      	mov	r3, r0
 801605c:	4639      	mov	r1, r7
 801605e:	3330      	adds	r3, #48	@ 0x30
 8016060:	9006      	str	r0, [sp, #24]
 8016062:	9803      	ldr	r0, [sp, #12]
 8016064:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016066:	f000 ff2b 	bl	8016ec0 <__mcmp>
 801606a:	462a      	mov	r2, r5
 801606c:	9008      	str	r0, [sp, #32]
 801606e:	4621      	mov	r1, r4
 8016070:	4648      	mov	r0, r9
 8016072:	f000 ff41 	bl	8016ef8 <__mdiff>
 8016076:	68c2      	ldr	r2, [r0, #12]
 8016078:	4606      	mov	r6, r0
 801607a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801607c:	bb02      	cbnz	r2, 80160c0 <_dtoa_r+0xa48>
 801607e:	4601      	mov	r1, r0
 8016080:	9803      	ldr	r0, [sp, #12]
 8016082:	f000 ff1d 	bl	8016ec0 <__mcmp>
 8016086:	4602      	mov	r2, r0
 8016088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801608a:	4631      	mov	r1, r6
 801608c:	4648      	mov	r0, r9
 801608e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8016092:	f000 fc99 	bl	80169c8 <_Bfree>
 8016096:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8016098:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801609a:	9e04      	ldr	r6, [sp, #16]
 801609c:	ea42 0103 	orr.w	r1, r2, r3
 80160a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160a2:	4319      	orrs	r1, r3
 80160a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80160a6:	d10d      	bne.n	80160c4 <_dtoa_r+0xa4c>
 80160a8:	2b39      	cmp	r3, #57	@ 0x39
 80160aa:	d027      	beq.n	80160fc <_dtoa_r+0xa84>
 80160ac:	9a08      	ldr	r2, [sp, #32]
 80160ae:	2a00      	cmp	r2, #0
 80160b0:	dd01      	ble.n	80160b6 <_dtoa_r+0xa3e>
 80160b2:	9b06      	ldr	r3, [sp, #24]
 80160b4:	3331      	adds	r3, #49	@ 0x31
 80160b6:	f88b 3000 	strb.w	r3, [fp]
 80160ba:	e52e      	b.n	8015b1a <_dtoa_r+0x4a2>
 80160bc:	4628      	mov	r0, r5
 80160be:	e7b9      	b.n	8016034 <_dtoa_r+0x9bc>
 80160c0:	2201      	movs	r2, #1
 80160c2:	e7e2      	b.n	801608a <_dtoa_r+0xa12>
 80160c4:	9908      	ldr	r1, [sp, #32]
 80160c6:	2900      	cmp	r1, #0
 80160c8:	db04      	blt.n	80160d4 <_dtoa_r+0xa5c>
 80160ca:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80160cc:	4301      	orrs	r1, r0
 80160ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160d0:	4301      	orrs	r1, r0
 80160d2:	d120      	bne.n	8016116 <_dtoa_r+0xa9e>
 80160d4:	2a00      	cmp	r2, #0
 80160d6:	ddee      	ble.n	80160b6 <_dtoa_r+0xa3e>
 80160d8:	2201      	movs	r2, #1
 80160da:	9903      	ldr	r1, [sp, #12]
 80160dc:	4648      	mov	r0, r9
 80160de:	9304      	str	r3, [sp, #16]
 80160e0:	f000 fe82 	bl	8016de8 <__lshift>
 80160e4:	4621      	mov	r1, r4
 80160e6:	9003      	str	r0, [sp, #12]
 80160e8:	f000 feea 	bl	8016ec0 <__mcmp>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	9b04      	ldr	r3, [sp, #16]
 80160f0:	dc02      	bgt.n	80160f8 <_dtoa_r+0xa80>
 80160f2:	d1e0      	bne.n	80160b6 <_dtoa_r+0xa3e>
 80160f4:	07da      	lsls	r2, r3, #31
 80160f6:	d5de      	bpl.n	80160b6 <_dtoa_r+0xa3e>
 80160f8:	2b39      	cmp	r3, #57	@ 0x39
 80160fa:	d1da      	bne.n	80160b2 <_dtoa_r+0xa3a>
 80160fc:	2339      	movs	r3, #57	@ 0x39
 80160fe:	f88b 3000 	strb.w	r3, [fp]
 8016102:	4633      	mov	r3, r6
 8016104:	461e      	mov	r6, r3
 8016106:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801610a:	3b01      	subs	r3, #1
 801610c:	2a39      	cmp	r2, #57	@ 0x39
 801610e:	d04e      	beq.n	80161ae <_dtoa_r+0xb36>
 8016110:	3201      	adds	r2, #1
 8016112:	701a      	strb	r2, [r3, #0]
 8016114:	e501      	b.n	8015b1a <_dtoa_r+0x4a2>
 8016116:	2a00      	cmp	r2, #0
 8016118:	dd03      	ble.n	8016122 <_dtoa_r+0xaaa>
 801611a:	2b39      	cmp	r3, #57	@ 0x39
 801611c:	d0ee      	beq.n	80160fc <_dtoa_r+0xa84>
 801611e:	3301      	adds	r3, #1
 8016120:	e7c9      	b.n	80160b6 <_dtoa_r+0xa3e>
 8016122:	9a04      	ldr	r2, [sp, #16]
 8016124:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016126:	f802 3c01 	strb.w	r3, [r2, #-1]
 801612a:	428a      	cmp	r2, r1
 801612c:	d028      	beq.n	8016180 <_dtoa_r+0xb08>
 801612e:	2300      	movs	r3, #0
 8016130:	220a      	movs	r2, #10
 8016132:	9903      	ldr	r1, [sp, #12]
 8016134:	4648      	mov	r0, r9
 8016136:	f000 fc69 	bl	8016a0c <__multadd>
 801613a:	42af      	cmp	r7, r5
 801613c:	9003      	str	r0, [sp, #12]
 801613e:	f04f 0300 	mov.w	r3, #0
 8016142:	f04f 020a 	mov.w	r2, #10
 8016146:	4639      	mov	r1, r7
 8016148:	4648      	mov	r0, r9
 801614a:	d107      	bne.n	801615c <_dtoa_r+0xae4>
 801614c:	f000 fc5e 	bl	8016a0c <__multadd>
 8016150:	4607      	mov	r7, r0
 8016152:	4605      	mov	r5, r0
 8016154:	9b04      	ldr	r3, [sp, #16]
 8016156:	3301      	adds	r3, #1
 8016158:	9304      	str	r3, [sp, #16]
 801615a:	e777      	b.n	801604c <_dtoa_r+0x9d4>
 801615c:	f000 fc56 	bl	8016a0c <__multadd>
 8016160:	4629      	mov	r1, r5
 8016162:	4607      	mov	r7, r0
 8016164:	2300      	movs	r3, #0
 8016166:	220a      	movs	r2, #10
 8016168:	4648      	mov	r0, r9
 801616a:	f000 fc4f 	bl	8016a0c <__multadd>
 801616e:	4605      	mov	r5, r0
 8016170:	e7f0      	b.n	8016154 <_dtoa_r+0xadc>
 8016172:	f1bb 0f00 	cmp.w	fp, #0
 8016176:	bfcc      	ite	gt
 8016178:	465e      	movgt	r6, fp
 801617a:	2601      	movle	r6, #1
 801617c:	2700      	movs	r7, #0
 801617e:	4456      	add	r6, sl
 8016180:	2201      	movs	r2, #1
 8016182:	9903      	ldr	r1, [sp, #12]
 8016184:	4648      	mov	r0, r9
 8016186:	9304      	str	r3, [sp, #16]
 8016188:	f000 fe2e 	bl	8016de8 <__lshift>
 801618c:	4621      	mov	r1, r4
 801618e:	9003      	str	r0, [sp, #12]
 8016190:	f000 fe96 	bl	8016ec0 <__mcmp>
 8016194:	2800      	cmp	r0, #0
 8016196:	dcb4      	bgt.n	8016102 <_dtoa_r+0xa8a>
 8016198:	d102      	bne.n	80161a0 <_dtoa_r+0xb28>
 801619a:	9b04      	ldr	r3, [sp, #16]
 801619c:	07db      	lsls	r3, r3, #31
 801619e:	d4b0      	bmi.n	8016102 <_dtoa_r+0xa8a>
 80161a0:	4633      	mov	r3, r6
 80161a2:	461e      	mov	r6, r3
 80161a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80161a8:	2a30      	cmp	r2, #48	@ 0x30
 80161aa:	d0fa      	beq.n	80161a2 <_dtoa_r+0xb2a>
 80161ac:	e4b5      	b.n	8015b1a <_dtoa_r+0x4a2>
 80161ae:	459a      	cmp	sl, r3
 80161b0:	d1a8      	bne.n	8016104 <_dtoa_r+0xa8c>
 80161b2:	2331      	movs	r3, #49	@ 0x31
 80161b4:	f108 0801 	add.w	r8, r8, #1
 80161b8:	f88a 3000 	strb.w	r3, [sl]
 80161bc:	e4ad      	b.n	8015b1a <_dtoa_r+0x4a2>
 80161be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80161c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801621c <_dtoa_r+0xba4>
 80161c4:	b11b      	cbz	r3, 80161ce <_dtoa_r+0xb56>
 80161c6:	f10a 0308 	add.w	r3, sl, #8
 80161ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80161cc:	6013      	str	r3, [r2, #0]
 80161ce:	4650      	mov	r0, sl
 80161d0:	b017      	add	sp, #92	@ 0x5c
 80161d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80161d8:	2b01      	cmp	r3, #1
 80161da:	f77f ae2e 	ble.w	8015e3a <_dtoa_r+0x7c2>
 80161de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80161e2:	2001      	movs	r0, #1
 80161e4:	e64d      	b.n	8015e82 <_dtoa_r+0x80a>
 80161e6:	f1bb 0f00 	cmp.w	fp, #0
 80161ea:	f77f aed9 	ble.w	8015fa0 <_dtoa_r+0x928>
 80161ee:	4656      	mov	r6, sl
 80161f0:	4621      	mov	r1, r4
 80161f2:	9803      	ldr	r0, [sp, #12]
 80161f4:	f7ff f9b7 	bl	8015566 <quorem>
 80161f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80161fc:	f806 3b01 	strb.w	r3, [r6], #1
 8016200:	eba6 020a 	sub.w	r2, r6, sl
 8016204:	4593      	cmp	fp, r2
 8016206:	ddb4      	ble.n	8016172 <_dtoa_r+0xafa>
 8016208:	2300      	movs	r3, #0
 801620a:	220a      	movs	r2, #10
 801620c:	4648      	mov	r0, r9
 801620e:	9903      	ldr	r1, [sp, #12]
 8016210:	f000 fbfc 	bl	8016a0c <__multadd>
 8016214:	9003      	str	r0, [sp, #12]
 8016216:	e7eb      	b.n	80161f0 <_dtoa_r+0xb78>
 8016218:	0801949c 	.word	0x0801949c
 801621c:	08019437 	.word	0x08019437

08016220 <_free_r>:
 8016220:	b538      	push	{r3, r4, r5, lr}
 8016222:	4605      	mov	r5, r0
 8016224:	2900      	cmp	r1, #0
 8016226:	d040      	beq.n	80162aa <_free_r+0x8a>
 8016228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801622c:	1f0c      	subs	r4, r1, #4
 801622e:	2b00      	cmp	r3, #0
 8016230:	bfb8      	it	lt
 8016232:	18e4      	addlt	r4, r4, r3
 8016234:	f7fd f878 	bl	8013328 <__malloc_lock>
 8016238:	4a1c      	ldr	r2, [pc, #112]	@ (80162ac <_free_r+0x8c>)
 801623a:	6813      	ldr	r3, [r2, #0]
 801623c:	b933      	cbnz	r3, 801624c <_free_r+0x2c>
 801623e:	6063      	str	r3, [r4, #4]
 8016240:	6014      	str	r4, [r2, #0]
 8016242:	4628      	mov	r0, r5
 8016244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016248:	f7fd b874 	b.w	8013334 <__malloc_unlock>
 801624c:	42a3      	cmp	r3, r4
 801624e:	d908      	bls.n	8016262 <_free_r+0x42>
 8016250:	6820      	ldr	r0, [r4, #0]
 8016252:	1821      	adds	r1, r4, r0
 8016254:	428b      	cmp	r3, r1
 8016256:	bf01      	itttt	eq
 8016258:	6819      	ldreq	r1, [r3, #0]
 801625a:	685b      	ldreq	r3, [r3, #4]
 801625c:	1809      	addeq	r1, r1, r0
 801625e:	6021      	streq	r1, [r4, #0]
 8016260:	e7ed      	b.n	801623e <_free_r+0x1e>
 8016262:	461a      	mov	r2, r3
 8016264:	685b      	ldr	r3, [r3, #4]
 8016266:	b10b      	cbz	r3, 801626c <_free_r+0x4c>
 8016268:	42a3      	cmp	r3, r4
 801626a:	d9fa      	bls.n	8016262 <_free_r+0x42>
 801626c:	6811      	ldr	r1, [r2, #0]
 801626e:	1850      	adds	r0, r2, r1
 8016270:	42a0      	cmp	r0, r4
 8016272:	d10b      	bne.n	801628c <_free_r+0x6c>
 8016274:	6820      	ldr	r0, [r4, #0]
 8016276:	4401      	add	r1, r0
 8016278:	1850      	adds	r0, r2, r1
 801627a:	4283      	cmp	r3, r0
 801627c:	6011      	str	r1, [r2, #0]
 801627e:	d1e0      	bne.n	8016242 <_free_r+0x22>
 8016280:	6818      	ldr	r0, [r3, #0]
 8016282:	685b      	ldr	r3, [r3, #4]
 8016284:	4408      	add	r0, r1
 8016286:	6010      	str	r0, [r2, #0]
 8016288:	6053      	str	r3, [r2, #4]
 801628a:	e7da      	b.n	8016242 <_free_r+0x22>
 801628c:	d902      	bls.n	8016294 <_free_r+0x74>
 801628e:	230c      	movs	r3, #12
 8016290:	602b      	str	r3, [r5, #0]
 8016292:	e7d6      	b.n	8016242 <_free_r+0x22>
 8016294:	6820      	ldr	r0, [r4, #0]
 8016296:	1821      	adds	r1, r4, r0
 8016298:	428b      	cmp	r3, r1
 801629a:	bf01      	itttt	eq
 801629c:	6819      	ldreq	r1, [r3, #0]
 801629e:	685b      	ldreq	r3, [r3, #4]
 80162a0:	1809      	addeq	r1, r1, r0
 80162a2:	6021      	streq	r1, [r4, #0]
 80162a4:	6063      	str	r3, [r4, #4]
 80162a6:	6054      	str	r4, [r2, #4]
 80162a8:	e7cb      	b.n	8016242 <_free_r+0x22>
 80162aa:	bd38      	pop	{r3, r4, r5, pc}
 80162ac:	2000208c 	.word	0x2000208c

080162b0 <rshift>:
 80162b0:	6903      	ldr	r3, [r0, #16]
 80162b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80162ba:	f100 0414 	add.w	r4, r0, #20
 80162be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80162c2:	dd46      	ble.n	8016352 <rshift+0xa2>
 80162c4:	f011 011f 	ands.w	r1, r1, #31
 80162c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80162cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80162d0:	d10c      	bne.n	80162ec <rshift+0x3c>
 80162d2:	4629      	mov	r1, r5
 80162d4:	f100 0710 	add.w	r7, r0, #16
 80162d8:	42b1      	cmp	r1, r6
 80162da:	d335      	bcc.n	8016348 <rshift+0x98>
 80162dc:	1a9b      	subs	r3, r3, r2
 80162de:	009b      	lsls	r3, r3, #2
 80162e0:	1eea      	subs	r2, r5, #3
 80162e2:	4296      	cmp	r6, r2
 80162e4:	bf38      	it	cc
 80162e6:	2300      	movcc	r3, #0
 80162e8:	4423      	add	r3, r4
 80162ea:	e015      	b.n	8016318 <rshift+0x68>
 80162ec:	46a1      	mov	r9, r4
 80162ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80162f2:	f1c1 0820 	rsb	r8, r1, #32
 80162f6:	40cf      	lsrs	r7, r1
 80162f8:	f105 0e04 	add.w	lr, r5, #4
 80162fc:	4576      	cmp	r6, lr
 80162fe:	46f4      	mov	ip, lr
 8016300:	d816      	bhi.n	8016330 <rshift+0x80>
 8016302:	1a9a      	subs	r2, r3, r2
 8016304:	0092      	lsls	r2, r2, #2
 8016306:	3a04      	subs	r2, #4
 8016308:	3501      	adds	r5, #1
 801630a:	42ae      	cmp	r6, r5
 801630c:	bf38      	it	cc
 801630e:	2200      	movcc	r2, #0
 8016310:	18a3      	adds	r3, r4, r2
 8016312:	50a7      	str	r7, [r4, r2]
 8016314:	b107      	cbz	r7, 8016318 <rshift+0x68>
 8016316:	3304      	adds	r3, #4
 8016318:	42a3      	cmp	r3, r4
 801631a:	eba3 0204 	sub.w	r2, r3, r4
 801631e:	bf08      	it	eq
 8016320:	2300      	moveq	r3, #0
 8016322:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016326:	6102      	str	r2, [r0, #16]
 8016328:	bf08      	it	eq
 801632a:	6143      	streq	r3, [r0, #20]
 801632c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016330:	f8dc c000 	ldr.w	ip, [ip]
 8016334:	fa0c fc08 	lsl.w	ip, ip, r8
 8016338:	ea4c 0707 	orr.w	r7, ip, r7
 801633c:	f849 7b04 	str.w	r7, [r9], #4
 8016340:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016344:	40cf      	lsrs	r7, r1
 8016346:	e7d9      	b.n	80162fc <rshift+0x4c>
 8016348:	f851 cb04 	ldr.w	ip, [r1], #4
 801634c:	f847 cf04 	str.w	ip, [r7, #4]!
 8016350:	e7c2      	b.n	80162d8 <rshift+0x28>
 8016352:	4623      	mov	r3, r4
 8016354:	e7e0      	b.n	8016318 <rshift+0x68>

08016356 <__hexdig_fun>:
 8016356:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801635a:	2b09      	cmp	r3, #9
 801635c:	d802      	bhi.n	8016364 <__hexdig_fun+0xe>
 801635e:	3820      	subs	r0, #32
 8016360:	b2c0      	uxtb	r0, r0
 8016362:	4770      	bx	lr
 8016364:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016368:	2b05      	cmp	r3, #5
 801636a:	d801      	bhi.n	8016370 <__hexdig_fun+0x1a>
 801636c:	3847      	subs	r0, #71	@ 0x47
 801636e:	e7f7      	b.n	8016360 <__hexdig_fun+0xa>
 8016370:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016374:	2b05      	cmp	r3, #5
 8016376:	d801      	bhi.n	801637c <__hexdig_fun+0x26>
 8016378:	3827      	subs	r0, #39	@ 0x27
 801637a:	e7f1      	b.n	8016360 <__hexdig_fun+0xa>
 801637c:	2000      	movs	r0, #0
 801637e:	4770      	bx	lr

08016380 <__gethex>:
 8016380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016384:	468a      	mov	sl, r1
 8016386:	4690      	mov	r8, r2
 8016388:	b085      	sub	sp, #20
 801638a:	9302      	str	r3, [sp, #8]
 801638c:	680b      	ldr	r3, [r1, #0]
 801638e:	9001      	str	r0, [sp, #4]
 8016390:	1c9c      	adds	r4, r3, #2
 8016392:	46a1      	mov	r9, r4
 8016394:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016398:	2830      	cmp	r0, #48	@ 0x30
 801639a:	d0fa      	beq.n	8016392 <__gethex+0x12>
 801639c:	eba9 0303 	sub.w	r3, r9, r3
 80163a0:	f1a3 0b02 	sub.w	fp, r3, #2
 80163a4:	f7ff ffd7 	bl	8016356 <__hexdig_fun>
 80163a8:	4605      	mov	r5, r0
 80163aa:	2800      	cmp	r0, #0
 80163ac:	d168      	bne.n	8016480 <__gethex+0x100>
 80163ae:	2201      	movs	r2, #1
 80163b0:	4648      	mov	r0, r9
 80163b2:	499f      	ldr	r1, [pc, #636]	@ (8016630 <__gethex+0x2b0>)
 80163b4:	f7fe ff98 	bl	80152e8 <strncmp>
 80163b8:	4607      	mov	r7, r0
 80163ba:	2800      	cmp	r0, #0
 80163bc:	d167      	bne.n	801648e <__gethex+0x10e>
 80163be:	f899 0001 	ldrb.w	r0, [r9, #1]
 80163c2:	4626      	mov	r6, r4
 80163c4:	f7ff ffc7 	bl	8016356 <__hexdig_fun>
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d062      	beq.n	8016492 <__gethex+0x112>
 80163cc:	4623      	mov	r3, r4
 80163ce:	7818      	ldrb	r0, [r3, #0]
 80163d0:	4699      	mov	r9, r3
 80163d2:	2830      	cmp	r0, #48	@ 0x30
 80163d4:	f103 0301 	add.w	r3, r3, #1
 80163d8:	d0f9      	beq.n	80163ce <__gethex+0x4e>
 80163da:	f7ff ffbc 	bl	8016356 <__hexdig_fun>
 80163de:	fab0 f580 	clz	r5, r0
 80163e2:	f04f 0b01 	mov.w	fp, #1
 80163e6:	096d      	lsrs	r5, r5, #5
 80163e8:	464a      	mov	r2, r9
 80163ea:	4616      	mov	r6, r2
 80163ec:	7830      	ldrb	r0, [r6, #0]
 80163ee:	3201      	adds	r2, #1
 80163f0:	f7ff ffb1 	bl	8016356 <__hexdig_fun>
 80163f4:	2800      	cmp	r0, #0
 80163f6:	d1f8      	bne.n	80163ea <__gethex+0x6a>
 80163f8:	2201      	movs	r2, #1
 80163fa:	4630      	mov	r0, r6
 80163fc:	498c      	ldr	r1, [pc, #560]	@ (8016630 <__gethex+0x2b0>)
 80163fe:	f7fe ff73 	bl	80152e8 <strncmp>
 8016402:	2800      	cmp	r0, #0
 8016404:	d13f      	bne.n	8016486 <__gethex+0x106>
 8016406:	b944      	cbnz	r4, 801641a <__gethex+0x9a>
 8016408:	1c74      	adds	r4, r6, #1
 801640a:	4622      	mov	r2, r4
 801640c:	4616      	mov	r6, r2
 801640e:	7830      	ldrb	r0, [r6, #0]
 8016410:	3201      	adds	r2, #1
 8016412:	f7ff ffa0 	bl	8016356 <__hexdig_fun>
 8016416:	2800      	cmp	r0, #0
 8016418:	d1f8      	bne.n	801640c <__gethex+0x8c>
 801641a:	1ba4      	subs	r4, r4, r6
 801641c:	00a7      	lsls	r7, r4, #2
 801641e:	7833      	ldrb	r3, [r6, #0]
 8016420:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016424:	2b50      	cmp	r3, #80	@ 0x50
 8016426:	d13e      	bne.n	80164a6 <__gethex+0x126>
 8016428:	7873      	ldrb	r3, [r6, #1]
 801642a:	2b2b      	cmp	r3, #43	@ 0x2b
 801642c:	d033      	beq.n	8016496 <__gethex+0x116>
 801642e:	2b2d      	cmp	r3, #45	@ 0x2d
 8016430:	d034      	beq.n	801649c <__gethex+0x11c>
 8016432:	2400      	movs	r4, #0
 8016434:	1c71      	adds	r1, r6, #1
 8016436:	7808      	ldrb	r0, [r1, #0]
 8016438:	f7ff ff8d 	bl	8016356 <__hexdig_fun>
 801643c:	1e43      	subs	r3, r0, #1
 801643e:	b2db      	uxtb	r3, r3
 8016440:	2b18      	cmp	r3, #24
 8016442:	d830      	bhi.n	80164a6 <__gethex+0x126>
 8016444:	f1a0 0210 	sub.w	r2, r0, #16
 8016448:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801644c:	f7ff ff83 	bl	8016356 <__hexdig_fun>
 8016450:	f100 3cff 	add.w	ip, r0, #4294967295
 8016454:	fa5f fc8c 	uxtb.w	ip, ip
 8016458:	f1bc 0f18 	cmp.w	ip, #24
 801645c:	f04f 030a 	mov.w	r3, #10
 8016460:	d91e      	bls.n	80164a0 <__gethex+0x120>
 8016462:	b104      	cbz	r4, 8016466 <__gethex+0xe6>
 8016464:	4252      	negs	r2, r2
 8016466:	4417      	add	r7, r2
 8016468:	f8ca 1000 	str.w	r1, [sl]
 801646c:	b1ed      	cbz	r5, 80164aa <__gethex+0x12a>
 801646e:	f1bb 0f00 	cmp.w	fp, #0
 8016472:	bf0c      	ite	eq
 8016474:	2506      	moveq	r5, #6
 8016476:	2500      	movne	r5, #0
 8016478:	4628      	mov	r0, r5
 801647a:	b005      	add	sp, #20
 801647c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016480:	2500      	movs	r5, #0
 8016482:	462c      	mov	r4, r5
 8016484:	e7b0      	b.n	80163e8 <__gethex+0x68>
 8016486:	2c00      	cmp	r4, #0
 8016488:	d1c7      	bne.n	801641a <__gethex+0x9a>
 801648a:	4627      	mov	r7, r4
 801648c:	e7c7      	b.n	801641e <__gethex+0x9e>
 801648e:	464e      	mov	r6, r9
 8016490:	462f      	mov	r7, r5
 8016492:	2501      	movs	r5, #1
 8016494:	e7c3      	b.n	801641e <__gethex+0x9e>
 8016496:	2400      	movs	r4, #0
 8016498:	1cb1      	adds	r1, r6, #2
 801649a:	e7cc      	b.n	8016436 <__gethex+0xb6>
 801649c:	2401      	movs	r4, #1
 801649e:	e7fb      	b.n	8016498 <__gethex+0x118>
 80164a0:	fb03 0002 	mla	r0, r3, r2, r0
 80164a4:	e7ce      	b.n	8016444 <__gethex+0xc4>
 80164a6:	4631      	mov	r1, r6
 80164a8:	e7de      	b.n	8016468 <__gethex+0xe8>
 80164aa:	4629      	mov	r1, r5
 80164ac:	eba6 0309 	sub.w	r3, r6, r9
 80164b0:	3b01      	subs	r3, #1
 80164b2:	2b07      	cmp	r3, #7
 80164b4:	dc0a      	bgt.n	80164cc <__gethex+0x14c>
 80164b6:	9801      	ldr	r0, [sp, #4]
 80164b8:	f000 fa46 	bl	8016948 <_Balloc>
 80164bc:	4604      	mov	r4, r0
 80164be:	b940      	cbnz	r0, 80164d2 <__gethex+0x152>
 80164c0:	4602      	mov	r2, r0
 80164c2:	21e4      	movs	r1, #228	@ 0xe4
 80164c4:	4b5b      	ldr	r3, [pc, #364]	@ (8016634 <__gethex+0x2b4>)
 80164c6:	485c      	ldr	r0, [pc, #368]	@ (8016638 <__gethex+0x2b8>)
 80164c8:	f7fc fe56 	bl	8013178 <__assert_func>
 80164cc:	3101      	adds	r1, #1
 80164ce:	105b      	asrs	r3, r3, #1
 80164d0:	e7ef      	b.n	80164b2 <__gethex+0x132>
 80164d2:	2300      	movs	r3, #0
 80164d4:	f100 0a14 	add.w	sl, r0, #20
 80164d8:	4655      	mov	r5, sl
 80164da:	469b      	mov	fp, r3
 80164dc:	45b1      	cmp	r9, r6
 80164de:	d337      	bcc.n	8016550 <__gethex+0x1d0>
 80164e0:	f845 bb04 	str.w	fp, [r5], #4
 80164e4:	eba5 050a 	sub.w	r5, r5, sl
 80164e8:	10ad      	asrs	r5, r5, #2
 80164ea:	6125      	str	r5, [r4, #16]
 80164ec:	4658      	mov	r0, fp
 80164ee:	f000 fb1d 	bl	8016b2c <__hi0bits>
 80164f2:	016d      	lsls	r5, r5, #5
 80164f4:	f8d8 6000 	ldr.w	r6, [r8]
 80164f8:	1a2d      	subs	r5, r5, r0
 80164fa:	42b5      	cmp	r5, r6
 80164fc:	dd54      	ble.n	80165a8 <__gethex+0x228>
 80164fe:	1bad      	subs	r5, r5, r6
 8016500:	4629      	mov	r1, r5
 8016502:	4620      	mov	r0, r4
 8016504:	f000 fe9f 	bl	8017246 <__any_on>
 8016508:	4681      	mov	r9, r0
 801650a:	b178      	cbz	r0, 801652c <__gethex+0x1ac>
 801650c:	f04f 0901 	mov.w	r9, #1
 8016510:	1e6b      	subs	r3, r5, #1
 8016512:	1159      	asrs	r1, r3, #5
 8016514:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016518:	f003 021f 	and.w	r2, r3, #31
 801651c:	fa09 f202 	lsl.w	r2, r9, r2
 8016520:	420a      	tst	r2, r1
 8016522:	d003      	beq.n	801652c <__gethex+0x1ac>
 8016524:	454b      	cmp	r3, r9
 8016526:	dc36      	bgt.n	8016596 <__gethex+0x216>
 8016528:	f04f 0902 	mov.w	r9, #2
 801652c:	4629      	mov	r1, r5
 801652e:	4620      	mov	r0, r4
 8016530:	f7ff febe 	bl	80162b0 <rshift>
 8016534:	442f      	add	r7, r5
 8016536:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801653a:	42bb      	cmp	r3, r7
 801653c:	da42      	bge.n	80165c4 <__gethex+0x244>
 801653e:	4621      	mov	r1, r4
 8016540:	9801      	ldr	r0, [sp, #4]
 8016542:	f000 fa41 	bl	80169c8 <_Bfree>
 8016546:	2300      	movs	r3, #0
 8016548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801654a:	25a3      	movs	r5, #163	@ 0xa3
 801654c:	6013      	str	r3, [r2, #0]
 801654e:	e793      	b.n	8016478 <__gethex+0xf8>
 8016550:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016554:	2a2e      	cmp	r2, #46	@ 0x2e
 8016556:	d012      	beq.n	801657e <__gethex+0x1fe>
 8016558:	2b20      	cmp	r3, #32
 801655a:	d104      	bne.n	8016566 <__gethex+0x1e6>
 801655c:	f845 bb04 	str.w	fp, [r5], #4
 8016560:	f04f 0b00 	mov.w	fp, #0
 8016564:	465b      	mov	r3, fp
 8016566:	7830      	ldrb	r0, [r6, #0]
 8016568:	9303      	str	r3, [sp, #12]
 801656a:	f7ff fef4 	bl	8016356 <__hexdig_fun>
 801656e:	9b03      	ldr	r3, [sp, #12]
 8016570:	f000 000f 	and.w	r0, r0, #15
 8016574:	4098      	lsls	r0, r3
 8016576:	ea4b 0b00 	orr.w	fp, fp, r0
 801657a:	3304      	adds	r3, #4
 801657c:	e7ae      	b.n	80164dc <__gethex+0x15c>
 801657e:	45b1      	cmp	r9, r6
 8016580:	d8ea      	bhi.n	8016558 <__gethex+0x1d8>
 8016582:	2201      	movs	r2, #1
 8016584:	4630      	mov	r0, r6
 8016586:	492a      	ldr	r1, [pc, #168]	@ (8016630 <__gethex+0x2b0>)
 8016588:	9303      	str	r3, [sp, #12]
 801658a:	f7fe fead 	bl	80152e8 <strncmp>
 801658e:	9b03      	ldr	r3, [sp, #12]
 8016590:	2800      	cmp	r0, #0
 8016592:	d1e1      	bne.n	8016558 <__gethex+0x1d8>
 8016594:	e7a2      	b.n	80164dc <__gethex+0x15c>
 8016596:	4620      	mov	r0, r4
 8016598:	1ea9      	subs	r1, r5, #2
 801659a:	f000 fe54 	bl	8017246 <__any_on>
 801659e:	2800      	cmp	r0, #0
 80165a0:	d0c2      	beq.n	8016528 <__gethex+0x1a8>
 80165a2:	f04f 0903 	mov.w	r9, #3
 80165a6:	e7c1      	b.n	801652c <__gethex+0x1ac>
 80165a8:	da09      	bge.n	80165be <__gethex+0x23e>
 80165aa:	1b75      	subs	r5, r6, r5
 80165ac:	4621      	mov	r1, r4
 80165ae:	462a      	mov	r2, r5
 80165b0:	9801      	ldr	r0, [sp, #4]
 80165b2:	f000 fc19 	bl	8016de8 <__lshift>
 80165b6:	4604      	mov	r4, r0
 80165b8:	1b7f      	subs	r7, r7, r5
 80165ba:	f100 0a14 	add.w	sl, r0, #20
 80165be:	f04f 0900 	mov.w	r9, #0
 80165c2:	e7b8      	b.n	8016536 <__gethex+0x1b6>
 80165c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80165c8:	42bd      	cmp	r5, r7
 80165ca:	dd6f      	ble.n	80166ac <__gethex+0x32c>
 80165cc:	1bed      	subs	r5, r5, r7
 80165ce:	42ae      	cmp	r6, r5
 80165d0:	dc34      	bgt.n	801663c <__gethex+0x2bc>
 80165d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80165d6:	2b02      	cmp	r3, #2
 80165d8:	d022      	beq.n	8016620 <__gethex+0x2a0>
 80165da:	2b03      	cmp	r3, #3
 80165dc:	d024      	beq.n	8016628 <__gethex+0x2a8>
 80165de:	2b01      	cmp	r3, #1
 80165e0:	d115      	bne.n	801660e <__gethex+0x28e>
 80165e2:	42ae      	cmp	r6, r5
 80165e4:	d113      	bne.n	801660e <__gethex+0x28e>
 80165e6:	2e01      	cmp	r6, #1
 80165e8:	d10b      	bne.n	8016602 <__gethex+0x282>
 80165ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80165ee:	9a02      	ldr	r2, [sp, #8]
 80165f0:	2562      	movs	r5, #98	@ 0x62
 80165f2:	6013      	str	r3, [r2, #0]
 80165f4:	2301      	movs	r3, #1
 80165f6:	6123      	str	r3, [r4, #16]
 80165f8:	f8ca 3000 	str.w	r3, [sl]
 80165fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80165fe:	601c      	str	r4, [r3, #0]
 8016600:	e73a      	b.n	8016478 <__gethex+0xf8>
 8016602:	4620      	mov	r0, r4
 8016604:	1e71      	subs	r1, r6, #1
 8016606:	f000 fe1e 	bl	8017246 <__any_on>
 801660a:	2800      	cmp	r0, #0
 801660c:	d1ed      	bne.n	80165ea <__gethex+0x26a>
 801660e:	4621      	mov	r1, r4
 8016610:	9801      	ldr	r0, [sp, #4]
 8016612:	f000 f9d9 	bl	80169c8 <_Bfree>
 8016616:	2300      	movs	r3, #0
 8016618:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801661a:	2550      	movs	r5, #80	@ 0x50
 801661c:	6013      	str	r3, [r2, #0]
 801661e:	e72b      	b.n	8016478 <__gethex+0xf8>
 8016620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016622:	2b00      	cmp	r3, #0
 8016624:	d1f3      	bne.n	801660e <__gethex+0x28e>
 8016626:	e7e0      	b.n	80165ea <__gethex+0x26a>
 8016628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801662a:	2b00      	cmp	r3, #0
 801662c:	d1dd      	bne.n	80165ea <__gethex+0x26a>
 801662e:	e7ee      	b.n	801660e <__gethex+0x28e>
 8016630:	08019385 	.word	0x08019385
 8016634:	0801949c 	.word	0x0801949c
 8016638:	080194ad 	.word	0x080194ad
 801663c:	1e6f      	subs	r7, r5, #1
 801663e:	f1b9 0f00 	cmp.w	r9, #0
 8016642:	d130      	bne.n	80166a6 <__gethex+0x326>
 8016644:	b127      	cbz	r7, 8016650 <__gethex+0x2d0>
 8016646:	4639      	mov	r1, r7
 8016648:	4620      	mov	r0, r4
 801664a:	f000 fdfc 	bl	8017246 <__any_on>
 801664e:	4681      	mov	r9, r0
 8016650:	2301      	movs	r3, #1
 8016652:	4629      	mov	r1, r5
 8016654:	1b76      	subs	r6, r6, r5
 8016656:	2502      	movs	r5, #2
 8016658:	117a      	asrs	r2, r7, #5
 801665a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801665e:	f007 071f 	and.w	r7, r7, #31
 8016662:	40bb      	lsls	r3, r7
 8016664:	4213      	tst	r3, r2
 8016666:	4620      	mov	r0, r4
 8016668:	bf18      	it	ne
 801666a:	f049 0902 	orrne.w	r9, r9, #2
 801666e:	f7ff fe1f 	bl	80162b0 <rshift>
 8016672:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016676:	f1b9 0f00 	cmp.w	r9, #0
 801667a:	d047      	beq.n	801670c <__gethex+0x38c>
 801667c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016680:	2b02      	cmp	r3, #2
 8016682:	d015      	beq.n	80166b0 <__gethex+0x330>
 8016684:	2b03      	cmp	r3, #3
 8016686:	d017      	beq.n	80166b8 <__gethex+0x338>
 8016688:	2b01      	cmp	r3, #1
 801668a:	d109      	bne.n	80166a0 <__gethex+0x320>
 801668c:	f019 0f02 	tst.w	r9, #2
 8016690:	d006      	beq.n	80166a0 <__gethex+0x320>
 8016692:	f8da 3000 	ldr.w	r3, [sl]
 8016696:	ea49 0903 	orr.w	r9, r9, r3
 801669a:	f019 0f01 	tst.w	r9, #1
 801669e:	d10e      	bne.n	80166be <__gethex+0x33e>
 80166a0:	f045 0510 	orr.w	r5, r5, #16
 80166a4:	e032      	b.n	801670c <__gethex+0x38c>
 80166a6:	f04f 0901 	mov.w	r9, #1
 80166aa:	e7d1      	b.n	8016650 <__gethex+0x2d0>
 80166ac:	2501      	movs	r5, #1
 80166ae:	e7e2      	b.n	8016676 <__gethex+0x2f6>
 80166b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80166b2:	f1c3 0301 	rsb	r3, r3, #1
 80166b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80166b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d0f0      	beq.n	80166a0 <__gethex+0x320>
 80166be:	f04f 0c00 	mov.w	ip, #0
 80166c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80166c6:	f104 0314 	add.w	r3, r4, #20
 80166ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80166ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80166d2:	4618      	mov	r0, r3
 80166d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80166d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80166dc:	d01b      	beq.n	8016716 <__gethex+0x396>
 80166de:	3201      	adds	r2, #1
 80166e0:	6002      	str	r2, [r0, #0]
 80166e2:	2d02      	cmp	r5, #2
 80166e4:	f104 0314 	add.w	r3, r4, #20
 80166e8:	d13c      	bne.n	8016764 <__gethex+0x3e4>
 80166ea:	f8d8 2000 	ldr.w	r2, [r8]
 80166ee:	3a01      	subs	r2, #1
 80166f0:	42b2      	cmp	r2, r6
 80166f2:	d109      	bne.n	8016708 <__gethex+0x388>
 80166f4:	2201      	movs	r2, #1
 80166f6:	1171      	asrs	r1, r6, #5
 80166f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80166fc:	f006 061f 	and.w	r6, r6, #31
 8016700:	fa02 f606 	lsl.w	r6, r2, r6
 8016704:	421e      	tst	r6, r3
 8016706:	d13a      	bne.n	801677e <__gethex+0x3fe>
 8016708:	f045 0520 	orr.w	r5, r5, #32
 801670c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801670e:	601c      	str	r4, [r3, #0]
 8016710:	9b02      	ldr	r3, [sp, #8]
 8016712:	601f      	str	r7, [r3, #0]
 8016714:	e6b0      	b.n	8016478 <__gethex+0xf8>
 8016716:	4299      	cmp	r1, r3
 8016718:	f843 cc04 	str.w	ip, [r3, #-4]
 801671c:	d8d9      	bhi.n	80166d2 <__gethex+0x352>
 801671e:	68a3      	ldr	r3, [r4, #8]
 8016720:	459b      	cmp	fp, r3
 8016722:	db17      	blt.n	8016754 <__gethex+0x3d4>
 8016724:	6861      	ldr	r1, [r4, #4]
 8016726:	9801      	ldr	r0, [sp, #4]
 8016728:	3101      	adds	r1, #1
 801672a:	f000 f90d 	bl	8016948 <_Balloc>
 801672e:	4681      	mov	r9, r0
 8016730:	b918      	cbnz	r0, 801673a <__gethex+0x3ba>
 8016732:	4602      	mov	r2, r0
 8016734:	2184      	movs	r1, #132	@ 0x84
 8016736:	4b19      	ldr	r3, [pc, #100]	@ (801679c <__gethex+0x41c>)
 8016738:	e6c5      	b.n	80164c6 <__gethex+0x146>
 801673a:	6922      	ldr	r2, [r4, #16]
 801673c:	f104 010c 	add.w	r1, r4, #12
 8016740:	3202      	adds	r2, #2
 8016742:	0092      	lsls	r2, r2, #2
 8016744:	300c      	adds	r0, #12
 8016746:	f7fe feee 	bl	8015526 <memcpy>
 801674a:	4621      	mov	r1, r4
 801674c:	9801      	ldr	r0, [sp, #4]
 801674e:	f000 f93b 	bl	80169c8 <_Bfree>
 8016752:	464c      	mov	r4, r9
 8016754:	6923      	ldr	r3, [r4, #16]
 8016756:	1c5a      	adds	r2, r3, #1
 8016758:	6122      	str	r2, [r4, #16]
 801675a:	2201      	movs	r2, #1
 801675c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016760:	615a      	str	r2, [r3, #20]
 8016762:	e7be      	b.n	80166e2 <__gethex+0x362>
 8016764:	6922      	ldr	r2, [r4, #16]
 8016766:	455a      	cmp	r2, fp
 8016768:	dd0b      	ble.n	8016782 <__gethex+0x402>
 801676a:	2101      	movs	r1, #1
 801676c:	4620      	mov	r0, r4
 801676e:	f7ff fd9f 	bl	80162b0 <rshift>
 8016772:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016776:	3701      	adds	r7, #1
 8016778:	42bb      	cmp	r3, r7
 801677a:	f6ff aee0 	blt.w	801653e <__gethex+0x1be>
 801677e:	2501      	movs	r5, #1
 8016780:	e7c2      	b.n	8016708 <__gethex+0x388>
 8016782:	f016 061f 	ands.w	r6, r6, #31
 8016786:	d0fa      	beq.n	801677e <__gethex+0x3fe>
 8016788:	4453      	add	r3, sl
 801678a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801678e:	f000 f9cd 	bl	8016b2c <__hi0bits>
 8016792:	f1c6 0620 	rsb	r6, r6, #32
 8016796:	42b0      	cmp	r0, r6
 8016798:	dbe7      	blt.n	801676a <__gethex+0x3ea>
 801679a:	e7f0      	b.n	801677e <__gethex+0x3fe>
 801679c:	0801949c 	.word	0x0801949c

080167a0 <L_shift>:
 80167a0:	f1c2 0208 	rsb	r2, r2, #8
 80167a4:	0092      	lsls	r2, r2, #2
 80167a6:	b570      	push	{r4, r5, r6, lr}
 80167a8:	f1c2 0620 	rsb	r6, r2, #32
 80167ac:	6843      	ldr	r3, [r0, #4]
 80167ae:	6804      	ldr	r4, [r0, #0]
 80167b0:	fa03 f506 	lsl.w	r5, r3, r6
 80167b4:	432c      	orrs	r4, r5
 80167b6:	40d3      	lsrs	r3, r2
 80167b8:	6004      	str	r4, [r0, #0]
 80167ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80167be:	4288      	cmp	r0, r1
 80167c0:	d3f4      	bcc.n	80167ac <L_shift+0xc>
 80167c2:	bd70      	pop	{r4, r5, r6, pc}

080167c4 <__match>:
 80167c4:	b530      	push	{r4, r5, lr}
 80167c6:	6803      	ldr	r3, [r0, #0]
 80167c8:	3301      	adds	r3, #1
 80167ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167ce:	b914      	cbnz	r4, 80167d6 <__match+0x12>
 80167d0:	6003      	str	r3, [r0, #0]
 80167d2:	2001      	movs	r0, #1
 80167d4:	bd30      	pop	{r4, r5, pc}
 80167d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167da:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80167de:	2d19      	cmp	r5, #25
 80167e0:	bf98      	it	ls
 80167e2:	3220      	addls	r2, #32
 80167e4:	42a2      	cmp	r2, r4
 80167e6:	d0f0      	beq.n	80167ca <__match+0x6>
 80167e8:	2000      	movs	r0, #0
 80167ea:	e7f3      	b.n	80167d4 <__match+0x10>

080167ec <__hexnan>:
 80167ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167f0:	2500      	movs	r5, #0
 80167f2:	680b      	ldr	r3, [r1, #0]
 80167f4:	4682      	mov	sl, r0
 80167f6:	115e      	asrs	r6, r3, #5
 80167f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80167fc:	f013 031f 	ands.w	r3, r3, #31
 8016800:	bf18      	it	ne
 8016802:	3604      	addne	r6, #4
 8016804:	1f37      	subs	r7, r6, #4
 8016806:	4690      	mov	r8, r2
 8016808:	46b9      	mov	r9, r7
 801680a:	463c      	mov	r4, r7
 801680c:	46ab      	mov	fp, r5
 801680e:	b087      	sub	sp, #28
 8016810:	6801      	ldr	r1, [r0, #0]
 8016812:	9301      	str	r3, [sp, #4]
 8016814:	f846 5c04 	str.w	r5, [r6, #-4]
 8016818:	9502      	str	r5, [sp, #8]
 801681a:	784a      	ldrb	r2, [r1, #1]
 801681c:	1c4b      	adds	r3, r1, #1
 801681e:	9303      	str	r3, [sp, #12]
 8016820:	b342      	cbz	r2, 8016874 <__hexnan+0x88>
 8016822:	4610      	mov	r0, r2
 8016824:	9105      	str	r1, [sp, #20]
 8016826:	9204      	str	r2, [sp, #16]
 8016828:	f7ff fd95 	bl	8016356 <__hexdig_fun>
 801682c:	2800      	cmp	r0, #0
 801682e:	d151      	bne.n	80168d4 <__hexnan+0xe8>
 8016830:	9a04      	ldr	r2, [sp, #16]
 8016832:	9905      	ldr	r1, [sp, #20]
 8016834:	2a20      	cmp	r2, #32
 8016836:	d818      	bhi.n	801686a <__hexnan+0x7e>
 8016838:	9b02      	ldr	r3, [sp, #8]
 801683a:	459b      	cmp	fp, r3
 801683c:	dd13      	ble.n	8016866 <__hexnan+0x7a>
 801683e:	454c      	cmp	r4, r9
 8016840:	d206      	bcs.n	8016850 <__hexnan+0x64>
 8016842:	2d07      	cmp	r5, #7
 8016844:	dc04      	bgt.n	8016850 <__hexnan+0x64>
 8016846:	462a      	mov	r2, r5
 8016848:	4649      	mov	r1, r9
 801684a:	4620      	mov	r0, r4
 801684c:	f7ff ffa8 	bl	80167a0 <L_shift>
 8016850:	4544      	cmp	r4, r8
 8016852:	d952      	bls.n	80168fa <__hexnan+0x10e>
 8016854:	2300      	movs	r3, #0
 8016856:	f1a4 0904 	sub.w	r9, r4, #4
 801685a:	f844 3c04 	str.w	r3, [r4, #-4]
 801685e:	461d      	mov	r5, r3
 8016860:	464c      	mov	r4, r9
 8016862:	f8cd b008 	str.w	fp, [sp, #8]
 8016866:	9903      	ldr	r1, [sp, #12]
 8016868:	e7d7      	b.n	801681a <__hexnan+0x2e>
 801686a:	2a29      	cmp	r2, #41	@ 0x29
 801686c:	d157      	bne.n	801691e <__hexnan+0x132>
 801686e:	3102      	adds	r1, #2
 8016870:	f8ca 1000 	str.w	r1, [sl]
 8016874:	f1bb 0f00 	cmp.w	fp, #0
 8016878:	d051      	beq.n	801691e <__hexnan+0x132>
 801687a:	454c      	cmp	r4, r9
 801687c:	d206      	bcs.n	801688c <__hexnan+0xa0>
 801687e:	2d07      	cmp	r5, #7
 8016880:	dc04      	bgt.n	801688c <__hexnan+0xa0>
 8016882:	462a      	mov	r2, r5
 8016884:	4649      	mov	r1, r9
 8016886:	4620      	mov	r0, r4
 8016888:	f7ff ff8a 	bl	80167a0 <L_shift>
 801688c:	4544      	cmp	r4, r8
 801688e:	d936      	bls.n	80168fe <__hexnan+0x112>
 8016890:	4623      	mov	r3, r4
 8016892:	f1a8 0204 	sub.w	r2, r8, #4
 8016896:	f853 1b04 	ldr.w	r1, [r3], #4
 801689a:	429f      	cmp	r7, r3
 801689c:	f842 1f04 	str.w	r1, [r2, #4]!
 80168a0:	d2f9      	bcs.n	8016896 <__hexnan+0xaa>
 80168a2:	1b3b      	subs	r3, r7, r4
 80168a4:	f023 0303 	bic.w	r3, r3, #3
 80168a8:	3304      	adds	r3, #4
 80168aa:	3401      	adds	r4, #1
 80168ac:	3e03      	subs	r6, #3
 80168ae:	42b4      	cmp	r4, r6
 80168b0:	bf88      	it	hi
 80168b2:	2304      	movhi	r3, #4
 80168b4:	2200      	movs	r2, #0
 80168b6:	4443      	add	r3, r8
 80168b8:	f843 2b04 	str.w	r2, [r3], #4
 80168bc:	429f      	cmp	r7, r3
 80168be:	d2fb      	bcs.n	80168b8 <__hexnan+0xcc>
 80168c0:	683b      	ldr	r3, [r7, #0]
 80168c2:	b91b      	cbnz	r3, 80168cc <__hexnan+0xe0>
 80168c4:	4547      	cmp	r7, r8
 80168c6:	d128      	bne.n	801691a <__hexnan+0x12e>
 80168c8:	2301      	movs	r3, #1
 80168ca:	603b      	str	r3, [r7, #0]
 80168cc:	2005      	movs	r0, #5
 80168ce:	b007      	add	sp, #28
 80168d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168d4:	3501      	adds	r5, #1
 80168d6:	2d08      	cmp	r5, #8
 80168d8:	f10b 0b01 	add.w	fp, fp, #1
 80168dc:	dd06      	ble.n	80168ec <__hexnan+0x100>
 80168de:	4544      	cmp	r4, r8
 80168e0:	d9c1      	bls.n	8016866 <__hexnan+0x7a>
 80168e2:	2300      	movs	r3, #0
 80168e4:	2501      	movs	r5, #1
 80168e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80168ea:	3c04      	subs	r4, #4
 80168ec:	6822      	ldr	r2, [r4, #0]
 80168ee:	f000 000f 	and.w	r0, r0, #15
 80168f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80168f6:	6020      	str	r0, [r4, #0]
 80168f8:	e7b5      	b.n	8016866 <__hexnan+0x7a>
 80168fa:	2508      	movs	r5, #8
 80168fc:	e7b3      	b.n	8016866 <__hexnan+0x7a>
 80168fe:	9b01      	ldr	r3, [sp, #4]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d0dd      	beq.n	80168c0 <__hexnan+0xd4>
 8016904:	f04f 32ff 	mov.w	r2, #4294967295
 8016908:	f1c3 0320 	rsb	r3, r3, #32
 801690c:	40da      	lsrs	r2, r3
 801690e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016912:	4013      	ands	r3, r2
 8016914:	f846 3c04 	str.w	r3, [r6, #-4]
 8016918:	e7d2      	b.n	80168c0 <__hexnan+0xd4>
 801691a:	3f04      	subs	r7, #4
 801691c:	e7d0      	b.n	80168c0 <__hexnan+0xd4>
 801691e:	2004      	movs	r0, #4
 8016920:	e7d5      	b.n	80168ce <__hexnan+0xe2>

08016922 <__ascii_mbtowc>:
 8016922:	b082      	sub	sp, #8
 8016924:	b901      	cbnz	r1, 8016928 <__ascii_mbtowc+0x6>
 8016926:	a901      	add	r1, sp, #4
 8016928:	b142      	cbz	r2, 801693c <__ascii_mbtowc+0x1a>
 801692a:	b14b      	cbz	r3, 8016940 <__ascii_mbtowc+0x1e>
 801692c:	7813      	ldrb	r3, [r2, #0]
 801692e:	600b      	str	r3, [r1, #0]
 8016930:	7812      	ldrb	r2, [r2, #0]
 8016932:	1e10      	subs	r0, r2, #0
 8016934:	bf18      	it	ne
 8016936:	2001      	movne	r0, #1
 8016938:	b002      	add	sp, #8
 801693a:	4770      	bx	lr
 801693c:	4610      	mov	r0, r2
 801693e:	e7fb      	b.n	8016938 <__ascii_mbtowc+0x16>
 8016940:	f06f 0001 	mvn.w	r0, #1
 8016944:	e7f8      	b.n	8016938 <__ascii_mbtowc+0x16>
	...

08016948 <_Balloc>:
 8016948:	b570      	push	{r4, r5, r6, lr}
 801694a:	69c6      	ldr	r6, [r0, #28]
 801694c:	4604      	mov	r4, r0
 801694e:	460d      	mov	r5, r1
 8016950:	b976      	cbnz	r6, 8016970 <_Balloc+0x28>
 8016952:	2010      	movs	r0, #16
 8016954:	f7fc fc36 	bl	80131c4 <malloc>
 8016958:	4602      	mov	r2, r0
 801695a:	61e0      	str	r0, [r4, #28]
 801695c:	b920      	cbnz	r0, 8016968 <_Balloc+0x20>
 801695e:	216b      	movs	r1, #107	@ 0x6b
 8016960:	4b17      	ldr	r3, [pc, #92]	@ (80169c0 <_Balloc+0x78>)
 8016962:	4818      	ldr	r0, [pc, #96]	@ (80169c4 <_Balloc+0x7c>)
 8016964:	f7fc fc08 	bl	8013178 <__assert_func>
 8016968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801696c:	6006      	str	r6, [r0, #0]
 801696e:	60c6      	str	r6, [r0, #12]
 8016970:	69e6      	ldr	r6, [r4, #28]
 8016972:	68f3      	ldr	r3, [r6, #12]
 8016974:	b183      	cbz	r3, 8016998 <_Balloc+0x50>
 8016976:	69e3      	ldr	r3, [r4, #28]
 8016978:	68db      	ldr	r3, [r3, #12]
 801697a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801697e:	b9b8      	cbnz	r0, 80169b0 <_Balloc+0x68>
 8016980:	2101      	movs	r1, #1
 8016982:	fa01 f605 	lsl.w	r6, r1, r5
 8016986:	1d72      	adds	r2, r6, #5
 8016988:	4620      	mov	r0, r4
 801698a:	0092      	lsls	r2, r2, #2
 801698c:	f001 fc34 	bl	80181f8 <_calloc_r>
 8016990:	b160      	cbz	r0, 80169ac <_Balloc+0x64>
 8016992:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016996:	e00e      	b.n	80169b6 <_Balloc+0x6e>
 8016998:	2221      	movs	r2, #33	@ 0x21
 801699a:	2104      	movs	r1, #4
 801699c:	4620      	mov	r0, r4
 801699e:	f001 fc2b 	bl	80181f8 <_calloc_r>
 80169a2:	69e3      	ldr	r3, [r4, #28]
 80169a4:	60f0      	str	r0, [r6, #12]
 80169a6:	68db      	ldr	r3, [r3, #12]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d1e4      	bne.n	8016976 <_Balloc+0x2e>
 80169ac:	2000      	movs	r0, #0
 80169ae:	bd70      	pop	{r4, r5, r6, pc}
 80169b0:	6802      	ldr	r2, [r0, #0]
 80169b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80169b6:	2300      	movs	r3, #0
 80169b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80169bc:	e7f7      	b.n	80169ae <_Balloc+0x66>
 80169be:	bf00      	nop
 80169c0:	080193be 	.word	0x080193be
 80169c4:	0801950d 	.word	0x0801950d

080169c8 <_Bfree>:
 80169c8:	b570      	push	{r4, r5, r6, lr}
 80169ca:	69c6      	ldr	r6, [r0, #28]
 80169cc:	4605      	mov	r5, r0
 80169ce:	460c      	mov	r4, r1
 80169d0:	b976      	cbnz	r6, 80169f0 <_Bfree+0x28>
 80169d2:	2010      	movs	r0, #16
 80169d4:	f7fc fbf6 	bl	80131c4 <malloc>
 80169d8:	4602      	mov	r2, r0
 80169da:	61e8      	str	r0, [r5, #28]
 80169dc:	b920      	cbnz	r0, 80169e8 <_Bfree+0x20>
 80169de:	218f      	movs	r1, #143	@ 0x8f
 80169e0:	4b08      	ldr	r3, [pc, #32]	@ (8016a04 <_Bfree+0x3c>)
 80169e2:	4809      	ldr	r0, [pc, #36]	@ (8016a08 <_Bfree+0x40>)
 80169e4:	f7fc fbc8 	bl	8013178 <__assert_func>
 80169e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80169ec:	6006      	str	r6, [r0, #0]
 80169ee:	60c6      	str	r6, [r0, #12]
 80169f0:	b13c      	cbz	r4, 8016a02 <_Bfree+0x3a>
 80169f2:	69eb      	ldr	r3, [r5, #28]
 80169f4:	6862      	ldr	r2, [r4, #4]
 80169f6:	68db      	ldr	r3, [r3, #12]
 80169f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80169fc:	6021      	str	r1, [r4, #0]
 80169fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016a02:	bd70      	pop	{r4, r5, r6, pc}
 8016a04:	080193be 	.word	0x080193be
 8016a08:	0801950d 	.word	0x0801950d

08016a0c <__multadd>:
 8016a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a10:	4607      	mov	r7, r0
 8016a12:	460c      	mov	r4, r1
 8016a14:	461e      	mov	r6, r3
 8016a16:	2000      	movs	r0, #0
 8016a18:	690d      	ldr	r5, [r1, #16]
 8016a1a:	f101 0c14 	add.w	ip, r1, #20
 8016a1e:	f8dc 3000 	ldr.w	r3, [ip]
 8016a22:	3001      	adds	r0, #1
 8016a24:	b299      	uxth	r1, r3
 8016a26:	fb02 6101 	mla	r1, r2, r1, r6
 8016a2a:	0c1e      	lsrs	r6, r3, #16
 8016a2c:	0c0b      	lsrs	r3, r1, #16
 8016a2e:	fb02 3306 	mla	r3, r2, r6, r3
 8016a32:	b289      	uxth	r1, r1
 8016a34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016a38:	4285      	cmp	r5, r0
 8016a3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016a3e:	f84c 1b04 	str.w	r1, [ip], #4
 8016a42:	dcec      	bgt.n	8016a1e <__multadd+0x12>
 8016a44:	b30e      	cbz	r6, 8016a8a <__multadd+0x7e>
 8016a46:	68a3      	ldr	r3, [r4, #8]
 8016a48:	42ab      	cmp	r3, r5
 8016a4a:	dc19      	bgt.n	8016a80 <__multadd+0x74>
 8016a4c:	6861      	ldr	r1, [r4, #4]
 8016a4e:	4638      	mov	r0, r7
 8016a50:	3101      	adds	r1, #1
 8016a52:	f7ff ff79 	bl	8016948 <_Balloc>
 8016a56:	4680      	mov	r8, r0
 8016a58:	b928      	cbnz	r0, 8016a66 <__multadd+0x5a>
 8016a5a:	4602      	mov	r2, r0
 8016a5c:	21ba      	movs	r1, #186	@ 0xba
 8016a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8016a90 <__multadd+0x84>)
 8016a60:	480c      	ldr	r0, [pc, #48]	@ (8016a94 <__multadd+0x88>)
 8016a62:	f7fc fb89 	bl	8013178 <__assert_func>
 8016a66:	6922      	ldr	r2, [r4, #16]
 8016a68:	f104 010c 	add.w	r1, r4, #12
 8016a6c:	3202      	adds	r2, #2
 8016a6e:	0092      	lsls	r2, r2, #2
 8016a70:	300c      	adds	r0, #12
 8016a72:	f7fe fd58 	bl	8015526 <memcpy>
 8016a76:	4621      	mov	r1, r4
 8016a78:	4638      	mov	r0, r7
 8016a7a:	f7ff ffa5 	bl	80169c8 <_Bfree>
 8016a7e:	4644      	mov	r4, r8
 8016a80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016a84:	3501      	adds	r5, #1
 8016a86:	615e      	str	r6, [r3, #20]
 8016a88:	6125      	str	r5, [r4, #16]
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a90:	0801949c 	.word	0x0801949c
 8016a94:	0801950d 	.word	0x0801950d

08016a98 <__s2b>:
 8016a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a9c:	4615      	mov	r5, r2
 8016a9e:	2209      	movs	r2, #9
 8016aa0:	461f      	mov	r7, r3
 8016aa2:	3308      	adds	r3, #8
 8016aa4:	460c      	mov	r4, r1
 8016aa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8016aaa:	4606      	mov	r6, r0
 8016aac:	2201      	movs	r2, #1
 8016aae:	2100      	movs	r1, #0
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	db09      	blt.n	8016ac8 <__s2b+0x30>
 8016ab4:	4630      	mov	r0, r6
 8016ab6:	f7ff ff47 	bl	8016948 <_Balloc>
 8016aba:	b940      	cbnz	r0, 8016ace <__s2b+0x36>
 8016abc:	4602      	mov	r2, r0
 8016abe:	21d3      	movs	r1, #211	@ 0xd3
 8016ac0:	4b18      	ldr	r3, [pc, #96]	@ (8016b24 <__s2b+0x8c>)
 8016ac2:	4819      	ldr	r0, [pc, #100]	@ (8016b28 <__s2b+0x90>)
 8016ac4:	f7fc fb58 	bl	8013178 <__assert_func>
 8016ac8:	0052      	lsls	r2, r2, #1
 8016aca:	3101      	adds	r1, #1
 8016acc:	e7f0      	b.n	8016ab0 <__s2b+0x18>
 8016ace:	9b08      	ldr	r3, [sp, #32]
 8016ad0:	2d09      	cmp	r5, #9
 8016ad2:	6143      	str	r3, [r0, #20]
 8016ad4:	f04f 0301 	mov.w	r3, #1
 8016ad8:	6103      	str	r3, [r0, #16]
 8016ada:	dd16      	ble.n	8016b0a <__s2b+0x72>
 8016adc:	f104 0909 	add.w	r9, r4, #9
 8016ae0:	46c8      	mov	r8, r9
 8016ae2:	442c      	add	r4, r5
 8016ae4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016ae8:	4601      	mov	r1, r0
 8016aea:	220a      	movs	r2, #10
 8016aec:	4630      	mov	r0, r6
 8016aee:	3b30      	subs	r3, #48	@ 0x30
 8016af0:	f7ff ff8c 	bl	8016a0c <__multadd>
 8016af4:	45a0      	cmp	r8, r4
 8016af6:	d1f5      	bne.n	8016ae4 <__s2b+0x4c>
 8016af8:	f1a5 0408 	sub.w	r4, r5, #8
 8016afc:	444c      	add	r4, r9
 8016afe:	1b2d      	subs	r5, r5, r4
 8016b00:	1963      	adds	r3, r4, r5
 8016b02:	42bb      	cmp	r3, r7
 8016b04:	db04      	blt.n	8016b10 <__s2b+0x78>
 8016b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b0a:	2509      	movs	r5, #9
 8016b0c:	340a      	adds	r4, #10
 8016b0e:	e7f6      	b.n	8016afe <__s2b+0x66>
 8016b10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016b14:	4601      	mov	r1, r0
 8016b16:	220a      	movs	r2, #10
 8016b18:	4630      	mov	r0, r6
 8016b1a:	3b30      	subs	r3, #48	@ 0x30
 8016b1c:	f7ff ff76 	bl	8016a0c <__multadd>
 8016b20:	e7ee      	b.n	8016b00 <__s2b+0x68>
 8016b22:	bf00      	nop
 8016b24:	0801949c 	.word	0x0801949c
 8016b28:	0801950d 	.word	0x0801950d

08016b2c <__hi0bits>:
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016b32:	bf3a      	itte	cc
 8016b34:	0403      	lslcc	r3, r0, #16
 8016b36:	2010      	movcc	r0, #16
 8016b38:	2000      	movcs	r0, #0
 8016b3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016b3e:	bf3c      	itt	cc
 8016b40:	021b      	lslcc	r3, r3, #8
 8016b42:	3008      	addcc	r0, #8
 8016b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016b48:	bf3c      	itt	cc
 8016b4a:	011b      	lslcc	r3, r3, #4
 8016b4c:	3004      	addcc	r0, #4
 8016b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016b52:	bf3c      	itt	cc
 8016b54:	009b      	lslcc	r3, r3, #2
 8016b56:	3002      	addcc	r0, #2
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	db05      	blt.n	8016b68 <__hi0bits+0x3c>
 8016b5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016b60:	f100 0001 	add.w	r0, r0, #1
 8016b64:	bf08      	it	eq
 8016b66:	2020      	moveq	r0, #32
 8016b68:	4770      	bx	lr

08016b6a <__lo0bits>:
 8016b6a:	6803      	ldr	r3, [r0, #0]
 8016b6c:	4602      	mov	r2, r0
 8016b6e:	f013 0007 	ands.w	r0, r3, #7
 8016b72:	d00b      	beq.n	8016b8c <__lo0bits+0x22>
 8016b74:	07d9      	lsls	r1, r3, #31
 8016b76:	d421      	bmi.n	8016bbc <__lo0bits+0x52>
 8016b78:	0798      	lsls	r0, r3, #30
 8016b7a:	bf49      	itett	mi
 8016b7c:	085b      	lsrmi	r3, r3, #1
 8016b7e:	089b      	lsrpl	r3, r3, #2
 8016b80:	2001      	movmi	r0, #1
 8016b82:	6013      	strmi	r3, [r2, #0]
 8016b84:	bf5c      	itt	pl
 8016b86:	2002      	movpl	r0, #2
 8016b88:	6013      	strpl	r3, [r2, #0]
 8016b8a:	4770      	bx	lr
 8016b8c:	b299      	uxth	r1, r3
 8016b8e:	b909      	cbnz	r1, 8016b94 <__lo0bits+0x2a>
 8016b90:	2010      	movs	r0, #16
 8016b92:	0c1b      	lsrs	r3, r3, #16
 8016b94:	b2d9      	uxtb	r1, r3
 8016b96:	b909      	cbnz	r1, 8016b9c <__lo0bits+0x32>
 8016b98:	3008      	adds	r0, #8
 8016b9a:	0a1b      	lsrs	r3, r3, #8
 8016b9c:	0719      	lsls	r1, r3, #28
 8016b9e:	bf04      	itt	eq
 8016ba0:	091b      	lsreq	r3, r3, #4
 8016ba2:	3004      	addeq	r0, #4
 8016ba4:	0799      	lsls	r1, r3, #30
 8016ba6:	bf04      	itt	eq
 8016ba8:	089b      	lsreq	r3, r3, #2
 8016baa:	3002      	addeq	r0, #2
 8016bac:	07d9      	lsls	r1, r3, #31
 8016bae:	d403      	bmi.n	8016bb8 <__lo0bits+0x4e>
 8016bb0:	085b      	lsrs	r3, r3, #1
 8016bb2:	f100 0001 	add.w	r0, r0, #1
 8016bb6:	d003      	beq.n	8016bc0 <__lo0bits+0x56>
 8016bb8:	6013      	str	r3, [r2, #0]
 8016bba:	4770      	bx	lr
 8016bbc:	2000      	movs	r0, #0
 8016bbe:	4770      	bx	lr
 8016bc0:	2020      	movs	r0, #32
 8016bc2:	4770      	bx	lr

08016bc4 <__i2b>:
 8016bc4:	b510      	push	{r4, lr}
 8016bc6:	460c      	mov	r4, r1
 8016bc8:	2101      	movs	r1, #1
 8016bca:	f7ff febd 	bl	8016948 <_Balloc>
 8016bce:	4602      	mov	r2, r0
 8016bd0:	b928      	cbnz	r0, 8016bde <__i2b+0x1a>
 8016bd2:	f240 1145 	movw	r1, #325	@ 0x145
 8016bd6:	4b04      	ldr	r3, [pc, #16]	@ (8016be8 <__i2b+0x24>)
 8016bd8:	4804      	ldr	r0, [pc, #16]	@ (8016bec <__i2b+0x28>)
 8016bda:	f7fc facd 	bl	8013178 <__assert_func>
 8016bde:	2301      	movs	r3, #1
 8016be0:	6144      	str	r4, [r0, #20]
 8016be2:	6103      	str	r3, [r0, #16]
 8016be4:	bd10      	pop	{r4, pc}
 8016be6:	bf00      	nop
 8016be8:	0801949c 	.word	0x0801949c
 8016bec:	0801950d 	.word	0x0801950d

08016bf0 <__multiply>:
 8016bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bf4:	4617      	mov	r7, r2
 8016bf6:	690a      	ldr	r2, [r1, #16]
 8016bf8:	693b      	ldr	r3, [r7, #16]
 8016bfa:	4689      	mov	r9, r1
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	bfa2      	ittt	ge
 8016c00:	463b      	movge	r3, r7
 8016c02:	460f      	movge	r7, r1
 8016c04:	4699      	movge	r9, r3
 8016c06:	693d      	ldr	r5, [r7, #16]
 8016c08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	6879      	ldr	r1, [r7, #4]
 8016c10:	eb05 060a 	add.w	r6, r5, sl
 8016c14:	42b3      	cmp	r3, r6
 8016c16:	b085      	sub	sp, #20
 8016c18:	bfb8      	it	lt
 8016c1a:	3101      	addlt	r1, #1
 8016c1c:	f7ff fe94 	bl	8016948 <_Balloc>
 8016c20:	b930      	cbnz	r0, 8016c30 <__multiply+0x40>
 8016c22:	4602      	mov	r2, r0
 8016c24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016c28:	4b40      	ldr	r3, [pc, #256]	@ (8016d2c <__multiply+0x13c>)
 8016c2a:	4841      	ldr	r0, [pc, #260]	@ (8016d30 <__multiply+0x140>)
 8016c2c:	f7fc faa4 	bl	8013178 <__assert_func>
 8016c30:	f100 0414 	add.w	r4, r0, #20
 8016c34:	4623      	mov	r3, r4
 8016c36:	2200      	movs	r2, #0
 8016c38:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016c3c:	4573      	cmp	r3, lr
 8016c3e:	d320      	bcc.n	8016c82 <__multiply+0x92>
 8016c40:	f107 0814 	add.w	r8, r7, #20
 8016c44:	f109 0114 	add.w	r1, r9, #20
 8016c48:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016c4c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016c50:	9302      	str	r3, [sp, #8]
 8016c52:	1beb      	subs	r3, r5, r7
 8016c54:	3b15      	subs	r3, #21
 8016c56:	f023 0303 	bic.w	r3, r3, #3
 8016c5a:	3304      	adds	r3, #4
 8016c5c:	3715      	adds	r7, #21
 8016c5e:	42bd      	cmp	r5, r7
 8016c60:	bf38      	it	cc
 8016c62:	2304      	movcc	r3, #4
 8016c64:	9301      	str	r3, [sp, #4]
 8016c66:	9b02      	ldr	r3, [sp, #8]
 8016c68:	9103      	str	r1, [sp, #12]
 8016c6a:	428b      	cmp	r3, r1
 8016c6c:	d80c      	bhi.n	8016c88 <__multiply+0x98>
 8016c6e:	2e00      	cmp	r6, #0
 8016c70:	dd03      	ble.n	8016c7a <__multiply+0x8a>
 8016c72:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d055      	beq.n	8016d26 <__multiply+0x136>
 8016c7a:	6106      	str	r6, [r0, #16]
 8016c7c:	b005      	add	sp, #20
 8016c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c82:	f843 2b04 	str.w	r2, [r3], #4
 8016c86:	e7d9      	b.n	8016c3c <__multiply+0x4c>
 8016c88:	f8b1 a000 	ldrh.w	sl, [r1]
 8016c8c:	f1ba 0f00 	cmp.w	sl, #0
 8016c90:	d01f      	beq.n	8016cd2 <__multiply+0xe2>
 8016c92:	46c4      	mov	ip, r8
 8016c94:	46a1      	mov	r9, r4
 8016c96:	2700      	movs	r7, #0
 8016c98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016c9c:	f8d9 3000 	ldr.w	r3, [r9]
 8016ca0:	fa1f fb82 	uxth.w	fp, r2
 8016ca4:	b29b      	uxth	r3, r3
 8016ca6:	fb0a 330b 	mla	r3, sl, fp, r3
 8016caa:	443b      	add	r3, r7
 8016cac:	f8d9 7000 	ldr.w	r7, [r9]
 8016cb0:	0c12      	lsrs	r2, r2, #16
 8016cb2:	0c3f      	lsrs	r7, r7, #16
 8016cb4:	fb0a 7202 	mla	r2, sl, r2, r7
 8016cb8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016cbc:	b29b      	uxth	r3, r3
 8016cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cc2:	4565      	cmp	r5, ip
 8016cc4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016cc8:	f849 3b04 	str.w	r3, [r9], #4
 8016ccc:	d8e4      	bhi.n	8016c98 <__multiply+0xa8>
 8016cce:	9b01      	ldr	r3, [sp, #4]
 8016cd0:	50e7      	str	r7, [r4, r3]
 8016cd2:	9b03      	ldr	r3, [sp, #12]
 8016cd4:	3104      	adds	r1, #4
 8016cd6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016cda:	f1b9 0f00 	cmp.w	r9, #0
 8016cde:	d020      	beq.n	8016d22 <__multiply+0x132>
 8016ce0:	4647      	mov	r7, r8
 8016ce2:	46a4      	mov	ip, r4
 8016ce4:	f04f 0a00 	mov.w	sl, #0
 8016ce8:	6823      	ldr	r3, [r4, #0]
 8016cea:	f8b7 b000 	ldrh.w	fp, [r7]
 8016cee:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	fb09 220b 	mla	r2, r9, fp, r2
 8016cf8:	4452      	add	r2, sl
 8016cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cfe:	f84c 3b04 	str.w	r3, [ip], #4
 8016d02:	f857 3b04 	ldr.w	r3, [r7], #4
 8016d06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016d0a:	f8bc 3000 	ldrh.w	r3, [ip]
 8016d0e:	42bd      	cmp	r5, r7
 8016d10:	fb09 330a 	mla	r3, r9, sl, r3
 8016d14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016d18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016d1c:	d8e5      	bhi.n	8016cea <__multiply+0xfa>
 8016d1e:	9a01      	ldr	r2, [sp, #4]
 8016d20:	50a3      	str	r3, [r4, r2]
 8016d22:	3404      	adds	r4, #4
 8016d24:	e79f      	b.n	8016c66 <__multiply+0x76>
 8016d26:	3e01      	subs	r6, #1
 8016d28:	e7a1      	b.n	8016c6e <__multiply+0x7e>
 8016d2a:	bf00      	nop
 8016d2c:	0801949c 	.word	0x0801949c
 8016d30:	0801950d 	.word	0x0801950d

08016d34 <__pow5mult>:
 8016d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d38:	4615      	mov	r5, r2
 8016d3a:	f012 0203 	ands.w	r2, r2, #3
 8016d3e:	4607      	mov	r7, r0
 8016d40:	460e      	mov	r6, r1
 8016d42:	d007      	beq.n	8016d54 <__pow5mult+0x20>
 8016d44:	4c25      	ldr	r4, [pc, #148]	@ (8016ddc <__pow5mult+0xa8>)
 8016d46:	3a01      	subs	r2, #1
 8016d48:	2300      	movs	r3, #0
 8016d4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016d4e:	f7ff fe5d 	bl	8016a0c <__multadd>
 8016d52:	4606      	mov	r6, r0
 8016d54:	10ad      	asrs	r5, r5, #2
 8016d56:	d03d      	beq.n	8016dd4 <__pow5mult+0xa0>
 8016d58:	69fc      	ldr	r4, [r7, #28]
 8016d5a:	b97c      	cbnz	r4, 8016d7c <__pow5mult+0x48>
 8016d5c:	2010      	movs	r0, #16
 8016d5e:	f7fc fa31 	bl	80131c4 <malloc>
 8016d62:	4602      	mov	r2, r0
 8016d64:	61f8      	str	r0, [r7, #28]
 8016d66:	b928      	cbnz	r0, 8016d74 <__pow5mult+0x40>
 8016d68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8016de0 <__pow5mult+0xac>)
 8016d6e:	481d      	ldr	r0, [pc, #116]	@ (8016de4 <__pow5mult+0xb0>)
 8016d70:	f7fc fa02 	bl	8013178 <__assert_func>
 8016d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016d78:	6004      	str	r4, [r0, #0]
 8016d7a:	60c4      	str	r4, [r0, #12]
 8016d7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016d80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016d84:	b94c      	cbnz	r4, 8016d9a <__pow5mult+0x66>
 8016d86:	f240 2171 	movw	r1, #625	@ 0x271
 8016d8a:	4638      	mov	r0, r7
 8016d8c:	f7ff ff1a 	bl	8016bc4 <__i2b>
 8016d90:	2300      	movs	r3, #0
 8016d92:	4604      	mov	r4, r0
 8016d94:	f8c8 0008 	str.w	r0, [r8, #8]
 8016d98:	6003      	str	r3, [r0, #0]
 8016d9a:	f04f 0900 	mov.w	r9, #0
 8016d9e:	07eb      	lsls	r3, r5, #31
 8016da0:	d50a      	bpl.n	8016db8 <__pow5mult+0x84>
 8016da2:	4631      	mov	r1, r6
 8016da4:	4622      	mov	r2, r4
 8016da6:	4638      	mov	r0, r7
 8016da8:	f7ff ff22 	bl	8016bf0 <__multiply>
 8016dac:	4680      	mov	r8, r0
 8016dae:	4631      	mov	r1, r6
 8016db0:	4638      	mov	r0, r7
 8016db2:	f7ff fe09 	bl	80169c8 <_Bfree>
 8016db6:	4646      	mov	r6, r8
 8016db8:	106d      	asrs	r5, r5, #1
 8016dba:	d00b      	beq.n	8016dd4 <__pow5mult+0xa0>
 8016dbc:	6820      	ldr	r0, [r4, #0]
 8016dbe:	b938      	cbnz	r0, 8016dd0 <__pow5mult+0x9c>
 8016dc0:	4622      	mov	r2, r4
 8016dc2:	4621      	mov	r1, r4
 8016dc4:	4638      	mov	r0, r7
 8016dc6:	f7ff ff13 	bl	8016bf0 <__multiply>
 8016dca:	6020      	str	r0, [r4, #0]
 8016dcc:	f8c0 9000 	str.w	r9, [r0]
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	e7e4      	b.n	8016d9e <__pow5mult+0x6a>
 8016dd4:	4630      	mov	r0, r6
 8016dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dda:	bf00      	nop
 8016ddc:	080196ec 	.word	0x080196ec
 8016de0:	080193be 	.word	0x080193be
 8016de4:	0801950d 	.word	0x0801950d

08016de8 <__lshift>:
 8016de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dec:	460c      	mov	r4, r1
 8016dee:	4607      	mov	r7, r0
 8016df0:	4691      	mov	r9, r2
 8016df2:	6923      	ldr	r3, [r4, #16]
 8016df4:	6849      	ldr	r1, [r1, #4]
 8016df6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016dfa:	68a3      	ldr	r3, [r4, #8]
 8016dfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016e00:	f108 0601 	add.w	r6, r8, #1
 8016e04:	42b3      	cmp	r3, r6
 8016e06:	db0b      	blt.n	8016e20 <__lshift+0x38>
 8016e08:	4638      	mov	r0, r7
 8016e0a:	f7ff fd9d 	bl	8016948 <_Balloc>
 8016e0e:	4605      	mov	r5, r0
 8016e10:	b948      	cbnz	r0, 8016e26 <__lshift+0x3e>
 8016e12:	4602      	mov	r2, r0
 8016e14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016e18:	4b27      	ldr	r3, [pc, #156]	@ (8016eb8 <__lshift+0xd0>)
 8016e1a:	4828      	ldr	r0, [pc, #160]	@ (8016ebc <__lshift+0xd4>)
 8016e1c:	f7fc f9ac 	bl	8013178 <__assert_func>
 8016e20:	3101      	adds	r1, #1
 8016e22:	005b      	lsls	r3, r3, #1
 8016e24:	e7ee      	b.n	8016e04 <__lshift+0x1c>
 8016e26:	2300      	movs	r3, #0
 8016e28:	f100 0114 	add.w	r1, r0, #20
 8016e2c:	f100 0210 	add.w	r2, r0, #16
 8016e30:	4618      	mov	r0, r3
 8016e32:	4553      	cmp	r3, sl
 8016e34:	db33      	blt.n	8016e9e <__lshift+0xb6>
 8016e36:	6920      	ldr	r0, [r4, #16]
 8016e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016e3c:	f104 0314 	add.w	r3, r4, #20
 8016e40:	f019 091f 	ands.w	r9, r9, #31
 8016e44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016e48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016e4c:	d02b      	beq.n	8016ea6 <__lshift+0xbe>
 8016e4e:	468a      	mov	sl, r1
 8016e50:	2200      	movs	r2, #0
 8016e52:	f1c9 0e20 	rsb	lr, r9, #32
 8016e56:	6818      	ldr	r0, [r3, #0]
 8016e58:	fa00 f009 	lsl.w	r0, r0, r9
 8016e5c:	4310      	orrs	r0, r2
 8016e5e:	f84a 0b04 	str.w	r0, [sl], #4
 8016e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e66:	459c      	cmp	ip, r3
 8016e68:	fa22 f20e 	lsr.w	r2, r2, lr
 8016e6c:	d8f3      	bhi.n	8016e56 <__lshift+0x6e>
 8016e6e:	ebac 0304 	sub.w	r3, ip, r4
 8016e72:	3b15      	subs	r3, #21
 8016e74:	f023 0303 	bic.w	r3, r3, #3
 8016e78:	3304      	adds	r3, #4
 8016e7a:	f104 0015 	add.w	r0, r4, #21
 8016e7e:	4560      	cmp	r0, ip
 8016e80:	bf88      	it	hi
 8016e82:	2304      	movhi	r3, #4
 8016e84:	50ca      	str	r2, [r1, r3]
 8016e86:	b10a      	cbz	r2, 8016e8c <__lshift+0xa4>
 8016e88:	f108 0602 	add.w	r6, r8, #2
 8016e8c:	3e01      	subs	r6, #1
 8016e8e:	4638      	mov	r0, r7
 8016e90:	4621      	mov	r1, r4
 8016e92:	612e      	str	r6, [r5, #16]
 8016e94:	f7ff fd98 	bl	80169c8 <_Bfree>
 8016e98:	4628      	mov	r0, r5
 8016e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016ea2:	3301      	adds	r3, #1
 8016ea4:	e7c5      	b.n	8016e32 <__lshift+0x4a>
 8016ea6:	3904      	subs	r1, #4
 8016ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016eac:	459c      	cmp	ip, r3
 8016eae:	f841 2f04 	str.w	r2, [r1, #4]!
 8016eb2:	d8f9      	bhi.n	8016ea8 <__lshift+0xc0>
 8016eb4:	e7ea      	b.n	8016e8c <__lshift+0xa4>
 8016eb6:	bf00      	nop
 8016eb8:	0801949c 	.word	0x0801949c
 8016ebc:	0801950d 	.word	0x0801950d

08016ec0 <__mcmp>:
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	690a      	ldr	r2, [r1, #16]
 8016ec4:	6900      	ldr	r0, [r0, #16]
 8016ec6:	b530      	push	{r4, r5, lr}
 8016ec8:	1a80      	subs	r0, r0, r2
 8016eca:	d10e      	bne.n	8016eea <__mcmp+0x2a>
 8016ecc:	3314      	adds	r3, #20
 8016ece:	3114      	adds	r1, #20
 8016ed0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016ed4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016ed8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016edc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016ee0:	4295      	cmp	r5, r2
 8016ee2:	d003      	beq.n	8016eec <__mcmp+0x2c>
 8016ee4:	d205      	bcs.n	8016ef2 <__mcmp+0x32>
 8016ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8016eea:	bd30      	pop	{r4, r5, pc}
 8016eec:	42a3      	cmp	r3, r4
 8016eee:	d3f3      	bcc.n	8016ed8 <__mcmp+0x18>
 8016ef0:	e7fb      	b.n	8016eea <__mcmp+0x2a>
 8016ef2:	2001      	movs	r0, #1
 8016ef4:	e7f9      	b.n	8016eea <__mcmp+0x2a>
	...

08016ef8 <__mdiff>:
 8016ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016efc:	4689      	mov	r9, r1
 8016efe:	4606      	mov	r6, r0
 8016f00:	4611      	mov	r1, r2
 8016f02:	4648      	mov	r0, r9
 8016f04:	4614      	mov	r4, r2
 8016f06:	f7ff ffdb 	bl	8016ec0 <__mcmp>
 8016f0a:	1e05      	subs	r5, r0, #0
 8016f0c:	d112      	bne.n	8016f34 <__mdiff+0x3c>
 8016f0e:	4629      	mov	r1, r5
 8016f10:	4630      	mov	r0, r6
 8016f12:	f7ff fd19 	bl	8016948 <_Balloc>
 8016f16:	4602      	mov	r2, r0
 8016f18:	b928      	cbnz	r0, 8016f26 <__mdiff+0x2e>
 8016f1a:	f240 2137 	movw	r1, #567	@ 0x237
 8016f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8017018 <__mdiff+0x120>)
 8016f20:	483e      	ldr	r0, [pc, #248]	@ (801701c <__mdiff+0x124>)
 8016f22:	f7fc f929 	bl	8013178 <__assert_func>
 8016f26:	2301      	movs	r3, #1
 8016f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016f2c:	4610      	mov	r0, r2
 8016f2e:	b003      	add	sp, #12
 8016f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f34:	bfbc      	itt	lt
 8016f36:	464b      	movlt	r3, r9
 8016f38:	46a1      	movlt	r9, r4
 8016f3a:	4630      	mov	r0, r6
 8016f3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016f40:	bfba      	itte	lt
 8016f42:	461c      	movlt	r4, r3
 8016f44:	2501      	movlt	r5, #1
 8016f46:	2500      	movge	r5, #0
 8016f48:	f7ff fcfe 	bl	8016948 <_Balloc>
 8016f4c:	4602      	mov	r2, r0
 8016f4e:	b918      	cbnz	r0, 8016f58 <__mdiff+0x60>
 8016f50:	f240 2145 	movw	r1, #581	@ 0x245
 8016f54:	4b30      	ldr	r3, [pc, #192]	@ (8017018 <__mdiff+0x120>)
 8016f56:	e7e3      	b.n	8016f20 <__mdiff+0x28>
 8016f58:	f100 0b14 	add.w	fp, r0, #20
 8016f5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016f60:	f109 0310 	add.w	r3, r9, #16
 8016f64:	60c5      	str	r5, [r0, #12]
 8016f66:	f04f 0c00 	mov.w	ip, #0
 8016f6a:	f109 0514 	add.w	r5, r9, #20
 8016f6e:	46d9      	mov	r9, fp
 8016f70:	6926      	ldr	r6, [r4, #16]
 8016f72:	f104 0e14 	add.w	lr, r4, #20
 8016f76:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016f7a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016f7e:	9301      	str	r3, [sp, #4]
 8016f80:	9b01      	ldr	r3, [sp, #4]
 8016f82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016f86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016f8a:	b281      	uxth	r1, r0
 8016f8c:	9301      	str	r3, [sp, #4]
 8016f8e:	fa1f f38a 	uxth.w	r3, sl
 8016f92:	1a5b      	subs	r3, r3, r1
 8016f94:	0c00      	lsrs	r0, r0, #16
 8016f96:	4463      	add	r3, ip
 8016f98:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016f9c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016fa0:	b29b      	uxth	r3, r3
 8016fa2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016fa6:	4576      	cmp	r6, lr
 8016fa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016fac:	f849 3b04 	str.w	r3, [r9], #4
 8016fb0:	d8e6      	bhi.n	8016f80 <__mdiff+0x88>
 8016fb2:	1b33      	subs	r3, r6, r4
 8016fb4:	3b15      	subs	r3, #21
 8016fb6:	f023 0303 	bic.w	r3, r3, #3
 8016fba:	3415      	adds	r4, #21
 8016fbc:	3304      	adds	r3, #4
 8016fbe:	42a6      	cmp	r6, r4
 8016fc0:	bf38      	it	cc
 8016fc2:	2304      	movcc	r3, #4
 8016fc4:	441d      	add	r5, r3
 8016fc6:	445b      	add	r3, fp
 8016fc8:	461e      	mov	r6, r3
 8016fca:	462c      	mov	r4, r5
 8016fcc:	4544      	cmp	r4, r8
 8016fce:	d30e      	bcc.n	8016fee <__mdiff+0xf6>
 8016fd0:	f108 0103 	add.w	r1, r8, #3
 8016fd4:	1b49      	subs	r1, r1, r5
 8016fd6:	f021 0103 	bic.w	r1, r1, #3
 8016fda:	3d03      	subs	r5, #3
 8016fdc:	45a8      	cmp	r8, r5
 8016fde:	bf38      	it	cc
 8016fe0:	2100      	movcc	r1, #0
 8016fe2:	440b      	add	r3, r1
 8016fe4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016fe8:	b199      	cbz	r1, 8017012 <__mdiff+0x11a>
 8016fea:	6117      	str	r7, [r2, #16]
 8016fec:	e79e      	b.n	8016f2c <__mdiff+0x34>
 8016fee:	46e6      	mov	lr, ip
 8016ff0:	f854 1b04 	ldr.w	r1, [r4], #4
 8016ff4:	fa1f fc81 	uxth.w	ip, r1
 8016ff8:	44f4      	add	ip, lr
 8016ffa:	0c08      	lsrs	r0, r1, #16
 8016ffc:	4471      	add	r1, lr
 8016ffe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017002:	b289      	uxth	r1, r1
 8017004:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801700c:	f846 1b04 	str.w	r1, [r6], #4
 8017010:	e7dc      	b.n	8016fcc <__mdiff+0xd4>
 8017012:	3f01      	subs	r7, #1
 8017014:	e7e6      	b.n	8016fe4 <__mdiff+0xec>
 8017016:	bf00      	nop
 8017018:	0801949c 	.word	0x0801949c
 801701c:	0801950d 	.word	0x0801950d

08017020 <__ulp>:
 8017020:	4b0e      	ldr	r3, [pc, #56]	@ (801705c <__ulp+0x3c>)
 8017022:	400b      	ands	r3, r1
 8017024:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017028:	2b00      	cmp	r3, #0
 801702a:	dc08      	bgt.n	801703e <__ulp+0x1e>
 801702c:	425b      	negs	r3, r3
 801702e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017032:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017036:	da04      	bge.n	8017042 <__ulp+0x22>
 8017038:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801703c:	4113      	asrs	r3, r2
 801703e:	2200      	movs	r2, #0
 8017040:	e008      	b.n	8017054 <__ulp+0x34>
 8017042:	f1a2 0314 	sub.w	r3, r2, #20
 8017046:	2b1e      	cmp	r3, #30
 8017048:	bfd6      	itet	le
 801704a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801704e:	2201      	movgt	r2, #1
 8017050:	40da      	lsrle	r2, r3
 8017052:	2300      	movs	r3, #0
 8017054:	4619      	mov	r1, r3
 8017056:	4610      	mov	r0, r2
 8017058:	4770      	bx	lr
 801705a:	bf00      	nop
 801705c:	7ff00000 	.word	0x7ff00000

08017060 <__b2d>:
 8017060:	6902      	ldr	r2, [r0, #16]
 8017062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017064:	f100 0614 	add.w	r6, r0, #20
 8017068:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 801706c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8017070:	4f1e      	ldr	r7, [pc, #120]	@ (80170ec <__b2d+0x8c>)
 8017072:	4620      	mov	r0, r4
 8017074:	f7ff fd5a 	bl	8016b2c <__hi0bits>
 8017078:	4603      	mov	r3, r0
 801707a:	f1c0 0020 	rsb	r0, r0, #32
 801707e:	2b0a      	cmp	r3, #10
 8017080:	f1a2 0504 	sub.w	r5, r2, #4
 8017084:	6008      	str	r0, [r1, #0]
 8017086:	dc12      	bgt.n	80170ae <__b2d+0x4e>
 8017088:	42ae      	cmp	r6, r5
 801708a:	bf2c      	ite	cs
 801708c:	2200      	movcs	r2, #0
 801708e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8017092:	f1c3 0c0b 	rsb	ip, r3, #11
 8017096:	3315      	adds	r3, #21
 8017098:	fa24 fe0c 	lsr.w	lr, r4, ip
 801709c:	fa04 f303 	lsl.w	r3, r4, r3
 80170a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80170a4:	ea4e 0107 	orr.w	r1, lr, r7
 80170a8:	431a      	orrs	r2, r3
 80170aa:	4610      	mov	r0, r2
 80170ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170ae:	42ae      	cmp	r6, r5
 80170b0:	bf36      	itet	cc
 80170b2:	f1a2 0508 	subcc.w	r5, r2, #8
 80170b6:	2200      	movcs	r2, #0
 80170b8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80170bc:	3b0b      	subs	r3, #11
 80170be:	d012      	beq.n	80170e6 <__b2d+0x86>
 80170c0:	f1c3 0720 	rsb	r7, r3, #32
 80170c4:	fa22 f107 	lsr.w	r1, r2, r7
 80170c8:	409c      	lsls	r4, r3
 80170ca:	430c      	orrs	r4, r1
 80170cc:	42b5      	cmp	r5, r6
 80170ce:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80170d2:	bf94      	ite	ls
 80170d4:	2400      	movls	r4, #0
 80170d6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80170da:	409a      	lsls	r2, r3
 80170dc:	40fc      	lsrs	r4, r7
 80170de:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80170e2:	4322      	orrs	r2, r4
 80170e4:	e7e1      	b.n	80170aa <__b2d+0x4a>
 80170e6:	ea44 0107 	orr.w	r1, r4, r7
 80170ea:	e7de      	b.n	80170aa <__b2d+0x4a>
 80170ec:	3ff00000 	.word	0x3ff00000

080170f0 <__d2b>:
 80170f0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80170f4:	2101      	movs	r1, #1
 80170f6:	4690      	mov	r8, r2
 80170f8:	4699      	mov	r9, r3
 80170fa:	9e08      	ldr	r6, [sp, #32]
 80170fc:	f7ff fc24 	bl	8016948 <_Balloc>
 8017100:	4604      	mov	r4, r0
 8017102:	b930      	cbnz	r0, 8017112 <__d2b+0x22>
 8017104:	4602      	mov	r2, r0
 8017106:	f240 310f 	movw	r1, #783	@ 0x30f
 801710a:	4b23      	ldr	r3, [pc, #140]	@ (8017198 <__d2b+0xa8>)
 801710c:	4823      	ldr	r0, [pc, #140]	@ (801719c <__d2b+0xac>)
 801710e:	f7fc f833 	bl	8013178 <__assert_func>
 8017112:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017116:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801711a:	b10d      	cbz	r5, 8017120 <__d2b+0x30>
 801711c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017120:	9301      	str	r3, [sp, #4]
 8017122:	f1b8 0300 	subs.w	r3, r8, #0
 8017126:	d024      	beq.n	8017172 <__d2b+0x82>
 8017128:	4668      	mov	r0, sp
 801712a:	9300      	str	r3, [sp, #0]
 801712c:	f7ff fd1d 	bl	8016b6a <__lo0bits>
 8017130:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017134:	b1d8      	cbz	r0, 801716e <__d2b+0x7e>
 8017136:	f1c0 0320 	rsb	r3, r0, #32
 801713a:	fa02 f303 	lsl.w	r3, r2, r3
 801713e:	430b      	orrs	r3, r1
 8017140:	40c2      	lsrs	r2, r0
 8017142:	6163      	str	r3, [r4, #20]
 8017144:	9201      	str	r2, [sp, #4]
 8017146:	9b01      	ldr	r3, [sp, #4]
 8017148:	2b00      	cmp	r3, #0
 801714a:	bf0c      	ite	eq
 801714c:	2201      	moveq	r2, #1
 801714e:	2202      	movne	r2, #2
 8017150:	61a3      	str	r3, [r4, #24]
 8017152:	6122      	str	r2, [r4, #16]
 8017154:	b1ad      	cbz	r5, 8017182 <__d2b+0x92>
 8017156:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801715a:	4405      	add	r5, r0
 801715c:	6035      	str	r5, [r6, #0]
 801715e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017164:	6018      	str	r0, [r3, #0]
 8017166:	4620      	mov	r0, r4
 8017168:	b002      	add	sp, #8
 801716a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801716e:	6161      	str	r1, [r4, #20]
 8017170:	e7e9      	b.n	8017146 <__d2b+0x56>
 8017172:	a801      	add	r0, sp, #4
 8017174:	f7ff fcf9 	bl	8016b6a <__lo0bits>
 8017178:	9b01      	ldr	r3, [sp, #4]
 801717a:	2201      	movs	r2, #1
 801717c:	6163      	str	r3, [r4, #20]
 801717e:	3020      	adds	r0, #32
 8017180:	e7e7      	b.n	8017152 <__d2b+0x62>
 8017182:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017186:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801718a:	6030      	str	r0, [r6, #0]
 801718c:	6918      	ldr	r0, [r3, #16]
 801718e:	f7ff fccd 	bl	8016b2c <__hi0bits>
 8017192:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017196:	e7e4      	b.n	8017162 <__d2b+0x72>
 8017198:	0801949c 	.word	0x0801949c
 801719c:	0801950d 	.word	0x0801950d

080171a0 <__ratio>:
 80171a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171a4:	b085      	sub	sp, #20
 80171a6:	e9cd 1000 	strd	r1, r0, [sp]
 80171aa:	a902      	add	r1, sp, #8
 80171ac:	f7ff ff58 	bl	8017060 <__b2d>
 80171b0:	468b      	mov	fp, r1
 80171b2:	4606      	mov	r6, r0
 80171b4:	460f      	mov	r7, r1
 80171b6:	9800      	ldr	r0, [sp, #0]
 80171b8:	a903      	add	r1, sp, #12
 80171ba:	f7ff ff51 	bl	8017060 <__b2d>
 80171be:	460d      	mov	r5, r1
 80171c0:	9b01      	ldr	r3, [sp, #4]
 80171c2:	4689      	mov	r9, r1
 80171c4:	6919      	ldr	r1, [r3, #16]
 80171c6:	9b00      	ldr	r3, [sp, #0]
 80171c8:	4604      	mov	r4, r0
 80171ca:	691b      	ldr	r3, [r3, #16]
 80171cc:	4630      	mov	r0, r6
 80171ce:	1ac9      	subs	r1, r1, r3
 80171d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80171d4:	1a9b      	subs	r3, r3, r2
 80171d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80171da:	2b00      	cmp	r3, #0
 80171dc:	bfcd      	iteet	gt
 80171de:	463a      	movgt	r2, r7
 80171e0:	462a      	movle	r2, r5
 80171e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80171e6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80171ea:	bfd8      	it	le
 80171ec:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80171f0:	464b      	mov	r3, r9
 80171f2:	4622      	mov	r2, r4
 80171f4:	4659      	mov	r1, fp
 80171f6:	f7e9 faa3 	bl	8000740 <__aeabi_ddiv>
 80171fa:	b005      	add	sp, #20
 80171fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017200 <__copybits>:
 8017200:	3901      	subs	r1, #1
 8017202:	b570      	push	{r4, r5, r6, lr}
 8017204:	1149      	asrs	r1, r1, #5
 8017206:	6914      	ldr	r4, [r2, #16]
 8017208:	3101      	adds	r1, #1
 801720a:	f102 0314 	add.w	r3, r2, #20
 801720e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017212:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017216:	1f05      	subs	r5, r0, #4
 8017218:	42a3      	cmp	r3, r4
 801721a:	d30c      	bcc.n	8017236 <__copybits+0x36>
 801721c:	1aa3      	subs	r3, r4, r2
 801721e:	3b11      	subs	r3, #17
 8017220:	f023 0303 	bic.w	r3, r3, #3
 8017224:	3211      	adds	r2, #17
 8017226:	42a2      	cmp	r2, r4
 8017228:	bf88      	it	hi
 801722a:	2300      	movhi	r3, #0
 801722c:	4418      	add	r0, r3
 801722e:	2300      	movs	r3, #0
 8017230:	4288      	cmp	r0, r1
 8017232:	d305      	bcc.n	8017240 <__copybits+0x40>
 8017234:	bd70      	pop	{r4, r5, r6, pc}
 8017236:	f853 6b04 	ldr.w	r6, [r3], #4
 801723a:	f845 6f04 	str.w	r6, [r5, #4]!
 801723e:	e7eb      	b.n	8017218 <__copybits+0x18>
 8017240:	f840 3b04 	str.w	r3, [r0], #4
 8017244:	e7f4      	b.n	8017230 <__copybits+0x30>

08017246 <__any_on>:
 8017246:	f100 0214 	add.w	r2, r0, #20
 801724a:	6900      	ldr	r0, [r0, #16]
 801724c:	114b      	asrs	r3, r1, #5
 801724e:	4298      	cmp	r0, r3
 8017250:	b510      	push	{r4, lr}
 8017252:	db11      	blt.n	8017278 <__any_on+0x32>
 8017254:	dd0a      	ble.n	801726c <__any_on+0x26>
 8017256:	f011 011f 	ands.w	r1, r1, #31
 801725a:	d007      	beq.n	801726c <__any_on+0x26>
 801725c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017260:	fa24 f001 	lsr.w	r0, r4, r1
 8017264:	fa00 f101 	lsl.w	r1, r0, r1
 8017268:	428c      	cmp	r4, r1
 801726a:	d10b      	bne.n	8017284 <__any_on+0x3e>
 801726c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017270:	4293      	cmp	r3, r2
 8017272:	d803      	bhi.n	801727c <__any_on+0x36>
 8017274:	2000      	movs	r0, #0
 8017276:	bd10      	pop	{r4, pc}
 8017278:	4603      	mov	r3, r0
 801727a:	e7f7      	b.n	801726c <__any_on+0x26>
 801727c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017280:	2900      	cmp	r1, #0
 8017282:	d0f5      	beq.n	8017270 <__any_on+0x2a>
 8017284:	2001      	movs	r0, #1
 8017286:	e7f6      	b.n	8017276 <__any_on+0x30>

08017288 <__ascii_wctomb>:
 8017288:	4603      	mov	r3, r0
 801728a:	4608      	mov	r0, r1
 801728c:	b141      	cbz	r1, 80172a0 <__ascii_wctomb+0x18>
 801728e:	2aff      	cmp	r2, #255	@ 0xff
 8017290:	d904      	bls.n	801729c <__ascii_wctomb+0x14>
 8017292:	228a      	movs	r2, #138	@ 0x8a
 8017294:	f04f 30ff 	mov.w	r0, #4294967295
 8017298:	601a      	str	r2, [r3, #0]
 801729a:	4770      	bx	lr
 801729c:	2001      	movs	r0, #1
 801729e:	700a      	strb	r2, [r1, #0]
 80172a0:	4770      	bx	lr

080172a2 <__ssputs_r>:
 80172a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172a6:	461f      	mov	r7, r3
 80172a8:	688e      	ldr	r6, [r1, #8]
 80172aa:	4682      	mov	sl, r0
 80172ac:	42be      	cmp	r6, r7
 80172ae:	460c      	mov	r4, r1
 80172b0:	4690      	mov	r8, r2
 80172b2:	680b      	ldr	r3, [r1, #0]
 80172b4:	d82d      	bhi.n	8017312 <__ssputs_r+0x70>
 80172b6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80172ba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80172be:	d026      	beq.n	801730e <__ssputs_r+0x6c>
 80172c0:	6965      	ldr	r5, [r4, #20]
 80172c2:	6909      	ldr	r1, [r1, #16]
 80172c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172c8:	eba3 0901 	sub.w	r9, r3, r1
 80172cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80172d0:	1c7b      	adds	r3, r7, #1
 80172d2:	444b      	add	r3, r9
 80172d4:	106d      	asrs	r5, r5, #1
 80172d6:	429d      	cmp	r5, r3
 80172d8:	bf38      	it	cc
 80172da:	461d      	movcc	r5, r3
 80172dc:	0553      	lsls	r3, r2, #21
 80172de:	d527      	bpl.n	8017330 <__ssputs_r+0x8e>
 80172e0:	4629      	mov	r1, r5
 80172e2:	f7fb ffa1 	bl	8013228 <_malloc_r>
 80172e6:	4606      	mov	r6, r0
 80172e8:	b360      	cbz	r0, 8017344 <__ssputs_r+0xa2>
 80172ea:	464a      	mov	r2, r9
 80172ec:	6921      	ldr	r1, [r4, #16]
 80172ee:	f7fe f91a 	bl	8015526 <memcpy>
 80172f2:	89a3      	ldrh	r3, [r4, #12]
 80172f4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80172f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80172fc:	81a3      	strh	r3, [r4, #12]
 80172fe:	6126      	str	r6, [r4, #16]
 8017300:	444e      	add	r6, r9
 8017302:	6026      	str	r6, [r4, #0]
 8017304:	463e      	mov	r6, r7
 8017306:	6165      	str	r5, [r4, #20]
 8017308:	eba5 0509 	sub.w	r5, r5, r9
 801730c:	60a5      	str	r5, [r4, #8]
 801730e:	42be      	cmp	r6, r7
 8017310:	d900      	bls.n	8017314 <__ssputs_r+0x72>
 8017312:	463e      	mov	r6, r7
 8017314:	4632      	mov	r2, r6
 8017316:	4641      	mov	r1, r8
 8017318:	6820      	ldr	r0, [r4, #0]
 801731a:	f000 feed 	bl	80180f8 <memmove>
 801731e:	2000      	movs	r0, #0
 8017320:	68a3      	ldr	r3, [r4, #8]
 8017322:	1b9b      	subs	r3, r3, r6
 8017324:	60a3      	str	r3, [r4, #8]
 8017326:	6823      	ldr	r3, [r4, #0]
 8017328:	4433      	add	r3, r6
 801732a:	6023      	str	r3, [r4, #0]
 801732c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017330:	462a      	mov	r2, r5
 8017332:	f000 ff75 	bl	8018220 <_realloc_r>
 8017336:	4606      	mov	r6, r0
 8017338:	2800      	cmp	r0, #0
 801733a:	d1e0      	bne.n	80172fe <__ssputs_r+0x5c>
 801733c:	4650      	mov	r0, sl
 801733e:	6921      	ldr	r1, [r4, #16]
 8017340:	f7fe ff6e 	bl	8016220 <_free_r>
 8017344:	230c      	movs	r3, #12
 8017346:	f8ca 3000 	str.w	r3, [sl]
 801734a:	89a3      	ldrh	r3, [r4, #12]
 801734c:	f04f 30ff 	mov.w	r0, #4294967295
 8017350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017354:	81a3      	strh	r3, [r4, #12]
 8017356:	e7e9      	b.n	801732c <__ssputs_r+0x8a>

08017358 <_svfiprintf_r>:
 8017358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801735c:	4698      	mov	r8, r3
 801735e:	898b      	ldrh	r3, [r1, #12]
 8017360:	4607      	mov	r7, r0
 8017362:	061b      	lsls	r3, r3, #24
 8017364:	460d      	mov	r5, r1
 8017366:	4614      	mov	r4, r2
 8017368:	b09d      	sub	sp, #116	@ 0x74
 801736a:	d510      	bpl.n	801738e <_svfiprintf_r+0x36>
 801736c:	690b      	ldr	r3, [r1, #16]
 801736e:	b973      	cbnz	r3, 801738e <_svfiprintf_r+0x36>
 8017370:	2140      	movs	r1, #64	@ 0x40
 8017372:	f7fb ff59 	bl	8013228 <_malloc_r>
 8017376:	6028      	str	r0, [r5, #0]
 8017378:	6128      	str	r0, [r5, #16]
 801737a:	b930      	cbnz	r0, 801738a <_svfiprintf_r+0x32>
 801737c:	230c      	movs	r3, #12
 801737e:	603b      	str	r3, [r7, #0]
 8017380:	f04f 30ff 	mov.w	r0, #4294967295
 8017384:	b01d      	add	sp, #116	@ 0x74
 8017386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801738a:	2340      	movs	r3, #64	@ 0x40
 801738c:	616b      	str	r3, [r5, #20]
 801738e:	2300      	movs	r3, #0
 8017390:	9309      	str	r3, [sp, #36]	@ 0x24
 8017392:	2320      	movs	r3, #32
 8017394:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017398:	2330      	movs	r3, #48	@ 0x30
 801739a:	f04f 0901 	mov.w	r9, #1
 801739e:	f8cd 800c 	str.w	r8, [sp, #12]
 80173a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 801753c <_svfiprintf_r+0x1e4>
 80173a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80173aa:	4623      	mov	r3, r4
 80173ac:	469a      	mov	sl, r3
 80173ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173b2:	b10a      	cbz	r2, 80173b8 <_svfiprintf_r+0x60>
 80173b4:	2a25      	cmp	r2, #37	@ 0x25
 80173b6:	d1f9      	bne.n	80173ac <_svfiprintf_r+0x54>
 80173b8:	ebba 0b04 	subs.w	fp, sl, r4
 80173bc:	d00b      	beq.n	80173d6 <_svfiprintf_r+0x7e>
 80173be:	465b      	mov	r3, fp
 80173c0:	4622      	mov	r2, r4
 80173c2:	4629      	mov	r1, r5
 80173c4:	4638      	mov	r0, r7
 80173c6:	f7ff ff6c 	bl	80172a2 <__ssputs_r>
 80173ca:	3001      	adds	r0, #1
 80173cc:	f000 80a7 	beq.w	801751e <_svfiprintf_r+0x1c6>
 80173d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80173d2:	445a      	add	r2, fp
 80173d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80173d6:	f89a 3000 	ldrb.w	r3, [sl]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	f000 809f 	beq.w	801751e <_svfiprintf_r+0x1c6>
 80173e0:	2300      	movs	r3, #0
 80173e2:	f04f 32ff 	mov.w	r2, #4294967295
 80173e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173ea:	f10a 0a01 	add.w	sl, sl, #1
 80173ee:	9304      	str	r3, [sp, #16]
 80173f0:	9307      	str	r3, [sp, #28]
 80173f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80173f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80173f8:	4654      	mov	r4, sl
 80173fa:	2205      	movs	r2, #5
 80173fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017400:	484e      	ldr	r0, [pc, #312]	@ (801753c <_svfiprintf_r+0x1e4>)
 8017402:	f7fe f882 	bl	801550a <memchr>
 8017406:	9a04      	ldr	r2, [sp, #16]
 8017408:	b9d8      	cbnz	r0, 8017442 <_svfiprintf_r+0xea>
 801740a:	06d0      	lsls	r0, r2, #27
 801740c:	bf44      	itt	mi
 801740e:	2320      	movmi	r3, #32
 8017410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017414:	0711      	lsls	r1, r2, #28
 8017416:	bf44      	itt	mi
 8017418:	232b      	movmi	r3, #43	@ 0x2b
 801741a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801741e:	f89a 3000 	ldrb.w	r3, [sl]
 8017422:	2b2a      	cmp	r3, #42	@ 0x2a
 8017424:	d015      	beq.n	8017452 <_svfiprintf_r+0xfa>
 8017426:	4654      	mov	r4, sl
 8017428:	2000      	movs	r0, #0
 801742a:	f04f 0c0a 	mov.w	ip, #10
 801742e:	9a07      	ldr	r2, [sp, #28]
 8017430:	4621      	mov	r1, r4
 8017432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017436:	3b30      	subs	r3, #48	@ 0x30
 8017438:	2b09      	cmp	r3, #9
 801743a:	d94b      	bls.n	80174d4 <_svfiprintf_r+0x17c>
 801743c:	b1b0      	cbz	r0, 801746c <_svfiprintf_r+0x114>
 801743e:	9207      	str	r2, [sp, #28]
 8017440:	e014      	b.n	801746c <_svfiprintf_r+0x114>
 8017442:	eba0 0308 	sub.w	r3, r0, r8
 8017446:	fa09 f303 	lsl.w	r3, r9, r3
 801744a:	4313      	orrs	r3, r2
 801744c:	46a2      	mov	sl, r4
 801744e:	9304      	str	r3, [sp, #16]
 8017450:	e7d2      	b.n	80173f8 <_svfiprintf_r+0xa0>
 8017452:	9b03      	ldr	r3, [sp, #12]
 8017454:	1d19      	adds	r1, r3, #4
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	9103      	str	r1, [sp, #12]
 801745a:	2b00      	cmp	r3, #0
 801745c:	bfbb      	ittet	lt
 801745e:	425b      	neglt	r3, r3
 8017460:	f042 0202 	orrlt.w	r2, r2, #2
 8017464:	9307      	strge	r3, [sp, #28]
 8017466:	9307      	strlt	r3, [sp, #28]
 8017468:	bfb8      	it	lt
 801746a:	9204      	strlt	r2, [sp, #16]
 801746c:	7823      	ldrb	r3, [r4, #0]
 801746e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017470:	d10a      	bne.n	8017488 <_svfiprintf_r+0x130>
 8017472:	7863      	ldrb	r3, [r4, #1]
 8017474:	2b2a      	cmp	r3, #42	@ 0x2a
 8017476:	d132      	bne.n	80174de <_svfiprintf_r+0x186>
 8017478:	9b03      	ldr	r3, [sp, #12]
 801747a:	3402      	adds	r4, #2
 801747c:	1d1a      	adds	r2, r3, #4
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	9203      	str	r2, [sp, #12]
 8017482:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017486:	9305      	str	r3, [sp, #20]
 8017488:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8017540 <_svfiprintf_r+0x1e8>
 801748c:	2203      	movs	r2, #3
 801748e:	4650      	mov	r0, sl
 8017490:	7821      	ldrb	r1, [r4, #0]
 8017492:	f7fe f83a 	bl	801550a <memchr>
 8017496:	b138      	cbz	r0, 80174a8 <_svfiprintf_r+0x150>
 8017498:	2240      	movs	r2, #64	@ 0x40
 801749a:	9b04      	ldr	r3, [sp, #16]
 801749c:	eba0 000a 	sub.w	r0, r0, sl
 80174a0:	4082      	lsls	r2, r0
 80174a2:	4313      	orrs	r3, r2
 80174a4:	3401      	adds	r4, #1
 80174a6:	9304      	str	r3, [sp, #16]
 80174a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174ac:	2206      	movs	r2, #6
 80174ae:	4825      	ldr	r0, [pc, #148]	@ (8017544 <_svfiprintf_r+0x1ec>)
 80174b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80174b4:	f7fe f829 	bl	801550a <memchr>
 80174b8:	2800      	cmp	r0, #0
 80174ba:	d036      	beq.n	801752a <_svfiprintf_r+0x1d2>
 80174bc:	4b22      	ldr	r3, [pc, #136]	@ (8017548 <_svfiprintf_r+0x1f0>)
 80174be:	bb1b      	cbnz	r3, 8017508 <_svfiprintf_r+0x1b0>
 80174c0:	9b03      	ldr	r3, [sp, #12]
 80174c2:	3307      	adds	r3, #7
 80174c4:	f023 0307 	bic.w	r3, r3, #7
 80174c8:	3308      	adds	r3, #8
 80174ca:	9303      	str	r3, [sp, #12]
 80174cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174ce:	4433      	add	r3, r6
 80174d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80174d2:	e76a      	b.n	80173aa <_svfiprintf_r+0x52>
 80174d4:	460c      	mov	r4, r1
 80174d6:	2001      	movs	r0, #1
 80174d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80174dc:	e7a8      	b.n	8017430 <_svfiprintf_r+0xd8>
 80174de:	2300      	movs	r3, #0
 80174e0:	f04f 0c0a 	mov.w	ip, #10
 80174e4:	4619      	mov	r1, r3
 80174e6:	3401      	adds	r4, #1
 80174e8:	9305      	str	r3, [sp, #20]
 80174ea:	4620      	mov	r0, r4
 80174ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174f0:	3a30      	subs	r2, #48	@ 0x30
 80174f2:	2a09      	cmp	r2, #9
 80174f4:	d903      	bls.n	80174fe <_svfiprintf_r+0x1a6>
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d0c6      	beq.n	8017488 <_svfiprintf_r+0x130>
 80174fa:	9105      	str	r1, [sp, #20]
 80174fc:	e7c4      	b.n	8017488 <_svfiprintf_r+0x130>
 80174fe:	4604      	mov	r4, r0
 8017500:	2301      	movs	r3, #1
 8017502:	fb0c 2101 	mla	r1, ip, r1, r2
 8017506:	e7f0      	b.n	80174ea <_svfiprintf_r+0x192>
 8017508:	ab03      	add	r3, sp, #12
 801750a:	9300      	str	r3, [sp, #0]
 801750c:	462a      	mov	r2, r5
 801750e:	4638      	mov	r0, r7
 8017510:	4b0e      	ldr	r3, [pc, #56]	@ (801754c <_svfiprintf_r+0x1f4>)
 8017512:	a904      	add	r1, sp, #16
 8017514:	f7fc fe46 	bl	80141a4 <_printf_float>
 8017518:	1c42      	adds	r2, r0, #1
 801751a:	4606      	mov	r6, r0
 801751c:	d1d6      	bne.n	80174cc <_svfiprintf_r+0x174>
 801751e:	89ab      	ldrh	r3, [r5, #12]
 8017520:	065b      	lsls	r3, r3, #25
 8017522:	f53f af2d 	bmi.w	8017380 <_svfiprintf_r+0x28>
 8017526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017528:	e72c      	b.n	8017384 <_svfiprintf_r+0x2c>
 801752a:	ab03      	add	r3, sp, #12
 801752c:	9300      	str	r3, [sp, #0]
 801752e:	462a      	mov	r2, r5
 8017530:	4638      	mov	r0, r7
 8017532:	4b06      	ldr	r3, [pc, #24]	@ (801754c <_svfiprintf_r+0x1f4>)
 8017534:	a904      	add	r1, sp, #16
 8017536:	f7fd f8d3 	bl	80146e0 <_printf_i>
 801753a:	e7ed      	b.n	8017518 <_svfiprintf_r+0x1c0>
 801753c:	08019566 	.word	0x08019566
 8017540:	0801956c 	.word	0x0801956c
 8017544:	08019570 	.word	0x08019570
 8017548:	080141a5 	.word	0x080141a5
 801754c:	080172a3 	.word	0x080172a3

08017550 <_sungetc_r>:
 8017550:	b538      	push	{r3, r4, r5, lr}
 8017552:	1c4b      	adds	r3, r1, #1
 8017554:	4614      	mov	r4, r2
 8017556:	d103      	bne.n	8017560 <_sungetc_r+0x10>
 8017558:	f04f 35ff 	mov.w	r5, #4294967295
 801755c:	4628      	mov	r0, r5
 801755e:	bd38      	pop	{r3, r4, r5, pc}
 8017560:	8993      	ldrh	r3, [r2, #12]
 8017562:	b2cd      	uxtb	r5, r1
 8017564:	f023 0320 	bic.w	r3, r3, #32
 8017568:	8193      	strh	r3, [r2, #12]
 801756a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801756c:	6852      	ldr	r2, [r2, #4]
 801756e:	b18b      	cbz	r3, 8017594 <_sungetc_r+0x44>
 8017570:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017572:	4293      	cmp	r3, r2
 8017574:	dd08      	ble.n	8017588 <_sungetc_r+0x38>
 8017576:	6823      	ldr	r3, [r4, #0]
 8017578:	1e5a      	subs	r2, r3, #1
 801757a:	6022      	str	r2, [r4, #0]
 801757c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017580:	6863      	ldr	r3, [r4, #4]
 8017582:	3301      	adds	r3, #1
 8017584:	6063      	str	r3, [r4, #4]
 8017586:	e7e9      	b.n	801755c <_sungetc_r+0xc>
 8017588:	4621      	mov	r1, r4
 801758a:	f000 fd7d 	bl	8018088 <__submore>
 801758e:	2800      	cmp	r0, #0
 8017590:	d0f1      	beq.n	8017576 <_sungetc_r+0x26>
 8017592:	e7e1      	b.n	8017558 <_sungetc_r+0x8>
 8017594:	6921      	ldr	r1, [r4, #16]
 8017596:	6823      	ldr	r3, [r4, #0]
 8017598:	b151      	cbz	r1, 80175b0 <_sungetc_r+0x60>
 801759a:	4299      	cmp	r1, r3
 801759c:	d208      	bcs.n	80175b0 <_sungetc_r+0x60>
 801759e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80175a2:	42a9      	cmp	r1, r5
 80175a4:	d104      	bne.n	80175b0 <_sungetc_r+0x60>
 80175a6:	3b01      	subs	r3, #1
 80175a8:	3201      	adds	r2, #1
 80175aa:	6023      	str	r3, [r4, #0]
 80175ac:	6062      	str	r2, [r4, #4]
 80175ae:	e7d5      	b.n	801755c <_sungetc_r+0xc>
 80175b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80175b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80175b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80175ba:	2303      	movs	r3, #3
 80175bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80175be:	4623      	mov	r3, r4
 80175c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80175c4:	6023      	str	r3, [r4, #0]
 80175c6:	2301      	movs	r3, #1
 80175c8:	e7dc      	b.n	8017584 <_sungetc_r+0x34>

080175ca <__ssrefill_r>:
 80175ca:	b510      	push	{r4, lr}
 80175cc:	460c      	mov	r4, r1
 80175ce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80175d0:	b169      	cbz	r1, 80175ee <__ssrefill_r+0x24>
 80175d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80175d6:	4299      	cmp	r1, r3
 80175d8:	d001      	beq.n	80175de <__ssrefill_r+0x14>
 80175da:	f7fe fe21 	bl	8016220 <_free_r>
 80175de:	2000      	movs	r0, #0
 80175e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80175e2:	6360      	str	r0, [r4, #52]	@ 0x34
 80175e4:	6063      	str	r3, [r4, #4]
 80175e6:	b113      	cbz	r3, 80175ee <__ssrefill_r+0x24>
 80175e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80175ea:	6023      	str	r3, [r4, #0]
 80175ec:	bd10      	pop	{r4, pc}
 80175ee:	6923      	ldr	r3, [r4, #16]
 80175f0:	f04f 30ff 	mov.w	r0, #4294967295
 80175f4:	6023      	str	r3, [r4, #0]
 80175f6:	2300      	movs	r3, #0
 80175f8:	6063      	str	r3, [r4, #4]
 80175fa:	89a3      	ldrh	r3, [r4, #12]
 80175fc:	f043 0320 	orr.w	r3, r3, #32
 8017600:	81a3      	strh	r3, [r4, #12]
 8017602:	e7f3      	b.n	80175ec <__ssrefill_r+0x22>

08017604 <__ssvfiscanf_r>:
 8017604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017608:	460c      	mov	r4, r1
 801760a:	2100      	movs	r1, #0
 801760c:	4606      	mov	r6, r0
 801760e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8017612:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017616:	49ab      	ldr	r1, [pc, #684]	@ (80178c4 <__ssvfiscanf_r+0x2c0>)
 8017618:	f10d 0804 	add.w	r8, sp, #4
 801761c:	91a0      	str	r1, [sp, #640]	@ 0x280
 801761e:	49aa      	ldr	r1, [pc, #680]	@ (80178c8 <__ssvfiscanf_r+0x2c4>)
 8017620:	4faa      	ldr	r7, [pc, #680]	@ (80178cc <__ssvfiscanf_r+0x2c8>)
 8017622:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017626:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017628:	9300      	str	r3, [sp, #0]
 801762a:	f892 9000 	ldrb.w	r9, [r2]
 801762e:	f1b9 0f00 	cmp.w	r9, #0
 8017632:	f000 8159 	beq.w	80178e8 <__ssvfiscanf_r+0x2e4>
 8017636:	f817 3009 	ldrb.w	r3, [r7, r9]
 801763a:	1c55      	adds	r5, r2, #1
 801763c:	f013 0308 	ands.w	r3, r3, #8
 8017640:	d019      	beq.n	8017676 <__ssvfiscanf_r+0x72>
 8017642:	6863      	ldr	r3, [r4, #4]
 8017644:	2b00      	cmp	r3, #0
 8017646:	dd0f      	ble.n	8017668 <__ssvfiscanf_r+0x64>
 8017648:	6823      	ldr	r3, [r4, #0]
 801764a:	781a      	ldrb	r2, [r3, #0]
 801764c:	5cba      	ldrb	r2, [r7, r2]
 801764e:	0712      	lsls	r2, r2, #28
 8017650:	d401      	bmi.n	8017656 <__ssvfiscanf_r+0x52>
 8017652:	462a      	mov	r2, r5
 8017654:	e7e9      	b.n	801762a <__ssvfiscanf_r+0x26>
 8017656:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017658:	3301      	adds	r3, #1
 801765a:	3201      	adds	r2, #1
 801765c:	9245      	str	r2, [sp, #276]	@ 0x114
 801765e:	6862      	ldr	r2, [r4, #4]
 8017660:	6023      	str	r3, [r4, #0]
 8017662:	3a01      	subs	r2, #1
 8017664:	6062      	str	r2, [r4, #4]
 8017666:	e7ec      	b.n	8017642 <__ssvfiscanf_r+0x3e>
 8017668:	4621      	mov	r1, r4
 801766a:	4630      	mov	r0, r6
 801766c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801766e:	4798      	blx	r3
 8017670:	2800      	cmp	r0, #0
 8017672:	d0e9      	beq.n	8017648 <__ssvfiscanf_r+0x44>
 8017674:	e7ed      	b.n	8017652 <__ssvfiscanf_r+0x4e>
 8017676:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801767a:	f040 8086 	bne.w	801778a <__ssvfiscanf_r+0x186>
 801767e:	9341      	str	r3, [sp, #260]	@ 0x104
 8017680:	9343      	str	r3, [sp, #268]	@ 0x10c
 8017682:	7853      	ldrb	r3, [r2, #1]
 8017684:	2b2a      	cmp	r3, #42	@ 0x2a
 8017686:	bf04      	itt	eq
 8017688:	2310      	moveq	r3, #16
 801768a:	1c95      	addeq	r5, r2, #2
 801768c:	f04f 020a 	mov.w	r2, #10
 8017690:	bf08      	it	eq
 8017692:	9341      	streq	r3, [sp, #260]	@ 0x104
 8017694:	46aa      	mov	sl, r5
 8017696:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801769a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801769e:	2b09      	cmp	r3, #9
 80176a0:	d91e      	bls.n	80176e0 <__ssvfiscanf_r+0xdc>
 80176a2:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 80178d0 <__ssvfiscanf_r+0x2cc>
 80176a6:	2203      	movs	r2, #3
 80176a8:	4658      	mov	r0, fp
 80176aa:	f7fd ff2e 	bl	801550a <memchr>
 80176ae:	b138      	cbz	r0, 80176c0 <__ssvfiscanf_r+0xbc>
 80176b0:	2301      	movs	r3, #1
 80176b2:	4655      	mov	r5, sl
 80176b4:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80176b6:	eba0 000b 	sub.w	r0, r0, fp
 80176ba:	4083      	lsls	r3, r0
 80176bc:	4313      	orrs	r3, r2
 80176be:	9341      	str	r3, [sp, #260]	@ 0x104
 80176c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80176c4:	2b78      	cmp	r3, #120	@ 0x78
 80176c6:	d806      	bhi.n	80176d6 <__ssvfiscanf_r+0xd2>
 80176c8:	2b57      	cmp	r3, #87	@ 0x57
 80176ca:	d810      	bhi.n	80176ee <__ssvfiscanf_r+0xea>
 80176cc:	2b25      	cmp	r3, #37	@ 0x25
 80176ce:	d05c      	beq.n	801778a <__ssvfiscanf_r+0x186>
 80176d0:	d856      	bhi.n	8017780 <__ssvfiscanf_r+0x17c>
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d074      	beq.n	80177c0 <__ssvfiscanf_r+0x1bc>
 80176d6:	2303      	movs	r3, #3
 80176d8:	9347      	str	r3, [sp, #284]	@ 0x11c
 80176da:	230a      	movs	r3, #10
 80176dc:	9342      	str	r3, [sp, #264]	@ 0x108
 80176de:	e087      	b.n	80177f0 <__ssvfiscanf_r+0x1ec>
 80176e0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80176e2:	4655      	mov	r5, sl
 80176e4:	fb02 1103 	mla	r1, r2, r3, r1
 80176e8:	3930      	subs	r1, #48	@ 0x30
 80176ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 80176ec:	e7d2      	b.n	8017694 <__ssvfiscanf_r+0x90>
 80176ee:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80176f2:	2a20      	cmp	r2, #32
 80176f4:	d8ef      	bhi.n	80176d6 <__ssvfiscanf_r+0xd2>
 80176f6:	a101      	add	r1, pc, #4	@ (adr r1, 80176fc <__ssvfiscanf_r+0xf8>)
 80176f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80176fc:	080177cf 	.word	0x080177cf
 8017700:	080176d7 	.word	0x080176d7
 8017704:	080176d7 	.word	0x080176d7
 8017708:	08017829 	.word	0x08017829
 801770c:	080176d7 	.word	0x080176d7
 8017710:	080176d7 	.word	0x080176d7
 8017714:	080176d7 	.word	0x080176d7
 8017718:	080176d7 	.word	0x080176d7
 801771c:	080176d7 	.word	0x080176d7
 8017720:	080176d7 	.word	0x080176d7
 8017724:	080176d7 	.word	0x080176d7
 8017728:	0801783f 	.word	0x0801783f
 801772c:	08017825 	.word	0x08017825
 8017730:	08017787 	.word	0x08017787
 8017734:	08017787 	.word	0x08017787
 8017738:	08017787 	.word	0x08017787
 801773c:	080176d7 	.word	0x080176d7
 8017740:	080177e1 	.word	0x080177e1
 8017744:	080176d7 	.word	0x080176d7
 8017748:	080176d7 	.word	0x080176d7
 801774c:	080176d7 	.word	0x080176d7
 8017750:	080176d7 	.word	0x080176d7
 8017754:	0801784f 	.word	0x0801784f
 8017758:	080177e9 	.word	0x080177e9
 801775c:	080177c7 	.word	0x080177c7
 8017760:	080176d7 	.word	0x080176d7
 8017764:	080176d7 	.word	0x080176d7
 8017768:	0801784b 	.word	0x0801784b
 801776c:	080176d7 	.word	0x080176d7
 8017770:	08017825 	.word	0x08017825
 8017774:	080176d7 	.word	0x080176d7
 8017778:	080176d7 	.word	0x080176d7
 801777c:	080177cf 	.word	0x080177cf
 8017780:	3b45      	subs	r3, #69	@ 0x45
 8017782:	2b02      	cmp	r3, #2
 8017784:	d8a7      	bhi.n	80176d6 <__ssvfiscanf_r+0xd2>
 8017786:	2305      	movs	r3, #5
 8017788:	e031      	b.n	80177ee <__ssvfiscanf_r+0x1ea>
 801778a:	6863      	ldr	r3, [r4, #4]
 801778c:	2b00      	cmp	r3, #0
 801778e:	dd0d      	ble.n	80177ac <__ssvfiscanf_r+0x1a8>
 8017790:	6823      	ldr	r3, [r4, #0]
 8017792:	781a      	ldrb	r2, [r3, #0]
 8017794:	454a      	cmp	r2, r9
 8017796:	f040 80a7 	bne.w	80178e8 <__ssvfiscanf_r+0x2e4>
 801779a:	3301      	adds	r3, #1
 801779c:	6862      	ldr	r2, [r4, #4]
 801779e:	6023      	str	r3, [r4, #0]
 80177a0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80177a2:	3a01      	subs	r2, #1
 80177a4:	3301      	adds	r3, #1
 80177a6:	6062      	str	r2, [r4, #4]
 80177a8:	9345      	str	r3, [sp, #276]	@ 0x114
 80177aa:	e752      	b.n	8017652 <__ssvfiscanf_r+0x4e>
 80177ac:	4621      	mov	r1, r4
 80177ae:	4630      	mov	r0, r6
 80177b0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80177b2:	4798      	blx	r3
 80177b4:	2800      	cmp	r0, #0
 80177b6:	d0eb      	beq.n	8017790 <__ssvfiscanf_r+0x18c>
 80177b8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80177ba:	2800      	cmp	r0, #0
 80177bc:	f040 808c 	bne.w	80178d8 <__ssvfiscanf_r+0x2d4>
 80177c0:	f04f 30ff 	mov.w	r0, #4294967295
 80177c4:	e08c      	b.n	80178e0 <__ssvfiscanf_r+0x2dc>
 80177c6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80177c8:	f042 0220 	orr.w	r2, r2, #32
 80177cc:	9241      	str	r2, [sp, #260]	@ 0x104
 80177ce:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80177d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80177d4:	9241      	str	r2, [sp, #260]	@ 0x104
 80177d6:	2210      	movs	r2, #16
 80177d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80177da:	9242      	str	r2, [sp, #264]	@ 0x108
 80177dc:	d902      	bls.n	80177e4 <__ssvfiscanf_r+0x1e0>
 80177de:	e005      	b.n	80177ec <__ssvfiscanf_r+0x1e8>
 80177e0:	2300      	movs	r3, #0
 80177e2:	9342      	str	r3, [sp, #264]	@ 0x108
 80177e4:	2303      	movs	r3, #3
 80177e6:	e002      	b.n	80177ee <__ssvfiscanf_r+0x1ea>
 80177e8:	2308      	movs	r3, #8
 80177ea:	9342      	str	r3, [sp, #264]	@ 0x108
 80177ec:	2304      	movs	r3, #4
 80177ee:	9347      	str	r3, [sp, #284]	@ 0x11c
 80177f0:	6863      	ldr	r3, [r4, #4]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	dd39      	ble.n	801786a <__ssvfiscanf_r+0x266>
 80177f6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80177f8:	0659      	lsls	r1, r3, #25
 80177fa:	d404      	bmi.n	8017806 <__ssvfiscanf_r+0x202>
 80177fc:	6823      	ldr	r3, [r4, #0]
 80177fe:	781a      	ldrb	r2, [r3, #0]
 8017800:	5cba      	ldrb	r2, [r7, r2]
 8017802:	0712      	lsls	r2, r2, #28
 8017804:	d438      	bmi.n	8017878 <__ssvfiscanf_r+0x274>
 8017806:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8017808:	2b02      	cmp	r3, #2
 801780a:	dc47      	bgt.n	801789c <__ssvfiscanf_r+0x298>
 801780c:	466b      	mov	r3, sp
 801780e:	4622      	mov	r2, r4
 8017810:	4630      	mov	r0, r6
 8017812:	a941      	add	r1, sp, #260	@ 0x104
 8017814:	f000 f9aa 	bl	8017b6c <_scanf_chars>
 8017818:	2801      	cmp	r0, #1
 801781a:	d065      	beq.n	80178e8 <__ssvfiscanf_r+0x2e4>
 801781c:	2802      	cmp	r0, #2
 801781e:	f47f af18 	bne.w	8017652 <__ssvfiscanf_r+0x4e>
 8017822:	e7c9      	b.n	80177b8 <__ssvfiscanf_r+0x1b4>
 8017824:	220a      	movs	r2, #10
 8017826:	e7d7      	b.n	80177d8 <__ssvfiscanf_r+0x1d4>
 8017828:	4629      	mov	r1, r5
 801782a:	4640      	mov	r0, r8
 801782c:	f000 fbf3 	bl	8018016 <__sccl>
 8017830:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017832:	4605      	mov	r5, r0
 8017834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017838:	9341      	str	r3, [sp, #260]	@ 0x104
 801783a:	2301      	movs	r3, #1
 801783c:	e7d7      	b.n	80177ee <__ssvfiscanf_r+0x1ea>
 801783e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017844:	9341      	str	r3, [sp, #260]	@ 0x104
 8017846:	2300      	movs	r3, #0
 8017848:	e7d1      	b.n	80177ee <__ssvfiscanf_r+0x1ea>
 801784a:	2302      	movs	r3, #2
 801784c:	e7cf      	b.n	80177ee <__ssvfiscanf_r+0x1ea>
 801784e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8017850:	06c3      	lsls	r3, r0, #27
 8017852:	f53f aefe 	bmi.w	8017652 <__ssvfiscanf_r+0x4e>
 8017856:	9b00      	ldr	r3, [sp, #0]
 8017858:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801785a:	1d19      	adds	r1, r3, #4
 801785c:	9100      	str	r1, [sp, #0]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	07c0      	lsls	r0, r0, #31
 8017862:	bf4c      	ite	mi
 8017864:	801a      	strhmi	r2, [r3, #0]
 8017866:	601a      	strpl	r2, [r3, #0]
 8017868:	e6f3      	b.n	8017652 <__ssvfiscanf_r+0x4e>
 801786a:	4621      	mov	r1, r4
 801786c:	4630      	mov	r0, r6
 801786e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017870:	4798      	blx	r3
 8017872:	2800      	cmp	r0, #0
 8017874:	d0bf      	beq.n	80177f6 <__ssvfiscanf_r+0x1f2>
 8017876:	e79f      	b.n	80177b8 <__ssvfiscanf_r+0x1b4>
 8017878:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801787a:	3201      	adds	r2, #1
 801787c:	9245      	str	r2, [sp, #276]	@ 0x114
 801787e:	6862      	ldr	r2, [r4, #4]
 8017880:	3a01      	subs	r2, #1
 8017882:	2a00      	cmp	r2, #0
 8017884:	6062      	str	r2, [r4, #4]
 8017886:	dd02      	ble.n	801788e <__ssvfiscanf_r+0x28a>
 8017888:	3301      	adds	r3, #1
 801788a:	6023      	str	r3, [r4, #0]
 801788c:	e7b6      	b.n	80177fc <__ssvfiscanf_r+0x1f8>
 801788e:	4621      	mov	r1, r4
 8017890:	4630      	mov	r0, r6
 8017892:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017894:	4798      	blx	r3
 8017896:	2800      	cmp	r0, #0
 8017898:	d0b0      	beq.n	80177fc <__ssvfiscanf_r+0x1f8>
 801789a:	e78d      	b.n	80177b8 <__ssvfiscanf_r+0x1b4>
 801789c:	2b04      	cmp	r3, #4
 801789e:	dc06      	bgt.n	80178ae <__ssvfiscanf_r+0x2aa>
 80178a0:	466b      	mov	r3, sp
 80178a2:	4622      	mov	r2, r4
 80178a4:	4630      	mov	r0, r6
 80178a6:	a941      	add	r1, sp, #260	@ 0x104
 80178a8:	f000 f9ba 	bl	8017c20 <_scanf_i>
 80178ac:	e7b4      	b.n	8017818 <__ssvfiscanf_r+0x214>
 80178ae:	4b09      	ldr	r3, [pc, #36]	@ (80178d4 <__ssvfiscanf_r+0x2d0>)
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	f43f aece 	beq.w	8017652 <__ssvfiscanf_r+0x4e>
 80178b6:	466b      	mov	r3, sp
 80178b8:	4622      	mov	r2, r4
 80178ba:	4630      	mov	r0, r6
 80178bc:	a941      	add	r1, sp, #260	@ 0x104
 80178be:	f7fd f82d 	bl	801491c <_scanf_float>
 80178c2:	e7a9      	b.n	8017818 <__ssvfiscanf_r+0x214>
 80178c4:	08017551 	.word	0x08017551
 80178c8:	080175cb 	.word	0x080175cb
 80178cc:	080195e9 	.word	0x080195e9
 80178d0:	0801956c 	.word	0x0801956c
 80178d4:	0801491d 	.word	0x0801491d
 80178d8:	89a3      	ldrh	r3, [r4, #12]
 80178da:	065b      	lsls	r3, r3, #25
 80178dc:	f53f af70 	bmi.w	80177c0 <__ssvfiscanf_r+0x1bc>
 80178e0:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80178e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80178ea:	e7f9      	b.n	80178e0 <__ssvfiscanf_r+0x2dc>

080178ec <__sfputc_r>:
 80178ec:	6893      	ldr	r3, [r2, #8]
 80178ee:	b410      	push	{r4}
 80178f0:	3b01      	subs	r3, #1
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	6093      	str	r3, [r2, #8]
 80178f6:	da07      	bge.n	8017908 <__sfputc_r+0x1c>
 80178f8:	6994      	ldr	r4, [r2, #24]
 80178fa:	42a3      	cmp	r3, r4
 80178fc:	db01      	blt.n	8017902 <__sfputc_r+0x16>
 80178fe:	290a      	cmp	r1, #10
 8017900:	d102      	bne.n	8017908 <__sfputc_r+0x1c>
 8017902:	bc10      	pop	{r4}
 8017904:	f7fd bc21 	b.w	801514a <__swbuf_r>
 8017908:	6813      	ldr	r3, [r2, #0]
 801790a:	1c58      	adds	r0, r3, #1
 801790c:	6010      	str	r0, [r2, #0]
 801790e:	7019      	strb	r1, [r3, #0]
 8017910:	4608      	mov	r0, r1
 8017912:	bc10      	pop	{r4}
 8017914:	4770      	bx	lr

08017916 <__sfputs_r>:
 8017916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017918:	4606      	mov	r6, r0
 801791a:	460f      	mov	r7, r1
 801791c:	4614      	mov	r4, r2
 801791e:	18d5      	adds	r5, r2, r3
 8017920:	42ac      	cmp	r4, r5
 8017922:	d101      	bne.n	8017928 <__sfputs_r+0x12>
 8017924:	2000      	movs	r0, #0
 8017926:	e007      	b.n	8017938 <__sfputs_r+0x22>
 8017928:	463a      	mov	r2, r7
 801792a:	4630      	mov	r0, r6
 801792c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017930:	f7ff ffdc 	bl	80178ec <__sfputc_r>
 8017934:	1c43      	adds	r3, r0, #1
 8017936:	d1f3      	bne.n	8017920 <__sfputs_r+0xa>
 8017938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801793c <_vfiprintf_r>:
 801793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017940:	460d      	mov	r5, r1
 8017942:	4614      	mov	r4, r2
 8017944:	4698      	mov	r8, r3
 8017946:	4606      	mov	r6, r0
 8017948:	b09d      	sub	sp, #116	@ 0x74
 801794a:	b118      	cbz	r0, 8017954 <_vfiprintf_r+0x18>
 801794c:	6a03      	ldr	r3, [r0, #32]
 801794e:	b90b      	cbnz	r3, 8017954 <_vfiprintf_r+0x18>
 8017950:	f7fd fa7a 	bl	8014e48 <__sinit>
 8017954:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017956:	07d9      	lsls	r1, r3, #31
 8017958:	d405      	bmi.n	8017966 <_vfiprintf_r+0x2a>
 801795a:	89ab      	ldrh	r3, [r5, #12]
 801795c:	059a      	lsls	r2, r3, #22
 801795e:	d402      	bmi.n	8017966 <_vfiprintf_r+0x2a>
 8017960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017962:	f7fd fdc8 	bl	80154f6 <__retarget_lock_acquire_recursive>
 8017966:	89ab      	ldrh	r3, [r5, #12]
 8017968:	071b      	lsls	r3, r3, #28
 801796a:	d501      	bpl.n	8017970 <_vfiprintf_r+0x34>
 801796c:	692b      	ldr	r3, [r5, #16]
 801796e:	b99b      	cbnz	r3, 8017998 <_vfiprintf_r+0x5c>
 8017970:	4629      	mov	r1, r5
 8017972:	4630      	mov	r0, r6
 8017974:	f7fd fc28 	bl	80151c8 <__swsetup_r>
 8017978:	b170      	cbz	r0, 8017998 <_vfiprintf_r+0x5c>
 801797a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801797c:	07dc      	lsls	r4, r3, #31
 801797e:	d504      	bpl.n	801798a <_vfiprintf_r+0x4e>
 8017980:	f04f 30ff 	mov.w	r0, #4294967295
 8017984:	b01d      	add	sp, #116	@ 0x74
 8017986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801798a:	89ab      	ldrh	r3, [r5, #12]
 801798c:	0598      	lsls	r0, r3, #22
 801798e:	d4f7      	bmi.n	8017980 <_vfiprintf_r+0x44>
 8017990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017992:	f7fd fdb1 	bl	80154f8 <__retarget_lock_release_recursive>
 8017996:	e7f3      	b.n	8017980 <_vfiprintf_r+0x44>
 8017998:	2300      	movs	r3, #0
 801799a:	9309      	str	r3, [sp, #36]	@ 0x24
 801799c:	2320      	movs	r3, #32
 801799e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80179a2:	2330      	movs	r3, #48	@ 0x30
 80179a4:	f04f 0901 	mov.w	r9, #1
 80179a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80179ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8017b58 <_vfiprintf_r+0x21c>
 80179b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80179b4:	4623      	mov	r3, r4
 80179b6:	469a      	mov	sl, r3
 80179b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179bc:	b10a      	cbz	r2, 80179c2 <_vfiprintf_r+0x86>
 80179be:	2a25      	cmp	r2, #37	@ 0x25
 80179c0:	d1f9      	bne.n	80179b6 <_vfiprintf_r+0x7a>
 80179c2:	ebba 0b04 	subs.w	fp, sl, r4
 80179c6:	d00b      	beq.n	80179e0 <_vfiprintf_r+0xa4>
 80179c8:	465b      	mov	r3, fp
 80179ca:	4622      	mov	r2, r4
 80179cc:	4629      	mov	r1, r5
 80179ce:	4630      	mov	r0, r6
 80179d0:	f7ff ffa1 	bl	8017916 <__sfputs_r>
 80179d4:	3001      	adds	r0, #1
 80179d6:	f000 80a7 	beq.w	8017b28 <_vfiprintf_r+0x1ec>
 80179da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80179dc:	445a      	add	r2, fp
 80179de:	9209      	str	r2, [sp, #36]	@ 0x24
 80179e0:	f89a 3000 	ldrb.w	r3, [sl]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	f000 809f 	beq.w	8017b28 <_vfiprintf_r+0x1ec>
 80179ea:	2300      	movs	r3, #0
 80179ec:	f04f 32ff 	mov.w	r2, #4294967295
 80179f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80179f4:	f10a 0a01 	add.w	sl, sl, #1
 80179f8:	9304      	str	r3, [sp, #16]
 80179fa:	9307      	str	r3, [sp, #28]
 80179fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017a00:	931a      	str	r3, [sp, #104]	@ 0x68
 8017a02:	4654      	mov	r4, sl
 8017a04:	2205      	movs	r2, #5
 8017a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a0a:	4853      	ldr	r0, [pc, #332]	@ (8017b58 <_vfiprintf_r+0x21c>)
 8017a0c:	f7fd fd7d 	bl	801550a <memchr>
 8017a10:	9a04      	ldr	r2, [sp, #16]
 8017a12:	b9d8      	cbnz	r0, 8017a4c <_vfiprintf_r+0x110>
 8017a14:	06d1      	lsls	r1, r2, #27
 8017a16:	bf44      	itt	mi
 8017a18:	2320      	movmi	r3, #32
 8017a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017a1e:	0713      	lsls	r3, r2, #28
 8017a20:	bf44      	itt	mi
 8017a22:	232b      	movmi	r3, #43	@ 0x2b
 8017a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017a28:	f89a 3000 	ldrb.w	r3, [sl]
 8017a2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017a2e:	d015      	beq.n	8017a5c <_vfiprintf_r+0x120>
 8017a30:	4654      	mov	r4, sl
 8017a32:	2000      	movs	r0, #0
 8017a34:	f04f 0c0a 	mov.w	ip, #10
 8017a38:	9a07      	ldr	r2, [sp, #28]
 8017a3a:	4621      	mov	r1, r4
 8017a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a40:	3b30      	subs	r3, #48	@ 0x30
 8017a42:	2b09      	cmp	r3, #9
 8017a44:	d94b      	bls.n	8017ade <_vfiprintf_r+0x1a2>
 8017a46:	b1b0      	cbz	r0, 8017a76 <_vfiprintf_r+0x13a>
 8017a48:	9207      	str	r2, [sp, #28]
 8017a4a:	e014      	b.n	8017a76 <_vfiprintf_r+0x13a>
 8017a4c:	eba0 0308 	sub.w	r3, r0, r8
 8017a50:	fa09 f303 	lsl.w	r3, r9, r3
 8017a54:	4313      	orrs	r3, r2
 8017a56:	46a2      	mov	sl, r4
 8017a58:	9304      	str	r3, [sp, #16]
 8017a5a:	e7d2      	b.n	8017a02 <_vfiprintf_r+0xc6>
 8017a5c:	9b03      	ldr	r3, [sp, #12]
 8017a5e:	1d19      	adds	r1, r3, #4
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	9103      	str	r1, [sp, #12]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	bfbb      	ittet	lt
 8017a68:	425b      	neglt	r3, r3
 8017a6a:	f042 0202 	orrlt.w	r2, r2, #2
 8017a6e:	9307      	strge	r3, [sp, #28]
 8017a70:	9307      	strlt	r3, [sp, #28]
 8017a72:	bfb8      	it	lt
 8017a74:	9204      	strlt	r2, [sp, #16]
 8017a76:	7823      	ldrb	r3, [r4, #0]
 8017a78:	2b2e      	cmp	r3, #46	@ 0x2e
 8017a7a:	d10a      	bne.n	8017a92 <_vfiprintf_r+0x156>
 8017a7c:	7863      	ldrb	r3, [r4, #1]
 8017a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017a80:	d132      	bne.n	8017ae8 <_vfiprintf_r+0x1ac>
 8017a82:	9b03      	ldr	r3, [sp, #12]
 8017a84:	3402      	adds	r4, #2
 8017a86:	1d1a      	adds	r2, r3, #4
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	9203      	str	r2, [sp, #12]
 8017a8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017a90:	9305      	str	r3, [sp, #20]
 8017a92:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8017b5c <_vfiprintf_r+0x220>
 8017a96:	2203      	movs	r2, #3
 8017a98:	4650      	mov	r0, sl
 8017a9a:	7821      	ldrb	r1, [r4, #0]
 8017a9c:	f7fd fd35 	bl	801550a <memchr>
 8017aa0:	b138      	cbz	r0, 8017ab2 <_vfiprintf_r+0x176>
 8017aa2:	2240      	movs	r2, #64	@ 0x40
 8017aa4:	9b04      	ldr	r3, [sp, #16]
 8017aa6:	eba0 000a 	sub.w	r0, r0, sl
 8017aaa:	4082      	lsls	r2, r0
 8017aac:	4313      	orrs	r3, r2
 8017aae:	3401      	adds	r4, #1
 8017ab0:	9304      	str	r3, [sp, #16]
 8017ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ab6:	2206      	movs	r2, #6
 8017ab8:	4829      	ldr	r0, [pc, #164]	@ (8017b60 <_vfiprintf_r+0x224>)
 8017aba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017abe:	f7fd fd24 	bl	801550a <memchr>
 8017ac2:	2800      	cmp	r0, #0
 8017ac4:	d03f      	beq.n	8017b46 <_vfiprintf_r+0x20a>
 8017ac6:	4b27      	ldr	r3, [pc, #156]	@ (8017b64 <_vfiprintf_r+0x228>)
 8017ac8:	bb1b      	cbnz	r3, 8017b12 <_vfiprintf_r+0x1d6>
 8017aca:	9b03      	ldr	r3, [sp, #12]
 8017acc:	3307      	adds	r3, #7
 8017ace:	f023 0307 	bic.w	r3, r3, #7
 8017ad2:	3308      	adds	r3, #8
 8017ad4:	9303      	str	r3, [sp, #12]
 8017ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ad8:	443b      	add	r3, r7
 8017ada:	9309      	str	r3, [sp, #36]	@ 0x24
 8017adc:	e76a      	b.n	80179b4 <_vfiprintf_r+0x78>
 8017ade:	460c      	mov	r4, r1
 8017ae0:	2001      	movs	r0, #1
 8017ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ae6:	e7a8      	b.n	8017a3a <_vfiprintf_r+0xfe>
 8017ae8:	2300      	movs	r3, #0
 8017aea:	f04f 0c0a 	mov.w	ip, #10
 8017aee:	4619      	mov	r1, r3
 8017af0:	3401      	adds	r4, #1
 8017af2:	9305      	str	r3, [sp, #20]
 8017af4:	4620      	mov	r0, r4
 8017af6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017afa:	3a30      	subs	r2, #48	@ 0x30
 8017afc:	2a09      	cmp	r2, #9
 8017afe:	d903      	bls.n	8017b08 <_vfiprintf_r+0x1cc>
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d0c6      	beq.n	8017a92 <_vfiprintf_r+0x156>
 8017b04:	9105      	str	r1, [sp, #20]
 8017b06:	e7c4      	b.n	8017a92 <_vfiprintf_r+0x156>
 8017b08:	4604      	mov	r4, r0
 8017b0a:	2301      	movs	r3, #1
 8017b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b10:	e7f0      	b.n	8017af4 <_vfiprintf_r+0x1b8>
 8017b12:	ab03      	add	r3, sp, #12
 8017b14:	9300      	str	r3, [sp, #0]
 8017b16:	462a      	mov	r2, r5
 8017b18:	4630      	mov	r0, r6
 8017b1a:	4b13      	ldr	r3, [pc, #76]	@ (8017b68 <_vfiprintf_r+0x22c>)
 8017b1c:	a904      	add	r1, sp, #16
 8017b1e:	f7fc fb41 	bl	80141a4 <_printf_float>
 8017b22:	4607      	mov	r7, r0
 8017b24:	1c78      	adds	r0, r7, #1
 8017b26:	d1d6      	bne.n	8017ad6 <_vfiprintf_r+0x19a>
 8017b28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b2a:	07d9      	lsls	r1, r3, #31
 8017b2c:	d405      	bmi.n	8017b3a <_vfiprintf_r+0x1fe>
 8017b2e:	89ab      	ldrh	r3, [r5, #12]
 8017b30:	059a      	lsls	r2, r3, #22
 8017b32:	d402      	bmi.n	8017b3a <_vfiprintf_r+0x1fe>
 8017b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b36:	f7fd fcdf 	bl	80154f8 <__retarget_lock_release_recursive>
 8017b3a:	89ab      	ldrh	r3, [r5, #12]
 8017b3c:	065b      	lsls	r3, r3, #25
 8017b3e:	f53f af1f 	bmi.w	8017980 <_vfiprintf_r+0x44>
 8017b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017b44:	e71e      	b.n	8017984 <_vfiprintf_r+0x48>
 8017b46:	ab03      	add	r3, sp, #12
 8017b48:	9300      	str	r3, [sp, #0]
 8017b4a:	462a      	mov	r2, r5
 8017b4c:	4630      	mov	r0, r6
 8017b4e:	4b06      	ldr	r3, [pc, #24]	@ (8017b68 <_vfiprintf_r+0x22c>)
 8017b50:	a904      	add	r1, sp, #16
 8017b52:	f7fc fdc5 	bl	80146e0 <_printf_i>
 8017b56:	e7e4      	b.n	8017b22 <_vfiprintf_r+0x1e6>
 8017b58:	08019566 	.word	0x08019566
 8017b5c:	0801956c 	.word	0x0801956c
 8017b60:	08019570 	.word	0x08019570
 8017b64:	080141a5 	.word	0x080141a5
 8017b68:	08017917 	.word	0x08017917

08017b6c <_scanf_chars>:
 8017b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b70:	4615      	mov	r5, r2
 8017b72:	688a      	ldr	r2, [r1, #8]
 8017b74:	4680      	mov	r8, r0
 8017b76:	460c      	mov	r4, r1
 8017b78:	b932      	cbnz	r2, 8017b88 <_scanf_chars+0x1c>
 8017b7a:	698a      	ldr	r2, [r1, #24]
 8017b7c:	2a00      	cmp	r2, #0
 8017b7e:	bf14      	ite	ne
 8017b80:	f04f 32ff 	movne.w	r2, #4294967295
 8017b84:	2201      	moveq	r2, #1
 8017b86:	608a      	str	r2, [r1, #8]
 8017b88:	2700      	movs	r7, #0
 8017b8a:	6822      	ldr	r2, [r4, #0]
 8017b8c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8017c1c <_scanf_chars+0xb0>
 8017b90:	06d1      	lsls	r1, r2, #27
 8017b92:	bf5f      	itttt	pl
 8017b94:	681a      	ldrpl	r2, [r3, #0]
 8017b96:	1d11      	addpl	r1, r2, #4
 8017b98:	6019      	strpl	r1, [r3, #0]
 8017b9a:	6816      	ldrpl	r6, [r2, #0]
 8017b9c:	69a0      	ldr	r0, [r4, #24]
 8017b9e:	b188      	cbz	r0, 8017bc4 <_scanf_chars+0x58>
 8017ba0:	2801      	cmp	r0, #1
 8017ba2:	d107      	bne.n	8017bb4 <_scanf_chars+0x48>
 8017ba4:	682b      	ldr	r3, [r5, #0]
 8017ba6:	781a      	ldrb	r2, [r3, #0]
 8017ba8:	6963      	ldr	r3, [r4, #20]
 8017baa:	5c9b      	ldrb	r3, [r3, r2]
 8017bac:	b953      	cbnz	r3, 8017bc4 <_scanf_chars+0x58>
 8017bae:	2f00      	cmp	r7, #0
 8017bb0:	d031      	beq.n	8017c16 <_scanf_chars+0xaa>
 8017bb2:	e022      	b.n	8017bfa <_scanf_chars+0x8e>
 8017bb4:	2802      	cmp	r0, #2
 8017bb6:	d120      	bne.n	8017bfa <_scanf_chars+0x8e>
 8017bb8:	682b      	ldr	r3, [r5, #0]
 8017bba:	781b      	ldrb	r3, [r3, #0]
 8017bbc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017bc0:	071b      	lsls	r3, r3, #28
 8017bc2:	d41a      	bmi.n	8017bfa <_scanf_chars+0x8e>
 8017bc4:	6823      	ldr	r3, [r4, #0]
 8017bc6:	3701      	adds	r7, #1
 8017bc8:	06da      	lsls	r2, r3, #27
 8017bca:	bf5e      	ittt	pl
 8017bcc:	682b      	ldrpl	r3, [r5, #0]
 8017bce:	781b      	ldrbpl	r3, [r3, #0]
 8017bd0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017bd4:	682a      	ldr	r2, [r5, #0]
 8017bd6:	686b      	ldr	r3, [r5, #4]
 8017bd8:	3201      	adds	r2, #1
 8017bda:	602a      	str	r2, [r5, #0]
 8017bdc:	68a2      	ldr	r2, [r4, #8]
 8017bde:	3b01      	subs	r3, #1
 8017be0:	3a01      	subs	r2, #1
 8017be2:	606b      	str	r3, [r5, #4]
 8017be4:	60a2      	str	r2, [r4, #8]
 8017be6:	b142      	cbz	r2, 8017bfa <_scanf_chars+0x8e>
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	dcd7      	bgt.n	8017b9c <_scanf_chars+0x30>
 8017bec:	4629      	mov	r1, r5
 8017bee:	4640      	mov	r0, r8
 8017bf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017bf4:	4798      	blx	r3
 8017bf6:	2800      	cmp	r0, #0
 8017bf8:	d0d0      	beq.n	8017b9c <_scanf_chars+0x30>
 8017bfa:	6823      	ldr	r3, [r4, #0]
 8017bfc:	f013 0310 	ands.w	r3, r3, #16
 8017c00:	d105      	bne.n	8017c0e <_scanf_chars+0xa2>
 8017c02:	68e2      	ldr	r2, [r4, #12]
 8017c04:	3201      	adds	r2, #1
 8017c06:	60e2      	str	r2, [r4, #12]
 8017c08:	69a2      	ldr	r2, [r4, #24]
 8017c0a:	b102      	cbz	r2, 8017c0e <_scanf_chars+0xa2>
 8017c0c:	7033      	strb	r3, [r6, #0]
 8017c0e:	2000      	movs	r0, #0
 8017c10:	6923      	ldr	r3, [r4, #16]
 8017c12:	443b      	add	r3, r7
 8017c14:	6123      	str	r3, [r4, #16]
 8017c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c1a:	bf00      	nop
 8017c1c:	080195e9 	.word	0x080195e9

08017c20 <_scanf_i>:
 8017c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c24:	460c      	mov	r4, r1
 8017c26:	4698      	mov	r8, r3
 8017c28:	4b72      	ldr	r3, [pc, #456]	@ (8017df4 <_scanf_i+0x1d4>)
 8017c2a:	b087      	sub	sp, #28
 8017c2c:	4682      	mov	sl, r0
 8017c2e:	4616      	mov	r6, r2
 8017c30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017c34:	ab03      	add	r3, sp, #12
 8017c36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8017df8 <_scanf_i+0x1d8>)
 8017c3c:	69a1      	ldr	r1, [r4, #24]
 8017c3e:	4a6f      	ldr	r2, [pc, #444]	@ (8017dfc <_scanf_i+0x1dc>)
 8017c40:	4627      	mov	r7, r4
 8017c42:	2903      	cmp	r1, #3
 8017c44:	bf08      	it	eq
 8017c46:	461a      	moveq	r2, r3
 8017c48:	68a3      	ldr	r3, [r4, #8]
 8017c4a:	9201      	str	r2, [sp, #4]
 8017c4c:	1e5a      	subs	r2, r3, #1
 8017c4e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017c52:	bf81      	itttt	hi
 8017c54:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017c58:	eb03 0905 	addhi.w	r9, r3, r5
 8017c5c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017c60:	60a3      	strhi	r3, [r4, #8]
 8017c62:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017c66:	bf98      	it	ls
 8017c68:	f04f 0900 	movls.w	r9, #0
 8017c6c:	463d      	mov	r5, r7
 8017c6e:	f04f 0b00 	mov.w	fp, #0
 8017c72:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8017c76:	6023      	str	r3, [r4, #0]
 8017c78:	6831      	ldr	r1, [r6, #0]
 8017c7a:	ab03      	add	r3, sp, #12
 8017c7c:	2202      	movs	r2, #2
 8017c7e:	7809      	ldrb	r1, [r1, #0]
 8017c80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017c84:	f7fd fc41 	bl	801550a <memchr>
 8017c88:	b328      	cbz	r0, 8017cd6 <_scanf_i+0xb6>
 8017c8a:	f1bb 0f01 	cmp.w	fp, #1
 8017c8e:	d159      	bne.n	8017d44 <_scanf_i+0x124>
 8017c90:	6862      	ldr	r2, [r4, #4]
 8017c92:	b92a      	cbnz	r2, 8017ca0 <_scanf_i+0x80>
 8017c94:	2108      	movs	r1, #8
 8017c96:	6822      	ldr	r2, [r4, #0]
 8017c98:	6061      	str	r1, [r4, #4]
 8017c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017c9e:	6022      	str	r2, [r4, #0]
 8017ca0:	6822      	ldr	r2, [r4, #0]
 8017ca2:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8017ca6:	6022      	str	r2, [r4, #0]
 8017ca8:	68a2      	ldr	r2, [r4, #8]
 8017caa:	1e51      	subs	r1, r2, #1
 8017cac:	60a1      	str	r1, [r4, #8]
 8017cae:	b192      	cbz	r2, 8017cd6 <_scanf_i+0xb6>
 8017cb0:	6832      	ldr	r2, [r6, #0]
 8017cb2:	1c51      	adds	r1, r2, #1
 8017cb4:	6031      	str	r1, [r6, #0]
 8017cb6:	7812      	ldrb	r2, [r2, #0]
 8017cb8:	f805 2b01 	strb.w	r2, [r5], #1
 8017cbc:	6872      	ldr	r2, [r6, #4]
 8017cbe:	3a01      	subs	r2, #1
 8017cc0:	2a00      	cmp	r2, #0
 8017cc2:	6072      	str	r2, [r6, #4]
 8017cc4:	dc07      	bgt.n	8017cd6 <_scanf_i+0xb6>
 8017cc6:	4631      	mov	r1, r6
 8017cc8:	4650      	mov	r0, sl
 8017cca:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8017cce:	4790      	blx	r2
 8017cd0:	2800      	cmp	r0, #0
 8017cd2:	f040 8085 	bne.w	8017de0 <_scanf_i+0x1c0>
 8017cd6:	f10b 0b01 	add.w	fp, fp, #1
 8017cda:	f1bb 0f03 	cmp.w	fp, #3
 8017cde:	d1cb      	bne.n	8017c78 <_scanf_i+0x58>
 8017ce0:	6863      	ldr	r3, [r4, #4]
 8017ce2:	b90b      	cbnz	r3, 8017ce8 <_scanf_i+0xc8>
 8017ce4:	230a      	movs	r3, #10
 8017ce6:	6063      	str	r3, [r4, #4]
 8017ce8:	6863      	ldr	r3, [r4, #4]
 8017cea:	4945      	ldr	r1, [pc, #276]	@ (8017e00 <_scanf_i+0x1e0>)
 8017cec:	6960      	ldr	r0, [r4, #20]
 8017cee:	1ac9      	subs	r1, r1, r3
 8017cf0:	f000 f991 	bl	8018016 <__sccl>
 8017cf4:	f04f 0b00 	mov.w	fp, #0
 8017cf8:	68a3      	ldr	r3, [r4, #8]
 8017cfa:	6822      	ldr	r2, [r4, #0]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d03d      	beq.n	8017d7c <_scanf_i+0x15c>
 8017d00:	6831      	ldr	r1, [r6, #0]
 8017d02:	6960      	ldr	r0, [r4, #20]
 8017d04:	f891 c000 	ldrb.w	ip, [r1]
 8017d08:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017d0c:	2800      	cmp	r0, #0
 8017d0e:	d035      	beq.n	8017d7c <_scanf_i+0x15c>
 8017d10:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8017d14:	d124      	bne.n	8017d60 <_scanf_i+0x140>
 8017d16:	0510      	lsls	r0, r2, #20
 8017d18:	d522      	bpl.n	8017d60 <_scanf_i+0x140>
 8017d1a:	f10b 0b01 	add.w	fp, fp, #1
 8017d1e:	f1b9 0f00 	cmp.w	r9, #0
 8017d22:	d003      	beq.n	8017d2c <_scanf_i+0x10c>
 8017d24:	3301      	adds	r3, #1
 8017d26:	f109 39ff 	add.w	r9, r9, #4294967295
 8017d2a:	60a3      	str	r3, [r4, #8]
 8017d2c:	6873      	ldr	r3, [r6, #4]
 8017d2e:	3b01      	subs	r3, #1
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	6073      	str	r3, [r6, #4]
 8017d34:	dd1b      	ble.n	8017d6e <_scanf_i+0x14e>
 8017d36:	6833      	ldr	r3, [r6, #0]
 8017d38:	3301      	adds	r3, #1
 8017d3a:	6033      	str	r3, [r6, #0]
 8017d3c:	68a3      	ldr	r3, [r4, #8]
 8017d3e:	3b01      	subs	r3, #1
 8017d40:	60a3      	str	r3, [r4, #8]
 8017d42:	e7d9      	b.n	8017cf8 <_scanf_i+0xd8>
 8017d44:	f1bb 0f02 	cmp.w	fp, #2
 8017d48:	d1ae      	bne.n	8017ca8 <_scanf_i+0x88>
 8017d4a:	6822      	ldr	r2, [r4, #0]
 8017d4c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8017d50:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017d54:	d1c4      	bne.n	8017ce0 <_scanf_i+0xc0>
 8017d56:	2110      	movs	r1, #16
 8017d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017d5c:	6061      	str	r1, [r4, #4]
 8017d5e:	e7a2      	b.n	8017ca6 <_scanf_i+0x86>
 8017d60:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017d64:	6022      	str	r2, [r4, #0]
 8017d66:	780b      	ldrb	r3, [r1, #0]
 8017d68:	f805 3b01 	strb.w	r3, [r5], #1
 8017d6c:	e7de      	b.n	8017d2c <_scanf_i+0x10c>
 8017d6e:	4631      	mov	r1, r6
 8017d70:	4650      	mov	r0, sl
 8017d72:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017d76:	4798      	blx	r3
 8017d78:	2800      	cmp	r0, #0
 8017d7a:	d0df      	beq.n	8017d3c <_scanf_i+0x11c>
 8017d7c:	6823      	ldr	r3, [r4, #0]
 8017d7e:	05d9      	lsls	r1, r3, #23
 8017d80:	d50d      	bpl.n	8017d9e <_scanf_i+0x17e>
 8017d82:	42bd      	cmp	r5, r7
 8017d84:	d909      	bls.n	8017d9a <_scanf_i+0x17a>
 8017d86:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017d8a:	4632      	mov	r2, r6
 8017d8c:	4650      	mov	r0, sl
 8017d8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017d92:	f105 39ff 	add.w	r9, r5, #4294967295
 8017d96:	4798      	blx	r3
 8017d98:	464d      	mov	r5, r9
 8017d9a:	42bd      	cmp	r5, r7
 8017d9c:	d028      	beq.n	8017df0 <_scanf_i+0x1d0>
 8017d9e:	6822      	ldr	r2, [r4, #0]
 8017da0:	f012 0210 	ands.w	r2, r2, #16
 8017da4:	d113      	bne.n	8017dce <_scanf_i+0x1ae>
 8017da6:	702a      	strb	r2, [r5, #0]
 8017da8:	4639      	mov	r1, r7
 8017daa:	6863      	ldr	r3, [r4, #4]
 8017dac:	4650      	mov	r0, sl
 8017dae:	9e01      	ldr	r6, [sp, #4]
 8017db0:	47b0      	blx	r6
 8017db2:	f8d8 3000 	ldr.w	r3, [r8]
 8017db6:	6821      	ldr	r1, [r4, #0]
 8017db8:	1d1a      	adds	r2, r3, #4
 8017dba:	f8c8 2000 	str.w	r2, [r8]
 8017dbe:	f011 0f20 	tst.w	r1, #32
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	d00f      	beq.n	8017de6 <_scanf_i+0x1c6>
 8017dc6:	6018      	str	r0, [r3, #0]
 8017dc8:	68e3      	ldr	r3, [r4, #12]
 8017dca:	3301      	adds	r3, #1
 8017dcc:	60e3      	str	r3, [r4, #12]
 8017dce:	2000      	movs	r0, #0
 8017dd0:	6923      	ldr	r3, [r4, #16]
 8017dd2:	1bed      	subs	r5, r5, r7
 8017dd4:	445d      	add	r5, fp
 8017dd6:	442b      	add	r3, r5
 8017dd8:	6123      	str	r3, [r4, #16]
 8017dda:	b007      	add	sp, #28
 8017ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017de0:	f04f 0b00 	mov.w	fp, #0
 8017de4:	e7ca      	b.n	8017d7c <_scanf_i+0x15c>
 8017de6:	07ca      	lsls	r2, r1, #31
 8017de8:	bf4c      	ite	mi
 8017dea:	8018      	strhmi	r0, [r3, #0]
 8017dec:	6018      	strpl	r0, [r3, #0]
 8017dee:	e7eb      	b.n	8017dc8 <_scanf_i+0x1a8>
 8017df0:	2001      	movs	r0, #1
 8017df2:	e7f2      	b.n	8017dda <_scanf_i+0x1ba>
 8017df4:	08018bfc 	.word	0x08018bfc
 8017df8:	08014051 	.word	0x08014051
 8017dfc:	08018359 	.word	0x08018359
 8017e00:	08019587 	.word	0x08019587

08017e04 <__sflush_r>:
 8017e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e0a:	0716      	lsls	r6, r2, #28
 8017e0c:	4605      	mov	r5, r0
 8017e0e:	460c      	mov	r4, r1
 8017e10:	d454      	bmi.n	8017ebc <__sflush_r+0xb8>
 8017e12:	684b      	ldr	r3, [r1, #4]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	dc02      	bgt.n	8017e1e <__sflush_r+0x1a>
 8017e18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	dd48      	ble.n	8017eb0 <__sflush_r+0xac>
 8017e1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017e20:	2e00      	cmp	r6, #0
 8017e22:	d045      	beq.n	8017eb0 <__sflush_r+0xac>
 8017e24:	2300      	movs	r3, #0
 8017e26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017e2a:	682f      	ldr	r7, [r5, #0]
 8017e2c:	6a21      	ldr	r1, [r4, #32]
 8017e2e:	602b      	str	r3, [r5, #0]
 8017e30:	d030      	beq.n	8017e94 <__sflush_r+0x90>
 8017e32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017e34:	89a3      	ldrh	r3, [r4, #12]
 8017e36:	0759      	lsls	r1, r3, #29
 8017e38:	d505      	bpl.n	8017e46 <__sflush_r+0x42>
 8017e3a:	6863      	ldr	r3, [r4, #4]
 8017e3c:	1ad2      	subs	r2, r2, r3
 8017e3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017e40:	b10b      	cbz	r3, 8017e46 <__sflush_r+0x42>
 8017e42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017e44:	1ad2      	subs	r2, r2, r3
 8017e46:	2300      	movs	r3, #0
 8017e48:	4628      	mov	r0, r5
 8017e4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017e4c:	6a21      	ldr	r1, [r4, #32]
 8017e4e:	47b0      	blx	r6
 8017e50:	1c43      	adds	r3, r0, #1
 8017e52:	89a3      	ldrh	r3, [r4, #12]
 8017e54:	d106      	bne.n	8017e64 <__sflush_r+0x60>
 8017e56:	6829      	ldr	r1, [r5, #0]
 8017e58:	291d      	cmp	r1, #29
 8017e5a:	d82b      	bhi.n	8017eb4 <__sflush_r+0xb0>
 8017e5c:	4a28      	ldr	r2, [pc, #160]	@ (8017f00 <__sflush_r+0xfc>)
 8017e5e:	40ca      	lsrs	r2, r1
 8017e60:	07d6      	lsls	r6, r2, #31
 8017e62:	d527      	bpl.n	8017eb4 <__sflush_r+0xb0>
 8017e64:	2200      	movs	r2, #0
 8017e66:	6062      	str	r2, [r4, #4]
 8017e68:	6922      	ldr	r2, [r4, #16]
 8017e6a:	04d9      	lsls	r1, r3, #19
 8017e6c:	6022      	str	r2, [r4, #0]
 8017e6e:	d504      	bpl.n	8017e7a <__sflush_r+0x76>
 8017e70:	1c42      	adds	r2, r0, #1
 8017e72:	d101      	bne.n	8017e78 <__sflush_r+0x74>
 8017e74:	682b      	ldr	r3, [r5, #0]
 8017e76:	b903      	cbnz	r3, 8017e7a <__sflush_r+0x76>
 8017e78:	6560      	str	r0, [r4, #84]	@ 0x54
 8017e7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017e7c:	602f      	str	r7, [r5, #0]
 8017e7e:	b1b9      	cbz	r1, 8017eb0 <__sflush_r+0xac>
 8017e80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017e84:	4299      	cmp	r1, r3
 8017e86:	d002      	beq.n	8017e8e <__sflush_r+0x8a>
 8017e88:	4628      	mov	r0, r5
 8017e8a:	f7fe f9c9 	bl	8016220 <_free_r>
 8017e8e:	2300      	movs	r3, #0
 8017e90:	6363      	str	r3, [r4, #52]	@ 0x34
 8017e92:	e00d      	b.n	8017eb0 <__sflush_r+0xac>
 8017e94:	2301      	movs	r3, #1
 8017e96:	4628      	mov	r0, r5
 8017e98:	47b0      	blx	r6
 8017e9a:	4602      	mov	r2, r0
 8017e9c:	1c50      	adds	r0, r2, #1
 8017e9e:	d1c9      	bne.n	8017e34 <__sflush_r+0x30>
 8017ea0:	682b      	ldr	r3, [r5, #0]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d0c6      	beq.n	8017e34 <__sflush_r+0x30>
 8017ea6:	2b1d      	cmp	r3, #29
 8017ea8:	d001      	beq.n	8017eae <__sflush_r+0xaa>
 8017eaa:	2b16      	cmp	r3, #22
 8017eac:	d11d      	bne.n	8017eea <__sflush_r+0xe6>
 8017eae:	602f      	str	r7, [r5, #0]
 8017eb0:	2000      	movs	r0, #0
 8017eb2:	e021      	b.n	8017ef8 <__sflush_r+0xf4>
 8017eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017eb8:	b21b      	sxth	r3, r3
 8017eba:	e01a      	b.n	8017ef2 <__sflush_r+0xee>
 8017ebc:	690f      	ldr	r7, [r1, #16]
 8017ebe:	2f00      	cmp	r7, #0
 8017ec0:	d0f6      	beq.n	8017eb0 <__sflush_r+0xac>
 8017ec2:	0793      	lsls	r3, r2, #30
 8017ec4:	bf18      	it	ne
 8017ec6:	2300      	movne	r3, #0
 8017ec8:	680e      	ldr	r6, [r1, #0]
 8017eca:	bf08      	it	eq
 8017ecc:	694b      	ldreq	r3, [r1, #20]
 8017ece:	1bf6      	subs	r6, r6, r7
 8017ed0:	600f      	str	r7, [r1, #0]
 8017ed2:	608b      	str	r3, [r1, #8]
 8017ed4:	2e00      	cmp	r6, #0
 8017ed6:	ddeb      	ble.n	8017eb0 <__sflush_r+0xac>
 8017ed8:	4633      	mov	r3, r6
 8017eda:	463a      	mov	r2, r7
 8017edc:	4628      	mov	r0, r5
 8017ede:	6a21      	ldr	r1, [r4, #32]
 8017ee0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8017ee4:	47e0      	blx	ip
 8017ee6:	2800      	cmp	r0, #0
 8017ee8:	dc07      	bgt.n	8017efa <__sflush_r+0xf6>
 8017eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ef6:	81a3      	strh	r3, [r4, #12]
 8017ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017efa:	4407      	add	r7, r0
 8017efc:	1a36      	subs	r6, r6, r0
 8017efe:	e7e9      	b.n	8017ed4 <__sflush_r+0xd0>
 8017f00:	20400001 	.word	0x20400001

08017f04 <_fflush_r>:
 8017f04:	b538      	push	{r3, r4, r5, lr}
 8017f06:	690b      	ldr	r3, [r1, #16]
 8017f08:	4605      	mov	r5, r0
 8017f0a:	460c      	mov	r4, r1
 8017f0c:	b913      	cbnz	r3, 8017f14 <_fflush_r+0x10>
 8017f0e:	2500      	movs	r5, #0
 8017f10:	4628      	mov	r0, r5
 8017f12:	bd38      	pop	{r3, r4, r5, pc}
 8017f14:	b118      	cbz	r0, 8017f1e <_fflush_r+0x1a>
 8017f16:	6a03      	ldr	r3, [r0, #32]
 8017f18:	b90b      	cbnz	r3, 8017f1e <_fflush_r+0x1a>
 8017f1a:	f7fc ff95 	bl	8014e48 <__sinit>
 8017f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d0f3      	beq.n	8017f0e <_fflush_r+0xa>
 8017f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017f28:	07d0      	lsls	r0, r2, #31
 8017f2a:	d404      	bmi.n	8017f36 <_fflush_r+0x32>
 8017f2c:	0599      	lsls	r1, r3, #22
 8017f2e:	d402      	bmi.n	8017f36 <_fflush_r+0x32>
 8017f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017f32:	f7fd fae0 	bl	80154f6 <__retarget_lock_acquire_recursive>
 8017f36:	4628      	mov	r0, r5
 8017f38:	4621      	mov	r1, r4
 8017f3a:	f7ff ff63 	bl	8017e04 <__sflush_r>
 8017f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017f40:	4605      	mov	r5, r0
 8017f42:	07da      	lsls	r2, r3, #31
 8017f44:	d4e4      	bmi.n	8017f10 <_fflush_r+0xc>
 8017f46:	89a3      	ldrh	r3, [r4, #12]
 8017f48:	059b      	lsls	r3, r3, #22
 8017f4a:	d4e1      	bmi.n	8017f10 <_fflush_r+0xc>
 8017f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017f4e:	f7fd fad3 	bl	80154f8 <__retarget_lock_release_recursive>
 8017f52:	e7dd      	b.n	8017f10 <_fflush_r+0xc>

08017f54 <__swhatbuf_r>:
 8017f54:	b570      	push	{r4, r5, r6, lr}
 8017f56:	460c      	mov	r4, r1
 8017f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f5c:	4615      	mov	r5, r2
 8017f5e:	2900      	cmp	r1, #0
 8017f60:	461e      	mov	r6, r3
 8017f62:	b096      	sub	sp, #88	@ 0x58
 8017f64:	da0c      	bge.n	8017f80 <__swhatbuf_r+0x2c>
 8017f66:	89a3      	ldrh	r3, [r4, #12]
 8017f68:	2100      	movs	r1, #0
 8017f6a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017f6e:	bf14      	ite	ne
 8017f70:	2340      	movne	r3, #64	@ 0x40
 8017f72:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017f76:	2000      	movs	r0, #0
 8017f78:	6031      	str	r1, [r6, #0]
 8017f7a:	602b      	str	r3, [r5, #0]
 8017f7c:	b016      	add	sp, #88	@ 0x58
 8017f7e:	bd70      	pop	{r4, r5, r6, pc}
 8017f80:	466a      	mov	r2, sp
 8017f82:	f000 f903 	bl	801818c <_fstat_r>
 8017f86:	2800      	cmp	r0, #0
 8017f88:	dbed      	blt.n	8017f66 <__swhatbuf_r+0x12>
 8017f8a:	9901      	ldr	r1, [sp, #4]
 8017f8c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017f90:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017f94:	4259      	negs	r1, r3
 8017f96:	4159      	adcs	r1, r3
 8017f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017f9c:	e7eb      	b.n	8017f76 <__swhatbuf_r+0x22>

08017f9e <__smakebuf_r>:
 8017f9e:	898b      	ldrh	r3, [r1, #12]
 8017fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017fa2:	079d      	lsls	r5, r3, #30
 8017fa4:	4606      	mov	r6, r0
 8017fa6:	460c      	mov	r4, r1
 8017fa8:	d507      	bpl.n	8017fba <__smakebuf_r+0x1c>
 8017faa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017fae:	6023      	str	r3, [r4, #0]
 8017fb0:	6123      	str	r3, [r4, #16]
 8017fb2:	2301      	movs	r3, #1
 8017fb4:	6163      	str	r3, [r4, #20]
 8017fb6:	b003      	add	sp, #12
 8017fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fba:	466a      	mov	r2, sp
 8017fbc:	ab01      	add	r3, sp, #4
 8017fbe:	f7ff ffc9 	bl	8017f54 <__swhatbuf_r>
 8017fc2:	9f00      	ldr	r7, [sp, #0]
 8017fc4:	4605      	mov	r5, r0
 8017fc6:	4639      	mov	r1, r7
 8017fc8:	4630      	mov	r0, r6
 8017fca:	f7fb f92d 	bl	8013228 <_malloc_r>
 8017fce:	b948      	cbnz	r0, 8017fe4 <__smakebuf_r+0x46>
 8017fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fd4:	059a      	lsls	r2, r3, #22
 8017fd6:	d4ee      	bmi.n	8017fb6 <__smakebuf_r+0x18>
 8017fd8:	f023 0303 	bic.w	r3, r3, #3
 8017fdc:	f043 0302 	orr.w	r3, r3, #2
 8017fe0:	81a3      	strh	r3, [r4, #12]
 8017fe2:	e7e2      	b.n	8017faa <__smakebuf_r+0xc>
 8017fe4:	89a3      	ldrh	r3, [r4, #12]
 8017fe6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017fee:	81a3      	strh	r3, [r4, #12]
 8017ff0:	9b01      	ldr	r3, [sp, #4]
 8017ff2:	6020      	str	r0, [r4, #0]
 8017ff4:	b15b      	cbz	r3, 801800e <__smakebuf_r+0x70>
 8017ff6:	4630      	mov	r0, r6
 8017ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ffc:	f000 f8d8 	bl	80181b0 <_isatty_r>
 8018000:	b128      	cbz	r0, 801800e <__smakebuf_r+0x70>
 8018002:	89a3      	ldrh	r3, [r4, #12]
 8018004:	f023 0303 	bic.w	r3, r3, #3
 8018008:	f043 0301 	orr.w	r3, r3, #1
 801800c:	81a3      	strh	r3, [r4, #12]
 801800e:	89a3      	ldrh	r3, [r4, #12]
 8018010:	431d      	orrs	r5, r3
 8018012:	81a5      	strh	r5, [r4, #12]
 8018014:	e7cf      	b.n	8017fb6 <__smakebuf_r+0x18>

08018016 <__sccl>:
 8018016:	b570      	push	{r4, r5, r6, lr}
 8018018:	780b      	ldrb	r3, [r1, #0]
 801801a:	4604      	mov	r4, r0
 801801c:	2b5e      	cmp	r3, #94	@ 0x5e
 801801e:	bf0b      	itete	eq
 8018020:	784b      	ldrbeq	r3, [r1, #1]
 8018022:	1c4a      	addne	r2, r1, #1
 8018024:	1c8a      	addeq	r2, r1, #2
 8018026:	2100      	movne	r1, #0
 8018028:	bf08      	it	eq
 801802a:	2101      	moveq	r1, #1
 801802c:	3801      	subs	r0, #1
 801802e:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8018032:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018036:	42a8      	cmp	r0, r5
 8018038:	d1fb      	bne.n	8018032 <__sccl+0x1c>
 801803a:	b90b      	cbnz	r3, 8018040 <__sccl+0x2a>
 801803c:	1e50      	subs	r0, r2, #1
 801803e:	bd70      	pop	{r4, r5, r6, pc}
 8018040:	f081 0101 	eor.w	r1, r1, #1
 8018044:	4610      	mov	r0, r2
 8018046:	54e1      	strb	r1, [r4, r3]
 8018048:	4602      	mov	r2, r0
 801804a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801804e:	2d2d      	cmp	r5, #45	@ 0x2d
 8018050:	d005      	beq.n	801805e <__sccl+0x48>
 8018052:	2d5d      	cmp	r5, #93	@ 0x5d
 8018054:	d016      	beq.n	8018084 <__sccl+0x6e>
 8018056:	2d00      	cmp	r5, #0
 8018058:	d0f1      	beq.n	801803e <__sccl+0x28>
 801805a:	462b      	mov	r3, r5
 801805c:	e7f2      	b.n	8018044 <__sccl+0x2e>
 801805e:	7846      	ldrb	r6, [r0, #1]
 8018060:	2e5d      	cmp	r6, #93	@ 0x5d
 8018062:	d0fa      	beq.n	801805a <__sccl+0x44>
 8018064:	42b3      	cmp	r3, r6
 8018066:	dcf8      	bgt.n	801805a <__sccl+0x44>
 8018068:	461a      	mov	r2, r3
 801806a:	3002      	adds	r0, #2
 801806c:	3201      	adds	r2, #1
 801806e:	4296      	cmp	r6, r2
 8018070:	54a1      	strb	r1, [r4, r2]
 8018072:	dcfb      	bgt.n	801806c <__sccl+0x56>
 8018074:	1af2      	subs	r2, r6, r3
 8018076:	3a01      	subs	r2, #1
 8018078:	42b3      	cmp	r3, r6
 801807a:	bfa8      	it	ge
 801807c:	2200      	movge	r2, #0
 801807e:	1c5d      	adds	r5, r3, #1
 8018080:	18ab      	adds	r3, r5, r2
 8018082:	e7e1      	b.n	8018048 <__sccl+0x32>
 8018084:	4610      	mov	r0, r2
 8018086:	e7da      	b.n	801803e <__sccl+0x28>

08018088 <__submore>:
 8018088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801808c:	460c      	mov	r4, r1
 801808e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018094:	4299      	cmp	r1, r3
 8018096:	d11b      	bne.n	80180d0 <__submore+0x48>
 8018098:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801809c:	f7fb f8c4 	bl	8013228 <_malloc_r>
 80180a0:	b918      	cbnz	r0, 80180aa <__submore+0x22>
 80180a2:	f04f 30ff 	mov.w	r0, #4294967295
 80180a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80180ae:	63a3      	str	r3, [r4, #56]	@ 0x38
 80180b0:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80180b4:	6360      	str	r0, [r4, #52]	@ 0x34
 80180b6:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80180ba:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80180be:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80180c2:	7043      	strb	r3, [r0, #1]
 80180c4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80180c8:	7003      	strb	r3, [r0, #0]
 80180ca:	6020      	str	r0, [r4, #0]
 80180cc:	2000      	movs	r0, #0
 80180ce:	e7ea      	b.n	80180a6 <__submore+0x1e>
 80180d0:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80180d2:	0077      	lsls	r7, r6, #1
 80180d4:	463a      	mov	r2, r7
 80180d6:	f000 f8a3 	bl	8018220 <_realloc_r>
 80180da:	4605      	mov	r5, r0
 80180dc:	2800      	cmp	r0, #0
 80180de:	d0e0      	beq.n	80180a2 <__submore+0x1a>
 80180e0:	eb00 0806 	add.w	r8, r0, r6
 80180e4:	4601      	mov	r1, r0
 80180e6:	4632      	mov	r2, r6
 80180e8:	4640      	mov	r0, r8
 80180ea:	f7fd fa1c 	bl	8015526 <memcpy>
 80180ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80180f2:	f8c4 8000 	str.w	r8, [r4]
 80180f6:	e7e9      	b.n	80180cc <__submore+0x44>

080180f8 <memmove>:
 80180f8:	4288      	cmp	r0, r1
 80180fa:	b510      	push	{r4, lr}
 80180fc:	eb01 0402 	add.w	r4, r1, r2
 8018100:	d902      	bls.n	8018108 <memmove+0x10>
 8018102:	4284      	cmp	r4, r0
 8018104:	4623      	mov	r3, r4
 8018106:	d807      	bhi.n	8018118 <memmove+0x20>
 8018108:	1e43      	subs	r3, r0, #1
 801810a:	42a1      	cmp	r1, r4
 801810c:	d008      	beq.n	8018120 <memmove+0x28>
 801810e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018116:	e7f8      	b.n	801810a <memmove+0x12>
 8018118:	4601      	mov	r1, r0
 801811a:	4402      	add	r2, r0
 801811c:	428a      	cmp	r2, r1
 801811e:	d100      	bne.n	8018122 <memmove+0x2a>
 8018120:	bd10      	pop	{r4, pc}
 8018122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801812a:	e7f7      	b.n	801811c <memmove+0x24>

0801812c <_raise_r>:
 801812c:	291f      	cmp	r1, #31
 801812e:	b538      	push	{r3, r4, r5, lr}
 8018130:	4605      	mov	r5, r0
 8018132:	460c      	mov	r4, r1
 8018134:	d904      	bls.n	8018140 <_raise_r+0x14>
 8018136:	2316      	movs	r3, #22
 8018138:	6003      	str	r3, [r0, #0]
 801813a:	f04f 30ff 	mov.w	r0, #4294967295
 801813e:	bd38      	pop	{r3, r4, r5, pc}
 8018140:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018142:	b112      	cbz	r2, 801814a <_raise_r+0x1e>
 8018144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018148:	b94b      	cbnz	r3, 801815e <_raise_r+0x32>
 801814a:	4628      	mov	r0, r5
 801814c:	f000 f852 	bl	80181f4 <_getpid_r>
 8018150:	4622      	mov	r2, r4
 8018152:	4601      	mov	r1, r0
 8018154:	4628      	mov	r0, r5
 8018156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801815a:	f000 b839 	b.w	80181d0 <_kill_r>
 801815e:	2b01      	cmp	r3, #1
 8018160:	d00a      	beq.n	8018178 <_raise_r+0x4c>
 8018162:	1c59      	adds	r1, r3, #1
 8018164:	d103      	bne.n	801816e <_raise_r+0x42>
 8018166:	2316      	movs	r3, #22
 8018168:	6003      	str	r3, [r0, #0]
 801816a:	2001      	movs	r0, #1
 801816c:	e7e7      	b.n	801813e <_raise_r+0x12>
 801816e:	2100      	movs	r1, #0
 8018170:	4620      	mov	r0, r4
 8018172:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018176:	4798      	blx	r3
 8018178:	2000      	movs	r0, #0
 801817a:	e7e0      	b.n	801813e <_raise_r+0x12>

0801817c <raise>:
 801817c:	4b02      	ldr	r3, [pc, #8]	@ (8018188 <raise+0xc>)
 801817e:	4601      	mov	r1, r0
 8018180:	6818      	ldr	r0, [r3, #0]
 8018182:	f7ff bfd3 	b.w	801812c <_raise_r>
 8018186:	bf00      	nop
 8018188:	20000200 	.word	0x20000200

0801818c <_fstat_r>:
 801818c:	b538      	push	{r3, r4, r5, lr}
 801818e:	2300      	movs	r3, #0
 8018190:	4d06      	ldr	r5, [pc, #24]	@ (80181ac <_fstat_r+0x20>)
 8018192:	4604      	mov	r4, r0
 8018194:	4608      	mov	r0, r1
 8018196:	4611      	mov	r1, r2
 8018198:	602b      	str	r3, [r5, #0]
 801819a:	f7ea f921 	bl	80023e0 <_fstat>
 801819e:	1c43      	adds	r3, r0, #1
 80181a0:	d102      	bne.n	80181a8 <_fstat_r+0x1c>
 80181a2:	682b      	ldr	r3, [r5, #0]
 80181a4:	b103      	cbz	r3, 80181a8 <_fstat_r+0x1c>
 80181a6:	6023      	str	r3, [r4, #0]
 80181a8:	bd38      	pop	{r3, r4, r5, pc}
 80181aa:	bf00      	nop
 80181ac:	200021cc 	.word	0x200021cc

080181b0 <_isatty_r>:
 80181b0:	b538      	push	{r3, r4, r5, lr}
 80181b2:	2300      	movs	r3, #0
 80181b4:	4d05      	ldr	r5, [pc, #20]	@ (80181cc <_isatty_r+0x1c>)
 80181b6:	4604      	mov	r4, r0
 80181b8:	4608      	mov	r0, r1
 80181ba:	602b      	str	r3, [r5, #0]
 80181bc:	f7ea f91f 	bl	80023fe <_isatty>
 80181c0:	1c43      	adds	r3, r0, #1
 80181c2:	d102      	bne.n	80181ca <_isatty_r+0x1a>
 80181c4:	682b      	ldr	r3, [r5, #0]
 80181c6:	b103      	cbz	r3, 80181ca <_isatty_r+0x1a>
 80181c8:	6023      	str	r3, [r4, #0]
 80181ca:	bd38      	pop	{r3, r4, r5, pc}
 80181cc:	200021cc 	.word	0x200021cc

080181d0 <_kill_r>:
 80181d0:	b538      	push	{r3, r4, r5, lr}
 80181d2:	2300      	movs	r3, #0
 80181d4:	4d06      	ldr	r5, [pc, #24]	@ (80181f0 <_kill_r+0x20>)
 80181d6:	4604      	mov	r4, r0
 80181d8:	4608      	mov	r0, r1
 80181da:	4611      	mov	r1, r2
 80181dc:	602b      	str	r3, [r5, #0]
 80181de:	f7ea f8bc 	bl	800235a <_kill>
 80181e2:	1c43      	adds	r3, r0, #1
 80181e4:	d102      	bne.n	80181ec <_kill_r+0x1c>
 80181e6:	682b      	ldr	r3, [r5, #0]
 80181e8:	b103      	cbz	r3, 80181ec <_kill_r+0x1c>
 80181ea:	6023      	str	r3, [r4, #0]
 80181ec:	bd38      	pop	{r3, r4, r5, pc}
 80181ee:	bf00      	nop
 80181f0:	200021cc 	.word	0x200021cc

080181f4 <_getpid_r>:
 80181f4:	f7ea b8aa 	b.w	800234c <_getpid>

080181f8 <_calloc_r>:
 80181f8:	b570      	push	{r4, r5, r6, lr}
 80181fa:	fba1 5402 	umull	r5, r4, r1, r2
 80181fe:	b934      	cbnz	r4, 801820e <_calloc_r+0x16>
 8018200:	4629      	mov	r1, r5
 8018202:	f7fb f811 	bl	8013228 <_malloc_r>
 8018206:	4606      	mov	r6, r0
 8018208:	b928      	cbnz	r0, 8018216 <_calloc_r+0x1e>
 801820a:	4630      	mov	r0, r6
 801820c:	bd70      	pop	{r4, r5, r6, pc}
 801820e:	220c      	movs	r2, #12
 8018210:	2600      	movs	r6, #0
 8018212:	6002      	str	r2, [r0, #0]
 8018214:	e7f9      	b.n	801820a <_calloc_r+0x12>
 8018216:	462a      	mov	r2, r5
 8018218:	4621      	mov	r1, r4
 801821a:	f7fd f83b 	bl	8015294 <memset>
 801821e:	e7f4      	b.n	801820a <_calloc_r+0x12>

08018220 <_realloc_r>:
 8018220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018224:	4607      	mov	r7, r0
 8018226:	4614      	mov	r4, r2
 8018228:	460d      	mov	r5, r1
 801822a:	b921      	cbnz	r1, 8018236 <_realloc_r+0x16>
 801822c:	4611      	mov	r1, r2
 801822e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018232:	f7fa bff9 	b.w	8013228 <_malloc_r>
 8018236:	b92a      	cbnz	r2, 8018244 <_realloc_r+0x24>
 8018238:	f7fd fff2 	bl	8016220 <_free_r>
 801823c:	4625      	mov	r5, r4
 801823e:	4628      	mov	r0, r5
 8018240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018244:	f000 f88a 	bl	801835c <_malloc_usable_size_r>
 8018248:	4284      	cmp	r4, r0
 801824a:	4606      	mov	r6, r0
 801824c:	d802      	bhi.n	8018254 <_realloc_r+0x34>
 801824e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018252:	d8f4      	bhi.n	801823e <_realloc_r+0x1e>
 8018254:	4621      	mov	r1, r4
 8018256:	4638      	mov	r0, r7
 8018258:	f7fa ffe6 	bl	8013228 <_malloc_r>
 801825c:	4680      	mov	r8, r0
 801825e:	b908      	cbnz	r0, 8018264 <_realloc_r+0x44>
 8018260:	4645      	mov	r5, r8
 8018262:	e7ec      	b.n	801823e <_realloc_r+0x1e>
 8018264:	42b4      	cmp	r4, r6
 8018266:	4622      	mov	r2, r4
 8018268:	4629      	mov	r1, r5
 801826a:	bf28      	it	cs
 801826c:	4632      	movcs	r2, r6
 801826e:	f7fd f95a 	bl	8015526 <memcpy>
 8018272:	4629      	mov	r1, r5
 8018274:	4638      	mov	r0, r7
 8018276:	f7fd ffd3 	bl	8016220 <_free_r>
 801827a:	e7f1      	b.n	8018260 <_realloc_r+0x40>

0801827c <_strtoul_l.isra.0>:
 801827c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018280:	4686      	mov	lr, r0
 8018282:	460d      	mov	r5, r1
 8018284:	4e33      	ldr	r6, [pc, #204]	@ (8018354 <_strtoul_l.isra.0+0xd8>)
 8018286:	4628      	mov	r0, r5
 8018288:	f815 4b01 	ldrb.w	r4, [r5], #1
 801828c:	5d37      	ldrb	r7, [r6, r4]
 801828e:	f017 0708 	ands.w	r7, r7, #8
 8018292:	d1f8      	bne.n	8018286 <_strtoul_l.isra.0+0xa>
 8018294:	2c2d      	cmp	r4, #45	@ 0x2d
 8018296:	d110      	bne.n	80182ba <_strtoul_l.isra.0+0x3e>
 8018298:	2701      	movs	r7, #1
 801829a:	782c      	ldrb	r4, [r5, #0]
 801829c:	1c85      	adds	r5, r0, #2
 801829e:	f033 0010 	bics.w	r0, r3, #16
 80182a2:	d115      	bne.n	80182d0 <_strtoul_l.isra.0+0x54>
 80182a4:	2c30      	cmp	r4, #48	@ 0x30
 80182a6:	d10d      	bne.n	80182c4 <_strtoul_l.isra.0+0x48>
 80182a8:	7828      	ldrb	r0, [r5, #0]
 80182aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80182ae:	2858      	cmp	r0, #88	@ 0x58
 80182b0:	d108      	bne.n	80182c4 <_strtoul_l.isra.0+0x48>
 80182b2:	786c      	ldrb	r4, [r5, #1]
 80182b4:	3502      	adds	r5, #2
 80182b6:	2310      	movs	r3, #16
 80182b8:	e00a      	b.n	80182d0 <_strtoul_l.isra.0+0x54>
 80182ba:	2c2b      	cmp	r4, #43	@ 0x2b
 80182bc:	bf04      	itt	eq
 80182be:	782c      	ldrbeq	r4, [r5, #0]
 80182c0:	1c85      	addeq	r5, r0, #2
 80182c2:	e7ec      	b.n	801829e <_strtoul_l.isra.0+0x22>
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d1f6      	bne.n	80182b6 <_strtoul_l.isra.0+0x3a>
 80182c8:	2c30      	cmp	r4, #48	@ 0x30
 80182ca:	bf14      	ite	ne
 80182cc:	230a      	movne	r3, #10
 80182ce:	2308      	moveq	r3, #8
 80182d0:	f04f 38ff 	mov.w	r8, #4294967295
 80182d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80182d8:	2600      	movs	r6, #0
 80182da:	fb03 f908 	mul.w	r9, r3, r8
 80182de:	4630      	mov	r0, r6
 80182e0:	ea6f 0909 	mvn.w	r9, r9
 80182e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80182e8:	f1bc 0f09 	cmp.w	ip, #9
 80182ec:	d810      	bhi.n	8018310 <_strtoul_l.isra.0+0x94>
 80182ee:	4664      	mov	r4, ip
 80182f0:	42a3      	cmp	r3, r4
 80182f2:	dd1e      	ble.n	8018332 <_strtoul_l.isra.0+0xb6>
 80182f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80182f8:	d007      	beq.n	801830a <_strtoul_l.isra.0+0x8e>
 80182fa:	4580      	cmp	r8, r0
 80182fc:	d316      	bcc.n	801832c <_strtoul_l.isra.0+0xb0>
 80182fe:	d101      	bne.n	8018304 <_strtoul_l.isra.0+0x88>
 8018300:	45a1      	cmp	r9, r4
 8018302:	db13      	blt.n	801832c <_strtoul_l.isra.0+0xb0>
 8018304:	2601      	movs	r6, #1
 8018306:	fb00 4003 	mla	r0, r0, r3, r4
 801830a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801830e:	e7e9      	b.n	80182e4 <_strtoul_l.isra.0+0x68>
 8018310:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018314:	f1bc 0f19 	cmp.w	ip, #25
 8018318:	d801      	bhi.n	801831e <_strtoul_l.isra.0+0xa2>
 801831a:	3c37      	subs	r4, #55	@ 0x37
 801831c:	e7e8      	b.n	80182f0 <_strtoul_l.isra.0+0x74>
 801831e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018322:	f1bc 0f19 	cmp.w	ip, #25
 8018326:	d804      	bhi.n	8018332 <_strtoul_l.isra.0+0xb6>
 8018328:	3c57      	subs	r4, #87	@ 0x57
 801832a:	e7e1      	b.n	80182f0 <_strtoul_l.isra.0+0x74>
 801832c:	f04f 36ff 	mov.w	r6, #4294967295
 8018330:	e7eb      	b.n	801830a <_strtoul_l.isra.0+0x8e>
 8018332:	1c73      	adds	r3, r6, #1
 8018334:	d106      	bne.n	8018344 <_strtoul_l.isra.0+0xc8>
 8018336:	2322      	movs	r3, #34	@ 0x22
 8018338:	4630      	mov	r0, r6
 801833a:	f8ce 3000 	str.w	r3, [lr]
 801833e:	b932      	cbnz	r2, 801834e <_strtoul_l.isra.0+0xd2>
 8018340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018344:	b107      	cbz	r7, 8018348 <_strtoul_l.isra.0+0xcc>
 8018346:	4240      	negs	r0, r0
 8018348:	2a00      	cmp	r2, #0
 801834a:	d0f9      	beq.n	8018340 <_strtoul_l.isra.0+0xc4>
 801834c:	b106      	cbz	r6, 8018350 <_strtoul_l.isra.0+0xd4>
 801834e:	1e69      	subs	r1, r5, #1
 8018350:	6011      	str	r1, [r2, #0]
 8018352:	e7f5      	b.n	8018340 <_strtoul_l.isra.0+0xc4>
 8018354:	080195e9 	.word	0x080195e9

08018358 <_strtoul_r>:
 8018358:	f7ff bf90 	b.w	801827c <_strtoul_l.isra.0>

0801835c <_malloc_usable_size_r>:
 801835c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018360:	1f18      	subs	r0, r3, #4
 8018362:	2b00      	cmp	r3, #0
 8018364:	bfbc      	itt	lt
 8018366:	580b      	ldrlt	r3, [r1, r0]
 8018368:	18c0      	addlt	r0, r0, r3
 801836a:	4770      	bx	lr

0801836c <_init>:
 801836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801836e:	bf00      	nop
 8018370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018372:	bc08      	pop	{r3}
 8018374:	469e      	mov	lr, r3
 8018376:	4770      	bx	lr

08018378 <_fini>:
 8018378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801837a:	bf00      	nop
 801837c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801837e:	bc08      	pop	{r3}
 8018380:	469e      	mov	lr, r3
 8018382:	4770      	bx	lr
