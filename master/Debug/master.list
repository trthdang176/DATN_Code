
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109d8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b78  08010ae8  08010ae8  00011ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011660  08011660  00013250  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011660  08011660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011668  08011668  00013250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011668  08011668  00012668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801166c  0801166c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  08011670  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010fc  20000250  080118c0  00013250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000134c  080118c0  0001334c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00013250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019233  00000000  00000000  00013279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000453b  00000000  00000000  0002c4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  000309e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2b  00000000  00000000  00031dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001caed  00000000  00000000  00032cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf0b  00000000  00000000  0004f7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8de  00000000  00000000  0006c6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fafc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006808  00000000  00000000  000fb00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00101814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000250 	.word	0x20000250
 800012c:	00000000 	.word	0x00000000
 8000130:	08010ad0 	.word	0x08010ad0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000254 	.word	0x20000254
 800014c:	08010ad0 	.word	0x08010ad0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff fead 	bl	80009d0 <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc23 	bl	80004ec <__aeabi_dmul>
 8000ca6:	f7ff fef9 	bl	8000a9c <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fba4 	bl	80003f8 <__aeabi_ui2d>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb4:	f7ff fc1a 	bl	80004ec <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fa5c 	bl	800017c <__aeabi_dsub>
 8000cc4:	f7ff feea 	bl	8000a9c <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <SELECT+0x14>)
 8000cde:	f002 fd8d 	bl	80037fc <HAL_GPIO_WritePin>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4802      	ldr	r0, [pc, #8]	@ (8000d00 <DESELECT+0x14>)
 8000cf6:	f002 fd81 	bl	80037fc <HAL_GPIO_WritePin>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d0e:	bf00      	nop
 8000d10:	4808      	ldr	r0, [pc, #32]	@ (8000d34 <SPI_TxByte+0x30>)
 8000d12:	f006 fb2e 	bl	8007372 <HAL_SPI_GetState>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d1f9      	bne.n	8000d10 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000d1c:	1df9      	adds	r1, r7, #7
 8000d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d22:	2201      	movs	r2, #1
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <SPI_TxByte+0x30>)
 8000d26:	f006 f837 	bl	8006d98 <HAL_SPI_Transmit>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200002ec 	.word	0x200002ec

08000d38 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000d3e:	23ff      	movs	r3, #255	@ 0xff
 8000d40:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d46:	bf00      	nop
 8000d48:	4809      	ldr	r0, [pc, #36]	@ (8000d70 <SPI_RxByte+0x38>)
 8000d4a:	f006 fb12 	bl	8007372 <HAL_SPI_GetState>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d1f9      	bne.n	8000d48 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000d54:	1dba      	adds	r2, r7, #6
 8000d56:	1df9      	adds	r1, r7, #7
 8000d58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <SPI_RxByte+0x38>)
 8000d62:	f006 f95d 	bl	8007020 <HAL_SPI_TransmitReceive>
  
  return data;
 8000d66:	79bb      	ldrb	r3, [r7, #6]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200002ec 	.word	0x200002ec

08000d74 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000d7c:	f7ff ffdc 	bl	8000d38 <SPI_RxByte>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	701a      	strb	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <SD_ReadyWait+0x34>)
 8000d98:	2232      	movs	r2, #50	@ 0x32
 8000d9a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000d9c:	f7ff ffcc 	bl	8000d38 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000da0:	f7ff ffca 	bl	8000d38 <SPI_RxByte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2bff      	cmp	r3, #255	@ 0xff
 8000dac:	d004      	beq.n	8000db8 <SD_ReadyWait+0x28>
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <SD_ReadyWait+0x34>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f3      	bne.n	8000da0 <SD_ReadyWait+0x10>
  
  return res;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200007d1 	.word	0x200007d1

08000dc8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000dce:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000dd4:	f7ff ff8a 	bl	8000cec <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	e005      	b.n	8000dea <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000dde:	20ff      	movs	r0, #255	@ 0xff
 8000de0:	f7ff ff90 	bl	8000d04 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	3301      	adds	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	ddf6      	ble.n	8000dde <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000df0:	f7ff ff70 	bl	8000cd4 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000df4:	2340      	movs	r3, #64	@ 0x40
 8000df6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000e08:	2395      	movs	r3, #149	@ 0x95
 8000e0a:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e009      	b.n	8000e26 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000e12:	1d3a      	adds	r2, r7, #4
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff72 	bl	8000d04 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	ddf2      	ble.n	8000e12 <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000e2c:	e002      	b.n	8000e34 <SD_PowerOn+0x6c>
  {
    Count--;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000e34:	f7ff ff80 	bl	8000d38 <SPI_RxByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d002      	beq.n	8000e44 <SD_PowerOn+0x7c>
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f4      	bne.n	8000e2e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000e44:	f7ff ff52 	bl	8000cec <DESELECT>
  SPI_TxByte(0XFF);
 8000e48:	20ff      	movs	r0, #255	@ 0xff
 8000e4a:	f7ff ff5b 	bl	8000d04 <SPI_TxByte>
  
  PowerFlag = 1;
 8000e4e:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <SD_PowerOn+0x94>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000026d 	.word	0x2000026d

08000e60 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <SD_PowerOff+0x14>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000026d 	.word	0x2000026d

08000e78 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	@ (8000e88 <SD_CheckPower+0x10>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	2000026d 	.word	0x2000026d

08000e8c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <SD_RxDataBlock+0x68>)
 8000e98:	220a      	movs	r2, #10
 8000e9a:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000e9c:	f7ff ff4c 	bl	8000d38 <SPI_RxByte>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2bff      	cmp	r3, #255	@ 0xff
 8000ea8:	d104      	bne.n	8000eb4 <SD_RxDataBlock+0x28>
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <SD_RxDataBlock+0x68>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f3      	bne.n	8000e9c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000eb8:	d001      	beq.n	8000ebe <SD_RxDataBlock+0x32>
    return FALSE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e016      	b.n	8000eec <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff55 	bl	8000d74 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff4f 	bl	8000d74 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1ed      	bne.n	8000ebe <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000ee2:	f7ff ff29 	bl	8000d38 <SPI_RxByte>
  SPI_RxByte();
 8000ee6:	f7ff ff27 	bl	8000d38 <SPI_RxByte>
  
  return TRUE;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200007d0 	.word	0x200007d0

08000ef8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000f08:	f7ff ff42 	bl	8000d90 <SD_ReadyWait>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2bff      	cmp	r3, #255	@ 0xff
 8000f10:	d001      	beq.n	8000f16 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e040      	b.n	8000f98 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fef3 	bl	8000d04 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	2bfd      	cmp	r3, #253	@ 0xfd
 8000f22:	d031      	beq.n	8000f88 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fee7 	bl	8000d04 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fee0 	bl	8000d04 <SPI_TxByte>
    } while (--wc);
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	73bb      	strb	r3, [r7, #14]
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1eb      	bne.n	8000f28 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000f50:	f7ff fef2 	bl	8000d38 <SPI_RxByte>
    SPI_RxByte();
 8000f54:	f7ff fef0 	bl	8000d38 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000f58:	e00b      	b.n	8000f72 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000f5a:	f7ff feed 	bl	8000d38 <SPI_RxByte>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d006      	beq.n	8000f7a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000f6c:	7b7b      	ldrb	r3, [r7, #13]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000f72:	7b7b      	ldrb	r3, [r7, #13]
 8000f74:	2b40      	cmp	r3, #64	@ 0x40
 8000f76:	d9f0      	bls.n	8000f5a <SD_TxDataBlock+0x62>
 8000f78:	e000      	b.n	8000f7c <SD_TxDataBlock+0x84>
        break;
 8000f7a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000f7c:	bf00      	nop
 8000f7e:	f7ff fedb 	bl	8000d38 <SPI_RxByte>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0fa      	beq.n	8000f7e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	d101      	bne.n	8000f96 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000fac:	f7ff fef0 	bl	8000d90 <SD_ReadyWait>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2bff      	cmp	r3, #255	@ 0xff
 8000fb4:	d001      	beq.n	8000fba <SD_SendCmd+0x1a>
    return 0xFF;
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
 8000fb8:	e040      	b.n	800103c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fea1 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	0e1b      	lsrs	r3, r3, #24
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fe9b 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe95 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe8f 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe8a 	bl	8000d04 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b40      	cmp	r3, #64	@ 0x40
 8000ff8:	d101      	bne.n	8000ffe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000ffa:	2395      	movs	r3, #149	@ 0x95
 8000ffc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b48      	cmp	r3, #72	@ 0x48
 8001002:	d101      	bne.n	8001008 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001004:	2387      	movs	r3, #135	@ 0x87
 8001006:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fe7a 	bl	8000d04 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b4c      	cmp	r3, #76	@ 0x4c
 8001014:	d101      	bne.n	800101a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001016:	f7ff fe8f 	bl	8000d38 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800101a:	230a      	movs	r3, #10
 800101c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800101e:	f7ff fe8b 	bl	8000d38 <SPI_RxByte>
 8001022:	4603      	mov	r3, r0
 8001024:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001026:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800102a:	2b00      	cmp	r3, #0
 800102c:	da05      	bge.n	800103a <SD_SendCmd+0x9a>
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	3b01      	subs	r3, #1
 8001032:	73bb      	strb	r3, [r7, #14]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f1      	bne.n	800101e <SD_SendCmd+0x7e>
  
  return res;
 800103a:	7b7b      	ldrb	r3, [r7, #13]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001054:	2301      	movs	r3, #1
 8001056:	e0d5      	b.n	8001204 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001058:	4b6c      	ldr	r3, [pc, #432]	@ (800120c <SD_disk_initialize+0x1c8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <SD_disk_initialize+0x2a>
    return Stat;        
 8001066:	4b69      	ldr	r3, [pc, #420]	@ (800120c <SD_disk_initialize+0x1c8>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	e0ca      	b.n	8001204 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800106e:	f7ff feab 	bl	8000dc8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001072:	f7ff fe2f 	bl	8000cd4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800107a:	2100      	movs	r1, #0
 800107c:	2040      	movs	r0, #64	@ 0x40
 800107e:	f7ff ff8f 	bl	8000fa0 <SD_SendCmd>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	f040 80a5 	bne.w	80011d4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800108a:	4b61      	ldr	r3, [pc, #388]	@ (8001210 <SD_disk_initialize+0x1cc>)
 800108c:	2264      	movs	r2, #100	@ 0x64
 800108e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001090:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001094:	2048      	movs	r0, #72	@ 0x48
 8001096:	f7ff ff83 	bl	8000fa0 <SD_SendCmd>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d158      	bne.n	8001152 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e00c      	b.n	80010c0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80010a6:	7bfc      	ldrb	r4, [r7, #15]
 80010a8:	f7ff fe46 	bl	8000d38 <SPI_RxByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	f104 0310 	add.w	r3, r4, #16
 80010b4:	443b      	add	r3, r7
 80010b6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3301      	adds	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d9ef      	bls.n	80010a6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80010c6:	7abb      	ldrb	r3, [r7, #10]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 8083 	bne.w	80011d4 <SD_disk_initialize+0x190>
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	2baa      	cmp	r3, #170	@ 0xaa
 80010d2:	d17f      	bne.n	80011d4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80010d4:	2100      	movs	r1, #0
 80010d6:	2077      	movs	r0, #119	@ 0x77
 80010d8:	f7ff ff62 	bl	8000fa0 <SD_SendCmd>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d807      	bhi.n	80010f2 <SD_disk_initialize+0xae>
 80010e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010e6:	2069      	movs	r0, #105	@ 0x69
 80010e8:	f7ff ff5a 	bl	8000fa0 <SD_SendCmd>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80010f2:	4b47      	ldr	r3, [pc, #284]	@ (8001210 <SD_disk_initialize+0x1cc>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1eb      	bne.n	80010d4 <SD_disk_initialize+0x90>
 80010fc:	e000      	b.n	8001100 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80010fe:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001100:	4b43      	ldr	r3, [pc, #268]	@ (8001210 <SD_disk_initialize+0x1cc>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d064      	beq.n	80011d4 <SD_disk_initialize+0x190>
 800110a:	2100      	movs	r1, #0
 800110c:	207a      	movs	r0, #122	@ 0x7a
 800110e:	f7ff ff47 	bl	8000fa0 <SD_SendCmd>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d15d      	bne.n	80011d4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e00c      	b.n	8001138 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800111e:	7bfc      	ldrb	r4, [r7, #15]
 8001120:	f7ff fe0a 	bl	8000d38 <SPI_RxByte>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	f104 0310 	add.w	r3, r4, #16
 800112c:	443b      	add	r3, r7
 800112e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3301      	adds	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d9ef      	bls.n	800111e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800113e:	7a3b      	ldrb	r3, [r7, #8]
 8001140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SD_disk_initialize+0x108>
 8001148:	2306      	movs	r3, #6
 800114a:	e000      	b.n	800114e <SD_disk_initialize+0x10a>
 800114c:	2302      	movs	r3, #2
 800114e:	73bb      	strb	r3, [r7, #14]
 8001150:	e040      	b.n	80011d4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001152:	2100      	movs	r1, #0
 8001154:	2077      	movs	r0, #119	@ 0x77
 8001156:	f7ff ff23 	bl	8000fa0 <SD_SendCmd>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d808      	bhi.n	8001172 <SD_disk_initialize+0x12e>
 8001160:	2100      	movs	r1, #0
 8001162:	2069      	movs	r0, #105	@ 0x69
 8001164:	f7ff ff1c 	bl	8000fa0 <SD_SendCmd>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d801      	bhi.n	8001172 <SD_disk_initialize+0x12e>
 800116e:	2302      	movs	r3, #2
 8001170:	e000      	b.n	8001174 <SD_disk_initialize+0x130>
 8001172:	2301      	movs	r3, #1
 8001174:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d10e      	bne.n	800119a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800117c:	2100      	movs	r1, #0
 800117e:	2077      	movs	r0, #119	@ 0x77
 8001180:	f7ff ff0e 	bl	8000fa0 <SD_SendCmd>
 8001184:	4603      	mov	r3, r0
 8001186:	2b01      	cmp	r3, #1
 8001188:	d80e      	bhi.n	80011a8 <SD_disk_initialize+0x164>
 800118a:	2100      	movs	r1, #0
 800118c:	2069      	movs	r0, #105	@ 0x69
 800118e:	f7ff ff07 	bl	8000fa0 <SD_SendCmd>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d107      	bne.n	80011a8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001198:	e00d      	b.n	80011b6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800119a:	2100      	movs	r1, #0
 800119c:	2041      	movs	r0, #65	@ 0x41
 800119e:	f7ff feff 	bl	8000fa0 <SD_SendCmd>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80011a8:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <SD_disk_initialize+0x1cc>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1e1      	bne.n	8001176 <SD_disk_initialize+0x132>
 80011b2:	e000      	b.n	80011b6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80011b4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <SD_disk_initialize+0x1cc>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <SD_disk_initialize+0x18c>
 80011c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c4:	2050      	movs	r0, #80	@ 0x50
 80011c6:	f7ff feeb 	bl	8000fa0 <SD_SendCmd>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80011d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <SD_disk_initialize+0x1d0>)
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80011da:	f7ff fd87 	bl	8000cec <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80011de:	f7ff fdab 	bl	8000d38 <SPI_RxByte>
  
  if (type) 
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <SD_disk_initialize+0x1c8>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <SD_disk_initialize+0x1c8>)
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e001      	b.n	80011fe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80011fa:	f7ff fe31 	bl	8000e60 <SD_PowerOff>
  }
  
  return Stat;
 80011fe:	4b03      	ldr	r3, [pc, #12]	@ (800120c <SD_disk_initialize+0x1c8>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	200007d0 	.word	0x200007d0
 8001214:	2000026c 	.word	0x2000026c

08001218 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001228:	2301      	movs	r3, #1
 800122a:	e002      	b.n	8001232 <SD_disk_status+0x1a>
  
  return Stat;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <SD_disk_status+0x24>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20000000 	.word	0x20000000

08001240 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <SD_disk_read+0x1c>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <SD_disk_read+0x20>
    return RES_PARERR;
 800125c:	2304      	movs	r3, #4
 800125e:	e051      	b.n	8001304 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001260:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <SD_disk_read+0xcc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800126e:	2303      	movs	r3, #3
 8001270:	e048      	b.n	8001304 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001272:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <SD_disk_read+0xd0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	025b      	lsls	r3, r3, #9
 8001282:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001284:	f7ff fd26 	bl	8000cd4 <SELECT>
  
  if (count == 1) 
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d111      	bne.n	80012b2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2051      	movs	r0, #81	@ 0x51
 8001292:	f7ff fe85 	bl	8000fa0 <SD_SendCmd>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d129      	bne.n	80012f0 <SD_disk_read+0xb0>
 800129c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a0:	68b8      	ldr	r0, [r7, #8]
 80012a2:	f7ff fdf3 	bl	8000e8c <SD_RxDataBlock>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d021      	beq.n	80012f0 <SD_disk_read+0xb0>
      count = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	e01e      	b.n	80012f0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	2052      	movs	r0, #82	@ 0x52
 80012b6:	f7ff fe73 	bl	8000fa0 <SD_SendCmd>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d117      	bne.n	80012f0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80012c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f7ff fde1 	bl	8000e8c <SD_RxDataBlock>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00a      	beq.n	80012e6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012d6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3b01      	subs	r3, #1
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ed      	bne.n	80012c0 <SD_disk_read+0x80>
 80012e4:	e000      	b.n	80012e8 <SD_disk_read+0xa8>
          break;
 80012e6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80012e8:	2100      	movs	r1, #0
 80012ea:	204c      	movs	r0, #76	@ 0x4c
 80012ec:	f7ff fe58 	bl	8000fa0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80012f0:	f7ff fcfc 	bl	8000cec <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80012f4:	f7ff fd20 	bl	8000d38 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000000 	.word	0x20000000
 8001310:	2000026c 	.word	0x2000026c

08001314 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <SD_disk_write+0x1c>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <SD_disk_write+0x20>
    return RES_PARERR;
 8001330:	2304      	movs	r3, #4
 8001332:	e06b      	b.n	800140c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001334:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <SD_disk_write+0x100>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001342:	2303      	movs	r3, #3
 8001344:	e062      	b.n	800140c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001346:	4b33      	ldr	r3, [pc, #204]	@ (8001414 <SD_disk_write+0x100>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001354:	2302      	movs	r3, #2
 8001356:	e059      	b.n	800140c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001358:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <SD_disk_write+0x104>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800136a:	f7ff fcb3 	bl	8000cd4 <SELECT>
  
  if (count == 1) 
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d110      	bne.n	8001396 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	2058      	movs	r0, #88	@ 0x58
 8001378:	f7ff fe12 	bl	8000fa0 <SD_SendCmd>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d13a      	bne.n	80013f8 <SD_disk_write+0xe4>
 8001382:	21fe      	movs	r1, #254	@ 0xfe
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f7ff fdb7 	bl	8000ef8 <SD_TxDataBlock>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d033      	beq.n	80013f8 <SD_disk_write+0xe4>
      count = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	e030      	b.n	80013f8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <SD_disk_write+0x104>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80013a2:	2100      	movs	r1, #0
 80013a4:	2077      	movs	r0, #119	@ 0x77
 80013a6:	f7ff fdfb 	bl	8000fa0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	2057      	movs	r0, #87	@ 0x57
 80013ae:	f7ff fdf7 	bl	8000fa0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	2059      	movs	r0, #89	@ 0x59
 80013b6:	f7ff fdf3 	bl	8000fa0 <SD_SendCmd>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d11b      	bne.n	80013f8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80013c0:	21fc      	movs	r1, #252	@ 0xfc
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f7ff fd98 	bl	8000ef8 <SD_TxDataBlock>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80013d4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ee      	bne.n	80013c0 <SD_disk_write+0xac>
 80013e2:	e000      	b.n	80013e6 <SD_disk_write+0xd2>
          break;
 80013e4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80013e6:	21fd      	movs	r1, #253	@ 0xfd
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fd85 	bl	8000ef8 <SD_TxDataBlock>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80013f8:	f7ff fc78 	bl	8000cec <DESELECT>
  SPI_RxByte();
 80013fc:	f7ff fc9c 	bl	8000d38 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf14      	ite	ne
 8001406:	2301      	movne	r3, #1
 8001408:	2300      	moveq	r3, #0
 800140a:	b2db      	uxtb	r3, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	2000026c 	.word	0x2000026c

0800141c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08b      	sub	sp, #44	@ 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	603a      	str	r2, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
 8001428:	460b      	mov	r3, r1
 800142a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001436:	2304      	movs	r3, #4
 8001438:	e119      	b.n	800166e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	2b05      	cmp	r3, #5
 8001444:	d129      	bne.n	800149a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d017      	beq.n	800147e <SD_disk_ioctl+0x62>
 800144e:	2b02      	cmp	r3, #2
 8001450:	dc1f      	bgt.n	8001492 <SD_disk_ioctl+0x76>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <SD_disk_ioctl+0x40>
 8001456:	2b01      	cmp	r3, #1
 8001458:	d00b      	beq.n	8001472 <SD_disk_ioctl+0x56>
 800145a:	e01a      	b.n	8001492 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800145c:	f7ff fd0c 	bl	8000e78 <SD_CheckPower>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001466:	f7ff fcfb 	bl	8000e60 <SD_PowerOff>
      res = RES_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001470:	e0fb      	b.n	800166a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001472:	f7ff fca9 	bl	8000dc8 <SD_PowerOn>
      res = RES_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800147c:	e0f5      	b.n	800166a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	1c5c      	adds	r4, r3, #1
 8001482:	f7ff fcf9 	bl	8000e78 <SD_CheckPower>
 8001486:	4603      	mov	r3, r0
 8001488:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800148a:	2300      	movs	r3, #0
 800148c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001490:	e0eb      	b.n	800166a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001492:	2304      	movs	r3, #4
 8001494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001498:	e0e7      	b.n	800166a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800149a:	4b77      	ldr	r3, [pc, #476]	@ (8001678 <SD_disk_ioctl+0x25c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0e0      	b.n	800166e <SD_disk_ioctl+0x252>
    
    SELECT();
 80014ac:	f7ff fc12 	bl	8000cd4 <SELECT>
    
    switch (ctrl) 
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	2b0d      	cmp	r3, #13
 80014b4:	f200 80ca 	bhi.w	800164c <SD_disk_ioctl+0x230>
 80014b8:	a201      	add	r2, pc, #4	@ (adr r2, 80014c0 <SD_disk_ioctl+0xa4>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080015b7 	.word	0x080015b7
 80014c4:	080014f9 	.word	0x080014f9
 80014c8:	080015a7 	.word	0x080015a7
 80014cc:	0800164d 	.word	0x0800164d
 80014d0:	0800164d 	.word	0x0800164d
 80014d4:	0800164d 	.word	0x0800164d
 80014d8:	0800164d 	.word	0x0800164d
 80014dc:	0800164d 	.word	0x0800164d
 80014e0:	0800164d 	.word	0x0800164d
 80014e4:	0800164d 	.word	0x0800164d
 80014e8:	0800164d 	.word	0x0800164d
 80014ec:	080015c9 	.word	0x080015c9
 80014f0:	080015ed 	.word	0x080015ed
 80014f4:	08001611 	.word	0x08001611
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80014f8:	2100      	movs	r1, #0
 80014fa:	2049      	movs	r0, #73	@ 0x49
 80014fc:	f7ff fd50 	bl	8000fa0 <SD_SendCmd>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 80a6 	bne.w	8001654 <SD_disk_ioctl+0x238>
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2110      	movs	r1, #16
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fcbc 	bl	8000e8c <SD_RxDataBlock>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 809c 	beq.w	8001654 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	099b      	lsrs	r3, r3, #6
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10d      	bne.n	8001542 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001526:	7d7b      	ldrb	r3, [r7, #21]
 8001528:	461a      	mov	r2, r3
 800152a:	7d3b      	ldrb	r3, [r7, #20]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	4413      	add	r3, r2
 8001532:	b29b      	uxth	r3, r3
 8001534:	3301      	adds	r3, #1
 8001536:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001538:	8bfb      	ldrh	r3, [r7, #30]
 800153a:	029a      	lsls	r2, r3, #10
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e02d      	b.n	800159e <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001542:	7c7b      	ldrb	r3, [r7, #17]
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	b2da      	uxtb	r2, r3
 800154a:	7dbb      	ldrb	r3, [r7, #22]
 800154c:	09db      	lsrs	r3, r3, #7
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b2da      	uxtb	r2, r3
 8001554:	7d7b      	ldrb	r3, [r7, #21]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0306 	and.w	r3, r3, #6
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3302      	adds	r3, #2
 8001566:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800156a:	7d3b      	ldrb	r3, [r7, #20]
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	b2db      	uxtb	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	b29b      	uxth	r3, r3
 8001578:	4413      	add	r3, r2
 800157a:	b29a      	uxth	r2, r3
 800157c:	7cbb      	ldrb	r3, [r7, #18]
 800157e:	029b      	lsls	r3, r3, #10
 8001580:	b29b      	uxth	r3, r3
 8001582:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001586:	b29b      	uxth	r3, r3
 8001588:	4413      	add	r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	3301      	adds	r3, #1
 800158e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001590:	8bfa      	ldrh	r2, [r7, #30]
 8001592:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001596:	3b09      	subs	r3, #9
 8001598:	409a      	lsls	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80015a4:	e056      	b.n	8001654 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ac:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80015b4:	e055      	b.n	8001662 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80015b6:	f7ff fbeb 	bl	8000d90 <SD_ReadyWait>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2bff      	cmp	r3, #255	@ 0xff
 80015be:	d14b      	bne.n	8001658 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80015c6:	e047      	b.n	8001658 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015c8:	2100      	movs	r1, #0
 80015ca:	2049      	movs	r0, #73	@ 0x49
 80015cc:	f7ff fce8 	bl	8000fa0 <SD_SendCmd>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d142      	bne.n	800165c <SD_disk_ioctl+0x240>
 80015d6:	2110      	movs	r1, #16
 80015d8:	6a38      	ldr	r0, [r7, #32]
 80015da:	f7ff fc57 	bl	8000e8c <SD_RxDataBlock>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03b      	beq.n	800165c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80015ea:	e037      	b.n	800165c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015ec:	2100      	movs	r1, #0
 80015ee:	204a      	movs	r0, #74	@ 0x4a
 80015f0:	f7ff fcd6 	bl	8000fa0 <SD_SendCmd>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d132      	bne.n	8001660 <SD_disk_ioctl+0x244>
 80015fa:	2110      	movs	r1, #16
 80015fc:	6a38      	ldr	r0, [r7, #32]
 80015fe:	f7ff fc45 	bl	8000e8c <SD_RxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d02b      	beq.n	8001660 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800160e:	e027      	b.n	8001660 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001610:	2100      	movs	r1, #0
 8001612:	207a      	movs	r0, #122	@ 0x7a
 8001614:	f7ff fcc4 	bl	8000fa0 <SD_SendCmd>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d116      	bne.n	800164c <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001624:	e00b      	b.n	800163e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001626:	6a3c      	ldr	r4, [r7, #32]
 8001628:	1c63      	adds	r3, r4, #1
 800162a:	623b      	str	r3, [r7, #32]
 800162c:	f7ff fb84 	bl	8000d38 <SPI_RxByte>
 8001630:	4603      	mov	r3, r0
 8001632:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001634:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001638:	3301      	adds	r3, #1
 800163a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800163e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001642:	2b03      	cmp	r3, #3
 8001644:	d9ef      	bls.n	8001626 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 800164c:	2304      	movs	r3, #4
 800164e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001652:	e006      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 8001654:	bf00      	nop
 8001656:	e004      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 8001658:	bf00      	nop
 800165a:	e002      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 800165c:	bf00      	nop
 800165e:	e000      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 8001660:	bf00      	nop
    }
    
    DESELECT();
 8001662:	f7ff fb43 	bl	8000cec <DESELECT>
    SPI_RxByte();
 8001666:	f7ff fb67 	bl	8000d38 <SPI_RxByte>
  }
  
  return res;
 800166a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800166e:	4618      	mov	r0, r3
 8001670:	372c      	adds	r7, #44	@ 0x2c
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000

0800167c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001684:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001688:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001694:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001698:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800169c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016a4:	e000      	b.n	80016a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f9      	beq.n	80016a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016b2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08b      	sub	sp, #44	@ 0x2c
 80016cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ce:	f000 fe2d 	bl	800232c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d2:	f000 f8b5 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d6:	f000 f9fd 	bl	8001ad4 <MX_GPIO_Init>
  MX_CAN_Init();
 80016da:	f000 f8f1 	bl	80018c0 <MX_CAN_Init>
  MX_I2C1_Init();
 80016de:	f000 f941 	bl	8001964 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016e2:	f000 f9a3 	bl	8001a2c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 f9cb 	bl	8001a80 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80016ea:	f000 f969 	bl	80019c0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80016ee:	f006 fda7 	bl	8008240 <MX_FATFS_Init>
//    AT24Cxx_t pEeprom;
//  AT24Cxx_Init(&pEeprom, 0x50, &hi2c1);
//  char *text_program_1 = "Program test2,74hc560,20";
//  AT24Cxx_write_buffer_bloking(&pEeprom,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)text_program_1,strlen(text_program_1));

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 80016f2:	2264      	movs	r2, #100	@ 0x64
 80016f4:	4940      	ldr	r1, [pc, #256]	@ (80017f8 <main+0x130>)
 80016f6:	4841      	ldr	r0, [pc, #260]	@ (80017fc <main+0x134>)
 80016f8:	f005 ffdc 	bl	80076b4 <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_CAN_Start(&hcan);
 80016fc:	4840      	ldr	r0, [pc, #256]	@ (8001800 <main+0x138>)
 80016fe:	f001 f85f 	bl	80027c0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
 8001702:	2111      	movs	r1, #17
 8001704:	483e      	ldr	r0, [pc, #248]	@ (8001800 <main+0x138>)
 8001706:	f001 fab2 	bl	8002c6e <HAL_CAN_ActivateNotification>

    for (uint8_t i = 0; i < 5; i++) {
 800170a:	2300      	movs	r3, #0
 800170c:	77fb      	strb	r3, [r7, #31]
 800170e:	e005      	b.n	800171c <main+0x54>
  	printf("SWO Debug!!!\n");
 8001710:	483c      	ldr	r0, [pc, #240]	@ (8001804 <main+0x13c>)
 8001712:	f00c fc91 	bl	800e038 <puts>
    for (uint8_t i = 0; i < 5; i++) {
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	3301      	adds	r3, #1
 800171a:	77fb      	strb	r3, [r7, #31]
 800171c:	7ffb      	ldrb	r3, [r7, #31]
 800171e:	2b04      	cmp	r3, #4
 8001720:	d9f6      	bls.n	8001710 <main+0x48>
    }

  BSP_init();
 8001722:	f008 feed 	bl	800a500 <BSP_init>

  Post_task_init();
 8001726:	f008 ff2f 	bl	800a588 <Post_task_init>
  static OS_event_t const *q_app_post[10];
  OS_task_create(AO_taskPost,
 800172a:	4b37      	ldr	r3, [pc, #220]	@ (8001808 <main+0x140>)
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	2300      	movs	r3, #0
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	230a      	movs	r3, #10
 8001734:	4a35      	ldr	r2, [pc, #212]	@ (800180c <main+0x144>)
 8001736:	2101      	movs	r1, #1
 8001738:	f00a fab9 	bl	800bcae <OS_task_create>
  1,
  q_app_post,
  ARRAY_ELEMENT(q_app_post),
  (OS_event_t *)0 );

  eeprom_task_init(&hi2c1,EEPROM_ADDRESS);
 800173c:	2150      	movs	r1, #80	@ 0x50
 800173e:	4834      	ldr	r0, [pc, #208]	@ (8001810 <main+0x148>)
 8001740:	f008 fb9c 	bl	8009e7c <eeprom_task_init>
  static OS_event_t const *q_eeprom_event[10];
  OS_task_create( AO_task_eeprom,
 8001744:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <main+0x14c>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	230a      	movs	r3, #10
 800174e:	4a32      	ldr	r2, [pc, #200]	@ (8001818 <main+0x150>)
 8001750:	2101      	movs	r1, #1
 8001752:	f00a faac 	bl	800bcae <OS_task_create>
//  1,
//  q_uart_esp32_event,
//  ARRAY_ELEMENT(q_uart_esp32_event),
//  (OS_event_t *)0);
//
  BlinkyTest_app_init();
 8001756:	f008 ffd9 	bl	800a70c <BlinkyTest_app_init>
  static OS_event_t const *TestOS_blinky[10]; /* Event queue */
  OS_task_create(
 800175a:	4b30      	ldr	r3, [pc, #192]	@ (800181c <main+0x154>)
 800175c:	681c      	ldr	r4, [r3, #0]
 800175e:	f008 fefd 	bl	800a55c <TestOS_Work>
 8001762:	4603      	mov	r3, r0
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	230a      	movs	r3, #10
 8001768:	4a2d      	ldr	r2, [pc, #180]	@ (8001820 <main+0x158>)
 800176a:	2101      	movs	r1, #1
 800176c:	4620      	mov	r0, r4
 800176e:	f00a fa9e 	bl	800bcae <OS_task_create>
  TestOS_blinky,
  ARRAY_ELEMENT(TestOS_blinky),
  TestOS_Work()
  );

  screen_task_init();
 8001772:	f008 ff7f 	bl	800a674 <screen_task_init>
  static OS_event_t const *q_screen[10]; /* Event queue */
  OS_task_create(
 8001776:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <main+0x15c>)
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	2300      	movs	r3, #0
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	230a      	movs	r3, #10
 8001780:	4a29      	ldr	r2, [pc, #164]	@ (8001828 <main+0x160>)
 8001782:	2101      	movs	r1, #1
 8001784:	f00a fa93 	bl	800bcae <OS_task_create>
  // OS_task_create( AO_task_can_bus,
  // 1,
  // Can_app_event,
  // ARRAY_ELEMENT(Can_app_event),
  // (OS_event_t *)0);
    HAL_Delay(3000);
 8001788:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800178c:	f000 fe30 	bl	80023f0 <HAL_Delay>
    Screen_begin(&huart2);
 8001790:	481a      	ldr	r0, [pc, #104]	@ (80017fc <main+0x134>)
 8001792:	f006 fe1b 	bl	80083cc <Screen_begin>

  TxHeader.DLC = 5;
 8001796:	4b25      	ldr	r3, [pc, #148]	@ (800182c <main+0x164>)
 8001798:	2205      	movs	r2, #5
 800179a:	611a      	str	r2, [r3, #16]
  TxHeader.StdId = 0x103;
 800179c:	4b23      	ldr	r3, [pc, #140]	@ (800182c <main+0x164>)
 800179e:	f240 1203 	movw	r2, #259	@ 0x103
 80017a2:	601a      	str	r2, [r3, #0]
  TxHeader.IDE = CAN_ID_STD;
 80017a4:	4b21      	ldr	r3, [pc, #132]	@ (800182c <main+0x164>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80017aa:	4b20      	ldr	r3, [pc, #128]	@ (800182c <main+0x164>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]

  uint8_t data_tx[5] = {'H','E','L','L','O'};
 80017b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001830 <main+0x168>)
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ba:	6018      	str	r0, [r3, #0]
 80017bc:	3304      	adds	r3, #4
 80017be:	7019      	strb	r1, [r3, #0]
//  HAL_CAN_AddTxMessage(&hcan,&TxHeader, data_tx, &TxMailbox);

  uint8_t data_time[7];
  DS3231_t ds3231;
  DS3231_Init(&ds3231,&hi2c1,ADDRESS_DS3231);
 80017c0:	463b      	mov	r3, r7
 80017c2:	2268      	movs	r2, #104	@ 0x68
 80017c4:	4912      	ldr	r1, [pc, #72]	@ (8001810 <main+0x148>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f009 fb1c 	bl	800ae04 <DS3231_Init>
//  DS3231_Write_time(&ds3231,00,18,18,7,31,6,25);
  DS3231_Read_time(&ds3231, data_time);
 80017cc:	f107 0208 	add.w	r2, r7, #8
 80017d0:	463b      	mov	r3, r7
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f009 fb38 	bl	800ae4a <DS3231_Read_time>

  isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
 80017da:	23fa      	movs	r3, #250	@ 0xfa
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <main+0x16c>)
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	23fa      	movs	r3, #250	@ 0xfa
 80017e4:	4a14      	ldr	r2, [pc, #80]	@ (8001838 <main+0x170>)
 80017e6:	f240 1131 	movw	r1, #305	@ 0x131
 80017ea:	4814      	ldr	r0, [pc, #80]	@ (800183c <main+0x174>)
 80017ec:	f00a f9a6 	bl	800bb3c <isotp_init_link>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t pre;
  pre = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61bb      	str	r3, [r7, #24]
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <main+0x12c>
 80017f8:	200006cc 	.word	0x200006cc
 80017fc:	2000038c 	.word	0x2000038c
 8001800:	20000270 	.word	0x20000270
 8001804:	08010b9c 	.word	0x08010b9c
 8001808:	080111dc 	.word	0x080111dc
 800180c:	20000730 	.word	0x20000730
 8001810:	20000298 	.word	0x20000298
 8001814:	080111d8 	.word	0x080111d8
 8001818:	20000758 	.word	0x20000758
 800181c:	080111e8 	.word	0x080111e8
 8001820:	20000780 	.word	0x20000780
 8001824:	080111e0 	.word	0x080111e0
 8001828:	200007a8 	.word	0x200007a8
 800182c:	200003d4 	.word	0x200003d4
 8001830:	08010bac 	.word	0x08010bac
 8001834:	200004d4 	.word	0x200004d4
 8001838:	200005d0 	.word	0x200005d0
 800183c:	20000414 	.word	0x20000414

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b090      	sub	sp, #64	@ 0x40
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0318 	add.w	r3, r7, #24
 800184a:	2228      	movs	r2, #40	@ 0x28
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f00c fd3a 	bl	800e2c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001866:	2301      	movs	r3, #1
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186a:	2310      	movs	r3, #16
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	2302      	movs	r3, #2
 8001870:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001872:	2300      	movs	r3, #0
 8001874:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001876:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800187a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4618      	mov	r0, r3
 8001882:	f004 fdf5 	bl	8006470 <HAL_RCC_OscConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800188c:	f000 fa51 	bl	8001d32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001890:	230f      	movs	r3, #15
 8001892:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001894:	2302      	movs	r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f005 f863 	bl	8006974 <HAL_RCC_ClockConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80018b4:	f000 fa3d 	bl	8001d32 <Error_Handler>
  }
}
 80018b8:	bf00      	nop
 80018ba:	3740      	adds	r7, #64	@ 0x40
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80018c6:	4b25      	ldr	r3, [pc, #148]	@ (800195c <MX_CAN_Init+0x9c>)
 80018c8:	4a25      	ldr	r2, [pc, #148]	@ (8001960 <MX_CAN_Init+0xa0>)
 80018ca:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80018cc:	4b23      	ldr	r3, [pc, #140]	@ (800195c <MX_CAN_Init+0x9c>)
 80018ce:	2204      	movs	r2, #4
 80018d0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <MX_CAN_Init+0x9c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <MX_CAN_Init+0x9c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <MX_CAN_Init+0x9c>)
 80018e0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80018e4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <MX_CAN_Init+0x9c>)
 80018e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80018ec:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80018ee:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <MX_CAN_Init+0x9c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <MX_CAN_Init+0x9c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <MX_CAN_Init+0x9c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <MX_CAN_Init+0x9c>)
 8001902:	2200      	movs	r2, #0
 8001904:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <MX_CAN_Init+0x9c>)
 8001908:	2200      	movs	r2, #0
 800190a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <MX_CAN_Init+0x9c>)
 800190e:	2200      	movs	r2, #0
 8001910:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001912:	4812      	ldr	r0, [pc, #72]	@ (800195c <MX_CAN_Init+0x9c>)
 8001914:	f000 fd90 	bl	8002438 <HAL_CAN_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800191e:	f000 fa08 	bl	8001d32 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001922:	2301      	movs	r3, #1
 8001924:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8001926:	230a      	movs	r3, #10
 8001928:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800192a:	2301      	movs	r3, #1
 800192c:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001942:	2301      	movs	r3, #1
 8001944:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800194a:	463b      	mov	r3, r7
 800194c:	4619      	mov	r1, r3
 800194e:	4803      	ldr	r0, [pc, #12]	@ (800195c <MX_CAN_Init+0x9c>)
 8001950:	f000 fe6d 	bl	800262e <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	@ 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000270 	.word	0x20000270
 8001960:	40006400 	.word	0x40006400

08001964 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <MX_I2C1_Init+0x50>)
 800196a:	4a13      	ldr	r2, [pc, #76]	@ (80019b8 <MX_I2C1_Init+0x54>)
 800196c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_I2C1_Init+0x50>)
 8001970:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <MX_I2C1_Init+0x58>)
 8001972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_I2C1_Init+0x50>)
 8001982:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001986:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001988:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <MX_I2C1_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_I2C1_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <MX_I2C1_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_I2C1_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	@ (80019b4 <MX_I2C1_Init+0x50>)
 80019a2:	f001 ff43 	bl	800382c <HAL_I2C_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019ac:	f000 f9c1 	bl	8001d32 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000298 	.word	0x20000298
 80019b8:	40005400 	.word	0x40005400
 80019bc:	00061a80 	.word	0x00061a80

080019c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019c4:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <MX_SPI1_Init+0x64>)
 80019c6:	4a18      	ldr	r2, [pc, #96]	@ (8001a28 <MX_SPI1_Init+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ca:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <MX_SPI1_Init+0x64>)
 80019cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <MX_SPI1_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <MX_SPI1_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <MX_SPI1_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <MX_SPI1_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <MX_SPI1_Init+0x64>)
 80019ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <MX_SPI1_Init+0x64>)
 80019f4:	2218      	movs	r2, #24
 80019f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <MX_SPI1_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <MX_SPI1_Init+0x64>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <MX_SPI1_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <MX_SPI1_Init+0x64>)
 8001a0c:	220a      	movs	r2, #10
 8001a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <MX_SPI1_Init+0x64>)
 8001a12:	f005 f93d 	bl	8006c90 <HAL_SPI_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a1c:	f000 f989 	bl	8001d32 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200002ec 	.word	0x200002ec
 8001a28:	40013000 	.word	0x40013000

08001a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <MX_USART1_UART_Init+0x4c>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <MX_USART1_UART_Init+0x50>)
 8001a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <MX_USART1_UART_Init+0x4c>)
 8001a38:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <MX_USART1_UART_Init+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <MX_USART1_UART_Init+0x4c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <MX_USART1_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a50:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <MX_USART1_UART_Init+0x4c>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <MX_USART1_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <MX_USART1_UART_Init+0x4c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a62:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <MX_USART1_UART_Init+0x4c>)
 8001a64:	f005 fd4b 	bl	80074fe <HAL_UART_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a6e:	f000 f960 	bl	8001d32 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000344 	.word	0x20000344
 8001a7c:	40013800 	.word	0x40013800

08001a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <MX_USART2_UART_Init+0x50>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a8c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	@ (8001acc <MX_USART2_UART_Init+0x4c>)
 8001ab8:	f005 fd21 	bl	80074fe <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f000 f936 	bl	8001d32 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000038c 	.word	0x2000038c
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <MX_GPIO_Init+0x98>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a1f      	ldr	r2, [pc, #124]	@ (8001b6c <MX_GPIO_Init+0x98>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <MX_GPIO_Init+0x98>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <MX_GPIO_Init+0x98>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <MX_GPIO_Init+0x98>)
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <MX_GPIO_Init+0x98>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	4814      	ldr	r0, [pc, #80]	@ (8001b70 <MX_GPIO_Init+0x9c>)
 8001b1e:	f001 fe6d 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	4813      	ldr	r0, [pc, #76]	@ (8001b74 <MX_GPIO_Init+0xa0>)
 8001b28:	f001 fe68 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_PIN_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	4619      	mov	r1, r3
 8001b42:	480b      	ldr	r0, [pc, #44]	@ (8001b70 <MX_GPIO_Init+0x9c>)
 8001b44:	f001 fcd6 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2302      	movs	r3, #2
 8001b56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <MX_GPIO_Init+0xa0>)
 8001b60:	f001 fcc8 	bl	80034f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010800 	.word	0x40010800
 8001b74:	40010c00 	.word	0x40010c00

08001b78 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d10c      	bne.n	8001baa <HAL_UARTEx_RxEventCallback+0x32>

		// Call to callback function screen
		Screen_RX_data(dataRX);
 8001b90:	4809      	ldr	r0, [pc, #36]	@ (8001bb8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001b92:	f006 fc55 	bl	8008440 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 8001b96:	2264      	movs	r2, #100	@ 0x64
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4807      	ldr	r0, [pc, #28]	@ (8001bb8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001b9c:	f00c fb94 	bl	800e2c8 <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8001ba0:	2264      	movs	r2, #100	@ 0x64
 8001ba2:	4905      	ldr	r1, [pc, #20]	@ (8001bb8 <HAL_UARTEx_RxEventCallback+0x40>)
 8001ba4:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001ba6:	f005 fd85 	bl	80076b4 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000038c 	.word	0x2000038c
 8001bb8:	200006cc 	.word	0x200006cc

08001bbc <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance) {

		
	}
  /* Transmit complete wait eeprom write */
	if (AO_task_eeprom->dispatch != NULL && AO_task_eeprom->init != NULL ) {
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_I2C_MemTxCpltCallback+0x34>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_I2C_MemTxCpltCallback+0x2a>
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_I2C_MemTxCpltCallback+0x34>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_I2C_MemTxCpltCallback+0x2a>
	  OS_task_post_event(AO_task_eeprom, WAIT_WRITE_TIMEOUT, (uint8_t *)0, 0);
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <HAL_I2C_MemTxCpltCallback+0x34>)
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	f00a f905 	bl	800bdf0 <OS_task_post_event>
	}
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	080111d8 	.word	0x080111d8

08001bf4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c04:	6018      	str	r0, [r3, #0]
	uint8_t payload[500];
  uint16_t act_size = 0;
 8001c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0a:	f5a3 73fb 	sub.w	r3, r3, #502	@ 0x1f6
 8001c0e:	2200      	movs	r2, #0
 8001c10:	801a      	strh	r2, [r3, #0]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c16:	f5a3 70fe 	sub.w	r0, r3, #508	@ 0x1fc
 8001c1a:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <HAL_CAN_RxFifo1MsgPendingCallback+0x84>)
 8001c1c:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	6800      	ldr	r0, [r0, #0]
 8001c22:	f000 ff03 	bl	8002a2c <HAL_CAN_GetRxMessage>
  if (RxHeader.StdId == 0x471) {
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f240 4271 	movw	r2, #1137	@ 0x471
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d11c      	bne.n	8001c6c <HAL_CAN_RxFifo1MsgPendingCallback+0x78>
    isotp_on_can_message(&CAN_iso[0], RxData, RxHeader.DLC);
 8001c32:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	490f      	ldr	r1, [pc, #60]	@ (8001c78 <HAL_CAN_RxFifo1MsgPendingCallback+0x84>)
 8001c3c:	4810      	ldr	r0, [pc, #64]	@ (8001c80 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8001c3e:	f009 fdff 	bl	800b840 <isotp_on_can_message>
    //printf("%x,%c,%c,%c,%c,%c,%c,%c\n",RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
    if (CAN_iso[0].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8001c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d10f      	bne.n	8001c6c <HAL_CAN_RxFifo1MsgPendingCallback+0x78>
      isotp_receive(&CAN_iso[0], payload, sizeof(payload), &act_size);
 8001c4c:	f107 030a 	add.w	r3, r7, #10
 8001c50:	f107 010c 	add.w	r1, r7, #12
 8001c54:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c58:	4809      	ldr	r0, [pc, #36]	@ (8001c80 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8001c5a:	f009 ff43 	bl	800bae4 <isotp_receive>
      get_data_testing_finish(&_Screen,DEVICE_1,payload);
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	461a      	mov	r2, r3
 8001c64:	2100      	movs	r1, #0
 8001c66:	4807      	ldr	r0, [pc, #28]	@ (8001c84 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8001c68:	f007 ff2a 	bl	8009ac0 <get_data_testing_finish>
    }
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000408 	.word	0x20000408
 8001c7c:	200003ec 	.word	0x200003ec
 8001c80:	20000414 	.word	0x20000414
 8001c84:	200007f0 	.word	0x200007f0

08001c88 <_write>:

int _write(int file, char *ptr, int len) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e009      	b.n	8001cae <_write+0x26>
        ITM_SendChar(ptr[i]);
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fcea 	bl	800167c <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dbf1      	blt.n	8001c9a <_write+0x12>
    }
    return len;
 8001cb6:	687b      	ldr	r3, [r7, #4]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <isotp_user_send_can>:

/* FUNCTION USING IN CAN ISO TP */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	71fb      	strb	r3, [r7, #7]
  TxHeader.DLC = size;
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <isotp_user_send_can+0x48>)
 8001cd2:	6113      	str	r3, [r2, #16]
  TxHeader.StdId = arbitration_id;
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d08 <isotp_user_send_can+0x48>)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6013      	str	r3, [r2, #0]
  TxHeader.IDE = CAN_ID_STD;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <isotp_user_send_can+0x48>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <isotp_user_send_can+0x48>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]

  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) == HAL_OK) {
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <isotp_user_send_can+0x4c>)
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	4907      	ldr	r1, [pc, #28]	@ (8001d08 <isotp_user_send_can+0x48>)
 8001cec:	4808      	ldr	r0, [pc, #32]	@ (8001d10 <isotp_user_send_can+0x50>)
 8001cee:	f000 fdab 	bl	8002848 <HAL_CAN_AddTxMessage>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <isotp_user_send_can+0x3c>
	  return ISOTP_RET_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e001      	b.n	8001d00 <isotp_user_send_can+0x40>
  }
  return ISOTP_RET_ERROR;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200003d4 	.word	0x200003d4
 8001d0c:	20000410 	.word	0x20000410
 8001d10:	20000270 	.word	0x20000270

08001d14 <isotp_user_get_ms>:


uint32_t isotp_user_get_ms(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001d18:	f000 fb60 	bl	80023dc <HAL_GetTick>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <isotp_user_debug>:

void isotp_user_debug(const char* message, ...) {
 8001d22:	b40f      	push	{r0, r1, r2, r3}
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	b004      	add	sp, #16
 8001d30:	4770      	bx	lr

08001d32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d36:	b672      	cpsid	i
}
 8001d38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3a:	bf00      	nop
 8001d3c:	e7fd      	b.n	8001d3a <Error_Handler+0x8>
	...

08001d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_MspInit+0x5c>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <HAL_MspInit+0x5c>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6193      	str	r3, [r2, #24]
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_MspInit+0x5c>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <HAL_MspInit+0x5c>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a0e      	ldr	r2, [pc, #56]	@ (8001d9c <HAL_MspInit+0x5c>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <HAL_MspInit+0x5c>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_MspInit+0x60>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	@ (8001da0 <HAL_MspInit+0x60>)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000

08001da4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <HAL_CAN_MspInit+0xac>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d141      	bne.n	8001e48 <HAL_CAN_MspInit+0xa4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dc4:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_CAN_MspInit+0xb0>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	4a22      	ldr	r2, [pc, #136]	@ (8001e54 <HAL_CAN_MspInit+0xb0>)
 8001dca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dce:	61d3      	str	r3, [r2, #28]
 8001dd0:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_CAN_MspInit+0xb0>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <HAL_CAN_MspInit+0xb0>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e54 <HAL_CAN_MspInit+0xb0>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <HAL_CAN_MspInit+0xb0>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001df4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001df8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	4619      	mov	r1, r3
 8001e08:	4813      	ldr	r0, [pc, #76]	@ (8001e58 <HAL_CAN_MspInit+0xb4>)
 8001e0a:	f001 fb73 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	480d      	ldr	r0, [pc, #52]	@ (8001e58 <HAL_CAN_MspInit+0xb4>)
 8001e24:	f001 fb66 	bl	80034f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2013      	movs	r0, #19
 8001e2e:	f001 fa5c 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001e32:	2013      	movs	r0, #19
 8001e34:	f001 fa75 	bl	8003322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2015      	movs	r0, #21
 8001e3e:	f001 fa54 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001e42:	2015      	movs	r0, #21
 8001e44:	f001 fa6d 	bl	8003322 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001e48:	bf00      	nop
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40006400 	.word	0x40006400
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010800 	.word	0x40010800

08001e5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <HAL_I2C_MspInit+0x80>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d12b      	bne.n	8001ed4 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <HAL_I2C_MspInit+0x84>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <HAL_I2C_MspInit+0x84>)
 8001e82:	f043 0308 	orr.w	r3, r3, #8
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_I2C_MspInit+0x84>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e94:	23c0      	movs	r3, #192	@ 0xc0
 8001e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e98:	2312      	movs	r3, #18
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480f      	ldr	r0, [pc, #60]	@ (8001ee4 <HAL_I2C_MspInit+0x88>)
 8001ea8:	f001 fb24 	bl	80034f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_I2C_MspInit+0x84>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee0 <HAL_I2C_MspInit+0x84>)
 8001eb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eb6:	61d3      	str	r3, [r2, #28]
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_I2C_MspInit+0x84>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	201f      	movs	r0, #31
 8001eca:	f001 fa0e 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ece:	201f      	movs	r0, #31
 8001ed0:	f001 fa27 	bl	8003322 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ed4:	bf00      	nop
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40005400 	.word	0x40005400
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010c00 	.word	0x40010c00

08001ee8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d12f      	bne.n	8001f68 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_SPI_MspInit+0x8c>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_SPI_MspInit+0x8c>)
 8001f0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <HAL_SPI_MspInit+0x8c>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <HAL_SPI_MspInit+0x8c>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a13      	ldr	r2, [pc, #76]	@ (8001f74 <HAL_SPI_MspInit+0x8c>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_SPI_MspInit+0x8c>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f38:	23a0      	movs	r3, #160	@ 0xa0
 8001f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480b      	ldr	r0, [pc, #44]	@ (8001f78 <HAL_SPI_MspInit+0x90>)
 8001f4c:	f001 fad2 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f50:	2340      	movs	r3, #64	@ 0x40
 8001f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4619      	mov	r1, r3
 8001f62:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <HAL_SPI_MspInit+0x90>)
 8001f64:	f001 fac6 	bl	80034f4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40013000 	.word	0x40013000
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010800 	.word	0x40010800

08001f7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0318 	add.w	r3, r7, #24
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a3f      	ldr	r2, [pc, #252]	@ (8002094 <HAL_UART_MspInit+0x118>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d13a      	bne.n	8002012 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a3d      	ldr	r2, [pc, #244]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 8001fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	4b38      	ldr	r3, [pc, #224]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a37      	ldr	r2, [pc, #220]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b35      	ldr	r3, [pc, #212]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	4619      	mov	r1, r3
 8001fe0:	482e      	ldr	r0, [pc, #184]	@ (800209c <HAL_UART_MspInit+0x120>)
 8001fe2:	f001 fa87 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0318 	add.w	r3, r7, #24
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4828      	ldr	r0, [pc, #160]	@ (800209c <HAL_UART_MspInit+0x120>)
 8001ffc:	f001 fa7a 	bl	80034f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	2025      	movs	r0, #37	@ 0x25
 8002006:	f001 f970 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800200a:	2025      	movs	r0, #37	@ 0x25
 800200c:	f001 f989 	bl	8003322 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002010:	e03c      	b.n	800208c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a22      	ldr	r2, [pc, #136]	@ (80020a0 <HAL_UART_MspInit+0x124>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d137      	bne.n	800208c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800201c:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	4a1d      	ldr	r2, [pc, #116]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 8002022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002026:	61d3      	str	r3, [r2, #28]
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_UART_MspInit+0x11c>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800204c:	2304      	movs	r3, #4
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4619      	mov	r1, r3
 800205e:	480f      	ldr	r0, [pc, #60]	@ (800209c <HAL_UART_MspInit+0x120>)
 8002060:	f001 fa48 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002064:	2308      	movs	r3, #8
 8002066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	4619      	mov	r1, r3
 8002076:	4809      	ldr	r0, [pc, #36]	@ (800209c <HAL_UART_MspInit+0x120>)
 8002078:	f001 fa3c 	bl	80034f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	2026      	movs	r0, #38	@ 0x26
 8002082:	f001 f932 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002086:	2026      	movs	r0, #38	@ 0x26
 8002088:	f001 f94b 	bl	8003322 <HAL_NVIC_EnableIRQ>
}
 800208c:	bf00      	nop
 800208e:	3728      	adds	r7, #40	@ 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40013800 	.word	0x40013800
 8002098:	40021000 	.word	0x40021000
 800209c:	40010800 	.word	0x40010800
 80020a0:	40004400 	.word	0x40004400

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <NMI_Handler+0x4>

080020ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <HardFault_Handler+0x4>

080020b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <MemManage_Handler+0x4>

080020bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <BusFault_Handler+0x4>

080020c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <UsageFault_Handler+0x4>

080020cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
//	  {
//	    FatFsCnt = 0;
//	    SDTimer_Handler();
//	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f4:	f000 f960 	bl	80023b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  OS_TimeEvt_tick();
 80020f8:	f009 fee8 	bl	800becc <OS_TimeEvt_tick>
  // for(uint8_t i = 0; i < 3; i++) {
  //   isotp_poll(&CAN_iso[i]);
  // }

  if (!HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <SysTick_Handler+0x28>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	4806      	ldr	r0, [pc, #24]	@ (800211c <SysTick_Handler+0x2c>)
 8002104:	f000 fc6f 	bl	80029e6 <HAL_CAN_IsTxMessagePending>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <SysTick_Handler+0x24>
	  isotp_poll(&CAN_iso[0]);
 800210e:	4804      	ldr	r0, [pc, #16]	@ (8002120 <SysTick_Handler+0x30>)
 8002110:	f009 fd3b 	bl	800bb8a <isotp_poll>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000410 	.word	0x20000410
 800211c:	20000270 	.word	0x20000270
 8002120:	20000414 	.word	0x20000414

08002124 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800212a:	f000 fdc5 	bl	8002cb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000270 	.word	0x20000270

08002138 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <CAN1_RX1_IRQHandler+0x10>)
 800213e:	f000 fdbb 	bl	8002cb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000270 	.word	0x20000270

0800214c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002150:	4802      	ldr	r0, [pc, #8]	@ (800215c <I2C1_EV_IRQHandler+0x10>)
 8002152:	f002 fa0b 	bl	800456c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000298 	.word	0x20000298

08002160 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002164:	4802      	ldr	r0, [pc, #8]	@ (8002170 <USART1_IRQHandler+0x10>)
 8002166:	f005 fb03 	bl	8007770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000344 	.word	0x20000344

08002174 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002178:	4802      	ldr	r0, [pc, #8]	@ (8002184 <USART2_IRQHandler+0x10>)
 800217a:	f005 faf9 	bl	8007770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000038c 	.word	0x2000038c

08002188 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return 1;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <_kill>:

int _kill(int pid, int sig)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021a0:	f00c f928 	bl	800e3f4 <__errno>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2216      	movs	r2, #22
 80021a8:	601a      	str	r2, [r3, #0]
  return -1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_exit>:

void _exit (int status)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021be:	f04f 31ff 	mov.w	r1, #4294967295
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffe7 	bl	8002196 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <_exit+0x12>

080021cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e00a      	b.n	80021f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021de:	f3af 8000 	nop.w
 80021e2:	4601      	mov	r1, r0
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	60ba      	str	r2, [r7, #8]
 80021ea:	b2ca      	uxtb	r2, r1
 80021ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3301      	adds	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	dbf0      	blt.n	80021de <_read+0x12>
  }

  return len;
 80021fc:	687b      	ldr	r3, [r7, #4]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800222c:	605a      	str	r2, [r3, #4]
  return 0;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <_isatty>:

int _isatty(int file)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800224e:	b480      	push	{r7}
 8002250:	b085      	sub	sp, #20
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
	...

08002268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002270:	4a14      	ldr	r2, [pc, #80]	@ (80022c4 <_sbrk+0x5c>)
 8002272:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <_sbrk+0x60>)
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800227c:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002284:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <_sbrk+0x64>)
 8002286:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <_sbrk+0x68>)
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002298:	f00c f8ac 	bl	800e3f4 <__errno>
 800229c:	4603      	mov	r3, r0
 800229e:	220c      	movs	r2, #12
 80022a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e009      	b.n	80022bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a8:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ae:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <_sbrk+0x64>)
 80022b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20005000 	.word	0x20005000
 80022c8:	00000400 	.word	0x00000400
 80022cc:	200007d4 	.word	0x200007d4
 80022d0:	20001350 	.word	0x20001350

080022d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022e0:	f7ff fff8 	bl	80022d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e4:	480b      	ldr	r0, [pc, #44]	@ (8002314 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022e6:	490c      	ldr	r1, [pc, #48]	@ (8002318 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022e8:	4a0c      	ldr	r2, [pc, #48]	@ (800231c <LoopFillZerobss+0x16>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022fc:	4c09      	ldr	r4, [pc, #36]	@ (8002324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800230a:	f00c f879 	bl	800e400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800230e:	f7ff f9db 	bl	80016c8 <main>
  bx lr
 8002312:	4770      	bx	lr
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 800231c:	08011670 	.word	0x08011670
  ldr r2, =_sbss
 8002320:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002324:	2000134c 	.word	0x2000134c

08002328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC1_2_IRQHandler>
	...

0800232c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002330:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_Init+0x28>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a07      	ldr	r2, [pc, #28]	@ (8002354 <HAL_Init+0x28>)
 8002336:	f043 0310 	orr.w	r3, r3, #16
 800233a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233c:	2003      	movs	r0, #3
 800233e:	f000 ffc9 	bl	80032d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002342:	200f      	movs	r0, #15
 8002344:	f000 f808 	bl	8002358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002348:	f7ff fcfa 	bl	8001d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40022000 	.word	0x40022000

08002358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002360:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_InitTick+0x54>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_InitTick+0x58>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800236e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	4618      	mov	r0, r3
 8002378:	f000 ffe1 	bl	800333e <HAL_SYSTICK_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00e      	b.n	80023a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d80a      	bhi.n	80023a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238c:	2200      	movs	r2, #0
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f000 ffa9 	bl	80032ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002398:	4a06      	ldr	r2, [pc, #24]	@ (80023b4 <HAL_InitTick+0x5c>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000004 	.word	0x20000004
 80023b0:	2000000c 	.word	0x2000000c
 80023b4:	20000008 	.word	0x20000008

080023b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <HAL_IncTick+0x1c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_IncTick+0x20>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	4a03      	ldr	r2, [pc, #12]	@ (80023d8 <HAL_IncTick+0x20>)
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	2000000c 	.word	0x2000000c
 80023d8:	200007d8 	.word	0x200007d8

080023dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return uwTick;
 80023e0:	4b02      	ldr	r3, [pc, #8]	@ (80023ec <HAL_GetTick+0x10>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	200007d8 	.word	0x200007d8

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff fff0 	bl	80023dc <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d005      	beq.n	8002416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <HAL_Delay+0x44>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002416:	bf00      	nop
 8002418:	f7ff ffe0 	bl	80023dc <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8f7      	bhi.n	8002418 <HAL_Delay+0x28>
  {
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000000c 	.word	0x2000000c

08002438 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0ed      	b.n	8002626 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fca4 	bl	8001da4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800246c:	f7ff ffb6 	bl	80023dc <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002472:	e012      	b.n	800249a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002474:	f7ff ffb2 	bl	80023dc <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b0a      	cmp	r3, #10
 8002480:	d90b      	bls.n	800249a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2205      	movs	r2, #5
 8002492:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0c5      	b.n	8002626 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0e5      	beq.n	8002474 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0202 	bic.w	r2, r2, #2
 80024b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b8:	f7ff ff90 	bl	80023dc <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024be:	e012      	b.n	80024e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024c0:	f7ff ff8c 	bl	80023dc <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b0a      	cmp	r3, #10
 80024cc:	d90b      	bls.n	80024e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2205      	movs	r2, #5
 80024de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e09f      	b.n	8002626 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e5      	bne.n	80024c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e1b      	ldrb	r3, [r3, #24]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d108      	bne.n	800250e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e007      	b.n	800251e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7e5b      	ldrb	r3, [r3, #25]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e007      	b.n	8002548 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7e9b      	ldrb	r3, [r3, #26]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d108      	bne.n	8002562 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0220 	orr.w	r2, r2, #32
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e007      	b.n	8002572 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0220 	bic.w	r2, r2, #32
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7edb      	ldrb	r3, [r3, #27]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d108      	bne.n	800258c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0210 	bic.w	r2, r2, #16
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e007      	b.n	800259c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0210 	orr.w	r2, r2, #16
 800259a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7f1b      	ldrb	r3, [r3, #28]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d108      	bne.n	80025b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0208 	orr.w	r2, r2, #8
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e007      	b.n	80025c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0208 	bic.w	r2, r2, #8
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	7f5b      	ldrb	r3, [r3, #29]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d108      	bne.n	80025e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0204 	orr.w	r2, r2, #4
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e007      	b.n	80025f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0204 	bic.w	r2, r2, #4
 80025ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	ea42 0103 	orr.w	r1, r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800262e:	b480      	push	{r7}
 8002630:	b087      	sub	sp, #28
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002644:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d003      	beq.n	8002654 <HAL_CAN_ConfigFilter+0x26>
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b02      	cmp	r3, #2
 8002650:	f040 80aa 	bne.w	80027a8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	2201      	movs	r2, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d123      	bne.n	80026d6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43db      	mvns	r3, r3
 8002698:	401a      	ands	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3248      	adds	r2, #72	@ 0x48
 80026b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026cc:	6979      	ldr	r1, [r7, #20]
 80026ce:	3348      	adds	r3, #72	@ 0x48
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d122      	bne.n	8002724 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3248      	adds	r2, #72	@ 0x48
 8002704:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002718:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800271a:	6979      	ldr	r1, [r7, #20]
 800271c:	3348      	adds	r3, #72	@ 0x48
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	43db      	mvns	r3, r3
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800273e:	e007      	b.n	8002750 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	431a      	orrs	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800276a:	e007      	b.n	800277c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	431a      	orrs	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d107      	bne.n	8002794 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	431a      	orrs	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800279a:	f023 0201 	bic.w	r2, r3, #1
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e006      	b.n	80027b6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d12e      	bne.n	8002832 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027ec:	f7ff fdf6 	bl	80023dc <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027f2:	e012      	b.n	800281a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027f4:	f7ff fdf2 	bl	80023dc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b0a      	cmp	r3, #10
 8002800:	d90b      	bls.n	800281a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2205      	movs	r2, #5
 8002812:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e012      	b.n	8002840 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e5      	bne.n	80027f4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e006      	b.n	8002840 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	@ 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002866:	7ffb      	ldrb	r3, [r7, #31]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d003      	beq.n	8002874 <HAL_CAN_AddTxMessage+0x2c>
 800286c:	7ffb      	ldrb	r3, [r7, #31]
 800286e:	2b02      	cmp	r3, #2
 8002870:	f040 80ad 	bne.w	80029ce <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8095 	beq.w	80029be <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	0e1b      	lsrs	r3, r3, #24
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800289e:	2201      	movs	r2, #1
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10d      	bne.n	80028cc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028ba:	68f9      	ldr	r1, [r7, #12]
 80028bc:	6809      	ldr	r1, [r1, #0]
 80028be:	431a      	orrs	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3318      	adds	r3, #24
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	440b      	add	r3, r1
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e00f      	b.n	80028ec <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028d6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028dc:	68f9      	ldr	r1, [r7, #12]
 80028de:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028e0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3318      	adds	r3, #24
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	440b      	add	r3, r1
 80028ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6819      	ldr	r1, [r3, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	3318      	adds	r3, #24
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	440b      	add	r3, r1
 80028fc:	3304      	adds	r3, #4
 80028fe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	7d1b      	ldrb	r3, [r3, #20]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d111      	bne.n	800292c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3318      	adds	r3, #24
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	4413      	add	r3, r2
 8002914:	3304      	adds	r3, #4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	6811      	ldr	r1, [r2, #0]
 800291c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3318      	adds	r3, #24
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	440b      	add	r3, r1
 8002928:	3304      	adds	r3, #4
 800292a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3307      	adds	r3, #7
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	061a      	lsls	r2, r3, #24
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3306      	adds	r3, #6
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3305      	adds	r3, #5
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	4313      	orrs	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	3204      	adds	r2, #4
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	4610      	mov	r0, r2
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	6811      	ldr	r1, [r2, #0]
 8002954:	ea43 0200 	orr.w	r2, r3, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	440b      	add	r3, r1
 800295e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002962:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3303      	adds	r3, #3
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	061a      	lsls	r2, r3, #24
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3302      	adds	r3, #2
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3301      	adds	r3, #1
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	4313      	orrs	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	4610      	mov	r0, r2
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	6811      	ldr	r1, [r2, #0]
 800298a:	ea43 0200 	orr.w	r2, r3, r0
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	440b      	add	r3, r1
 8002994:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002998:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3318      	adds	r3, #24
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	4413      	add	r3, r2
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	6811      	ldr	r1, [r2, #0]
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3318      	adds	r3, #24
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	440b      	add	r3, r1
 80029b8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e00e      	b.n	80029dc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e006      	b.n	80029dc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3724      	adds	r7, #36	@ 0x24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80029fc:	7afb      	ldrb	r3, [r7, #11]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d002      	beq.n	8002a08 <HAL_CAN_IsTxMessagePending+0x22>
 8002a02:	7afb      	ldrb	r3, [r7, #11]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d10b      	bne.n	8002a20 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	069b      	lsls	r3, r3, #26
 8002a12:	401a      	ands	r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	069b      	lsls	r3, r3, #26
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002a20:	68fb      	ldr	r3, [r7, #12]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a40:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d003      	beq.n	8002a50 <HAL_CAN_GetRxMessage+0x24>
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	f040 8103 	bne.w	8002c56 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10e      	bne.n	8002a74 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d116      	bne.n	8002a92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0f7      	b.n	8002c64 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d107      	bne.n	8002a92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0e8      	b.n	8002c64 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	331b      	adds	r3, #27
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	4413      	add	r3, r2
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0204 	and.w	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10c      	bne.n	8002aca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	331b      	adds	r3, #27
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	4413      	add	r3, r2
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0d5b      	lsrs	r3, r3, #21
 8002ac0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e00b      	b.n	8002ae2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	331b      	adds	r3, #27
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	4413      	add	r3, r2
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	331b      	adds	r3, #27
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0202 	and.w	r2, r3, #2
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	331b      	adds	r3, #27
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	4413      	add	r3, r2
 8002b04:	3304      	adds	r3, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2208      	movs	r2, #8
 8002b14:	611a      	str	r2, [r3, #16]
 8002b16:	e00b      	b.n	8002b30 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	331b      	adds	r3, #27
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 020f 	and.w	r2, r3, #15
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	331b      	adds	r3, #27
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	331b      	adds	r3, #27
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0a1a      	lsrs	r2, r3, #8
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0c1a      	lsrs	r2, r3, #16
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0e1a      	lsrs	r2, r3, #24
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	3303      	adds	r3, #3
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0a1a      	lsrs	r2, r3, #8
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	3305      	adds	r3, #5
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0c1a      	lsrs	r2, r3, #16
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	3306      	adds	r3, #6
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0e1a      	lsrs	r2, r3, #24
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	3307      	adds	r3, #7
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0220 	orr.w	r2, r2, #32
 8002c3e:	60da      	str	r2, [r3, #12]
 8002c40:	e007      	b.n	8002c52 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0220 	orr.w	r2, r2, #32
 8002c50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e006      	b.n	8002c64 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c7e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d002      	beq.n	8002c8c <HAL_CAN_ActivateNotification+0x1e>
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d109      	bne.n	8002ca0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6959      	ldr	r1, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e006      	b.n	8002cae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
  }
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	@ 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d07c      	beq.n	8002df8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d023      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f983 	bl	8003026 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d20:	e016      	b.n	8002d50 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d34:	e00c      	b.n	8002d50 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d48:	e002      	b.n	8002d50 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f986 	bl	800305c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d024      	beq.n	8002da4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f962 	bl	8003038 <HAL_CAN_TxMailbox1CompleteCallback>
 8002d74:	e016      	b.n	8002da4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d88:	e00c      	b.n	8002da4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9c:	e002      	b.n	8002da4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f965 	bl	800306e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d024      	beq.n	8002df8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002db6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f941 	bl	800304a <HAL_CAN_TxMailbox2CompleteCallback>
 8002dc8:	e016      	b.n	8002df8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ddc:	e00c      	b.n	8002df8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df0:	e002      	b.n	8002df8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f944 	bl	8003080 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00c      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2210      	movs	r2, #16
 8002e1a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d006      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2208      	movs	r2, #8
 8002e36:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f933 	bl	80030a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f91b 	bl	8003092 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f90a 	bl	80030b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe fe9a 	bl	8001bf4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d006      	beq.n	8002ee2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f8f3 	bl	80030c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2208      	movs	r2, #8
 8002efc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8eb 	bl	80030da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d07b      	beq.n	8003006 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d072      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	f043 0302 	orr.w	r3, r3, #2
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d043      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d03e      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f86:	2b60      	cmp	r3, #96	@ 0x60
 8002f88:	d02b      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x32a>
 8002f8a:	2b60      	cmp	r3, #96	@ 0x60
 8002f8c:	d82e      	bhi.n	8002fec <HAL_CAN_IRQHandler+0x334>
 8002f8e:	2b50      	cmp	r3, #80	@ 0x50
 8002f90:	d022      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x320>
 8002f92:	2b50      	cmp	r3, #80	@ 0x50
 8002f94:	d82a      	bhi.n	8002fec <HAL_CAN_IRQHandler+0x334>
 8002f96:	2b40      	cmp	r3, #64	@ 0x40
 8002f98:	d019      	beq.n	8002fce <HAL_CAN_IRQHandler+0x316>
 8002f9a:	2b40      	cmp	r3, #64	@ 0x40
 8002f9c:	d826      	bhi.n	8002fec <HAL_CAN_IRQHandler+0x334>
 8002f9e:	2b30      	cmp	r3, #48	@ 0x30
 8002fa0:	d010      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x30c>
 8002fa2:	2b30      	cmp	r3, #48	@ 0x30
 8002fa4:	d822      	bhi.n	8002fec <HAL_CAN_IRQHandler+0x334>
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d002      	beq.n	8002fb0 <HAL_CAN_IRQHandler+0x2f8>
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d005      	beq.n	8002fba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002fae:	e01d      	b.n	8002fec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	f043 0308 	orr.w	r3, r3, #8
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fb8:	e019      	b.n	8002fee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	f043 0310 	orr.w	r3, r3, #16
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fc2:	e014      	b.n	8002fee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	f043 0320 	orr.w	r3, r3, #32
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fcc:	e00f      	b.n	8002fee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fd6:	e00a      	b.n	8002fee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fe0:	e005      	b.n	8002fee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002fea:	e000      	b.n	8002fee <HAL_CAN_IRQHandler+0x336>
            break;
 8002fec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ffc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2204      	movs	r2, #4
 8003004:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f867 	bl	80030ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800301e:	bf00      	nop
 8003020:	3728      	adds	r7, #40	@ 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
	...

08003100 <__NVIC_SetPriorityGrouping>:
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003110:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800311c:	4013      	ands	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800312c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003132:	4a04      	ldr	r2, [pc, #16]	@ (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	60d3      	str	r3, [r2, #12]
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_GetPriorityGrouping>:
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800314c:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <__NVIC_GetPriorityGrouping+0x18>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 0307 	and.w	r3, r3, #7
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_EnableIRQ>:
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	2b00      	cmp	r3, #0
 8003174:	db0b      	blt.n	800318e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	f003 021f 	and.w	r2, r3, #31
 800317c:	4906      	ldr	r1, [pc, #24]	@ (8003198 <__NVIC_EnableIRQ+0x34>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2001      	movs	r0, #1
 8003186:	fa00 f202 	lsl.w	r2, r0, r2
 800318a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_SetPendingIRQ>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db0c      	blt.n	80031c8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4907      	ldr	r1, [pc, #28]	@ (80031d4 <__NVIC_SetPendingIRQ+0x38>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2001      	movs	r0, #1
 80031be:	fa00 f202 	lsl.w	r2, r0, r2
 80031c2:	3340      	adds	r3, #64	@ 0x40
 80031c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000e100 	.word	0xe000e100

080031d8 <__NVIC_SetPriority>:
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	6039      	str	r1, [r7, #0]
 80031e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	db0a      	blt.n	8003202 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	490c      	ldr	r1, [pc, #48]	@ (8003224 <__NVIC_SetPriority+0x4c>)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	0112      	lsls	r2, r2, #4
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	440b      	add	r3, r1
 80031fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003200:	e00a      	b.n	8003218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4908      	ldr	r1, [pc, #32]	@ (8003228 <__NVIC_SetPriority+0x50>)
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	3b04      	subs	r3, #4
 8003210:	0112      	lsls	r2, r2, #4
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	440b      	add	r3, r1
 8003216:	761a      	strb	r2, [r3, #24]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000e100 	.word	0xe000e100
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <NVIC_EncodePriority>:
{
 800322c:	b480      	push	{r7}
 800322e:	b089      	sub	sp, #36	@ 0x24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f1c3 0307 	rsb	r3, r3, #7
 8003246:	2b04      	cmp	r3, #4
 8003248:	bf28      	it	cs
 800324a:	2304      	movcs	r3, #4
 800324c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3304      	adds	r3, #4
 8003252:	2b06      	cmp	r3, #6
 8003254:	d902      	bls.n	800325c <NVIC_EncodePriority+0x30>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3b03      	subs	r3, #3
 800325a:	e000      	b.n	800325e <NVIC_EncodePriority+0x32>
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	f04f 32ff 	mov.w	r2, #4294967295
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43da      	mvns	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	401a      	ands	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003274:	f04f 31ff 	mov.w	r1, #4294967295
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43d9      	mvns	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003284:	4313      	orrs	r3, r2
}
 8003286:	4618      	mov	r0, r3
 8003288:	3724      	adds	r7, #36	@ 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <SysTick_Config>:
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032a0:	d301      	bcc.n	80032a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00f      	b.n	80032c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a6:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <SysTick_Config+0x40>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ae:	210f      	movs	r1, #15
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f7ff ff90 	bl	80031d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b8:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <SysTick_Config+0x40>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032be:	4b04      	ldr	r3, [pc, #16]	@ (80032d0 <SysTick_Config+0x40>)
 80032c0:	2207      	movs	r2, #7
 80032c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	e000e010 	.word	0xe000e010

080032d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff0f 	bl	8003100 <__NVIC_SetPriorityGrouping>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b086      	sub	sp, #24
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032fc:	f7ff ff24 	bl	8003148 <__NVIC_GetPriorityGrouping>
 8003300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7ff ff90 	bl	800322c <NVIC_EncodePriority>
 800330c:	4602      	mov	r2, r0
 800330e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff5f 	bl	80031d8 <__NVIC_SetPriority>
}
 800331a:	bf00      	nop
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff17 	bl	8003164 <__NVIC_EnableIRQ>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffa2 	bl	8003290 <SysTick_Config>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff19 	bl	800319c <__NVIC_SetPendingIRQ>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d008      	beq.n	800339c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2204      	movs	r2, #4
 800338e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e020      	b.n	80033de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 020e 	bic.w	r2, r2, #14
 80033aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d005      	beq.n	800340c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2204      	movs	r2, #4
 8003404:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
 800340a:	e051      	b.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 020e 	bic.w	r2, r2, #14
 800341a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a22      	ldr	r2, [pc, #136]	@ (80034bc <HAL_DMA_Abort_IT+0xd4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d029      	beq.n	800348a <HAL_DMA_Abort_IT+0xa2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a21      	ldr	r2, [pc, #132]	@ (80034c0 <HAL_DMA_Abort_IT+0xd8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_DMA_Abort_IT+0x9e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1f      	ldr	r2, [pc, #124]	@ (80034c4 <HAL_DMA_Abort_IT+0xdc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01a      	beq.n	8003480 <HAL_DMA_Abort_IT+0x98>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1e      	ldr	r2, [pc, #120]	@ (80034c8 <HAL_DMA_Abort_IT+0xe0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d012      	beq.n	800347a <HAL_DMA_Abort_IT+0x92>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1c      	ldr	r2, [pc, #112]	@ (80034cc <HAL_DMA_Abort_IT+0xe4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00a      	beq.n	8003474 <HAL_DMA_Abort_IT+0x8c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1b      	ldr	r2, [pc, #108]	@ (80034d0 <HAL_DMA_Abort_IT+0xe8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d102      	bne.n	800346e <HAL_DMA_Abort_IT+0x86>
 8003468:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800346c:	e00e      	b.n	800348c <HAL_DMA_Abort_IT+0xa4>
 800346e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003472:	e00b      	b.n	800348c <HAL_DMA_Abort_IT+0xa4>
 8003474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003478:	e008      	b.n	800348c <HAL_DMA_Abort_IT+0xa4>
 800347a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800347e:	e005      	b.n	800348c <HAL_DMA_Abort_IT+0xa4>
 8003480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003484:	e002      	b.n	800348c <HAL_DMA_Abort_IT+0xa4>
 8003486:	2310      	movs	r3, #16
 8003488:	e000      	b.n	800348c <HAL_DMA_Abort_IT+0xa4>
 800348a:	2301      	movs	r3, #1
 800348c:	4a11      	ldr	r2, [pc, #68]	@ (80034d4 <HAL_DMA_Abort_IT+0xec>)
 800348e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
    } 
  }
  return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40020008 	.word	0x40020008
 80034c0:	4002001c 	.word	0x4002001c
 80034c4:	40020030 	.word	0x40020030
 80034c8:	40020044 	.word	0x40020044
 80034cc:	40020058 	.word	0x40020058
 80034d0:	4002006c 	.word	0x4002006c
 80034d4:	40020000 	.word	0x40020000

080034d8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034e6:	b2db      	uxtb	r3, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b08b      	sub	sp, #44	@ 0x2c
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003506:	e169      	b.n	80037dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003508:	2201      	movs	r2, #1
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	429a      	cmp	r2, r3
 8003522:	f040 8158 	bne.w	80037d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4a9a      	ldr	r2, [pc, #616]	@ (8003794 <HAL_GPIO_Init+0x2a0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d05e      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003530:	4a98      	ldr	r2, [pc, #608]	@ (8003794 <HAL_GPIO_Init+0x2a0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d875      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003536:	4a98      	ldr	r2, [pc, #608]	@ (8003798 <HAL_GPIO_Init+0x2a4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d058      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 800353c:	4a96      	ldr	r2, [pc, #600]	@ (8003798 <HAL_GPIO_Init+0x2a4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d86f      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003542:	4a96      	ldr	r2, [pc, #600]	@ (800379c <HAL_GPIO_Init+0x2a8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d052      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003548:	4a94      	ldr	r2, [pc, #592]	@ (800379c <HAL_GPIO_Init+0x2a8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d869      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800354e:	4a94      	ldr	r2, [pc, #592]	@ (80037a0 <HAL_GPIO_Init+0x2ac>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d04c      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003554:	4a92      	ldr	r2, [pc, #584]	@ (80037a0 <HAL_GPIO_Init+0x2ac>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d863      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800355a:	4a92      	ldr	r2, [pc, #584]	@ (80037a4 <HAL_GPIO_Init+0x2b0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d046      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003560:	4a90      	ldr	r2, [pc, #576]	@ (80037a4 <HAL_GPIO_Init+0x2b0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d85d      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003566:	2b12      	cmp	r3, #18
 8003568:	d82a      	bhi.n	80035c0 <HAL_GPIO_Init+0xcc>
 800356a:	2b12      	cmp	r3, #18
 800356c:	d859      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <HAL_GPIO_Init+0x80>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035ef 	.word	0x080035ef
 8003578:	080035c9 	.word	0x080035c9
 800357c:	080035db 	.word	0x080035db
 8003580:	0800361d 	.word	0x0800361d
 8003584:	08003623 	.word	0x08003623
 8003588:	08003623 	.word	0x08003623
 800358c:	08003623 	.word	0x08003623
 8003590:	08003623 	.word	0x08003623
 8003594:	08003623 	.word	0x08003623
 8003598:	08003623 	.word	0x08003623
 800359c:	08003623 	.word	0x08003623
 80035a0:	08003623 	.word	0x08003623
 80035a4:	08003623 	.word	0x08003623
 80035a8:	08003623 	.word	0x08003623
 80035ac:	08003623 	.word	0x08003623
 80035b0:	08003623 	.word	0x08003623
 80035b4:	08003623 	.word	0x08003623
 80035b8:	080035d1 	.word	0x080035d1
 80035bc:	080035e5 	.word	0x080035e5
 80035c0:	4a79      	ldr	r2, [pc, #484]	@ (80037a8 <HAL_GPIO_Init+0x2b4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035c6:	e02c      	b.n	8003622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	623b      	str	r3, [r7, #32]
          break;
 80035ce:	e029      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	3304      	adds	r3, #4
 80035d6:	623b      	str	r3, [r7, #32]
          break;
 80035d8:	e024      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	3308      	adds	r3, #8
 80035e0:	623b      	str	r3, [r7, #32]
          break;
 80035e2:	e01f      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	330c      	adds	r3, #12
 80035ea:	623b      	str	r3, [r7, #32]
          break;
 80035ec:	e01a      	b.n	8003624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035f6:	2304      	movs	r3, #4
 80035f8:	623b      	str	r3, [r7, #32]
          break;
 80035fa:	e013      	b.n	8003624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003604:	2308      	movs	r3, #8
 8003606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	611a      	str	r2, [r3, #16]
          break;
 800360e:	e009      	b.n	8003624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003610:	2308      	movs	r3, #8
 8003612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	615a      	str	r2, [r3, #20]
          break;
 800361a:	e003      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
          break;
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x130>
          break;
 8003622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2bff      	cmp	r3, #255	@ 0xff
 8003628:	d801      	bhi.n	800362e <HAL_GPIO_Init+0x13a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	e001      	b.n	8003632 <HAL_GPIO_Init+0x13e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3304      	adds	r3, #4
 8003632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2bff      	cmp	r3, #255	@ 0xff
 8003638:	d802      	bhi.n	8003640 <HAL_GPIO_Init+0x14c>
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	e002      	b.n	8003646 <HAL_GPIO_Init+0x152>
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	3b08      	subs	r3, #8
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	210f      	movs	r1, #15
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	401a      	ands	r2, r3
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	431a      	orrs	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80b1 	beq.w	80037d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003674:	4b4d      	ldr	r3, [pc, #308]	@ (80037ac <HAL_GPIO_Init+0x2b8>)
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	4a4c      	ldr	r2, [pc, #304]	@ (80037ac <HAL_GPIO_Init+0x2b8>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6193      	str	r3, [r2, #24]
 8003680:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <HAL_GPIO_Init+0x2b8>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800368c:	4a48      	ldr	r2, [pc, #288]	@ (80037b0 <HAL_GPIO_Init+0x2bc>)
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	3302      	adds	r3, #2
 8003694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	220f      	movs	r2, #15
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a40      	ldr	r2, [pc, #256]	@ (80037b4 <HAL_GPIO_Init+0x2c0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <HAL_GPIO_Init+0x1ec>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a3f      	ldr	r2, [pc, #252]	@ (80037b8 <HAL_GPIO_Init+0x2c4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00d      	beq.n	80036dc <HAL_GPIO_Init+0x1e8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a3e      	ldr	r2, [pc, #248]	@ (80037bc <HAL_GPIO_Init+0x2c8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <HAL_GPIO_Init+0x1e4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a3d      	ldr	r2, [pc, #244]	@ (80037c0 <HAL_GPIO_Init+0x2cc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d101      	bne.n	80036d4 <HAL_GPIO_Init+0x1e0>
 80036d0:	2303      	movs	r3, #3
 80036d2:	e006      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036d4:	2304      	movs	r3, #4
 80036d6:	e004      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036d8:	2302      	movs	r3, #2
 80036da:	e002      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036e0:	2300      	movs	r3, #0
 80036e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e4:	f002 0203 	and.w	r2, r2, #3
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	4093      	lsls	r3, r2
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036f2:	492f      	ldr	r1, [pc, #188]	@ (80037b0 <HAL_GPIO_Init+0x2bc>)
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	3302      	adds	r3, #2
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800370c:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	492c      	ldr	r1, [pc, #176]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800371a:	4b2a      	ldr	r3, [pc, #168]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	43db      	mvns	r3, r3
 8003722:	4928      	ldr	r1, [pc, #160]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003724:	4013      	ands	r3, r2
 8003726:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003734:	4b23      	ldr	r3, [pc, #140]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	4922      	ldr	r1, [pc, #136]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003742:	4b20      	ldr	r3, [pc, #128]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	43db      	mvns	r3, r3
 800374a:	491e      	ldr	r1, [pc, #120]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800374c:	4013      	ands	r3, r2
 800374e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800375c:	4b19      	ldr	r3, [pc, #100]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	4918      	ldr	r1, [pc, #96]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
 8003768:	e006      	b.n	8003778 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800376a:	4b16      	ldr	r3, [pc, #88]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	43db      	mvns	r3, r3
 8003772:	4914      	ldr	r1, [pc, #80]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003774:	4013      	ands	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d021      	beq.n	80037c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003784:	4b0f      	ldr	r3, [pc, #60]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	490e      	ldr	r1, [pc, #56]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
 8003790:	e021      	b.n	80037d6 <HAL_GPIO_Init+0x2e2>
 8003792:	bf00      	nop
 8003794:	10320000 	.word	0x10320000
 8003798:	10310000 	.word	0x10310000
 800379c:	10220000 	.word	0x10220000
 80037a0:	10210000 	.word	0x10210000
 80037a4:	10120000 	.word	0x10120000
 80037a8:	10110000 	.word	0x10110000
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40010800 	.word	0x40010800
 80037b8:	40010c00 	.word	0x40010c00
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	4909      	ldr	r1, [pc, #36]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	3301      	adds	r3, #1
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f47f ae8e 	bne.w	8003508 <HAL_GPIO_Init+0x14>
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	372c      	adds	r7, #44	@ 0x2c
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40010400 	.word	0x40010400

080037fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003818:	e003      	b.n	8003822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800381a:	887b      	ldrh	r3, [r7, #2]
 800381c:	041a      	lsls	r2, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	611a      	str	r2, [r3, #16]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e12b      	b.n	8003a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe fb02 	bl	8001e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	@ 0x24
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800387e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800388e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003890:	f003 f9b8 	bl	8006c04 <HAL_RCC_GetPCLK1Freq>
 8003894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4a81      	ldr	r2, [pc, #516]	@ (8003aa0 <HAL_I2C_Init+0x274>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d807      	bhi.n	80038b0 <HAL_I2C_Init+0x84>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a80      	ldr	r2, [pc, #512]	@ (8003aa4 <HAL_I2C_Init+0x278>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bf94      	ite	ls
 80038a8:	2301      	movls	r3, #1
 80038aa:	2300      	movhi	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e006      	b.n	80038be <HAL_I2C_Init+0x92>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a7d      	ldr	r2, [pc, #500]	@ (8003aa8 <HAL_I2C_Init+0x27c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	bf94      	ite	ls
 80038b8:	2301      	movls	r3, #1
 80038ba:	2300      	movhi	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0e7      	b.n	8003a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a78      	ldr	r2, [pc, #480]	@ (8003aac <HAL_I2C_Init+0x280>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	0c9b      	lsrs	r3, r3, #18
 80038d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa0 <HAL_I2C_Init+0x274>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d802      	bhi.n	8003900 <HAL_I2C_Init+0xd4>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3301      	adds	r3, #1
 80038fe:	e009      	b.n	8003914 <HAL_I2C_Init+0xe8>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	4a69      	ldr	r2, [pc, #420]	@ (8003ab0 <HAL_I2C_Init+0x284>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	3301      	adds	r3, #1
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003926:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	495c      	ldr	r1, [pc, #368]	@ (8003aa0 <HAL_I2C_Init+0x274>)
 8003930:	428b      	cmp	r3, r1
 8003932:	d819      	bhi.n	8003968 <HAL_I2C_Init+0x13c>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e59      	subs	r1, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003942:	1c59      	adds	r1, r3, #1
 8003944:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003948:	400b      	ands	r3, r1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_I2C_Init+0x138>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1e59      	subs	r1, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fbb1 f3f3 	udiv	r3, r1, r3
 800395c:	3301      	adds	r3, #1
 800395e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003962:	e051      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 8003964:	2304      	movs	r3, #4
 8003966:	e04f      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d111      	bne.n	8003994 <HAL_I2C_Init+0x168>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1e58      	subs	r0, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	440b      	add	r3, r1
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e012      	b.n	80039ba <HAL_I2C_Init+0x18e>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e58      	subs	r0, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	0099      	lsls	r1, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039aa:	3301      	adds	r3, #1
 80039ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Init+0x196>
 80039be:	2301      	movs	r3, #1
 80039c0:	e022      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10e      	bne.n	80039e8 <HAL_I2C_Init+0x1bc>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1e58      	subs	r0, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	440b      	add	r3, r1
 80039d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e6:	e00f      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	6809      	ldr	r1, [r1, #0]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6911      	ldr	r1, [r2, #16]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68d2      	ldr	r2, [r2, #12]
 8003a42:	4311      	orrs	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	000186a0 	.word	0x000186a0
 8003aa4:	001e847f 	.word	0x001e847f
 8003aa8:	003d08ff 	.word	0x003d08ff
 8003aac:	431bde83 	.word	0x431bde83
 8003ab0:	10624dd3 	.word	0x10624dd3

08003ab4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac6:	2b80      	cmp	r3, #128	@ 0x80
 8003ac8:	d103      	bne.n	8003ad2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	611a      	str	r2, [r3, #16]
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	817b      	strh	r3, [r7, #10]
 8003aee:	460b      	mov	r3, r1
 8003af0:	813b      	strh	r3, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003af6:	f7fe fc71 	bl	80023dc <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	f040 80d9 	bne.w	8003cbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2319      	movs	r3, #25
 8003b10:	2201      	movs	r2, #1
 8003b12:	496d      	ldr	r1, [pc, #436]	@ (8003cc8 <HAL_I2C_Mem_Write+0x1ec>)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f002 fa29 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0cc      	b.n	8003cbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2C_Mem_Write+0x56>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e0c5      	b.n	8003cbe <HAL_I2C_Mem_Write+0x1e2>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d007      	beq.n	8003b58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2221      	movs	r2, #33	@ 0x21
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2240      	movs	r2, #64	@ 0x40
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a4d      	ldr	r2, [pc, #308]	@ (8003ccc <HAL_I2C_Mem_Write+0x1f0>)
 8003b98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b9a:	88f8      	ldrh	r0, [r7, #6]
 8003b9c:	893a      	ldrh	r2, [r7, #8]
 8003b9e:	8979      	ldrh	r1, [r7, #10]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	4603      	mov	r3, r0
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f001 ffb8 	bl	8005b20 <I2C_RequestMemoryWrite>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d052      	beq.n	8003c5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e081      	b.n	8003cbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f002 faee 	bl	80061a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d107      	bne.n	8003be2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06b      	b.n	8003cbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d11b      	bne.n	8003c5c <HAL_I2C_Mem_Write+0x180>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d017      	beq.n	8003c5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1aa      	bne.n	8003bba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f002 fae1 	bl	8006230 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d107      	bne.n	8003c8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e016      	b.n	8003cbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
  }
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	00100002 	.word	0x00100002
 8003ccc:	ffff0000 	.word	0xffff0000

08003cd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	@ 0x30
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	813b      	strh	r3, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cee:	f7fe fb75 	bl	80023dc <HAL_GetTick>
 8003cf2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	f040 8250 	bne.w	80041a2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2319      	movs	r3, #25
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4982      	ldr	r1, [pc, #520]	@ (8003f14 <HAL_I2C_Mem_Read+0x244>)
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f002 f92d 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e243      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_I2C_Mem_Read+0x5a>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e23c      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4d4>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d007      	beq.n	8003d50 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2222      	movs	r2, #34	@ 0x22
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2240      	movs	r2, #64	@ 0x40
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a62      	ldr	r2, [pc, #392]	@ (8003f18 <HAL_I2C_Mem_Read+0x248>)
 8003d90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d92:	88f8      	ldrh	r0, [r7, #6]
 8003d94:	893a      	ldrh	r2, [r7, #8]
 8003d96:	8979      	ldrh	r1, [r7, #10]
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4603      	mov	r3, r0
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f001 ff52 	bl	8005c4c <I2C_RequestMemoryRead>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e1f8      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d113      	bne.n	8003de2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e1cc      	b.n	800417c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d11e      	bne.n	8003e28 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dfa:	b672      	cpsid	i
}
 8003dfc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e24:	b662      	cpsie	i
}
 8003e26:	e035      	b.n	8003e94 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d11e      	bne.n	8003e6e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e40:	b672      	cpsid	i
}
 8003e42:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e6a:	b662      	cpsie	i
}
 8003e6c:	e012      	b.n	8003e94 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e7c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e94:	e172      	b.n	800417c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	f200 811f 	bhi.w	80040de <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d123      	bne.n	8003ef0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eaa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f002 fa39 	bl	8006324 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e173      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eee:	e145      	b.n	800417c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d152      	bne.n	8003f9e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efe:	2200      	movs	r2, #0
 8003f00:	4906      	ldr	r1, [pc, #24]	@ (8003f1c <HAL_I2C_Mem_Read+0x24c>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f002 f832 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e148      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4d4>
 8003f12:	bf00      	nop
 8003f14:	00100002 	.word	0x00100002
 8003f18:	ffff0000 	.word	0xffff0000
 8003f1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f20:	b672      	cpsid	i
}
 8003f22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f66:	b662      	cpsie	i
}
 8003f68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f9c:	e0ee      	b.n	800417c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4981      	ldr	r1, [pc, #516]	@ (80041ac <HAL_I2C_Mem_Read+0x4dc>)
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f001 ffdf 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0f5      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fc8:	b672      	cpsid	i
}
 8003fca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80041b0 <HAL_I2C_Mem_Read+0x4e0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	08db      	lsrs	r3, r3, #3
 8004004:	4a6b      	ldr	r2, [pc, #428]	@ (80041b4 <HAL_I2C_Mem_Read+0x4e4>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	0a1a      	lsrs	r2, r3, #8
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	00da      	lsls	r2, r3, #3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	3b01      	subs	r3, #1
 800401c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d118      	bne.n	8004056 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004046:	b662      	cpsie	i
}
 8004048:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e0a6      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b04      	cmp	r3, #4
 8004062:	d1d9      	bne.n	8004018 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040a6:	b662      	cpsie	i
}
 80040a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040dc:	e04e      	b.n	800417c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f002 f91e 	bl	8006324 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e058      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b04      	cmp	r3, #4
 8004130:	d124      	bne.n	800417c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004136:	2b03      	cmp	r3, #3
 8004138:	d107      	bne.n	800414a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004148:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	f47f ae88 	bne.w	8003e96 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e000      	b.n	80041a4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3728      	adds	r7, #40	@ 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	00010004 	.word	0x00010004
 80041b0:	20000004 	.word	0x20000004
 80041b4:	14f8b589 	.word	0x14f8b589

080041b8 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	461a      	mov	r2, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	817b      	strh	r3, [r7, #10]
 80041ca:	460b      	mov	r3, r1
 80041cc:	813b      	strh	r3, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b20      	cmp	r3, #32
 80041e0:	f040 808a 	bne.w	80042f8 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80041e4:	4b47      	ldr	r3, [pc, #284]	@ (8004304 <HAL_I2C_Mem_Write_IT+0x14c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	08db      	lsrs	r3, r3, #3
 80041ea:	4a47      	ldr	r2, [pc, #284]	@ (8004308 <HAL_I2C_Mem_Write_IT+0x150>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	0a1a      	lsrs	r2, r3, #8
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009a      	lsls	r2, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	3b01      	subs	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d112      	bne.n	8004230 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800422c:	2302      	movs	r3, #2
 800422e:	e064      	b.n	80042fa <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d0df      	beq.n	80041fe <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_I2C_Mem_Write_IT+0x94>
 8004248:	2302      	movs	r3, #2
 800424a:	e056      	b.n	80042fa <HAL_I2C_Mem_Write_IT+0x142>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d007      	beq.n	8004272 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004280:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2221      	movs	r2, #33	@ 0x21
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2240      	movs	r2, #64	@ 0x40
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a3a      	ldr	r2, [r7, #32]
 800429c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a16      	ldr	r2, [pc, #88]	@ (800430c <HAL_I2C_Mem_Write_IT+0x154>)
 80042b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80042b4:	897a      	ldrh	r2, [r7, #10]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80042ba:	893a      	ldrh	r2, [r7, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042da:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80042f2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e000      	b.n	80042fa <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	20000004 	.word	0x20000004
 8004308:	14f8b589 	.word	0x14f8b589
 800430c:	ffff0000 	.word	0xffff0000

08004310 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	@ 0x28
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	460b      	mov	r3, r1
 800431e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004320:	f7fe f85c 	bl	80023dc <HAL_GetTick>
 8004324:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b20      	cmp	r3, #32
 8004334:	f040 8111 	bne.w	800455a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2319      	movs	r3, #25
 800433e:	2201      	movs	r2, #1
 8004340:	4988      	ldr	r1, [pc, #544]	@ (8004564 <HAL_I2C_IsDeviceReady+0x254>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f001 fe12 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800434e:	2302      	movs	r3, #2
 8004350:	e104      	b.n	800455c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_I2C_IsDeviceReady+0x50>
 800435c:	2302      	movs	r3, #2
 800435e:	e0fd      	b.n	800455c <HAL_I2C_IsDeviceReady+0x24c>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b01      	cmp	r3, #1
 8004374:	d007      	beq.n	8004386 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004394:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2224      	movs	r2, #36	@ 0x24
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a70      	ldr	r2, [pc, #448]	@ (8004568 <HAL_I2C_IsDeviceReady+0x258>)
 80043a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f001 fdd0 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e0:	d103      	bne.n	80043ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043e8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0b6      	b.n	800455c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ee:	897b      	ldrh	r3, [r7, #10]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fd ffed 	bl	80023dc <HAL_GetTick>
 8004402:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	bf0c      	ite	eq
 8004412:	2301      	moveq	r3, #1
 8004414:	2300      	movne	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004432:	e025      	b.n	8004480 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004434:	f7fd ffd2 	bl	80023dc <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d302      	bcc.n	800444a <HAL_I2C_IsDeviceReady+0x13a>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d103      	bne.n	8004452 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	22a0      	movs	r2, #160	@ 0xa0
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2ba0      	cmp	r3, #160	@ 0xa0
 800448a:	d005      	beq.n	8004498 <HAL_I2C_IsDeviceReady+0x188>
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <HAL_I2C_IsDeviceReady+0x188>
 8004492:	7dbb      	ldrb	r3, [r7, #22]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0cd      	beq.n	8004434 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d129      	bne.n	8004502 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2319      	movs	r3, #25
 80044da:	2201      	movs	r2, #1
 80044dc:	4921      	ldr	r1, [pc, #132]	@ (8004564 <HAL_I2C_IsDeviceReady+0x254>)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f001 fd44 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e036      	b.n	800455c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e02c      	b.n	800455c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004510:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800451a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	2319      	movs	r3, #25
 8004522:	2201      	movs	r2, #1
 8004524:	490f      	ldr	r1, [pc, #60]	@ (8004564 <HAL_I2C_IsDeviceReady+0x254>)
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f001 fd20 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e012      	b.n	800455c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	3301      	adds	r3, #1
 800453a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	f4ff af32 	bcc.w	80043aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
  }
}
 800455c:	4618      	mov	r0, r3
 800455e:	3720      	adds	r7, #32
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	00100002 	.word	0x00100002
 8004568:	ffff0000 	.word	0xffff0000

0800456c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800458c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004594:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b10      	cmp	r3, #16
 800459a:	d003      	beq.n	80045a4 <HAL_I2C_EV_IRQHandler+0x38>
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b40      	cmp	r3, #64	@ 0x40
 80045a0:	f040 80c1 	bne.w	8004726 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <HAL_I2C_EV_IRQHandler+0x6e>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80045c4:	d003      	beq.n	80045ce <HAL_I2C_EV_IRQHandler+0x62>
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80045cc:	d101      	bne.n	80045d2 <HAL_I2C_EV_IRQHandler+0x66>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <HAL_I2C_EV_IRQHandler+0x68>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	f000 8132 	beq.w	800483e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00c      	beq.n	80045fe <HAL_I2C_EV_IRQHandler+0x92>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	0a5b      	lsrs	r3, r3, #9
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d006      	beq.n	80045fe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f001 ff22 	bl	800643a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fce1 	bl	8004fbe <I2C_Master_SB>
 80045fc:	e092      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0xb2>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	0a5b      	lsrs	r3, r3, #9
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fd56 	bl	80050c8 <I2C_Master_ADD10>
 800461c:	e082      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_I2C_EV_IRQHandler+0xd2>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	0a5b      	lsrs	r3, r3, #9
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fd6f 	bl	800511a <I2C_Master_ADDR>
 800463c:	e072      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d03b      	beq.n	80046c2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004658:	f000 80f3 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	09db      	lsrs	r3, r3, #7
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00f      	beq.n	8004688 <HAL_I2C_EV_IRQHandler+0x11c>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	0a9b      	lsrs	r3, r3, #10
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_I2C_EV_IRQHandler+0x11c>
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d103      	bne.n	8004688 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f939 	bl	80048f8 <I2C_MasterTransmit_TXE>
 8004686:	e04d      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80d6 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	0a5b      	lsrs	r3, r3, #9
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80cf 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046a4:	7bbb      	ldrb	r3, [r7, #14]
 80046a6:	2b21      	cmp	r3, #33	@ 0x21
 80046a8:	d103      	bne.n	80046b2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f9c0 	bl	8004a30 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046b0:	e0c7      	b.n	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2b40      	cmp	r3, #64	@ 0x40
 80046b6:	f040 80c4 	bne.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa2e 	bl	8004b1c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046c0:	e0bf      	b.n	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d0:	f000 80b7 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00f      	beq.n	8004700 <HAL_I2C_EV_IRQHandler+0x194>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	0a9b      	lsrs	r3, r3, #10
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <HAL_I2C_EV_IRQHandler+0x194>
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 faa7 	bl	8004c4c <I2C_MasterReceive_RXNE>
 80046fe:	e011      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 809a 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	0a5b      	lsrs	r3, r3, #9
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8093 	beq.w	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fb5d 	bl	8004ddc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004722:	e08e      	b.n	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004724:	e08d      	b.n	8004842 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e007      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d012      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0x20e>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	0a5b      	lsrs	r3, r3, #9
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00c      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004770:	69b9      	ldr	r1, [r7, #24]
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 ff28 	bl	80055c8 <I2C_Slave_ADDR>
 8004778:	e066      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HAL_I2C_EV_IRQHandler+0x22e>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	0a5b      	lsrs	r3, r3, #9
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 ff62 	bl	800565c <I2C_Slave_STOPF>
 8004798:	e056      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800479a:	7bbb      	ldrb	r3, [r7, #14]
 800479c:	2b21      	cmp	r3, #33	@ 0x21
 800479e:	d002      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x23a>
 80047a0:	7bbb      	ldrb	r3, [r7, #14]
 80047a2:	2b29      	cmp	r3, #41	@ 0x29
 80047a4:	d125      	bne.n	80047f2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	09db      	lsrs	r3, r3, #7
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00f      	beq.n	80047d2 <HAL_I2C_EV_IRQHandler+0x266>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	0a9b      	lsrs	r3, r3, #10
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_I2C_EV_IRQHandler+0x266>
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	089b      	lsrs	r3, r3, #2
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fe40 	bl	8005450 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047d0:	e039      	b.n	8004846 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	089b      	lsrs	r3, r3, #2
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d033      	beq.n	8004846 <HAL_I2C_EV_IRQHandler+0x2da>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	0a5b      	lsrs	r3, r3, #9
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d02d      	beq.n	8004846 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fe6d 	bl	80054ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047f0:	e029      	b.n	8004846 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00f      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x2b2>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	0a9b      	lsrs	r3, r3, #10
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x2b2>
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fe77 	bl	800550a <I2C_SlaveReceive_RXNE>
 800481c:	e014      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	089b      	lsrs	r3, r3, #2
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00e      	beq.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	0a5b      	lsrs	r3, r3, #9
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fea5 	bl	8005586 <I2C_SlaveReceive_BTF>
 800483c:	e004      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800483e:	bf00      	nop
 8004840:	e002      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004846:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr

08004872 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	70fb      	strb	r3, [r7, #3]
 80048a2:	4613      	mov	r3, r2
 80048a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004906:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800490e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800491a:	2b00      	cmp	r3, #0
 800491c:	d150      	bne.n	80049c0 <I2C_MasterTransmit_TXE+0xc8>
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	2b21      	cmp	r3, #33	@ 0x21
 8004922:	d14d      	bne.n	80049c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b08      	cmp	r3, #8
 8004928:	d01d      	beq.n	8004966 <I2C_MasterTransmit_TXE+0x6e>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b20      	cmp	r3, #32
 800492e:	d01a      	beq.n	8004966 <I2C_MasterTransmit_TXE+0x6e>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004936:	d016      	beq.n	8004966 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004946:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2211      	movs	r2, #17
 800494c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff ff75 	bl	800484e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004964:	e060      	b.n	8004a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004974:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004984:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b40      	cmp	r3, #64	@ 0x40
 800499e:	d107      	bne.n	80049b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7fd f907 	bl	8001bbc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049ae:	e03b      	b.n	8004a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff48 	bl	800484e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049be:	e033      	b.n	8004a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b21      	cmp	r3, #33	@ 0x21
 80049c4:	d005      	beq.n	80049d2 <I2C_MasterTransmit_TXE+0xda>
 80049c6:	7bbb      	ldrb	r3, [r7, #14]
 80049c8:	2b40      	cmp	r3, #64	@ 0x40
 80049ca:	d12d      	bne.n	8004a28 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b22      	cmp	r3, #34	@ 0x22
 80049d0:	d12a      	bne.n	8004a28 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d108      	bne.n	80049ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049ec:	e01c      	b.n	8004a28 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b40      	cmp	r3, #64	@ 0x40
 80049f8:	d103      	bne.n	8004a02 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f88e 	bl	8004b1c <I2C_MemoryTransmit_TXE_BTF>
}
 8004a00:	e012      	b.n	8004a28 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a26:	e7ff      	b.n	8004a28 <I2C_MasterTransmit_TXE+0x130>
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b21      	cmp	r3, #33	@ 0x21
 8004a48:	d164      	bne.n	8004b14 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d012      	beq.n	8004a7a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a78:	e04c      	b.n	8004b14 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d01d      	beq.n	8004abc <I2C_MasterTransmit_BTF+0x8c>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d01a      	beq.n	8004abc <I2C_MasterTransmit_BTF+0x8c>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a8c:	d016      	beq.n	8004abc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a9c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2211      	movs	r2, #17
 8004aa2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff feca 	bl	800484e <HAL_I2C_MasterTxCpltCallback>
}
 8004aba:	e02b      	b.n	8004b14 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004aca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ada:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b40      	cmp	r3, #64	@ 0x40
 8004af4:	d107      	bne.n	8004b06 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd f85c 	bl	8001bbc <HAL_I2C_MemTxCpltCallback>
}
 8004b04:	e006      	b.n	8004b14 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff fe9d 	bl	800484e <HAL_I2C_MasterTxCpltCallback>
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d11d      	bne.n	8004b70 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d10b      	bne.n	8004b54 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004b52:	e077      	b.n	8004c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	121b      	asrs	r3, r3, #8
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b6e:	e069      	b.n	8004c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10b      	bne.n	8004b90 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b8e:	e059      	b.n	8004c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d152      	bne.n	8004c3e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b22      	cmp	r3, #34	@ 0x22
 8004b9c:	d10d      	bne.n	8004bba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bb8:	e044      	b.n	8004c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d015      	beq.n	8004bf0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b21      	cmp	r3, #33	@ 0x21
 8004bc8:	d112      	bne.n	8004bf0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	781a      	ldrb	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004bee:	e029      	b.n	8004c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d124      	bne.n	8004c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2b21      	cmp	r3, #33	@ 0x21
 8004bfe:	d121      	bne.n	8004c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c0e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc ffc0 	bl	8001bbc <HAL_I2C_MemTxCpltCallback>
}
 8004c3c:	e002      	b.n	8004c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fe ff38 	bl	8003ab4 <I2C_Flush_DR>
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b22      	cmp	r3, #34	@ 0x22
 8004c5e:	f040 80b9 	bne.w	8004dd4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d921      	bls.n	8004cba <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	f040 8096 	bne.w	8004dd4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004cb8:	e08c      	b.n	8004dd4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d07f      	beq.n	8004dc2 <I2C_MasterReceive_RXNE+0x176>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d002      	beq.n	8004cce <I2C_MasterReceive_RXNE+0x82>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d179      	bne.n	8004dc2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f001 faf6 	bl	80062c0 <I2C_WaitOnSTOPRequestThroughIT>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d14c      	bne.n	8004d74 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cf8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b40      	cmp	r3, #64	@ 0x40
 8004d32:	d10a      	bne.n	8004d4a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff fdbd 	bl	80048c2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d48:	e044      	b.n	8004dd4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d002      	beq.n	8004d5e <I2C_MasterReceive_RXNE+0x112>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d103      	bne.n	8004d66 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d64:	e002      	b.n	8004d6c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2212      	movs	r2, #18
 8004d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff fd77 	bl	8004860 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d72:	e02f      	b.n	8004dd4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d82:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff fd8a 	bl	80048d4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dc0:	e008      	b.n	8004dd4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dd0:	605a      	str	r2, [r3, #4]
}
 8004dd2:	e7ff      	b.n	8004dd4 <I2C_MasterReceive_RXNE+0x188>
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d11b      	bne.n	8004e2c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e02:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e2a:	e0c4      	b.n	8004fb6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d129      	bne.n	8004e8a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e44:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d00a      	beq.n	8004e62 <I2C_MasterReceive_BTF+0x86>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d007      	beq.n	8004e62 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e88:	e095      	b.n	8004fb6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d17d      	bne.n	8004f90 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d002      	beq.n	8004ea0 <I2C_MasterReceive_BTF+0xc4>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d108      	bne.n	8004eb2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e016      	b.n	8004ee0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d002      	beq.n	8004ebe <I2C_MasterReceive_BTF+0xe2>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d108      	bne.n	8004ed0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e007      	b.n	8004ee0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ede:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b40      	cmp	r3, #64	@ 0x40
 8004f4e:	d10a      	bne.n	8004f66 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fcaf 	bl	80048c2 <HAL_I2C_MemRxCpltCallback>
}
 8004f64:	e027      	b.n	8004fb6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d002      	beq.n	8004f7a <I2C_MasterReceive_BTF+0x19e>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d103      	bne.n	8004f82 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f80:	e002      	b.n	8004f88 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2212      	movs	r2, #18
 8004f86:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fc69 	bl	8004860 <HAL_I2C_MasterRxCpltCallback>
}
 8004f8e:	e012      	b.n	8004fb6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b40      	cmp	r3, #64	@ 0x40
 8004fd0:	d117      	bne.n	8005002 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004fec:	e067      	b.n	80050be <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]
}
 8005000:	e05d      	b.n	80050be <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800500a:	d133      	bne.n	8005074 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b21      	cmp	r3, #33	@ 0x21
 8005016:	d109      	bne.n	800502c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005028:	611a      	str	r2, [r3, #16]
 800502a:	e008      	b.n	800503e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	b2da      	uxtb	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <I2C_Master_SB+0x92>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	2b00      	cmp	r3, #0
 8005056:	d032      	beq.n	80050be <I2C_Master_SB+0x100>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505e:	2b00      	cmp	r3, #0
 8005060:	d02d      	beq.n	80050be <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005070:	605a      	str	r2, [r3, #4]
}
 8005072:	e024      	b.n	80050be <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10e      	bne.n	800509a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005080:	b29b      	uxth	r3, r3
 8005082:	11db      	asrs	r3, r3, #7
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f003 0306 	and.w	r3, r3, #6
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f063 030f 	orn	r3, r3, #15
 8005090:	b2da      	uxtb	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	611a      	str	r2, [r3, #16]
}
 8005098:	e011      	b.n	80050be <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10d      	bne.n	80050be <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	11db      	asrs	r3, r3, #7
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f003 0306 	and.w	r3, r3, #6
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f063 030e 	orn	r3, r3, #14
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	611a      	str	r2, [r3, #16]
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <I2C_Master_ADD10+0x26>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d108      	bne.n	8005100 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00c      	beq.n	8005110 <I2C_Master_ADD10+0x48>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800510e:	605a      	str	r2, [r3, #4]
  }
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800511a:	b480      	push	{r7}
 800511c:	b091      	sub	sp, #68	@ 0x44
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005128:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005136:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b22      	cmp	r3, #34	@ 0x22
 8005142:	f040 8174 	bne.w	800542e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10f      	bne.n	800516e <I2C_Master_ADDR+0x54>
 800514e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005152:	2b40      	cmp	r3, #64	@ 0x40
 8005154:	d10b      	bne.n	800516e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005156:	2300      	movs	r3, #0
 8005158:	633b      	str	r3, [r7, #48]	@ 0x30
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	633b      	str	r3, [r7, #48]	@ 0x30
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	633b      	str	r3, [r7, #48]	@ 0x30
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	e16b      	b.n	8005446 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005172:	2b00      	cmp	r3, #0
 8005174:	d11d      	bne.n	80051b2 <I2C_Master_ADDR+0x98>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800517e:	d118      	bne.n	80051b2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005180:	2300      	movs	r3, #0
 8005182:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051a4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80051b0:	e149      	b.n	8005446 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d113      	bne.n	80051e4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051bc:	2300      	movs	r3, #0
 80051be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e120      	b.n	8005426 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	f040 808a 	bne.w	8005304 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051f6:	d137      	bne.n	8005268 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005206:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005216:	d113      	bne.n	8005240 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005226:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005228:	2300      	movs	r3, #0
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	e0f2      	b.n	8005426 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005240:	2300      	movs	r3, #0
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	623b      	str	r3, [r7, #32]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	623b      	str	r3, [r7, #32]
 8005254:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e0de      	b.n	8005426 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526a:	2b08      	cmp	r3, #8
 800526c:	d02e      	beq.n	80052cc <I2C_Master_ADDR+0x1b2>
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	2b20      	cmp	r3, #32
 8005272:	d02b      	beq.n	80052cc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005276:	2b12      	cmp	r3, #18
 8005278:	d102      	bne.n	8005280 <I2C_Master_ADDR+0x166>
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	2b01      	cmp	r3, #1
 800527e:	d125      	bne.n	80052cc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005282:	2b04      	cmp	r3, #4
 8005284:	d00e      	beq.n	80052a4 <I2C_Master_ADDR+0x18a>
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	2b02      	cmp	r3, #2
 800528a:	d00b      	beq.n	80052a4 <I2C_Master_ADDR+0x18a>
 800528c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528e:	2b10      	cmp	r3, #16
 8005290:	d008      	beq.n	80052a4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e007      	b.n	80052b4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052b2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b4:	2300      	movs	r3, #0
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	e0ac      	b.n	8005426 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e090      	b.n	8005426 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d158      	bne.n	80053c0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005310:	2b04      	cmp	r3, #4
 8005312:	d021      	beq.n	8005358 <I2C_Master_ADDR+0x23e>
 8005314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005316:	2b02      	cmp	r3, #2
 8005318:	d01e      	beq.n	8005358 <I2C_Master_ADDR+0x23e>
 800531a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531c:	2b10      	cmp	r3, #16
 800531e:	d01b      	beq.n	8005358 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800532e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e012      	b.n	800537e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005366:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005368:	2300      	movs	r3, #0
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800538c:	d14b      	bne.n	8005426 <I2C_Master_ADDR+0x30c>
 800538e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005390:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005394:	d00b      	beq.n	80053ae <I2C_Master_ADDR+0x294>
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	2b01      	cmp	r3, #1
 800539a:	d008      	beq.n	80053ae <I2C_Master_ADDR+0x294>
 800539c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d005      	beq.n	80053ae <I2C_Master_ADDR+0x294>
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d002      	beq.n	80053ae <I2C_Master_ADDR+0x294>
 80053a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d13b      	bne.n	8005426 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	e032      	b.n	8005426 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053ce:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053de:	d117      	bne.n	8005410 <I2C_Master_ADDR+0x2f6>
 80053e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053e6:	d00b      	beq.n	8005400 <I2C_Master_ADDR+0x2e6>
 80053e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d008      	beq.n	8005400 <I2C_Master_ADDR+0x2e6>
 80053ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d005      	beq.n	8005400 <I2C_Master_ADDR+0x2e6>
 80053f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d002      	beq.n	8005400 <I2C_Master_ADDR+0x2e6>
 80053fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d107      	bne.n	8005410 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800540e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800542c:	e00b      	b.n	8005446 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	60bb      	str	r3, [r7, #8]
 8005442:	68bb      	ldr	r3, [r7, #8]
}
 8005444:	e7ff      	b.n	8005446 <I2C_Master_ADDR+0x32c>
 8005446:	bf00      	nop
 8005448:	3744      	adds	r7, #68	@ 0x44
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr

08005450 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800545e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d02b      	beq.n	80054c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	781a      	ldrb	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d114      	bne.n	80054c2 <I2C_SlaveTransmit_TXE+0x72>
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	2b29      	cmp	r3, #41	@ 0x29
 800549c:	d111      	bne.n	80054c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2221      	movs	r2, #33	@ 0x21
 80054b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2228      	movs	r2, #40	@ 0x28
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff f9d8 	bl	8004872 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d011      	beq.n	8005500 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005518:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d02c      	beq.n	800557e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d114      	bne.n	800557e <I2C_SlaveReceive_RXNE+0x74>
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b2a      	cmp	r3, #42	@ 0x2a
 8005558:	d111      	bne.n	800557e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005568:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2222      	movs	r2, #34	@ 0x22
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2228      	movs	r2, #40	@ 0x28
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff f983 	bl	8004884 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800557e:	bf00      	nop
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d012      	beq.n	80055be <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80055e2:	2b28      	cmp	r3, #40	@ 0x28
 80055e4:	d127      	bne.n	8005636 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	089b      	lsrs	r3, r3, #2
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005602:	2301      	movs	r3, #1
 8005604:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	09db      	lsrs	r3, r3, #7
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d103      	bne.n	800561a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	81bb      	strh	r3, [r7, #12]
 8005618:	e002      	b.n	8005620 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005628:	89ba      	ldrh	r2, [r7, #12]
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff f931 	bl	8004896 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005634:	e00e      	b.n	8005654 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	60bb      	str	r3, [r7, #8]
 800564a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800566a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800567a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800567c:	2300      	movs	r3, #0
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	60bb      	str	r3, [r7, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056b8:	d172      	bne.n	80057a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b22      	cmp	r3, #34	@ 0x22
 80056be:	d002      	beq.n	80056c6 <I2C_Slave_STOPF+0x6a>
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c4:	d135      	bne.n	8005732 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	f043 0204 	orr.w	r2, r3, #4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd feea 	bl	80034d8 <HAL_DMA_GetState>
 8005704:	4603      	mov	r3, r0
 8005706:	2b01      	cmp	r3, #1
 8005708:	d049      	beq.n	800579e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	4a69      	ldr	r2, [pc, #420]	@ (80058b4 <I2C_Slave_STOPF+0x258>)
 8005710:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005716:	4618      	mov	r0, r3
 8005718:	f7fd fe66 	bl	80033e8 <HAL_DMA_Abort_IT>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d03d      	beq.n	800579e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005730:	e035      	b.n	800579e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005764:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576a:	4618      	mov	r0, r3
 800576c:	f7fd feb4 	bl	80034d8 <HAL_DMA_GetState>
 8005770:	4603      	mov	r3, r0
 8005772:	2b01      	cmp	r3, #1
 8005774:	d014      	beq.n	80057a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577a:	4a4e      	ldr	r2, [pc, #312]	@ (80058b4 <I2C_Slave_STOPF+0x258>)
 800577c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005782:	4618      	mov	r0, r3
 8005784:	f7fd fe30 	bl	80033e8 <HAL_DMA_Abort_IT>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d008      	beq.n	80057a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005798:	4610      	mov	r0, r2
 800579a:	4798      	blx	r3
 800579c:	e000      	b.n	80057a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800579e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d03e      	beq.n	8005828 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d112      	bne.n	80057de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d112      	bne.n	8005812 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	f043 0204 	orr.w	r2, r3, #4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f843 	bl	80058bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005836:	e039      	b.n	80058ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	2b2a      	cmp	r3, #42	@ 0x2a
 800583c:	d109      	bne.n	8005852 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2228      	movs	r2, #40	@ 0x28
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff f819 	bl	8004884 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b28      	cmp	r3, #40	@ 0x28
 800585c:	d111      	bne.n	8005882 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a15      	ldr	r2, [pc, #84]	@ (80058b8 <I2C_Slave_STOPF+0x25c>)
 8005862:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff f818 	bl	80048b0 <HAL_I2C_ListenCpltCallback>
}
 8005880:	e014      	b.n	80058ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005886:	2b22      	cmp	r3, #34	@ 0x22
 8005888:	d002      	beq.n	8005890 <I2C_Slave_STOPF+0x234>
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b22      	cmp	r3, #34	@ 0x22
 800588e:	d10d      	bne.n	80058ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fe ffec 	bl	8004884 <HAL_I2C_SlaveRxCpltCallback>
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	08005e1d 	.word	0x08005e1d
 80058b8:	ffff0000 	.word	0xffff0000

080058bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	2b10      	cmp	r3, #16
 80058d8:	d002      	beq.n	80058e0 <I2C_ITError+0x24>
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	2b40      	cmp	r3, #64	@ 0x40
 80058de:	d10a      	bne.n	80058f6 <I2C_ITError+0x3a>
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b22      	cmp	r3, #34	@ 0x22
 80058e4:	d107      	bne.n	80058f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058fc:	2b28      	cmp	r3, #40	@ 0x28
 80058fe:	d107      	bne.n	8005910 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2228      	movs	r2, #40	@ 0x28
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800590e:	e015      	b.n	800593c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800591a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800591e:	d00a      	beq.n	8005936 <I2C_ITError+0x7a>
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b60      	cmp	r3, #96	@ 0x60
 8005924:	d007      	beq.n	8005936 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800594a:	d162      	bne.n	8005a12 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800595a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005960:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	d020      	beq.n	80059ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800596e:	4a6a      	ldr	r2, [pc, #424]	@ (8005b18 <I2C_ITError+0x25c>)
 8005970:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd fd36 	bl	80033e8 <HAL_DMA_Abort_IT>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 8089 	beq.w	8005a96 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059a6:	4610      	mov	r0, r2
 80059a8:	4798      	blx	r3
 80059aa:	e074      	b.n	8005a96 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	4a59      	ldr	r2, [pc, #356]	@ (8005b18 <I2C_ITError+0x25c>)
 80059b2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fd fd15 	bl	80033e8 <HAL_DMA_Abort_IT>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d068      	beq.n	8005a96 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ce:	2b40      	cmp	r3, #64	@ 0x40
 80059d0:	d10b      	bne.n	80059ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
 8005a10:	e041      	b.n	8005a96 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b60      	cmp	r3, #96	@ 0x60
 8005a1c:	d125      	bne.n	8005a6a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a36:	2b40      	cmp	r3, #64	@ 0x40
 8005a38:	d10b      	bne.n	8005a52 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fe ff3f 	bl	80048e6 <HAL_I2C_AbortCpltCallback>
 8005a68:	e015      	b.n	8005a96 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a74:	2b40      	cmp	r3, #64	@ 0x40
 8005a76:	d10b      	bne.n	8005a90 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7fe ff1f 	bl	80048d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10e      	bne.n	8005ac4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ad2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ada:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d113      	bne.n	8005b10 <I2C_ITError+0x254>
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b28      	cmp	r3, #40	@ 0x28
 8005aec:	d110      	bne.n	8005b10 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a0a      	ldr	r2, [pc, #40]	@ (8005b1c <I2C_ITError+0x260>)
 8005af2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fe fed0 	bl	80048b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	08005e1d 	.word	0x08005e1d
 8005b1c:	ffff0000 	.word	0xffff0000

08005b20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	4608      	mov	r0, r1
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4603      	mov	r3, r0
 8005b30:	817b      	strh	r3, [r7, #10]
 8005b32:	460b      	mov	r3, r1
 8005b34:	813b      	strh	r3, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fa08 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00d      	beq.n	8005b7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b70:	d103      	bne.n	8005b7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e05f      	b.n	8005c3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b7e:	897b      	ldrh	r3, [r7, #10]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	6a3a      	ldr	r2, [r7, #32]
 8005b92:	492d      	ldr	r1, [pc, #180]	@ (8005c48 <I2C_RequestMemoryWrite+0x128>)
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 fa63 	bl	8006060 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e04c      	b.n	8005c3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bbc:	6a39      	ldr	r1, [r7, #32]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 faee 	bl	80061a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d107      	bne.n	8005be2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e02b      	b.n	8005c3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d105      	bne.n	8005bf8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bec:	893b      	ldrh	r3, [r7, #8]
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	611a      	str	r2, [r3, #16]
 8005bf6:	e021      	b.n	8005c3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bf8:	893b      	ldrh	r3, [r7, #8]
 8005bfa:	0a1b      	lsrs	r3, r3, #8
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c08:	6a39      	ldr	r1, [r7, #32]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fac8 	bl	80061a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d107      	bne.n	8005c2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e005      	b.n	8005c3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c32:	893b      	ldrh	r3, [r7, #8]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	00010002 	.word	0x00010002

08005c4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	4608      	mov	r0, r1
 8005c56:	4611      	mov	r1, r2
 8005c58:	461a      	mov	r2, r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	817b      	strh	r3, [r7, #10]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	813b      	strh	r3, [r7, #8]
 8005c62:	4613      	mov	r3, r2
 8005c64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f96a 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00d      	beq.n	8005cba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cac:	d103      	bne.n	8005cb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0aa      	b.n	8005e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cba:	897b      	ldrh	r3, [r7, #10]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	4952      	ldr	r1, [pc, #328]	@ (8005e18 <I2C_RequestMemoryRead+0x1cc>)
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f9c5 	bl	8006060 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e097      	b.n	8005e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf8:	6a39      	ldr	r1, [r7, #32]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fa50 	bl	80061a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d107      	bne.n	8005d1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e076      	b.n	8005e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d105      	bne.n	8005d34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d28:	893b      	ldrh	r3, [r7, #8]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	611a      	str	r2, [r3, #16]
 8005d32:	e021      	b.n	8005d78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d34:	893b      	ldrh	r3, [r7, #8]
 8005d36:	0a1b      	lsrs	r3, r3, #8
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d44:	6a39      	ldr	r1, [r7, #32]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fa2a 	bl	80061a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00d      	beq.n	8005d6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d107      	bne.n	8005d6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e050      	b.n	8005e10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d6e:	893b      	ldrh	r3, [r7, #8]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7a:	6a39      	ldr	r1, [r7, #32]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fa0f 	bl	80061a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00d      	beq.n	8005da4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d107      	bne.n	8005da0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e035      	b.n	8005e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005db2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f8d3 	bl	8005f6c <I2C_WaitOnFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00d      	beq.n	8005de8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dda:	d103      	bne.n	8005de4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005de2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e013      	b.n	8005e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005de8:	897b      	ldrh	r3, [r7, #10]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f043 0301 	orr.w	r3, r3, #1
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	6a3a      	ldr	r2, [r7, #32]
 8005dfc:	4906      	ldr	r1, [pc, #24]	@ (8005e18 <I2C_RequestMemoryRead+0x1cc>)
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f92e 	bl	8006060 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	00010002 	.word	0x00010002

08005e1c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e34:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e36:	4b4b      	ldr	r3, [pc, #300]	@ (8005f64 <I2C_DMAAbort+0x148>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	08db      	lsrs	r3, r3, #3
 8005e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f68 <I2C_DMAAbort+0x14c>)
 8005e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e42:	0a1a      	lsrs	r2, r3, #8
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	00da      	lsls	r2, r3, #3
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005e62:	e00a      	b.n	8005e7a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e78:	d0ea      	beq.n	8005e50 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e86:	2200      	movs	r2, #0
 8005e88:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e96:	2200      	movs	r2, #0
 8005e98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ea8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ecc:	2200      	movs	r2, #0
 8005ece:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b60      	cmp	r3, #96	@ 0x60
 8005eea:	d10e      	bne.n	8005f0a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2200      	movs	r2, #0
 8005f00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f02:	6978      	ldr	r0, [r7, #20]
 8005f04:	f7fe fcef 	bl	80048e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f08:	e027      	b.n	8005f5a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f0a:	7cfb      	ldrb	r3, [r7, #19]
 8005f0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f10:	2b28      	cmp	r3, #40	@ 0x28
 8005f12:	d117      	bne.n	8005f44 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2200      	movs	r2, #0
 8005f38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2228      	movs	r2, #40	@ 0x28
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005f42:	e007      	b.n	8005f54 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f54:	6978      	ldr	r0, [r7, #20]
 8005f56:	f7fe fcbd 	bl	80048d4 <HAL_I2C_ErrorCallback>
}
 8005f5a:	bf00      	nop
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000004 	.word	0x20000004
 8005f68:	14f8b589 	.word	0x14f8b589

08005f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f7c:	e048      	b.n	8006010 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d044      	beq.n	8006010 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f86:	f7fc fa29 	bl	80023dc <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d302      	bcc.n	8005f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d139      	bne.n	8006010 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	0c1b      	lsrs	r3, r3, #16
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d10d      	bne.n	8005fc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	43da      	mvns	r2, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	e00c      	b.n	8005fdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	43da      	mvns	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d116      	bne.n	8006010 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffc:	f043 0220 	orr.w	r2, r3, #32
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e023      	b.n	8006058 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	0c1b      	lsrs	r3, r3, #16
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b01      	cmp	r3, #1
 8006018:	d10d      	bne.n	8006036 <I2C_WaitOnFlagUntilTimeout+0xca>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	43da      	mvns	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	4013      	ands	r3, r2
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	bf0c      	ite	eq
 800602c:	2301      	moveq	r3, #1
 800602e:	2300      	movne	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	e00c      	b.n	8006050 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	43da      	mvns	r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4013      	ands	r3, r2
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	429a      	cmp	r2, r3
 8006054:	d093      	beq.n	8005f7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800606e:	e071      	b.n	8006154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800607a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800607e:	d123      	bne.n	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800608e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006098:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b4:	f043 0204 	orr.w	r2, r3, #4
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e067      	b.n	8006198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d041      	beq.n	8006154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d0:	f7fc f984 	bl	80023dc <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d302      	bcc.n	80060e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d136      	bne.n	8006154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d10c      	bne.n	800610a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	43da      	mvns	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bf14      	ite	ne
 8006102:	2301      	movne	r3, #1
 8006104:	2300      	moveq	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	e00b      	b.n	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	43da      	mvns	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4013      	ands	r3, r2
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	bf14      	ite	ne
 800611c:	2301      	movne	r3, #1
 800611e:	2300      	moveq	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d016      	beq.n	8006154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006140:	f043 0220 	orr.w	r2, r3, #32
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e021      	b.n	8006198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10c      	bne.n	8006178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	43da      	mvns	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4013      	ands	r3, r2
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	e00b      	b.n	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	43da      	mvns	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4013      	ands	r3, r2
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	bf14      	ite	ne
 800618a:	2301      	movne	r3, #1
 800618c:	2300      	moveq	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	f47f af6d 	bne.w	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ac:	e034      	b.n	8006218 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 f915 	bl	80063de <I2C_IsAcknowledgeFailed>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e034      	b.n	8006228 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d028      	beq.n	8006218 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c6:	f7fc f909 	bl	80023dc <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d302      	bcc.n	80061dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d11d      	bne.n	8006218 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e6:	2b80      	cmp	r3, #128	@ 0x80
 80061e8:	d016      	beq.n	8006218 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006204:	f043 0220 	orr.w	r2, r3, #32
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e007      	b.n	8006228 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006222:	2b80      	cmp	r3, #128	@ 0x80
 8006224:	d1c3      	bne.n	80061ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800623c:	e034      	b.n	80062a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f8cd 	bl	80063de <I2C_IsAcknowledgeFailed>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e034      	b.n	80062b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d028      	beq.n	80062a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006256:	f7fc f8c1 	bl	80023dc <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	d302      	bcc.n	800626c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d11d      	bne.n	80062a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b04      	cmp	r3, #4
 8006278:	d016      	beq.n	80062a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006294:	f043 0220 	orr.w	r2, r3, #32
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e007      	b.n	80062b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d1c3      	bne.n	800623e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80062cc:	4b13      	ldr	r3, [pc, #76]	@ (800631c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	08db      	lsrs	r3, r3, #3
 80062d2:	4a13      	ldr	r2, [pc, #76]	@ (8006320 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80062d4:	fba2 2303 	umull	r2, r3, r2, r3
 80062d8:	0a1a      	lsrs	r2, r3, #8
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d107      	bne.n	80062fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f2:	f043 0220 	orr.w	r2, r3, #32
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e008      	b.n	8006310 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800630c:	d0e9      	beq.n	80062e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000004 	.word	0x20000004
 8006320:	14f8b589 	.word	0x14f8b589

08006324 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006330:	e049      	b.n	80063c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b10      	cmp	r3, #16
 800633e:	d119      	bne.n	8006374 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0210 	mvn.w	r2, #16
 8006348:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e030      	b.n	80063d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006374:	f7fc f832 	bl	80023dc <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	429a      	cmp	r2, r3
 8006382:	d302      	bcc.n	800638a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d11d      	bne.n	80063c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006394:	2b40      	cmp	r3, #64	@ 0x40
 8006396:	d016      	beq.n	80063c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b2:	f043 0220 	orr.w	r2, r3, #32
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e007      	b.n	80063d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d0:	2b40      	cmp	r3, #64	@ 0x40
 80063d2:	d1ae      	bne.n	8006332 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f4:	d11b      	bne.n	800642e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	f043 0204 	orr.w	r2, r3, #4
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr

0800643a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006446:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800644a:	d103      	bne.n	8006454 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006452:	e007      	b.n	8006464 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006458:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800645c:	d102      	bne.n	8006464 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2208      	movs	r2, #8
 8006462:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr
	...

08006470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e272      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 8087 	beq.w	800659e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006490:	4b92      	ldr	r3, [pc, #584]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f003 030c 	and.w	r3, r3, #12
 8006498:	2b04      	cmp	r3, #4
 800649a:	d00c      	beq.n	80064b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800649c:	4b8f      	ldr	r3, [pc, #572]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 030c 	and.w	r3, r3, #12
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d112      	bne.n	80064ce <HAL_RCC_OscConfig+0x5e>
 80064a8:	4b8c      	ldr	r3, [pc, #560]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b4:	d10b      	bne.n	80064ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b6:	4b89      	ldr	r3, [pc, #548]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d06c      	beq.n	800659c <HAL_RCC_OscConfig+0x12c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d168      	bne.n	800659c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e24c      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d6:	d106      	bne.n	80064e6 <HAL_RCC_OscConfig+0x76>
 80064d8:	4b80      	ldr	r3, [pc, #512]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a7f      	ldr	r2, [pc, #508]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80064de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	e02e      	b.n	8006544 <HAL_RCC_OscConfig+0xd4>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10c      	bne.n	8006508 <HAL_RCC_OscConfig+0x98>
 80064ee:	4b7b      	ldr	r3, [pc, #492]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a7a      	ldr	r2, [pc, #488]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80064f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	4b78      	ldr	r3, [pc, #480]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a77      	ldr	r2, [pc, #476]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	e01d      	b.n	8006544 <HAL_RCC_OscConfig+0xd4>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006510:	d10c      	bne.n	800652c <HAL_RCC_OscConfig+0xbc>
 8006512:	4b72      	ldr	r3, [pc, #456]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a71      	ldr	r2, [pc, #452]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	4b6f      	ldr	r3, [pc, #444]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a6e      	ldr	r2, [pc, #440]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	e00b      	b.n	8006544 <HAL_RCC_OscConfig+0xd4>
 800652c:	4b6b      	ldr	r3, [pc, #428]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a6a      	ldr	r2, [pc, #424]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	4b68      	ldr	r3, [pc, #416]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a67      	ldr	r2, [pc, #412]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 800653e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006542:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d013      	beq.n	8006574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800654c:	f7fb ff46 	bl	80023dc <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006554:	f7fb ff42 	bl	80023dc <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b64      	cmp	r3, #100	@ 0x64
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e200      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006566:	4b5d      	ldr	r3, [pc, #372]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0f0      	beq.n	8006554 <HAL_RCC_OscConfig+0xe4>
 8006572:	e014      	b.n	800659e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006574:	f7fb ff32 	bl	80023dc <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800657c:	f7fb ff2e 	bl	80023dc <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	@ 0x64
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e1ec      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800658e:	4b53      	ldr	r3, [pc, #332]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f0      	bne.n	800657c <HAL_RCC_OscConfig+0x10c>
 800659a:	e000      	b.n	800659e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800659c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d063      	beq.n	8006672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065aa:	4b4c      	ldr	r3, [pc, #304]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065b6:	4b49      	ldr	r3, [pc, #292]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f003 030c 	and.w	r3, r3, #12
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d11c      	bne.n	80065fc <HAL_RCC_OscConfig+0x18c>
 80065c2:	4b46      	ldr	r3, [pc, #280]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d116      	bne.n	80065fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ce:	4b43      	ldr	r3, [pc, #268]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <HAL_RCC_OscConfig+0x176>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d001      	beq.n	80065e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e1c0      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e6:	4b3d      	ldr	r3, [pc, #244]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	4939      	ldr	r1, [pc, #228]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065fa:	e03a      	b.n	8006672 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d020      	beq.n	8006646 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006604:	4b36      	ldr	r3, [pc, #216]	@ (80066e0 <HAL_RCC_OscConfig+0x270>)
 8006606:	2201      	movs	r2, #1
 8006608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660a:	f7fb fee7 	bl	80023dc <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006612:	f7fb fee3 	bl	80023dc <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e1a1      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006624:	4b2d      	ldr	r3, [pc, #180]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0f0      	beq.n	8006612 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006630:	4b2a      	ldr	r3, [pc, #168]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	4927      	ldr	r1, [pc, #156]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006640:	4313      	orrs	r3, r2
 8006642:	600b      	str	r3, [r1, #0]
 8006644:	e015      	b.n	8006672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006646:	4b26      	ldr	r3, [pc, #152]	@ (80066e0 <HAL_RCC_OscConfig+0x270>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664c:	f7fb fec6 	bl	80023dc <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006654:	f7fb fec2 	bl	80023dc <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e180      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006666:	4b1d      	ldr	r3, [pc, #116]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d03a      	beq.n	80066f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d019      	beq.n	80066ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006686:	4b17      	ldr	r3, [pc, #92]	@ (80066e4 <HAL_RCC_OscConfig+0x274>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800668c:	f7fb fea6 	bl	80023dc <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006694:	f7fb fea2 	bl	80023dc <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e160      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066a6:	4b0d      	ldr	r3, [pc, #52]	@ (80066dc <HAL_RCC_OscConfig+0x26c>)
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80066b2:	2001      	movs	r0, #1
 80066b4:	f000 face 	bl	8006c54 <RCC_Delay>
 80066b8:	e01c      	b.n	80066f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ba:	4b0a      	ldr	r3, [pc, #40]	@ (80066e4 <HAL_RCC_OscConfig+0x274>)
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c0:	f7fb fe8c 	bl	80023dc <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066c6:	e00f      	b.n	80066e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066c8:	f7fb fe88 	bl	80023dc <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d908      	bls.n	80066e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e146      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
 80066da:	bf00      	nop
 80066dc:	40021000 	.word	0x40021000
 80066e0:	42420000 	.word	0x42420000
 80066e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e8:	4b92      	ldr	r3, [pc, #584]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e9      	bne.n	80066c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 80a6 	beq.w	800684e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006702:	2300      	movs	r3, #0
 8006704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006706:	4b8b      	ldr	r3, [pc, #556]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10d      	bne.n	800672e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006712:	4b88      	ldr	r3, [pc, #544]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	4a87      	ldr	r2, [pc, #540]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800671c:	61d3      	str	r3, [r2, #28]
 800671e:	4b85      	ldr	r3, [pc, #532]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006726:	60bb      	str	r3, [r7, #8]
 8006728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800672a:	2301      	movs	r3, #1
 800672c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672e:	4b82      	ldr	r3, [pc, #520]	@ (8006938 <HAL_RCC_OscConfig+0x4c8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d118      	bne.n	800676c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800673a:	4b7f      	ldr	r3, [pc, #508]	@ (8006938 <HAL_RCC_OscConfig+0x4c8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a7e      	ldr	r2, [pc, #504]	@ (8006938 <HAL_RCC_OscConfig+0x4c8>)
 8006740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006746:	f7fb fe49 	bl	80023dc <HAL_GetTick>
 800674a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674c:	e008      	b.n	8006760 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800674e:	f7fb fe45 	bl	80023dc <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b64      	cmp	r3, #100	@ 0x64
 800675a:	d901      	bls.n	8006760 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e103      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006760:	4b75      	ldr	r3, [pc, #468]	@ (8006938 <HAL_RCC_OscConfig+0x4c8>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0f0      	beq.n	800674e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d106      	bne.n	8006782 <HAL_RCC_OscConfig+0x312>
 8006774:	4b6f      	ldr	r3, [pc, #444]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	4a6e      	ldr	r2, [pc, #440]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 800677a:	f043 0301 	orr.w	r3, r3, #1
 800677e:	6213      	str	r3, [r2, #32]
 8006780:	e02d      	b.n	80067de <HAL_RCC_OscConfig+0x36e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10c      	bne.n	80067a4 <HAL_RCC_OscConfig+0x334>
 800678a:	4b6a      	ldr	r3, [pc, #424]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	4a69      	ldr	r2, [pc, #420]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006790:	f023 0301 	bic.w	r3, r3, #1
 8006794:	6213      	str	r3, [r2, #32]
 8006796:	4b67      	ldr	r3, [pc, #412]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	4a66      	ldr	r2, [pc, #408]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 800679c:	f023 0304 	bic.w	r3, r3, #4
 80067a0:	6213      	str	r3, [r2, #32]
 80067a2:	e01c      	b.n	80067de <HAL_RCC_OscConfig+0x36e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	2b05      	cmp	r3, #5
 80067aa:	d10c      	bne.n	80067c6 <HAL_RCC_OscConfig+0x356>
 80067ac:	4b61      	ldr	r3, [pc, #388]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	4a60      	ldr	r2, [pc, #384]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80067b2:	f043 0304 	orr.w	r3, r3, #4
 80067b6:	6213      	str	r3, [r2, #32]
 80067b8:	4b5e      	ldr	r3, [pc, #376]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	4a5d      	ldr	r2, [pc, #372]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	6213      	str	r3, [r2, #32]
 80067c4:	e00b      	b.n	80067de <HAL_RCC_OscConfig+0x36e>
 80067c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	4a5a      	ldr	r2, [pc, #360]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	6213      	str	r3, [r2, #32]
 80067d2:	4b58      	ldr	r3, [pc, #352]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	4a57      	ldr	r2, [pc, #348]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80067d8:	f023 0304 	bic.w	r3, r3, #4
 80067dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d015      	beq.n	8006812 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e6:	f7fb fdf9 	bl	80023dc <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ec:	e00a      	b.n	8006804 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ee:	f7fb fdf5 	bl	80023dc <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e0b1      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006804:	4b4b      	ldr	r3, [pc, #300]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0ee      	beq.n	80067ee <HAL_RCC_OscConfig+0x37e>
 8006810:	e014      	b.n	800683c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006812:	f7fb fde3 	bl	80023dc <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006818:	e00a      	b.n	8006830 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681a:	f7fb fddf 	bl	80023dc <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006828:	4293      	cmp	r3, r2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e09b      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006830:	4b40      	ldr	r3, [pc, #256]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1ee      	bne.n	800681a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d105      	bne.n	800684e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006842:	4b3c      	ldr	r3, [pc, #240]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	4a3b      	ldr	r2, [pc, #236]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 8006848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800684c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 8087 	beq.w	8006966 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006858:	4b36      	ldr	r3, [pc, #216]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f003 030c 	and.w	r3, r3, #12
 8006860:	2b08      	cmp	r3, #8
 8006862:	d061      	beq.n	8006928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d146      	bne.n	80068fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686c:	4b33      	ldr	r3, [pc, #204]	@ (800693c <HAL_RCC_OscConfig+0x4cc>)
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006872:	f7fb fdb3 	bl	80023dc <HAL_GetTick>
 8006876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006878:	e008      	b.n	800688c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800687a:	f7fb fdaf 	bl	80023dc <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e06d      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800688c:	4b29      	ldr	r3, [pc, #164]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1f0      	bne.n	800687a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a0:	d108      	bne.n	80068b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80068a2:	4b24      	ldr	r3, [pc, #144]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	4921      	ldr	r1, [pc, #132]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a19      	ldr	r1, [r3, #32]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	430b      	orrs	r3, r1
 80068c6:	491b      	ldr	r1, [pc, #108]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068cc:	4b1b      	ldr	r3, [pc, #108]	@ (800693c <HAL_RCC_OscConfig+0x4cc>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d2:	f7fb fd83 	bl	80023dc <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068da:	f7fb fd7f 	bl	80023dc <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e03d      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068ec:	4b11      	ldr	r3, [pc, #68]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x46a>
 80068f8:	e035      	b.n	8006966 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068fa:	4b10      	ldr	r3, [pc, #64]	@ (800693c <HAL_RCC_OscConfig+0x4cc>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006900:	f7fb fd6c 	bl	80023dc <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006908:	f7fb fd68 	bl	80023dc <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e026      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800691a:	4b06      	ldr	r3, [pc, #24]	@ (8006934 <HAL_RCC_OscConfig+0x4c4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f0      	bne.n	8006908 <HAL_RCC_OscConfig+0x498>
 8006926:	e01e      	b.n	8006966 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d107      	bne.n	8006940 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e019      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
 8006934:	40021000 	.word	0x40021000
 8006938:	40007000 	.word	0x40007000
 800693c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006940:	4b0b      	ldr	r3, [pc, #44]	@ (8006970 <HAL_RCC_OscConfig+0x500>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	429a      	cmp	r2, r3
 8006952:	d106      	bne.n	8006962 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695e:	429a      	cmp	r2, r3
 8006960:	d001      	beq.n	8006966 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40021000 	.word	0x40021000

08006974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e0d0      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006988:	4b6a      	ldr	r3, [pc, #424]	@ (8006b34 <HAL_RCC_ClockConfig+0x1c0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d910      	bls.n	80069b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006996:	4b67      	ldr	r3, [pc, #412]	@ (8006b34 <HAL_RCC_ClockConfig+0x1c0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f023 0207 	bic.w	r2, r3, #7
 800699e:	4965      	ldr	r1, [pc, #404]	@ (8006b34 <HAL_RCC_ClockConfig+0x1c0>)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069a6:	4b63      	ldr	r3, [pc, #396]	@ (8006b34 <HAL_RCC_ClockConfig+0x1c0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d001      	beq.n	80069b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0b8      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d020      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069d0:	4b59      	ldr	r3, [pc, #356]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	4a58      	ldr	r2, [pc, #352]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 80069d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80069da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069e8:	4b53      	ldr	r3, [pc, #332]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	4a52      	ldr	r2, [pc, #328]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 80069ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80069f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069f4:	4b50      	ldr	r3, [pc, #320]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	494d      	ldr	r1, [pc, #308]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d040      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d107      	bne.n	8006a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a1a:	4b47      	ldr	r3, [pc, #284]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d115      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e07f      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d107      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a32:	4b41      	ldr	r3, [pc, #260]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e073      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a42:	4b3d      	ldr	r3, [pc, #244]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e06b      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a52:	4b39      	ldr	r3, [pc, #228]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f023 0203 	bic.w	r2, r3, #3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	4936      	ldr	r1, [pc, #216]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a64:	f7fb fcba 	bl	80023dc <HAL_GetTick>
 8006a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a6a:	e00a      	b.n	8006a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a6c:	f7fb fcb6 	bl	80023dc <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e053      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a82:	4b2d      	ldr	r3, [pc, #180]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f003 020c 	and.w	r2, r3, #12
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d1eb      	bne.n	8006a6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a94:	4b27      	ldr	r3, [pc, #156]	@ (8006b34 <HAL_RCC_ClockConfig+0x1c0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d210      	bcs.n	8006ac4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa2:	4b24      	ldr	r3, [pc, #144]	@ (8006b34 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f023 0207 	bic.w	r2, r3, #7
 8006aaa:	4922      	ldr	r1, [pc, #136]	@ (8006b34 <HAL_RCC_ClockConfig+0x1c0>)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ab2:	4b20      	ldr	r3, [pc, #128]	@ (8006b34 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e032      	b.n	8006b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d008      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ad0:	4b19      	ldr	r3, [pc, #100]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	4916      	ldr	r1, [pc, #88]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d009      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006aee:	4b12      	ldr	r3, [pc, #72]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	490e      	ldr	r1, [pc, #56]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b02:	f000 f821 	bl	8006b48 <HAL_RCC_GetSysClockFreq>
 8006b06:	4602      	mov	r2, r0
 8006b08:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	091b      	lsrs	r3, r3, #4
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	490a      	ldr	r1, [pc, #40]	@ (8006b3c <HAL_RCC_ClockConfig+0x1c8>)
 8006b14:	5ccb      	ldrb	r3, [r1, r3]
 8006b16:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1a:	4a09      	ldr	r2, [pc, #36]	@ (8006b40 <HAL_RCC_ClockConfig+0x1cc>)
 8006b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b1e:	4b09      	ldr	r3, [pc, #36]	@ (8006b44 <HAL_RCC_ClockConfig+0x1d0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fb fc18 	bl	8002358 <HAL_InitTick>

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	40022000 	.word	0x40022000
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	080110e8 	.word	0x080110e8
 8006b40:	20000004 	.word	0x20000004
 8006b44:	20000008 	.word	0x20000008

08006b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	2300      	movs	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b62:	4b1e      	ldr	r3, [pc, #120]	@ (8006bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d002      	beq.n	8006b78 <HAL_RCC_GetSysClockFreq+0x30>
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d003      	beq.n	8006b7e <HAL_RCC_GetSysClockFreq+0x36>
 8006b76:	e027      	b.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b78:	4b19      	ldr	r3, [pc, #100]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006b7a:	613b      	str	r3, [r7, #16]
      break;
 8006b7c:	e027      	b.n	8006bce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	0c9b      	lsrs	r3, r3, #18
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	4a17      	ldr	r2, [pc, #92]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006b88:	5cd3      	ldrb	r3, [r2, r3]
 8006b8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d010      	beq.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b96:	4b11      	ldr	r3, [pc, #68]	@ (8006bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	0c5b      	lsrs	r3, r3, #17
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	4a11      	ldr	r2, [pc, #68]	@ (8006be8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006ba2:	5cd3      	ldrb	r3, [r2, r3]
 8006ba4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006baa:	fb03 f202 	mul.w	r2, r3, r2
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a0c      	ldr	r2, [pc, #48]	@ (8006bec <HAL_RCC_GetSysClockFreq+0xa4>)
 8006bbc:	fb02 f303 	mul.w	r3, r2, r3
 8006bc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	613b      	str	r3, [r7, #16]
      break;
 8006bc6:	e002      	b.n	8006bce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bc8:	4b05      	ldr	r3, [pc, #20]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006bca:	613b      	str	r3, [r7, #16]
      break;
 8006bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bce:	693b      	ldr	r3, [r7, #16]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	371c      	adds	r7, #28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc80      	pop	{r7}
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	007a1200 	.word	0x007a1200
 8006be4:	08011100 	.word	0x08011100
 8006be8:	08011110 	.word	0x08011110
 8006bec:	003d0900 	.word	0x003d0900

08006bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bf4:	4b02      	ldr	r3, [pc, #8]	@ (8006c00 <HAL_RCC_GetHCLKFreq+0x10>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr
 8006c00:	20000004 	.word	0x20000004

08006c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c08:	f7ff fff2 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	4b05      	ldr	r3, [pc, #20]	@ (8006c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	4903      	ldr	r1, [pc, #12]	@ (8006c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c1a:	5ccb      	ldrb	r3, [r1, r3]
 8006c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40021000 	.word	0x40021000
 8006c28:	080110f8 	.word	0x080110f8

08006c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c30:	f7ff ffde 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8006c34:	4602      	mov	r2, r0
 8006c36:	4b05      	ldr	r3, [pc, #20]	@ (8006c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	0adb      	lsrs	r3, r3, #11
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	4903      	ldr	r1, [pc, #12]	@ (8006c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c42:	5ccb      	ldrb	r3, [r1, r3]
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	080110f8 	.word	0x080110f8

08006c54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <RCC_Delay+0x34>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a0a      	ldr	r2, [pc, #40]	@ (8006c8c <RCC_Delay+0x38>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	0a5b      	lsrs	r3, r3, #9
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	fb02 f303 	mul.w	r3, r2, r3
 8006c6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c70:	bf00      	nop
  }
  while (Delay --);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1e5a      	subs	r2, r3, #1
 8006c76:	60fa      	str	r2, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f9      	bne.n	8006c70 <RCC_Delay+0x1c>
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr
 8006c88:	20000004 	.word	0x20000004
 8006c8c:	10624dd3 	.word	0x10624dd3

08006c90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e076      	b.n	8006d90 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d108      	bne.n	8006cbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cb2:	d009      	beq.n	8006cc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	61da      	str	r2, [r3, #28]
 8006cba:	e005      	b.n	8006cc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fb f900 	bl	8001ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4c:	ea42 0103 	orr.w	r1, r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d54:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	0c1a      	lsrs	r2, r3, #16
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f002 0204 	and.w	r2, r2, #4
 8006d6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69da      	ldr	r2, [r3, #28]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4613      	mov	r3, r2
 8006da6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006da8:	f7fb fb18 	bl	80023dc <HAL_GetTick>
 8006dac:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d001      	beq.n	8006dc2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e12a      	b.n	8007018 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_SPI_Transmit+0x36>
 8006dc8:	88fb      	ldrh	r3, [r7, #6]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e122      	b.n	8007018 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_SPI_Transmit+0x48>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e11b      	b.n	8007018 <HAL_SPI_Transmit+0x280>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2203      	movs	r2, #3
 8006dec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	88fa      	ldrh	r2, [r7, #6]
 8006e06:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e2e:	d10f      	bne.n	8006e50 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5a:	2b40      	cmp	r3, #64	@ 0x40
 8006e5c:	d007      	beq.n	8006e6e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e76:	d152      	bne.n	8006f1e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <HAL_SPI_Transmit+0xee>
 8006e80:	8b7b      	ldrh	r3, [r7, #26]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d145      	bne.n	8006f12 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e8a:	881a      	ldrh	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e96:	1c9a      	adds	r2, r3, #2
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006eaa:	e032      	b.n	8006f12 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d112      	bne.n	8006ee0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ebe:	881a      	ldrh	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eca:	1c9a      	adds	r2, r3, #2
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ede:	e018      	b.n	8006f12 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ee0:	f7fb fa7c 	bl	80023dc <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d803      	bhi.n	8006ef8 <HAL_SPI_Transmit+0x160>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d102      	bne.n	8006efe <HAL_SPI_Transmit+0x166>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d109      	bne.n	8006f12 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e082      	b.n	8007018 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1c7      	bne.n	8006eac <HAL_SPI_Transmit+0x114>
 8006f1c:	e053      	b.n	8006fc6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_SPI_Transmit+0x194>
 8006f26:	8b7b      	ldrh	r3, [r7, #26]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d147      	bne.n	8006fbc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	330c      	adds	r3, #12
 8006f36:	7812      	ldrb	r2, [r2, #0]
 8006f38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f52:	e033      	b.n	8006fbc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d113      	bne.n	8006f8a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f88:	e018      	b.n	8006fbc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f8a:	f7fb fa27 	bl	80023dc <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d803      	bhi.n	8006fa2 <HAL_SPI_Transmit+0x20a>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d102      	bne.n	8006fa8 <HAL_SPI_Transmit+0x210>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e02d      	b.n	8007018 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1c6      	bne.n	8006f54 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fa66 	bl	800749c <SPI_EndRxTxTransaction>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007016:	2300      	movs	r3, #0
  }
}
 8007018:	4618      	mov	r0, r3
 800701a:	3720      	adds	r7, #32
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08a      	sub	sp, #40	@ 0x28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800702e:	2301      	movs	r3, #1
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007032:	f7fb f9d3 	bl	80023dc <HAL_GetTick>
 8007036:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800703e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007046:	887b      	ldrh	r3, [r7, #2]
 8007048:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800704a:	7ffb      	ldrb	r3, [r7, #31]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d00c      	beq.n	800706a <HAL_SPI_TransmitReceive+0x4a>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007056:	d106      	bne.n	8007066 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <HAL_SPI_TransmitReceive+0x46>
 8007060:	7ffb      	ldrb	r3, [r7, #31]
 8007062:	2b04      	cmp	r3, #4
 8007064:	d001      	beq.n	800706a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007066:	2302      	movs	r3, #2
 8007068:	e17f      	b.n	800736a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <HAL_SPI_TransmitReceive+0x5c>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <HAL_SPI_TransmitReceive+0x5c>
 8007076:	887b      	ldrh	r3, [r7, #2]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e174      	b.n	800736a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_SPI_TransmitReceive+0x6e>
 800708a:	2302      	movs	r3, #2
 800708c:	e16d      	b.n	800736a <HAL_SPI_TransmitReceive+0x34a>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d003      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2205      	movs	r2, #5
 80070a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	887a      	ldrh	r2, [r7, #2]
 80070ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	887a      	ldrh	r2, [r7, #2]
 80070c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	887a      	ldrh	r2, [r7, #2]
 80070cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	887a      	ldrh	r2, [r7, #2]
 80070d2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ea:	2b40      	cmp	r3, #64	@ 0x40
 80070ec:	d007      	beq.n	80070fe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007106:	d17e      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_SPI_TransmitReceive+0xf6>
 8007110:	8afb      	ldrh	r3, [r7, #22]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d16c      	bne.n	80071f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711a:	881a      	ldrh	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007126:	1c9a      	adds	r2, r3, #2
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007130:	b29b      	uxth	r3, r3
 8007132:	3b01      	subs	r3, #1
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800713a:	e059      	b.n	80071f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b02      	cmp	r3, #2
 8007148:	d11b      	bne.n	8007182 <HAL_SPI_TransmitReceive+0x162>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d016      	beq.n	8007182 <HAL_SPI_TransmitReceive+0x162>
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	2b01      	cmp	r3, #1
 8007158:	d113      	bne.n	8007182 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715e:	881a      	ldrh	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716a:	1c9a      	adds	r2, r3, #2
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007174:	b29b      	uxth	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b01      	cmp	r3, #1
 800718e:	d119      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x1a4>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d014      	beq.n	80071c4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a4:	b292      	uxth	r2, r2
 80071a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ac:	1c9a      	adds	r2, r3, #2
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071c0:	2301      	movs	r3, #1
 80071c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071c4:	f7fb f90a 	bl	80023dc <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d80d      	bhi.n	80071f0 <HAL_SPI_TransmitReceive+0x1d0>
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d009      	beq.n	80071f0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e0bc      	b.n	800736a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1a0      	bne.n	800713c <HAL_SPI_TransmitReceive+0x11c>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d19b      	bne.n	800713c <HAL_SPI_TransmitReceive+0x11c>
 8007204:	e082      	b.n	800730c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_SPI_TransmitReceive+0x1f4>
 800720e:	8afb      	ldrh	r3, [r7, #22]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d171      	bne.n	80072f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	7812      	ldrb	r2, [r2, #0]
 8007220:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800723a:	e05d      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b02      	cmp	r3, #2
 8007248:	d11c      	bne.n	8007284 <HAL_SPI_TransmitReceive+0x264>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800724e:	b29b      	uxth	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d017      	beq.n	8007284 <HAL_SPI_TransmitReceive+0x264>
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	2b01      	cmp	r3, #1
 8007258:	d114      	bne.n	8007284 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	330c      	adds	r3, #12
 8007264:	7812      	ldrb	r2, [r2, #0]
 8007266:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b01      	cmp	r3, #1
 8007290:	d119      	bne.n	80072c6 <HAL_SPI_TransmitReceive+0x2a6>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d014      	beq.n	80072c6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072c2:	2301      	movs	r3, #1
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072c6:	f7fb f889 	bl	80023dc <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d803      	bhi.n	80072de <HAL_SPI_TransmitReceive+0x2be>
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072dc:	d102      	bne.n	80072e4 <HAL_SPI_TransmitReceive+0x2c4>
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d109      	bne.n	80072f8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e038      	b.n	800736a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d19c      	bne.n	800723c <HAL_SPI_TransmitReceive+0x21c>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d197      	bne.n	800723c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800730c:	6a3a      	ldr	r2, [r7, #32]
 800730e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f8c3 	bl	800749c <SPI_EndRxTxTransaction>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2220      	movs	r2, #32
 8007320:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e01d      	b.n	800736a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10a      	bne.n	800734c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007336:	2300      	movs	r3, #0
 8007338:	613b      	str	r3, [r7, #16]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007368:	2300      	movs	r3, #0
  }
}
 800736a:	4618      	mov	r0, r3
 800736c:	3728      	adds	r7, #40	@ 0x28
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007380:	b2db      	uxtb	r3, r3
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	bc80      	pop	{r7}
 800738a:	4770      	bx	lr

0800738c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	4613      	mov	r3, r2
 800739a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800739c:	f7fb f81e 	bl	80023dc <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4413      	add	r3, r2
 80073aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073ac:	f7fb f816 	bl	80023dc <HAL_GetTick>
 80073b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073b2:	4b39      	ldr	r3, [pc, #228]	@ (8007498 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	015b      	lsls	r3, r3, #5
 80073b8:	0d1b      	lsrs	r3, r3, #20
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	fb02 f303 	mul.w	r3, r2, r3
 80073c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073c2:	e054      	b.n	800746e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ca:	d050      	beq.n	800746e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073cc:	f7fb f806 	bl	80023dc <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d902      	bls.n	80073e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d13d      	bne.n	800745e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073fa:	d111      	bne.n	8007420 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007404:	d004      	beq.n	8007410 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800740e:	d107      	bne.n	8007420 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800741e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007428:	d10f      	bne.n	800744a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e017      	b.n	800748e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	3b01      	subs	r3, #1
 800746c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4013      	ands	r3, r2
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	429a      	cmp	r2, r3
 800747c:	bf0c      	ite	eq
 800747e:	2301      	moveq	r3, #1
 8007480:	2300      	movne	r3, #0
 8007482:	b2db      	uxtb	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	429a      	cmp	r2, r3
 800748a:	d19b      	bne.n	80073c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3720      	adds	r7, #32
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000004 	.word	0x20000004

0800749c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2201      	movs	r2, #1
 80074b0:	2102      	movs	r1, #2
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff ff6a 	bl	800738c <SPI_WaitFlagStateUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c2:	f043 0220 	orr.w	r2, r3, #32
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e013      	b.n	80074f6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2200      	movs	r2, #0
 80074d6:	2180      	movs	r1, #128	@ 0x80
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7ff ff57 	bl	800738c <SPI_WaitFlagStateUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d007      	beq.n	80074f4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e8:	f043 0220 	orr.w	r2, r3, #32
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e000      	b.n	80074f6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e042      	b.n	8007596 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d106      	bne.n	800752a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7fa fd29 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2224      	movs	r2, #36	@ 0x24
 800752e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007540:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fdee 	bl	8008124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691a      	ldr	r2, [r3, #16]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007556:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695a      	ldr	r2, [r3, #20]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007566:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007576:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2220      	movs	r2, #32
 800758a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b08a      	sub	sp, #40	@ 0x28
 80075a2:	af02      	add	r7, sp, #8
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	603b      	str	r3, [r7, #0]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d175      	bne.n	80076aa <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_UART_Transmit+0x2c>
 80075c4:	88fb      	ldrh	r3, [r7, #6]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e06e      	b.n	80076ac <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2221      	movs	r2, #33	@ 0x21
 80075d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075dc:	f7fa fefe 	bl	80023dc <HAL_GetTick>
 80075e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	88fa      	ldrh	r2, [r7, #6]
 80075e6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	88fa      	ldrh	r2, [r7, #6]
 80075ec:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075f6:	d108      	bne.n	800760a <HAL_UART_Transmit+0x6c>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d104      	bne.n	800760a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	61bb      	str	r3, [r7, #24]
 8007608:	e003      	b.n	8007612 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007612:	e02e      	b.n	8007672 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2200      	movs	r2, #0
 800761c:	2180      	movs	r1, #128	@ 0x80
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 fb53 	bl	8007cca <UART_WaitOnFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d005      	beq.n	8007636 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e03a      	b.n	80076ac <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10b      	bne.n	8007654 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800764a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	3302      	adds	r3, #2
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	e007      	b.n	8007664 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	781a      	ldrb	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	3301      	adds	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1cb      	bne.n	8007614 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2200      	movs	r2, #0
 8007684:	2140      	movs	r1, #64	@ 0x40
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fb1f 	bl	8007cca <UART_WaitOnFlagUntilTimeout>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2220      	movs	r2, #32
 8007696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e006      	b.n	80076ac <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	e000      	b.n	80076ac <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80076aa:	2302      	movs	r3, #2
  }
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3720      	adds	r7, #32
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08c      	sub	sp, #48	@ 0x30
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d14a      	bne.n	8007764 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80076d4:	88fb      	ldrh	r3, [r7, #6]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e043      	b.n	8007766 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80076ea:	88fb      	ldrh	r3, [r7, #6]
 80076ec:	461a      	mov	r2, r3
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fb43 	bl	8007d7c <UART_Start_Receive_IT>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80076fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007700:	2b00      	cmp	r3, #0
 8007702:	d12c      	bne.n	800775e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007708:	2b01      	cmp	r3, #1
 800770a:	d125      	bne.n	8007758 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800770c:	2300      	movs	r3, #0
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	613b      	str	r3, [r7, #16]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	330c      	adds	r3, #12
 8007728:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	617b      	str	r3, [r7, #20]
   return(result);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f043 0310 	orr.w	r3, r3, #16
 8007738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	330c      	adds	r3, #12
 8007740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007742:	627a      	str	r2, [r7, #36]	@ 0x24
 8007744:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6a39      	ldr	r1, [r7, #32]
 8007748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e5      	bne.n	8007722 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8007756:	e002      	b.n	800775e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800775e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007762:	e000      	b.n	8007766 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007764:	2302      	movs	r3, #2
  }
}
 8007766:	4618      	mov	r0, r3
 8007768:	3730      	adds	r7, #48	@ 0x30
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b0ba      	sub	sp, #232	@ 0xe8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007796:	2300      	movs	r3, #0
 8007798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800779c:	2300      	movs	r3, #0
 800779e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80077ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10f      	bne.n	80077d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <HAL_UART_IRQHandler+0x66>
 80077c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fbea 	bl	8007fa8 <UART_Receive_IT>
      return;
 80077d4:	e25b      	b.n	8007c8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 80de 	beq.w	800799c <HAL_UART_IRQHandler+0x22c>
 80077e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80d1 	beq.w	800799c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <HAL_UART_IRQHandler+0xae>
 8007806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800780a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007816:	f043 0201 	orr.w	r2, r3, #1
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <HAL_UART_IRQHandler+0xd2>
 800782a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800783a:	f043 0202 	orr.w	r2, r3, #2
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <HAL_UART_IRQHandler+0xf6>
 800784e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800785e:	f043 0204 	orr.w	r2, r3, #4
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d011      	beq.n	8007896 <HAL_UART_IRQHandler+0x126>
 8007872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b00      	cmp	r3, #0
 800787c:	d105      	bne.n	800788a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800787e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800788e:	f043 0208 	orr.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 81f2 	beq.w	8007c84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <HAL_UART_IRQHandler+0x14e>
 80078ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b0:	f003 0320 	and.w	r3, r3, #32
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fb75 	bl	8007fa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	bf14      	ite	ne
 80078cc:	2301      	movne	r3, #1
 80078ce:	2300      	moveq	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <HAL_UART_IRQHandler+0x17a>
 80078e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d04f      	beq.n	800798a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa7f 	bl	8007dee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d041      	beq.n	8007982 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3314      	adds	r3, #20
 8007904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800791c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3314      	adds	r3, #20
 8007926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800792a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800792e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1d9      	bne.n	80078fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d013      	beq.n	800797a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007956:	4a7e      	ldr	r2, [pc, #504]	@ (8007b50 <HAL_UART_IRQHandler+0x3e0>)
 8007958:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795e:	4618      	mov	r0, r3
 8007960:	f7fb fd42 	bl	80033e8 <HAL_DMA_Abort_IT>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d016      	beq.n	8007998 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007978:	e00e      	b.n	8007998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f99c 	bl	8007cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007980:	e00a      	b.n	8007998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f998 	bl	8007cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007988:	e006      	b.n	8007998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f994 	bl	8007cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007996:	e175      	b.n	8007c84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007998:	bf00      	nop
    return;
 800799a:	e173      	b.n	8007c84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	f040 814f 	bne.w	8007c44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079aa:	f003 0310 	and.w	r3, r3, #16
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 8148 	beq.w	8007c44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b8:	f003 0310 	and.w	r3, r3, #16
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8141 	beq.w	8007c44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079c2:	2300      	movs	r3, #0
 80079c4:	60bb      	str	r3, [r7, #8]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60bb      	str	r3, [r7, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 80b6 	beq.w	8007b54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8145 	beq.w	8007c88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a06:	429a      	cmp	r2, r3
 8007a08:	f080 813e 	bcs.w	8007c88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	f000 8088 	beq.w	8007b30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	330c      	adds	r3, #12
 8007a26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	330c      	adds	r3, #12
 8007a48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007a4c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1d9      	bne.n	8007a20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3314      	adds	r3, #20
 8007a72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a7e:	f023 0301 	bic.w	r3, r3, #1
 8007a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3314      	adds	r3, #20
 8007a8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e1      	bne.n	8007a6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3314      	adds	r3, #20
 8007aae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3314      	adds	r3, #20
 8007ac8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007acc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ace:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ad2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e3      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	330c      	adds	r3, #12
 8007af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b00:	f023 0310 	bic.w	r3, r3, #16
 8007b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	330c      	adds	r3, #12
 8007b0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007b12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e3      	bne.n	8007aee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fb fc21 	bl	8003372 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fa f816 	bl	8001b78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b4c:	e09c      	b.n	8007c88 <HAL_UART_IRQHandler+0x518>
 8007b4e:	bf00      	nop
 8007b50:	08007eb3 	.word	0x08007eb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 808e 	beq.w	8007c8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8089 	beq.w	8007c8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	330c      	adds	r3, #12
 8007b9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007b9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ba0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e3      	bne.n	8007b7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3314      	adds	r3, #20
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3314      	adds	r3, #20
 8007bd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e3      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	330c      	adds	r3, #12
 8007bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	e853 3f00 	ldrex	r3, [r3]
 8007c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0310 	bic.w	r3, r3, #16
 8007c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	330c      	adds	r3, #12
 8007c18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007c1c:	61fa      	str	r2, [r7, #28]
 8007c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	69b9      	ldr	r1, [r7, #24]
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	617b      	str	r3, [r7, #20]
   return(result);
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e3      	bne.n	8007bf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7f9 ff9b 	bl	8001b78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c42:	e023      	b.n	8007c8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d009      	beq.n	8007c64 <HAL_UART_IRQHandler+0x4f4>
 8007c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f93c 	bl	8007eda <UART_Transmit_IT>
    return;
 8007c62:	e014      	b.n	8007c8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00e      	beq.n	8007c8e <HAL_UART_IRQHandler+0x51e>
 8007c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d008      	beq.n	8007c8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f97b 	bl	8007f78 <UART_EndTransmit_IT>
    return;
 8007c82:	e004      	b.n	8007c8e <HAL_UART_IRQHandler+0x51e>
    return;
 8007c84:	bf00      	nop
 8007c86:	e002      	b.n	8007c8e <HAL_UART_IRQHandler+0x51e>
      return;
 8007c88:	bf00      	nop
 8007c8a:	e000      	b.n	8007c8e <HAL_UART_IRQHandler+0x51e>
      return;
 8007c8c:	bf00      	nop
  }
}
 8007c8e:	37e8      	adds	r7, #232	@ 0xe8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bc80      	pop	{r7}
 8007ca4:	4770      	bx	lr

08007ca6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bc80      	pop	{r7}
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr

08007cca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b086      	sub	sp, #24
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	603b      	str	r3, [r7, #0]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cda:	e03b      	b.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d037      	beq.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce4:	f7fa fb7a 	bl	80023dc <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	6a3a      	ldr	r2, [r7, #32]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d302      	bcc.n	8007cfa <UART_WaitOnFlagUntilTimeout+0x30>
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e03a      	b.n	8007d74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d023      	beq.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b80      	cmp	r3, #128	@ 0x80
 8007d10:	d020      	beq.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b40      	cmp	r3, #64	@ 0x40
 8007d16:	d01d      	beq.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0308 	and.w	r3, r3, #8
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d116      	bne.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f856 	bl	8007dee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2208      	movs	r2, #8
 8007d46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e00f      	b.n	8007d74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	bf0c      	ite	eq
 8007d64:	2301      	moveq	r3, #1
 8007d66:	2300      	movne	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	79fb      	ldrb	r3, [r7, #7]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d0b4      	beq.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	88fa      	ldrh	r2, [r7, #6]
 8007d94:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	88fa      	ldrh	r2, [r7, #6]
 8007d9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2222      	movs	r2, #34	@ 0x22
 8007da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d007      	beq.n	8007dc2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007dc0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	695a      	ldr	r2, [r3, #20]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 0201 	orr.w	r2, r2, #1
 8007dd0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 0220 	orr.w	r2, r2, #32
 8007de0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr

08007dee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b095      	sub	sp, #84	@ 0x54
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	330c      	adds	r3, #12
 8007dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	330c      	adds	r3, #12
 8007e14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e16:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e5      	bne.n	8007df6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3314      	adds	r3, #20
 8007e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f023 0301 	bic.w	r3, r3, #1
 8007e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3314      	adds	r3, #20
 8007e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e5      	bne.n	8007e2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d119      	bne.n	8007e9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	330c      	adds	r3, #12
 8007e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f023 0310 	bic.w	r3, r3, #16
 8007e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e86:	61ba      	str	r2, [r7, #24]
 8007e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6979      	ldr	r1, [r7, #20]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	613b      	str	r3, [r7, #16]
   return(result);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e5      	bne.n	8007e66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007ea8:	bf00      	nop
 8007eaa:	3754      	adds	r7, #84	@ 0x54
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr

08007eb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7ff fef3 	bl	8007cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ed2:	bf00      	nop
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b085      	sub	sp, #20
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b21      	cmp	r3, #33	@ 0x21
 8007eec:	d13e      	bne.n	8007f6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef6:	d114      	bne.n	8007f22 <UART_Transmit_IT+0x48>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d110      	bne.n	8007f22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	1c9a      	adds	r2, r3, #2
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	621a      	str	r2, [r3, #32]
 8007f20:	e008      	b.n	8007f34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	1c59      	adds	r1, r3, #1
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6211      	str	r1, [r2, #32]
 8007f2c:	781a      	ldrb	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	4619      	mov	r1, r3
 8007f42:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10f      	bne.n	8007f68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e000      	b.n	8007f6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f6c:	2302      	movs	r3, #2
  }
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr

08007f78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff fe7b 	bl	8007c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08c      	sub	sp, #48	@ 0x30
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b22      	cmp	r3, #34	@ 0x22
 8007fba:	f040 80ae 	bne.w	800811a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fc6:	d117      	bne.n	8007ff8 <UART_Receive_IT+0x50>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d113      	bne.n	8007ff8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff0:	1c9a      	adds	r2, r3, #2
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ff6:	e026      	b.n	8008046 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800800a:	d007      	beq.n	800801c <UART_Receive_IT+0x74>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <UART_Receive_IT+0x82>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d106      	bne.n	800802a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	b2da      	uxtb	r2, r3
 8008024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008026:	701a      	strb	r2, [r3, #0]
 8008028:	e008      	b.n	800803c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008036:	b2da      	uxtb	r2, r3
 8008038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800804a:	b29b      	uxth	r3, r3
 800804c:	3b01      	subs	r3, #1
 800804e:	b29b      	uxth	r3, r3
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	4619      	mov	r1, r3
 8008054:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008056:	2b00      	cmp	r3, #0
 8008058:	d15d      	bne.n	8008116 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68da      	ldr	r2, [r3, #12]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0220 	bic.w	r2, r2, #32
 8008068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695a      	ldr	r2, [r3, #20]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0201 	bic.w	r2, r2, #1
 8008088:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2220      	movs	r2, #32
 800808e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809c:	2b01      	cmp	r3, #1
 800809e:	d135      	bne.n	800810c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	330c      	adds	r3, #12
 80080ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	e853 3f00 	ldrex	r3, [r3]
 80080b4:	613b      	str	r3, [r7, #16]
   return(result);
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f023 0310 	bic.w	r3, r3, #16
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	330c      	adds	r3, #12
 80080c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c6:	623a      	str	r2, [r7, #32]
 80080c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	69f9      	ldr	r1, [r7, #28]
 80080cc:	6a3a      	ldr	r2, [r7, #32]
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e5      	bne.n	80080a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d10a      	bne.n	80080fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080e8:	2300      	movs	r3, #0
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7f9 fd37 	bl	8001b78 <HAL_UARTEx_RxEventCallback>
 800810a:	e002      	b.n	8008112 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fdca 	bl	8007ca6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	e002      	b.n	800811c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	e000      	b.n	800811c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800811a:	2302      	movs	r3, #2
  }
}
 800811c:	4618      	mov	r0, r3
 800811e:	3730      	adds	r7, #48	@ 0x30
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689a      	ldr	r2, [r3, #8]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	4313      	orrs	r3, r2
 8008152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800815e:	f023 030c 	bic.w	r3, r3, #12
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	430b      	orrs	r3, r1
 800816a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699a      	ldr	r2, [r3, #24]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a2c      	ldr	r2, [pc, #176]	@ (8008238 <UART_SetConfig+0x114>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d103      	bne.n	8008194 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800818c:	f7fe fd4e 	bl	8006c2c <HAL_RCC_GetPCLK2Freq>
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	e002      	b.n	800819a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008194:	f7fe fd36 	bl	8006c04 <HAL_RCC_GetPCLK1Freq>
 8008198:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	4613      	mov	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	009a      	lsls	r2, r3, #2
 80081a4:	441a      	add	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b0:	4a22      	ldr	r2, [pc, #136]	@ (800823c <UART_SetConfig+0x118>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	095b      	lsrs	r3, r3, #5
 80081b8:	0119      	lsls	r1, r3, #4
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009a      	lsls	r2, r3, #2
 80081c4:	441a      	add	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80081d0:	4b1a      	ldr	r3, [pc, #104]	@ (800823c <UART_SetConfig+0x118>)
 80081d2:	fba3 0302 	umull	r0, r3, r3, r2
 80081d6:	095b      	lsrs	r3, r3, #5
 80081d8:	2064      	movs	r0, #100	@ 0x64
 80081da:	fb00 f303 	mul.w	r3, r0, r3
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	3332      	adds	r3, #50	@ 0x32
 80081e4:	4a15      	ldr	r2, [pc, #84]	@ (800823c <UART_SetConfig+0x118>)
 80081e6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081f0:	4419      	add	r1, r3
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009a      	lsls	r2, r3, #2
 80081fc:	441a      	add	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	fbb2 f2f3 	udiv	r2, r2, r3
 8008208:	4b0c      	ldr	r3, [pc, #48]	@ (800823c <UART_SetConfig+0x118>)
 800820a:	fba3 0302 	umull	r0, r3, r3, r2
 800820e:	095b      	lsrs	r3, r3, #5
 8008210:	2064      	movs	r0, #100	@ 0x64
 8008212:	fb00 f303 	mul.w	r3, r0, r3
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	011b      	lsls	r3, r3, #4
 800821a:	3332      	adds	r3, #50	@ 0x32
 800821c:	4a07      	ldr	r2, [pc, #28]	@ (800823c <UART_SetConfig+0x118>)
 800821e:	fba2 2303 	umull	r2, r3, r2, r3
 8008222:	095b      	lsrs	r3, r3, #5
 8008224:	f003 020f 	and.w	r2, r3, #15
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	440a      	add	r2, r1
 800822e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40013800 	.word	0x40013800
 800823c:	51eb851f 	.word	0x51eb851f

08008240 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008244:	4904      	ldr	r1, [pc, #16]	@ (8008258 <MX_FATFS_Init+0x18>)
 8008246:	4805      	ldr	r0, [pc, #20]	@ (800825c <MX_FATFS_Init+0x1c>)
 8008248:	f000 f8b0 	bl	80083ac <FATFS_LinkDriver>
 800824c:	4603      	mov	r3, r0
 800824e:	461a      	mov	r2, r3
 8008250:	4b03      	ldr	r3, [pc, #12]	@ (8008260 <MX_FATFS_Init+0x20>)
 8008252:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008254:	bf00      	nop
 8008256:	bd80      	pop	{r7, pc}
 8008258:	200007e0 	.word	0x200007e0
 800825c:	20000010 	.word	0x20000010
 8008260:	200007dc 	.word	0x200007dc

08008264 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	4618      	mov	r0, r3
 8008272:	f7f8 fee7 	bl	8001044 <SD_disk_initialize>
 8008276:	4603      	mov	r3, r0
 8008278:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	4603      	mov	r3, r0
 800828a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 800828c:	79fb      	ldrb	r3, [r7, #7]
 800828e:	4618      	mov	r0, r3
 8008290:	f7f8 ffc2 	bl	8001218 <SD_disk_status>
 8008294:	4603      	mov	r3, r0
 8008296:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
 80082aa:	603b      	str	r3, [r7, #0]
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80082b0:	7bf8      	ldrb	r0, [r7, #15]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	68b9      	ldr	r1, [r7, #8]
 80082b8:	f7f8 ffc2 	bl	8001240 <SD_disk_read>
 80082bc:	4603      	mov	r3, r0
 80082be:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	607a      	str	r2, [r7, #4]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80082d8:	7bf8      	ldrb	r0, [r7, #15]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	68b9      	ldr	r1, [r7, #8]
 80082e0:	f7f9 f818 	bl	8001314 <SD_disk_write>
 80082e4:	4603      	mov	r3, r0
 80082e6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	603a      	str	r2, [r7, #0]
 80082fa:	71fb      	strb	r3, [r7, #7]
 80082fc:	460b      	mov	r3, r1
 80082fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	79b9      	ldrb	r1, [r7, #6]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f7f9 f888 	bl	800141c <SD_disk_ioctl>
 800830c:	4603      	mov	r3, r0
 800830e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008326:	2301      	movs	r3, #1
 8008328:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800832e:	4b1e      	ldr	r3, [pc, #120]	@ (80083a8 <FATFS_LinkDriverEx+0x90>)
 8008330:	7a5b      	ldrb	r3, [r3, #9]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b01      	cmp	r3, #1
 8008336:	d831      	bhi.n	800839c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008338:	4b1b      	ldr	r3, [pc, #108]	@ (80083a8 <FATFS_LinkDriverEx+0x90>)
 800833a:	7a5b      	ldrb	r3, [r3, #9]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	461a      	mov	r2, r3
 8008340:	4b19      	ldr	r3, [pc, #100]	@ (80083a8 <FATFS_LinkDriverEx+0x90>)
 8008342:	2100      	movs	r1, #0
 8008344:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008346:	4b18      	ldr	r3, [pc, #96]	@ (80083a8 <FATFS_LinkDriverEx+0x90>)
 8008348:	7a5b      	ldrb	r3, [r3, #9]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	4a16      	ldr	r2, [pc, #88]	@ (80083a8 <FATFS_LinkDriverEx+0x90>)
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008356:	4b14      	ldr	r3, [pc, #80]	@ (80083a8 <FATFS_LinkDriverEx+0x90>)
 8008358:	7a5b      	ldrb	r3, [r3, #9]
 800835a:	b2db      	uxtb	r3, r3
 800835c:	461a      	mov	r2, r3
 800835e:	4b12      	ldr	r3, [pc, #72]	@ (80083a8 <FATFS_LinkDriverEx+0x90>)
 8008360:	4413      	add	r3, r2
 8008362:	79fa      	ldrb	r2, [r7, #7]
 8008364:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008366:	4b10      	ldr	r3, [pc, #64]	@ (80083a8 <FATFS_LinkDriverEx+0x90>)
 8008368:	7a5b      	ldrb	r3, [r3, #9]
 800836a:	b2db      	uxtb	r3, r3
 800836c:	1c5a      	adds	r2, r3, #1
 800836e:	b2d1      	uxtb	r1, r2
 8008370:	4a0d      	ldr	r2, [pc, #52]	@ (80083a8 <FATFS_LinkDriverEx+0x90>)
 8008372:	7251      	strb	r1, [r2, #9]
 8008374:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008376:	7dbb      	ldrb	r3, [r7, #22]
 8008378:	3330      	adds	r3, #48	@ 0x30
 800837a:	b2da      	uxtb	r2, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	3301      	adds	r3, #1
 8008384:	223a      	movs	r2, #58	@ 0x3a
 8008386:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	3302      	adds	r3, #2
 800838c:	222f      	movs	r2, #47	@ 0x2f
 800838e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	3303      	adds	r3, #3
 8008394:	2200      	movs	r2, #0
 8008396:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr
 80083a8:	200007e4 	.word	0x200007e4

080083ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80083b6:	2200      	movs	r2, #0
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff ffac 	bl	8008318 <FATFS_LinkDriverEx>
 80083c0:	4603      	mov	r3, r0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <Screen_begin>:
    [CONDITION_YEAR]     = {.max_value = 99, .min_value = 1},
    [CONDITION_HOUR]     = {.max_value = 23, .min_value = 0},
    [CONDITION_MINUTE]   = {.max_value = 59, .min_value = 0}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 80083d4:	4a17      	ldr	r2, [pc, #92]	@ (8008434 <Screen_begin+0x68>)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 80083da:	4816      	ldr	r0, [pc, #88]	@ (8008434 <Screen_begin+0x68>)
 80083dc:	f000 fd98 	bl	8008f10 <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 80083e0:	4915      	ldr	r1, [pc, #84]	@ (8008438 <Screen_begin+0x6c>)
 80083e2:	4814      	ldr	r0, [pc, #80]	@ (8008434 <Screen_begin+0x68>)
 80083e4:	f002 fef7 	bl	800b1d6 <DWIN_SetCallback>

    Screen_Init_Variable(&_Screen);
 80083e8:	4812      	ldr	r0, [pc, #72]	@ (8008434 <Screen_begin+0x68>)
 80083ea:	f000 fef1 	bl	80091d0 <Screen_Init_Variable>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 80083ee:	4b11      	ldr	r3, [pc, #68]	@ (8008434 <Screen_begin+0x68>)
 80083f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083f4:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 80083f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008434 <Screen_begin+0x68>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;
 80083fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008434 <Screen_begin+0x68>)
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
 8008406:	2165      	movs	r1, #101	@ 0x65
 8008408:	480a      	ldr	r0, [pc, #40]	@ (8008434 <Screen_begin+0x68>)
 800840a:	f002 fd92 	bl	800af32 <DWIN_SetPage>

    _Screen.pre_page = 106;
 800840e:	4b09      	ldr	r3, [pc, #36]	@ (8008434 <Screen_begin+0x68>)
 8008410:	226a      	movs	r2, #106	@ 0x6a
 8008412:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    _Screen.Ishome = true;
 8008416:	4b07      	ldr	r3, [pc, #28]	@ (8008434 <Screen_begin+0x68>)
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2170 	strb.w	r2, [r3, #368]	@ 0x170

    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST1].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST1]));
 800841e:	4b05      	ldr	r3, [pc, #20]	@ (8008434 <Screen_begin+0x68>)
 8008420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008424:	4905      	ldr	r1, [pc, #20]	@ (800843c <Screen_begin+0x70>)
 8008426:	4618      	mov	r0, r3
 8008428:	f001 f8d4 	bl	80095d4 <get_data_testing_ic>
    //     DWIN_Create_Basic_line((Dwin_t *)&_Screen,Address_show,X_Coordinate,Y_Coordinate,data,15);
    //     Address_show = Address_show + 0x200;
    //     Y_Coordinate = Y_Coordinate + 30;
    //     HAL_Delay(500);
    // }
}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	200007f0 	.word	0x200007f0
 8008438:	0800845d 	.word	0x0800845d
 800843c:	2000088c 	.word	0x2000088c

08008440 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	4803      	ldr	r0, [pc, #12]	@ (8008458 <Screen_RX_data+0x18>)
 800844c:	f002 fed0 	bl	800b1f0 <DWIN_Listen>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	200007f0 	.word	0x200007f0

0800845c <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	80fb      	strh	r3, [r7, #6]
 8008466:	460b      	mov	r3, r1
 8008468:	717b      	strb	r3, [r7, #5]
 800846a:	4613      	mov	r3, r2
 800846c:	713b      	strb	r3, [r7, #4]
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
 800846e:	88fb      	ldrh	r3, [r7, #6]
 8008470:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008474:	4293      	cmp	r3, r2
 8008476:	d01b      	beq.n	80084b0 <Screen_RX_Callback+0x54>
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 8008478:	88fb      	ldrh	r3, [r7, #6]
 800847a:	2207      	movs	r2, #7
 800847c:	490e      	ldr	r1, [pc, #56]	@ (80084b8 <Screen_RX_Callback+0x5c>)
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fd0a 	bl	8008e98 <Index_VP>
 8008484:	4603      	mov	r3, r0
 8008486:	723b      	strb	r3, [r7, #8]
        screen_event.action = lowByte;
 8008488:	797b      	ldrb	r3, [r7, #5]
 800848a:	727b      	strb	r3, [r7, #9]
        screen_event.data = highByte;
 800848c:	793b      	ldrb	r3, [r7, #4]
 800848e:	72bb      	strb	r3, [r7, #10]
        screen_event.keyvalue = (uint16_t)((highByte<<8) | (lowByte&0xFF));
 8008490:	793b      	ldrb	r3, [r7, #4]
 8008492:	b21b      	sxth	r3, r3
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	b21a      	sxth	r2, r3
 8008498:	797b      	ldrb	r3, [r7, #5]
 800849a:	b21b      	sxth	r3, r3
 800849c:	4313      	orrs	r3, r2
 800849e:	b21b      	sxth	r3, r3
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	81bb      	strh	r3, [r7, #12]

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
 80084a4:	f107 0308 	add.w	r3, r7, #8
 80084a8:	4619      	mov	r1, r3
 80084aa:	4804      	ldr	r0, [pc, #16]	@ (80084bc <Screen_RX_Callback+0x60>)
 80084ac:	f000 fdb0 	bl	8009010 <Screen_excute_RX_function>
    }
}
 80084b0:	bf00      	nop
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20000024 	.word	0x20000024
 80084bc:	200007f0 	.word	0x200007f0

080084c0 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 80084ca:	2174      	movs	r1, #116	@ 0x74
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f002 fd30 	bl	800af32 <DWIN_SetPage>
    screen_obj->Ishome = false;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2170 	strb.w	r2, [r3, #368]	@ 0x170
}
 80084da:	bf00      	nop
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
    uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 80084f2:	4619      	mov	r1, r3
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	460b      	mov	r3, r1
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	1a5b      	subs	r3, r3, r1
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	334a      	adds	r3, #74	@ 0x4a
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	73fb      	strb	r3, [r7, #15]
    UNUSED(current_program);
    // Show data

    // Switch page
    screen_obj->Ishome = true;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2170 	strb.w	r2, [r3, #368]	@ 0x170
    DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008514:	4619      	mov	r1, r3
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	00db      	lsls	r3, r3, #3
 800851c:	1a5b      	subs	r3, r3, r1
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	3349      	adds	r3, #73	@ 0x49
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f002 fd02 	bl	800af32 <DWIN_SetPage>
}   
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <Navigation_setting_program>:

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]

    // Switch page
    // DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
    /* Get the setting page */
    screen_obj->page_setting = DWINPAGE_SETTING_PROGRAM;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	226b      	movs	r2, #107	@ 0x6b
 8008546:	f883 216f 	strb.w	r2, [r3, #367]	@ 0x16f
    // Switch page password 
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password,"",strlen(""));
 800854a:	2300      	movs	r3, #0
 800854c:	4a06      	ldr	r2, [pc, #24]	@ (8008568 <Navigation_setting_program+0x30>)
 800854e:	f249 5160 	movw	r1, #38240	@ 0x9560
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f002 fd14 	bl	800af80 <DWIN_SetText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 8008558:	216e      	movs	r1, #110	@ 0x6e
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f002 fce9 	bl	800af32 <DWIN_SetPage>
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	08010bc8 	.word	0x08010bc8

0800856c <Navigation_setting_time>:

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
 8008576:	2176      	movs	r1, #118	@ 0x76
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f002 fcda 	bl	800af32 <DWIN_SetPage>
}
 800857e:	bf00      	nop
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <Navigation_setting_wifi>:

void Navigation_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008586:	b590      	push	{r4, r7, lr}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
    /* show data */
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Wifi,screen_obj->Wifi_setting.Name_Wifi,strlen(screen_obj->Wifi_setting.Name_Wifi));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f503 7496 	add.w	r4, r3, #300	@ 0x12c
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800859c:	4618      	mov	r0, r3
 800859e:	f7f7 fde1 	bl	8000164 <strlen>
 80085a2:	4603      	mov	r3, r0
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	4622      	mov	r2, r4
 80085a8:	f249 51a0 	movw	r1, #38304	@ 0x95a0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f002 fce7 	bl	800af80 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password_Wifi,screen_obj->Wifi_setting.Password_Wifi,strlen(screen_obj->Wifi_setting.Password_Wifi));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f503 74a5 	add.w	r4, r3, #330	@ 0x14a
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 73a5 	add.w	r3, r3, #330	@ 0x14a
 80085be:	4618      	mov	r0, r3
 80085c0:	f7f7 fdd0 	bl	8000164 <strlen>
 80085c4:	4603      	mov	r3, r0
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	4622      	mov	r2, r4
 80085ca:	f249 51d0 	movw	r1, #38352	@ 0x95d0
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f002 fcd6 	bl	800af80 <DWIN_SetText>

    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 80085d4:	2175      	movs	r1, #117	@ 0x75
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f002 fcab 	bl	800af32 <DWIN_SetPage>
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd90      	pop	{r4, r7, pc}

080085e4 <Navigation_modify_program>:

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80085e4:	b590      	push	{r4, r7, lr}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 80085f4:	4619      	mov	r1, r3
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	440b      	add	r3, r1
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	339c      	adds	r3, #156	@ 0x9c
 8008604:	681c      	ldr	r4, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 800860c:	4619      	mov	r1, r3
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	440b      	add	r3, r1
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	339c      	adds	r3, #156	@ 0x9c
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4618      	mov	r0, r3
 8008620:	f7f7 fda0 	bl	8000164 <strlen>
 8008624:	4603      	mov	r3, r0
 8008626:	b29b      	uxth	r3, r3
 8008628:	4622      	mov	r2, r4
 800862a:	f44f 4115 	mov.w	r1, #38144	@ 0x9500
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f002 fca6 	bl	800af80 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC));
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 800863a:	4619      	mov	r1, r3
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	440b      	add	r3, r1
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	33a0      	adds	r3, #160	@ 0xa0
 800864a:	681c      	ldr	r4, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 8008652:	4619      	mov	r1, r3
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	00db      	lsls	r3, r3, #3
 800865a:	440b      	add	r3, r1
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	33a0      	adds	r3, #160	@ 0xa0
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f7f7 fd7d 	bl	8000164 <strlen>
 800866a:	4603      	mov	r3, r0
 800866c:	b29b      	uxth	r3, r3
 800866e:	4622      	mov	r2, r4
 8008670:	f249 5120 	movw	r1, #38176	@ 0x9520
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f002 fc83 	bl	800af80 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 8008680:	4619      	mov	r1, r3
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	440b      	add	r3, r1
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	33a8      	adds	r3, #168	@ 0xa8
 8008690:	681c      	ldr	r4, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 8008698:	4619      	mov	r1, r3
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	440b      	add	r3, r1
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	33a8      	adds	r3, #168	@ 0xa8
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7f7 fd5a 	bl	8000164 <strlen>
 80086b0:	4603      	mov	r3, r0
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	4622      	mov	r2, r4
 80086b6:	f249 5140 	movw	r1, #38208	@ 0x9540
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f002 fc60 	bl	800af80 <DWIN_SetText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 80086c0:	216c      	movs	r1, #108	@ 0x6c
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f002 fc35 	bl	800af32 <DWIN_SetPage>
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd90      	pop	{r4, r7, pc}

080086d0 <Navigation_Change_MainPage>:

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	789b      	ldrb	r3, [r3, #2]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d111      	bne.n	8008706 <Navigation_Change_MainPage+0x36>
        screen_obj->curr_device++;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 80086e8:	3301      	adds	r3, #1
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
        if (screen_obj->curr_device == MAX_DEVICE) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d119      	bne.n	8008730 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_1;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
 8008704:	e014      	b.n	8008730 <Navigation_Change_MainPage+0x60>
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	789b      	ldrb	r3, [r3, #2]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d110      	bne.n	8008730 <Navigation_Change_MainPage+0x60>
        screen_obj->curr_device--;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008714:	3b01      	subs	r3, #1
 8008716:	b2da      	uxtb	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
        if (screen_obj->curr_device == 255 ) {
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008724:	2bff      	cmp	r3, #255	@ 0xff
 8008726:	d103      	bne.n	8008730 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_3;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008736:	4619      	mov	r1, r3
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	460b      	mov	r3, r1
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	1a5b      	subs	r3, r3, r1
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	334a      	adds	r3, #74	@ 0x4a
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	73fb      	strb	r3, [r7, #15]
    //     } break;
    //     case DWINPAGE_MAIN_GRAPH: {

    //     } break;
    // }
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,curr_program);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008750:	4619      	mov	r1, r3
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	1a5b      	subs	r3, r3, r1
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	3349      	adds	r3, #73	@ 0x49
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	7bfa      	ldrb	r2, [r7, #15]
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 f8fa 	bl	8009960 <show_main_page>

}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <Navigation_Change_CaseTest>:

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008774:	b580      	push	{r7, lr}
 8008776:	b08e      	sub	sp, #56	@ 0x38
 8008778:	af02      	add	r7, sp, #8
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008784:	4619      	mov	r1, r3
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	1a5b      	subs	r3, r3, r1
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	334a      	adds	r3, #74	@ 0x4a
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	4619      	mov	r1, r3
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	440b      	add	r3, r1
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	33ac      	adds	r3, #172	@ 0xac
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 80087b2:	4619      	mov	r1, r3
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	460b      	mov	r3, r1
 80087b8:	00db      	lsls	r3, r3, #3
 80087ba:	1a5b      	subs	r3, r3, r1
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	334a      	adds	r3, #74	@ 0x4a
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 80087c8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	4613      	mov	r3, r2
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	33ad      	adds	r3, #173	@ 0xad
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    char ShowCase_String[30];
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	789b      	ldrb	r3, [r3, #2]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d125      	bne.n	8008834 <Navigation_Change_CaseTest+0xc0>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 80087ee:	4619      	mov	r1, r3
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	460b      	mov	r3, r1
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	1a5b      	subs	r3, r3, r1
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	3348      	adds	r3, #72	@ 0x48
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d044      	beq.n	800888e <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 800880a:	461a      	mov	r2, r3
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	1a9b      	subs	r3, r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	3348      	adds	r3, #72	@ 0x48
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	3b01      	subs	r3, #1
 800881e:	b2d8      	uxtb	r0, r3
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	3348      	adds	r3, #72	@ 0x48
 800882e:	4602      	mov	r2, r0
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	e02c      	b.n	800888e <Navigation_Change_CaseTest+0x11a>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	789b      	ldrb	r3, [r3, #2]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d128      	bne.n	800888e <Navigation_Change_CaseTest+0x11a>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008842:	4619      	mov	r1, r3
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	00db      	lsls	r3, r3, #3
 800884a:	1a5b      	subs	r3, r3, r1
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	3348      	adds	r3, #72	@ 0x48
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800885a:	3b01      	subs	r3, #1
 800885c:	429a      	cmp	r2, r3
 800885e:	da16      	bge.n	800888e <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008866:	461a      	mov	r2, r3
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	4613      	mov	r3, r2
 800886c:	00db      	lsls	r3, r3, #3
 800886e:	1a9b      	subs	r3, r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	440b      	add	r3, r1
 8008874:	3348      	adds	r3, #72	@ 0x48
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	3301      	adds	r3, #1
 800887a:	b2d8      	uxtb	r0, r3
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	1a9b      	subs	r3, r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	3348      	adds	r3, #72	@ 0x48
 800888a:	4602      	mov	r2, r0
 800888c:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Show data */
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008894:	4619      	mov	r1, r3
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	1a5b      	subs	r3, r3, r1
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	3348      	adds	r3, #72	@ 0x48
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088ac:	f107 000c 	add.w	r0, r7, #12
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	4613      	mov	r3, r2
 80088b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008920 <Navigation_Change_CaseTest+0x1ac>)
 80088b6:	211e      	movs	r1, #30
 80088b8:	f005 fbc6 	bl	800e048 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 80088bc:	f107 030c 	add.w	r3, r7, #12
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7f7 fc4f 	bl	8000164 <strlen>
 80088c6:	4603      	mov	r3, r0
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f107 020c 	add.w	r2, r7, #12
 80088ce:	f249 3180 	movw	r1, #37760	@ 0x9380
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f002 fb54 	bl	800af80 <DWIN_SetText>
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
 80088d8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80088dc:	4911      	ldr	r1, [pc, #68]	@ (8008924 <Navigation_Change_CaseTest+0x1b0>)
 80088de:	4613      	mov	r3, r2
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	1a9b      	subs	r3, r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	440b      	add	r3, r1
 80088e8:	3354      	adds	r3, #84	@ 0x54
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 80088f2:	4618      	mov	r0, r3
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	4603      	mov	r3, r0
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	1a1b      	subs	r3, r3, r0
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	440b      	add	r3, r1
 8008900:	3348      	adds	r3, #72	@ 0x48
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	4413      	add	r3, r2
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800890e:	f244 1150 	movw	r1, #16720	@ 0x4150
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f002 fbe3 	bl	800b0de <DWIN_SetArray_Icon>
}
 8008918:	bf00      	nop
 800891a:	3730      	adds	r7, #48	@ 0x30
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	08010bcc 	.word	0x08010bcc
 8008924:	200007f0 	.word	0x200007f0

08008928 <ON_OFF_Button>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008928:	b580      	push	{r7, lr}
 800892a:	b0b6      	sub	sp, #216	@ 0xd8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
    // do sth
    screen_obj->IC_Testerx[screen_obj->curr_device].state = !screen_obj->IC_Testerx[screen_obj->curr_device].state;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008938:	4619      	mov	r1, r3
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	1a5b      	subs	r3, r3, r1
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	334b      	adds	r3, #75	@ 0x4b
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	bf14      	ite	ne
 800894e:	2301      	movne	r3, #1
 8008950:	2300      	moveq	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	f083 0301 	eor.w	r3, r3, #1
 8008958:	b2db      	uxtb	r3, r3
 800895a:	461a      	mov	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008962:	4619      	mov	r1, r3
 8008964:	4613      	mov	r3, r2
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	b2d8      	uxtb	r0, r3
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	460b      	mov	r3, r1
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	1a5b      	subs	r3, r3, r1
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	334b      	adds	r3, #75	@ 0x4b
 800897a:	4602      	mov	r2, r0
 800897c:	701a      	strb	r2, [r3, #0]
    // change icon
    // DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ON_OFF_Icon_1,ON_ICON);
    //    HAL_Delay(1000);
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8008984:	4619      	mov	r1, r3
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	1a5b      	subs	r3, r3, r1
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	334b      	adds	r3, #75	@ 0x4b
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f002 fb71 	bl	800b084 <DWIN_SetVariable_Icon>
    
    //OS_task_post_event(AO_task_can_bus,SEND_DATA_CAN_BUS,(uint8_t *)0,0);
    /* Send data test */
    uint8_t can_send_buf[200];
    uint8_t index_program = _Screen.IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 80089a8:	4619      	mov	r1, r3
 80089aa:	4a1c      	ldr	r2, [pc, #112]	@ (8008a1c <ON_OFF_Button+0xf4>)
 80089ac:	460b      	mov	r3, r1
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	1a5b      	subs	r3, r3, r1
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	334a      	adds	r3, #74	@ 0x4a
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    memcpy(can_send_buf,_Screen.Program_Testx[index_program].data_test,_Screen.Program_Testx[index_program].data_test_len);
 80089be:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 80089c2:	4916      	ldr	r1, [pc, #88]	@ (8008a1c <ON_OFF_Button+0xf4>)
 80089c4:	4613      	mov	r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	4413      	add	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	440b      	add	r3, r1
 80089ce:	33b8      	adds	r3, #184	@ 0xb8
 80089d0:	6819      	ldr	r1, [r3, #0]
 80089d2:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 80089d6:	4811      	ldr	r0, [pc, #68]	@ (8008a1c <ON_OFF_Button+0xf4>)
 80089d8:	4613      	mov	r3, r2
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4403      	add	r3, r0
 80089e2:	33bc      	adds	r3, #188	@ 0xbc
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	f107 030c 	add.w	r3, r7, #12
 80089ec:	4618      	mov	r0, r3
 80089ee:	f005 fd44 	bl	800e47a <memcpy>
    isotp_send(&CAN_iso[0],can_send_buf,_Screen.Program_Testx[index_program].data_test_len);
 80089f2:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 80089f6:	4909      	ldr	r1, [pc, #36]	@ (8008a1c <ON_OFF_Button+0xf4>)
 80089f8:	4613      	mov	r3, r2
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	33bc      	adds	r3, #188	@ 0xbc
 8008a04:	881a      	ldrh	r2, [r3, #0]
 8008a06:	f107 030c 	add.w	r3, r7, #12
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4804      	ldr	r0, [pc, #16]	@ (8008a20 <ON_OFF_Button+0xf8>)
 8008a0e:	f002 fe89 	bl	800b724 <isotp_send>
}
 8008a12:	bf00      	nop
 8008a14:	37d8      	adds	r7, #216	@ 0xd8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	200007f0 	.word	0x200007f0
 8008a20:	20000414 	.word	0x20000414

08008a24 <select_running_program>:

void select_running_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
    uint8_t programID = screen_event->data; // Get new index program
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	789b      	ldrb	r3, [r3, #2]
 8008a32:	73fb      	strb	r3, [r7, #15]

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fce5 	bl	8009408 <Screen_ShowData_Mainpage>
}
 8008a3e:	bf00      	nop
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <select_modify_program>:

void select_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008a48:	b5b0      	push	{r4, r5, r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
    // Get the index modify program 
    uint8_t index_program = screen_event->data;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	789b      	ldrb	r3, [r3, #2]
 8008a56:	75fb      	strb	r3, [r7, #23]
    screen_obj->modify_program_index = index_program;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	7dfa      	ldrb	r2, [r7, #23]
 8008a5c:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
    
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 8008a60:	7dfa      	ldrb	r2, [r7, #23]
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	4613      	mov	r3, r2
 8008a66:	00db      	lsls	r3, r3, #3
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	440b      	add	r3, r1
 8008a6e:	33a0      	adds	r3, #160	@ 0xa0
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7f7 fb76 	bl	8000164 <strlen>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	3309      	adds	r3, #9
 8008a7e:	75bb      	strb	r3, [r7, #22]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 8008a80:	7dfa      	ldrb	r2, [r7, #23]
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	4613      	mov	r3, r2
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	440b      	add	r3, r1
 8008a8e:	33a8      	adds	r3, #168	@ 0xa8
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7f7 fb66 	bl	8000164 <strlen>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	330f      	adds	r3, #15
 8008a9e:	757b      	strb	r3, [r7, #21]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8008aa0:	7dbb      	ldrb	r3, [r7, #22]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f003 fbd5 	bl	800c254 <malloc>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	613b      	str	r3, [r7, #16]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8008aae:	7d7b      	ldrb	r3, [r7, #21]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f003 fbce 	bl	800c254 <malloc>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	60fb      	str	r3, [r7, #12]

    strcpy(Text_Name_IC,"IC Name: ");
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	491f      	ldr	r1, [pc, #124]	@ (8008b3c <select_modify_program+0xf4>)
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	cb03      	ldmia	r3!, {r0, r1}
 8008ac6:	6010      	str	r0, [r2, #0]
 8008ac8:	6051      	str	r1, [r2, #4]
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 8008ace:	7dfa      	ldrb	r2, [r7, #23]
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	440b      	add	r3, r1
 8008adc:	33a0      	adds	r3, #160	@ 0xa0
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6938      	ldr	r0, [r7, #16]
 8008ae4:	f005 fbf8 	bl	800e2d8 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4a15      	ldr	r2, [pc, #84]	@ (8008b40 <select_modify_program+0xf8>)
 8008aec:	461c      	mov	r4, r3
 8008aee:	4615      	mov	r5, r2
 8008af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008af2:	6020      	str	r0, [r4, #0]
 8008af4:	6061      	str	r1, [r4, #4]
 8008af6:	60a2      	str	r2, [r4, #8]
 8008af8:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 8008afa:	7dfa      	ldrb	r2, [r7, #23]
 8008afc:	6879      	ldr	r1, [r7, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	00db      	lsls	r3, r3, #3
 8008b02:	4413      	add	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	440b      	add	r3, r1
 8008b08:	33a8      	adds	r3, #168	@ 0xa8
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f005 fbe2 	bl	800e2d8 <strcat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 8008b14:	7dbb      	ldrb	r3, [r7, #22]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	f249 5120 	movw	r1, #38176	@ 0x9520
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f002 fa2e 	bl	800af80 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 8008b24:	7d7b      	ldrb	r3, [r7, #21]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	f249 5140 	movw	r1, #38208	@ 0x9540
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f002 fa26 	bl	800af80 <DWIN_SetText>
}
 8008b34:	bf00      	nop
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8008b3c:	08010bd8 	.word	0x08010bd8
 8008b40:	08010be4 	.word	0x08010be4

08008b44 <Navigation_num_keyboard>:

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
    //char TypeData_String[20] = {0};
    //char UnitData_String[20] = {0};
    // Switch screen keyboard will excute in screen

    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	889a      	ldrh	r2, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	330e      	adds	r3, #14
 8008b62:	2232      	movs	r2, #50	@ 0x32
 8008b64:	2100      	movs	r1, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f005 fbae 	bl	800e2c8 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f103 020e 	add.w	r2, r3, #14
 8008b72:	2332      	movs	r3, #50	@ 0x32
 8008b74:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f002 fa01 	bl	800af80 <DWIN_SetText>
    // DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard)

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
 8008b7e:	216d      	movs	r1, #109	@ 0x6d
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f002 f9d6 	bl	800af32 <DWIN_SetPage>
}
 8008b86:	bf00      	nop
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <Navigation_full_keyboard>:

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	889a      	ldrh	r2, [r3, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	330e      	adds	r3, #14
 8008bac:	2232      	movs	r2, #50	@ 0x32
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f005 fb89 	bl	800e2c8 <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f103 020e 	add.w	r2, r3, #14
 8008bbc:	2332      	movs	r3, #50	@ 0x32
 8008bbe:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f002 f9dc 	bl	800af80 <DWIN_SetText>

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
 8008bc8:	2178      	movs	r1, #120	@ 0x78
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f002 f9b1 	bl	800af32 <DWIN_SetPage>
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <Save_Information>:

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]

}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bc80      	pop	{r7}
 8008bea:	4770      	bx	lr

08008bec <Enter_password>:

void Enter_password(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bf0:	b087      	sub	sp, #28
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
 8008bf8:	466b      	mov	r3, sp
 8008bfa:	461e      	mov	r6, r3
    /* Get the password input */
    uint8_t len = screen_obj->Screen_keyboard.Index_String + 1;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	3301      	adds	r3, #1
 8008c06:	75fb      	strb	r3, [r7, #23]
    char input_pass[len];
 8008c08:	7df9      	ldrb	r1, [r7, #23]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	613b      	str	r3, [r7, #16]
 8008c10:	b2cb      	uxtb	r3, r1
 8008c12:	2200      	movs	r2, #0
 8008c14:	4698      	mov	r8, r3
 8008c16:	4691      	mov	r9, r2
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	f04f 0300 	mov.w	r3, #0
 8008c20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c2c:	b2cb      	uxtb	r3, r1
 8008c2e:	2200      	movs	r2, #0
 8008c30:	461c      	mov	r4, r3
 8008c32:	4615      	mov	r5, r2
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	00eb      	lsls	r3, r5, #3
 8008c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c42:	00e2      	lsls	r2, r4, #3
 8008c44:	460b      	mov	r3, r1
 8008c46:	3307      	adds	r3, #7
 8008c48:	08db      	lsrs	r3, r3, #3
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	ebad 0d03 	sub.w	sp, sp, r3
 8008c50:	466b      	mov	r3, sp
 8008c52:	3300      	adds	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]
    strcpy(input_pass,screen_obj->Screen_keyboard.String);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	330e      	adds	r3, #14
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f005 fbf6 	bl	800e44e <strcpy>
    /* Check password */
    if (strcmp(input_pass,MACHINE_PASSWORD) == 0) { /* Correct password */
 8008c62:	490e      	ldr	r1, [pc, #56]	@ (8008c9c <Enter_password+0xb0>)
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f7f7 fa73 	bl	8000150 <strcmp>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d107      	bne.n	8008c80 <Enter_password+0x94>
        /* Goto setting page */
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->page_setting);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 316f 	ldrb.w	r3, [r3, #367]	@ 0x16f
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f002 f95a 	bl	800af32 <DWIN_SetPage>
 8008c7e:	e006      	b.n	8008c8e <Enter_password+0xa2>
    } else {
        /* Show text */
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_Password,INCORRECT_PASSWORD_TEXT,strlen(INCORRECT_PASSWORD_TEXT));
 8008c80:	2312      	movs	r3, #18
 8008c82:	4a07      	ldr	r2, [pc, #28]	@ (8008ca0 <Enter_password+0xb4>)
 8008c84:	f249 5180 	movw	r1, #38272	@ 0x9580
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f002 f979 	bl	800af80 <DWIN_SetText>
 8008c8e:	46b5      	mov	sp, r6
    }
}
 8008c90:	bf00      	nop
 8008c92:	371c      	adds	r7, #28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c9a:	bf00      	nop
 8008c9c:	08010bf4 	.word	0x08010bf4
 8008ca0:	08010bfc 	.word	0x08010bfc

08008ca4 <Enter_num_keyboard>:

void Enter_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
    uint16_t VP_show = screen_obj->Screen_keyboard.VP_Text;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	899b      	ldrh	r3, [r3, #12]
 8008cb2:	81fb      	strh	r3, [r7, #14]
    
    /* Show text to VP */
    DWIN_SetText((Dwin_t *)screen_obj,VP_show,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f103 020e 	add.w	r2, r3, #14
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008cc0:	89f9      	ldrh	r1, [r7, #14]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f002 f95c 	bl	800af80 <DWIN_SetText>

    /* Return page base on VP address */
    switch (VP_show) {
 8008cc8:	89fb      	ldrh	r3, [r7, #14]
 8008cca:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d032      	beq.n	8008d38 <Enter_num_keyboard+0x94>
 8008cd2:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	dc33      	bgt.n	8008d42 <Enter_num_keyboard+0x9e>
 8008cda:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d02a      	beq.n	8008d38 <Enter_num_keyboard+0x94>
 8008ce2:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	dc2b      	bgt.n	8008d42 <Enter_num_keyboard+0x9e>
 8008cea:	f249 5260 	movw	r2, #38240	@ 0x9560
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d013      	beq.n	8008d1a <Enter_num_keyboard+0x76>
 8008cf2:	f249 5260 	movw	r2, #38240	@ 0x9560
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	dc23      	bgt.n	8008d42 <Enter_num_keyboard+0x9e>
 8008cfa:	f249 5240 	movw	r2, #38208	@ 0x9540
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d015      	beq.n	8008d2e <Enter_num_keyboard+0x8a>
 8008d02:	f249 5240 	movw	r2, #38208	@ 0x9540
 8008d06:	4293      	cmp	r3, r2
 8008d08:	dc1b      	bgt.n	8008d42 <Enter_num_keyboard+0x9e>
 8008d0a:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 8008d0e:	d00e      	beq.n	8008d2e <Enter_num_keyboard+0x8a>
 8008d10:	f249 5220 	movw	r2, #38176	@ 0x9520
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d00a      	beq.n	8008d2e <Enter_num_keyboard+0x8a>
        } break;
        case VP_Name_Wifi :
        case VP_Password_Wifi : {
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
        } break;
        default: break;
 8008d18:	e013      	b.n	8008d42 <Enter_num_keyboard+0x9e>
            DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password); /* Clear warning text if any */
 8008d1a:	f249 5180 	movw	r1, #38272	@ 0x9580
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f002 f99e 	bl	800b060 <DWIN_ClearText>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 8008d24:	216e      	movs	r1, #110	@ 0x6e
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f002 f903 	bl	800af32 <DWIN_SetPage>
        } break;
 8008d2c:	e00a      	b.n	8008d44 <Enter_num_keyboard+0xa0>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 8008d2e:	216c      	movs	r1, #108	@ 0x6c
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f002 f8fe 	bl	800af32 <DWIN_SetPage>
        } break;
 8008d36:	e005      	b.n	8008d44 <Enter_num_keyboard+0xa0>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 8008d38:	2175      	movs	r1, #117	@ 0x75
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f002 f8f9 	bl	800af32 <DWIN_SetPage>
        } break;
 8008d40:	e000      	b.n	8008d44 <Enter_num_keyboard+0xa0>
        default: break;
 8008d42:	bf00      	nop
    }
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	789b      	ldrb	r3, [r3, #2]
 8008d5a:	2bf3      	cmp	r3, #243	@ 0xf3
 8008d5c:	d10e      	bne.n	8008d7c <Keyboard+0x30>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8088 	beq.w	8008e7a <Keyboard+0x12e>
            --screen_obj->Screen_keyboard.Index_String;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008d70:	3b01      	subs	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8008d7a:	e07e      	b.n	8008e7a <Keyboard+0x12e>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	789b      	ldrb	r3, [r3, #2]
 8008d80:	2bf4      	cmp	r3, #244	@ 0xf4
 8008d82:	d11a      	bne.n	8008dba <Keyboard+0x6e>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	bf14      	ite	ne
 8008d8e:	2301      	movne	r3, #1
 8008d90:	2300      	moveq	r3, #0
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	f083 0301 	eor.w	r3, r3, #1
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dac:	461a      	mov	r2, r3
 8008dae:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f002 f966 	bl	800b084 <DWIN_SetVariable_Icon>
 8008db8:	e05f      	b.n	8008e7a <Keyboard+0x12e>
    } else if (screen_event->data == 0xF2) { // Space button
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	789b      	ldrb	r3, [r3, #2]
 8008dbe:	2bf2      	cmp	r3, #242	@ 0xf2
 8008dc0:	d05b      	beq.n	8008e7a <Keyboard+0x12e>
        // screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = 32;
    } else if (screen_event->data == 0xF1) { // Enter button
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	789b      	ldrb	r3, [r3, #2]
 8008dc6:	2bf1      	cmp	r3, #241	@ 0xf1
 8008dc8:	d118      	bne.n	8008dfc <Keyboard+0xb0>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f960 	bl	8009090 <Screen_CheckInput_Keyboard>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d151      	bne.n	8008e7a <Keyboard+0x12e>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	8999      	ldrh	r1, [r3, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f103 020e 	add.w	r2, r3, #14
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f002 f8ca 	bl	800af80 <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f002 f89c 	bl	800af32 <DWIN_SetPage>
 8008dfa:	e03e      	b.n	8008e7a <Keyboard+0x12e>
        }
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	789b      	ldrb	r3, [r3, #2]
 8008e00:	2b40      	cmp	r3, #64	@ 0x40
 8008e02:	d92c      	bls.n	8008e5e <Keyboard+0x112>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	789b      	ldrb	r3, [r3, #2]
 8008e08:	2b5a      	cmp	r3, #90	@ 0x5a
 8008e0a:	d828      	bhi.n	8008e5e <Keyboard+0x112>
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e12:	f083 0301 	eor.w	r3, r3, #1
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d011      	beq.n	8008e40 <Keyboard+0xf4>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	789a      	ldrb	r2, [r3, #2]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e26:	1c59      	adds	r1, r3, #1
 8008e28:	b288      	uxth	r0, r1
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 8008e30:	4619      	mov	r1, r3
 8008e32:	f102 0320 	add.w	r3, r2, #32
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	440b      	add	r3, r1
 8008e3c:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8008e3e:	e01c      	b.n	8008e7a <Keyboard+0x12e>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	b291      	uxth	r1, r2
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8008e50:	4619      	mov	r1, r3
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	789a      	ldrb	r2, [r3, #2]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	440b      	add	r3, r1
 8008e5a:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 8008e5c:	e00d      	b.n	8008e7a <Keyboard+0x12e>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	b291      	uxth	r1, r2
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 8008e6e:	4619      	mov	r1, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	789a      	ldrb	r2, [r3, #2]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	440b      	add	r3, r1
 8008e78:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f103 020e 	add.w	r2, r3, #14
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e86:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f002 f878 	bl	800af80 <DWIN_SetText>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	80fb      	strh	r3, [r7, #6]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	717b      	strb	r3, [r7, #5]
    int left = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 8008eac:	797b      	ldrb	r3, [r7, #5]
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	613b      	str	r3, [r7, #16]
    int mid;

    while (left <= right) {
 8008eb2:	e023      	b.n	8008efc <Index_VP+0x64>
        mid = (left + right) / 2;
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	4413      	add	r3, r2
 8008eba:	0fda      	lsrs	r2, r3, #31
 8008ebc:	4413      	add	r3, r2
 8008ebe:	105b      	asrs	r3, r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]
        if (VP_array[mid].VP_address == vp) {
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	4413      	add	r3, r2
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	88fa      	ldrh	r2, [r7, #6]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d105      	bne.n	8008ede <Index_VP+0x46>
            return VP_array[mid].index;  // Found the vp
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	4413      	add	r3, r2
 8008eda:	789b      	ldrb	r3, [r3, #2]
 8008edc:	e013      	b.n	8008f06 <Index_VP+0x6e>
        } else if (VP_array[mid].VP_address > vp) {
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	88fa      	ldrh	r2, [r7, #6]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d203      	bcs.n	8008ef6 <Index_VP+0x5e>
            right = mid - 1;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	613b      	str	r3, [r7, #16]
 8008ef4:	e002      	b.n	8008efc <Index_VP+0x64>
        } else {
            left = mid + 1;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	617b      	str	r3, [r7, #20]
    while (left <= right) {
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	ddd7      	ble.n	8008eb4 <Index_VP+0x1c>
        }
    }

    return 255;  // VP not found
 8008f04:	23ff      	movs	r3, #255	@ 0xff
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bc80      	pop	{r7}
 8008f0e:	4770      	bx	lr

08008f10 <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig,
                                                                a_handler_enter_sig };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page ;
 8008f18:	4b2b      	ldr	r3, [pc, #172]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8008fcc <Screen_init_handler_table+0xbc>)
 8008f1e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
 8008f20:	4b29      	ldr	r3, [pc, #164]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3308      	adds	r3, #8
 8008f26:	4a2a      	ldr	r2, [pc, #168]	@ (8008fd0 <Screen_init_handler_table+0xc0>)
 8008f28:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
 8008f2a:	4b27      	ldr	r3, [pc, #156]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3314      	adds	r3, #20
 8008f30:	4a28      	ldr	r2, [pc, #160]	@ (8008fd4 <Screen_init_handler_table+0xc4>)
 8008f32:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
 8008f34:	4b24      	ldr	r3, [pc, #144]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	330c      	adds	r3, #12
 8008f3a:	4a27      	ldr	r2, [pc, #156]	@ (8008fd8 <Screen_init_handler_table+0xc8>)
 8008f3c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_WIFI]         = Navigation_setting_wifi;
 8008f3e:	4b22      	ldr	r3, [pc, #136]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3310      	adds	r3, #16
 8008f44:	4a25      	ldr	r2, [pc, #148]	@ (8008fdc <Screen_init_handler_table+0xcc>)
 8008f46:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
 8008f48:	4b1f      	ldr	r3, [pc, #124]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3328      	adds	r3, #40	@ 0x28
 8008f4e:	4a24      	ldr	r2, [pc, #144]	@ (8008fe0 <Screen_init_handler_table+0xd0>)
 8008f50:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
 8008f52:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3318      	adds	r3, #24
 8008f58:	4a22      	ldr	r2, [pc, #136]	@ (8008fe4 <Screen_init_handler_table+0xd4>)
 8008f5a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
 8008f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	331c      	adds	r3, #28
 8008f62:	4a21      	ldr	r2, [pc, #132]	@ (8008fe8 <Screen_init_handler_table+0xd8>)
 8008f64:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SELECTION][ON_OFF_DEV]                       = ON_OFF_Button;
 8008f66:	4b18      	ldr	r3, [pc, #96]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	4a20      	ldr	r2, [pc, #128]	@ (8008fec <Screen_init_handler_table+0xdc>)
 8008f6c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SELECT_PROGRAM]                   = select_running_program;
 8008f6e:	4b16      	ldr	r3, [pc, #88]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	3304      	adds	r3, #4
 8008f74:	4a1e      	ldr	r2, [pc, #120]	@ (8008ff0 <Screen_init_handler_table+0xe0>)
 8008f76:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SElECT_MODIFY_PROGRAM]            = select_modify_program;
 8008f78:	4b13      	ldr	r3, [pc, #76]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff4 <Screen_init_handler_table+0xe4>)
 8008f80:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
 8008f82:	4b11      	ldr	r3, [pc, #68]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	4a1c      	ldr	r2, [pc, #112]	@ (8008ff8 <Screen_init_handler_table+0xe8>)
 8008f88:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;
 8008f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8008ffc <Screen_init_handler_table+0xec>)
 8008f90:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;
 8008f92:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	4a1a      	ldr	r2, [pc, #104]	@ (8009000 <Screen_init_handler_table+0xf0>)
 8008f98:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_ENTER][ENTER_PASSWORD]                       = Enter_password;
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	4a19      	ldr	r2, [pc, #100]	@ (8009004 <Screen_init_handler_table+0xf4>)
 8008fa0:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_NUM_KEYBOARD]                   = Enter_num_keyboard;
 8008fa2:	4b09      	ldr	r3, [pc, #36]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4a17      	ldr	r2, [pc, #92]	@ (8009008 <Screen_init_handler_table+0xf8>)
 8008faa:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;
 8008fac:	4b06      	ldr	r3, [pc, #24]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	4a16      	ldr	r2, [pc, #88]	@ (800900c <Screen_init_handler_table+0xfc>)
 8008fb2:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a04      	ldr	r2, [pc, #16]	@ (8008fc8 <Screen_init_handler_table+0xb8>)
 8008fb8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	20000040 	.word	0x20000040
 8008fcc:	080084c1 	.word	0x080084c1
 8008fd0:	080084e3 	.word	0x080084e3
 8008fd4:	08008539 	.word	0x08008539
 8008fd8:	0800856d 	.word	0x0800856d
 8008fdc:	08008587 	.word	0x08008587
 8008fe0:	080085e5 	.word	0x080085e5
 8008fe4:	080086d1 	.word	0x080086d1
 8008fe8:	08008775 	.word	0x08008775
 8008fec:	08008929 	.word	0x08008929
 8008ff0:	08008a25 	.word	0x08008a25
 8008ff4:	08008a49 	.word	0x08008a49
 8008ff8:	08008b45 	.word	0x08008b45
 8008ffc:	08008b8f 	.word	0x08008b8f
 8009000:	08008bd9 	.word	0x08008bd9
 8009004:	08008bed 	.word	0x08008bed
 8009008:	08008ca5 	.word	0x08008ca5
 800900c:	08008d4d 	.word	0x08008d4d

08009010 <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
    // do sth ...


	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8009020:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d107      	bne.n	800903a <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3308      	adds	r3, #8
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	4798      	blx	r3
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}
 8009038:	e025      	b.n	8009086 <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b03      	cmp	r3, #3
 8009040:	d107      	bne.n	8009052 <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	330c      	adds	r3, #12
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	4798      	blx	r3
}
 8009050:	e019      	b.n	8009086 <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b04      	cmp	r3, #4
 8009058:	d107      	bne.n	800906a <Screen_excute_RX_function+0x5a>
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	3310      	adds	r3, #16
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	4798      	blx	r3
}
 8009068:	e00d      	b.n	8009086 <Screen_excute_RX_function+0x76>
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4413      	add	r3, r2
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	785b      	ldrb	r3, [r3, #1]
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	4798      	blx	r3
}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const obj_screen) {
 8009090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009094:	b08d      	sub	sp, #52	@ 0x34
 8009096:	af02      	add	r7, sp, #8
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	466b      	mov	r3, sp
 800909c:	461e      	mov	r6, r3
    char string[obj_screen->Screen_keyboard.Index_String];
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 80090a4:	460b      	mov	r3, r1
 80090a6:	3b01      	subs	r3, #1
 80090a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090aa:	b28b      	uxth	r3, r1
 80090ac:	2200      	movs	r2, #0
 80090ae:	4698      	mov	r8, r3
 80090b0:	4691      	mov	r9, r2
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	f04f 0300 	mov.w	r3, #0
 80090ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090c6:	b28b      	uxth	r3, r1
 80090c8:	2200      	movs	r2, #0
 80090ca:	461c      	mov	r4, r3
 80090cc:	4615      	mov	r5, r2
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	f04f 0300 	mov.w	r3, #0
 80090d6:	00eb      	lsls	r3, r5, #3
 80090d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090dc:	00e2      	lsls	r2, r4, #3
 80090de:	460b      	mov	r3, r1
 80090e0:	3307      	adds	r3, #7
 80090e2:	08db      	lsrs	r3, r3, #3
 80090e4:	00db      	lsls	r3, r3, #3
 80090e6:	ebad 0d03 	sub.w	sp, sp, r3
 80090ea:	ab02      	add	r3, sp, #8
 80090ec:	3300      	adds	r3, #0
 80090ee:	623b      	str	r3, [r7, #32]
    char warm_string[20] = {0};
 80090f0:	f107 0308 	add.w	r3, r7, #8
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	605a      	str	r2, [r3, #4]
 80090fa:	609a      	str	r2, [r3, #8]
 80090fc:	60da      	str	r2, [r3, #12]
 80090fe:	611a      	str	r2, [r3, #16]
    float data_compare;
    // copy string
    memcpy(string,obj_screen->Screen_keyboard.String,obj_screen->Screen_keyboard.Index_String);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f103 010e 	add.w	r1, r3, #14
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800910c:	461a      	mov	r2, r3
 800910e:	6a38      	ldr	r0, [r7, #32]
 8009110:	f005 f9b3 	bl	800e47a <memcpy>
    /* compare data with limit */
    data_compare = atof(string);
 8009114:	6a38      	ldr	r0, [r7, #32]
 8009116:	f003 f895 	bl	800c244 <atof>
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	4610      	mov	r0, r2
 8009120:	4619      	mov	r1, r3
 8009122:	f7f7 fcdb 	bl	8000adc <__aeabi_d2f>
 8009126:	4603      	mov	r3, r0
 8009128:	61fb      	str	r3, [r7, #28]
    if (data_compare > obj_screen->Screen_condition->max_value) {
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4619      	mov	r1, r3
 8009132:	69f8      	ldr	r0, [r7, #28]
 8009134:	f7f7 fd8e 	bl	8000c54 <__aeabi_fcmpgt>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d019      	beq.n	8009172 <Screen_CheckInput_Keyboard+0xe2>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", obj_screen->Screen_condition->max_value);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f7f7 f979 	bl	800043c <__aeabi_f2d>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	f107 0008 	add.w	r0, r7, #8
 8009152:	e9cd 2300 	strd	r2, r3, [sp]
 8009156:	4a1c      	ldr	r2, [pc, #112]	@ (80091c8 <Screen_CheckInput_Keyboard+0x138>)
 8009158:	2114      	movs	r1, #20
 800915a:	f004 ff75 	bl	800e048 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800915e:	f107 0208 	add.w	r2, r7, #8
 8009162:	2314      	movs	r3, #20
 8009164:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 ff09 	bl	800af80 <DWIN_SetText>
        return Status_ERROR;
 800916e:	2300      	movs	r3, #0
 8009170:	e024      	b.n	80091bc <Screen_CheckInput_Keyboard+0x12c>
    } else if (data_compare < obj_screen->Screen_condition->min_value) {
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	4619      	mov	r1, r3
 800917a:	69f8      	ldr	r0, [r7, #28]
 800917c:	f7f7 fd4c 	bl	8000c18 <__aeabi_fcmplt>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d019      	beq.n	80091ba <Screen_CheckInput_Keyboard+0x12a>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", obj_screen->Screen_condition->min_value);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	4618      	mov	r0, r3
 800918e:	f7f7 f955 	bl	800043c <__aeabi_f2d>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	f107 0008 	add.w	r0, r7, #8
 800919a:	e9cd 2300 	strd	r2, r3, [sp]
 800919e:	4a0b      	ldr	r2, [pc, #44]	@ (80091cc <Screen_CheckInput_Keyboard+0x13c>)
 80091a0:	2114      	movs	r1, #20
 80091a2:	f004 ff51 	bl	800e048 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)obj_screen,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 80091a6:	f107 0208 	add.w	r2, r7, #8
 80091aa:	2314      	movs	r3, #20
 80091ac:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 fee5 	bl	800af80 <DWIN_SetText>
        return Status_ERROR;
 80091b6:	2300      	movs	r3, #0
 80091b8:	e000      	b.n	80091bc <Screen_CheckInput_Keyboard+0x12c>
    } 
    return Status_SUCCESS; 
 80091ba:	2301      	movs	r3, #1
 80091bc:	46b5      	mov	sp, r6
}
 80091be:	4618      	mov	r0, r3
 80091c0:	372c      	adds	r7, #44	@ 0x2c
 80091c2:	46bd      	mov	sp, r7
 80091c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091c8:	08010c10 	.word	0x08010c10
 80091cc:	08010c1c 	.word	0x08010c1c

080091d0 <Screen_Init_Variable>:
        	screen_obj->IC_Testerx[screen_obj->curr_device].data_result[Pin_x +(num_pin * Case_x)] = map_array[result[Pin_x +(num_pin * Case_x)]];
        }
    }
}

void Screen_Init_Variable(Screen_t *const obj_screen) {
 80091d0:	b590      	push	{r4, r7, lr}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
    obj_screen->curr_device = DEVICE_1;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = "744051";
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a77      	ldr	r2, [pc, #476]	@ (80093c0 <Screen_Init_Variable+0x1f0>)
 80091e4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a76      	ldr	r2, [pc, #472]	@ (80093c4 <Screen_Init_Variable+0x1f4>)
 80091ec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = "5";
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a75      	ldr	r2, [pc, #468]	@ (80093c8 <Screen_Init_Variable+0x1f8>)
 80091f4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = "744051";
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a71      	ldr	r2, [pc, #452]	@ (80093c0 <Screen_Init_Variable+0x1f0>)
 80091fc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a72      	ldr	r2, [pc, #456]	@ (80093cc <Screen_Init_Variable+0x1fc>)
 8009204:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = "10";
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a71      	ldr	r2, [pc, #452]	@ (80093d0 <Screen_Init_Variable+0x200>)
 800920c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = "744051";
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a6b      	ldr	r2, [pc, #428]	@ (80093c0 <Screen_Init_Variable+0x1f0>)
 8009214:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a6e      	ldr	r2, [pc, #440]	@ (80093d4 <Screen_Init_Variable+0x204>)
 800921c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = "15";
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a6d      	ldr	r2, [pc, #436]	@ (80093d8 <Screen_Init_Variable+0x208>)
 8009224:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = "744051";
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a65      	ldr	r2, [pc, #404]	@ (80093c0 <Screen_Init_Variable+0x1f0>)
 800922c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a6a      	ldr	r2, [pc, #424]	@ (80093dc <Screen_Init_Variable+0x20c>)
 8009234:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = "20";
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a69      	ldr	r2, [pc, #420]	@ (80093e0 <Screen_Init_Variable+0x210>)
 800923c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = "Program 1";
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a68      	ldr	r2, [pc, #416]	@ (80093e4 <Screen_Init_Variable+0x214>)
 8009244:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = "Program 2";
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a67      	ldr	r2, [pc, #412]	@ (80093e8 <Screen_Init_Variable+0x218>)
 800924c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = "Program 3";
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a66      	ldr	r2, [pc, #408]	@ (80093ec <Screen_Init_Variable+0x21c>)
 8009254:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = "Program 4";
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a65      	ldr	r2, [pc, #404]	@ (80093f0 <Screen_Init_Variable+0x220>)
 800925c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester = "IC TESTER 1";
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a64      	ldr	r2, [pc, #400]	@ (80093f4 <Screen_Init_Variable+0x224>)
 8009264:	64da      	str	r2, [r3, #76]	@ 0x4c
    obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester = "IC TESTER 2";
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a63      	ldr	r2, [pc, #396]	@ (80093f8 <Screen_Init_Variable+0x228>)
 800926a:	669a      	str	r2, [r3, #104]	@ 0x68
    obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester = "IC TESTER 3";
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a63      	ldr	r2, [pc, #396]	@ (80093fc <Screen_Init_Variable+0x22c>)
 8009270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    memcpy(obj_screen->Wifi_setting.Name_Wifi,"Wifi TEST 1",strlen("Wifi TEST 1"));
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800927a:	220b      	movs	r2, #11
 800927c:	4960      	ldr	r1, [pc, #384]	@ (8009400 <Screen_Init_Variable+0x230>)
 800927e:	4618      	mov	r0, r3
 8009280:	f005 f8fb 	bl	800e47a <memcpy>
    memcpy(obj_screen->Wifi_setting.Password_Wifi,"PASSword 1234",strlen("PASSword 1234"));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f503 73a5 	add.w	r3, r3, #330	@ 0x14a
 800928a:	220d      	movs	r2, #13
 800928c:	495d      	ldr	r1, [pc, #372]	@ (8009404 <Screen_Init_Variable+0x234>)
 800928e:	4618      	mov	r0, r3
 8009290:	f005 f8f3 	bl	800e47a <memcpy>

    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2265      	movs	r2, #101	@ 0x65
 8009298:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2265      	movs	r2, #101	@ 0x65
 80092a0:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2265      	movs	r2, #101	@ 0x65
 80092a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    obj_screen->IC_Testerx[DEVICE_1].state = false;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    obj_screen->IC_Testerx[DEVICE_2].state = false;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
    obj_screen->IC_Testerx[DEVICE_3].state = false;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7f6 ff47 	bl	8000164 <strlen>
 80092d6:	4603      	mov	r3, r0
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4622      	mov	r2, r4
 80092dc:	f249 2125 	movw	r1, #37413	@ 0x9225
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 fe4d 	bl	800af80 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7f6 ff36 	bl	8000164 <strlen>
 80092f8:	4603      	mov	r3, r0
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	4622      	mov	r2, r4
 80092fe:	f249 2150 	movw	r1, #37456	@ 0x9250
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f001 fe3c 	bl	800af80 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009314:	4618      	mov	r0, r3
 8009316:	f7f6 ff25 	bl	8000164 <strlen>
 800931a:	4603      	mov	r3, r0
 800931c:	b29b      	uxth	r3, r3
 800931e:	4622      	mov	r2, r4
 8009320:	f249 2175 	movw	r1, #37493	@ 0x9275
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 fe2b 	bl	800af80 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 4108 	ldr.w	r4, [r3, #264]	@ 0x108
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009336:	4618      	mov	r0, r3
 8009338:	f7f6 ff14 	bl	8000164 <strlen>
 800933c:	4603      	mov	r3, r0
 800933e:	b29b      	uxth	r3, r3
 8009340:	4622      	mov	r2, r4
 8009342:	f44f 4113 	mov.w	r1, #37632	@ 0x9300
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f001 fe1a 	bl	800af80 <DWIN_SetText>

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009354:	4618      	mov	r0, r3
 8009356:	f7f6 ff05 	bl	8000164 <strlen>
 800935a:	4603      	mov	r3, r0
 800935c:	b29b      	uxth	r3, r3
 800935e:	4622      	mov	r2, r4
 8009360:	f249 3150 	movw	r1, #37712	@ 0x9350
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 fe0b 	bl	800af80 <DWIN_SetText>

    obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2210      	movs	r2, #16
 800936e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
    obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2208      	movs	r2, #8
 8009376:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    obj_screen->Screen_keyboard.Index_String = 0;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    Screen_ShowData_Mainpage(obj_screen,0);
 800938a:	2100      	movs	r1, #0
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f83b 	bl	8009408 <Screen_ShowData_Mainpage>
    DWIN_SetVariable_Icon((Dwin_t *)obj_screen,VP_ICON_ON_OFF,obj_screen->IC_Testerx[obj_screen->curr_device].state);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8009398:	4619      	mov	r1, r3
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	1a5b      	subs	r3, r3, r1
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	334b      	adds	r3, #75	@ 0x4b
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f001 fe67 	bl	800b084 <DWIN_SetVariable_Icon>
}
 80093b6:	bf00      	nop
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd90      	pop	{r4, r7, pc}
 80093be:	bf00      	nop
 80093c0:	08010c28 	.word	0x08010c28
 80093c4:	08010c30 	.word	0x08010c30
 80093c8:	08010c48 	.word	0x08010c48
 80093cc:	08010c4c 	.word	0x08010c4c
 80093d0:	08010c64 	.word	0x08010c64
 80093d4:	08010c68 	.word	0x08010c68
 80093d8:	08010c80 	.word	0x08010c80
 80093dc:	08010c84 	.word	0x08010c84
 80093e0:	08010c9c 	.word	0x08010c9c
 80093e4:	08010ca0 	.word	0x08010ca0
 80093e8:	08010cac 	.word	0x08010cac
 80093ec:	08010cb8 	.word	0x08010cb8
 80093f0:	08010cc4 	.word	0x08010cc4
 80093f4:	08010cd0 	.word	0x08010cd0
 80093f8:	08010cdc 	.word	0x08010cdc
 80093fc:	08010ce8 	.word	0x08010ce8
 8009400:	08010cf4 	.word	0x08010cf4
 8009404:	08010d00 	.word	0x08010d00

08009408 <Screen_ShowData_Mainpage>:

void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
 8009408:	b5b0      	push	{r4, r5, r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 8009414:	78fa      	ldrb	r2, [r7, #3]
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	4613      	mov	r3, r2
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	33a0      	adds	r3, #160	@ 0xa0
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f7f6 fe9c 	bl	8000164 <strlen>
 800942c:	4603      	mov	r3, r0
 800942e:	b2db      	uxtb	r3, r3
 8009430:	3309      	adds	r3, #9
 8009432:	77fb      	strb	r3, [r7, #31]
    uint8_t size_Description_IC = strlen("IC Description: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC);
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4613      	mov	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	33a4      	adds	r3, #164	@ 0xa4
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f7f6 fe8c 	bl	8000164 <strlen>
 800944c:	4603      	mov	r3, r0
 800944e:	b2db      	uxtb	r3, r3
 8009450:	3310      	adds	r3, #16
 8009452:	77bb      	strb	r3, [r7, #30]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	33a8      	adds	r3, #168	@ 0xa8
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4618      	mov	r0, r3
 8009468:	f7f6 fe7c 	bl	8000164 <strlen>
 800946c:	4603      	mov	r3, r0
 800946e:	b2db      	uxtb	r3, r3
 8009470:	330f      	adds	r3, #15
 8009472:	777b      	strb	r3, [r7, #29]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8009474:	7ffb      	ldrb	r3, [r7, #31]
 8009476:	3301      	adds	r3, #1
 8009478:	4618      	mov	r0, r3
 800947a:	f002 feeb 	bl	800c254 <malloc>
 800947e:	4603      	mov	r3, r0
 8009480:	61bb      	str	r3, [r7, #24]
    char *Text_Description_IC = malloc(size_Description_IC + 1);
 8009482:	7fbb      	ldrb	r3, [r7, #30]
 8009484:	3301      	adds	r3, #1
 8009486:	4618      	mov	r0, r3
 8009488:	f002 fee4 	bl	800c254 <malloc>
 800948c:	4603      	mov	r3, r0
 800948e:	617b      	str	r3, [r7, #20]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 8009490:	7f7b      	ldrb	r3, [r7, #29]
 8009492:	3301      	adds	r3, #1
 8009494:	4618      	mov	r0, r3
 8009496:	f002 fedd 	bl	800c254 <malloc>
 800949a:	4603      	mov	r3, r0
 800949c:	613b      	str	r3, [r7, #16]

    strcpy(Text_Name_IC,"IC Name: ");
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	4949      	ldr	r1, [pc, #292]	@ (80095c8 <Screen_ShowData_Mainpage+0x1c0>)
 80094a2:	461a      	mov	r2, r3
 80094a4:	460b      	mov	r3, r1
 80094a6:	cb03      	ldmia	r3!, {r0, r1}
 80094a8:	6010      	str	r0, [r2, #0]
 80094aa:	6051      	str	r1, [r2, #4]
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	4613      	mov	r3, r2
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	33a0      	adds	r3, #160	@ 0xa0
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4619      	mov	r1, r3
 80094c4:	69b8      	ldr	r0, [r7, #24]
 80094c6:	f004 ff07 	bl	800e2d8 <strcat>
    strcpy(Text_Description_IC,"IC Description: ");
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	4a3f      	ldr	r2, [pc, #252]	@ (80095cc <Screen_ShowData_Mainpage+0x1c4>)
 80094ce:	461d      	mov	r5, r3
 80094d0:	4614      	mov	r4, r2
 80094d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094d4:	6028      	str	r0, [r5, #0]
 80094d6:	6069      	str	r1, [r5, #4]
 80094d8:	60aa      	str	r2, [r5, #8]
 80094da:	60eb      	str	r3, [r5, #12]
 80094dc:	7823      	ldrb	r3, [r4, #0]
 80094de:	742b      	strb	r3, [r5, #16]
    strcat(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC);
 80094e0:	78fa      	ldrb	r2, [r7, #3]
 80094e2:	6879      	ldr	r1, [r7, #4]
 80094e4:	4613      	mov	r3, r2
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	33a4      	adds	r3, #164	@ 0xa4
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6978      	ldr	r0, [r7, #20]
 80094f6:	f004 feef 	bl	800e2d8 <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	4a34      	ldr	r2, [pc, #208]	@ (80095d0 <Screen_ShowData_Mainpage+0x1c8>)
 80094fe:	461c      	mov	r4, r3
 8009500:	4615      	mov	r5, r2
 8009502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009504:	6020      	str	r0, [r4, #0]
 8009506:	6061      	str	r1, [r4, #4]
 8009508:	60a2      	str	r2, [r4, #8]
 800950a:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4613      	mov	r3, r2
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	33a8      	adds	r3, #168	@ 0xa8
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4619      	mov	r1, r3
 8009520:	6938      	ldr	r0, [r7, #16]
 8009522:	f004 fed9 	bl	800e2d8 <strcat>

    memset(a_select_program,1,MAX_PROGRAM_TEST);
 8009526:	f107 030c 	add.w	r3, r7, #12
 800952a:	2204      	movs	r2, #4
 800952c:	2101      	movs	r1, #1
 800952e:	4618      	mov	r0, r3
 8009530:	f004 feca 	bl	800e2c8 <memset>
    // Get the program selected
    a_select_program[index_program] = 0 ;
 8009534:	78fb      	ldrb	r3, [r7, #3]
 8009536:	3320      	adds	r3, #32
 8009538:	443b      	add	r3, r7
 800953a:	2200      	movs	r2, #0
 800953c:	f803 2c14 	strb.w	r2, [r3, #-20]
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8009546:	4619      	mov	r1, r3
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	460b      	mov	r3, r1
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	1a5b      	subs	r3, r3, r1
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	334a      	adds	r3, #74	@ 0x4a
 8009556:	78fa      	ldrb	r2, [r7, #3]
 8009558:	701a      	strb	r2, [r3, #0]

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
 800955a:	f107 020c 	add.w	r2, r7, #12
 800955e:	2304      	movs	r3, #4
 8009560:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f001 fdba 	bl	800b0de <DWIN_SetArray_Icon>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,Text_Name_IC,size_Name_IC);
 800956a:	7ffb      	ldrb	r3, [r7, #31]
 800956c:	b29b      	uxth	r3, r3
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 fd03 	bl	800af80 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,Text_Description_IC,size_Description_IC);
 800957a:	7fbb      	ldrb	r3, [r7, #30]
 800957c:	b29b      	uxth	r3, r3
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	f249 1150 	movw	r1, #37200	@ 0x9150
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f001 fcfb 	bl	800af80 <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,Text_Num_IC,size_Num_IC);
 800958a:	7f7b      	ldrb	r3, [r7, #29]
 800958c:	b29b      	uxth	r3, r3
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 fcf3 	bl	800af80 <DWIN_SetText>
    
    /* free malloc */
    if (Text_Name_IC != NULL) {
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <Screen_ShowData_Mainpage+0x19e>
        free(Text_Name_IC);
 80095a0:	69b8      	ldr	r0, [r7, #24]
 80095a2:	f002 fe5f 	bl	800c264 <free>
    }
    if (Text_Description_IC != NULL) {
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <Screen_ShowData_Mainpage+0x1aa>
        free(Text_Description_IC);
 80095ac:	6978      	ldr	r0, [r7, #20]
 80095ae:	f002 fe59 	bl	800c264 <free>
    }
    if (Text_Num_IC != NULL) {
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <Screen_ShowData_Mainpage+0x1b6>
        free(Text_Num_IC);
 80095b8:	6938      	ldr	r0, [r7, #16]
 80095ba:	f002 fe53 	bl	800c264 <free>
    }
}
 80095be:	bf00      	nop
 80095c0:	3720      	adds	r7, #32
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bdb0      	pop	{r4, r5, r7, pc}
 80095c6:	bf00      	nop
 80095c8:	08010bd8 	.word	0x08010bd8
 80095cc:	08010d10 	.word	0x08010d10
 80095d0:	08010be4 	.word	0x08010be4

080095d4 <get_data_testing_ic>:
}

#pragma endregion FUNCTION SCREEN


static void get_data_testing_ic(char *searchName,Program_Test_t *pdata_test) {
 80095d4:	b590      	push	{r4, r7, lr}
 80095d6:	b0cf      	sub	sp, #316	@ 0x13c
 80095d8:	af00      	add	r7, sp, #0
 80095da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80095e2:	6018      	str	r0, [r3, #0]
 80095e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095e8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80095ec:	6019      	str	r1, [r3, #0]
    uint8_t num_direc_used = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    uint8_t *temp_buf;
    direc_EEPROM_t direc_array[MAX_DIRECTORY_USED]; /* array store directory */
    direc_EEPROM_t *pDirectory = NULL;
 80095f4:	2300      	movs	r3, #0
 80095f6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    uint16_t mem_addr;
    uint16_t buf_length;
    /* get num directory used */
    temp_buf = (uint8_t *)malloc(MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 80095fa:	20f0      	movs	r0, #240	@ 0xf0
 80095fc:	f002 fe2a 	bl	800c254 <malloc>
 8009600:	4603      	mov	r3, r0
 8009602:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,temp_buf,1);
 8009606:	2301      	movs	r3, #1
 8009608:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800960c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8009610:	48d1      	ldr	r0, [pc, #836]	@ (8009958 <get_data_testing_ic+0x384>)
 8009612:	f001 fbcd 	bl	800adb0 <AT24Cxx_read_buffer>
    num_direc_used = temp_buf[0];
 8009616:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    /* read directory info */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC,temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 8009620:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8009624:	b29b      	uxth	r3, r3
 8009626:	461a      	mov	r2, r3
 8009628:	0052      	lsls	r2, r2, #1
 800962a:	4413      	add	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	b29b      	uxth	r3, r3
 8009630:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8009634:	f240 1143 	movw	r1, #323	@ 0x143
 8009638:	48c7      	ldr	r0, [pc, #796]	@ (8009958 <get_data_testing_ic+0x384>)
 800963a:	f001 fbb9 	bl	800adb0 <AT24Cxx_read_buffer>
    memcpy(&direc_array[0],temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800963e:	f897 2132 	ldrb.w	r2, [r7, #306]	@ 0x132
 8009642:	4613      	mov	r3, r2
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	461a      	mov	r2, r3
 800964c:	f107 030c 	add.w	r3, r7, #12
 8009650:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009654:	4618      	mov	r0, r3
 8009656:	f004 ff10 	bl	800e47a <memcpy>
    free(temp_buf);
 800965a:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800965e:	f002 fe01 	bl	800c264 <free>
    /* find info of search name ic */
    for (uint8_t i = 0; i < num_direc_used; i++) {
 8009662:	2300      	movs	r3, #0
 8009664:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 8009668:	e02c      	b.n	80096c4 <get_data_testing_ic+0xf0>
        if (memcmp(searchName,direc_array[i].nameIC,strlen(searchName)) == 0) {
 800966a:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800966e:	f107 010c 	add.w	r1, r7, #12
 8009672:	4613      	mov	r3, r2
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	18cc      	adds	r4, r1, r3
 800967c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009680:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	f7f6 fd6d 	bl	8000164 <strlen>
 800968a:	4602      	mov	r2, r0
 800968c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009690:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009694:	4621      	mov	r1, r4
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	f004 fe06 	bl	800e2a8 <memcmp>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <get_data_testing_ic+0xe6>
            pDirectory = &direc_array[i];
 80096a2:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 80096a6:	f107 010c 	add.w	r1, r7, #12
 80096aa:	4613      	mov	r3, r2
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	440b      	add	r3, r1
 80096b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            break;
 80096b8:	e00a      	b.n	80096d0 <get_data_testing_ic+0xfc>
    for (uint8_t i = 0; i < num_direc_used; i++) {
 80096ba:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80096be:	3301      	adds	r3, #1
 80096c0:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 80096c4:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 80096c8:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d3cc      	bcc.n	800966a <get_data_testing_ic+0x96>
        }
    }
    /* NOT FOUND NAME IC IN EEPROM */ 
    if (pDirectory == NULL) {
 80096d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d103      	bne.n	80096e0 <get_data_testing_ic+0x10c>
        printf("NOT FOUND NAME IC IN EEPROM\n");
 80096d8:	48a0      	ldr	r0, [pc, #640]	@ (800995c <get_data_testing_ic+0x388>)
 80096da:	f004 fcad 	bl	800e038 <puts>
        return;
 80096de:	e136      	b.n	800994e <get_data_testing_ic+0x37a>
    } 
    mem_addr = (uint16_t)((pDirectory->addr[0] << 8) | pDirectory->addr[1]);
 80096e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80096e4:	7a1b      	ldrb	r3, [r3, #8]
 80096e6:	b21b      	sxth	r3, r3
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	b21a      	sxth	r2, r3
 80096ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80096f0:	7a5b      	ldrb	r3, [r3, #9]
 80096f2:	b21b      	sxth	r3, r3
 80096f4:	4313      	orrs	r3, r2
 80096f6:	b21b      	sxth	r3, r3
 80096f8:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    buf_length = (uint16_t)((pDirectory->length[0] << 8) | pDirectory->length[1]);
 80096fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009700:	7a9b      	ldrb	r3, [r3, #10]
 8009702:	b21b      	sxth	r3, r3
 8009704:	021b      	lsls	r3, r3, #8
 8009706:	b21a      	sxth	r2, r3
 8009708:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800970c:	7adb      	ldrb	r3, [r3, #11]
 800970e:	b21b      	sxth	r3, r3
 8009710:	4313      	orrs	r3, r2
 8009712:	b21b      	sxth	r3, r3
 8009714:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    temp_buf = (uint8_t *)malloc(buf_length);
 8009718:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800971c:	4618      	mov	r0, r3
 800971e:	f002 fd99 	bl	800c254 <malloc>
 8009722:	4603      	mov	r3, r0
 8009724:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    AT24Cxx_read_buffer(&eeprom_ob,mem_addr,temp_buf,buf_length);
 8009728:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800972c:	f8b7 112a 	ldrh.w	r1, [r7, #298]	@ 0x12a
 8009730:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8009734:	4888      	ldr	r0, [pc, #544]	@ (8009958 <get_data_testing_ic+0x384>)
 8009736:	f001 fb3b 	bl	800adb0 <AT24Cxx_read_buffer>
    // Find the first pipe separator
    uint8_t *first_pipe = memchr(temp_buf, '|', buf_length);
 800973a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800973e:	461a      	mov	r2, r3
 8009740:	217c      	movs	r1, #124	@ 0x7c
 8009742:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8009746:	f004 fe8a 	bl	800e45e <memchr>
 800974a:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (!first_pipe) return;
 800974e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 80f6 	beq.w	8009944 <get_data_testing_ic+0x370>
    
    // Extract pin count
    int pin_count_len = first_pipe - temp_buf;
 8009758:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800975c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    char* pin_count_str = malloc(pin_count_len + 1);
 8009766:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800976a:	3301      	adds	r3, #1
 800976c:	4618      	mov	r0, r3
 800976e:	f002 fd71 	bl	800c254 <malloc>
 8009772:	4603      	mov	r3, r0
 8009774:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    strncpy(pin_count_str, temp_buf, pin_count_len);
 8009778:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800977c:	461a      	mov	r2, r3
 800977e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8009782:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8009786:	f004 fdc8 	bl	800e31a <strncpy>
    pin_count_str[pin_count_len] = '\0';
 800978a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800978e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8009792:	4413      	add	r3, r2
 8009794:	2200      	movs	r2, #0
 8009796:	701a      	strb	r2, [r3, #0]
    pdata_test->num_pin = atoi(pin_count_str);
 8009798:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800979c:	f002 fd55 	bl	800c24a <atoi>
 80097a0:	4603      	mov	r3, r0
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80097a8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	745a      	strb	r2, [r3, #17]
    free(pin_count_str);
 80097b0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80097b4:	f002 fd56 	bl	800c264 <free>
    
    // Find the second pipe separator
    int remaining_len = buf_length - (first_pipe - temp_buf + 1);
 80097b8:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 80097bc:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 80097c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097c4:	1acb      	subs	r3, r1, r3
 80097c6:	3301      	adds	r3, #1
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t *second_pipe = memchr(first_pipe + 1, '|', remaining_len);
 80097ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80097d2:	3301      	adds	r3, #1
 80097d4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80097d8:	217c      	movs	r1, #124	@ 0x7c
 80097da:	4618      	mov	r0, r3
 80097dc:	f004 fe3f 	bl	800e45e <memchr>
 80097e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (!second_pipe) return;
 80097e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 80ad 	beq.w	8009948 <get_data_testing_ic+0x374>
    
    // Extract test count
    int test_count_len = second_pipe - (first_pipe + 1);
 80097ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80097f2:	3301      	adds	r3, #1
 80097f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    char* test_count_str = malloc(test_count_len + 1);
 80097fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009802:	3301      	adds	r3, #1
 8009804:	4618      	mov	r0, r3
 8009806:	f002 fd25 	bl	800c254 <malloc>
 800980a:	4603      	mov	r3, r0
 800980c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    strncpy(test_count_str, first_pipe + 1, test_count_len);
 8009810:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009814:	3301      	adds	r3, #1
 8009816:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800981a:	4619      	mov	r1, r3
 800981c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8009820:	f004 fd7b 	bl	800e31a <strncpy>
    test_count_str[test_count_len] = '\0';
 8009824:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009828:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800982c:	4413      	add	r3, r2
 800982e:	2200      	movs	r2, #0
 8009830:	701a      	strb	r2, [r3, #0]
    pdata_test->num_case= atoi(test_count_str);
 8009832:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8009836:	f002 fd08 	bl	800c24a <atoi>
 800983a:	4603      	mov	r3, r0
 800983c:	b2da      	uxtb	r2, r3
 800983e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009842:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	741a      	strb	r2, [r3, #16]
    free(test_count_str);
 800984a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800984e:	f002 fd09 	bl	800c264 <free>
    
    // Find the third pipe separator using memchr (searches through \0)
    remaining_len = buf_length - (second_pipe - temp_buf + 1);
 8009852:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 8009856:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800985a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800985e:	1acb      	subs	r3, r1, r3
 8009860:	3301      	adds	r3, #1
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t *third_pipe = memchr(second_pipe + 1, '|', remaining_len);
 8009868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800986c:	3301      	adds	r3, #1
 800986e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009872:	217c      	movs	r1, #124	@ 0x7c
 8009874:	4618      	mov	r0, r3
 8009876:	f004 fdf2 	bl	800e45e <memchr>
 800987a:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    if (!third_pipe) return;
 800987e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009882:	2b00      	cmp	r3, #0
 8009884:	d062      	beq.n	800994c <get_data_testing_ic+0x378>
    
    // Extract pin data (between second and third pipe)
    int pin_data_len = third_pipe - (second_pipe + 1);
 8009886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800988a:	3301      	adds	r3, #1
 800988c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    pdata_test->data_pin = malloc(pin_data_len);
 8009896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989a:	4618      	mov	r0, r3
 800989c:	f002 fcda 	bl	800c254 <malloc>
 80098a0:	4603      	mov	r3, r0
 80098a2:	461a      	mov	r2, r3
 80098a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098a8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	615a      	str	r2, [r3, #20]
    memcpy(pdata_test->data_pin, second_pipe + 1, pin_data_len);
 80098b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098b4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6958      	ldr	r0, [r3, #20]
 80098bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c0:	3301      	adds	r3, #1
 80098c2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80098c6:	4619      	mov	r1, r3
 80098c8:	f004 fdd7 	bl	800e47a <memcpy>
    pdata_test->data_pin_len = pin_data_len;
 80098cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	831a      	strh	r2, [r3, #24]
    
    // Extract test data (after third pipe)
    uint8_t *test_start = third_pipe + 1;
 80098de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80098e2:	3301      	adds	r3, #1
 80098e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    int test_data_len = buf_length - (test_start - temp_buf);
 80098e8:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 80098ec:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 80098f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098f4:	1acb      	subs	r3, r1, r3
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    pdata_test->data_test = malloc(test_data_len);
 80098fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009900:	4618      	mov	r0, r3
 8009902:	f002 fca7 	bl	800c254 <malloc>
 8009906:	4603      	mov	r3, r0
 8009908:	461a      	mov	r2, r3
 800990a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800990e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	61da      	str	r2, [r3, #28]
    memcpy(pdata_test->data_test, test_start, test_data_len);
 8009916:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800991a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8009926:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800992a:	4618      	mov	r0, r3
 800992c:	f004 fda5 	bl	800e47a <memcpy>
    pdata_test->data_test_len = test_data_len;
 8009930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009934:	b29a      	uxth	r2, r3
 8009936:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800993a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	841a      	strh	r2, [r3, #32]
 8009942:	e004      	b.n	800994e <get_data_testing_ic+0x37a>
    if (!first_pipe) return;
 8009944:	bf00      	nop
 8009946:	e002      	b.n	800994e <get_data_testing_ic+0x37a>
    if (!second_pipe) return;
 8009948:	bf00      	nop
 800994a:	e000      	b.n	800994e <get_data_testing_ic+0x37a>
    if (!third_pipe) return;
 800994c:	bf00      	nop

//    uint8_t array_buf[200];
//    memcpy(array_buf,pdata_test->data_pin,pin_data_len);
//    uint8_t array_buf2[200];
//    memcpy(array_buf2,pdata_test->data_test,test_data_len);
}
 800994e:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009952:	46bd      	mov	sp, r7
 8009954:	bd90      	pop	{r4, r7, pc}
 8009956:	bf00      	nop
 8009958:	20000a9c 	.word	0x20000a9c
 800995c:	08010d24 	.word	0x08010d24

08009960 <show_main_page>:

void show_main_page(Screen_t *const screen_obj, uint8_t PageMain, uint8_t curr_program) {
 8009960:	b590      	push	{r4, r7, lr}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
 800996c:	4613      	mov	r3, r2
 800996e:	70bb      	strb	r3, [r7, #2]
    switch (PageMain) {
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	3b64      	subs	r3, #100	@ 0x64
 8009974:	2b0b      	cmp	r3, #11
 8009976:	f200 809f 	bhi.w	8009ab8 <show_main_page+0x158>
 800997a:	a201      	add	r2, pc, #4	@ (adr r2, 8009980 <show_main_page+0x20>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	08009a2f 	.word	0x08009a2f
 8009984:	080099b1 	.word	0x080099b1
 8009988:	08009ab3 	.word	0x08009ab3
 800998c:	08009ab9 	.word	0x08009ab9
 8009990:	08009ab9 	.word	0x08009ab9
 8009994:	08009ab9 	.word	0x08009ab9
 8009998:	08009ab9 	.word	0x08009ab9
 800999c:	08009ab9 	.word	0x08009ab9
 80099a0:	08009ab9 	.word	0x08009ab9
 80099a4:	08009ab9 	.word	0x08009ab9
 80099a8:	08009ab9 	.word	0x08009ab9
 80099ac:	08009ab3 	.word	0x08009ab3
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 80099b6:	4619      	mov	r1, r3
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	460b      	mov	r3, r1
 80099bc:	00db      	lsls	r3, r3, #3
 80099be:	1a5b      	subs	r3, r3, r1
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	334c      	adds	r3, #76	@ 0x4c
 80099c6:	681c      	ldr	r4, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 80099ce:	4619      	mov	r1, r3
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	1a5b      	subs	r3, r3, r1
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	334c      	adds	r3, #76	@ 0x4c
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7f6 fbbf 	bl	8000164 <strlen>
 80099e6:	4603      	mov	r3, r0
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	4622      	mov	r2, r4
 80099ec:	f249 3150 	movw	r1, #37712	@ 0x9350
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f001 fac5 	bl	800af80 <DWIN_SetText>
            DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 80099fc:	4619      	mov	r1, r3
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	1a5b      	subs	r3, r3, r1
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	334b      	adds	r3, #75	@ 0x4b
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 fb35 	bl	800b084 <DWIN_SetVariable_Icon>
            Screen_ShowData_Mainpage(screen_obj,curr_program);
 8009a1a:	78bb      	ldrb	r3, [r7, #2]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff fcf2 	bl	8009408 <Screen_ShowData_Mainpage>

            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN);
 8009a24:	2165      	movs	r1, #101	@ 0x65
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f001 fa83 	bl	800af32 <DWIN_SetPage>
        } break;
 8009a2c:	e044      	b.n	8009ab8 <show_main_page+0x158>
        case DWINPAGE_MAIN_FINISH: {
            /* Show data */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8009a34:	4619      	mov	r1, r3
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	1a5b      	subs	r3, r3, r1
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	334c      	adds	r3, #76	@ 0x4c
 8009a44:	681c      	ldr	r4, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	1a5b      	subs	r3, r3, r1
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	334c      	adds	r3, #76	@ 0x4c
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7f6 fb80 	bl	8000164 <strlen>
 8009a64:	4603      	mov	r3, r0
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	4622      	mov	r2, r4
 8009a6a:	f249 3150 	movw	r1, #37712	@ 0x9350
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f001 fa86 	bl	800af80 <DWIN_SetText>
            show_text_short_circuit((Dwin_t *)screen_obj);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f8e7 	bl	8009c48 <show_text_short_circuit>
            /* change page if home page */
            if (screen_obj->Ishome) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d018      	beq.n	8009ab6 <show_main_page+0x156>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	1a5b      	subs	r3, r3, r1
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	334b      	adds	r3, #75	@ 0x4b
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f001 faee 	bl	800b084 <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_FINISH);
 8009aa8:	2164      	movs	r1, #100	@ 0x64
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 fa41 	bl	800af32 <DWIN_SetPage>
            }
        } break;
 8009ab0:	e001      	b.n	8009ab6 <show_main_page+0x156>
        case DWINPAGE_MAIN_DETAIL: {

        } break;
 8009ab2:	bf00      	nop
 8009ab4:	e000      	b.n	8009ab8 <show_main_page+0x158>
        } break;
 8009ab6:	bf00      	nop
        case DWINPAGE_MAIN_GRAPH: {

        } break;
    }
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd90      	pop	{r4, r7, pc}

08009ac0 <get_data_testing_finish>:

void get_data_testing_finish(Screen_t *const screen_obj,uint8_t device, uint8_t *result_array) {
 8009ac0:	b590      	push	{r4, r7, lr}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	72fb      	strb	r3, [r7, #11]
    uint8_t index_program = screen_obj->IC_Testerx[device].selected_Program_Index;
 8009ace:	7afb      	ldrb	r3, [r7, #11]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	1a5b      	subs	r3, r3, r1
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	334a      	adds	r3, #74	@ 0x4a
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	75fb      	strb	r3, [r7, #23]
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 8009ae4:	7dfa      	ldrb	r2, [r7, #23]
 8009ae6:	68f9      	ldr	r1, [r7, #12]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	00db      	lsls	r3, r3, #3
 8009aec:	4413      	add	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	440b      	add	r3, r1
 8009af2:	33ad      	adds	r3, #173	@ 0xad
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	75bb      	strb	r3, [r7, #22]
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 8009af8:	7dfa      	ldrb	r2, [r7, #23]
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	4613      	mov	r3, r2
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	4413      	add	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	440b      	add	r3, r1
 8009b06:	33ac      	adds	r3, #172	@ 0xac
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	757b      	strb	r3, [r7, #21]
    /* get data test */
    if (screen_obj->IC_Testerx[device].data_result != NULL) {
 8009b0c:	7afb      	ldrb	r3, [r7, #11]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	460b      	mov	r3, r1
 8009b14:	00db      	lsls	r3, r3, #3
 8009b16:	1a5b      	subs	r3, r3, r1
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	3354      	adds	r3, #84	@ 0x54
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00c      	beq.n	8009b3e <get_data_testing_finish+0x7e>
        free(screen_obj->IC_Testerx[device].data_result);
 8009b24:	7afb      	ldrb	r3, [r7, #11]
 8009b26:	4619      	mov	r1, r3
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	00db      	lsls	r3, r3, #3
 8009b2e:	1a5b      	subs	r3, r3, r1
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	3354      	adds	r3, #84	@ 0x54
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f002 fb93 	bl	800c264 <free>
    }
    screen_obj->IC_Testerx[device].data_result = malloc(num_case * num_pin);
 8009b3e:	7d7b      	ldrb	r3, [r7, #21]
 8009b40:	7dba      	ldrb	r2, [r7, #22]
 8009b42:	fb02 f303 	mul.w	r3, r2, r3
 8009b46:	461a      	mov	r2, r3
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	461c      	mov	r4, r3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f002 fb81 	bl	800c254 <malloc>
 8009b52:	4603      	mov	r3, r0
 8009b54:	4619      	mov	r1, r3
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	4623      	mov	r3, r4
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	1b1b      	subs	r3, r3, r4
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4413      	add	r3, r2
 8009b62:	3354      	adds	r3, #84	@ 0x54
 8009b64:	6019      	str	r1, [r3, #0]
    memcpy(screen_obj->IC_Testerx[device].data_result,result_array,(num_case * num_pin));
 8009b66:	7afb      	ldrb	r3, [r7, #11]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	1a5b      	subs	r3, r3, r1
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	3354      	adds	r3, #84	@ 0x54
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	7d7b      	ldrb	r3, [r7, #21]
 8009b7c:	7dba      	ldrb	r2, [r7, #22]
 8009b7e:	fb02 f303 	mul.w	r3, r2, r3
 8009b82:	461a      	mov	r2, r3
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	f004 fc78 	bl	800e47a <memcpy>
    
    if (screen_obj->IC_Testerx[device].data_result_case != NULL) {
 8009b8a:	7afb      	ldrb	r3, [r7, #11]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	460b      	mov	r3, r1
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	1a5b      	subs	r3, r3, r1
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	335c      	adds	r3, #92	@ 0x5c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00c      	beq.n	8009bbc <get_data_testing_finish+0xfc>
        free(screen_obj->IC_Testerx[device].data_result_case);
 8009ba2:	7afb      	ldrb	r3, [r7, #11]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	1a5b      	subs	r3, r3, r1
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	335c      	adds	r3, #92	@ 0x5c
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f002 fb54 	bl	800c264 <free>
    }
    screen_obj->IC_Testerx[device].data_result_case = malloc(num_case);
 8009bbc:	7d7b      	ldrb	r3, [r7, #21]
 8009bbe:	7afa      	ldrb	r2, [r7, #11]
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 fb46 	bl	800c254 <malloc>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	4619      	mov	r1, r3
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	4623      	mov	r3, r4
 8009bd0:	00db      	lsls	r3, r3, #3
 8009bd2:	1b1b      	subs	r3, r3, r4
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	335c      	adds	r3, #92	@ 0x5c
 8009bda:	6019      	str	r1, [r3, #0]
    memcpy(screen_obj->IC_Testerx[device].data_result_case,result_array + (num_case * num_pin + 1) ,num_case);
 8009bdc:	7afb      	ldrb	r3, [r7, #11]
 8009bde:	4619      	mov	r1, r3
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	460b      	mov	r3, r1
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	1a5b      	subs	r3, r3, r1
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	335c      	adds	r3, #92	@ 0x5c
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	7d7b      	ldrb	r3, [r7, #21]
 8009bf2:	7dba      	ldrb	r2, [r7, #22]
 8009bf4:	fb02 f303 	mul.w	r3, r2, r3
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	7d7a      	ldrb	r2, [r7, #21]
 8009c00:	4619      	mov	r1, r3
 8009c02:	f004 fc3a 	bl	800e47a <memcpy>

    screen_obj->IC_Testerx[device].curr_PageMain = DWINPAGE_MAIN_FINISH;
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	1a5b      	subs	r3, r3, r1
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	3349      	adds	r3, #73	@ 0x49
 8009c18:	2264      	movs	r2, #100	@ 0x64
 8009c1a:	701a      	strb	r2, [r3, #0]
    uint8_t *device_finish = malloc(sizeof(uint8_t));
 8009c1c:	2001      	movs	r0, #1
 8009c1e:	f002 fb19 	bl	800c254 <malloc>
 8009c22:	4603      	mov	r3, r0
 8009c24:	613b      	str	r3, [r7, #16]
    memcpy(device_finish,&device,sizeof(uint8_t));
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	7afa      	ldrb	r2, [r7, #11]
 8009c2a:	701a      	strb	r2, [r3, #0]

    OS_task_post_event(AO_task_screen,DEIVCE_TEST_FINISH,(uint8_t *)&device_finish,sizeof(uint8_t *));
 8009c2c:	4b05      	ldr	r3, [pc, #20]	@ (8009c44 <get_data_testing_finish+0x184>)
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	f107 0210 	add.w	r2, r7, #16
 8009c34:	2304      	movs	r3, #4
 8009c36:	2100      	movs	r1, #0
 8009c38:	f002 f8da 	bl	800bdf0 <OS_task_post_event>
//    uint8_t buffer[500];
//    memcpy(buffer,screen_obj->IC_Testerx[device].data_result,num_case * num_pin);
//    memcpy(buffer,screen_obj->IC_Testerx[device].data_result_case,num_case);

    
}
 8009c3c:	bf00      	nop
 8009c3e:	371c      	adds	r7, #28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd90      	pop	{r4, r7, pc}
 8009c44:	080111e0 	.word	0x080111e0

08009c48 <show_text_short_circuit>:

void show_text_short_circuit(Screen_t *const screen_obj) {
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	b0a3      	sub	sp, #140	@ 0x8c
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	466b      	mov	r3, sp
 8009c54:	461e      	mov	r6, r3
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 316d 	ldrb.w	r3, [r3, #365]	@ 0x16d
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	1a5b      	subs	r3, r3, r1
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	334a      	adds	r3, #74	@ 0x4a
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 8009c72:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	00db      	lsls	r3, r3, #3
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	440b      	add	r3, r1
 8009c82:	33ad      	adds	r3, #173	@ 0xad
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 8009c8a:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	4613      	mov	r3, r2
 8009c92:	00db      	lsls	r3, r3, #3
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	440b      	add	r3, r1
 8009c9a:	33ac      	adds	r3, #172	@ 0xac
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    char short_text[30] = "Pin Short to GND/VDD: ";
 8009ca2:	4b71      	ldr	r3, [pc, #452]	@ (8009e68 <show_text_short_circuit+0x220>)
 8009ca4:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8009ca8:	461d      	mov	r5, r3
 8009caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009cb2:	6020      	str	r0, [r4, #0]
 8009cb4:	3404      	adds	r4, #4
 8009cb6:	8021      	strh	r1, [r4, #0]
 8009cb8:	3402      	adds	r4, #2
 8009cba:	0c0b      	lsrs	r3, r1, #16
 8009cbc:	7023      	strb	r3, [r4, #0]
 8009cbe:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	f8c3 2003 	str.w	r2, [r3, #3]
    
    uint8_t test_short[20] = {'1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1'};
 8009cca:	4b68      	ldr	r3, [pc, #416]	@ (8009e6c <show_text_short_circuit+0x224>)
 8009ccc:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8009cd0:	461d      	mov	r5, r3
 8009cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cd6:	682b      	ldr	r3, [r5, #0]
 8009cd8:	7023      	strb	r3, [r4, #0]
 8009cda:	f107 0351 	add.w	r3, r7, #81	@ 0x51
 8009cde:	2200      	movs	r2, #0
 8009ce0:	801a      	strh	r2, [r3, #0]
 8009ce2:	709a      	strb	r2, [r3, #2]
    uint8_t shortPin[num_pin]; /* array store pin short */
 8009ce4:	f897 107e 	ldrb.w	r1, [r7, #126]	@ 0x7e
 8009ce8:	460b      	mov	r3, r1
 8009cea:	3b01      	subs	r3, #1
 8009cec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009cee:	b2cb      	uxtb	r3, r1
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	469a      	mov	sl, r3
 8009cf4:	4693      	mov	fp, r2
 8009cf6:	f04f 0200 	mov.w	r2, #0
 8009cfa:	f04f 0300 	mov.w	r3, #0
 8009cfe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d0a:	b2cb      	uxtb	r3, r1
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	4698      	mov	r8, r3
 8009d10:	4691      	mov	r9, r2
 8009d12:	f04f 0200 	mov.w	r2, #0
 8009d16:	f04f 0300 	mov.w	r3, #0
 8009d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d26:	460b      	mov	r3, r1
 8009d28:	3307      	adds	r3, #7
 8009d2a:	08db      	lsrs	r3, r3, #3
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	ebad 0d03 	sub.w	sp, sp, r3
 8009d32:	466b      	mov	r3, sp
 8009d34:	3300      	adds	r3, #0
 8009d36:	677b      	str	r3, [r7, #116]	@ 0x74
    uint8_t shortCount = 0;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    for (uint8_t i = 0; i < num_pin; i++) {
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8009d44:	e019      	b.n	8009d7a <show_text_short_circuit+0x132>
        if (test_short[i] == '0') {
 8009d46:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8009d4a:	3388      	adds	r3, #136	@ 0x88
 8009d4c:	443b      	add	r3, r7
 8009d4e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8009d52:	2b30      	cmp	r3, #48	@ 0x30
 8009d54:	d10c      	bne.n	8009d70 <show_text_short_circuit+0x128>
            shortPin[shortCount] = i + 1;
 8009d56:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009d5a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8009d5e:	3201      	adds	r2, #1
 8009d60:	b2d1      	uxtb	r1, r2
 8009d62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009d64:	54d1      	strb	r1, [r2, r3]
            shortCount++;
 8009d66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    for (uint8_t i = 0; i < num_pin; i++) {
 8009d70:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8009d74:	3301      	adds	r3, #1
 8009d76:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8009d7a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8009d7e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d3df      	bcc.n	8009d46 <show_text_short_circuit+0xfe>
        }
    }

    if (shortCount == 0) {
 8009d86:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d11d      	bne.n	8009dca <show_text_short_circuit+0x182>
        strcat(short_text,"None");
 8009d8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f6 f9e6 	bl	8000164 <strlen>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009da0:	4413      	add	r3, r2
 8009da2:	4a33      	ldr	r2, [pc, #204]	@ (8009e70 <show_text_short_circuit+0x228>)
 8009da4:	6810      	ldr	r0, [r2, #0]
 8009da6:	6018      	str	r0, [r3, #0]
 8009da8:	7912      	ldrb	r2, [r2, #4]
 8009daa:	711a      	strb	r2, [r3, #4]
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 8009dac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7f6 f9d7 	bl	8000164 <strlen>
 8009db6:	4603      	mov	r3, r0
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8009dbe:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 f8dc 	bl	800af80 <DWIN_SetText>
 8009dc8:	e048      	b.n	8009e5c <show_text_short_circuit+0x214>
    } else {
        char tempStr[50];
        for (int i = 0; i < shortCount; i++) {
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009dd0:	e030      	b.n	8009e34 <show_text_short_circuit+0x1ec>
            sprintf(tempStr, "Pin %d", (test_short[i] - '0'));
 8009dd2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009dda:	4413      	add	r3, r2
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8009de2:	f107 030c 	add.w	r3, r7, #12
 8009de6:	4923      	ldr	r1, [pc, #140]	@ (8009e74 <show_text_short_circuit+0x22c>)
 8009de8:	4618      	mov	r0, r3
 8009dea:	f004 f963 	bl	800e0b4 <siprintf>
            strcat(short_text, tempStr);
 8009dee:	f107 020c 	add.w	r2, r7, #12
 8009df2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f004 fa6d 	bl	800e2d8 <strcat>
            if (i < shortCount - 1) {
 8009dfe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009e02:	3b01      	subs	r3, #1
 8009e04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	da0e      	bge.n	8009e2a <show_text_short_circuit+0x1e2>
                strcat(short_text, ", ");
 8009e0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7f6 f9a7 	bl	8000164 <strlen>
 8009e16:	4603      	mov	r3, r0
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009e1e:	4413      	add	r3, r2
 8009e20:	4a15      	ldr	r2, [pc, #84]	@ (8009e78 <show_text_short_circuit+0x230>)
 8009e22:	8811      	ldrh	r1, [r2, #0]
 8009e24:	7892      	ldrb	r2, [r2, #2]
 8009e26:	8019      	strh	r1, [r3, #0]
 8009e28:	709a      	strb	r2, [r3, #2]
        for (int i = 0; i < shortCount; i++) {
 8009e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009e2e:	3301      	adds	r3, #1
 8009e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e34:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8009e38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	dbc8      	blt.n	8009dd2 <show_text_short_circuit+0x18a>
            }
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 8009e40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7f6 f98d 	bl	8000164 <strlen>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8009e52:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 f892 	bl	800af80 <DWIN_SetText>
 8009e5c:	46b5      	mov	sp, r6
    }
 8009e5e:	bf00      	nop
 8009e60:	378c      	adds	r7, #140	@ 0x8c
 8009e62:	46bd      	mov	sp, r7
 8009e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e68:	08010d54 	.word	0x08010d54
 8009e6c:	08010d74 	.word	0x08010d74
 8009e70:	08010d40 	.word	0x08010d40
 8009e74:	08010d48 	.word	0x08010d48
 8009e78:	08010d50 	.word	0x08010d50

08009e7c <eeprom_task_init>:

AT24Cxx_t eeprom_ob;
static write_param_t *write_buf[MAX_WRITE_EEPROM_BUF]; /* buffer store the data write */

/* I2C port using for eeprom */
void eeprom_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	70fb      	strb	r3, [r7, #3]
//    eeprom_ob.i2c_port = i2c_port;
//    eeprom_ob.dev_address = dev_address;
	char text_program_1[] = "0";
 8009e88:	2330      	movs	r3, #48	@ 0x30
 8009e8a:	81bb      	strh	r3, [r7, #12]
    /* init eeprom */
    if (AT24Cxx_Init(&eeprom_ob,dev_address,i2c_port) == AT24Cxx_Init_OK) {
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	4619      	mov	r1, r3
 8009e92:	482b      	ldr	r0, [pc, #172]	@ (8009f40 <eeprom_task_init+0xc4>)
 8009e94:	f000 fe42 	bl	800ab1c <AT24Cxx_Init>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d103      	bne.n	8009ea6 <eeprom_task_init+0x2a>
        /* init success */
        printf("Init eeprom success!!\n");
 8009e9e:	4829      	ldr	r0, [pc, #164]	@ (8009f44 <eeprom_task_init+0xc8>)
 8009ea0:	f004 f8ca 	bl	800e038 <puts>
 8009ea4:	e002      	b.n	8009eac <eeprom_task_init+0x30>
    } else {
        printf("Init eeprom fail!!\n");
 8009ea6:	4828      	ldr	r0, [pc, #160]	@ (8009f48 <eeprom_task_init+0xcc>)
 8009ea8:	f004 f8c6 	bl	800e038 <puts>
    }

      uint8_t data_check = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	72fb      	strb	r3, [r7, #11]
    // AT24Cxx_read_buffer(&eeprom_ob,MEM_ADDR_CHECK_UPDATA_DATA_TEST,&data_check,1);
    // if (data_check == 0) {
    // } 
     AT24Cxx_write_buffer_bloking(&eeprom_ob,START_MEM_ADDR_DIREC_USED,(uint8_t *)&data_check,sizeof(data_check));
 8009eb0:	f107 020b 	add.w	r2, r7, #11
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8009eba:	4821      	ldr	r0, [pc, #132]	@ (8009f40 <eeprom_task_init+0xc4>)
 8009ebc:	f000 fe78 	bl	800abb0 <AT24Cxx_write_buffer_bloking>
     HAL_Delay(10);
 8009ec0:	200a      	movs	r0, #10
 8009ec2:	f7f8 fa95 	bl	80023f0 <HAL_Delay>
     write_data_test_ic("744051",data_744051,sizeof(data_744051));
 8009ec6:	22c4      	movs	r2, #196	@ 0xc4
 8009ec8:	4920      	ldr	r1, [pc, #128]	@ (8009f4c <eeprom_task_init+0xd0>)
 8009eca:	4821      	ldr	r0, [pc, #132]	@ (8009f50 <eeprom_task_init+0xd4>)
 8009ecc:	f000 fa78 	bl	800a3c0 <write_data_test_ic>
    //  write_data_test_ic("7400",data_7400,sizeof(data_7400));
    //  write_data_test_ic("74139",data_74139,sizeof(data_74139));

    AT24Cxx_write_buffer(&eeprom_ob,0x02,(uint8_t *)text_program_1,strlen(text_program_1));
 8009ed0:	f107 030c 	add.w	r3, r7, #12
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7f6 f945 	bl	8000164 <strlen>
 8009eda:	4603      	mov	r3, r0
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f107 020c 	add.w	r2, r7, #12
 8009ee2:	2102      	movs	r1, #2
 8009ee4:	4816      	ldr	r0, [pc, #88]	@ (8009f40 <eeprom_task_init+0xc4>)
 8009ee6:	f000 fe3b 	bl	800ab60 <AT24Cxx_write_buffer>
    /* check write data test */


    // AT24Cxx_write_buffer(&eeprom_ob,MEM_ADDR_CHECK_UPDATA_DATA_TEST,&data_check,1);

    eeprom_instance.b_is_writing = false;
 8009eea:	4b1a      	ldr	r3, [pc, #104]	@ (8009f54 <eeprom_task_init+0xd8>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    eeprom_instance.data_eeprom.mem_addr = 0x00;
 8009ef2:	4b18      	ldr	r3, [pc, #96]	@ (8009f54 <eeprom_task_init+0xd8>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
    eeprom_instance.data_eeprom.data = (uint8_t *)0;
 8009efa:	4b16      	ldr	r3, [pc, #88]	@ (8009f54 <eeprom_task_init+0xd8>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = 0;
 8009f02:	4b14      	ldr	r3, [pc, #80]	@ (8009f54 <eeprom_task_init+0xd8>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc

    eeprom_instance.write_params_buf = write_buf;
 8009f0a:	4b12      	ldr	r3, [pc, #72]	@ (8009f54 <eeprom_task_init+0xd8>)
 8009f0c:	4a12      	ldr	r2, [pc, #72]	@ (8009f58 <eeprom_task_init+0xdc>)
 8009f0e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    eeprom_instance.head_index = 0;
 8009f12:	4b10      	ldr	r3, [pc, #64]	@ (8009f54 <eeprom_task_init+0xd8>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    eeprom_instance.tail_index = 0;
 8009f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f54 <eeprom_task_init+0xd8>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    eeprom_instance.end = MAX_WRITE_EEPROM_BUF - 1;
 8009f22:	4b0c      	ldr	r3, [pc, #48]	@ (8009f54 <eeprom_task_init+0xd8>)
 8009f24:	2209      	movs	r2, #9
 8009f26:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
    eeprom_instance.nUsed = 0;
 8009f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f54 <eeprom_task_init+0xd8>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6

    eeprom_ctor(&eeprom_instance);
 8009f32:	4808      	ldr	r0, [pc, #32]	@ (8009f54 <eeprom_task_init+0xd8>)
 8009f34:	f000 f812 	bl	8009f5c <eeprom_ctor>
}
 8009f38:	bf00      	nop
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	20000a9c 	.word	0x20000a9c
 8009f44:	08010d88 	.word	0x08010d88
 8009f48:	08010da0 	.word	0x08010da0
 8009f4c:	08011114 	.word	0x08011114
 8009f50:	08010db4 	.word	0x08010db4
 8009f54:	200009c0 	.word	0x200009c0
 8009f58:	20000aa4 	.word	0x20000aa4

08009f5c <eeprom_ctor>:

void eeprom_ctor(app_eeprom *pAO) {
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
    /* init task */
    OS_task_init(AO_task_eeprom,(OS_handler)&eeprom_init,(OS_handler)&eeprom_dispatch);
 8009f64:	4b09      	ldr	r3, [pc, #36]	@ (8009f8c <eeprom_ctor+0x30>)
 8009f66:	4a0a      	ldr	r2, [pc, #40]	@ (8009f90 <eeprom_ctor+0x34>)
 8009f68:	490a      	ldr	r1, [pc, #40]	@ (8009f94 <eeprom_ctor+0x38>)
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f001 fe8e 	bl	800bc8c <OS_task_init>

    /* init time */
    OS_TimeEvt_init(&eeprom_instance.time_wait,FINISH_WRITE,&eeprom_instance.task);
 8009f70:	4a06      	ldr	r2, [pc, #24]	@ (8009f8c <eeprom_ctor+0x30>)
 8009f72:	2103      	movs	r1, #3
 8009f74:	4808      	ldr	r0, [pc, #32]	@ (8009f98 <eeprom_ctor+0x3c>)
 8009f76:	f001 ff59 	bl	800be2c <OS_TimeEvt_init>
    OS_TimeEvt_init(&eeprom_instance.time_check,CHECK_WRITE_BUF,&eeprom_instance.task);
 8009f7a:	4a04      	ldr	r2, [pc, #16]	@ (8009f8c <eeprom_ctor+0x30>)
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	4807      	ldr	r0, [pc, #28]	@ (8009f9c <eeprom_ctor+0x40>)
 8009f80:	f001 ff54 	bl	800be2c <OS_TimeEvt_init>
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	200009c0 	.word	0x200009c0
 8009f90:	0800a041 	.word	0x0800a041
 8009f94:	08009fa1 	.word	0x08009fa1
 8009f98:	200009dc 	.word	0x200009dc
 8009f9c:	20000a30 	.word	0x20000a30

08009fa0 <eeprom_init>:

static void eeprom_init(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
    /* init time */
    OS_TimeEvt_Stop(&eeprom_instance.time_check); /* don't using time when init */
 8009faa:	4821      	ldr	r0, [pc, #132]	@ (800a030 <eeprom_init+0x90>)
 8009fac:	f001 ff7b 	bl	800bea6 <OS_TimeEvt_Stop>
    OS_TimeEvt_Stop(&eeprom_instance.time_wait); 
 8009fb0:	4820      	ldr	r0, [pc, #128]	@ (800a034 <eeprom_init+0x94>)
 8009fb2:	f001 ff78 	bl	800bea6 <OS_TimeEvt_Stop>

    /* read data program run */
    eeprom_instance.data_eeprom.data = malloc(TOTAL_ALL_PROGRAM_TEST_LEN);
 8009fb6:	20a8      	movs	r0, #168	@ 0xa8
 8009fb8:	f002 f94c 	bl	800c254 <malloc>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	4b1d      	ldr	r3, [pc, #116]	@ (800a038 <eeprom_init+0x98>)
 8009fc2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = TOTAL_ALL_PROGRAM_TEST_LEN;
 8009fc6:	4b1c      	ldr	r3, [pc, #112]	@ (800a038 <eeprom_init+0x98>)
 8009fc8:	22a8      	movs	r2, #168	@ 0xa8
 8009fca:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),
 8009fce:	4b1a      	ldr	r3, [pc, #104]	@ (800a038 <eeprom_init+0x98>)
 8009fd0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8009fd4:	23a8      	movs	r3, #168	@ 0xa8
 8009fd6:	2143      	movs	r1, #67	@ 0x43
 8009fd8:	4818      	ldr	r0, [pc, #96]	@ (800a03c <eeprom_init+0x9c>)
 8009fda:	f000 fee9 	bl	800adb0 <AT24Cxx_read_buffer>
                        eeprom_instance.data_eeprom.data,TOTAL_ALL_PROGRAM_TEST_LEN);

    data_eeprom_t *data_eeprom_read = (data_eeprom_t *)malloc(sizeof(data_eeprom_t));
 8009fde:	200c      	movs	r0, #12
 8009fe0:	f002 f938 	bl	800c254 <malloc>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	60fb      	str	r3, [r7, #12]
    data_eeprom_read->data_len = eeprom_instance.data_eeprom.data_len;
 8009fe8:	4b13      	ldr	r3, [pc, #76]	@ (800a038 <eeprom_init+0x98>)
 8009fea:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	811a      	strh	r2, [r3, #8]
    data_eeprom_read->data = (uint8_t *)malloc(eeprom_instance.data_eeprom.data_len);
 8009ff2:	4b11      	ldr	r3, [pc, #68]	@ (800a038 <eeprom_init+0x98>)
 8009ff4:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f002 f92b 	bl	800c254 <malloc>
 8009ffe:	4603      	mov	r3, r0
 800a000:	461a      	mov	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	605a      	str	r2, [r3, #4]
    memcpy(data_eeprom_read->data,eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	4a0b      	ldr	r2, [pc, #44]	@ (800a038 <eeprom_init+0x98>)
 800a00c:	f8d2 10c8 	ldr.w	r1, [r2, #200]	@ 0xc8
 800a010:	4a09      	ldr	r2, [pc, #36]	@ (800a038 <eeprom_init+0x98>)
 800a012:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	@ 0xcc
 800a016:	4618      	mov	r0, r3
 800a018:	f004 fa2f 	bl	800e47a <memcpy>
    


    // OS_task_post_event(AO_BlinkyTest,READ_ALL_PROGRAM_TEST,(uint8_t *)&data_eeprom_read,sizeof(data_eeprom_t *));

    free(eeprom_instance.data_eeprom.data);
 800a01c:	4b06      	ldr	r3, [pc, #24]	@ (800a038 <eeprom_init+0x98>)
 800a01e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a022:	4618      	mov	r0, r3
 800a024:	f002 f91e 	bl	800c264 <free>

}
 800a028:	bf00      	nop
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20000a30 	.word	0x20000a30
 800a034:	200009dc 	.word	0x200009dc
 800a038:	200009c0 	.word	0x200009c0
 800a03c:	20000a9c 	.word	0x20000a9c

0800a040 <eeprom_dispatch>:

void eeprom_dispatch(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	2b05      	cmp	r3, #5
 800a050:	f200 8167 	bhi.w	800a322 <eeprom_dispatch+0x2e2>
 800a054:	a201      	add	r2, pc, #4	@ (adr r2, 800a05c <eeprom_dispatch+0x1c>)
 800a056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05a:	bf00      	nop
 800a05c:	0800a19f 	.word	0x0800a19f
 800a060:	0800a323 	.word	0x0800a323
 800a064:	0800a2f3 	.word	0x0800a2f3
 800a068:	0800a1ef 	.word	0x0800a1ef
 800a06c:	0800a075 	.word	0x0800a075
 800a070:	0800a0cd 	.word	0x0800a0cd
        case READ_EEPROM : {
            data_eeprom_t *data_read = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800a074:	6838      	ldr	r0, [r7, #0]
 800a076:	f002 f8bc 	bl	800c1f2 <get_data_dynamic_event>
 800a07a:	4603      	mov	r3, r0
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	60fb      	str	r3, [r7, #12]
            eeprom_instance.data_eeprom.data = malloc(data_read->data_len);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	891b      	ldrh	r3, [r3, #8]
 800a084:	4618      	mov	r0, r3
 800a086:	f002 f8e5 	bl	800c254 <malloc>
 800a08a:	4603      	mov	r3, r0
 800a08c:	461a      	mov	r2, r3
 800a08e:	4ba9      	ldr	r3, [pc, #676]	@ (800a334 <eeprom_dispatch+0x2f4>)
 800a090:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            AT24Cxx_read_buffer(&eeprom_ob,data_read->mem_addr,
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	8819      	ldrh	r1, [r3, #0]
 800a098:	4ba6      	ldr	r3, [pc, #664]	@ (800a334 <eeprom_dispatch+0x2f4>)
 800a09a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800a09e:	4ba5      	ldr	r3, [pc, #660]	@ (800a334 <eeprom_dispatch+0x2f4>)
 800a0a0:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800a0a4:	48a4      	ldr	r0, [pc, #656]	@ (800a338 <eeprom_dispatch+0x2f8>)
 800a0a6:	f000 fe83 	bl	800adb0 <AT24Cxx_read_buffer>
                                eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
            printf("Data read eeprom : %s\n",eeprom_instance.data_eeprom.data);
 800a0aa:	4ba2      	ldr	r3, [pc, #648]	@ (800a334 <eeprom_dispatch+0x2f4>)
 800a0ac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	48a2      	ldr	r0, [pc, #648]	@ (800a33c <eeprom_dispatch+0x2fc>)
 800a0b4:	f003 ff58 	bl	800df68 <iprintf>
            free(eeprom_instance.data_eeprom.data);
 800a0b8:	4b9e      	ldr	r3, [pc, #632]	@ (800a334 <eeprom_dispatch+0x2f4>)
 800a0ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f002 f8d0 	bl	800c264 <free>
            free(data_read);
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f002 f8cd 	bl	800c264 <free>
            
        } break;
 800a0ca:	e12f      	b.n	800a32c <eeprom_dispatch+0x2ec>
        case WRITE_EEPROM : {
            data_eeprom_t *data_receive = (data_eeprom_t *)(get_data_dynamic_event(pEvent));
 800a0cc:	6838      	ldr	r0, [r7, #0]
 800a0ce:	f002 f890 	bl	800c1f2 <get_data_dynamic_event>
 800a0d2:	6178      	str	r0, [r7, #20]
            write_param_t *e_write = (write_param_t *)malloc(sizeof(write_param_t));
 800a0d4:	2010      	movs	r0, #16
 800a0d6:	f002 f8bd 	bl	800c254 <malloc>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	613b      	str	r3, [r7, #16]
            // e_write->byte_first_page = AT24C256_PG_SIZE - data_receive->mem_addr % AT24C256_PG_SIZE;
            // e_write->page_write = (data_receive->data_len - e_write->byte_first_page) / AT24C256_PG_SIZE;
            // e_write->byte_remain = (data_receive->data_len - e_write->byte_first_page) % AT24C256_PG_SIZE;
            e_write->data_written = 0;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	815a      	strh	r2, [r3, #10]
            e_write->data_lastlen = 0;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	819a      	strh	r2, [r3, #12]
            e_write->mem_addr = data_receive->mem_addr;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	881a      	ldrh	r2, [r3, #0]
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	801a      	strh	r2, [r3, #0]
            e_write->data_len = data_receive->data_len;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	891a      	ldrh	r2, [r3, #8]
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	811a      	strh	r2, [r3, #8]
            e_write->data = (uint8_t *)malloc(data_receive->data_len);
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	891b      	ldrh	r3, [r3, #8]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f002 f8a8 	bl	800c254 <malloc>
 800a104:	4603      	mov	r3, r0
 800a106:	461a      	mov	r2, r3
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	605a      	str	r2, [r3, #4]
            memcpy(e_write->data,data_receive->data,data_receive->data_len);
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	6858      	ldr	r0, [r3, #4]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	6859      	ldr	r1, [r3, #4]
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	891b      	ldrh	r3, [r3, #8]
 800a118:	461a      	mov	r2, r3
 800a11a:	f004 f9ae 	bl	800e47a <memcpy>

            pOS_task->write_params_buf[pOS_task->head_index] = e_write; /* insert to buffer */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <eeprom_dispatch+0x10a>
                pOS_task->head_index = pOS_task->end;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
 800a148:	e007      	b.n	800a15a <eeprom_dispatch+0x11a>
            } else {
                --pOS_task->head_index;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800a150:	3b01      	subs	r3, #1
 800a152:	b2da      	uxtb	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
            }
            ++pOS_task->nUsed;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 800a160:	3301      	adds	r3, #1
 800a162:	b2da      	uxtb	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6

            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800a170:	f083 0301 	eor.w	r3, r3, #1
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 80d5 	beq.w	800a326 <eeprom_dispatch+0x2e6>
                pOS_task->b_is_writing = true;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f8d4 	bl	800a344 <write_buffer_with_task>
            }
        } break;
 800a19c:	e0c3      	b.n	800a326 <eeprom_dispatch+0x2e6>
        case WAIT_WRITE_TIMEOUT : {
            /* wait ~10ms for eeprom write complete */
            pOS_task->write_params_buf[pOS_task->tail_index]->data_written += pOS_task->write_params_buf[pOS_task->tail_index]->data_lastlen;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	8959      	ldrh	r1, [r3, #10]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	899a      	ldrh	r2, [r3, #12]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4403      	add	r3, r0
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	440a      	add	r2, r1
 800a1da:	b292      	uxth	r2, r2
 800a1dc:	815a      	strh	r2, [r3, #10]

            OS_TimeEvt_Set(&pOS_task->time_wait,11,0); /* run only 1 time */
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	331c      	adds	r3, #28
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	210b      	movs	r1, #11
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f001 fe46 	bl	800be78 <OS_TimeEvt_Set>
        } break;
 800a1ec:	e09e      	b.n	800a32c <eeprom_dispatch+0x2ec>
        case FINISH_WRITE : {
            if (pOS_task->write_params_buf[pOS_task->tail_index]->data_written < pOS_task->write_params_buf[pOS_task->tail_index]->data_len) {
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	895a      	ldrh	r2, [r3, #10]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	440b      	add	r3, r1
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	891b      	ldrh	r3, [r3, #8]
 800a216:	429a      	cmp	r2, r3
 800a218:	d20c      	bcs.n	800a234 <eeprom_dispatch+0x1f4>
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4413      	add	r3, r2
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 f889 	bl	800a344 <write_buffer_with_task>
                /* Check buf */
                if (pOS_task->nUsed > 0) {
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
                }
            }
        } break; 
 800a232:	e07a      	b.n	800a32a <eeprom_dispatch+0x2ea>
                printf("Write data to eeprom finish\n");
 800a234:	4842      	ldr	r0, [pc, #264]	@ (800a340 <eeprom_dispatch+0x300>)
 800a236:	f003 feff 	bl	800e038 <puts>
                if (pOS_task->write_params_buf[pOS_task->tail_index]->data != NULL) {
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00c      	beq.n	800a26c <eeprom_dispatch+0x22c>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]->data);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4413      	add	r3, r2
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	4618      	mov	r0, r3
 800a268:	f001 fffc 	bl	800c264 <free>
                if (pOS_task->write_params_buf[pOS_task->tail_index] != NULL) {
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <eeprom_dispatch+0x25a>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4618      	mov	r0, r3
 800a296:	f001 ffe5 	bl	800c264 <free>
                if (pOS_task->tail_index == 0) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <eeprom_dispatch+0x272>
                    pOS_task->tail_index = pOS_task->end;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
 800a2b0:	e007      	b.n	800a2c2 <eeprom_dispatch+0x282>
                    --pOS_task->tail_index;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
                --pOS_task->nUsed;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	b2da      	uxtb	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
                pOS_task->b_is_writing = false;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                if (pOS_task->nUsed > 0) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d022      	beq.n	800a32a <eeprom_dispatch+0x2ea>
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
 800a2e4:	4813      	ldr	r0, [pc, #76]	@ (800a334 <eeprom_dispatch+0x2f4>)
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2102      	movs	r1, #2
 800a2ec:	f001 fd80 	bl	800bdf0 <OS_task_post_event>
        } break; 
 800a2f0:	e01b      	b.n	800a32a <eeprom_dispatch+0x2ea>
        case WRITE_EEPROM_IN_BUF : {
            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800a2f8:	f083 0301 	eor.w	r3, r3, #1
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00f      	beq.n	800a322 <eeprom_dispatch+0x2e2>
                pOS_task->b_is_writing = true;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4413      	add	r3, r2
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 f811 	bl	800a344 <write_buffer_with_task>
            }
        }
        default : break;
 800a322:	bf00      	nop
 800a324:	e002      	b.n	800a32c <eeprom_dispatch+0x2ec>
        } break;
 800a326:	bf00      	nop
 800a328:	e000      	b.n	800a32c <eeprom_dispatch+0x2ec>
        } break; 
 800a32a:	bf00      	nop
    }
}
 800a32c:	bf00      	nop
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	200009c0 	.word	0x200009c0
 800a338:	20000a9c 	.word	0x20000a9c
 800a33c:	08010dbc 	.word	0x08010dbc
 800a340:	08010dd4 	.word	0x08010dd4

0800a344 <write_buffer_with_task>:

static void write_buffer_with_task(write_param_t *pWrite_params) {
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
    uint16_t byte_remain = pWrite_params->data_len - pWrite_params->data_written;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	891a      	ldrh	r2, [r3, #8]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	895b      	ldrh	r3, [r3, #10]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	81bb      	strh	r3, [r7, #12]
    uint8_t written_in_page = (pWrite_params->mem_addr + pWrite_params->data_written) % AT24C256_PG_SIZE;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	895b      	ldrh	r3, [r3, #10]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	4413      	add	r3, r2
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a36c:	72fb      	strb	r3, [r7, #11]
    uint8_t byte_in_page = AT24C256_PG_SIZE - written_in_page;
 800a36e:	7afb      	ldrb	r3, [r7, #11]
 800a370:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800a374:	72bb      	strb	r3, [r7, #10]
    uint16_t addr_write = pWrite_params->mem_addr + pWrite_params->data_written;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	881a      	ldrh	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	895b      	ldrh	r3, [r3, #10]
 800a37e:	4413      	add	r3, r2
 800a380:	813b      	strh	r3, [r7, #8]
    uint8_t len_write;
    if (byte_remain < byte_in_page) {
 800a382:	7abb      	ldrb	r3, [r7, #10]
 800a384:	b29b      	uxth	r3, r3
 800a386:	89ba      	ldrh	r2, [r7, #12]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d202      	bcs.n	800a392 <write_buffer_with_task+0x4e>
        len_write = byte_remain;
 800a38c:	89bb      	ldrh	r3, [r7, #12]
 800a38e:	73fb      	strb	r3, [r7, #15]
 800a390:	e001      	b.n	800a396 <write_buffer_with_task+0x52>
    } else {
        len_write = byte_in_page;
 800a392:	7abb      	ldrb	r3, [r7, #10]
 800a394:	73fb      	strb	r3, [r7, #15]
    }
    pWrite_params->data_lastlen = len_write;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
 800a398:	b29a      	uxth	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	819a      	strh	r2, [r3, #12]
    AT24Cxx_write_buffer(&eeprom_ob,addr_write,pWrite_params->data + pWrite_params->data_written,len_write);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	8952      	ldrh	r2, [r2, #10]
 800a3a6:	441a      	add	r2, r3
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	8939      	ldrh	r1, [r7, #8]
 800a3ae:	4803      	ldr	r0, [pc, #12]	@ (800a3bc <write_buffer_with_task+0x78>)
 800a3b0:	f000 fbd6 	bl	800ab60 <AT24Cxx_write_buffer>
}
 800a3b4:	bf00      	nop
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	20000a9c 	.word	0x20000a9c

0800a3c0 <write_data_test_ic>:

void write_data_test_ic(const char *icName, const char *Data, uint16_t len) {
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08c      	sub	sp, #48	@ 0x30
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	80fb      	strh	r3, [r7, #6]
    uint8_t num_direc = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	77fb      	strb	r3, [r7, #31]
    uint16_t dir_addr, data_addr;
    uint16_t mem_pre, len_pre;
    direc_EEPROM_t *Directory_pre;
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 800a3d2:	f107 021f 	add.w	r2, r7, #31
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800a3dc:	4840      	ldr	r0, [pc, #256]	@ (800a4e0 <write_data_test_ic+0x120>)
 800a3de:	f000 fce7 	bl	800adb0 <AT24Cxx_read_buffer>
    dir_addr = START_MEM_ADDR_DATA_DIREC + (num_direc * sizeof(direc_EEPROM_t));
 800a3e2:	7ffb      	ldrb	r3, [r7, #31]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	0052      	lsls	r2, r2, #1
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	f203 1343 	addw	r3, r3, #323	@ 0x143
 800a3f2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (num_direc == 0) { /* first */ 
 800a3f4:	7ffb      	ldrb	r3, [r7, #31]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d103      	bne.n	800a402 <write_data_test_ic+0x42>
        data_addr = START_MEM_ADDR_DATA_TEST ;
 800a3fa:	f44f 730d 	mov.w	r3, #564	@ 0x234
 800a3fe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a400:	e030      	b.n	800a464 <write_data_test_ic+0xa4>
    } else {
        uint8_t *temp_buf = (uint8_t *)malloc(sizeof(direc_EEPROM_t));
 800a402:	200c      	movs	r0, #12
 800a404:	f001 ff26 	bl	800c254 <malloc>
 800a408:	4603      	mov	r3, r0
 800a40a:	62bb      	str	r3, [r7, #40]	@ 0x28
        AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC + ((num_direc - 1) * sizeof(direc_EEPROM_t)),temp_buf,sizeof(direc_EEPROM_t));
 800a40c:	7ffb      	ldrb	r3, [r7, #31]
 800a40e:	3b01      	subs	r3, #1
 800a410:	b29b      	uxth	r3, r3
 800a412:	461a      	mov	r2, r3
 800a414:	0052      	lsls	r2, r2, #1
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	f203 1343 	addw	r3, r3, #323	@ 0x143
 800a420:	b299      	uxth	r1, r3
 800a422:	230c      	movs	r3, #12
 800a424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a426:	482e      	ldr	r0, [pc, #184]	@ (800a4e0 <write_data_test_ic+0x120>)
 800a428:	f000 fcc2 	bl	800adb0 <AT24Cxx_read_buffer>
        Directory_pre = (direc_EEPROM_t *)temp_buf;
 800a42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42e:	627b      	str	r3, [r7, #36]	@ 0x24
        mem_pre = (uint16_t)((Directory_pre->addr[0] << 8) | Directory_pre->addr[1]);
 800a430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a432:	7a1b      	ldrb	r3, [r3, #8]
 800a434:	b21b      	sxth	r3, r3
 800a436:	021b      	lsls	r3, r3, #8
 800a438:	b21a      	sxth	r2, r3
 800a43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43c:	7a5b      	ldrb	r3, [r3, #9]
 800a43e:	b21b      	sxth	r3, r3
 800a440:	4313      	orrs	r3, r2
 800a442:	b21b      	sxth	r3, r3
 800a444:	847b      	strh	r3, [r7, #34]	@ 0x22
        len_pre = (uint16_t)((Directory_pre->length[0] << 8) | Directory_pre->length[1]);
 800a446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a448:	7a9b      	ldrb	r3, [r3, #10]
 800a44a:	b21b      	sxth	r3, r3
 800a44c:	021b      	lsls	r3, r3, #8
 800a44e:	b21a      	sxth	r2, r3
 800a450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a452:	7adb      	ldrb	r3, [r3, #11]
 800a454:	b21b      	sxth	r3, r3
 800a456:	4313      	orrs	r3, r2
 800a458:	b21b      	sxth	r3, r3
 800a45a:	843b      	strh	r3, [r7, #32]
        data_addr = mem_pre + len_pre;
 800a45c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a45e:	8c3b      	ldrh	r3, [r7, #32]
 800a460:	4413      	add	r3, r2
 800a462:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }
    /* write data */

    AT24Cxx_write_buffer_bloking(&eeprom_ob,data_addr,Data,len);
 800a464:	88fb      	ldrh	r3, [r7, #6]
 800a466:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	481d      	ldr	r0, [pc, #116]	@ (800a4e0 <write_data_test_ic+0x120>)
 800a46c:	f000 fba0 	bl	800abb0 <AT24Cxx_write_buffer_bloking>

    /* get the directory data */
    direc_EEPROM_t direc;
    memset(direc.nameIC,0,sizeof(direc.nameIC));
 800a470:	f107 0310 	add.w	r3, r7, #16
 800a474:	2208      	movs	r2, #8
 800a476:	2100      	movs	r1, #0
 800a478:	4618      	mov	r0, r3
 800a47a:	f003 ff25 	bl	800e2c8 <memset>
    memcpy(direc.nameIC,icName,strlen(icName));
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f7f5 fe70 	bl	8000164 <strlen>
 800a484:	4602      	mov	r2, r0
 800a486:	f107 0310 	add.w	r3, r7, #16
 800a48a:	68f9      	ldr	r1, [r7, #12]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f003 fff4 	bl	800e47a <memcpy>
    direc.addr[0] = ((data_addr >> 8) & 0xFF);
 800a492:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a494:	0a1b      	lsrs	r3, r3, #8
 800a496:	b29b      	uxth	r3, r3
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	763b      	strb	r3, [r7, #24]
    direc.addr[1] = ((data_addr) & 0xFF);
 800a49c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	767b      	strb	r3, [r7, #25]
    direc.length[0] = ((len >> 8) & 0xFF);
 800a4a2:	88fb      	ldrh	r3, [r7, #6]
 800a4a4:	0a1b      	lsrs	r3, r3, #8
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	76bb      	strb	r3, [r7, #26]
    direc.length[1] = ((len) & 0xFF);
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	76fb      	strb	r3, [r7, #27]
    AT24Cxx_write_buffer_bloking(&eeprom_ob,dir_addr,(uint8_t *)&direc,sizeof(direc_EEPROM_t));
 800a4b2:	f107 0210 	add.w	r2, r7, #16
 800a4b6:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800a4b8:	230c      	movs	r3, #12
 800a4ba:	4809      	ldr	r0, [pc, #36]	@ (800a4e0 <write_data_test_ic+0x120>)
 800a4bc:	f000 fb78 	bl	800abb0 <AT24Cxx_write_buffer_bloking>
    ++num_direc;
 800a4c0:	7ffb      	ldrb	r3, [r7, #31]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	77fb      	strb	r3, [r7, #31]
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_MEM_ADDR_DIREC_USED,(uint8_t *)&num_direc,sizeof(num_direc));
 800a4c8:	f107 021f 	add.w	r2, r7, #31
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800a4d2:	4803      	ldr	r0, [pc, #12]	@ (800a4e0 <write_data_test_ic+0x120>)
 800a4d4:	f000 fb6c 	bl	800abb0 <AT24Cxx_write_buffer_bloking>
}
 800a4d8:	bf00      	nop
 800a4da:	3730      	adds	r7, #48	@ 0x30
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	20000a9c 	.word	0x20000a9c

0800a4e4 <I2C1_ER_IRQHandler>:
#include "../Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h" /* CMSIS STM32F1xx Device Peripheral Access Layer Header File */

void I2C1_ER_IRQHandler(void);
void RTC_IRQHandler(void);

void I2C1_ER_IRQHandler(void) { 
 800a4e4:	b480      	push	{r7}
 800a4e6:	af00      	add	r7, sp, #0
    // OS_task_activate(1);  
    // HAL_NVIC_ClearPendingIRQ(I2C1_ER_IRQn); // clear NVIC pending bit
}
 800a4e8:	bf00      	nop
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bc80      	pop	{r7}
 800a4ee:	4770      	bx	lr

0800a4f0 <RTC_IRQHandler>:
void RTC_IRQHandler(void) {
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	af00      	add	r7, sp, #0
    OS_task_activate(1);  
 800a4f4:	2001      	movs	r0, #1
 800a4f6:	f001 fd25 	bl	800bf44 <OS_task_activate>
}
 800a4fa:	bf00      	nop
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <BSP_init>:

/* hardware-specific support code run on a specific hardware platform */
void BSP_init(void) {
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0
    /* init event pool */
    dynamic_event_pool_init();
 800a504:	f001 fdcc 	bl	800c0a0 <dynamic_event_pool_init>
    
    /* Set IRQ number for priority used in OS */
    OS_prio_setIRQ(1,RTC_IRQn);
 800a508:	2103      	movs	r1, #3
 800a50a:	2001      	movs	r0, #1
 800a50c:	f001 fd9e 	bl	800c04c <OS_prio_setIRQ>

    OS_priority_IRQ(RTC_IRQn,1);
 800a510:	2101      	movs	r1, #1
 800a512:	2003      	movs	r0, #3
 800a514:	f001 fd80 	bl	800c018 <OS_priority_IRQ>
    OS_Test_setIRQ(AO_BlinkyTest,RTC_IRQn);    
 800a518:	4b0c      	ldr	r3, [pc, #48]	@ (800a54c <BSP_init+0x4c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2103      	movs	r1, #3
 800a51e:	4618      	mov	r0, r3
 800a520:	f001 fdb0 	bl	800c084 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_taskPost,RTC_IRQn);
 800a524:	4b0a      	ldr	r3, [pc, #40]	@ (800a550 <BSP_init+0x50>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2103      	movs	r1, #3
 800a52a:	4618      	mov	r0, r3
 800a52c:	f001 fdaa 	bl	800c084 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_task_eeprom,RTC_IRQn);
 800a530:	4b08      	ldr	r3, [pc, #32]	@ (800a554 <BSP_init+0x54>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2103      	movs	r1, #3
 800a536:	4618      	mov	r0, r3
 800a538:	f001 fda4 	bl	800c084 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_task_uart_esp32,RTC_IRQn);
 800a53c:	4b06      	ldr	r3, [pc, #24]	@ (800a558 <BSP_init+0x58>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2103      	movs	r1, #3
 800a542:	4618      	mov	r0, r3
 800a544:	f001 fd9e 	bl	800c084 <OS_Test_setIRQ>
}
 800a548:	bf00      	nop
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	080111e8 	.word	0x080111e8
 800a550:	080111dc 	.word	0x080111dc
 800a554:	080111d8 	.word	0x080111d8
 800a558:	080111e4 	.word	0x080111e4

0800a55c <TestOS_Work>:

/* ============================= function using for initialization task ============================= */ 

/* the value using for app test os */
OS_event_t const *TestOS_Work(void) {
 800a55c:	b480      	push	{r7}
 800a55e:	af00      	add	r7, sp, #0
    static TestOS_Evt workTest_blinky ;
    workTest_blinky.appEvt.sig = 0; /* unused */
 800a560:	4b08      	ldr	r3, [pc, #32]	@ (800a584 <TestOS_Work+0x28>)
 800a562:	2200      	movs	r2, #0
 800a564:	801a      	strh	r2, [r3, #0]
    workTest_blinky.ticks1 = 300; /* 500 ms */
 800a566:	4b07      	ldr	r3, [pc, #28]	@ (800a584 <TestOS_Work+0x28>)
 800a568:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a56c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    workTest_blinky.ticks2 = 500;
 800a570:	4b04      	ldr	r3, [pc, #16]	@ (800a584 <TestOS_Work+0x28>)
 800a572:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800a576:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* return the OS_event_t type */
    return &workTest_blinky.appEvt;
 800a57a:	4b02      	ldr	r3, [pc, #8]	@ (800a584 <TestOS_Work+0x28>)
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	46bd      	mov	sp, r7
 800a580:	bc80      	pop	{r7}
 800a582:	4770      	bx	lr
 800a584:	20000acc 	.word	0x20000acc

0800a588 <Post_task_init>:
static app_post Post_instance;
OS_task * const AO_taskPost = &Post_instance.task;

data_send_t data_send;

void Post_task_init(void) {
 800a588:	b5b0      	push	{r4, r5, r7, lr}
 800a58a:	af00      	add	r7, sp, #0
    PostApp_ctor(&Post_instance);
 800a58c:	480a      	ldr	r0, [pc, #40]	@ (800a5b8 <Post_task_init+0x30>)
 800a58e:	f000 f81b 	bl	800a5c8 <PostApp_ctor>

    strcpy(data_send.string_post,(char *)"Hello task test: ");
 800a592:	4a0a      	ldr	r2, [pc, #40]	@ (800a5bc <Post_task_init+0x34>)
 800a594:	4b0a      	ldr	r3, [pc, #40]	@ (800a5c0 <Post_task_init+0x38>)
 800a596:	4614      	mov	r4, r2
 800a598:	461d      	mov	r5, r3
 800a59a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a59c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a59e:	682b      	ldr	r3, [r5, #0]
 800a5a0:	8023      	strh	r3, [r4, #0]
    data_send.string_len = strlen(data_send.string_post);
 800a5a2:	4806      	ldr	r0, [pc, #24]	@ (800a5bc <Post_task_init+0x34>)
 800a5a4:	f7f5 fdde 	bl	8000164 <strlen>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	4a06      	ldr	r2, [pc, #24]	@ (800a5c4 <Post_task_init+0x3c>)
 800a5ac:	6053      	str	r3, [r2, #4]
    data_send.data_post = 0;
 800a5ae:	4b05      	ldr	r3, [pc, #20]	@ (800a5c4 <Post_task_init+0x3c>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	601a      	str	r2, [r3, #0]
}
 800a5b4:	bf00      	nop
 800a5b6:	bdb0      	pop	{r4, r5, r7, pc}
 800a5b8:	20000b18 	.word	0x20000b18
 800a5bc:	20000b90 	.word	0x20000b90
 800a5c0:	08010df0 	.word	0x08010df0
 800a5c4:	20000b88 	.word	0x20000b88

0800a5c8 <PostApp_ctor>:

void PostApp_ctor(app_post *pAO) {
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
    /* init task */
    OS_task_init(AO_taskPost,(OS_handler)&PostApp_init,(OS_handler)&PostApp_dispatch);
 800a5d0:	4b07      	ldr	r3, [pc, #28]	@ (800a5f0 <PostApp_ctor+0x28>)
 800a5d2:	4a08      	ldr	r2, [pc, #32]	@ (800a5f4 <PostApp_ctor+0x2c>)
 800a5d4:	4908      	ldr	r1, [pc, #32]	@ (800a5f8 <PostApp_ctor+0x30>)
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f001 fb58 	bl	800bc8c <OS_task_init>

    /* init time */
    OS_TimeEvt_init(&Post_instance.te,POST_DATA_TIMEOUT,&Post_instance.task);
 800a5dc:	4a04      	ldr	r2, [pc, #16]	@ (800a5f0 <PostApp_ctor+0x28>)
 800a5de:	2102      	movs	r1, #2
 800a5e0:	4806      	ldr	r0, [pc, #24]	@ (800a5fc <PostApp_ctor+0x34>)
 800a5e2:	f001 fc23 	bl	800be2c <OS_TimeEvt_init>
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20000b18 	.word	0x20000b18
 800a5f4:	0800a625 	.word	0x0800a625
 800a5f8:	0800a601 	.word	0x0800a601
 800a5fc:	20000b34 	.word	0x20000b34

0800a600 <PostApp_init>:

void PostApp_init(app_post * const pOS_task, OS_event_t const * const pEvent) {
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Set(&pOS_task->te,20,500);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	331c      	adds	r3, #28
 800a60e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800a612:	2114      	movs	r1, #20
 800a614:	4618      	mov	r0, r3
 800a616:	f001 fc2f 	bl	800be78 <OS_TimeEvt_Set>
}
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <PostApp_dispatch>:

void PostApp_dispatch(app_post * const pOS_task, OS_event_t const * const pEvent) {
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d113      	bne.n	800a65e <PostApp_dispatch+0x3a>
        case POST_DATA_TIMEOUT : {
            printf("Post data to test task!\n");
 800a636:	480c      	ldr	r0, [pc, #48]	@ (800a668 <PostApp_dispatch+0x44>)
 800a638:	f003 fcfe 	bl	800e038 <puts>
            // data_send_t *pdata_send = malloc(sizeof(data_send_t*));
            ++data_send.data_post;
 800a63c:	4b0b      	ldr	r3, [pc, #44]	@ (800a66c <PostApp_dispatch+0x48>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3301      	adds	r3, #1
 800a642:	4a0a      	ldr	r2, [pc, #40]	@ (800a66c <PostApp_dispatch+0x48>)
 800a644:	6013      	str	r3, [r2, #0]
            // memcpy(pdata_send->string_post,data_send.string_post,data_send.string_len);
            // pdata_send->string_len = data_send.string_len;
            // pdata_send->data_post = data_send.data_post;
            if (AO_BlinkyTest->dispatch != NULL) {
 800a646:	4b0a      	ldr	r3, [pc, #40]	@ (800a670 <PostApp_dispatch+0x4c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d006      	beq.n	800a65e <PostApp_dispatch+0x3a>
                OS_task_post_event(AO_BlinkyTest,PRINT_POST_DATA,(uint8_t *)&data_send,sizeof(data_send_t));
 800a650:	4b07      	ldr	r3, [pc, #28]	@ (800a670 <PostApp_dispatch+0x4c>)
 800a652:	6818      	ldr	r0, [r3, #0]
 800a654:	2348      	movs	r3, #72	@ 0x48
 800a656:	4a05      	ldr	r2, [pc, #20]	@ (800a66c <PostApp_dispatch+0x48>)
 800a658:	2103      	movs	r1, #3
 800a65a:	f001 fbc9 	bl	800bdf0 <OS_task_post_event>
            }
        }
        default: break;
 800a65e:	bf00      	nop
    }
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	08010e04 	.word	0x08010e04
 800a66c:	20000b88 	.word	0x20000b88
 800a670:	080111e8 	.word	0x080111e8

0800a674 <screen_task_init>:
static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent);

static app_screen screen_instance;
OS_task * const AO_task_screen = &screen_instance.task;

void screen_task_init(void) {
 800a674:	b580      	push	{r7, lr}
 800a676:	af00      	add	r7, sp, #0
    screen_ctor(&screen_instance);
 800a678:	4802      	ldr	r0, [pc, #8]	@ (800a684 <screen_task_init+0x10>)
 800a67a:	f000 f805 	bl	800a688 <screen_ctor>
}
 800a67e:	bf00      	nop
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000bd0 	.word	0x20000bd0

0800a688 <screen_ctor>:

void screen_ctor(app_screen *pAO) {
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_screen,(OS_handler)screen_init,(OS_handler)screen_dispatch);
 800a690:	4b04      	ldr	r3, [pc, #16]	@ (800a6a4 <screen_ctor+0x1c>)
 800a692:	4a05      	ldr	r2, [pc, #20]	@ (800a6a8 <screen_ctor+0x20>)
 800a694:	4905      	ldr	r1, [pc, #20]	@ (800a6ac <screen_ctor+0x24>)
 800a696:	4618      	mov	r0, r3
 800a698:	f001 faf8 	bl	800bc8c <OS_task_init>
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	20000bd0 	.word	0x20000bd0
 800a6a8:	0800a6c5 	.word	0x0800a6c5
 800a6ac:	0800a6b1 	.word	0x0800a6b1

0800a6b0 <screen_init>:

static void screen_init(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
    UNUSED(pOS_task);
    UNUSED(pEvent);
} 
 800a6ba:	bf00      	nop
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bc80      	pop	{r7}
 800a6c2:	4770      	bx	lr

0800a6c4 <screen_dispatch>:

static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d110      	bne.n	800a6f8 <screen_dispatch+0x34>
        case DEIVCE_TEST_FINISH : {
            printf("Device test success!!\n");
 800a6d6:	480b      	ldr	r0, [pc, #44]	@ (800a704 <screen_dispatch+0x40>)
 800a6d8:	f003 fcae 	bl	800e038 <puts>
            uint8_t *device_finish = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800a6dc:	6838      	ldr	r0, [r7, #0]
 800a6de:	f001 fd88 	bl	800c1f2 <get_data_dynamic_event>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
            show_main_page(&_Screen,DWINPAGE_MAIN_FINISH,*device_finish);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	2164      	movs	r1, #100	@ 0x64
 800a6f0:	4805      	ldr	r0, [pc, #20]	@ (800a708 <screen_dispatch+0x44>)
 800a6f2:	f7ff f935 	bl	8009960 <show_main_page>
        } break;
 800a6f6:	e000      	b.n	800a6fa <screen_dispatch+0x36>

        default: break;
 800a6f8:	bf00      	nop
    }
}
 800a6fa:	bf00      	nop
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	08010e1c 	.word	0x08010e1c
 800a708:	200007f0 	.word	0x200007f0

0800a70c <BlinkyTest_app_init>:
uint8_t num_ic = 1;
char uart_string[50];
uint32_t uart_num_test;

/* call in main file to initialization Active object of app using */
void BlinkyTest_app_init(void) {
 800a70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a70e:	b083      	sub	sp, #12
 800a710:	af02      	add	r7, sp, #8
    BlinkyTest_ctor(&Blinky_instance);
 800a712:	4821      	ldr	r0, [pc, #132]	@ (800a798 <BlinkyTest_app_init+0x8c>)
 800a714:	f000 f852 	bl	800a7bc <BlinkyTest_ctor>

    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%d",name_program,name_ic,num_ic);
 800a718:	4b20      	ldr	r3, [pc, #128]	@ (800a79c <BlinkyTest_app_init+0x90>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	4b20      	ldr	r3, [pc, #128]	@ (800a7a0 <BlinkyTest_app_init+0x94>)
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	4b20      	ldr	r3, [pc, #128]	@ (800a7a4 <BlinkyTest_app_init+0x98>)
 800a724:	4a20      	ldr	r2, [pc, #128]	@ (800a7a8 <BlinkyTest_app_init+0x9c>)
 800a726:	212a      	movs	r1, #42	@ 0x2a
 800a728:	4820      	ldr	r0, [pc, #128]	@ (800a7ac <BlinkyTest_app_init+0xa0>)
 800a72a:	f003 fc8d 	bl	800e048 <sniprintf>
    data_write.data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 800a72e:	202a      	movs	r0, #42	@ 0x2a
 800a730:	f001 fd90 	bl	800c254 <malloc>
 800a734:	4603      	mov	r3, r0
 800a736:	461a      	mov	r2, r3
 800a738:	4b1d      	ldr	r3, [pc, #116]	@ (800a7b0 <BlinkyTest_app_init+0xa4>)
 800a73a:	605a      	str	r2, [r3, #4]
    memcpy(data_write.data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 800a73c:	4b1c      	ldr	r3, [pc, #112]	@ (800a7b0 <BlinkyTest_app_init+0xa4>)
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	4a1a      	ldr	r2, [pc, #104]	@ (800a7ac <BlinkyTest_app_init+0xa0>)
 800a742:	4614      	mov	r4, r2
 800a744:	469c      	mov	ip, r3
 800a746:	f104 0e20 	add.w	lr, r4, #32
 800a74a:	4665      	mov	r5, ip
 800a74c:	4626      	mov	r6, r4
 800a74e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a750:	6028      	str	r0, [r5, #0]
 800a752:	6069      	str	r1, [r5, #4]
 800a754:	60aa      	str	r2, [r5, #8]
 800a756:	60eb      	str	r3, [r5, #12]
 800a758:	3410      	adds	r4, #16
 800a75a:	f10c 0c10 	add.w	ip, ip, #16
 800a75e:	4574      	cmp	r4, lr
 800a760:	d1f3      	bne.n	800a74a <BlinkyTest_app_init+0x3e>
 800a762:	4662      	mov	r2, ip
 800a764:	4623      	mov	r3, r4
 800a766:	cb03      	ldmia	r3!, {r0, r1}
 800a768:	6010      	str	r0, [r2, #0]
 800a76a:	6051      	str	r1, [r2, #4]
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	8113      	strh	r3, [r2, #8]
    data_write.data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 800a770:	4b0f      	ldr	r3, [pc, #60]	@ (800a7b0 <BlinkyTest_app_init+0xa4>)
 800a772:	222a      	movs	r2, #42	@ 0x2a
 800a774:	811a      	strh	r2, [r3, #8]
    data_write.mem_addr = START_ADDR_PROGRAM_TEST_X(1);
 800a776:	4b0e      	ldr	r3, [pc, #56]	@ (800a7b0 <BlinkyTest_app_init+0xa4>)
 800a778:	226d      	movs	r2, #109	@ 0x6d
 800a77a:	801a      	strh	r2, [r3, #0]


    data_uart.data = malloc(50);
 800a77c:	2032      	movs	r0, #50	@ 0x32
 800a77e:	f001 fd69 	bl	800c254 <malloc>
 800a782:	4603      	mov	r3, r0
 800a784:	461a      	mov	r2, r3
 800a786:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b4 <BlinkyTest_app_init+0xa8>)
 800a788:	601a      	str	r2, [r3, #0]
    uart_num_test = 0;
 800a78a:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b8 <BlinkyTest_app_init+0xac>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	601a      	str	r2, [r3, #0]
}
 800a790:	bf00      	nop
 800a792:	3704      	adds	r7, #4
 800a794:	46bd      	mov	sp, r7
 800a796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a798:	20000c14 	.word	0x20000c14
 800a79c:	20000084 	.word	0x20000084
 800a7a0:	20000070 	.word	0x20000070
 800a7a4:	2000005c 	.word	0x2000005c
 800a7a8:	08010e34 	.word	0x08010e34
 800a7ac:	20000de8 	.word	0x20000de8
 800a7b0:	20000dd4 	.word	0x20000dd4
 800a7b4:	20000de0 	.word	0x20000de0
 800a7b8:	20000e14 	.word	0x20000e14

0800a7bc <BlinkyTest_ctor>:


void BlinkyTest_ctor(Test_Blinky_OS * const pAO) {
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
    /* Init task */
    OS_task_init(&pAO->task,(OS_handler)&BlinkyTest_init,(OS_handler)&BlinkyTest_Dispatch);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a17      	ldr	r2, [pc, #92]	@ (800a824 <BlinkyTest_ctor+0x68>)
 800a7c8:	4917      	ldr	r1, [pc, #92]	@ (800a828 <BlinkyTest_ctor+0x6c>)
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f001 fa5e 	bl	800bc8c <OS_task_init>

    /* init time os if using */
    OS_TimeEvt_init(&pAO->te1,TIMEOUT1_SIG,&pAO->task);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	331c      	adds	r3, #28
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f001 fb27 	bl	800be2c <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te2,TIMEOUT2_SIG,&pAO->task);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	3370      	adds	r3, #112	@ 0x70
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 fb20 	bl	800be2c <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te_eeprom_write,WRITE_PROGRAM_TEST,&pAO->task);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	33c4      	adds	r3, #196	@ 0xc4
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	2106      	movs	r1, #6
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f001 fb19 	bl	800be2c <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te_eeprom_read,READ_ONE_PROGRAM_TEST,&pAO->task);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	2105      	movs	r1, #5
 800a804:	4618      	mov	r0, r3
 800a806:	f001 fb11 	bl	800be2c <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te_send_data,TEST_SEND_DATA_ESP32,&pAO->task);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	2107      	movs	r1, #7
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fb09 	bl	800be2c <OS_TimeEvt_init>
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	0800a8a9 	.word	0x0800a8a9
 800a828:	0800a82d 	.word	0x0800a82d

0800a82c <BlinkyTest_init>:

/* The init function of app task (optional) */
void BlinkyTest_init(Test_Blinky_OS * const pOS_task, OS_event_t const * const pEvent) {
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
    
    /* init time for generate event */
    OS_TimeEvt_Set(&pOS_task->te1,
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f103 001c 	add.w	r0, r3, #28
    1U,
    OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks1);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
    OS_TimeEvt_Set(&pOS_task->te1,
 800a842:	461a      	mov	r2, r3
 800a844:	2101      	movs	r1, #1
 800a846:	f001 fb17 	bl	800be78 <OS_TimeEvt_Set>

    OS_TimeEvt_Set(&pOS_task->te2,
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
    1U + (OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks2 / 4),
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
    OS_TimeEvt_Set(&pOS_task->te2,
 800a856:	089b      	lsrs	r3, r3, #2
 800a858:	b29b      	uxth	r3, r3
 800a85a:	3301      	adds	r3, #1
 800a85c:	b299      	uxth	r1, r3
    OS_EVT_DOWNCAST(TestOS_Evt,pEvent)->ticks2);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
    OS_TimeEvt_Set(&pOS_task->te2,
 800a864:	461a      	mov	r2, r3
 800a866:	f001 fb07 	bl	800be78 <OS_TimeEvt_Set>

    OS_TimeEvt_Set(&pOS_task->te_eeprom_write,
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	33c4      	adds	r3, #196	@ 0xc4
 800a86e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a872:	2105      	movs	r1, #5
 800a874:	4618      	mov	r0, r3
 800a876:	f001 faff 	bl	800be78 <OS_TimeEvt_Set>
    5,
    2000);

    OS_TimeEvt_Set(&pOS_task->te_eeprom_read,
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800a880:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a884:	2114      	movs	r1, #20
 800a886:	4618      	mov	r0, r3
 800a888:	f001 faf6 	bl	800be78 <OS_TimeEvt_Set>
    20,
    2000);

    OS_TimeEvt_Set(&pOS_task->te_send_data,50,500);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a892:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800a896:	2132      	movs	r1, #50	@ 0x32
 800a898:	4618      	mov	r0, r3
 800a89a:	f001 faed 	bl	800be78 <OS_TimeEvt_Set>
    /* if don't using this function */
    /*
    * UNSED(pOS_task);
    * UNSED(pEvent);
    */
}
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <BlinkyTest_Dispatch>:

void BlinkyTest_Dispatch(Test_Blinky_OS *const pOS_task, OS_event_t const * const pEvent) {
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	b091      	sub	sp, #68	@ 0x44
 800a8ae:	af02      	add	r7, sp, #8
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
    switch (pEvent->sig) {
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	2b07      	cmp	r3, #7
 800a8ba:	f200 810b 	bhi.w	800aad4 <BlinkyTest_Dispatch+0x22c>
 800a8be:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c4 <BlinkyTest_Dispatch+0x1c>)
 800a8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c4:	0800a8e5 	.word	0x0800a8e5
 800a8c8:	0800a8f7 	.word	0x0800a8f7
 800a8cc:	0800aad5 	.word	0x0800aad5
 800a8d0:	0800a909 	.word	0x0800a909
 800a8d4:	0800a993 	.word	0x0800a993
 800a8d8:	0800aaa7 	.word	0x0800aaa7
 800a8dc:	0800aa2d 	.word	0x0800aa2d
 800a8e0:	0800aad5 	.word	0x0800aad5
        case TIMEOUT1_SIG : {
            /* Turn on led */
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	2102      	movs	r1, #2
 800a8e8:	487d      	ldr	r0, [pc, #500]	@ (800aae0 <BlinkyTest_Dispatch+0x238>)
 800a8ea:	f7f8 ff87 	bl	80037fc <HAL_GPIO_WritePin>
            printf("Turn on led\n");
 800a8ee:	487d      	ldr	r0, [pc, #500]	@ (800aae4 <BlinkyTest_Dispatch+0x23c>)
 800a8f0:	f003 fba2 	bl	800e038 <puts>
        } break;
 800a8f4:	e0ef      	b.n	800aad6 <BlinkyTest_Dispatch+0x22e>
        case TIMEOUT2_SIG : {
            /* Turn off led */
        	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2102      	movs	r1, #2
 800a8fa:	4879      	ldr	r0, [pc, #484]	@ (800aae0 <BlinkyTest_Dispatch+0x238>)
 800a8fc:	f7f8 ff7e 	bl	80037fc <HAL_GPIO_WritePin>
            printf("Turn off led\n");
 800a900:	4879      	ldr	r0, [pc, #484]	@ (800aae8 <BlinkyTest_Dispatch+0x240>)
 800a902:	f003 fb99 	bl	800e038 <puts>
        } break;
 800a906:	e0e6      	b.n	800aad6 <BlinkyTest_Dispatch+0x22e>
        case PRINT_POST_DATA : {
 800a908:	466b      	mov	r3, sp
 800a90a:	461c      	mov	r4, r3
            printf("Receive data post\n");
 800a90c:	4877      	ldr	r0, [pc, #476]	@ (800aaec <BlinkyTest_Dispatch+0x244>)
 800a90e:	f003 fb93 	bl	800e038 <puts>
            data_send_t *data_receive = (data_send_t *)(get_data_dynamic_event(pEvent));
 800a912:	68b8      	ldr	r0, [r7, #8]
 800a914:	f001 fc6d 	bl	800c1f2 <get_data_dynamic_event>
 800a918:	6278      	str	r0, [r7, #36]	@ 0x24
            uint32_t string_len = data_receive->string_len;
 800a91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	623b      	str	r3, [r7, #32]
            char print_string[string_len+1];
 800a920:	6a3b      	ldr	r3, [r7, #32]
 800a922:	1c59      	adds	r1, r3, #1
 800a924:	460b      	mov	r3, r1
 800a926:	3b01      	subs	r3, #1
 800a928:	61fb      	str	r3, [r7, #28]
 800a92a:	2300      	movs	r3, #0
 800a92c:	6039      	str	r1, [r7, #0]
 800a92e:	607b      	str	r3, [r7, #4]
 800a930:	f04f 0200 	mov.w	r2, #0
 800a934:	f04f 0300 	mov.w	r3, #0
 800a938:	e9d7 5600 	ldrd	r5, r6, [r7]
 800a93c:	4630      	mov	r0, r6
 800a93e:	00c3      	lsls	r3, r0, #3
 800a940:	4628      	mov	r0, r5
 800a942:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800a946:	4628      	mov	r0, r5
 800a948:	00c2      	lsls	r2, r0, #3
 800a94a:	2300      	movs	r3, #0
 800a94c:	468a      	mov	sl, r1
 800a94e:	469b      	mov	fp, r3
 800a950:	f04f 0200 	mov.w	r2, #0
 800a954:	f04f 0300 	mov.w	r3, #0
 800a958:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a95c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a964:	1dcb      	adds	r3, r1, #7
 800a966:	08db      	lsrs	r3, r3, #3
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	ebad 0d03 	sub.w	sp, sp, r3
 800a96e:	ab02      	add	r3, sp, #8
 800a970:	3300      	adds	r3, #0
 800a972:	61bb      	str	r3, [r7, #24]
            strcpy(print_string,(char *)data_receive->string_post);
 800a974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a976:	3308      	adds	r3, #8
 800a978:	4619      	mov	r1, r3
 800a97a:	69b8      	ldr	r0, [r7, #24]
 800a97c:	f003 fd67 	bl	800e44e <strcpy>
            printf("Data receive: %s %ld\n",print_string,data_receive->data_post);
 800a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	461a      	mov	r2, r3
 800a986:	69b9      	ldr	r1, [r7, #24]
 800a988:	4859      	ldr	r0, [pc, #356]	@ (800aaf0 <BlinkyTest_Dispatch+0x248>)
 800a98a:	f003 faed 	bl	800df68 <iprintf>
 800a98e:	46a5      	mov	sp, r4
        } break;
 800a990:	e0a1      	b.n	800aad6 <BlinkyTest_Dispatch+0x22e>
        case READ_ALL_PROGRAM_TEST : {
 800a992:	466b      	mov	r3, sp
 800a994:	461e      	mov	r6, r3
            printf("Get the value of all program test\n");
 800a996:	4857      	ldr	r0, [pc, #348]	@ (800aaf4 <BlinkyTest_Dispatch+0x24c>)
 800a998:	f003 fb4e 	bl	800e038 <puts>
            data_eeprom_t *data_eeprom_read = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 800a99c:	68b8      	ldr	r0, [r7, #8]
 800a99e:	f001 fc28 	bl	800c1f2 <get_data_dynamic_event>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	637b      	str	r3, [r7, #52]	@ 0x34
            uint16_t len = data_eeprom_read->data_len;
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9aa:	891b      	ldrh	r3, [r3, #8]
 800a9ac:	867b      	strh	r3, [r7, #50]	@ 0x32
            uint8_t data_receive[len+1];
 800a9ae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a9b0:	1c59      	adds	r1, r3, #1
 800a9b2:	1e4b      	subs	r3, r1, #1
 800a9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9b6:	460a      	mov	r2, r1
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	4690      	mov	r8, r2
 800a9bc:	4699      	mov	r9, r3
 800a9be:	f04f 0200 	mov.w	r2, #0
 800a9c2:	f04f 0300 	mov.w	r3, #0
 800a9c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9d2:	460a      	mov	r2, r1
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4614      	mov	r4, r2
 800a9d8:	461d      	mov	r5, r3
 800a9da:	f04f 0200 	mov.w	r2, #0
 800a9de:	f04f 0300 	mov.w	r3, #0
 800a9e2:	00eb      	lsls	r3, r5, #3
 800a9e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a9e8:	00e2      	lsls	r2, r4, #3
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	3307      	adds	r3, #7
 800a9ee:	08db      	lsrs	r3, r3, #3
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	ebad 0d03 	sub.w	sp, sp, r3
 800a9f6:	ab02      	add	r3, sp, #8
 800a9f8:	3300      	adds	r3, #0
 800a9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
            memcpy(data_receive,data_eeprom_read->data,len);
 800a9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800aa02:	4619      	mov	r1, r3
 800aa04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa06:	f003 fd38 	bl	800e47a <memcpy>
            
            if (data_eeprom_read->data) {
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d004      	beq.n	800aa1c <BlinkyTest_Dispatch+0x174>
                free(data_eeprom_read->data);
 800aa12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f001 fc24 	bl	800c264 <free>
            }

            if (data_eeprom_read) {
 800aa1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <BlinkyTest_Dispatch+0x180>
                free(data_eeprom_read);
 800aa22:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800aa24:	f001 fc1e 	bl	800c264 <free>
 800aa28:	46b5      	mov	sp, r6
            }
        } break;
 800aa2a:	e054      	b.n	800aad6 <BlinkyTest_Dispatch+0x22e>
        case WRITE_PROGRAM_TEST : {
            printf("Write data program test\n");
 800aa2c:	4832      	ldr	r0, [pc, #200]	@ (800aaf8 <BlinkyTest_Dispatch+0x250>)
 800aa2e:	f003 fb03 	bl	800e038 <puts>
            if (++num_ic > 99) num_ic = 1;
 800aa32:	4b32      	ldr	r3, [pc, #200]	@ (800aafc <BlinkyTest_Dispatch+0x254>)
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	3301      	adds	r3, #1
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	4b30      	ldr	r3, [pc, #192]	@ (800aafc <BlinkyTest_Dispatch+0x254>)
 800aa3c:	701a      	strb	r2, [r3, #0]
 800aa3e:	4b2f      	ldr	r3, [pc, #188]	@ (800aafc <BlinkyTest_Dispatch+0x254>)
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b63      	cmp	r3, #99	@ 0x63
 800aa44:	d902      	bls.n	800aa4c <BlinkyTest_Dispatch+0x1a4>
 800aa46:	4b2d      	ldr	r3, [pc, #180]	@ (800aafc <BlinkyTest_Dispatch+0x254>)
 800aa48:	2201      	movs	r2, #1
 800aa4a:	701a      	strb	r2, [r3, #0]
            snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%d",name_program,name_ic,num_ic);
 800aa4c:	4b2b      	ldr	r3, [pc, #172]	@ (800aafc <BlinkyTest_Dispatch+0x254>)
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	9301      	str	r3, [sp, #4]
 800aa52:	4b2b      	ldr	r3, [pc, #172]	@ (800ab00 <BlinkyTest_Dispatch+0x258>)
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	4b2b      	ldr	r3, [pc, #172]	@ (800ab04 <BlinkyTest_Dispatch+0x25c>)
 800aa58:	4a2b      	ldr	r2, [pc, #172]	@ (800ab08 <BlinkyTest_Dispatch+0x260>)
 800aa5a:	212a      	movs	r1, #42	@ 0x2a
 800aa5c:	482b      	ldr	r0, [pc, #172]	@ (800ab0c <BlinkyTest_Dispatch+0x264>)
 800aa5e:	f003 faf3 	bl	800e048 <sniprintf>
            memcpy(data_write.data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 800aa62:	4b2b      	ldr	r3, [pc, #172]	@ (800ab10 <BlinkyTest_Dispatch+0x268>)
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	4a29      	ldr	r2, [pc, #164]	@ (800ab0c <BlinkyTest_Dispatch+0x264>)
 800aa68:	4614      	mov	r4, r2
 800aa6a:	469c      	mov	ip, r3
 800aa6c:	f104 0e20 	add.w	lr, r4, #32
 800aa70:	4665      	mov	r5, ip
 800aa72:	4626      	mov	r6, r4
 800aa74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800aa76:	6028      	str	r0, [r5, #0]
 800aa78:	6069      	str	r1, [r5, #4]
 800aa7a:	60aa      	str	r2, [r5, #8]
 800aa7c:	60eb      	str	r3, [r5, #12]
 800aa7e:	3410      	adds	r4, #16
 800aa80:	f10c 0c10 	add.w	ip, ip, #16
 800aa84:	4574      	cmp	r4, lr
 800aa86:	d1f3      	bne.n	800aa70 <BlinkyTest_Dispatch+0x1c8>
 800aa88:	4662      	mov	r2, ip
 800aa8a:	4623      	mov	r3, r4
 800aa8c:	cb03      	ldmia	r3!, {r0, r1}
 800aa8e:	6010      	str	r0, [r2, #0]
 800aa90:	6051      	str	r1, [r2, #4]
 800aa92:	881b      	ldrh	r3, [r3, #0]
 800aa94:	8113      	strh	r3, [r2, #8]
            OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 800aa96:	4b1f      	ldr	r3, [pc, #124]	@ (800ab14 <BlinkyTest_Dispatch+0x26c>)
 800aa98:	6818      	ldr	r0, [r3, #0]
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	4a1c      	ldr	r2, [pc, #112]	@ (800ab10 <BlinkyTest_Dispatch+0x268>)
 800aa9e:	2105      	movs	r1, #5
 800aaa0:	f001 f9a6 	bl	800bdf0 <OS_task_post_event>
        } break;
 800aaa4:	e017      	b.n	800aad6 <BlinkyTest_Dispatch+0x22e>
        case READ_ONE_PROGRAM_TEST : {
            printf("Read eeprom\n");
 800aaa6:	481c      	ldr	r0, [pc, #112]	@ (800ab18 <BlinkyTest_Dispatch+0x270>)
 800aaa8:	f003 fac6 	bl	800e038 <puts>
            data_eeprom_t *data_read = (data_eeprom_t *)malloc(sizeof(data_eeprom_t));
 800aaac:	200c      	movs	r0, #12
 800aaae:	f001 fbd1 	bl	800c254 <malloc>
 800aab2:	4603      	mov	r3, r0
 800aab4:	617b      	str	r3, [r7, #20]
            data_read->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	222a      	movs	r2, #42	@ 0x2a
 800aaba:	811a      	strh	r2, [r3, #8]
            data_read->mem_addr = START_ADDR_PROGRAM_TEST_X(1);
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	226d      	movs	r2, #109	@ 0x6d
 800aac0:	801a      	strh	r2, [r3, #0]
            OS_task_post_event(AO_task_eeprom,READ_EEPROM,(uint8_t *)&data_read,sizeof(uint8_t *));
 800aac2:	4b14      	ldr	r3, [pc, #80]	@ (800ab14 <BlinkyTest_Dispatch+0x26c>)
 800aac4:	6818      	ldr	r0, [r3, #0]
 800aac6:	f107 0214 	add.w	r2, r7, #20
 800aaca:	2304      	movs	r3, #4
 800aacc:	2104      	movs	r1, #4
 800aace:	f001 f98f 	bl	800bdf0 <OS_task_post_event>
        } break;
 800aad2:	e000      	b.n	800aad6 <BlinkyTest_Dispatch+0x22e>
            // uart_num_test++;
            // sprintf((char *)data_uart.data,"%s: %ld\n","The String Send to ESP32",uart_num_test);
            // data_uart.len = strlen((char *)data_uart.data);
            // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_uart,sizeof(uart_buf));
        } break;
        default: break;
 800aad4:	bf00      	nop
    }
}
 800aad6:	bf00      	nop
 800aad8:	373c      	adds	r7, #60	@ 0x3c
 800aada:	46bd      	mov	sp, r7
 800aadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae0:	40010800 	.word	0x40010800
 800aae4:	08010e40 	.word	0x08010e40
 800aae8:	08010e4c 	.word	0x08010e4c
 800aaec:	08010e5c 	.word	0x08010e5c
 800aaf0:	08010e70 	.word	0x08010e70
 800aaf4:	08010e88 	.word	0x08010e88
 800aaf8:	08010eac 	.word	0x08010eac
 800aafc:	20000084 	.word	0x20000084
 800ab00:	20000070 	.word	0x20000070
 800ab04:	2000005c 	.word	0x2000005c
 800ab08:	08010e34 	.word	0x08010e34
 800ab0c:	20000de8 	.word	0x20000de8
 800ab10:	20000dd4 	.word	0x20000dd4
 800ab14:	080111d8 	.word	0x080111d8
 800ab18:	08010ec4 	.word	0x08010ec4

0800ab1c <AT24Cxx_Init>:
#include <stdio.h>
#include <stdint.h>

/* Private function prototype */

AT24Cxx_Status AT24Cxx_Init(AT24Cxx_t *pDev, uint8_t dev_address, I2C_HandleTypeDef *dev_i2c) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	460b      	mov	r3, r1
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	72fb      	strb	r3, [r7, #11]
    pDev->i2c_port = dev_i2c;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	601a      	str	r2, [r3, #0]
    pDev->dev_address = dev_address << 1;
 800ab30:	7afb      	ldrb	r3, [r7, #11]
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	711a      	strb	r2, [r3, #4]
    /* Test communication */
    //uint8_t test_buf[1] = {0};
    if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 1, 100) == HAL_OK) {
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6818      	ldr	r0, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	791b      	ldrb	r3, [r3, #4]
 800ab42:	4619      	mov	r1, r3
 800ab44:	2364      	movs	r3, #100	@ 0x64
 800ab46:	2201      	movs	r2, #1
 800ab48:	f7f9 fbe2 	bl	8004310 <HAL_I2C_IsDeviceReady>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <AT24Cxx_Init+0x3a>
        return AT24Cxx_Init_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	e000      	b.n	800ab58 <AT24Cxx_Init+0x3c>
    }
    return AT24Cxx_Init_Fail;
 800ab56:	2301      	movs	r3, #1
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <AT24Cxx_write_buffer>:
    } else {
        return AT24Cxx_Error_write;
    }
}

AT24Cxx_Status AT24Cxx_write_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af02      	add	r7, sp, #8
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	607a      	str	r2, [r7, #4]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	817b      	strh	r3, [r7, #10]
 800ab70:	4613      	mov	r3, r2
 800ab72:	813b      	strh	r3, [r7, #8]
    /* Check valid size buffer and address */
    if (mem_addr+buf_length < AT24C256_MAX_ADDR && buf_length < AT24C256_PG_SIZE) {
 800ab74:	897a      	ldrh	r2, [r7, #10]
 800ab76:	893b      	ldrh	r3, [r7, #8]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	dc11      	bgt.n	800aba6 <AT24Cxx_write_buffer+0x46>
 800ab82:	893b      	ldrh	r3, [r7, #8]
 800ab84:	2b3f      	cmp	r3, #63	@ 0x3f
 800ab86:	d80e      	bhi.n	800aba6 <AT24Cxx_write_buffer+0x46>
        HAL_I2C_Mem_Write_IT(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,buf_length);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	791b      	ldrb	r3, [r3, #4]
 800ab90:	4619      	mov	r1, r3
 800ab92:	897a      	ldrh	r2, [r7, #10]
 800ab94:	893b      	ldrh	r3, [r7, #8]
 800ab96:	9301      	str	r3, [sp, #4]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	2310      	movs	r3, #16
 800ab9e:	f7f9 fb0b 	bl	80041b8 <HAL_I2C_Mem_Write_IT>
        return AT24Cxx_OK;
 800aba2:	2302      	movs	r3, #2
 800aba4:	e000      	b.n	800aba8 <AT24Cxx_write_buffer+0x48>
    } else {
        return AT24Cxx_Error_write;
 800aba6:	2303      	movs	r3, #3
    }
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <AT24Cxx_write_buffer_bloking>:

AT24Cxx_Status AT24Cxx_write_buffer_bloking(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 800abb0:	b5b0      	push	{r4, r5, r7, lr}
 800abb2:	b08a      	sub	sp, #40	@ 0x28
 800abb4:	af04      	add	r7, sp, #16
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	607a      	str	r2, [r7, #4]
 800abba:	461a      	mov	r2, r3
 800abbc:	460b      	mov	r3, r1
 800abbe:	817b      	strh	r3, [r7, #10]
 800abc0:	4613      	mov	r3, r2
 800abc2:	813b      	strh	r3, [r7, #8]
    uint8_t page_remaining = AT24C256_PG_SIZE - (mem_addr % AT24C256_PG_SIZE); /* num bytes written in current page from address */
 800abc4:	897b      	ldrh	r3, [r7, #10]
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800abd2:	75fb      	strb	r3, [r7, #23]

    if (buf_length < page_remaining) page_remaining = buf_length;
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	893a      	ldrh	r2, [r7, #8]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d201      	bcs.n	800abe2 <AT24Cxx_write_buffer_bloking+0x32>
 800abde:	893b      	ldrh	r3, [r7, #8]
 800abe0:	75fb      	strb	r3, [r7, #23]
    uint8_t page_write = (buf_length - page_remaining) / AT24C256_PG_SIZE;   /* num pages can write full */
 800abe2:	893a      	ldrh	r2, [r7, #8]
 800abe4:	7dfb      	ldrb	r3, [r7, #23]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	da00      	bge.n	800abee <AT24Cxx_write_buffer_bloking+0x3e>
 800abec:	333f      	adds	r3, #63	@ 0x3f
 800abee:	119b      	asrs	r3, r3, #6
 800abf0:	757b      	strb	r3, [r7, #21]
    uint8_t byte_remaining = (buf_length - page_remaining) % AT24C256_PG_SIZE; /* num bytes remain after write all full page */
 800abf2:	893a      	ldrh	r2, [r7, #8]
 800abf4:	7dfb      	ldrb	r3, [r7, #23]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	425a      	negs	r2, r3
 800abfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abfe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ac02:	bf58      	it	pl
 800ac04:	4253      	negpl	r3, r2
 800ac06:	753b      	strb	r3, [r7, #20]

    /* write in current page */
    if (page_remaining > 0x00 && (mem_addr + page_remaining) < AT24C256_MAX_ADDR) {
 800ac08:	7dfb      	ldrb	r3, [r7, #23]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d02b      	beq.n	800ac66 <AT24Cxx_write_buffer_bloking+0xb6>
 800ac0e:	897a      	ldrh	r2, [r7, #10]
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
 800ac12:	4413      	add	r3, r2
 800ac14:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	dc24      	bgt.n	800ac66 <AT24Cxx_write_buffer_bloking+0xb6>
        while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,page_remaining,AT24C256_I2C_TIMOUT) != HAL_OK);
 800ac1c:	bf00      	nop
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	791b      	ldrb	r3, [r3, #4]
 800ac26:	461c      	mov	r4, r3
 800ac28:	7dfb      	ldrb	r3, [r7, #23]
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	897a      	ldrh	r2, [r7, #10]
 800ac2e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800ac32:	9102      	str	r1, [sp, #8]
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	2310      	movs	r3, #16
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	f7f8 ff4d 	bl	8003adc <HAL_I2C_Mem_Write>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1ea      	bne.n	800ac1e <AT24Cxx_write_buffer_bloking+0x6e>
        if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6818      	ldr	r0, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	791b      	ldrb	r3, [r3, #4]
 800ac50:	4619      	mov	r1, r3
 800ac52:	2305      	movs	r3, #5
 800ac54:	2264      	movs	r2, #100	@ 0x64
 800ac56:	f7f9 fb5b 	bl	8004310 <HAL_I2C_IsDeviceReady>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d102      	bne.n	800ac66 <AT24Cxx_write_buffer_bloking+0xb6>
            printf("transmit i2c success\n");
 800ac60:	4852      	ldr	r0, [pc, #328]	@ (800adac <AT24Cxx_write_buffer_bloking+0x1fc>)
 800ac62:	f003 f9e9 	bl	800e038 <puts>
        }
    }

    /* write full page */
    for (uint8_t cur_page = 0; cur_page < page_write; cur_page ++) {
 800ac66:	2300      	movs	r3, #0
 800ac68:	75bb      	strb	r3, [r7, #22]
 800ac6a:	e048      	b.n	800acfe <AT24Cxx_write_buffer_bloking+0x14e>
        if ((mem_addr + page_remaining+ (cur_page * AT24C256_PG_SIZE)) > 0x00 && (mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)) < AT24C256_MAX_ADDR) {
 800ac6c:	897a      	ldrh	r2, [r7, #10]
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
 800ac70:	441a      	add	r2, r3
 800ac72:	7dbb      	ldrb	r3, [r7, #22]
 800ac74:	019b      	lsls	r3, r3, #6
 800ac76:	4413      	add	r3, r2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dd3d      	ble.n	800acf8 <AT24Cxx_write_buffer_bloking+0x148>
 800ac7c:	897a      	ldrh	r2, [r7, #10]
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
 800ac80:	441a      	add	r2, r3
 800ac82:	7dbb      	ldrb	r3, [r7, #22]
 800ac84:	019b      	lsls	r3, r3, #6
 800ac86:	4413      	add	r3, r2
 800ac88:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	dc33      	bgt.n	800acf8 <AT24Cxx_write_buffer_bloking+0x148>
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,(uint16_t)(mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)),
 800ac90:	bf00      	nop
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6818      	ldr	r0, [r3, #0]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	791b      	ldrb	r3, [r3, #4]
 800ac9a:	461c      	mov	r4, r3
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	897b      	ldrh	r3, [r7, #10]
 800aca2:	4413      	add	r3, r2
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	7dbb      	ldrb	r3, [r7, #22]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	019b      	lsls	r3, r3, #6
 800acac:	b29b      	uxth	r3, r3
 800acae:	4413      	add	r3, r2
 800acb0:	b299      	uxth	r1, r3
                    I2C_MEMADD_SIZE_16BIT,
                    data_buf + page_remaining + (cur_page * AT24C256_PG_SIZE),
 800acb2:	7dfb      	ldrb	r3, [r7, #23]
 800acb4:	7dba      	ldrb	r2, [r7, #22]
 800acb6:	0192      	lsls	r2, r2, #6
 800acb8:	4413      	add	r3, r2
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,(uint16_t)(mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)),
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	4413      	add	r3, r2
 800acbe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800acc2:	9202      	str	r2, [sp, #8]
 800acc4:	2240      	movs	r2, #64	@ 0x40
 800acc6:	9201      	str	r2, [sp, #4]
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	2310      	movs	r3, #16
 800accc:	460a      	mov	r2, r1
 800acce:	4621      	mov	r1, r4
 800acd0:	f7f8 ff04 	bl	8003adc <HAL_I2C_Mem_Write>
 800acd4:	4603      	mov	r3, r0
                    AT24C256_PG_SIZE,
                    AT24C256_I2C_TIMOUT) != HAL_OK);
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1db      	bne.n	800ac92 <AT24Cxx_write_buffer_bloking+0xe2>
            if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6818      	ldr	r0, [r3, #0]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	791b      	ldrb	r3, [r3, #4]
 800ace2:	4619      	mov	r1, r3
 800ace4:	2305      	movs	r3, #5
 800ace6:	2264      	movs	r2, #100	@ 0x64
 800ace8:	f7f9 fb12 	bl	8004310 <HAL_I2C_IsDeviceReady>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d102      	bne.n	800acf8 <AT24Cxx_write_buffer_bloking+0x148>
                printf("transmit i2c success\n");
 800acf2:	482e      	ldr	r0, [pc, #184]	@ (800adac <AT24Cxx_write_buffer_bloking+0x1fc>)
 800acf4:	f003 f9a0 	bl	800e038 <puts>
    for (uint8_t cur_page = 0; cur_page < page_write; cur_page ++) {
 800acf8:	7dbb      	ldrb	r3, [r7, #22]
 800acfa:	3301      	adds	r3, #1
 800acfc:	75bb      	strb	r3, [r7, #22]
 800acfe:	7dba      	ldrb	r2, [r7, #22]
 800ad00:	7d7b      	ldrb	r3, [r7, #21]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d3b2      	bcc.n	800ac6c <AT24Cxx_write_buffer_bloking+0xbc>
            }
        }
    }

    /* write bytes after write full page still remain */
    if (byte_remaining != 0) {
 800ad06:	7d3b      	ldrb	r3, [r7, #20]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d046      	beq.n	800ad9a <AT24Cxx_write_buffer_bloking+0x1ea>
        if ((mem_addr + page_remaining + (page_write * AT24C256_PG_SIZE)) > 0x00 && (mem_addr + page_remaining+ (page_write * AT24C256_PG_SIZE)) < AT24C256_MAX_ADDR) {
 800ad0c:	897a      	ldrh	r2, [r7, #10]
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	441a      	add	r2, r3
 800ad12:	7d7b      	ldrb	r3, [r7, #21]
 800ad14:	019b      	lsls	r3, r3, #6
 800ad16:	4413      	add	r3, r2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	dd3e      	ble.n	800ad9a <AT24Cxx_write_buffer_bloking+0x1ea>
 800ad1c:	897a      	ldrh	r2, [r7, #10]
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	441a      	add	r2, r3
 800ad22:	7d7b      	ldrb	r3, [r7, #21]
 800ad24:	019b      	lsls	r3, r3, #6
 800ad26:	4413      	add	r3, r2
 800ad28:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	dc34      	bgt.n	800ad9a <AT24Cxx_write_buffer_bloking+0x1ea>
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 800ad30:	bf00      	nop
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	791b      	ldrb	r3, [r3, #4]
 800ad3a:	461d      	mov	r5, r3
                    (uint16_t)(mem_addr + page_remaining + (page_write * AT24C256_PG_SIZE)),
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	897b      	ldrh	r3, [r7, #10]
 800ad42:	4413      	add	r3, r2
 800ad44:	b29a      	uxth	r2, r3
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 800ad46:	7d7b      	ldrb	r3, [r7, #21]
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	019b      	lsls	r3, r3, #6
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	4413      	add	r3, r2
 800ad50:	b299      	uxth	r1, r3
                    I2C_MEMADD_SIZE_16BIT,
                    data_buf + page_remaining + (page_write * AT24C256_PG_SIZE),
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	7d7a      	ldrb	r2, [r7, #21]
 800ad56:	0192      	lsls	r2, r2, #6
 800ad58:	4413      	add	r3, r2
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	7d3a      	ldrb	r2, [r7, #20]
 800ad60:	b292      	uxth	r2, r2
 800ad62:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 800ad66:	9402      	str	r4, [sp, #8]
 800ad68:	9201      	str	r2, [sp, #4]
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	2310      	movs	r3, #16
 800ad6e:	460a      	mov	r2, r1
 800ad70:	4629      	mov	r1, r5
 800ad72:	f7f8 feb3 	bl	8003adc <HAL_I2C_Mem_Write>
 800ad76:	4603      	mov	r3, r0
                    byte_remaining,
                    AT24C256_I2C_TIMOUT) == HAL_OK) {
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d0da      	beq.n	800ad32 <AT24Cxx_write_buffer_bloking+0x182>
                    } 
            if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6818      	ldr	r0, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	791b      	ldrb	r3, [r3, #4]
 800ad84:	4619      	mov	r1, r3
 800ad86:	2305      	movs	r3, #5
 800ad88:	2264      	movs	r2, #100	@ 0x64
 800ad8a:	f7f9 fac1 	bl	8004310 <HAL_I2C_IsDeviceReady>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d102      	bne.n	800ad9a <AT24Cxx_write_buffer_bloking+0x1ea>
                printf("transmit i2c success\n");
 800ad94:	4805      	ldr	r0, [pc, #20]	@ (800adac <AT24Cxx_write_buffer_bloking+0x1fc>)
 800ad96:	f003 f94f 	bl	800e038 <puts>
            }
        }
    }
    HAL_Delay(10);
 800ad9a:	200a      	movs	r0, #10
 800ad9c:	f7f7 fb28 	bl	80023f0 <HAL_Delay>
}
 800ada0:	bf00      	nop
 800ada2:	4618      	mov	r0, r3
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bdb0      	pop	{r4, r5, r7, pc}
 800adaa:	bf00      	nop
 800adac:	08010ed0 	.word	0x08010ed0

0800adb0 <AT24Cxx_read_buffer>:

AT24Cxx_Status AT24Cxx_read_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t *data_ret, uint16_t buf_length) {
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af04      	add	r7, sp, #16
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	607a      	str	r2, [r7, #4]
 800adba:	461a      	mov	r2, r3
 800adbc:	460b      	mov	r3, r1
 800adbe:	817b      	strh	r3, [r7, #10]
 800adc0:	4613      	mov	r3, r2
 800adc2:	813b      	strh	r3, [r7, #8]
    if (mem_addr < AT24C256_MAX_ADDR) {
 800adc4:	897b      	ldrh	r3, [r7, #10]
 800adc6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800adca:	4293      	cmp	r3, r2
 800adcc:	d815      	bhi.n	800adfa <AT24Cxx_read_buffer+0x4a>
        while (HAL_I2C_Mem_Read(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_ret,buf_length,1000) != HAL_OK);
 800adce:	bf00      	nop
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6818      	ldr	r0, [r3, #0]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	791b      	ldrb	r3, [r3, #4]
 800add8:	4619      	mov	r1, r3
 800adda:	897a      	ldrh	r2, [r7, #10]
 800addc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ade0:	9302      	str	r3, [sp, #8]
 800ade2:	893b      	ldrh	r3, [r7, #8]
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	2310      	movs	r3, #16
 800adec:	f7f8 ff70 	bl	8003cd0 <HAL_I2C_Mem_Read>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1ec      	bne.n	800add0 <AT24Cxx_read_buffer+0x20>
        return AT24Cxx_OK;
 800adf6:	2302      	movs	r3, #2
 800adf8:	e000      	b.n	800adfc <AT24Cxx_read_buffer+0x4c>
    } else {
        return AT24Cxx_Error_read;
 800adfa:	2304      	movs	r3, #4
    }
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <DS3231_Init>:
#include "DS3231.h"

static uint8_t decToBcd(int val);
static int bcdToDec(uint8_t val);

DS3231_Status DS3231_Init(DS3231_t *pDS3231, I2C_HandleTypeDef *i2c, uint16_t dev_address) {
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	80fb      	strh	r3, [r7, #6]
    pDS3231->i2c_port = i2c;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	601a      	str	r2, [r3, #0]

    pDS3231->dev_address = dev_address << 1;
 800ae18:	88fb      	ldrh	r3, [r7, #6]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	005b      	lsls	r3, r3, #1
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	711a      	strb	r2, [r3, #4]
    if (HAL_I2C_IsDeviceReady(pDS3231->i2c_port,pDS3231->dev_address,1,100) == HAL_OK) {
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6818      	ldr	r0, [r3, #0]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	791b      	ldrb	r3, [r3, #4]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	2364      	movs	r3, #100	@ 0x64
 800ae30:	2201      	movs	r2, #1
 800ae32:	f7f9 fa6d 	bl	8004310 <HAL_I2C_IsDeviceReady>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d101      	bne.n	800ae40 <DS3231_Init+0x3c>
        return DS3231_Init_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	e000      	b.n	800ae42 <DS3231_Init+0x3e>
    }
    return DS3231_Fail;
 800ae40:	2301      	movs	r3, #1
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <DS3231_Read_time>:

DS3231_Status DS3231_Read_time(DS3231_t *pDS3231, uint8_t *data_read) {
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b088      	sub	sp, #32
 800ae4e:	af04      	add	r7, sp, #16
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
    uint8_t get_time[7];
    if (HAL_I2C_Mem_Read(pDS3231->i2c_port, pDS3231->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, data_read, 7, 1000) != HAL_OK) {
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6818      	ldr	r0, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	791b      	ldrb	r3, [r3, #4]
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ae62:	9302      	str	r3, [sp, #8]
 800ae64:	2307      	movs	r3, #7
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f7f8 ff2e 	bl	8003cd0 <HAL_I2C_Mem_Read>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <DS3231_Read_time+0x34>
      return DS3231_Fail;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e03e      	b.n	800aefc <DS3231_Read_time+0xb2>
    }
	
  data_read[0] = bcdToDec(get_time[0]);
 800ae7e:	7a3b      	ldrb	r3, [r7, #8]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 f83f 	bl	800af04 <bcdToDec>
 800ae86:	4603      	mov	r3, r0
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	701a      	strb	r2, [r3, #0]
	data_read[1] = bcdToDec(get_time[1]);
 800ae8e:	7a7b      	ldrb	r3, [r7, #9]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f837 	bl	800af04 <bcdToDec>
 800ae96:	4602      	mov	r2, r0
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	b2d2      	uxtb	r2, r2
 800ae9e:	701a      	strb	r2, [r3, #0]
	data_read[2] = bcdToDec(get_time[2]);
 800aea0:	7abb      	ldrb	r3, [r7, #10]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 f82e 	bl	800af04 <bcdToDec>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	3302      	adds	r3, #2
 800aeae:	b2d2      	uxtb	r2, r2
 800aeb0:	701a      	strb	r2, [r3, #0]
	data_read[3] = bcdToDec(get_time[3]);
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 f825 	bl	800af04 <bcdToDec>
 800aeba:	4602      	mov	r2, r0
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	3303      	adds	r3, #3
 800aec0:	b2d2      	uxtb	r2, r2
 800aec2:	701a      	strb	r2, [r3, #0]
	data_read[4] = bcdToDec(get_time[4]);
 800aec4:	7b3b      	ldrb	r3, [r7, #12]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 f81c 	bl	800af04 <bcdToDec>
 800aecc:	4602      	mov	r2, r0
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	3304      	adds	r3, #4
 800aed2:	b2d2      	uxtb	r2, r2
 800aed4:	701a      	strb	r2, [r3, #0]
	data_read[5] = bcdToDec(get_time[5]);
 800aed6:	7b7b      	ldrb	r3, [r7, #13]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 f813 	bl	800af04 <bcdToDec>
 800aede:	4602      	mov	r2, r0
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	3305      	adds	r3, #5
 800aee4:	b2d2      	uxtb	r2, r2
 800aee6:	701a      	strb	r2, [r3, #0]
	data_read[6] = bcdToDec(get_time[6]);
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 f80a 	bl	800af04 <bcdToDec>
 800aef0:	4602      	mov	r2, r0
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	3306      	adds	r3, #6
 800aef6:	b2d2      	uxtb	r2, r2
 800aef8:	701a      	strb	r2, [r3, #0]
  return DS3231_Write_OK;
 800aefa:	2302      	movs	r3, #2
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
static int bcdToDec(uint8_t val)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	4603      	mov	r3, r0
 800af0c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800af0e:	79fb      	ldrb	r3, [r7, #7]
 800af10:	091b      	lsrs	r3, r3, #4
 800af12:	b2db      	uxtb	r3, r3
 800af14:	461a      	mov	r2, r3
 800af16:	4613      	mov	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	461a      	mov	r2, r3
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	f003 030f 	and.w	r3, r3, #15
 800af26:	4413      	add	r3, r2
}
 800af28:	4618      	mov	r0, r3
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bc80      	pop	{r7}
 800af30:	4770      	bx	lr

0800af32 <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b086      	sub	sp, #24
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	460b      	mov	r3, r1
 800af3c:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 800af3e:	235a      	movs	r3, #90	@ 0x5a
 800af40:	733b      	strb	r3, [r7, #12]
 800af42:	23a5      	movs	r3, #165	@ 0xa5
 800af44:	737b      	strb	r3, [r7, #13]
 800af46:	2307      	movs	r3, #7
 800af48:	73bb      	strb	r3, [r7, #14]
 800af4a:	2382      	movs	r3, #130	@ 0x82
 800af4c:	73fb      	strb	r3, [r7, #15]
 800af4e:	2300      	movs	r3, #0
 800af50:	743b      	strb	r3, [r7, #16]
 800af52:	2384      	movs	r3, #132	@ 0x84
 800af54:	747b      	strb	r3, [r7, #17]
 800af56:	235a      	movs	r3, #90	@ 0x5a
 800af58:	74bb      	strb	r3, [r7, #18]
 800af5a:	2301      	movs	r3, #1
 800af5c:	74fb      	strb	r3, [r7, #19]
 800af5e:	2300      	movs	r3, #0
 800af60:	753b      	strb	r3, [r7, #20]
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6818      	ldr	r0, [r3, #0]
 800af6a:	f107 010c 	add.w	r1, r7, #12
 800af6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800af72:	220a      	movs	r2, #10
 800af74:	f7fc fb13 	bl	800759e <HAL_UART_Transmit>
}
 800af78:	bf00      	nop
 800af7a:	3718      	adds	r7, #24
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, char *textData, uint16_t datalen) {
 800af80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af84:	b08a      	sub	sp, #40	@ 0x28
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	461a      	mov	r2, r3
 800af8e:	460b      	mov	r3, r1
 800af90:	817b      	strh	r3, [r7, #10]
 800af92:	4613      	mov	r3, r2
 800af94:	813b      	strh	r3, [r7, #8]
 800af96:	466b      	mov	r3, sp
 800af98:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 800af9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800af9e:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 800afa0:	893b      	ldrh	r3, [r7, #8]
 800afa2:	f103 0608 	add.w	r6, r3, #8
 800afa6:	1e73      	subs	r3, r6, #1
 800afa8:	627b      	str	r3, [r7, #36]	@ 0x24
 800afaa:	4632      	mov	r2, r6
 800afac:	2300      	movs	r3, #0
 800afae:	4690      	mov	r8, r2
 800afb0:	4699      	mov	r9, r3
 800afb2:	f04f 0200 	mov.w	r2, #0
 800afb6:	f04f 0300 	mov.w	r3, #0
 800afba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800afbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800afc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afc6:	4632      	mov	r2, r6
 800afc8:	2300      	movs	r3, #0
 800afca:	4614      	mov	r4, r2
 800afcc:	461d      	mov	r5, r3
 800afce:	f04f 0200 	mov.w	r2, #0
 800afd2:	f04f 0300 	mov.w	r3, #0
 800afd6:	00eb      	lsls	r3, r5, #3
 800afd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800afdc:	00e2      	lsls	r2, r4, #3
 800afde:	4633      	mov	r3, r6
 800afe0:	3307      	adds	r3, #7
 800afe2:	08db      	lsrs	r3, r3, #3
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	ebad 0d03 	sub.w	sp, sp, r3
 800afea:	466b      	mov	r3, sp
 800afec:	3300      	adds	r3, #0
 800afee:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800aff0:	235a      	movs	r3, #90	@ 0x5a
 800aff2:	753b      	strb	r3, [r7, #20]
 800aff4:	23a5      	movs	r3, #165	@ 0xa5
 800aff6:	757b      	strb	r3, [r7, #21]
 800aff8:	893b      	ldrh	r3, [r7, #8]
 800affa:	b2db      	uxtb	r3, r3
 800affc:	3305      	adds	r3, #5
 800affe:	b2db      	uxtb	r3, r3
 800b000:	75bb      	strb	r3, [r7, #22]
 800b002:	2382      	movs	r3, #130	@ 0x82
 800b004:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800b006:	897b      	ldrh	r3, [r7, #10]
 800b008:	0a1b      	lsrs	r3, r3, #8
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800b00e:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 800b010:	897b      	ldrh	r3, [r7, #10]
 800b012:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 800b014:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 800b016:	6a3b      	ldr	r3, [r7, #32]
 800b018:	461a      	mov	r2, r3
 800b01a:	f107 0314 	add.w	r3, r7, #20
 800b01e:	6818      	ldr	r0, [r3, #0]
 800b020:	6010      	str	r0, [r2, #0]
 800b022:	889b      	ldrh	r3, [r3, #4]
 800b024:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	3306      	adds	r3, #6
 800b02a:	893a      	ldrh	r2, [r7, #8]
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4618      	mov	r0, r3
 800b030:	f003 fa23 	bl	800e47a <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 800b034:	893b      	ldrh	r3, [r7, #8]
 800b036:	3306      	adds	r3, #6
 800b038:	461a      	mov	r2, r3
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	4413      	add	r3, r2
 800b03e:	8bba      	ldrh	r2, [r7, #28]
 800b040:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6818      	ldr	r0, [r3, #0]
 800b046:	b2b2      	uxth	r2, r6
 800b048:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b04c:	6a39      	ldr	r1, [r7, #32]
 800b04e:	f7fc faa6 	bl	800759e <HAL_UART_Transmit>
 800b052:	46d5      	mov	sp, sl
}
 800b054:	bf00      	nop
 800b056:	3728      	adds	r7, #40	@ 0x28
 800b058:	46bd      	mov	sp, r7
 800b05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800b060 <DWIN_ClearText>:

void DWIN_ClearText(Dwin_t *pDwin, uint16_t VP_address) {
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	460b      	mov	r3, r1
 800b06a:	807b      	strh	r3, [r7, #2]
    DWIN_SetText(pDwin,VP_address,(uint8_t *)"",strlen(""));
 800b06c:	8879      	ldrh	r1, [r7, #2]
 800b06e:	2300      	movs	r3, #0
 800b070:	4a03      	ldr	r2, [pc, #12]	@ (800b080 <DWIN_ClearText+0x20>)
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff ff84 	bl	800af80 <DWIN_SetText>
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	08010ee8 	.word	0x08010ee8

0800b084 <DWIN_SetVariable_Icon>:
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
}

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	807b      	strh	r3, [r7, #2]
 800b090:	4613      	mov	r3, r2
 800b092:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800b094:	235a      	movs	r3, #90	@ 0x5a
 800b096:	723b      	strb	r3, [r7, #8]
 800b098:	23a5      	movs	r3, #165	@ 0xa5
 800b09a:	727b      	strb	r3, [r7, #9]
 800b09c:	2305      	movs	r3, #5
 800b09e:	72bb      	strb	r3, [r7, #10]
 800b0a0:	2382      	movs	r3, #130	@ 0x82
 800b0a2:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 800b0a4:	887b      	ldrh	r3, [r7, #2]
 800b0a6:	0a1b      	lsrs	r3, r3, #8
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800b0ac:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 800b0ae:	887b      	ldrh	r3, [r7, #2]
 800b0b0:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800b0b2:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 800b0b4:	883b      	ldrh	r3, [r7, #0]
 800b0b6:	0a1b      	lsrs	r3, r3, #8
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800b0bc:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 800b0be:	883b      	ldrh	r3, [r7, #0]
 800b0c0:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 800b0c2:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6818      	ldr	r0, [r3, #0]
 800b0c8:	f107 0108 	add.w	r1, r7, #8
 800b0cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b0d0:	2208      	movs	r2, #8
 800b0d2:	f7fc fa64 	bl	800759e <HAL_UART_Transmit>
}
 800b0d6:	bf00      	nop
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <DWIN_SetArray_Icon>:

void DWIN_SetArray_Icon(Dwin_t *pDwin, uint16_t VP_address_begin, uint8_t *data_array, uint8_t data_length ) {
 800b0de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0e2:	b08b      	sub	sp, #44	@ 0x2c
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	607a      	str	r2, [r7, #4]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	817b      	strh	r3, [r7, #10]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	727b      	strb	r3, [r7, #9]
 800b0f4:	466b      	mov	r3, sp
 800b0f6:	461e      	mov	r6, r3
    uint16_t Total_Data_Length = data_length * 2;
 800b0f8:	7a7b      	ldrb	r3, [r7, #9]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	005b      	lsls	r3, r3, #1
 800b0fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t sendBuffer[6 +Total_Data_Length];
 800b100:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b102:	1d99      	adds	r1, r3, #6
 800b104:	1e4b      	subs	r3, r1, #1
 800b106:	623b      	str	r3, [r7, #32]
 800b108:	460a      	mov	r2, r1
 800b10a:	2300      	movs	r3, #0
 800b10c:	4690      	mov	r8, r2
 800b10e:	4699      	mov	r9, r3
 800b110:	f04f 0200 	mov.w	r2, #0
 800b114:	f04f 0300 	mov.w	r3, #0
 800b118:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b11c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b120:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b124:	460a      	mov	r2, r1
 800b126:	2300      	movs	r3, #0
 800b128:	4614      	mov	r4, r2
 800b12a:	461d      	mov	r5, r3
 800b12c:	f04f 0200 	mov.w	r2, #0
 800b130:	f04f 0300 	mov.w	r3, #0
 800b134:	00eb      	lsls	r3, r5, #3
 800b136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b13a:	00e2      	lsls	r2, r4, #3
 800b13c:	460b      	mov	r3, r1
 800b13e:	3307      	adds	r3, #7
 800b140:	08db      	lsrs	r3, r3, #3
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	ebad 0d03 	sub.w	sp, sp, r3
 800b148:	466b      	mov	r3, sp
 800b14a:	3300      	adds	r3, #0
 800b14c:	61fb      	str	r3, [r7, #28]
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800b14e:	235a      	movs	r3, #90	@ 0x5a
 800b150:	753b      	strb	r3, [r7, #20]
 800b152:	23a5      	movs	r3, #165	@ 0xa5
 800b154:	757b      	strb	r3, [r7, #21]
 800b156:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	3303      	adds	r3, #3
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	75bb      	strb	r3, [r7, #22]
 800b160:	2382      	movs	r3, #130	@ 0x82
 800b162:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800b164:	897b      	ldrh	r3, [r7, #10]
 800b166:	0a1b      	lsrs	r3, r3, #8
 800b168:	b29b      	uxth	r3, r3
 800b16a:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800b16c:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 800b16e:	897b      	ldrh	r3, [r7, #10]
 800b170:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 800b172:	767b      	strb	r3, [r7, #25]

    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	461a      	mov	r2, r3
 800b178:	f107 0314 	add.w	r3, r7, #20
 800b17c:	6818      	ldr	r0, [r3, #0]
 800b17e:	6010      	str	r0, [r2, #0]
 800b180:	889b      	ldrh	r3, [r3, #4]
 800b182:	8093      	strh	r3, [r2, #4]
    /* Convert data array uint8_t to uint16_t */
    for (uint16_t i = 0; i < data_length; i++) {
 800b184:	2300      	movs	r3, #0
 800b186:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b188:	e012      	b.n	800b1b0 <DWIN_SetArray_Icon+0xd2>
        sendBuffer[6 + (i * 2)] = 0x00;              // High byte 
 800b18a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b18c:	3303      	adds	r3, #3
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	69fa      	ldr	r2, [r7, #28]
 800b192:	2000      	movs	r0, #0
 800b194:	54d0      	strb	r0, [r2, r3]
        sendBuffer[6 + (i * 2) + 1] = data_array[i]; // Low byte is data
 800b196:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	441a      	add	r2, r3
 800b19c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b19e:	3303      	adds	r3, #3
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	7810      	ldrb	r0, [r2, #0]
 800b1a6:	69fa      	ldr	r2, [r7, #28]
 800b1a8:	54d0      	strb	r0, [r2, r3]
    for (uint16_t i = 0; i < data_length; i++) {
 800b1aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b1b0:	7a7b      	ldrb	r3, [r7, #9]
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d3e7      	bcc.n	800b18a <DWIN_SetArray_Icon+0xac>
    }

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	b28a      	uxth	r2, r1
 800b1c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b1c4:	69f9      	ldr	r1, [r7, #28]
 800b1c6:	f7fc f9ea 	bl	800759e <HAL_UART_Transmit>
 800b1ca:	46b5      	mov	sp, r6
}
 800b1cc:	bf00      	nop
 800b1ce:	372c      	adds	r7, #44	@ 0x2c
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b1d6 <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b083      	sub	sp, #12
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	609a      	str	r2, [r3, #8]
}
 800b1e6:	bf00      	nop
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc80      	pop	{r7}
 800b1ee:	4770      	bx	lr

0800b1f0 <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
    uint16_t VPaddress;
    uint16_t lowByte;
    uint16_t highByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	2b5a      	cmp	r3, #90	@ 0x5a
 800b200:	d133      	bne.n	800b26a <DWIN_Listen+0x7a>
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	3301      	adds	r3, #1
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2ba5      	cmp	r3, #165	@ 0xa5
 800b20a:	d12e      	bne.n	800b26a <DWIN_Listen+0x7a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	3303      	adds	r3, #3
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b83      	cmp	r3, #131	@ 0x83
 800b214:	d129      	bne.n	800b26a <DWIN_Listen+0x7a>
        {
            datalength = RX_Buffer[2];
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	789b      	ldrb	r3, [r3, #2]
 800b21a:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
 800b21e:	3302      	adds	r3, #2
 800b220:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	3304      	adds	r3, #4
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	b21b      	sxth	r3, r3
 800b22a:	021b      	lsls	r3, r3, #8
 800b22c:	b21a      	sxth	r2, r3
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	3305      	adds	r3, #5
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	b21b      	sxth	r3, r3
 800b236:	4313      	orrs	r3, r2
 800b238:	b21b      	sxth	r3, r3
 800b23a:	81bb      	strh	r3, [r7, #12]
            /* get return key value */
            lowByte = RX_Buffer[datalength];  
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	4413      	add	r3, r2
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	817b      	strh	r3, [r7, #10]
            highByte = RX_Buffer[datalength-1];
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	3b01      	subs	r3, #1
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	4413      	add	r3, r2
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	813b      	strh	r3, [r7, #8]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d007      	beq.n	800b26a <DWIN_Listen+0x7a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lowByte,highByte);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	897a      	ldrh	r2, [r7, #10]
 800b260:	b2d1      	uxtb	r1, r2
 800b262:	893a      	ldrh	r2, [r7, #8]
 800b264:	b2d2      	uxtb	r2, r2
 800b266:	89b8      	ldrh	r0, [r7, #12]
 800b268:	4798      	blx	r3
            }
        }
    }

    
}
 800b26a:	bf00      	nop
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <isotp_ms_to_st_min>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 800b272:	b480      	push	{r7}
 800b274:	b085      	sub	sp, #20
 800b276:	af00      	add	r7, sp, #0
 800b278:	4603      	mov	r3, r0
 800b27a:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 800b27c:	79fb      	ldrb	r3, [r7, #7]
 800b27e:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 800b280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b284:	2b00      	cmp	r3, #0
 800b286:	da01      	bge.n	800b28c <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 800b288:	237f      	movs	r3, #127	@ 0x7f
 800b28a:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	bc80      	pop	{r7}
 800b296:	4770      	bx	lr

0800b298 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9) {
 800b2a2:	79fb      	ldrb	r3, [r7, #7]
 800b2a4:	2bf0      	cmp	r3, #240	@ 0xf0
 800b2a6:	d905      	bls.n	800b2b4 <isotp_st_min_to_ms+0x1c>
 800b2a8:	79fb      	ldrb	r3, [r7, #7]
 800b2aa:	2bf9      	cmp	r3, #249	@ 0xf9
 800b2ac:	d802      	bhi.n	800b2b4 <isotp_st_min_to_ms+0x1c>
        ms = 1;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	73fb      	strb	r3, [r7, #15]
 800b2b2:	e008      	b.n	800b2c6 <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 800b2b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	db02      	blt.n	800b2c2 <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 800b2bc:	79fb      	ldrb	r3, [r7, #7]
 800b2be:	73fb      	strb	r3, [r7, #15]
 800b2c0:	e001      	b.n	800b2c6 <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bc80      	pop	{r7}
 800b2d0:	4770      	bx	lr

0800b2d2 <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b086      	sub	sp, #24
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	4608      	mov	r0, r1
 800b2dc:	4611      	mov	r1, r2
 800b2de:	461a      	mov	r2, r3
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	70fb      	strb	r3, [r7, #3]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	70bb      	strb	r3, [r7, #2]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 800b2ec:	7b3b      	ldrb	r3, [r7, #12]
 800b2ee:	2203      	movs	r2, #3
 800b2f0:	f362 1307 	bfi	r3, r2, #4, #4
 800b2f4:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 800b2f6:	78fb      	ldrb	r3, [r7, #3]
 800b2f8:	f003 030f 	and.w	r3, r3, #15
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	7b3b      	ldrb	r3, [r7, #12]
 800b300:	f362 0303 	bfi	r3, r2, #0, #4
 800b304:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 800b306:	78bb      	ldrb	r3, [r7, #2]
 800b308:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 800b30a:	787b      	ldrb	r3, [r7, #1]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff ffb0 	bl	800b272 <isotp_ms_to_st_min>
 800b312:	4603      	mov	r3, r0
 800b314:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
 800b316:	f107 030c 	add.w	r3, r7, #12
 800b31a:	3303      	adds	r3, #3
 800b31c:	2205      	movs	r2, #5
 800b31e:	2100      	movs	r1, #0
 800b320:	4618      	mov	r0, r3
 800b322:	f002 ffd1 	bl	800e2c8 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f107 010c 	add.w	r1, r7, #12
 800b32e:	2208      	movs	r2, #8
 800b330:	4618      	mov	r0, r3
 800b332:	f7f6 fcc5 	bl	8001cc0 <isotp_user_send_can>
 800b336:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 800b338:	697b      	ldr	r3, [r7, #20]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
	...

0800b344 <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	895b      	ldrh	r3, [r3, #10]
 800b352:	2b07      	cmp	r3, #7
 800b354:	d905      	bls.n	800b362 <isotp_send_single_frame+0x1e>
 800b356:	4b1d      	ldr	r3, [pc, #116]	@ (800b3cc <isotp_send_single_frame+0x88>)
 800b358:	4a1d      	ldr	r2, [pc, #116]	@ (800b3d0 <isotp_send_single_frame+0x8c>)
 800b35a:	2142      	movs	r1, #66	@ 0x42
 800b35c:	481d      	ldr	r0, [pc, #116]	@ (800b3d4 <isotp_send_single_frame+0x90>)
 800b35e:	f000 ff53 	bl	800c208 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 800b362:	7b3b      	ldrb	r3, [r7, #12]
 800b364:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b368:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	895b      	ldrh	r3, [r3, #10]
 800b36e:	f003 030f 	and.w	r3, r3, #15
 800b372:	b2da      	uxtb	r2, r3
 800b374:	7b3b      	ldrb	r3, [r7, #12]
 800b376:	f362 0303 	bfi	r3, r2, #0, #4
 800b37a:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6859      	ldr	r1, [r3, #4]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	895b      	ldrh	r3, [r3, #10]
 800b384:	461a      	mov	r2, r3
 800b386:	f107 030c 	add.w	r3, r7, #12
 800b38a:	3301      	adds	r3, #1
 800b38c:	4618      	mov	r0, r3
 800b38e:	f003 f874 	bl	800e47a <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	895b      	ldrh	r3, [r3, #10]
 800b396:	461a      	mov	r2, r3
 800b398:	f107 030c 	add.w	r3, r7, #12
 800b39c:	3301      	adds	r3, #1
 800b39e:	1898      	adds	r0, r3, r2
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	895b      	ldrh	r3, [r3, #10]
 800b3a4:	f1c3 0307 	rsb	r3, r3, #7
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	f002 ff8c 	bl	800e2c8 <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800b3b0:	f107 030c 	add.w	r3, r7, #12
 800b3b4:	2208      	movs	r2, #8
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6838      	ldr	r0, [r7, #0]
 800b3ba:	f7f6 fc81 	bl	8001cc0 <isotp_user_send_can>
 800b3be:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 800b3c0:	697b      	ldr	r3, [r7, #20]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	08010eec 	.word	0x08010eec
 800b3d0:	080111ec 	.word	0x080111ec
 800b3d4:	08010f04 	.word	0x08010f04

0800b3d8 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	895b      	ldrh	r3, [r3, #10]
 800b3e6:	2b07      	cmp	r3, #7
 800b3e8:	d805      	bhi.n	800b3f6 <isotp_send_first_frame+0x1e>
 800b3ea:	4b1d      	ldr	r3, [pc, #116]	@ (800b460 <isotp_send_first_frame+0x88>)
 800b3ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b464 <isotp_send_first_frame+0x8c>)
 800b3ee:	215c      	movs	r1, #92	@ 0x5c
 800b3f0:	481d      	ldr	r0, [pc, #116]	@ (800b468 <isotp_send_first_frame+0x90>)
 800b3f2:	f000 ff09 	bl	800c208 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 800b3f6:	7b3b      	ldrb	r3, [r7, #12]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f362 1307 	bfi	r3, r2, #4, #4
 800b3fe:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	895b      	ldrh	r3, [r3, #10]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	895b      	ldrh	r3, [r3, #10]
 800b40c:	0a1b      	lsrs	r3, r3, #8
 800b40e:	b29b      	uxth	r3, r3
 800b410:	f003 030f 	and.w	r3, r3, #15
 800b414:	b2da      	uxtb	r2, r3
 800b416:	7b3b      	ldrb	r3, [r7, #12]
 800b418:	f362 0303 	bfi	r3, r2, #0, #4
 800b41c:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	f107 030e 	add.w	r3, r7, #14
 800b426:	6811      	ldr	r1, [r2, #0]
 800b428:	6019      	str	r1, [r3, #0]
 800b42a:	8892      	ldrh	r2, [r2, #4]
 800b42c:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800b42e:	f107 030c 	add.w	r3, r7, #12
 800b432:	2208      	movs	r2, #8
 800b434:	4619      	mov	r1, r3
 800b436:	6838      	ldr	r0, [r7, #0]
 800b438:	f7f6 fc42 	bl	8001cc0 <isotp_user_send_can>
 800b43c:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d108      	bne.n	800b456 <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	899b      	ldrh	r3, [r3, #12]
 800b448:	3306      	adds	r3, #6
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 800b456:	697b      	ldr	r3, [r7, #20]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	08010f1c 	.word	0x08010f1c
 800b464:	08011204 	.word	0x08011204
 800b468:	08010f04 	.word	0x08010f04

0800b46c <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	895b      	ldrh	r3, [r3, #10]
 800b478:	2b07      	cmp	r3, #7
 800b47a:	d805      	bhi.n	800b488 <isotp_send_consecutive_frame+0x1c>
 800b47c:	4b2d      	ldr	r3, [pc, #180]	@ (800b534 <isotp_send_consecutive_frame+0xc8>)
 800b47e:	4a2e      	ldr	r2, [pc, #184]	@ (800b538 <isotp_send_consecutive_frame+0xcc>)
 800b480:	2175      	movs	r1, #117	@ 0x75
 800b482:	482e      	ldr	r0, [pc, #184]	@ (800b53c <isotp_send_consecutive_frame+0xd0>)
 800b484:	f000 fec0 	bl	800c208 <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 800b488:	7a3b      	ldrb	r3, [r7, #8]
 800b48a:	2202      	movs	r2, #2
 800b48c:	f362 1307 	bfi	r3, r2, #4, #4
 800b490:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	7b9b      	ldrb	r3, [r3, #14]
 800b496:	f003 030f 	and.w	r3, r3, #15
 800b49a:	b2da      	uxtb	r2, r3
 800b49c:	7a3b      	ldrb	r3, [r7, #8]
 800b49e:	f362 0303 	bfi	r3, r2, #0, #4
 800b4a2:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	895a      	ldrh	r2, [r3, #10]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	899b      	ldrh	r3, [r3, #12]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 800b4b0:	8afb      	ldrh	r3, [r7, #22]
 800b4b2:	2b07      	cmp	r3, #7
 800b4b4:	d901      	bls.n	800b4ba <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 800b4b6:	2307      	movs	r3, #7
 800b4b8:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	8992      	ldrh	r2, [r2, #12]
 800b4c2:	1899      	adds	r1, r3, r2
 800b4c4:	8afa      	ldrh	r2, [r7, #22]
 800b4c6:	f107 0308 	add.w	r3, r7, #8
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f002 ffd4 	bl	800e47a <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0, sizeof(message.as.consecutive_frame.data) - data_length);
 800b4d2:	8afb      	ldrh	r3, [r7, #22]
 800b4d4:	f107 0208 	add.w	r2, r7, #8
 800b4d8:	3201      	adds	r2, #1
 800b4da:	18d0      	adds	r0, r2, r3
 800b4dc:	8afb      	ldrh	r3, [r7, #22]
 800b4de:	f1c3 0307 	rsb	r3, r3, #7
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	f002 feef 	bl	800e2c8 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f107 0108 	add.w	r1, r7, #8
 800b4f2:	2208      	movs	r2, #8
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7f6 fbe3 	bl	8001cc0 <isotp_user_send_can>
 800b4fa:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d113      	bne.n	800b52a <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	899a      	ldrh	r2, [r3, #12]
 800b506:	8afb      	ldrh	r3, [r7, #22]
 800b508:	4413      	add	r3, r2
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	7b9b      	ldrb	r3, [r3, #14]
 800b514:	3301      	adds	r3, #1
 800b516:	b2da      	uxtb	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	739a      	strb	r2, [r3, #14]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	7b9b      	ldrb	r3, [r3, #14]
 800b520:	2b0f      	cmp	r3, #15
 800b522:	d902      	bls.n	800b52a <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	739a      	strb	r2, [r3, #14]
        }
    }
    
    return ret;
 800b52a:	693b      	ldr	r3, [r7, #16]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	08010f1c 	.word	0x08010f1c
 800b538:	0801121c 	.word	0x0801121c
 800b53c:	08010f04 	.word	0x08010f04

0800b540 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	4613      	mov	r3, r2
 800b54c:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	f003 030f 	and.w	r3, r3, #15
 800b556:	b2db      	uxtb	r3, r3
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d008      	beq.n	800b56e <isotp_receive_single_frame+0x2e>
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b564:	b2db      	uxtb	r3, r3
 800b566:	461a      	mov	r2, r3
 800b568:	79fb      	ldrb	r3, [r7, #7]
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d805      	bhi.n	800b57a <isotp_receive_single_frame+0x3a>
        isotp_user_debug("Single-frame length too small.");
 800b56e:	480f      	ldr	r0, [pc, #60]	@ (800b5ac <isotp_receive_single_frame+0x6c>)
 800b570:	f7f6 fbd7 	bl	8001d22 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800b574:	f06f 0306 	mvn.w	r3, #6
 800b578:	e014      	b.n	800b5a4 <isotp_receive_single_frame+0x64>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	1c59      	adds	r1, r3, #1
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	461a      	mov	r2, r3
 800b58e:	f002 ff74 	bl	800e47a <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	461a      	mov	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    
    return ISOTP_RET_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	08010f30 	.word	0x08010f30

0800b5b0 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	2b08      	cmp	r3, #8
 800b5c2:	d005      	beq.n	800b5d0 <isotp_receive_first_frame+0x20>
        isotp_user_debug("First frame should be 8 bytes in length.");
 800b5c4:	481e      	ldr	r0, [pc, #120]	@ (800b640 <isotp_receive_first_frame+0x90>)
 800b5c6:	f7f6 fbac 	bl	8001d22 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800b5ca:	f06f 0306 	mvn.w	r3, #6
 800b5ce:	e033      	b.n	800b638 <isotp_receive_first_frame+0x88>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 800b5dc:	8afb      	ldrh	r3, [r7, #22]
 800b5de:	021b      	lsls	r3, r3, #8
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	7852      	ldrb	r2, [r2, #1]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 800b5ea:	8afb      	ldrh	r3, [r7, #22]
 800b5ec:	2b07      	cmp	r3, #7
 800b5ee:	d805      	bhi.n	800b5fc <isotp_receive_first_frame+0x4c>
        isotp_user_debug("Should not use multiple frame transmission.");
 800b5f0:	4814      	ldr	r0, [pc, #80]	@ (800b644 <isotp_receive_first_frame+0x94>)
 800b5f2:	f7f6 fb96 	bl	8001d22 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800b5f6:	f06f 0306 	mvn.w	r3, #6
 800b5fa:	e01d      	b.n	800b638 <isotp_receive_first_frame+0x88>
    }
    
    if (payload_length > link->receive_buf_size) {
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b600:	8afa      	ldrh	r2, [r7, #22]
 800b602:	429a      	cmp	r2, r3
 800b604:	d905      	bls.n	800b612 <isotp_receive_first_frame+0x62>
        isotp_user_debug("Multi-frame response too large for receiving buffer.");
 800b606:	4810      	ldr	r0, [pc, #64]	@ (800b648 <isotp_receive_first_frame+0x98>)
 800b608:	f7f6 fb8b 	bl	8001d22 <isotp_user_debug>
        return ISOTP_RET_OVERFLOW;
 800b60c:	f06f 0302 	mvn.w	r3, #2
 800b610:	e012      	b.n	800b638 <isotp_receive_first_frame+0x88>
    }
    
    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	3302      	adds	r3, #2
 800b61a:	2206      	movs	r2, #6
 800b61c:	4619      	mov	r1, r3
 800b61e:	f002 ff2c 	bl	800e47a <memcpy>
    link->receive_size = payload_length;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	8afa      	ldrh	r2, [r7, #22]
 800b626:	85da      	strh	r2, [r3, #46]	@ 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2206      	movs	r2, #6
 800b62c:	861a      	strh	r2, [r3, #48]	@ 0x30
    link->receive_sn = 1;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    return ISOTP_RET_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	08010f50 	.word	0x08010f50
 800b644:	08010f7c 	.word	0x08010f7c
 800b648:	08010fa8 	.word	0x08010fa8

0800b64c <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	4613      	mov	r3, r2
 800b658:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	7812      	ldrb	r2, [r2, #0]
 800b664:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800b668:	b2d2      	uxtb	r2, r2
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d002      	beq.n	800b674 <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 800b66e:	f06f 0303 	mvn.w	r3, #3
 800b672:	e038      	b.n	800b6e6 <isotp_receive_consecutive_frame+0x9a>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 800b680:	8afb      	ldrh	r3, [r7, #22]
 800b682:	2b07      	cmp	r3, #7
 800b684:	d901      	bls.n	800b68a <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 800b686:	2307      	movs	r3, #7
 800b688:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 800b68a:	79fa      	ldrb	r2, [r7, #7]
 800b68c:	8afb      	ldrh	r3, [r7, #22]
 800b68e:	429a      	cmp	r2, r3
 800b690:	dc05      	bgt.n	800b69e <isotp_receive_consecutive_frame+0x52>
        isotp_user_debug("Consecutive frame too short.");
 800b692:	4817      	ldr	r0, [pc, #92]	@ (800b6f0 <isotp_receive_consecutive_frame+0xa4>)
 800b694:	f7f6 fb45 	bl	8001d22 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800b698:	f06f 0306 	mvn.w	r3, #6
 800b69c:	e023      	b.n	800b6e6 <isotp_receive_consecutive_frame+0x9a>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 800b6a6:	1898      	adds	r0, r3, r2
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	8afa      	ldrh	r2, [r7, #22]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	f002 fee3 	bl	800e47a <memcpy>

    link->receive_offset += remaining_bytes;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800b6b8:	8afb      	ldrh	r3, [r7, #22]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (++(link->receive_sn) > 0x0F) {
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	b2da      	uxtb	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b6d8:	2b0f      	cmp	r3, #15
 800b6da:	d903      	bls.n	800b6e4 <isotp_receive_consecutive_frame+0x98>
        link->receive_sn = 0;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }

    return ISOTP_RET_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3718      	adds	r7, #24
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	08010fe0 	.word	0x08010fe0

0800b6f4 <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	2b02      	cmp	r3, #2
 800b706:	d805      	bhi.n	800b714 <isotp_receive_flow_control_frame+0x20>
        isotp_user_debug("Flow control frame too short.");
 800b708:	4805      	ldr	r0, [pc, #20]	@ (800b720 <isotp_receive_flow_control_frame+0x2c>)
 800b70a:	f7f6 fb0a 	bl	8001d22 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 800b70e:	f06f 0306 	mvn.w	r3, #6
 800b712:	e000      	b.n	800b716 <isotp_receive_flow_control_frame+0x22>
    }

    return ISOTP_RET_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	08011000 	.word	0x08011000

0800b724 <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	4613      	mov	r3, r2
 800b730:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6819      	ldr	r1, [r3, #0]
 800b736:	88fb      	ldrh	r3, [r7, #6]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f000 f806 	bl	800b74c <isotp_send_with_id>
 800b740:	4603      	mov	r3, r0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b0a6      	sub	sp, #152	@ 0x98
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
 800b758:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d105      	bne.n	800b76c <isotp_send_with_id+0x20>
        isotp_user_debug("Link is null!");
 800b760:	4833      	ldr	r0, [pc, #204]	@ (800b830 <isotp_send_with_id+0xe4>)
 800b762:	f7f6 fade 	bl	8001d22 <isotp_user_debug>
        return ISOTP_RET_ERROR;
 800b766:	f04f 33ff 	mov.w	r3, #4294967295
 800b76a:	e05d      	b.n	800b828 <isotp_send_with_id+0xdc>
    }

    if (size > link->send_buf_size) {
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	891b      	ldrh	r3, [r3, #8]
 800b770:	887a      	ldrh	r2, [r7, #2]
 800b772:	429a      	cmp	r2, r3
 800b774:	d90d      	bls.n	800b792 <isotp_send_with_id+0x46>
        isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
 800b776:	482f      	ldr	r0, [pc, #188]	@ (800b834 <isotp_send_with_id+0xe8>)
 800b778:	f7f6 fad3 	bl	8001d22 <isotp_user_debug>
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 800b77c:	887a      	ldrh	r2, [r7, #2]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	891b      	ldrh	r3, [r3, #8]
 800b782:	f107 0014 	add.w	r0, r7, #20
 800b786:	492c      	ldr	r1, [pc, #176]	@ (800b838 <isotp_send_with_id+0xec>)
 800b788:	f002 fc94 	bl	800e0b4 <siprintf>
        return ISOTP_RET_OVERFLOW;
 800b78c:	f06f 0302 	mvn.w	r3, #2
 800b790:	e04a      	b.n	800b828 <isotp_send_with_id+0xdc>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d105      	bne.n	800b7a8 <isotp_send_with_id+0x5c>
        isotp_user_debug("Abort previous message, transmission in progress.\n");
 800b79c:	4827      	ldr	r0, [pc, #156]	@ (800b83c <isotp_send_with_id+0xf0>)
 800b79e:	f7f6 fac0 	bl	8001d22 <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
 800b7a2:	f06f 0301 	mvn.w	r3, #1
 800b7a6:	e03f      	b.n	800b828 <isotp_send_with_id+0xdc>
    }

    /* copy into local buffer */
    link->send_size = size;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	887a      	ldrh	r2, [r7, #2]
 800b7ac:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	887a      	ldrh	r2, [r7, #2]
 800b7ba:	6879      	ldr	r1, [r7, #4]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f002 fe5c 	bl	800e47a <memcpy>

    if (link->send_size < 8) {
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	895b      	ldrh	r3, [r3, #10]
 800b7c6:	2b07      	cmp	r3, #7
 800b7c8:	d806      	bhi.n	800b7d8 <isotp_send_with_id+0x8c>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 800b7ca:	68b9      	ldr	r1, [r7, #8]
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f7ff fdb9 	bl	800b344 <isotp_send_single_frame>
 800b7d2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800b7d6:	e025      	b.n	800b824 <isotp_send_with_id+0xd8>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 800b7d8:	68b9      	ldr	r1, [r7, #8]
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f7ff fdfc 	bl	800b3d8 <isotp_send_first_frame>
 800b7e0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 800b7e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d11b      	bne.n	800b824 <isotp_send_with_id+0xd8>
            link->send_bs_remain = 0;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 800b7fe:	f7f6 fa89 	bl	8001d14 <isotp_user_get_ms>
 800b802:	4602      	mov	r2, r0
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800b808:	f7f6 fa84 	bl	8001d14 <isotp_user_get_ms>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 800b824:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3798      	adds	r7, #152	@ 0x98
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	08011020 	.word	0x08011020
 800b834:	08011030 	.word	0x08011030
 800b838:	08011084 	.word	0x08011084
 800b83c:	080110b4 	.word	0x080110b4

0800b840 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	4613      	mov	r3, r2
 800b84c:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8) {
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	2b01      	cmp	r3, #1
 800b852:	f240 8143 	bls.w	800badc <isotp_on_can_message+0x29c>
 800b856:	79fb      	ldrb	r3, [r7, #7]
 800b858:	2b08      	cmp	r3, #8
 800b85a:	f200 813f 	bhi.w	800badc <isotp_on_can_message+0x29c>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 800b85e:	79fa      	ldrb	r2, [r7, #7]
 800b860:	f107 0314 	add.w	r3, r7, #20
 800b864:	68b9      	ldr	r1, [r7, #8]
 800b866:	4618      	mov	r0, r3
 800b868:	f002 fe07 	bl	800e47a <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 800b86c:	79fb      	ldrb	r3, [r7, #7]
 800b86e:	f107 0214 	add.w	r2, r7, #20
 800b872:	18d0      	adds	r0, r2, r3
 800b874:	79fb      	ldrb	r3, [r7, #7]
 800b876:	f1c3 0308 	rsb	r3, r3, #8
 800b87a:	461a      	mov	r2, r3
 800b87c:	2100      	movs	r1, #0
 800b87e:	f002 fd23 	bl	800e2c8 <memset>

    switch (message.as.common.type) {
 800b882:	7d3b      	ldrb	r3, [r7, #20]
 800b884:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b03      	cmp	r3, #3
 800b88c:	f200 811a 	bhi.w	800bac4 <isotp_on_can_message+0x284>
 800b890:	a201      	add	r2, pc, #4	@ (adr r2, 800b898 <isotp_on_can_message+0x58>)
 800b892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b896:	bf00      	nop
 800b898:	0800b8a9 	.word	0x0800b8a9
 800b89c:	0800b8e5 	.word	0x0800b8e5
 800b8a0:	0800b96d 	.word	0x0800b96d
 800b8a4:	0800ba0b 	.word	0x0800ba0b
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d104      	bne.n	800b8bc <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f06f 0205 	mvn.w	r2, #5
 800b8b8:	639a      	str	r2, [r3, #56]	@ 0x38
 800b8ba:	e002      	b.n	800b8c2 <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 800b8c2:	79fa      	ldrb	r2, [r7, #7]
 800b8c4:	f107 0314 	add.w	r3, r7, #20
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f7ff fe38 	bl	800b540 <isotp_receive_single_frame>
 800b8d0:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f040 80f7 	bne.w	800bac8 <isotp_on_can_message+0x288>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2202      	movs	r2, #2
 800b8de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            }
            break;
 800b8e2:	e0f1      	b.n	800bac8 <isotp_on_can_message+0x288>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d104      	bne.n	800b8f8 <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f06f 0205 	mvn.w	r2, #5
 800b8f4:	639a      	str	r2, [r3, #56]	@ 0x38
 800b8f6:	e002      	b.n	800b8fe <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 800b8fe:	79fa      	ldrb	r2, [r7, #7]
 800b900:	f107 0314 	add.w	r3, r7, #20
 800b904:	4619      	mov	r1, r3
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f7ff fe52 	bl	800b5b0 <isotp_receive_first_frame>
 800b90c:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	f113 0f03 	cmn.w	r3, #3
 800b914:	d10e      	bne.n	800b934 <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f06f 0207 	mvn.w	r2, #7
 800b91c:	639a      	str	r2, [r3, #56]	@ 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 800b926:	2300      	movs	r3, #0
 800b928:	2200      	movs	r2, #0
 800b92a:	2102      	movs	r1, #2
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f7ff fcd0 	bl	800b2d2 <isotp_send_flow_control>
                break;
 800b932:	e0d2      	b.n	800bada <isotp_on_can_message+0x29a>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f040 80c8 	bne.w	800bacc <isotp_on_can_message+0x28c>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	22c8      	movs	r2, #200	@ 0xc8
 800b948:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800b952:	2300      	movs	r3, #0
 800b954:	2100      	movs	r1, #0
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f7ff fcbb 	bl	800b2d2 <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800b95c:	f7f6 f9da 	bl	8001d14 <isotp_user_get_ms>
 800b960:	4603      	mov	r3, r0
 800b962:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	635a      	str	r2, [r3, #52]	@ 0x34
            }
            
            break;
 800b96a:	e0af      	b.n	800bacc <isotp_on_can_message+0x28c>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b972:	2b01      	cmp	r3, #1
 800b974:	d004      	beq.n	800b980 <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f06f 0205 	mvn.w	r2, #5
 800b97c:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 800b97e:	e0ac      	b.n	800bada <isotp_on_can_message+0x29a>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 800b980:	79fa      	ldrb	r2, [r7, #7]
 800b982:	f107 0314 	add.w	r3, r7, #20
 800b986:	4619      	mov	r1, r3
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f7ff fe5f 	bl	800b64c <isotp_receive_consecutive_frame>
 800b98e:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	f113 0f04 	cmn.w	r3, #4
 800b996:	d108      	bne.n	800b9aa <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f06f 0203 	mvn.w	r2, #3
 800b99e:	639a      	str	r2, [r3, #56]	@ 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                break;
 800b9a8:	e097      	b.n	800bada <isotp_on_can_message+0x29a>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f040 808f 	bne.w	800bad0 <isotp_on_can_message+0x290>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800b9b2:	f7f6 f9af 	bl	8001d14 <isotp_user_get_ms>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	635a      	str	r2, [r3, #52]	@ 0x34
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d304      	bcc.n	800b9d6 <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }
            
            break;
 800b9d4:	e07c      	b.n	800bad0 <isotp_on_can_message+0x290>
                    if (0 == --link->receive_bs_count) {
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	b2da      	uxtb	r2, r3
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d16f      	bne.n	800bad0 <isotp_on_can_message+0x290>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	22c8      	movs	r2, #200	@ 0xc8
 800b9f4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800b9fe:	2300      	movs	r3, #0
 800ba00:	2100      	movs	r1, #0
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f7ff fc65 	bl	800b2d2 <isotp_send_flow_control>
            break;
 800ba08:	e062      	b.n	800bad0 <isotp_on_can_message+0x290>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d15f      	bne.n	800bad4 <isotp_on_can_message+0x294>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 800ba14:	79fa      	ldrb	r2, [r7, #7]
 800ba16:	f107 0314 	add.w	r3, r7, #20
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f7ff fe69 	bl	800b6f4 <isotp_receive_flow_control_frame>
 800ba22:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d156      	bne.n	800bad8 <isotp_on_can_message+0x298>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800ba2a:	f7f6 f973 	bl	8001d14 <isotp_user_get_ms>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 800ba38:	7d3b      	ldrb	r3, [r7, #20]
 800ba3a:	f003 030f 	and.w	r3, r3, #15
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d108      	bne.n	800ba56 <isotp_on_can_message+0x216>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f06f 0207 	mvn.w	r2, #7
 800ba4a:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 800ba54:	e040      	b.n	800bad8 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 800ba56:	7d3b      	ldrb	r3, [r7, #20]
 800ba58:	f003 030f 	and.w	r3, r3, #15
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d112      	bne.n	800ba88 <isotp_on_can_message+0x248>
                    link->send_wtf_count += 1;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	7cdb      	ldrb	r3, [r3, #19]
 800ba66:	3301      	adds	r3, #1
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	7cdb      	ldrb	r3, [r3, #19]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d930      	bls.n	800bad8 <isotp_on_can_message+0x298>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f06f 0206 	mvn.w	r2, #6
 800ba7c:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2202      	movs	r2, #2
 800ba82:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 800ba86:	e027      	b.n	800bad8 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 800ba88:	7d3b      	ldrb	r3, [r7, #20]
 800ba8a:	f003 030f 	and.w	r3, r3, #15
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d121      	bne.n	800bad8 <isotp_on_can_message+0x298>
                    if (0 == message.as.flow_control.BS) {
 800ba94:	7d7b      	ldrb	r3, [r7, #21]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d104      	bne.n	800baa4 <isotp_on_can_message+0x264>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800baa0:	821a      	strh	r2, [r3, #16]
 800baa2:	e003      	b.n	800baac <isotp_on_can_message+0x26c>
                        link->send_bs_remain = message.as.flow_control.BS;
 800baa4:	7d7b      	ldrb	r3, [r7, #21]
 800baa6:	461a      	mov	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 800baac:	7dbb      	ldrb	r3, [r7, #22]
 800baae:	4618      	mov	r0, r3
 800bab0:	f7ff fbf2 	bl	800b298 <isotp_st_min_to_ms>
 800bab4:	4603      	mov	r3, r0
 800bab6:	461a      	mov	r2, r3
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	74da      	strb	r2, [r3, #19]
            break;
 800bac2:	e009      	b.n	800bad8 <isotp_on_can_message+0x298>
        default:
            break;
 800bac4:	bf00      	nop
 800bac6:	e00a      	b.n	800bade <isotp_on_can_message+0x29e>
            break;
 800bac8:	bf00      	nop
 800baca:	e008      	b.n	800bade <isotp_on_can_message+0x29e>
            break;
 800bacc:	bf00      	nop
 800bace:	e006      	b.n	800bade <isotp_on_can_message+0x29e>
            break;
 800bad0:	bf00      	nop
 800bad2:	e004      	b.n	800bade <isotp_on_can_message+0x29e>
                break;
 800bad4:	bf00      	nop
 800bad6:	e002      	b.n	800bade <isotp_on_can_message+0x29e>
            break;
 800bad8:	bf00      	nop
    };
    
    return;
 800bada:	e000      	b.n	800bade <isotp_on_can_message+0x29e>
        return;
 800badc:	bf00      	nop
}
 800bade:	3720      	adds	r7, #32
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	603b      	str	r3, [r7, #0]
 800baf0:	4613      	mov	r3, r2
 800baf2:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d002      	beq.n	800bb04 <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 800bafe:	f06f 0304 	mvn.w	r3, #4
 800bb02:	e017      	b.n	800bb34 <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bb08:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 800bb0a:	8afa      	ldrh	r2, [r7, #22]
 800bb0c:	88fb      	ldrh	r3, [r7, #6]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d901      	bls.n	800bb16 <isotp_receive+0x32>
        copylen = payload_size;
 800bb12:	88fb      	ldrh	r3, [r7, #6]
 800bb14:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb1a:	8afa      	ldrh	r2, [r7, #22]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	68b8      	ldr	r0, [r7, #8]
 800bb20:	f002 fcab 	bl	800e47a <memcpy>
    *out_size = copylen;
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	8afa      	ldrh	r2, [r7, #22]
 800bb28:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return ISOTP_RET_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
 800bb48:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 800bb4a:	2240      	movs	r2, #64	@ 0x40
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f002 fbba 	bl	800e2c8 <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	887a      	ldrh	r2, [r7, #2]
 800bb74:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	69ba      	ldr	r2, [r7, #24]
 800bb7a:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	8bba      	ldrh	r2, [r7, #28]
 800bb80:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    return;
 800bb82:	bf00      	nop
}
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 800bb8a:	b590      	push	{r4, r7, lr}
 800bb8c:	b085      	sub	sp, #20
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d15c      	bne.n	800bc56 <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 800bba0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d003      	beq.n	800bbb0 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	8a1b      	ldrh	r3, [r3, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d041      	beq.n	800bc34 <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00c      	beq.n	800bbd2 <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	7c9b      	ldrb	r3, [r3, #18]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d039      	beq.n	800bc34 <isotp_poll+0xaa>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	695b      	ldr	r3, [r3, #20]
 800bbc4:	461c      	mov	r4, r3
 800bbc6:	f7f6 f8a5 	bl	8001d14 <isotp_user_get_ms>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	1ae3      	subs	r3, r4, r3
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	da30      	bge.n	800bc34 <isotp_poll+0xaa>
            
            ret = isotp_send_consecutive_frame(link);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff fc4a 	bl	800b46c <isotp_send_consecutive_frame>
 800bbd8:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d125      	bne.n	800bc2c <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	8a1b      	ldrh	r3, [r3, #16]
 800bbe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d005      	beq.n	800bbf8 <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	8a1b      	ldrh	r3, [r3, #16]
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800bbf8:	f7f6 f88c 	bl	8001d14 <isotp_user_get_ms>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 800bc06:	f7f6 f885 	bl	8001d14 <isotp_user_get_ms>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7c9b      	ldrb	r3, [r3, #18]
 800bc10:	441a      	add	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	899a      	ldrh	r2, [r3, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	895b      	ldrh	r3, [r3, #10]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d308      	bcc.n	800bc34 <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2020 	strb.w	r2, [r3, #32]
 800bc2a:	e003      	b.n	800bc34 <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	461c      	mov	r4, r3
 800bc3a:	f7f6 f86b 	bl	8001d14 <isotp_user_get_ms>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	1ae3      	subs	r3, r4, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	da07      	bge.n	800bc56 <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f06f 0201 	mvn.w	r2, #1
 800bc4c:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2202      	movs	r2, #2
 800bc52:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d111      	bne.n	800bc84 <isotp_poll+0xfa>
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc64:	461c      	mov	r4, r3
 800bc66:	f7f6 f855 	bl	8001d14 <isotp_user_get_ms>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	1ae3      	subs	r3, r4, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	da08      	bge.n	800bc84 <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f06f 0202 	mvn.w	r2, #2
 800bc78:	639a      	str	r2, [r3, #56]	@ 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    return;
 800bc82:	bf00      	nop
 800bc84:	bf00      	nop
}
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd90      	pop	{r4, r7, pc}

0800bc8c <OS_task_init>:
/* Initialize object by assigning init and dispatch handler function */
void OS_task_init(
    OS_task * const pOS_task,
    OS_handler init,
    OS_handler dispatch) 
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
    pOS_task->init = init;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	601a      	str	r2, [r3, #0]
    pOS_task->dispatch = dispatch;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	605a      	str	r2, [r3, #4]
}
 800bca4:	bf00      	nop
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bc80      	pop	{r7}
 800bcac:	4770      	bx	lr

0800bcae <OS_task_create>:
    OS_task * const pOS_task,
    OS_taskPrio task_prio,
    OS_event_t const **pBuf ,
    OS_EQCt eqLen,
    OS_event_t const * const init_e)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	60f8      	str	r0, [r7, #12]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	461a      	mov	r2, r3
 800bcba:	460b      	mov	r3, r1
 800bcbc:	72fb      	strb	r3, [r7, #11]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	72bb      	strb	r3, [r7, #10]
    /* check parameter */
    if ( task_prio > 0  /* the priority must be greater than 0 */
 800bcc2:	7afb      	ldrb	r3, [r7, #11]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d020      	beq.n	800bd0a <OS_task_create+0x5c>
        && pBuf != (OS_event_t const **)0 /* The queue exists */
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d01d      	beq.n	800bd0a <OS_task_create+0x5c>
        && eqLen > 0) { /* the length greater than 0 */
 800bcce:	7abb      	ldrb	r3, [r7, #10]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d01a      	beq.n	800bd0a <OS_task_create+0x5c>
        pOS_task->qBuf = pBuf;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	609a      	str	r2, [r3, #8]
        pOS_task->end = eqLen - 1;
 800bcda:	7abb      	ldrb	r3, [r7, #10]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	731a      	strb	r2, [r3, #12]
        pOS_task->head = 0;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	735a      	strb	r2, [r3, #13]
        pOS_task->tail = 0;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	739a      	strb	r2, [r3, #14]
        pOS_task->nUsed = 0;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	73da      	strb	r2, [r3, #15]

        /* Set task priority */
        // OS_setTask_priority(pOS_task,task_prio);
        pOS_task->task_piro = task_prio - 1;
 800bcf6:	7afb      	ldrb	r3, [r7, #11]
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	741a      	strb	r2, [r3, #16]


        /* Initialize task with initialization event */
        (*pOS_task->init)(pOS_task,init_e);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	69b9      	ldr	r1, [r7, #24]
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	4798      	blx	r3
    } 
}
 800bd0a:	bf00      	nop
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <OS_task_post>:
 * @brief Post the event to event queue of task 
 * 
 * @param pOS_task 
 * @param pEvent 
 */ 
void OS_task_post(OS_task *const pOS_task, OS_event_t const * const pEvent) {
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
    OS_ring_buf_tcb *pQueue = &pri_queue[pOS_task->task_piro];
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	7c1b      	ldrb	r3, [r3, #16]
 800bd22:	461a      	mov	r2, r3
 800bd24:	2358      	movs	r3, #88	@ 0x58
 800bd26:	fb02 f303 	mul.w	r3, r2, r3
 800bd2a:	4a30      	ldr	r2, [pc, #192]	@ (800bdec <OS_task_post+0xd8>)
 800bd2c:	4413      	add	r3, r2
 800bd2e:	60fb      	str	r3, [r7, #12]

    /* Check over flow of queue */
    if (pri_queue[pOS_task->task_piro].nUsed >= OS_TASK_PER_PRI || pOS_task->nUsed > pOS_task->end ) { /* full queue */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	7c1b      	ldrb	r3, [r3, #16]
 800bd34:	4619      	mov	r1, r3
 800bd36:	4a2d      	ldr	r2, [pc, #180]	@ (800bdec <OS_task_post+0xd8>)
 800bd38:	2358      	movs	r3, #88	@ 0x58
 800bd3a:	fb01 f303 	mul.w	r3, r1, r3
 800bd3e:	4413      	add	r3, r2
 800bd40:	3303      	adds	r3, #3
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	2b09      	cmp	r3, #9
 800bd46:	d84d      	bhi.n	800bde4 <OS_task_post+0xd0>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	7bda      	ldrb	r2, [r3, #15]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	7b1b      	ldrb	r3, [r3, #12]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d847      	bhi.n	800bde4 <OS_task_post+0xd0>
        return;
    }

    /* insert tcb to queue */
    OS_PORT_CRIT_ENTRY();
 800bd54:	b672      	cpsid	i
    pQueue->buf_tcb[pQueue->head_index].pEvent = pEvent;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	00db      	lsls	r3, r3, #3
 800bd5e:	4413      	add	r3, r2
 800bd60:	683a      	ldr	r2, [r7, #0]
 800bd62:	609a      	str	r2, [r3, #8]
    pQueue->buf_tcb[pQueue->head_index].pOS_task = pOS_task;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	4413      	add	r3, r2
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	605a      	str	r2, [r3, #4]

    if (pQueue->head_index == 0) {
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d103      	bne.n	800bd82 <OS_task_post+0x6e>
        pQueue->head_index = OS_TASK_PER_PRI - 1; /* wrap around to end of the buffer */
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2209      	movs	r2, #9
 800bd7e:	701a      	strb	r2, [r3, #0]
 800bd80:	e005      	b.n	800bd8e <OS_task_post+0x7a>
    } else {
        --pQueue->head_index;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	701a      	strb	r2, [r3, #0]
    }
    ++pQueue->nUsed; /* Increase number event used in queue */
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	78db      	ldrb	r3, [r3, #3]
 800bd92:	3301      	adds	r3, #1
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	70da      	strb	r2, [r3, #3]

    pOS_task->qBuf[pOS_task->head] = pEvent; /* insert event to queue */
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	689a      	ldr	r2, [r3, #8]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	7b5b      	ldrb	r3, [r3, #13]
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	683a      	ldr	r2, [r7, #0]
 800bda8:	601a      	str	r2, [r3, #0]
    if (pOS_task->head == 0) { 
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	7b5b      	ldrb	r3, [r3, #13]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d104      	bne.n	800bdbc <OS_task_post+0xa8>
        pOS_task->head = pOS_task->end; /* wrap around to end of the buffer */
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	7b1a      	ldrb	r2, [r3, #12]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	735a      	strb	r2, [r3, #13]
 800bdba:	e005      	b.n	800bdc8 <OS_task_post+0xb4>
    } else {
        --pOS_task->head;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	7b5b      	ldrb	r3, [r3, #13]
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	735a      	strb	r2, [r3, #13]
    }
    ++pOS_task->nUsed; /* Increase number event used in queue */
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	7bdb      	ldrb	r3, [r3, #15]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	73da      	strb	r2, [r3, #15]

    /* Post event -> make the interrupt */
    // OS_PORT_TASK_PEND();
    HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdd8:	b25b      	sxtb	r3, r3
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7f7 fabb 	bl	8003356 <HAL_NVIC_SetPendingIRQ>
    OS_PORT_CRIT_EXIT();
 800bde0:	b662      	cpsie	i
 800bde2:	e000      	b.n	800bde6 <OS_task_post+0xd2>
        return;
 800bde4:	bf00      	nop
}
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	20000e18 	.word	0x20000e18

0800bdf0 <OS_task_post_event>:

void OS_task_post_event(OS_task *const pOS_task,uint8_t sig, uint8_t *data, uint32_t size) {
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	607a      	str	r2, [r7, #4]
 800bdfa:	603b      	str	r3, [r7, #0]
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	72fb      	strb	r3, [r7, #11]
    OS_event_t *e = get_dynamic_event();
 800be00:	f000 f99c 	bl	800c13c <get_dynamic_event>
 800be04:	6178      	str	r0, [r7, #20]
    set_sig_dynamic_event(e,sig);
 800be06:	7afb      	ldrb	r3, [r7, #11]
 800be08:	4619      	mov	r1, r3
 800be0a:	6978      	ldr	r0, [r7, #20]
 800be0c:	f000 f9e2 	bl	800c1d4 <set_sig_dynamic_event>
    set_data_dynamic_event(e,data,size);
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	6879      	ldr	r1, [r7, #4]
 800be14:	6978      	ldr	r0, [r7, #20]
 800be16:	f000 f9bb 	bl	800c190 <set_data_dynamic_event>
    OS_task_post(pOS_task,e);
 800be1a:	6979      	ldr	r1, [r7, #20]
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f7ff ff79 	bl	800bd14 <OS_task_post>
}
 800be22:	bf00      	nop
 800be24:	3718      	adds	r7, #24
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
	...

0800be2c <OS_TimeEvt_init>:

void OS_TimeEvt_init(
    OS_TimeEvt *pOS_Evt,
    uint16_t  sig,
    OS_task *task)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	460b      	mov	r3, r1
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	817b      	strh	r3, [r7, #10]
    pOS_Evt->Time_event.sig = sig;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	897a      	ldrh	r2, [r7, #10]
 800be3e:	801a      	strh	r2, [r3, #0]
//    pOS_Evt->Time_event.data = 0;
    pOS_Evt->Time_event.len = 0;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	645a      	str	r2, [r3, #68]	@ 0x44
    pOS_Evt->task_post = task;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	64da      	str	r2, [r3, #76]	@ 0x4c
    pOS_Evt->Time_Ctr = 0;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* add new node to head of liked list */
    pOS_Evt->next = timeEvt_head;
 800be5c:	4b05      	ldr	r3, [pc, #20]	@ (800be74 <OS_TimeEvt_init+0x48>)
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	649a      	str	r2, [r3, #72]	@ 0x48
    timeEvt_head = pOS_Evt;
 800be64:	4a03      	ldr	r2, [pc, #12]	@ (800be74 <OS_TimeEvt_init+0x48>)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6013      	str	r3, [r2, #0]
} 
 800be6a:	bf00      	nop
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	bc80      	pop	{r7}
 800be72:	4770      	bx	lr
 800be74:	20000f20 	.word	0x20000f20

0800be78 <OS_TimeEvt_Set>:
 * 
 * @param pOS_Evt Timer for generating event when TIMEOUT 
 * @param count TIMEOUT value 
 * @param interval interval value for periodic time event
 */
void OS_TimeEvt_Set(OS_TimeEvt *pOS_Evt, uint16_t count, uint16_t interval) {
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	807b      	strh	r3, [r7, #2]
 800be84:	4613      	mov	r3, r2
 800be86:	803b      	strh	r3, [r7, #0]
    OS_PORT_CRIT_ENTRY();
 800be88:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = count;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	887a      	ldrh	r2, [r7, #2]
 800be8e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = interval;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	883a      	ldrh	r2, [r7, #0]
 800be96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 800be9a:	b662      	cpsie	i
}
 800be9c:	bf00      	nop
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bc80      	pop	{r7}
 800bea4:	4770      	bx	lr

0800bea6 <OS_TimeEvt_Stop>:

void OS_TimeEvt_Stop(OS_TimeEvt *pOS_Evt) {
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 800beae:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = 0;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 800bec0:	b662      	cpsie	i
}
 800bec2:	bf00      	nop
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bc80      	pop	{r7}
 800beca:	4770      	bx	lr

0800becc <OS_TimeEvt_tick>:

/**
 * @brief function in systemtick handler (1ms) to execute task time OS 
 * 
 */
void OS_TimeEvt_tick(void) {
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
    /* run for all the node time event */
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 800bed2:	4b1b      	ldr	r3, [pc, #108]	@ (800bf40 <OS_TimeEvt_tick+0x74>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	607b      	str	r3, [r7, #4]
 800bed8:	e029      	b.n	800bf2e <OS_TimeEvt_tick+0x62>
        OS_PORT_CRIT_ENTRY();
 800beda:	b672      	cpsid	i
        if (node->Time_Ctr == 0) { /* down counter = 0  -> stop node */
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <OS_TimeEvt_tick+0x1e>
            OS_PORT_CRIT_EXIT();
 800bee6:	b662      	cpsie	i
 800bee8:	e01e      	b.n	800bf28 <OS_TimeEvt_tick+0x5c>
        } else if (node->Time_Ctr == 1) { /* TIMEOUT */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d110      	bne.n	800bf16 <OS_TimeEvt_tick+0x4a>
            node->Time_Ctr = node->Time_interval;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 800bf00:	b662      	cpsie	i
            /* Post event */
            // OS_task_post(node->task_post,&node->Time_event);
            OS_task_post_event(node->task_post,node->Time_event.sig,(uint8_t *)0,0);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	b2d9      	uxtb	r1, r3
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f7ff ff6e 	bl	800bdf0 <OS_task_post_event>
 800bf14:	e008      	b.n	800bf28 <OS_TimeEvt_tick+0x5c>
        } else { /* count down value */
            --node->Time_Ctr;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 800bf26:	b662      	cpsie	i
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf2c:	607b      	str	r3, [r7, #4]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1d2      	bne.n	800beda <OS_TimeEvt_tick+0xe>
        }
    }
}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	20000f20 	.word	0x20000f20

0800bf44 <OS_task_activate>:
/**
 * @brief The task performs an action when it receives an event from the queue. Call in interrupt handler to get event and dispatch
 * 
 * @param pOS_task Task pointer
 */
void OS_task_activate(uint8_t prio_task) {
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	71fb      	strb	r3, [r7, #7]
    OS_ring_buf_tcb *pQueue = &pri_queue[prio_task - 1];
 800bf4e:	79fb      	ldrb	r3, [r7, #7]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	2258      	movs	r2, #88	@ 0x58
 800bf54:	fb02 f303 	mul.w	r3, r2, r3
 800bf58:	4a2e      	ldr	r2, [pc, #184]	@ (800c014 <OS_task_activate+0xd0>)
 800bf5a:	4413      	add	r3, r2
 800bf5c:	617b      	str	r3, [r7, #20]
    
    if (pQueue->nUsed == 0) { /* don't have tcb */
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	78db      	ldrb	r3, [r3, #3]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d050      	beq.n	800c008 <OS_task_activate+0xc4>
        return;
    }
    
    uint8_t index = pQueue->tail_index;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	785b      	ldrb	r3, [r3, #1]
 800bf6a:	74fb      	strb	r3, [r7, #19]
    if (pQueue->tail_index == 0) {
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	785b      	ldrb	r3, [r3, #1]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d103      	bne.n	800bf7c <OS_task_activate+0x38>
        pQueue->tail_index = OS_TASK_PER_PRI - 1; /* wrap around */
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2209      	movs	r2, #9
 800bf78:	705a      	strb	r2, [r3, #1]
 800bf7a:	e005      	b.n	800bf88 <OS_task_activate+0x44>
    } else {
        --pQueue->tail_index;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	785b      	ldrb	r3, [r3, #1]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	705a      	strb	r2, [r3, #1]
    }

    --pQueue->nUsed;
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	78db      	ldrb	r3, [r3, #3]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	70da      	strb	r2, [r3, #3]

    OS_task *pOS_task = pQueue->buf_tcb[index].pOS_task;
 800bf94:	7cfb      	ldrb	r3, [r7, #19]
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	00db      	lsls	r3, r3, #3
 800bf9a:	4413      	add	r3, r2
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	60fb      	str	r3, [r7, #12]

    /* Check event in queue */
    if (pOS_task->nUsed == 0) { /* don't have event in queue */
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	7bdb      	ldrb	r3, [r3, #15]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d031      	beq.n	800c00c <OS_task_activate+0xc8>
        return;
    }

    OS_event_t const *e_receive = pQueue->buf_tcb[index].pEvent;
 800bfa8:	7cfb      	ldrb	r3, [r7, #19]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	00db      	lsls	r3, r3, #3
 800bfae:	4413      	add	r3, r2
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	60bb      	str	r3, [r7, #8]
    if (pOS_task->tail == 0) {
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	7b9b      	ldrb	r3, [r3, #14]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d104      	bne.n	800bfc6 <OS_task_activate+0x82>
        pOS_task->tail = pOS_task->end; /* wrap around */
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	7b1a      	ldrb	r2, [r3, #12]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	739a      	strb	r2, [r3, #14]
 800bfc4:	e005      	b.n	800bfd2 <OS_task_activate+0x8e>
    } else {
        --pOS_task->tail;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	7b9b      	ldrb	r3, [r3, #14]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	739a      	strb	r2, [r3, #14]
    }
    OS_PORT_CRIT_ENTRY();
 800bfd2:	b672      	cpsid	i
    if (--pOS_task->nUsed > 0) { /* check have any event in queue */
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	7bdb      	ldrb	r3, [r3, #15]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	73da      	strb	r2, [r3, #15]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	7bdb      	ldrb	r3, [r3, #15]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d005      	beq.n	800bff4 <OS_task_activate+0xb0>
    	 HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfec:	b25b      	sxtb	r3, r3
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7f7 f9b1 	bl	8003356 <HAL_NVIC_SetPendingIRQ>
    }
    OS_PORT_CRIT_EXIT();
 800bff4:	b662      	cpsie	i

    /* Dispatch the received event to this task */
    (*pOS_task->dispatch)(pOS_task,e_receive);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	68b9      	ldr	r1, [r7, #8]
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	4798      	blx	r3

    free_dynamic_event(e_receive);
 800c000:	68b8      	ldr	r0, [r7, #8]
 800c002:	f000 f86f 	bl	800c0e4 <free_dynamic_event>
 800c006:	e002      	b.n	800c00e <OS_task_activate+0xca>
        return;
 800c008:	bf00      	nop
 800c00a:	e000      	b.n	800c00e <OS_task_activate+0xca>
        return;
 800c00c:	bf00      	nop
}
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	20000e18 	.word	0x20000e18

0800c018 <OS_priority_IRQ>:
 * @brief Set task priority 
 * 
 * @param pOS_task Task pointer 
 * @param prio task priority 
 */
void OS_priority_IRQ(uint8_t IRQ, OS_taskPrio prio) {
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	460a      	mov	r2, r1
 800c022:	71fb      	strb	r3, [r7, #7]
 800c024:	4613      	mov	r3, r2
 800c026:	71bb      	strb	r3, [r7, #6]
    HAL_NVIC_SetPriority(IRQ,(15U - prio),0);
 800c028:	f997 0007 	ldrsb.w	r0, [r7, #7]
 800c02c:	79bb      	ldrb	r3, [r7, #6]
 800c02e:	f1c3 030f 	rsb	r3, r3, #15
 800c032:	2200      	movs	r2, #0
 800c034:	4619      	mov	r1, r3
 800c036:	f7f7 f958 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQ);
 800c03a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7f7 f96f 	bl	8003322 <HAL_NVIC_EnableIRQ>
}
 800c044:	bf00      	nop
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <OS_prio_setIRQ>:
 * @brief Set the number IRQ for specific priority
 * 
 * @param prio priority begin from 1 
 * @param num_irq IRQ number 
 */
void OS_prio_setIRQ(uint8_t prio, uint8_t num_irq) {
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	460a      	mov	r2, r1
 800c056:	71fb      	strb	r3, [r7, #7]
 800c058:	4613      	mov	r3, r2
 800c05a:	71bb      	strb	r3, [r7, #6]
    if (prio < OS_PRI_MAX) {
 800c05c:	79fb      	ldrb	r3, [r7, #7]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d809      	bhi.n	800c076 <OS_prio_setIRQ+0x2a>
        pri_queue[prio - 1].nvic_irq = num_irq;
 800c062:	79fb      	ldrb	r3, [r7, #7]
 800c064:	3b01      	subs	r3, #1
 800c066:	79ba      	ldrb	r2, [r7, #6]
 800c068:	4905      	ldr	r1, [pc, #20]	@ (800c080 <OS_prio_setIRQ+0x34>)
 800c06a:	2058      	movs	r0, #88	@ 0x58
 800c06c:	fb00 f303 	mul.w	r3, r0, r3
 800c070:	440b      	add	r3, r1
 800c072:	3354      	adds	r3, #84	@ 0x54
 800c074:	601a      	str	r2, [r3, #0]
    }
}
 800c076:	bf00      	nop
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bc80      	pop	{r7}
 800c07e:	4770      	bx	lr
 800c080:	20000e18 	.word	0x20000e18

0800c084 <OS_Test_setIRQ>:

void OS_Test_setIRQ(OS_task * const pAO, uint8_t num_irq) {
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
    pAO->nvic_irq = num_irq;
 800c090:	78fa      	ldrb	r2, [r7, #3]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	619a      	str	r2, [r3, #24]
}
 800c096:	bf00      	nop
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bc80      	pop	{r7}
 800c09e:	4770      	bx	lr

0800c0a0 <dynamic_event_pool_init>:
static OS_event_t dynamic_event_pool[OS_EVT_POOL_SIZE];
static uint8_t dynamic_event_pool_free[OS_EVT_POOL_SIZE]; /* Store index in free */
static uint8_t dynamic_event_free_stack; /* point to the next index freen in pool */


void dynamic_event_pool_init(void) {
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 800c0a6:	b672      	cpsid	i

    dynamic_event_free_stack = 0;
 800c0a8:	4b0c      	ldr	r3, [pc, #48]	@ (800c0dc <dynamic_event_pool_init+0x3c>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	71fb      	strb	r3, [r7, #7]
 800c0b2:	e006      	b.n	800c0c2 <dynamic_event_pool_init+0x22>
        dynamic_event_pool_free[i] = i; /* Store the index free */
 800c0b4:	79fb      	ldrb	r3, [r7, #7]
 800c0b6:	490a      	ldr	r1, [pc, #40]	@ (800c0e0 <dynamic_event_pool_init+0x40>)
 800c0b8:	79fa      	ldrb	r2, [r7, #7]
 800c0ba:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 800c0bc:	79fb      	ldrb	r3, [r7, #7]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	71fb      	strb	r3, [r7, #7]
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	2b09      	cmp	r3, #9
 800c0c6:	d9f5      	bls.n	800c0b4 <dynamic_event_pool_init+0x14>
    }
    dynamic_event_free_stack = OS_EVT_POOL_SIZE;
 800c0c8:	4b04      	ldr	r3, [pc, #16]	@ (800c0dc <dynamic_event_pool_init+0x3c>)
 800c0ca:	220a      	movs	r2, #10
 800c0cc:	701a      	strb	r2, [r3, #0]
    
    OS_PORT_CRIT_EXIT();
 800c0ce:	b662      	cpsie	i
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bc80      	pop	{r7}
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	200011fe 	.word	0x200011fe
 800c0e0:	200011f4 	.word	0x200011f4

0800c0e4 <free_dynamic_event>:


void free_dynamic_event(OS_event_t *e) {
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 800c0ec:	b672      	cpsid	i

    uint8_t idx = e - dynamic_event_pool; /* Get index of event */
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a0e      	ldr	r2, [pc, #56]	@ (800c12c <free_dynamic_event+0x48>)
 800c0f2:	1a9b      	subs	r3, r3, r2
 800c0f4:	10db      	asrs	r3, r3, #3
 800c0f6:	4a0e      	ldr	r2, [pc, #56]	@ (800c130 <free_dynamic_event+0x4c>)
 800c0f8:	fb02 f303 	mul.w	r3, r2, r3
 800c0fc:	73fb      	strb	r3, [r7, #15]
//    free(e->data); /* free allocated memory */
    if (idx > 0 && idx < OS_EVT_POOL_SIZE) {
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00c      	beq.n	800c11e <free_dynamic_event+0x3a>
 800c104:	7bfb      	ldrb	r3, [r7, #15]
 800c106:	2b09      	cmp	r3, #9
 800c108:	d809      	bhi.n	800c11e <free_dynamic_event+0x3a>
        dynamic_event_pool_free[dynamic_event_free_stack++] = idx; 
 800c10a:	4b0a      	ldr	r3, [pc, #40]	@ (800c134 <free_dynamic_event+0x50>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	b2d1      	uxtb	r1, r2
 800c112:	4a08      	ldr	r2, [pc, #32]	@ (800c134 <free_dynamic_event+0x50>)
 800c114:	7011      	strb	r1, [r2, #0]
 800c116:	4619      	mov	r1, r3
 800c118:	4a07      	ldr	r2, [pc, #28]	@ (800c138 <free_dynamic_event+0x54>)
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
 800c11c:	5453      	strb	r3, [r2, r1]
    }

    OS_PORT_CRIT_EXIT();
 800c11e:	b662      	cpsie	i
}
 800c120:	bf00      	nop
 800c122:	3714      	adds	r7, #20
 800c124:	46bd      	mov	sp, r7
 800c126:	bc80      	pop	{r7}
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	20000f24 	.word	0x20000f24
 800c130:	38e38e39 	.word	0x38e38e39
 800c134:	200011fe 	.word	0x200011fe
 800c138:	200011f4 	.word	0x200011f4

0800c13c <get_dynamic_event>:

OS_event_t *get_dynamic_event(void) {
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 800c142:	b672      	cpsid	i
    
    if (dynamic_event_free_stack == 0) return NULL; /* full */
 800c144:	4b0f      	ldr	r3, [pc, #60]	@ (800c184 <get_dynamic_event+0x48>)
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <get_dynamic_event+0x14>
 800c14c:	2300      	movs	r3, #0
 800c14e:	e013      	b.n	800c178 <get_dynamic_event+0x3c>
    uint8_t idx = dynamic_event_pool_free[--dynamic_event_free_stack]; /* Get index in free */
 800c150:	4b0c      	ldr	r3, [pc, #48]	@ (800c184 <get_dynamic_event+0x48>)
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	3b01      	subs	r3, #1
 800c156:	b2da      	uxtb	r2, r3
 800c158:	4b0a      	ldr	r3, [pc, #40]	@ (800c184 <get_dynamic_event+0x48>)
 800c15a:	701a      	strb	r2, [r3, #0]
 800c15c:	4b09      	ldr	r3, [pc, #36]	@ (800c184 <get_dynamic_event+0x48>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	461a      	mov	r2, r3
 800c162:	4b09      	ldr	r3, [pc, #36]	@ (800c188 <get_dynamic_event+0x4c>)
 800c164:	5c9b      	ldrb	r3, [r3, r2]
 800c166:	71fb      	strb	r3, [r7, #7]
    
    OS_PORT_CRIT_EXIT();
 800c168:	b662      	cpsie	i
    return &dynamic_event_pool[idx];
 800c16a:	79fa      	ldrb	r2, [r7, #7]
 800c16c:	4613      	mov	r3, r2
 800c16e:	00db      	lsls	r3, r3, #3
 800c170:	4413      	add	r3, r2
 800c172:	00db      	lsls	r3, r3, #3
 800c174:	4a05      	ldr	r2, [pc, #20]	@ (800c18c <get_dynamic_event+0x50>)
 800c176:	4413      	add	r3, r2
}
 800c178:	4618      	mov	r0, r3
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bc80      	pop	{r7}
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	200011fe 	.word	0x200011fe
 800c188:	200011f4 	.word	0x200011f4
 800c18c:	20000f24 	.word	0x20000f24

0800c190 <set_data_dynamic_event>:

void set_data_dynamic_event(OS_event_t *e, uint8_t *data, uint32_t len) {
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
    if (len != 0) {
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00a      	beq.n	800c1b8 <set_data_dynamic_event+0x28>
        e->len = len;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy(e->data,data,len);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3302      	adds	r3, #2
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	68b9      	ldr	r1, [r7, #8]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f002 f962 	bl	800e47a <memcpy>
    } else {
        e->len = len;
        memset(e->data, 0, sizeof(e->data));
    }
}
 800c1b6:	e009      	b.n	800c1cc <set_data_dynamic_event+0x3c>
        e->len = len;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	645a      	str	r2, [r3, #68]	@ 0x44
        memset(e->data, 0, sizeof(e->data));
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3302      	adds	r3, #2
 800c1c2:	2240      	movs	r2, #64	@ 0x40
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f002 f87e 	bl	800e2c8 <memset>
}
 800c1cc:	bf00      	nop
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <set_sig_dynamic_event>:

void set_sig_dynamic_event(OS_event_t *e, uint8_t sig) {
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	70fb      	strb	r3, [r7, #3]
    e->sig = sig;
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	801a      	strh	r2, [r3, #0]
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bc80      	pop	{r7}
 800c1f0:	4770      	bx	lr

0800c1f2 <get_data_dynamic_event>:

uint8_t *get_data_dynamic_event(OS_event_t * const e) {
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
    return (e->data);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	3302      	adds	r3, #2
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	bc80      	pop	{r7}
 800c206:	4770      	bx	lr

0800c208 <__assert_func>:
 800c208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c20a:	4614      	mov	r4, r2
 800c20c:	461a      	mov	r2, r3
 800c20e:	4b09      	ldr	r3, [pc, #36]	@ (800c234 <__assert_func+0x2c>)
 800c210:	4605      	mov	r5, r0
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68d8      	ldr	r0, [r3, #12]
 800c216:	b14c      	cbz	r4, 800c22c <__assert_func+0x24>
 800c218:	4b07      	ldr	r3, [pc, #28]	@ (800c238 <__assert_func+0x30>)
 800c21a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c21e:	9100      	str	r1, [sp, #0]
 800c220:	462b      	mov	r3, r5
 800c222:	4906      	ldr	r1, [pc, #24]	@ (800c23c <__assert_func+0x34>)
 800c224:	f001 fe70 	bl	800df08 <fiprintf>
 800c228:	f002 f940 	bl	800e4ac <abort>
 800c22c:	4b04      	ldr	r3, [pc, #16]	@ (800c240 <__assert_func+0x38>)
 800c22e:	461c      	mov	r4, r3
 800c230:	e7f3      	b.n	800c21a <__assert_func+0x12>
 800c232:	bf00      	nop
 800c234:	20000200 	.word	0x20000200
 800c238:	08011239 	.word	0x08011239
 800c23c:	08011246 	.word	0x08011246
 800c240:	08011274 	.word	0x08011274

0800c244 <atof>:
 800c244:	2100      	movs	r1, #0
 800c246:	f000 bec5 	b.w	800cfd4 <strtod>

0800c24a <atoi>:
 800c24a:	220a      	movs	r2, #10
 800c24c:	2100      	movs	r1, #0
 800c24e:	f000 bf49 	b.w	800d0e4 <strtol>
	...

0800c254 <malloc>:
 800c254:	4b02      	ldr	r3, [pc, #8]	@ (800c260 <malloc+0xc>)
 800c256:	4601      	mov	r1, r0
 800c258:	6818      	ldr	r0, [r3, #0]
 800c25a:	f000 b82d 	b.w	800c2b8 <_malloc_r>
 800c25e:	bf00      	nop
 800c260:	20000200 	.word	0x20000200

0800c264 <free>:
 800c264:	4b02      	ldr	r3, [pc, #8]	@ (800c270 <free+0xc>)
 800c266:	4601      	mov	r1, r0
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	f002 bf85 	b.w	800f178 <_free_r>
 800c26e:	bf00      	nop
 800c270:	20000200 	.word	0x20000200

0800c274 <sbrk_aligned>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	4e0f      	ldr	r6, [pc, #60]	@ (800c2b4 <sbrk_aligned+0x40>)
 800c278:	460c      	mov	r4, r1
 800c27a:	6831      	ldr	r1, [r6, #0]
 800c27c:	4605      	mov	r5, r0
 800c27e:	b911      	cbnz	r1, 800c286 <sbrk_aligned+0x12>
 800c280:	f002 f896 	bl	800e3b0 <_sbrk_r>
 800c284:	6030      	str	r0, [r6, #0]
 800c286:	4621      	mov	r1, r4
 800c288:	4628      	mov	r0, r5
 800c28a:	f002 f891 	bl	800e3b0 <_sbrk_r>
 800c28e:	1c43      	adds	r3, r0, #1
 800c290:	d103      	bne.n	800c29a <sbrk_aligned+0x26>
 800c292:	f04f 34ff 	mov.w	r4, #4294967295
 800c296:	4620      	mov	r0, r4
 800c298:	bd70      	pop	{r4, r5, r6, pc}
 800c29a:	1cc4      	adds	r4, r0, #3
 800c29c:	f024 0403 	bic.w	r4, r4, #3
 800c2a0:	42a0      	cmp	r0, r4
 800c2a2:	d0f8      	beq.n	800c296 <sbrk_aligned+0x22>
 800c2a4:	1a21      	subs	r1, r4, r0
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f002 f882 	bl	800e3b0 <_sbrk_r>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d1f2      	bne.n	800c296 <sbrk_aligned+0x22>
 800c2b0:	e7ef      	b.n	800c292 <sbrk_aligned+0x1e>
 800c2b2:	bf00      	nop
 800c2b4:	20001200 	.word	0x20001200

0800c2b8 <_malloc_r>:
 800c2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2bc:	1ccd      	adds	r5, r1, #3
 800c2be:	f025 0503 	bic.w	r5, r5, #3
 800c2c2:	3508      	adds	r5, #8
 800c2c4:	2d0c      	cmp	r5, #12
 800c2c6:	bf38      	it	cc
 800c2c8:	250c      	movcc	r5, #12
 800c2ca:	2d00      	cmp	r5, #0
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	db01      	blt.n	800c2d4 <_malloc_r+0x1c>
 800c2d0:	42a9      	cmp	r1, r5
 800c2d2:	d904      	bls.n	800c2de <_malloc_r+0x26>
 800c2d4:	230c      	movs	r3, #12
 800c2d6:	6033      	str	r3, [r6, #0]
 800c2d8:	2000      	movs	r0, #0
 800c2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3b4 <_malloc_r+0xfc>
 800c2e2:	f000 f869 	bl	800c3b8 <__malloc_lock>
 800c2e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c2ea:	461c      	mov	r4, r3
 800c2ec:	bb44      	cbnz	r4, 800c340 <_malloc_r+0x88>
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f7ff ffbf 	bl	800c274 <sbrk_aligned>
 800c2f6:	1c43      	adds	r3, r0, #1
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	d158      	bne.n	800c3ae <_malloc_r+0xf6>
 800c2fc:	f8d8 4000 	ldr.w	r4, [r8]
 800c300:	4627      	mov	r7, r4
 800c302:	2f00      	cmp	r7, #0
 800c304:	d143      	bne.n	800c38e <_malloc_r+0xd6>
 800c306:	2c00      	cmp	r4, #0
 800c308:	d04b      	beq.n	800c3a2 <_malloc_r+0xea>
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	4639      	mov	r1, r7
 800c30e:	4630      	mov	r0, r6
 800c310:	eb04 0903 	add.w	r9, r4, r3
 800c314:	f002 f84c 	bl	800e3b0 <_sbrk_r>
 800c318:	4581      	cmp	r9, r0
 800c31a:	d142      	bne.n	800c3a2 <_malloc_r+0xea>
 800c31c:	6821      	ldr	r1, [r4, #0]
 800c31e:	4630      	mov	r0, r6
 800c320:	1a6d      	subs	r5, r5, r1
 800c322:	4629      	mov	r1, r5
 800c324:	f7ff ffa6 	bl	800c274 <sbrk_aligned>
 800c328:	3001      	adds	r0, #1
 800c32a:	d03a      	beq.n	800c3a2 <_malloc_r+0xea>
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	442b      	add	r3, r5
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	f8d8 3000 	ldr.w	r3, [r8]
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	bb62      	cbnz	r2, 800c394 <_malloc_r+0xdc>
 800c33a:	f8c8 7000 	str.w	r7, [r8]
 800c33e:	e00f      	b.n	800c360 <_malloc_r+0xa8>
 800c340:	6822      	ldr	r2, [r4, #0]
 800c342:	1b52      	subs	r2, r2, r5
 800c344:	d420      	bmi.n	800c388 <_malloc_r+0xd0>
 800c346:	2a0b      	cmp	r2, #11
 800c348:	d917      	bls.n	800c37a <_malloc_r+0xc2>
 800c34a:	1961      	adds	r1, r4, r5
 800c34c:	42a3      	cmp	r3, r4
 800c34e:	6025      	str	r5, [r4, #0]
 800c350:	bf18      	it	ne
 800c352:	6059      	strne	r1, [r3, #4]
 800c354:	6863      	ldr	r3, [r4, #4]
 800c356:	bf08      	it	eq
 800c358:	f8c8 1000 	streq.w	r1, [r8]
 800c35c:	5162      	str	r2, [r4, r5]
 800c35e:	604b      	str	r3, [r1, #4]
 800c360:	4630      	mov	r0, r6
 800c362:	f000 f82f 	bl	800c3c4 <__malloc_unlock>
 800c366:	f104 000b 	add.w	r0, r4, #11
 800c36a:	1d23      	adds	r3, r4, #4
 800c36c:	f020 0007 	bic.w	r0, r0, #7
 800c370:	1ac2      	subs	r2, r0, r3
 800c372:	bf1c      	itt	ne
 800c374:	1a1b      	subne	r3, r3, r0
 800c376:	50a3      	strne	r3, [r4, r2]
 800c378:	e7af      	b.n	800c2da <_malloc_r+0x22>
 800c37a:	6862      	ldr	r2, [r4, #4]
 800c37c:	42a3      	cmp	r3, r4
 800c37e:	bf0c      	ite	eq
 800c380:	f8c8 2000 	streq.w	r2, [r8]
 800c384:	605a      	strne	r2, [r3, #4]
 800c386:	e7eb      	b.n	800c360 <_malloc_r+0xa8>
 800c388:	4623      	mov	r3, r4
 800c38a:	6864      	ldr	r4, [r4, #4]
 800c38c:	e7ae      	b.n	800c2ec <_malloc_r+0x34>
 800c38e:	463c      	mov	r4, r7
 800c390:	687f      	ldr	r7, [r7, #4]
 800c392:	e7b6      	b.n	800c302 <_malloc_r+0x4a>
 800c394:	461a      	mov	r2, r3
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	42a3      	cmp	r3, r4
 800c39a:	d1fb      	bne.n	800c394 <_malloc_r+0xdc>
 800c39c:	2300      	movs	r3, #0
 800c39e:	6053      	str	r3, [r2, #4]
 800c3a0:	e7de      	b.n	800c360 <_malloc_r+0xa8>
 800c3a2:	230c      	movs	r3, #12
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	6033      	str	r3, [r6, #0]
 800c3a8:	f000 f80c 	bl	800c3c4 <__malloc_unlock>
 800c3ac:	e794      	b.n	800c2d8 <_malloc_r+0x20>
 800c3ae:	6005      	str	r5, [r0, #0]
 800c3b0:	e7d6      	b.n	800c360 <_malloc_r+0xa8>
 800c3b2:	bf00      	nop
 800c3b4:	20001204 	.word	0x20001204

0800c3b8 <__malloc_lock>:
 800c3b8:	4801      	ldr	r0, [pc, #4]	@ (800c3c0 <__malloc_lock+0x8>)
 800c3ba:	f002 b846 	b.w	800e44a <__retarget_lock_acquire_recursive>
 800c3be:	bf00      	nop
 800c3c0:	20001348 	.word	0x20001348

0800c3c4 <__malloc_unlock>:
 800c3c4:	4801      	ldr	r0, [pc, #4]	@ (800c3cc <__malloc_unlock+0x8>)
 800c3c6:	f002 b841 	b.w	800e44c <__retarget_lock_release_recursive>
 800c3ca:	bf00      	nop
 800c3cc:	20001348 	.word	0x20001348

0800c3d0 <sulp>:
 800c3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	4690      	mov	r8, r2
 800c3d8:	f003 fdce 	bl	800ff78 <__ulp>
 800c3dc:	4604      	mov	r4, r0
 800c3de:	460d      	mov	r5, r1
 800c3e0:	f1b8 0f00 	cmp.w	r8, #0
 800c3e4:	d011      	beq.n	800c40a <sulp+0x3a>
 800c3e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c3ea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	dd0b      	ble.n	800c40a <sulp+0x3a>
 800c3f2:	2400      	movs	r4, #0
 800c3f4:	051b      	lsls	r3, r3, #20
 800c3f6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c3fa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c3fe:	4622      	mov	r2, r4
 800c400:	462b      	mov	r3, r5
 800c402:	f7f4 f873 	bl	80004ec <__aeabi_dmul>
 800c406:	4604      	mov	r4, r0
 800c408:	460d      	mov	r5, r1
 800c40a:	4620      	mov	r0, r4
 800c40c:	4629      	mov	r1, r5
 800c40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c412:	0000      	movs	r0, r0
 800c414:	0000      	movs	r0, r0
	...

0800c418 <_strtod_l>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	b09f      	sub	sp, #124	@ 0x7c
 800c41e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c420:	2200      	movs	r2, #0
 800c422:	460c      	mov	r4, r1
 800c424:	921a      	str	r2, [sp, #104]	@ 0x68
 800c426:	f04f 0a00 	mov.w	sl, #0
 800c42a:	f04f 0b00 	mov.w	fp, #0
 800c42e:	460a      	mov	r2, r1
 800c430:	9005      	str	r0, [sp, #20]
 800c432:	9219      	str	r2, [sp, #100]	@ 0x64
 800c434:	7811      	ldrb	r1, [r2, #0]
 800c436:	292b      	cmp	r1, #43	@ 0x2b
 800c438:	d048      	beq.n	800c4cc <_strtod_l+0xb4>
 800c43a:	d836      	bhi.n	800c4aa <_strtod_l+0x92>
 800c43c:	290d      	cmp	r1, #13
 800c43e:	d830      	bhi.n	800c4a2 <_strtod_l+0x8a>
 800c440:	2908      	cmp	r1, #8
 800c442:	d830      	bhi.n	800c4a6 <_strtod_l+0x8e>
 800c444:	2900      	cmp	r1, #0
 800c446:	d039      	beq.n	800c4bc <_strtod_l+0xa4>
 800c448:	2200      	movs	r2, #0
 800c44a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c44c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c44e:	782a      	ldrb	r2, [r5, #0]
 800c450:	2a30      	cmp	r2, #48	@ 0x30
 800c452:	f040 80b0 	bne.w	800c5b6 <_strtod_l+0x19e>
 800c456:	786a      	ldrb	r2, [r5, #1]
 800c458:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c45c:	2a58      	cmp	r2, #88	@ 0x58
 800c45e:	d16c      	bne.n	800c53a <_strtod_l+0x122>
 800c460:	9302      	str	r3, [sp, #8]
 800c462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c464:	4a8f      	ldr	r2, [pc, #572]	@ (800c6a4 <_strtod_l+0x28c>)
 800c466:	9301      	str	r3, [sp, #4]
 800c468:	ab1a      	add	r3, sp, #104	@ 0x68
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	9805      	ldr	r0, [sp, #20]
 800c46e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c470:	a919      	add	r1, sp, #100	@ 0x64
 800c472:	f002 ff31 	bl	800f2d8 <__gethex>
 800c476:	f010 060f 	ands.w	r6, r0, #15
 800c47a:	4604      	mov	r4, r0
 800c47c:	d005      	beq.n	800c48a <_strtod_l+0x72>
 800c47e:	2e06      	cmp	r6, #6
 800c480:	d126      	bne.n	800c4d0 <_strtod_l+0xb8>
 800c482:	2300      	movs	r3, #0
 800c484:	3501      	adds	r5, #1
 800c486:	9519      	str	r5, [sp, #100]	@ 0x64
 800c488:	930e      	str	r3, [sp, #56]	@ 0x38
 800c48a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f040 8582 	bne.w	800cf96 <_strtod_l+0xb7e>
 800c492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c494:	b1bb      	cbz	r3, 800c4c6 <_strtod_l+0xae>
 800c496:	4650      	mov	r0, sl
 800c498:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800c49c:	b01f      	add	sp, #124	@ 0x7c
 800c49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a2:	2920      	cmp	r1, #32
 800c4a4:	d1d0      	bne.n	800c448 <_strtod_l+0x30>
 800c4a6:	3201      	adds	r2, #1
 800c4a8:	e7c3      	b.n	800c432 <_strtod_l+0x1a>
 800c4aa:	292d      	cmp	r1, #45	@ 0x2d
 800c4ac:	d1cc      	bne.n	800c448 <_strtod_l+0x30>
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	910e      	str	r1, [sp, #56]	@ 0x38
 800c4b2:	1c51      	adds	r1, r2, #1
 800c4b4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4b6:	7852      	ldrb	r2, [r2, #1]
 800c4b8:	2a00      	cmp	r2, #0
 800c4ba:	d1c7      	bne.n	800c44c <_strtod_l+0x34>
 800c4bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c4be:	9419      	str	r4, [sp, #100]	@ 0x64
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f040 8566 	bne.w	800cf92 <_strtod_l+0xb7a>
 800c4c6:	4650      	mov	r0, sl
 800c4c8:	4659      	mov	r1, fp
 800c4ca:	e7e7      	b.n	800c49c <_strtod_l+0x84>
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	e7ef      	b.n	800c4b0 <_strtod_l+0x98>
 800c4d0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c4d2:	b13a      	cbz	r2, 800c4e4 <_strtod_l+0xcc>
 800c4d4:	2135      	movs	r1, #53	@ 0x35
 800c4d6:	a81c      	add	r0, sp, #112	@ 0x70
 800c4d8:	f003 fe3e 	bl	8010158 <__copybits>
 800c4dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4de:	9805      	ldr	r0, [sp, #20]
 800c4e0:	f003 fa1e 	bl	800f920 <_Bfree>
 800c4e4:	3e01      	subs	r6, #1
 800c4e6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c4e8:	2e04      	cmp	r6, #4
 800c4ea:	d806      	bhi.n	800c4fa <_strtod_l+0xe2>
 800c4ec:	e8df f006 	tbb	[pc, r6]
 800c4f0:	201d0314 	.word	0x201d0314
 800c4f4:	14          	.byte	0x14
 800c4f5:	00          	.byte	0x00
 800c4f6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c4fa:	05e1      	lsls	r1, r4, #23
 800c4fc:	bf48      	it	mi
 800c4fe:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c502:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c506:	0d1b      	lsrs	r3, r3, #20
 800c508:	051b      	lsls	r3, r3, #20
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1bd      	bne.n	800c48a <_strtod_l+0x72>
 800c50e:	f001 ff71 	bl	800e3f4 <__errno>
 800c512:	2322      	movs	r3, #34	@ 0x22
 800c514:	6003      	str	r3, [r0, #0]
 800c516:	e7b8      	b.n	800c48a <_strtod_l+0x72>
 800c518:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c51c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c520:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c524:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c528:	e7e7      	b.n	800c4fa <_strtod_l+0xe2>
 800c52a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c6a8 <_strtod_l+0x290>
 800c52e:	e7e4      	b.n	800c4fa <_strtod_l+0xe2>
 800c530:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c534:	f04f 3aff 	mov.w	sl, #4294967295
 800c538:	e7df      	b.n	800c4fa <_strtod_l+0xe2>
 800c53a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c540:	785b      	ldrb	r3, [r3, #1]
 800c542:	2b30      	cmp	r3, #48	@ 0x30
 800c544:	d0f9      	beq.n	800c53a <_strtod_l+0x122>
 800c546:	2b00      	cmp	r3, #0
 800c548:	d09f      	beq.n	800c48a <_strtod_l+0x72>
 800c54a:	2301      	movs	r3, #1
 800c54c:	2700      	movs	r7, #0
 800c54e:	220a      	movs	r2, #10
 800c550:	46b9      	mov	r9, r7
 800c552:	9308      	str	r3, [sp, #32]
 800c554:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c556:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c558:	930c      	str	r3, [sp, #48]	@ 0x30
 800c55a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c55c:	7805      	ldrb	r5, [r0, #0]
 800c55e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c562:	b2d9      	uxtb	r1, r3
 800c564:	2909      	cmp	r1, #9
 800c566:	d928      	bls.n	800c5ba <_strtod_l+0x1a2>
 800c568:	2201      	movs	r2, #1
 800c56a:	4950      	ldr	r1, [pc, #320]	@ (800c6ac <_strtod_l+0x294>)
 800c56c:	f001 fec3 	bl	800e2f6 <strncmp>
 800c570:	2800      	cmp	r0, #0
 800c572:	d032      	beq.n	800c5da <_strtod_l+0x1c2>
 800c574:	2000      	movs	r0, #0
 800c576:	462a      	mov	r2, r5
 800c578:	4603      	mov	r3, r0
 800c57a:	464d      	mov	r5, r9
 800c57c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c57e:	2a65      	cmp	r2, #101	@ 0x65
 800c580:	d001      	beq.n	800c586 <_strtod_l+0x16e>
 800c582:	2a45      	cmp	r2, #69	@ 0x45
 800c584:	d114      	bne.n	800c5b0 <_strtod_l+0x198>
 800c586:	b91d      	cbnz	r5, 800c590 <_strtod_l+0x178>
 800c588:	9a08      	ldr	r2, [sp, #32]
 800c58a:	4302      	orrs	r2, r0
 800c58c:	d096      	beq.n	800c4bc <_strtod_l+0xa4>
 800c58e:	2500      	movs	r5, #0
 800c590:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c592:	1c62      	adds	r2, r4, #1
 800c594:	9219      	str	r2, [sp, #100]	@ 0x64
 800c596:	7862      	ldrb	r2, [r4, #1]
 800c598:	2a2b      	cmp	r2, #43	@ 0x2b
 800c59a:	d07a      	beq.n	800c692 <_strtod_l+0x27a>
 800c59c:	2a2d      	cmp	r2, #45	@ 0x2d
 800c59e:	d07e      	beq.n	800c69e <_strtod_l+0x286>
 800c5a0:	f04f 0c00 	mov.w	ip, #0
 800c5a4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c5a8:	2909      	cmp	r1, #9
 800c5aa:	f240 8085 	bls.w	800c6b8 <_strtod_l+0x2a0>
 800c5ae:	9419      	str	r4, [sp, #100]	@ 0x64
 800c5b0:	f04f 0800 	mov.w	r8, #0
 800c5b4:	e0a5      	b.n	800c702 <_strtod_l+0x2ea>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	e7c8      	b.n	800c54c <_strtod_l+0x134>
 800c5ba:	f1b9 0f08 	cmp.w	r9, #8
 800c5be:	bfd8      	it	le
 800c5c0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c5c2:	f100 0001 	add.w	r0, r0, #1
 800c5c6:	bfd6      	itet	le
 800c5c8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c5cc:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c5d0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c5d2:	f109 0901 	add.w	r9, r9, #1
 800c5d6:	9019      	str	r0, [sp, #100]	@ 0x64
 800c5d8:	e7bf      	b.n	800c55a <_strtod_l+0x142>
 800c5da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5e0:	785a      	ldrb	r2, [r3, #1]
 800c5e2:	f1b9 0f00 	cmp.w	r9, #0
 800c5e6:	d03b      	beq.n	800c660 <_strtod_l+0x248>
 800c5e8:	464d      	mov	r5, r9
 800c5ea:	900a      	str	r0, [sp, #40]	@ 0x28
 800c5ec:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c5f0:	2b09      	cmp	r3, #9
 800c5f2:	d912      	bls.n	800c61a <_strtod_l+0x202>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e7c2      	b.n	800c57e <_strtod_l+0x166>
 800c5f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5fa:	3001      	adds	r0, #1
 800c5fc:	1c5a      	adds	r2, r3, #1
 800c5fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800c600:	785a      	ldrb	r2, [r3, #1]
 800c602:	2a30      	cmp	r2, #48	@ 0x30
 800c604:	d0f8      	beq.n	800c5f8 <_strtod_l+0x1e0>
 800c606:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c60a:	2b08      	cmp	r3, #8
 800c60c:	f200 84c8 	bhi.w	800cfa0 <_strtod_l+0xb88>
 800c610:	900a      	str	r0, [sp, #40]	@ 0x28
 800c612:	2000      	movs	r0, #0
 800c614:	4605      	mov	r5, r0
 800c616:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c618:	930c      	str	r3, [sp, #48]	@ 0x30
 800c61a:	3a30      	subs	r2, #48	@ 0x30
 800c61c:	f100 0301 	add.w	r3, r0, #1
 800c620:	d018      	beq.n	800c654 <_strtod_l+0x23c>
 800c622:	462e      	mov	r6, r5
 800c624:	f04f 0e0a 	mov.w	lr, #10
 800c628:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c62a:	4419      	add	r1, r3
 800c62c:	910a      	str	r1, [sp, #40]	@ 0x28
 800c62e:	1c71      	adds	r1, r6, #1
 800c630:	eba1 0c05 	sub.w	ip, r1, r5
 800c634:	4563      	cmp	r3, ip
 800c636:	dc15      	bgt.n	800c664 <_strtod_l+0x24c>
 800c638:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c63c:	182b      	adds	r3, r5, r0
 800c63e:	2b08      	cmp	r3, #8
 800c640:	f105 0501 	add.w	r5, r5, #1
 800c644:	4405      	add	r5, r0
 800c646:	dc1a      	bgt.n	800c67e <_strtod_l+0x266>
 800c648:	230a      	movs	r3, #10
 800c64a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c64c:	fb03 2301 	mla	r3, r3, r1, r2
 800c650:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c652:	2300      	movs	r3, #0
 800c654:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c656:	4618      	mov	r0, r3
 800c658:	1c51      	adds	r1, r2, #1
 800c65a:	9119      	str	r1, [sp, #100]	@ 0x64
 800c65c:	7852      	ldrb	r2, [r2, #1]
 800c65e:	e7c5      	b.n	800c5ec <_strtod_l+0x1d4>
 800c660:	4648      	mov	r0, r9
 800c662:	e7ce      	b.n	800c602 <_strtod_l+0x1ea>
 800c664:	2e08      	cmp	r6, #8
 800c666:	dc05      	bgt.n	800c674 <_strtod_l+0x25c>
 800c668:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c66a:	fb0e f606 	mul.w	r6, lr, r6
 800c66e:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c670:	460e      	mov	r6, r1
 800c672:	e7dc      	b.n	800c62e <_strtod_l+0x216>
 800c674:	2910      	cmp	r1, #16
 800c676:	bfd8      	it	le
 800c678:	fb0e f707 	mulle.w	r7, lr, r7
 800c67c:	e7f8      	b.n	800c670 <_strtod_l+0x258>
 800c67e:	2b0f      	cmp	r3, #15
 800c680:	bfdc      	itt	le
 800c682:	230a      	movle	r3, #10
 800c684:	fb03 2707 	mlale	r7, r3, r7, r2
 800c688:	e7e3      	b.n	800c652 <_strtod_l+0x23a>
 800c68a:	2300      	movs	r3, #0
 800c68c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c68e:	2301      	movs	r3, #1
 800c690:	e77a      	b.n	800c588 <_strtod_l+0x170>
 800c692:	f04f 0c00 	mov.w	ip, #0
 800c696:	1ca2      	adds	r2, r4, #2
 800c698:	9219      	str	r2, [sp, #100]	@ 0x64
 800c69a:	78a2      	ldrb	r2, [r4, #2]
 800c69c:	e782      	b.n	800c5a4 <_strtod_l+0x18c>
 800c69e:	f04f 0c01 	mov.w	ip, #1
 800c6a2:	e7f8      	b.n	800c696 <_strtod_l+0x27e>
 800c6a4:	08011424 	.word	0x08011424
 800c6a8:	7ff00000 	.word	0x7ff00000
 800c6ac:	08011275 	.word	0x08011275
 800c6b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6b2:	1c51      	adds	r1, r2, #1
 800c6b4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c6b6:	7852      	ldrb	r2, [r2, #1]
 800c6b8:	2a30      	cmp	r2, #48	@ 0x30
 800c6ba:	d0f9      	beq.n	800c6b0 <_strtod_l+0x298>
 800c6bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c6c0:	2908      	cmp	r1, #8
 800c6c2:	f63f af75 	bhi.w	800c5b0 <_strtod_l+0x198>
 800c6c6:	f04f 080a 	mov.w	r8, #10
 800c6ca:	3a30      	subs	r2, #48	@ 0x30
 800c6cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c6d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c6d4:	1c56      	adds	r6, r2, #1
 800c6d6:	9619      	str	r6, [sp, #100]	@ 0x64
 800c6d8:	7852      	ldrb	r2, [r2, #1]
 800c6da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c6de:	f1be 0f09 	cmp.w	lr, #9
 800c6e2:	d939      	bls.n	800c758 <_strtod_l+0x340>
 800c6e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c6e6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c6ea:	1a76      	subs	r6, r6, r1
 800c6ec:	2e08      	cmp	r6, #8
 800c6ee:	dc03      	bgt.n	800c6f8 <_strtod_l+0x2e0>
 800c6f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6f2:	4588      	cmp	r8, r1
 800c6f4:	bfa8      	it	ge
 800c6f6:	4688      	movge	r8, r1
 800c6f8:	f1bc 0f00 	cmp.w	ip, #0
 800c6fc:	d001      	beq.n	800c702 <_strtod_l+0x2ea>
 800c6fe:	f1c8 0800 	rsb	r8, r8, #0
 800c702:	2d00      	cmp	r5, #0
 800c704:	d14e      	bne.n	800c7a4 <_strtod_l+0x38c>
 800c706:	9908      	ldr	r1, [sp, #32]
 800c708:	4308      	orrs	r0, r1
 800c70a:	f47f aebe 	bne.w	800c48a <_strtod_l+0x72>
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f47f aed4 	bne.w	800c4bc <_strtod_l+0xa4>
 800c714:	2a69      	cmp	r2, #105	@ 0x69
 800c716:	d028      	beq.n	800c76a <_strtod_l+0x352>
 800c718:	dc25      	bgt.n	800c766 <_strtod_l+0x34e>
 800c71a:	2a49      	cmp	r2, #73	@ 0x49
 800c71c:	d025      	beq.n	800c76a <_strtod_l+0x352>
 800c71e:	2a4e      	cmp	r2, #78	@ 0x4e
 800c720:	f47f aecc 	bne.w	800c4bc <_strtod_l+0xa4>
 800c724:	4999      	ldr	r1, [pc, #612]	@ (800c98c <_strtod_l+0x574>)
 800c726:	a819      	add	r0, sp, #100	@ 0x64
 800c728:	f002 fff8 	bl	800f71c <__match>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	f43f aec5 	beq.w	800c4bc <_strtod_l+0xa4>
 800c732:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	2b28      	cmp	r3, #40	@ 0x28
 800c738:	d12e      	bne.n	800c798 <_strtod_l+0x380>
 800c73a:	4995      	ldr	r1, [pc, #596]	@ (800c990 <_strtod_l+0x578>)
 800c73c:	aa1c      	add	r2, sp, #112	@ 0x70
 800c73e:	a819      	add	r0, sp, #100	@ 0x64
 800c740:	f003 f800 	bl	800f744 <__hexnan>
 800c744:	2805      	cmp	r0, #5
 800c746:	d127      	bne.n	800c798 <_strtod_l+0x380>
 800c748:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c74a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c74e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c752:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c756:	e698      	b.n	800c48a <_strtod_l+0x72>
 800c758:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c75a:	fb08 2101 	mla	r1, r8, r1, r2
 800c75e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c762:	9209      	str	r2, [sp, #36]	@ 0x24
 800c764:	e7b5      	b.n	800c6d2 <_strtod_l+0x2ba>
 800c766:	2a6e      	cmp	r2, #110	@ 0x6e
 800c768:	e7da      	b.n	800c720 <_strtod_l+0x308>
 800c76a:	498a      	ldr	r1, [pc, #552]	@ (800c994 <_strtod_l+0x57c>)
 800c76c:	a819      	add	r0, sp, #100	@ 0x64
 800c76e:	f002 ffd5 	bl	800f71c <__match>
 800c772:	2800      	cmp	r0, #0
 800c774:	f43f aea2 	beq.w	800c4bc <_strtod_l+0xa4>
 800c778:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c77a:	4987      	ldr	r1, [pc, #540]	@ (800c998 <_strtod_l+0x580>)
 800c77c:	3b01      	subs	r3, #1
 800c77e:	a819      	add	r0, sp, #100	@ 0x64
 800c780:	9319      	str	r3, [sp, #100]	@ 0x64
 800c782:	f002 ffcb 	bl	800f71c <__match>
 800c786:	b910      	cbnz	r0, 800c78e <_strtod_l+0x376>
 800c788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c78a:	3301      	adds	r3, #1
 800c78c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c78e:	f04f 0a00 	mov.w	sl, #0
 800c792:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800c99c <_strtod_l+0x584>
 800c796:	e678      	b.n	800c48a <_strtod_l+0x72>
 800c798:	4881      	ldr	r0, [pc, #516]	@ (800c9a0 <_strtod_l+0x588>)
 800c79a:	f001 fe7d 	bl	800e498 <nan>
 800c79e:	4682      	mov	sl, r0
 800c7a0:	468b      	mov	fp, r1
 800c7a2:	e672      	b.n	800c48a <_strtod_l+0x72>
 800c7a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7a6:	f1b9 0f00 	cmp.w	r9, #0
 800c7aa:	bf08      	it	eq
 800c7ac:	46a9      	moveq	r9, r5
 800c7ae:	eba8 0303 	sub.w	r3, r8, r3
 800c7b2:	2d10      	cmp	r5, #16
 800c7b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c7b6:	462c      	mov	r4, r5
 800c7b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ba:	bfa8      	it	ge
 800c7bc:	2410      	movge	r4, #16
 800c7be:	f7f3 fe1b 	bl	80003f8 <__aeabi_ui2d>
 800c7c2:	2d09      	cmp	r5, #9
 800c7c4:	4682      	mov	sl, r0
 800c7c6:	468b      	mov	fp, r1
 800c7c8:	dc11      	bgt.n	800c7ee <_strtod_l+0x3d6>
 800c7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f43f ae5c 	beq.w	800c48a <_strtod_l+0x72>
 800c7d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d4:	dd76      	ble.n	800c8c4 <_strtod_l+0x4ac>
 800c7d6:	2b16      	cmp	r3, #22
 800c7d8:	dc5d      	bgt.n	800c896 <_strtod_l+0x47e>
 800c7da:	4972      	ldr	r1, [pc, #456]	@ (800c9a4 <_strtod_l+0x58c>)
 800c7dc:	4652      	mov	r2, sl
 800c7de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c7e2:	465b      	mov	r3, fp
 800c7e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7e8:	f7f3 fe80 	bl	80004ec <__aeabi_dmul>
 800c7ec:	e7d7      	b.n	800c79e <_strtod_l+0x386>
 800c7ee:	4b6d      	ldr	r3, [pc, #436]	@ (800c9a4 <_strtod_l+0x58c>)
 800c7f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c7f8:	f7f3 fe78 	bl	80004ec <__aeabi_dmul>
 800c7fc:	4682      	mov	sl, r0
 800c7fe:	4638      	mov	r0, r7
 800c800:	468b      	mov	fp, r1
 800c802:	f7f3 fdf9 	bl	80003f8 <__aeabi_ui2d>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	4650      	mov	r0, sl
 800c80c:	4659      	mov	r1, fp
 800c80e:	f7f3 fcb7 	bl	8000180 <__adddf3>
 800c812:	2d0f      	cmp	r5, #15
 800c814:	4682      	mov	sl, r0
 800c816:	468b      	mov	fp, r1
 800c818:	ddd7      	ble.n	800c7ca <_strtod_l+0x3b2>
 800c81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c81c:	1b2c      	subs	r4, r5, r4
 800c81e:	441c      	add	r4, r3
 800c820:	2c00      	cmp	r4, #0
 800c822:	f340 8093 	ble.w	800c94c <_strtod_l+0x534>
 800c826:	f014 030f 	ands.w	r3, r4, #15
 800c82a:	d00a      	beq.n	800c842 <_strtod_l+0x42a>
 800c82c:	495d      	ldr	r1, [pc, #372]	@ (800c9a4 <_strtod_l+0x58c>)
 800c82e:	4652      	mov	r2, sl
 800c830:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c834:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c838:	465b      	mov	r3, fp
 800c83a:	f7f3 fe57 	bl	80004ec <__aeabi_dmul>
 800c83e:	4682      	mov	sl, r0
 800c840:	468b      	mov	fp, r1
 800c842:	f034 040f 	bics.w	r4, r4, #15
 800c846:	d073      	beq.n	800c930 <_strtod_l+0x518>
 800c848:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c84c:	dd49      	ble.n	800c8e2 <_strtod_l+0x4ca>
 800c84e:	2400      	movs	r4, #0
 800c850:	46a0      	mov	r8, r4
 800c852:	46a1      	mov	r9, r4
 800c854:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c856:	2322      	movs	r3, #34	@ 0x22
 800c858:	f04f 0a00 	mov.w	sl, #0
 800c85c:	9a05      	ldr	r2, [sp, #20]
 800c85e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800c99c <_strtod_l+0x584>
 800c862:	6013      	str	r3, [r2, #0]
 800c864:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c866:	2b00      	cmp	r3, #0
 800c868:	f43f ae0f 	beq.w	800c48a <_strtod_l+0x72>
 800c86c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c86e:	9805      	ldr	r0, [sp, #20]
 800c870:	f003 f856 	bl	800f920 <_Bfree>
 800c874:	4649      	mov	r1, r9
 800c876:	9805      	ldr	r0, [sp, #20]
 800c878:	f003 f852 	bl	800f920 <_Bfree>
 800c87c:	4641      	mov	r1, r8
 800c87e:	9805      	ldr	r0, [sp, #20]
 800c880:	f003 f84e 	bl	800f920 <_Bfree>
 800c884:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c886:	9805      	ldr	r0, [sp, #20]
 800c888:	f003 f84a 	bl	800f920 <_Bfree>
 800c88c:	4621      	mov	r1, r4
 800c88e:	9805      	ldr	r0, [sp, #20]
 800c890:	f003 f846 	bl	800f920 <_Bfree>
 800c894:	e5f9      	b.n	800c48a <_strtod_l+0x72>
 800c896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c898:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c89c:	4293      	cmp	r3, r2
 800c89e:	dbbc      	blt.n	800c81a <_strtod_l+0x402>
 800c8a0:	4c40      	ldr	r4, [pc, #256]	@ (800c9a4 <_strtod_l+0x58c>)
 800c8a2:	f1c5 050f 	rsb	r5, r5, #15
 800c8a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c8aa:	4652      	mov	r2, sl
 800c8ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8b0:	465b      	mov	r3, fp
 800c8b2:	f7f3 fe1b 	bl	80004ec <__aeabi_dmul>
 800c8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b8:	1b5d      	subs	r5, r3, r5
 800c8ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c8be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c8c2:	e791      	b.n	800c7e8 <_strtod_l+0x3d0>
 800c8c4:	3316      	adds	r3, #22
 800c8c6:	dba8      	blt.n	800c81a <_strtod_l+0x402>
 800c8c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8ca:	4650      	mov	r0, sl
 800c8cc:	eba3 0808 	sub.w	r8, r3, r8
 800c8d0:	4b34      	ldr	r3, [pc, #208]	@ (800c9a4 <_strtod_l+0x58c>)
 800c8d2:	4659      	mov	r1, fp
 800c8d4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c8d8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c8dc:	f7f3 ff30 	bl	8000740 <__aeabi_ddiv>
 800c8e0:	e75d      	b.n	800c79e <_strtod_l+0x386>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	4650      	mov	r0, sl
 800c8e6:	4659      	mov	r1, fp
 800c8e8:	461e      	mov	r6, r3
 800c8ea:	4f2f      	ldr	r7, [pc, #188]	@ (800c9a8 <_strtod_l+0x590>)
 800c8ec:	1124      	asrs	r4, r4, #4
 800c8ee:	2c01      	cmp	r4, #1
 800c8f0:	dc21      	bgt.n	800c936 <_strtod_l+0x51e>
 800c8f2:	b10b      	cbz	r3, 800c8f8 <_strtod_l+0x4e0>
 800c8f4:	4682      	mov	sl, r0
 800c8f6:	468b      	mov	fp, r1
 800c8f8:	492b      	ldr	r1, [pc, #172]	@ (800c9a8 <_strtod_l+0x590>)
 800c8fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c8fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c902:	4652      	mov	r2, sl
 800c904:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c908:	465b      	mov	r3, fp
 800c90a:	f7f3 fdef 	bl	80004ec <__aeabi_dmul>
 800c90e:	4b23      	ldr	r3, [pc, #140]	@ (800c99c <_strtod_l+0x584>)
 800c910:	460a      	mov	r2, r1
 800c912:	400b      	ands	r3, r1
 800c914:	4925      	ldr	r1, [pc, #148]	@ (800c9ac <_strtod_l+0x594>)
 800c916:	4682      	mov	sl, r0
 800c918:	428b      	cmp	r3, r1
 800c91a:	d898      	bhi.n	800c84e <_strtod_l+0x436>
 800c91c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c920:	428b      	cmp	r3, r1
 800c922:	bf86      	itte	hi
 800c924:	f04f 3aff 	movhi.w	sl, #4294967295
 800c928:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800c9b0 <_strtod_l+0x598>
 800c92c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c930:	2300      	movs	r3, #0
 800c932:	9308      	str	r3, [sp, #32]
 800c934:	e076      	b.n	800ca24 <_strtod_l+0x60c>
 800c936:	07e2      	lsls	r2, r4, #31
 800c938:	d504      	bpl.n	800c944 <_strtod_l+0x52c>
 800c93a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c93e:	f7f3 fdd5 	bl	80004ec <__aeabi_dmul>
 800c942:	2301      	movs	r3, #1
 800c944:	3601      	adds	r6, #1
 800c946:	1064      	asrs	r4, r4, #1
 800c948:	3708      	adds	r7, #8
 800c94a:	e7d0      	b.n	800c8ee <_strtod_l+0x4d6>
 800c94c:	d0f0      	beq.n	800c930 <_strtod_l+0x518>
 800c94e:	4264      	negs	r4, r4
 800c950:	f014 020f 	ands.w	r2, r4, #15
 800c954:	d00a      	beq.n	800c96c <_strtod_l+0x554>
 800c956:	4b13      	ldr	r3, [pc, #76]	@ (800c9a4 <_strtod_l+0x58c>)
 800c958:	4650      	mov	r0, sl
 800c95a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c95e:	4659      	mov	r1, fp
 800c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c964:	f7f3 feec 	bl	8000740 <__aeabi_ddiv>
 800c968:	4682      	mov	sl, r0
 800c96a:	468b      	mov	fp, r1
 800c96c:	1124      	asrs	r4, r4, #4
 800c96e:	d0df      	beq.n	800c930 <_strtod_l+0x518>
 800c970:	2c1f      	cmp	r4, #31
 800c972:	dd1f      	ble.n	800c9b4 <_strtod_l+0x59c>
 800c974:	2400      	movs	r4, #0
 800c976:	46a0      	mov	r8, r4
 800c978:	46a1      	mov	r9, r4
 800c97a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c97c:	2322      	movs	r3, #34	@ 0x22
 800c97e:	9a05      	ldr	r2, [sp, #20]
 800c980:	f04f 0a00 	mov.w	sl, #0
 800c984:	f04f 0b00 	mov.w	fp, #0
 800c988:	6013      	str	r3, [r2, #0]
 800c98a:	e76b      	b.n	800c864 <_strtod_l+0x44c>
 800c98c:	08011284 	.word	0x08011284
 800c990:	08011410 	.word	0x08011410
 800c994:	0801127c 	.word	0x0801127c
 800c998:	080112bb 	.word	0x080112bb
 800c99c:	7ff00000 	.word	0x7ff00000
 800c9a0:	08011274 	.word	0x08011274
 800c9a4:	08011598 	.word	0x08011598
 800c9a8:	08011570 	.word	0x08011570
 800c9ac:	7ca00000 	.word	0x7ca00000
 800c9b0:	7fefffff 	.word	0x7fefffff
 800c9b4:	f014 0310 	ands.w	r3, r4, #16
 800c9b8:	bf18      	it	ne
 800c9ba:	236a      	movne	r3, #106	@ 0x6a
 800c9bc:	4650      	mov	r0, sl
 800c9be:	9308      	str	r3, [sp, #32]
 800c9c0:	4659      	mov	r1, fp
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	4e77      	ldr	r6, [pc, #476]	@ (800cba4 <_strtod_l+0x78c>)
 800c9c6:	07e7      	lsls	r7, r4, #31
 800c9c8:	d504      	bpl.n	800c9d4 <_strtod_l+0x5bc>
 800c9ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9ce:	f7f3 fd8d 	bl	80004ec <__aeabi_dmul>
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	1064      	asrs	r4, r4, #1
 800c9d6:	f106 0608 	add.w	r6, r6, #8
 800c9da:	d1f4      	bne.n	800c9c6 <_strtod_l+0x5ae>
 800c9dc:	b10b      	cbz	r3, 800c9e2 <_strtod_l+0x5ca>
 800c9de:	4682      	mov	sl, r0
 800c9e0:	468b      	mov	fp, r1
 800c9e2:	9b08      	ldr	r3, [sp, #32]
 800c9e4:	b1b3      	cbz	r3, 800ca14 <_strtod_l+0x5fc>
 800c9e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c9ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	4659      	mov	r1, fp
 800c9f2:	dd0f      	ble.n	800ca14 <_strtod_l+0x5fc>
 800c9f4:	2b1f      	cmp	r3, #31
 800c9f6:	dd58      	ble.n	800caaa <_strtod_l+0x692>
 800c9f8:	2b34      	cmp	r3, #52	@ 0x34
 800c9fa:	bfd8      	it	le
 800c9fc:	f04f 33ff 	movle.w	r3, #4294967295
 800ca00:	f04f 0a00 	mov.w	sl, #0
 800ca04:	bfcf      	iteee	gt
 800ca06:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ca0a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ca0e:	4093      	lslle	r3, r2
 800ca10:	ea03 0b01 	andle.w	fp, r3, r1
 800ca14:	2200      	movs	r2, #0
 800ca16:	2300      	movs	r3, #0
 800ca18:	4650      	mov	r0, sl
 800ca1a:	4659      	mov	r1, fp
 800ca1c:	f7f3 ffce 	bl	80009bc <__aeabi_dcmpeq>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d1a7      	bne.n	800c974 <_strtod_l+0x55c>
 800ca24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca26:	464a      	mov	r2, r9
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ca2c:	462b      	mov	r3, r5
 800ca2e:	9805      	ldr	r0, [sp, #20]
 800ca30:	f002 ffde 	bl	800f9f0 <__s2b>
 800ca34:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ca36:	2800      	cmp	r0, #0
 800ca38:	f43f af09 	beq.w	800c84e <_strtod_l+0x436>
 800ca3c:	2400      	movs	r4, #0
 800ca3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca42:	2a00      	cmp	r2, #0
 800ca44:	eba3 0308 	sub.w	r3, r3, r8
 800ca48:	bfa8      	it	ge
 800ca4a:	2300      	movge	r3, #0
 800ca4c:	46a0      	mov	r8, r4
 800ca4e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ca50:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ca54:	9316      	str	r3, [sp, #88]	@ 0x58
 800ca56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca58:	9805      	ldr	r0, [sp, #20]
 800ca5a:	6859      	ldr	r1, [r3, #4]
 800ca5c:	f002 ff20 	bl	800f8a0 <_Balloc>
 800ca60:	4681      	mov	r9, r0
 800ca62:	2800      	cmp	r0, #0
 800ca64:	f43f aef7 	beq.w	800c856 <_strtod_l+0x43e>
 800ca68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca6a:	300c      	adds	r0, #12
 800ca6c:	691a      	ldr	r2, [r3, #16]
 800ca6e:	f103 010c 	add.w	r1, r3, #12
 800ca72:	3202      	adds	r2, #2
 800ca74:	0092      	lsls	r2, r2, #2
 800ca76:	f001 fd00 	bl	800e47a <memcpy>
 800ca7a:	ab1c      	add	r3, sp, #112	@ 0x70
 800ca7c:	9301      	str	r3, [sp, #4]
 800ca7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	4652      	mov	r2, sl
 800ca84:	465b      	mov	r3, fp
 800ca86:	9805      	ldr	r0, [sp, #20]
 800ca88:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ca8c:	f003 fadc 	bl	8010048 <__d2b>
 800ca90:	901a      	str	r0, [sp, #104]	@ 0x68
 800ca92:	2800      	cmp	r0, #0
 800ca94:	f43f aedf 	beq.w	800c856 <_strtod_l+0x43e>
 800ca98:	2101      	movs	r1, #1
 800ca9a:	9805      	ldr	r0, [sp, #20]
 800ca9c:	f003 f83e 	bl	800fb1c <__i2b>
 800caa0:	4680      	mov	r8, r0
 800caa2:	b948      	cbnz	r0, 800cab8 <_strtod_l+0x6a0>
 800caa4:	f04f 0800 	mov.w	r8, #0
 800caa8:	e6d5      	b.n	800c856 <_strtod_l+0x43e>
 800caaa:	f04f 32ff 	mov.w	r2, #4294967295
 800caae:	fa02 f303 	lsl.w	r3, r2, r3
 800cab2:	ea03 0a0a 	and.w	sl, r3, sl
 800cab6:	e7ad      	b.n	800ca14 <_strtod_l+0x5fc>
 800cab8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800caba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cabc:	2d00      	cmp	r5, #0
 800cabe:	bfab      	itete	ge
 800cac0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cac2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cac4:	18ef      	addge	r7, r5, r3
 800cac6:	1b5e      	sublt	r6, r3, r5
 800cac8:	9b08      	ldr	r3, [sp, #32]
 800caca:	bfa8      	it	ge
 800cacc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cace:	eba5 0503 	sub.w	r5, r5, r3
 800cad2:	4415      	add	r5, r2
 800cad4:	4b34      	ldr	r3, [pc, #208]	@ (800cba8 <_strtod_l+0x790>)
 800cad6:	f105 35ff 	add.w	r5, r5, #4294967295
 800cada:	bfb8      	it	lt
 800cadc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cade:	429d      	cmp	r5, r3
 800cae0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cae4:	da50      	bge.n	800cb88 <_strtod_l+0x770>
 800cae6:	1b5b      	subs	r3, r3, r5
 800cae8:	2b1f      	cmp	r3, #31
 800caea:	f04f 0101 	mov.w	r1, #1
 800caee:	eba2 0203 	sub.w	r2, r2, r3
 800caf2:	dc3d      	bgt.n	800cb70 <_strtod_l+0x758>
 800caf4:	fa01 f303 	lsl.w	r3, r1, r3
 800caf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cafa:	2300      	movs	r3, #0
 800cafc:	9310      	str	r3, [sp, #64]	@ 0x40
 800cafe:	18bd      	adds	r5, r7, r2
 800cb00:	9b08      	ldr	r3, [sp, #32]
 800cb02:	42af      	cmp	r7, r5
 800cb04:	4416      	add	r6, r2
 800cb06:	441e      	add	r6, r3
 800cb08:	463b      	mov	r3, r7
 800cb0a:	bfa8      	it	ge
 800cb0c:	462b      	movge	r3, r5
 800cb0e:	42b3      	cmp	r3, r6
 800cb10:	bfa8      	it	ge
 800cb12:	4633      	movge	r3, r6
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	bfc2      	ittt	gt
 800cb18:	1aed      	subgt	r5, r5, r3
 800cb1a:	1af6      	subgt	r6, r6, r3
 800cb1c:	1aff      	subgt	r7, r7, r3
 800cb1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	dd16      	ble.n	800cb52 <_strtod_l+0x73a>
 800cb24:	4641      	mov	r1, r8
 800cb26:	461a      	mov	r2, r3
 800cb28:	9805      	ldr	r0, [sp, #20]
 800cb2a:	f003 f8af 	bl	800fc8c <__pow5mult>
 800cb2e:	4680      	mov	r8, r0
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d0b7      	beq.n	800caa4 <_strtod_l+0x68c>
 800cb34:	4601      	mov	r1, r0
 800cb36:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb38:	9805      	ldr	r0, [sp, #20]
 800cb3a:	f003 f805 	bl	800fb48 <__multiply>
 800cb3e:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb40:	2800      	cmp	r0, #0
 800cb42:	f43f ae88 	beq.w	800c856 <_strtod_l+0x43e>
 800cb46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb48:	9805      	ldr	r0, [sp, #20]
 800cb4a:	f002 fee9 	bl	800f920 <_Bfree>
 800cb4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb50:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb52:	2d00      	cmp	r5, #0
 800cb54:	dc1d      	bgt.n	800cb92 <_strtod_l+0x77a>
 800cb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	dd27      	ble.n	800cbac <_strtod_l+0x794>
 800cb5c:	4649      	mov	r1, r9
 800cb5e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cb60:	9805      	ldr	r0, [sp, #20]
 800cb62:	f003 f893 	bl	800fc8c <__pow5mult>
 800cb66:	4681      	mov	r9, r0
 800cb68:	bb00      	cbnz	r0, 800cbac <_strtod_l+0x794>
 800cb6a:	f04f 0900 	mov.w	r9, #0
 800cb6e:	e672      	b.n	800c856 <_strtod_l+0x43e>
 800cb70:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cb74:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cb78:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cb7c:	35e2      	adds	r5, #226	@ 0xe2
 800cb7e:	fa01 f305 	lsl.w	r3, r1, r5
 800cb82:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb84:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cb86:	e7ba      	b.n	800cafe <_strtod_l+0x6e6>
 800cb88:	2300      	movs	r3, #0
 800cb8a:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb90:	e7b5      	b.n	800cafe <_strtod_l+0x6e6>
 800cb92:	462a      	mov	r2, r5
 800cb94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb96:	9805      	ldr	r0, [sp, #20]
 800cb98:	f003 f8d2 	bl	800fd40 <__lshift>
 800cb9c:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d1d9      	bne.n	800cb56 <_strtod_l+0x73e>
 800cba2:	e658      	b.n	800c856 <_strtod_l+0x43e>
 800cba4:	08011438 	.word	0x08011438
 800cba8:	fffffc02 	.word	0xfffffc02
 800cbac:	2e00      	cmp	r6, #0
 800cbae:	dd07      	ble.n	800cbc0 <_strtod_l+0x7a8>
 800cbb0:	4649      	mov	r1, r9
 800cbb2:	4632      	mov	r2, r6
 800cbb4:	9805      	ldr	r0, [sp, #20]
 800cbb6:	f003 f8c3 	bl	800fd40 <__lshift>
 800cbba:	4681      	mov	r9, r0
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d0d4      	beq.n	800cb6a <_strtod_l+0x752>
 800cbc0:	2f00      	cmp	r7, #0
 800cbc2:	dd08      	ble.n	800cbd6 <_strtod_l+0x7be>
 800cbc4:	4641      	mov	r1, r8
 800cbc6:	463a      	mov	r2, r7
 800cbc8:	9805      	ldr	r0, [sp, #20]
 800cbca:	f003 f8b9 	bl	800fd40 <__lshift>
 800cbce:	4680      	mov	r8, r0
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	f43f ae40 	beq.w	800c856 <_strtod_l+0x43e>
 800cbd6:	464a      	mov	r2, r9
 800cbd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbda:	9805      	ldr	r0, [sp, #20]
 800cbdc:	f003 f938 	bl	800fe50 <__mdiff>
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	f43f ae37 	beq.w	800c856 <_strtod_l+0x43e>
 800cbe8:	68c3      	ldr	r3, [r0, #12]
 800cbea:	4641      	mov	r1, r8
 800cbec:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cbee:	2300      	movs	r3, #0
 800cbf0:	60c3      	str	r3, [r0, #12]
 800cbf2:	f003 f911 	bl	800fe18 <__mcmp>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	da3d      	bge.n	800cc76 <_strtod_l+0x85e>
 800cbfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbfc:	ea53 030a 	orrs.w	r3, r3, sl
 800cc00:	d163      	bne.n	800ccca <_strtod_l+0x8b2>
 800cc02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d15f      	bne.n	800ccca <_strtod_l+0x8b2>
 800cc0a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc0e:	0d1b      	lsrs	r3, r3, #20
 800cc10:	051b      	lsls	r3, r3, #20
 800cc12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cc16:	d958      	bls.n	800ccca <_strtod_l+0x8b2>
 800cc18:	6963      	ldr	r3, [r4, #20]
 800cc1a:	b913      	cbnz	r3, 800cc22 <_strtod_l+0x80a>
 800cc1c:	6923      	ldr	r3, [r4, #16]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	dd53      	ble.n	800ccca <_strtod_l+0x8b2>
 800cc22:	4621      	mov	r1, r4
 800cc24:	2201      	movs	r2, #1
 800cc26:	9805      	ldr	r0, [sp, #20]
 800cc28:	f003 f88a 	bl	800fd40 <__lshift>
 800cc2c:	4641      	mov	r1, r8
 800cc2e:	4604      	mov	r4, r0
 800cc30:	f003 f8f2 	bl	800fe18 <__mcmp>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	dd48      	ble.n	800ccca <_strtod_l+0x8b2>
 800cc38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc3c:	9a08      	ldr	r2, [sp, #32]
 800cc3e:	0d1b      	lsrs	r3, r3, #20
 800cc40:	051b      	lsls	r3, r3, #20
 800cc42:	2a00      	cmp	r2, #0
 800cc44:	d062      	beq.n	800cd0c <_strtod_l+0x8f4>
 800cc46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cc4a:	d85f      	bhi.n	800cd0c <_strtod_l+0x8f4>
 800cc4c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cc50:	f67f ae94 	bls.w	800c97c <_strtod_l+0x564>
 800cc54:	4650      	mov	r0, sl
 800cc56:	4659      	mov	r1, fp
 800cc58:	4ba3      	ldr	r3, [pc, #652]	@ (800cee8 <_strtod_l+0xad0>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f7f3 fc46 	bl	80004ec <__aeabi_dmul>
 800cc60:	4ba2      	ldr	r3, [pc, #648]	@ (800ceec <_strtod_l+0xad4>)
 800cc62:	4682      	mov	sl, r0
 800cc64:	400b      	ands	r3, r1
 800cc66:	468b      	mov	fp, r1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f47f adff 	bne.w	800c86c <_strtod_l+0x454>
 800cc6e:	2322      	movs	r3, #34	@ 0x22
 800cc70:	9a05      	ldr	r2, [sp, #20]
 800cc72:	6013      	str	r3, [r2, #0]
 800cc74:	e5fa      	b.n	800c86c <_strtod_l+0x454>
 800cc76:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cc7a:	d165      	bne.n	800cd48 <_strtod_l+0x930>
 800cc7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cc7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc82:	b35a      	cbz	r2, 800ccdc <_strtod_l+0x8c4>
 800cc84:	4a9a      	ldr	r2, [pc, #616]	@ (800cef0 <_strtod_l+0xad8>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d12b      	bne.n	800cce2 <_strtod_l+0x8ca>
 800cc8a:	9b08      	ldr	r3, [sp, #32]
 800cc8c:	4651      	mov	r1, sl
 800cc8e:	b303      	cbz	r3, 800ccd2 <_strtod_l+0x8ba>
 800cc90:	465a      	mov	r2, fp
 800cc92:	4b96      	ldr	r3, [pc, #600]	@ (800ceec <_strtod_l+0xad4>)
 800cc94:	4013      	ands	r3, r2
 800cc96:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cc9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9e:	d81b      	bhi.n	800ccd8 <_strtod_l+0x8c0>
 800cca0:	0d1b      	lsrs	r3, r3, #20
 800cca2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cca6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccaa:	4299      	cmp	r1, r3
 800ccac:	d119      	bne.n	800cce2 <_strtod_l+0x8ca>
 800ccae:	4b91      	ldr	r3, [pc, #580]	@ (800cef4 <_strtod_l+0xadc>)
 800ccb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d102      	bne.n	800ccbc <_strtod_l+0x8a4>
 800ccb6:	3101      	adds	r1, #1
 800ccb8:	f43f adcd 	beq.w	800c856 <_strtod_l+0x43e>
 800ccbc:	f04f 0a00 	mov.w	sl, #0
 800ccc0:	4b8a      	ldr	r3, [pc, #552]	@ (800ceec <_strtod_l+0xad4>)
 800ccc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccc4:	401a      	ands	r2, r3
 800ccc6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ccca:	9b08      	ldr	r3, [sp, #32]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1c1      	bne.n	800cc54 <_strtod_l+0x83c>
 800ccd0:	e5cc      	b.n	800c86c <_strtod_l+0x454>
 800ccd2:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd6:	e7e8      	b.n	800ccaa <_strtod_l+0x892>
 800ccd8:	4613      	mov	r3, r2
 800ccda:	e7e6      	b.n	800ccaa <_strtod_l+0x892>
 800ccdc:	ea53 030a 	orrs.w	r3, r3, sl
 800cce0:	d0aa      	beq.n	800cc38 <_strtod_l+0x820>
 800cce2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cce4:	b1db      	cbz	r3, 800cd1e <_strtod_l+0x906>
 800cce6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cce8:	4213      	tst	r3, r2
 800ccea:	d0ee      	beq.n	800ccca <_strtod_l+0x8b2>
 800ccec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccee:	4650      	mov	r0, sl
 800ccf0:	4659      	mov	r1, fp
 800ccf2:	9a08      	ldr	r2, [sp, #32]
 800ccf4:	b1bb      	cbz	r3, 800cd26 <_strtod_l+0x90e>
 800ccf6:	f7ff fb6b 	bl	800c3d0 <sulp>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd02:	f7f3 fa3d 	bl	8000180 <__adddf3>
 800cd06:	4682      	mov	sl, r0
 800cd08:	468b      	mov	fp, r1
 800cd0a:	e7de      	b.n	800ccca <_strtod_l+0x8b2>
 800cd0c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cd10:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cd14:	f04f 3aff 	mov.w	sl, #4294967295
 800cd18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cd1c:	e7d5      	b.n	800ccca <_strtod_l+0x8b2>
 800cd1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd20:	ea13 0f0a 	tst.w	r3, sl
 800cd24:	e7e1      	b.n	800ccea <_strtod_l+0x8d2>
 800cd26:	f7ff fb53 	bl	800c3d0 <sulp>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd32:	f7f3 fa23 	bl	800017c <__aeabi_dsub>
 800cd36:	2200      	movs	r2, #0
 800cd38:	2300      	movs	r3, #0
 800cd3a:	4682      	mov	sl, r0
 800cd3c:	468b      	mov	fp, r1
 800cd3e:	f7f3 fe3d 	bl	80009bc <__aeabi_dcmpeq>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d0c1      	beq.n	800ccca <_strtod_l+0x8b2>
 800cd46:	e619      	b.n	800c97c <_strtod_l+0x564>
 800cd48:	4641      	mov	r1, r8
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f003 f9d4 	bl	80100f8 <__ratio>
 800cd50:	2200      	movs	r2, #0
 800cd52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cd56:	4606      	mov	r6, r0
 800cd58:	460f      	mov	r7, r1
 800cd5a:	f7f3 fe43 	bl	80009e4 <__aeabi_dcmple>
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d06d      	beq.n	800ce3e <_strtod_l+0xa26>
 800cd62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d178      	bne.n	800ce5a <_strtod_l+0xa42>
 800cd68:	f1ba 0f00 	cmp.w	sl, #0
 800cd6c:	d156      	bne.n	800ce1c <_strtod_l+0xa04>
 800cd6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d158      	bne.n	800ce2a <_strtod_l+0xa12>
 800cd78:	2200      	movs	r2, #0
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	4639      	mov	r1, r7
 800cd7e:	4b5e      	ldr	r3, [pc, #376]	@ (800cef8 <_strtod_l+0xae0>)
 800cd80:	f7f3 fe26 	bl	80009d0 <__aeabi_dcmplt>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d157      	bne.n	800ce38 <_strtod_l+0xa20>
 800cd88:	4630      	mov	r0, r6
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	4b5b      	ldr	r3, [pc, #364]	@ (800cefc <_strtod_l+0xae4>)
 800cd90:	f7f3 fbac 	bl	80004ec <__aeabi_dmul>
 800cd94:	4606      	mov	r6, r0
 800cd96:	460f      	mov	r7, r1
 800cd98:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cd9c:	9606      	str	r6, [sp, #24]
 800cd9e:	9307      	str	r3, [sp, #28]
 800cda0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cda4:	4d51      	ldr	r5, [pc, #324]	@ (800ceec <_strtod_l+0xad4>)
 800cda6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cdaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdac:	401d      	ands	r5, r3
 800cdae:	4b54      	ldr	r3, [pc, #336]	@ (800cf00 <_strtod_l+0xae8>)
 800cdb0:	429d      	cmp	r5, r3
 800cdb2:	f040 80ab 	bne.w	800cf0c <_strtod_l+0xaf4>
 800cdb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdb8:	4650      	mov	r0, sl
 800cdba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cdbe:	4659      	mov	r1, fp
 800cdc0:	f003 f8da 	bl	800ff78 <__ulp>
 800cdc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdc8:	f7f3 fb90 	bl	80004ec <__aeabi_dmul>
 800cdcc:	4652      	mov	r2, sl
 800cdce:	465b      	mov	r3, fp
 800cdd0:	f7f3 f9d6 	bl	8000180 <__adddf3>
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	4945      	ldr	r1, [pc, #276]	@ (800ceec <_strtod_l+0xad4>)
 800cdd8:	4a4a      	ldr	r2, [pc, #296]	@ (800cf04 <_strtod_l+0xaec>)
 800cdda:	4019      	ands	r1, r3
 800cddc:	4291      	cmp	r1, r2
 800cdde:	4682      	mov	sl, r0
 800cde0:	d942      	bls.n	800ce68 <_strtod_l+0xa50>
 800cde2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cde4:	4b43      	ldr	r3, [pc, #268]	@ (800cef4 <_strtod_l+0xadc>)
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d103      	bne.n	800cdf2 <_strtod_l+0x9da>
 800cdea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cdec:	3301      	adds	r3, #1
 800cdee:	f43f ad32 	beq.w	800c856 <_strtod_l+0x43e>
 800cdf2:	f04f 3aff 	mov.w	sl, #4294967295
 800cdf6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800cef4 <_strtod_l+0xadc>
 800cdfa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdfc:	9805      	ldr	r0, [sp, #20]
 800cdfe:	f002 fd8f 	bl	800f920 <_Bfree>
 800ce02:	4649      	mov	r1, r9
 800ce04:	9805      	ldr	r0, [sp, #20]
 800ce06:	f002 fd8b 	bl	800f920 <_Bfree>
 800ce0a:	4641      	mov	r1, r8
 800ce0c:	9805      	ldr	r0, [sp, #20]
 800ce0e:	f002 fd87 	bl	800f920 <_Bfree>
 800ce12:	4621      	mov	r1, r4
 800ce14:	9805      	ldr	r0, [sp, #20]
 800ce16:	f002 fd83 	bl	800f920 <_Bfree>
 800ce1a:	e61c      	b.n	800ca56 <_strtod_l+0x63e>
 800ce1c:	f1ba 0f01 	cmp.w	sl, #1
 800ce20:	d103      	bne.n	800ce2a <_strtod_l+0xa12>
 800ce22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f43f ada9 	beq.w	800c97c <_strtod_l+0x564>
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	4b36      	ldr	r3, [pc, #216]	@ (800cf08 <_strtod_l+0xaf0>)
 800ce2e:	2600      	movs	r6, #0
 800ce30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce34:	4f30      	ldr	r7, [pc, #192]	@ (800cef8 <_strtod_l+0xae0>)
 800ce36:	e7b3      	b.n	800cda0 <_strtod_l+0x988>
 800ce38:	2600      	movs	r6, #0
 800ce3a:	4f30      	ldr	r7, [pc, #192]	@ (800cefc <_strtod_l+0xae4>)
 800ce3c:	e7ac      	b.n	800cd98 <_strtod_l+0x980>
 800ce3e:	4630      	mov	r0, r6
 800ce40:	4639      	mov	r1, r7
 800ce42:	4b2e      	ldr	r3, [pc, #184]	@ (800cefc <_strtod_l+0xae4>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	f7f3 fb51 	bl	80004ec <__aeabi_dmul>
 800ce4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	460f      	mov	r7, r1
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d0a1      	beq.n	800cd98 <_strtod_l+0x980>
 800ce54:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ce58:	e7a2      	b.n	800cda0 <_strtod_l+0x988>
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	4b26      	ldr	r3, [pc, #152]	@ (800cef8 <_strtod_l+0xae0>)
 800ce5e:	4616      	mov	r6, r2
 800ce60:	461f      	mov	r7, r3
 800ce62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce66:	e79b      	b.n	800cda0 <_strtod_l+0x988>
 800ce68:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ce6c:	9b08      	ldr	r3, [sp, #32]
 800ce6e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1c1      	bne.n	800cdfa <_strtod_l+0x9e2>
 800ce76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce7a:	0d1b      	lsrs	r3, r3, #20
 800ce7c:	051b      	lsls	r3, r3, #20
 800ce7e:	429d      	cmp	r5, r3
 800ce80:	d1bb      	bne.n	800cdfa <_strtod_l+0x9e2>
 800ce82:	4630      	mov	r0, r6
 800ce84:	4639      	mov	r1, r7
 800ce86:	f7f3 feef 	bl	8000c68 <__aeabi_d2lz>
 800ce8a:	f7f3 fb01 	bl	8000490 <__aeabi_l2d>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4630      	mov	r0, r6
 800ce94:	4639      	mov	r1, r7
 800ce96:	f7f3 f971 	bl	800017c <__aeabi_dsub>
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cea2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cea6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cea8:	ea46 060a 	orr.w	r6, r6, sl
 800ceac:	431e      	orrs	r6, r3
 800ceae:	d06a      	beq.n	800cf86 <_strtod_l+0xb6e>
 800ceb0:	a309      	add	r3, pc, #36	@ (adr r3, 800ced8 <_strtod_l+0xac0>)
 800ceb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb6:	f7f3 fd8b 	bl	80009d0 <__aeabi_dcmplt>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	f47f acd6 	bne.w	800c86c <_strtod_l+0x454>
 800cec0:	a307      	add	r3, pc, #28	@ (adr r3, 800cee0 <_strtod_l+0xac8>)
 800cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ceca:	f7f3 fd9f 	bl	8000a0c <__aeabi_dcmpgt>
 800cece:	2800      	cmp	r0, #0
 800ced0:	d093      	beq.n	800cdfa <_strtod_l+0x9e2>
 800ced2:	e4cb      	b.n	800c86c <_strtod_l+0x454>
 800ced4:	f3af 8000 	nop.w
 800ced8:	94a03595 	.word	0x94a03595
 800cedc:	3fdfffff 	.word	0x3fdfffff
 800cee0:	35afe535 	.word	0x35afe535
 800cee4:	3fe00000 	.word	0x3fe00000
 800cee8:	39500000 	.word	0x39500000
 800ceec:	7ff00000 	.word	0x7ff00000
 800cef0:	000fffff 	.word	0x000fffff
 800cef4:	7fefffff 	.word	0x7fefffff
 800cef8:	3ff00000 	.word	0x3ff00000
 800cefc:	3fe00000 	.word	0x3fe00000
 800cf00:	7fe00000 	.word	0x7fe00000
 800cf04:	7c9fffff 	.word	0x7c9fffff
 800cf08:	bff00000 	.word	0xbff00000
 800cf0c:	9b08      	ldr	r3, [sp, #32]
 800cf0e:	b323      	cbz	r3, 800cf5a <_strtod_l+0xb42>
 800cf10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cf14:	d821      	bhi.n	800cf5a <_strtod_l+0xb42>
 800cf16:	a328      	add	r3, pc, #160	@ (adr r3, 800cfb8 <_strtod_l+0xba0>)
 800cf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	4639      	mov	r1, r7
 800cf20:	f7f3 fd60 	bl	80009e4 <__aeabi_dcmple>
 800cf24:	b1a0      	cbz	r0, 800cf50 <_strtod_l+0xb38>
 800cf26:	4639      	mov	r1, r7
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7f3 fdb7 	bl	8000a9c <__aeabi_d2uiz>
 800cf2e:	2801      	cmp	r0, #1
 800cf30:	bf38      	it	cc
 800cf32:	2001      	movcc	r0, #1
 800cf34:	f7f3 fa60 	bl	80003f8 <__aeabi_ui2d>
 800cf38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf3a:	4606      	mov	r6, r0
 800cf3c:	460f      	mov	r7, r1
 800cf3e:	b9fb      	cbnz	r3, 800cf80 <_strtod_l+0xb68>
 800cf40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cf44:	9014      	str	r0, [sp, #80]	@ 0x50
 800cf46:	9315      	str	r3, [sp, #84]	@ 0x54
 800cf48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cf4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cf50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cf56:	1b5b      	subs	r3, r3, r5
 800cf58:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cf62:	f003 f809 	bl	800ff78 <__ulp>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4650      	mov	r0, sl
 800cf6c:	4659      	mov	r1, fp
 800cf6e:	f7f3 fabd 	bl	80004ec <__aeabi_dmul>
 800cf72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cf76:	f7f3 f903 	bl	8000180 <__adddf3>
 800cf7a:	4682      	mov	sl, r0
 800cf7c:	468b      	mov	fp, r1
 800cf7e:	e775      	b.n	800ce6c <_strtod_l+0xa54>
 800cf80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cf84:	e7e0      	b.n	800cf48 <_strtod_l+0xb30>
 800cf86:	a30e      	add	r3, pc, #56	@ (adr r3, 800cfc0 <_strtod_l+0xba8>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	f7f3 fd20 	bl	80009d0 <__aeabi_dcmplt>
 800cf90:	e79d      	b.n	800cece <_strtod_l+0xab6>
 800cf92:	2300      	movs	r3, #0
 800cf94:	930e      	str	r3, [sp, #56]	@ 0x38
 800cf96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf98:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cf9a:	6013      	str	r3, [r2, #0]
 800cf9c:	f7ff ba79 	b.w	800c492 <_strtod_l+0x7a>
 800cfa0:	2a65      	cmp	r2, #101	@ 0x65
 800cfa2:	f43f ab72 	beq.w	800c68a <_strtod_l+0x272>
 800cfa6:	2a45      	cmp	r2, #69	@ 0x45
 800cfa8:	f43f ab6f 	beq.w	800c68a <_strtod_l+0x272>
 800cfac:	2301      	movs	r3, #1
 800cfae:	f7ff bbaa 	b.w	800c706 <_strtod_l+0x2ee>
 800cfb2:	bf00      	nop
 800cfb4:	f3af 8000 	nop.w
 800cfb8:	ffc00000 	.word	0xffc00000
 800cfbc:	41dfffff 	.word	0x41dfffff
 800cfc0:	94a03595 	.word	0x94a03595
 800cfc4:	3fcfffff 	.word	0x3fcfffff

0800cfc8 <_strtod_r>:
 800cfc8:	4b01      	ldr	r3, [pc, #4]	@ (800cfd0 <_strtod_r+0x8>)
 800cfca:	f7ff ba25 	b.w	800c418 <_strtod_l>
 800cfce:	bf00      	nop
 800cfd0:	20000094 	.word	0x20000094

0800cfd4 <strtod>:
 800cfd4:	460a      	mov	r2, r1
 800cfd6:	4601      	mov	r1, r0
 800cfd8:	4802      	ldr	r0, [pc, #8]	@ (800cfe4 <strtod+0x10>)
 800cfda:	4b03      	ldr	r3, [pc, #12]	@ (800cfe8 <strtod+0x14>)
 800cfdc:	6800      	ldr	r0, [r0, #0]
 800cfde:	f7ff ba1b 	b.w	800c418 <_strtod_l>
 800cfe2:	bf00      	nop
 800cfe4:	20000200 	.word	0x20000200
 800cfe8:	20000094 	.word	0x20000094

0800cfec <_strtol_l.isra.0>:
 800cfec:	2b24      	cmp	r3, #36	@ 0x24
 800cfee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff2:	4686      	mov	lr, r0
 800cff4:	4690      	mov	r8, r2
 800cff6:	d801      	bhi.n	800cffc <_strtol_l.isra.0+0x10>
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d106      	bne.n	800d00a <_strtol_l.isra.0+0x1e>
 800cffc:	f001 f9fa 	bl	800e3f4 <__errno>
 800d000:	2316      	movs	r3, #22
 800d002:	6003      	str	r3, [r0, #0]
 800d004:	2000      	movs	r0, #0
 800d006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d00a:	460d      	mov	r5, r1
 800d00c:	4833      	ldr	r0, [pc, #204]	@ (800d0dc <_strtol_l.isra.0+0xf0>)
 800d00e:	462a      	mov	r2, r5
 800d010:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d014:	5d06      	ldrb	r6, [r0, r4]
 800d016:	f016 0608 	ands.w	r6, r6, #8
 800d01a:	d1f8      	bne.n	800d00e <_strtol_l.isra.0+0x22>
 800d01c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d01e:	d110      	bne.n	800d042 <_strtol_l.isra.0+0x56>
 800d020:	2601      	movs	r6, #1
 800d022:	782c      	ldrb	r4, [r5, #0]
 800d024:	1c95      	adds	r5, r2, #2
 800d026:	f033 0210 	bics.w	r2, r3, #16
 800d02a:	d115      	bne.n	800d058 <_strtol_l.isra.0+0x6c>
 800d02c:	2c30      	cmp	r4, #48	@ 0x30
 800d02e:	d10d      	bne.n	800d04c <_strtol_l.isra.0+0x60>
 800d030:	782a      	ldrb	r2, [r5, #0]
 800d032:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d036:	2a58      	cmp	r2, #88	@ 0x58
 800d038:	d108      	bne.n	800d04c <_strtol_l.isra.0+0x60>
 800d03a:	786c      	ldrb	r4, [r5, #1]
 800d03c:	3502      	adds	r5, #2
 800d03e:	2310      	movs	r3, #16
 800d040:	e00a      	b.n	800d058 <_strtol_l.isra.0+0x6c>
 800d042:	2c2b      	cmp	r4, #43	@ 0x2b
 800d044:	bf04      	itt	eq
 800d046:	782c      	ldrbeq	r4, [r5, #0]
 800d048:	1c95      	addeq	r5, r2, #2
 800d04a:	e7ec      	b.n	800d026 <_strtol_l.isra.0+0x3a>
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1f6      	bne.n	800d03e <_strtol_l.isra.0+0x52>
 800d050:	2c30      	cmp	r4, #48	@ 0x30
 800d052:	bf14      	ite	ne
 800d054:	230a      	movne	r3, #10
 800d056:	2308      	moveq	r3, #8
 800d058:	2200      	movs	r2, #0
 800d05a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d05e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d062:	fbbc f9f3 	udiv	r9, ip, r3
 800d066:	4610      	mov	r0, r2
 800d068:	fb03 ca19 	mls	sl, r3, r9, ip
 800d06c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d070:	2f09      	cmp	r7, #9
 800d072:	d80f      	bhi.n	800d094 <_strtol_l.isra.0+0xa8>
 800d074:	463c      	mov	r4, r7
 800d076:	42a3      	cmp	r3, r4
 800d078:	dd1b      	ble.n	800d0b2 <_strtol_l.isra.0+0xc6>
 800d07a:	1c57      	adds	r7, r2, #1
 800d07c:	d007      	beq.n	800d08e <_strtol_l.isra.0+0xa2>
 800d07e:	4581      	cmp	r9, r0
 800d080:	d314      	bcc.n	800d0ac <_strtol_l.isra.0+0xc0>
 800d082:	d101      	bne.n	800d088 <_strtol_l.isra.0+0x9c>
 800d084:	45a2      	cmp	sl, r4
 800d086:	db11      	blt.n	800d0ac <_strtol_l.isra.0+0xc0>
 800d088:	2201      	movs	r2, #1
 800d08a:	fb00 4003 	mla	r0, r0, r3, r4
 800d08e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d092:	e7eb      	b.n	800d06c <_strtol_l.isra.0+0x80>
 800d094:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d098:	2f19      	cmp	r7, #25
 800d09a:	d801      	bhi.n	800d0a0 <_strtol_l.isra.0+0xb4>
 800d09c:	3c37      	subs	r4, #55	@ 0x37
 800d09e:	e7ea      	b.n	800d076 <_strtol_l.isra.0+0x8a>
 800d0a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d0a4:	2f19      	cmp	r7, #25
 800d0a6:	d804      	bhi.n	800d0b2 <_strtol_l.isra.0+0xc6>
 800d0a8:	3c57      	subs	r4, #87	@ 0x57
 800d0aa:	e7e4      	b.n	800d076 <_strtol_l.isra.0+0x8a>
 800d0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b0:	e7ed      	b.n	800d08e <_strtol_l.isra.0+0xa2>
 800d0b2:	1c53      	adds	r3, r2, #1
 800d0b4:	d108      	bne.n	800d0c8 <_strtol_l.isra.0+0xdc>
 800d0b6:	2322      	movs	r3, #34	@ 0x22
 800d0b8:	4660      	mov	r0, ip
 800d0ba:	f8ce 3000 	str.w	r3, [lr]
 800d0be:	f1b8 0f00 	cmp.w	r8, #0
 800d0c2:	d0a0      	beq.n	800d006 <_strtol_l.isra.0+0x1a>
 800d0c4:	1e69      	subs	r1, r5, #1
 800d0c6:	e006      	b.n	800d0d6 <_strtol_l.isra.0+0xea>
 800d0c8:	b106      	cbz	r6, 800d0cc <_strtol_l.isra.0+0xe0>
 800d0ca:	4240      	negs	r0, r0
 800d0cc:	f1b8 0f00 	cmp.w	r8, #0
 800d0d0:	d099      	beq.n	800d006 <_strtol_l.isra.0+0x1a>
 800d0d2:	2a00      	cmp	r2, #0
 800d0d4:	d1f6      	bne.n	800d0c4 <_strtol_l.isra.0+0xd8>
 800d0d6:	f8c8 1000 	str.w	r1, [r8]
 800d0da:	e794      	b.n	800d006 <_strtol_l.isra.0+0x1a>
 800d0dc:	08011461 	.word	0x08011461

0800d0e0 <_strtol_r>:
 800d0e0:	f7ff bf84 	b.w	800cfec <_strtol_l.isra.0>

0800d0e4 <strtol>:
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	460a      	mov	r2, r1
 800d0e8:	4601      	mov	r1, r0
 800d0ea:	4802      	ldr	r0, [pc, #8]	@ (800d0f4 <strtol+0x10>)
 800d0ec:	6800      	ldr	r0, [r0, #0]
 800d0ee:	f7ff bf7d 	b.w	800cfec <_strtol_l.isra.0>
 800d0f2:	bf00      	nop
 800d0f4:	20000200 	.word	0x20000200

0800d0f8 <__cvt>:
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0fe:	461d      	mov	r5, r3
 800d100:	bfbb      	ittet	lt
 800d102:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800d106:	461d      	movlt	r5, r3
 800d108:	2300      	movge	r3, #0
 800d10a:	232d      	movlt	r3, #45	@ 0x2d
 800d10c:	b088      	sub	sp, #32
 800d10e:	4614      	mov	r4, r2
 800d110:	bfb8      	it	lt
 800d112:	4614      	movlt	r4, r2
 800d114:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d116:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d118:	7013      	strb	r3, [r2, #0]
 800d11a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d11c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800d120:	f023 0820 	bic.w	r8, r3, #32
 800d124:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d128:	d005      	beq.n	800d136 <__cvt+0x3e>
 800d12a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d12e:	d100      	bne.n	800d132 <__cvt+0x3a>
 800d130:	3601      	adds	r6, #1
 800d132:	2302      	movs	r3, #2
 800d134:	e000      	b.n	800d138 <__cvt+0x40>
 800d136:	2303      	movs	r3, #3
 800d138:	aa07      	add	r2, sp, #28
 800d13a:	9204      	str	r2, [sp, #16]
 800d13c:	aa06      	add	r2, sp, #24
 800d13e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d142:	e9cd 3600 	strd	r3, r6, [sp]
 800d146:	4622      	mov	r2, r4
 800d148:	462b      	mov	r3, r5
 800d14a:	f001 fa41 	bl	800e5d0 <_dtoa_r>
 800d14e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d152:	4607      	mov	r7, r0
 800d154:	d119      	bne.n	800d18a <__cvt+0x92>
 800d156:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d158:	07db      	lsls	r3, r3, #31
 800d15a:	d50e      	bpl.n	800d17a <__cvt+0x82>
 800d15c:	eb00 0906 	add.w	r9, r0, r6
 800d160:	2200      	movs	r2, #0
 800d162:	2300      	movs	r3, #0
 800d164:	4620      	mov	r0, r4
 800d166:	4629      	mov	r1, r5
 800d168:	f7f3 fc28 	bl	80009bc <__aeabi_dcmpeq>
 800d16c:	b108      	cbz	r0, 800d172 <__cvt+0x7a>
 800d16e:	f8cd 901c 	str.w	r9, [sp, #28]
 800d172:	2230      	movs	r2, #48	@ 0x30
 800d174:	9b07      	ldr	r3, [sp, #28]
 800d176:	454b      	cmp	r3, r9
 800d178:	d31e      	bcc.n	800d1b8 <__cvt+0xc0>
 800d17a:	4638      	mov	r0, r7
 800d17c:	9b07      	ldr	r3, [sp, #28]
 800d17e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d180:	1bdb      	subs	r3, r3, r7
 800d182:	6013      	str	r3, [r2, #0]
 800d184:	b008      	add	sp, #32
 800d186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d18a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d18e:	eb00 0906 	add.w	r9, r0, r6
 800d192:	d1e5      	bne.n	800d160 <__cvt+0x68>
 800d194:	7803      	ldrb	r3, [r0, #0]
 800d196:	2b30      	cmp	r3, #48	@ 0x30
 800d198:	d10a      	bne.n	800d1b0 <__cvt+0xb8>
 800d19a:	2200      	movs	r2, #0
 800d19c:	2300      	movs	r3, #0
 800d19e:	4620      	mov	r0, r4
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	f7f3 fc0b 	bl	80009bc <__aeabi_dcmpeq>
 800d1a6:	b918      	cbnz	r0, 800d1b0 <__cvt+0xb8>
 800d1a8:	f1c6 0601 	rsb	r6, r6, #1
 800d1ac:	f8ca 6000 	str.w	r6, [sl]
 800d1b0:	f8da 3000 	ldr.w	r3, [sl]
 800d1b4:	4499      	add	r9, r3
 800d1b6:	e7d3      	b.n	800d160 <__cvt+0x68>
 800d1b8:	1c59      	adds	r1, r3, #1
 800d1ba:	9107      	str	r1, [sp, #28]
 800d1bc:	701a      	strb	r2, [r3, #0]
 800d1be:	e7d9      	b.n	800d174 <__cvt+0x7c>

0800d1c0 <__exponent>:
 800d1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1c2:	2900      	cmp	r1, #0
 800d1c4:	bfb6      	itet	lt
 800d1c6:	232d      	movlt	r3, #45	@ 0x2d
 800d1c8:	232b      	movge	r3, #43	@ 0x2b
 800d1ca:	4249      	neglt	r1, r1
 800d1cc:	2909      	cmp	r1, #9
 800d1ce:	7002      	strb	r2, [r0, #0]
 800d1d0:	7043      	strb	r3, [r0, #1]
 800d1d2:	dd29      	ble.n	800d228 <__exponent+0x68>
 800d1d4:	f10d 0307 	add.w	r3, sp, #7
 800d1d8:	461d      	mov	r5, r3
 800d1da:	270a      	movs	r7, #10
 800d1dc:	fbb1 f6f7 	udiv	r6, r1, r7
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	fb07 1416 	mls	r4, r7, r6, r1
 800d1e6:	3430      	adds	r4, #48	@ 0x30
 800d1e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d1ec:	460c      	mov	r4, r1
 800d1ee:	2c63      	cmp	r4, #99	@ 0x63
 800d1f0:	4631      	mov	r1, r6
 800d1f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1f6:	dcf1      	bgt.n	800d1dc <__exponent+0x1c>
 800d1f8:	3130      	adds	r1, #48	@ 0x30
 800d1fa:	1e94      	subs	r4, r2, #2
 800d1fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d200:	4623      	mov	r3, r4
 800d202:	1c41      	adds	r1, r0, #1
 800d204:	42ab      	cmp	r3, r5
 800d206:	d30a      	bcc.n	800d21e <__exponent+0x5e>
 800d208:	f10d 0309 	add.w	r3, sp, #9
 800d20c:	1a9b      	subs	r3, r3, r2
 800d20e:	42ac      	cmp	r4, r5
 800d210:	bf88      	it	hi
 800d212:	2300      	movhi	r3, #0
 800d214:	3302      	adds	r3, #2
 800d216:	4403      	add	r3, r0
 800d218:	1a18      	subs	r0, r3, r0
 800d21a:	b003      	add	sp, #12
 800d21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d21e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d222:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d226:	e7ed      	b.n	800d204 <__exponent+0x44>
 800d228:	2330      	movs	r3, #48	@ 0x30
 800d22a:	3130      	adds	r1, #48	@ 0x30
 800d22c:	7083      	strb	r3, [r0, #2]
 800d22e:	70c1      	strb	r1, [r0, #3]
 800d230:	1d03      	adds	r3, r0, #4
 800d232:	e7f1      	b.n	800d218 <__exponent+0x58>

0800d234 <_printf_float>:
 800d234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d238:	b091      	sub	sp, #68	@ 0x44
 800d23a:	460c      	mov	r4, r1
 800d23c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800d240:	4616      	mov	r6, r2
 800d242:	461f      	mov	r7, r3
 800d244:	4605      	mov	r5, r0
 800d246:	f001 f87b 	bl	800e340 <_localeconv_r>
 800d24a:	6803      	ldr	r3, [r0, #0]
 800d24c:	4618      	mov	r0, r3
 800d24e:	9308      	str	r3, [sp, #32]
 800d250:	f7f2 ff88 	bl	8000164 <strlen>
 800d254:	2300      	movs	r3, #0
 800d256:	930e      	str	r3, [sp, #56]	@ 0x38
 800d258:	f8d8 3000 	ldr.w	r3, [r8]
 800d25c:	9009      	str	r0, [sp, #36]	@ 0x24
 800d25e:	3307      	adds	r3, #7
 800d260:	f023 0307 	bic.w	r3, r3, #7
 800d264:	f103 0208 	add.w	r2, r3, #8
 800d268:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d26c:	f8d4 b000 	ldr.w	fp, [r4]
 800d270:	f8c8 2000 	str.w	r2, [r8]
 800d274:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d278:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d27c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d27e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d282:	f04f 32ff 	mov.w	r2, #4294967295
 800d286:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d28a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d28e:	4b9c      	ldr	r3, [pc, #624]	@ (800d500 <_printf_float+0x2cc>)
 800d290:	f7f3 fbc6 	bl	8000a20 <__aeabi_dcmpun>
 800d294:	bb70      	cbnz	r0, 800d2f4 <_printf_float+0xc0>
 800d296:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d29a:	f04f 32ff 	mov.w	r2, #4294967295
 800d29e:	4b98      	ldr	r3, [pc, #608]	@ (800d500 <_printf_float+0x2cc>)
 800d2a0:	f7f3 fba0 	bl	80009e4 <__aeabi_dcmple>
 800d2a4:	bb30      	cbnz	r0, 800d2f4 <_printf_float+0xc0>
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	4640      	mov	r0, r8
 800d2ac:	4649      	mov	r1, r9
 800d2ae:	f7f3 fb8f 	bl	80009d0 <__aeabi_dcmplt>
 800d2b2:	b110      	cbz	r0, 800d2ba <_printf_float+0x86>
 800d2b4:	232d      	movs	r3, #45	@ 0x2d
 800d2b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2ba:	4a92      	ldr	r2, [pc, #584]	@ (800d504 <_printf_float+0x2d0>)
 800d2bc:	4b92      	ldr	r3, [pc, #584]	@ (800d508 <_printf_float+0x2d4>)
 800d2be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d2c2:	bf8c      	ite	hi
 800d2c4:	4690      	movhi	r8, r2
 800d2c6:	4698      	movls	r8, r3
 800d2c8:	2303      	movs	r3, #3
 800d2ca:	f04f 0900 	mov.w	r9, #0
 800d2ce:	6123      	str	r3, [r4, #16]
 800d2d0:	f02b 0304 	bic.w	r3, fp, #4
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	4633      	mov	r3, r6
 800d2d8:	4621      	mov	r1, r4
 800d2da:	4628      	mov	r0, r5
 800d2dc:	9700      	str	r7, [sp, #0]
 800d2de:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d2e0:	f000 f9d4 	bl	800d68c <_printf_common>
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	f040 8090 	bne.w	800d40a <_printf_float+0x1d6>
 800d2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ee:	b011      	add	sp, #68	@ 0x44
 800d2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f4:	4642      	mov	r2, r8
 800d2f6:	464b      	mov	r3, r9
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	4649      	mov	r1, r9
 800d2fc:	f7f3 fb90 	bl	8000a20 <__aeabi_dcmpun>
 800d300:	b148      	cbz	r0, 800d316 <_printf_float+0xe2>
 800d302:	464b      	mov	r3, r9
 800d304:	2b00      	cmp	r3, #0
 800d306:	bfb8      	it	lt
 800d308:	232d      	movlt	r3, #45	@ 0x2d
 800d30a:	4a80      	ldr	r2, [pc, #512]	@ (800d50c <_printf_float+0x2d8>)
 800d30c:	bfb8      	it	lt
 800d30e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d312:	4b7f      	ldr	r3, [pc, #508]	@ (800d510 <_printf_float+0x2dc>)
 800d314:	e7d3      	b.n	800d2be <_printf_float+0x8a>
 800d316:	6863      	ldr	r3, [r4, #4]
 800d318:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800d31c:	1c5a      	adds	r2, r3, #1
 800d31e:	d13f      	bne.n	800d3a0 <_printf_float+0x16c>
 800d320:	2306      	movs	r3, #6
 800d322:	6063      	str	r3, [r4, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800d32a:	6023      	str	r3, [r4, #0]
 800d32c:	9206      	str	r2, [sp, #24]
 800d32e:	aa0e      	add	r2, sp, #56	@ 0x38
 800d330:	e9cd a204 	strd	sl, r2, [sp, #16]
 800d334:	aa0d      	add	r2, sp, #52	@ 0x34
 800d336:	9203      	str	r2, [sp, #12]
 800d338:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800d33c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d340:	6863      	ldr	r3, [r4, #4]
 800d342:	4642      	mov	r2, r8
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	4628      	mov	r0, r5
 800d348:	464b      	mov	r3, r9
 800d34a:	910a      	str	r1, [sp, #40]	@ 0x28
 800d34c:	f7ff fed4 	bl	800d0f8 <__cvt>
 800d350:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d352:	4680      	mov	r8, r0
 800d354:	2947      	cmp	r1, #71	@ 0x47
 800d356:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d358:	d128      	bne.n	800d3ac <_printf_float+0x178>
 800d35a:	1cc8      	adds	r0, r1, #3
 800d35c:	db02      	blt.n	800d364 <_printf_float+0x130>
 800d35e:	6863      	ldr	r3, [r4, #4]
 800d360:	4299      	cmp	r1, r3
 800d362:	dd40      	ble.n	800d3e6 <_printf_float+0x1b2>
 800d364:	f1aa 0a02 	sub.w	sl, sl, #2
 800d368:	fa5f fa8a 	uxtb.w	sl, sl
 800d36c:	4652      	mov	r2, sl
 800d36e:	3901      	subs	r1, #1
 800d370:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d374:	910d      	str	r1, [sp, #52]	@ 0x34
 800d376:	f7ff ff23 	bl	800d1c0 <__exponent>
 800d37a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d37c:	4681      	mov	r9, r0
 800d37e:	1813      	adds	r3, r2, r0
 800d380:	2a01      	cmp	r2, #1
 800d382:	6123      	str	r3, [r4, #16]
 800d384:	dc02      	bgt.n	800d38c <_printf_float+0x158>
 800d386:	6822      	ldr	r2, [r4, #0]
 800d388:	07d2      	lsls	r2, r2, #31
 800d38a:	d501      	bpl.n	800d390 <_printf_float+0x15c>
 800d38c:	3301      	adds	r3, #1
 800d38e:	6123      	str	r3, [r4, #16]
 800d390:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d394:	2b00      	cmp	r3, #0
 800d396:	d09e      	beq.n	800d2d6 <_printf_float+0xa2>
 800d398:	232d      	movs	r3, #45	@ 0x2d
 800d39a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d39e:	e79a      	b.n	800d2d6 <_printf_float+0xa2>
 800d3a0:	2947      	cmp	r1, #71	@ 0x47
 800d3a2:	d1bf      	bne.n	800d324 <_printf_float+0xf0>
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1bd      	bne.n	800d324 <_printf_float+0xf0>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e7ba      	b.n	800d322 <_printf_float+0xee>
 800d3ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d3b0:	d9dc      	bls.n	800d36c <_printf_float+0x138>
 800d3b2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d3b6:	d118      	bne.n	800d3ea <_printf_float+0x1b6>
 800d3b8:	2900      	cmp	r1, #0
 800d3ba:	6863      	ldr	r3, [r4, #4]
 800d3bc:	dd0b      	ble.n	800d3d6 <_printf_float+0x1a2>
 800d3be:	6121      	str	r1, [r4, #16]
 800d3c0:	b913      	cbnz	r3, 800d3c8 <_printf_float+0x194>
 800d3c2:	6822      	ldr	r2, [r4, #0]
 800d3c4:	07d0      	lsls	r0, r2, #31
 800d3c6:	d502      	bpl.n	800d3ce <_printf_float+0x19a>
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	440b      	add	r3, r1
 800d3cc:	6123      	str	r3, [r4, #16]
 800d3ce:	f04f 0900 	mov.w	r9, #0
 800d3d2:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d3d4:	e7dc      	b.n	800d390 <_printf_float+0x15c>
 800d3d6:	b913      	cbnz	r3, 800d3de <_printf_float+0x1aa>
 800d3d8:	6822      	ldr	r2, [r4, #0]
 800d3da:	07d2      	lsls	r2, r2, #31
 800d3dc:	d501      	bpl.n	800d3e2 <_printf_float+0x1ae>
 800d3de:	3302      	adds	r3, #2
 800d3e0:	e7f4      	b.n	800d3cc <_printf_float+0x198>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e7f2      	b.n	800d3cc <_printf_float+0x198>
 800d3e6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d3ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3ec:	4299      	cmp	r1, r3
 800d3ee:	db05      	blt.n	800d3fc <_printf_float+0x1c8>
 800d3f0:	6823      	ldr	r3, [r4, #0]
 800d3f2:	6121      	str	r1, [r4, #16]
 800d3f4:	07d8      	lsls	r0, r3, #31
 800d3f6:	d5ea      	bpl.n	800d3ce <_printf_float+0x19a>
 800d3f8:	1c4b      	adds	r3, r1, #1
 800d3fa:	e7e7      	b.n	800d3cc <_printf_float+0x198>
 800d3fc:	2900      	cmp	r1, #0
 800d3fe:	bfcc      	ite	gt
 800d400:	2201      	movgt	r2, #1
 800d402:	f1c1 0202 	rsble	r2, r1, #2
 800d406:	4413      	add	r3, r2
 800d408:	e7e0      	b.n	800d3cc <_printf_float+0x198>
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	055a      	lsls	r2, r3, #21
 800d40e:	d407      	bmi.n	800d420 <_printf_float+0x1ec>
 800d410:	6923      	ldr	r3, [r4, #16]
 800d412:	4642      	mov	r2, r8
 800d414:	4631      	mov	r1, r6
 800d416:	4628      	mov	r0, r5
 800d418:	47b8      	blx	r7
 800d41a:	3001      	adds	r0, #1
 800d41c:	d12b      	bne.n	800d476 <_printf_float+0x242>
 800d41e:	e764      	b.n	800d2ea <_printf_float+0xb6>
 800d420:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d424:	f240 80dc 	bls.w	800d5e0 <_printf_float+0x3ac>
 800d428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d42c:	2200      	movs	r2, #0
 800d42e:	2300      	movs	r3, #0
 800d430:	f7f3 fac4 	bl	80009bc <__aeabi_dcmpeq>
 800d434:	2800      	cmp	r0, #0
 800d436:	d033      	beq.n	800d4a0 <_printf_float+0x26c>
 800d438:	2301      	movs	r3, #1
 800d43a:	4631      	mov	r1, r6
 800d43c:	4628      	mov	r0, r5
 800d43e:	4a35      	ldr	r2, [pc, #212]	@ (800d514 <_printf_float+0x2e0>)
 800d440:	47b8      	blx	r7
 800d442:	3001      	adds	r0, #1
 800d444:	f43f af51 	beq.w	800d2ea <_printf_float+0xb6>
 800d448:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800d44c:	4543      	cmp	r3, r8
 800d44e:	db02      	blt.n	800d456 <_printf_float+0x222>
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	07d8      	lsls	r0, r3, #31
 800d454:	d50f      	bpl.n	800d476 <_printf_float+0x242>
 800d456:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d45a:	4631      	mov	r1, r6
 800d45c:	4628      	mov	r0, r5
 800d45e:	47b8      	blx	r7
 800d460:	3001      	adds	r0, #1
 800d462:	f43f af42 	beq.w	800d2ea <_printf_float+0xb6>
 800d466:	f04f 0900 	mov.w	r9, #0
 800d46a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d46e:	f104 0a1a 	add.w	sl, r4, #26
 800d472:	45c8      	cmp	r8, r9
 800d474:	dc09      	bgt.n	800d48a <_printf_float+0x256>
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	079b      	lsls	r3, r3, #30
 800d47a:	f100 8102 	bmi.w	800d682 <_printf_float+0x44e>
 800d47e:	68e0      	ldr	r0, [r4, #12]
 800d480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d482:	4298      	cmp	r0, r3
 800d484:	bfb8      	it	lt
 800d486:	4618      	movlt	r0, r3
 800d488:	e731      	b.n	800d2ee <_printf_float+0xba>
 800d48a:	2301      	movs	r3, #1
 800d48c:	4652      	mov	r2, sl
 800d48e:	4631      	mov	r1, r6
 800d490:	4628      	mov	r0, r5
 800d492:	47b8      	blx	r7
 800d494:	3001      	adds	r0, #1
 800d496:	f43f af28 	beq.w	800d2ea <_printf_float+0xb6>
 800d49a:	f109 0901 	add.w	r9, r9, #1
 800d49e:	e7e8      	b.n	800d472 <_printf_float+0x23e>
 800d4a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	dc38      	bgt.n	800d518 <_printf_float+0x2e4>
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	4631      	mov	r1, r6
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	4a19      	ldr	r2, [pc, #100]	@ (800d514 <_printf_float+0x2e0>)
 800d4ae:	47b8      	blx	r7
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	f43f af1a 	beq.w	800d2ea <_printf_float+0xb6>
 800d4b6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800d4ba:	ea59 0303 	orrs.w	r3, r9, r3
 800d4be:	d102      	bne.n	800d4c6 <_printf_float+0x292>
 800d4c0:	6823      	ldr	r3, [r4, #0]
 800d4c2:	07d9      	lsls	r1, r3, #31
 800d4c4:	d5d7      	bpl.n	800d476 <_printf_float+0x242>
 800d4c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d4ca:	4631      	mov	r1, r6
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	47b8      	blx	r7
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	f43f af0a 	beq.w	800d2ea <_printf_float+0xb6>
 800d4d6:	f04f 0a00 	mov.w	sl, #0
 800d4da:	f104 0b1a 	add.w	fp, r4, #26
 800d4de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4e0:	425b      	negs	r3, r3
 800d4e2:	4553      	cmp	r3, sl
 800d4e4:	dc01      	bgt.n	800d4ea <_printf_float+0x2b6>
 800d4e6:	464b      	mov	r3, r9
 800d4e8:	e793      	b.n	800d412 <_printf_float+0x1de>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	465a      	mov	r2, fp
 800d4ee:	4631      	mov	r1, r6
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	47b8      	blx	r7
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	f43f aef8 	beq.w	800d2ea <_printf_float+0xb6>
 800d4fa:	f10a 0a01 	add.w	sl, sl, #1
 800d4fe:	e7ee      	b.n	800d4de <_printf_float+0x2aa>
 800d500:	7fefffff 	.word	0x7fefffff
 800d504:	0801127b 	.word	0x0801127b
 800d508:	08011277 	.word	0x08011277
 800d50c:	08011283 	.word	0x08011283
 800d510:	0801127f 	.word	0x0801127f
 800d514:	08011287 	.word	0x08011287
 800d518:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d51a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d51e:	4553      	cmp	r3, sl
 800d520:	bfa8      	it	ge
 800d522:	4653      	movge	r3, sl
 800d524:	2b00      	cmp	r3, #0
 800d526:	4699      	mov	r9, r3
 800d528:	dc36      	bgt.n	800d598 <_printf_float+0x364>
 800d52a:	f04f 0b00 	mov.w	fp, #0
 800d52e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d532:	f104 021a 	add.w	r2, r4, #26
 800d536:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d538:	930a      	str	r3, [sp, #40]	@ 0x28
 800d53a:	eba3 0309 	sub.w	r3, r3, r9
 800d53e:	455b      	cmp	r3, fp
 800d540:	dc31      	bgt.n	800d5a6 <_printf_float+0x372>
 800d542:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d544:	459a      	cmp	sl, r3
 800d546:	dc3a      	bgt.n	800d5be <_printf_float+0x38a>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	07da      	lsls	r2, r3, #31
 800d54c:	d437      	bmi.n	800d5be <_printf_float+0x38a>
 800d54e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d550:	ebaa 0903 	sub.w	r9, sl, r3
 800d554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d556:	ebaa 0303 	sub.w	r3, sl, r3
 800d55a:	4599      	cmp	r9, r3
 800d55c:	bfa8      	it	ge
 800d55e:	4699      	movge	r9, r3
 800d560:	f1b9 0f00 	cmp.w	r9, #0
 800d564:	dc33      	bgt.n	800d5ce <_printf_float+0x39a>
 800d566:	f04f 0800 	mov.w	r8, #0
 800d56a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d56e:	f104 0b1a 	add.w	fp, r4, #26
 800d572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d574:	ebaa 0303 	sub.w	r3, sl, r3
 800d578:	eba3 0309 	sub.w	r3, r3, r9
 800d57c:	4543      	cmp	r3, r8
 800d57e:	f77f af7a 	ble.w	800d476 <_printf_float+0x242>
 800d582:	2301      	movs	r3, #1
 800d584:	465a      	mov	r2, fp
 800d586:	4631      	mov	r1, r6
 800d588:	4628      	mov	r0, r5
 800d58a:	47b8      	blx	r7
 800d58c:	3001      	adds	r0, #1
 800d58e:	f43f aeac 	beq.w	800d2ea <_printf_float+0xb6>
 800d592:	f108 0801 	add.w	r8, r8, #1
 800d596:	e7ec      	b.n	800d572 <_printf_float+0x33e>
 800d598:	4642      	mov	r2, r8
 800d59a:	4631      	mov	r1, r6
 800d59c:	4628      	mov	r0, r5
 800d59e:	47b8      	blx	r7
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	d1c2      	bne.n	800d52a <_printf_float+0x2f6>
 800d5a4:	e6a1      	b.n	800d2ea <_printf_float+0xb6>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	4631      	mov	r1, r6
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	920a      	str	r2, [sp, #40]	@ 0x28
 800d5ae:	47b8      	blx	r7
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	f43f ae9a 	beq.w	800d2ea <_printf_float+0xb6>
 800d5b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5b8:	f10b 0b01 	add.w	fp, fp, #1
 800d5bc:	e7bb      	b.n	800d536 <_printf_float+0x302>
 800d5be:	4631      	mov	r1, r6
 800d5c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	47b8      	blx	r7
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	d1c0      	bne.n	800d54e <_printf_float+0x31a>
 800d5cc:	e68d      	b.n	800d2ea <_printf_float+0xb6>
 800d5ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5d0:	464b      	mov	r3, r9
 800d5d2:	4631      	mov	r1, r6
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	4442      	add	r2, r8
 800d5d8:	47b8      	blx	r7
 800d5da:	3001      	adds	r0, #1
 800d5dc:	d1c3      	bne.n	800d566 <_printf_float+0x332>
 800d5de:	e684      	b.n	800d2ea <_printf_float+0xb6>
 800d5e0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800d5e4:	f1ba 0f01 	cmp.w	sl, #1
 800d5e8:	dc01      	bgt.n	800d5ee <_printf_float+0x3ba>
 800d5ea:	07db      	lsls	r3, r3, #31
 800d5ec:	d536      	bpl.n	800d65c <_printf_float+0x428>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	4642      	mov	r2, r8
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	47b8      	blx	r7
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	f43f ae76 	beq.w	800d2ea <_printf_float+0xb6>
 800d5fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d602:	4631      	mov	r1, r6
 800d604:	4628      	mov	r0, r5
 800d606:	47b8      	blx	r7
 800d608:	3001      	adds	r0, #1
 800d60a:	f43f ae6e 	beq.w	800d2ea <_printf_float+0xb6>
 800d60e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d612:	2200      	movs	r2, #0
 800d614:	2300      	movs	r3, #0
 800d616:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d61a:	f7f3 f9cf 	bl	80009bc <__aeabi_dcmpeq>
 800d61e:	b9c0      	cbnz	r0, 800d652 <_printf_float+0x41e>
 800d620:	4653      	mov	r3, sl
 800d622:	f108 0201 	add.w	r2, r8, #1
 800d626:	4631      	mov	r1, r6
 800d628:	4628      	mov	r0, r5
 800d62a:	47b8      	blx	r7
 800d62c:	3001      	adds	r0, #1
 800d62e:	d10c      	bne.n	800d64a <_printf_float+0x416>
 800d630:	e65b      	b.n	800d2ea <_printf_float+0xb6>
 800d632:	2301      	movs	r3, #1
 800d634:	465a      	mov	r2, fp
 800d636:	4631      	mov	r1, r6
 800d638:	4628      	mov	r0, r5
 800d63a:	47b8      	blx	r7
 800d63c:	3001      	adds	r0, #1
 800d63e:	f43f ae54 	beq.w	800d2ea <_printf_float+0xb6>
 800d642:	f108 0801 	add.w	r8, r8, #1
 800d646:	45d0      	cmp	r8, sl
 800d648:	dbf3      	blt.n	800d632 <_printf_float+0x3fe>
 800d64a:	464b      	mov	r3, r9
 800d64c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d650:	e6e0      	b.n	800d414 <_printf_float+0x1e0>
 800d652:	f04f 0800 	mov.w	r8, #0
 800d656:	f104 0b1a 	add.w	fp, r4, #26
 800d65a:	e7f4      	b.n	800d646 <_printf_float+0x412>
 800d65c:	2301      	movs	r3, #1
 800d65e:	4642      	mov	r2, r8
 800d660:	e7e1      	b.n	800d626 <_printf_float+0x3f2>
 800d662:	2301      	movs	r3, #1
 800d664:	464a      	mov	r2, r9
 800d666:	4631      	mov	r1, r6
 800d668:	4628      	mov	r0, r5
 800d66a:	47b8      	blx	r7
 800d66c:	3001      	adds	r0, #1
 800d66e:	f43f ae3c 	beq.w	800d2ea <_printf_float+0xb6>
 800d672:	f108 0801 	add.w	r8, r8, #1
 800d676:	68e3      	ldr	r3, [r4, #12]
 800d678:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d67a:	1a5b      	subs	r3, r3, r1
 800d67c:	4543      	cmp	r3, r8
 800d67e:	dcf0      	bgt.n	800d662 <_printf_float+0x42e>
 800d680:	e6fd      	b.n	800d47e <_printf_float+0x24a>
 800d682:	f04f 0800 	mov.w	r8, #0
 800d686:	f104 0919 	add.w	r9, r4, #25
 800d68a:	e7f4      	b.n	800d676 <_printf_float+0x442>

0800d68c <_printf_common>:
 800d68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d690:	4616      	mov	r6, r2
 800d692:	4698      	mov	r8, r3
 800d694:	688a      	ldr	r2, [r1, #8]
 800d696:	690b      	ldr	r3, [r1, #16]
 800d698:	4607      	mov	r7, r0
 800d69a:	4293      	cmp	r3, r2
 800d69c:	bfb8      	it	lt
 800d69e:	4613      	movlt	r3, r2
 800d6a0:	6033      	str	r3, [r6, #0]
 800d6a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d6a6:	460c      	mov	r4, r1
 800d6a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d6ac:	b10a      	cbz	r2, 800d6b2 <_printf_common+0x26>
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	6033      	str	r3, [r6, #0]
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	0699      	lsls	r1, r3, #26
 800d6b6:	bf42      	ittt	mi
 800d6b8:	6833      	ldrmi	r3, [r6, #0]
 800d6ba:	3302      	addmi	r3, #2
 800d6bc:	6033      	strmi	r3, [r6, #0]
 800d6be:	6825      	ldr	r5, [r4, #0]
 800d6c0:	f015 0506 	ands.w	r5, r5, #6
 800d6c4:	d106      	bne.n	800d6d4 <_printf_common+0x48>
 800d6c6:	f104 0a19 	add.w	sl, r4, #25
 800d6ca:	68e3      	ldr	r3, [r4, #12]
 800d6cc:	6832      	ldr	r2, [r6, #0]
 800d6ce:	1a9b      	subs	r3, r3, r2
 800d6d0:	42ab      	cmp	r3, r5
 800d6d2:	dc2b      	bgt.n	800d72c <_printf_common+0xa0>
 800d6d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d6d8:	6822      	ldr	r2, [r4, #0]
 800d6da:	3b00      	subs	r3, #0
 800d6dc:	bf18      	it	ne
 800d6de:	2301      	movne	r3, #1
 800d6e0:	0692      	lsls	r2, r2, #26
 800d6e2:	d430      	bmi.n	800d746 <_printf_common+0xba>
 800d6e4:	4641      	mov	r1, r8
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d6ec:	47c8      	blx	r9
 800d6ee:	3001      	adds	r0, #1
 800d6f0:	d023      	beq.n	800d73a <_printf_common+0xae>
 800d6f2:	6823      	ldr	r3, [r4, #0]
 800d6f4:	6922      	ldr	r2, [r4, #16]
 800d6f6:	f003 0306 	and.w	r3, r3, #6
 800d6fa:	2b04      	cmp	r3, #4
 800d6fc:	bf14      	ite	ne
 800d6fe:	2500      	movne	r5, #0
 800d700:	6833      	ldreq	r3, [r6, #0]
 800d702:	f04f 0600 	mov.w	r6, #0
 800d706:	bf08      	it	eq
 800d708:	68e5      	ldreq	r5, [r4, #12]
 800d70a:	f104 041a 	add.w	r4, r4, #26
 800d70e:	bf08      	it	eq
 800d710:	1aed      	subeq	r5, r5, r3
 800d712:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d716:	bf08      	it	eq
 800d718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d71c:	4293      	cmp	r3, r2
 800d71e:	bfc4      	itt	gt
 800d720:	1a9b      	subgt	r3, r3, r2
 800d722:	18ed      	addgt	r5, r5, r3
 800d724:	42b5      	cmp	r5, r6
 800d726:	d11a      	bne.n	800d75e <_printf_common+0xd2>
 800d728:	2000      	movs	r0, #0
 800d72a:	e008      	b.n	800d73e <_printf_common+0xb2>
 800d72c:	2301      	movs	r3, #1
 800d72e:	4652      	mov	r2, sl
 800d730:	4641      	mov	r1, r8
 800d732:	4638      	mov	r0, r7
 800d734:	47c8      	blx	r9
 800d736:	3001      	adds	r0, #1
 800d738:	d103      	bne.n	800d742 <_printf_common+0xb6>
 800d73a:	f04f 30ff 	mov.w	r0, #4294967295
 800d73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d742:	3501      	adds	r5, #1
 800d744:	e7c1      	b.n	800d6ca <_printf_common+0x3e>
 800d746:	2030      	movs	r0, #48	@ 0x30
 800d748:	18e1      	adds	r1, r4, r3
 800d74a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d74e:	1c5a      	adds	r2, r3, #1
 800d750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d754:	4422      	add	r2, r4
 800d756:	3302      	adds	r3, #2
 800d758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d75c:	e7c2      	b.n	800d6e4 <_printf_common+0x58>
 800d75e:	2301      	movs	r3, #1
 800d760:	4622      	mov	r2, r4
 800d762:	4641      	mov	r1, r8
 800d764:	4638      	mov	r0, r7
 800d766:	47c8      	blx	r9
 800d768:	3001      	adds	r0, #1
 800d76a:	d0e6      	beq.n	800d73a <_printf_common+0xae>
 800d76c:	3601      	adds	r6, #1
 800d76e:	e7d9      	b.n	800d724 <_printf_common+0x98>

0800d770 <_printf_i>:
 800d770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d774:	7e0f      	ldrb	r7, [r1, #24]
 800d776:	4691      	mov	r9, r2
 800d778:	2f78      	cmp	r7, #120	@ 0x78
 800d77a:	4680      	mov	r8, r0
 800d77c:	460c      	mov	r4, r1
 800d77e:	469a      	mov	sl, r3
 800d780:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d786:	d807      	bhi.n	800d798 <_printf_i+0x28>
 800d788:	2f62      	cmp	r7, #98	@ 0x62
 800d78a:	d80a      	bhi.n	800d7a2 <_printf_i+0x32>
 800d78c:	2f00      	cmp	r7, #0
 800d78e:	f000 80d1 	beq.w	800d934 <_printf_i+0x1c4>
 800d792:	2f58      	cmp	r7, #88	@ 0x58
 800d794:	f000 80b8 	beq.w	800d908 <_printf_i+0x198>
 800d798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d79c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d7a0:	e03a      	b.n	800d818 <_printf_i+0xa8>
 800d7a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d7a6:	2b15      	cmp	r3, #21
 800d7a8:	d8f6      	bhi.n	800d798 <_printf_i+0x28>
 800d7aa:	a101      	add	r1, pc, #4	@ (adr r1, 800d7b0 <_printf_i+0x40>)
 800d7ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7b0:	0800d809 	.word	0x0800d809
 800d7b4:	0800d81d 	.word	0x0800d81d
 800d7b8:	0800d799 	.word	0x0800d799
 800d7bc:	0800d799 	.word	0x0800d799
 800d7c0:	0800d799 	.word	0x0800d799
 800d7c4:	0800d799 	.word	0x0800d799
 800d7c8:	0800d81d 	.word	0x0800d81d
 800d7cc:	0800d799 	.word	0x0800d799
 800d7d0:	0800d799 	.word	0x0800d799
 800d7d4:	0800d799 	.word	0x0800d799
 800d7d8:	0800d799 	.word	0x0800d799
 800d7dc:	0800d91b 	.word	0x0800d91b
 800d7e0:	0800d847 	.word	0x0800d847
 800d7e4:	0800d8d5 	.word	0x0800d8d5
 800d7e8:	0800d799 	.word	0x0800d799
 800d7ec:	0800d799 	.word	0x0800d799
 800d7f0:	0800d93d 	.word	0x0800d93d
 800d7f4:	0800d799 	.word	0x0800d799
 800d7f8:	0800d847 	.word	0x0800d847
 800d7fc:	0800d799 	.word	0x0800d799
 800d800:	0800d799 	.word	0x0800d799
 800d804:	0800d8dd 	.word	0x0800d8dd
 800d808:	6833      	ldr	r3, [r6, #0]
 800d80a:	1d1a      	adds	r2, r3, #4
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	6032      	str	r2, [r6, #0]
 800d810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d818:	2301      	movs	r3, #1
 800d81a:	e09c      	b.n	800d956 <_printf_i+0x1e6>
 800d81c:	6833      	ldr	r3, [r6, #0]
 800d81e:	6820      	ldr	r0, [r4, #0]
 800d820:	1d19      	adds	r1, r3, #4
 800d822:	6031      	str	r1, [r6, #0]
 800d824:	0606      	lsls	r6, r0, #24
 800d826:	d501      	bpl.n	800d82c <_printf_i+0xbc>
 800d828:	681d      	ldr	r5, [r3, #0]
 800d82a:	e003      	b.n	800d834 <_printf_i+0xc4>
 800d82c:	0645      	lsls	r5, r0, #25
 800d82e:	d5fb      	bpl.n	800d828 <_printf_i+0xb8>
 800d830:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d834:	2d00      	cmp	r5, #0
 800d836:	da03      	bge.n	800d840 <_printf_i+0xd0>
 800d838:	232d      	movs	r3, #45	@ 0x2d
 800d83a:	426d      	negs	r5, r5
 800d83c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d840:	230a      	movs	r3, #10
 800d842:	4858      	ldr	r0, [pc, #352]	@ (800d9a4 <_printf_i+0x234>)
 800d844:	e011      	b.n	800d86a <_printf_i+0xfa>
 800d846:	6821      	ldr	r1, [r4, #0]
 800d848:	6833      	ldr	r3, [r6, #0]
 800d84a:	0608      	lsls	r0, r1, #24
 800d84c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d850:	d402      	bmi.n	800d858 <_printf_i+0xe8>
 800d852:	0649      	lsls	r1, r1, #25
 800d854:	bf48      	it	mi
 800d856:	b2ad      	uxthmi	r5, r5
 800d858:	2f6f      	cmp	r7, #111	@ 0x6f
 800d85a:	6033      	str	r3, [r6, #0]
 800d85c:	bf14      	ite	ne
 800d85e:	230a      	movne	r3, #10
 800d860:	2308      	moveq	r3, #8
 800d862:	4850      	ldr	r0, [pc, #320]	@ (800d9a4 <_printf_i+0x234>)
 800d864:	2100      	movs	r1, #0
 800d866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d86a:	6866      	ldr	r6, [r4, #4]
 800d86c:	2e00      	cmp	r6, #0
 800d86e:	60a6      	str	r6, [r4, #8]
 800d870:	db05      	blt.n	800d87e <_printf_i+0x10e>
 800d872:	6821      	ldr	r1, [r4, #0]
 800d874:	432e      	orrs	r6, r5
 800d876:	f021 0104 	bic.w	r1, r1, #4
 800d87a:	6021      	str	r1, [r4, #0]
 800d87c:	d04b      	beq.n	800d916 <_printf_i+0x1a6>
 800d87e:	4616      	mov	r6, r2
 800d880:	fbb5 f1f3 	udiv	r1, r5, r3
 800d884:	fb03 5711 	mls	r7, r3, r1, r5
 800d888:	5dc7      	ldrb	r7, [r0, r7]
 800d88a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d88e:	462f      	mov	r7, r5
 800d890:	42bb      	cmp	r3, r7
 800d892:	460d      	mov	r5, r1
 800d894:	d9f4      	bls.n	800d880 <_printf_i+0x110>
 800d896:	2b08      	cmp	r3, #8
 800d898:	d10b      	bne.n	800d8b2 <_printf_i+0x142>
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	07df      	lsls	r7, r3, #31
 800d89e:	d508      	bpl.n	800d8b2 <_printf_i+0x142>
 800d8a0:	6923      	ldr	r3, [r4, #16]
 800d8a2:	6861      	ldr	r1, [r4, #4]
 800d8a4:	4299      	cmp	r1, r3
 800d8a6:	bfde      	ittt	le
 800d8a8:	2330      	movle	r3, #48	@ 0x30
 800d8aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d8b2:	1b92      	subs	r2, r2, r6
 800d8b4:	6122      	str	r2, [r4, #16]
 800d8b6:	464b      	mov	r3, r9
 800d8b8:	4621      	mov	r1, r4
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	f8cd a000 	str.w	sl, [sp]
 800d8c0:	aa03      	add	r2, sp, #12
 800d8c2:	f7ff fee3 	bl	800d68c <_printf_common>
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	d14a      	bne.n	800d960 <_printf_i+0x1f0>
 800d8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ce:	b004      	add	sp, #16
 800d8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	f043 0320 	orr.w	r3, r3, #32
 800d8da:	6023      	str	r3, [r4, #0]
 800d8dc:	2778      	movs	r7, #120	@ 0x78
 800d8de:	4832      	ldr	r0, [pc, #200]	@ (800d9a8 <_printf_i+0x238>)
 800d8e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	6831      	ldr	r1, [r6, #0]
 800d8e8:	061f      	lsls	r7, r3, #24
 800d8ea:	f851 5b04 	ldr.w	r5, [r1], #4
 800d8ee:	d402      	bmi.n	800d8f6 <_printf_i+0x186>
 800d8f0:	065f      	lsls	r7, r3, #25
 800d8f2:	bf48      	it	mi
 800d8f4:	b2ad      	uxthmi	r5, r5
 800d8f6:	6031      	str	r1, [r6, #0]
 800d8f8:	07d9      	lsls	r1, r3, #31
 800d8fa:	bf44      	itt	mi
 800d8fc:	f043 0320 	orrmi.w	r3, r3, #32
 800d900:	6023      	strmi	r3, [r4, #0]
 800d902:	b11d      	cbz	r5, 800d90c <_printf_i+0x19c>
 800d904:	2310      	movs	r3, #16
 800d906:	e7ad      	b.n	800d864 <_printf_i+0xf4>
 800d908:	4826      	ldr	r0, [pc, #152]	@ (800d9a4 <_printf_i+0x234>)
 800d90a:	e7e9      	b.n	800d8e0 <_printf_i+0x170>
 800d90c:	6823      	ldr	r3, [r4, #0]
 800d90e:	f023 0320 	bic.w	r3, r3, #32
 800d912:	6023      	str	r3, [r4, #0]
 800d914:	e7f6      	b.n	800d904 <_printf_i+0x194>
 800d916:	4616      	mov	r6, r2
 800d918:	e7bd      	b.n	800d896 <_printf_i+0x126>
 800d91a:	6833      	ldr	r3, [r6, #0]
 800d91c:	6825      	ldr	r5, [r4, #0]
 800d91e:	1d18      	adds	r0, r3, #4
 800d920:	6961      	ldr	r1, [r4, #20]
 800d922:	6030      	str	r0, [r6, #0]
 800d924:	062e      	lsls	r6, r5, #24
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	d501      	bpl.n	800d92e <_printf_i+0x1be>
 800d92a:	6019      	str	r1, [r3, #0]
 800d92c:	e002      	b.n	800d934 <_printf_i+0x1c4>
 800d92e:	0668      	lsls	r0, r5, #25
 800d930:	d5fb      	bpl.n	800d92a <_printf_i+0x1ba>
 800d932:	8019      	strh	r1, [r3, #0]
 800d934:	2300      	movs	r3, #0
 800d936:	4616      	mov	r6, r2
 800d938:	6123      	str	r3, [r4, #16]
 800d93a:	e7bc      	b.n	800d8b6 <_printf_i+0x146>
 800d93c:	6833      	ldr	r3, [r6, #0]
 800d93e:	2100      	movs	r1, #0
 800d940:	1d1a      	adds	r2, r3, #4
 800d942:	6032      	str	r2, [r6, #0]
 800d944:	681e      	ldr	r6, [r3, #0]
 800d946:	6862      	ldr	r2, [r4, #4]
 800d948:	4630      	mov	r0, r6
 800d94a:	f000 fd88 	bl	800e45e <memchr>
 800d94e:	b108      	cbz	r0, 800d954 <_printf_i+0x1e4>
 800d950:	1b80      	subs	r0, r0, r6
 800d952:	6060      	str	r0, [r4, #4]
 800d954:	6863      	ldr	r3, [r4, #4]
 800d956:	6123      	str	r3, [r4, #16]
 800d958:	2300      	movs	r3, #0
 800d95a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d95e:	e7aa      	b.n	800d8b6 <_printf_i+0x146>
 800d960:	4632      	mov	r2, r6
 800d962:	4649      	mov	r1, r9
 800d964:	4640      	mov	r0, r8
 800d966:	6923      	ldr	r3, [r4, #16]
 800d968:	47d0      	blx	sl
 800d96a:	3001      	adds	r0, #1
 800d96c:	d0ad      	beq.n	800d8ca <_printf_i+0x15a>
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	079b      	lsls	r3, r3, #30
 800d972:	d413      	bmi.n	800d99c <_printf_i+0x22c>
 800d974:	68e0      	ldr	r0, [r4, #12]
 800d976:	9b03      	ldr	r3, [sp, #12]
 800d978:	4298      	cmp	r0, r3
 800d97a:	bfb8      	it	lt
 800d97c:	4618      	movlt	r0, r3
 800d97e:	e7a6      	b.n	800d8ce <_printf_i+0x15e>
 800d980:	2301      	movs	r3, #1
 800d982:	4632      	mov	r2, r6
 800d984:	4649      	mov	r1, r9
 800d986:	4640      	mov	r0, r8
 800d988:	47d0      	blx	sl
 800d98a:	3001      	adds	r0, #1
 800d98c:	d09d      	beq.n	800d8ca <_printf_i+0x15a>
 800d98e:	3501      	adds	r5, #1
 800d990:	68e3      	ldr	r3, [r4, #12]
 800d992:	9903      	ldr	r1, [sp, #12]
 800d994:	1a5b      	subs	r3, r3, r1
 800d996:	42ab      	cmp	r3, r5
 800d998:	dcf2      	bgt.n	800d980 <_printf_i+0x210>
 800d99a:	e7eb      	b.n	800d974 <_printf_i+0x204>
 800d99c:	2500      	movs	r5, #0
 800d99e:	f104 0619 	add.w	r6, r4, #25
 800d9a2:	e7f5      	b.n	800d990 <_printf_i+0x220>
 800d9a4:	08011289 	.word	0x08011289
 800d9a8:	0801129a 	.word	0x0801129a

0800d9ac <_scanf_float>:
 800d9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b0:	b087      	sub	sp, #28
 800d9b2:	9303      	str	r3, [sp, #12]
 800d9b4:	688b      	ldr	r3, [r1, #8]
 800d9b6:	4691      	mov	r9, r2
 800d9b8:	1e5a      	subs	r2, r3, #1
 800d9ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d9be:	bf82      	ittt	hi
 800d9c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d9c4:	eb03 0b05 	addhi.w	fp, r3, r5
 800d9c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d9cc:	460a      	mov	r2, r1
 800d9ce:	f04f 0500 	mov.w	r5, #0
 800d9d2:	bf88      	it	hi
 800d9d4:	608b      	strhi	r3, [r1, #8]
 800d9d6:	680b      	ldr	r3, [r1, #0]
 800d9d8:	4680      	mov	r8, r0
 800d9da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d9de:	f842 3b1c 	str.w	r3, [r2], #28
 800d9e2:	460c      	mov	r4, r1
 800d9e4:	bf98      	it	ls
 800d9e6:	f04f 0b00 	movls.w	fp, #0
 800d9ea:	4616      	mov	r6, r2
 800d9ec:	46aa      	mov	sl, r5
 800d9ee:	462f      	mov	r7, r5
 800d9f0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d9f4:	9201      	str	r2, [sp, #4]
 800d9f6:	9502      	str	r5, [sp, #8]
 800d9f8:	68a2      	ldr	r2, [r4, #8]
 800d9fa:	b15a      	cbz	r2, 800da14 <_scanf_float+0x68>
 800d9fc:	f8d9 3000 	ldr.w	r3, [r9]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b4e      	cmp	r3, #78	@ 0x4e
 800da04:	d862      	bhi.n	800dacc <_scanf_float+0x120>
 800da06:	2b40      	cmp	r3, #64	@ 0x40
 800da08:	d83a      	bhi.n	800da80 <_scanf_float+0xd4>
 800da0a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800da0e:	b2c8      	uxtb	r0, r1
 800da10:	280e      	cmp	r0, #14
 800da12:	d938      	bls.n	800da86 <_scanf_float+0xda>
 800da14:	b11f      	cbz	r7, 800da1e <_scanf_float+0x72>
 800da16:	6823      	ldr	r3, [r4, #0]
 800da18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da1c:	6023      	str	r3, [r4, #0]
 800da1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da22:	f1ba 0f01 	cmp.w	sl, #1
 800da26:	f200 8114 	bhi.w	800dc52 <_scanf_float+0x2a6>
 800da2a:	9b01      	ldr	r3, [sp, #4]
 800da2c:	429e      	cmp	r6, r3
 800da2e:	f200 8105 	bhi.w	800dc3c <_scanf_float+0x290>
 800da32:	2001      	movs	r0, #1
 800da34:	b007      	add	sp, #28
 800da36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da3a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800da3e:	2a0d      	cmp	r2, #13
 800da40:	d8e8      	bhi.n	800da14 <_scanf_float+0x68>
 800da42:	a101      	add	r1, pc, #4	@ (adr r1, 800da48 <_scanf_float+0x9c>)
 800da44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800da48:	0800db91 	.word	0x0800db91
 800da4c:	0800da15 	.word	0x0800da15
 800da50:	0800da15 	.word	0x0800da15
 800da54:	0800da15 	.word	0x0800da15
 800da58:	0800dbed 	.word	0x0800dbed
 800da5c:	0800dbc7 	.word	0x0800dbc7
 800da60:	0800da15 	.word	0x0800da15
 800da64:	0800da15 	.word	0x0800da15
 800da68:	0800db9f 	.word	0x0800db9f
 800da6c:	0800da15 	.word	0x0800da15
 800da70:	0800da15 	.word	0x0800da15
 800da74:	0800da15 	.word	0x0800da15
 800da78:	0800da15 	.word	0x0800da15
 800da7c:	0800db5b 	.word	0x0800db5b
 800da80:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800da84:	e7db      	b.n	800da3e <_scanf_float+0x92>
 800da86:	290e      	cmp	r1, #14
 800da88:	d8c4      	bhi.n	800da14 <_scanf_float+0x68>
 800da8a:	a001      	add	r0, pc, #4	@ (adr r0, 800da90 <_scanf_float+0xe4>)
 800da8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800da90:	0800db4b 	.word	0x0800db4b
 800da94:	0800da15 	.word	0x0800da15
 800da98:	0800db4b 	.word	0x0800db4b
 800da9c:	0800dbdb 	.word	0x0800dbdb
 800daa0:	0800da15 	.word	0x0800da15
 800daa4:	0800daed 	.word	0x0800daed
 800daa8:	0800db31 	.word	0x0800db31
 800daac:	0800db31 	.word	0x0800db31
 800dab0:	0800db31 	.word	0x0800db31
 800dab4:	0800db31 	.word	0x0800db31
 800dab8:	0800db31 	.word	0x0800db31
 800dabc:	0800db31 	.word	0x0800db31
 800dac0:	0800db31 	.word	0x0800db31
 800dac4:	0800db31 	.word	0x0800db31
 800dac8:	0800db31 	.word	0x0800db31
 800dacc:	2b6e      	cmp	r3, #110	@ 0x6e
 800dace:	d809      	bhi.n	800dae4 <_scanf_float+0x138>
 800dad0:	2b60      	cmp	r3, #96	@ 0x60
 800dad2:	d8b2      	bhi.n	800da3a <_scanf_float+0x8e>
 800dad4:	2b54      	cmp	r3, #84	@ 0x54
 800dad6:	d07b      	beq.n	800dbd0 <_scanf_float+0x224>
 800dad8:	2b59      	cmp	r3, #89	@ 0x59
 800dada:	d19b      	bne.n	800da14 <_scanf_float+0x68>
 800dadc:	2d07      	cmp	r5, #7
 800dade:	d199      	bne.n	800da14 <_scanf_float+0x68>
 800dae0:	2508      	movs	r5, #8
 800dae2:	e02f      	b.n	800db44 <_scanf_float+0x198>
 800dae4:	2b74      	cmp	r3, #116	@ 0x74
 800dae6:	d073      	beq.n	800dbd0 <_scanf_float+0x224>
 800dae8:	2b79      	cmp	r3, #121	@ 0x79
 800daea:	e7f6      	b.n	800dada <_scanf_float+0x12e>
 800daec:	6821      	ldr	r1, [r4, #0]
 800daee:	05c8      	lsls	r0, r1, #23
 800daf0:	d51e      	bpl.n	800db30 <_scanf_float+0x184>
 800daf2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800daf6:	6021      	str	r1, [r4, #0]
 800daf8:	3701      	adds	r7, #1
 800dafa:	f1bb 0f00 	cmp.w	fp, #0
 800dafe:	d003      	beq.n	800db08 <_scanf_float+0x15c>
 800db00:	3201      	adds	r2, #1
 800db02:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db06:	60a2      	str	r2, [r4, #8]
 800db08:	68a3      	ldr	r3, [r4, #8]
 800db0a:	3b01      	subs	r3, #1
 800db0c:	60a3      	str	r3, [r4, #8]
 800db0e:	6923      	ldr	r3, [r4, #16]
 800db10:	3301      	adds	r3, #1
 800db12:	6123      	str	r3, [r4, #16]
 800db14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800db18:	3b01      	subs	r3, #1
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f8c9 3004 	str.w	r3, [r9, #4]
 800db20:	f340 8083 	ble.w	800dc2a <_scanf_float+0x27e>
 800db24:	f8d9 3000 	ldr.w	r3, [r9]
 800db28:	3301      	adds	r3, #1
 800db2a:	f8c9 3000 	str.w	r3, [r9]
 800db2e:	e763      	b.n	800d9f8 <_scanf_float+0x4c>
 800db30:	eb1a 0105 	adds.w	r1, sl, r5
 800db34:	f47f af6e 	bne.w	800da14 <_scanf_float+0x68>
 800db38:	460d      	mov	r5, r1
 800db3a:	468a      	mov	sl, r1
 800db3c:	6822      	ldr	r2, [r4, #0]
 800db3e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800db42:	6022      	str	r2, [r4, #0]
 800db44:	f806 3b01 	strb.w	r3, [r6], #1
 800db48:	e7de      	b.n	800db08 <_scanf_float+0x15c>
 800db4a:	6822      	ldr	r2, [r4, #0]
 800db4c:	0610      	lsls	r0, r2, #24
 800db4e:	f57f af61 	bpl.w	800da14 <_scanf_float+0x68>
 800db52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800db56:	6022      	str	r2, [r4, #0]
 800db58:	e7f4      	b.n	800db44 <_scanf_float+0x198>
 800db5a:	f1ba 0f00 	cmp.w	sl, #0
 800db5e:	d10c      	bne.n	800db7a <_scanf_float+0x1ce>
 800db60:	b977      	cbnz	r7, 800db80 <_scanf_float+0x1d4>
 800db62:	6822      	ldr	r2, [r4, #0]
 800db64:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800db68:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800db6c:	d108      	bne.n	800db80 <_scanf_float+0x1d4>
 800db6e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800db72:	f04f 0a01 	mov.w	sl, #1
 800db76:	6022      	str	r2, [r4, #0]
 800db78:	e7e4      	b.n	800db44 <_scanf_float+0x198>
 800db7a:	f1ba 0f02 	cmp.w	sl, #2
 800db7e:	d051      	beq.n	800dc24 <_scanf_float+0x278>
 800db80:	2d01      	cmp	r5, #1
 800db82:	d002      	beq.n	800db8a <_scanf_float+0x1de>
 800db84:	2d04      	cmp	r5, #4
 800db86:	f47f af45 	bne.w	800da14 <_scanf_float+0x68>
 800db8a:	3501      	adds	r5, #1
 800db8c:	b2ed      	uxtb	r5, r5
 800db8e:	e7d9      	b.n	800db44 <_scanf_float+0x198>
 800db90:	f1ba 0f01 	cmp.w	sl, #1
 800db94:	f47f af3e 	bne.w	800da14 <_scanf_float+0x68>
 800db98:	f04f 0a02 	mov.w	sl, #2
 800db9c:	e7d2      	b.n	800db44 <_scanf_float+0x198>
 800db9e:	b975      	cbnz	r5, 800dbbe <_scanf_float+0x212>
 800dba0:	2f00      	cmp	r7, #0
 800dba2:	f47f af38 	bne.w	800da16 <_scanf_float+0x6a>
 800dba6:	6822      	ldr	r2, [r4, #0]
 800dba8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dbac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dbb0:	f040 80ff 	bne.w	800ddb2 <_scanf_float+0x406>
 800dbb4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dbb8:	2501      	movs	r5, #1
 800dbba:	6022      	str	r2, [r4, #0]
 800dbbc:	e7c2      	b.n	800db44 <_scanf_float+0x198>
 800dbbe:	2d03      	cmp	r5, #3
 800dbc0:	d0e3      	beq.n	800db8a <_scanf_float+0x1de>
 800dbc2:	2d05      	cmp	r5, #5
 800dbc4:	e7df      	b.n	800db86 <_scanf_float+0x1da>
 800dbc6:	2d02      	cmp	r5, #2
 800dbc8:	f47f af24 	bne.w	800da14 <_scanf_float+0x68>
 800dbcc:	2503      	movs	r5, #3
 800dbce:	e7b9      	b.n	800db44 <_scanf_float+0x198>
 800dbd0:	2d06      	cmp	r5, #6
 800dbd2:	f47f af1f 	bne.w	800da14 <_scanf_float+0x68>
 800dbd6:	2507      	movs	r5, #7
 800dbd8:	e7b4      	b.n	800db44 <_scanf_float+0x198>
 800dbda:	6822      	ldr	r2, [r4, #0]
 800dbdc:	0591      	lsls	r1, r2, #22
 800dbde:	f57f af19 	bpl.w	800da14 <_scanf_float+0x68>
 800dbe2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800dbe6:	6022      	str	r2, [r4, #0]
 800dbe8:	9702      	str	r7, [sp, #8]
 800dbea:	e7ab      	b.n	800db44 <_scanf_float+0x198>
 800dbec:	6822      	ldr	r2, [r4, #0]
 800dbee:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800dbf2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800dbf6:	d005      	beq.n	800dc04 <_scanf_float+0x258>
 800dbf8:	0550      	lsls	r0, r2, #21
 800dbfa:	f57f af0b 	bpl.w	800da14 <_scanf_float+0x68>
 800dbfe:	2f00      	cmp	r7, #0
 800dc00:	f000 80d7 	beq.w	800ddb2 <_scanf_float+0x406>
 800dc04:	0591      	lsls	r1, r2, #22
 800dc06:	bf58      	it	pl
 800dc08:	9902      	ldrpl	r1, [sp, #8]
 800dc0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dc0e:	bf58      	it	pl
 800dc10:	1a79      	subpl	r1, r7, r1
 800dc12:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800dc16:	f04f 0700 	mov.w	r7, #0
 800dc1a:	bf58      	it	pl
 800dc1c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dc20:	6022      	str	r2, [r4, #0]
 800dc22:	e78f      	b.n	800db44 <_scanf_float+0x198>
 800dc24:	f04f 0a03 	mov.w	sl, #3
 800dc28:	e78c      	b.n	800db44 <_scanf_float+0x198>
 800dc2a:	4649      	mov	r1, r9
 800dc2c:	4640      	mov	r0, r8
 800dc2e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dc32:	4798      	blx	r3
 800dc34:	2800      	cmp	r0, #0
 800dc36:	f43f aedf 	beq.w	800d9f8 <_scanf_float+0x4c>
 800dc3a:	e6eb      	b.n	800da14 <_scanf_float+0x68>
 800dc3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc40:	464a      	mov	r2, r9
 800dc42:	4640      	mov	r0, r8
 800dc44:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc48:	4798      	blx	r3
 800dc4a:	6923      	ldr	r3, [r4, #16]
 800dc4c:	3b01      	subs	r3, #1
 800dc4e:	6123      	str	r3, [r4, #16]
 800dc50:	e6eb      	b.n	800da2a <_scanf_float+0x7e>
 800dc52:	1e6b      	subs	r3, r5, #1
 800dc54:	2b06      	cmp	r3, #6
 800dc56:	d824      	bhi.n	800dca2 <_scanf_float+0x2f6>
 800dc58:	2d02      	cmp	r5, #2
 800dc5a:	d836      	bhi.n	800dcca <_scanf_float+0x31e>
 800dc5c:	9b01      	ldr	r3, [sp, #4]
 800dc5e:	429e      	cmp	r6, r3
 800dc60:	f67f aee7 	bls.w	800da32 <_scanf_float+0x86>
 800dc64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc68:	464a      	mov	r2, r9
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc70:	4798      	blx	r3
 800dc72:	6923      	ldr	r3, [r4, #16]
 800dc74:	3b01      	subs	r3, #1
 800dc76:	6123      	str	r3, [r4, #16]
 800dc78:	e7f0      	b.n	800dc5c <_scanf_float+0x2b0>
 800dc7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dc7e:	464a      	mov	r2, r9
 800dc80:	4640      	mov	r0, r8
 800dc82:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800dc86:	4798      	blx	r3
 800dc88:	6923      	ldr	r3, [r4, #16]
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	6123      	str	r3, [r4, #16]
 800dc8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc92:	fa5f fa8a 	uxtb.w	sl, sl
 800dc96:	f1ba 0f02 	cmp.w	sl, #2
 800dc9a:	d1ee      	bne.n	800dc7a <_scanf_float+0x2ce>
 800dc9c:	3d03      	subs	r5, #3
 800dc9e:	b2ed      	uxtb	r5, r5
 800dca0:	1b76      	subs	r6, r6, r5
 800dca2:	6823      	ldr	r3, [r4, #0]
 800dca4:	05da      	lsls	r2, r3, #23
 800dca6:	d530      	bpl.n	800dd0a <_scanf_float+0x35e>
 800dca8:	055b      	lsls	r3, r3, #21
 800dcaa:	d511      	bpl.n	800dcd0 <_scanf_float+0x324>
 800dcac:	9b01      	ldr	r3, [sp, #4]
 800dcae:	429e      	cmp	r6, r3
 800dcb0:	f67f aebf 	bls.w	800da32 <_scanf_float+0x86>
 800dcb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dcb8:	464a      	mov	r2, r9
 800dcba:	4640      	mov	r0, r8
 800dcbc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dcc0:	4798      	blx	r3
 800dcc2:	6923      	ldr	r3, [r4, #16]
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	6123      	str	r3, [r4, #16]
 800dcc8:	e7f0      	b.n	800dcac <_scanf_float+0x300>
 800dcca:	46aa      	mov	sl, r5
 800dccc:	46b3      	mov	fp, r6
 800dcce:	e7de      	b.n	800dc8e <_scanf_float+0x2e2>
 800dcd0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dcd4:	6923      	ldr	r3, [r4, #16]
 800dcd6:	2965      	cmp	r1, #101	@ 0x65
 800dcd8:	f103 33ff 	add.w	r3, r3, #4294967295
 800dcdc:	f106 35ff 	add.w	r5, r6, #4294967295
 800dce0:	6123      	str	r3, [r4, #16]
 800dce2:	d00c      	beq.n	800dcfe <_scanf_float+0x352>
 800dce4:	2945      	cmp	r1, #69	@ 0x45
 800dce6:	d00a      	beq.n	800dcfe <_scanf_float+0x352>
 800dce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dcec:	464a      	mov	r2, r9
 800dcee:	4640      	mov	r0, r8
 800dcf0:	4798      	blx	r3
 800dcf2:	6923      	ldr	r3, [r4, #16]
 800dcf4:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	1eb5      	subs	r5, r6, #2
 800dcfc:	6123      	str	r3, [r4, #16]
 800dcfe:	464a      	mov	r2, r9
 800dd00:	4640      	mov	r0, r8
 800dd02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd06:	4798      	blx	r3
 800dd08:	462e      	mov	r6, r5
 800dd0a:	6822      	ldr	r2, [r4, #0]
 800dd0c:	f012 0210 	ands.w	r2, r2, #16
 800dd10:	d001      	beq.n	800dd16 <_scanf_float+0x36a>
 800dd12:	2000      	movs	r0, #0
 800dd14:	e68e      	b.n	800da34 <_scanf_float+0x88>
 800dd16:	7032      	strb	r2, [r6, #0]
 800dd18:	6823      	ldr	r3, [r4, #0]
 800dd1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dd1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd22:	d125      	bne.n	800dd70 <_scanf_float+0x3c4>
 800dd24:	9b02      	ldr	r3, [sp, #8]
 800dd26:	429f      	cmp	r7, r3
 800dd28:	d00a      	beq.n	800dd40 <_scanf_float+0x394>
 800dd2a:	1bda      	subs	r2, r3, r7
 800dd2c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800dd30:	429e      	cmp	r6, r3
 800dd32:	bf28      	it	cs
 800dd34:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800dd38:	4630      	mov	r0, r6
 800dd3a:	491f      	ldr	r1, [pc, #124]	@ (800ddb8 <_scanf_float+0x40c>)
 800dd3c:	f000 f9ba 	bl	800e0b4 <siprintf>
 800dd40:	2200      	movs	r2, #0
 800dd42:	4640      	mov	r0, r8
 800dd44:	9901      	ldr	r1, [sp, #4]
 800dd46:	f7ff f93f 	bl	800cfc8 <_strtod_r>
 800dd4a:	9b03      	ldr	r3, [sp, #12]
 800dd4c:	6825      	ldr	r5, [r4, #0]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f015 0f02 	tst.w	r5, #2
 800dd54:	4606      	mov	r6, r0
 800dd56:	460f      	mov	r7, r1
 800dd58:	f103 0204 	add.w	r2, r3, #4
 800dd5c:	d015      	beq.n	800dd8a <_scanf_float+0x3de>
 800dd5e:	9903      	ldr	r1, [sp, #12]
 800dd60:	600a      	str	r2, [r1, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	e9c3 6700 	strd	r6, r7, [r3]
 800dd68:	68e3      	ldr	r3, [r4, #12]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	60e3      	str	r3, [r4, #12]
 800dd6e:	e7d0      	b.n	800dd12 <_scanf_float+0x366>
 800dd70:	9b04      	ldr	r3, [sp, #16]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0e4      	beq.n	800dd40 <_scanf_float+0x394>
 800dd76:	9905      	ldr	r1, [sp, #20]
 800dd78:	230a      	movs	r3, #10
 800dd7a:	4640      	mov	r0, r8
 800dd7c:	3101      	adds	r1, #1
 800dd7e:	f7ff f9af 	bl	800d0e0 <_strtol_r>
 800dd82:	9b04      	ldr	r3, [sp, #16]
 800dd84:	9e05      	ldr	r6, [sp, #20]
 800dd86:	1ac2      	subs	r2, r0, r3
 800dd88:	e7d0      	b.n	800dd2c <_scanf_float+0x380>
 800dd8a:	076d      	lsls	r5, r5, #29
 800dd8c:	d4e7      	bmi.n	800dd5e <_scanf_float+0x3b2>
 800dd8e:	9d03      	ldr	r5, [sp, #12]
 800dd90:	602a      	str	r2, [r5, #0]
 800dd92:	681d      	ldr	r5, [r3, #0]
 800dd94:	4602      	mov	r2, r0
 800dd96:	460b      	mov	r3, r1
 800dd98:	f7f2 fe42 	bl	8000a20 <__aeabi_dcmpun>
 800dd9c:	b120      	cbz	r0, 800dda8 <_scanf_float+0x3fc>
 800dd9e:	4807      	ldr	r0, [pc, #28]	@ (800ddbc <_scanf_float+0x410>)
 800dda0:	f000 fb80 	bl	800e4a4 <nanf>
 800dda4:	6028      	str	r0, [r5, #0]
 800dda6:	e7df      	b.n	800dd68 <_scanf_float+0x3bc>
 800dda8:	4630      	mov	r0, r6
 800ddaa:	4639      	mov	r1, r7
 800ddac:	f7f2 fe96 	bl	8000adc <__aeabi_d2f>
 800ddb0:	e7f8      	b.n	800dda4 <_scanf_float+0x3f8>
 800ddb2:	2700      	movs	r7, #0
 800ddb4:	e633      	b.n	800da1e <_scanf_float+0x72>
 800ddb6:	bf00      	nop
 800ddb8:	080112ab 	.word	0x080112ab
 800ddbc:	08011274 	.word	0x08011274

0800ddc0 <std>:
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	b510      	push	{r4, lr}
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	e9c0 3300 	strd	r3, r3, [r0]
 800ddca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddce:	6083      	str	r3, [r0, #8]
 800ddd0:	8181      	strh	r1, [r0, #12]
 800ddd2:	6643      	str	r3, [r0, #100]	@ 0x64
 800ddd4:	81c2      	strh	r2, [r0, #14]
 800ddd6:	6183      	str	r3, [r0, #24]
 800ddd8:	4619      	mov	r1, r3
 800ddda:	2208      	movs	r2, #8
 800dddc:	305c      	adds	r0, #92	@ 0x5c
 800ddde:	f000 fa73 	bl	800e2c8 <memset>
 800dde2:	4b0d      	ldr	r3, [pc, #52]	@ (800de18 <std+0x58>)
 800dde4:	6224      	str	r4, [r4, #32]
 800dde6:	6263      	str	r3, [r4, #36]	@ 0x24
 800dde8:	4b0c      	ldr	r3, [pc, #48]	@ (800de1c <std+0x5c>)
 800ddea:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ddec:	4b0c      	ldr	r3, [pc, #48]	@ (800de20 <std+0x60>)
 800ddee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ddf0:	4b0c      	ldr	r3, [pc, #48]	@ (800de24 <std+0x64>)
 800ddf2:	6323      	str	r3, [r4, #48]	@ 0x30
 800ddf4:	4b0c      	ldr	r3, [pc, #48]	@ (800de28 <std+0x68>)
 800ddf6:	429c      	cmp	r4, r3
 800ddf8:	d006      	beq.n	800de08 <std+0x48>
 800ddfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ddfe:	4294      	cmp	r4, r2
 800de00:	d002      	beq.n	800de08 <std+0x48>
 800de02:	33d0      	adds	r3, #208	@ 0xd0
 800de04:	429c      	cmp	r4, r3
 800de06:	d105      	bne.n	800de14 <std+0x54>
 800de08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800de0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de10:	f000 bb1a 	b.w	800e448 <__retarget_lock_init_recursive>
 800de14:	bd10      	pop	{r4, pc}
 800de16:	bf00      	nop
 800de18:	0800e0f9 	.word	0x0800e0f9
 800de1c:	0800e11b 	.word	0x0800e11b
 800de20:	0800e153 	.word	0x0800e153
 800de24:	0800e177 	.word	0x0800e177
 800de28:	20001208 	.word	0x20001208

0800de2c <stdio_exit_handler>:
 800de2c:	4a02      	ldr	r2, [pc, #8]	@ (800de38 <stdio_exit_handler+0xc>)
 800de2e:	4903      	ldr	r1, [pc, #12]	@ (800de3c <stdio_exit_handler+0x10>)
 800de30:	4803      	ldr	r0, [pc, #12]	@ (800de40 <stdio_exit_handler+0x14>)
 800de32:	f000 b87b 	b.w	800df2c <_fwalk_sglue>
 800de36:	bf00      	nop
 800de38:	20000088 	.word	0x20000088
 800de3c:	08010829 	.word	0x08010829
 800de40:	20000204 	.word	0x20000204

0800de44 <cleanup_stdio>:
 800de44:	6841      	ldr	r1, [r0, #4]
 800de46:	4b0c      	ldr	r3, [pc, #48]	@ (800de78 <cleanup_stdio+0x34>)
 800de48:	b510      	push	{r4, lr}
 800de4a:	4299      	cmp	r1, r3
 800de4c:	4604      	mov	r4, r0
 800de4e:	d001      	beq.n	800de54 <cleanup_stdio+0x10>
 800de50:	f002 fcea 	bl	8010828 <_fflush_r>
 800de54:	68a1      	ldr	r1, [r4, #8]
 800de56:	4b09      	ldr	r3, [pc, #36]	@ (800de7c <cleanup_stdio+0x38>)
 800de58:	4299      	cmp	r1, r3
 800de5a:	d002      	beq.n	800de62 <cleanup_stdio+0x1e>
 800de5c:	4620      	mov	r0, r4
 800de5e:	f002 fce3 	bl	8010828 <_fflush_r>
 800de62:	68e1      	ldr	r1, [r4, #12]
 800de64:	4b06      	ldr	r3, [pc, #24]	@ (800de80 <cleanup_stdio+0x3c>)
 800de66:	4299      	cmp	r1, r3
 800de68:	d004      	beq.n	800de74 <cleanup_stdio+0x30>
 800de6a:	4620      	mov	r0, r4
 800de6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de70:	f002 bcda 	b.w	8010828 <_fflush_r>
 800de74:	bd10      	pop	{r4, pc}
 800de76:	bf00      	nop
 800de78:	20001208 	.word	0x20001208
 800de7c:	20001270 	.word	0x20001270
 800de80:	200012d8 	.word	0x200012d8

0800de84 <global_stdio_init.part.0>:
 800de84:	b510      	push	{r4, lr}
 800de86:	4b0b      	ldr	r3, [pc, #44]	@ (800deb4 <global_stdio_init.part.0+0x30>)
 800de88:	4c0b      	ldr	r4, [pc, #44]	@ (800deb8 <global_stdio_init.part.0+0x34>)
 800de8a:	4a0c      	ldr	r2, [pc, #48]	@ (800debc <global_stdio_init.part.0+0x38>)
 800de8c:	4620      	mov	r0, r4
 800de8e:	601a      	str	r2, [r3, #0]
 800de90:	2104      	movs	r1, #4
 800de92:	2200      	movs	r2, #0
 800de94:	f7ff ff94 	bl	800ddc0 <std>
 800de98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800de9c:	2201      	movs	r2, #1
 800de9e:	2109      	movs	r1, #9
 800dea0:	f7ff ff8e 	bl	800ddc0 <std>
 800dea4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dea8:	2202      	movs	r2, #2
 800deaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deae:	2112      	movs	r1, #18
 800deb0:	f7ff bf86 	b.w	800ddc0 <std>
 800deb4:	20001340 	.word	0x20001340
 800deb8:	20001208 	.word	0x20001208
 800debc:	0800de2d 	.word	0x0800de2d

0800dec0 <__sfp_lock_acquire>:
 800dec0:	4801      	ldr	r0, [pc, #4]	@ (800dec8 <__sfp_lock_acquire+0x8>)
 800dec2:	f000 bac2 	b.w	800e44a <__retarget_lock_acquire_recursive>
 800dec6:	bf00      	nop
 800dec8:	20001349 	.word	0x20001349

0800decc <__sfp_lock_release>:
 800decc:	4801      	ldr	r0, [pc, #4]	@ (800ded4 <__sfp_lock_release+0x8>)
 800dece:	f000 babd 	b.w	800e44c <__retarget_lock_release_recursive>
 800ded2:	bf00      	nop
 800ded4:	20001349 	.word	0x20001349

0800ded8 <__sinit>:
 800ded8:	b510      	push	{r4, lr}
 800deda:	4604      	mov	r4, r0
 800dedc:	f7ff fff0 	bl	800dec0 <__sfp_lock_acquire>
 800dee0:	6a23      	ldr	r3, [r4, #32]
 800dee2:	b11b      	cbz	r3, 800deec <__sinit+0x14>
 800dee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dee8:	f7ff bff0 	b.w	800decc <__sfp_lock_release>
 800deec:	4b04      	ldr	r3, [pc, #16]	@ (800df00 <__sinit+0x28>)
 800deee:	6223      	str	r3, [r4, #32]
 800def0:	4b04      	ldr	r3, [pc, #16]	@ (800df04 <__sinit+0x2c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1f5      	bne.n	800dee4 <__sinit+0xc>
 800def8:	f7ff ffc4 	bl	800de84 <global_stdio_init.part.0>
 800defc:	e7f2      	b.n	800dee4 <__sinit+0xc>
 800defe:	bf00      	nop
 800df00:	0800de45 	.word	0x0800de45
 800df04:	20001340 	.word	0x20001340

0800df08 <fiprintf>:
 800df08:	b40e      	push	{r1, r2, r3}
 800df0a:	b503      	push	{r0, r1, lr}
 800df0c:	4601      	mov	r1, r0
 800df0e:	ab03      	add	r3, sp, #12
 800df10:	4805      	ldr	r0, [pc, #20]	@ (800df28 <fiprintf+0x20>)
 800df12:	f853 2b04 	ldr.w	r2, [r3], #4
 800df16:	6800      	ldr	r0, [r0, #0]
 800df18:	9301      	str	r3, [sp, #4]
 800df1a:	f002 faed 	bl	80104f8 <_vfiprintf_r>
 800df1e:	b002      	add	sp, #8
 800df20:	f85d eb04 	ldr.w	lr, [sp], #4
 800df24:	b003      	add	sp, #12
 800df26:	4770      	bx	lr
 800df28:	20000200 	.word	0x20000200

0800df2c <_fwalk_sglue>:
 800df2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df30:	4607      	mov	r7, r0
 800df32:	4688      	mov	r8, r1
 800df34:	4614      	mov	r4, r2
 800df36:	2600      	movs	r6, #0
 800df38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df3c:	f1b9 0901 	subs.w	r9, r9, #1
 800df40:	d505      	bpl.n	800df4e <_fwalk_sglue+0x22>
 800df42:	6824      	ldr	r4, [r4, #0]
 800df44:	2c00      	cmp	r4, #0
 800df46:	d1f7      	bne.n	800df38 <_fwalk_sglue+0xc>
 800df48:	4630      	mov	r0, r6
 800df4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df4e:	89ab      	ldrh	r3, [r5, #12]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d907      	bls.n	800df64 <_fwalk_sglue+0x38>
 800df54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df58:	3301      	adds	r3, #1
 800df5a:	d003      	beq.n	800df64 <_fwalk_sglue+0x38>
 800df5c:	4629      	mov	r1, r5
 800df5e:	4638      	mov	r0, r7
 800df60:	47c0      	blx	r8
 800df62:	4306      	orrs	r6, r0
 800df64:	3568      	adds	r5, #104	@ 0x68
 800df66:	e7e9      	b.n	800df3c <_fwalk_sglue+0x10>

0800df68 <iprintf>:
 800df68:	b40f      	push	{r0, r1, r2, r3}
 800df6a:	b507      	push	{r0, r1, r2, lr}
 800df6c:	4906      	ldr	r1, [pc, #24]	@ (800df88 <iprintf+0x20>)
 800df6e:	ab04      	add	r3, sp, #16
 800df70:	6808      	ldr	r0, [r1, #0]
 800df72:	f853 2b04 	ldr.w	r2, [r3], #4
 800df76:	6881      	ldr	r1, [r0, #8]
 800df78:	9301      	str	r3, [sp, #4]
 800df7a:	f002 fabd 	bl	80104f8 <_vfiprintf_r>
 800df7e:	b003      	add	sp, #12
 800df80:	f85d eb04 	ldr.w	lr, [sp], #4
 800df84:	b004      	add	sp, #16
 800df86:	4770      	bx	lr
 800df88:	20000200 	.word	0x20000200

0800df8c <_puts_r>:
 800df8c:	6a03      	ldr	r3, [r0, #32]
 800df8e:	b570      	push	{r4, r5, r6, lr}
 800df90:	4605      	mov	r5, r0
 800df92:	460e      	mov	r6, r1
 800df94:	6884      	ldr	r4, [r0, #8]
 800df96:	b90b      	cbnz	r3, 800df9c <_puts_r+0x10>
 800df98:	f7ff ff9e 	bl	800ded8 <__sinit>
 800df9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df9e:	07db      	lsls	r3, r3, #31
 800dfa0:	d405      	bmi.n	800dfae <_puts_r+0x22>
 800dfa2:	89a3      	ldrh	r3, [r4, #12]
 800dfa4:	0598      	lsls	r0, r3, #22
 800dfa6:	d402      	bmi.n	800dfae <_puts_r+0x22>
 800dfa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfaa:	f000 fa4e 	bl	800e44a <__retarget_lock_acquire_recursive>
 800dfae:	89a3      	ldrh	r3, [r4, #12]
 800dfb0:	0719      	lsls	r1, r3, #28
 800dfb2:	d502      	bpl.n	800dfba <_puts_r+0x2e>
 800dfb4:	6923      	ldr	r3, [r4, #16]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d135      	bne.n	800e026 <_puts_r+0x9a>
 800dfba:	4621      	mov	r1, r4
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	f000 f91d 	bl	800e1fc <__swsetup_r>
 800dfc2:	b380      	cbz	r0, 800e026 <_puts_r+0x9a>
 800dfc4:	f04f 35ff 	mov.w	r5, #4294967295
 800dfc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dfca:	07da      	lsls	r2, r3, #31
 800dfcc:	d405      	bmi.n	800dfda <_puts_r+0x4e>
 800dfce:	89a3      	ldrh	r3, [r4, #12]
 800dfd0:	059b      	lsls	r3, r3, #22
 800dfd2:	d402      	bmi.n	800dfda <_puts_r+0x4e>
 800dfd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfd6:	f000 fa39 	bl	800e44c <__retarget_lock_release_recursive>
 800dfda:	4628      	mov	r0, r5
 800dfdc:	bd70      	pop	{r4, r5, r6, pc}
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	da04      	bge.n	800dfec <_puts_r+0x60>
 800dfe2:	69a2      	ldr	r2, [r4, #24]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	dc17      	bgt.n	800e018 <_puts_r+0x8c>
 800dfe8:	290a      	cmp	r1, #10
 800dfea:	d015      	beq.n	800e018 <_puts_r+0x8c>
 800dfec:	6823      	ldr	r3, [r4, #0]
 800dfee:	1c5a      	adds	r2, r3, #1
 800dff0:	6022      	str	r2, [r4, #0]
 800dff2:	7019      	strb	r1, [r3, #0]
 800dff4:	68a3      	ldr	r3, [r4, #8]
 800dff6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dffa:	3b01      	subs	r3, #1
 800dffc:	60a3      	str	r3, [r4, #8]
 800dffe:	2900      	cmp	r1, #0
 800e000:	d1ed      	bne.n	800dfde <_puts_r+0x52>
 800e002:	2b00      	cmp	r3, #0
 800e004:	da11      	bge.n	800e02a <_puts_r+0x9e>
 800e006:	4622      	mov	r2, r4
 800e008:	210a      	movs	r1, #10
 800e00a:	4628      	mov	r0, r5
 800e00c:	f000 f8b7 	bl	800e17e <__swbuf_r>
 800e010:	3001      	adds	r0, #1
 800e012:	d0d7      	beq.n	800dfc4 <_puts_r+0x38>
 800e014:	250a      	movs	r5, #10
 800e016:	e7d7      	b.n	800dfc8 <_puts_r+0x3c>
 800e018:	4622      	mov	r2, r4
 800e01a:	4628      	mov	r0, r5
 800e01c:	f000 f8af 	bl	800e17e <__swbuf_r>
 800e020:	3001      	adds	r0, #1
 800e022:	d1e7      	bne.n	800dff4 <_puts_r+0x68>
 800e024:	e7ce      	b.n	800dfc4 <_puts_r+0x38>
 800e026:	3e01      	subs	r6, #1
 800e028:	e7e4      	b.n	800dff4 <_puts_r+0x68>
 800e02a:	6823      	ldr	r3, [r4, #0]
 800e02c:	1c5a      	adds	r2, r3, #1
 800e02e:	6022      	str	r2, [r4, #0]
 800e030:	220a      	movs	r2, #10
 800e032:	701a      	strb	r2, [r3, #0]
 800e034:	e7ee      	b.n	800e014 <_puts_r+0x88>
	...

0800e038 <puts>:
 800e038:	4b02      	ldr	r3, [pc, #8]	@ (800e044 <puts+0xc>)
 800e03a:	4601      	mov	r1, r0
 800e03c:	6818      	ldr	r0, [r3, #0]
 800e03e:	f7ff bfa5 	b.w	800df8c <_puts_r>
 800e042:	bf00      	nop
 800e044:	20000200 	.word	0x20000200

0800e048 <sniprintf>:
 800e048:	b40c      	push	{r2, r3}
 800e04a:	b530      	push	{r4, r5, lr}
 800e04c:	4b18      	ldr	r3, [pc, #96]	@ (800e0b0 <sniprintf+0x68>)
 800e04e:	1e0c      	subs	r4, r1, #0
 800e050:	681d      	ldr	r5, [r3, #0]
 800e052:	b09d      	sub	sp, #116	@ 0x74
 800e054:	da08      	bge.n	800e068 <sniprintf+0x20>
 800e056:	238b      	movs	r3, #139	@ 0x8b
 800e058:	f04f 30ff 	mov.w	r0, #4294967295
 800e05c:	602b      	str	r3, [r5, #0]
 800e05e:	b01d      	add	sp, #116	@ 0x74
 800e060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e064:	b002      	add	sp, #8
 800e066:	4770      	bx	lr
 800e068:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e06c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e070:	f04f 0300 	mov.w	r3, #0
 800e074:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e076:	bf0c      	ite	eq
 800e078:	4623      	moveq	r3, r4
 800e07a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e07e:	9304      	str	r3, [sp, #16]
 800e080:	9307      	str	r3, [sp, #28]
 800e082:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e086:	9002      	str	r0, [sp, #8]
 800e088:	9006      	str	r0, [sp, #24]
 800e08a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e08e:	4628      	mov	r0, r5
 800e090:	ab21      	add	r3, sp, #132	@ 0x84
 800e092:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e094:	a902      	add	r1, sp, #8
 800e096:	9301      	str	r3, [sp, #4]
 800e098:	f002 f90a 	bl	80102b0 <_svfiprintf_r>
 800e09c:	1c43      	adds	r3, r0, #1
 800e09e:	bfbc      	itt	lt
 800e0a0:	238b      	movlt	r3, #139	@ 0x8b
 800e0a2:	602b      	strlt	r3, [r5, #0]
 800e0a4:	2c00      	cmp	r4, #0
 800e0a6:	d0da      	beq.n	800e05e <sniprintf+0x16>
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	9b02      	ldr	r3, [sp, #8]
 800e0ac:	701a      	strb	r2, [r3, #0]
 800e0ae:	e7d6      	b.n	800e05e <sniprintf+0x16>
 800e0b0:	20000200 	.word	0x20000200

0800e0b4 <siprintf>:
 800e0b4:	b40e      	push	{r1, r2, r3}
 800e0b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e0ba:	b510      	push	{r4, lr}
 800e0bc:	2400      	movs	r4, #0
 800e0be:	b09d      	sub	sp, #116	@ 0x74
 800e0c0:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e0c2:	9002      	str	r0, [sp, #8]
 800e0c4:	9006      	str	r0, [sp, #24]
 800e0c6:	9107      	str	r1, [sp, #28]
 800e0c8:	9104      	str	r1, [sp, #16]
 800e0ca:	4809      	ldr	r0, [pc, #36]	@ (800e0f0 <siprintf+0x3c>)
 800e0cc:	4909      	ldr	r1, [pc, #36]	@ (800e0f4 <siprintf+0x40>)
 800e0ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0d2:	9105      	str	r1, [sp, #20]
 800e0d4:	6800      	ldr	r0, [r0, #0]
 800e0d6:	a902      	add	r1, sp, #8
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e0dc:	f002 f8e8 	bl	80102b0 <_svfiprintf_r>
 800e0e0:	9b02      	ldr	r3, [sp, #8]
 800e0e2:	701c      	strb	r4, [r3, #0]
 800e0e4:	b01d      	add	sp, #116	@ 0x74
 800e0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0ea:	b003      	add	sp, #12
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	20000200 	.word	0x20000200
 800e0f4:	ffff0208 	.word	0xffff0208

0800e0f8 <__sread>:
 800e0f8:	b510      	push	{r4, lr}
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e100:	f000 f944 	bl	800e38c <_read_r>
 800e104:	2800      	cmp	r0, #0
 800e106:	bfab      	itete	ge
 800e108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e10a:	89a3      	ldrhlt	r3, [r4, #12]
 800e10c:	181b      	addge	r3, r3, r0
 800e10e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e112:	bfac      	ite	ge
 800e114:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e116:	81a3      	strhlt	r3, [r4, #12]
 800e118:	bd10      	pop	{r4, pc}

0800e11a <__swrite>:
 800e11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e11e:	461f      	mov	r7, r3
 800e120:	898b      	ldrh	r3, [r1, #12]
 800e122:	4605      	mov	r5, r0
 800e124:	05db      	lsls	r3, r3, #23
 800e126:	460c      	mov	r4, r1
 800e128:	4616      	mov	r6, r2
 800e12a:	d505      	bpl.n	800e138 <__swrite+0x1e>
 800e12c:	2302      	movs	r3, #2
 800e12e:	2200      	movs	r2, #0
 800e130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e134:	f000 f918 	bl	800e368 <_lseek_r>
 800e138:	89a3      	ldrh	r3, [r4, #12]
 800e13a:	4632      	mov	r2, r6
 800e13c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e140:	81a3      	strh	r3, [r4, #12]
 800e142:	4628      	mov	r0, r5
 800e144:	463b      	mov	r3, r7
 800e146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e14e:	f000 b93f 	b.w	800e3d0 <_write_r>

0800e152 <__sseek>:
 800e152:	b510      	push	{r4, lr}
 800e154:	460c      	mov	r4, r1
 800e156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e15a:	f000 f905 	bl	800e368 <_lseek_r>
 800e15e:	1c43      	adds	r3, r0, #1
 800e160:	89a3      	ldrh	r3, [r4, #12]
 800e162:	bf15      	itete	ne
 800e164:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e166:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e16a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e16e:	81a3      	strheq	r3, [r4, #12]
 800e170:	bf18      	it	ne
 800e172:	81a3      	strhne	r3, [r4, #12]
 800e174:	bd10      	pop	{r4, pc}

0800e176 <__sclose>:
 800e176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e17a:	f000 b8e5 	b.w	800e348 <_close_r>

0800e17e <__swbuf_r>:
 800e17e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e180:	460e      	mov	r6, r1
 800e182:	4614      	mov	r4, r2
 800e184:	4605      	mov	r5, r0
 800e186:	b118      	cbz	r0, 800e190 <__swbuf_r+0x12>
 800e188:	6a03      	ldr	r3, [r0, #32]
 800e18a:	b90b      	cbnz	r3, 800e190 <__swbuf_r+0x12>
 800e18c:	f7ff fea4 	bl	800ded8 <__sinit>
 800e190:	69a3      	ldr	r3, [r4, #24]
 800e192:	60a3      	str	r3, [r4, #8]
 800e194:	89a3      	ldrh	r3, [r4, #12]
 800e196:	071a      	lsls	r2, r3, #28
 800e198:	d501      	bpl.n	800e19e <__swbuf_r+0x20>
 800e19a:	6923      	ldr	r3, [r4, #16]
 800e19c:	b943      	cbnz	r3, 800e1b0 <__swbuf_r+0x32>
 800e19e:	4621      	mov	r1, r4
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	f000 f82b 	bl	800e1fc <__swsetup_r>
 800e1a6:	b118      	cbz	r0, 800e1b0 <__swbuf_r+0x32>
 800e1a8:	f04f 37ff 	mov.w	r7, #4294967295
 800e1ac:	4638      	mov	r0, r7
 800e1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1b0:	6823      	ldr	r3, [r4, #0]
 800e1b2:	6922      	ldr	r2, [r4, #16]
 800e1b4:	b2f6      	uxtb	r6, r6
 800e1b6:	1a98      	subs	r0, r3, r2
 800e1b8:	6963      	ldr	r3, [r4, #20]
 800e1ba:	4637      	mov	r7, r6
 800e1bc:	4283      	cmp	r3, r0
 800e1be:	dc05      	bgt.n	800e1cc <__swbuf_r+0x4e>
 800e1c0:	4621      	mov	r1, r4
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	f002 fb30 	bl	8010828 <_fflush_r>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d1ed      	bne.n	800e1a8 <__swbuf_r+0x2a>
 800e1cc:	68a3      	ldr	r3, [r4, #8]
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	60a3      	str	r3, [r4, #8]
 800e1d2:	6823      	ldr	r3, [r4, #0]
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	6022      	str	r2, [r4, #0]
 800e1d8:	701e      	strb	r6, [r3, #0]
 800e1da:	6962      	ldr	r2, [r4, #20]
 800e1dc:	1c43      	adds	r3, r0, #1
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d004      	beq.n	800e1ec <__swbuf_r+0x6e>
 800e1e2:	89a3      	ldrh	r3, [r4, #12]
 800e1e4:	07db      	lsls	r3, r3, #31
 800e1e6:	d5e1      	bpl.n	800e1ac <__swbuf_r+0x2e>
 800e1e8:	2e0a      	cmp	r6, #10
 800e1ea:	d1df      	bne.n	800e1ac <__swbuf_r+0x2e>
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f002 fb1a 	bl	8010828 <_fflush_r>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d0d9      	beq.n	800e1ac <__swbuf_r+0x2e>
 800e1f8:	e7d6      	b.n	800e1a8 <__swbuf_r+0x2a>
	...

0800e1fc <__swsetup_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4b29      	ldr	r3, [pc, #164]	@ (800e2a4 <__swsetup_r+0xa8>)
 800e200:	4605      	mov	r5, r0
 800e202:	6818      	ldr	r0, [r3, #0]
 800e204:	460c      	mov	r4, r1
 800e206:	b118      	cbz	r0, 800e210 <__swsetup_r+0x14>
 800e208:	6a03      	ldr	r3, [r0, #32]
 800e20a:	b90b      	cbnz	r3, 800e210 <__swsetup_r+0x14>
 800e20c:	f7ff fe64 	bl	800ded8 <__sinit>
 800e210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e214:	0719      	lsls	r1, r3, #28
 800e216:	d422      	bmi.n	800e25e <__swsetup_r+0x62>
 800e218:	06da      	lsls	r2, r3, #27
 800e21a:	d407      	bmi.n	800e22c <__swsetup_r+0x30>
 800e21c:	2209      	movs	r2, #9
 800e21e:	602a      	str	r2, [r5, #0]
 800e220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e224:	f04f 30ff 	mov.w	r0, #4294967295
 800e228:	81a3      	strh	r3, [r4, #12]
 800e22a:	e033      	b.n	800e294 <__swsetup_r+0x98>
 800e22c:	0758      	lsls	r0, r3, #29
 800e22e:	d512      	bpl.n	800e256 <__swsetup_r+0x5a>
 800e230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e232:	b141      	cbz	r1, 800e246 <__swsetup_r+0x4a>
 800e234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e238:	4299      	cmp	r1, r3
 800e23a:	d002      	beq.n	800e242 <__swsetup_r+0x46>
 800e23c:	4628      	mov	r0, r5
 800e23e:	f000 ff9b 	bl	800f178 <_free_r>
 800e242:	2300      	movs	r3, #0
 800e244:	6363      	str	r3, [r4, #52]	@ 0x34
 800e246:	89a3      	ldrh	r3, [r4, #12]
 800e248:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e24c:	81a3      	strh	r3, [r4, #12]
 800e24e:	2300      	movs	r3, #0
 800e250:	6063      	str	r3, [r4, #4]
 800e252:	6923      	ldr	r3, [r4, #16]
 800e254:	6023      	str	r3, [r4, #0]
 800e256:	89a3      	ldrh	r3, [r4, #12]
 800e258:	f043 0308 	orr.w	r3, r3, #8
 800e25c:	81a3      	strh	r3, [r4, #12]
 800e25e:	6923      	ldr	r3, [r4, #16]
 800e260:	b94b      	cbnz	r3, 800e276 <__swsetup_r+0x7a>
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e26c:	d003      	beq.n	800e276 <__swsetup_r+0x7a>
 800e26e:	4621      	mov	r1, r4
 800e270:	4628      	mov	r0, r5
 800e272:	f002 fb26 	bl	80108c2 <__smakebuf_r>
 800e276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e27a:	f013 0201 	ands.w	r2, r3, #1
 800e27e:	d00a      	beq.n	800e296 <__swsetup_r+0x9a>
 800e280:	2200      	movs	r2, #0
 800e282:	60a2      	str	r2, [r4, #8]
 800e284:	6962      	ldr	r2, [r4, #20]
 800e286:	4252      	negs	r2, r2
 800e288:	61a2      	str	r2, [r4, #24]
 800e28a:	6922      	ldr	r2, [r4, #16]
 800e28c:	b942      	cbnz	r2, 800e2a0 <__swsetup_r+0xa4>
 800e28e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e292:	d1c5      	bne.n	800e220 <__swsetup_r+0x24>
 800e294:	bd38      	pop	{r3, r4, r5, pc}
 800e296:	0799      	lsls	r1, r3, #30
 800e298:	bf58      	it	pl
 800e29a:	6962      	ldrpl	r2, [r4, #20]
 800e29c:	60a2      	str	r2, [r4, #8]
 800e29e:	e7f4      	b.n	800e28a <__swsetup_r+0x8e>
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	e7f7      	b.n	800e294 <__swsetup_r+0x98>
 800e2a4:	20000200 	.word	0x20000200

0800e2a8 <memcmp>:
 800e2a8:	b510      	push	{r4, lr}
 800e2aa:	3901      	subs	r1, #1
 800e2ac:	4402      	add	r2, r0
 800e2ae:	4290      	cmp	r0, r2
 800e2b0:	d101      	bne.n	800e2b6 <memcmp+0xe>
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	e005      	b.n	800e2c2 <memcmp+0x1a>
 800e2b6:	7803      	ldrb	r3, [r0, #0]
 800e2b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e2bc:	42a3      	cmp	r3, r4
 800e2be:	d001      	beq.n	800e2c4 <memcmp+0x1c>
 800e2c0:	1b18      	subs	r0, r3, r4
 800e2c2:	bd10      	pop	{r4, pc}
 800e2c4:	3001      	adds	r0, #1
 800e2c6:	e7f2      	b.n	800e2ae <memcmp+0x6>

0800e2c8 <memset>:
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	4402      	add	r2, r0
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d100      	bne.n	800e2d2 <memset+0xa>
 800e2d0:	4770      	bx	lr
 800e2d2:	f803 1b01 	strb.w	r1, [r3], #1
 800e2d6:	e7f9      	b.n	800e2cc <memset+0x4>

0800e2d8 <strcat>:
 800e2d8:	4602      	mov	r2, r0
 800e2da:	b510      	push	{r4, lr}
 800e2dc:	7814      	ldrb	r4, [r2, #0]
 800e2de:	4613      	mov	r3, r2
 800e2e0:	3201      	adds	r2, #1
 800e2e2:	2c00      	cmp	r4, #0
 800e2e4:	d1fa      	bne.n	800e2dc <strcat+0x4>
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2f0:	2a00      	cmp	r2, #0
 800e2f2:	d1f9      	bne.n	800e2e8 <strcat+0x10>
 800e2f4:	bd10      	pop	{r4, pc}

0800e2f6 <strncmp>:
 800e2f6:	b510      	push	{r4, lr}
 800e2f8:	b16a      	cbz	r2, 800e316 <strncmp+0x20>
 800e2fa:	3901      	subs	r1, #1
 800e2fc:	1884      	adds	r4, r0, r2
 800e2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e302:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e306:	429a      	cmp	r2, r3
 800e308:	d103      	bne.n	800e312 <strncmp+0x1c>
 800e30a:	42a0      	cmp	r0, r4
 800e30c:	d001      	beq.n	800e312 <strncmp+0x1c>
 800e30e:	2a00      	cmp	r2, #0
 800e310:	d1f5      	bne.n	800e2fe <strncmp+0x8>
 800e312:	1ad0      	subs	r0, r2, r3
 800e314:	bd10      	pop	{r4, pc}
 800e316:	4610      	mov	r0, r2
 800e318:	e7fc      	b.n	800e314 <strncmp+0x1e>

0800e31a <strncpy>:
 800e31a:	4603      	mov	r3, r0
 800e31c:	b510      	push	{r4, lr}
 800e31e:	3901      	subs	r1, #1
 800e320:	b132      	cbz	r2, 800e330 <strncpy+0x16>
 800e322:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e326:	3a01      	subs	r2, #1
 800e328:	f803 4b01 	strb.w	r4, [r3], #1
 800e32c:	2c00      	cmp	r4, #0
 800e32e:	d1f7      	bne.n	800e320 <strncpy+0x6>
 800e330:	2100      	movs	r1, #0
 800e332:	441a      	add	r2, r3
 800e334:	4293      	cmp	r3, r2
 800e336:	d100      	bne.n	800e33a <strncpy+0x20>
 800e338:	bd10      	pop	{r4, pc}
 800e33a:	f803 1b01 	strb.w	r1, [r3], #1
 800e33e:	e7f9      	b.n	800e334 <strncpy+0x1a>

0800e340 <_localeconv_r>:
 800e340:	4800      	ldr	r0, [pc, #0]	@ (800e344 <_localeconv_r+0x4>)
 800e342:	4770      	bx	lr
 800e344:	20000184 	.word	0x20000184

0800e348 <_close_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	2300      	movs	r3, #0
 800e34c:	4d05      	ldr	r5, [pc, #20]	@ (800e364 <_close_r+0x1c>)
 800e34e:	4604      	mov	r4, r0
 800e350:	4608      	mov	r0, r1
 800e352:	602b      	str	r3, [r5, #0]
 800e354:	f7f3 ff57 	bl	8002206 <_close>
 800e358:	1c43      	adds	r3, r0, #1
 800e35a:	d102      	bne.n	800e362 <_close_r+0x1a>
 800e35c:	682b      	ldr	r3, [r5, #0]
 800e35e:	b103      	cbz	r3, 800e362 <_close_r+0x1a>
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	bd38      	pop	{r3, r4, r5, pc}
 800e364:	20001344 	.word	0x20001344

0800e368 <_lseek_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	4604      	mov	r4, r0
 800e36c:	4608      	mov	r0, r1
 800e36e:	4611      	mov	r1, r2
 800e370:	2200      	movs	r2, #0
 800e372:	4d05      	ldr	r5, [pc, #20]	@ (800e388 <_lseek_r+0x20>)
 800e374:	602a      	str	r2, [r5, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	f7f3 ff69 	bl	800224e <_lseek>
 800e37c:	1c43      	adds	r3, r0, #1
 800e37e:	d102      	bne.n	800e386 <_lseek_r+0x1e>
 800e380:	682b      	ldr	r3, [r5, #0]
 800e382:	b103      	cbz	r3, 800e386 <_lseek_r+0x1e>
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	bd38      	pop	{r3, r4, r5, pc}
 800e388:	20001344 	.word	0x20001344

0800e38c <_read_r>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	4604      	mov	r4, r0
 800e390:	4608      	mov	r0, r1
 800e392:	4611      	mov	r1, r2
 800e394:	2200      	movs	r2, #0
 800e396:	4d05      	ldr	r5, [pc, #20]	@ (800e3ac <_read_r+0x20>)
 800e398:	602a      	str	r2, [r5, #0]
 800e39a:	461a      	mov	r2, r3
 800e39c:	f7f3 ff16 	bl	80021cc <_read>
 800e3a0:	1c43      	adds	r3, r0, #1
 800e3a2:	d102      	bne.n	800e3aa <_read_r+0x1e>
 800e3a4:	682b      	ldr	r3, [r5, #0]
 800e3a6:	b103      	cbz	r3, 800e3aa <_read_r+0x1e>
 800e3a8:	6023      	str	r3, [r4, #0]
 800e3aa:	bd38      	pop	{r3, r4, r5, pc}
 800e3ac:	20001344 	.word	0x20001344

0800e3b0 <_sbrk_r>:
 800e3b0:	b538      	push	{r3, r4, r5, lr}
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	4d05      	ldr	r5, [pc, #20]	@ (800e3cc <_sbrk_r+0x1c>)
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	4608      	mov	r0, r1
 800e3ba:	602b      	str	r3, [r5, #0]
 800e3bc:	f7f3 ff54 	bl	8002268 <_sbrk>
 800e3c0:	1c43      	adds	r3, r0, #1
 800e3c2:	d102      	bne.n	800e3ca <_sbrk_r+0x1a>
 800e3c4:	682b      	ldr	r3, [r5, #0]
 800e3c6:	b103      	cbz	r3, 800e3ca <_sbrk_r+0x1a>
 800e3c8:	6023      	str	r3, [r4, #0]
 800e3ca:	bd38      	pop	{r3, r4, r5, pc}
 800e3cc:	20001344 	.word	0x20001344

0800e3d0 <_write_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	2200      	movs	r2, #0
 800e3da:	4d05      	ldr	r5, [pc, #20]	@ (800e3f0 <_write_r+0x20>)
 800e3dc:	602a      	str	r2, [r5, #0]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	f7f3 fc52 	bl	8001c88 <_write>
 800e3e4:	1c43      	adds	r3, r0, #1
 800e3e6:	d102      	bne.n	800e3ee <_write_r+0x1e>
 800e3e8:	682b      	ldr	r3, [r5, #0]
 800e3ea:	b103      	cbz	r3, 800e3ee <_write_r+0x1e>
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	bd38      	pop	{r3, r4, r5, pc}
 800e3f0:	20001344 	.word	0x20001344

0800e3f4 <__errno>:
 800e3f4:	4b01      	ldr	r3, [pc, #4]	@ (800e3fc <__errno+0x8>)
 800e3f6:	6818      	ldr	r0, [r3, #0]
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	20000200 	.word	0x20000200

0800e400 <__libc_init_array>:
 800e400:	b570      	push	{r4, r5, r6, lr}
 800e402:	2600      	movs	r6, #0
 800e404:	4d0c      	ldr	r5, [pc, #48]	@ (800e438 <__libc_init_array+0x38>)
 800e406:	4c0d      	ldr	r4, [pc, #52]	@ (800e43c <__libc_init_array+0x3c>)
 800e408:	1b64      	subs	r4, r4, r5
 800e40a:	10a4      	asrs	r4, r4, #2
 800e40c:	42a6      	cmp	r6, r4
 800e40e:	d109      	bne.n	800e424 <__libc_init_array+0x24>
 800e410:	f002 fb5e 	bl	8010ad0 <_init>
 800e414:	2600      	movs	r6, #0
 800e416:	4d0a      	ldr	r5, [pc, #40]	@ (800e440 <__libc_init_array+0x40>)
 800e418:	4c0a      	ldr	r4, [pc, #40]	@ (800e444 <__libc_init_array+0x44>)
 800e41a:	1b64      	subs	r4, r4, r5
 800e41c:	10a4      	asrs	r4, r4, #2
 800e41e:	42a6      	cmp	r6, r4
 800e420:	d105      	bne.n	800e42e <__libc_init_array+0x2e>
 800e422:	bd70      	pop	{r4, r5, r6, pc}
 800e424:	f855 3b04 	ldr.w	r3, [r5], #4
 800e428:	4798      	blx	r3
 800e42a:	3601      	adds	r6, #1
 800e42c:	e7ee      	b.n	800e40c <__libc_init_array+0xc>
 800e42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e432:	4798      	blx	r3
 800e434:	3601      	adds	r6, #1
 800e436:	e7f2      	b.n	800e41e <__libc_init_array+0x1e>
 800e438:	08011668 	.word	0x08011668
 800e43c:	08011668 	.word	0x08011668
 800e440:	08011668 	.word	0x08011668
 800e444:	0801166c 	.word	0x0801166c

0800e448 <__retarget_lock_init_recursive>:
 800e448:	4770      	bx	lr

0800e44a <__retarget_lock_acquire_recursive>:
 800e44a:	4770      	bx	lr

0800e44c <__retarget_lock_release_recursive>:
 800e44c:	4770      	bx	lr

0800e44e <strcpy>:
 800e44e:	4603      	mov	r3, r0
 800e450:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e454:	f803 2b01 	strb.w	r2, [r3], #1
 800e458:	2a00      	cmp	r2, #0
 800e45a:	d1f9      	bne.n	800e450 <strcpy+0x2>
 800e45c:	4770      	bx	lr

0800e45e <memchr>:
 800e45e:	4603      	mov	r3, r0
 800e460:	b510      	push	{r4, lr}
 800e462:	b2c9      	uxtb	r1, r1
 800e464:	4402      	add	r2, r0
 800e466:	4293      	cmp	r3, r2
 800e468:	4618      	mov	r0, r3
 800e46a:	d101      	bne.n	800e470 <memchr+0x12>
 800e46c:	2000      	movs	r0, #0
 800e46e:	e003      	b.n	800e478 <memchr+0x1a>
 800e470:	7804      	ldrb	r4, [r0, #0]
 800e472:	3301      	adds	r3, #1
 800e474:	428c      	cmp	r4, r1
 800e476:	d1f6      	bne.n	800e466 <memchr+0x8>
 800e478:	bd10      	pop	{r4, pc}

0800e47a <memcpy>:
 800e47a:	440a      	add	r2, r1
 800e47c:	4291      	cmp	r1, r2
 800e47e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e482:	d100      	bne.n	800e486 <memcpy+0xc>
 800e484:	4770      	bx	lr
 800e486:	b510      	push	{r4, lr}
 800e488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e48c:	4291      	cmp	r1, r2
 800e48e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e492:	d1f9      	bne.n	800e488 <memcpy+0xe>
 800e494:	bd10      	pop	{r4, pc}
	...

0800e498 <nan>:
 800e498:	2000      	movs	r0, #0
 800e49a:	4901      	ldr	r1, [pc, #4]	@ (800e4a0 <nan+0x8>)
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	7ff80000 	.word	0x7ff80000

0800e4a4 <nanf>:
 800e4a4:	4800      	ldr	r0, [pc, #0]	@ (800e4a8 <nanf+0x4>)
 800e4a6:	4770      	bx	lr
 800e4a8:	7fc00000 	.word	0x7fc00000

0800e4ac <abort>:
 800e4ac:	2006      	movs	r0, #6
 800e4ae:	b508      	push	{r3, lr}
 800e4b0:	f002 fa86 	bl	80109c0 <raise>
 800e4b4:	2001      	movs	r0, #1
 800e4b6:	f7f3 fe7e 	bl	80021b6 <_exit>

0800e4ba <quorem>:
 800e4ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4be:	6903      	ldr	r3, [r0, #16]
 800e4c0:	690c      	ldr	r4, [r1, #16]
 800e4c2:	4607      	mov	r7, r0
 800e4c4:	42a3      	cmp	r3, r4
 800e4c6:	db7e      	blt.n	800e5c6 <quorem+0x10c>
 800e4c8:	3c01      	subs	r4, #1
 800e4ca:	00a3      	lsls	r3, r4, #2
 800e4cc:	f100 0514 	add.w	r5, r0, #20
 800e4d0:	f101 0814 	add.w	r8, r1, #20
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4da:	9301      	str	r3, [sp, #4]
 800e4dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e4e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4f0:	d32e      	bcc.n	800e550 <quorem+0x96>
 800e4f2:	f04f 0a00 	mov.w	sl, #0
 800e4f6:	46c4      	mov	ip, r8
 800e4f8:	46ae      	mov	lr, r5
 800e4fa:	46d3      	mov	fp, sl
 800e4fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e500:	b298      	uxth	r0, r3
 800e502:	fb06 a000 	mla	r0, r6, r0, sl
 800e506:	0c1b      	lsrs	r3, r3, #16
 800e508:	0c02      	lsrs	r2, r0, #16
 800e50a:	fb06 2303 	mla	r3, r6, r3, r2
 800e50e:	f8de 2000 	ldr.w	r2, [lr]
 800e512:	b280      	uxth	r0, r0
 800e514:	b292      	uxth	r2, r2
 800e516:	1a12      	subs	r2, r2, r0
 800e518:	445a      	add	r2, fp
 800e51a:	f8de 0000 	ldr.w	r0, [lr]
 800e51e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e522:	b29b      	uxth	r3, r3
 800e524:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e528:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e52c:	b292      	uxth	r2, r2
 800e52e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e532:	45e1      	cmp	r9, ip
 800e534:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e538:	f84e 2b04 	str.w	r2, [lr], #4
 800e53c:	d2de      	bcs.n	800e4fc <quorem+0x42>
 800e53e:	9b00      	ldr	r3, [sp, #0]
 800e540:	58eb      	ldr	r3, [r5, r3]
 800e542:	b92b      	cbnz	r3, 800e550 <quorem+0x96>
 800e544:	9b01      	ldr	r3, [sp, #4]
 800e546:	3b04      	subs	r3, #4
 800e548:	429d      	cmp	r5, r3
 800e54a:	461a      	mov	r2, r3
 800e54c:	d32f      	bcc.n	800e5ae <quorem+0xf4>
 800e54e:	613c      	str	r4, [r7, #16]
 800e550:	4638      	mov	r0, r7
 800e552:	f001 fc61 	bl	800fe18 <__mcmp>
 800e556:	2800      	cmp	r0, #0
 800e558:	db25      	blt.n	800e5a6 <quorem+0xec>
 800e55a:	4629      	mov	r1, r5
 800e55c:	2000      	movs	r0, #0
 800e55e:	f858 2b04 	ldr.w	r2, [r8], #4
 800e562:	f8d1 c000 	ldr.w	ip, [r1]
 800e566:	fa1f fe82 	uxth.w	lr, r2
 800e56a:	fa1f f38c 	uxth.w	r3, ip
 800e56e:	eba3 030e 	sub.w	r3, r3, lr
 800e572:	4403      	add	r3, r0
 800e574:	0c12      	lsrs	r2, r2, #16
 800e576:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e57a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e57e:	b29b      	uxth	r3, r3
 800e580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e584:	45c1      	cmp	r9, r8
 800e586:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e58a:	f841 3b04 	str.w	r3, [r1], #4
 800e58e:	d2e6      	bcs.n	800e55e <quorem+0xa4>
 800e590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e594:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e598:	b922      	cbnz	r2, 800e5a4 <quorem+0xea>
 800e59a:	3b04      	subs	r3, #4
 800e59c:	429d      	cmp	r5, r3
 800e59e:	461a      	mov	r2, r3
 800e5a0:	d30b      	bcc.n	800e5ba <quorem+0x100>
 800e5a2:	613c      	str	r4, [r7, #16]
 800e5a4:	3601      	adds	r6, #1
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	b003      	add	sp, #12
 800e5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ae:	6812      	ldr	r2, [r2, #0]
 800e5b0:	3b04      	subs	r3, #4
 800e5b2:	2a00      	cmp	r2, #0
 800e5b4:	d1cb      	bne.n	800e54e <quorem+0x94>
 800e5b6:	3c01      	subs	r4, #1
 800e5b8:	e7c6      	b.n	800e548 <quorem+0x8e>
 800e5ba:	6812      	ldr	r2, [r2, #0]
 800e5bc:	3b04      	subs	r3, #4
 800e5be:	2a00      	cmp	r2, #0
 800e5c0:	d1ef      	bne.n	800e5a2 <quorem+0xe8>
 800e5c2:	3c01      	subs	r4, #1
 800e5c4:	e7ea      	b.n	800e59c <quorem+0xe2>
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	e7ee      	b.n	800e5a8 <quorem+0xee>
 800e5ca:	0000      	movs	r0, r0
 800e5cc:	0000      	movs	r0, r0
	...

0800e5d0 <_dtoa_r>:
 800e5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d4:	4614      	mov	r4, r2
 800e5d6:	461d      	mov	r5, r3
 800e5d8:	69c7      	ldr	r7, [r0, #28]
 800e5da:	b097      	sub	sp, #92	@ 0x5c
 800e5dc:	4681      	mov	r9, r0
 800e5de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e5e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800e5e4:	b97f      	cbnz	r7, 800e606 <_dtoa_r+0x36>
 800e5e6:	2010      	movs	r0, #16
 800e5e8:	f7fd fe34 	bl	800c254 <malloc>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	f8c9 001c 	str.w	r0, [r9, #28]
 800e5f2:	b920      	cbnz	r0, 800e5fe <_dtoa_r+0x2e>
 800e5f4:	21ef      	movs	r1, #239	@ 0xef
 800e5f6:	4bac      	ldr	r3, [pc, #688]	@ (800e8a8 <_dtoa_r+0x2d8>)
 800e5f8:	48ac      	ldr	r0, [pc, #688]	@ (800e8ac <_dtoa_r+0x2dc>)
 800e5fa:	f7fd fe05 	bl	800c208 <__assert_func>
 800e5fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e602:	6007      	str	r7, [r0, #0]
 800e604:	60c7      	str	r7, [r0, #12]
 800e606:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e60a:	6819      	ldr	r1, [r3, #0]
 800e60c:	b159      	cbz	r1, 800e626 <_dtoa_r+0x56>
 800e60e:	685a      	ldr	r2, [r3, #4]
 800e610:	2301      	movs	r3, #1
 800e612:	4093      	lsls	r3, r2
 800e614:	604a      	str	r2, [r1, #4]
 800e616:	608b      	str	r3, [r1, #8]
 800e618:	4648      	mov	r0, r9
 800e61a:	f001 f981 	bl	800f920 <_Bfree>
 800e61e:	2200      	movs	r2, #0
 800e620:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e624:	601a      	str	r2, [r3, #0]
 800e626:	1e2b      	subs	r3, r5, #0
 800e628:	bfaf      	iteee	ge
 800e62a:	2300      	movge	r3, #0
 800e62c:	2201      	movlt	r2, #1
 800e62e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e632:	9307      	strlt	r3, [sp, #28]
 800e634:	bfa8      	it	ge
 800e636:	6033      	strge	r3, [r6, #0]
 800e638:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e63c:	4b9c      	ldr	r3, [pc, #624]	@ (800e8b0 <_dtoa_r+0x2e0>)
 800e63e:	bfb8      	it	lt
 800e640:	6032      	strlt	r2, [r6, #0]
 800e642:	ea33 0308 	bics.w	r3, r3, r8
 800e646:	d112      	bne.n	800e66e <_dtoa_r+0x9e>
 800e648:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e64c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e64e:	6013      	str	r3, [r2, #0]
 800e650:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e654:	4323      	orrs	r3, r4
 800e656:	f000 855e 	beq.w	800f116 <_dtoa_r+0xb46>
 800e65a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e65c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e8b4 <_dtoa_r+0x2e4>
 800e660:	2b00      	cmp	r3, #0
 800e662:	f000 8560 	beq.w	800f126 <_dtoa_r+0xb56>
 800e666:	f10a 0303 	add.w	r3, sl, #3
 800e66a:	f000 bd5a 	b.w	800f122 <_dtoa_r+0xb52>
 800e66e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e672:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e67a:	2200      	movs	r2, #0
 800e67c:	2300      	movs	r3, #0
 800e67e:	f7f2 f99d 	bl	80009bc <__aeabi_dcmpeq>
 800e682:	4607      	mov	r7, r0
 800e684:	b158      	cbz	r0, 800e69e <_dtoa_r+0xce>
 800e686:	2301      	movs	r3, #1
 800e688:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e68a:	6013      	str	r3, [r2, #0]
 800e68c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e68e:	b113      	cbz	r3, 800e696 <_dtoa_r+0xc6>
 800e690:	4b89      	ldr	r3, [pc, #548]	@ (800e8b8 <_dtoa_r+0x2e8>)
 800e692:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e694:	6013      	str	r3, [r2, #0]
 800e696:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800e8bc <_dtoa_r+0x2ec>
 800e69a:	f000 bd44 	b.w	800f126 <_dtoa_r+0xb56>
 800e69e:	ab14      	add	r3, sp, #80	@ 0x50
 800e6a0:	9301      	str	r3, [sp, #4]
 800e6a2:	ab15      	add	r3, sp, #84	@ 0x54
 800e6a4:	9300      	str	r3, [sp, #0]
 800e6a6:	4648      	mov	r0, r9
 800e6a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e6ac:	f001 fccc 	bl	8010048 <__d2b>
 800e6b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800e6b4:	9003      	str	r0, [sp, #12]
 800e6b6:	2e00      	cmp	r6, #0
 800e6b8:	d078      	beq.n	800e7ac <_dtoa_r+0x1dc>
 800e6ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e6c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e6cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e6d0:	9712      	str	r7, [sp, #72]	@ 0x48
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	4b7a      	ldr	r3, [pc, #488]	@ (800e8c0 <_dtoa_r+0x2f0>)
 800e6d8:	f7f1 fd50 	bl	800017c <__aeabi_dsub>
 800e6dc:	a36c      	add	r3, pc, #432	@ (adr r3, 800e890 <_dtoa_r+0x2c0>)
 800e6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e2:	f7f1 ff03 	bl	80004ec <__aeabi_dmul>
 800e6e6:	a36c      	add	r3, pc, #432	@ (adr r3, 800e898 <_dtoa_r+0x2c8>)
 800e6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ec:	f7f1 fd48 	bl	8000180 <__adddf3>
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	460d      	mov	r5, r1
 800e6f6:	f7f1 fe8f 	bl	8000418 <__aeabi_i2d>
 800e6fa:	a369      	add	r3, pc, #420	@ (adr r3, 800e8a0 <_dtoa_r+0x2d0>)
 800e6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e700:	f7f1 fef4 	bl	80004ec <__aeabi_dmul>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	4620      	mov	r0, r4
 800e70a:	4629      	mov	r1, r5
 800e70c:	f7f1 fd38 	bl	8000180 <__adddf3>
 800e710:	4604      	mov	r4, r0
 800e712:	460d      	mov	r5, r1
 800e714:	f7f2 f99a 	bl	8000a4c <__aeabi_d2iz>
 800e718:	2200      	movs	r2, #0
 800e71a:	4607      	mov	r7, r0
 800e71c:	2300      	movs	r3, #0
 800e71e:	4620      	mov	r0, r4
 800e720:	4629      	mov	r1, r5
 800e722:	f7f2 f955 	bl	80009d0 <__aeabi_dcmplt>
 800e726:	b140      	cbz	r0, 800e73a <_dtoa_r+0x16a>
 800e728:	4638      	mov	r0, r7
 800e72a:	f7f1 fe75 	bl	8000418 <__aeabi_i2d>
 800e72e:	4622      	mov	r2, r4
 800e730:	462b      	mov	r3, r5
 800e732:	f7f2 f943 	bl	80009bc <__aeabi_dcmpeq>
 800e736:	b900      	cbnz	r0, 800e73a <_dtoa_r+0x16a>
 800e738:	3f01      	subs	r7, #1
 800e73a:	2f16      	cmp	r7, #22
 800e73c:	d854      	bhi.n	800e7e8 <_dtoa_r+0x218>
 800e73e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e742:	4b60      	ldr	r3, [pc, #384]	@ (800e8c4 <_dtoa_r+0x2f4>)
 800e744:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	f7f2 f940 	bl	80009d0 <__aeabi_dcmplt>
 800e750:	2800      	cmp	r0, #0
 800e752:	d04b      	beq.n	800e7ec <_dtoa_r+0x21c>
 800e754:	2300      	movs	r3, #0
 800e756:	3f01      	subs	r7, #1
 800e758:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e75a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e75c:	1b9b      	subs	r3, r3, r6
 800e75e:	1e5a      	subs	r2, r3, #1
 800e760:	bf49      	itett	mi
 800e762:	f1c3 0301 	rsbmi	r3, r3, #1
 800e766:	2300      	movpl	r3, #0
 800e768:	9304      	strmi	r3, [sp, #16]
 800e76a:	2300      	movmi	r3, #0
 800e76c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e76e:	bf54      	ite	pl
 800e770:	9304      	strpl	r3, [sp, #16]
 800e772:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800e774:	2f00      	cmp	r7, #0
 800e776:	db3b      	blt.n	800e7f0 <_dtoa_r+0x220>
 800e778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e77a:	970e      	str	r7, [sp, #56]	@ 0x38
 800e77c:	443b      	add	r3, r7
 800e77e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e780:	2300      	movs	r3, #0
 800e782:	930a      	str	r3, [sp, #40]	@ 0x28
 800e784:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e786:	2b09      	cmp	r3, #9
 800e788:	d865      	bhi.n	800e856 <_dtoa_r+0x286>
 800e78a:	2b05      	cmp	r3, #5
 800e78c:	bfc4      	itt	gt
 800e78e:	3b04      	subgt	r3, #4
 800e790:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800e792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e794:	bfc8      	it	gt
 800e796:	2400      	movgt	r4, #0
 800e798:	f1a3 0302 	sub.w	r3, r3, #2
 800e79c:	bfd8      	it	le
 800e79e:	2401      	movle	r4, #1
 800e7a0:	2b03      	cmp	r3, #3
 800e7a2:	d864      	bhi.n	800e86e <_dtoa_r+0x29e>
 800e7a4:	e8df f003 	tbb	[pc, r3]
 800e7a8:	2c385553 	.word	0x2c385553
 800e7ac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e7b0:	441e      	add	r6, r3
 800e7b2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e7b6:	2b20      	cmp	r3, #32
 800e7b8:	bfc1      	itttt	gt
 800e7ba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e7be:	fa08 f803 	lslgt.w	r8, r8, r3
 800e7c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e7c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e7ca:	bfd6      	itet	le
 800e7cc:	f1c3 0320 	rsble	r3, r3, #32
 800e7d0:	ea48 0003 	orrgt.w	r0, r8, r3
 800e7d4:	fa04 f003 	lslle.w	r0, r4, r3
 800e7d8:	f7f1 fe0e 	bl	80003f8 <__aeabi_ui2d>
 800e7dc:	2201      	movs	r2, #1
 800e7de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e7e2:	3e01      	subs	r6, #1
 800e7e4:	9212      	str	r2, [sp, #72]	@ 0x48
 800e7e6:	e774      	b.n	800e6d2 <_dtoa_r+0x102>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	e7b5      	b.n	800e758 <_dtoa_r+0x188>
 800e7ec:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e7ee:	e7b4      	b.n	800e75a <_dtoa_r+0x18a>
 800e7f0:	9b04      	ldr	r3, [sp, #16]
 800e7f2:	1bdb      	subs	r3, r3, r7
 800e7f4:	9304      	str	r3, [sp, #16]
 800e7f6:	427b      	negs	r3, r7
 800e7f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800e7fe:	e7c1      	b.n	800e784 <_dtoa_r+0x1b4>
 800e800:	2301      	movs	r3, #1
 800e802:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e804:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e806:	eb07 0b03 	add.w	fp, r7, r3
 800e80a:	f10b 0301 	add.w	r3, fp, #1
 800e80e:	2b01      	cmp	r3, #1
 800e810:	9308      	str	r3, [sp, #32]
 800e812:	bfb8      	it	lt
 800e814:	2301      	movlt	r3, #1
 800e816:	e006      	b.n	800e826 <_dtoa_r+0x256>
 800e818:	2301      	movs	r3, #1
 800e81a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e81c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e81e:	2b00      	cmp	r3, #0
 800e820:	dd28      	ble.n	800e874 <_dtoa_r+0x2a4>
 800e822:	469b      	mov	fp, r3
 800e824:	9308      	str	r3, [sp, #32]
 800e826:	2100      	movs	r1, #0
 800e828:	2204      	movs	r2, #4
 800e82a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e82e:	f102 0514 	add.w	r5, r2, #20
 800e832:	429d      	cmp	r5, r3
 800e834:	d926      	bls.n	800e884 <_dtoa_r+0x2b4>
 800e836:	6041      	str	r1, [r0, #4]
 800e838:	4648      	mov	r0, r9
 800e83a:	f001 f831 	bl	800f8a0 <_Balloc>
 800e83e:	4682      	mov	sl, r0
 800e840:	2800      	cmp	r0, #0
 800e842:	d143      	bne.n	800e8cc <_dtoa_r+0x2fc>
 800e844:	4602      	mov	r2, r0
 800e846:	f240 11af 	movw	r1, #431	@ 0x1af
 800e84a:	4b1f      	ldr	r3, [pc, #124]	@ (800e8c8 <_dtoa_r+0x2f8>)
 800e84c:	e6d4      	b.n	800e5f8 <_dtoa_r+0x28>
 800e84e:	2300      	movs	r3, #0
 800e850:	e7e3      	b.n	800e81a <_dtoa_r+0x24a>
 800e852:	2300      	movs	r3, #0
 800e854:	e7d5      	b.n	800e802 <_dtoa_r+0x232>
 800e856:	2401      	movs	r4, #1
 800e858:	2300      	movs	r3, #0
 800e85a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e85c:	9320      	str	r3, [sp, #128]	@ 0x80
 800e85e:	f04f 3bff 	mov.w	fp, #4294967295
 800e862:	2200      	movs	r2, #0
 800e864:	2312      	movs	r3, #18
 800e866:	f8cd b020 	str.w	fp, [sp, #32]
 800e86a:	9221      	str	r2, [sp, #132]	@ 0x84
 800e86c:	e7db      	b.n	800e826 <_dtoa_r+0x256>
 800e86e:	2301      	movs	r3, #1
 800e870:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e872:	e7f4      	b.n	800e85e <_dtoa_r+0x28e>
 800e874:	f04f 0b01 	mov.w	fp, #1
 800e878:	465b      	mov	r3, fp
 800e87a:	f8cd b020 	str.w	fp, [sp, #32]
 800e87e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800e882:	e7d0      	b.n	800e826 <_dtoa_r+0x256>
 800e884:	3101      	adds	r1, #1
 800e886:	0052      	lsls	r2, r2, #1
 800e888:	e7d1      	b.n	800e82e <_dtoa_r+0x25e>
 800e88a:	bf00      	nop
 800e88c:	f3af 8000 	nop.w
 800e890:	636f4361 	.word	0x636f4361
 800e894:	3fd287a7 	.word	0x3fd287a7
 800e898:	8b60c8b3 	.word	0x8b60c8b3
 800e89c:	3fc68a28 	.word	0x3fc68a28
 800e8a0:	509f79fb 	.word	0x509f79fb
 800e8a4:	3fd34413 	.word	0x3fd34413
 800e8a8:	080112c5 	.word	0x080112c5
 800e8ac:	080112dc 	.word	0x080112dc
 800e8b0:	7ff00000 	.word	0x7ff00000
 800e8b4:	080112c1 	.word	0x080112c1
 800e8b8:	08011288 	.word	0x08011288
 800e8bc:	08011287 	.word	0x08011287
 800e8c0:	3ff80000 	.word	0x3ff80000
 800e8c4:	08011598 	.word	0x08011598
 800e8c8:	08011334 	.word	0x08011334
 800e8cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e8d0:	6018      	str	r0, [r3, #0]
 800e8d2:	9b08      	ldr	r3, [sp, #32]
 800e8d4:	2b0e      	cmp	r3, #14
 800e8d6:	f200 80a1 	bhi.w	800ea1c <_dtoa_r+0x44c>
 800e8da:	2c00      	cmp	r4, #0
 800e8dc:	f000 809e 	beq.w	800ea1c <_dtoa_r+0x44c>
 800e8e0:	2f00      	cmp	r7, #0
 800e8e2:	dd33      	ble.n	800e94c <_dtoa_r+0x37c>
 800e8e4:	4b9c      	ldr	r3, [pc, #624]	@ (800eb58 <_dtoa_r+0x588>)
 800e8e6:	f007 020f 	and.w	r2, r7, #15
 800e8ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8ee:	05f8      	lsls	r0, r7, #23
 800e8f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e8f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800e8f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e8fc:	d516      	bpl.n	800e92c <_dtoa_r+0x35c>
 800e8fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e902:	4b96      	ldr	r3, [pc, #600]	@ (800eb5c <_dtoa_r+0x58c>)
 800e904:	2603      	movs	r6, #3
 800e906:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e90a:	f7f1 ff19 	bl	8000740 <__aeabi_ddiv>
 800e90e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e912:	f004 040f 	and.w	r4, r4, #15
 800e916:	4d91      	ldr	r5, [pc, #580]	@ (800eb5c <_dtoa_r+0x58c>)
 800e918:	b954      	cbnz	r4, 800e930 <_dtoa_r+0x360>
 800e91a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e91e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e922:	f7f1 ff0d 	bl	8000740 <__aeabi_ddiv>
 800e926:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e92a:	e028      	b.n	800e97e <_dtoa_r+0x3ae>
 800e92c:	2602      	movs	r6, #2
 800e92e:	e7f2      	b.n	800e916 <_dtoa_r+0x346>
 800e930:	07e1      	lsls	r1, r4, #31
 800e932:	d508      	bpl.n	800e946 <_dtoa_r+0x376>
 800e934:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e938:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e93c:	f7f1 fdd6 	bl	80004ec <__aeabi_dmul>
 800e940:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e944:	3601      	adds	r6, #1
 800e946:	1064      	asrs	r4, r4, #1
 800e948:	3508      	adds	r5, #8
 800e94a:	e7e5      	b.n	800e918 <_dtoa_r+0x348>
 800e94c:	f000 80af 	beq.w	800eaae <_dtoa_r+0x4de>
 800e950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e954:	427c      	negs	r4, r7
 800e956:	4b80      	ldr	r3, [pc, #512]	@ (800eb58 <_dtoa_r+0x588>)
 800e958:	f004 020f 	and.w	r2, r4, #15
 800e95c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e964:	f7f1 fdc2 	bl	80004ec <__aeabi_dmul>
 800e968:	2602      	movs	r6, #2
 800e96a:	2300      	movs	r3, #0
 800e96c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e970:	4d7a      	ldr	r5, [pc, #488]	@ (800eb5c <_dtoa_r+0x58c>)
 800e972:	1124      	asrs	r4, r4, #4
 800e974:	2c00      	cmp	r4, #0
 800e976:	f040 808f 	bne.w	800ea98 <_dtoa_r+0x4c8>
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1d3      	bne.n	800e926 <_dtoa_r+0x356>
 800e97e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800e982:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e984:	2b00      	cmp	r3, #0
 800e986:	f000 8094 	beq.w	800eab2 <_dtoa_r+0x4e2>
 800e98a:	2200      	movs	r2, #0
 800e98c:	4620      	mov	r0, r4
 800e98e:	4629      	mov	r1, r5
 800e990:	4b73      	ldr	r3, [pc, #460]	@ (800eb60 <_dtoa_r+0x590>)
 800e992:	f7f2 f81d 	bl	80009d0 <__aeabi_dcmplt>
 800e996:	2800      	cmp	r0, #0
 800e998:	f000 808b 	beq.w	800eab2 <_dtoa_r+0x4e2>
 800e99c:	9b08      	ldr	r3, [sp, #32]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f000 8087 	beq.w	800eab2 <_dtoa_r+0x4e2>
 800e9a4:	f1bb 0f00 	cmp.w	fp, #0
 800e9a8:	dd34      	ble.n	800ea14 <_dtoa_r+0x444>
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	4b6c      	ldr	r3, [pc, #432]	@ (800eb64 <_dtoa_r+0x594>)
 800e9b2:	f7f1 fd9b 	bl	80004ec <__aeabi_dmul>
 800e9b6:	465c      	mov	r4, fp
 800e9b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e9bc:	f107 38ff 	add.w	r8, r7, #4294967295
 800e9c0:	3601      	adds	r6, #1
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	f7f1 fd28 	bl	8000418 <__aeabi_i2d>
 800e9c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e9cc:	f7f1 fd8e 	bl	80004ec <__aeabi_dmul>
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	4b65      	ldr	r3, [pc, #404]	@ (800eb68 <_dtoa_r+0x598>)
 800e9d4:	f7f1 fbd4 	bl	8000180 <__adddf3>
 800e9d8:	4605      	mov	r5, r0
 800e9da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e9de:	2c00      	cmp	r4, #0
 800e9e0:	d16a      	bne.n	800eab8 <_dtoa_r+0x4e8>
 800e9e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	4b60      	ldr	r3, [pc, #384]	@ (800eb6c <_dtoa_r+0x59c>)
 800e9ea:	f7f1 fbc7 	bl	800017c <__aeabi_dsub>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e9f6:	462a      	mov	r2, r5
 800e9f8:	4633      	mov	r3, r6
 800e9fa:	f7f2 f807 	bl	8000a0c <__aeabi_dcmpgt>
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	f040 8298 	bne.w	800ef34 <_dtoa_r+0x964>
 800ea04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea08:	462a      	mov	r2, r5
 800ea0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ea0e:	f7f1 ffdf 	bl	80009d0 <__aeabi_dcmplt>
 800ea12:	bb38      	cbnz	r0, 800ea64 <_dtoa_r+0x494>
 800ea14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ea18:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ea1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f2c0 8157 	blt.w	800ecd2 <_dtoa_r+0x702>
 800ea24:	2f0e      	cmp	r7, #14
 800ea26:	f300 8154 	bgt.w	800ecd2 <_dtoa_r+0x702>
 800ea2a:	4b4b      	ldr	r3, [pc, #300]	@ (800eb58 <_dtoa_r+0x588>)
 800ea2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea30:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ea34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ea38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f280 80e5 	bge.w	800ec0a <_dtoa_r+0x63a>
 800ea40:	9b08      	ldr	r3, [sp, #32]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f300 80e1 	bgt.w	800ec0a <_dtoa_r+0x63a>
 800ea48:	d10c      	bne.n	800ea64 <_dtoa_r+0x494>
 800ea4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4b46      	ldr	r3, [pc, #280]	@ (800eb6c <_dtoa_r+0x59c>)
 800ea52:	f7f1 fd4b 	bl	80004ec <__aeabi_dmul>
 800ea56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea5a:	f7f1 ffcd 	bl	80009f8 <__aeabi_dcmpge>
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	f000 8266 	beq.w	800ef30 <_dtoa_r+0x960>
 800ea64:	2400      	movs	r4, #0
 800ea66:	4625      	mov	r5, r4
 800ea68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea6a:	4656      	mov	r6, sl
 800ea6c:	ea6f 0803 	mvn.w	r8, r3
 800ea70:	2700      	movs	r7, #0
 800ea72:	4621      	mov	r1, r4
 800ea74:	4648      	mov	r0, r9
 800ea76:	f000 ff53 	bl	800f920 <_Bfree>
 800ea7a:	2d00      	cmp	r5, #0
 800ea7c:	f000 80bd 	beq.w	800ebfa <_dtoa_r+0x62a>
 800ea80:	b12f      	cbz	r7, 800ea8e <_dtoa_r+0x4be>
 800ea82:	42af      	cmp	r7, r5
 800ea84:	d003      	beq.n	800ea8e <_dtoa_r+0x4be>
 800ea86:	4639      	mov	r1, r7
 800ea88:	4648      	mov	r0, r9
 800ea8a:	f000 ff49 	bl	800f920 <_Bfree>
 800ea8e:	4629      	mov	r1, r5
 800ea90:	4648      	mov	r0, r9
 800ea92:	f000 ff45 	bl	800f920 <_Bfree>
 800ea96:	e0b0      	b.n	800ebfa <_dtoa_r+0x62a>
 800ea98:	07e2      	lsls	r2, r4, #31
 800ea9a:	d505      	bpl.n	800eaa8 <_dtoa_r+0x4d8>
 800ea9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eaa0:	f7f1 fd24 	bl	80004ec <__aeabi_dmul>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	3601      	adds	r6, #1
 800eaa8:	1064      	asrs	r4, r4, #1
 800eaaa:	3508      	adds	r5, #8
 800eaac:	e762      	b.n	800e974 <_dtoa_r+0x3a4>
 800eaae:	2602      	movs	r6, #2
 800eab0:	e765      	b.n	800e97e <_dtoa_r+0x3ae>
 800eab2:	46b8      	mov	r8, r7
 800eab4:	9c08      	ldr	r4, [sp, #32]
 800eab6:	e784      	b.n	800e9c2 <_dtoa_r+0x3f2>
 800eab8:	4b27      	ldr	r3, [pc, #156]	@ (800eb58 <_dtoa_r+0x588>)
 800eaba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eabc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eac0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eac4:	4454      	add	r4, sl
 800eac6:	2900      	cmp	r1, #0
 800eac8:	d054      	beq.n	800eb74 <_dtoa_r+0x5a4>
 800eaca:	2000      	movs	r0, #0
 800eacc:	4928      	ldr	r1, [pc, #160]	@ (800eb70 <_dtoa_r+0x5a0>)
 800eace:	f7f1 fe37 	bl	8000740 <__aeabi_ddiv>
 800ead2:	4633      	mov	r3, r6
 800ead4:	462a      	mov	r2, r5
 800ead6:	f7f1 fb51 	bl	800017c <__aeabi_dsub>
 800eada:	4656      	mov	r6, sl
 800eadc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eae0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eae4:	f7f1 ffb2 	bl	8000a4c <__aeabi_d2iz>
 800eae8:	4605      	mov	r5, r0
 800eaea:	f7f1 fc95 	bl	8000418 <__aeabi_i2d>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaf6:	f7f1 fb41 	bl	800017c <__aeabi_dsub>
 800eafa:	4602      	mov	r2, r0
 800eafc:	460b      	mov	r3, r1
 800eafe:	3530      	adds	r5, #48	@ 0x30
 800eb00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb08:	f806 5b01 	strb.w	r5, [r6], #1
 800eb0c:	f7f1 ff60 	bl	80009d0 <__aeabi_dcmplt>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d172      	bne.n	800ebfa <_dtoa_r+0x62a>
 800eb14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb18:	2000      	movs	r0, #0
 800eb1a:	4911      	ldr	r1, [pc, #68]	@ (800eb60 <_dtoa_r+0x590>)
 800eb1c:	f7f1 fb2e 	bl	800017c <__aeabi_dsub>
 800eb20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb24:	f7f1 ff54 	bl	80009d0 <__aeabi_dcmplt>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	f040 80b4 	bne.w	800ec96 <_dtoa_r+0x6c6>
 800eb2e:	42a6      	cmp	r6, r4
 800eb30:	f43f af70 	beq.w	800ea14 <_dtoa_r+0x444>
 800eb34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb38:	2200      	movs	r2, #0
 800eb3a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb64 <_dtoa_r+0x594>)
 800eb3c:	f7f1 fcd6 	bl	80004ec <__aeabi_dmul>
 800eb40:	2200      	movs	r2, #0
 800eb42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb4a:	4b06      	ldr	r3, [pc, #24]	@ (800eb64 <_dtoa_r+0x594>)
 800eb4c:	f7f1 fcce 	bl	80004ec <__aeabi_dmul>
 800eb50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb54:	e7c4      	b.n	800eae0 <_dtoa_r+0x510>
 800eb56:	bf00      	nop
 800eb58:	08011598 	.word	0x08011598
 800eb5c:	08011570 	.word	0x08011570
 800eb60:	3ff00000 	.word	0x3ff00000
 800eb64:	40240000 	.word	0x40240000
 800eb68:	401c0000 	.word	0x401c0000
 800eb6c:	40140000 	.word	0x40140000
 800eb70:	3fe00000 	.word	0x3fe00000
 800eb74:	4631      	mov	r1, r6
 800eb76:	4628      	mov	r0, r5
 800eb78:	f7f1 fcb8 	bl	80004ec <__aeabi_dmul>
 800eb7c:	4656      	mov	r6, sl
 800eb7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb82:	9413      	str	r4, [sp, #76]	@ 0x4c
 800eb84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb88:	f7f1 ff60 	bl	8000a4c <__aeabi_d2iz>
 800eb8c:	4605      	mov	r5, r0
 800eb8e:	f7f1 fc43 	bl	8000418 <__aeabi_i2d>
 800eb92:	4602      	mov	r2, r0
 800eb94:	460b      	mov	r3, r1
 800eb96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb9a:	f7f1 faef 	bl	800017c <__aeabi_dsub>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	460b      	mov	r3, r1
 800eba2:	3530      	adds	r5, #48	@ 0x30
 800eba4:	f806 5b01 	strb.w	r5, [r6], #1
 800eba8:	42a6      	cmp	r6, r4
 800ebaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ebae:	f04f 0200 	mov.w	r2, #0
 800ebb2:	d124      	bne.n	800ebfe <_dtoa_r+0x62e>
 800ebb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ebb8:	4bae      	ldr	r3, [pc, #696]	@ (800ee74 <_dtoa_r+0x8a4>)
 800ebba:	f7f1 fae1 	bl	8000180 <__adddf3>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebc6:	f7f1 ff21 	bl	8000a0c <__aeabi_dcmpgt>
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d163      	bne.n	800ec96 <_dtoa_r+0x6c6>
 800ebce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	49a7      	ldr	r1, [pc, #668]	@ (800ee74 <_dtoa_r+0x8a4>)
 800ebd6:	f7f1 fad1 	bl	800017c <__aeabi_dsub>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	460b      	mov	r3, r1
 800ebde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebe2:	f7f1 fef5 	bl	80009d0 <__aeabi_dcmplt>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	f43f af14 	beq.w	800ea14 <_dtoa_r+0x444>
 800ebec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ebee:	1e73      	subs	r3, r6, #1
 800ebf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ebf2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ebf6:	2b30      	cmp	r3, #48	@ 0x30
 800ebf8:	d0f8      	beq.n	800ebec <_dtoa_r+0x61c>
 800ebfa:	4647      	mov	r7, r8
 800ebfc:	e03b      	b.n	800ec76 <_dtoa_r+0x6a6>
 800ebfe:	4b9e      	ldr	r3, [pc, #632]	@ (800ee78 <_dtoa_r+0x8a8>)
 800ec00:	f7f1 fc74 	bl	80004ec <__aeabi_dmul>
 800ec04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec08:	e7bc      	b.n	800eb84 <_dtoa_r+0x5b4>
 800ec0a:	4656      	mov	r6, sl
 800ec0c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ec10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec14:	4620      	mov	r0, r4
 800ec16:	4629      	mov	r1, r5
 800ec18:	f7f1 fd92 	bl	8000740 <__aeabi_ddiv>
 800ec1c:	f7f1 ff16 	bl	8000a4c <__aeabi_d2iz>
 800ec20:	4680      	mov	r8, r0
 800ec22:	f7f1 fbf9 	bl	8000418 <__aeabi_i2d>
 800ec26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec2a:	f7f1 fc5f 	bl	80004ec <__aeabi_dmul>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	460b      	mov	r3, r1
 800ec32:	4620      	mov	r0, r4
 800ec34:	4629      	mov	r1, r5
 800ec36:	f7f1 faa1 	bl	800017c <__aeabi_dsub>
 800ec3a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ec3e:	9d08      	ldr	r5, [sp, #32]
 800ec40:	f806 4b01 	strb.w	r4, [r6], #1
 800ec44:	eba6 040a 	sub.w	r4, r6, sl
 800ec48:	42a5      	cmp	r5, r4
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	d133      	bne.n	800ecb8 <_dtoa_r+0x6e8>
 800ec50:	f7f1 fa96 	bl	8000180 <__adddf3>
 800ec54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec58:	4604      	mov	r4, r0
 800ec5a:	460d      	mov	r5, r1
 800ec5c:	f7f1 fed6 	bl	8000a0c <__aeabi_dcmpgt>
 800ec60:	b9c0      	cbnz	r0, 800ec94 <_dtoa_r+0x6c4>
 800ec62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec66:	4620      	mov	r0, r4
 800ec68:	4629      	mov	r1, r5
 800ec6a:	f7f1 fea7 	bl	80009bc <__aeabi_dcmpeq>
 800ec6e:	b110      	cbz	r0, 800ec76 <_dtoa_r+0x6a6>
 800ec70:	f018 0f01 	tst.w	r8, #1
 800ec74:	d10e      	bne.n	800ec94 <_dtoa_r+0x6c4>
 800ec76:	4648      	mov	r0, r9
 800ec78:	9903      	ldr	r1, [sp, #12]
 800ec7a:	f000 fe51 	bl	800f920 <_Bfree>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	7033      	strb	r3, [r6, #0]
 800ec82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ec84:	3701      	adds	r7, #1
 800ec86:	601f      	str	r7, [r3, #0]
 800ec88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f000 824b 	beq.w	800f126 <_dtoa_r+0xb56>
 800ec90:	601e      	str	r6, [r3, #0]
 800ec92:	e248      	b.n	800f126 <_dtoa_r+0xb56>
 800ec94:	46b8      	mov	r8, r7
 800ec96:	4633      	mov	r3, r6
 800ec98:	461e      	mov	r6, r3
 800ec9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec9e:	2a39      	cmp	r2, #57	@ 0x39
 800eca0:	d106      	bne.n	800ecb0 <_dtoa_r+0x6e0>
 800eca2:	459a      	cmp	sl, r3
 800eca4:	d1f8      	bne.n	800ec98 <_dtoa_r+0x6c8>
 800eca6:	2230      	movs	r2, #48	@ 0x30
 800eca8:	f108 0801 	add.w	r8, r8, #1
 800ecac:	f88a 2000 	strb.w	r2, [sl]
 800ecb0:	781a      	ldrb	r2, [r3, #0]
 800ecb2:	3201      	adds	r2, #1
 800ecb4:	701a      	strb	r2, [r3, #0]
 800ecb6:	e7a0      	b.n	800ebfa <_dtoa_r+0x62a>
 800ecb8:	2200      	movs	r2, #0
 800ecba:	4b6f      	ldr	r3, [pc, #444]	@ (800ee78 <_dtoa_r+0x8a8>)
 800ecbc:	f7f1 fc16 	bl	80004ec <__aeabi_dmul>
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	460d      	mov	r5, r1
 800ecc8:	f7f1 fe78 	bl	80009bc <__aeabi_dcmpeq>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d09f      	beq.n	800ec10 <_dtoa_r+0x640>
 800ecd0:	e7d1      	b.n	800ec76 <_dtoa_r+0x6a6>
 800ecd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ecd4:	2a00      	cmp	r2, #0
 800ecd6:	f000 80ea 	beq.w	800eeae <_dtoa_r+0x8de>
 800ecda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ecdc:	2a01      	cmp	r2, #1
 800ecde:	f300 80cd 	bgt.w	800ee7c <_dtoa_r+0x8ac>
 800ece2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ece4:	2a00      	cmp	r2, #0
 800ece6:	f000 80c1 	beq.w	800ee6c <_dtoa_r+0x89c>
 800ecea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ecee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ecf0:	9e04      	ldr	r6, [sp, #16]
 800ecf2:	9a04      	ldr	r2, [sp, #16]
 800ecf4:	2101      	movs	r1, #1
 800ecf6:	441a      	add	r2, r3
 800ecf8:	9204      	str	r2, [sp, #16]
 800ecfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecfc:	4648      	mov	r0, r9
 800ecfe:	441a      	add	r2, r3
 800ed00:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed02:	f000 ff0b 	bl	800fb1c <__i2b>
 800ed06:	4605      	mov	r5, r0
 800ed08:	b166      	cbz	r6, 800ed24 <_dtoa_r+0x754>
 800ed0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	dd09      	ble.n	800ed24 <_dtoa_r+0x754>
 800ed10:	42b3      	cmp	r3, r6
 800ed12:	bfa8      	it	ge
 800ed14:	4633      	movge	r3, r6
 800ed16:	9a04      	ldr	r2, [sp, #16]
 800ed18:	1af6      	subs	r6, r6, r3
 800ed1a:	1ad2      	subs	r2, r2, r3
 800ed1c:	9204      	str	r2, [sp, #16]
 800ed1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed26:	b30b      	cbz	r3, 800ed6c <_dtoa_r+0x79c>
 800ed28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f000 80c6 	beq.w	800eebc <_dtoa_r+0x8ec>
 800ed30:	2c00      	cmp	r4, #0
 800ed32:	f000 80c0 	beq.w	800eeb6 <_dtoa_r+0x8e6>
 800ed36:	4629      	mov	r1, r5
 800ed38:	4622      	mov	r2, r4
 800ed3a:	4648      	mov	r0, r9
 800ed3c:	f000 ffa6 	bl	800fc8c <__pow5mult>
 800ed40:	9a03      	ldr	r2, [sp, #12]
 800ed42:	4601      	mov	r1, r0
 800ed44:	4605      	mov	r5, r0
 800ed46:	4648      	mov	r0, r9
 800ed48:	f000 fefe 	bl	800fb48 <__multiply>
 800ed4c:	9903      	ldr	r1, [sp, #12]
 800ed4e:	4680      	mov	r8, r0
 800ed50:	4648      	mov	r0, r9
 800ed52:	f000 fde5 	bl	800f920 <_Bfree>
 800ed56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed58:	1b1b      	subs	r3, r3, r4
 800ed5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed5c:	f000 80b1 	beq.w	800eec2 <_dtoa_r+0x8f2>
 800ed60:	4641      	mov	r1, r8
 800ed62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed64:	4648      	mov	r0, r9
 800ed66:	f000 ff91 	bl	800fc8c <__pow5mult>
 800ed6a:	9003      	str	r0, [sp, #12]
 800ed6c:	2101      	movs	r1, #1
 800ed6e:	4648      	mov	r0, r9
 800ed70:	f000 fed4 	bl	800fb1c <__i2b>
 800ed74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed76:	4604      	mov	r4, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f000 81d8 	beq.w	800f12e <_dtoa_r+0xb5e>
 800ed7e:	461a      	mov	r2, r3
 800ed80:	4601      	mov	r1, r0
 800ed82:	4648      	mov	r0, r9
 800ed84:	f000 ff82 	bl	800fc8c <__pow5mult>
 800ed88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	f300 809f 	bgt.w	800eed0 <_dtoa_r+0x900>
 800ed92:	9b06      	ldr	r3, [sp, #24]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f040 8097 	bne.w	800eec8 <_dtoa_r+0x8f8>
 800ed9a:	9b07      	ldr	r3, [sp, #28]
 800ed9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f040 8093 	bne.w	800eecc <_dtoa_r+0x8fc>
 800eda6:	9b07      	ldr	r3, [sp, #28]
 800eda8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800edac:	0d1b      	lsrs	r3, r3, #20
 800edae:	051b      	lsls	r3, r3, #20
 800edb0:	b133      	cbz	r3, 800edc0 <_dtoa_r+0x7f0>
 800edb2:	9b04      	ldr	r3, [sp, #16]
 800edb4:	3301      	adds	r3, #1
 800edb6:	9304      	str	r3, [sp, #16]
 800edb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edba:	3301      	adds	r3, #1
 800edbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800edbe:	2301      	movs	r3, #1
 800edc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800edc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f000 81b8 	beq.w	800f13a <_dtoa_r+0xb6a>
 800edca:	6923      	ldr	r3, [r4, #16]
 800edcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edd0:	6918      	ldr	r0, [r3, #16]
 800edd2:	f000 fe57 	bl	800fa84 <__hi0bits>
 800edd6:	f1c0 0020 	rsb	r0, r0, #32
 800edda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eddc:	4418      	add	r0, r3
 800edde:	f010 001f 	ands.w	r0, r0, #31
 800ede2:	f000 8082 	beq.w	800eeea <_dtoa_r+0x91a>
 800ede6:	f1c0 0320 	rsb	r3, r0, #32
 800edea:	2b04      	cmp	r3, #4
 800edec:	dd73      	ble.n	800eed6 <_dtoa_r+0x906>
 800edee:	9b04      	ldr	r3, [sp, #16]
 800edf0:	f1c0 001c 	rsb	r0, r0, #28
 800edf4:	4403      	add	r3, r0
 800edf6:	9304      	str	r3, [sp, #16]
 800edf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edfa:	4406      	add	r6, r0
 800edfc:	4403      	add	r3, r0
 800edfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee00:	9b04      	ldr	r3, [sp, #16]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	dd05      	ble.n	800ee12 <_dtoa_r+0x842>
 800ee06:	461a      	mov	r2, r3
 800ee08:	4648      	mov	r0, r9
 800ee0a:	9903      	ldr	r1, [sp, #12]
 800ee0c:	f000 ff98 	bl	800fd40 <__lshift>
 800ee10:	9003      	str	r0, [sp, #12]
 800ee12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	dd05      	ble.n	800ee24 <_dtoa_r+0x854>
 800ee18:	4621      	mov	r1, r4
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	4648      	mov	r0, r9
 800ee1e:	f000 ff8f 	bl	800fd40 <__lshift>
 800ee22:	4604      	mov	r4, r0
 800ee24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d061      	beq.n	800eeee <_dtoa_r+0x91e>
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	9803      	ldr	r0, [sp, #12]
 800ee2e:	f000 fff3 	bl	800fe18 <__mcmp>
 800ee32:	2800      	cmp	r0, #0
 800ee34:	da5b      	bge.n	800eeee <_dtoa_r+0x91e>
 800ee36:	2300      	movs	r3, #0
 800ee38:	220a      	movs	r2, #10
 800ee3a:	4648      	mov	r0, r9
 800ee3c:	9903      	ldr	r1, [sp, #12]
 800ee3e:	f000 fd91 	bl	800f964 <__multadd>
 800ee42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee44:	f107 38ff 	add.w	r8, r7, #4294967295
 800ee48:	9003      	str	r0, [sp, #12]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	f000 8177 	beq.w	800f13e <_dtoa_r+0xb6e>
 800ee50:	4629      	mov	r1, r5
 800ee52:	2300      	movs	r3, #0
 800ee54:	220a      	movs	r2, #10
 800ee56:	4648      	mov	r0, r9
 800ee58:	f000 fd84 	bl	800f964 <__multadd>
 800ee5c:	f1bb 0f00 	cmp.w	fp, #0
 800ee60:	4605      	mov	r5, r0
 800ee62:	dc6f      	bgt.n	800ef44 <_dtoa_r+0x974>
 800ee64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ee66:	2b02      	cmp	r3, #2
 800ee68:	dc49      	bgt.n	800eefe <_dtoa_r+0x92e>
 800ee6a:	e06b      	b.n	800ef44 <_dtoa_r+0x974>
 800ee6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ee6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee72:	e73c      	b.n	800ecee <_dtoa_r+0x71e>
 800ee74:	3fe00000 	.word	0x3fe00000
 800ee78:	40240000 	.word	0x40240000
 800ee7c:	9b08      	ldr	r3, [sp, #32]
 800ee7e:	1e5c      	subs	r4, r3, #1
 800ee80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee82:	42a3      	cmp	r3, r4
 800ee84:	db09      	blt.n	800ee9a <_dtoa_r+0x8ca>
 800ee86:	1b1c      	subs	r4, r3, r4
 800ee88:	9b08      	ldr	r3, [sp, #32]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	f6bf af30 	bge.w	800ecf0 <_dtoa_r+0x720>
 800ee90:	9b04      	ldr	r3, [sp, #16]
 800ee92:	9a08      	ldr	r2, [sp, #32]
 800ee94:	1a9e      	subs	r6, r3, r2
 800ee96:	2300      	movs	r3, #0
 800ee98:	e72b      	b.n	800ecf2 <_dtoa_r+0x722>
 800ee9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee9e:	1ae3      	subs	r3, r4, r3
 800eea0:	441a      	add	r2, r3
 800eea2:	940a      	str	r4, [sp, #40]	@ 0x28
 800eea4:	9e04      	ldr	r6, [sp, #16]
 800eea6:	2400      	movs	r4, #0
 800eea8:	9b08      	ldr	r3, [sp, #32]
 800eeaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800eeac:	e721      	b.n	800ecf2 <_dtoa_r+0x722>
 800eeae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eeb0:	9e04      	ldr	r6, [sp, #16]
 800eeb2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800eeb4:	e728      	b.n	800ed08 <_dtoa_r+0x738>
 800eeb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800eeba:	e751      	b.n	800ed60 <_dtoa_r+0x790>
 800eebc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eebe:	9903      	ldr	r1, [sp, #12]
 800eec0:	e750      	b.n	800ed64 <_dtoa_r+0x794>
 800eec2:	f8cd 800c 	str.w	r8, [sp, #12]
 800eec6:	e751      	b.n	800ed6c <_dtoa_r+0x79c>
 800eec8:	2300      	movs	r3, #0
 800eeca:	e779      	b.n	800edc0 <_dtoa_r+0x7f0>
 800eecc:	9b06      	ldr	r3, [sp, #24]
 800eece:	e777      	b.n	800edc0 <_dtoa_r+0x7f0>
 800eed0:	2300      	movs	r3, #0
 800eed2:	930a      	str	r3, [sp, #40]	@ 0x28
 800eed4:	e779      	b.n	800edca <_dtoa_r+0x7fa>
 800eed6:	d093      	beq.n	800ee00 <_dtoa_r+0x830>
 800eed8:	9a04      	ldr	r2, [sp, #16]
 800eeda:	331c      	adds	r3, #28
 800eedc:	441a      	add	r2, r3
 800eede:	9204      	str	r2, [sp, #16]
 800eee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eee2:	441e      	add	r6, r3
 800eee4:	441a      	add	r2, r3
 800eee6:	9209      	str	r2, [sp, #36]	@ 0x24
 800eee8:	e78a      	b.n	800ee00 <_dtoa_r+0x830>
 800eeea:	4603      	mov	r3, r0
 800eeec:	e7f4      	b.n	800eed8 <_dtoa_r+0x908>
 800eeee:	9b08      	ldr	r3, [sp, #32]
 800eef0:	46b8      	mov	r8, r7
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	dc20      	bgt.n	800ef38 <_dtoa_r+0x968>
 800eef6:	469b      	mov	fp, r3
 800eef8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	dd1e      	ble.n	800ef3c <_dtoa_r+0x96c>
 800eefe:	f1bb 0f00 	cmp.w	fp, #0
 800ef02:	f47f adb1 	bne.w	800ea68 <_dtoa_r+0x498>
 800ef06:	4621      	mov	r1, r4
 800ef08:	465b      	mov	r3, fp
 800ef0a:	2205      	movs	r2, #5
 800ef0c:	4648      	mov	r0, r9
 800ef0e:	f000 fd29 	bl	800f964 <__multadd>
 800ef12:	4601      	mov	r1, r0
 800ef14:	4604      	mov	r4, r0
 800ef16:	9803      	ldr	r0, [sp, #12]
 800ef18:	f000 ff7e 	bl	800fe18 <__mcmp>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	f77f ada3 	ble.w	800ea68 <_dtoa_r+0x498>
 800ef22:	4656      	mov	r6, sl
 800ef24:	2331      	movs	r3, #49	@ 0x31
 800ef26:	f108 0801 	add.w	r8, r8, #1
 800ef2a:	f806 3b01 	strb.w	r3, [r6], #1
 800ef2e:	e59f      	b.n	800ea70 <_dtoa_r+0x4a0>
 800ef30:	46b8      	mov	r8, r7
 800ef32:	9c08      	ldr	r4, [sp, #32]
 800ef34:	4625      	mov	r5, r4
 800ef36:	e7f4      	b.n	800ef22 <_dtoa_r+0x952>
 800ef38:	f8dd b020 	ldr.w	fp, [sp, #32]
 800ef3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	f000 8101 	beq.w	800f146 <_dtoa_r+0xb76>
 800ef44:	2e00      	cmp	r6, #0
 800ef46:	dd05      	ble.n	800ef54 <_dtoa_r+0x984>
 800ef48:	4629      	mov	r1, r5
 800ef4a:	4632      	mov	r2, r6
 800ef4c:	4648      	mov	r0, r9
 800ef4e:	f000 fef7 	bl	800fd40 <__lshift>
 800ef52:	4605      	mov	r5, r0
 800ef54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d05c      	beq.n	800f014 <_dtoa_r+0xa44>
 800ef5a:	4648      	mov	r0, r9
 800ef5c:	6869      	ldr	r1, [r5, #4]
 800ef5e:	f000 fc9f 	bl	800f8a0 <_Balloc>
 800ef62:	4606      	mov	r6, r0
 800ef64:	b928      	cbnz	r0, 800ef72 <_dtoa_r+0x9a2>
 800ef66:	4602      	mov	r2, r0
 800ef68:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ef6c:	4b80      	ldr	r3, [pc, #512]	@ (800f170 <_dtoa_r+0xba0>)
 800ef6e:	f7ff bb43 	b.w	800e5f8 <_dtoa_r+0x28>
 800ef72:	692a      	ldr	r2, [r5, #16]
 800ef74:	f105 010c 	add.w	r1, r5, #12
 800ef78:	3202      	adds	r2, #2
 800ef7a:	0092      	lsls	r2, r2, #2
 800ef7c:	300c      	adds	r0, #12
 800ef7e:	f7ff fa7c 	bl	800e47a <memcpy>
 800ef82:	2201      	movs	r2, #1
 800ef84:	4631      	mov	r1, r6
 800ef86:	4648      	mov	r0, r9
 800ef88:	f000 feda 	bl	800fd40 <__lshift>
 800ef8c:	462f      	mov	r7, r5
 800ef8e:	4605      	mov	r5, r0
 800ef90:	f10a 0301 	add.w	r3, sl, #1
 800ef94:	9304      	str	r3, [sp, #16]
 800ef96:	eb0a 030b 	add.w	r3, sl, fp
 800ef9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef9c:	9b06      	ldr	r3, [sp, #24]
 800ef9e:	f003 0301 	and.w	r3, r3, #1
 800efa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800efa4:	9b04      	ldr	r3, [sp, #16]
 800efa6:	4621      	mov	r1, r4
 800efa8:	9803      	ldr	r0, [sp, #12]
 800efaa:	f103 3bff 	add.w	fp, r3, #4294967295
 800efae:	f7ff fa84 	bl	800e4ba <quorem>
 800efb2:	4603      	mov	r3, r0
 800efb4:	4639      	mov	r1, r7
 800efb6:	3330      	adds	r3, #48	@ 0x30
 800efb8:	9006      	str	r0, [sp, #24]
 800efba:	9803      	ldr	r0, [sp, #12]
 800efbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efbe:	f000 ff2b 	bl	800fe18 <__mcmp>
 800efc2:	462a      	mov	r2, r5
 800efc4:	9008      	str	r0, [sp, #32]
 800efc6:	4621      	mov	r1, r4
 800efc8:	4648      	mov	r0, r9
 800efca:	f000 ff41 	bl	800fe50 <__mdiff>
 800efce:	68c2      	ldr	r2, [r0, #12]
 800efd0:	4606      	mov	r6, r0
 800efd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efd4:	bb02      	cbnz	r2, 800f018 <_dtoa_r+0xa48>
 800efd6:	4601      	mov	r1, r0
 800efd8:	9803      	ldr	r0, [sp, #12]
 800efda:	f000 ff1d 	bl	800fe18 <__mcmp>
 800efde:	4602      	mov	r2, r0
 800efe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efe2:	4631      	mov	r1, r6
 800efe4:	4648      	mov	r0, r9
 800efe6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800efea:	f000 fc99 	bl	800f920 <_Bfree>
 800efee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eff0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800eff2:	9e04      	ldr	r6, [sp, #16]
 800eff4:	ea42 0103 	orr.w	r1, r2, r3
 800eff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800effa:	4319      	orrs	r1, r3
 800effc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800effe:	d10d      	bne.n	800f01c <_dtoa_r+0xa4c>
 800f000:	2b39      	cmp	r3, #57	@ 0x39
 800f002:	d027      	beq.n	800f054 <_dtoa_r+0xa84>
 800f004:	9a08      	ldr	r2, [sp, #32]
 800f006:	2a00      	cmp	r2, #0
 800f008:	dd01      	ble.n	800f00e <_dtoa_r+0xa3e>
 800f00a:	9b06      	ldr	r3, [sp, #24]
 800f00c:	3331      	adds	r3, #49	@ 0x31
 800f00e:	f88b 3000 	strb.w	r3, [fp]
 800f012:	e52e      	b.n	800ea72 <_dtoa_r+0x4a2>
 800f014:	4628      	mov	r0, r5
 800f016:	e7b9      	b.n	800ef8c <_dtoa_r+0x9bc>
 800f018:	2201      	movs	r2, #1
 800f01a:	e7e2      	b.n	800efe2 <_dtoa_r+0xa12>
 800f01c:	9908      	ldr	r1, [sp, #32]
 800f01e:	2900      	cmp	r1, #0
 800f020:	db04      	blt.n	800f02c <_dtoa_r+0xa5c>
 800f022:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800f024:	4301      	orrs	r1, r0
 800f026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f028:	4301      	orrs	r1, r0
 800f02a:	d120      	bne.n	800f06e <_dtoa_r+0xa9e>
 800f02c:	2a00      	cmp	r2, #0
 800f02e:	ddee      	ble.n	800f00e <_dtoa_r+0xa3e>
 800f030:	2201      	movs	r2, #1
 800f032:	9903      	ldr	r1, [sp, #12]
 800f034:	4648      	mov	r0, r9
 800f036:	9304      	str	r3, [sp, #16]
 800f038:	f000 fe82 	bl	800fd40 <__lshift>
 800f03c:	4621      	mov	r1, r4
 800f03e:	9003      	str	r0, [sp, #12]
 800f040:	f000 feea 	bl	800fe18 <__mcmp>
 800f044:	2800      	cmp	r0, #0
 800f046:	9b04      	ldr	r3, [sp, #16]
 800f048:	dc02      	bgt.n	800f050 <_dtoa_r+0xa80>
 800f04a:	d1e0      	bne.n	800f00e <_dtoa_r+0xa3e>
 800f04c:	07da      	lsls	r2, r3, #31
 800f04e:	d5de      	bpl.n	800f00e <_dtoa_r+0xa3e>
 800f050:	2b39      	cmp	r3, #57	@ 0x39
 800f052:	d1da      	bne.n	800f00a <_dtoa_r+0xa3a>
 800f054:	2339      	movs	r3, #57	@ 0x39
 800f056:	f88b 3000 	strb.w	r3, [fp]
 800f05a:	4633      	mov	r3, r6
 800f05c:	461e      	mov	r6, r3
 800f05e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f062:	3b01      	subs	r3, #1
 800f064:	2a39      	cmp	r2, #57	@ 0x39
 800f066:	d04e      	beq.n	800f106 <_dtoa_r+0xb36>
 800f068:	3201      	adds	r2, #1
 800f06a:	701a      	strb	r2, [r3, #0]
 800f06c:	e501      	b.n	800ea72 <_dtoa_r+0x4a2>
 800f06e:	2a00      	cmp	r2, #0
 800f070:	dd03      	ble.n	800f07a <_dtoa_r+0xaaa>
 800f072:	2b39      	cmp	r3, #57	@ 0x39
 800f074:	d0ee      	beq.n	800f054 <_dtoa_r+0xa84>
 800f076:	3301      	adds	r3, #1
 800f078:	e7c9      	b.n	800f00e <_dtoa_r+0xa3e>
 800f07a:	9a04      	ldr	r2, [sp, #16]
 800f07c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f07e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f082:	428a      	cmp	r2, r1
 800f084:	d028      	beq.n	800f0d8 <_dtoa_r+0xb08>
 800f086:	2300      	movs	r3, #0
 800f088:	220a      	movs	r2, #10
 800f08a:	9903      	ldr	r1, [sp, #12]
 800f08c:	4648      	mov	r0, r9
 800f08e:	f000 fc69 	bl	800f964 <__multadd>
 800f092:	42af      	cmp	r7, r5
 800f094:	9003      	str	r0, [sp, #12]
 800f096:	f04f 0300 	mov.w	r3, #0
 800f09a:	f04f 020a 	mov.w	r2, #10
 800f09e:	4639      	mov	r1, r7
 800f0a0:	4648      	mov	r0, r9
 800f0a2:	d107      	bne.n	800f0b4 <_dtoa_r+0xae4>
 800f0a4:	f000 fc5e 	bl	800f964 <__multadd>
 800f0a8:	4607      	mov	r7, r0
 800f0aa:	4605      	mov	r5, r0
 800f0ac:	9b04      	ldr	r3, [sp, #16]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	9304      	str	r3, [sp, #16]
 800f0b2:	e777      	b.n	800efa4 <_dtoa_r+0x9d4>
 800f0b4:	f000 fc56 	bl	800f964 <__multadd>
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	4607      	mov	r7, r0
 800f0bc:	2300      	movs	r3, #0
 800f0be:	220a      	movs	r2, #10
 800f0c0:	4648      	mov	r0, r9
 800f0c2:	f000 fc4f 	bl	800f964 <__multadd>
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	e7f0      	b.n	800f0ac <_dtoa_r+0xadc>
 800f0ca:	f1bb 0f00 	cmp.w	fp, #0
 800f0ce:	bfcc      	ite	gt
 800f0d0:	465e      	movgt	r6, fp
 800f0d2:	2601      	movle	r6, #1
 800f0d4:	2700      	movs	r7, #0
 800f0d6:	4456      	add	r6, sl
 800f0d8:	2201      	movs	r2, #1
 800f0da:	9903      	ldr	r1, [sp, #12]
 800f0dc:	4648      	mov	r0, r9
 800f0de:	9304      	str	r3, [sp, #16]
 800f0e0:	f000 fe2e 	bl	800fd40 <__lshift>
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	9003      	str	r0, [sp, #12]
 800f0e8:	f000 fe96 	bl	800fe18 <__mcmp>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	dcb4      	bgt.n	800f05a <_dtoa_r+0xa8a>
 800f0f0:	d102      	bne.n	800f0f8 <_dtoa_r+0xb28>
 800f0f2:	9b04      	ldr	r3, [sp, #16]
 800f0f4:	07db      	lsls	r3, r3, #31
 800f0f6:	d4b0      	bmi.n	800f05a <_dtoa_r+0xa8a>
 800f0f8:	4633      	mov	r3, r6
 800f0fa:	461e      	mov	r6, r3
 800f0fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f100:	2a30      	cmp	r2, #48	@ 0x30
 800f102:	d0fa      	beq.n	800f0fa <_dtoa_r+0xb2a>
 800f104:	e4b5      	b.n	800ea72 <_dtoa_r+0x4a2>
 800f106:	459a      	cmp	sl, r3
 800f108:	d1a8      	bne.n	800f05c <_dtoa_r+0xa8c>
 800f10a:	2331      	movs	r3, #49	@ 0x31
 800f10c:	f108 0801 	add.w	r8, r8, #1
 800f110:	f88a 3000 	strb.w	r3, [sl]
 800f114:	e4ad      	b.n	800ea72 <_dtoa_r+0x4a2>
 800f116:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f118:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f174 <_dtoa_r+0xba4>
 800f11c:	b11b      	cbz	r3, 800f126 <_dtoa_r+0xb56>
 800f11e:	f10a 0308 	add.w	r3, sl, #8
 800f122:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f124:	6013      	str	r3, [r2, #0]
 800f126:	4650      	mov	r0, sl
 800f128:	b017      	add	sp, #92	@ 0x5c
 800f12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f130:	2b01      	cmp	r3, #1
 800f132:	f77f ae2e 	ble.w	800ed92 <_dtoa_r+0x7c2>
 800f136:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f138:	930a      	str	r3, [sp, #40]	@ 0x28
 800f13a:	2001      	movs	r0, #1
 800f13c:	e64d      	b.n	800edda <_dtoa_r+0x80a>
 800f13e:	f1bb 0f00 	cmp.w	fp, #0
 800f142:	f77f aed9 	ble.w	800eef8 <_dtoa_r+0x928>
 800f146:	4656      	mov	r6, sl
 800f148:	4621      	mov	r1, r4
 800f14a:	9803      	ldr	r0, [sp, #12]
 800f14c:	f7ff f9b5 	bl	800e4ba <quorem>
 800f150:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f154:	f806 3b01 	strb.w	r3, [r6], #1
 800f158:	eba6 020a 	sub.w	r2, r6, sl
 800f15c:	4593      	cmp	fp, r2
 800f15e:	ddb4      	ble.n	800f0ca <_dtoa_r+0xafa>
 800f160:	2300      	movs	r3, #0
 800f162:	220a      	movs	r2, #10
 800f164:	4648      	mov	r0, r9
 800f166:	9903      	ldr	r1, [sp, #12]
 800f168:	f000 fbfc 	bl	800f964 <__multadd>
 800f16c:	9003      	str	r0, [sp, #12]
 800f16e:	e7eb      	b.n	800f148 <_dtoa_r+0xb78>
 800f170:	08011334 	.word	0x08011334
 800f174:	080112b8 	.word	0x080112b8

0800f178 <_free_r>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	4605      	mov	r5, r0
 800f17c:	2900      	cmp	r1, #0
 800f17e:	d040      	beq.n	800f202 <_free_r+0x8a>
 800f180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f184:	1f0c      	subs	r4, r1, #4
 800f186:	2b00      	cmp	r3, #0
 800f188:	bfb8      	it	lt
 800f18a:	18e4      	addlt	r4, r4, r3
 800f18c:	f7fd f914 	bl	800c3b8 <__malloc_lock>
 800f190:	4a1c      	ldr	r2, [pc, #112]	@ (800f204 <_free_r+0x8c>)
 800f192:	6813      	ldr	r3, [r2, #0]
 800f194:	b933      	cbnz	r3, 800f1a4 <_free_r+0x2c>
 800f196:	6063      	str	r3, [r4, #4]
 800f198:	6014      	str	r4, [r2, #0]
 800f19a:	4628      	mov	r0, r5
 800f19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1a0:	f7fd b910 	b.w	800c3c4 <__malloc_unlock>
 800f1a4:	42a3      	cmp	r3, r4
 800f1a6:	d908      	bls.n	800f1ba <_free_r+0x42>
 800f1a8:	6820      	ldr	r0, [r4, #0]
 800f1aa:	1821      	adds	r1, r4, r0
 800f1ac:	428b      	cmp	r3, r1
 800f1ae:	bf01      	itttt	eq
 800f1b0:	6819      	ldreq	r1, [r3, #0]
 800f1b2:	685b      	ldreq	r3, [r3, #4]
 800f1b4:	1809      	addeq	r1, r1, r0
 800f1b6:	6021      	streq	r1, [r4, #0]
 800f1b8:	e7ed      	b.n	800f196 <_free_r+0x1e>
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	b10b      	cbz	r3, 800f1c4 <_free_r+0x4c>
 800f1c0:	42a3      	cmp	r3, r4
 800f1c2:	d9fa      	bls.n	800f1ba <_free_r+0x42>
 800f1c4:	6811      	ldr	r1, [r2, #0]
 800f1c6:	1850      	adds	r0, r2, r1
 800f1c8:	42a0      	cmp	r0, r4
 800f1ca:	d10b      	bne.n	800f1e4 <_free_r+0x6c>
 800f1cc:	6820      	ldr	r0, [r4, #0]
 800f1ce:	4401      	add	r1, r0
 800f1d0:	1850      	adds	r0, r2, r1
 800f1d2:	4283      	cmp	r3, r0
 800f1d4:	6011      	str	r1, [r2, #0]
 800f1d6:	d1e0      	bne.n	800f19a <_free_r+0x22>
 800f1d8:	6818      	ldr	r0, [r3, #0]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	4408      	add	r0, r1
 800f1de:	6010      	str	r0, [r2, #0]
 800f1e0:	6053      	str	r3, [r2, #4]
 800f1e2:	e7da      	b.n	800f19a <_free_r+0x22>
 800f1e4:	d902      	bls.n	800f1ec <_free_r+0x74>
 800f1e6:	230c      	movs	r3, #12
 800f1e8:	602b      	str	r3, [r5, #0]
 800f1ea:	e7d6      	b.n	800f19a <_free_r+0x22>
 800f1ec:	6820      	ldr	r0, [r4, #0]
 800f1ee:	1821      	adds	r1, r4, r0
 800f1f0:	428b      	cmp	r3, r1
 800f1f2:	bf01      	itttt	eq
 800f1f4:	6819      	ldreq	r1, [r3, #0]
 800f1f6:	685b      	ldreq	r3, [r3, #4]
 800f1f8:	1809      	addeq	r1, r1, r0
 800f1fa:	6021      	streq	r1, [r4, #0]
 800f1fc:	6063      	str	r3, [r4, #4]
 800f1fe:	6054      	str	r4, [r2, #4]
 800f200:	e7cb      	b.n	800f19a <_free_r+0x22>
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	20001204 	.word	0x20001204

0800f208 <rshift>:
 800f208:	6903      	ldr	r3, [r0, #16]
 800f20a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f20e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f212:	f100 0414 	add.w	r4, r0, #20
 800f216:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f21a:	dd46      	ble.n	800f2aa <rshift+0xa2>
 800f21c:	f011 011f 	ands.w	r1, r1, #31
 800f220:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f224:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f228:	d10c      	bne.n	800f244 <rshift+0x3c>
 800f22a:	4629      	mov	r1, r5
 800f22c:	f100 0710 	add.w	r7, r0, #16
 800f230:	42b1      	cmp	r1, r6
 800f232:	d335      	bcc.n	800f2a0 <rshift+0x98>
 800f234:	1a9b      	subs	r3, r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	1eea      	subs	r2, r5, #3
 800f23a:	4296      	cmp	r6, r2
 800f23c:	bf38      	it	cc
 800f23e:	2300      	movcc	r3, #0
 800f240:	4423      	add	r3, r4
 800f242:	e015      	b.n	800f270 <rshift+0x68>
 800f244:	46a1      	mov	r9, r4
 800f246:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f24a:	f1c1 0820 	rsb	r8, r1, #32
 800f24e:	40cf      	lsrs	r7, r1
 800f250:	f105 0e04 	add.w	lr, r5, #4
 800f254:	4576      	cmp	r6, lr
 800f256:	46f4      	mov	ip, lr
 800f258:	d816      	bhi.n	800f288 <rshift+0x80>
 800f25a:	1a9a      	subs	r2, r3, r2
 800f25c:	0092      	lsls	r2, r2, #2
 800f25e:	3a04      	subs	r2, #4
 800f260:	3501      	adds	r5, #1
 800f262:	42ae      	cmp	r6, r5
 800f264:	bf38      	it	cc
 800f266:	2200      	movcc	r2, #0
 800f268:	18a3      	adds	r3, r4, r2
 800f26a:	50a7      	str	r7, [r4, r2]
 800f26c:	b107      	cbz	r7, 800f270 <rshift+0x68>
 800f26e:	3304      	adds	r3, #4
 800f270:	42a3      	cmp	r3, r4
 800f272:	eba3 0204 	sub.w	r2, r3, r4
 800f276:	bf08      	it	eq
 800f278:	2300      	moveq	r3, #0
 800f27a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f27e:	6102      	str	r2, [r0, #16]
 800f280:	bf08      	it	eq
 800f282:	6143      	streq	r3, [r0, #20]
 800f284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f288:	f8dc c000 	ldr.w	ip, [ip]
 800f28c:	fa0c fc08 	lsl.w	ip, ip, r8
 800f290:	ea4c 0707 	orr.w	r7, ip, r7
 800f294:	f849 7b04 	str.w	r7, [r9], #4
 800f298:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f29c:	40cf      	lsrs	r7, r1
 800f29e:	e7d9      	b.n	800f254 <rshift+0x4c>
 800f2a0:	f851 cb04 	ldr.w	ip, [r1], #4
 800f2a4:	f847 cf04 	str.w	ip, [r7, #4]!
 800f2a8:	e7c2      	b.n	800f230 <rshift+0x28>
 800f2aa:	4623      	mov	r3, r4
 800f2ac:	e7e0      	b.n	800f270 <rshift+0x68>

0800f2ae <__hexdig_fun>:
 800f2ae:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f2b2:	2b09      	cmp	r3, #9
 800f2b4:	d802      	bhi.n	800f2bc <__hexdig_fun+0xe>
 800f2b6:	3820      	subs	r0, #32
 800f2b8:	b2c0      	uxtb	r0, r0
 800f2ba:	4770      	bx	lr
 800f2bc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f2c0:	2b05      	cmp	r3, #5
 800f2c2:	d801      	bhi.n	800f2c8 <__hexdig_fun+0x1a>
 800f2c4:	3847      	subs	r0, #71	@ 0x47
 800f2c6:	e7f7      	b.n	800f2b8 <__hexdig_fun+0xa>
 800f2c8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f2cc:	2b05      	cmp	r3, #5
 800f2ce:	d801      	bhi.n	800f2d4 <__hexdig_fun+0x26>
 800f2d0:	3827      	subs	r0, #39	@ 0x27
 800f2d2:	e7f1      	b.n	800f2b8 <__hexdig_fun+0xa>
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	4770      	bx	lr

0800f2d8 <__gethex>:
 800f2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2dc:	468a      	mov	sl, r1
 800f2de:	4690      	mov	r8, r2
 800f2e0:	b085      	sub	sp, #20
 800f2e2:	9302      	str	r3, [sp, #8]
 800f2e4:	680b      	ldr	r3, [r1, #0]
 800f2e6:	9001      	str	r0, [sp, #4]
 800f2e8:	1c9c      	adds	r4, r3, #2
 800f2ea:	46a1      	mov	r9, r4
 800f2ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f2f0:	2830      	cmp	r0, #48	@ 0x30
 800f2f2:	d0fa      	beq.n	800f2ea <__gethex+0x12>
 800f2f4:	eba9 0303 	sub.w	r3, r9, r3
 800f2f8:	f1a3 0b02 	sub.w	fp, r3, #2
 800f2fc:	f7ff ffd7 	bl	800f2ae <__hexdig_fun>
 800f300:	4605      	mov	r5, r0
 800f302:	2800      	cmp	r0, #0
 800f304:	d168      	bne.n	800f3d8 <__gethex+0x100>
 800f306:	2201      	movs	r2, #1
 800f308:	4648      	mov	r0, r9
 800f30a:	499f      	ldr	r1, [pc, #636]	@ (800f588 <__gethex+0x2b0>)
 800f30c:	f7fe fff3 	bl	800e2f6 <strncmp>
 800f310:	4607      	mov	r7, r0
 800f312:	2800      	cmp	r0, #0
 800f314:	d167      	bne.n	800f3e6 <__gethex+0x10e>
 800f316:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f31a:	4626      	mov	r6, r4
 800f31c:	f7ff ffc7 	bl	800f2ae <__hexdig_fun>
 800f320:	2800      	cmp	r0, #0
 800f322:	d062      	beq.n	800f3ea <__gethex+0x112>
 800f324:	4623      	mov	r3, r4
 800f326:	7818      	ldrb	r0, [r3, #0]
 800f328:	4699      	mov	r9, r3
 800f32a:	2830      	cmp	r0, #48	@ 0x30
 800f32c:	f103 0301 	add.w	r3, r3, #1
 800f330:	d0f9      	beq.n	800f326 <__gethex+0x4e>
 800f332:	f7ff ffbc 	bl	800f2ae <__hexdig_fun>
 800f336:	fab0 f580 	clz	r5, r0
 800f33a:	f04f 0b01 	mov.w	fp, #1
 800f33e:	096d      	lsrs	r5, r5, #5
 800f340:	464a      	mov	r2, r9
 800f342:	4616      	mov	r6, r2
 800f344:	7830      	ldrb	r0, [r6, #0]
 800f346:	3201      	adds	r2, #1
 800f348:	f7ff ffb1 	bl	800f2ae <__hexdig_fun>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d1f8      	bne.n	800f342 <__gethex+0x6a>
 800f350:	2201      	movs	r2, #1
 800f352:	4630      	mov	r0, r6
 800f354:	498c      	ldr	r1, [pc, #560]	@ (800f588 <__gethex+0x2b0>)
 800f356:	f7fe ffce 	bl	800e2f6 <strncmp>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d13f      	bne.n	800f3de <__gethex+0x106>
 800f35e:	b944      	cbnz	r4, 800f372 <__gethex+0x9a>
 800f360:	1c74      	adds	r4, r6, #1
 800f362:	4622      	mov	r2, r4
 800f364:	4616      	mov	r6, r2
 800f366:	7830      	ldrb	r0, [r6, #0]
 800f368:	3201      	adds	r2, #1
 800f36a:	f7ff ffa0 	bl	800f2ae <__hexdig_fun>
 800f36e:	2800      	cmp	r0, #0
 800f370:	d1f8      	bne.n	800f364 <__gethex+0x8c>
 800f372:	1ba4      	subs	r4, r4, r6
 800f374:	00a7      	lsls	r7, r4, #2
 800f376:	7833      	ldrb	r3, [r6, #0]
 800f378:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f37c:	2b50      	cmp	r3, #80	@ 0x50
 800f37e:	d13e      	bne.n	800f3fe <__gethex+0x126>
 800f380:	7873      	ldrb	r3, [r6, #1]
 800f382:	2b2b      	cmp	r3, #43	@ 0x2b
 800f384:	d033      	beq.n	800f3ee <__gethex+0x116>
 800f386:	2b2d      	cmp	r3, #45	@ 0x2d
 800f388:	d034      	beq.n	800f3f4 <__gethex+0x11c>
 800f38a:	2400      	movs	r4, #0
 800f38c:	1c71      	adds	r1, r6, #1
 800f38e:	7808      	ldrb	r0, [r1, #0]
 800f390:	f7ff ff8d 	bl	800f2ae <__hexdig_fun>
 800f394:	1e43      	subs	r3, r0, #1
 800f396:	b2db      	uxtb	r3, r3
 800f398:	2b18      	cmp	r3, #24
 800f39a:	d830      	bhi.n	800f3fe <__gethex+0x126>
 800f39c:	f1a0 0210 	sub.w	r2, r0, #16
 800f3a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f3a4:	f7ff ff83 	bl	800f2ae <__hexdig_fun>
 800f3a8:	f100 3cff 	add.w	ip, r0, #4294967295
 800f3ac:	fa5f fc8c 	uxtb.w	ip, ip
 800f3b0:	f1bc 0f18 	cmp.w	ip, #24
 800f3b4:	f04f 030a 	mov.w	r3, #10
 800f3b8:	d91e      	bls.n	800f3f8 <__gethex+0x120>
 800f3ba:	b104      	cbz	r4, 800f3be <__gethex+0xe6>
 800f3bc:	4252      	negs	r2, r2
 800f3be:	4417      	add	r7, r2
 800f3c0:	f8ca 1000 	str.w	r1, [sl]
 800f3c4:	b1ed      	cbz	r5, 800f402 <__gethex+0x12a>
 800f3c6:	f1bb 0f00 	cmp.w	fp, #0
 800f3ca:	bf0c      	ite	eq
 800f3cc:	2506      	moveq	r5, #6
 800f3ce:	2500      	movne	r5, #0
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	b005      	add	sp, #20
 800f3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d8:	2500      	movs	r5, #0
 800f3da:	462c      	mov	r4, r5
 800f3dc:	e7b0      	b.n	800f340 <__gethex+0x68>
 800f3de:	2c00      	cmp	r4, #0
 800f3e0:	d1c7      	bne.n	800f372 <__gethex+0x9a>
 800f3e2:	4627      	mov	r7, r4
 800f3e4:	e7c7      	b.n	800f376 <__gethex+0x9e>
 800f3e6:	464e      	mov	r6, r9
 800f3e8:	462f      	mov	r7, r5
 800f3ea:	2501      	movs	r5, #1
 800f3ec:	e7c3      	b.n	800f376 <__gethex+0x9e>
 800f3ee:	2400      	movs	r4, #0
 800f3f0:	1cb1      	adds	r1, r6, #2
 800f3f2:	e7cc      	b.n	800f38e <__gethex+0xb6>
 800f3f4:	2401      	movs	r4, #1
 800f3f6:	e7fb      	b.n	800f3f0 <__gethex+0x118>
 800f3f8:	fb03 0002 	mla	r0, r3, r2, r0
 800f3fc:	e7ce      	b.n	800f39c <__gethex+0xc4>
 800f3fe:	4631      	mov	r1, r6
 800f400:	e7de      	b.n	800f3c0 <__gethex+0xe8>
 800f402:	4629      	mov	r1, r5
 800f404:	eba6 0309 	sub.w	r3, r6, r9
 800f408:	3b01      	subs	r3, #1
 800f40a:	2b07      	cmp	r3, #7
 800f40c:	dc0a      	bgt.n	800f424 <__gethex+0x14c>
 800f40e:	9801      	ldr	r0, [sp, #4]
 800f410:	f000 fa46 	bl	800f8a0 <_Balloc>
 800f414:	4604      	mov	r4, r0
 800f416:	b940      	cbnz	r0, 800f42a <__gethex+0x152>
 800f418:	4602      	mov	r2, r0
 800f41a:	21e4      	movs	r1, #228	@ 0xe4
 800f41c:	4b5b      	ldr	r3, [pc, #364]	@ (800f58c <__gethex+0x2b4>)
 800f41e:	485c      	ldr	r0, [pc, #368]	@ (800f590 <__gethex+0x2b8>)
 800f420:	f7fc fef2 	bl	800c208 <__assert_func>
 800f424:	3101      	adds	r1, #1
 800f426:	105b      	asrs	r3, r3, #1
 800f428:	e7ef      	b.n	800f40a <__gethex+0x132>
 800f42a:	2300      	movs	r3, #0
 800f42c:	f100 0a14 	add.w	sl, r0, #20
 800f430:	4655      	mov	r5, sl
 800f432:	469b      	mov	fp, r3
 800f434:	45b1      	cmp	r9, r6
 800f436:	d337      	bcc.n	800f4a8 <__gethex+0x1d0>
 800f438:	f845 bb04 	str.w	fp, [r5], #4
 800f43c:	eba5 050a 	sub.w	r5, r5, sl
 800f440:	10ad      	asrs	r5, r5, #2
 800f442:	6125      	str	r5, [r4, #16]
 800f444:	4658      	mov	r0, fp
 800f446:	f000 fb1d 	bl	800fa84 <__hi0bits>
 800f44a:	016d      	lsls	r5, r5, #5
 800f44c:	f8d8 6000 	ldr.w	r6, [r8]
 800f450:	1a2d      	subs	r5, r5, r0
 800f452:	42b5      	cmp	r5, r6
 800f454:	dd54      	ble.n	800f500 <__gethex+0x228>
 800f456:	1bad      	subs	r5, r5, r6
 800f458:	4629      	mov	r1, r5
 800f45a:	4620      	mov	r0, r4
 800f45c:	f000 fe9f 	bl	801019e <__any_on>
 800f460:	4681      	mov	r9, r0
 800f462:	b178      	cbz	r0, 800f484 <__gethex+0x1ac>
 800f464:	f04f 0901 	mov.w	r9, #1
 800f468:	1e6b      	subs	r3, r5, #1
 800f46a:	1159      	asrs	r1, r3, #5
 800f46c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f470:	f003 021f 	and.w	r2, r3, #31
 800f474:	fa09 f202 	lsl.w	r2, r9, r2
 800f478:	420a      	tst	r2, r1
 800f47a:	d003      	beq.n	800f484 <__gethex+0x1ac>
 800f47c:	454b      	cmp	r3, r9
 800f47e:	dc36      	bgt.n	800f4ee <__gethex+0x216>
 800f480:	f04f 0902 	mov.w	r9, #2
 800f484:	4629      	mov	r1, r5
 800f486:	4620      	mov	r0, r4
 800f488:	f7ff febe 	bl	800f208 <rshift>
 800f48c:	442f      	add	r7, r5
 800f48e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f492:	42bb      	cmp	r3, r7
 800f494:	da42      	bge.n	800f51c <__gethex+0x244>
 800f496:	4621      	mov	r1, r4
 800f498:	9801      	ldr	r0, [sp, #4]
 800f49a:	f000 fa41 	bl	800f920 <_Bfree>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4a2:	25a3      	movs	r5, #163	@ 0xa3
 800f4a4:	6013      	str	r3, [r2, #0]
 800f4a6:	e793      	b.n	800f3d0 <__gethex+0xf8>
 800f4a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f4ac:	2a2e      	cmp	r2, #46	@ 0x2e
 800f4ae:	d012      	beq.n	800f4d6 <__gethex+0x1fe>
 800f4b0:	2b20      	cmp	r3, #32
 800f4b2:	d104      	bne.n	800f4be <__gethex+0x1e6>
 800f4b4:	f845 bb04 	str.w	fp, [r5], #4
 800f4b8:	f04f 0b00 	mov.w	fp, #0
 800f4bc:	465b      	mov	r3, fp
 800f4be:	7830      	ldrb	r0, [r6, #0]
 800f4c0:	9303      	str	r3, [sp, #12]
 800f4c2:	f7ff fef4 	bl	800f2ae <__hexdig_fun>
 800f4c6:	9b03      	ldr	r3, [sp, #12]
 800f4c8:	f000 000f 	and.w	r0, r0, #15
 800f4cc:	4098      	lsls	r0, r3
 800f4ce:	ea4b 0b00 	orr.w	fp, fp, r0
 800f4d2:	3304      	adds	r3, #4
 800f4d4:	e7ae      	b.n	800f434 <__gethex+0x15c>
 800f4d6:	45b1      	cmp	r9, r6
 800f4d8:	d8ea      	bhi.n	800f4b0 <__gethex+0x1d8>
 800f4da:	2201      	movs	r2, #1
 800f4dc:	4630      	mov	r0, r6
 800f4de:	492a      	ldr	r1, [pc, #168]	@ (800f588 <__gethex+0x2b0>)
 800f4e0:	9303      	str	r3, [sp, #12]
 800f4e2:	f7fe ff08 	bl	800e2f6 <strncmp>
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	d1e1      	bne.n	800f4b0 <__gethex+0x1d8>
 800f4ec:	e7a2      	b.n	800f434 <__gethex+0x15c>
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	1ea9      	subs	r1, r5, #2
 800f4f2:	f000 fe54 	bl	801019e <__any_on>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d0c2      	beq.n	800f480 <__gethex+0x1a8>
 800f4fa:	f04f 0903 	mov.w	r9, #3
 800f4fe:	e7c1      	b.n	800f484 <__gethex+0x1ac>
 800f500:	da09      	bge.n	800f516 <__gethex+0x23e>
 800f502:	1b75      	subs	r5, r6, r5
 800f504:	4621      	mov	r1, r4
 800f506:	462a      	mov	r2, r5
 800f508:	9801      	ldr	r0, [sp, #4]
 800f50a:	f000 fc19 	bl	800fd40 <__lshift>
 800f50e:	4604      	mov	r4, r0
 800f510:	1b7f      	subs	r7, r7, r5
 800f512:	f100 0a14 	add.w	sl, r0, #20
 800f516:	f04f 0900 	mov.w	r9, #0
 800f51a:	e7b8      	b.n	800f48e <__gethex+0x1b6>
 800f51c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f520:	42bd      	cmp	r5, r7
 800f522:	dd6f      	ble.n	800f604 <__gethex+0x32c>
 800f524:	1bed      	subs	r5, r5, r7
 800f526:	42ae      	cmp	r6, r5
 800f528:	dc34      	bgt.n	800f594 <__gethex+0x2bc>
 800f52a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f52e:	2b02      	cmp	r3, #2
 800f530:	d022      	beq.n	800f578 <__gethex+0x2a0>
 800f532:	2b03      	cmp	r3, #3
 800f534:	d024      	beq.n	800f580 <__gethex+0x2a8>
 800f536:	2b01      	cmp	r3, #1
 800f538:	d115      	bne.n	800f566 <__gethex+0x28e>
 800f53a:	42ae      	cmp	r6, r5
 800f53c:	d113      	bne.n	800f566 <__gethex+0x28e>
 800f53e:	2e01      	cmp	r6, #1
 800f540:	d10b      	bne.n	800f55a <__gethex+0x282>
 800f542:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f546:	9a02      	ldr	r2, [sp, #8]
 800f548:	2562      	movs	r5, #98	@ 0x62
 800f54a:	6013      	str	r3, [r2, #0]
 800f54c:	2301      	movs	r3, #1
 800f54e:	6123      	str	r3, [r4, #16]
 800f550:	f8ca 3000 	str.w	r3, [sl]
 800f554:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f556:	601c      	str	r4, [r3, #0]
 800f558:	e73a      	b.n	800f3d0 <__gethex+0xf8>
 800f55a:	4620      	mov	r0, r4
 800f55c:	1e71      	subs	r1, r6, #1
 800f55e:	f000 fe1e 	bl	801019e <__any_on>
 800f562:	2800      	cmp	r0, #0
 800f564:	d1ed      	bne.n	800f542 <__gethex+0x26a>
 800f566:	4621      	mov	r1, r4
 800f568:	9801      	ldr	r0, [sp, #4]
 800f56a:	f000 f9d9 	bl	800f920 <_Bfree>
 800f56e:	2300      	movs	r3, #0
 800f570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f572:	2550      	movs	r5, #80	@ 0x50
 800f574:	6013      	str	r3, [r2, #0]
 800f576:	e72b      	b.n	800f3d0 <__gethex+0xf8>
 800f578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1f3      	bne.n	800f566 <__gethex+0x28e>
 800f57e:	e7e0      	b.n	800f542 <__gethex+0x26a>
 800f580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f582:	2b00      	cmp	r3, #0
 800f584:	d1dd      	bne.n	800f542 <__gethex+0x26a>
 800f586:	e7ee      	b.n	800f566 <__gethex+0x28e>
 800f588:	08011275 	.word	0x08011275
 800f58c:	08011334 	.word	0x08011334
 800f590:	08011345 	.word	0x08011345
 800f594:	1e6f      	subs	r7, r5, #1
 800f596:	f1b9 0f00 	cmp.w	r9, #0
 800f59a:	d130      	bne.n	800f5fe <__gethex+0x326>
 800f59c:	b127      	cbz	r7, 800f5a8 <__gethex+0x2d0>
 800f59e:	4639      	mov	r1, r7
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	f000 fdfc 	bl	801019e <__any_on>
 800f5a6:	4681      	mov	r9, r0
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	1b76      	subs	r6, r6, r5
 800f5ae:	2502      	movs	r5, #2
 800f5b0:	117a      	asrs	r2, r7, #5
 800f5b2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f5b6:	f007 071f 	and.w	r7, r7, #31
 800f5ba:	40bb      	lsls	r3, r7
 800f5bc:	4213      	tst	r3, r2
 800f5be:	4620      	mov	r0, r4
 800f5c0:	bf18      	it	ne
 800f5c2:	f049 0902 	orrne.w	r9, r9, #2
 800f5c6:	f7ff fe1f 	bl	800f208 <rshift>
 800f5ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f5ce:	f1b9 0f00 	cmp.w	r9, #0
 800f5d2:	d047      	beq.n	800f664 <__gethex+0x38c>
 800f5d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5d8:	2b02      	cmp	r3, #2
 800f5da:	d015      	beq.n	800f608 <__gethex+0x330>
 800f5dc:	2b03      	cmp	r3, #3
 800f5de:	d017      	beq.n	800f610 <__gethex+0x338>
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d109      	bne.n	800f5f8 <__gethex+0x320>
 800f5e4:	f019 0f02 	tst.w	r9, #2
 800f5e8:	d006      	beq.n	800f5f8 <__gethex+0x320>
 800f5ea:	f8da 3000 	ldr.w	r3, [sl]
 800f5ee:	ea49 0903 	orr.w	r9, r9, r3
 800f5f2:	f019 0f01 	tst.w	r9, #1
 800f5f6:	d10e      	bne.n	800f616 <__gethex+0x33e>
 800f5f8:	f045 0510 	orr.w	r5, r5, #16
 800f5fc:	e032      	b.n	800f664 <__gethex+0x38c>
 800f5fe:	f04f 0901 	mov.w	r9, #1
 800f602:	e7d1      	b.n	800f5a8 <__gethex+0x2d0>
 800f604:	2501      	movs	r5, #1
 800f606:	e7e2      	b.n	800f5ce <__gethex+0x2f6>
 800f608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f60a:	f1c3 0301 	rsb	r3, r3, #1
 800f60e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f612:	2b00      	cmp	r3, #0
 800f614:	d0f0      	beq.n	800f5f8 <__gethex+0x320>
 800f616:	f04f 0c00 	mov.w	ip, #0
 800f61a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f61e:	f104 0314 	add.w	r3, r4, #20
 800f622:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f626:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f62a:	4618      	mov	r0, r3
 800f62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f630:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f634:	d01b      	beq.n	800f66e <__gethex+0x396>
 800f636:	3201      	adds	r2, #1
 800f638:	6002      	str	r2, [r0, #0]
 800f63a:	2d02      	cmp	r5, #2
 800f63c:	f104 0314 	add.w	r3, r4, #20
 800f640:	d13c      	bne.n	800f6bc <__gethex+0x3e4>
 800f642:	f8d8 2000 	ldr.w	r2, [r8]
 800f646:	3a01      	subs	r2, #1
 800f648:	42b2      	cmp	r2, r6
 800f64a:	d109      	bne.n	800f660 <__gethex+0x388>
 800f64c:	2201      	movs	r2, #1
 800f64e:	1171      	asrs	r1, r6, #5
 800f650:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f654:	f006 061f 	and.w	r6, r6, #31
 800f658:	fa02 f606 	lsl.w	r6, r2, r6
 800f65c:	421e      	tst	r6, r3
 800f65e:	d13a      	bne.n	800f6d6 <__gethex+0x3fe>
 800f660:	f045 0520 	orr.w	r5, r5, #32
 800f664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f666:	601c      	str	r4, [r3, #0]
 800f668:	9b02      	ldr	r3, [sp, #8]
 800f66a:	601f      	str	r7, [r3, #0]
 800f66c:	e6b0      	b.n	800f3d0 <__gethex+0xf8>
 800f66e:	4299      	cmp	r1, r3
 800f670:	f843 cc04 	str.w	ip, [r3, #-4]
 800f674:	d8d9      	bhi.n	800f62a <__gethex+0x352>
 800f676:	68a3      	ldr	r3, [r4, #8]
 800f678:	459b      	cmp	fp, r3
 800f67a:	db17      	blt.n	800f6ac <__gethex+0x3d4>
 800f67c:	6861      	ldr	r1, [r4, #4]
 800f67e:	9801      	ldr	r0, [sp, #4]
 800f680:	3101      	adds	r1, #1
 800f682:	f000 f90d 	bl	800f8a0 <_Balloc>
 800f686:	4681      	mov	r9, r0
 800f688:	b918      	cbnz	r0, 800f692 <__gethex+0x3ba>
 800f68a:	4602      	mov	r2, r0
 800f68c:	2184      	movs	r1, #132	@ 0x84
 800f68e:	4b19      	ldr	r3, [pc, #100]	@ (800f6f4 <__gethex+0x41c>)
 800f690:	e6c5      	b.n	800f41e <__gethex+0x146>
 800f692:	6922      	ldr	r2, [r4, #16]
 800f694:	f104 010c 	add.w	r1, r4, #12
 800f698:	3202      	adds	r2, #2
 800f69a:	0092      	lsls	r2, r2, #2
 800f69c:	300c      	adds	r0, #12
 800f69e:	f7fe feec 	bl	800e47a <memcpy>
 800f6a2:	4621      	mov	r1, r4
 800f6a4:	9801      	ldr	r0, [sp, #4]
 800f6a6:	f000 f93b 	bl	800f920 <_Bfree>
 800f6aa:	464c      	mov	r4, r9
 800f6ac:	6923      	ldr	r3, [r4, #16]
 800f6ae:	1c5a      	adds	r2, r3, #1
 800f6b0:	6122      	str	r2, [r4, #16]
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f6b8:	615a      	str	r2, [r3, #20]
 800f6ba:	e7be      	b.n	800f63a <__gethex+0x362>
 800f6bc:	6922      	ldr	r2, [r4, #16]
 800f6be:	455a      	cmp	r2, fp
 800f6c0:	dd0b      	ble.n	800f6da <__gethex+0x402>
 800f6c2:	2101      	movs	r1, #1
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	f7ff fd9f 	bl	800f208 <rshift>
 800f6ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6ce:	3701      	adds	r7, #1
 800f6d0:	42bb      	cmp	r3, r7
 800f6d2:	f6ff aee0 	blt.w	800f496 <__gethex+0x1be>
 800f6d6:	2501      	movs	r5, #1
 800f6d8:	e7c2      	b.n	800f660 <__gethex+0x388>
 800f6da:	f016 061f 	ands.w	r6, r6, #31
 800f6de:	d0fa      	beq.n	800f6d6 <__gethex+0x3fe>
 800f6e0:	4453      	add	r3, sl
 800f6e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f6e6:	f000 f9cd 	bl	800fa84 <__hi0bits>
 800f6ea:	f1c6 0620 	rsb	r6, r6, #32
 800f6ee:	42b0      	cmp	r0, r6
 800f6f0:	dbe7      	blt.n	800f6c2 <__gethex+0x3ea>
 800f6f2:	e7f0      	b.n	800f6d6 <__gethex+0x3fe>
 800f6f4:	08011334 	.word	0x08011334

0800f6f8 <L_shift>:
 800f6f8:	f1c2 0208 	rsb	r2, r2, #8
 800f6fc:	0092      	lsls	r2, r2, #2
 800f6fe:	b570      	push	{r4, r5, r6, lr}
 800f700:	f1c2 0620 	rsb	r6, r2, #32
 800f704:	6843      	ldr	r3, [r0, #4]
 800f706:	6804      	ldr	r4, [r0, #0]
 800f708:	fa03 f506 	lsl.w	r5, r3, r6
 800f70c:	432c      	orrs	r4, r5
 800f70e:	40d3      	lsrs	r3, r2
 800f710:	6004      	str	r4, [r0, #0]
 800f712:	f840 3f04 	str.w	r3, [r0, #4]!
 800f716:	4288      	cmp	r0, r1
 800f718:	d3f4      	bcc.n	800f704 <L_shift+0xc>
 800f71a:	bd70      	pop	{r4, r5, r6, pc}

0800f71c <__match>:
 800f71c:	b530      	push	{r4, r5, lr}
 800f71e:	6803      	ldr	r3, [r0, #0]
 800f720:	3301      	adds	r3, #1
 800f722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f726:	b914      	cbnz	r4, 800f72e <__match+0x12>
 800f728:	6003      	str	r3, [r0, #0]
 800f72a:	2001      	movs	r0, #1
 800f72c:	bd30      	pop	{r4, r5, pc}
 800f72e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f732:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f736:	2d19      	cmp	r5, #25
 800f738:	bf98      	it	ls
 800f73a:	3220      	addls	r2, #32
 800f73c:	42a2      	cmp	r2, r4
 800f73e:	d0f0      	beq.n	800f722 <__match+0x6>
 800f740:	2000      	movs	r0, #0
 800f742:	e7f3      	b.n	800f72c <__match+0x10>

0800f744 <__hexnan>:
 800f744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f748:	2500      	movs	r5, #0
 800f74a:	680b      	ldr	r3, [r1, #0]
 800f74c:	4682      	mov	sl, r0
 800f74e:	115e      	asrs	r6, r3, #5
 800f750:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f754:	f013 031f 	ands.w	r3, r3, #31
 800f758:	bf18      	it	ne
 800f75a:	3604      	addne	r6, #4
 800f75c:	1f37      	subs	r7, r6, #4
 800f75e:	4690      	mov	r8, r2
 800f760:	46b9      	mov	r9, r7
 800f762:	463c      	mov	r4, r7
 800f764:	46ab      	mov	fp, r5
 800f766:	b087      	sub	sp, #28
 800f768:	6801      	ldr	r1, [r0, #0]
 800f76a:	9301      	str	r3, [sp, #4]
 800f76c:	f846 5c04 	str.w	r5, [r6, #-4]
 800f770:	9502      	str	r5, [sp, #8]
 800f772:	784a      	ldrb	r2, [r1, #1]
 800f774:	1c4b      	adds	r3, r1, #1
 800f776:	9303      	str	r3, [sp, #12]
 800f778:	b342      	cbz	r2, 800f7cc <__hexnan+0x88>
 800f77a:	4610      	mov	r0, r2
 800f77c:	9105      	str	r1, [sp, #20]
 800f77e:	9204      	str	r2, [sp, #16]
 800f780:	f7ff fd95 	bl	800f2ae <__hexdig_fun>
 800f784:	2800      	cmp	r0, #0
 800f786:	d151      	bne.n	800f82c <__hexnan+0xe8>
 800f788:	9a04      	ldr	r2, [sp, #16]
 800f78a:	9905      	ldr	r1, [sp, #20]
 800f78c:	2a20      	cmp	r2, #32
 800f78e:	d818      	bhi.n	800f7c2 <__hexnan+0x7e>
 800f790:	9b02      	ldr	r3, [sp, #8]
 800f792:	459b      	cmp	fp, r3
 800f794:	dd13      	ble.n	800f7be <__hexnan+0x7a>
 800f796:	454c      	cmp	r4, r9
 800f798:	d206      	bcs.n	800f7a8 <__hexnan+0x64>
 800f79a:	2d07      	cmp	r5, #7
 800f79c:	dc04      	bgt.n	800f7a8 <__hexnan+0x64>
 800f79e:	462a      	mov	r2, r5
 800f7a0:	4649      	mov	r1, r9
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f7ff ffa8 	bl	800f6f8 <L_shift>
 800f7a8:	4544      	cmp	r4, r8
 800f7aa:	d952      	bls.n	800f852 <__hexnan+0x10e>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	f1a4 0904 	sub.w	r9, r4, #4
 800f7b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7b6:	461d      	mov	r5, r3
 800f7b8:	464c      	mov	r4, r9
 800f7ba:	f8cd b008 	str.w	fp, [sp, #8]
 800f7be:	9903      	ldr	r1, [sp, #12]
 800f7c0:	e7d7      	b.n	800f772 <__hexnan+0x2e>
 800f7c2:	2a29      	cmp	r2, #41	@ 0x29
 800f7c4:	d157      	bne.n	800f876 <__hexnan+0x132>
 800f7c6:	3102      	adds	r1, #2
 800f7c8:	f8ca 1000 	str.w	r1, [sl]
 800f7cc:	f1bb 0f00 	cmp.w	fp, #0
 800f7d0:	d051      	beq.n	800f876 <__hexnan+0x132>
 800f7d2:	454c      	cmp	r4, r9
 800f7d4:	d206      	bcs.n	800f7e4 <__hexnan+0xa0>
 800f7d6:	2d07      	cmp	r5, #7
 800f7d8:	dc04      	bgt.n	800f7e4 <__hexnan+0xa0>
 800f7da:	462a      	mov	r2, r5
 800f7dc:	4649      	mov	r1, r9
 800f7de:	4620      	mov	r0, r4
 800f7e0:	f7ff ff8a 	bl	800f6f8 <L_shift>
 800f7e4:	4544      	cmp	r4, r8
 800f7e6:	d936      	bls.n	800f856 <__hexnan+0x112>
 800f7e8:	4623      	mov	r3, r4
 800f7ea:	f1a8 0204 	sub.w	r2, r8, #4
 800f7ee:	f853 1b04 	ldr.w	r1, [r3], #4
 800f7f2:	429f      	cmp	r7, r3
 800f7f4:	f842 1f04 	str.w	r1, [r2, #4]!
 800f7f8:	d2f9      	bcs.n	800f7ee <__hexnan+0xaa>
 800f7fa:	1b3b      	subs	r3, r7, r4
 800f7fc:	f023 0303 	bic.w	r3, r3, #3
 800f800:	3304      	adds	r3, #4
 800f802:	3401      	adds	r4, #1
 800f804:	3e03      	subs	r6, #3
 800f806:	42b4      	cmp	r4, r6
 800f808:	bf88      	it	hi
 800f80a:	2304      	movhi	r3, #4
 800f80c:	2200      	movs	r2, #0
 800f80e:	4443      	add	r3, r8
 800f810:	f843 2b04 	str.w	r2, [r3], #4
 800f814:	429f      	cmp	r7, r3
 800f816:	d2fb      	bcs.n	800f810 <__hexnan+0xcc>
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	b91b      	cbnz	r3, 800f824 <__hexnan+0xe0>
 800f81c:	4547      	cmp	r7, r8
 800f81e:	d128      	bne.n	800f872 <__hexnan+0x12e>
 800f820:	2301      	movs	r3, #1
 800f822:	603b      	str	r3, [r7, #0]
 800f824:	2005      	movs	r0, #5
 800f826:	b007      	add	sp, #28
 800f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82c:	3501      	adds	r5, #1
 800f82e:	2d08      	cmp	r5, #8
 800f830:	f10b 0b01 	add.w	fp, fp, #1
 800f834:	dd06      	ble.n	800f844 <__hexnan+0x100>
 800f836:	4544      	cmp	r4, r8
 800f838:	d9c1      	bls.n	800f7be <__hexnan+0x7a>
 800f83a:	2300      	movs	r3, #0
 800f83c:	2501      	movs	r5, #1
 800f83e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f842:	3c04      	subs	r4, #4
 800f844:	6822      	ldr	r2, [r4, #0]
 800f846:	f000 000f 	and.w	r0, r0, #15
 800f84a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f84e:	6020      	str	r0, [r4, #0]
 800f850:	e7b5      	b.n	800f7be <__hexnan+0x7a>
 800f852:	2508      	movs	r5, #8
 800f854:	e7b3      	b.n	800f7be <__hexnan+0x7a>
 800f856:	9b01      	ldr	r3, [sp, #4]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d0dd      	beq.n	800f818 <__hexnan+0xd4>
 800f85c:	f04f 32ff 	mov.w	r2, #4294967295
 800f860:	f1c3 0320 	rsb	r3, r3, #32
 800f864:	40da      	lsrs	r2, r3
 800f866:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f86a:	4013      	ands	r3, r2
 800f86c:	f846 3c04 	str.w	r3, [r6, #-4]
 800f870:	e7d2      	b.n	800f818 <__hexnan+0xd4>
 800f872:	3f04      	subs	r7, #4
 800f874:	e7d0      	b.n	800f818 <__hexnan+0xd4>
 800f876:	2004      	movs	r0, #4
 800f878:	e7d5      	b.n	800f826 <__hexnan+0xe2>

0800f87a <__ascii_mbtowc>:
 800f87a:	b082      	sub	sp, #8
 800f87c:	b901      	cbnz	r1, 800f880 <__ascii_mbtowc+0x6>
 800f87e:	a901      	add	r1, sp, #4
 800f880:	b142      	cbz	r2, 800f894 <__ascii_mbtowc+0x1a>
 800f882:	b14b      	cbz	r3, 800f898 <__ascii_mbtowc+0x1e>
 800f884:	7813      	ldrb	r3, [r2, #0]
 800f886:	600b      	str	r3, [r1, #0]
 800f888:	7812      	ldrb	r2, [r2, #0]
 800f88a:	1e10      	subs	r0, r2, #0
 800f88c:	bf18      	it	ne
 800f88e:	2001      	movne	r0, #1
 800f890:	b002      	add	sp, #8
 800f892:	4770      	bx	lr
 800f894:	4610      	mov	r0, r2
 800f896:	e7fb      	b.n	800f890 <__ascii_mbtowc+0x16>
 800f898:	f06f 0001 	mvn.w	r0, #1
 800f89c:	e7f8      	b.n	800f890 <__ascii_mbtowc+0x16>
	...

0800f8a0 <_Balloc>:
 800f8a0:	b570      	push	{r4, r5, r6, lr}
 800f8a2:	69c6      	ldr	r6, [r0, #28]
 800f8a4:	4604      	mov	r4, r0
 800f8a6:	460d      	mov	r5, r1
 800f8a8:	b976      	cbnz	r6, 800f8c8 <_Balloc+0x28>
 800f8aa:	2010      	movs	r0, #16
 800f8ac:	f7fc fcd2 	bl	800c254 <malloc>
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	61e0      	str	r0, [r4, #28]
 800f8b4:	b920      	cbnz	r0, 800f8c0 <_Balloc+0x20>
 800f8b6:	216b      	movs	r1, #107	@ 0x6b
 800f8b8:	4b17      	ldr	r3, [pc, #92]	@ (800f918 <_Balloc+0x78>)
 800f8ba:	4818      	ldr	r0, [pc, #96]	@ (800f91c <_Balloc+0x7c>)
 800f8bc:	f7fc fca4 	bl	800c208 <__assert_func>
 800f8c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8c4:	6006      	str	r6, [r0, #0]
 800f8c6:	60c6      	str	r6, [r0, #12]
 800f8c8:	69e6      	ldr	r6, [r4, #28]
 800f8ca:	68f3      	ldr	r3, [r6, #12]
 800f8cc:	b183      	cbz	r3, 800f8f0 <_Balloc+0x50>
 800f8ce:	69e3      	ldr	r3, [r4, #28]
 800f8d0:	68db      	ldr	r3, [r3, #12]
 800f8d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8d6:	b9b8      	cbnz	r0, 800f908 <_Balloc+0x68>
 800f8d8:	2101      	movs	r1, #1
 800f8da:	fa01 f605 	lsl.w	r6, r1, r5
 800f8de:	1d72      	adds	r2, r6, #5
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	0092      	lsls	r2, r2, #2
 800f8e4:	f001 f8aa 	bl	8010a3c <_calloc_r>
 800f8e8:	b160      	cbz	r0, 800f904 <_Balloc+0x64>
 800f8ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8ee:	e00e      	b.n	800f90e <_Balloc+0x6e>
 800f8f0:	2221      	movs	r2, #33	@ 0x21
 800f8f2:	2104      	movs	r1, #4
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	f001 f8a1 	bl	8010a3c <_calloc_r>
 800f8fa:	69e3      	ldr	r3, [r4, #28]
 800f8fc:	60f0      	str	r0, [r6, #12]
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d1e4      	bne.n	800f8ce <_Balloc+0x2e>
 800f904:	2000      	movs	r0, #0
 800f906:	bd70      	pop	{r4, r5, r6, pc}
 800f908:	6802      	ldr	r2, [r0, #0]
 800f90a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f90e:	2300      	movs	r3, #0
 800f910:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f914:	e7f7      	b.n	800f906 <_Balloc+0x66>
 800f916:	bf00      	nop
 800f918:	080112c5 	.word	0x080112c5
 800f91c:	080113a5 	.word	0x080113a5

0800f920 <_Bfree>:
 800f920:	b570      	push	{r4, r5, r6, lr}
 800f922:	69c6      	ldr	r6, [r0, #28]
 800f924:	4605      	mov	r5, r0
 800f926:	460c      	mov	r4, r1
 800f928:	b976      	cbnz	r6, 800f948 <_Bfree+0x28>
 800f92a:	2010      	movs	r0, #16
 800f92c:	f7fc fc92 	bl	800c254 <malloc>
 800f930:	4602      	mov	r2, r0
 800f932:	61e8      	str	r0, [r5, #28]
 800f934:	b920      	cbnz	r0, 800f940 <_Bfree+0x20>
 800f936:	218f      	movs	r1, #143	@ 0x8f
 800f938:	4b08      	ldr	r3, [pc, #32]	@ (800f95c <_Bfree+0x3c>)
 800f93a:	4809      	ldr	r0, [pc, #36]	@ (800f960 <_Bfree+0x40>)
 800f93c:	f7fc fc64 	bl	800c208 <__assert_func>
 800f940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f944:	6006      	str	r6, [r0, #0]
 800f946:	60c6      	str	r6, [r0, #12]
 800f948:	b13c      	cbz	r4, 800f95a <_Bfree+0x3a>
 800f94a:	69eb      	ldr	r3, [r5, #28]
 800f94c:	6862      	ldr	r2, [r4, #4]
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f954:	6021      	str	r1, [r4, #0]
 800f956:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f95a:	bd70      	pop	{r4, r5, r6, pc}
 800f95c:	080112c5 	.word	0x080112c5
 800f960:	080113a5 	.word	0x080113a5

0800f964 <__multadd>:
 800f964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f968:	4607      	mov	r7, r0
 800f96a:	460c      	mov	r4, r1
 800f96c:	461e      	mov	r6, r3
 800f96e:	2000      	movs	r0, #0
 800f970:	690d      	ldr	r5, [r1, #16]
 800f972:	f101 0c14 	add.w	ip, r1, #20
 800f976:	f8dc 3000 	ldr.w	r3, [ip]
 800f97a:	3001      	adds	r0, #1
 800f97c:	b299      	uxth	r1, r3
 800f97e:	fb02 6101 	mla	r1, r2, r1, r6
 800f982:	0c1e      	lsrs	r6, r3, #16
 800f984:	0c0b      	lsrs	r3, r1, #16
 800f986:	fb02 3306 	mla	r3, r2, r6, r3
 800f98a:	b289      	uxth	r1, r1
 800f98c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f990:	4285      	cmp	r5, r0
 800f992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f996:	f84c 1b04 	str.w	r1, [ip], #4
 800f99a:	dcec      	bgt.n	800f976 <__multadd+0x12>
 800f99c:	b30e      	cbz	r6, 800f9e2 <__multadd+0x7e>
 800f99e:	68a3      	ldr	r3, [r4, #8]
 800f9a0:	42ab      	cmp	r3, r5
 800f9a2:	dc19      	bgt.n	800f9d8 <__multadd+0x74>
 800f9a4:	6861      	ldr	r1, [r4, #4]
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	3101      	adds	r1, #1
 800f9aa:	f7ff ff79 	bl	800f8a0 <_Balloc>
 800f9ae:	4680      	mov	r8, r0
 800f9b0:	b928      	cbnz	r0, 800f9be <__multadd+0x5a>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	21ba      	movs	r1, #186	@ 0xba
 800f9b6:	4b0c      	ldr	r3, [pc, #48]	@ (800f9e8 <__multadd+0x84>)
 800f9b8:	480c      	ldr	r0, [pc, #48]	@ (800f9ec <__multadd+0x88>)
 800f9ba:	f7fc fc25 	bl	800c208 <__assert_func>
 800f9be:	6922      	ldr	r2, [r4, #16]
 800f9c0:	f104 010c 	add.w	r1, r4, #12
 800f9c4:	3202      	adds	r2, #2
 800f9c6:	0092      	lsls	r2, r2, #2
 800f9c8:	300c      	adds	r0, #12
 800f9ca:	f7fe fd56 	bl	800e47a <memcpy>
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	4638      	mov	r0, r7
 800f9d2:	f7ff ffa5 	bl	800f920 <_Bfree>
 800f9d6:	4644      	mov	r4, r8
 800f9d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f9dc:	3501      	adds	r5, #1
 800f9de:	615e      	str	r6, [r3, #20]
 800f9e0:	6125      	str	r5, [r4, #16]
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9e8:	08011334 	.word	0x08011334
 800f9ec:	080113a5 	.word	0x080113a5

0800f9f0 <__s2b>:
 800f9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9f4:	4615      	mov	r5, r2
 800f9f6:	2209      	movs	r2, #9
 800f9f8:	461f      	mov	r7, r3
 800f9fa:	3308      	adds	r3, #8
 800f9fc:	460c      	mov	r4, r1
 800f9fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa02:	4606      	mov	r6, r0
 800fa04:	2201      	movs	r2, #1
 800fa06:	2100      	movs	r1, #0
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	db09      	blt.n	800fa20 <__s2b+0x30>
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f7ff ff47 	bl	800f8a0 <_Balloc>
 800fa12:	b940      	cbnz	r0, 800fa26 <__s2b+0x36>
 800fa14:	4602      	mov	r2, r0
 800fa16:	21d3      	movs	r1, #211	@ 0xd3
 800fa18:	4b18      	ldr	r3, [pc, #96]	@ (800fa7c <__s2b+0x8c>)
 800fa1a:	4819      	ldr	r0, [pc, #100]	@ (800fa80 <__s2b+0x90>)
 800fa1c:	f7fc fbf4 	bl	800c208 <__assert_func>
 800fa20:	0052      	lsls	r2, r2, #1
 800fa22:	3101      	adds	r1, #1
 800fa24:	e7f0      	b.n	800fa08 <__s2b+0x18>
 800fa26:	9b08      	ldr	r3, [sp, #32]
 800fa28:	2d09      	cmp	r5, #9
 800fa2a:	6143      	str	r3, [r0, #20]
 800fa2c:	f04f 0301 	mov.w	r3, #1
 800fa30:	6103      	str	r3, [r0, #16]
 800fa32:	dd16      	ble.n	800fa62 <__s2b+0x72>
 800fa34:	f104 0909 	add.w	r9, r4, #9
 800fa38:	46c8      	mov	r8, r9
 800fa3a:	442c      	add	r4, r5
 800fa3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa40:	4601      	mov	r1, r0
 800fa42:	220a      	movs	r2, #10
 800fa44:	4630      	mov	r0, r6
 800fa46:	3b30      	subs	r3, #48	@ 0x30
 800fa48:	f7ff ff8c 	bl	800f964 <__multadd>
 800fa4c:	45a0      	cmp	r8, r4
 800fa4e:	d1f5      	bne.n	800fa3c <__s2b+0x4c>
 800fa50:	f1a5 0408 	sub.w	r4, r5, #8
 800fa54:	444c      	add	r4, r9
 800fa56:	1b2d      	subs	r5, r5, r4
 800fa58:	1963      	adds	r3, r4, r5
 800fa5a:	42bb      	cmp	r3, r7
 800fa5c:	db04      	blt.n	800fa68 <__s2b+0x78>
 800fa5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa62:	2509      	movs	r5, #9
 800fa64:	340a      	adds	r4, #10
 800fa66:	e7f6      	b.n	800fa56 <__s2b+0x66>
 800fa68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa6c:	4601      	mov	r1, r0
 800fa6e:	220a      	movs	r2, #10
 800fa70:	4630      	mov	r0, r6
 800fa72:	3b30      	subs	r3, #48	@ 0x30
 800fa74:	f7ff ff76 	bl	800f964 <__multadd>
 800fa78:	e7ee      	b.n	800fa58 <__s2b+0x68>
 800fa7a:	bf00      	nop
 800fa7c:	08011334 	.word	0x08011334
 800fa80:	080113a5 	.word	0x080113a5

0800fa84 <__hi0bits>:
 800fa84:	4603      	mov	r3, r0
 800fa86:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fa8a:	bf3a      	itte	cc
 800fa8c:	0403      	lslcc	r3, r0, #16
 800fa8e:	2010      	movcc	r0, #16
 800fa90:	2000      	movcs	r0, #0
 800fa92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fa96:	bf3c      	itt	cc
 800fa98:	021b      	lslcc	r3, r3, #8
 800fa9a:	3008      	addcc	r0, #8
 800fa9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800faa0:	bf3c      	itt	cc
 800faa2:	011b      	lslcc	r3, r3, #4
 800faa4:	3004      	addcc	r0, #4
 800faa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800faaa:	bf3c      	itt	cc
 800faac:	009b      	lslcc	r3, r3, #2
 800faae:	3002      	addcc	r0, #2
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	db05      	blt.n	800fac0 <__hi0bits+0x3c>
 800fab4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fab8:	f100 0001 	add.w	r0, r0, #1
 800fabc:	bf08      	it	eq
 800fabe:	2020      	moveq	r0, #32
 800fac0:	4770      	bx	lr

0800fac2 <__lo0bits>:
 800fac2:	6803      	ldr	r3, [r0, #0]
 800fac4:	4602      	mov	r2, r0
 800fac6:	f013 0007 	ands.w	r0, r3, #7
 800faca:	d00b      	beq.n	800fae4 <__lo0bits+0x22>
 800facc:	07d9      	lsls	r1, r3, #31
 800face:	d421      	bmi.n	800fb14 <__lo0bits+0x52>
 800fad0:	0798      	lsls	r0, r3, #30
 800fad2:	bf49      	itett	mi
 800fad4:	085b      	lsrmi	r3, r3, #1
 800fad6:	089b      	lsrpl	r3, r3, #2
 800fad8:	2001      	movmi	r0, #1
 800fada:	6013      	strmi	r3, [r2, #0]
 800fadc:	bf5c      	itt	pl
 800fade:	2002      	movpl	r0, #2
 800fae0:	6013      	strpl	r3, [r2, #0]
 800fae2:	4770      	bx	lr
 800fae4:	b299      	uxth	r1, r3
 800fae6:	b909      	cbnz	r1, 800faec <__lo0bits+0x2a>
 800fae8:	2010      	movs	r0, #16
 800faea:	0c1b      	lsrs	r3, r3, #16
 800faec:	b2d9      	uxtb	r1, r3
 800faee:	b909      	cbnz	r1, 800faf4 <__lo0bits+0x32>
 800faf0:	3008      	adds	r0, #8
 800faf2:	0a1b      	lsrs	r3, r3, #8
 800faf4:	0719      	lsls	r1, r3, #28
 800faf6:	bf04      	itt	eq
 800faf8:	091b      	lsreq	r3, r3, #4
 800fafa:	3004      	addeq	r0, #4
 800fafc:	0799      	lsls	r1, r3, #30
 800fafe:	bf04      	itt	eq
 800fb00:	089b      	lsreq	r3, r3, #2
 800fb02:	3002      	addeq	r0, #2
 800fb04:	07d9      	lsls	r1, r3, #31
 800fb06:	d403      	bmi.n	800fb10 <__lo0bits+0x4e>
 800fb08:	085b      	lsrs	r3, r3, #1
 800fb0a:	f100 0001 	add.w	r0, r0, #1
 800fb0e:	d003      	beq.n	800fb18 <__lo0bits+0x56>
 800fb10:	6013      	str	r3, [r2, #0]
 800fb12:	4770      	bx	lr
 800fb14:	2000      	movs	r0, #0
 800fb16:	4770      	bx	lr
 800fb18:	2020      	movs	r0, #32
 800fb1a:	4770      	bx	lr

0800fb1c <__i2b>:
 800fb1c:	b510      	push	{r4, lr}
 800fb1e:	460c      	mov	r4, r1
 800fb20:	2101      	movs	r1, #1
 800fb22:	f7ff febd 	bl	800f8a0 <_Balloc>
 800fb26:	4602      	mov	r2, r0
 800fb28:	b928      	cbnz	r0, 800fb36 <__i2b+0x1a>
 800fb2a:	f240 1145 	movw	r1, #325	@ 0x145
 800fb2e:	4b04      	ldr	r3, [pc, #16]	@ (800fb40 <__i2b+0x24>)
 800fb30:	4804      	ldr	r0, [pc, #16]	@ (800fb44 <__i2b+0x28>)
 800fb32:	f7fc fb69 	bl	800c208 <__assert_func>
 800fb36:	2301      	movs	r3, #1
 800fb38:	6144      	str	r4, [r0, #20]
 800fb3a:	6103      	str	r3, [r0, #16]
 800fb3c:	bd10      	pop	{r4, pc}
 800fb3e:	bf00      	nop
 800fb40:	08011334 	.word	0x08011334
 800fb44:	080113a5 	.word	0x080113a5

0800fb48 <__multiply>:
 800fb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb4c:	4617      	mov	r7, r2
 800fb4e:	690a      	ldr	r2, [r1, #16]
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	4689      	mov	r9, r1
 800fb54:	429a      	cmp	r2, r3
 800fb56:	bfa2      	ittt	ge
 800fb58:	463b      	movge	r3, r7
 800fb5a:	460f      	movge	r7, r1
 800fb5c:	4699      	movge	r9, r3
 800fb5e:	693d      	ldr	r5, [r7, #16]
 800fb60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	6879      	ldr	r1, [r7, #4]
 800fb68:	eb05 060a 	add.w	r6, r5, sl
 800fb6c:	42b3      	cmp	r3, r6
 800fb6e:	b085      	sub	sp, #20
 800fb70:	bfb8      	it	lt
 800fb72:	3101      	addlt	r1, #1
 800fb74:	f7ff fe94 	bl	800f8a0 <_Balloc>
 800fb78:	b930      	cbnz	r0, 800fb88 <__multiply+0x40>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fb80:	4b40      	ldr	r3, [pc, #256]	@ (800fc84 <__multiply+0x13c>)
 800fb82:	4841      	ldr	r0, [pc, #260]	@ (800fc88 <__multiply+0x140>)
 800fb84:	f7fc fb40 	bl	800c208 <__assert_func>
 800fb88:	f100 0414 	add.w	r4, r0, #20
 800fb8c:	4623      	mov	r3, r4
 800fb8e:	2200      	movs	r2, #0
 800fb90:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fb94:	4573      	cmp	r3, lr
 800fb96:	d320      	bcc.n	800fbda <__multiply+0x92>
 800fb98:	f107 0814 	add.w	r8, r7, #20
 800fb9c:	f109 0114 	add.w	r1, r9, #20
 800fba0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fba4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fba8:	9302      	str	r3, [sp, #8]
 800fbaa:	1beb      	subs	r3, r5, r7
 800fbac:	3b15      	subs	r3, #21
 800fbae:	f023 0303 	bic.w	r3, r3, #3
 800fbb2:	3304      	adds	r3, #4
 800fbb4:	3715      	adds	r7, #21
 800fbb6:	42bd      	cmp	r5, r7
 800fbb8:	bf38      	it	cc
 800fbba:	2304      	movcc	r3, #4
 800fbbc:	9301      	str	r3, [sp, #4]
 800fbbe:	9b02      	ldr	r3, [sp, #8]
 800fbc0:	9103      	str	r1, [sp, #12]
 800fbc2:	428b      	cmp	r3, r1
 800fbc4:	d80c      	bhi.n	800fbe0 <__multiply+0x98>
 800fbc6:	2e00      	cmp	r6, #0
 800fbc8:	dd03      	ble.n	800fbd2 <__multiply+0x8a>
 800fbca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d055      	beq.n	800fc7e <__multiply+0x136>
 800fbd2:	6106      	str	r6, [r0, #16]
 800fbd4:	b005      	add	sp, #20
 800fbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbda:	f843 2b04 	str.w	r2, [r3], #4
 800fbde:	e7d9      	b.n	800fb94 <__multiply+0x4c>
 800fbe0:	f8b1 a000 	ldrh.w	sl, [r1]
 800fbe4:	f1ba 0f00 	cmp.w	sl, #0
 800fbe8:	d01f      	beq.n	800fc2a <__multiply+0xe2>
 800fbea:	46c4      	mov	ip, r8
 800fbec:	46a1      	mov	r9, r4
 800fbee:	2700      	movs	r7, #0
 800fbf0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fbf4:	f8d9 3000 	ldr.w	r3, [r9]
 800fbf8:	fa1f fb82 	uxth.w	fp, r2
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	fb0a 330b 	mla	r3, sl, fp, r3
 800fc02:	443b      	add	r3, r7
 800fc04:	f8d9 7000 	ldr.w	r7, [r9]
 800fc08:	0c12      	lsrs	r2, r2, #16
 800fc0a:	0c3f      	lsrs	r7, r7, #16
 800fc0c:	fb0a 7202 	mla	r2, sl, r2, r7
 800fc10:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc1a:	4565      	cmp	r5, ip
 800fc1c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fc20:	f849 3b04 	str.w	r3, [r9], #4
 800fc24:	d8e4      	bhi.n	800fbf0 <__multiply+0xa8>
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	50e7      	str	r7, [r4, r3]
 800fc2a:	9b03      	ldr	r3, [sp, #12]
 800fc2c:	3104      	adds	r1, #4
 800fc2e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fc32:	f1b9 0f00 	cmp.w	r9, #0
 800fc36:	d020      	beq.n	800fc7a <__multiply+0x132>
 800fc38:	4647      	mov	r7, r8
 800fc3a:	46a4      	mov	ip, r4
 800fc3c:	f04f 0a00 	mov.w	sl, #0
 800fc40:	6823      	ldr	r3, [r4, #0]
 800fc42:	f8b7 b000 	ldrh.w	fp, [r7]
 800fc46:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	fb09 220b 	mla	r2, r9, fp, r2
 800fc50:	4452      	add	r2, sl
 800fc52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc56:	f84c 3b04 	str.w	r3, [ip], #4
 800fc5a:	f857 3b04 	ldr.w	r3, [r7], #4
 800fc5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc62:	f8bc 3000 	ldrh.w	r3, [ip]
 800fc66:	42bd      	cmp	r5, r7
 800fc68:	fb09 330a 	mla	r3, r9, sl, r3
 800fc6c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fc70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc74:	d8e5      	bhi.n	800fc42 <__multiply+0xfa>
 800fc76:	9a01      	ldr	r2, [sp, #4]
 800fc78:	50a3      	str	r3, [r4, r2]
 800fc7a:	3404      	adds	r4, #4
 800fc7c:	e79f      	b.n	800fbbe <__multiply+0x76>
 800fc7e:	3e01      	subs	r6, #1
 800fc80:	e7a1      	b.n	800fbc6 <__multiply+0x7e>
 800fc82:	bf00      	nop
 800fc84:	08011334 	.word	0x08011334
 800fc88:	080113a5 	.word	0x080113a5

0800fc8c <__pow5mult>:
 800fc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc90:	4615      	mov	r5, r2
 800fc92:	f012 0203 	ands.w	r2, r2, #3
 800fc96:	4607      	mov	r7, r0
 800fc98:	460e      	mov	r6, r1
 800fc9a:	d007      	beq.n	800fcac <__pow5mult+0x20>
 800fc9c:	4c25      	ldr	r4, [pc, #148]	@ (800fd34 <__pow5mult+0xa8>)
 800fc9e:	3a01      	subs	r2, #1
 800fca0:	2300      	movs	r3, #0
 800fca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fca6:	f7ff fe5d 	bl	800f964 <__multadd>
 800fcaa:	4606      	mov	r6, r0
 800fcac:	10ad      	asrs	r5, r5, #2
 800fcae:	d03d      	beq.n	800fd2c <__pow5mult+0xa0>
 800fcb0:	69fc      	ldr	r4, [r7, #28]
 800fcb2:	b97c      	cbnz	r4, 800fcd4 <__pow5mult+0x48>
 800fcb4:	2010      	movs	r0, #16
 800fcb6:	f7fc facd 	bl	800c254 <malloc>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	61f8      	str	r0, [r7, #28]
 800fcbe:	b928      	cbnz	r0, 800fccc <__pow5mult+0x40>
 800fcc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fcc4:	4b1c      	ldr	r3, [pc, #112]	@ (800fd38 <__pow5mult+0xac>)
 800fcc6:	481d      	ldr	r0, [pc, #116]	@ (800fd3c <__pow5mult+0xb0>)
 800fcc8:	f7fc fa9e 	bl	800c208 <__assert_func>
 800fccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcd0:	6004      	str	r4, [r0, #0]
 800fcd2:	60c4      	str	r4, [r0, #12]
 800fcd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fcd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fcdc:	b94c      	cbnz	r4, 800fcf2 <__pow5mult+0x66>
 800fcde:	f240 2171 	movw	r1, #625	@ 0x271
 800fce2:	4638      	mov	r0, r7
 800fce4:	f7ff ff1a 	bl	800fb1c <__i2b>
 800fce8:	2300      	movs	r3, #0
 800fcea:	4604      	mov	r4, r0
 800fcec:	f8c8 0008 	str.w	r0, [r8, #8]
 800fcf0:	6003      	str	r3, [r0, #0]
 800fcf2:	f04f 0900 	mov.w	r9, #0
 800fcf6:	07eb      	lsls	r3, r5, #31
 800fcf8:	d50a      	bpl.n	800fd10 <__pow5mult+0x84>
 800fcfa:	4631      	mov	r1, r6
 800fcfc:	4622      	mov	r2, r4
 800fcfe:	4638      	mov	r0, r7
 800fd00:	f7ff ff22 	bl	800fb48 <__multiply>
 800fd04:	4680      	mov	r8, r0
 800fd06:	4631      	mov	r1, r6
 800fd08:	4638      	mov	r0, r7
 800fd0a:	f7ff fe09 	bl	800f920 <_Bfree>
 800fd0e:	4646      	mov	r6, r8
 800fd10:	106d      	asrs	r5, r5, #1
 800fd12:	d00b      	beq.n	800fd2c <__pow5mult+0xa0>
 800fd14:	6820      	ldr	r0, [r4, #0]
 800fd16:	b938      	cbnz	r0, 800fd28 <__pow5mult+0x9c>
 800fd18:	4622      	mov	r2, r4
 800fd1a:	4621      	mov	r1, r4
 800fd1c:	4638      	mov	r0, r7
 800fd1e:	f7ff ff13 	bl	800fb48 <__multiply>
 800fd22:	6020      	str	r0, [r4, #0]
 800fd24:	f8c0 9000 	str.w	r9, [r0]
 800fd28:	4604      	mov	r4, r0
 800fd2a:	e7e4      	b.n	800fcf6 <__pow5mult+0x6a>
 800fd2c:	4630      	mov	r0, r6
 800fd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd32:	bf00      	nop
 800fd34:	08011564 	.word	0x08011564
 800fd38:	080112c5 	.word	0x080112c5
 800fd3c:	080113a5 	.word	0x080113a5

0800fd40 <__lshift>:
 800fd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd44:	460c      	mov	r4, r1
 800fd46:	4607      	mov	r7, r0
 800fd48:	4691      	mov	r9, r2
 800fd4a:	6923      	ldr	r3, [r4, #16]
 800fd4c:	6849      	ldr	r1, [r1, #4]
 800fd4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd52:	68a3      	ldr	r3, [r4, #8]
 800fd54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd58:	f108 0601 	add.w	r6, r8, #1
 800fd5c:	42b3      	cmp	r3, r6
 800fd5e:	db0b      	blt.n	800fd78 <__lshift+0x38>
 800fd60:	4638      	mov	r0, r7
 800fd62:	f7ff fd9d 	bl	800f8a0 <_Balloc>
 800fd66:	4605      	mov	r5, r0
 800fd68:	b948      	cbnz	r0, 800fd7e <__lshift+0x3e>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fd70:	4b27      	ldr	r3, [pc, #156]	@ (800fe10 <__lshift+0xd0>)
 800fd72:	4828      	ldr	r0, [pc, #160]	@ (800fe14 <__lshift+0xd4>)
 800fd74:	f7fc fa48 	bl	800c208 <__assert_func>
 800fd78:	3101      	adds	r1, #1
 800fd7a:	005b      	lsls	r3, r3, #1
 800fd7c:	e7ee      	b.n	800fd5c <__lshift+0x1c>
 800fd7e:	2300      	movs	r3, #0
 800fd80:	f100 0114 	add.w	r1, r0, #20
 800fd84:	f100 0210 	add.w	r2, r0, #16
 800fd88:	4618      	mov	r0, r3
 800fd8a:	4553      	cmp	r3, sl
 800fd8c:	db33      	blt.n	800fdf6 <__lshift+0xb6>
 800fd8e:	6920      	ldr	r0, [r4, #16]
 800fd90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd94:	f104 0314 	add.w	r3, r4, #20
 800fd98:	f019 091f 	ands.w	r9, r9, #31
 800fd9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fda0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fda4:	d02b      	beq.n	800fdfe <__lshift+0xbe>
 800fda6:	468a      	mov	sl, r1
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f1c9 0e20 	rsb	lr, r9, #32
 800fdae:	6818      	ldr	r0, [r3, #0]
 800fdb0:	fa00 f009 	lsl.w	r0, r0, r9
 800fdb4:	4310      	orrs	r0, r2
 800fdb6:	f84a 0b04 	str.w	r0, [sl], #4
 800fdba:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdbe:	459c      	cmp	ip, r3
 800fdc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800fdc4:	d8f3      	bhi.n	800fdae <__lshift+0x6e>
 800fdc6:	ebac 0304 	sub.w	r3, ip, r4
 800fdca:	3b15      	subs	r3, #21
 800fdcc:	f023 0303 	bic.w	r3, r3, #3
 800fdd0:	3304      	adds	r3, #4
 800fdd2:	f104 0015 	add.w	r0, r4, #21
 800fdd6:	4560      	cmp	r0, ip
 800fdd8:	bf88      	it	hi
 800fdda:	2304      	movhi	r3, #4
 800fddc:	50ca      	str	r2, [r1, r3]
 800fdde:	b10a      	cbz	r2, 800fde4 <__lshift+0xa4>
 800fde0:	f108 0602 	add.w	r6, r8, #2
 800fde4:	3e01      	subs	r6, #1
 800fde6:	4638      	mov	r0, r7
 800fde8:	4621      	mov	r1, r4
 800fdea:	612e      	str	r6, [r5, #16]
 800fdec:	f7ff fd98 	bl	800f920 <_Bfree>
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	e7c5      	b.n	800fd8a <__lshift+0x4a>
 800fdfe:	3904      	subs	r1, #4
 800fe00:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe04:	459c      	cmp	ip, r3
 800fe06:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe0a:	d8f9      	bhi.n	800fe00 <__lshift+0xc0>
 800fe0c:	e7ea      	b.n	800fde4 <__lshift+0xa4>
 800fe0e:	bf00      	nop
 800fe10:	08011334 	.word	0x08011334
 800fe14:	080113a5 	.word	0x080113a5

0800fe18 <__mcmp>:
 800fe18:	4603      	mov	r3, r0
 800fe1a:	690a      	ldr	r2, [r1, #16]
 800fe1c:	6900      	ldr	r0, [r0, #16]
 800fe1e:	b530      	push	{r4, r5, lr}
 800fe20:	1a80      	subs	r0, r0, r2
 800fe22:	d10e      	bne.n	800fe42 <__mcmp+0x2a>
 800fe24:	3314      	adds	r3, #20
 800fe26:	3114      	adds	r1, #20
 800fe28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fe2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fe30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fe34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fe38:	4295      	cmp	r5, r2
 800fe3a:	d003      	beq.n	800fe44 <__mcmp+0x2c>
 800fe3c:	d205      	bcs.n	800fe4a <__mcmp+0x32>
 800fe3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe42:	bd30      	pop	{r4, r5, pc}
 800fe44:	42a3      	cmp	r3, r4
 800fe46:	d3f3      	bcc.n	800fe30 <__mcmp+0x18>
 800fe48:	e7fb      	b.n	800fe42 <__mcmp+0x2a>
 800fe4a:	2001      	movs	r0, #1
 800fe4c:	e7f9      	b.n	800fe42 <__mcmp+0x2a>
	...

0800fe50 <__mdiff>:
 800fe50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe54:	4689      	mov	r9, r1
 800fe56:	4606      	mov	r6, r0
 800fe58:	4611      	mov	r1, r2
 800fe5a:	4648      	mov	r0, r9
 800fe5c:	4614      	mov	r4, r2
 800fe5e:	f7ff ffdb 	bl	800fe18 <__mcmp>
 800fe62:	1e05      	subs	r5, r0, #0
 800fe64:	d112      	bne.n	800fe8c <__mdiff+0x3c>
 800fe66:	4629      	mov	r1, r5
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f7ff fd19 	bl	800f8a0 <_Balloc>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	b928      	cbnz	r0, 800fe7e <__mdiff+0x2e>
 800fe72:	f240 2137 	movw	r1, #567	@ 0x237
 800fe76:	4b3e      	ldr	r3, [pc, #248]	@ (800ff70 <__mdiff+0x120>)
 800fe78:	483e      	ldr	r0, [pc, #248]	@ (800ff74 <__mdiff+0x124>)
 800fe7a:	f7fc f9c5 	bl	800c208 <__assert_func>
 800fe7e:	2301      	movs	r3, #1
 800fe80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe84:	4610      	mov	r0, r2
 800fe86:	b003      	add	sp, #12
 800fe88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8c:	bfbc      	itt	lt
 800fe8e:	464b      	movlt	r3, r9
 800fe90:	46a1      	movlt	r9, r4
 800fe92:	4630      	mov	r0, r6
 800fe94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fe98:	bfba      	itte	lt
 800fe9a:	461c      	movlt	r4, r3
 800fe9c:	2501      	movlt	r5, #1
 800fe9e:	2500      	movge	r5, #0
 800fea0:	f7ff fcfe 	bl	800f8a0 <_Balloc>
 800fea4:	4602      	mov	r2, r0
 800fea6:	b918      	cbnz	r0, 800feb0 <__mdiff+0x60>
 800fea8:	f240 2145 	movw	r1, #581	@ 0x245
 800feac:	4b30      	ldr	r3, [pc, #192]	@ (800ff70 <__mdiff+0x120>)
 800feae:	e7e3      	b.n	800fe78 <__mdiff+0x28>
 800feb0:	f100 0b14 	add.w	fp, r0, #20
 800feb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800feb8:	f109 0310 	add.w	r3, r9, #16
 800febc:	60c5      	str	r5, [r0, #12]
 800febe:	f04f 0c00 	mov.w	ip, #0
 800fec2:	f109 0514 	add.w	r5, r9, #20
 800fec6:	46d9      	mov	r9, fp
 800fec8:	6926      	ldr	r6, [r4, #16]
 800feca:	f104 0e14 	add.w	lr, r4, #20
 800fece:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fed2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fed6:	9301      	str	r3, [sp, #4]
 800fed8:	9b01      	ldr	r3, [sp, #4]
 800feda:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fede:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fee2:	b281      	uxth	r1, r0
 800fee4:	9301      	str	r3, [sp, #4]
 800fee6:	fa1f f38a 	uxth.w	r3, sl
 800feea:	1a5b      	subs	r3, r3, r1
 800feec:	0c00      	lsrs	r0, r0, #16
 800feee:	4463      	add	r3, ip
 800fef0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fef4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fefe:	4576      	cmp	r6, lr
 800ff00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff04:	f849 3b04 	str.w	r3, [r9], #4
 800ff08:	d8e6      	bhi.n	800fed8 <__mdiff+0x88>
 800ff0a:	1b33      	subs	r3, r6, r4
 800ff0c:	3b15      	subs	r3, #21
 800ff0e:	f023 0303 	bic.w	r3, r3, #3
 800ff12:	3415      	adds	r4, #21
 800ff14:	3304      	adds	r3, #4
 800ff16:	42a6      	cmp	r6, r4
 800ff18:	bf38      	it	cc
 800ff1a:	2304      	movcc	r3, #4
 800ff1c:	441d      	add	r5, r3
 800ff1e:	445b      	add	r3, fp
 800ff20:	461e      	mov	r6, r3
 800ff22:	462c      	mov	r4, r5
 800ff24:	4544      	cmp	r4, r8
 800ff26:	d30e      	bcc.n	800ff46 <__mdiff+0xf6>
 800ff28:	f108 0103 	add.w	r1, r8, #3
 800ff2c:	1b49      	subs	r1, r1, r5
 800ff2e:	f021 0103 	bic.w	r1, r1, #3
 800ff32:	3d03      	subs	r5, #3
 800ff34:	45a8      	cmp	r8, r5
 800ff36:	bf38      	it	cc
 800ff38:	2100      	movcc	r1, #0
 800ff3a:	440b      	add	r3, r1
 800ff3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff40:	b199      	cbz	r1, 800ff6a <__mdiff+0x11a>
 800ff42:	6117      	str	r7, [r2, #16]
 800ff44:	e79e      	b.n	800fe84 <__mdiff+0x34>
 800ff46:	46e6      	mov	lr, ip
 800ff48:	f854 1b04 	ldr.w	r1, [r4], #4
 800ff4c:	fa1f fc81 	uxth.w	ip, r1
 800ff50:	44f4      	add	ip, lr
 800ff52:	0c08      	lsrs	r0, r1, #16
 800ff54:	4471      	add	r1, lr
 800ff56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ff5a:	b289      	uxth	r1, r1
 800ff5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ff60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff64:	f846 1b04 	str.w	r1, [r6], #4
 800ff68:	e7dc      	b.n	800ff24 <__mdiff+0xd4>
 800ff6a:	3f01      	subs	r7, #1
 800ff6c:	e7e6      	b.n	800ff3c <__mdiff+0xec>
 800ff6e:	bf00      	nop
 800ff70:	08011334 	.word	0x08011334
 800ff74:	080113a5 	.word	0x080113a5

0800ff78 <__ulp>:
 800ff78:	4b0e      	ldr	r3, [pc, #56]	@ (800ffb4 <__ulp+0x3c>)
 800ff7a:	400b      	ands	r3, r1
 800ff7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	dc08      	bgt.n	800ff96 <__ulp+0x1e>
 800ff84:	425b      	negs	r3, r3
 800ff86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ff8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff8e:	da04      	bge.n	800ff9a <__ulp+0x22>
 800ff90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ff94:	4113      	asrs	r3, r2
 800ff96:	2200      	movs	r2, #0
 800ff98:	e008      	b.n	800ffac <__ulp+0x34>
 800ff9a:	f1a2 0314 	sub.w	r3, r2, #20
 800ff9e:	2b1e      	cmp	r3, #30
 800ffa0:	bfd6      	itet	le
 800ffa2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ffa6:	2201      	movgt	r2, #1
 800ffa8:	40da      	lsrle	r2, r3
 800ffaa:	2300      	movs	r3, #0
 800ffac:	4619      	mov	r1, r3
 800ffae:	4610      	mov	r0, r2
 800ffb0:	4770      	bx	lr
 800ffb2:	bf00      	nop
 800ffb4:	7ff00000 	.word	0x7ff00000

0800ffb8 <__b2d>:
 800ffb8:	6902      	ldr	r2, [r0, #16]
 800ffba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffbc:	f100 0614 	add.w	r6, r0, #20
 800ffc0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800ffc4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800ffc8:	4f1e      	ldr	r7, [pc, #120]	@ (8010044 <__b2d+0x8c>)
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f7ff fd5a 	bl	800fa84 <__hi0bits>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	f1c0 0020 	rsb	r0, r0, #32
 800ffd6:	2b0a      	cmp	r3, #10
 800ffd8:	f1a2 0504 	sub.w	r5, r2, #4
 800ffdc:	6008      	str	r0, [r1, #0]
 800ffde:	dc12      	bgt.n	8010006 <__b2d+0x4e>
 800ffe0:	42ae      	cmp	r6, r5
 800ffe2:	bf2c      	ite	cs
 800ffe4:	2200      	movcs	r2, #0
 800ffe6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800ffea:	f1c3 0c0b 	rsb	ip, r3, #11
 800ffee:	3315      	adds	r3, #21
 800fff0:	fa24 fe0c 	lsr.w	lr, r4, ip
 800fff4:	fa04 f303 	lsl.w	r3, r4, r3
 800fff8:	fa22 f20c 	lsr.w	r2, r2, ip
 800fffc:	ea4e 0107 	orr.w	r1, lr, r7
 8010000:	431a      	orrs	r2, r3
 8010002:	4610      	mov	r0, r2
 8010004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010006:	42ae      	cmp	r6, r5
 8010008:	bf36      	itet	cc
 801000a:	f1a2 0508 	subcc.w	r5, r2, #8
 801000e:	2200      	movcs	r2, #0
 8010010:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8010014:	3b0b      	subs	r3, #11
 8010016:	d012      	beq.n	801003e <__b2d+0x86>
 8010018:	f1c3 0720 	rsb	r7, r3, #32
 801001c:	fa22 f107 	lsr.w	r1, r2, r7
 8010020:	409c      	lsls	r4, r3
 8010022:	430c      	orrs	r4, r1
 8010024:	42b5      	cmp	r5, r6
 8010026:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 801002a:	bf94      	ite	ls
 801002c:	2400      	movls	r4, #0
 801002e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8010032:	409a      	lsls	r2, r3
 8010034:	40fc      	lsrs	r4, r7
 8010036:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801003a:	4322      	orrs	r2, r4
 801003c:	e7e1      	b.n	8010002 <__b2d+0x4a>
 801003e:	ea44 0107 	orr.w	r1, r4, r7
 8010042:	e7de      	b.n	8010002 <__b2d+0x4a>
 8010044:	3ff00000 	.word	0x3ff00000

08010048 <__d2b>:
 8010048:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801004c:	2101      	movs	r1, #1
 801004e:	4690      	mov	r8, r2
 8010050:	4699      	mov	r9, r3
 8010052:	9e08      	ldr	r6, [sp, #32]
 8010054:	f7ff fc24 	bl	800f8a0 <_Balloc>
 8010058:	4604      	mov	r4, r0
 801005a:	b930      	cbnz	r0, 801006a <__d2b+0x22>
 801005c:	4602      	mov	r2, r0
 801005e:	f240 310f 	movw	r1, #783	@ 0x30f
 8010062:	4b23      	ldr	r3, [pc, #140]	@ (80100f0 <__d2b+0xa8>)
 8010064:	4823      	ldr	r0, [pc, #140]	@ (80100f4 <__d2b+0xac>)
 8010066:	f7fc f8cf 	bl	800c208 <__assert_func>
 801006a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801006e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010072:	b10d      	cbz	r5, 8010078 <__d2b+0x30>
 8010074:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010078:	9301      	str	r3, [sp, #4]
 801007a:	f1b8 0300 	subs.w	r3, r8, #0
 801007e:	d024      	beq.n	80100ca <__d2b+0x82>
 8010080:	4668      	mov	r0, sp
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	f7ff fd1d 	bl	800fac2 <__lo0bits>
 8010088:	e9dd 1200 	ldrd	r1, r2, [sp]
 801008c:	b1d8      	cbz	r0, 80100c6 <__d2b+0x7e>
 801008e:	f1c0 0320 	rsb	r3, r0, #32
 8010092:	fa02 f303 	lsl.w	r3, r2, r3
 8010096:	430b      	orrs	r3, r1
 8010098:	40c2      	lsrs	r2, r0
 801009a:	6163      	str	r3, [r4, #20]
 801009c:	9201      	str	r2, [sp, #4]
 801009e:	9b01      	ldr	r3, [sp, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	bf0c      	ite	eq
 80100a4:	2201      	moveq	r2, #1
 80100a6:	2202      	movne	r2, #2
 80100a8:	61a3      	str	r3, [r4, #24]
 80100aa:	6122      	str	r2, [r4, #16]
 80100ac:	b1ad      	cbz	r5, 80100da <__d2b+0x92>
 80100ae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80100b2:	4405      	add	r5, r0
 80100b4:	6035      	str	r5, [r6, #0]
 80100b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80100ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100bc:	6018      	str	r0, [r3, #0]
 80100be:	4620      	mov	r0, r4
 80100c0:	b002      	add	sp, #8
 80100c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80100c6:	6161      	str	r1, [r4, #20]
 80100c8:	e7e9      	b.n	801009e <__d2b+0x56>
 80100ca:	a801      	add	r0, sp, #4
 80100cc:	f7ff fcf9 	bl	800fac2 <__lo0bits>
 80100d0:	9b01      	ldr	r3, [sp, #4]
 80100d2:	2201      	movs	r2, #1
 80100d4:	6163      	str	r3, [r4, #20]
 80100d6:	3020      	adds	r0, #32
 80100d8:	e7e7      	b.n	80100aa <__d2b+0x62>
 80100da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80100de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100e2:	6030      	str	r0, [r6, #0]
 80100e4:	6918      	ldr	r0, [r3, #16]
 80100e6:	f7ff fccd 	bl	800fa84 <__hi0bits>
 80100ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100ee:	e7e4      	b.n	80100ba <__d2b+0x72>
 80100f0:	08011334 	.word	0x08011334
 80100f4:	080113a5 	.word	0x080113a5

080100f8 <__ratio>:
 80100f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fc:	b085      	sub	sp, #20
 80100fe:	e9cd 1000 	strd	r1, r0, [sp]
 8010102:	a902      	add	r1, sp, #8
 8010104:	f7ff ff58 	bl	800ffb8 <__b2d>
 8010108:	468b      	mov	fp, r1
 801010a:	4606      	mov	r6, r0
 801010c:	460f      	mov	r7, r1
 801010e:	9800      	ldr	r0, [sp, #0]
 8010110:	a903      	add	r1, sp, #12
 8010112:	f7ff ff51 	bl	800ffb8 <__b2d>
 8010116:	460d      	mov	r5, r1
 8010118:	9b01      	ldr	r3, [sp, #4]
 801011a:	4689      	mov	r9, r1
 801011c:	6919      	ldr	r1, [r3, #16]
 801011e:	9b00      	ldr	r3, [sp, #0]
 8010120:	4604      	mov	r4, r0
 8010122:	691b      	ldr	r3, [r3, #16]
 8010124:	4630      	mov	r0, r6
 8010126:	1ac9      	subs	r1, r1, r3
 8010128:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801012c:	1a9b      	subs	r3, r3, r2
 801012e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010132:	2b00      	cmp	r3, #0
 8010134:	bfcd      	iteet	gt
 8010136:	463a      	movgt	r2, r7
 8010138:	462a      	movle	r2, r5
 801013a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801013e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010142:	bfd8      	it	le
 8010144:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010148:	464b      	mov	r3, r9
 801014a:	4622      	mov	r2, r4
 801014c:	4659      	mov	r1, fp
 801014e:	f7f0 faf7 	bl	8000740 <__aeabi_ddiv>
 8010152:	b005      	add	sp, #20
 8010154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010158 <__copybits>:
 8010158:	3901      	subs	r1, #1
 801015a:	b570      	push	{r4, r5, r6, lr}
 801015c:	1149      	asrs	r1, r1, #5
 801015e:	6914      	ldr	r4, [r2, #16]
 8010160:	3101      	adds	r1, #1
 8010162:	f102 0314 	add.w	r3, r2, #20
 8010166:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801016a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801016e:	1f05      	subs	r5, r0, #4
 8010170:	42a3      	cmp	r3, r4
 8010172:	d30c      	bcc.n	801018e <__copybits+0x36>
 8010174:	1aa3      	subs	r3, r4, r2
 8010176:	3b11      	subs	r3, #17
 8010178:	f023 0303 	bic.w	r3, r3, #3
 801017c:	3211      	adds	r2, #17
 801017e:	42a2      	cmp	r2, r4
 8010180:	bf88      	it	hi
 8010182:	2300      	movhi	r3, #0
 8010184:	4418      	add	r0, r3
 8010186:	2300      	movs	r3, #0
 8010188:	4288      	cmp	r0, r1
 801018a:	d305      	bcc.n	8010198 <__copybits+0x40>
 801018c:	bd70      	pop	{r4, r5, r6, pc}
 801018e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010192:	f845 6f04 	str.w	r6, [r5, #4]!
 8010196:	e7eb      	b.n	8010170 <__copybits+0x18>
 8010198:	f840 3b04 	str.w	r3, [r0], #4
 801019c:	e7f4      	b.n	8010188 <__copybits+0x30>

0801019e <__any_on>:
 801019e:	f100 0214 	add.w	r2, r0, #20
 80101a2:	6900      	ldr	r0, [r0, #16]
 80101a4:	114b      	asrs	r3, r1, #5
 80101a6:	4298      	cmp	r0, r3
 80101a8:	b510      	push	{r4, lr}
 80101aa:	db11      	blt.n	80101d0 <__any_on+0x32>
 80101ac:	dd0a      	ble.n	80101c4 <__any_on+0x26>
 80101ae:	f011 011f 	ands.w	r1, r1, #31
 80101b2:	d007      	beq.n	80101c4 <__any_on+0x26>
 80101b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80101b8:	fa24 f001 	lsr.w	r0, r4, r1
 80101bc:	fa00 f101 	lsl.w	r1, r0, r1
 80101c0:	428c      	cmp	r4, r1
 80101c2:	d10b      	bne.n	80101dc <__any_on+0x3e>
 80101c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d803      	bhi.n	80101d4 <__any_on+0x36>
 80101cc:	2000      	movs	r0, #0
 80101ce:	bd10      	pop	{r4, pc}
 80101d0:	4603      	mov	r3, r0
 80101d2:	e7f7      	b.n	80101c4 <__any_on+0x26>
 80101d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101d8:	2900      	cmp	r1, #0
 80101da:	d0f5      	beq.n	80101c8 <__any_on+0x2a>
 80101dc:	2001      	movs	r0, #1
 80101de:	e7f6      	b.n	80101ce <__any_on+0x30>

080101e0 <__ascii_wctomb>:
 80101e0:	4603      	mov	r3, r0
 80101e2:	4608      	mov	r0, r1
 80101e4:	b141      	cbz	r1, 80101f8 <__ascii_wctomb+0x18>
 80101e6:	2aff      	cmp	r2, #255	@ 0xff
 80101e8:	d904      	bls.n	80101f4 <__ascii_wctomb+0x14>
 80101ea:	228a      	movs	r2, #138	@ 0x8a
 80101ec:	f04f 30ff 	mov.w	r0, #4294967295
 80101f0:	601a      	str	r2, [r3, #0]
 80101f2:	4770      	bx	lr
 80101f4:	2001      	movs	r0, #1
 80101f6:	700a      	strb	r2, [r1, #0]
 80101f8:	4770      	bx	lr

080101fa <__ssputs_r>:
 80101fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101fe:	461f      	mov	r7, r3
 8010200:	688e      	ldr	r6, [r1, #8]
 8010202:	4682      	mov	sl, r0
 8010204:	42be      	cmp	r6, r7
 8010206:	460c      	mov	r4, r1
 8010208:	4690      	mov	r8, r2
 801020a:	680b      	ldr	r3, [r1, #0]
 801020c:	d82d      	bhi.n	801026a <__ssputs_r+0x70>
 801020e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010212:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010216:	d026      	beq.n	8010266 <__ssputs_r+0x6c>
 8010218:	6965      	ldr	r5, [r4, #20]
 801021a:	6909      	ldr	r1, [r1, #16]
 801021c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010220:	eba3 0901 	sub.w	r9, r3, r1
 8010224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010228:	1c7b      	adds	r3, r7, #1
 801022a:	444b      	add	r3, r9
 801022c:	106d      	asrs	r5, r5, #1
 801022e:	429d      	cmp	r5, r3
 8010230:	bf38      	it	cc
 8010232:	461d      	movcc	r5, r3
 8010234:	0553      	lsls	r3, r2, #21
 8010236:	d527      	bpl.n	8010288 <__ssputs_r+0x8e>
 8010238:	4629      	mov	r1, r5
 801023a:	f7fc f83d 	bl	800c2b8 <_malloc_r>
 801023e:	4606      	mov	r6, r0
 8010240:	b360      	cbz	r0, 801029c <__ssputs_r+0xa2>
 8010242:	464a      	mov	r2, r9
 8010244:	6921      	ldr	r1, [r4, #16]
 8010246:	f7fe f918 	bl	800e47a <memcpy>
 801024a:	89a3      	ldrh	r3, [r4, #12]
 801024c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010254:	81a3      	strh	r3, [r4, #12]
 8010256:	6126      	str	r6, [r4, #16]
 8010258:	444e      	add	r6, r9
 801025a:	6026      	str	r6, [r4, #0]
 801025c:	463e      	mov	r6, r7
 801025e:	6165      	str	r5, [r4, #20]
 8010260:	eba5 0509 	sub.w	r5, r5, r9
 8010264:	60a5      	str	r5, [r4, #8]
 8010266:	42be      	cmp	r6, r7
 8010268:	d900      	bls.n	801026c <__ssputs_r+0x72>
 801026a:	463e      	mov	r6, r7
 801026c:	4632      	mov	r2, r6
 801026e:	4641      	mov	r1, r8
 8010270:	6820      	ldr	r0, [r4, #0]
 8010272:	f000 fb62 	bl	801093a <memmove>
 8010276:	2000      	movs	r0, #0
 8010278:	68a3      	ldr	r3, [r4, #8]
 801027a:	1b9b      	subs	r3, r3, r6
 801027c:	60a3      	str	r3, [r4, #8]
 801027e:	6823      	ldr	r3, [r4, #0]
 8010280:	4433      	add	r3, r6
 8010282:	6023      	str	r3, [r4, #0]
 8010284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010288:	462a      	mov	r2, r5
 801028a:	f000 fbeb 	bl	8010a64 <_realloc_r>
 801028e:	4606      	mov	r6, r0
 8010290:	2800      	cmp	r0, #0
 8010292:	d1e0      	bne.n	8010256 <__ssputs_r+0x5c>
 8010294:	4650      	mov	r0, sl
 8010296:	6921      	ldr	r1, [r4, #16]
 8010298:	f7fe ff6e 	bl	800f178 <_free_r>
 801029c:	230c      	movs	r3, #12
 801029e:	f8ca 3000 	str.w	r3, [sl]
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	f04f 30ff 	mov.w	r0, #4294967295
 80102a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102ac:	81a3      	strh	r3, [r4, #12]
 80102ae:	e7e9      	b.n	8010284 <__ssputs_r+0x8a>

080102b0 <_svfiprintf_r>:
 80102b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b4:	4698      	mov	r8, r3
 80102b6:	898b      	ldrh	r3, [r1, #12]
 80102b8:	4607      	mov	r7, r0
 80102ba:	061b      	lsls	r3, r3, #24
 80102bc:	460d      	mov	r5, r1
 80102be:	4614      	mov	r4, r2
 80102c0:	b09d      	sub	sp, #116	@ 0x74
 80102c2:	d510      	bpl.n	80102e6 <_svfiprintf_r+0x36>
 80102c4:	690b      	ldr	r3, [r1, #16]
 80102c6:	b973      	cbnz	r3, 80102e6 <_svfiprintf_r+0x36>
 80102c8:	2140      	movs	r1, #64	@ 0x40
 80102ca:	f7fb fff5 	bl	800c2b8 <_malloc_r>
 80102ce:	6028      	str	r0, [r5, #0]
 80102d0:	6128      	str	r0, [r5, #16]
 80102d2:	b930      	cbnz	r0, 80102e2 <_svfiprintf_r+0x32>
 80102d4:	230c      	movs	r3, #12
 80102d6:	603b      	str	r3, [r7, #0]
 80102d8:	f04f 30ff 	mov.w	r0, #4294967295
 80102dc:	b01d      	add	sp, #116	@ 0x74
 80102de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e2:	2340      	movs	r3, #64	@ 0x40
 80102e4:	616b      	str	r3, [r5, #20]
 80102e6:	2300      	movs	r3, #0
 80102e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80102ea:	2320      	movs	r3, #32
 80102ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102f0:	2330      	movs	r3, #48	@ 0x30
 80102f2:	f04f 0901 	mov.w	r9, #1
 80102f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80102fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8010494 <_svfiprintf_r+0x1e4>
 80102fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010302:	4623      	mov	r3, r4
 8010304:	469a      	mov	sl, r3
 8010306:	f813 2b01 	ldrb.w	r2, [r3], #1
 801030a:	b10a      	cbz	r2, 8010310 <_svfiprintf_r+0x60>
 801030c:	2a25      	cmp	r2, #37	@ 0x25
 801030e:	d1f9      	bne.n	8010304 <_svfiprintf_r+0x54>
 8010310:	ebba 0b04 	subs.w	fp, sl, r4
 8010314:	d00b      	beq.n	801032e <_svfiprintf_r+0x7e>
 8010316:	465b      	mov	r3, fp
 8010318:	4622      	mov	r2, r4
 801031a:	4629      	mov	r1, r5
 801031c:	4638      	mov	r0, r7
 801031e:	f7ff ff6c 	bl	80101fa <__ssputs_r>
 8010322:	3001      	adds	r0, #1
 8010324:	f000 80a7 	beq.w	8010476 <_svfiprintf_r+0x1c6>
 8010328:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801032a:	445a      	add	r2, fp
 801032c:	9209      	str	r2, [sp, #36]	@ 0x24
 801032e:	f89a 3000 	ldrb.w	r3, [sl]
 8010332:	2b00      	cmp	r3, #0
 8010334:	f000 809f 	beq.w	8010476 <_svfiprintf_r+0x1c6>
 8010338:	2300      	movs	r3, #0
 801033a:	f04f 32ff 	mov.w	r2, #4294967295
 801033e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010342:	f10a 0a01 	add.w	sl, sl, #1
 8010346:	9304      	str	r3, [sp, #16]
 8010348:	9307      	str	r3, [sp, #28]
 801034a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801034e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010350:	4654      	mov	r4, sl
 8010352:	2205      	movs	r2, #5
 8010354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010358:	484e      	ldr	r0, [pc, #312]	@ (8010494 <_svfiprintf_r+0x1e4>)
 801035a:	f7fe f880 	bl	800e45e <memchr>
 801035e:	9a04      	ldr	r2, [sp, #16]
 8010360:	b9d8      	cbnz	r0, 801039a <_svfiprintf_r+0xea>
 8010362:	06d0      	lsls	r0, r2, #27
 8010364:	bf44      	itt	mi
 8010366:	2320      	movmi	r3, #32
 8010368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801036c:	0711      	lsls	r1, r2, #28
 801036e:	bf44      	itt	mi
 8010370:	232b      	movmi	r3, #43	@ 0x2b
 8010372:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010376:	f89a 3000 	ldrb.w	r3, [sl]
 801037a:	2b2a      	cmp	r3, #42	@ 0x2a
 801037c:	d015      	beq.n	80103aa <_svfiprintf_r+0xfa>
 801037e:	4654      	mov	r4, sl
 8010380:	2000      	movs	r0, #0
 8010382:	f04f 0c0a 	mov.w	ip, #10
 8010386:	9a07      	ldr	r2, [sp, #28]
 8010388:	4621      	mov	r1, r4
 801038a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801038e:	3b30      	subs	r3, #48	@ 0x30
 8010390:	2b09      	cmp	r3, #9
 8010392:	d94b      	bls.n	801042c <_svfiprintf_r+0x17c>
 8010394:	b1b0      	cbz	r0, 80103c4 <_svfiprintf_r+0x114>
 8010396:	9207      	str	r2, [sp, #28]
 8010398:	e014      	b.n	80103c4 <_svfiprintf_r+0x114>
 801039a:	eba0 0308 	sub.w	r3, r0, r8
 801039e:	fa09 f303 	lsl.w	r3, r9, r3
 80103a2:	4313      	orrs	r3, r2
 80103a4:	46a2      	mov	sl, r4
 80103a6:	9304      	str	r3, [sp, #16]
 80103a8:	e7d2      	b.n	8010350 <_svfiprintf_r+0xa0>
 80103aa:	9b03      	ldr	r3, [sp, #12]
 80103ac:	1d19      	adds	r1, r3, #4
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	9103      	str	r1, [sp, #12]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	bfbb      	ittet	lt
 80103b6:	425b      	neglt	r3, r3
 80103b8:	f042 0202 	orrlt.w	r2, r2, #2
 80103bc:	9307      	strge	r3, [sp, #28]
 80103be:	9307      	strlt	r3, [sp, #28]
 80103c0:	bfb8      	it	lt
 80103c2:	9204      	strlt	r2, [sp, #16]
 80103c4:	7823      	ldrb	r3, [r4, #0]
 80103c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80103c8:	d10a      	bne.n	80103e0 <_svfiprintf_r+0x130>
 80103ca:	7863      	ldrb	r3, [r4, #1]
 80103cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80103ce:	d132      	bne.n	8010436 <_svfiprintf_r+0x186>
 80103d0:	9b03      	ldr	r3, [sp, #12]
 80103d2:	3402      	adds	r4, #2
 80103d4:	1d1a      	adds	r2, r3, #4
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	9203      	str	r2, [sp, #12]
 80103da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80103de:	9305      	str	r3, [sp, #20]
 80103e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8010498 <_svfiprintf_r+0x1e8>
 80103e4:	2203      	movs	r2, #3
 80103e6:	4650      	mov	r0, sl
 80103e8:	7821      	ldrb	r1, [r4, #0]
 80103ea:	f7fe f838 	bl	800e45e <memchr>
 80103ee:	b138      	cbz	r0, 8010400 <_svfiprintf_r+0x150>
 80103f0:	2240      	movs	r2, #64	@ 0x40
 80103f2:	9b04      	ldr	r3, [sp, #16]
 80103f4:	eba0 000a 	sub.w	r0, r0, sl
 80103f8:	4082      	lsls	r2, r0
 80103fa:	4313      	orrs	r3, r2
 80103fc:	3401      	adds	r4, #1
 80103fe:	9304      	str	r3, [sp, #16]
 8010400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010404:	2206      	movs	r2, #6
 8010406:	4825      	ldr	r0, [pc, #148]	@ (801049c <_svfiprintf_r+0x1ec>)
 8010408:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801040c:	f7fe f827 	bl	800e45e <memchr>
 8010410:	2800      	cmp	r0, #0
 8010412:	d036      	beq.n	8010482 <_svfiprintf_r+0x1d2>
 8010414:	4b22      	ldr	r3, [pc, #136]	@ (80104a0 <_svfiprintf_r+0x1f0>)
 8010416:	bb1b      	cbnz	r3, 8010460 <_svfiprintf_r+0x1b0>
 8010418:	9b03      	ldr	r3, [sp, #12]
 801041a:	3307      	adds	r3, #7
 801041c:	f023 0307 	bic.w	r3, r3, #7
 8010420:	3308      	adds	r3, #8
 8010422:	9303      	str	r3, [sp, #12]
 8010424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010426:	4433      	add	r3, r6
 8010428:	9309      	str	r3, [sp, #36]	@ 0x24
 801042a:	e76a      	b.n	8010302 <_svfiprintf_r+0x52>
 801042c:	460c      	mov	r4, r1
 801042e:	2001      	movs	r0, #1
 8010430:	fb0c 3202 	mla	r2, ip, r2, r3
 8010434:	e7a8      	b.n	8010388 <_svfiprintf_r+0xd8>
 8010436:	2300      	movs	r3, #0
 8010438:	f04f 0c0a 	mov.w	ip, #10
 801043c:	4619      	mov	r1, r3
 801043e:	3401      	adds	r4, #1
 8010440:	9305      	str	r3, [sp, #20]
 8010442:	4620      	mov	r0, r4
 8010444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010448:	3a30      	subs	r2, #48	@ 0x30
 801044a:	2a09      	cmp	r2, #9
 801044c:	d903      	bls.n	8010456 <_svfiprintf_r+0x1a6>
 801044e:	2b00      	cmp	r3, #0
 8010450:	d0c6      	beq.n	80103e0 <_svfiprintf_r+0x130>
 8010452:	9105      	str	r1, [sp, #20]
 8010454:	e7c4      	b.n	80103e0 <_svfiprintf_r+0x130>
 8010456:	4604      	mov	r4, r0
 8010458:	2301      	movs	r3, #1
 801045a:	fb0c 2101 	mla	r1, ip, r1, r2
 801045e:	e7f0      	b.n	8010442 <_svfiprintf_r+0x192>
 8010460:	ab03      	add	r3, sp, #12
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	462a      	mov	r2, r5
 8010466:	4638      	mov	r0, r7
 8010468:	4b0e      	ldr	r3, [pc, #56]	@ (80104a4 <_svfiprintf_r+0x1f4>)
 801046a:	a904      	add	r1, sp, #16
 801046c:	f7fc fee2 	bl	800d234 <_printf_float>
 8010470:	1c42      	adds	r2, r0, #1
 8010472:	4606      	mov	r6, r0
 8010474:	d1d6      	bne.n	8010424 <_svfiprintf_r+0x174>
 8010476:	89ab      	ldrh	r3, [r5, #12]
 8010478:	065b      	lsls	r3, r3, #25
 801047a:	f53f af2d 	bmi.w	80102d8 <_svfiprintf_r+0x28>
 801047e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010480:	e72c      	b.n	80102dc <_svfiprintf_r+0x2c>
 8010482:	ab03      	add	r3, sp, #12
 8010484:	9300      	str	r3, [sp, #0]
 8010486:	462a      	mov	r2, r5
 8010488:	4638      	mov	r0, r7
 801048a:	4b06      	ldr	r3, [pc, #24]	@ (80104a4 <_svfiprintf_r+0x1f4>)
 801048c:	a904      	add	r1, sp, #16
 801048e:	f7fd f96f 	bl	800d770 <_printf_i>
 8010492:	e7ed      	b.n	8010470 <_svfiprintf_r+0x1c0>
 8010494:	080113fe 	.word	0x080113fe
 8010498:	08011404 	.word	0x08011404
 801049c:	08011408 	.word	0x08011408
 80104a0:	0800d235 	.word	0x0800d235
 80104a4:	080101fb 	.word	0x080101fb

080104a8 <__sfputc_r>:
 80104a8:	6893      	ldr	r3, [r2, #8]
 80104aa:	b410      	push	{r4}
 80104ac:	3b01      	subs	r3, #1
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	6093      	str	r3, [r2, #8]
 80104b2:	da07      	bge.n	80104c4 <__sfputc_r+0x1c>
 80104b4:	6994      	ldr	r4, [r2, #24]
 80104b6:	42a3      	cmp	r3, r4
 80104b8:	db01      	blt.n	80104be <__sfputc_r+0x16>
 80104ba:	290a      	cmp	r1, #10
 80104bc:	d102      	bne.n	80104c4 <__sfputc_r+0x1c>
 80104be:	bc10      	pop	{r4}
 80104c0:	f7fd be5d 	b.w	800e17e <__swbuf_r>
 80104c4:	6813      	ldr	r3, [r2, #0]
 80104c6:	1c58      	adds	r0, r3, #1
 80104c8:	6010      	str	r0, [r2, #0]
 80104ca:	7019      	strb	r1, [r3, #0]
 80104cc:	4608      	mov	r0, r1
 80104ce:	bc10      	pop	{r4}
 80104d0:	4770      	bx	lr

080104d2 <__sfputs_r>:
 80104d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104d4:	4606      	mov	r6, r0
 80104d6:	460f      	mov	r7, r1
 80104d8:	4614      	mov	r4, r2
 80104da:	18d5      	adds	r5, r2, r3
 80104dc:	42ac      	cmp	r4, r5
 80104de:	d101      	bne.n	80104e4 <__sfputs_r+0x12>
 80104e0:	2000      	movs	r0, #0
 80104e2:	e007      	b.n	80104f4 <__sfputs_r+0x22>
 80104e4:	463a      	mov	r2, r7
 80104e6:	4630      	mov	r0, r6
 80104e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104ec:	f7ff ffdc 	bl	80104a8 <__sfputc_r>
 80104f0:	1c43      	adds	r3, r0, #1
 80104f2:	d1f3      	bne.n	80104dc <__sfputs_r+0xa>
 80104f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104f8 <_vfiprintf_r>:
 80104f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fc:	460d      	mov	r5, r1
 80104fe:	4614      	mov	r4, r2
 8010500:	4698      	mov	r8, r3
 8010502:	4606      	mov	r6, r0
 8010504:	b09d      	sub	sp, #116	@ 0x74
 8010506:	b118      	cbz	r0, 8010510 <_vfiprintf_r+0x18>
 8010508:	6a03      	ldr	r3, [r0, #32]
 801050a:	b90b      	cbnz	r3, 8010510 <_vfiprintf_r+0x18>
 801050c:	f7fd fce4 	bl	800ded8 <__sinit>
 8010510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010512:	07d9      	lsls	r1, r3, #31
 8010514:	d405      	bmi.n	8010522 <_vfiprintf_r+0x2a>
 8010516:	89ab      	ldrh	r3, [r5, #12]
 8010518:	059a      	lsls	r2, r3, #22
 801051a:	d402      	bmi.n	8010522 <_vfiprintf_r+0x2a>
 801051c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801051e:	f7fd ff94 	bl	800e44a <__retarget_lock_acquire_recursive>
 8010522:	89ab      	ldrh	r3, [r5, #12]
 8010524:	071b      	lsls	r3, r3, #28
 8010526:	d501      	bpl.n	801052c <_vfiprintf_r+0x34>
 8010528:	692b      	ldr	r3, [r5, #16]
 801052a:	b99b      	cbnz	r3, 8010554 <_vfiprintf_r+0x5c>
 801052c:	4629      	mov	r1, r5
 801052e:	4630      	mov	r0, r6
 8010530:	f7fd fe64 	bl	800e1fc <__swsetup_r>
 8010534:	b170      	cbz	r0, 8010554 <_vfiprintf_r+0x5c>
 8010536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010538:	07dc      	lsls	r4, r3, #31
 801053a:	d504      	bpl.n	8010546 <_vfiprintf_r+0x4e>
 801053c:	f04f 30ff 	mov.w	r0, #4294967295
 8010540:	b01d      	add	sp, #116	@ 0x74
 8010542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010546:	89ab      	ldrh	r3, [r5, #12]
 8010548:	0598      	lsls	r0, r3, #22
 801054a:	d4f7      	bmi.n	801053c <_vfiprintf_r+0x44>
 801054c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801054e:	f7fd ff7d 	bl	800e44c <__retarget_lock_release_recursive>
 8010552:	e7f3      	b.n	801053c <_vfiprintf_r+0x44>
 8010554:	2300      	movs	r3, #0
 8010556:	9309      	str	r3, [sp, #36]	@ 0x24
 8010558:	2320      	movs	r3, #32
 801055a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801055e:	2330      	movs	r3, #48	@ 0x30
 8010560:	f04f 0901 	mov.w	r9, #1
 8010564:	f8cd 800c 	str.w	r8, [sp, #12]
 8010568:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8010714 <_vfiprintf_r+0x21c>
 801056c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010570:	4623      	mov	r3, r4
 8010572:	469a      	mov	sl, r3
 8010574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010578:	b10a      	cbz	r2, 801057e <_vfiprintf_r+0x86>
 801057a:	2a25      	cmp	r2, #37	@ 0x25
 801057c:	d1f9      	bne.n	8010572 <_vfiprintf_r+0x7a>
 801057e:	ebba 0b04 	subs.w	fp, sl, r4
 8010582:	d00b      	beq.n	801059c <_vfiprintf_r+0xa4>
 8010584:	465b      	mov	r3, fp
 8010586:	4622      	mov	r2, r4
 8010588:	4629      	mov	r1, r5
 801058a:	4630      	mov	r0, r6
 801058c:	f7ff ffa1 	bl	80104d2 <__sfputs_r>
 8010590:	3001      	adds	r0, #1
 8010592:	f000 80a7 	beq.w	80106e4 <_vfiprintf_r+0x1ec>
 8010596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010598:	445a      	add	r2, fp
 801059a:	9209      	str	r2, [sp, #36]	@ 0x24
 801059c:	f89a 3000 	ldrb.w	r3, [sl]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f000 809f 	beq.w	80106e4 <_vfiprintf_r+0x1ec>
 80105a6:	2300      	movs	r3, #0
 80105a8:	f04f 32ff 	mov.w	r2, #4294967295
 80105ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105b0:	f10a 0a01 	add.w	sl, sl, #1
 80105b4:	9304      	str	r3, [sp, #16]
 80105b6:	9307      	str	r3, [sp, #28]
 80105b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80105be:	4654      	mov	r4, sl
 80105c0:	2205      	movs	r2, #5
 80105c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105c6:	4853      	ldr	r0, [pc, #332]	@ (8010714 <_vfiprintf_r+0x21c>)
 80105c8:	f7fd ff49 	bl	800e45e <memchr>
 80105cc:	9a04      	ldr	r2, [sp, #16]
 80105ce:	b9d8      	cbnz	r0, 8010608 <_vfiprintf_r+0x110>
 80105d0:	06d1      	lsls	r1, r2, #27
 80105d2:	bf44      	itt	mi
 80105d4:	2320      	movmi	r3, #32
 80105d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105da:	0713      	lsls	r3, r2, #28
 80105dc:	bf44      	itt	mi
 80105de:	232b      	movmi	r3, #43	@ 0x2b
 80105e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105e4:	f89a 3000 	ldrb.w	r3, [sl]
 80105e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80105ea:	d015      	beq.n	8010618 <_vfiprintf_r+0x120>
 80105ec:	4654      	mov	r4, sl
 80105ee:	2000      	movs	r0, #0
 80105f0:	f04f 0c0a 	mov.w	ip, #10
 80105f4:	9a07      	ldr	r2, [sp, #28]
 80105f6:	4621      	mov	r1, r4
 80105f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105fc:	3b30      	subs	r3, #48	@ 0x30
 80105fe:	2b09      	cmp	r3, #9
 8010600:	d94b      	bls.n	801069a <_vfiprintf_r+0x1a2>
 8010602:	b1b0      	cbz	r0, 8010632 <_vfiprintf_r+0x13a>
 8010604:	9207      	str	r2, [sp, #28]
 8010606:	e014      	b.n	8010632 <_vfiprintf_r+0x13a>
 8010608:	eba0 0308 	sub.w	r3, r0, r8
 801060c:	fa09 f303 	lsl.w	r3, r9, r3
 8010610:	4313      	orrs	r3, r2
 8010612:	46a2      	mov	sl, r4
 8010614:	9304      	str	r3, [sp, #16]
 8010616:	e7d2      	b.n	80105be <_vfiprintf_r+0xc6>
 8010618:	9b03      	ldr	r3, [sp, #12]
 801061a:	1d19      	adds	r1, r3, #4
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	9103      	str	r1, [sp, #12]
 8010620:	2b00      	cmp	r3, #0
 8010622:	bfbb      	ittet	lt
 8010624:	425b      	neglt	r3, r3
 8010626:	f042 0202 	orrlt.w	r2, r2, #2
 801062a:	9307      	strge	r3, [sp, #28]
 801062c:	9307      	strlt	r3, [sp, #28]
 801062e:	bfb8      	it	lt
 8010630:	9204      	strlt	r2, [sp, #16]
 8010632:	7823      	ldrb	r3, [r4, #0]
 8010634:	2b2e      	cmp	r3, #46	@ 0x2e
 8010636:	d10a      	bne.n	801064e <_vfiprintf_r+0x156>
 8010638:	7863      	ldrb	r3, [r4, #1]
 801063a:	2b2a      	cmp	r3, #42	@ 0x2a
 801063c:	d132      	bne.n	80106a4 <_vfiprintf_r+0x1ac>
 801063e:	9b03      	ldr	r3, [sp, #12]
 8010640:	3402      	adds	r4, #2
 8010642:	1d1a      	adds	r2, r3, #4
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	9203      	str	r2, [sp, #12]
 8010648:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801064c:	9305      	str	r3, [sp, #20]
 801064e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8010718 <_vfiprintf_r+0x220>
 8010652:	2203      	movs	r2, #3
 8010654:	4650      	mov	r0, sl
 8010656:	7821      	ldrb	r1, [r4, #0]
 8010658:	f7fd ff01 	bl	800e45e <memchr>
 801065c:	b138      	cbz	r0, 801066e <_vfiprintf_r+0x176>
 801065e:	2240      	movs	r2, #64	@ 0x40
 8010660:	9b04      	ldr	r3, [sp, #16]
 8010662:	eba0 000a 	sub.w	r0, r0, sl
 8010666:	4082      	lsls	r2, r0
 8010668:	4313      	orrs	r3, r2
 801066a:	3401      	adds	r4, #1
 801066c:	9304      	str	r3, [sp, #16]
 801066e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010672:	2206      	movs	r2, #6
 8010674:	4829      	ldr	r0, [pc, #164]	@ (801071c <_vfiprintf_r+0x224>)
 8010676:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801067a:	f7fd fef0 	bl	800e45e <memchr>
 801067e:	2800      	cmp	r0, #0
 8010680:	d03f      	beq.n	8010702 <_vfiprintf_r+0x20a>
 8010682:	4b27      	ldr	r3, [pc, #156]	@ (8010720 <_vfiprintf_r+0x228>)
 8010684:	bb1b      	cbnz	r3, 80106ce <_vfiprintf_r+0x1d6>
 8010686:	9b03      	ldr	r3, [sp, #12]
 8010688:	3307      	adds	r3, #7
 801068a:	f023 0307 	bic.w	r3, r3, #7
 801068e:	3308      	adds	r3, #8
 8010690:	9303      	str	r3, [sp, #12]
 8010692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010694:	443b      	add	r3, r7
 8010696:	9309      	str	r3, [sp, #36]	@ 0x24
 8010698:	e76a      	b.n	8010570 <_vfiprintf_r+0x78>
 801069a:	460c      	mov	r4, r1
 801069c:	2001      	movs	r0, #1
 801069e:	fb0c 3202 	mla	r2, ip, r2, r3
 80106a2:	e7a8      	b.n	80105f6 <_vfiprintf_r+0xfe>
 80106a4:	2300      	movs	r3, #0
 80106a6:	f04f 0c0a 	mov.w	ip, #10
 80106aa:	4619      	mov	r1, r3
 80106ac:	3401      	adds	r4, #1
 80106ae:	9305      	str	r3, [sp, #20]
 80106b0:	4620      	mov	r0, r4
 80106b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106b6:	3a30      	subs	r2, #48	@ 0x30
 80106b8:	2a09      	cmp	r2, #9
 80106ba:	d903      	bls.n	80106c4 <_vfiprintf_r+0x1cc>
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d0c6      	beq.n	801064e <_vfiprintf_r+0x156>
 80106c0:	9105      	str	r1, [sp, #20]
 80106c2:	e7c4      	b.n	801064e <_vfiprintf_r+0x156>
 80106c4:	4604      	mov	r4, r0
 80106c6:	2301      	movs	r3, #1
 80106c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80106cc:	e7f0      	b.n	80106b0 <_vfiprintf_r+0x1b8>
 80106ce:	ab03      	add	r3, sp, #12
 80106d0:	9300      	str	r3, [sp, #0]
 80106d2:	462a      	mov	r2, r5
 80106d4:	4630      	mov	r0, r6
 80106d6:	4b13      	ldr	r3, [pc, #76]	@ (8010724 <_vfiprintf_r+0x22c>)
 80106d8:	a904      	add	r1, sp, #16
 80106da:	f7fc fdab 	bl	800d234 <_printf_float>
 80106de:	4607      	mov	r7, r0
 80106e0:	1c78      	adds	r0, r7, #1
 80106e2:	d1d6      	bne.n	8010692 <_vfiprintf_r+0x19a>
 80106e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106e6:	07d9      	lsls	r1, r3, #31
 80106e8:	d405      	bmi.n	80106f6 <_vfiprintf_r+0x1fe>
 80106ea:	89ab      	ldrh	r3, [r5, #12]
 80106ec:	059a      	lsls	r2, r3, #22
 80106ee:	d402      	bmi.n	80106f6 <_vfiprintf_r+0x1fe>
 80106f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106f2:	f7fd feab 	bl	800e44c <__retarget_lock_release_recursive>
 80106f6:	89ab      	ldrh	r3, [r5, #12]
 80106f8:	065b      	lsls	r3, r3, #25
 80106fa:	f53f af1f 	bmi.w	801053c <_vfiprintf_r+0x44>
 80106fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010700:	e71e      	b.n	8010540 <_vfiprintf_r+0x48>
 8010702:	ab03      	add	r3, sp, #12
 8010704:	9300      	str	r3, [sp, #0]
 8010706:	462a      	mov	r2, r5
 8010708:	4630      	mov	r0, r6
 801070a:	4b06      	ldr	r3, [pc, #24]	@ (8010724 <_vfiprintf_r+0x22c>)
 801070c:	a904      	add	r1, sp, #16
 801070e:	f7fd f82f 	bl	800d770 <_printf_i>
 8010712:	e7e4      	b.n	80106de <_vfiprintf_r+0x1e6>
 8010714:	080113fe 	.word	0x080113fe
 8010718:	08011404 	.word	0x08011404
 801071c:	08011408 	.word	0x08011408
 8010720:	0800d235 	.word	0x0800d235
 8010724:	080104d3 	.word	0x080104d3

08010728 <__sflush_r>:
 8010728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072e:	0716      	lsls	r6, r2, #28
 8010730:	4605      	mov	r5, r0
 8010732:	460c      	mov	r4, r1
 8010734:	d454      	bmi.n	80107e0 <__sflush_r+0xb8>
 8010736:	684b      	ldr	r3, [r1, #4]
 8010738:	2b00      	cmp	r3, #0
 801073a:	dc02      	bgt.n	8010742 <__sflush_r+0x1a>
 801073c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801073e:	2b00      	cmp	r3, #0
 8010740:	dd48      	ble.n	80107d4 <__sflush_r+0xac>
 8010742:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010744:	2e00      	cmp	r6, #0
 8010746:	d045      	beq.n	80107d4 <__sflush_r+0xac>
 8010748:	2300      	movs	r3, #0
 801074a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801074e:	682f      	ldr	r7, [r5, #0]
 8010750:	6a21      	ldr	r1, [r4, #32]
 8010752:	602b      	str	r3, [r5, #0]
 8010754:	d030      	beq.n	80107b8 <__sflush_r+0x90>
 8010756:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010758:	89a3      	ldrh	r3, [r4, #12]
 801075a:	0759      	lsls	r1, r3, #29
 801075c:	d505      	bpl.n	801076a <__sflush_r+0x42>
 801075e:	6863      	ldr	r3, [r4, #4]
 8010760:	1ad2      	subs	r2, r2, r3
 8010762:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010764:	b10b      	cbz	r3, 801076a <__sflush_r+0x42>
 8010766:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010768:	1ad2      	subs	r2, r2, r3
 801076a:	2300      	movs	r3, #0
 801076c:	4628      	mov	r0, r5
 801076e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010770:	6a21      	ldr	r1, [r4, #32]
 8010772:	47b0      	blx	r6
 8010774:	1c43      	adds	r3, r0, #1
 8010776:	89a3      	ldrh	r3, [r4, #12]
 8010778:	d106      	bne.n	8010788 <__sflush_r+0x60>
 801077a:	6829      	ldr	r1, [r5, #0]
 801077c:	291d      	cmp	r1, #29
 801077e:	d82b      	bhi.n	80107d8 <__sflush_r+0xb0>
 8010780:	4a28      	ldr	r2, [pc, #160]	@ (8010824 <__sflush_r+0xfc>)
 8010782:	40ca      	lsrs	r2, r1
 8010784:	07d6      	lsls	r6, r2, #31
 8010786:	d527      	bpl.n	80107d8 <__sflush_r+0xb0>
 8010788:	2200      	movs	r2, #0
 801078a:	6062      	str	r2, [r4, #4]
 801078c:	6922      	ldr	r2, [r4, #16]
 801078e:	04d9      	lsls	r1, r3, #19
 8010790:	6022      	str	r2, [r4, #0]
 8010792:	d504      	bpl.n	801079e <__sflush_r+0x76>
 8010794:	1c42      	adds	r2, r0, #1
 8010796:	d101      	bne.n	801079c <__sflush_r+0x74>
 8010798:	682b      	ldr	r3, [r5, #0]
 801079a:	b903      	cbnz	r3, 801079e <__sflush_r+0x76>
 801079c:	6560      	str	r0, [r4, #84]	@ 0x54
 801079e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80107a0:	602f      	str	r7, [r5, #0]
 80107a2:	b1b9      	cbz	r1, 80107d4 <__sflush_r+0xac>
 80107a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80107a8:	4299      	cmp	r1, r3
 80107aa:	d002      	beq.n	80107b2 <__sflush_r+0x8a>
 80107ac:	4628      	mov	r0, r5
 80107ae:	f7fe fce3 	bl	800f178 <_free_r>
 80107b2:	2300      	movs	r3, #0
 80107b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80107b6:	e00d      	b.n	80107d4 <__sflush_r+0xac>
 80107b8:	2301      	movs	r3, #1
 80107ba:	4628      	mov	r0, r5
 80107bc:	47b0      	blx	r6
 80107be:	4602      	mov	r2, r0
 80107c0:	1c50      	adds	r0, r2, #1
 80107c2:	d1c9      	bne.n	8010758 <__sflush_r+0x30>
 80107c4:	682b      	ldr	r3, [r5, #0]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d0c6      	beq.n	8010758 <__sflush_r+0x30>
 80107ca:	2b1d      	cmp	r3, #29
 80107cc:	d001      	beq.n	80107d2 <__sflush_r+0xaa>
 80107ce:	2b16      	cmp	r3, #22
 80107d0:	d11d      	bne.n	801080e <__sflush_r+0xe6>
 80107d2:	602f      	str	r7, [r5, #0]
 80107d4:	2000      	movs	r0, #0
 80107d6:	e021      	b.n	801081c <__sflush_r+0xf4>
 80107d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107dc:	b21b      	sxth	r3, r3
 80107de:	e01a      	b.n	8010816 <__sflush_r+0xee>
 80107e0:	690f      	ldr	r7, [r1, #16]
 80107e2:	2f00      	cmp	r7, #0
 80107e4:	d0f6      	beq.n	80107d4 <__sflush_r+0xac>
 80107e6:	0793      	lsls	r3, r2, #30
 80107e8:	bf18      	it	ne
 80107ea:	2300      	movne	r3, #0
 80107ec:	680e      	ldr	r6, [r1, #0]
 80107ee:	bf08      	it	eq
 80107f0:	694b      	ldreq	r3, [r1, #20]
 80107f2:	1bf6      	subs	r6, r6, r7
 80107f4:	600f      	str	r7, [r1, #0]
 80107f6:	608b      	str	r3, [r1, #8]
 80107f8:	2e00      	cmp	r6, #0
 80107fa:	ddeb      	ble.n	80107d4 <__sflush_r+0xac>
 80107fc:	4633      	mov	r3, r6
 80107fe:	463a      	mov	r2, r7
 8010800:	4628      	mov	r0, r5
 8010802:	6a21      	ldr	r1, [r4, #32]
 8010804:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8010808:	47e0      	blx	ip
 801080a:	2800      	cmp	r0, #0
 801080c:	dc07      	bgt.n	801081e <__sflush_r+0xf6>
 801080e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010816:	f04f 30ff 	mov.w	r0, #4294967295
 801081a:	81a3      	strh	r3, [r4, #12]
 801081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801081e:	4407      	add	r7, r0
 8010820:	1a36      	subs	r6, r6, r0
 8010822:	e7e9      	b.n	80107f8 <__sflush_r+0xd0>
 8010824:	20400001 	.word	0x20400001

08010828 <_fflush_r>:
 8010828:	b538      	push	{r3, r4, r5, lr}
 801082a:	690b      	ldr	r3, [r1, #16]
 801082c:	4605      	mov	r5, r0
 801082e:	460c      	mov	r4, r1
 8010830:	b913      	cbnz	r3, 8010838 <_fflush_r+0x10>
 8010832:	2500      	movs	r5, #0
 8010834:	4628      	mov	r0, r5
 8010836:	bd38      	pop	{r3, r4, r5, pc}
 8010838:	b118      	cbz	r0, 8010842 <_fflush_r+0x1a>
 801083a:	6a03      	ldr	r3, [r0, #32]
 801083c:	b90b      	cbnz	r3, 8010842 <_fflush_r+0x1a>
 801083e:	f7fd fb4b 	bl	800ded8 <__sinit>
 8010842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d0f3      	beq.n	8010832 <_fflush_r+0xa>
 801084a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801084c:	07d0      	lsls	r0, r2, #31
 801084e:	d404      	bmi.n	801085a <_fflush_r+0x32>
 8010850:	0599      	lsls	r1, r3, #22
 8010852:	d402      	bmi.n	801085a <_fflush_r+0x32>
 8010854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010856:	f7fd fdf8 	bl	800e44a <__retarget_lock_acquire_recursive>
 801085a:	4628      	mov	r0, r5
 801085c:	4621      	mov	r1, r4
 801085e:	f7ff ff63 	bl	8010728 <__sflush_r>
 8010862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010864:	4605      	mov	r5, r0
 8010866:	07da      	lsls	r2, r3, #31
 8010868:	d4e4      	bmi.n	8010834 <_fflush_r+0xc>
 801086a:	89a3      	ldrh	r3, [r4, #12]
 801086c:	059b      	lsls	r3, r3, #22
 801086e:	d4e1      	bmi.n	8010834 <_fflush_r+0xc>
 8010870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010872:	f7fd fdeb 	bl	800e44c <__retarget_lock_release_recursive>
 8010876:	e7dd      	b.n	8010834 <_fflush_r+0xc>

08010878 <__swhatbuf_r>:
 8010878:	b570      	push	{r4, r5, r6, lr}
 801087a:	460c      	mov	r4, r1
 801087c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010880:	4615      	mov	r5, r2
 8010882:	2900      	cmp	r1, #0
 8010884:	461e      	mov	r6, r3
 8010886:	b096      	sub	sp, #88	@ 0x58
 8010888:	da0c      	bge.n	80108a4 <__swhatbuf_r+0x2c>
 801088a:	89a3      	ldrh	r3, [r4, #12]
 801088c:	2100      	movs	r1, #0
 801088e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010892:	bf14      	ite	ne
 8010894:	2340      	movne	r3, #64	@ 0x40
 8010896:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801089a:	2000      	movs	r0, #0
 801089c:	6031      	str	r1, [r6, #0]
 801089e:	602b      	str	r3, [r5, #0]
 80108a0:	b016      	add	sp, #88	@ 0x58
 80108a2:	bd70      	pop	{r4, r5, r6, pc}
 80108a4:	466a      	mov	r2, sp
 80108a6:	f000 f893 	bl	80109d0 <_fstat_r>
 80108aa:	2800      	cmp	r0, #0
 80108ac:	dbed      	blt.n	801088a <__swhatbuf_r+0x12>
 80108ae:	9901      	ldr	r1, [sp, #4]
 80108b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80108b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80108b8:	4259      	negs	r1, r3
 80108ba:	4159      	adcs	r1, r3
 80108bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108c0:	e7eb      	b.n	801089a <__swhatbuf_r+0x22>

080108c2 <__smakebuf_r>:
 80108c2:	898b      	ldrh	r3, [r1, #12]
 80108c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108c6:	079d      	lsls	r5, r3, #30
 80108c8:	4606      	mov	r6, r0
 80108ca:	460c      	mov	r4, r1
 80108cc:	d507      	bpl.n	80108de <__smakebuf_r+0x1c>
 80108ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80108d2:	6023      	str	r3, [r4, #0]
 80108d4:	6123      	str	r3, [r4, #16]
 80108d6:	2301      	movs	r3, #1
 80108d8:	6163      	str	r3, [r4, #20]
 80108da:	b003      	add	sp, #12
 80108dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108de:	466a      	mov	r2, sp
 80108e0:	ab01      	add	r3, sp, #4
 80108e2:	f7ff ffc9 	bl	8010878 <__swhatbuf_r>
 80108e6:	9f00      	ldr	r7, [sp, #0]
 80108e8:	4605      	mov	r5, r0
 80108ea:	4639      	mov	r1, r7
 80108ec:	4630      	mov	r0, r6
 80108ee:	f7fb fce3 	bl	800c2b8 <_malloc_r>
 80108f2:	b948      	cbnz	r0, 8010908 <__smakebuf_r+0x46>
 80108f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108f8:	059a      	lsls	r2, r3, #22
 80108fa:	d4ee      	bmi.n	80108da <__smakebuf_r+0x18>
 80108fc:	f023 0303 	bic.w	r3, r3, #3
 8010900:	f043 0302 	orr.w	r3, r3, #2
 8010904:	81a3      	strh	r3, [r4, #12]
 8010906:	e7e2      	b.n	80108ce <__smakebuf_r+0xc>
 8010908:	89a3      	ldrh	r3, [r4, #12]
 801090a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801090e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010912:	81a3      	strh	r3, [r4, #12]
 8010914:	9b01      	ldr	r3, [sp, #4]
 8010916:	6020      	str	r0, [r4, #0]
 8010918:	b15b      	cbz	r3, 8010932 <__smakebuf_r+0x70>
 801091a:	4630      	mov	r0, r6
 801091c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010920:	f000 f868 	bl	80109f4 <_isatty_r>
 8010924:	b128      	cbz	r0, 8010932 <__smakebuf_r+0x70>
 8010926:	89a3      	ldrh	r3, [r4, #12]
 8010928:	f023 0303 	bic.w	r3, r3, #3
 801092c:	f043 0301 	orr.w	r3, r3, #1
 8010930:	81a3      	strh	r3, [r4, #12]
 8010932:	89a3      	ldrh	r3, [r4, #12]
 8010934:	431d      	orrs	r5, r3
 8010936:	81a5      	strh	r5, [r4, #12]
 8010938:	e7cf      	b.n	80108da <__smakebuf_r+0x18>

0801093a <memmove>:
 801093a:	4288      	cmp	r0, r1
 801093c:	b510      	push	{r4, lr}
 801093e:	eb01 0402 	add.w	r4, r1, r2
 8010942:	d902      	bls.n	801094a <memmove+0x10>
 8010944:	4284      	cmp	r4, r0
 8010946:	4623      	mov	r3, r4
 8010948:	d807      	bhi.n	801095a <memmove+0x20>
 801094a:	1e43      	subs	r3, r0, #1
 801094c:	42a1      	cmp	r1, r4
 801094e:	d008      	beq.n	8010962 <memmove+0x28>
 8010950:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010954:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010958:	e7f8      	b.n	801094c <memmove+0x12>
 801095a:	4601      	mov	r1, r0
 801095c:	4402      	add	r2, r0
 801095e:	428a      	cmp	r2, r1
 8010960:	d100      	bne.n	8010964 <memmove+0x2a>
 8010962:	bd10      	pop	{r4, pc}
 8010964:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010968:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801096c:	e7f7      	b.n	801095e <memmove+0x24>

0801096e <_raise_r>:
 801096e:	291f      	cmp	r1, #31
 8010970:	b538      	push	{r3, r4, r5, lr}
 8010972:	4605      	mov	r5, r0
 8010974:	460c      	mov	r4, r1
 8010976:	d904      	bls.n	8010982 <_raise_r+0x14>
 8010978:	2316      	movs	r3, #22
 801097a:	6003      	str	r3, [r0, #0]
 801097c:	f04f 30ff 	mov.w	r0, #4294967295
 8010980:	bd38      	pop	{r3, r4, r5, pc}
 8010982:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010984:	b112      	cbz	r2, 801098c <_raise_r+0x1e>
 8010986:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801098a:	b94b      	cbnz	r3, 80109a0 <_raise_r+0x32>
 801098c:	4628      	mov	r0, r5
 801098e:	f000 f853 	bl	8010a38 <_getpid_r>
 8010992:	4622      	mov	r2, r4
 8010994:	4601      	mov	r1, r0
 8010996:	4628      	mov	r0, r5
 8010998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801099c:	f000 b83a 	b.w	8010a14 <_kill_r>
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d00a      	beq.n	80109ba <_raise_r+0x4c>
 80109a4:	1c59      	adds	r1, r3, #1
 80109a6:	d103      	bne.n	80109b0 <_raise_r+0x42>
 80109a8:	2316      	movs	r3, #22
 80109aa:	6003      	str	r3, [r0, #0]
 80109ac:	2001      	movs	r0, #1
 80109ae:	e7e7      	b.n	8010980 <_raise_r+0x12>
 80109b0:	2100      	movs	r1, #0
 80109b2:	4620      	mov	r0, r4
 80109b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80109b8:	4798      	blx	r3
 80109ba:	2000      	movs	r0, #0
 80109bc:	e7e0      	b.n	8010980 <_raise_r+0x12>
	...

080109c0 <raise>:
 80109c0:	4b02      	ldr	r3, [pc, #8]	@ (80109cc <raise+0xc>)
 80109c2:	4601      	mov	r1, r0
 80109c4:	6818      	ldr	r0, [r3, #0]
 80109c6:	f7ff bfd2 	b.w	801096e <_raise_r>
 80109ca:	bf00      	nop
 80109cc:	20000200 	.word	0x20000200

080109d0 <_fstat_r>:
 80109d0:	b538      	push	{r3, r4, r5, lr}
 80109d2:	2300      	movs	r3, #0
 80109d4:	4d06      	ldr	r5, [pc, #24]	@ (80109f0 <_fstat_r+0x20>)
 80109d6:	4604      	mov	r4, r0
 80109d8:	4608      	mov	r0, r1
 80109da:	4611      	mov	r1, r2
 80109dc:	602b      	str	r3, [r5, #0]
 80109de:	f7f1 fc1d 	bl	800221c <_fstat>
 80109e2:	1c43      	adds	r3, r0, #1
 80109e4:	d102      	bne.n	80109ec <_fstat_r+0x1c>
 80109e6:	682b      	ldr	r3, [r5, #0]
 80109e8:	b103      	cbz	r3, 80109ec <_fstat_r+0x1c>
 80109ea:	6023      	str	r3, [r4, #0]
 80109ec:	bd38      	pop	{r3, r4, r5, pc}
 80109ee:	bf00      	nop
 80109f0:	20001344 	.word	0x20001344

080109f4 <_isatty_r>:
 80109f4:	b538      	push	{r3, r4, r5, lr}
 80109f6:	2300      	movs	r3, #0
 80109f8:	4d05      	ldr	r5, [pc, #20]	@ (8010a10 <_isatty_r+0x1c>)
 80109fa:	4604      	mov	r4, r0
 80109fc:	4608      	mov	r0, r1
 80109fe:	602b      	str	r3, [r5, #0]
 8010a00:	f7f1 fc1b 	bl	800223a <_isatty>
 8010a04:	1c43      	adds	r3, r0, #1
 8010a06:	d102      	bne.n	8010a0e <_isatty_r+0x1a>
 8010a08:	682b      	ldr	r3, [r5, #0]
 8010a0a:	b103      	cbz	r3, 8010a0e <_isatty_r+0x1a>
 8010a0c:	6023      	str	r3, [r4, #0]
 8010a0e:	bd38      	pop	{r3, r4, r5, pc}
 8010a10:	20001344 	.word	0x20001344

08010a14 <_kill_r>:
 8010a14:	b538      	push	{r3, r4, r5, lr}
 8010a16:	2300      	movs	r3, #0
 8010a18:	4d06      	ldr	r5, [pc, #24]	@ (8010a34 <_kill_r+0x20>)
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	4608      	mov	r0, r1
 8010a1e:	4611      	mov	r1, r2
 8010a20:	602b      	str	r3, [r5, #0]
 8010a22:	f7f1 fbb8 	bl	8002196 <_kill>
 8010a26:	1c43      	adds	r3, r0, #1
 8010a28:	d102      	bne.n	8010a30 <_kill_r+0x1c>
 8010a2a:	682b      	ldr	r3, [r5, #0]
 8010a2c:	b103      	cbz	r3, 8010a30 <_kill_r+0x1c>
 8010a2e:	6023      	str	r3, [r4, #0]
 8010a30:	bd38      	pop	{r3, r4, r5, pc}
 8010a32:	bf00      	nop
 8010a34:	20001344 	.word	0x20001344

08010a38 <_getpid_r>:
 8010a38:	f7f1 bba6 	b.w	8002188 <_getpid>

08010a3c <_calloc_r>:
 8010a3c:	b570      	push	{r4, r5, r6, lr}
 8010a3e:	fba1 5402 	umull	r5, r4, r1, r2
 8010a42:	b934      	cbnz	r4, 8010a52 <_calloc_r+0x16>
 8010a44:	4629      	mov	r1, r5
 8010a46:	f7fb fc37 	bl	800c2b8 <_malloc_r>
 8010a4a:	4606      	mov	r6, r0
 8010a4c:	b928      	cbnz	r0, 8010a5a <_calloc_r+0x1e>
 8010a4e:	4630      	mov	r0, r6
 8010a50:	bd70      	pop	{r4, r5, r6, pc}
 8010a52:	220c      	movs	r2, #12
 8010a54:	2600      	movs	r6, #0
 8010a56:	6002      	str	r2, [r0, #0]
 8010a58:	e7f9      	b.n	8010a4e <_calloc_r+0x12>
 8010a5a:	462a      	mov	r2, r5
 8010a5c:	4621      	mov	r1, r4
 8010a5e:	f7fd fc33 	bl	800e2c8 <memset>
 8010a62:	e7f4      	b.n	8010a4e <_calloc_r+0x12>

08010a64 <_realloc_r>:
 8010a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a68:	4607      	mov	r7, r0
 8010a6a:	4614      	mov	r4, r2
 8010a6c:	460d      	mov	r5, r1
 8010a6e:	b921      	cbnz	r1, 8010a7a <_realloc_r+0x16>
 8010a70:	4611      	mov	r1, r2
 8010a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a76:	f7fb bc1f 	b.w	800c2b8 <_malloc_r>
 8010a7a:	b92a      	cbnz	r2, 8010a88 <_realloc_r+0x24>
 8010a7c:	f7fe fb7c 	bl	800f178 <_free_r>
 8010a80:	4625      	mov	r5, r4
 8010a82:	4628      	mov	r0, r5
 8010a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a88:	f000 f81a 	bl	8010ac0 <_malloc_usable_size_r>
 8010a8c:	4284      	cmp	r4, r0
 8010a8e:	4606      	mov	r6, r0
 8010a90:	d802      	bhi.n	8010a98 <_realloc_r+0x34>
 8010a92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010a96:	d8f4      	bhi.n	8010a82 <_realloc_r+0x1e>
 8010a98:	4621      	mov	r1, r4
 8010a9a:	4638      	mov	r0, r7
 8010a9c:	f7fb fc0c 	bl	800c2b8 <_malloc_r>
 8010aa0:	4680      	mov	r8, r0
 8010aa2:	b908      	cbnz	r0, 8010aa8 <_realloc_r+0x44>
 8010aa4:	4645      	mov	r5, r8
 8010aa6:	e7ec      	b.n	8010a82 <_realloc_r+0x1e>
 8010aa8:	42b4      	cmp	r4, r6
 8010aaa:	4622      	mov	r2, r4
 8010aac:	4629      	mov	r1, r5
 8010aae:	bf28      	it	cs
 8010ab0:	4632      	movcs	r2, r6
 8010ab2:	f7fd fce2 	bl	800e47a <memcpy>
 8010ab6:	4629      	mov	r1, r5
 8010ab8:	4638      	mov	r0, r7
 8010aba:	f7fe fb5d 	bl	800f178 <_free_r>
 8010abe:	e7f1      	b.n	8010aa4 <_realloc_r+0x40>

08010ac0 <_malloc_usable_size_r>:
 8010ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ac4:	1f18      	subs	r0, r3, #4
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	bfbc      	itt	lt
 8010aca:	580b      	ldrlt	r3, [r1, r0]
 8010acc:	18c0      	addlt	r0, r0, r3
 8010ace:	4770      	bx	lr

08010ad0 <_init>:
 8010ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad2:	bf00      	nop
 8010ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ad6:	bc08      	pop	{r3}
 8010ad8:	469e      	mov	lr, r3
 8010ada:	4770      	bx	lr

08010adc <_fini>:
 8010adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ade:	bf00      	nop
 8010ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ae2:	bc08      	pop	{r3}
 8010ae4:	469e      	mov	lr, r3
 8010ae6:	4770      	bx	lr
