
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019c3c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001458  08019d50  08019d50  0001ad50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b1a8  0801b1a8  0001d2f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b1a8  0801b1a8  0001c1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b1b0  0801b1b0  0001d2f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b1b0  0801b1b0  0001c1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b1b4  0801b1b4  0001c1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f8  20000000  0801b1b8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a5c  200002f8  0801b4b0  0001d2f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d54  0801b4b0  0001dd54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001d2f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef9b  00000000  00000000  0001d321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e7a  00000000  00000000  0003c2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  00041138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011df  00000000  00000000  00042870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0bf  00000000  00000000  00043a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f13  00000000  00000000  00061b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fefb  00000000  00000000  00085a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011591c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007940  00000000  00000000  00115960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0011d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002f8 	.word	0x200002f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08019d34 	.word	0x08019d34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002fc 	.word	0x200002fc
 800014c:	08019d34 	.word	0x08019d34

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff fead 	bl	80009d0 <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc23 	bl	80004ec <__aeabi_dmul>
 8000ca6:	f7ff fef9 	bl	8000a9c <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fba4 	bl	80003f8 <__aeabi_ui2d>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb4:	f7ff fc1a 	bl	80004ec <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fa5c 	bl	800017c <__aeabi_dsub>
 8000cc4:	f7ff feea 	bl	8000a9c <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <SELECT+0x14>)
 8000cde:	f002 feb7 	bl	8003a50 <HAL_GPIO_WritePin>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4802      	ldr	r0, [pc, #8]	@ (8000d00 <DESELECT+0x14>)
 8000cf6:	f002 feab 	bl	8003a50 <HAL_GPIO_WritePin>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d0e:	bf00      	nop
 8000d10:	4808      	ldr	r0, [pc, #32]	@ (8000d34 <SPI_TxByte+0x30>)
 8000d12:	f006 fc58 	bl	80075c6 <HAL_SPI_GetState>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d1f9      	bne.n	8000d10 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000d1c:	1df9      	adds	r1, r7, #7
 8000d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d22:	2201      	movs	r2, #1
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <SPI_TxByte+0x30>)
 8000d26:	f006 f961 	bl	8006fec <HAL_SPI_Transmit>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000394 	.word	0x20000394

08000d38 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000d3e:	23ff      	movs	r3, #255	@ 0xff
 8000d40:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d46:	bf00      	nop
 8000d48:	4809      	ldr	r0, [pc, #36]	@ (8000d70 <SPI_RxByte+0x38>)
 8000d4a:	f006 fc3c 	bl	80075c6 <HAL_SPI_GetState>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d1f9      	bne.n	8000d48 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000d54:	1dba      	adds	r2, r7, #6
 8000d56:	1df9      	adds	r1, r7, #7
 8000d58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <SPI_RxByte+0x38>)
 8000d62:	f006 fa87 	bl	8007274 <HAL_SPI_TransmitReceive>
  
  return data;
 8000d66:	79bb      	ldrb	r3, [r7, #6]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000394 	.word	0x20000394

08000d74 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000d7c:	f7ff ffdc 	bl	8000d38 <SPI_RxByte>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	701a      	strb	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <SD_ReadyWait+0x34>)
 8000d98:	2232      	movs	r2, #50	@ 0x32
 8000d9a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000d9c:	f7ff ffcc 	bl	8000d38 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000da0:	f7ff ffca 	bl	8000d38 <SPI_RxByte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2bff      	cmp	r3, #255	@ 0xff
 8000dac:	d004      	beq.n	8000db8 <SD_ReadyWait+0x28>
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <SD_ReadyWait+0x34>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f3      	bne.n	8000da0 <SD_ReadyWait+0x10>
  
  return res;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000d0a 	.word	0x20000d0a

08000dc8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000dce:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000dd4:	f7ff ff8a 	bl	8000cec <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	e005      	b.n	8000dea <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000dde:	20ff      	movs	r0, #255	@ 0xff
 8000de0:	f7ff ff90 	bl	8000d04 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	3301      	adds	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	ddf6      	ble.n	8000dde <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000df0:	f7ff ff70 	bl	8000cd4 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000df4:	2340      	movs	r3, #64	@ 0x40
 8000df6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000e08:	2395      	movs	r3, #149	@ 0x95
 8000e0a:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e009      	b.n	8000e26 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000e12:	1d3a      	adds	r2, r7, #4
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff72 	bl	8000d04 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	ddf2      	ble.n	8000e12 <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000e2c:	e002      	b.n	8000e34 <SD_PowerOn+0x6c>
  {
    Count--;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000e34:	f7ff ff80 	bl	8000d38 <SPI_RxByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d002      	beq.n	8000e44 <SD_PowerOn+0x7c>
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f4      	bne.n	8000e2e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000e44:	f7ff ff52 	bl	8000cec <DESELECT>
  SPI_TxByte(0XFF);
 8000e48:	20ff      	movs	r0, #255	@ 0xff
 8000e4a:	f7ff ff5b 	bl	8000d04 <SPI_TxByte>
  
  PowerFlag = 1;
 8000e4e:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <SD_PowerOn+0x94>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000315 	.word	0x20000315

08000e60 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <SD_PowerOff+0x14>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000315 	.word	0x20000315

08000e78 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	@ (8000e88 <SD_CheckPower+0x10>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	20000315 	.word	0x20000315

08000e8c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <SD_RxDataBlock+0x68>)
 8000e98:	220a      	movs	r2, #10
 8000e9a:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000e9c:	f7ff ff4c 	bl	8000d38 <SPI_RxByte>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2bff      	cmp	r3, #255	@ 0xff
 8000ea8:	d104      	bne.n	8000eb4 <SD_RxDataBlock+0x28>
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <SD_RxDataBlock+0x68>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f3      	bne.n	8000e9c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000eb8:	d001      	beq.n	8000ebe <SD_RxDataBlock+0x32>
    return FALSE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e016      	b.n	8000eec <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff55 	bl	8000d74 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff4f 	bl	8000d74 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1ed      	bne.n	8000ebe <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000ee2:	f7ff ff29 	bl	8000d38 <SPI_RxByte>
  SPI_RxByte();
 8000ee6:	f7ff ff27 	bl	8000d38 <SPI_RxByte>
  
  return TRUE;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000d09 	.word	0x20000d09

08000ef8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000f08:	f7ff ff42 	bl	8000d90 <SD_ReadyWait>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2bff      	cmp	r3, #255	@ 0xff
 8000f10:	d001      	beq.n	8000f16 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e040      	b.n	8000f98 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fef3 	bl	8000d04 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	2bfd      	cmp	r3, #253	@ 0xfd
 8000f22:	d031      	beq.n	8000f88 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fee7 	bl	8000d04 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fee0 	bl	8000d04 <SPI_TxByte>
    } while (--wc);
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	73bb      	strb	r3, [r7, #14]
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1eb      	bne.n	8000f28 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000f50:	f7ff fef2 	bl	8000d38 <SPI_RxByte>
    SPI_RxByte();
 8000f54:	f7ff fef0 	bl	8000d38 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000f58:	e00b      	b.n	8000f72 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000f5a:	f7ff feed 	bl	8000d38 <SPI_RxByte>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d006      	beq.n	8000f7a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000f6c:	7b7b      	ldrb	r3, [r7, #13]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000f72:	7b7b      	ldrb	r3, [r7, #13]
 8000f74:	2b40      	cmp	r3, #64	@ 0x40
 8000f76:	d9f0      	bls.n	8000f5a <SD_TxDataBlock+0x62>
 8000f78:	e000      	b.n	8000f7c <SD_TxDataBlock+0x84>
        break;
 8000f7a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000f7c:	bf00      	nop
 8000f7e:	f7ff fedb 	bl	8000d38 <SPI_RxByte>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0fa      	beq.n	8000f7e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	d101      	bne.n	8000f96 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000fac:	f7ff fef0 	bl	8000d90 <SD_ReadyWait>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2bff      	cmp	r3, #255	@ 0xff
 8000fb4:	d001      	beq.n	8000fba <SD_SendCmd+0x1a>
    return 0xFF;
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
 8000fb8:	e040      	b.n	800103c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fea1 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	0e1b      	lsrs	r3, r3, #24
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fe9b 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe95 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe8f 	bl	8000d04 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe8a 	bl	8000d04 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b40      	cmp	r3, #64	@ 0x40
 8000ff8:	d101      	bne.n	8000ffe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000ffa:	2395      	movs	r3, #149	@ 0x95
 8000ffc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b48      	cmp	r3, #72	@ 0x48
 8001002:	d101      	bne.n	8001008 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001004:	2387      	movs	r3, #135	@ 0x87
 8001006:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fe7a 	bl	8000d04 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b4c      	cmp	r3, #76	@ 0x4c
 8001014:	d101      	bne.n	800101a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001016:	f7ff fe8f 	bl	8000d38 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800101a:	230a      	movs	r3, #10
 800101c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800101e:	f7ff fe8b 	bl	8000d38 <SPI_RxByte>
 8001022:	4603      	mov	r3, r0
 8001024:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001026:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800102a:	2b00      	cmp	r3, #0
 800102c:	da05      	bge.n	800103a <SD_SendCmd+0x9a>
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	3b01      	subs	r3, #1
 8001032:	73bb      	strb	r3, [r7, #14]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f1      	bne.n	800101e <SD_SendCmd+0x7e>
  
  return res;
 800103a:	7b7b      	ldrb	r3, [r7, #13]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001054:	2301      	movs	r3, #1
 8001056:	e0d5      	b.n	8001204 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001058:	4b6c      	ldr	r3, [pc, #432]	@ (800120c <SD_disk_initialize+0x1c8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <SD_disk_initialize+0x2a>
    return Stat;        
 8001066:	4b69      	ldr	r3, [pc, #420]	@ (800120c <SD_disk_initialize+0x1c8>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	e0ca      	b.n	8001204 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800106e:	f7ff feab 	bl	8000dc8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001072:	f7ff fe2f 	bl	8000cd4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800107a:	2100      	movs	r1, #0
 800107c:	2040      	movs	r0, #64	@ 0x40
 800107e:	f7ff ff8f 	bl	8000fa0 <SD_SendCmd>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	f040 80a5 	bne.w	80011d4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800108a:	4b61      	ldr	r3, [pc, #388]	@ (8001210 <SD_disk_initialize+0x1cc>)
 800108c:	2264      	movs	r2, #100	@ 0x64
 800108e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001090:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001094:	2048      	movs	r0, #72	@ 0x48
 8001096:	f7ff ff83 	bl	8000fa0 <SD_SendCmd>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d158      	bne.n	8001152 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e00c      	b.n	80010c0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80010a6:	7bfc      	ldrb	r4, [r7, #15]
 80010a8:	f7ff fe46 	bl	8000d38 <SPI_RxByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	f104 0310 	add.w	r3, r4, #16
 80010b4:	443b      	add	r3, r7
 80010b6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	3301      	adds	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d9ef      	bls.n	80010a6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80010c6:	7abb      	ldrb	r3, [r7, #10]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 8083 	bne.w	80011d4 <SD_disk_initialize+0x190>
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	2baa      	cmp	r3, #170	@ 0xaa
 80010d2:	d17f      	bne.n	80011d4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80010d4:	2100      	movs	r1, #0
 80010d6:	2077      	movs	r0, #119	@ 0x77
 80010d8:	f7ff ff62 	bl	8000fa0 <SD_SendCmd>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d807      	bhi.n	80010f2 <SD_disk_initialize+0xae>
 80010e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010e6:	2069      	movs	r0, #105	@ 0x69
 80010e8:	f7ff ff5a 	bl	8000fa0 <SD_SendCmd>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80010f2:	4b47      	ldr	r3, [pc, #284]	@ (8001210 <SD_disk_initialize+0x1cc>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1eb      	bne.n	80010d4 <SD_disk_initialize+0x90>
 80010fc:	e000      	b.n	8001100 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80010fe:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001100:	4b43      	ldr	r3, [pc, #268]	@ (8001210 <SD_disk_initialize+0x1cc>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d064      	beq.n	80011d4 <SD_disk_initialize+0x190>
 800110a:	2100      	movs	r1, #0
 800110c:	207a      	movs	r0, #122	@ 0x7a
 800110e:	f7ff ff47 	bl	8000fa0 <SD_SendCmd>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d15d      	bne.n	80011d4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e00c      	b.n	8001138 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800111e:	7bfc      	ldrb	r4, [r7, #15]
 8001120:	f7ff fe0a 	bl	8000d38 <SPI_RxByte>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	f104 0310 	add.w	r3, r4, #16
 800112c:	443b      	add	r3, r7
 800112e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3301      	adds	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d9ef      	bls.n	800111e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800113e:	7a3b      	ldrb	r3, [r7, #8]
 8001140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SD_disk_initialize+0x108>
 8001148:	2306      	movs	r3, #6
 800114a:	e000      	b.n	800114e <SD_disk_initialize+0x10a>
 800114c:	2302      	movs	r3, #2
 800114e:	73bb      	strb	r3, [r7, #14]
 8001150:	e040      	b.n	80011d4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001152:	2100      	movs	r1, #0
 8001154:	2077      	movs	r0, #119	@ 0x77
 8001156:	f7ff ff23 	bl	8000fa0 <SD_SendCmd>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d808      	bhi.n	8001172 <SD_disk_initialize+0x12e>
 8001160:	2100      	movs	r1, #0
 8001162:	2069      	movs	r0, #105	@ 0x69
 8001164:	f7ff ff1c 	bl	8000fa0 <SD_SendCmd>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d801      	bhi.n	8001172 <SD_disk_initialize+0x12e>
 800116e:	2302      	movs	r3, #2
 8001170:	e000      	b.n	8001174 <SD_disk_initialize+0x130>
 8001172:	2301      	movs	r3, #1
 8001174:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d10e      	bne.n	800119a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800117c:	2100      	movs	r1, #0
 800117e:	2077      	movs	r0, #119	@ 0x77
 8001180:	f7ff ff0e 	bl	8000fa0 <SD_SendCmd>
 8001184:	4603      	mov	r3, r0
 8001186:	2b01      	cmp	r3, #1
 8001188:	d80e      	bhi.n	80011a8 <SD_disk_initialize+0x164>
 800118a:	2100      	movs	r1, #0
 800118c:	2069      	movs	r0, #105	@ 0x69
 800118e:	f7ff ff07 	bl	8000fa0 <SD_SendCmd>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d107      	bne.n	80011a8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001198:	e00d      	b.n	80011b6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800119a:	2100      	movs	r1, #0
 800119c:	2041      	movs	r0, #65	@ 0x41
 800119e:	f7ff feff 	bl	8000fa0 <SD_SendCmd>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80011a8:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <SD_disk_initialize+0x1cc>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1e1      	bne.n	8001176 <SD_disk_initialize+0x132>
 80011b2:	e000      	b.n	80011b6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80011b4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <SD_disk_initialize+0x1cc>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <SD_disk_initialize+0x18c>
 80011c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c4:	2050      	movs	r0, #80	@ 0x50
 80011c6:	f7ff feeb 	bl	8000fa0 <SD_SendCmd>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80011d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <SD_disk_initialize+0x1d0>)
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80011da:	f7ff fd87 	bl	8000cec <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80011de:	f7ff fdab 	bl	8000d38 <SPI_RxByte>
  
  if (type) 
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <SD_disk_initialize+0x1c8>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <SD_disk_initialize+0x1c8>)
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e001      	b.n	80011fe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80011fa:	f7ff fe31 	bl	8000e60 <SD_PowerOff>
  }
  
  return Stat;
 80011fe:	4b03      	ldr	r3, [pc, #12]	@ (800120c <SD_disk_initialize+0x1c8>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000d09 	.word	0x20000d09
 8001214:	20000314 	.word	0x20000314

08001218 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001228:	2301      	movs	r3, #1
 800122a:	e002      	b.n	8001232 <SD_disk_status+0x1a>
  
  return Stat;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <SD_disk_status+0x24>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20000000 	.word	0x20000000

08001240 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <SD_disk_read+0x1c>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <SD_disk_read+0x20>
    return RES_PARERR;
 800125c:	2304      	movs	r3, #4
 800125e:	e051      	b.n	8001304 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001260:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <SD_disk_read+0xcc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800126e:	2303      	movs	r3, #3
 8001270:	e048      	b.n	8001304 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001272:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <SD_disk_read+0xd0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	025b      	lsls	r3, r3, #9
 8001282:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001284:	f7ff fd26 	bl	8000cd4 <SELECT>
  
  if (count == 1) 
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d111      	bne.n	80012b2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2051      	movs	r0, #81	@ 0x51
 8001292:	f7ff fe85 	bl	8000fa0 <SD_SendCmd>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d129      	bne.n	80012f0 <SD_disk_read+0xb0>
 800129c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a0:	68b8      	ldr	r0, [r7, #8]
 80012a2:	f7ff fdf3 	bl	8000e8c <SD_RxDataBlock>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d021      	beq.n	80012f0 <SD_disk_read+0xb0>
      count = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	e01e      	b.n	80012f0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	2052      	movs	r0, #82	@ 0x52
 80012b6:	f7ff fe73 	bl	8000fa0 <SD_SendCmd>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d117      	bne.n	80012f0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80012c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f7ff fde1 	bl	8000e8c <SD_RxDataBlock>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00a      	beq.n	80012e6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012d6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3b01      	subs	r3, #1
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ed      	bne.n	80012c0 <SD_disk_read+0x80>
 80012e4:	e000      	b.n	80012e8 <SD_disk_read+0xa8>
          break;
 80012e6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80012e8:	2100      	movs	r1, #0
 80012ea:	204c      	movs	r0, #76	@ 0x4c
 80012ec:	f7ff fe58 	bl	8000fa0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80012f0:	f7ff fcfc 	bl	8000cec <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80012f4:	f7ff fd20 	bl	8000d38 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000000 	.word	0x20000000
 8001310:	20000314 	.word	0x20000314

08001314 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <SD_disk_write+0x1c>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <SD_disk_write+0x20>
    return RES_PARERR;
 8001330:	2304      	movs	r3, #4
 8001332:	e06b      	b.n	800140c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001334:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <SD_disk_write+0x100>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001342:	2303      	movs	r3, #3
 8001344:	e062      	b.n	800140c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001346:	4b33      	ldr	r3, [pc, #204]	@ (8001414 <SD_disk_write+0x100>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001354:	2302      	movs	r3, #2
 8001356:	e059      	b.n	800140c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001358:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <SD_disk_write+0x104>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800136a:	f7ff fcb3 	bl	8000cd4 <SELECT>
  
  if (count == 1) 
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d110      	bne.n	8001396 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	2058      	movs	r0, #88	@ 0x58
 8001378:	f7ff fe12 	bl	8000fa0 <SD_SendCmd>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d13a      	bne.n	80013f8 <SD_disk_write+0xe4>
 8001382:	21fe      	movs	r1, #254	@ 0xfe
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f7ff fdb7 	bl	8000ef8 <SD_TxDataBlock>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d033      	beq.n	80013f8 <SD_disk_write+0xe4>
      count = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	e030      	b.n	80013f8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <SD_disk_write+0x104>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80013a2:	2100      	movs	r1, #0
 80013a4:	2077      	movs	r0, #119	@ 0x77
 80013a6:	f7ff fdfb 	bl	8000fa0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	2057      	movs	r0, #87	@ 0x57
 80013ae:	f7ff fdf7 	bl	8000fa0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	2059      	movs	r0, #89	@ 0x59
 80013b6:	f7ff fdf3 	bl	8000fa0 <SD_SendCmd>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d11b      	bne.n	80013f8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80013c0:	21fc      	movs	r1, #252	@ 0xfc
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f7ff fd98 	bl	8000ef8 <SD_TxDataBlock>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80013d4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ee      	bne.n	80013c0 <SD_disk_write+0xac>
 80013e2:	e000      	b.n	80013e6 <SD_disk_write+0xd2>
          break;
 80013e4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80013e6:	21fd      	movs	r1, #253	@ 0xfd
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fd85 	bl	8000ef8 <SD_TxDataBlock>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80013f8:	f7ff fc78 	bl	8000cec <DESELECT>
  SPI_RxByte();
 80013fc:	f7ff fc9c 	bl	8000d38 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf14      	ite	ne
 8001406:	2301      	movne	r3, #1
 8001408:	2300      	moveq	r3, #0
 800140a:	b2db      	uxtb	r3, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000314 	.word	0x20000314

0800141c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08b      	sub	sp, #44	@ 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	603a      	str	r2, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
 8001428:	460b      	mov	r3, r1
 800142a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001436:	2304      	movs	r3, #4
 8001438:	e119      	b.n	800166e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	2b05      	cmp	r3, #5
 8001444:	d129      	bne.n	800149a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d017      	beq.n	800147e <SD_disk_ioctl+0x62>
 800144e:	2b02      	cmp	r3, #2
 8001450:	dc1f      	bgt.n	8001492 <SD_disk_ioctl+0x76>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <SD_disk_ioctl+0x40>
 8001456:	2b01      	cmp	r3, #1
 8001458:	d00b      	beq.n	8001472 <SD_disk_ioctl+0x56>
 800145a:	e01a      	b.n	8001492 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800145c:	f7ff fd0c 	bl	8000e78 <SD_CheckPower>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001466:	f7ff fcfb 	bl	8000e60 <SD_PowerOff>
      res = RES_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001470:	e0fb      	b.n	800166a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001472:	f7ff fca9 	bl	8000dc8 <SD_PowerOn>
      res = RES_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800147c:	e0f5      	b.n	800166a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	1c5c      	adds	r4, r3, #1
 8001482:	f7ff fcf9 	bl	8000e78 <SD_CheckPower>
 8001486:	4603      	mov	r3, r0
 8001488:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800148a:	2300      	movs	r3, #0
 800148c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001490:	e0eb      	b.n	800166a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001492:	2304      	movs	r3, #4
 8001494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001498:	e0e7      	b.n	800166a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800149a:	4b77      	ldr	r3, [pc, #476]	@ (8001678 <SD_disk_ioctl+0x25c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0e0      	b.n	800166e <SD_disk_ioctl+0x252>
    
    SELECT();
 80014ac:	f7ff fc12 	bl	8000cd4 <SELECT>
    
    switch (ctrl) 
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	2b0d      	cmp	r3, #13
 80014b4:	f200 80ca 	bhi.w	800164c <SD_disk_ioctl+0x230>
 80014b8:	a201      	add	r2, pc, #4	@ (adr r2, 80014c0 <SD_disk_ioctl+0xa4>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080015b7 	.word	0x080015b7
 80014c4:	080014f9 	.word	0x080014f9
 80014c8:	080015a7 	.word	0x080015a7
 80014cc:	0800164d 	.word	0x0800164d
 80014d0:	0800164d 	.word	0x0800164d
 80014d4:	0800164d 	.word	0x0800164d
 80014d8:	0800164d 	.word	0x0800164d
 80014dc:	0800164d 	.word	0x0800164d
 80014e0:	0800164d 	.word	0x0800164d
 80014e4:	0800164d 	.word	0x0800164d
 80014e8:	0800164d 	.word	0x0800164d
 80014ec:	080015c9 	.word	0x080015c9
 80014f0:	080015ed 	.word	0x080015ed
 80014f4:	08001611 	.word	0x08001611
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80014f8:	2100      	movs	r1, #0
 80014fa:	2049      	movs	r0, #73	@ 0x49
 80014fc:	f7ff fd50 	bl	8000fa0 <SD_SendCmd>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 80a6 	bne.w	8001654 <SD_disk_ioctl+0x238>
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2110      	movs	r1, #16
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fcbc 	bl	8000e8c <SD_RxDataBlock>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 809c 	beq.w	8001654 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	099b      	lsrs	r3, r3, #6
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10d      	bne.n	8001542 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001526:	7d7b      	ldrb	r3, [r7, #21]
 8001528:	461a      	mov	r2, r3
 800152a:	7d3b      	ldrb	r3, [r7, #20]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	4413      	add	r3, r2
 8001532:	b29b      	uxth	r3, r3
 8001534:	3301      	adds	r3, #1
 8001536:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001538:	8bfb      	ldrh	r3, [r7, #30]
 800153a:	029a      	lsls	r2, r3, #10
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e02d      	b.n	800159e <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001542:	7c7b      	ldrb	r3, [r7, #17]
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	b2da      	uxtb	r2, r3
 800154a:	7dbb      	ldrb	r3, [r7, #22]
 800154c:	09db      	lsrs	r3, r3, #7
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b2da      	uxtb	r2, r3
 8001554:	7d7b      	ldrb	r3, [r7, #21]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0306 	and.w	r3, r3, #6
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3302      	adds	r3, #2
 8001566:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800156a:	7d3b      	ldrb	r3, [r7, #20]
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	b2db      	uxtb	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	b29b      	uxth	r3, r3
 8001578:	4413      	add	r3, r2
 800157a:	b29a      	uxth	r2, r3
 800157c:	7cbb      	ldrb	r3, [r7, #18]
 800157e:	029b      	lsls	r3, r3, #10
 8001580:	b29b      	uxth	r3, r3
 8001582:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001586:	b29b      	uxth	r3, r3
 8001588:	4413      	add	r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	3301      	adds	r3, #1
 800158e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001590:	8bfa      	ldrh	r2, [r7, #30]
 8001592:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001596:	3b09      	subs	r3, #9
 8001598:	409a      	lsls	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80015a4:	e056      	b.n	8001654 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ac:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80015b4:	e055      	b.n	8001662 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80015b6:	f7ff fbeb 	bl	8000d90 <SD_ReadyWait>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2bff      	cmp	r3, #255	@ 0xff
 80015be:	d14b      	bne.n	8001658 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80015c6:	e047      	b.n	8001658 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015c8:	2100      	movs	r1, #0
 80015ca:	2049      	movs	r0, #73	@ 0x49
 80015cc:	f7ff fce8 	bl	8000fa0 <SD_SendCmd>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d142      	bne.n	800165c <SD_disk_ioctl+0x240>
 80015d6:	2110      	movs	r1, #16
 80015d8:	6a38      	ldr	r0, [r7, #32]
 80015da:	f7ff fc57 	bl	8000e8c <SD_RxDataBlock>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03b      	beq.n	800165c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80015ea:	e037      	b.n	800165c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015ec:	2100      	movs	r1, #0
 80015ee:	204a      	movs	r0, #74	@ 0x4a
 80015f0:	f7ff fcd6 	bl	8000fa0 <SD_SendCmd>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d132      	bne.n	8001660 <SD_disk_ioctl+0x244>
 80015fa:	2110      	movs	r1, #16
 80015fc:	6a38      	ldr	r0, [r7, #32]
 80015fe:	f7ff fc45 	bl	8000e8c <SD_RxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d02b      	beq.n	8001660 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800160e:	e027      	b.n	8001660 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001610:	2100      	movs	r1, #0
 8001612:	207a      	movs	r0, #122	@ 0x7a
 8001614:	f7ff fcc4 	bl	8000fa0 <SD_SendCmd>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d116      	bne.n	800164c <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001624:	e00b      	b.n	800163e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001626:	6a3c      	ldr	r4, [r7, #32]
 8001628:	1c63      	adds	r3, r4, #1
 800162a:	623b      	str	r3, [r7, #32]
 800162c:	f7ff fb84 	bl	8000d38 <SPI_RxByte>
 8001630:	4603      	mov	r3, r0
 8001632:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001634:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001638:	3301      	adds	r3, #1
 800163a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800163e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001642:	2b03      	cmp	r3, #3
 8001644:	d9ef      	bls.n	8001626 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 800164c:	2304      	movs	r3, #4
 800164e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001652:	e006      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 8001654:	bf00      	nop
 8001656:	e004      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 8001658:	bf00      	nop
 800165a:	e002      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 800165c:	bf00      	nop
 800165e:	e000      	b.n	8001662 <SD_disk_ioctl+0x246>
      break;
 8001660:	bf00      	nop
    }
    
    DESELECT();
 8001662:	f7ff fb43 	bl	8000cec <DESELECT>
    SPI_RxByte();
 8001666:	f7ff fb67 	bl	8000d38 <SPI_RxByte>
  }
  
  return res;
 800166a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800166e:	4618      	mov	r0, r3
 8001670:	372c      	adds	r7, #44	@ 0x2c
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000

0800167c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001684:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001688:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001694:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001698:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800169c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016a4:	e000      	b.n	80016a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f9      	beq.n	80016a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016b2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ce:	f000 ff55 	bl	800257c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d2:	f000 f8cd 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d6:	f000 fa15 	bl	8001b04 <MX_GPIO_Init>
  MX_CAN_Init();
 80016da:	f000 f909 	bl	80018f0 <MX_CAN_Init>
  MX_I2C1_Init();
 80016de:	f000 f959 	bl	8001994 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016e2:	f000 f9bb 	bl	8001a5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 f9e3 	bl	8001ab0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80016ea:	f000 f981 	bl	80019f0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80016ee:	f006 fed1 	bl	8008494 <MX_FATFS_Init>
//    AT24Cxx_t pEeprom;
//  AT24Cxx_Init(&pEeprom, 0x50, &hi2c1);
//  char *text_program_1 = "Program test2,74hc560,20";
//  AT24Cxx_write_buffer_bloking(&pEeprom,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)text_program_1,strlen(text_program_1));

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 80016f2:	2264      	movs	r2, #100	@ 0x64
 80016f4:	4943      	ldr	r1, [pc, #268]	@ (8001804 <main+0x13c>)
 80016f6:	4844      	ldr	r0, [pc, #272]	@ (8001808 <main+0x140>)
 80016f8:	f006 f906 	bl	8007908 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
 80016fc:	2250      	movs	r2, #80	@ 0x50
 80016fe:	4943      	ldr	r1, [pc, #268]	@ (800180c <main+0x144>)
 8001700:	4843      	ldr	r0, [pc, #268]	@ (8001810 <main+0x148>)
 8001702:	f006 f901 	bl	8007908 <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_CAN_Start(&hcan);
 8001706:	4843      	ldr	r0, [pc, #268]	@ (8001814 <main+0x14c>)
 8001708:	f001 f982 	bl	8002a10 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_BUSOFF );
 800170c:	f240 4111 	movw	r1, #1041	@ 0x411
 8001710:	4840      	ldr	r0, [pc, #256]	@ (8001814 <main+0x14c>)
 8001712:	f001 fbd4 	bl	8002ebe <HAL_CAN_ActivateNotification>

//    for (uint8_t i = 0; i < 5; i++) {
//  	printf("SWO Debug!!!\n");
//    }

  BSP_init();
 8001716:	f010 fea7 	bl	8012468 <BSP_init>
//  1,
//  q_app_post,
//  ARRAY_ELEMENT(q_app_post),
//  (OS_event_t *)0 );

  eeprom_task_init(&hi2c1,EEPROM_ADDRESS);
 800171a:	2150      	movs	r1, #80	@ 0x50
 800171c:	483e      	ldr	r0, [pc, #248]	@ (8001818 <main+0x150>)
 800171e:	f010 fadf 	bl	8011ce0 <eeprom_task_init>
  static OS_event_t const *q_eeprom_event[10];
  OS_task_create( AO_task_eeprom,
 8001722:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <main+0x154>)
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	230a      	movs	r3, #10
 800172c:	4a3c      	ldr	r2, [pc, #240]	@ (8001820 <main+0x158>)
 800172e:	2101      	movs	r1, #1
 8001730:	f012 ff5b 	bl	80145ea <OS_task_create>
  1,
  q_eeprom_event,
  ARRAY_ELEMENT(q_eeprom_event),
  (OS_event_t *)0 );

  uart_esp32_task_init(&huart1);
 8001734:	4836      	ldr	r0, [pc, #216]	@ (8001810 <main+0x148>)
 8001736:	f011 f8f9 	bl	801292c <uart_esp32_task_init>
  static OS_event_t const *q_uart_esp32_event[10];
  OS_task_create(AO_task_uart_esp32,
 800173a:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <main+0x15c>)
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	2300      	movs	r3, #0
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	230a      	movs	r3, #10
 8001744:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <main+0x160>)
 8001746:	2101      	movs	r1, #1
 8001748:	f012 ff4f 	bl	80145ea <OS_task_create>
  1,
  q_uart_esp32_event,
  ARRAY_ELEMENT(q_uart_esp32_event),
  (OS_event_t *)0);

  BlinkyTest_app_init();
 800174c:	f011 fa52 	bl	8012bf4 <BlinkyTest_app_init>
  static OS_event_t const *TestOS_blinky[10]; /* Event queue */
  OS_task_create(
 8001750:	4b36      	ldr	r3, [pc, #216]	@ (800182c <main+0x164>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	230a      	movs	r3, #10
 800175a:	4a35      	ldr	r2, [pc, #212]	@ (8001830 <main+0x168>)
 800175c:	2101      	movs	r1, #1
 800175e:	f012 ff44 	bl	80145ea <OS_task_create>
  1,
  TestOS_blinky,
  ARRAY_ELEMENT(TestOS_blinky),
  (OS_event_t *)0);

  screen_task_init();
 8001762:	f010 fec3 	bl	80124ec <screen_task_init>
  static OS_event_t const *q_screen[10]; /* Event queue */
  OS_task_create(
 8001766:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <main+0x16c>)
 8001768:	6818      	ldr	r0, [r3, #0]
 800176a:	2300      	movs	r3, #0
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	230a      	movs	r3, #10
 8001770:	4a31      	ldr	r2, [pc, #196]	@ (8001838 <main+0x170>)
 8001772:	2101      	movs	r1, #1
 8001774:	f012 ff39 	bl	80145ea <OS_task_create>
  1,
  q_screen,
  ARRAY_ELEMENT(q_screen),
  (OS_event_t *)0);

  ds3231_task_init(&hi2c1,ADDRESS_DS3231);
 8001778:	2168      	movs	r1, #104	@ 0x68
 800177a:	4827      	ldr	r0, [pc, #156]	@ (8001818 <main+0x150>)
 800177c:	f010 fea2 	bl	80124c4 <ds3231_task_init>

  sd_task_init();
 8001780:	f010 ffb0 	bl	80126e4 <sd_task_init>
  static OS_event_t const *q_sd[10];
  OS_task_create(
 8001784:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <main+0x174>)
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	230a      	movs	r3, #10
 800178e:	4a2c      	ldr	r2, [pc, #176]	@ (8001840 <main+0x178>)
 8001790:	2101      	movs	r1, #1
 8001792:	f012 ff2a 	bl	80145ea <OS_task_create>
  1,
  q_sd,
  ARRAY_ELEMENT(q_sd),
  (OS_event_t *)0);

  can_bus_task_init(&hcan);
 8001796:	481f      	ldr	r0, [pc, #124]	@ (8001814 <main+0x14c>)
 8001798:	f010 f956 	bl	8011a48 <can_bus_task_init>
  static OS_event_t const *Can_app_event[10];
  OS_task_create( AO_task_can_bus,
 800179c:	4b29      	ldr	r3, [pc, #164]	@ (8001844 <main+0x17c>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	2300      	movs	r3, #0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	230a      	movs	r3, #10
 80017a6:	4a28      	ldr	r2, [pc, #160]	@ (8001848 <main+0x180>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	f012 ff1e 	bl	80145ea <OS_task_create>
  1,
  Can_app_event,
  ARRAY_ELEMENT(Can_app_event),
  (OS_event_t *)0);

  HAL_Delay(4500);
 80017ae:	f241 1094 	movw	r0, #4500	@ 0x1194
 80017b2:	f000 ff45 	bl	8002640 <HAL_Delay>
  Screen_begin(&huart2);
 80017b6:	4814      	ldr	r0, [pc, #80]	@ (8001808 <main+0x140>)
 80017b8:	f00a f9a0 	bl	800bafc <Screen_begin>
//  sprintf(string, "Time RTC: %d/%d/%d - %d:%d:%d\n",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]);
//  printf("%s",string);

//  isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
//		  	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));
     isotp_init_link(&CAN_iso[0], 0x131, can_iso_send_buf , sizeof(can_iso_send_buf)
 80017bc:	23fa      	movs	r3, #250	@ 0xfa
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	4b22      	ldr	r3, [pc, #136]	@ (800184c <main+0x184>)
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	23fa      	movs	r3, #250	@ 0xfa
 80017c6:	4a22      	ldr	r2, [pc, #136]	@ (8001850 <main+0x188>)
 80017c8:	f240 1131 	movw	r1, #305	@ 0x131
 80017cc:	4821      	ldr	r0, [pc, #132]	@ (8001854 <main+0x18c>)
 80017ce:	f012 fe53 	bl	8014478 <isotp_init_link>
		   	  	  	  	  	  	  	, can_iso_recv_buf, sizeof(can_iso_recv_buf));

  isotp_init_link(&CAN_iso[1], 0x132, can_iso_send_buf1 , sizeof(can_iso_send_buf1)
 80017d2:	23fa      	movs	r3, #250	@ 0xfa
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <main+0x190>)
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	23fa      	movs	r3, #250	@ 0xfa
 80017dc:	4a1f      	ldr	r2, [pc, #124]	@ (800185c <main+0x194>)
 80017de:	f44f 7199 	mov.w	r1, #306	@ 0x132
 80017e2:	481f      	ldr	r0, [pc, #124]	@ (8001860 <main+0x198>)
 80017e4:	f012 fe48 	bl	8014478 <isotp_init_link>
		  	  	  	  	  	  	  	, can_iso_recv_buf1, sizeof(can_iso_recv_buf1));

  isotp_init_link(&CAN_iso[2], 0x134, can_iso_send_buf2 , sizeof(can_iso_send_buf2)
 80017e8:	23fa      	movs	r3, #250	@ 0xfa
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <main+0x19c>)
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	23fa      	movs	r3, #250	@ 0xfa
 80017f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001868 <main+0x1a0>)
 80017f4:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80017f8:	481c      	ldr	r0, [pc, #112]	@ (800186c <main+0x1a4>)
 80017fa:	f012 fe3d 	bl	8014478 <isotp_init_link>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint32_t pre;
//  pre = 0;
  	  while (1)
 80017fe:	bf00      	nop
 8001800:	e7fd      	b.n	80017fe <main+0x136>
 8001802:	bf00      	nop
 8001804:	20000b64 	.word	0x20000b64
 8001808:	20000434 	.word	0x20000434
 800180c:	20000bc8 	.word	0x20000bc8
 8001810:	200003ec 	.word	0x200003ec
 8001814:	20000318 	.word	0x20000318
 8001818:	20000340 	.word	0x20000340
 800181c:	0801acac 	.word	0x0801acac
 8001820:	20000c18 	.word	0x20000c18
 8001824:	0801acb8 	.word	0x0801acb8
 8001828:	20000c40 	.word	0x20000c40
 800182c:	0801acbc 	.word	0x0801acbc
 8001830:	20000c68 	.word	0x20000c68
 8001834:	0801acb0 	.word	0x0801acb0
 8001838:	20000c90 	.word	0x20000c90
 800183c:	0801acb4 	.word	0x0801acb4
 8001840:	20000cb8 	.word	0x20000cb8
 8001844:	0801a668 	.word	0x0801a668
 8001848:	20000ce0 	.word	0x20000ce0
 800184c:	2000057c 	.word	0x2000057c
 8001850:	20000678 	.word	0x20000678
 8001854:	200004bc 	.word	0x200004bc
 8001858:	20000774 	.word	0x20000774
 800185c:	20000870 	.word	0x20000870
 8001860:	200004fc 	.word	0x200004fc
 8001864:	2000096c 	.word	0x2000096c
 8001868:	20000a68 	.word	0x20000a68
 800186c:	2000053c 	.word	0x2000053c

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b090      	sub	sp, #64	@ 0x40
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0318 	add.w	r3, r7, #24
 800187a:	2228      	movs	r2, #40	@ 0x28
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f015 f9ec 	bl	8016c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001896:	2301      	movs	r3, #1
 8001898:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189a:	2310      	movs	r3, #16
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018a2:	2300      	movs	r3, #0
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80018aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ac:	f107 0318 	add.w	r3, r7, #24
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 ff07 	bl	80066c4 <HAL_RCC_OscConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80018bc:	f000 fb09 	bl	8001ed2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c0:	230f      	movs	r3, #15
 80018c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c4:	2302      	movs	r3, #2
 80018c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2101      	movs	r1, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f005 f975 	bl	8006bc8 <HAL_RCC_ClockConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80018e4:	f000 faf5 	bl	8001ed2 <Error_Handler>
  }
}
 80018e8:	bf00      	nop
 80018ea:	3740      	adds	r7, #64	@ 0x40
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80018f6:	4b25      	ldr	r3, [pc, #148]	@ (800198c <MX_CAN_Init+0x9c>)
 80018f8:	4a25      	ldr	r2, [pc, #148]	@ (8001990 <MX_CAN_Init+0xa0>)
 80018fa:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80018fc:	4b23      	ldr	r3, [pc, #140]	@ (800198c <MX_CAN_Init+0x9c>)
 80018fe:	2204      	movs	r2, #4
 8001900:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001902:	4b22      	ldr	r3, [pc, #136]	@ (800198c <MX_CAN_Init+0x9c>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001908:	4b20      	ldr	r3, [pc, #128]	@ (800198c <MX_CAN_Init+0x9c>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800190e:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <MX_CAN_Init+0x9c>)
 8001910:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001914:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001916:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <MX_CAN_Init+0x9c>)
 8001918:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800191c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800191e:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <MX_CAN_Init+0x9c>)
 8001920:	2200      	movs	r2, #0
 8001922:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <MX_CAN_Init+0x9c>)
 8001926:	2200      	movs	r2, #0
 8001928:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800192a:	4b18      	ldr	r3, [pc, #96]	@ (800198c <MX_CAN_Init+0x9c>)
 800192c:	2200      	movs	r2, #0
 800192e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <MX_CAN_Init+0x9c>)
 8001932:	2200      	movs	r2, #0
 8001934:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <MX_CAN_Init+0x9c>)
 8001938:	2200      	movs	r2, #0
 800193a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <MX_CAN_Init+0x9c>)
 800193e:	2200      	movs	r2, #0
 8001940:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001942:	4812      	ldr	r0, [pc, #72]	@ (800198c <MX_CAN_Init+0x9c>)
 8001944:	f000 fea0 	bl	8002688 <HAL_CAN_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800194e:	f000 fac0 	bl	8001ed2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001952:	2301      	movs	r3, #1
 8001954:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8001956:	230a      	movs	r3, #10
 8001958:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800195a:	2301      	movs	r3, #1
 800195c:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001972:	2301      	movs	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800197a:	463b      	mov	r3, r7
 800197c:	4619      	mov	r1, r3
 800197e:	4803      	ldr	r0, [pc, #12]	@ (800198c <MX_CAN_Init+0x9c>)
 8001980:	f000 ff7d 	bl	800287e <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	@ 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000318 	.word	0x20000318
 8001990:	40006400 	.word	0x40006400

08001994 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <MX_I2C1_Init+0x50>)
 800199a:	4a13      	ldr	r2, [pc, #76]	@ (80019e8 <MX_I2C1_Init+0x54>)
 800199c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800199e:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <MX_I2C1_Init+0x50>)
 80019a0:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <MX_I2C1_Init+0x58>)
 80019a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <MX_I2C1_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <MX_I2C1_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <MX_I2C1_Init+0x50>)
 80019b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <MX_I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <MX_I2C1_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c4:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d0:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <MX_I2C1_Init+0x50>)
 80019d2:	f002 f855 	bl	8003a80 <HAL_I2C_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019dc:	f000 fa79 	bl	8001ed2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000340 	.word	0x20000340
 80019e8:	40005400 	.word	0x40005400
 80019ec:	00061a80 	.word	0x00061a80

080019f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019f4:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <MX_SPI1_Init+0x64>)
 80019f6:	4a18      	ldr	r2, [pc, #96]	@ (8001a58 <MX_SPI1_Init+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019fa:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <MX_SPI1_Init+0x64>)
 80019fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a02:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a24:	2218      	movs	r2, #24
 8001a26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a34:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a3c:	220a      	movs	r2, #10
 8001a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	@ (8001a54 <MX_SPI1_Init+0x64>)
 8001a42:	f005 fa4f 	bl	8006ee4 <HAL_SPI_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a4c:	f000 fa41 	bl	8001ed2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000394 	.word	0x20000394
 8001a58:	40013000 	.word	0x40013000

08001a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <MX_USART1_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a94:	f005 fe5d 	bl	8007752 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f000 fa18 	bl	8001ed2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200003ec 	.word	0x200003ec
 8001aac:	40013800 	.word	0x40013800

08001ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <MX_USART2_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001abc:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae8:	f005 fe33 	bl	8007752 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f000 f9ee 	bl	8001ed2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000434 	.word	0x20000434
 8001b00:	40004400 	.word	0x40004400

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0308 	add.w	r3, r7, #8
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <MX_GPIO_Init+0x98>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <MX_GPIO_Init+0x98>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <MX_GPIO_Init+0x98>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <MX_GPIO_Init+0x98>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a19      	ldr	r2, [pc, #100]	@ (8001b9c <MX_GPIO_Init+0x98>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <MX_GPIO_Init+0x98>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4814      	ldr	r0, [pc, #80]	@ (8001ba0 <MX_GPIO_Init+0x9c>)
 8001b4e:	f001 ff7f 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2101      	movs	r1, #1
 8001b56:	4813      	ldr	r0, [pc, #76]	@ (8001ba4 <MX_GPIO_Init+0xa0>)
 8001b58:	f001 ff7a 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_PIN_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	4619      	mov	r1, r3
 8001b72:	480b      	ldr	r0, [pc, #44]	@ (8001ba0 <MX_GPIO_Init+0x9c>)
 8001b74:	f001 fde8 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2302      	movs	r3, #2
 8001b86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <MX_GPIO_Init+0xa0>)
 8001b90:	f001 fdda 	bl	8003748 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b94:	bf00      	nop
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010c00 	.word	0x40010c00

08001ba8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == huart2.Instance ) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <HAL_UARTEx_RxEventCallback+0xac>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d10d      	bne.n	8001bdc <HAL_UARTEx_RxEventCallback+0x34>
		// Call to callback function screen
		Screen_RX_data(dataRX);
 8001bc0:	4825      	ldr	r0, [pc, #148]	@ (8001c58 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001bc2:	f00a f81f 	bl	800bc04 <Screen_RX_data>

		// Clear RX Buffer
		memset(dataRX,0,sizeof(dataRX));
 8001bc6:	2264      	movs	r2, #100	@ 0x64
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4823      	ldr	r0, [pc, #140]	@ (8001c58 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001bcc:	f015 f846 	bl	8016c5c <memset>

		// Enable Interrupt UART again
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, dataRX, sizeof(dataRX)); // Enable interrupt UART
 8001bd0:	2264      	movs	r2, #100	@ 0x64
 8001bd2:	4921      	ldr	r1, [pc, #132]	@ (8001c58 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001bd4:	481f      	ldr	r0, [pc, #124]	@ (8001c54 <HAL_UARTEx_RxEventCallback+0xac>)
 8001bd6:	f005 fe97 	bl	8007908 <HAL_UARTEx_ReceiveToIdle_IT>

    memset(dataRX_ESP32,0,sizeof(dataRX_ESP32));

		HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
	}
}
 8001bda:	e037      	b.n	8001c4c <HAL_UARTEx_RxEventCallback+0xa4>
	} else if (huart->Instance == huart1.Instance) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <HAL_UARTEx_RxEventCallback+0xb4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d131      	bne.n	8001c4c <HAL_UARTEx_RxEventCallback+0xa4>
    uart_esp32_t *RX_ESP32 = malloc(sizeof(uart_esp32_t));
 8001be8:	2008      	movs	r0, #8
 8001bea:	f012 ffd1 	bl	8014b90 <malloc>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	60fb      	str	r3, [r7, #12]
    RX_ESP32->data = malloc(strlen(dataRX_ESP32));
 8001bf2:	481b      	ldr	r0, [pc, #108]	@ (8001c60 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001bf4:	f7fe fab6 	bl	8000164 <strlen>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	68fc      	ldr	r4, [r7, #12]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f012 ffc7 	bl	8014b90 <malloc>
 8001c02:	4603      	mov	r3, r0
 8001c04:	6023      	str	r3, [r4, #0]
    memcpy(RX_ESP32->data,dataRX_ESP32,strlen(dataRX_ESP32));
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681c      	ldr	r4, [r3, #0]
 8001c0a:	4815      	ldr	r0, [pc, #84]	@ (8001c60 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c0c:	f7fe faaa 	bl	8000164 <strlen>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	4912      	ldr	r1, [pc, #72]	@ (8001c60 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c16:	4620      	mov	r0, r4
 8001c18:	f015 f969 	bl	8016eee <memcpy>
    RX_ESP32->len = strlen(dataRX_ESP32);
 8001c1c:	68fc      	ldr	r4, [r7, #12]
 8001c1e:	4810      	ldr	r0, [pc, #64]	@ (8001c60 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c20:	f7fe faa0 	bl	8000164 <strlen>
 8001c24:	4603      	mov	r3, r0
 8001c26:	6063      	str	r3, [r4, #4]
    OS_task_post_event(AO_task_uart_esp32,RECEIVE_DATA_ESP32,(uint8_t *)&RX_ESP32,sizeof(uart_esp32_t));
 8001c28:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	f107 020c 	add.w	r2, r7, #12
 8001c30:	2308      	movs	r3, #8
 8001c32:	2101      	movs	r1, #1
 8001c34:	f012 fd7a 	bl	801472c <OS_task_post_event>
    memset(dataRX_ESP32,0,sizeof(dataRX_ESP32));
 8001c38:	2250      	movs	r2, #80	@ 0x50
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4808      	ldr	r0, [pc, #32]	@ (8001c60 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c3e:	f015 f80d 	bl	8016c5c <memset>
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRX_ESP32, sizeof(dataRX_ESP32)); // Enable interrupt UART
 8001c42:	2250      	movs	r2, #80	@ 0x50
 8001c44:	4906      	ldr	r1, [pc, #24]	@ (8001c60 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001c46:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <HAL_UARTEx_RxEventCallback+0xb4>)
 8001c48:	f005 fe5e 	bl	8007908 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	20000434 	.word	0x20000434
 8001c58:	20000b64 	.word	0x20000b64
 8001c5c:	200003ec 	.word	0x200003ec
 8001c60:	20000bc8 	.word	0x20000bc8
 8001c64:	0801acb8 	.word	0x0801acb8

08001c68 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance) {

		
	}
  /* Transmit complete wait eeprom write */
	if (AO_task_eeprom->dispatch != NULL && AO_task_eeprom->init != NULL ) {
 8001c70:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <HAL_I2C_MemTxCpltCallback+0x34>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_I2C_MemTxCpltCallback+0x2a>
 8001c7a:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <HAL_I2C_MemTxCpltCallback+0x34>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_I2C_MemTxCpltCallback+0x2a>
	  OS_task_post_event(AO_task_eeprom, WAIT_WRITE_TIMEOUT, (uint8_t *)0, 0);
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_I2C_MemTxCpltCallback+0x34>)
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	f012 fd4d 	bl	801472c <OS_task_post_event>
	}
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	0801acac 	.word	0x0801acac

08001ca0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb0:	6018      	str	r0, [r3, #0]
	uint8_t payload[500];
  uint16_t act_size = 0;
 8001cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb6:	f5a3 73fb 	sub.w	r3, r3, #502	@ 0x1f6
 8001cba:	2200      	movs	r2, #0
 8001cbc:	801a      	strh	r2, [r3, #0]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc2:	f5a3 70fe 	sub.w	r0, r3, #508	@ 0x1fc
 8001cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001df4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	@ (8001df8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	6800      	ldr	r0, [r0, #0]
 8001cce:	f000 ffd5 	bl	8002c7c <HAL_CAN_GetRxMessage>
//    if (CAN_iso[1].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
//      isotp_receive(&CAN_iso[1], payload, sizeof(payload), &act_size);
//      get_data_testing_finish(&_Screen,DEVICE_1,payload);
//    }
//  }
   if (RxHeader.StdId == 0x471) {
 8001cd2:	4b49      	ldr	r3, [pc, #292]	@ (8001df8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f240 4271 	movw	r2, #1137	@ 0x471
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d128      	bne.n	8001d30 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>
     isotp_on_can_message(&CAN_iso[0], RxData, RxHeader.DLC);
 8001cde:	4b46      	ldr	r3, [pc, #280]	@ (8001df8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4943      	ldr	r1, [pc, #268]	@ (8001df4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001ce8:	4844      	ldr	r0, [pc, #272]	@ (8001dfc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001cea:	f012 fa47 	bl	801417c <isotp_on_can_message>
       if(RxData[0] == 0x30) {
 8001cee:	4b41      	ldr	r3, [pc, #260]	@ (8001df4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b30      	cmp	r3, #48	@ 0x30
 8001cf4:	d106      	bne.n	8001d04 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>
         OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 8001cf6:	4b42      	ldr	r3, [pc, #264]	@ (8001e00 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2103      	movs	r1, #3
 8001d00:	f012 fd14 	bl	801472c <OS_task_post_event>
       }
     //printf("%x,%c,%c,%c,%c,%c,%c,%c\n",RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
     if (CAN_iso[0].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8001d04:	4b3d      	ldr	r3, [pc, #244]	@ (8001dfc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001d06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d16d      	bne.n	8001dea <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[0], payload, sizeof(payload), &act_size);
 8001d0e:	f107 030a 	add.w	r3, r7, #10
 8001d12:	f107 010c 	add.w	r1, r7, #12
 8001d16:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d1a:	4838      	ldr	r0, [pc, #224]	@ (8001dfc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001d1c:	f012 fb80 	bl	8014420 <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_1,payload);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	461a      	mov	r2, r3
 8001d26:	2100      	movs	r1, #0
 8001d28:	4836      	ldr	r0, [pc, #216]	@ (8001e04 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001d2a:	f00f f953 	bl	8010fd4 <get_data_testing_finish>
     if (CAN_iso[2].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
       isotp_receive(&CAN_iso[2], payload, sizeof(payload), &act_size);
       get_data_testing_finish(&_Screen,DEVICE_3,payload);
     }
   }
}
 8001d2e:	e05c      	b.n	8001dea <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
   } else if (RxHeader.StdId == 0x472) {
 8001d30:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f240 4272 	movw	r2, #1138	@ 0x472
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d128      	bne.n	8001d8e <HAL_CAN_RxFifo1MsgPendingCallback+0xee>
     isotp_on_can_message(&CAN_iso[1], RxData, RxHeader.DLC);
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001df8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	492b      	ldr	r1, [pc, #172]	@ (8001df4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001d46:	4830      	ldr	r0, [pc, #192]	@ (8001e08 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001d48:	f012 fa18 	bl	801417c <isotp_on_can_message>
     if(RxData[0] == 0x30) {
 8001d4c:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b30      	cmp	r3, #48	@ 0x30
 8001d52:	d106      	bne.n	8001d62 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
       OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 8001d54:	4b2a      	ldr	r3, [pc, #168]	@ (8001e00 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2103      	movs	r1, #3
 8001d5e:	f012 fce5 	bl	801472c <OS_task_post_event>
     if (CAN_iso[1].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8001d62:	4b26      	ldr	r3, [pc, #152]	@ (8001dfc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001d64:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d13e      	bne.n	8001dea <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[1], payload, sizeof(payload), &act_size);
 8001d6c:	f107 030a 	add.w	r3, r7, #10
 8001d70:	f107 010c 	add.w	r1, r7, #12
 8001d74:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d78:	4823      	ldr	r0, [pc, #140]	@ (8001e08 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 8001d7a:	f012 fb51 	bl	8014420 <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_2,payload);
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	461a      	mov	r2, r3
 8001d84:	2101      	movs	r1, #1
 8001d86:	481f      	ldr	r0, [pc, #124]	@ (8001e04 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001d88:	f00f f924 	bl	8010fd4 <get_data_testing_finish>
}
 8001d8c:	e02d      	b.n	8001dea <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
   } else if (RxHeader.StdId == 0x474) {
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f240 4274 	movw	r2, #1140	@ 0x474
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d127      	bne.n	8001dea <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
     isotp_on_can_message(&CAN_iso[2], RxData, RxHeader.DLC);
 8001d9a:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	4914      	ldr	r1, [pc, #80]	@ (8001df4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001da4:	4819      	ldr	r0, [pc, #100]	@ (8001e0c <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 8001da6:	f012 f9e9 	bl	801417c <isotp_on_can_message>
     if(RxData[0] == 0x30) {
 8001daa:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b30      	cmp	r3, #48	@ 0x30
 8001db0:	d106      	bne.n	8001dc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>
       OS_task_post_event(AO_task_can_bus,TX_SUCCESS,(uint8_t *)0,0);
 8001db2:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	2300      	movs	r3, #0
 8001db8:	2200      	movs	r2, #0
 8001dba:	2103      	movs	r1, #3
 8001dbc:	f012 fcb6 	bl	801472c <OS_task_post_event>
     if (CAN_iso[2].receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8001dc2:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d10f      	bne.n	8001dea <HAL_CAN_RxFifo1MsgPendingCallback+0x14a>
       isotp_receive(&CAN_iso[2], payload, sizeof(payload), &act_size);
 8001dca:	f107 030a 	add.w	r3, r7, #10
 8001dce:	f107 010c 	add.w	r1, r7, #12
 8001dd2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001dd6:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 8001dd8:	f012 fb22 	bl	8014420 <isotp_receive>
       get_data_testing_finish(&_Screen,DEVICE_3,payload);
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	461a      	mov	r2, r3
 8001de2:	2102      	movs	r1, #2
 8001de4:	4807      	ldr	r0, [pc, #28]	@ (8001e04 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 8001de6:	f00f f8f5 	bl	8010fd4 <get_data_testing_finish>
}
 8001dea:	bf00      	nop
 8001dec:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	200004b0 	.word	0x200004b0
 8001df8:	20000494 	.word	0x20000494
 8001dfc:	200004bc 	.word	0x200004bc
 8001e00:	0801a668 	.word	0x0801a668
 8001e04:	20000d48 	.word	0x20000d48
 8001e08:	200004fc 	.word	0x200004fc
 8001e0c:	2000053c 	.word	0x2000053c

08001e10 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	uint32_t lastError = HAL_CAN_GetError(hcan);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f001 fa8f 	bl	800333c <HAL_CAN_GetError>
 8001e1e:	60f8      	str	r0, [r7, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_write>:

int _write(int file, char *ptr, int len) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e009      	b.n	8001e4e <_write+0x26>
        ITM_SendChar(ptr[i]);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	4413      	add	r3, r2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fc1a 	bl	800167c <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dbf1      	blt.n	8001e3a <_write+0x12>
    }
    return len;
 8001e56:	687b      	ldr	r3, [r7, #4]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <isotp_user_send_can>:

/* FUNCTION USING IN CAN ISO TP */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	71fb      	strb	r3, [r7, #7]
  TxHeader.DLC = size;
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <isotp_user_send_can+0x48>)
 8001e72:	6113      	str	r3, [r2, #16]
  TxHeader.StdId = arbitration_id;
 8001e74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <isotp_user_send_can+0x48>)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6013      	str	r3, [r2, #0]
  TxHeader.IDE = CAN_ID_STD;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <isotp_user_send_can+0x48>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <isotp_user_send_can+0x48>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]

  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) == HAL_OK) {
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <isotp_user_send_can+0x4c>)
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	4907      	ldr	r1, [pc, #28]	@ (8001ea8 <isotp_user_send_can+0x48>)
 8001e8c:	4808      	ldr	r0, [pc, #32]	@ (8001eb0 <isotp_user_send_can+0x50>)
 8001e8e:	f000 fe03 	bl	8002a98 <HAL_CAN_AddTxMessage>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <isotp_user_send_can+0x3c>
	  return ISOTP_RET_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e001      	b.n	8001ea0 <isotp_user_send_can+0x40>
  }
  return ISOTP_RET_ERROR;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2000047c 	.word	0x2000047c
 8001eac:	200004b8 	.word	0x200004b8
 8001eb0:	20000318 	.word	0x20000318

08001eb4 <isotp_user_get_ms>:


uint32_t isotp_user_get_ms(void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001eb8:	f000 fbb8 	bl	800262c <HAL_GetTick>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <isotp_user_debug>:

void isotp_user_debug(const char* message, ...) {
 8001ec2:	b40f      	push	{r0, r1, r2, r3}
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	b004      	add	sp, #16
 8001ed0:	4770      	bx	lr

08001ed2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed6:	b672      	cpsid	i
}
 8001ed8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eda:	bf00      	nop
 8001edc:	e7fd      	b.n	8001eda <Error_Handler+0x8>
	...

08001ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a0e      	ldr	r2, [pc, #56]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	61d3      	str	r3, [r2, #28]
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <HAL_MspInit+0x5c>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f16:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <HAL_MspInit+0x60>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <HAL_MspInit+0x60>)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010000 	.word	0x40010000

08001f44 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a28      	ldr	r2, [pc, #160]	@ (8002000 <HAL_CAN_MspInit+0xbc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d149      	bne.n	8001ff8 <HAL_CAN_MspInit+0xb4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f64:	4b27      	ldr	r3, [pc, #156]	@ (8002004 <HAL_CAN_MspInit+0xc0>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4a26      	ldr	r2, [pc, #152]	@ (8002004 <HAL_CAN_MspInit+0xc0>)
 8001f6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f6e:	61d3      	str	r3, [r2, #28]
 8001f70:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <HAL_CAN_MspInit+0xc0>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <HAL_CAN_MspInit+0xc0>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a20      	ldr	r2, [pc, #128]	@ (8002004 <HAL_CAN_MspInit+0xc0>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b1e      	ldr	r3, [pc, #120]	@ (8002004 <HAL_CAN_MspInit+0xc0>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4817      	ldr	r0, [pc, #92]	@ (8002008 <HAL_CAN_MspInit+0xc4>)
 8001faa:	f001 fbcd 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4811      	ldr	r0, [pc, #68]	@ (8002008 <HAL_CAN_MspInit+0xc4>)
 8001fc4:	f001 fbc0 	bl	8003748 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2013      	movs	r0, #19
 8001fce:	f001 fab6 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001fd2:	2013      	movs	r0, #19
 8001fd4:	f001 facf 	bl	8003576 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2015      	movs	r0, #21
 8001fde:	f001 faae 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001fe2:	2015      	movs	r0, #21
 8001fe4:	f001 fac7 	bl	8003576 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	2016      	movs	r0, #22
 8001fee:	f001 faa6 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001ff2:	2016      	movs	r0, #22
 8001ff4:	f001 fabf 	bl	8003576 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40006400 	.word	0x40006400
 8002004:	40021000 	.word	0x40021000
 8002008:	40010800 	.word	0x40010800

0800200c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a19      	ldr	r2, [pc, #100]	@ (800208c <HAL_I2C_MspInit+0x80>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d12b      	bne.n	8002084 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	4b18      	ldr	r3, [pc, #96]	@ (8002090 <HAL_I2C_MspInit+0x84>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a17      	ldr	r2, [pc, #92]	@ (8002090 <HAL_I2C_MspInit+0x84>)
 8002032:	f043 0308 	orr.w	r3, r3, #8
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <HAL_I2C_MspInit+0x84>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002044:	23c0      	movs	r3, #192	@ 0xc0
 8002046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002048:	2312      	movs	r3, #18
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	4619      	mov	r1, r3
 8002056:	480f      	ldr	r0, [pc, #60]	@ (8002094 <HAL_I2C_MspInit+0x88>)
 8002058:	f001 fb76 	bl	8003748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <HAL_I2C_MspInit+0x84>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	4a0b      	ldr	r2, [pc, #44]	@ (8002090 <HAL_I2C_MspInit+0x84>)
 8002062:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002066:	61d3      	str	r3, [r2, #28]
 8002068:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <HAL_I2C_MspInit+0x84>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	201f      	movs	r0, #31
 800207a:	f001 fa60 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800207e:	201f      	movs	r0, #31
 8002080:	f001 fa79 	bl	8003576 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002084:	bf00      	nop
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40005400 	.word	0x40005400
 8002090:	40021000 	.word	0x40021000
 8002094:	40010c00 	.word	0x40010c00

08002098 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002120 <HAL_SPI_MspInit+0x88>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d12f      	bne.n	8002118 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002124 <HAL_SPI_MspInit+0x8c>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a19      	ldr	r2, [pc, #100]	@ (8002124 <HAL_SPI_MspInit+0x8c>)
 80020be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <HAL_SPI_MspInit+0x8c>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <HAL_SPI_MspInit+0x8c>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a13      	ldr	r2, [pc, #76]	@ (8002124 <HAL_SPI_MspInit+0x8c>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <HAL_SPI_MspInit+0x8c>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80020e8:	23a0      	movs	r3, #160	@ 0xa0
 80020ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	4619      	mov	r1, r3
 80020fa:	480b      	ldr	r0, [pc, #44]	@ (8002128 <HAL_SPI_MspInit+0x90>)
 80020fc:	f001 fb24 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002100:	2340      	movs	r3, #64	@ 0x40
 8002102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	4619      	mov	r1, r3
 8002112:	4805      	ldr	r0, [pc, #20]	@ (8002128 <HAL_SPI_MspInit+0x90>)
 8002114:	f001 fb18 	bl	8003748 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40013000 	.word	0x40013000
 8002124:	40021000 	.word	0x40021000
 8002128:	40010800 	.word	0x40010800

0800212c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	@ 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0318 	add.w	r3, r7, #24
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a3f      	ldr	r2, [pc, #252]	@ (8002244 <HAL_UART_MspInit+0x118>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d13a      	bne.n	80021c2 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800214c:	4b3e      	ldr	r3, [pc, #248]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a3d      	ldr	r2, [pc, #244]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 8002152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b3b      	ldr	r3, [pc, #236]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002164:	4b38      	ldr	r3, [pc, #224]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a37      	ldr	r2, [pc, #220]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b35      	ldr	r3, [pc, #212]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800217c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	f107 0318 	add.w	r3, r7, #24
 800218e:	4619      	mov	r1, r3
 8002190:	482e      	ldr	r0, [pc, #184]	@ (800224c <HAL_UART_MspInit+0x120>)
 8002192:	f001 fad9 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0318 	add.w	r3, r7, #24
 80021a8:	4619      	mov	r1, r3
 80021aa:	4828      	ldr	r0, [pc, #160]	@ (800224c <HAL_UART_MspInit+0x120>)
 80021ac:	f001 facc 	bl	8003748 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2025      	movs	r0, #37	@ 0x25
 80021b6:	f001 f9c2 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ba:	2025      	movs	r0, #37	@ 0x25
 80021bc:	f001 f9db 	bl	8003576 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80021c0:	e03c      	b.n	800223c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a22      	ldr	r2, [pc, #136]	@ (8002250 <HAL_UART_MspInit+0x124>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d137      	bne.n	800223c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 80021d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d6:	61d3      	str	r3, [r2, #28]
 80021d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a17      	ldr	r2, [pc, #92]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <HAL_UART_MspInit+0x11c>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021fc:	2304      	movs	r3, #4
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 0318 	add.w	r3, r7, #24
 800220c:	4619      	mov	r1, r3
 800220e:	480f      	ldr	r0, [pc, #60]	@ (800224c <HAL_UART_MspInit+0x120>)
 8002210:	f001 fa9a 	bl	8003748 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002214:	2308      	movs	r3, #8
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 0318 	add.w	r3, r7, #24
 8002224:	4619      	mov	r1, r3
 8002226:	4809      	ldr	r0, [pc, #36]	@ (800224c <HAL_UART_MspInit+0x120>)
 8002228:	f001 fa8e 	bl	8003748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2026      	movs	r0, #38	@ 0x26
 8002232:	f001 f984 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002236:	2026      	movs	r0, #38	@ 0x26
 8002238:	f001 f99d 	bl	8003576 <HAL_NVIC_EnableIRQ>
}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	@ 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40013800 	.word	0x40013800
 8002248:	40021000 	.word	0x40021000
 800224c:	40010800 	.word	0x40010800
 8002250:	40004400 	.word	0x40004400

08002254 <SDTimer_Handler>:
/* USER CODE BEGIN PV */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <SDTimer_Handler+0x3c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <SDTimer_Handler+0x1c>
    Timer1--;
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <SDTimer_Handler+0x3c>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <SDTimer_Handler+0x3c>)
 800226e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <SDTimer_Handler+0x40>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <SDTimer_Handler+0x34>
    Timer2--;
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <SDTimer_Handler+0x40>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b2da      	uxtb	r2, r3
 8002284:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <SDTimer_Handler+0x40>)
 8002286:	701a      	strb	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20000d09 	.word	0x20000d09
 8002294:	20000d0a 	.word	0x20000d0a

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <NMI_Handler+0x4>

080022a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <HardFault_Handler+0x4>

080022a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <MemManage_Handler+0x4>

080022b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <UsageFault_Handler+0x4>

080022c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80022ea:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <SysTick_Handler+0x6c>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b16      	ldr	r3, [pc, #88]	@ (8002350 <SysTick_Handler+0x6c>)
 80022f6:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80022f8:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <SysTick_Handler+0x6c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b09      	cmp	r3, #9
 8002300:	d904      	bls.n	800230c <SysTick_Handler+0x28>
	  {
	    FatFsCnt = 0;
 8002302:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <SysTick_Handler+0x6c>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002308:	f7ff ffa4 	bl	8002254 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230c:	f000 f97c 	bl	8002608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  OS_TimeEvt_tick();
 8002310:	f012 fa7a 	bl	8014808 <OS_TimeEvt_tick>

  if (!HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <SysTick_Handler+0x70>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	480f      	ldr	r0, [pc, #60]	@ (8002358 <SysTick_Handler+0x74>)
 800231c:	f000 fc8b 	bl	8002c36 <HAL_CAN_IsTxMessagePending>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <SysTick_Handler+0x62>
//	  isotp_poll(&CAN_iso[0]);
	   for(uint8_t i = 0; i < 3; i++) {
 8002326:	2300      	movs	r3, #0
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	e009      	b.n	8002340 <SysTick_Handler+0x5c>
	     isotp_poll(&CAN_iso[i]);
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	019b      	lsls	r3, r3, #6
 8002330:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <SysTick_Handler+0x78>)
 8002332:	4413      	add	r3, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f012 f8c6 	bl	80144c6 <isotp_poll>
	   for(uint8_t i = 0; i < 3; i++) {
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	3301      	adds	r3, #1
 800233e:	71fb      	strb	r3, [r7, #7]
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d9f2      	bls.n	800232c <SysTick_Handler+0x48>
	   }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000d08 	.word	0x20000d08
 8002354:	200004b8 	.word	0x200004b8
 8002358:	20000318 	.word	0x20000318
 800235c:	200004bc 	.word	0x200004bc

08002360 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8002366:	f000 fdcf 	bl	8002f08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000318 	.word	0x20000318

08002374 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <CAN1_RX1_IRQHandler+0x10>)
 800237a:	f000 fdc5 	bl	8002f08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000318 	.word	0x20000318

08002388 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <CAN1_SCE_IRQHandler+0x10>)
 800238e:	f000 fdbb 	bl	8002f08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000318 	.word	0x20000318

0800239c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <I2C1_EV_IRQHandler+0x10>)
 80023a2:	f002 fa0d 	bl	80047c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000340 	.word	0x20000340

080023b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023b4:	4802      	ldr	r0, [pc, #8]	@ (80023c0 <USART1_IRQHandler+0x10>)
 80023b6:	f005 fb05 	bl	80079c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200003ec 	.word	0x200003ec

080023c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023c8:	4802      	ldr	r0, [pc, #8]	@ (80023d4 <USART2_IRQHandler+0x10>)
 80023ca:	f005 fafb 	bl	80079c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000434 	.word	0x20000434

080023d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return 1;
 80023dc:	2301      	movs	r3, #1
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <_kill>:

int _kill(int pid, int sig)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023f0:	f014 fd3a 	bl	8016e68 <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2216      	movs	r2, #22
 80023f8:	601a      	str	r2, [r3, #0]
  return -1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_exit>:

void _exit (int status)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800240e:	f04f 31ff 	mov.w	r1, #4294967295
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffe7 	bl	80023e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <_exit+0x12>

0800241c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e00a      	b.n	8002444 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800242e:	f3af 8000 	nop.w
 8002432:	4601      	mov	r1, r0
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	60ba      	str	r2, [r7, #8]
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	dbf0      	blt.n	800242e <_read+0x12>
  }

  return len;
 800244c:	687b      	ldr	r3, [r7, #4]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800247c:	605a      	str	r2, [r3, #4]
  return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <_isatty>:

int _isatty(int file)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
	...

080024b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c0:	4a14      	ldr	r2, [pc, #80]	@ (8002514 <_sbrk+0x5c>)
 80024c2:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <_sbrk+0x60>)
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <_sbrk+0x64>)
 80024d6:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <_sbrk+0x68>)
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d207      	bcs.n	80024f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e8:	f014 fcbe 	bl	8016e68 <__errno>
 80024ec:	4603      	mov	r3, r0
 80024ee:	220c      	movs	r2, #12
 80024f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	e009      	b.n	800250c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f8:	4b08      	ldr	r3, [pc, #32]	@ (800251c <_sbrk+0x64>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fe:	4b07      	ldr	r3, [pc, #28]	@ (800251c <_sbrk+0x64>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	4a05      	ldr	r2, [pc, #20]	@ (800251c <_sbrk+0x64>)
 8002508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20005000 	.word	0x20005000
 8002518:	00000400 	.word	0x00000400
 800251c:	20000d0c 	.word	0x20000d0c
 8002520:	20003d58 	.word	0x20003d58

08002524 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002530:	f7ff fff8 	bl	8002524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002534:	480b      	ldr	r0, [pc, #44]	@ (8002564 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002536:	490c      	ldr	r1, [pc, #48]	@ (8002568 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002538:	4a0c      	ldr	r2, [pc, #48]	@ (800256c <LoopFillZerobss+0x16>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a09      	ldr	r2, [pc, #36]	@ (8002570 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800254c:	4c09      	ldr	r4, [pc, #36]	@ (8002574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800255a:	f014 fc8b 	bl	8016e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800255e:	f7ff f8b3 	bl	80016c8 <main>
  bx lr
 8002562:	4770      	bx	lr
  ldr r0, =_sdata
 8002564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002568:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 800256c:	0801b1b8 	.word	0x0801b1b8
  ldr r2, =_sbss
 8002570:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8002574:	20003d54 	.word	0x20003d54

08002578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002578:	e7fe      	b.n	8002578 <ADC1_2_IRQHandler>
	...

0800257c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002580:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <HAL_Init+0x28>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a07      	ldr	r2, [pc, #28]	@ (80025a4 <HAL_Init+0x28>)
 8002586:	f043 0310 	orr.w	r3, r3, #16
 800258a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800258c:	2003      	movs	r0, #3
 800258e:	f000 ffcb 	bl	8003528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002592:	200f      	movs	r0, #15
 8002594:	f000 f808 	bl	80025a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002598:	f7ff fca2 	bl	8001ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40022000 	.word	0x40022000

080025a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025b0:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <HAL_InitTick+0x54>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <HAL_InitTick+0x58>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4619      	mov	r1, r3
 80025ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025be:	fbb3 f3f1 	udiv	r3, r3, r1
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 ffe3 	bl	8003592 <HAL_SYSTICK_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00e      	b.n	80025f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b0f      	cmp	r3, #15
 80025da:	d80a      	bhi.n	80025f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025dc:	2200      	movs	r2, #0
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295
 80025e4:	f000 ffab 	bl	800353e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025e8:	4a06      	ldr	r2, [pc, #24]	@ (8002604 <HAL_InitTick+0x5c>)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e000      	b.n	80025f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000004 	.word	0x20000004
 8002600:	2000000c 	.word	0x2000000c
 8002604:	20000008 	.word	0x20000008

08002608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_IncTick+0x1c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <HAL_IncTick+0x20>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4413      	add	r3, r2
 8002618:	4a03      	ldr	r2, [pc, #12]	@ (8002628 <HAL_IncTick+0x20>)
 800261a:	6013      	str	r3, [r2, #0]
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	2000000c 	.word	0x2000000c
 8002628:	20000d10 	.word	0x20000d10

0800262c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return uwTick;
 8002630:	4b02      	ldr	r3, [pc, #8]	@ (800263c <HAL_GetTick+0x10>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	20000d10 	.word	0x20000d10

08002640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff fff0 	bl	800262c <HAL_GetTick>
 800264c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d005      	beq.n	8002666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_Delay+0x44>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002666:	bf00      	nop
 8002668:	f7ff ffe0 	bl	800262c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d8f7      	bhi.n	8002668 <HAL_Delay+0x28>
  {
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000000c 	.word	0x2000000c

08002688 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0ed      	b.n	8002876 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff fc4c 	bl	8001f44 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026bc:	f7ff ffb6 	bl	800262c <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026c2:	e012      	b.n	80026ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026c4:	f7ff ffb2 	bl	800262c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b0a      	cmp	r3, #10
 80026d0:	d90b      	bls.n	80026ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2205      	movs	r2, #5
 80026e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0c5      	b.n	8002876 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0e5      	beq.n	80026c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0202 	bic.w	r2, r2, #2
 8002706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002708:	f7ff ff90 	bl	800262c <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800270e:	e012      	b.n	8002736 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002710:	f7ff ff8c 	bl	800262c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b0a      	cmp	r3, #10
 800271c:	d90b      	bls.n	8002736 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2205      	movs	r2, #5
 800272e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e09f      	b.n	8002876 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e5      	bne.n	8002710 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7e1b      	ldrb	r3, [r3, #24]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d108      	bne.n	800275e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e007      	b.n	800276e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7e5b      	ldrb	r3, [r3, #25]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d108      	bne.n	8002788 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e007      	b.n	8002798 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002796:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7e9b      	ldrb	r3, [r3, #26]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d108      	bne.n	80027b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0220 	orr.w	r2, r2, #32
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e007      	b.n	80027c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0220 	bic.w	r2, r2, #32
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7edb      	ldrb	r3, [r3, #27]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d108      	bne.n	80027dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0210 	bic.w	r2, r2, #16
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e007      	b.n	80027ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0210 	orr.w	r2, r2, #16
 80027ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7f1b      	ldrb	r3, [r3, #28]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d108      	bne.n	8002806 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0208 	orr.w	r2, r2, #8
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e007      	b.n	8002816 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0208 	bic.w	r2, r2, #8
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7f5b      	ldrb	r3, [r3, #29]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d108      	bne.n	8002830 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0204 	orr.w	r2, r2, #4
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e007      	b.n	8002840 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0204 	bic.w	r2, r2, #4
 800283e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	ea42 0103 	orr.w	r1, r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	1e5a      	subs	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800287e:	b480      	push	{r7}
 8002880:	b087      	sub	sp, #28
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002894:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d003      	beq.n	80028a4 <HAL_CAN_ConfigFilter+0x26>
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	f040 80aa 	bne.w	80029f8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2201      	movs	r2, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d123      	bne.n	8002926 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	401a      	ands	r2, r3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002900:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3248      	adds	r2, #72	@ 0x48
 8002906:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800291a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800291c:	6979      	ldr	r1, [r7, #20]
 800291e:	3348      	adds	r3, #72	@ 0x48
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d122      	bne.n	8002974 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	431a      	orrs	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800294e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3248      	adds	r2, #72	@ 0x48
 8002954:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002968:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800296a:	6979      	ldr	r1, [r7, #20]
 800296c:	3348      	adds	r3, #72	@ 0x48
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800298e:	e007      	b.n	80029a0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80029ba:	e007      	b.n	80029cc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	431a      	orrs	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029ea:	f023 0201 	bic.w	r2, r3, #1
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e006      	b.n	8002a06 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
  }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d12e      	bne.n	8002a82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a3c:	f7ff fdf6 	bl	800262c <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a42:	e012      	b.n	8002a6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a44:	f7ff fdf2 	bl	800262c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b0a      	cmp	r3, #10
 8002a50:	d90b      	bls.n	8002a6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2205      	movs	r2, #5
 8002a62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e012      	b.n	8002a90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e5      	bne.n	8002a44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e006      	b.n	8002a90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
  }
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	@ 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d003      	beq.n	8002ac4 <HAL_CAN_AddTxMessage+0x2c>
 8002abc:	7ffb      	ldrb	r3, [r7, #31]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	f040 80ad 	bne.w	8002c1e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8095 	beq.w	8002c0e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	0e1b      	lsrs	r3, r3, #24
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002aee:	2201      	movs	r2, #1
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	6809      	ldr	r1, [r1, #0]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3318      	adds	r3, #24
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	440b      	add	r3, r1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e00f      	b.n	8002b3c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b26:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b2c:	68f9      	ldr	r1, [r7, #12]
 8002b2e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b30:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3318      	adds	r3, #24
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	440b      	add	r3, r1
 8002b3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3318      	adds	r3, #24
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	7d1b      	ldrb	r3, [r3, #20]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d111      	bne.n	8002b7c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3318      	adds	r3, #24
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6811      	ldr	r1, [r2, #0]
 8002b6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3318      	adds	r3, #24
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	440b      	add	r3, r1
 8002b78:	3304      	adds	r3, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3307      	adds	r3, #7
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	061a      	lsls	r2, r3, #24
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3306      	adds	r3, #6
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3305      	adds	r3, #5
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	4313      	orrs	r3, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	3204      	adds	r2, #4
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	6811      	ldr	r1, [r2, #0]
 8002ba4:	ea43 0200 	orr.w	r2, r3, r0
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002bb2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3303      	adds	r3, #3
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	061a      	lsls	r2, r3, #24
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	6811      	ldr	r1, [r2, #0]
 8002bda:	ea43 0200 	orr.w	r2, r3, r0
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002be8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3318      	adds	r3, #24
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	4413      	add	r3, r2
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	6811      	ldr	r1, [r2, #0]
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	3318      	adds	r3, #24
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	440b      	add	r3, r1
 8002c08:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e00e      	b.n	8002c2c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e006      	b.n	8002c2c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3724      	adds	r7, #36	@ 0x24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b085      	sub	sp, #20
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c4c:	7afb      	ldrb	r3, [r7, #11]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d002      	beq.n	8002c58 <HAL_CAN_IsTxMessagePending+0x22>
 8002c52:	7afb      	ldrb	r3, [r7, #11]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d10b      	bne.n	8002c70 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	069b      	lsls	r3, r3, #26
 8002c62:	401a      	ands	r2, r3
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	069b      	lsls	r3, r3, #26
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d001      	beq.n	8002c70 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002c70:	68fb      	ldr	r3, [r7, #12]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c90:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d003      	beq.n	8002ca0 <HAL_CAN_GetRxMessage+0x24>
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	f040 8103 	bne.w	8002ea6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d116      	bne.n	8002ce2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0f7      	b.n	8002eb4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0e8      	b.n	8002eb4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	331b      	adds	r3, #27
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	4413      	add	r3, r2
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0204 	and.w	r2, r3, #4
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10c      	bne.n	8002d1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	331b      	adds	r3, #27
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4413      	add	r3, r2
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0d5b      	lsrs	r3, r3, #21
 8002d10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e00b      	b.n	8002d32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	331b      	adds	r3, #27
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	4413      	add	r3, r2
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	08db      	lsrs	r3, r3, #3
 8002d2a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	331b      	adds	r3, #27
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	4413      	add	r3, r2
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0202 	and.w	r2, r3, #2
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	331b      	adds	r3, #27
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2208      	movs	r2, #8
 8002d64:	611a      	str	r2, [r3, #16]
 8002d66:	e00b      	b.n	8002d80 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	331b      	adds	r3, #27
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4413      	add	r3, r2
 8002d74:	3304      	adds	r3, #4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	331b      	adds	r3, #27
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	331b      	adds	r3, #27
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0a1a      	lsrs	r2, r3, #8
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0c1a      	lsrs	r2, r3, #16
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	3302      	adds	r3, #2
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	0e1a      	lsrs	r2, r3, #24
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	3303      	adds	r3, #3
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	3304      	adds	r3, #4
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	0a1a      	lsrs	r2, r3, #8
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	3305      	adds	r3, #5
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0c1a      	lsrs	r2, r3, #16
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	3306      	adds	r3, #6
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0e1a      	lsrs	r2, r3, #24
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	3307      	adds	r3, #7
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d108      	bne.n	8002e92 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0220 	orr.w	r2, r2, #32
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	e007      	b.n	8002ea2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0220 	orr.w	r2, r2, #32
 8002ea0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e006      	b.n	8002eb4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
  }
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ece:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d002      	beq.n	8002edc <HAL_CAN_ActivateNotification+0x1e>
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d109      	bne.n	8002ef0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6959      	ldr	r1, [r3, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e006      	b.n	8002efe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
  }
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	@ 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d07c      	beq.n	8003048 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d023      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f983 	bl	8003276 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f70:	e016      	b.n	8002fa0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f84:	e00c      	b.n	8002fa0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f98:	e002      	b.n	8002fa0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f986 	bl	80032ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d024      	beq.n	8002ff4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f962 	bl	8003288 <HAL_CAN_TxMailbox1CompleteCallback>
 8002fc4:	e016      	b.n	8002ff4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd8:	e00c      	b.n	8002ff4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fec:	e002      	b.n	8002ff4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f965 	bl	80032be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d024      	beq.n	8003048 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003006:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f941 	bl	800329a <HAL_CAN_TxMailbox2CompleteCallback>
 8003018:	e016      	b.n	8003048 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
 800302c:	e00c      	b.n	8003048 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d004      	beq.n	8003042 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003040:	e002      	b.n	8003048 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f944 	bl	80032d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2210      	movs	r2, #16
 800306a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2208      	movs	r2, #8
 8003086:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f933 	bl	80032f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f91b 	bl	80032e2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00c      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2210      	movs	r2, #16
 80030ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2208      	movs	r2, #8
 80030ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f90a 	bl	8003306 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fdc8 	bl	8001ca0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2210      	movs	r2, #16
 800312a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f8f3 	bl	8003318 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2208      	movs	r2, #8
 800314c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8eb 	bl	800332a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d07b      	beq.n	8003256 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d072      	beq.n	800324e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	f043 0304 	orr.w	r3, r3, #4
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d043      	beq.n	800324e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03e      	beq.n	800324e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031d6:	2b60      	cmp	r3, #96	@ 0x60
 80031d8:	d02b      	beq.n	8003232 <HAL_CAN_IRQHandler+0x32a>
 80031da:	2b60      	cmp	r3, #96	@ 0x60
 80031dc:	d82e      	bhi.n	800323c <HAL_CAN_IRQHandler+0x334>
 80031de:	2b50      	cmp	r3, #80	@ 0x50
 80031e0:	d022      	beq.n	8003228 <HAL_CAN_IRQHandler+0x320>
 80031e2:	2b50      	cmp	r3, #80	@ 0x50
 80031e4:	d82a      	bhi.n	800323c <HAL_CAN_IRQHandler+0x334>
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d019      	beq.n	800321e <HAL_CAN_IRQHandler+0x316>
 80031ea:	2b40      	cmp	r3, #64	@ 0x40
 80031ec:	d826      	bhi.n	800323c <HAL_CAN_IRQHandler+0x334>
 80031ee:	2b30      	cmp	r3, #48	@ 0x30
 80031f0:	d010      	beq.n	8003214 <HAL_CAN_IRQHandler+0x30c>
 80031f2:	2b30      	cmp	r3, #48	@ 0x30
 80031f4:	d822      	bhi.n	800323c <HAL_CAN_IRQHandler+0x334>
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d002      	beq.n	8003200 <HAL_CAN_IRQHandler+0x2f8>
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d005      	beq.n	800320a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031fe:	e01d      	b.n	800323c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	f043 0308 	orr.w	r3, r3, #8
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003208:	e019      	b.n	800323e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	f043 0310 	orr.w	r3, r3, #16
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003212:	e014      	b.n	800323e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	f043 0320 	orr.w	r3, r3, #32
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800321c:	e00f      	b.n	800323e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003226:	e00a      	b.n	800323e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003230:	e005      	b.n	800323e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800323a:	e000      	b.n	800323e <HAL_CAN_IRQHandler+0x336>
            break;
 800323c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800324c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2204      	movs	r2, #4
 8003254:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fe fdd1 	bl	8001e10 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800326e:	bf00      	nop
 8003270:	3728      	adds	r7, #40	@ 0x28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <__NVIC_SetPriorityGrouping>:
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003364:	4b0c      	ldr	r3, [pc, #48]	@ (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003370:	4013      	ands	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800337c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003386:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	60d3      	str	r3, [r2, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_GetPriorityGrouping>:
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a0:	4b04      	ldr	r3, [pc, #16]	@ (80033b4 <__NVIC_GetPriorityGrouping+0x18>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 0307 	and.w	r3, r3, #7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_EnableIRQ>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db0b      	blt.n	80033e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4906      	ldr	r1, [pc, #24]	@ (80033ec <__NVIC_EnableIRQ+0x34>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	e000e100 	.word	0xe000e100

080033f0 <__NVIC_SetPendingIRQ>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	db0c      	blt.n	800341c <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	f003 021f 	and.w	r2, r3, #31
 8003408:	4907      	ldr	r1, [pc, #28]	@ (8003428 <__NVIC_SetPendingIRQ+0x38>)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2001      	movs	r0, #1
 8003412:	fa00 f202 	lsl.w	r2, r0, r2
 8003416:	3340      	adds	r3, #64	@ 0x40
 8003418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000e100 	.word	0xe000e100

0800342c <__NVIC_SetPriority>:
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	2b00      	cmp	r3, #0
 800343e:	db0a      	blt.n	8003456 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	490c      	ldr	r1, [pc, #48]	@ (8003478 <__NVIC_SetPriority+0x4c>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	440b      	add	r3, r1
 8003450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003454:	e00a      	b.n	800346c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4908      	ldr	r1, [pc, #32]	@ (800347c <__NVIC_SetPriority+0x50>)
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	3b04      	subs	r3, #4
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	440b      	add	r3, r1
 800346a:	761a      	strb	r2, [r3, #24]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e100 	.word	0xe000e100
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <NVIC_EncodePriority>:
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	@ 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f1c3 0307 	rsb	r3, r3, #7
 800349a:	2b04      	cmp	r3, #4
 800349c:	bf28      	it	cs
 800349e:	2304      	movcs	r3, #4
 80034a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d902      	bls.n	80034b0 <NVIC_EncodePriority+0x30>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3b03      	subs	r3, #3
 80034ae:	e000      	b.n	80034b2 <NVIC_EncodePriority+0x32>
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	401a      	ands	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c8:	f04f 31ff 	mov.w	r1, #4294967295
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	4313      	orrs	r3, r2
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	@ 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <SysTick_Config>:
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034f4:	d301      	bcc.n	80034fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034f6:	2301      	movs	r3, #1
 80034f8:	e00f      	b.n	800351a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003524 <SysTick_Config+0x40>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003502:	210f      	movs	r1, #15
 8003504:	f04f 30ff 	mov.w	r0, #4294967295
 8003508:	f7ff ff90 	bl	800342c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800350c:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <SysTick_Config+0x40>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003512:	4b04      	ldr	r3, [pc, #16]	@ (8003524 <SysTick_Config+0x40>)
 8003514:	2207      	movs	r2, #7
 8003516:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	e000e010 	.word	0xe000e010

08003528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff ff0f 	bl	8003354 <__NVIC_SetPriorityGrouping>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	4603      	mov	r3, r0
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003550:	f7ff ff24 	bl	800339c <__NVIC_GetPriorityGrouping>
 8003554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	f7ff ff90 	bl	8003480 <NVIC_EncodePriority>
 8003560:	4602      	mov	r2, r0
 8003562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff5f 	bl	800342c <__NVIC_SetPriority>
}
 800356e:	bf00      	nop
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff17 	bl	80033b8 <__NVIC_EnableIRQ>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ffa2 	bl	80034e4 <SysTick_Config>
 80035a0:	4603      	mov	r3, r0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff19 	bl	80033f0 <__NVIC_SetPendingIRQ>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d008      	beq.n	80035f0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2204      	movs	r2, #4
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e020      	b.n	8003632 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 020e 	bic.w	r2, r2, #14
 80035fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f202 	lsl.w	r2, r1, r2
 800361e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d005      	beq.n	8003660 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2204      	movs	r2, #4
 8003658:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
 800365e:	e051      	b.n	8003704 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 020e 	bic.w	r2, r2, #14
 800366e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a22      	ldr	r2, [pc, #136]	@ (8003710 <HAL_DMA_Abort_IT+0xd4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d029      	beq.n	80036de <HAL_DMA_Abort_IT+0xa2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a21      	ldr	r2, [pc, #132]	@ (8003714 <HAL_DMA_Abort_IT+0xd8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <HAL_DMA_Abort_IT+0x9e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1f      	ldr	r2, [pc, #124]	@ (8003718 <HAL_DMA_Abort_IT+0xdc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d01a      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x98>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1e      	ldr	r2, [pc, #120]	@ (800371c <HAL_DMA_Abort_IT+0xe0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d012      	beq.n	80036ce <HAL_DMA_Abort_IT+0x92>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003720 <HAL_DMA_Abort_IT+0xe4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00a      	beq.n	80036c8 <HAL_DMA_Abort_IT+0x8c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003724 <HAL_DMA_Abort_IT+0xe8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d102      	bne.n	80036c2 <HAL_DMA_Abort_IT+0x86>
 80036bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80036c0:	e00e      	b.n	80036e0 <HAL_DMA_Abort_IT+0xa4>
 80036c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036c6:	e00b      	b.n	80036e0 <HAL_DMA_Abort_IT+0xa4>
 80036c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036cc:	e008      	b.n	80036e0 <HAL_DMA_Abort_IT+0xa4>
 80036ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036d2:	e005      	b.n	80036e0 <HAL_DMA_Abort_IT+0xa4>
 80036d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036d8:	e002      	b.n	80036e0 <HAL_DMA_Abort_IT+0xa4>
 80036da:	2310      	movs	r3, #16
 80036dc:	e000      	b.n	80036e0 <HAL_DMA_Abort_IT+0xa4>
 80036de:	2301      	movs	r3, #1
 80036e0:	4a11      	ldr	r2, [pc, #68]	@ (8003728 <HAL_DMA_Abort_IT+0xec>)
 80036e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
    } 
  }
  return status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40020008 	.word	0x40020008
 8003714:	4002001c 	.word	0x4002001c
 8003718:	40020030 	.word	0x40020030
 800371c:	40020044 	.word	0x40020044
 8003720:	40020058 	.word	0x40020058
 8003724:	4002006c 	.word	0x4002006c
 8003728:	40020000 	.word	0x40020000

0800372c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800373a:	b2db      	uxtb	r3, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr
	...

08003748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003748:	b480      	push	{r7}
 800374a:	b08b      	sub	sp, #44	@ 0x2c
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003756:	2300      	movs	r3, #0
 8003758:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375a:	e169      	b.n	8003a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800375c:	2201      	movs	r2, #1
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	429a      	cmp	r2, r3
 8003776:	f040 8158 	bne.w	8003a2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4a9a      	ldr	r2, [pc, #616]	@ (80039e8 <HAL_GPIO_Init+0x2a0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d05e      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 8003784:	4a98      	ldr	r2, [pc, #608]	@ (80039e8 <HAL_GPIO_Init+0x2a0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d875      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 800378a:	4a98      	ldr	r2, [pc, #608]	@ (80039ec <HAL_GPIO_Init+0x2a4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d058      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 8003790:	4a96      	ldr	r2, [pc, #600]	@ (80039ec <HAL_GPIO_Init+0x2a4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d86f      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 8003796:	4a96      	ldr	r2, [pc, #600]	@ (80039f0 <HAL_GPIO_Init+0x2a8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d052      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 800379c:	4a94      	ldr	r2, [pc, #592]	@ (80039f0 <HAL_GPIO_Init+0x2a8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d869      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037a2:	4a94      	ldr	r2, [pc, #592]	@ (80039f4 <HAL_GPIO_Init+0x2ac>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d04c      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 80037a8:	4a92      	ldr	r2, [pc, #584]	@ (80039f4 <HAL_GPIO_Init+0x2ac>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d863      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037ae:	4a92      	ldr	r2, [pc, #584]	@ (80039f8 <HAL_GPIO_Init+0x2b0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d046      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 80037b4:	4a90      	ldr	r2, [pc, #576]	@ (80039f8 <HAL_GPIO_Init+0x2b0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d85d      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037ba:	2b12      	cmp	r3, #18
 80037bc:	d82a      	bhi.n	8003814 <HAL_GPIO_Init+0xcc>
 80037be:	2b12      	cmp	r3, #18
 80037c0:	d859      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037c2:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <HAL_GPIO_Init+0x80>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	08003843 	.word	0x08003843
 80037cc:	0800381d 	.word	0x0800381d
 80037d0:	0800382f 	.word	0x0800382f
 80037d4:	08003871 	.word	0x08003871
 80037d8:	08003877 	.word	0x08003877
 80037dc:	08003877 	.word	0x08003877
 80037e0:	08003877 	.word	0x08003877
 80037e4:	08003877 	.word	0x08003877
 80037e8:	08003877 	.word	0x08003877
 80037ec:	08003877 	.word	0x08003877
 80037f0:	08003877 	.word	0x08003877
 80037f4:	08003877 	.word	0x08003877
 80037f8:	08003877 	.word	0x08003877
 80037fc:	08003877 	.word	0x08003877
 8003800:	08003877 	.word	0x08003877
 8003804:	08003877 	.word	0x08003877
 8003808:	08003877 	.word	0x08003877
 800380c:	08003825 	.word	0x08003825
 8003810:	08003839 	.word	0x08003839
 8003814:	4a79      	ldr	r2, [pc, #484]	@ (80039fc <HAL_GPIO_Init+0x2b4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800381a:	e02c      	b.n	8003876 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	623b      	str	r3, [r7, #32]
          break;
 8003822:	e029      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	3304      	adds	r3, #4
 800382a:	623b      	str	r3, [r7, #32]
          break;
 800382c:	e024      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	3308      	adds	r3, #8
 8003834:	623b      	str	r3, [r7, #32]
          break;
 8003836:	e01f      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	330c      	adds	r3, #12
 800383e:	623b      	str	r3, [r7, #32]
          break;
 8003840:	e01a      	b.n	8003878 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800384a:	2304      	movs	r3, #4
 800384c:	623b      	str	r3, [r7, #32]
          break;
 800384e:	e013      	b.n	8003878 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003858:	2308      	movs	r3, #8
 800385a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	611a      	str	r2, [r3, #16]
          break;
 8003862:	e009      	b.n	8003878 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003864:	2308      	movs	r3, #8
 8003866:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	615a      	str	r2, [r3, #20]
          break;
 800386e:	e003      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003870:	2300      	movs	r3, #0
 8003872:	623b      	str	r3, [r7, #32]
          break;
 8003874:	e000      	b.n	8003878 <HAL_GPIO_Init+0x130>
          break;
 8003876:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2bff      	cmp	r3, #255	@ 0xff
 800387c:	d801      	bhi.n	8003882 <HAL_GPIO_Init+0x13a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	e001      	b.n	8003886 <HAL_GPIO_Init+0x13e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2bff      	cmp	r3, #255	@ 0xff
 800388c:	d802      	bhi.n	8003894 <HAL_GPIO_Init+0x14c>
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	e002      	b.n	800389a <HAL_GPIO_Init+0x152>
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	3b08      	subs	r3, #8
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	210f      	movs	r1, #15
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	401a      	ands	r2, r3
 80038ac:	6a39      	ldr	r1, [r7, #32]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	431a      	orrs	r2, r3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80b1 	beq.w	8003a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a00 <HAL_GPIO_Init+0x2b8>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003a00 <HAL_GPIO_Init+0x2b8>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6193      	str	r3, [r2, #24]
 80038d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003a00 <HAL_GPIO_Init+0x2b8>)
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038e0:	4a48      	ldr	r2, [pc, #288]	@ (8003a04 <HAL_GPIO_Init+0x2bc>)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	3302      	adds	r3, #2
 80038e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	220f      	movs	r2, #15
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4013      	ands	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a40      	ldr	r2, [pc, #256]	@ (8003a08 <HAL_GPIO_Init+0x2c0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_GPIO_Init+0x1ec>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a3f      	ldr	r2, [pc, #252]	@ (8003a0c <HAL_GPIO_Init+0x2c4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00d      	beq.n	8003930 <HAL_GPIO_Init+0x1e8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a3e      	ldr	r2, [pc, #248]	@ (8003a10 <HAL_GPIO_Init+0x2c8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <HAL_GPIO_Init+0x1e4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a14 <HAL_GPIO_Init+0x2cc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_GPIO_Init+0x1e0>
 8003924:	2303      	movs	r3, #3
 8003926:	e006      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 8003928:	2304      	movs	r3, #4
 800392a:	e004      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 800392c:	2302      	movs	r3, #2
 800392e:	e002      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 8003934:	2300      	movs	r3, #0
 8003936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003938:	f002 0203 	and.w	r2, r2, #3
 800393c:	0092      	lsls	r2, r2, #2
 800393e:	4093      	lsls	r3, r2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003946:	492f      	ldr	r1, [pc, #188]	@ (8003a04 <HAL_GPIO_Init+0x2bc>)
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3302      	adds	r3, #2
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003960:	4b2d      	ldr	r3, [pc, #180]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	492c      	ldr	r1, [pc, #176]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]
 800396c:	e006      	b.n	800397c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800396e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	43db      	mvns	r3, r3
 8003976:	4928      	ldr	r1, [pc, #160]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003978:	4013      	ands	r3, r2
 800397a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003988:	4b23      	ldr	r3, [pc, #140]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	4922      	ldr	r1, [pc, #136]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
 8003994:	e006      	b.n	80039a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	43db      	mvns	r3, r3
 800399e:	491e      	ldr	r1, [pc, #120]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039b0:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4918      	ldr	r1, [pc, #96]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
 80039bc:	e006      	b.n	80039cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039be:	4b16      	ldr	r3, [pc, #88]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	4914      	ldr	r1, [pc, #80]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d021      	beq.n	8003a1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	490e      	ldr	r1, [pc, #56]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e021      	b.n	8003a2a <HAL_GPIO_Init+0x2e2>
 80039e6:	bf00      	nop
 80039e8:	10320000 	.word	0x10320000
 80039ec:	10310000 	.word	0x10310000
 80039f0:	10220000 	.word	0x10220000
 80039f4:	10210000 	.word	0x10210000
 80039f8:	10120000 	.word	0x10120000
 80039fc:	10110000 	.word	0x10110000
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40010000 	.word	0x40010000
 8003a08:	40010800 	.word	0x40010800
 8003a0c:	40010c00 	.word	0x40010c00
 8003a10:	40011000 	.word	0x40011000
 8003a14:	40011400 	.word	0x40011400
 8003a18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <HAL_GPIO_Init+0x304>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	4909      	ldr	r1, [pc, #36]	@ (8003a4c <HAL_GPIO_Init+0x304>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f47f ae8e 	bne.w	800375c <HAL_GPIO_Init+0x14>
  }
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	372c      	adds	r7, #44	@ 0x2c
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40010400 	.word	0x40010400

08003a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a60:	787b      	ldrb	r3, [r7, #1]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a66:	887a      	ldrh	r2, [r7, #2]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a6c:	e003      	b.n	8003a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a6e:	887b      	ldrh	r3, [r7, #2]
 8003a70:	041a      	lsls	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e12b      	b.n	8003cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fe fab0 	bl	800200c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	@ 0x24
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ae4:	f003 f9b8 	bl	8006e58 <HAL_RCC_GetPCLK1Freq>
 8003ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4a81      	ldr	r2, [pc, #516]	@ (8003cf4 <HAL_I2C_Init+0x274>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d807      	bhi.n	8003b04 <HAL_I2C_Init+0x84>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a80      	ldr	r2, [pc, #512]	@ (8003cf8 <HAL_I2C_Init+0x278>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	bf94      	ite	ls
 8003afc:	2301      	movls	r3, #1
 8003afe:	2300      	movhi	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e006      	b.n	8003b12 <HAL_I2C_Init+0x92>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a7d      	ldr	r2, [pc, #500]	@ (8003cfc <HAL_I2C_Init+0x27c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bf94      	ite	ls
 8003b0c:	2301      	movls	r3, #1
 8003b0e:	2300      	movhi	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e0e7      	b.n	8003cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a78      	ldr	r2, [pc, #480]	@ (8003d00 <HAL_I2C_Init+0x280>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	0c9b      	lsrs	r3, r3, #18
 8003b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf4 <HAL_I2C_Init+0x274>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d802      	bhi.n	8003b54 <HAL_I2C_Init+0xd4>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	3301      	adds	r3, #1
 8003b52:	e009      	b.n	8003b68 <HAL_I2C_Init+0xe8>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	4a69      	ldr	r2, [pc, #420]	@ (8003d04 <HAL_I2C_Init+0x284>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	3301      	adds	r3, #1
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	495c      	ldr	r1, [pc, #368]	@ (8003cf4 <HAL_I2C_Init+0x274>)
 8003b84:	428b      	cmp	r3, r1
 8003b86:	d819      	bhi.n	8003bbc <HAL_I2C_Init+0x13c>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1e59      	subs	r1, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b96:	1c59      	adds	r1, r3, #1
 8003b98:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b9c:	400b      	ands	r3, r1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_I2C_Init+0x138>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1e59      	subs	r1, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb6:	e051      	b.n	8003c5c <HAL_I2C_Init+0x1dc>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	e04f      	b.n	8003c5c <HAL_I2C_Init+0x1dc>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d111      	bne.n	8003be8 <HAL_I2C_Init+0x168>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1e58      	subs	r0, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	440b      	add	r3, r1
 8003bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	e012      	b.n	8003c0e <HAL_I2C_Init+0x18e>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1e58      	subs	r0, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	0099      	lsls	r1, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Init+0x196>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e022      	b.n	8003c5c <HAL_I2C_Init+0x1dc>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10e      	bne.n	8003c3c <HAL_I2C_Init+0x1bc>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1e58      	subs	r0, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6859      	ldr	r1, [r3, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	440b      	add	r3, r1
 8003c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c30:	3301      	adds	r3, #1
 8003c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c3a:	e00f      	b.n	8003c5c <HAL_I2C_Init+0x1dc>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1e58      	subs	r0, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	0099      	lsls	r1, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	6809      	ldr	r1, [r1, #0]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69da      	ldr	r2, [r3, #28]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6911      	ldr	r1, [r2, #16]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68d2      	ldr	r2, [r2, #12]
 8003c96:	4311      	orrs	r1, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	000186a0 	.word	0x000186a0
 8003cf8:	001e847f 	.word	0x001e847f
 8003cfc:	003d08ff 	.word	0x003d08ff
 8003d00:	431bde83 	.word	0x431bde83
 8003d04:	10624dd3 	.word	0x10624dd3

08003d08 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	2b80      	cmp	r3, #128	@ 0x80
 8003d1c:	d103      	bne.n	8003d26 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2200      	movs	r2, #0
 8003d24:	611a      	str	r2, [r3, #16]
  }
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	817b      	strh	r3, [r7, #10]
 8003d42:	460b      	mov	r3, r1
 8003d44:	813b      	strh	r3, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d4a:	f7fe fc6f 	bl	800262c <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	f040 80d9 	bne.w	8003f10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2319      	movs	r3, #25
 8003d64:	2201      	movs	r2, #1
 8003d66:	496d      	ldr	r1, [pc, #436]	@ (8003f1c <HAL_I2C_Mem_Write+0x1ec>)
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f002 fa29 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0cc      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_I2C_Mem_Write+0x56>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e0c5      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d007      	beq.n	8003dac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2221      	movs	r2, #33	@ 0x21
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2240      	movs	r2, #64	@ 0x40
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a3a      	ldr	r2, [r7, #32]
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a4d      	ldr	r2, [pc, #308]	@ (8003f20 <HAL_I2C_Mem_Write+0x1f0>)
 8003dec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dee:	88f8      	ldrh	r0, [r7, #6]
 8003df0:	893a      	ldrh	r2, [r7, #8]
 8003df2:	8979      	ldrh	r1, [r7, #10]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f001 ffb8 	bl	8005d74 <I2C_RequestMemoryWrite>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d052      	beq.n	8003eb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e081      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f002 faee 	bl	80063f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d107      	bne.n	8003e36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e06b      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d11b      	bne.n	8003eb0 <HAL_I2C_Mem_Write+0x180>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d017      	beq.n	8003eb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1aa      	bne.n	8003e0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f002 fae1 	bl	8006484 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d107      	bne.n	8003ee0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ede:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e016      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	00100002 	.word	0x00100002
 8003f20:	ffff0000 	.word	0xffff0000

08003f24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	@ 0x30
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f42:	f7fe fb73 	bl	800262c <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	f040 8250 	bne.w	80043f6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2319      	movs	r3, #25
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4982      	ldr	r1, [pc, #520]	@ (8004168 <HAL_I2C_Mem_Read+0x244>)
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f002 f92d 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e243      	b.n	80043f8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_I2C_Mem_Read+0x5a>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e23c      	b.n	80043f8 <HAL_I2C_Mem_Read+0x4d4>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d007      	beq.n	8003fa4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2222      	movs	r2, #34	@ 0x22
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2240      	movs	r2, #64	@ 0x40
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a62      	ldr	r2, [pc, #392]	@ (800416c <HAL_I2C_Mem_Read+0x248>)
 8003fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fe6:	88f8      	ldrh	r0, [r7, #6]
 8003fe8:	893a      	ldrh	r2, [r7, #8]
 8003fea:	8979      	ldrh	r1, [r7, #10]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f001 ff52 	bl	8005ea0 <I2C_RequestMemoryRead>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e1f8      	b.n	80043f8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d113      	bne.n	8004036 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e1cc      	b.n	80043d0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403a:	2b01      	cmp	r3, #1
 800403c:	d11e      	bne.n	800407c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800404c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800404e:	b672      	cpsid	i
}
 8004050:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004076:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004078:	b662      	cpsie	i
}
 800407a:	e035      	b.n	80040e8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004080:	2b02      	cmp	r3, #2
 8004082:	d11e      	bne.n	80040c2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004092:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004094:	b672      	cpsid	i
}
 8004096:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040be:	b662      	cpsie	i
}
 80040c0:	e012      	b.n	80040e8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040d0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80040e8:	e172      	b.n	80043d0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	f200 811f 	bhi.w	8004332 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d123      	bne.n	8004144 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f002 fa39 	bl	8006578 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e173      	b.n	80043f8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004142:	e145      	b.n	80043d0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004148:	2b02      	cmp	r3, #2
 800414a:	d152      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004152:	2200      	movs	r2, #0
 8004154:	4906      	ldr	r1, [pc, #24]	@ (8004170 <HAL_I2C_Mem_Read+0x24c>)
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f002 f832 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e148      	b.n	80043f8 <HAL_I2C_Mem_Read+0x4d4>
 8004166:	bf00      	nop
 8004168:	00100002 	.word	0x00100002
 800416c:	ffff0000 	.word	0xffff0000
 8004170:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004174:	b672      	cpsid	i
}
 8004176:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041ba:	b662      	cpsie	i
}
 80041bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041f0:	e0ee      	b.n	80043d0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f8:	2200      	movs	r2, #0
 80041fa:	4981      	ldr	r1, [pc, #516]	@ (8004400 <HAL_I2C_Mem_Read+0x4dc>)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f001 ffdf 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0f5      	b.n	80043f8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800421a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800421c:	b672      	cpsid	i
}
 800421e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004252:	4b6c      	ldr	r3, [pc, #432]	@ (8004404 <HAL_I2C_Mem_Read+0x4e0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	08db      	lsrs	r3, r3, #3
 8004258:	4a6b      	ldr	r2, [pc, #428]	@ (8004408 <HAL_I2C_Mem_Read+0x4e4>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	0a1a      	lsrs	r2, r3, #8
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00da      	lsls	r2, r3, #3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	3b01      	subs	r3, #1
 8004270:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d118      	bne.n	80042aa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	f043 0220 	orr.w	r2, r3, #32
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800429a:	b662      	cpsie	i
}
 800429c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e0a6      	b.n	80043f8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d1d9      	bne.n	800426c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042fa:	b662      	cpsie	i
}
 80042fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004330:	e04e      	b.n	80043d0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004334:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f002 f91e 	bl	8006578 <I2C_WaitOnRXNEFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e058      	b.n	80043f8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b04      	cmp	r3, #4
 8004384:	d124      	bne.n	80043d0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438a:	2b03      	cmp	r3, #3
 800438c:	d107      	bne.n	800439e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800439c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f47f ae88 	bne.w	80040ea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3728      	adds	r7, #40	@ 0x28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	00010004 	.word	0x00010004
 8004404:	20000004 	.word	0x20000004
 8004408:	14f8b589 	.word	0x14f8b589

0800440c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	4608      	mov	r0, r1
 8004416:	4611      	mov	r1, r2
 8004418:	461a      	mov	r2, r3
 800441a:	4603      	mov	r3, r0
 800441c:	817b      	strh	r3, [r7, #10]
 800441e:	460b      	mov	r3, r1
 8004420:	813b      	strh	r3, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b20      	cmp	r3, #32
 8004434:	f040 808a 	bne.w	800454c <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004438:	4b47      	ldr	r3, [pc, #284]	@ (8004558 <HAL_I2C_Mem_Write_IT+0x14c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	08db      	lsrs	r3, r3, #3
 800443e:	4a47      	ldr	r2, [pc, #284]	@ (800455c <HAL_I2C_Mem_Write_IT+0x150>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	0a1a      	lsrs	r2, r3, #8
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009a      	lsls	r2, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	3b01      	subs	r3, #1
 8004456:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d112      	bne.n	8004484 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
 8004482:	e064      	b.n	800454e <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	d0df      	beq.n	8004452 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_I2C_Mem_Write_IT+0x94>
 800449c:	2302      	movs	r3, #2
 800449e:	e056      	b.n	800454e <HAL_I2C_Mem_Write_IT+0x142>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d007      	beq.n	80044c6 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044d4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2221      	movs	r2, #33	@ 0x21
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2240      	movs	r2, #64	@ 0x40
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a3a      	ldr	r2, [r7, #32]
 80044f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a16      	ldr	r2, [pc, #88]	@ (8004560 <HAL_I2C_Mem_Write_IT+0x154>)
 8004506:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004508:	897a      	ldrh	r2, [r7, #10]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800450e:	893a      	ldrh	r2, [r7, #8]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004514:	88fa      	ldrh	r2, [r7, #6]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800452e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004546:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	e000      	b.n	800454e <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
  }
}
 800454e:	4618      	mov	r0, r3
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	20000004 	.word	0x20000004
 800455c:	14f8b589 	.word	0x14f8b589
 8004560:	ffff0000 	.word	0xffff0000

08004564 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08a      	sub	sp, #40	@ 0x28
 8004568:	af02      	add	r7, sp, #8
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	460b      	mov	r3, r1
 8004572:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004574:	f7fe f85a 	bl	800262c <HAL_GetTick>
 8004578:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b20      	cmp	r3, #32
 8004588:	f040 8111 	bne.w	80047ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	2319      	movs	r3, #25
 8004592:	2201      	movs	r2, #1
 8004594:	4988      	ldr	r1, [pc, #544]	@ (80047b8 <HAL_I2C_IsDeviceReady+0x254>)
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f001 fe12 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
 80045a4:	e104      	b.n	80047b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_I2C_IsDeviceReady+0x50>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e0fd      	b.n	80047b0 <HAL_I2C_IsDeviceReady+0x24c>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d007      	beq.n	80045da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2224      	movs	r2, #36	@ 0x24
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a70      	ldr	r2, [pc, #448]	@ (80047bc <HAL_I2C_IsDeviceReady+0x258>)
 80045fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800460c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2200      	movs	r2, #0
 8004616:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f001 fdd0 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00d      	beq.n	8004642 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004634:	d103      	bne.n	800463e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800463c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e0b6      	b.n	80047b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004642:	897b      	ldrh	r3, [r7, #10]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004650:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004652:	f7fd ffeb 	bl	800262c <HAL_GetTick>
 8004656:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b02      	cmp	r3, #2
 8004664:	bf0c      	ite	eq
 8004666:	2301      	moveq	r3, #1
 8004668:	2300      	movne	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004686:	e025      	b.n	80046d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004688:	f7fd ffd0 	bl	800262c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d302      	bcc.n	800469e <HAL_I2C_IsDeviceReady+0x13a>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d103      	bne.n	80046a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	22a0      	movs	r2, #160	@ 0xa0
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2ba0      	cmp	r3, #160	@ 0xa0
 80046de:	d005      	beq.n	80046ec <HAL_I2C_IsDeviceReady+0x188>
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <HAL_I2C_IsDeviceReady+0x188>
 80046e6:	7dbb      	ldrb	r3, [r7, #22]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0cd      	beq.n	8004688 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d129      	bne.n	8004756 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004710:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004712:	2300      	movs	r3, #0
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	2319      	movs	r3, #25
 800472e:	2201      	movs	r2, #1
 8004730:	4921      	ldr	r1, [pc, #132]	@ (80047b8 <HAL_I2C_IsDeviceReady+0x254>)
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f001 fd44 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e036      	b.n	80047b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	e02c      	b.n	80047b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004764:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800476e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	2319      	movs	r3, #25
 8004776:	2201      	movs	r2, #1
 8004778:	490f      	ldr	r1, [pc, #60]	@ (80047b8 <HAL_I2C_IsDeviceReady+0x254>)
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f001 fd20 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e012      	b.n	80047b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	3301      	adds	r3, #1
 800478e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	f4ff af32 	bcc.w	80045fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	00100002 	.word	0x00100002
 80047bc:	ffff0000 	.word	0xffff0000

080047c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d003      	beq.n	80047f8 <HAL_I2C_EV_IRQHandler+0x38>
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b40      	cmp	r3, #64	@ 0x40
 80047f4:	f040 80c1 	bne.w	800497a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10d      	bne.n	800482e <HAL_I2C_EV_IRQHandler+0x6e>
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004818:	d003      	beq.n	8004822 <HAL_I2C_EV_IRQHandler+0x62>
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004820:	d101      	bne.n	8004826 <HAL_I2C_EV_IRQHandler+0x66>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <HAL_I2C_EV_IRQHandler+0x68>
 8004826:	2300      	movs	r3, #0
 8004828:	2b01      	cmp	r3, #1
 800482a:	f000 8132 	beq.w	8004a92 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00c      	beq.n	8004852 <HAL_I2C_EV_IRQHandler+0x92>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	0a5b      	lsrs	r3, r3, #9
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f001 ff22 	bl	800668e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fce1 	bl	8005212 <I2C_Master_SB>
 8004850:	e092      	b.n	8004978 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	08db      	lsrs	r3, r3, #3
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_I2C_EV_IRQHandler+0xb2>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	0a5b      	lsrs	r3, r3, #9
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fd56 	bl	800531c <I2C_Master_ADD10>
 8004870:	e082      	b.n	8004978 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0xd2>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	0a5b      	lsrs	r3, r3, #9
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fd6f 	bl	800536e <I2C_Master_ADDR>
 8004890:	e072      	b.n	8004978 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d03b      	beq.n	8004916 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ac:	f000 80f3 	beq.w	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	09db      	lsrs	r3, r3, #7
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00f      	beq.n	80048dc <HAL_I2C_EV_IRQHandler+0x11c>
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	0a9b      	lsrs	r3, r3, #10
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <HAL_I2C_EV_IRQHandler+0x11c>
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	089b      	lsrs	r3, r3, #2
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d103      	bne.n	80048dc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f939 	bl	8004b4c <I2C_MasterTransmit_TXE>
 80048da:	e04d      	b.n	8004978 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80d6 	beq.w	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	0a5b      	lsrs	r3, r3, #9
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 80cf 	beq.w	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80048f8:	7bbb      	ldrb	r3, [r7, #14]
 80048fa:	2b21      	cmp	r3, #33	@ 0x21
 80048fc:	d103      	bne.n	8004906 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f9c0 	bl	8004c84 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004904:	e0c7      	b.n	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b40      	cmp	r3, #64	@ 0x40
 800490a:	f040 80c4 	bne.w	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa2e 	bl	8004d70 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004914:	e0bf      	b.n	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004924:	f000 80b7 	beq.w	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	099b      	lsrs	r3, r3, #6
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00f      	beq.n	8004954 <HAL_I2C_EV_IRQHandler+0x194>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	0a9b      	lsrs	r3, r3, #10
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <HAL_I2C_EV_IRQHandler+0x194>
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	089b      	lsrs	r3, r3, #2
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d103      	bne.n	8004954 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 faa7 	bl	8004ea0 <I2C_MasterReceive_RXNE>
 8004952:	e011      	b.n	8004978 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	089b      	lsrs	r3, r3, #2
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 809a 	beq.w	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	0a5b      	lsrs	r3, r3, #9
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8093 	beq.w	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fb5d 	bl	8005030 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004976:	e08e      	b.n	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004978:	e08d      	b.n	8004a96 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d004      	beq.n	800498c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e007      	b.n	800499c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d012      	beq.n	80049ce <HAL_I2C_EV_IRQHandler+0x20e>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	0a5b      	lsrs	r3, r3, #9
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00c      	beq.n	80049ce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80049c4:	69b9      	ldr	r1, [r7, #24]
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 ff28 	bl	800581c <I2C_Slave_ADDR>
 80049cc:	e066      	b.n	8004a9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_I2C_EV_IRQHandler+0x22e>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	0a5b      	lsrs	r3, r3, #9
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 ff62 	bl	80058b0 <I2C_Slave_STOPF>
 80049ec:	e056      	b.n	8004a9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	2b21      	cmp	r3, #33	@ 0x21
 80049f2:	d002      	beq.n	80049fa <HAL_I2C_EV_IRQHandler+0x23a>
 80049f4:	7bbb      	ldrb	r3, [r7, #14]
 80049f6:	2b29      	cmp	r3, #41	@ 0x29
 80049f8:	d125      	bne.n	8004a46 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	09db      	lsrs	r3, r3, #7
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00f      	beq.n	8004a26 <HAL_I2C_EV_IRQHandler+0x266>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	0a9b      	lsrs	r3, r3, #10
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_I2C_EV_IRQHandler+0x266>
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	089b      	lsrs	r3, r3, #2
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fe40 	bl	80056a4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a24:	e039      	b.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	089b      	lsrs	r3, r3, #2
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d033      	beq.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2da>
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	0a5b      	lsrs	r3, r3, #9
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d02d      	beq.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fe6d 	bl	800571e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a44:	e029      	b.n	8004a9a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	099b      	lsrs	r3, r3, #6
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00f      	beq.n	8004a72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	0a9b      	lsrs	r3, r3, #10
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	089b      	lsrs	r3, r3, #2
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fe77 	bl	800575e <I2C_SlaveReceive_RXNE>
 8004a70:	e014      	b.n	8004a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	089b      	lsrs	r3, r3, #2
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00e      	beq.n	8004a9c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	0a5b      	lsrs	r3, r3, #9
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d008      	beq.n	8004a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fea5 	bl	80057da <I2C_SlaveReceive_BTF>
 8004a90:	e004      	b.n	8004a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004a92:	bf00      	nop
 8004a94:	e002      	b.n	8004a9c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr

08004aea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	460b      	mov	r3, r1
 8004af4:	70fb      	strb	r3, [r7, #3]
 8004af6:	4613      	mov	r3, r2
 8004af8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr

08004b04 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d150      	bne.n	8004c14 <I2C_MasterTransmit_TXE+0xc8>
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	2b21      	cmp	r3, #33	@ 0x21
 8004b76:	d14d      	bne.n	8004c14 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d01d      	beq.n	8004bba <I2C_MasterTransmit_TXE+0x6e>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d01a      	beq.n	8004bba <I2C_MasterTransmit_TXE+0x6e>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b8a:	d016      	beq.n	8004bba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b9a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2211      	movs	r2, #17
 8004ba0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff ff75 	bl	8004aa2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bb8:	e060      	b.n	8004c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bc8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b40      	cmp	r3, #64	@ 0x40
 8004bf2:	d107      	bne.n	8004c04 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fd f833 	bl	8001c68 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c02:	e03b      	b.n	8004c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff ff48 	bl	8004aa2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c12:	e033      	b.n	8004c7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b21      	cmp	r3, #33	@ 0x21
 8004c18:	d005      	beq.n	8004c26 <I2C_MasterTransmit_TXE+0xda>
 8004c1a:	7bbb      	ldrb	r3, [r7, #14]
 8004c1c:	2b40      	cmp	r3, #64	@ 0x40
 8004c1e:	d12d      	bne.n	8004c7c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b22      	cmp	r3, #34	@ 0x22
 8004c24:	d12a      	bne.n	8004c7c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d108      	bne.n	8004c42 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c3e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c40:	e01c      	b.n	8004c7c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b40      	cmp	r3, #64	@ 0x40
 8004c4c:	d103      	bne.n	8004c56 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f88e 	bl	8004d70 <I2C_MemoryTransmit_TXE_BTF>
}
 8004c54:	e012      	b.n	8004c7c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	781a      	ldrb	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c7a:	e7ff      	b.n	8004c7c <I2C_MasterTransmit_TXE+0x130>
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b21      	cmp	r3, #33	@ 0x21
 8004c9c:	d164      	bne.n	8004d68 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d012      	beq.n	8004cce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004ccc:	e04c      	b.n	8004d68 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d01d      	beq.n	8004d10 <I2C_MasterTransmit_BTF+0x8c>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d01a      	beq.n	8004d10 <I2C_MasterTransmit_BTF+0x8c>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ce0:	d016      	beq.n	8004d10 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cf0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2211      	movs	r2, #17
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff feca 	bl	8004aa2 <HAL_I2C_MasterTxCpltCallback>
}
 8004d0e:	e02b      	b.n	8004d68 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d1e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b40      	cmp	r3, #64	@ 0x40
 8004d48:	d107      	bne.n	8004d5a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc ff88 	bl	8001c68 <HAL_I2C_MemTxCpltCallback>
}
 8004d58:	e006      	b.n	8004d68 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff fe9d 	bl	8004aa2 <HAL_I2C_MasterTxCpltCallback>
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11d      	bne.n	8004dc4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10b      	bne.n	8004da8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da0:	1c9a      	adds	r2, r3, #2
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004da6:	e077      	b.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	121b      	asrs	r3, r3, #8
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004dc2:	e069      	b.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10b      	bne.n	8004de4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004de2:	e059      	b.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d152      	bne.n	8004e92 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b22      	cmp	r3, #34	@ 0x22
 8004df0:	d10d      	bne.n	8004e0e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e00:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e0c:	e044      	b.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d015      	beq.n	8004e44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b21      	cmp	r3, #33	@ 0x21
 8004e1c:	d112      	bne.n	8004e44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	781a      	ldrb	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e42:	e029      	b.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d124      	bne.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	2b21      	cmp	r3, #33	@ 0x21
 8004e52:	d121      	bne.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e62:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fc feec 	bl	8001c68 <HAL_I2C_MemTxCpltCallback>
}
 8004e90:	e002      	b.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fe ff38 	bl	8003d08 <I2C_Flush_DR>
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b22      	cmp	r3, #34	@ 0x22
 8004eb2:	f040 80b9 	bne.w	8005028 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d921      	bls.n	8004f0e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	f040 8096 	bne.w	8005028 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f0a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f0c:	e08c      	b.n	8005028 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d07f      	beq.n	8005016 <I2C_MasterReceive_RXNE+0x176>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d002      	beq.n	8004f22 <I2C_MasterReceive_RXNE+0x82>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d179      	bne.n	8005016 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 faf6 	bl	8006514 <I2C_WaitOnSTOPRequestThroughIT>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d14c      	bne.n	8004fc8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f3c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b40      	cmp	r3, #64	@ 0x40
 8004f86:	d10a      	bne.n	8004f9e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fdbd 	bl	8004b16 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f9c:	e044      	b.n	8005028 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d002      	beq.n	8004fb2 <I2C_MasterReceive_RXNE+0x112>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d103      	bne.n	8004fba <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fb8:	e002      	b.n	8004fc0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2212      	movs	r2, #18
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff fd77 	bl	8004ab4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fc6:	e02f      	b.n	8005028 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004fd6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff fd8a 	bl	8004b28 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005014:	e008      	b.n	8005028 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005024:	605a      	str	r2, [r3, #4]
}
 8005026:	e7ff      	b.n	8005028 <I2C_MasterReceive_RXNE+0x188>
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b04      	cmp	r3, #4
 8005046:	d11b      	bne.n	8005080 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005056:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800507e:	e0c4      	b.n	800520a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b03      	cmp	r3, #3
 8005088:	d129      	bne.n	80050de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005098:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d00a      	beq.n	80050b6 <I2C_MasterReceive_BTF+0x86>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d007      	beq.n	80050b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80050dc:	e095      	b.n	800520a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d17d      	bne.n	80051e4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d002      	beq.n	80050f4 <I2C_MasterReceive_BTF+0xc4>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d108      	bne.n	8005106 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e016      	b.n	8005134 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d002      	beq.n	8005112 <I2C_MasterReceive_BTF+0xe2>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d108      	bne.n	8005124 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e007      	b.n	8005134 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005132:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800518e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b40      	cmp	r3, #64	@ 0x40
 80051a2:	d10a      	bne.n	80051ba <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fcaf 	bl	8004b16 <HAL_I2C_MemRxCpltCallback>
}
 80051b8:	e027      	b.n	800520a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d002      	beq.n	80051ce <I2C_MasterReceive_BTF+0x19e>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d103      	bne.n	80051d6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80051d4:	e002      	b.n	80051dc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2212      	movs	r2, #18
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fc69 	bl	8004ab4 <HAL_I2C_MasterRxCpltCallback>
}
 80051e2:	e012      	b.n	800520a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	d117      	bne.n	8005256 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522a:	2b00      	cmp	r3, #0
 800522c:	d109      	bne.n	8005242 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	b2db      	uxtb	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800523e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005240:	e067      	b.n	8005312 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	b2da      	uxtb	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	611a      	str	r2, [r3, #16]
}
 8005254:	e05d      	b.n	8005312 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800525e:	d133      	bne.n	80052c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b21      	cmp	r3, #33	@ 0x21
 800526a:	d109      	bne.n	8005280 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800527c:	611a      	str	r2, [r3, #16]
 800527e:	e008      	b.n	8005292 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	b2da      	uxtb	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <I2C_Master_SB+0x92>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d108      	bne.n	80052b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d032      	beq.n	8005312 <I2C_Master_SB+0x100>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d02d      	beq.n	8005312 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052c4:	605a      	str	r2, [r3, #4]
}
 80052c6:	e024      	b.n	8005312 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10e      	bne.n	80052ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	11db      	asrs	r3, r3, #7
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f003 0306 	and.w	r3, r3, #6
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f063 030f 	orn	r3, r3, #15
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	611a      	str	r2, [r3, #16]
}
 80052ec:	e011      	b.n	8005312 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d10d      	bne.n	8005312 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	11db      	asrs	r3, r3, #7
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 0306 	and.w	r3, r3, #6
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f063 030e 	orn	r3, r3, #14
 800530a:	b2da      	uxtb	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	611a      	str	r2, [r3, #16]
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005328:	b2da      	uxtb	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005334:	2b00      	cmp	r3, #0
 8005336:	d004      	beq.n	8005342 <I2C_Master_ADD10+0x26>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533e:	2b00      	cmp	r3, #0
 8005340:	d108      	bne.n	8005354 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00c      	beq.n	8005364 <I2C_Master_ADD10+0x48>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005362:	605a      	str	r2, [r3, #4]
  }
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800536e:	b480      	push	{r7}
 8005370:	b091      	sub	sp, #68	@ 0x44
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800537c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b22      	cmp	r3, #34	@ 0x22
 8005396:	f040 8174 	bne.w	8005682 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <I2C_Master_ADDR+0x54>
 80053a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80053a6:	2b40      	cmp	r3, #64	@ 0x40
 80053a8:	d10b      	bne.n	80053c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053aa:	2300      	movs	r3, #0
 80053ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	e16b      	b.n	800569a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d11d      	bne.n	8005406 <I2C_Master_ADDR+0x98>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80053d2:	d118      	bne.n	8005406 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d4:	2300      	movs	r3, #0
 80053d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	651a      	str	r2, [r3, #80]	@ 0x50
 8005404:	e149      	b.n	800569a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d113      	bne.n	8005438 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005410:	2300      	movs	r3, #0
 8005412:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e120      	b.n	800567a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	f040 808a 	bne.w	8005558 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005446:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800544a:	d137      	bne.n	80054bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800545a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800546a:	d113      	bne.n	8005494 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547c:	2300      	movs	r3, #0
 800547e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	e0f2      	b.n	800567a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005494:	2300      	movs	r3, #0
 8005496:	623b      	str	r3, [r7, #32]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	623b      	str	r3, [r7, #32]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	623b      	str	r3, [r7, #32]
 80054a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e0de      	b.n	800567a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d02e      	beq.n	8005520 <I2C_Master_ADDR+0x1b2>
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d02b      	beq.n	8005520 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ca:	2b12      	cmp	r3, #18
 80054cc:	d102      	bne.n	80054d4 <I2C_Master_ADDR+0x166>
 80054ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d125      	bne.n	8005520 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d00e      	beq.n	80054f8 <I2C_Master_ADDR+0x18a>
 80054da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d00b      	beq.n	80054f8 <I2C_Master_ADDR+0x18a>
 80054e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d008      	beq.n	80054f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e007      	b.n	8005508 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005506:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	e0ac      	b.n	800567a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800552e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e090      	b.n	800567a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d158      	bne.n	8005614 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005564:	2b04      	cmp	r3, #4
 8005566:	d021      	beq.n	80055ac <I2C_Master_ADDR+0x23e>
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	2b02      	cmp	r3, #2
 800556c:	d01e      	beq.n	80055ac <I2C_Master_ADDR+0x23e>
 800556e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005570:	2b10      	cmp	r3, #16
 8005572:	d01b      	beq.n	80055ac <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005582:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	e012      	b.n	80055d2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055e0:	d14b      	bne.n	800567a <I2C_Master_ADDR+0x30c>
 80055e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055e8:	d00b      	beq.n	8005602 <I2C_Master_ADDR+0x294>
 80055ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d008      	beq.n	8005602 <I2C_Master_ADDR+0x294>
 80055f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d005      	beq.n	8005602 <I2C_Master_ADDR+0x294>
 80055f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d002      	beq.n	8005602 <I2C_Master_ADDR+0x294>
 80055fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d13b      	bne.n	800567a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	e032      	b.n	800567a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005622:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800562e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005632:	d117      	bne.n	8005664 <I2C_Master_ADDR+0x2f6>
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800563a:	d00b      	beq.n	8005654 <I2C_Master_ADDR+0x2e6>
 800563c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563e:	2b01      	cmp	r3, #1
 8005640:	d008      	beq.n	8005654 <I2C_Master_ADDR+0x2e6>
 8005642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005644:	2b08      	cmp	r3, #8
 8005646:	d005      	beq.n	8005654 <I2C_Master_ADDR+0x2e6>
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	2b10      	cmp	r3, #16
 800564c:	d002      	beq.n	8005654 <I2C_Master_ADDR+0x2e6>
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	2b20      	cmp	r3, #32
 8005652:	d107      	bne.n	8005664 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005662:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005664:	2300      	movs	r3, #0
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005680:	e00b      	b.n	800569a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005682:	2300      	movs	r3, #0
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	68bb      	ldr	r3, [r7, #8]
}
 8005698:	e7ff      	b.n	800569a <I2C_Master_ADDR+0x32c>
 800569a:	bf00      	nop
 800569c:	3744      	adds	r7, #68	@ 0x44
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr

080056a4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d02b      	beq.n	8005716 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c2:	781a      	ldrb	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d114      	bne.n	8005716 <I2C_SlaveTransmit_TXE+0x72>
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b29      	cmp	r3, #41	@ 0x29
 80056f0:	d111      	bne.n	8005716 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005700:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2221      	movs	r2, #33	@ 0x21
 8005706:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2228      	movs	r2, #40	@ 0x28
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff f9d8 	bl	8004ac6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d011      	beq.n	8005754 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005734:	781a      	ldrb	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr

0800575e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800576c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d02c      	beq.n	80057d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d114      	bne.n	80057d2 <I2C_SlaveReceive_RXNE+0x74>
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ac:	d111      	bne.n	80057d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2222      	movs	r2, #34	@ 0x22
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2228      	movs	r2, #40	@ 0x28
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff f983 	bl	8004ad8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057d2:	bf00      	nop
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d012      	beq.n	8005812 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005836:	2b28      	cmp	r3, #40	@ 0x28
 8005838:	d127      	bne.n	800588a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005848:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	089b      	lsrs	r3, r3, #2
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005856:	2301      	movs	r3, #1
 8005858:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	09db      	lsrs	r3, r3, #7
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	81bb      	strh	r3, [r7, #12]
 800586c:	e002      	b.n	8005874 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800587c:	89ba      	ldrh	r2, [r7, #12]
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	4619      	mov	r1, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff f931 	bl	8004aea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005888:	e00e      	b.n	80058a8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058d0:	2300      	movs	r3, #0
 80058d2:	60bb      	str	r3, [r7, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800590c:	d172      	bne.n	80059f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b22      	cmp	r3, #34	@ 0x22
 8005912:	d002      	beq.n	800591a <I2C_Slave_STOPF+0x6a>
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b2a      	cmp	r3, #42	@ 0x2a
 8005918:	d135      	bne.n	8005986 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b29a      	uxth	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	f043 0204 	orr.w	r2, r3, #4
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800594c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005952:	4618      	mov	r0, r3
 8005954:	f7fd feea 	bl	800372c <HAL_DMA_GetState>
 8005958:	4603      	mov	r3, r0
 800595a:	2b01      	cmp	r3, #1
 800595c:	d049      	beq.n	80059f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005962:	4a69      	ldr	r2, [pc, #420]	@ (8005b08 <I2C_Slave_STOPF+0x258>)
 8005964:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596a:	4618      	mov	r0, r3
 800596c:	f7fd fe66 	bl	800363c <HAL_DMA_Abort_IT>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03d      	beq.n	80059f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005980:	4610      	mov	r0, r2
 8005982:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005984:	e035      	b.n	80059f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	b29a      	uxth	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	f043 0204 	orr.w	r2, r3, #4
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fd feb4 	bl	800372c <HAL_DMA_GetState>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d014      	beq.n	80059f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ce:	4a4e      	ldr	r2, [pc, #312]	@ (8005b08 <I2C_Slave_STOPF+0x258>)
 80059d0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fd fe30 	bl	800363c <HAL_DMA_Abort_IT>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059ec:	4610      	mov	r0, r2
 80059ee:	4798      	blx	r3
 80059f0:	e000      	b.n	80059f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d03e      	beq.n	8005a7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d112      	bne.n	8005a32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3c:	2b40      	cmp	r3, #64	@ 0x40
 8005a3e:	d112      	bne.n	8005a66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	f043 0204 	orr.w	r2, r3, #4
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f843 	bl	8005b10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a8a:	e039      	b.n	8005b00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a90:	d109      	bne.n	8005aa6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2228      	movs	r2, #40	@ 0x28
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff f819 	bl	8004ad8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b28      	cmp	r3, #40	@ 0x28
 8005ab0:	d111      	bne.n	8005ad6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a15      	ldr	r2, [pc, #84]	@ (8005b0c <I2C_Slave_STOPF+0x25c>)
 8005ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff f818 	bl	8004b04 <HAL_I2C_ListenCpltCallback>
}
 8005ad4:	e014      	b.n	8005b00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	2b22      	cmp	r3, #34	@ 0x22
 8005adc:	d002      	beq.n	8005ae4 <I2C_Slave_STOPF+0x234>
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	2b22      	cmp	r3, #34	@ 0x22
 8005ae2:	d10d      	bne.n	8005b00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fe ffec 	bl	8004ad8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b00:	bf00      	nop
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	08006071 	.word	0x08006071
 8005b0c:	ffff0000 	.word	0xffff0000

08005b10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	2b10      	cmp	r3, #16
 8005b2c:	d002      	beq.n	8005b34 <I2C_ITError+0x24>
 8005b2e:	7bbb      	ldrb	r3, [r7, #14]
 8005b30:	2b40      	cmp	r3, #64	@ 0x40
 8005b32:	d10a      	bne.n	8005b4a <I2C_ITError+0x3a>
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b22      	cmp	r3, #34	@ 0x22
 8005b38:	d107      	bne.n	8005b4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b50:	2b28      	cmp	r3, #40	@ 0x28
 8005b52:	d107      	bne.n	8005b64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2228      	movs	r2, #40	@ 0x28
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005b62:	e015      	b.n	8005b90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b72:	d00a      	beq.n	8005b8a <I2C_ITError+0x7a>
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b60      	cmp	r3, #96	@ 0x60
 8005b78:	d007      	beq.n	8005b8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b9e:	d162      	bne.n	8005c66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d020      	beq.n	8005c00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc2:	4a6a      	ldr	r2, [pc, #424]	@ (8005d6c <I2C_ITError+0x25c>)
 8005bc4:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fd fd36 	bl	800363c <HAL_DMA_Abort_IT>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8089 	beq.w	8005cea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	4798      	blx	r3
 8005bfe:	e074      	b.n	8005cea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	4a59      	ldr	r2, [pc, #356]	@ (8005d6c <I2C_ITError+0x25c>)
 8005c06:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd fd15 	bl	800363c <HAL_DMA_Abort_IT>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d068      	beq.n	8005cea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c22:	2b40      	cmp	r3, #64	@ 0x40
 8005c24:	d10b      	bne.n	8005c3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
 8005c64:	e041      	b.n	8005cea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b60      	cmp	r3, #96	@ 0x60
 8005c70:	d125      	bne.n	8005cbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8a:	2b40      	cmp	r3, #64	@ 0x40
 8005c8c:	d10b      	bne.n	8005ca6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fe ff3f 	bl	8004b3a <HAL_I2C_AbortCpltCallback>
 8005cbc:	e015      	b.n	8005cea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc8:	2b40      	cmp	r3, #64	@ 0x40
 8005cca:	d10b      	bne.n	8005ce4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fe ff1f 	bl	8004b28 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10e      	bne.n	8005d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d109      	bne.n	8005d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d113      	bne.n	8005d64 <I2C_ITError+0x254>
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b28      	cmp	r3, #40	@ 0x28
 8005d40:	d110      	bne.n	8005d64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a0a      	ldr	r2, [pc, #40]	@ (8005d70 <I2C_ITError+0x260>)
 8005d46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fe fed0 	bl	8004b04 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	08006071 	.word	0x08006071
 8005d70:	ffff0000 	.word	0xffff0000

08005d74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	817b      	strh	r3, [r7, #10]
 8005d86:	460b      	mov	r3, r1
 8005d88:	813b      	strh	r3, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fa08 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc4:	d103      	bne.n	8005dce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e05f      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005de0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	492d      	ldr	r1, [pc, #180]	@ (8005e9c <I2C_RequestMemoryWrite+0x128>)
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fa63 	bl	80062b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e04c      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e10:	6a39      	ldr	r1, [r7, #32]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 faee 	bl	80063f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d107      	bne.n	8005e36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e02b      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d105      	bne.n	8005e4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e40:	893b      	ldrh	r3, [r7, #8]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	611a      	str	r2, [r3, #16]
 8005e4a:	e021      	b.n	8005e90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e4c:	893b      	ldrh	r3, [r7, #8]
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e5c:	6a39      	ldr	r1, [r7, #32]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fac8 	bl	80063f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00d      	beq.n	8005e86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d107      	bne.n	8005e82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e005      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e86:	893b      	ldrh	r3, [r7, #8]
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	00010002 	.word	0x00010002

08005ea0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	461a      	mov	r2, r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	817b      	strh	r3, [r7, #10]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	813b      	strh	r3, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 f96a 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00d      	beq.n	8005f0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f00:	d103      	bne.n	8005f0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e0aa      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f0e:	897b      	ldrh	r3, [r7, #10]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	6a3a      	ldr	r2, [r7, #32]
 8005f22:	4952      	ldr	r1, [pc, #328]	@ (800606c <I2C_RequestMemoryRead+0x1cc>)
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f9c5 	bl	80062b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e097      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4c:	6a39      	ldr	r1, [r7, #32]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fa50 	bl	80063f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d107      	bne.n	8005f72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e076      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d105      	bne.n	8005f88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f7c:	893b      	ldrh	r3, [r7, #8]
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	611a      	str	r2, [r3, #16]
 8005f86:	e021      	b.n	8005fcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f88:	893b      	ldrh	r3, [r7, #8]
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f98:	6a39      	ldr	r1, [r7, #32]
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fa2a 	bl	80063f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00d      	beq.n	8005fc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d107      	bne.n	8005fbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e050      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fc2:	893b      	ldrh	r3, [r7, #8]
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fce:	6a39      	ldr	r1, [r7, #32]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fa0f 	bl	80063f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00d      	beq.n	8005ff8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d107      	bne.n	8005ff4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ff2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e035      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006006:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	2200      	movs	r2, #0
 8006010:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f8d3 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800602a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800602e:	d103      	bne.n	8006038 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006036:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e013      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800603c:	897b      	ldrh	r3, [r7, #10]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	b2da      	uxtb	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	4906      	ldr	r1, [pc, #24]	@ (800606c <I2C_RequestMemoryRead+0x1cc>)
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 f92e 	bl	80062b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	00010002 	.word	0x00010002

08006070 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006080:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006088:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800608a:	4b4b      	ldr	r3, [pc, #300]	@ (80061b8 <I2C_DMAAbort+0x148>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	08db      	lsrs	r3, r3, #3
 8006090:	4a4a      	ldr	r2, [pc, #296]	@ (80061bc <I2C_DMAAbort+0x14c>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	0a1a      	lsrs	r2, r3, #8
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	00da      	lsls	r2, r3, #3
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80060b6:	e00a      	b.n	80060ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060cc:	d0ea      	beq.n	80060a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060da:	2200      	movs	r2, #0
 80060dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	2200      	movs	r2, #0
 80060ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2200      	movs	r2, #0
 8006102:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006110:	2200      	movs	r2, #0
 8006112:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006120:	2200      	movs	r2, #0
 8006122:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0201 	bic.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b60      	cmp	r3, #96	@ 0x60
 800613e:	d10e      	bne.n	800615e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2200      	movs	r2, #0
 8006154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006156:	6978      	ldr	r0, [r7, #20]
 8006158:	f7fe fcef 	bl	8004b3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800615c:	e027      	b.n	80061ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800615e:	7cfb      	ldrb	r3, [r7, #19]
 8006160:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006164:	2b28      	cmp	r3, #40	@ 0x28
 8006166:	d117      	bne.n	8006198 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006186:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2228      	movs	r2, #40	@ 0x28
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006196:	e007      	b.n	80061a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80061a8:	6978      	ldr	r0, [r7, #20]
 80061aa:	f7fe fcbd 	bl	8004b28 <HAL_I2C_ErrorCallback>
}
 80061ae:	bf00      	nop
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000004 	.word	0x20000004
 80061bc:	14f8b589 	.word	0x14f8b589

080061c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	4613      	mov	r3, r2
 80061ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061d0:	e048      	b.n	8006264 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d8:	d044      	beq.n	8006264 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061da:	f7fc fa27 	bl	800262c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d302      	bcc.n	80061f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d139      	bne.n	8006264 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	0c1b      	lsrs	r3, r3, #16
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d10d      	bne.n	8006216 <I2C_WaitOnFlagUntilTimeout+0x56>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	43da      	mvns	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4013      	ands	r3, r2
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	bf0c      	ite	eq
 800620c:	2301      	moveq	r3, #1
 800620e:	2300      	movne	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	e00c      	b.n	8006230 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	43da      	mvns	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4013      	ands	r3, r2
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	bf0c      	ite	eq
 8006228:	2301      	moveq	r3, #1
 800622a:	2300      	movne	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	429a      	cmp	r2, r3
 8006234:	d116      	bne.n	8006264 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e023      	b.n	80062ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	0c1b      	lsrs	r3, r3, #16
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b01      	cmp	r3, #1
 800626c:	d10d      	bne.n	800628a <I2C_WaitOnFlagUntilTimeout+0xca>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	43da      	mvns	r2, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4013      	ands	r3, r2
 800627a:	b29b      	uxth	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	bf0c      	ite	eq
 8006280:	2301      	moveq	r3, #1
 8006282:	2300      	movne	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	e00c      	b.n	80062a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	43da      	mvns	r2, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4013      	ands	r3, r2
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	bf0c      	ite	eq
 800629c:	2301      	moveq	r3, #1
 800629e:	2300      	movne	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d093      	beq.n	80061d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062c2:	e071      	b.n	80063a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d2:	d123      	bne.n	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	f043 0204 	orr.w	r2, r3, #4
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e067      	b.n	80063ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d041      	beq.n	80063a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006324:	f7fc f982 	bl	800262c <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	d302      	bcc.n	800633a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d136      	bne.n	80063a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	0c1b      	lsrs	r3, r3, #16
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	d10c      	bne.n	800635e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	43da      	mvns	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4013      	ands	r3, r2
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	bf14      	ite	ne
 8006356:	2301      	movne	r3, #1
 8006358:	2300      	moveq	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	e00b      	b.n	8006376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	43da      	mvns	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4013      	ands	r3, r2
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	bf14      	ite	ne
 8006370:	2301      	movne	r3, #1
 8006372:	2300      	moveq	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d016      	beq.n	80063a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006394:	f043 0220 	orr.w	r2, r3, #32
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e021      	b.n	80063ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	0c1b      	lsrs	r3, r3, #16
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d10c      	bne.n	80063cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	43da      	mvns	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4013      	ands	r3, r2
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e00b      	b.n	80063e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	43da      	mvns	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4013      	ands	r3, r2
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bf14      	ite	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f47f af6d 	bne.w	80062c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006400:	e034      	b.n	800646c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f915 	bl	8006632 <I2C_IsAcknowledgeFailed>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e034      	b.n	800647c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d028      	beq.n	800646c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641a:	f7fc f907 	bl	800262c <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	d302      	bcc.n	8006430 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d11d      	bne.n	800646c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643a:	2b80      	cmp	r3, #128	@ 0x80
 800643c:	d016      	beq.n	800646c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	f043 0220 	orr.w	r2, r3, #32
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e007      	b.n	800647c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006476:	2b80      	cmp	r3, #128	@ 0x80
 8006478:	d1c3      	bne.n	8006402 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006490:	e034      	b.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f8cd 	bl	8006632 <I2C_IsAcknowledgeFailed>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e034      	b.n	800650c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d028      	beq.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064aa:	f7fc f8bf 	bl	800262c <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d302      	bcc.n	80064c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d11d      	bne.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d016      	beq.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e8:	f043 0220 	orr.w	r2, r3, #32
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e007      	b.n	800650c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b04      	cmp	r3, #4
 8006508:	d1c3      	bne.n	8006492 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006520:	4b13      	ldr	r3, [pc, #76]	@ (8006570 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	08db      	lsrs	r3, r3, #3
 8006526:	4a13      	ldr	r2, [pc, #76]	@ (8006574 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006528:	fba2 2303 	umull	r2, r3, r2, r3
 800652c:	0a1a      	lsrs	r2, r3, #8
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3b01      	subs	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d107      	bne.n	8006552 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	f043 0220 	orr.w	r2, r3, #32
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e008      	b.n	8006564 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800655c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006560:	d0e9      	beq.n	8006536 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20000004 	.word	0x20000004
 8006574:	14f8b589 	.word	0x14f8b589

08006578 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006584:	e049      	b.n	800661a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	2b10      	cmp	r3, #16
 8006592:	d119      	bne.n	80065c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0210 	mvn.w	r2, #16
 800659c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e030      	b.n	800662a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c8:	f7fc f830 	bl	800262c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d302      	bcc.n	80065de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11d      	bne.n	800661a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e8:	2b40      	cmp	r3, #64	@ 0x40
 80065ea:	d016      	beq.n	800661a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006606:	f043 0220 	orr.w	r2, r3, #32
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e007      	b.n	800662a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006624:	2b40      	cmp	r3, #64	@ 0x40
 8006626:	d1ae      	bne.n	8006586 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006648:	d11b      	bne.n	8006682 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006652:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	f043 0204 	orr.w	r2, r3, #4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800669e:	d103      	bne.n	80066a8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80066a6:	e007      	b.n	80066b8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80066b0:	d102      	bne.n	80066b8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2208      	movs	r2, #8
 80066b6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr
	...

080066c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e272      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 8087 	beq.w	80067f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066e4:	4b92      	ldr	r3, [pc, #584]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f003 030c 	and.w	r3, r3, #12
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d00c      	beq.n	800670a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80066f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f003 030c 	and.w	r3, r3, #12
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d112      	bne.n	8006722 <HAL_RCC_OscConfig+0x5e>
 80066fc:	4b8c      	ldr	r3, [pc, #560]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006708:	d10b      	bne.n	8006722 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670a:	4b89      	ldr	r3, [pc, #548]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d06c      	beq.n	80067f0 <HAL_RCC_OscConfig+0x12c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d168      	bne.n	80067f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e24c      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800672a:	d106      	bne.n	800673a <HAL_RCC_OscConfig+0x76>
 800672c:	4b80      	ldr	r3, [pc, #512]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a7f      	ldr	r2, [pc, #508]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	e02e      	b.n	8006798 <HAL_RCC_OscConfig+0xd4>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10c      	bne.n	800675c <HAL_RCC_OscConfig+0x98>
 8006742:	4b7b      	ldr	r3, [pc, #492]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a7a      	ldr	r2, [pc, #488]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	4b78      	ldr	r3, [pc, #480]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a77      	ldr	r2, [pc, #476]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006754:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	e01d      	b.n	8006798 <HAL_RCC_OscConfig+0xd4>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006764:	d10c      	bne.n	8006780 <HAL_RCC_OscConfig+0xbc>
 8006766:	4b72      	ldr	r3, [pc, #456]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a71      	ldr	r2, [pc, #452]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 800676c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	4b6f      	ldr	r3, [pc, #444]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a6e      	ldr	r2, [pc, #440]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e00b      	b.n	8006798 <HAL_RCC_OscConfig+0xd4>
 8006780:	4b6b      	ldr	r3, [pc, #428]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a6a      	ldr	r2, [pc, #424]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	4b68      	ldr	r3, [pc, #416]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a67      	ldr	r2, [pc, #412]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006796:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d013      	beq.n	80067c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a0:	f7fb ff44 	bl	800262c <HAL_GetTick>
 80067a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a8:	f7fb ff40 	bl	800262c <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b64      	cmp	r3, #100	@ 0x64
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e200      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f0      	beq.n	80067a8 <HAL_RCC_OscConfig+0xe4>
 80067c6:	e014      	b.n	80067f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c8:	f7fb ff30 	bl	800262c <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067d0:	f7fb ff2c 	bl	800262c <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b64      	cmp	r3, #100	@ 0x64
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e1ec      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067e2:	4b53      	ldr	r3, [pc, #332]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1f0      	bne.n	80067d0 <HAL_RCC_OscConfig+0x10c>
 80067ee:	e000      	b.n	80067f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d063      	beq.n	80068c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067fe:	4b4c      	ldr	r3, [pc, #304]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f003 030c 	and.w	r3, r3, #12
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00b      	beq.n	8006822 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800680a:	4b49      	ldr	r3, [pc, #292]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f003 030c 	and.w	r3, r3, #12
 8006812:	2b08      	cmp	r3, #8
 8006814:	d11c      	bne.n	8006850 <HAL_RCC_OscConfig+0x18c>
 8006816:	4b46      	ldr	r3, [pc, #280]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d116      	bne.n	8006850 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006822:	4b43      	ldr	r3, [pc, #268]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <HAL_RCC_OscConfig+0x176>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d001      	beq.n	800683a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e1c0      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800683a:	4b3d      	ldr	r3, [pc, #244]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	4939      	ldr	r1, [pc, #228]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 800684a:	4313      	orrs	r3, r2
 800684c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800684e:	e03a      	b.n	80068c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d020      	beq.n	800689a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006858:	4b36      	ldr	r3, [pc, #216]	@ (8006934 <HAL_RCC_OscConfig+0x270>)
 800685a:	2201      	movs	r2, #1
 800685c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685e:	f7fb fee5 	bl	800262c <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006864:	e008      	b.n	8006878 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006866:	f7fb fee1 	bl	800262c <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	2b02      	cmp	r3, #2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e1a1      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006878:	4b2d      	ldr	r3, [pc, #180]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0f0      	beq.n	8006866 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006884:	4b2a      	ldr	r3, [pc, #168]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	4927      	ldr	r1, [pc, #156]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 8006894:	4313      	orrs	r3, r2
 8006896:	600b      	str	r3, [r1, #0]
 8006898:	e015      	b.n	80068c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800689a:	4b26      	ldr	r3, [pc, #152]	@ (8006934 <HAL_RCC_OscConfig+0x270>)
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a0:	f7fb fec4 	bl	800262c <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068a8:	f7fb fec0 	bl	800262c <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e180      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d03a      	beq.n	8006948 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d019      	beq.n	800690e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068da:	4b17      	ldr	r3, [pc, #92]	@ (8006938 <HAL_RCC_OscConfig+0x274>)
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068e0:	f7fb fea4 	bl	800262c <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068e8:	f7fb fea0 	bl	800262c <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e160      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006930 <HAL_RCC_OscConfig+0x26c>)
 80068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0f0      	beq.n	80068e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006906:	2001      	movs	r0, #1
 8006908:	f000 face 	bl	8006ea8 <RCC_Delay>
 800690c:	e01c      	b.n	8006948 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800690e:	4b0a      	ldr	r3, [pc, #40]	@ (8006938 <HAL_RCC_OscConfig+0x274>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006914:	f7fb fe8a 	bl	800262c <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800691a:	e00f      	b.n	800693c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800691c:	f7fb fe86 	bl	800262c <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d908      	bls.n	800693c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e146      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
 800692e:	bf00      	nop
 8006930:	40021000 	.word	0x40021000
 8006934:	42420000 	.word	0x42420000
 8006938:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800693c:	4b92      	ldr	r3, [pc, #584]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 800693e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e9      	bne.n	800691c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80a6 	beq.w	8006aa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800695a:	4b8b      	ldr	r3, [pc, #556]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10d      	bne.n	8006982 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006966:	4b88      	ldr	r3, [pc, #544]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	4a87      	ldr	r2, [pc, #540]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 800696c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006970:	61d3      	str	r3, [r2, #28]
 8006972:	4b85      	ldr	r3, [pc, #532]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800697a:	60bb      	str	r3, [r7, #8]
 800697c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800697e:	2301      	movs	r3, #1
 8006980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006982:	4b82      	ldr	r3, [pc, #520]	@ (8006b8c <HAL_RCC_OscConfig+0x4c8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800698a:	2b00      	cmp	r3, #0
 800698c:	d118      	bne.n	80069c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800698e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b8c <HAL_RCC_OscConfig+0x4c8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a7e      	ldr	r2, [pc, #504]	@ (8006b8c <HAL_RCC_OscConfig+0x4c8>)
 8006994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800699a:	f7fb fe47 	bl	800262c <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069a2:	f7fb fe43 	bl	800262c <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b64      	cmp	r3, #100	@ 0x64
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e103      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b4:	4b75      	ldr	r3, [pc, #468]	@ (8006b8c <HAL_RCC_OscConfig+0x4c8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d106      	bne.n	80069d6 <HAL_RCC_OscConfig+0x312>
 80069c8:	4b6f      	ldr	r3, [pc, #444]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	4a6e      	ldr	r2, [pc, #440]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 80069ce:	f043 0301 	orr.w	r3, r3, #1
 80069d2:	6213      	str	r3, [r2, #32]
 80069d4:	e02d      	b.n	8006a32 <HAL_RCC_OscConfig+0x36e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10c      	bne.n	80069f8 <HAL_RCC_OscConfig+0x334>
 80069de:	4b6a      	ldr	r3, [pc, #424]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	4a69      	ldr	r2, [pc, #420]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	6213      	str	r3, [r2, #32]
 80069ea:	4b67      	ldr	r3, [pc, #412]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	4a66      	ldr	r2, [pc, #408]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 80069f0:	f023 0304 	bic.w	r3, r3, #4
 80069f4:	6213      	str	r3, [r2, #32]
 80069f6:	e01c      	b.n	8006a32 <HAL_RCC_OscConfig+0x36e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b05      	cmp	r3, #5
 80069fe:	d10c      	bne.n	8006a1a <HAL_RCC_OscConfig+0x356>
 8006a00:	4b61      	ldr	r3, [pc, #388]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	4a60      	ldr	r2, [pc, #384]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a06:	f043 0304 	orr.w	r3, r3, #4
 8006a0a:	6213      	str	r3, [r2, #32]
 8006a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	4a5d      	ldr	r2, [pc, #372]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	6213      	str	r3, [r2, #32]
 8006a18:	e00b      	b.n	8006a32 <HAL_RCC_OscConfig+0x36e>
 8006a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	4a5a      	ldr	r2, [pc, #360]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	6213      	str	r3, [r2, #32]
 8006a26:	4b58      	ldr	r3, [pc, #352]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	4a57      	ldr	r2, [pc, #348]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a2c:	f023 0304 	bic.w	r3, r3, #4
 8006a30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d015      	beq.n	8006a66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a3a:	f7fb fdf7 	bl	800262c <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a40:	e00a      	b.n	8006a58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a42:	f7fb fdf3 	bl	800262c <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e0b1      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a58:	4b4b      	ldr	r3, [pc, #300]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0ee      	beq.n	8006a42 <HAL_RCC_OscConfig+0x37e>
 8006a64:	e014      	b.n	8006a90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a66:	f7fb fde1 	bl	800262c <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a6c:	e00a      	b.n	8006a84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a6e:	f7fb fddd 	bl	800262c <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e09b      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a84:	4b40      	ldr	r3, [pc, #256]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1ee      	bne.n	8006a6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d105      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a96:	4b3c      	ldr	r3, [pc, #240]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 8087 	beq.w	8006bba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aac:	4b36      	ldr	r3, [pc, #216]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f003 030c 	and.w	r3, r3, #12
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d061      	beq.n	8006b7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d146      	bne.n	8006b4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac0:	4b33      	ldr	r3, [pc, #204]	@ (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac6:	f7fb fdb1 	bl	800262c <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ace:	f7fb fdad 	bl	800262c <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e06d      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ae0:	4b29      	ldr	r3, [pc, #164]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f0      	bne.n	8006ace <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af4:	d108      	bne.n	8006b08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006af6:	4b24      	ldr	r3, [pc, #144]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	4921      	ldr	r1, [pc, #132]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b08:	4b1f      	ldr	r3, [pc, #124]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a19      	ldr	r1, [r3, #32]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	491b      	ldr	r1, [pc, #108]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b20:	4b1b      	ldr	r3, [pc, #108]	@ (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b26:	f7fb fd81 	bl	800262c <HAL_GetTick>
 8006b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b2e:	f7fb fd7d 	bl	800262c <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e03d      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b40:	4b11      	ldr	r3, [pc, #68]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f0      	beq.n	8006b2e <HAL_RCC_OscConfig+0x46a>
 8006b4c:	e035      	b.n	8006bba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b4e:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <HAL_RCC_OscConfig+0x4cc>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b54:	f7fb fd6a 	bl	800262c <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b5c:	f7fb fd66 	bl	800262c <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e026      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b6e:	4b06      	ldr	r3, [pc, #24]	@ (8006b88 <HAL_RCC_OscConfig+0x4c4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f0      	bne.n	8006b5c <HAL_RCC_OscConfig+0x498>
 8006b7a:	e01e      	b.n	8006bba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d107      	bne.n	8006b94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e019      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40007000 	.word	0x40007000
 8006b90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b94:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc4 <HAL_RCC_OscConfig+0x500>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d106      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d001      	beq.n	8006bba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40021000 	.word	0x40021000

08006bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0d0      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d910      	bls.n	8006c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bea:	4b67      	ldr	r3, [pc, #412]	@ (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f023 0207 	bic.w	r2, r3, #7
 8006bf2:	4965      	ldr	r1, [pc, #404]	@ (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfa:	4b63      	ldr	r3, [pc, #396]	@ (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d001      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0b8      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d020      	beq.n	8006c5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c24:	4b59      	ldr	r3, [pc, #356]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	4a58      	ldr	r2, [pc, #352]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c3c:	4b53      	ldr	r3, [pc, #332]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	4a52      	ldr	r2, [pc, #328]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006c46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c48:	4b50      	ldr	r3, [pc, #320]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	494d      	ldr	r1, [pc, #308]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d040      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d107      	bne.n	8006c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c6e:	4b47      	ldr	r3, [pc, #284]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d115      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e07f      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d107      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c86:	4b41      	ldr	r3, [pc, #260]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e073      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c96:	4b3d      	ldr	r3, [pc, #244]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e06b      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ca6:	4b39      	ldr	r3, [pc, #228]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f023 0203 	bic.w	r2, r3, #3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4936      	ldr	r1, [pc, #216]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cb8:	f7fb fcb8 	bl	800262c <HAL_GetTick>
 8006cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc0:	f7fb fcb4 	bl	800262c <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e053      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f003 020c 	and.w	r2, r3, #12
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d1eb      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ce8:	4b27      	ldr	r3, [pc, #156]	@ (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d210      	bcs.n	8006d18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf6:	4b24      	ldr	r3, [pc, #144]	@ (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f023 0207 	bic.w	r2, r3, #7
 8006cfe:	4922      	ldr	r1, [pc, #136]	@ (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d06:	4b20      	ldr	r3, [pc, #128]	@ (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d001      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e032      	b.n	8006d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d008      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d24:	4b19      	ldr	r3, [pc, #100]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	4916      	ldr	r1, [pc, #88]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d42:	4b12      	ldr	r3, [pc, #72]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	490e      	ldr	r1, [pc, #56]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d56:	f000 f821 	bl	8006d9c <HAL_RCC_GetSysClockFreq>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	091b      	lsrs	r3, r3, #4
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	490a      	ldr	r1, [pc, #40]	@ (8006d90 <HAL_RCC_ClockConfig+0x1c8>)
 8006d68:	5ccb      	ldrb	r3, [r1, r3]
 8006d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6e:	4a09      	ldr	r2, [pc, #36]	@ (8006d94 <HAL_RCC_ClockConfig+0x1cc>)
 8006d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d72:	4b09      	ldr	r3, [pc, #36]	@ (8006d98 <HAL_RCC_ClockConfig+0x1d0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fb fc16 	bl	80025a8 <HAL_InitTick>

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40022000 	.word	0x40022000
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	0801a5bc 	.word	0x0801a5bc
 8006d94:	20000004 	.word	0x20000004
 8006d98:	20000008 	.word	0x20000008

08006d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	2300      	movs	r3, #0
 8006db0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006db6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f003 030c 	and.w	r3, r3, #12
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d002      	beq.n	8006dcc <HAL_RCC_GetSysClockFreq+0x30>
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d003      	beq.n	8006dd2 <HAL_RCC_GetSysClockFreq+0x36>
 8006dca:	e027      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006dcc:	4b19      	ldr	r3, [pc, #100]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8006dce:	613b      	str	r3, [r7, #16]
      break;
 8006dd0:	e027      	b.n	8006e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	0c9b      	lsrs	r3, r3, #18
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	4a17      	ldr	r2, [pc, #92]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006ddc:	5cd3      	ldrb	r3, [r2, r3]
 8006dde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d010      	beq.n	8006e0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006dea:	4b11      	ldr	r3, [pc, #68]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	0c5b      	lsrs	r3, r3, #17
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	4a11      	ldr	r2, [pc, #68]	@ (8006e3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006df6:	5cd3      	ldrb	r3, [r2, r3]
 8006df8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8006dfe:	fb03 f202 	mul.w	r2, r3, r2
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	e004      	b.n	8006e16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e10:	fb02 f303 	mul.w	r3, r2, r3
 8006e14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	613b      	str	r3, [r7, #16]
      break;
 8006e1a:	e002      	b.n	8006e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e1c:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e1e:	613b      	str	r3, [r7, #16]
      break;
 8006e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e22:	693b      	ldr	r3, [r7, #16]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bc80      	pop	{r7}
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40021000 	.word	0x40021000
 8006e34:	007a1200 	.word	0x007a1200
 8006e38:	0801a5d4 	.word	0x0801a5d4
 8006e3c:	0801a5e4 	.word	0x0801a5e4
 8006e40:	003d0900 	.word	0x003d0900

08006e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e48:	4b02      	ldr	r3, [pc, #8]	@ (8006e54 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr
 8006e54:	20000004 	.word	0x20000004

08006e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e5c:	f7ff fff2 	bl	8006e44 <HAL_RCC_GetHCLKFreq>
 8006e60:	4602      	mov	r2, r0
 8006e62:	4b05      	ldr	r3, [pc, #20]	@ (8006e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	4903      	ldr	r1, [pc, #12]	@ (8006e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e6e:	5ccb      	ldrb	r3, [r1, r3]
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	0801a5cc 	.word	0x0801a5cc

08006e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e84:	f7ff ffde 	bl	8006e44 <HAL_RCC_GetHCLKFreq>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	0adb      	lsrs	r3, r3, #11
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	4903      	ldr	r1, [pc, #12]	@ (8006ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e96:	5ccb      	ldrb	r3, [r1, r3]
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	0801a5cc 	.word	0x0801a5cc

08006ea8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006edc <RCC_Delay+0x34>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8006ee0 <RCC_Delay+0x38>)
 8006eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eba:	0a5b      	lsrs	r3, r3, #9
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006ec4:	bf00      	nop
  }
  while (Delay --);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1e5a      	subs	r2, r3, #1
 8006eca:	60fa      	str	r2, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1f9      	bne.n	8006ec4 <RCC_Delay+0x1c>
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr
 8006edc:	20000004 	.word	0x20000004
 8006ee0:	10624dd3 	.word	0x10624dd3

08006ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e076      	b.n	8006fe4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d108      	bne.n	8006f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f06:	d009      	beq.n	8006f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	61da      	str	r2, [r3, #28]
 8006f0e:	e005      	b.n	8006f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fb f8ae 	bl	8002098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa0:	ea42 0103 	orr.w	r1, r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	0c1a      	lsrs	r2, r3, #16
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f002 0204 	and.w	r2, r2, #4
 8006fc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69da      	ldr	r2, [r3, #28]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ffc:	f7fb fb16 	bl	800262c <HAL_GetTick>
 8007000:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b01      	cmp	r3, #1
 8007010:	d001      	beq.n	8007016 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007012:	2302      	movs	r3, #2
 8007014:	e12a      	b.n	800726c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <HAL_SPI_Transmit+0x36>
 800701c:	88fb      	ldrh	r3, [r7, #6]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e122      	b.n	800726c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_SPI_Transmit+0x48>
 8007030:	2302      	movs	r3, #2
 8007032:	e11b      	b.n	800726c <HAL_SPI_Transmit+0x280>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2203      	movs	r2, #3
 8007040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	88fa      	ldrh	r2, [r7, #6]
 800705a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007082:	d10f      	bne.n	80070a4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007092:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ae:	2b40      	cmp	r3, #64	@ 0x40
 80070b0:	d007      	beq.n	80070c2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ca:	d152      	bne.n	8007172 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_SPI_Transmit+0xee>
 80070d4:	8b7b      	ldrh	r3, [r7, #26]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d145      	bne.n	8007166 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070de:	881a      	ldrh	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ea:	1c9a      	adds	r2, r3, #2
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070fe:	e032      	b.n	8007166 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b02      	cmp	r3, #2
 800710c:	d112      	bne.n	8007134 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007112:	881a      	ldrh	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711e:	1c9a      	adds	r2, r3, #2
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007132:	e018      	b.n	8007166 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007134:	f7fb fa7a 	bl	800262c <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d803      	bhi.n	800714c <HAL_SPI_Transmit+0x160>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d102      	bne.n	8007152 <HAL_SPI_Transmit+0x166>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d109      	bne.n	8007166 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e082      	b.n	800726c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1c7      	bne.n	8007100 <HAL_SPI_Transmit+0x114>
 8007170:	e053      	b.n	800721a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_SPI_Transmit+0x194>
 800717a:	8b7b      	ldrh	r3, [r7, #26]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d147      	bne.n	8007210 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	330c      	adds	r3, #12
 800718a:	7812      	ldrb	r2, [r2, #0]
 800718c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071a6:	e033      	b.n	8007210 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d113      	bne.n	80071de <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	330c      	adds	r3, #12
 80071c0:	7812      	ldrb	r2, [r2, #0]
 80071c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071dc:	e018      	b.n	8007210 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071de:	f7fb fa25 	bl	800262c <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d803      	bhi.n	80071f6 <HAL_SPI_Transmit+0x20a>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f4:	d102      	bne.n	80071fc <HAL_SPI_Transmit+0x210>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d109      	bne.n	8007210 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e02d      	b.n	800726c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007214:	b29b      	uxth	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1c6      	bne.n	80071a8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 fa66 	bl	80076f0 <SPI_EndRxTxTransaction>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2220      	movs	r2, #32
 800722e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800726a:	2300      	movs	r3, #0
  }
}
 800726c:	4618      	mov	r0, r3
 800726e:	3720      	adds	r7, #32
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	@ 0x28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007282:	2301      	movs	r3, #1
 8007284:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007286:	f7fb f9d1 	bl	800262c <HAL_GetTick>
 800728a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007292:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800729a:	887b      	ldrh	r3, [r7, #2]
 800729c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800729e:	7ffb      	ldrb	r3, [r7, #31]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d00c      	beq.n	80072be <HAL_SPI_TransmitReceive+0x4a>
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072aa:	d106      	bne.n	80072ba <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <HAL_SPI_TransmitReceive+0x46>
 80072b4:	7ffb      	ldrb	r3, [r7, #31]
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d001      	beq.n	80072be <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80072ba:	2302      	movs	r3, #2
 80072bc:	e17f      	b.n	80075be <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <HAL_SPI_TransmitReceive+0x5c>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <HAL_SPI_TransmitReceive+0x5c>
 80072ca:	887b      	ldrh	r3, [r7, #2]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e174      	b.n	80075be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d101      	bne.n	80072e2 <HAL_SPI_TransmitReceive+0x6e>
 80072de:	2302      	movs	r3, #2
 80072e0:	e16d      	b.n	80075be <HAL_SPI_TransmitReceive+0x34a>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d003      	beq.n	80072fe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2205      	movs	r2, #5
 80072fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	887a      	ldrh	r2, [r7, #2]
 800730e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	887a      	ldrh	r2, [r7, #2]
 8007314:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	887a      	ldrh	r2, [r7, #2]
 8007320:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	887a      	ldrh	r2, [r7, #2]
 8007326:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800733e:	2b40      	cmp	r3, #64	@ 0x40
 8007340:	d007      	beq.n	8007352 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007350:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800735a:	d17e      	bne.n	800745a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <HAL_SPI_TransmitReceive+0xf6>
 8007364:	8afb      	ldrh	r3, [r7, #22]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d16c      	bne.n	8007444 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736e:	881a      	ldrh	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737a:	1c9a      	adds	r2, r3, #2
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800738e:	e059      	b.n	8007444 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b02      	cmp	r3, #2
 800739c:	d11b      	bne.n	80073d6 <HAL_SPI_TransmitReceive+0x162>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d016      	beq.n	80073d6 <HAL_SPI_TransmitReceive+0x162>
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d113      	bne.n	80073d6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b2:	881a      	ldrh	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073be:	1c9a      	adds	r2, r3, #2
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d119      	bne.n	8007418 <HAL_SPI_TransmitReceive+0x1a4>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d014      	beq.n	8007418 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f8:	b292      	uxth	r2, r2
 80073fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007400:	1c9a      	adds	r2, r3, #2
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800740a:	b29b      	uxth	r3, r3
 800740c:	3b01      	subs	r3, #1
 800740e:	b29a      	uxth	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007414:	2301      	movs	r3, #1
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007418:	f7fb f908 	bl	800262c <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007424:	429a      	cmp	r2, r3
 8007426:	d80d      	bhi.n	8007444 <HAL_SPI_TransmitReceive+0x1d0>
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d009      	beq.n	8007444 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e0bc      	b.n	80075be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007448:	b29b      	uxth	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1a0      	bne.n	8007390 <HAL_SPI_TransmitReceive+0x11c>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007452:	b29b      	uxth	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d19b      	bne.n	8007390 <HAL_SPI_TransmitReceive+0x11c>
 8007458:	e082      	b.n	8007560 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <HAL_SPI_TransmitReceive+0x1f4>
 8007462:	8afb      	ldrh	r3, [r7, #22]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d171      	bne.n	800754c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	7812      	ldrb	r2, [r2, #0]
 8007474:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007484:	b29b      	uxth	r3, r3
 8007486:	3b01      	subs	r3, #1
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800748e:	e05d      	b.n	800754c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b02      	cmp	r3, #2
 800749c:	d11c      	bne.n	80074d8 <HAL_SPI_TransmitReceive+0x264>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d017      	beq.n	80074d8 <HAL_SPI_TransmitReceive+0x264>
 80074a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d114      	bne.n	80074d8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	330c      	adds	r3, #12
 80074b8:	7812      	ldrb	r2, [r2, #0]
 80074ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d119      	bne.n	800751a <HAL_SPI_TransmitReceive+0x2a6>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d014      	beq.n	800751a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007516:	2301      	movs	r3, #1
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800751a:	f7fb f887 	bl	800262c <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007526:	429a      	cmp	r2, r3
 8007528:	d803      	bhi.n	8007532 <HAL_SPI_TransmitReceive+0x2be>
 800752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d102      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x2c4>
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e038      	b.n	80075be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d19c      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x21c>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d197      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007560:	6a3a      	ldr	r2, [r7, #32]
 8007562:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f8c3 	bl	80076f0 <SPI_EndRxTxTransaction>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e01d      	b.n	80075be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10a      	bne.n	80075a0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800758a:	2300      	movs	r3, #0
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
  }
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3728      	adds	r7, #40	@ 0x28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075d4:	b2db      	uxtb	r3, r3
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc80      	pop	{r7}
 80075de:	4770      	bx	lr

080075e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075f0:	f7fb f81c 	bl	800262c <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f8:	1a9b      	subs	r3, r3, r2
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	4413      	add	r3, r2
 80075fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007600:	f7fb f814 	bl	800262c <HAL_GetTick>
 8007604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007606:	4b39      	ldr	r3, [pc, #228]	@ (80076ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	015b      	lsls	r3, r3, #5
 800760c:	0d1b      	lsrs	r3, r3, #20
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	fb02 f303 	mul.w	r3, r2, r3
 8007614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007616:	e054      	b.n	80076c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761e:	d050      	beq.n	80076c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007620:	f7fb f804 	bl	800262c <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	429a      	cmp	r2, r3
 800762e:	d902      	bls.n	8007636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d13d      	bne.n	80076b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800764e:	d111      	bne.n	8007674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007658:	d004      	beq.n	8007664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007662:	d107      	bne.n	8007674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800767c:	d10f      	bne.n	800769e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800769c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e017      	b.n	80076e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	3b01      	subs	r3, #1
 80076c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4013      	ands	r3, r2
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	461a      	mov	r2, r3
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d19b      	bne.n	8007618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3720      	adds	r7, #32
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000004 	.word	0x20000004

080076f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2201      	movs	r2, #1
 8007704:	2102      	movs	r1, #2
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff ff6a 	bl	80075e0 <SPI_WaitFlagStateUntilTimeout>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007716:	f043 0220 	orr.w	r2, r3, #32
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e013      	b.n	800774a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2200      	movs	r2, #0
 800772a:	2180      	movs	r1, #128	@ 0x80
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff ff57 	bl	80075e0 <SPI_WaitFlagStateUntilTimeout>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d007      	beq.n	8007748 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773c:	f043 0220 	orr.w	r2, r3, #32
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e000      	b.n	800774a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e042      	b.n	80077ea <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d106      	bne.n	800777e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fa fcd7 	bl	800212c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2224      	movs	r2, #36	@ 0x24
 8007782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007794:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fdee 	bl	8008378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	691a      	ldr	r2, [r3, #16]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695a      	ldr	r2, [r3, #20]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b08a      	sub	sp, #40	@ 0x28
 80077f6:	af02      	add	r7, sp, #8
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b20      	cmp	r3, #32
 8007810:	d175      	bne.n	80078fe <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_UART_Transmit+0x2c>
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e06e      	b.n	8007900 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2221      	movs	r2, #33	@ 0x21
 800782c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007830:	f7fa fefc 	bl	800262c <HAL_GetTick>
 8007834:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	88fa      	ldrh	r2, [r7, #6]
 800783a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	88fa      	ldrh	r2, [r7, #6]
 8007840:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800784a:	d108      	bne.n	800785e <HAL_UART_Transmit+0x6c>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007854:	2300      	movs	r3, #0
 8007856:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e003      	b.n	8007866 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007866:	e02e      	b.n	80078c6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2200      	movs	r2, #0
 8007870:	2180      	movs	r1, #128	@ 0x80
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 fb53 	bl	8007f1e <UART_WaitOnFlagUntilTimeout>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e03a      	b.n	8007900 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800789e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	3302      	adds	r3, #2
 80078a4:	61bb      	str	r3, [r7, #24]
 80078a6:	e007      	b.n	80078b8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	781a      	ldrb	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	3301      	adds	r3, #1
 80078b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1cb      	bne.n	8007868 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2200      	movs	r2, #0
 80078d8:	2140      	movs	r1, #64	@ 0x40
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 fb1f 	bl	8007f1e <UART_WaitOnFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d005      	beq.n	80078f2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e006      	b.n	8007900 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	e000      	b.n	8007900 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80078fe:	2302      	movs	r3, #2
  }
}
 8007900:	4618      	mov	r0, r3
 8007902:	3720      	adds	r7, #32
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08c      	sub	sp, #48	@ 0x30
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b20      	cmp	r3, #32
 8007920:	d14a      	bne.n	80079b8 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e043      	b.n	80079ba <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2201      	movs	r2, #1
 8007936:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800793e:	88fb      	ldrh	r3, [r7, #6]
 8007940:	461a      	mov	r2, r3
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fb43 	bl	8007fd0 <UART_Start_Receive_IT>
 800794a:	4603      	mov	r3, r0
 800794c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007950:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007954:	2b00      	cmp	r3, #0
 8007956:	d12c      	bne.n	80079b2 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795c:	2b01      	cmp	r3, #1
 800795e:	d125      	bne.n	80079ac <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007960:	2300      	movs	r3, #0
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	330c      	adds	r3, #12
 800797c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	617b      	str	r3, [r7, #20]
   return(result);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f043 0310 	orr.w	r3, r3, #16
 800798c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	330c      	adds	r3, #12
 8007994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007996:	627a      	str	r2, [r7, #36]	@ 0x24
 8007998:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6a39      	ldr	r1, [r7, #32]
 800799c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e5      	bne.n	8007976 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80079aa:	e002      	b.n	80079b2 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80079b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079b6:	e000      	b.n	80079ba <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80079b8:	2302      	movs	r3, #2
  }
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3730      	adds	r7, #48	@ 0x30
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b0ba      	sub	sp, #232	@ 0xe8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10f      	bne.n	8007a2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <HAL_UART_IRQHandler+0x66>
 8007a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fbea 	bl	80081fc <UART_Receive_IT>
      return;
 8007a28:	e25b      	b.n	8007ee2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 80de 	beq.w	8007bf0 <HAL_UART_IRQHandler+0x22c>
 8007a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d106      	bne.n	8007a4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 80d1 	beq.w	8007bf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <HAL_UART_IRQHandler+0xae>
 8007a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6a:	f043 0201 	orr.w	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00b      	beq.n	8007a96 <HAL_UART_IRQHandler+0xd2>
 8007a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d005      	beq.n	8007a96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a8e:	f043 0202 	orr.w	r2, r3, #2
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <HAL_UART_IRQHandler+0xf6>
 8007aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab2:	f043 0204 	orr.w	r2, r3, #4
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d011      	beq.n	8007aea <HAL_UART_IRQHandler+0x126>
 8007ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae2:	f043 0208 	orr.w	r2, r3, #8
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 81f2 	beq.w	8007ed8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d008      	beq.n	8007b12 <HAL_UART_IRQHandler+0x14e>
 8007b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fb75 	bl	80081fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bf14      	ite	ne
 8007b20:	2301      	movne	r3, #1
 8007b22:	2300      	moveq	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b2e:	f003 0308 	and.w	r3, r3, #8
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d103      	bne.n	8007b3e <HAL_UART_IRQHandler+0x17a>
 8007b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d04f      	beq.n	8007bde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa7f 	bl	8008042 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d041      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3314      	adds	r3, #20
 8007b58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3314      	adds	r3, #20
 8007b7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1d9      	bne.n	8007b52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d013      	beq.n	8007bce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007baa:	4a7e      	ldr	r2, [pc, #504]	@ (8007da4 <HAL_UART_IRQHandler+0x3e0>)
 8007bac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fb fd42 	bl	800363c <HAL_DMA_Abort_IT>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d016      	beq.n	8007bec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bcc:	e00e      	b.n	8007bec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f99c 	bl	8007f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd4:	e00a      	b.n	8007bec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f998 	bl	8007f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bdc:	e006      	b.n	8007bec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f994 	bl	8007f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007bea:	e175      	b.n	8007ed8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bec:	bf00      	nop
    return;
 8007bee:	e173      	b.n	8007ed8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	f040 814f 	bne.w	8007e98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 8148 	beq.w	8007e98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8141 	beq.w	8007e98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c16:	2300      	movs	r3, #0
 8007c18:	60bb      	str	r3, [r7, #8]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	60bb      	str	r3, [r7, #8]
 8007c2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 80b6 	beq.w	8007da8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8145 	beq.w	8007edc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	f080 813e 	bcs.w	8007edc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	f000 8088 	beq.w	8007d84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	330c      	adds	r3, #12
 8007c9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007ca0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ca4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007cac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1d9      	bne.n	8007c74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007cd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cd2:	f023 0301 	bic.w	r3, r3, #1
 8007cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3314      	adds	r3, #20
 8007ce0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ce4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ce8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e1      	bne.n	8007cc0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3314      	adds	r3, #20
 8007d02:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3314      	adds	r3, #20
 8007d1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e3      	bne.n	8007cfc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d54:	f023 0310 	bic.w	r3, r3, #16
 8007d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d66:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d68:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e3      	bne.n	8007d42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fb fc21 	bl	80035c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7f9 ff04 	bl	8001ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007da0:	e09c      	b.n	8007edc <HAL_UART_IRQHandler+0x518>
 8007da2:	bf00      	nop
 8007da4:	08008107 	.word	0x08008107
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 808e 	beq.w	8007ee0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 8089 	beq.w	8007ee0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	330c      	adds	r3, #12
 8007dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007de4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	330c      	adds	r3, #12
 8007dee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007df2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007df4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007df8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e3      	bne.n	8007dce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3314      	adds	r3, #20
 8007e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	623b      	str	r3, [r7, #32]
   return(result);
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3314      	adds	r3, #20
 8007e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e3      	bne.n	8007e06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	330c      	adds	r3, #12
 8007e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0310 	bic.w	r3, r3, #16
 8007e62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	330c      	adds	r3, #12
 8007e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e70:	61fa      	str	r2, [r7, #28]
 8007e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	69b9      	ldr	r1, [r7, #24]
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e3      	bne.n	8007e4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7f9 fe89 	bl	8001ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e96:	e023      	b.n	8007ee0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d009      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x4f4>
 8007ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f93c 	bl	800812e <UART_Transmit_IT>
    return;
 8007eb6:	e014      	b.n	8007ee2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00e      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x51e>
 8007ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d008      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f97b 	bl	80081cc <UART_EndTransmit_IT>
    return;
 8007ed6:	e004      	b.n	8007ee2 <HAL_UART_IRQHandler+0x51e>
    return;
 8007ed8:	bf00      	nop
 8007eda:	e002      	b.n	8007ee2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007edc:	bf00      	nop
 8007ede:	e000      	b.n	8007ee2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ee0:	bf00      	nop
  }
}
 8007ee2:	37e8      	adds	r7, #232	@ 0xe8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr

08007efa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f02:	bf00      	nop
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr

08007f0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc80      	pop	{r7}
 8007f1c:	4770      	bx	lr

08007f1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b086      	sub	sp, #24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f2e:	e03b      	b.n	8007fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d037      	beq.n	8007fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f38:	f7fa fb78 	bl	800262c <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	6a3a      	ldr	r2, [r7, #32]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d302      	bcc.n	8007f4e <UART_WaitOnFlagUntilTimeout+0x30>
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e03a      	b.n	8007fc8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d023      	beq.n	8007fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b80      	cmp	r3, #128	@ 0x80
 8007f64:	d020      	beq.n	8007fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b40      	cmp	r3, #64	@ 0x40
 8007f6a:	d01d      	beq.n	8007fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0308 	and.w	r3, r3, #8
 8007f76:	2b08      	cmp	r3, #8
 8007f78:	d116      	bne.n	8007fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f856 	bl	8008042 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e00f      	b.n	8007fc8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	bf0c      	ite	eq
 8007fb8:	2301      	moveq	r3, #1
 8007fba:	2300      	movne	r3, #0
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d0b4      	beq.n	8007f30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	88fa      	ldrh	r2, [r7, #6]
 8007fe8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	88fa      	ldrh	r2, [r7, #6]
 8007fee:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2222      	movs	r2, #34	@ 0x22
 8007ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d007      	beq.n	8008016 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008014:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	695a      	ldr	r2, [r3, #20]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0201 	orr.w	r2, r2, #1
 8008024:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f042 0220 	orr.w	r2, r2, #32
 8008034:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	bc80      	pop	{r7}
 8008040:	4770      	bx	lr

08008042 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008042:	b480      	push	{r7}
 8008044:	b095      	sub	sp, #84	@ 0x54
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	330c      	adds	r3, #12
 8008050:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	330c      	adds	r3, #12
 8008068:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800806a:	643a      	str	r2, [r7, #64]	@ 0x40
 800806c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008070:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e5      	bne.n	800804a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3314      	adds	r3, #20
 8008084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	61fb      	str	r3, [r7, #28]
   return(result);
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	f023 0301 	bic.w	r3, r3, #1
 8008094:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3314      	adds	r3, #20
 800809c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800809e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e5      	bne.n	800807e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d119      	bne.n	80080ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	330c      	adds	r3, #12
 80080c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f023 0310 	bic.w	r3, r3, #16
 80080d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	330c      	adds	r3, #12
 80080d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080da:	61ba      	str	r2, [r7, #24]
 80080dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6979      	ldr	r1, [r7, #20]
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	613b      	str	r3, [r7, #16]
   return(result);
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e5      	bne.n	80080ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80080fc:	bf00      	nop
 80080fe:	3754      	adds	r7, #84	@ 0x54
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr

08008106 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008112:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f7ff fef3 	bl	8007f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800812e:	b480      	push	{r7}
 8008130:	b085      	sub	sp, #20
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b21      	cmp	r3, #33	@ 0x21
 8008140:	d13e      	bne.n	80081c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800814a:	d114      	bne.n	8008176 <UART_Transmit_IT+0x48>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d110      	bne.n	8008176 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008168:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	1c9a      	adds	r2, r3, #2
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	621a      	str	r2, [r3, #32]
 8008174:	e008      	b.n	8008188 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	1c59      	adds	r1, r3, #1
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6211      	str	r1, [r2, #32]
 8008180:	781a      	ldrb	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	b29b      	uxth	r3, r3
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4619      	mov	r1, r3
 8008196:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10f      	bne.n	80081bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	e000      	b.n	80081c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081c0:	2302      	movs	r3, #2
  }
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bc80      	pop	{r7}
 80081ca:	4770      	bx	lr

080081cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff fe7b 	bl	8007ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08c      	sub	sp, #48	@ 0x30
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b22      	cmp	r3, #34	@ 0x22
 800820e:	f040 80ae 	bne.w	800836e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821a:	d117      	bne.n	800824c <UART_Receive_IT+0x50>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d113      	bne.n	800824c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008224:	2300      	movs	r3, #0
 8008226:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823a:	b29a      	uxth	r2, r3
 800823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008244:	1c9a      	adds	r2, r3, #2
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	629a      	str	r2, [r3, #40]	@ 0x28
 800824a:	e026      	b.n	800829a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008250:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800825e:	d007      	beq.n	8008270 <UART_Receive_IT+0x74>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <UART_Receive_IT+0x82>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d106      	bne.n	800827e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	b2da      	uxtb	r2, r3
 8008278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	e008      	b.n	8008290 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800828a:	b2da      	uxtb	r2, r3
 800828c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	4619      	mov	r1, r3
 80082a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d15d      	bne.n	800836a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0220 	bic.w	r2, r2, #32
 80082bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695a      	ldr	r2, [r3, #20]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0201 	bic.w	r2, r2, #1
 80082dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d135      	bne.n	8008360 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	330c      	adds	r3, #12
 8008300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	613b      	str	r3, [r7, #16]
   return(result);
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f023 0310 	bic.w	r3, r3, #16
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	330c      	adds	r3, #12
 8008318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800831a:	623a      	str	r2, [r7, #32]
 800831c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	69f9      	ldr	r1, [r7, #28]
 8008320:	6a3a      	ldr	r2, [r7, #32]
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	61bb      	str	r3, [r7, #24]
   return(result);
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e5      	bne.n	80082fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	2b10      	cmp	r3, #16
 800833a:	d10a      	bne.n	8008352 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800833c:	2300      	movs	r3, #0
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7f9 fc25 	bl	8001ba8 <HAL_UARTEx_RxEventCallback>
 800835e:	e002      	b.n	8008366 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff fdca 	bl	8007efa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	e002      	b.n	8008370 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	e000      	b.n	8008370 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800836e:	2302      	movs	r3, #2
  }
}
 8008370:	4618      	mov	r0, r3
 8008372:	3730      	adds	r7, #48	@ 0x30
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689a      	ldr	r2, [r3, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80083b2:	f023 030c 	bic.w	r3, r3, #12
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6812      	ldr	r2, [r2, #0]
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	430b      	orrs	r3, r1
 80083be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699a      	ldr	r2, [r3, #24]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a2c      	ldr	r2, [pc, #176]	@ (800848c <UART_SetConfig+0x114>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d103      	bne.n	80083e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80083e0:	f7fe fd4e 	bl	8006e80 <HAL_RCC_GetPCLK2Freq>
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	e002      	b.n	80083ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80083e8:	f7fe fd36 	bl	8006e58 <HAL_RCC_GetPCLK1Freq>
 80083ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009a      	lsls	r2, r3, #2
 80083f8:	441a      	add	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	fbb2 f3f3 	udiv	r3, r2, r3
 8008404:	4a22      	ldr	r2, [pc, #136]	@ (8008490 <UART_SetConfig+0x118>)
 8008406:	fba2 2303 	umull	r2, r3, r2, r3
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	0119      	lsls	r1, r3, #4
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009a      	lsls	r2, r3, #2
 8008418:	441a      	add	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	fbb2 f2f3 	udiv	r2, r2, r3
 8008424:	4b1a      	ldr	r3, [pc, #104]	@ (8008490 <UART_SetConfig+0x118>)
 8008426:	fba3 0302 	umull	r0, r3, r3, r2
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	2064      	movs	r0, #100	@ 0x64
 800842e:	fb00 f303 	mul.w	r3, r0, r3
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	3332      	adds	r3, #50	@ 0x32
 8008438:	4a15      	ldr	r2, [pc, #84]	@ (8008490 <UART_SetConfig+0x118>)
 800843a:	fba2 2303 	umull	r2, r3, r2, r3
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008444:	4419      	add	r1, r3
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	4613      	mov	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	009a      	lsls	r2, r3, #2
 8008450:	441a      	add	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	fbb2 f2f3 	udiv	r2, r2, r3
 800845c:	4b0c      	ldr	r3, [pc, #48]	@ (8008490 <UART_SetConfig+0x118>)
 800845e:	fba3 0302 	umull	r0, r3, r3, r2
 8008462:	095b      	lsrs	r3, r3, #5
 8008464:	2064      	movs	r0, #100	@ 0x64
 8008466:	fb00 f303 	mul.w	r3, r0, r3
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	3332      	adds	r3, #50	@ 0x32
 8008470:	4a07      	ldr	r2, [pc, #28]	@ (8008490 <UART_SetConfig+0x118>)
 8008472:	fba2 2303 	umull	r2, r3, r2, r3
 8008476:	095b      	lsrs	r3, r3, #5
 8008478:	f003 020f 	and.w	r2, r3, #15
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	440a      	add	r2, r1
 8008482:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008484:	bf00      	nop
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	40013800 	.word	0x40013800
 8008490:	51eb851f 	.word	0x51eb851f

08008494 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008498:	4904      	ldr	r1, [pc, #16]	@ (80084ac <MX_FATFS_Init+0x18>)
 800849a:	4805      	ldr	r0, [pc, #20]	@ (80084b0 <MX_FATFS_Init+0x1c>)
 800849c:	f003 fb1e 	bl	800badc <FATFS_LinkDriver>
 80084a0:	4603      	mov	r3, r0
 80084a2:	461a      	mov	r2, r3
 80084a4:	4b03      	ldr	r3, [pc, #12]	@ (80084b4 <MX_FATFS_Init+0x20>)
 80084a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80084a8:	bf00      	nop
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000d18 	.word	0x20000d18
 80084b0:	20000010 	.word	0x20000010
 80084b4:	20000d14 	.word	0x20000d14

080084b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80084bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80084be:	4618      	mov	r0, r3
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc80      	pop	{r7}
 80084c4:	4770      	bx	lr

080084c6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	4603      	mov	r3, r0
 80084ce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7f8 fdb6 	bl	8001044 <SD_disk_initialize>
 80084d8:	4603      	mov	r3, r0
 80084da:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80084ee:	79fb      	ldrb	r3, [r7, #7]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7f8 fe91 	bl	8001218 <SD_disk_status>
 80084f6:	4603      	mov	r3, r0
 80084f8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
 800850e:	4603      	mov	r3, r0
 8008510:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8008512:	7bf8      	ldrb	r0, [r7, #15]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	f7f8 fe91 	bl	8001240 <SD_disk_read>
 800851e:	4603      	mov	r3, r0
 8008520:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800853a:	7bf8      	ldrb	r0, [r7, #15]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	68b9      	ldr	r1, [r7, #8]
 8008542:	f7f8 fee7 	bl	8001314 <SD_disk_write>
 8008546:	4603      	mov	r3, r0
 8008548:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	4603      	mov	r3, r0
 800855a:	603a      	str	r2, [r7, #0]
 800855c:	71fb      	strb	r3, [r7, #7]
 800855e:	460b      	mov	r3, r1
 8008560:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	79b9      	ldrb	r1, [r7, #6]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f7f8 ff57 	bl	800141c <SD_disk_ioctl>
 800856e:	4603      	mov	r3, r0
 8008570:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	4a08      	ldr	r2, [pc, #32]	@ (80085ac <disk_status+0x30>)
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	79fa      	ldrb	r2, [r7, #7]
 8008594:	4905      	ldr	r1, [pc, #20]	@ (80085ac <disk_status+0x30>)
 8008596:	440a      	add	r2, r1
 8008598:	7a12      	ldrb	r2, [r2, #8]
 800859a:	4610      	mov	r0, r2
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20000d3c 	.word	0x20000d3c

080085b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	4a0d      	ldr	r2, [pc, #52]	@ (80085f8 <disk_initialize+0x48>)
 80085c2:	5cd3      	ldrb	r3, [r2, r3]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d111      	bne.n	80085ec <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	4a0b      	ldr	r2, [pc, #44]	@ (80085f8 <disk_initialize+0x48>)
 80085cc:	2101      	movs	r1, #1
 80085ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	4a09      	ldr	r2, [pc, #36]	@ (80085f8 <disk_initialize+0x48>)
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	79fa      	ldrb	r2, [r7, #7]
 80085de:	4906      	ldr	r1, [pc, #24]	@ (80085f8 <disk_initialize+0x48>)
 80085e0:	440a      	add	r2, r1
 80085e2:	7a12      	ldrb	r2, [r2, #8]
 80085e4:	4610      	mov	r0, r2
 80085e6:	4798      	blx	r3
 80085e8:	4603      	mov	r3, r0
 80085ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000d3c 	.word	0x20000d3c

080085fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80085fc:	b590      	push	{r4, r7, lr}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	4603      	mov	r3, r0
 800860a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	4a0a      	ldr	r2, [pc, #40]	@ (8008638 <disk_read+0x3c>)
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	689c      	ldr	r4, [r3, #8]
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	4a07      	ldr	r2, [pc, #28]	@ (8008638 <disk_read+0x3c>)
 800861c:	4413      	add	r3, r2
 800861e:	7a18      	ldrb	r0, [r3, #8]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	68b9      	ldr	r1, [r7, #8]
 8008626:	47a0      	blx	r4
 8008628:	4603      	mov	r3, r0
 800862a:	75fb      	strb	r3, [r7, #23]
  return res;
 800862c:	7dfb      	ldrb	r3, [r7, #23]
}
 800862e:	4618      	mov	r0, r3
 8008630:	371c      	adds	r7, #28
 8008632:	46bd      	mov	sp, r7
 8008634:	bd90      	pop	{r4, r7, pc}
 8008636:	bf00      	nop
 8008638:	20000d3c 	.word	0x20000d3c

0800863c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4a0a      	ldr	r2, [pc, #40]	@ (8008678 <disk_write+0x3c>)
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	68dc      	ldr	r4, [r3, #12]
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	4a07      	ldr	r2, [pc, #28]	@ (8008678 <disk_write+0x3c>)
 800865c:	4413      	add	r3, r2
 800865e:	7a18      	ldrb	r0, [r3, #8]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	47a0      	blx	r4
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]
  return res;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
}
 800866e:	4618      	mov	r0, r3
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	bd90      	pop	{r4, r7, pc}
 8008676:	bf00      	nop
 8008678:	20000d3c 	.word	0x20000d3c

0800867c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	4603      	mov	r3, r0
 8008684:	603a      	str	r2, [r7, #0]
 8008686:	71fb      	strb	r3, [r7, #7]
 8008688:	460b      	mov	r3, r1
 800868a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	4a09      	ldr	r2, [pc, #36]	@ (80086b4 <disk_ioctl+0x38>)
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	79fa      	ldrb	r2, [r7, #7]
 800869a:	4906      	ldr	r1, [pc, #24]	@ (80086b4 <disk_ioctl+0x38>)
 800869c:	440a      	add	r2, r1
 800869e:	7a10      	ldrb	r0, [r2, #8]
 80086a0:	79b9      	ldrb	r1, [r7, #6]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	4798      	blx	r3
 80086a6:	4603      	mov	r3, r0
 80086a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000d3c 	.word	0x20000d3c

080086b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80086cc:	e007      	b.n	80086de <mem_cpy+0x26>
		*d++ = *s++;
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	1c53      	adds	r3, r2, #1
 80086d2:	613b      	str	r3, [r7, #16]
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	1c59      	adds	r1, r3, #1
 80086d8:	6179      	str	r1, [r7, #20]
 80086da:	7812      	ldrb	r2, [r2, #0]
 80086dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	1e5a      	subs	r2, r3, #1
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f2      	bne.n	80086ce <mem_cpy+0x16>
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr

080086f4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008704:	e005      	b.n	8008712 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	617a      	str	r2, [r7, #20]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	1e5a      	subs	r2, r3, #1
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1f4      	bne.n	8008706 <mem_set+0x12>
}
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	371c      	adds	r7, #28
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr

08008728 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8008728:	b480      	push	{r7}
 800872a:	b089      	sub	sp, #36	@ 0x24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	61fb      	str	r3, [r7, #28]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8008740:	bf00      	nop
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	1e5a      	subs	r2, r3, #1
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00d      	beq.n	8008768 <mem_cmp+0x40>
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	61fa      	str	r2, [r7, #28]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	4619      	mov	r1, r3
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	61ba      	str	r2, [r7, #24]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	1acb      	subs	r3, r1, r3
 8008760:	617b      	str	r3, [r7, #20]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0ec      	beq.n	8008742 <mem_cmp+0x1a>
	return r;
 8008768:	697b      	ldr	r3, [r7, #20]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3724      	adds	r7, #36	@ 0x24
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800877e:	e002      	b.n	8008786 <chk_chr+0x12>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3301      	adds	r3, #1
 8008784:	607b      	str	r3, [r7, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <chk_chr+0x26>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	4293      	cmp	r3, r2
 8008798:	d1f2      	bne.n	8008780 <chk_chr+0xc>
	return *str;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	781b      	ldrb	r3, [r3, #0]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr

080087a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087b2:	2300      	movs	r3, #0
 80087b4:	60bb      	str	r3, [r7, #8]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	e03b      	b.n	8008834 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80087bc:	4931      	ldr	r1, [pc, #196]	@ (8008884 <chk_lock+0xdc>)
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	4613      	mov	r3, r2
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d02c      	beq.n	800882a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80087d0:	492c      	ldr	r1, [pc, #176]	@ (8008884 <chk_lock+0xdc>)
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4613      	mov	r3, r2
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	440b      	add	r3, r1
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d120      	bne.n	800882e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80087ec:	4925      	ldr	r1, [pc, #148]	@ (8008884 <chk_lock+0xdc>)
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4613      	mov	r3, r2
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	4413      	add	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	440b      	add	r3, r1
 80087fa:	3304      	adds	r3, #4
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008804:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008806:	429a      	cmp	r2, r3
 8008808:	d111      	bne.n	800882e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800880a:	491e      	ldr	r1, [pc, #120]	@ (8008884 <chk_lock+0xdc>)
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4613      	mov	r3, r2
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	3308      	adds	r3, #8
 800881a:	881a      	ldrh	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008822:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8008824:	429a      	cmp	r2, r3
 8008826:	d102      	bne.n	800882e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8008828:	e007      	b.n	800883a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800882a:	2301      	movs	r3, #1
 800882c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d9c0      	bls.n	80087bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b02      	cmp	r3, #2
 800883e:	d109      	bne.n	8008854 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d102      	bne.n	800884c <chk_lock+0xa4>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d101      	bne.n	8008850 <chk_lock+0xa8>
 800884c:	2300      	movs	r3, #0
 800884e:	e013      	b.n	8008878 <chk_lock+0xd0>
 8008850:	2312      	movs	r3, #18
 8008852:	e011      	b.n	8008878 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <chk_lock+0xca>
 800885a:	490a      	ldr	r1, [pc, #40]	@ (8008884 <chk_lock+0xdc>)
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4613      	mov	r3, r2
 8008860:	005b      	lsls	r3, r3, #1
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	330a      	adds	r3, #10
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008870:	d101      	bne.n	8008876 <chk_lock+0xce>
 8008872:	2310      	movs	r3, #16
 8008874:	e000      	b.n	8008878 <chk_lock+0xd0>
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	bc80      	pop	{r7}
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	20000d24 	.word	0x20000d24

08008888 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800888e:	2300      	movs	r3, #0
 8008890:	607b      	str	r3, [r7, #4]
 8008892:	e002      	b.n	800889a <enq_lock+0x12>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3301      	adds	r3, #1
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d809      	bhi.n	80088b4 <enq_lock+0x2c>
 80088a0:	490a      	ldr	r1, [pc, #40]	@ (80088cc <enq_lock+0x44>)
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	4613      	mov	r3, r2
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	440b      	add	r3, r1
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1ef      	bne.n	8008894 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	bf14      	ite	ne
 80088ba:	2301      	movne	r3, #1
 80088bc:	2300      	moveq	r3, #0
 80088be:	b2db      	uxtb	r3, r3
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	20000d24 	.word	0x20000d24

080088d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	e02e      	b.n	800893e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80088e0:	4958      	ldr	r1, [pc, #352]	@ (8008a44 <inc_lock+0x174>)
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4613      	mov	r3, r2
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d11d      	bne.n	8008938 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80088fc:	4951      	ldr	r1, [pc, #324]	@ (8008a44 <inc_lock+0x174>)
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	4613      	mov	r3, r2
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	440b      	add	r3, r1
 800890a:	3304      	adds	r3, #4
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008914:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8008916:	429a      	cmp	r2, r3
 8008918:	d10e      	bne.n	8008938 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800891a:	494a      	ldr	r1, [pc, #296]	@ (8008a44 <inc_lock+0x174>)
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4613      	mov	r3, r2
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	3308      	adds	r3, #8
 800892a:	881a      	ldrh	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008932:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8008934:	429a      	cmp	r2, r3
 8008936:	d006      	beq.n	8008946 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3301      	adds	r3, #1
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d9cd      	bls.n	80088e0 <inc_lock+0x10>
 8008944:	e000      	b.n	8008948 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8008946:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b02      	cmp	r3, #2
 800894c:	d148      	bne.n	80089e0 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	e002      	b.n	800895a <inc_lock+0x8a>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3301      	adds	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d809      	bhi.n	8008974 <inc_lock+0xa4>
 8008960:	4938      	ldr	r1, [pc, #224]	@ (8008a44 <inc_lock+0x174>)
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4613      	mov	r3, r2
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1ef      	bne.n	8008954 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b02      	cmp	r3, #2
 8008978:	d101      	bne.n	800897e <inc_lock+0xae>
 800897a:	2300      	movs	r3, #0
 800897c:	e05d      	b.n	8008a3a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008984:	6819      	ldr	r1, [r3, #0]
 8008986:	482f      	ldr	r0, [pc, #188]	@ (8008a44 <inc_lock+0x174>)
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4613      	mov	r3, r2
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4403      	add	r3, r0
 8008994:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800899c:	6899      	ldr	r1, [r3, #8]
 800899e:	4829      	ldr	r0, [pc, #164]	@ (8008a44 <inc_lock+0x174>)
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4613      	mov	r3, r2
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4403      	add	r3, r0
 80089ac:	3304      	adds	r3, #4
 80089ae:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089b6:	88d8      	ldrh	r0, [r3, #6]
 80089b8:	4922      	ldr	r1, [pc, #136]	@ (8008a44 <inc_lock+0x174>)
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	4613      	mov	r3, r2
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	4413      	add	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	440b      	add	r3, r1
 80089c6:	3308      	adds	r3, #8
 80089c8:	4602      	mov	r2, r0
 80089ca:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80089cc:	491d      	ldr	r1, [pc, #116]	@ (8008a44 <inc_lock+0x174>)
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4613      	mov	r3, r2
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	330a      	adds	r3, #10
 80089dc:	2200      	movs	r2, #0
 80089de:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00c      	beq.n	8008a00 <inc_lock+0x130>
 80089e6:	4917      	ldr	r1, [pc, #92]	@ (8008a44 <inc_lock+0x174>)
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4613      	mov	r3, r2
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	440b      	add	r3, r1
 80089f4:	330a      	adds	r3, #10
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <inc_lock+0x130>
 80089fc:	2300      	movs	r3, #0
 80089fe:	e01c      	b.n	8008a3a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10b      	bne.n	8008a1e <inc_lock+0x14e>
 8008a06:	490f      	ldr	r1, [pc, #60]	@ (8008a44 <inc_lock+0x174>)
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	440b      	add	r3, r1
 8008a14:	330a      	adds	r3, #10
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	b299      	uxth	r1, r3
 8008a1c:	e001      	b.n	8008a22 <inc_lock+0x152>
 8008a1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008a22:	4808      	ldr	r0, [pc, #32]	@ (8008a44 <inc_lock+0x174>)
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4613      	mov	r3, r2
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	4413      	add	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4403      	add	r3, r0
 8008a30:	330a      	adds	r3, #10
 8008a32:	460a      	mov	r2, r1
 8008a34:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3301      	adds	r3, #1
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bc80      	pop	{r7}
 8008a42:	4770      	bx	lr
 8008a44:	20000d24 	.word	0x20000d24

08008a48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	607b      	str	r3, [r7, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d82e      	bhi.n	8008aba <dec_lock+0x72>
		n = Files[i].ctr;
 8008a5c:	491b      	ldr	r1, [pc, #108]	@ (8008acc <dec_lock+0x84>)
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	4613      	mov	r3, r2
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	4413      	add	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	440b      	add	r3, r1
 8008a6a:	330a      	adds	r3, #10
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008a70:	89fb      	ldrh	r3, [r7, #14]
 8008a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a76:	d101      	bne.n	8008a7c <dec_lock+0x34>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8008a7c:	89fb      	ldrh	r3, [r7, #14]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <dec_lock+0x40>
 8008a82:	89fb      	ldrh	r3, [r7, #14]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008a88:	4910      	ldr	r1, [pc, #64]	@ (8008acc <dec_lock+0x84>)
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	440b      	add	r3, r1
 8008a96:	330a      	adds	r3, #10
 8008a98:	89fa      	ldrh	r2, [r7, #14]
 8008a9a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008a9c:	89fb      	ldrh	r3, [r7, #14]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d108      	bne.n	8008ab4 <dec_lock+0x6c>
 8008aa2:	490a      	ldr	r1, [pc, #40]	@ (8008acc <dec_lock+0x84>)
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	440b      	add	r3, r1
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	737b      	strb	r3, [r7, #13]
 8008ab8:	e001      	b.n	8008abe <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008aba:	2302      	movs	r3, #2
 8008abc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008abe:	7b7b      	ldrb	r3, [r7, #13]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	20000d24 	.word	0x20000d24

08008ad0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	e016      	b.n	8008b0c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008ade:	4910      	ldr	r1, [pc, #64]	@ (8008b20 <clear_lock+0x50>)
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	440b      	add	r3, r1
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d108      	bne.n	8008b06 <clear_lock+0x36>
 8008af4:	490a      	ldr	r1, [pc, #40]	@ (8008b20 <clear_lock+0x50>)
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	4613      	mov	r3, r2
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d9e5      	bls.n	8008ade <clear_lock+0xe>
	}
}
 8008b12:	bf00      	nop
 8008b14:	bf00      	nop
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	20000d24 	.word	0x20000d24

08008b24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b36:	791b      	ldrb	r3, [r3, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d040      	beq.n	8008bbe <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b4c:	7858      	ldrb	r0, [r3, #1]
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	2301      	movs	r3, #1
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	f7ff fd72 	bl	800863c <disk_write>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <sync_window+0x40>
			res = FR_DISK_ERR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	73fb      	strb	r3, [r7, #15]
 8008b62:	e02c      	b.n	8008bbe <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	1ad2      	subs	r2, r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d21b      	bcs.n	8008bbe <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b8c:	78db      	ldrb	r3, [r3, #3]
 8008b8e:	613b      	str	r3, [r7, #16]
 8008b90:	e012      	b.n	8008bb8 <sync_window+0x94>
					wsect += fs->fsize;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ba6:	7858      	ldrb	r0, [r3, #1]
 8008ba8:	6879      	ldr	r1, [r7, #4]
 8008baa:	2301      	movs	r3, #1
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	f7ff fd45 	bl	800863c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	613b      	str	r3, [r7, #16]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d8e9      	bhi.n	8008b92 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d01e      	beq.n	8008c22 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff ff9d 	bl	8008b24 <sync_window>
 8008bea:	4603      	mov	r3, r0
 8008bec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d116      	bne.n	8008c22 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bfa:	7858      	ldrb	r0, [r3, #1]
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	2301      	movs	r3, #1
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	f7ff fcfb 	bl	80085fc <disk_read>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c10:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff ff75 	bl	8008b24 <sync_window>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f040 80ad 	bne.w	8008da0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	f040 8098 	bne.w	8008d84 <sync_fs+0x158>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c5a:	795b      	ldrb	r3, [r3, #5]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	f040 8091 	bne.w	8008d84 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c6a:	895b      	ldrh	r3, [r3, #10]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	2100      	movs	r1, #0
 8008c70:	f7ff fd40 	bl	80086f4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2255      	movs	r2, #85	@ 0x55
 8008c78:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	22aa      	movs	r2, #170	@ 0xaa
 8008c80:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2252      	movs	r2, #82	@ 0x52
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2252      	movs	r2, #82	@ 0x52
 8008c8e:	705a      	strb	r2, [r3, #1]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2261      	movs	r2, #97	@ 0x61
 8008c94:	709a      	strb	r2, [r3, #2]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2241      	movs	r2, #65	@ 0x41
 8008c9a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2272      	movs	r2, #114	@ 0x72
 8008ca0:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2272      	movs	r2, #114	@ 0x72
 8008ca8:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2241      	movs	r2, #65	@ 0x41
 8008cb0:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2261      	movs	r2, #97	@ 0x61
 8008cb8:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	0a1b      	lsrs	r3, r3, #8
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	0c1b      	lsrs	r3, r3, #16
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	0e1b      	lsrs	r3, r3, #24
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	0a1b      	lsrs	r3, r3, #8
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	0c1b      	lsrs	r3, r3, #16
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	0e1b      	lsrs	r3, r3, #24
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008d60:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d68:	7858      	ldrb	r0, [r3, #1]
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d74:	2301      	movs	r3, #1
 8008d76:	f7ff fc61 	bl	800863c <disk_write>
			fs->fsi_flag = 0;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d80:	2200      	movs	r2, #0
 8008d82:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d8a:	785b      	ldrb	r3, [r3, #1]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2100      	movs	r1, #0
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff fc73 	bl	800867c <disk_ioctl>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	3b02      	subs	r3, #2
 8008db8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	3b02      	subs	r3, #2
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d301      	bcc.n	8008dce <clust2sect+0x24>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e00c      	b.n	8008de8 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dd4:	789b      	ldrb	r3, [r3, #2]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	fb03 f202 	mul.w	r2, r3, r2
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de6:	4413      	add	r3, r2
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bc80      	pop	{r7}
 8008df0:	4770      	bx	lr

08008df2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b086      	sub	sp, #24
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d906      	bls.n	8008e10 <get_fat+0x1e>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d302      	bcc.n	8008e16 <get_fat+0x24>
		val = 1;	/* Internal error */
 8008e10:	2301      	movs	r3, #1
 8008e12:	617b      	str	r3, [r7, #20]
 8008e14:	e0e4      	b.n	8008fe0 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	f000 8098 	beq.w	8008f5a <get_fat+0x168>
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	f300 80ce 	bgt.w	8008fcc <get_fat+0x1da>
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d002      	beq.n	8008e3a <get_fat+0x48>
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d05e      	beq.n	8008ef6 <get_fat+0x104>
 8008e38:	e0c8      	b.n	8008fcc <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	60fb      	str	r3, [r7, #12]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	085b      	lsrs	r3, r3, #1
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	4413      	add	r3, r2
 8008e46:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e4e:	6a1a      	ldr	r2, [r3, #32]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e56:	895b      	ldrh	r3, [r3, #10]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e60:	4413      	add	r3, r2
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff feaf 	bl	8008bc8 <move_window>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f040 80b0 	bne.w	8008fd2 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	60fa      	str	r2, [r7, #12]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008e7e:	8952      	ldrh	r2, [r2, #10]
 8008e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e84:	fb01 f202 	mul.w	r2, r1, r2
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	5cd3      	ldrb	r3, [r2, r3]
 8008e8e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e96:	6a1a      	ldr	r2, [r3, #32]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e9e:	895b      	ldrh	r3, [r3, #10]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ea8:	4413      	add	r3, r2
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7ff fe8b 	bl	8008bc8 <move_window>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f040 808e 	bne.w	8008fd6 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ec0:	895b      	ldrh	r3, [r3, #10]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eca:	fb01 f202 	mul.w	r2, r1, r2
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	5cd3      	ldrb	r3, [r2, r3]
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <get_fat+0xfa>
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	091b      	lsrs	r3, r3, #4
 8008eea:	e002      	b.n	8008ef2 <get_fat+0x100>
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ef2:	617b      	str	r3, [r7, #20]
			break;
 8008ef4:	e074      	b.n	8008fe0 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008efc:	6a1a      	ldr	r2, [r3, #32]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f04:	895b      	ldrh	r3, [r3, #10]
 8008f06:	085b      	lsrs	r3, r3, #1
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f12:	4413      	add	r3, r2
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff fe56 	bl	8008bc8 <move_window>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d15b      	bne.n	8008fda <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008f2c:	8952      	ldrh	r2, [r2, #10]
 8008f2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f32:	fb01 f202 	mul.w	r2, r1, r2
 8008f36:	1a9b      	subs	r3, r3, r2
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	3301      	adds	r3, #1
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	b21b      	sxth	r3, r3
 8008f46:	021b      	lsls	r3, r3, #8
 8008f48:	b21a      	sxth	r2, r3
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b21b      	sxth	r3, r3
 8008f50:	4313      	orrs	r3, r2
 8008f52:	b21b      	sxth	r3, r3
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	617b      	str	r3, [r7, #20]
			break;
 8008f58:	e042      	b.n	8008fe0 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f60:	6a1a      	ldr	r2, [r3, #32]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f68:	895b      	ldrh	r3, [r3, #10]
 8008f6a:	089b      	lsrs	r3, r3, #2
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	4619      	mov	r1, r3
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f76:	4413      	add	r3, r2
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff fe24 	bl	8008bc8 <move_window>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d12b      	bne.n	8008fde <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008f90:	8952      	ldrh	r2, [r2, #10]
 8008f92:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f96:	fb01 f202 	mul.w	r2, r1, r2
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	3303      	adds	r3, #3
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	061a      	lsls	r2, r3, #24
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	3302      	adds	r3, #2
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	041b      	lsls	r3, r3, #16
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	021b      	lsls	r3, r3, #8
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	7812      	ldrb	r2, [r2, #0]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008fc8:	617b      	str	r3, [r7, #20]
			break;
 8008fca:	e009      	b.n	8008fe0 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8008fcc:	2301      	movs	r3, #1
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	e006      	b.n	8008fe0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fd2:	bf00      	nop
 8008fd4:	e004      	b.n	8008fe0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fd6:	bf00      	nop
 8008fd8:	e002      	b.n	8008fe0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008fda:	bf00      	nop
 8008fdc:	e000      	b.n	8008fe0 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fde:	bf00      	nop
		}
	}

	return val;
 8008fe0:	697b      	ldr	r3, [r7, #20]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b088      	sub	sp, #32
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d906      	bls.n	800900a <put_fat+0x20>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	429a      	cmp	r2, r3
 8009008:	d302      	bcc.n	8009010 <put_fat+0x26>
		res = FR_INT_ERR;
 800900a:	2302      	movs	r3, #2
 800900c:	77fb      	strb	r3, [r7, #31]
 800900e:	e13a      	b.n	8009286 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b03      	cmp	r3, #3
 800901a:	f000 80d0 	beq.w	80091be <put_fat+0x1d4>
 800901e:	2b03      	cmp	r3, #3
 8009020:	f300 8127 	bgt.w	8009272 <put_fat+0x288>
 8009024:	2b01      	cmp	r3, #1
 8009026:	d003      	beq.n	8009030 <put_fat+0x46>
 8009028:	2b02      	cmp	r3, #2
 800902a:	f000 808f 	beq.w	800914c <put_fat+0x162>
 800902e:	e120      	b.n	8009272 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	617b      	str	r3, [r7, #20]
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	085b      	lsrs	r3, r3, #1
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	4413      	add	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009044:	6a1a      	ldr	r2, [r3, #32]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800904c:	895b      	ldrh	r3, [r3, #10]
 800904e:	4619      	mov	r1, r3
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	fbb3 f3f1 	udiv	r3, r3, r1
 8009056:	4413      	add	r3, r2
 8009058:	4619      	mov	r1, r3
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f7ff fdb4 	bl	8008bc8 <move_window>
 8009060:	4603      	mov	r3, r0
 8009062:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009064:	7ffb      	ldrb	r3, [r7, #31]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f040 8106 	bne.w	8009278 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	617a      	str	r2, [r7, #20]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009078:	8952      	ldrh	r2, [r2, #10]
 800907a:	fbb3 f1f2 	udiv	r1, r3, r2
 800907e:	fb01 f202 	mul.w	r2, r1, r2
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00d      	beq.n	80090b0 <put_fat+0xc6>
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b25b      	sxtb	r3, r3
 800909a:	f003 030f 	and.w	r3, r3, #15
 800909e:	b25a      	sxtb	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	b25b      	sxtb	r3, r3
 80090a4:	011b      	lsls	r3, r3, #4
 80090a6:	b25b      	sxtb	r3, r3
 80090a8:	4313      	orrs	r3, r2
 80090aa:	b25b      	sxtb	r3, r3
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	e001      	b.n	80090b4 <put_fat+0xca>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090be:	2201      	movs	r2, #1
 80090c0:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090c8:	6a1a      	ldr	r2, [r3, #32]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090d0:	895b      	ldrh	r3, [r3, #10]
 80090d2:	4619      	mov	r1, r3
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80090da:	4413      	add	r3, r2
 80090dc:	4619      	mov	r1, r3
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f7ff fd72 	bl	8008bc8 <move_window>
 80090e4:	4603      	mov	r3, r0
 80090e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090e8:	7ffb      	ldrb	r3, [r7, #31]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f040 80c6 	bne.w	800927c <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090f6:	895b      	ldrh	r3, [r3, #10]
 80090f8:	461a      	mov	r2, r3
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009100:	fb01 f202 	mul.w	r2, r1, r2
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <put_fat+0x134>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	091b      	lsrs	r3, r3, #4
 800911a:	b2db      	uxtb	r3, r3
 800911c:	e00e      	b.n	800913c <put_fat+0x152>
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	b25b      	sxtb	r3, r3
 8009124:	f023 030f 	bic.w	r3, r3, #15
 8009128:	b25a      	sxtb	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	0a1b      	lsrs	r3, r3, #8
 800912e:	b25b      	sxtb	r3, r3
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	b25b      	sxtb	r3, r3
 8009136:	4313      	orrs	r3, r2
 8009138:	b25b      	sxtb	r3, r3
 800913a:	b2db      	uxtb	r3, r3
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009146:	2201      	movs	r2, #1
 8009148:	711a      	strb	r2, [r3, #4]
			break;
 800914a:	e09c      	b.n	8009286 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009152:	6a1a      	ldr	r2, [r3, #32]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800915a:	895b      	ldrh	r3, [r3, #10]
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	b29b      	uxth	r3, r3
 8009160:	4619      	mov	r1, r3
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	fbb3 f3f1 	udiv	r3, r3, r1
 8009168:	4413      	add	r3, r2
 800916a:	4619      	mov	r1, r3
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff fd2b 	bl	8008bc8 <move_window>
 8009172:	4603      	mov	r3, r0
 8009174:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009176:	7ffb      	ldrb	r3, [r7, #31]
 8009178:	2b00      	cmp	r3, #0
 800917a:	f040 8081 	bne.w	8009280 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009188:	8952      	ldrh	r2, [r2, #10]
 800918a:	fbb3 f1f2 	udiv	r1, r3, r2
 800918e:	fb01 f202 	mul.w	r2, r1, r2
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	b2da      	uxtb	r2, r3
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	701a      	strb	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	0a1b      	lsrs	r3, r3, #8
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	3301      	adds	r3, #1
 80091ae:	b2d2      	uxtb	r2, r2
 80091b0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091b8:	2201      	movs	r2, #1
 80091ba:	711a      	strb	r2, [r3, #4]
			break;
 80091bc:	e063      	b.n	8009286 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091c4:	6a1a      	ldr	r2, [r3, #32]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091cc:	895b      	ldrh	r3, [r3, #10]
 80091ce:	089b      	lsrs	r3, r3, #2
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	4619      	mov	r1, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80091da:	4413      	add	r3, r2
 80091dc:	4619      	mov	r1, r3
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7ff fcf2 	bl	8008bc8 <move_window>
 80091e4:	4603      	mov	r3, r0
 80091e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091e8:	7ffb      	ldrb	r3, [r7, #31]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d14a      	bne.n	8009284 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80091f8:	8952      	ldrh	r2, [r2, #10]
 80091fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80091fe:	fb01 f202 	mul.w	r2, r1, r2
 8009202:	1a9b      	subs	r3, r3, r2
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	3303      	adds	r3, #3
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	061a      	lsls	r2, r3, #24
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	3302      	adds	r3, #2
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	041b      	lsls	r3, r3, #16
 800921a:	431a      	orrs	r2, r3
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	3301      	adds	r3, #1
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	4313      	orrs	r3, r2
 8009226:	69ba      	ldr	r2, [r7, #24]
 8009228:	7812      	ldrb	r2, [r2, #0]
 800922a:	4313      	orrs	r3, r2
 800922c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	4313      	orrs	r3, r2
 8009234:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	b2da      	uxtb	r2, r3
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	b29b      	uxth	r3, r3
 8009242:	0a1b      	lsrs	r3, r3, #8
 8009244:	b29a      	uxth	r2, r3
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	3301      	adds	r3, #1
 800924a:	b2d2      	uxtb	r2, r2
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	0c1a      	lsrs	r2, r3, #16
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	3302      	adds	r3, #2
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	0e1a      	lsrs	r2, r3, #24
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	3303      	adds	r3, #3
 8009262:	b2d2      	uxtb	r2, r2
 8009264:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800926c:	2201      	movs	r2, #1
 800926e:	711a      	strb	r2, [r3, #4]
			break;
 8009270:	e009      	b.n	8009286 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8009272:	2302      	movs	r3, #2
 8009274:	77fb      	strb	r3, [r7, #31]
 8009276:	e006      	b.n	8009286 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009278:	bf00      	nop
 800927a:	e004      	b.n	8009286 <put_fat+0x29c>
			if (res != FR_OK) break;
 800927c:	bf00      	nop
 800927e:	e002      	b.n	8009286 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009280:	bf00      	nop
 8009282:	e000      	b.n	8009286 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009284:	bf00      	nop
		}
	}

	return res;
 8009286:	7ffb      	ldrb	r3, [r7, #31]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3720      	adds	r7, #32
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d906      	bls.n	80092ae <remove_chain+0x1e>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d302      	bcc.n	80092b4 <remove_chain+0x24>
		res = FR_INT_ERR;
 80092ae:	2302      	movs	r3, #2
 80092b0:	73fb      	strb	r3, [r7, #15]
 80092b2:	e049      	b.n	8009348 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80092b8:	e03b      	b.n	8009332 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7ff fd98 	bl	8008df2 <get_fat>
 80092c2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d03b      	beq.n	8009342 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d102      	bne.n	80092d6 <remove_chain+0x46>
 80092d0:	2302      	movs	r3, #2
 80092d2:	73fb      	strb	r3, [r7, #15]
 80092d4:	e038      	b.n	8009348 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d102      	bne.n	80092e4 <remove_chain+0x54>
 80092de:	2301      	movs	r3, #1
 80092e0:	73fb      	strb	r3, [r7, #15]
 80092e2:	e031      	b.n	8009348 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80092e4:	2200      	movs	r2, #0
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff fe7e 	bl	8008fea <put_fat>
 80092ee:	4603      	mov	r3, r0
 80092f0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d126      	bne.n	8009346 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009304:	d013      	beq.n	800932e <remove_chain+0x9e>
				fs->free_clust++;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	3301      	adds	r3, #1
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009316:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800931e:	795b      	ldrb	r3, [r3, #5]
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	b2da      	uxtb	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800932c:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	429a      	cmp	r2, r3
 800933e:	d3bc      	bcc.n	80092ba <remove_chain+0x2a>
 8009340:	e002      	b.n	8009348 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8009342:	bf00      	nop
 8009344:	e000      	b.n	8009348 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8009346:	bf00      	nop
		}
	}

	return res;
 8009348:	7bfb      	ldrb	r3, [r7, #15]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d111      	bne.n	8009386 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d006      	beq.n	8009380 <create_chain+0x2e>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	429a      	cmp	r2, r3
 800937e:	d31d      	bcc.n	80093bc <create_chain+0x6a>
 8009380:	2301      	movs	r3, #1
 8009382:	613b      	str	r3, [r7, #16]
 8009384:	e01a      	b.n	80093bc <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff fd32 	bl	8008df2 <get_fat>
 800938e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d801      	bhi.n	800939a <create_chain+0x48>
 8009396:	2301      	movs	r3, #1
 8009398:	e07f      	b.n	800949a <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a0:	d101      	bne.n	80093a6 <create_chain+0x54>
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	e079      	b.n	800949a <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d201      	bcs.n	80093b8 <create_chain+0x66>
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	e070      	b.n	800949a <create_chain+0x148>
		scl = clst;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	3301      	adds	r3, #1
 80093c4:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d307      	bcc.n	80093e4 <create_chain+0x92>
			ncl = 2;
 80093d4:	2302      	movs	r3, #2
 80093d6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d901      	bls.n	80093e4 <create_chain+0x92>
 80093e0:	2300      	movs	r3, #0
 80093e2:	e05a      	b.n	800949a <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80093e4:	6979      	ldr	r1, [r7, #20]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7ff fd03 	bl	8008df2 <get_fat>
 80093ec:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00e      	beq.n	8009412 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d002      	beq.n	8009402 <create_chain+0xb0>
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <create_chain+0xb4>
			return cs;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	e049      	b.n	800949a <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	429a      	cmp	r2, r3
 800940c:	d1d8      	bne.n	80093c0 <create_chain+0x6e>
 800940e:	2300      	movs	r3, #0
 8009410:	e043      	b.n	800949a <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8009412:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009414:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8009418:	6979      	ldr	r1, [r7, #20]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff fde5 	bl	8008fea <put_fat>
 8009420:	4603      	mov	r3, r0
 8009422:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d109      	bne.n	800943e <create_chain+0xec>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d006      	beq.n	800943e <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff fdd8 	bl	8008fea <put_fat>
 800943a:	4603      	mov	r3, r0
 800943c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d121      	bne.n	8009488 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800944a:	461a      	mov	r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945c:	d01c      	beq.n	8009498 <create_chain+0x146>
			fs->free_clust--;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	3b01      	subs	r3, #1
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800946e:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009476:	795b      	ldrb	r3, [r3, #5]
 8009478:	f043 0301 	orr.w	r3, r3, #1
 800947c:	b2da      	uxtb	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009484:	715a      	strb	r2, [r3, #5]
 8009486:	e007      	b.n	8009498 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d102      	bne.n	8009494 <create_chain+0x142>
 800948e:	f04f 33ff 	mov.w	r3, #4294967295
 8009492:	e000      	b.n	8009496 <create_chain+0x144>
 8009494:	2301      	movs	r3, #1
 8009496:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8009498:	697b      	ldr	r3, [r7, #20]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b087      	sub	sp, #28
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b4:	3304      	adds	r3, #4
 80094b6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094c4:	895b      	ldrh	r3, [r3, #10]
 80094c6:	461a      	mov	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80094d4:	6812      	ldr	r2, [r2, #0]
 80094d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80094da:	7892      	ldrb	r2, [r2, #2]
 80094dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80094e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	1d1a      	adds	r2, r3, #4
 80094e6:	613a      	str	r2, [r7, #16]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <clmt_clust+0x54>
 80094f2:	2300      	movs	r3, #0
 80094f4:	e010      	b.n	8009518 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d307      	bcc.n	800950e <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	3304      	adds	r3, #4
 800950a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800950c:	e7e9      	b.n	80094e2 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800950e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	4413      	add	r3, r2
}
 8009518:	4618      	mov	r0, r3
 800951a:	371c      	adds	r7, #28
 800951c:	46bd      	mov	sp, r7
 800951e:	bc80      	pop	{r7}
 8009520:	4770      	bx	lr

08009522 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b086      	sub	sp, #24
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	b29a      	uxth	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009536:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d009      	beq.n	800955c <dir_sdi+0x3a>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	429a      	cmp	r2, r3
 800955a:	d301      	bcc.n	8009560 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800955c:	2302      	movs	r3, #2
 800955e:	e0aa      	b.n	80096b6 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d110      	bne.n	8009588 <dir_sdi+0x66>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b03      	cmp	r3, #3
 8009576:	d107      	bne.n	8009588 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009586:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d115      	bne.n	80095ba <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800959a:	891b      	ldrh	r3, [r3, #8]
 800959c:	461a      	mov	r2, r3
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d301      	bcc.n	80095a8 <dir_sdi+0x86>
			return FR_INT_ERR;
 80095a4:	2302      	movs	r3, #2
 80095a6:	e086      	b.n	80096b6 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b6:	613b      	str	r3, [r7, #16]
 80095b8:	e043      	b.n	8009642 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095c6:	895b      	ldrh	r3, [r3, #10]
 80095c8:	095b      	lsrs	r3, r3, #5
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	461a      	mov	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095da:	789b      	ldrb	r3, [r3, #2]
 80095dc:	fb02 f303 	mul.w	r3, r2, r3
 80095e0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80095e2:	e021      	b.n	8009628 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6979      	ldr	r1, [r7, #20]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7ff fbff 	bl	8008df2 <get_fat>
 80095f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fc:	d101      	bne.n	8009602 <dir_sdi+0xe0>
 80095fe:	2301      	movs	r3, #1
 8009600:	e059      	b.n	80096b6 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d909      	bls.n	800961c <dir_sdi+0xfa>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	429a      	cmp	r2, r3
 800961a:	d301      	bcc.n	8009620 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800961c:	2302      	movs	r3, #2
 800961e:	e04a      	b.n	80096b6 <dir_sdi+0x194>
			idx -= ic;
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	429a      	cmp	r2, r3
 800962e:	d2d9      	bcs.n	80095e4 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6979      	ldr	r1, [r7, #20]
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff fbb5 	bl	8008daa <clust2sect>
 8009640:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009648:	461a      	mov	r2, r3
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <dir_sdi+0x136>
 8009654:	2302      	movs	r3, #2
 8009656:	e02e      	b.n	80096b6 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009664:	895b      	ldrh	r3, [r3, #10]
 8009666:	095b      	lsrs	r3, r3, #5
 8009668:	b29b      	uxth	r3, r3
 800966a:	461a      	mov	r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	4413      	add	r3, r2
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800967c:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4618      	mov	r0, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009694:	895b      	ldrh	r3, [r3, #10]
 8009696:	095b      	lsrs	r3, r3, #5
 8009698:	b29b      	uxth	r3, r3
 800969a:	461a      	mov	r2, r3
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	fbb3 f1f2 	udiv	r1, r3, r2
 80096a2:	fb01 f202 	mul.w	r2, r1, r2
 80096a6:	1a9b      	subs	r3, r3, r2
 80096a8:	015b      	lsls	r3, r3, #5
 80096aa:	4403      	add	r3, r0
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80096b2:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80096be:	b590      	push	{r4, r7, lr}
 80096c0:	b087      	sub	sp, #28
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096ce:	88db      	ldrh	r3, [r3, #6]
 80096d0:	3301      	adds	r3, #1
 80096d2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <dir_next+0x2a>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <dir_next+0x2e>
		return FR_NO_FILE;
 80096e8:	2304      	movs	r3, #4
 80096ea:	e12e      	b.n	800994a <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096f8:	895b      	ldrh	r3, [r3, #10]
 80096fa:	095b      	lsrs	r3, r3, #5
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	461a      	mov	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	fbb3 f1f2 	udiv	r1, r3, r2
 8009706:	fb01 f202 	mul.w	r2, r1, r2
 800970a:	1a9b      	subs	r3, r3, r2
 800970c:	2b00      	cmp	r3, #0
 800970e:	f040 80fa 	bne.w	8009906 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	3301      	adds	r3, #1
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009722:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10d      	bne.n	800974c <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800973c:	891b      	ldrh	r3, [r3, #8]
 800973e:	461a      	mov	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	4293      	cmp	r3, r2
 8009744:	f0c0 80df 	bcc.w	8009906 <dir_next+0x248>
				return FR_NO_FILE;
 8009748:	2304      	movs	r3, #4
 800974a:	e0fe      	b.n	800994a <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009758:	895b      	ldrh	r3, [r3, #10]
 800975a:	095b      	lsrs	r3, r3, #5
 800975c:	b29b      	uxth	r3, r3
 800975e:	461a      	mov	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	fbb3 f3f2 	udiv	r3, r3, r2
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800976c:	6812      	ldr	r2, [r2, #0]
 800976e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009772:	7892      	ldrb	r2, [r2, #2]
 8009774:	3a01      	subs	r2, #1
 8009776:	4013      	ands	r3, r2
 8009778:	2b00      	cmp	r3, #0
 800977a:	f040 80c4 	bne.w	8009906 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	4619      	mov	r1, r3
 8009790:	4610      	mov	r0, r2
 8009792:	f7ff fb2e 	bl	8008df2 <get_fat>
 8009796:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d801      	bhi.n	80097a2 <dir_next+0xe4>
 800979e:	2302      	movs	r3, #2
 80097a0:	e0d3      	b.n	800994a <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a8:	d101      	bne.n	80097ae <dir_next+0xf0>
 80097aa:	2301      	movs	r3, #1
 80097ac:	e0cd      	b.n	800994a <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	429a      	cmp	r2, r3
 80097c0:	f0c0 808e 	bcc.w	80098e0 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <dir_next+0x110>
 80097ca:	2304      	movs	r3, #4
 80097cc:	e0bd      	b.n	800994a <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f7ff fdb6 	bl	8009352 <create_chain>
 80097e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <dir_next+0x134>
 80097ee:	2307      	movs	r3, #7
 80097f0:	e0ab      	b.n	800994a <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d101      	bne.n	80097fc <dir_next+0x13e>
 80097f8:	2302      	movs	r3, #2
 80097fa:	e0a6      	b.n	800994a <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009802:	d101      	bne.n	8009808 <dir_next+0x14a>
 8009804:	2301      	movs	r3, #1
 8009806:	e0a0      	b.n	800994a <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff f987 	bl	8008b24 <sync_window>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <dir_next+0x162>
 800981c:	2301      	movs	r3, #1
 800981e:	e094      	b.n	800994a <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009836:	895b      	ldrh	r3, [r3, #10]
 8009838:	461a      	mov	r2, r3
 800983a:	2100      	movs	r1, #0
 800983c:	f7fe ff5a 	bl	80086f4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800984e:	681c      	ldr	r4, [r3, #0]
 8009850:	6979      	ldr	r1, [r7, #20]
 8009852:	4610      	mov	r0, r2
 8009854:	f7ff faa9 	bl	8008daa <clust2sect>
 8009858:	4603      	mov	r3, r0
 800985a:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800985e:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009860:	2300      	movs	r3, #0
 8009862:	613b      	str	r3, [r7, #16]
 8009864:	e021      	b.n	80098aa <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009872:	2201      	movs	r2, #1
 8009874:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff f950 	bl	8008b24 <sync_window>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <dir_next+0x1d0>
 800988a:	2301      	movs	r3, #1
 800988c:	e05d      	b.n	800994a <dir_next+0x28c>
						dp->fs->winsect++;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800989a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800989c:	3201      	adds	r2, #1
 800989e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098a2:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	3301      	adds	r3, #1
 80098a8:	613b      	str	r3, [r7, #16]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098b6:	789b      	ldrb	r3, [r3, #2]
 80098b8:	461a      	mov	r2, r3
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	4293      	cmp	r3, r2
 80098be:	d3d2      	bcc.n	8009866 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	1acb      	subs	r3, r1, r3
 80098da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80098de:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098e6:	461a      	mov	r2, r3
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6979      	ldr	r1, [r7, #20]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff fa57 	bl	8008daa <clust2sect>
 80098fc:	4602      	mov	r2, r0
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009904:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	b29a      	uxth	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009910:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4618      	mov	r0, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009928:	895b      	ldrh	r3, [r3, #10]
 800992a:	095b      	lsrs	r3, r3, #5
 800992c:	b29b      	uxth	r3, r3
 800992e:	461a      	mov	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	fbb3 f1f2 	udiv	r1, r3, r2
 8009936:	fb01 f202 	mul.w	r2, r1, r2
 800993a:	1a9b      	subs	r3, r3, r2
 800993c:	015b      	lsls	r3, r3, #5
 800993e:	4403      	add	r3, r0
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009946:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	bd90      	pop	{r4, r7, pc}

08009952 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800995c:	2100      	movs	r1, #0
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff fddf 	bl	8009522 <dir_sdi>
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d135      	bne.n	80099da <dir_alloc+0x88>
		n = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f7ff f91f 	bl	8008bc8 <move_window>
 800998a:	4603      	mov	r3, r0
 800998c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d121      	bne.n	80099d8 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	2be5      	cmp	r3, #229	@ 0xe5
 80099a0:	d006      	beq.n	80099b0 <dir_alloc+0x5e>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d107      	bne.n	80099c0 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	3301      	adds	r3, #1
 80099b4:	60bb      	str	r3, [r7, #8]
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d102      	bne.n	80099c4 <dir_alloc+0x72>
 80099be:	e00c      	b.n	80099da <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80099c0:	2300      	movs	r3, #0
 80099c2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80099c4:	2101      	movs	r1, #1
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff fe79 	bl	80096be <dir_next>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0cd      	beq.n	8009972 <dir_alloc+0x20>
 80099d6:	e000      	b.n	80099da <dir_alloc+0x88>
			if (res != FR_OK) break;
 80099d8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	2b04      	cmp	r3, #4
 80099de:	d101      	bne.n	80099e4 <dir_alloc+0x92>
 80099e0:	2307      	movs	r3, #7
 80099e2:	73fb      	strb	r3, [r7, #15]
	return res;
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b085      	sub	sp, #20
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	331b      	adds	r3, #27
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b21b      	sxth	r3, r3
 8009a00:	021b      	lsls	r3, r3, #8
 8009a02:	b21a      	sxth	r2, r3
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	331a      	adds	r3, #26
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	b21b      	sxth	r3, r3
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	b21b      	sxth	r3, r3
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d110      	bne.n	8009a42 <ld_clust+0x54>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	3315      	adds	r3, #21
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	b21b      	sxth	r3, r3
 8009a28:	021b      	lsls	r3, r3, #8
 8009a2a:	b21a      	sxth	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	3314      	adds	r3, #20
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	b21b      	sxth	r3, r3
 8009a34:	4313      	orrs	r3, r2
 8009a36:	b21b      	sxth	r3, r3
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	041b      	lsls	r3, r3, #16
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]

	return cl;
 8009a42:	68fb      	ldr	r3, [r7, #12]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bc80      	pop	{r7}
 8009a4c:	4770      	bx	lr

08009a4e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	331a      	adds	r3, #26
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	0a1b      	lsrs	r3, r3, #8
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	331b      	adds	r3, #27
 8009a6e:	b2d2      	uxtb	r2, r2
 8009a70:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	0c1a      	lsrs	r2, r3, #16
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	3314      	adds	r3, #20
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	0c1b      	lsrs	r3, r3, #16
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	0a1b      	lsrs	r3, r3, #8
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3315      	adds	r3, #21
 8009a8c:	b2d2      	uxtb	r2, r2
 8009a8e:	701a      	strb	r2, [r3, #0]
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bc80      	pop	{r7}
 8009a98:	4770      	bx	lr

08009a9a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b086      	sub	sp, #24
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff fd3c 	bl	8009522 <dir_sdi>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <dir_find+0x1e>
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	e03f      	b.n	8009b38 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4610      	mov	r0, r2
 8009acc:	f7ff f87c 	bl	8008bc8 <move_window>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d12a      	bne.n	8009b30 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <dir_find+0x5c>
 8009af0:	2304      	movs	r3, #4
 8009af2:	75fb      	strb	r3, [r7, #23]
 8009af4:	e01f      	b.n	8009b36 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	330b      	adds	r3, #11
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	f003 0308 	and.w	r3, r3, #8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10b      	bne.n	8009b1c <dir_find+0x82>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	220b      	movs	r2, #11
 8009b0e:	4619      	mov	r1, r3
 8009b10:	6938      	ldr	r0, [r7, #16]
 8009b12:	f7fe fe09 	bl	8008728 <mem_cmp>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00b      	beq.n	8009b34 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff fdcd 	bl	80096be <dir_next>
 8009b24:	4603      	mov	r3, r0
 8009b26:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0c4      	beq.n	8009ab8 <dir_find+0x1e>
 8009b2e:	e002      	b.n	8009b36 <dir_find+0x9c>
		if (res != FR_OK) break;
 8009b30:	bf00      	nop
 8009b32:	e000      	b.n	8009b36 <dir_find+0x9c>
			break;
 8009b34:	bf00      	nop

	return res;
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009b48:	2101      	movs	r1, #1
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff ff01 	bl	8009952 <dir_alloc>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d12d      	bne.n	8009bb6 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	f7ff f82b 	bl	8008bc8 <move_window>
 8009b72:	4603      	mov	r3, r0
 8009b74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d11c      	bne.n	8009bb6 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b82:	695b      	ldr	r3, [r3, #20]
 8009b84:	2220      	movs	r2, #32
 8009b86:	2100      	movs	r1, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fe fdb3 	bl	80086f4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b94:	6958      	ldr	r0, [r3, #20]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	220b      	movs	r2, #11
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	f7fe fd89 	bl	80086b8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e002      	b.n	8009bd8 <create_name+0x18>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	2b2f      	cmp	r3, #47	@ 0x2f
 8009bde:	d0f8      	beq.n	8009bd2 <create_name+0x12>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b5c      	cmp	r3, #92	@ 0x5c
 8009be6:	d0f4      	beq.n	8009bd2 <create_name+0x12>
	sfn = dp->fn;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009bf2:	220b      	movs	r2, #11
 8009bf4:	2120      	movs	r1, #32
 8009bf6:	68b8      	ldr	r0, [r7, #8]
 8009bf8:	f7fe fd7c 	bl	80086f4 <mem_set>
	si = i = b = 0; ni = 8;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	77fb      	strb	r3, [r7, #31]
 8009c00:	2300      	movs	r3, #0
 8009c02:	613b      	str	r3, [r7, #16]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	2308      	movs	r3, #8
 8009c0a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	617a      	str	r2, [r7, #20]
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	4413      	add	r3, r2
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8009c1a:	7fbb      	ldrb	r3, [r7, #30]
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	d953      	bls.n	8009cc8 <create_name+0x108>
 8009c20:	7fbb      	ldrb	r3, [r7, #30]
 8009c22:	2b2f      	cmp	r3, #47	@ 0x2f
 8009c24:	d050      	beq.n	8009cc8 <create_name+0x108>
 8009c26:	7fbb      	ldrb	r3, [r7, #30]
 8009c28:	2b5c      	cmp	r3, #92	@ 0x5c
 8009c2a:	d04d      	beq.n	8009cc8 <create_name+0x108>
		if (c == '.' || i >= ni) {
 8009c2c:	7fbb      	ldrb	r3, [r7, #30]
 8009c2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c30:	d003      	beq.n	8009c3a <create_name+0x7a>
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d30f      	bcc.n	8009c5a <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d102      	bne.n	8009c46 <create_name+0x86>
 8009c40:	7fbb      	ldrb	r3, [r7, #30]
 8009c42:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c44:	d001      	beq.n	8009c4a <create_name+0x8a>
 8009c46:	2306      	movs	r3, #6
 8009c48:	e073      	b.n	8009d32 <create_name+0x172>
			i = 8; ni = 11;
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	613b      	str	r3, [r7, #16]
 8009c4e:	230b      	movs	r3, #11
 8009c50:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8009c52:	7ffb      	ldrb	r3, [r7, #31]
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	77fb      	strb	r3, [r7, #31]
 8009c58:	e035      	b.n	8009cc6 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009c5a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da08      	bge.n	8009c74 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 8009c62:	7ffb      	ldrb	r3, [r7, #31]
 8009c64:	f043 0303 	orr.w	r3, r3, #3
 8009c68:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009c6a:	7fbb      	ldrb	r3, [r7, #30]
 8009c6c:	3b80      	subs	r3, #128	@ 0x80
 8009c6e:	4a33      	ldr	r2, [pc, #204]	@ (8009d3c <create_name+0x17c>)
 8009c70:	5cd3      	ldrb	r3, [r2, r3]
 8009c72:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8009c74:	7fbb      	ldrb	r3, [r7, #30]
 8009c76:	4619      	mov	r1, r3
 8009c78:	4831      	ldr	r0, [pc, #196]	@ (8009d40 <create_name+0x180>)
 8009c7a:	f7fe fd7b 	bl	8008774 <chk_chr>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <create_name+0xc8>
				return FR_INVALID_NAME;
 8009c84:	2306      	movs	r3, #6
 8009c86:	e054      	b.n	8009d32 <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8009c88:	7fbb      	ldrb	r3, [r7, #30]
 8009c8a:	2b40      	cmp	r3, #64	@ 0x40
 8009c8c:	d907      	bls.n	8009c9e <create_name+0xde>
 8009c8e:	7fbb      	ldrb	r3, [r7, #30]
 8009c90:	2b5a      	cmp	r3, #90	@ 0x5a
 8009c92:	d804      	bhi.n	8009c9e <create_name+0xde>
				b |= 2;
 8009c94:	7ffb      	ldrb	r3, [r7, #31]
 8009c96:	f043 0302 	orr.w	r3, r3, #2
 8009c9a:	77fb      	strb	r3, [r7, #31]
 8009c9c:	e00c      	b.n	8009cb8 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8009c9e:	7fbb      	ldrb	r3, [r7, #30]
 8009ca0:	2b60      	cmp	r3, #96	@ 0x60
 8009ca2:	d909      	bls.n	8009cb8 <create_name+0xf8>
 8009ca4:	7fbb      	ldrb	r3, [r7, #30]
 8009ca6:	2b7a      	cmp	r3, #122	@ 0x7a
 8009ca8:	d806      	bhi.n	8009cb8 <create_name+0xf8>
					b |= 1; c -= 0x20;
 8009caa:	7ffb      	ldrb	r3, [r7, #31]
 8009cac:	f043 0301 	orr.w	r3, r3, #1
 8009cb0:	77fb      	strb	r3, [r7, #31]
 8009cb2:	7fbb      	ldrb	r3, [r7, #30]
 8009cb4:	3b20      	subs	r3, #32
 8009cb6:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	613a      	str	r2, [r7, #16]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	7fba      	ldrb	r2, [r7, #30]
 8009cc4:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009cc6:	e7a1      	b.n	8009c0c <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	441a      	add	r2, r3
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009cd2:	7fbb      	ldrb	r3, [r7, #30]
 8009cd4:	2b20      	cmp	r3, #32
 8009cd6:	d801      	bhi.n	8009cdc <create_name+0x11c>
 8009cd8:	2304      	movs	r3, #4
 8009cda:	e000      	b.n	8009cde <create_name+0x11e>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <create_name+0x12a>
 8009ce6:	2306      	movs	r3, #6
 8009ce8:	e023      	b.n	8009d32 <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	2be5      	cmp	r3, #229	@ 0xe5
 8009cf0:	d102      	bne.n	8009cf8 <create_name+0x138>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2205      	movs	r2, #5
 8009cf6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	2b08      	cmp	r3, #8
 8009cfc:	d102      	bne.n	8009d04 <create_name+0x144>
 8009cfe:	7ffb      	ldrb	r3, [r7, #31]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8009d04:	7ffb      	ldrb	r3, [r7, #31]
 8009d06:	f003 0303 	and.w	r3, r3, #3
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d103      	bne.n	8009d16 <create_name+0x156>
 8009d0e:	7fbb      	ldrb	r3, [r7, #30]
 8009d10:	f043 0310 	orr.w	r3, r3, #16
 8009d14:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8009d16:	7ffb      	ldrb	r3, [r7, #31]
 8009d18:	f003 030c 	and.w	r3, r3, #12
 8009d1c:	2b04      	cmp	r3, #4
 8009d1e:	d103      	bne.n	8009d28 <create_name+0x168>
 8009d20:	7fbb      	ldrb	r3, [r7, #30]
 8009d22:	f043 0308 	orr.w	r3, r3, #8
 8009d26:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	330b      	adds	r3, #11
 8009d2c:	7fba      	ldrb	r2, [r7, #30]
 8009d2e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009d30:	2300      	movs	r3, #0
#endif
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3720      	adds	r7, #32
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	0801a5e8 	.word	0x0801a5e8
 8009d40:	08019d50 	.word	0x08019d50

08009d44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d54:	d003      	beq.n	8009d5e <follow_path+0x1a>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d5c:	d102      	bne.n	8009d64 <follow_path+0x20>
		path++;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	3301      	adds	r3, #1
 8009d62:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b1f      	cmp	r3, #31
 8009d76:	d80c      	bhi.n	8009d92 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8009d78:	2100      	movs	r1, #0
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff fbd1 	bl	8009522 <dir_sdi>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	6153      	str	r3, [r2, #20]
 8009d90:	e049      	b.n	8009e26 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d92:	463b      	mov	r3, r7
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff ff12 	bl	8009bc0 <create_name>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d13a      	bne.n	8009e1c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7ff fe77 	bl	8009a9a <dir_find>
 8009dac:	4603      	mov	r3, r0
 8009dae:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	7adb      	ldrb	r3, [r3, #11]
 8009dba:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	d12b      	bne.n	8009e20 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d126      	bne.n	8009e20 <follow_path+0xdc>
 8009dd2:	2305      	movs	r3, #5
 8009dd4:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8009dd6:	e023      	b.n	8009e20 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	f003 0304 	and.w	r3, r3, #4
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d120      	bne.n	8009e24 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	330b      	adds	r3, #11
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	f003 0310 	and.w	r3, r3, #16
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d102      	bne.n	8009e00 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8009dfa:	2305      	movs	r3, #5
 8009dfc:	73fb      	strb	r3, [r7, #15]
 8009dfe:	e012      	b.n	8009e26 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff fdef 	bl	80099ee <ld_clust>
 8009e10:	4602      	mov	r2, r0
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e18:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e1a:	e7ba      	b.n	8009d92 <follow_path+0x4e>
			if (res != FR_OK) break;
 8009e1c:	bf00      	nop
 8009e1e:	e002      	b.n	8009e26 <follow_path+0xe2>
				break;
 8009e20:	bf00      	nop
 8009e22:	e000      	b.n	8009e26 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e24:	bf00      	nop
		}
	}

	return res;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009e38:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d031      	beq.n	8009eaa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	e002      	b.n	8009e54 <get_ldnumber+0x24>
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	3301      	adds	r3, #1
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d903      	bls.n	8009e64 <get_ldnumber+0x34>
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b3a      	cmp	r3, #58	@ 0x3a
 8009e62:	d1f4      	bne.n	8009e4e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b3a      	cmp	r3, #58	@ 0x3a
 8009e6a:	d11c      	bne.n	8009ea6 <get_ldnumber+0x76>
			tp = *path;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	60fa      	str	r2, [r7, #12]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	3b30      	subs	r3, #48	@ 0x30
 8009e7c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2b09      	cmp	r3, #9
 8009e82:	d80e      	bhi.n	8009ea2 <get_ldnumber+0x72>
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d10a      	bne.n	8009ea2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d107      	bne.n	8009ea2 <get_ldnumber+0x72>
					vol = (int)i;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	e002      	b.n	8009eac <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009eaa:	693b      	ldr	r3, [r7, #16]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	371c      	adds	r7, #28
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bc80      	pop	{r7}
 8009eb4:	4770      	bx	lr
	...

08009eb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ec8:	2200      	movs	r2, #0
 8009eca:	711a      	strb	r2, [r3, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7fe fe73 	bl	8008bc8 <move_window>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <check_fs+0x34>
		return 3;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e04b      	b.n	8009f84 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	b21b      	sxth	r3, r3
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	b21a      	sxth	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8009f02:	b21b      	sxth	r3, r3
 8009f04:	4313      	orrs	r3, r2
 8009f06:	b21b      	sxth	r3, r3
 8009f08:	4a20      	ldr	r2, [pc, #128]	@ (8009f8c <check_fs+0xd4>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d001      	beq.n	8009f12 <check_fs+0x5a>
		return 2;
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e038      	b.n	8009f84 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3336      	adds	r3, #54	@ 0x36
 8009f16:	3303      	adds	r3, #3
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	061a      	lsls	r2, r3, #24
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	3336      	adds	r3, #54	@ 0x36
 8009f20:	3302      	adds	r3, #2
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	041b      	lsls	r3, r3, #16
 8009f26:	431a      	orrs	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3336      	adds	r3, #54	@ 0x36
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	021b      	lsls	r3, r3, #8
 8009f32:	4313      	orrs	r3, r2
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009f40:	4a13      	ldr	r2, [pc, #76]	@ (8009f90 <check_fs+0xd8>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d101      	bne.n	8009f4a <check_fs+0x92>
		return 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	e01c      	b.n	8009f84 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3352      	adds	r3, #82	@ 0x52
 8009f4e:	3303      	adds	r3, #3
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	061a      	lsls	r2, r3, #24
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3352      	adds	r3, #82	@ 0x52
 8009f58:	3302      	adds	r3, #2
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	041b      	lsls	r3, r3, #16
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	3352      	adds	r3, #82	@ 0x52
 8009f64:	3301      	adds	r3, #1
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	021b      	lsls	r3, r3, #8
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8009f72:	4313      	orrs	r3, r2
 8009f74:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009f78:	4a05      	ldr	r2, [pc, #20]	@ (8009f90 <check_fs+0xd8>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d101      	bne.n	8009f82 <check_fs+0xca>
		return 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e000      	b.n	8009f84 <check_fs+0xcc>

	return 1;
 8009f82:	2301      	movs	r3, #1
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	ffffaa55 	.word	0xffffaa55
 8009f90:	00544146 	.word	0x00544146

08009f94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b096      	sub	sp, #88	@ 0x58
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009fa8:	68b8      	ldr	r0, [r7, #8]
 8009faa:	f7ff ff41 	bl	8009e30 <get_ldnumber>
 8009fae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	da01      	bge.n	8009fba <find_volume+0x26>
 8009fb6:	230b      	movs	r3, #11
 8009fb8:	e318      	b.n	800a5ec <find_volume+0x658>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009fba:	4a99      	ldr	r2, [pc, #612]	@ (800a220 <find_volume+0x28c>)
 8009fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <find_volume+0x3a>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	e30e      	b.n	800a5ec <find_volume+0x658>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fd2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d01c      	beq.n	800a01a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fe6:	785b      	ldrb	r3, [r3, #1]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fe fac7 	bl	800857c <disk_status>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10c      	bne.n	800a01a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800a000:	79fb      	ldrb	r3, [r7, #7]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d007      	beq.n	800a016 <find_volume+0x82>
 800a006:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a00a:	f003 0304 	and.w	r3, r3, #4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a012:	230a      	movs	r3, #10
 800a014:	e2ea      	b.n	800a5ec <find_volume+0x658>
			return FR_OK;				/* The file system object is valid */
 800a016:	2300      	movs	r3, #0
 800a018:	e2e8      	b.n	800a5ec <find_volume+0x658>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a026:	b2da      	uxtb	r2, r3
 800a028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a02e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a036:	785b      	ldrb	r3, [r3, #1]
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe fab9 	bl	80085b0 <disk_initialize>
 800a03e:	4603      	mov	r3, r0
 800a040:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800a044:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d001      	beq.n	800a054 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a050:	2303      	movs	r3, #3
 800a052:	e2cb      	b.n	800a5ec <find_volume+0x658>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800a054:	79fb      	ldrb	r3, [r7, #7]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d007      	beq.n	800a06a <find_volume+0xd6>
 800a05a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a05e:	f003 0304 	and.w	r3, r3, #4
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800a066:	230a      	movs	r3, #10
 800a068:	e2c0      	b.n	800a5ec <find_volume+0x658>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800a06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a070:	7858      	ldrb	r0, [r3, #1]
 800a072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a078:	330a      	adds	r3, #10
 800a07a:	461a      	mov	r2, r3
 800a07c:	2102      	movs	r1, #2
 800a07e:	f7fe fafd 	bl	800867c <disk_ioctl>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10d      	bne.n	800a0a4 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800a088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a08e:	895b      	ldrh	r3, [r3, #10]
 800a090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a094:	d306      	bcc.n	800a0a4 <find_volume+0x110>
 800a096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a09c:	895b      	ldrh	r3, [r3, #10]
 800a09e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0a2:	d901      	bls.n	800a0a8 <find_volume+0x114>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e2a1      	b.n	800a5ec <find_volume+0x658>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800a0ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a0ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a0b0:	f7ff ff02 	bl	8009eb8 <check_fs>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800a0ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d153      	bne.n	800a16a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0c6:	e028      	b.n	800a11a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800a0c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0cc:	011b      	lsls	r3, r3, #4
 800a0ce:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a0d2:	4413      	add	r3, r2
 800a0d4:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d8:	3304      	adds	r3, #4
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d012      	beq.n	800a106 <find_volume+0x172>
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	330b      	adds	r3, #11
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	061a      	lsls	r2, r3, #24
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ea:	330a      	adds	r3, #10
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	041b      	lsls	r3, r3, #16
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	3309      	adds	r3, #9
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	021b      	lsls	r3, r3, #8
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0fe:	3208      	adds	r2, #8
 800a100:	7812      	ldrb	r2, [r2, #0]
 800a102:	431a      	orrs	r2, r3
 800a104:	e000      	b.n	800a108 <find_volume+0x174>
 800a106:	2200      	movs	r2, #0
 800a108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	3358      	adds	r3, #88	@ 0x58
 800a10e:	443b      	add	r3, r7
 800a110:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a116:	3301      	adds	r3, #1
 800a118:	643b      	str	r3, [r7, #64]	@ 0x40
 800a11a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d9d3      	bls.n	800a0c8 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800a120:	2300      	movs	r3, #0
 800a122:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <find_volume+0x19c>
 800a12a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a12c:	3b01      	subs	r3, #1
 800a12e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800a130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	3358      	adds	r3, #88	@ 0x58
 800a136:	443b      	add	r3, r7
 800a138:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a13c:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a13e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a140:	2b00      	cmp	r3, #0
 800a142:	d005      	beq.n	800a150 <find_volume+0x1bc>
 800a144:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a146:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a148:	f7ff feb6 	bl	8009eb8 <check_fs>
 800a14c:	4603      	mov	r3, r0
 800a14e:	e000      	b.n	800a152 <find_volume+0x1be>
 800a150:	2302      	movs	r3, #2
 800a152:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a156:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d005      	beq.n	800a16a <find_volume+0x1d6>
 800a15e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a160:	3301      	adds	r3, #1
 800a162:	643b      	str	r3, [r7, #64]	@ 0x40
 800a164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a166:	2b03      	cmp	r3, #3
 800a168:	d9e2      	bls.n	800a130 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a16a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d101      	bne.n	800a176 <find_volume+0x1e2>
 800a172:	2301      	movs	r3, #1
 800a174:	e23a      	b.n	800a5ec <find_volume+0x658>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800a176:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <find_volume+0x1ee>
 800a17e:	230d      	movs	r3, #13
 800a180:	e234      	b.n	800a5ec <find_volume+0x658>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a184:	7b1b      	ldrb	r3, [r3, #12]
 800a186:	b21b      	sxth	r3, r3
 800a188:	021b      	lsls	r3, r3, #8
 800a18a:	b21a      	sxth	r2, r3
 800a18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18e:	7adb      	ldrb	r3, [r3, #11]
 800a190:	b21b      	sxth	r3, r3
 800a192:	4313      	orrs	r3, r2
 800a194:	b21a      	sxth	r2, r3
 800a196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a19c:	895b      	ldrh	r3, [r3, #10]
 800a19e:	b21b      	sxth	r3, r3
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d001      	beq.n	800a1a8 <find_volume+0x214>
		return FR_NO_FILESYSTEM;
 800a1a4:	230d      	movs	r3, #13
 800a1a6:	e221      	b.n	800a5ec <find_volume+0x658>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1aa:	7ddb      	ldrb	r3, [r3, #23]
 800a1ac:	b21b      	sxth	r3, r3
 800a1ae:	021b      	lsls	r3, r3, #8
 800a1b0:	b21a      	sxth	r2, r3
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b4:	7d9b      	ldrb	r3, [r3, #22]
 800a1b6:	b21b      	sxth	r3, r3
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	b21b      	sxth	r3, r3
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a1c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d112      	bne.n	800a1ec <find_volume+0x258>
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800a1cc:	061a      	lsls	r2, r3, #24
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800a1d4:	041b      	lsls	r3, r3, #16
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a1de:	021b      	lsls	r3, r3, #8
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1e4:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1f6:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fa:	7c1a      	ldrb	r2, [r3, #16]
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a202:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a20a:	78db      	ldrb	r3, [r3, #3]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d009      	beq.n	800a224 <find_volume+0x290>
 800a210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a216:	78db      	ldrb	r3, [r3, #3]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d003      	beq.n	800a224 <find_volume+0x290>
		return FR_NO_FILESYSTEM;
 800a21c:	230d      	movs	r3, #13
 800a21e:	e1e5      	b.n	800a5ec <find_volume+0x658>
 800a220:	20000d1c 	.word	0x20000d1c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a22a:	78db      	ldrb	r3, [r3, #3]
 800a22c:	461a      	mov	r2, r3
 800a22e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a230:	fb02 f303 	mul.w	r3, r2, r3
 800a234:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800a236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a238:	7b5a      	ldrb	r2, [r3, #13]
 800a23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a240:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800a242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a248:	789b      	ldrb	r3, [r3, #2]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00c      	beq.n	800a268 <find_volume+0x2d4>
 800a24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a254:	789b      	ldrb	r3, [r3, #2]
 800a256:	461a      	mov	r2, r3
 800a258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a25e:	789b      	ldrb	r3, [r3, #2]
 800a260:	3b01      	subs	r3, #1
 800a262:	4013      	ands	r3, r2
 800a264:	2b00      	cmp	r3, #0
 800a266:	d001      	beq.n	800a26c <find_volume+0x2d8>
		return FR_NO_FILESYSTEM;
 800a268:	230d      	movs	r3, #13
 800a26a:	e1bf      	b.n	800a5ec <find_volume+0x658>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26e:	7c9b      	ldrb	r3, [r3, #18]
 800a270:	b21b      	sxth	r3, r3
 800a272:	021b      	lsls	r3, r3, #8
 800a274:	b21a      	sxth	r2, r3
 800a276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a278:	7c5b      	ldrb	r3, [r3, #17]
 800a27a:	b21b      	sxth	r3, r3
 800a27c:	4313      	orrs	r3, r2
 800a27e:	b21b      	sxth	r3, r3
 800a280:	b29a      	uxth	r2, r3
 800a282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a288:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a290:	891b      	ldrh	r3, [r3, #8]
 800a292:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a294:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a298:	8952      	ldrh	r2, [r2, #10]
 800a29a:	0952      	lsrs	r2, r2, #5
 800a29c:	b292      	uxth	r2, r2
 800a29e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2a2:	fb01 f202 	mul.w	r2, r1, r2
 800a2a6:	1a9b      	subs	r3, r3, r2
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <find_volume+0x31e>
		return FR_NO_FILESYSTEM;
 800a2ae:	230d      	movs	r3, #13
 800a2b0:	e19c      	b.n	800a5ec <find_volume+0x658>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	7d1b      	ldrb	r3, [r3, #20]
 800a2b6:	b21b      	sxth	r3, r3
 800a2b8:	021b      	lsls	r3, r3, #8
 800a2ba:	b21a      	sxth	r2, r3
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2be:	7cdb      	ldrb	r3, [r3, #19]
 800a2c0:	b21b      	sxth	r3, r3
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	b21b      	sxth	r3, r3
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a2ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d112      	bne.n	800a2f6 <find_volume+0x362>
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a2d6:	061a      	lsls	r2, r3, #24
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2da:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a2de:	041b      	lsls	r3, r3, #16
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a2e8:	021b      	lsls	r3, r3, #8
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f8:	7bdb      	ldrb	r3, [r3, #15]
 800a2fa:	b21b      	sxth	r3, r3
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	b21a      	sxth	r2, r3
 800a300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a302:	7b9b      	ldrb	r3, [r3, #14]
 800a304:	b21b      	sxth	r3, r3
 800a306:	4313      	orrs	r3, r2
 800a308:	b21b      	sxth	r3, r3
 800a30a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800a30c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <find_volume+0x382>
 800a312:	230d      	movs	r3, #13
 800a314:	e16a      	b.n	800a5ec <find_volume+0x658>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800a316:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a31a:	4413      	add	r3, r2
 800a31c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a31e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a322:	8911      	ldrh	r1, [r2, #8]
 800a324:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a326:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a32a:	8952      	ldrh	r2, [r2, #10]
 800a32c:	0952      	lsrs	r2, r2, #5
 800a32e:	b292      	uxth	r2, r2
 800a330:	fbb1 f2f2 	udiv	r2, r1, r2
 800a334:	b292      	uxth	r2, r2
 800a336:	4413      	add	r3, r2
 800a338:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a33a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33e:	429a      	cmp	r2, r3
 800a340:	d201      	bcs.n	800a346 <find_volume+0x3b2>
 800a342:	230d      	movs	r3, #13
 800a344:	e152      	b.n	800a5ec <find_volume+0x658>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800a346:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a34e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a352:	7892      	ldrb	r2, [r2, #2]
 800a354:	fbb3 f3f2 	udiv	r3, r3, r2
 800a358:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <find_volume+0x3d0>
 800a360:	230d      	movs	r3, #13
 800a362:	e143      	b.n	800a5ec <find_volume+0x658>
	fmt = FS_FAT12;
 800a364:	2301      	movs	r3, #1
 800a366:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800a36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a370:	4293      	cmp	r3, r2
 800a372:	d902      	bls.n	800a37a <find_volume+0x3e6>
 800a374:	2302      	movs	r3, #2
 800a376:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800a37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a380:	4293      	cmp	r3, r2
 800a382:	d902      	bls.n	800a38a <find_volume+0x3f6>
 800a384:	2303      	movs	r3, #3
 800a386:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38c:	3302      	adds	r3, #2
 800a38e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a390:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a394:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800a396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a39c:	461a      	mov	r2, r3
 800a39e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3a0:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a3a2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a3a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3a6:	4413      	add	r3, r2
 800a3a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3ae:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800a3b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b4:	4413      	add	r3, r2
 800a3b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3bc:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 800a3be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d124      	bne.n	800a410 <find_volume+0x47c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3cc:	891b      	ldrh	r3, [r3, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <find_volume+0x442>
 800a3d2:	230d      	movs	r3, #13
 800a3d4:	e10a      	b.n	800a5ec <find_volume+0x658>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a3dc:	061a      	lsls	r2, r3, #24
 800a3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800a3e4:	041b      	lsls	r3, r3, #16
 800a3e6:	431a      	orrs	r2, r3
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3f4:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a400:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800a402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a40e:	e02b      	b.n	800a468 <find_volume+0x4d4>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a416:	891b      	ldrh	r3, [r3, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <find_volume+0x48c>
 800a41c:	230d      	movs	r3, #13
 800a41e:	e0e5      	b.n	800a5ec <find_volume+0x658>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a426:	6a1a      	ldr	r2, [r3, #32]
 800a428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a42a:	4413      	add	r3, r2
 800a42c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a42e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a432:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a434:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d105      	bne.n	800a448 <find_volume+0x4b4>
 800a43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	e00e      	b.n	800a466 <find_volume+0x4d2>
 800a448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a44e:	695a      	ldr	r2, [r3, #20]
 800a450:	4613      	mov	r3, r2
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	4413      	add	r3, r2
 800a456:	085a      	lsrs	r2, r3, #1
 800a458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800a466:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a46e:	699a      	ldr	r2, [r3, #24]
 800a470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a476:	895b      	ldrh	r3, [r3, #10]
 800a478:	4619      	mov	r1, r3
 800a47a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a47c:	440b      	add	r3, r1
 800a47e:	3b01      	subs	r3, #1
 800a480:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a482:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800a486:	8949      	ldrh	r1, [r1, #10]
 800a488:	fbb3 f3f1 	udiv	r3, r3, r1
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d201      	bcs.n	800a494 <find_volume+0x500>
		return FR_NO_FILESYSTEM;
 800a490:	230d      	movs	r3, #13
 800a492:	e0ab      	b.n	800a5ec <find_volume+0x658>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a49a:	461a      	mov	r2, r3
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a0:	6113      	str	r3, [r2, #16]
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a4b0:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4b8:	2280      	movs	r2, #128	@ 0x80
 800a4ba:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a4bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a4c0:	2b03      	cmp	r3, #3
 800a4c2:	d17c      	bne.n	800a5be <find_volume+0x62a>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4ca:	b21b      	sxth	r3, r3
 800a4cc:	021b      	lsls	r3, r3, #8
 800a4ce:	b21a      	sxth	r2, r3
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a4d6:	b21b      	sxth	r3, r3
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	b21b      	sxth	r3, r3
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d16e      	bne.n	800a5be <find_volume+0x62a>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a4e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a4e8:	f7fe fb6e 	bl	8008bc8 <move_window>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d165      	bne.n	800a5be <find_volume+0x62a>
	{
		fs->fsi_flag = 0;
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fe:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800a502:	b21b      	sxth	r3, r3
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	b21a      	sxth	r2, r3
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800a50e:	b21b      	sxth	r3, r3
 800a510:	4313      	orrs	r3, r2
 800a512:	b21b      	sxth	r3, r3
 800a514:	4a37      	ldr	r2, [pc, #220]	@ (800a5f4 <find_volume+0x660>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d151      	bne.n	800a5be <find_volume+0x62a>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800a51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51c:	78db      	ldrb	r3, [r3, #3]
 800a51e:	061a      	lsls	r2, r3, #24
 800a520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a522:	789b      	ldrb	r3, [r3, #2]
 800a524:	041b      	lsls	r3, r3, #16
 800a526:	431a      	orrs	r2, r3
 800a528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52a:	785b      	ldrb	r3, [r3, #1]
 800a52c:	021b      	lsls	r3, r3, #8
 800a52e:	4313      	orrs	r3, r2
 800a530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a532:	7812      	ldrb	r2, [r2, #0]
 800a534:	4313      	orrs	r3, r2
 800a536:	4a30      	ldr	r2, [pc, #192]	@ (800a5f8 <find_volume+0x664>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d140      	bne.n	800a5be <find_volume+0x62a>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800a53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53e:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800a542:	061a      	lsls	r2, r3, #24
 800a544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a546:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800a54a:	041b      	lsls	r3, r3, #16
 800a54c:	431a      	orrs	r2, r3
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	4313      	orrs	r3, r2
 800a558:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a55a:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 800a55e:	4313      	orrs	r3, r2
 800a560:	4a26      	ldr	r2, [pc, #152]	@ (800a5fc <find_volume+0x668>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d12b      	bne.n	800a5be <find_volume+0x62a>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800a566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a568:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800a56c:	061a      	lsls	r2, r3, #24
 800a56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a570:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800a574:	041b      	lsls	r3, r3, #16
 800a576:	431a      	orrs	r2, r3
 800a578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57a:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800a57e:	021b      	lsls	r3, r3, #8
 800a580:	4313      	orrs	r3, r2
 800a582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a584:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800a588:	4313      	orrs	r3, r2
 800a58a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a58c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a590:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800a592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a594:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800a598:	061a      	lsls	r2, r3, #24
 800a59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59c:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800a5a0:	041b      	lsls	r3, r3, #16
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a6:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5b0:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a5bc:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800a5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a5ca:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800a5cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a600 <find_volume+0x66c>)
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a600 <find_volume+0x66c>)
 800a5d6:	801a      	strh	r2, [r3, #0]
 800a5d8:	4b09      	ldr	r3, [pc, #36]	@ (800a600 <find_volume+0x66c>)
 800a5da:	881a      	ldrh	r2, [r3, #0]
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e2:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800a5e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a5e6:	f7fe fa73 	bl	8008ad0 <clear_lock>
#endif

	return FR_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3758      	adds	r7, #88	@ 0x58
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	ffffaa55 	.word	0xffffaa55
 800a5f8:	41615252 	.word	0x41615252
 800a5fc:	61417272 	.word	0x61417272
 800a600:	20000d20 	.word	0x20000d20

0800a604 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d02a      	beq.n	800a66c <validate+0x68>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d024      	beq.n	800a66c <validate+0x68>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d01b      	beq.n	800a66c <validate+0x68>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a640:	88da      	ldrh	r2, [r3, #6]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a648:	889b      	ldrh	r3, [r3, #4]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d10e      	bne.n	800a66c <validate+0x68>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a65a:	785b      	ldrb	r3, [r3, #1]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fd ff8d 	bl	800857c <disk_status>
 800a662:	4603      	mov	r3, r0
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800a66c:	2309      	movs	r3, #9
 800a66e:	e000      	b.n	800a672 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	4613      	mov	r3, r2
 800a688:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800a68e:	f107 0310 	add.w	r3, r7, #16
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff fbcc 	bl	8009e30 <get_ldnumber>
 800a698:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da01      	bge.n	800a6a4 <f_mount+0x28>
 800a6a0:	230b      	movs	r3, #11
 800a6a2:	e02f      	b.n	800a704 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a6a4:	4a19      	ldr	r2, [pc, #100]	@ (800a70c <f_mount+0x90>)
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d007      	beq.n	800a6c4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800a6b4:	69b8      	ldr	r0, [r7, #24]
 800a6b6:	f7fe fa0b 	bl	8008ad0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d004      	beq.n	800a6d4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	490d      	ldr	r1, [pc, #52]	@ (800a70c <f_mount+0x90>)
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <f_mount+0x6e>
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d001      	beq.n	800a6ee <f_mount+0x72>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	e00a      	b.n	800a704 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800a6ee:	f107 0108 	add.w	r1, r7, #8
 800a6f2:	f107 030c 	add.w	r3, r7, #12
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7ff fc4b 	bl	8009f94 <find_volume>
 800a6fe:	4603      	mov	r3, r0
 800a700:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a702:	7dfb      	ldrb	r3, [r7, #23]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3720      	adds	r7, #32
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	20000d1c 	.word	0x20000d1c

0800a710 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a71e:	f843 0c44 	str.w	r0, [r3, #-68]
 800a722:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a726:	f843 1c48 	str.w	r1, [r3, #-72]
 800a72a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a72e:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800a732:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a736:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <f_open+0x32>
 800a73e:	2309      	movs	r3, #9
 800a740:	e2e2      	b.n	800ad08 <f_open+0x5f8>
	fp->fs = 0;			/* Clear file object */
 800a742:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a746:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a74a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a74e:	461a      	mov	r2, r3
 800a750:	2300      	movs	r3, #0
 800a752:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a754:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a758:	461a      	mov	r2, r3
 800a75a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a75e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800a762:	f003 031f 	and.w	r3, r3, #31
 800a766:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a76a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a76e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800a772:	f023 0301 	bic.w	r3, r3, #1
 800a776:	b2da      	uxtb	r2, r3
 800a778:	f107 0110 	add.w	r1, r7, #16
 800a77c:	3908      	subs	r1, #8
 800a77e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a782:	3b10      	subs	r3, #16
 800a784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff fc03 	bl	8009f94 <find_volume>
 800a78e:	4603      	mov	r3, r0
 800a790:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a794:	f102 020f 	add.w	r2, r2, #15
 800a798:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800a79a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a79e:	f103 030f 	add.w	r3, r3, #15
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f040 82aa 	bne.w	800acfe <f_open+0x5ee>
		INIT_BUF(dj);
 800a7aa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a7b4:	3b1c      	subs	r3, #28
 800a7b6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800a7ba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a7be:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800a7c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a7c6:	3b10      	subs	r3, #16
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff faba 	bl	8009d44 <follow_path>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a7d6:	f102 020f 	add.w	r2, r2, #15
 800a7da:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800a7dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a7e0:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 800a7e4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a7e8:	f102 0208 	add.w	r2, r2, #8
 800a7ec:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a7ee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a7f2:	f103 030f 	add.w	r3, r3, #15
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d124      	bne.n	800a846 <f_open+0x136>
			if (!dir)	/* Default directory itself */
 800a7fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a800:	f103 0308 	add.w	r3, r3, #8
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <f_open+0x108>
				res = FR_INVALID_NAME;
 800a80a:	2306      	movs	r3, #6
 800a80c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a810:	f102 020f 	add.w	r2, r2, #15
 800a814:	7013      	strb	r3, [r2, #0]
 800a816:	e016      	b.n	800a846 <f_open+0x136>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a818:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a81c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800a820:	2b01      	cmp	r3, #1
 800a822:	bf8c      	ite	hi
 800a824:	2301      	movhi	r3, #1
 800a826:	2300      	movls	r3, #0
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	461a      	mov	r2, r3
 800a82c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a830:	3b10      	subs	r3, #16
 800a832:	4611      	mov	r1, r2
 800a834:	4618      	mov	r0, r3
 800a836:	f7fd ffb7 	bl	80087a8 <chk_lock>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a840:	f102 020f 	add.w	r2, r2, #15
 800a844:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a846:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a84a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800a84e:	f003 031c 	and.w	r3, r3, #28
 800a852:	2b00      	cmp	r3, #0
 800a854:	f000 8134 	beq.w	800aac0 <f_open+0x3b0>
			if (res != FR_OK) {					/* No file, create new */
 800a858:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a85c:	f103 030f 	add.w	r3, r3, #15
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d02e      	beq.n	800a8c4 <f_open+0x1b4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a866:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a86a:	f103 030f 	add.w	r3, r3, #15
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b04      	cmp	r3, #4
 800a872:	d112      	bne.n	800a89a <f_open+0x18a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a874:	f7fe f808 	bl	8008888 <enq_lock>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <f_open+0x17e>
 800a87e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a882:	3b10      	subs	r3, #16
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff f95b 	bl	8009b40 <dir_register>
 800a88a:	4603      	mov	r3, r0
 800a88c:	e000      	b.n	800a890 <f_open+0x180>
 800a88e:	2312      	movs	r3, #18
 800a890:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a894:	f102 020f 	add.w	r2, r2, #15
 800a898:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a89a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a8a4:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800a8a8:	f043 0308 	orr.w	r3, r3, #8
 800a8ac:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 800a8b0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a8b4:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 800a8b8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a8bc:	f102 0208 	add.w	r2, r2, #8
 800a8c0:	6013      	str	r3, [r2, #0]
 800a8c2:	e01f      	b.n	800a904 <f_open+0x1f4>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a8c4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a8c8:	f103 0308 	add.w	r3, r3, #8
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	330b      	adds	r3, #11
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	f003 0311 	and.w	r3, r3, #17
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d006      	beq.n	800a8e8 <f_open+0x1d8>
					res = FR_DENIED;
 800a8da:	2307      	movs	r3, #7
 800a8dc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a8e0:	f102 020f 	add.w	r2, r2, #15
 800a8e4:	7013      	strb	r3, [r2, #0]
 800a8e6:	e00d      	b.n	800a904 <f_open+0x1f4>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a8e8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a8ec:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d005      	beq.n	800a904 <f_open+0x1f4>
						res = FR_EXIST;
 800a8f8:	2308      	movs	r3, #8
 800a8fa:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a8fe:	f102 020f 	add.w	r2, r2, #15
 800a902:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a904:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a908:	f103 030f 	add.w	r3, r3, #15
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f040 8108 	bne.w	800ab24 <f_open+0x414>
 800a914:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a918:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800a91c:	f003 0308 	and.w	r3, r3, #8
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 80ff 	beq.w	800ab24 <f_open+0x414>
				dw = GET_FATTIME();				/* Created time */
 800a926:	f7fd fdc7 	bl	80084b8 <get_fattime>
 800a92a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a92e:	f103 0304 	add.w	r3, r3, #4
 800a932:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a934:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a938:	f103 0308 	add.w	r3, r3, #8
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	330e      	adds	r3, #14
 800a940:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a944:	f102 0204 	add.w	r2, r2, #4
 800a948:	6812      	ldr	r2, [r2, #0]
 800a94a:	b2d2      	uxtb	r2, r2
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a952:	f103 0304 	add.w	r3, r3, #4
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	0a1b      	lsrs	r3, r3, #8
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a962:	f103 0308 	add.w	r3, r3, #8
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	330f      	adds	r3, #15
 800a96a:	b2d2      	uxtb	r2, r2
 800a96c:	701a      	strb	r2, [r3, #0]
 800a96e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a972:	f103 0304 	add.w	r3, r3, #4
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	0c1a      	lsrs	r2, r3, #16
 800a97a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a97e:	f103 0308 	add.w	r3, r3, #8
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3310      	adds	r3, #16
 800a986:	b2d2      	uxtb	r2, r2
 800a988:	701a      	strb	r2, [r3, #0]
 800a98a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a98e:	f103 0304 	add.w	r3, r3, #4
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	0e1a      	lsrs	r2, r3, #24
 800a996:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a99a:	f103 0308 	add.w	r3, r3, #8
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3311      	adds	r3, #17
 800a9a2:	b2d2      	uxtb	r2, r2
 800a9a4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a9a6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a9aa:	f103 0308 	add.w	r3, r3, #8
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	330b      	adds	r3, #11
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a9b6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a9ba:	f103 0308 	add.w	r3, r3, #8
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	331c      	adds	r3, #28
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a9ca:	f103 0308 	add.w	r3, r3, #8
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	331d      	adds	r3, #29
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a9da:	f103 0308 	add.w	r3, r3, #8
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	331e      	adds	r3, #30
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	701a      	strb	r2, [r3, #0]
 800a9e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a9ea:	f103 0308 	add.w	r3, r3, #8
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	331f      	adds	r3, #31
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a9f6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a9fa:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800a9fe:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800aa02:	f102 0208 	add.w	r2, r2, #8
 800aa06:	6811      	ldr	r1, [r2, #0]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fe fff0 	bl	80099ee <ld_clust>
 800aa0e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800aa12:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800aa14:	2100      	movs	r1, #0
 800aa16:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800aa1a:	f103 0308 	add.w	r3, r3, #8
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	f7ff f815 	bl	8009a4e <st_clust>
				dj.fs->wflag = 1;
 800aa24:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800aa28:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800aa2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa30:	2201      	movs	r2, #1
 800aa32:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800aa34:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d072      	beq.n	800ab24 <f_open+0x414>
					dw = dj.fs->winsect;
 800aa3e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800aa42:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800aa46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800aa50:	f102 0204 	add.w	r2, r2, #4
 800aa54:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800aa56:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800aa5a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800aa5e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800aa62:	6811      	ldr	r1, [r2, #0]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe fc13 	bl	8009290 <remove_chain>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800aa70:	f102 020f 	add.w	r2, r2, #15
 800aa74:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800aa76:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800aa7a:	f103 030f 	add.w	r3, r3, #15
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d14f      	bne.n	800ab24 <f_open+0x414>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800aa84:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800aa88:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	@ 0xfd0
 800aa8c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aa98:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800aa9a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800aa9e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800aaa2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800aaa6:	f102 0204 	add.w	r2, r2, #4
 800aaaa:	6811      	ldr	r1, [r2, #0]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fe f88b 	bl	8008bc8 <move_window>
 800aab2:	4603      	mov	r3, r0
 800aab4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800aab8:	f102 020f 	add.w	r2, r2, #15
 800aabc:	7013      	strb	r3, [r2, #0]
 800aabe:	e031      	b.n	800ab24 <f_open+0x414>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800aac0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800aac4:	f103 030f 	add.w	r3, r3, #15
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d12a      	bne.n	800ab24 <f_open+0x414>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800aace:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800aad2:	f103 0308 	add.w	r3, r3, #8
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	330b      	adds	r3, #11
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	f003 0310 	and.w	r3, r3, #16
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d006      	beq.n	800aaf2 <f_open+0x3e2>
					res = FR_NO_FILE;
 800aae4:	2304      	movs	r3, #4
 800aae6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800aaea:	f102 020f 	add.w	r2, r2, #15
 800aaee:	7013      	strb	r3, [r2, #0]
 800aaf0:	e018      	b.n	800ab24 <f_open+0x414>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800aaf2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800aaf6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800aafa:	f003 0302 	and.w	r3, r3, #2
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d010      	beq.n	800ab24 <f_open+0x414>
 800ab02:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800ab06:	f103 0308 	add.w	r3, r3, #8
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	330b      	adds	r3, #11
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	f003 0301 	and.w	r3, r3, #1
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <f_open+0x414>
						res = FR_DENIED;
 800ab18:	2307      	movs	r3, #7
 800ab1a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800ab1e:	f102 020f 	add.w	r2, r2, #15
 800ab22:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800ab24:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800ab28:	f103 030f 	add.w	r3, r3, #15
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d155      	bne.n	800abde <f_open+0x4ce>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ab32:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ab36:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ab3a:	f003 0308 	and.w	r3, r3, #8
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00a      	beq.n	800ab58 <f_open+0x448>
				mode |= FA__WRITTEN;
 800ab42:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ab46:	461a      	mov	r2, r3
 800ab48:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ab4c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ab50:	f043 0320 	orr.w	r3, r3, #32
 800ab54:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ab58:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ab5c:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800ab60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab66:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800ab6a:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800ab6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ab72:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800ab74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ab78:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ab7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab80:	461a      	mov	r2, r3
 800ab82:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800ab86:	f103 0308 	add.w	r3, r3, #8
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab8e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ab92:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	bf8c      	ite	hi
 800ab9a:	2301      	movhi	r3, #1
 800ab9c:	2300      	movls	r3, #0
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	461a      	mov	r2, r3
 800aba2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800aba6:	3b10      	subs	r3, #16
 800aba8:	4611      	mov	r1, r2
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fd fe90 	bl	80088d0 <inc_lock>
 800abb0:	4602      	mov	r2, r0
 800abb2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800abb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800abba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abbe:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800abc0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800abc4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800abc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d105      	bne.n	800abde <f_open+0x4ce>
 800abd2:	2302      	movs	r3, #2
 800abd4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800abd8:	f102 020f 	add.w	r2, r2, #15
 800abdc:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800abde:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800abe2:	f103 030f 	add.w	r3, r3, #15
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f040 8088 	bne.w	800acfe <f_open+0x5ee>
			fp->flag = mode;					/* File access mode */
 800abee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800abf2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800abf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abfa:	461a      	mov	r2, r3
 800abfc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ac00:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ac04:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800ac06:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ac0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ac0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac12:	2200      	movs	r2, #0
 800ac14:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800ac16:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ac1a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800ac1e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800ac22:	f102 0208 	add.w	r2, r2, #8
 800ac26:	6811      	ldr	r1, [r2, #0]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe fee0 	bl	80099ee <ld_clust>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ac34:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ac38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac3c:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800ac3e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800ac42:	f103 0308 	add.w	r3, r3, #8
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	331f      	adds	r3, #31
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	061a      	lsls	r2, r3, #24
 800ac4e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800ac52:	f103 0308 	add.w	r3, r3, #8
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	331e      	adds	r3, #30
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	041b      	lsls	r3, r3, #16
 800ac5e:	431a      	orrs	r2, r3
 800ac60:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800ac64:	f103 0308 	add.w	r3, r3, #8
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	331d      	adds	r3, #29
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	021b      	lsls	r3, r3, #8
 800ac70:	4313      	orrs	r3, r2
 800ac72:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800ac76:	f102 0208 	add.w	r2, r2, #8
 800ac7a:	6812      	ldr	r2, [r2, #0]
 800ac7c:	321c      	adds	r2, #28
 800ac7e:	7812      	ldrb	r2, [r2, #0]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800ac86:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800ac8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ac8e:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800ac90:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ac94:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ac98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	2300      	movs	r3, #0
 800aca0:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800aca2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800aca6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800acaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acae:	461a      	mov	r2, r3
 800acb0:	2300      	movs	r3, #0
 800acb2:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800acb4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800acb8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800acbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acc0:	461a      	mov	r2, r3
 800acc2:	2300      	movs	r3, #0
 800acc4:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800acc6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800acca:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800acce:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800acd2:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800acd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800acda:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800acdc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ace0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ace4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acee:	88da      	ldrh	r2, [r3, #6]
 800acf0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800acf4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800acf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acfc:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800acfe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800ad02:	f103 030f 	add.w	r3, r3, #15
 800ad06:	781b      	ldrb	r3, [r3, #0]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b08a      	sub	sp, #40	@ 0x28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7ff fc69 	bl	800a604 <validate>
 800ad32:	4603      	mov	r3, r0
 800ad34:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <f_write+0x2c>
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
 800ad3e:	e21e      	b.n	800b17e <f_write+0x46a>
	if (fp->err)							/* Check error */
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad46:	79db      	ldrb	r3, [r3, #7]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad52:	79db      	ldrb	r3, [r3, #7]
 800ad54:	e213      	b.n	800b17e <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad5c:	799b      	ldrb	r3, [r3, #6]
 800ad5e:	f003 0302 	and.w	r3, r3, #2
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ad66:	2307      	movs	r3, #7
 800ad68:	e209      	b.n	800b17e <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad70:	689a      	ldr	r2, [r3, #8]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	441a      	add	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	f080 81d9 	bcs.w	800b136 <f_write+0x422>
 800ad84:	2300      	movs	r3, #0
 800ad86:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800ad88:	e1d5      	b.n	800b136 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ad98:	6812      	ldr	r2, [r2, #0]
 800ad9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ad9e:	8952      	ldrh	r2, [r2, #10]
 800ada0:	fbb3 f1f2 	udiv	r1, r3, r2
 800ada4:	fb01 f202 	mul.w	r2, r1, r2
 800ada8:	1a9b      	subs	r3, r3, r2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f040 8169 	bne.w	800b082 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800adbe:	6812      	ldr	r2, [r2, #0]
 800adc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800adc4:	8952      	ldrh	r2, [r2, #10]
 800adc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800add8:	789b      	ldrb	r3, [r3, #2]
 800adda:	3b01      	subs	r3, #1
 800addc:	b2db      	uxtb	r3, r3
 800adde:	4013      	ands	r3, r2
 800ade0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800ade2:	7dbb      	ldrb	r3, [r7, #22]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d15f      	bne.n	800aea8 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d111      	bne.n	800ae18 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800adfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d126      	bne.n	800ae52 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fa9f 	bl	8009352 <create_chain>
 800ae14:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae16:	e01c      	b.n	800ae52 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d009      	beq.n	800ae38 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7fe fb37 	bl	80094a2 <clmt_clust>
 800ae34:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae36:	e00c      	b.n	800ae52 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	f7fe fa81 	bl	8009352 <create_chain>
 800ae50:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 8173 	beq.w	800b140 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d106      	bne.n	800ae6e <f_write+0x15a>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae66:	2202      	movs	r2, #2
 800ae68:	71da      	strb	r2, [r3, #7]
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	e187      	b.n	800b17e <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae74:	d106      	bne.n	800ae84 <f_write+0x170>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	71da      	strb	r2, [r3, #7]
 800ae80:	2301      	movs	r3, #1
 800ae82:	e17c      	b.n	800b17e <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d105      	bne.n	800aea8 <f_write+0x194>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aea2:	461a      	mov	r2, r3
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeae:	799b      	ldrb	r3, [r3, #6]
 800aeb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d023      	beq.n	800af00 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aec4:	7858      	ldrb	r0, [r3, #1]
 800aec6:	68f9      	ldr	r1, [r7, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aece:	699a      	ldr	r2, [r3, #24]
 800aed0:	2301      	movs	r3, #1
 800aed2:	f7fd fbb3 	bl	800863c <disk_write>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d006      	beq.n	800aeea <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aee2:	2201      	movs	r2, #1
 800aee4:	71da      	strb	r2, [r3, #7]
 800aee6:	2301      	movs	r3, #1
 800aee8:	e149      	b.n	800b17e <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aef0:	799b      	ldrb	r3, [r3, #6]
 800aef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aefe:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	4619      	mov	r1, r3
 800af12:	4610      	mov	r0, r2
 800af14:	f7fd ff49 	bl	8008daa <clust2sect>
 800af18:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d106      	bne.n	800af2e <f_write+0x21a>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af26:	2202      	movs	r2, #2
 800af28:	71da      	strb	r2, [r3, #7]
 800af2a:	2302      	movs	r3, #2
 800af2c:	e127      	b.n	800b17e <f_write+0x46a>
			sect += csect;
 800af2e:	7dbb      	ldrb	r3, [r7, #22]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	4413      	add	r3, r2
 800af34:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af42:	895b      	ldrh	r3, [r3, #10]
 800af44:	461a      	mov	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	fbb3 f3f2 	udiv	r3, r3, r2
 800af4c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d069      	beq.n	800b028 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800af54:	7dba      	ldrb	r2, [r7, #22]
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	4413      	add	r3, r2
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800af60:	6812      	ldr	r2, [r2, #0]
 800af62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800af66:	7892      	ldrb	r2, [r2, #2]
 800af68:	4293      	cmp	r3, r2
 800af6a:	d90a      	bls.n	800af82 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af78:	789b      	ldrb	r3, [r3, #2]
 800af7a:	461a      	mov	r2, r3
 800af7c:	7dbb      	ldrb	r3, [r7, #22]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af8e:	7858      	ldrb	r0, [r3, #1]
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	69b9      	ldr	r1, [r7, #24]
 800af96:	f7fd fb51 	bl	800863c <disk_write>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d006      	beq.n	800afae <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afa6:	2201      	movs	r2, #1
 800afa8:	71da      	strb	r2, [r3, #7]
 800afaa:	2301      	movs	r3, #1
 800afac:	e0e7      	b.n	800b17e <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afb4:	699a      	ldr	r2, [r3, #24]
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	1ad3      	subs	r3, r2, r3
 800afba:	69fa      	ldr	r2, [r7, #28]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d926      	bls.n	800b00e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afc8:	699a      	ldr	r2, [r3, #24]
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800afd4:	6812      	ldr	r2, [r2, #0]
 800afd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800afda:	8952      	ldrh	r2, [r2, #10]
 800afdc:	fb02 f303 	mul.w	r3, r2, r3
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	18d1      	adds	r1, r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aff0:	895b      	ldrh	r3, [r3, #10]
 800aff2:	461a      	mov	r2, r3
 800aff4:	f7fd fb60 	bl	80086b8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800affe:	799b      	ldrb	r3, [r3, #6]
 800b000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b004:	b2da      	uxtb	r2, r3
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b00c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b01a:	895b      	ldrh	r3, [r3, #10]
 800b01c:	461a      	mov	r2, r3
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	fb02 f303 	mul.w	r3, r2, r3
 800b024:	623b      	str	r3, [r7, #32]
				continue;
 800b026:	e06e      	b.n	800b106 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	429a      	cmp	r2, r3
 800b034:	d01f      	beq.n	800b076 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b03c:	689a      	ldr	r2, [r3, #8]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	429a      	cmp	r2, r3
 800b048:	d215      	bcs.n	800b076 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b056:	7858      	ldrb	r0, [r3, #1]
 800b058:	68f9      	ldr	r1, [r7, #12]
 800b05a:	2301      	movs	r3, #1
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	f7fd facd 	bl	80085fc <disk_read>
 800b062:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800b064:	2b00      	cmp	r3, #0
 800b066:	d006      	beq.n	800b076 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b06e:	2201      	movs	r2, #1
 800b070:	71da      	strb	r2, [r3, #7]
 800b072:	2301      	movs	r3, #1
 800b074:	e083      	b.n	800b17e <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b07c:	461a      	mov	r2, r3
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b08e:	895b      	ldrh	r3, [r3, #10]
 800b090:	4618      	mov	r0, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b0a0:	6812      	ldr	r2, [r2, #0]
 800b0a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b0a6:	8952      	ldrh	r2, [r2, #10]
 800b0a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0ac:	fb01 f202 	mul.w	r2, r1, r2
 800b0b0:	1a9b      	subs	r3, r3, r2
 800b0b2:	1ac3      	subs	r3, r0, r3
 800b0b4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800b0b6:	6a3a      	ldr	r2, [r7, #32]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d901      	bls.n	800b0c2 <f_write+0x3ae>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b0d0:	6812      	ldr	r2, [r2, #0]
 800b0d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b0d6:	8952      	ldrh	r2, [r2, #10]
 800b0d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0dc:	fb01 f202 	mul.w	r2, r1, r2
 800b0e0:	1a9b      	subs	r3, r3, r2
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	6a3a      	ldr	r2, [r7, #32]
 800b0e8:	69b9      	ldr	r1, [r7, #24]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fd fae4 	bl	80086b8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0f6:	799b      	ldrb	r3, [r3, #6]
 800b0f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b104:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800b106:	69ba      	ldr	r2, [r7, #24]
 800b108:	6a3b      	ldr	r3, [r7, #32]
 800b10a:	4413      	add	r3, r2
 800b10c:	61bb      	str	r3, [r7, #24]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b114:	689a      	ldr	r2, [r3, #8]
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	4413      	add	r3, r2
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b120:	6093      	str	r3, [r2, #8]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	441a      	add	r2, r3
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f47f ae26 	bne.w	800ad8a <f_write+0x76>
 800b13e:	e000      	b.n	800b142 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b140:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b148:	689a      	ldr	r2, [r3, #8]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	429a      	cmp	r2, r3
 800b154:	d907      	bls.n	800b166 <f_write+0x452>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b164:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b16c:	799b      	ldrb	r3, [r3, #6]
 800b16e:	f043 0320 	orr.w	r3, r3, #32
 800b172:	b2da      	uxtb	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b17a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3728      	adds	r7, #40	@ 0x28
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b086      	sub	sp, #24
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff fa38 	bl	800a604 <validate>
 800b194:	4603      	mov	r3, r0
 800b196:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b198:	7dfb      	ldrb	r3, [r7, #23]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f040 80bc 	bne.w	800b318 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1a6:	799b      	ldrb	r3, [r3, #6]
 800b1a8:	f003 0320 	and.w	r3, r3, #32
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 80b3 	beq.w	800b318 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1b8:	799b      	ldrb	r3, [r3, #6]
 800b1ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d01e      	beq.n	800b200 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1ce:	7858      	ldrb	r0, [r3, #1]
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1d8:	699a      	ldr	r2, [r3, #24]
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f7fd fa2e 	bl	800863c <disk_write>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d001      	beq.n	800b1ea <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e097      	b.n	800b31a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1f0:	799b      	ldrb	r3, [r3, #6]
 800b1f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1fe:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b20e:	69db      	ldr	r3, [r3, #28]
 800b210:	4619      	mov	r1, r3
 800b212:	4610      	mov	r0, r2
 800b214:	f7fd fcd8 	bl	8008bc8 <move_window>
 800b218:	4603      	mov	r3, r0
 800b21a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800b21c:	7dfb      	ldrb	r3, [r7, #23]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d17a      	bne.n	800b318 <f_sync+0x192>
				dir = fp->dir_ptr;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	330b      	adds	r3, #11
 800b230:	781a      	ldrb	r2, [r3, #0]
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	330b      	adds	r3, #11
 800b236:	f042 0220 	orr.w	r2, r2, #32
 800b23a:	b2d2      	uxtb	r2, r2
 800b23c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b244:	68da      	ldr	r2, [r3, #12]
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	331c      	adds	r3, #28
 800b24a:	b2d2      	uxtb	r2, r2
 800b24c:	701a      	strb	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	b29b      	uxth	r3, r3
 800b258:	0a1b      	lsrs	r3, r3, #8
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	331d      	adds	r3, #29
 800b260:	b2d2      	uxtb	r2, r2
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	0c1a      	lsrs	r2, r3, #16
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	331e      	adds	r3, #30
 800b272:	b2d2      	uxtb	r2, r2
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	0e1a      	lsrs	r2, r3, #24
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	331f      	adds	r3, #31
 800b284:	b2d2      	uxtb	r2, r2
 800b286:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	4619      	mov	r1, r3
 800b292:	6938      	ldr	r0, [r7, #16]
 800b294:	f7fe fbdb 	bl	8009a4e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800b298:	f7fd f90e 	bl	80084b8 <get_fattime>
 800b29c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	3316      	adds	r3, #22
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	b2d2      	uxtb	r2, r2
 800b2a6:	701a      	strb	r2, [r3, #0]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	0a1b      	lsrs	r3, r3, #8
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	3317      	adds	r3, #23
 800b2b4:	b2d2      	uxtb	r2, r2
 800b2b6:	701a      	strb	r2, [r3, #0]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	0c1a      	lsrs	r2, r3, #16
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	3318      	adds	r3, #24
 800b2c0:	b2d2      	uxtb	r2, r2
 800b2c2:	701a      	strb	r2, [r3, #0]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	0e1a      	lsrs	r2, r3, #24
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	3319      	adds	r3, #25
 800b2cc:	b2d2      	uxtb	r2, r2
 800b2ce:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	3312      	adds	r3, #18
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	701a      	strb	r2, [r3, #0]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	3313      	adds	r3, #19
 800b2dc:	2200      	movs	r2, #0
 800b2de:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2e6:	799b      	ldrb	r3, [r3, #6]
 800b2e8:	f023 0320 	bic.w	r3, r3, #32
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2f4:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b302:	2201      	movs	r2, #1
 800b304:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fd fc8c 	bl	8008c2c <sync_fs>
 800b314:	4603      	mov	r3, r0
 800b316:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800b318:	7dfb      	ldrb	r3, [r7, #23]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b084      	sub	sp, #16
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff ff2b 	bl	800b186 <f_sync>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d119      	bne.n	800b36e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7ff f962 	bl	800a604 <validate>
 800b340:	4603      	mov	r3, r0
 800b342:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d111      	bne.n	800b36e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b352:	4618      	mov	r0, r3
 800b354:	f7fd fb78 	bl	8008a48 <dec_lock>
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d105      	bne.n	800b36e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b368:	461a      	mov	r2, r3
 800b36a:	2300      	movs	r3, #0
 800b36c:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b090      	sub	sp, #64	@ 0x40
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7ff f93e 	bl	800a604 <validate>
 800b388:	4603      	mov	r3, r0
 800b38a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b38e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b392:	2b00      	cmp	r3, #0
 800b394:	d002      	beq.n	800b39c <f_lseek+0x24>
 800b396:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b39a:	e2da      	b.n	800b952 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3a2:	79db      	ldrb	r3, [r3, #7]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d004      	beq.n	800b3b2 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3ae:	79db      	ldrb	r3, [r3, #7]
 800b3b0:	e2cf      	b.n	800b952 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 8124 	beq.w	800b608 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c6:	d16c      	bne.n	800b4a2 <f_lseek+0x12a>
			tbl = fp->cltbl;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d4:	1d1a      	adds	r2, r3, #4
 800b3d6:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	617b      	str	r3, [r7, #20]
 800b3dc:	2302      	movs	r3, #2
 800b3de:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d046      	beq.n	800b47e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f2:	613b      	str	r3, [r7, #16]
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fa:	3302      	adds	r3, #2
 800b3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b404:	3301      	adds	r3, #1
 800b406:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b412:	4618      	mov	r0, r3
 800b414:	f7fd fced 	bl	8008df2 <get_fat>
 800b418:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800b41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d806      	bhi.n	800b42e <f_lseek+0xb6>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b426:	2202      	movs	r2, #2
 800b428:	71da      	strb	r2, [r3, #7]
 800b42a:	2302      	movs	r3, #2
 800b42c:	e291      	b.n	800b952 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b434:	d106      	bne.n	800b444 <f_lseek+0xcc>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b43c:	2201      	movs	r2, #1
 800b43e:	71da      	strb	r2, [r3, #7]
 800b440:	2301      	movs	r3, #1
 800b442:	e286      	b.n	800b952 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	3301      	adds	r3, #1
 800b448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d0d7      	beq.n	800b3fe <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b44e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	429a      	cmp	r2, r3
 800b454:	d809      	bhi.n	800b46a <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800b456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b458:	1d1a      	adds	r2, r3, #4
 800b45a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b45c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b462:	1d1a      	adds	r2, r3, #4
 800b464:	627a      	str	r2, [r7, #36]	@ 0x24
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d3b8      	bcc.n	800b3f0 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b488:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800b48a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d803      	bhi.n	800b49a <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800b492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	e259      	b.n	800b94e <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b49a:	2311      	movs	r3, #17
 800b49c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b4a0:	e255      	b.n	800b94e <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d904      	bls.n	800b4ba <f_lseek+0x142>
				ofs = fp->fsize;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 8240 	beq.w	800b94e <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7fd ffe4 	bl	80094a2 <clmt_clust>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4e2:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	4610      	mov	r0, r2
 800b4f8:	f7fd fc57 	bl	8008daa <clust2sect>
 800b4fc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d106      	bne.n	800b512 <f_lseek+0x19a>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b50a:	2202      	movs	r2, #2
 800b50c:	71da      	strb	r2, [r3, #7]
 800b50e:	2302      	movs	r3, #2
 800b510:	e21f      	b.n	800b952 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	3b01      	subs	r3, #1
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b51c:	6812      	ldr	r2, [r2, #0]
 800b51e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b522:	8952      	ldrh	r2, [r2, #10]
 800b524:	fbb3 f3f2 	udiv	r3, r3, r2
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b52e:	6812      	ldr	r2, [r2, #0]
 800b530:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b534:	7892      	ldrb	r2, [r2, #2]
 800b536:	3a01      	subs	r2, #1
 800b538:	4013      	ands	r3, r2
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	4413      	add	r3, r2
 800b53e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b54e:	6812      	ldr	r2, [r2, #0]
 800b550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b554:	8952      	ldrh	r2, [r2, #10]
 800b556:	fbb3 f1f2 	udiv	r1, r3, r2
 800b55a:	fb01 f202 	mul.w	r2, r1, r2
 800b55e:	1a9b      	subs	r3, r3, r2
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 81f4 	beq.w	800b94e <f_lseek+0x5d6>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	429a      	cmp	r2, r3
 800b572:	f000 81ec 	beq.w	800b94e <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b57c:	799b      	ldrb	r3, [r3, #6]
 800b57e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b582:	2b00      	cmp	r3, #0
 800b584:	d023      	beq.n	800b5ce <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b592:	7858      	ldrb	r0, [r3, #1]
 800b594:	6879      	ldr	r1, [r7, #4]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b59c:	699a      	ldr	r2, [r3, #24]
 800b59e:	2301      	movs	r3, #1
 800b5a0:	f7fd f84c 	bl	800863c <disk_write>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d006      	beq.n	800b5b8 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	71da      	strb	r2, [r3, #7]
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e1cc      	b.n	800b952 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5be:	799b      	ldrb	r3, [r3, #6]
 800b5c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5cc:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5da:	7858      	ldrb	r0, [r3, #1]
 800b5dc:	6879      	ldr	r1, [r7, #4]
 800b5de:	2301      	movs	r3, #1
 800b5e0:	69ba      	ldr	r2, [r7, #24]
 800b5e2:	f7fd f80b 	bl	80085fc <disk_read>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d006      	beq.n	800b5fa <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	71da      	strb	r2, [r3, #7]
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e1ab      	b.n	800b952 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b600:	461a      	mov	r2, r3
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	6193      	str	r3, [r2, #24]
 800b606:	e1a2      	b.n	800b94e <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	429a      	cmp	r2, r3
 800b614:	d90c      	bls.n	800b630 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b61c:	799b      	ldrb	r3, [r3, #6]
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	2b00      	cmp	r3, #0
 800b624:	d104      	bne.n	800b630 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b644:	461a      	mov	r2, r3
 800b646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b648:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 8100 	beq.w	800b852 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b65e:	789b      	ldrb	r3, [r3, #2]
 800b660:	461a      	mov	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b66e:	895b      	ldrh	r3, [r3, #10]
 800b670:	fb02 f303 	mul.w	r3, r2, r3
 800b674:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d021      	beq.n	800b6c0 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	1e5a      	subs	r2, r3, #1
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	fbb2 f2f3 	udiv	r2, r2, r3
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	1e59      	subs	r1, r3, #1
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b690:	429a      	cmp	r2, r3
 800b692:	d315      	bcc.n	800b6c0 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	1e5a      	subs	r2, r3, #1
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	425b      	negs	r3, r3
 800b69c:	4013      	ands	r3, r2
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b6a4:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b6be:	e031      	b.n	800b724 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d123      	bne.n	800b718 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2100      	movs	r1, #0
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fd fe39 	bl	8009352 <create_chain>
 800b6e0:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d106      	bne.n	800b6f6 <f_lseek+0x37e>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	71da      	strb	r2, [r3, #7]
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	e12d      	b.n	800b952 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fc:	d106      	bne.n	800b70c <f_lseek+0x394>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b704:	2201      	movs	r2, #1
 800b706:	71da      	strb	r2, [r3, #7]
 800b708:	2301      	movs	r3, #1
 800b70a:	e122      	b.n	800b952 <f_lseek+0x5da>
					fp->sclust = clst;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b712:	461a      	mov	r2, r3
 800b714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b716:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b71e:	461a      	mov	r2, r3
 800b720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b722:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800b724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b726:	2b00      	cmp	r3, #0
 800b728:	f000 8093 	beq.w	800b852 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800b72c:	e052      	b.n	800b7d4 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b734:	799b      	ldrb	r3, [r3, #6]
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00e      	beq.n	800b75c <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fd fe02 	bl	8009352 <create_chain>
 800b74e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800b750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10b      	bne.n	800b76e <f_lseek+0x3f6>
							ofs = bcs; break;
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	603b      	str	r3, [r7, #0]
 800b75a:	e03f      	b.n	800b7dc <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b766:	4618      	mov	r0, r3
 800b768:	f7fd fb43 	bl	8008df2 <get_fat>
 800b76c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b774:	d106      	bne.n	800b784 <f_lseek+0x40c>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b77c:	2201      	movs	r2, #1
 800b77e:	71da      	strb	r2, [r3, #7]
 800b780:	2301      	movs	r3, #1
 800b782:	e0e6      	b.n	800b952 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800b784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b786:	2b01      	cmp	r3, #1
 800b788:	d909      	bls.n	800b79e <f_lseek+0x426>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d306      	bcc.n	800b7ac <f_lseek+0x434>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	71da      	strb	r2, [r3, #7]
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	e0d2      	b.n	800b952 <f_lseek+0x5da>
					fp->clust = clst;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b6:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7be:	689a      	ldr	r2, [r3, #8]
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b7ca:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d8a8      	bhi.n	800b72e <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7e2:	689a      	ldr	r2, [r3, #8]
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b7ee:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7fc:	895b      	ldrh	r3, [r3, #10]
 800b7fe:	461a      	mov	r2, r3
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	fbb3 f1f2 	udiv	r1, r3, r2
 800b806:	fb01 f202 	mul.w	r2, r1, r2
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d020      	beq.n	800b852 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fd fac5 	bl	8008daa <clust2sect>
 800b820:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b824:	2b00      	cmp	r3, #0
 800b826:	d106      	bne.n	800b836 <f_lseek+0x4be>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b82e:	2202      	movs	r2, #2
 800b830:	71da      	strb	r2, [r3, #7]
 800b832:	2302      	movs	r3, #2
 800b834:	e08d      	b.n	800b952 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b842:	895b      	ldrh	r3, [r3, #10]
 800b844:	461a      	mov	r2, r3
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	fbb3 f3f2 	udiv	r3, r3, r2
 800b84c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b84e:	4413      	add	r3, r2
 800b850:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b860:	6812      	ldr	r2, [r2, #0]
 800b862:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b866:	8952      	ldrh	r2, [r2, #10]
 800b868:	fbb3 f1f2 	udiv	r1, r3, r2
 800b86c:	fb01 f202 	mul.w	r2, r1, r2
 800b870:	1a9b      	subs	r3, r3, r2
 800b872:	2b00      	cmp	r3, #0
 800b874:	d04e      	beq.n	800b914 <f_lseek+0x59c>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b880:	429a      	cmp	r2, r3
 800b882:	d047      	beq.n	800b914 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b88a:	799b      	ldrb	r3, [r3, #6]
 800b88c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b890:	2b00      	cmp	r3, #0
 800b892:	d023      	beq.n	800b8dc <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8a0:	7858      	ldrb	r0, [r3, #1]
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8aa:	699a      	ldr	r2, [r3, #24]
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	f7fc fec5 	bl	800863c <disk_write>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d006      	beq.n	800b8c6 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8be:	2201      	movs	r2, #1
 800b8c0:	71da      	strb	r2, [r3, #7]
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e045      	b.n	800b952 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8cc:	799b      	ldrb	r3, [r3, #6]
 800b8ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8da:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8e8:	7858      	ldrb	r0, [r3, #1]
 800b8ea:	6879      	ldr	r1, [r7, #4]
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8f0:	f7fc fe84 	bl	80085fc <disk_read>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d006      	beq.n	800b908 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b900:	2201      	movs	r2, #1
 800b902:	71da      	strb	r2, [r3, #7]
 800b904:	2301      	movs	r3, #1
 800b906:	e024      	b.n	800b952 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b90e:	461a      	mov	r2, r3
 800b910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b912:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b91a:	689a      	ldr	r2, [r3, #8]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	429a      	cmp	r2, r3
 800b926:	d912      	bls.n	800b94e <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b936:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b93e:	799b      	ldrb	r3, [r3, #6]
 800b940:	f043 0320 	orr.w	r3, r3, #32
 800b944:	b2da      	uxtb	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b94c:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800b94e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b952:	4618      	mov	r0, r3
 800b954:	3740      	adds	r7, #64	@ 0x40
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	460b      	mov	r3, r1
 800b964:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800b966:	78fb      	ldrb	r3, [r7, #3]
 800b968:	2b0a      	cmp	r3, #10
 800b96a:	d103      	bne.n	800b974 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b96c:	210d      	movs	r1, #13
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7ff fff3 	bl	800b95a <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	db25      	blt.n	800b9cc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	60fa      	str	r2, [r7, #12]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	4413      	add	r3, r2
 800b98a:	78fa      	ldrb	r2, [r7, #3]
 800b98c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2b3c      	cmp	r3, #60	@ 0x3c
 800b992:	dd12      	ble.n	800b9ba <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f103 010c 	add.w	r1, r3, #12
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	f107 0308 	add.w	r3, r7, #8
 800b9a4:	f7ff f9b6 	bl	800ad14 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d101      	bne.n	800b9b4 <putc_bfd+0x5a>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	e001      	b.n	800b9b8 <putc_bfd+0x5e>
 800b9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	1c5a      	adds	r2, r3, #1
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	609a      	str	r2, [r3, #8]
 800b9ca:	e000      	b.n	800b9ce <putc_bfd+0x74>
	if (i < 0) return;
 800b9cc:	bf00      	nop
}
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b9d4:	b590      	push	{r4, r7, lr}
 800b9d6:	b097      	sub	sp, #92	@ 0x5c
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	613b      	str	r3, [r7, #16]
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800b9ea:	e009      	b.n	800ba00 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	607a      	str	r2, [r7, #4]
 800b9f2:	781a      	ldrb	r2, [r3, #0]
 800b9f4:	f107 030c 	add.w	r3, r7, #12
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff ffad 	bl	800b95a <putc_bfd>
	while (*str)			/* Put the string */
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1f1      	bne.n	800b9ec <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	db15      	blt.n	800ba3a <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	461c      	mov	r4, r3
 800ba14:	f107 0208 	add.w	r2, r7, #8
 800ba18:	f107 030c 	add.w	r3, r7, #12
 800ba1c:	f103 010c 	add.w	r1, r3, #12
 800ba20:	4613      	mov	r3, r2
 800ba22:	4622      	mov	r2, r4
 800ba24:	f7ff f976 	bl	800ad14 <f_write>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d105      	bne.n	800ba3a <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d101      	bne.n	800ba3a <f_puts+0x66>
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	e001      	b.n	800ba3e <f_puts+0x6a>
	return EOF;
 800ba3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	375c      	adds	r7, #92	@ 0x5c
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd90      	pop	{r4, r7, pc}
	...

0800ba48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	4613      	mov	r3, r2
 800ba54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba56:	2301      	movs	r3, #1
 800ba58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800ba5e:	4b1e      	ldr	r3, [pc, #120]	@ (800bad8 <FATFS_LinkDriverEx+0x90>)
 800ba60:	7a5b      	ldrb	r3, [r3, #9]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d831      	bhi.n	800bacc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ba68:	4b1b      	ldr	r3, [pc, #108]	@ (800bad8 <FATFS_LinkDriverEx+0x90>)
 800ba6a:	7a5b      	ldrb	r3, [r3, #9]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	461a      	mov	r2, r3
 800ba70:	4b19      	ldr	r3, [pc, #100]	@ (800bad8 <FATFS_LinkDriverEx+0x90>)
 800ba72:	2100      	movs	r1, #0
 800ba74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800ba76:	4b18      	ldr	r3, [pc, #96]	@ (800bad8 <FATFS_LinkDriverEx+0x90>)
 800ba78:	7a5b      	ldrb	r3, [r3, #9]
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	4a16      	ldr	r2, [pc, #88]	@ (800bad8 <FATFS_LinkDriverEx+0x90>)
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800ba86:	4b14      	ldr	r3, [pc, #80]	@ (800bad8 <FATFS_LinkDriverEx+0x90>)
 800ba88:	7a5b      	ldrb	r3, [r3, #9]
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	4b12      	ldr	r3, [pc, #72]	@ (800bad8 <FATFS_LinkDriverEx+0x90>)
 800ba90:	4413      	add	r3, r2
 800ba92:	79fa      	ldrb	r2, [r7, #7]
 800ba94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ba96:	4b10      	ldr	r3, [pc, #64]	@ (800bad8 <FATFS_LinkDriverEx+0x90>)
 800ba98:	7a5b      	ldrb	r3, [r3, #9]
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	b2d1      	uxtb	r1, r2
 800baa0:	4a0d      	ldr	r2, [pc, #52]	@ (800bad8 <FATFS_LinkDriverEx+0x90>)
 800baa2:	7251      	strb	r1, [r2, #9]
 800baa4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800baa6:	7dbb      	ldrb	r3, [r7, #22]
 800baa8:	3330      	adds	r3, #48	@ 0x30
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	3301      	adds	r3, #1
 800bab4:	223a      	movs	r2, #58	@ 0x3a
 800bab6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	3302      	adds	r3, #2
 800babc:	222f      	movs	r2, #47	@ 0x2f
 800babe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	3303      	adds	r3, #3
 800bac4:	2200      	movs	r2, #0
 800bac6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bac8:	2300      	movs	r3, #0
 800baca:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	371c      	adds	r7, #28
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bc80      	pop	{r7}
 800bad6:	4770      	bx	lr
 800bad8:	20000d3c 	.word	0x20000d3c

0800badc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bae6:	2200      	movs	r2, #0
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7ff ffac 	bl	800ba48 <FATFS_LinkDriverEx>
 800baf0:	4603      	mov	r3, r0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <Screen_begin>:
    [CONDITION_YEAR]     = {.String_Name = "YEAR", .String_Unit = "yr"},
    [CONDITION_HOUR]     = {.String_Name = "HOUR", .String_Unit = "h"},
    [CONDITION_MINUTE]   = {.String_Name = "MINUTE", .String_Unit = "min"}
};

void Screen_begin(UART_HandleTypeDef * UART_Screen) {
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
    // Init _DWIN UART
	_Screen.Screen_DWIN.pUart = UART_Screen;
 800bb04:	4a38      	ldr	r2, [pc, #224]	@ (800bbe8 <Screen_begin+0xec>)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6013      	str	r3, [r2, #0]

    // add receive function callback
	Screen_init_handler_table(&_Screen);
 800bb0a:	4837      	ldr	r0, [pc, #220]	@ (800bbe8 <Screen_begin+0xec>)
 800bb0c:	f002 fc62 	bl	800e3d4 <Screen_init_handler_table>
    DWIN_SetCallback((Dwin_t *)&_Screen,(pListenDWIN)Screen_RX_Callback);
 800bb10:	4936      	ldr	r1, [pc, #216]	@ (800bbec <Screen_begin+0xf0>)
 800bb12:	4835      	ldr	r0, [pc, #212]	@ (800bbe8 <Screen_begin+0xec>)
 800bb14:	f007 fffd 	bl	8013b12 <DWIN_SetCallback>

    Screen_Init_Variable(&_Screen);
 800bb18:	4833      	ldr	r0, [pc, #204]	@ (800bbe8 <Screen_begin+0xec>)
 800bb1a:	f002 ff31 	bl	800e980 <Screen_Init_Variable>

    // Init screen keyboard     
    _Screen.Screen_keyboard.VP_Text = 0xFFFF;
 800bb1e:	4b32      	ldr	r3, [pc, #200]	@ (800bbe8 <Screen_begin+0xec>)
 800bb20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb24:	819a      	strh	r2, [r3, #12]
    _Screen.Screen_keyboard.Index_String = 0;
 800bb26:	4b30      	ldr	r3, [pc, #192]	@ (800bbe8 <Screen_begin+0xec>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    _Screen.Screen_keyboard.Caplock = 0;
 800bb2e:	4b2e      	ldr	r3, [pc, #184]	@ (800bbe8 <Screen_begin+0xec>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    
    _Screen.pre_page = 106;
 800bb36:	4b2c      	ldr	r3, [pc, #176]	@ (800bbe8 <Screen_begin+0xec>)
 800bb38:	226a      	movs	r2, #106	@ 0x6a
 800bb3a:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    _Screen.Ishome = true;
 800bb3e:	4b2a      	ldr	r3, [pc, #168]	@ (800bbe8 <Screen_begin+0xec>)
 800bb40:	2201      	movs	r2, #1
 800bb42:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec

    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST1].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST1]));
 800bb46:	4b28      	ldr	r3, [pc, #160]	@ (800bbe8 <Screen_begin+0xec>)
 800bb48:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800bb4c:	4928      	ldr	r1, [pc, #160]	@ (800bbf0 <Screen_begin+0xf4>)
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f003 fa16 	bl	800ef80 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST2].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST2]));
 800bb54:	4b24      	ldr	r3, [pc, #144]	@ (800bbe8 <Screen_begin+0xec>)
 800bb56:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 800bb5a:	4926      	ldr	r1, [pc, #152]	@ (800bbf4 <Screen_begin+0xf8>)
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f003 fa0f 	bl	800ef80 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST3].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST3]));
 800bb62:	4b21      	ldr	r3, [pc, #132]	@ (800bbe8 <Screen_begin+0xec>)
 800bb64:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 800bb68:	4923      	ldr	r1, [pc, #140]	@ (800bbf8 <Screen_begin+0xfc>)
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f003 fa08 	bl	800ef80 <get_data_testing_ic>
    get_data_testing_ic(_Screen.Program_Testx[PROGRAM_TEST4].Name_IC,&(_Screen.Program_Testx[PROGRAM_TEST4]));
 800bb70:	4b1d      	ldr	r3, [pc, #116]	@ (800bbe8 <Screen_begin+0xec>)
 800bb72:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 800bb76:	4921      	ldr	r1, [pc, #132]	@ (800bbfc <Screen_begin+0x100>)
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f003 fa01 	bl	800ef80 <get_data_testing_ic>

    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x11D0,2);
 800bb7e:	2202      	movs	r2, #2
 800bb80:	f241 11d0 	movw	r1, #4560	@ 0x11d0
 800bb84:	4818      	ldr	r0, [pc, #96]	@ (800bbe8 <Screen_begin+0xec>)
 800bb86:	f007 feb6 	bl	80138f6 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x13D0,2);
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	f241 31d0 	movw	r1, #5072	@ 0x13d0
 800bb90:	4815      	ldr	r0, [pc, #84]	@ (800bbe8 <Screen_begin+0xec>)
 800bb92:	f007 feb0 	bl	80138f6 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x15D0,2);
 800bb96:	2202      	movs	r2, #2
 800bb98:	f241 51d0 	movw	r1, #5584	@ 0x15d0
 800bb9c:	4812      	ldr	r0, [pc, #72]	@ (800bbe8 <Screen_begin+0xec>)
 800bb9e:	f007 feaa 	bl	80138f6 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x17D0,2);
 800bba2:	2202      	movs	r2, #2
 800bba4:	f241 71d0 	movw	r1, #6096	@ 0x17d0
 800bba8:	480f      	ldr	r0, [pc, #60]	@ (800bbe8 <Screen_begin+0xec>)
 800bbaa:	f007 fea4 	bl	80138f6 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x19D0,2);
 800bbae:	2202      	movs	r2, #2
 800bbb0:	f641 11d0 	movw	r1, #6608	@ 0x19d0
 800bbb4:	480c      	ldr	r0, [pc, #48]	@ (800bbe8 <Screen_begin+0xec>)
 800bbb6:	f007 fe9e 	bl	80138f6 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1BD0,2);
 800bbba:	2202      	movs	r2, #2
 800bbbc:	f641 31d0 	movw	r1, #7120	@ 0x1bd0
 800bbc0:	4809      	ldr	r0, [pc, #36]	@ (800bbe8 <Screen_begin+0xec>)
 800bbc2:	f007 fe98 	bl	80138f6 <DWIN_SetWidth_Basic_line>
    DWIN_SetWidth_Basic_line((Dwin_t *)&_Screen,0x1DD0,2);
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	f641 51d0 	movw	r1, #7632	@ 0x1dd0
 800bbcc:	4806      	ldr	r0, [pc, #24]	@ (800bbe8 <Screen_begin+0xec>)
 800bbce:	f007 fe92 	bl	80138f6 <DWIN_SetWidth_Basic_line>

    DWIN_SetPage((Dwin_t *)&_Screen,DWINPAGE_MAIN);  // Go to first page when start
 800bbd2:	2165      	movs	r1, #101	@ 0x65
 800bbd4:	4804      	ldr	r0, [pc, #16]	@ (800bbe8 <Screen_begin+0xec>)
 800bbd6:	f007 fb2a 	bl	801322e <DWIN_SetPage>
    printf("Init screen done\n");
 800bbda:	4809      	ldr	r0, [pc, #36]	@ (800bc00 <Screen_begin+0x104>)
 800bbdc:	f00a fec8 	bl	8016970 <puts>
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	20000d48 	.word	0x20000d48
 800bbec:	0800bc21 	.word	0x0800bc21
 800bbf0:	20001120 	.word	0x20001120
 800bbf4:	20001150 	.word	0x20001150
 800bbf8:	20001180 	.word	0x20001180
 800bbfc:	200011b0 	.word	0x200011b0
 800bc00:	08019d94 	.word	0x08019d94

0800bc04 <Screen_RX_data>:

// USED IN RX UART CALLBACK FUNCTION WHEN RECEIVE DATA
void Screen_RX_data(uint8_t *RX_Buffer) {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
    DWIN_Listen((Dwin_t *)&_Screen, RX_Buffer);
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	4803      	ldr	r0, [pc, #12]	@ (800bc1c <Screen_RX_data+0x18>)
 800bc10:	f007 ff8c 	bl	8013b2c <DWIN_Listen>
}
 800bc14:	bf00      	nop
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	20000d48 	.word	0x20000d48

0800bc20 <Screen_RX_Callback>:

void Screen_RX_Callback(uint16_t Vpaddress, uint8_t lowByte, uint8_t highByte) { 
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	4603      	mov	r3, r0
 800bc28:	80fb      	strh	r3, [r7, #6]
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	717b      	strb	r3, [r7, #5]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	713b      	strb	r3, [r7, #4]
    screen_event_t screen_event;
    // If the VP is FFFF -> skip
    if (Vpaddress != 0xFFFF) {
 800bc32:	88fb      	ldrh	r3, [r7, #6]
 800bc34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d01b      	beq.n	800bc74 <Screen_RX_Callback+0x54>
        screen_event.event = Index_VP(Vpaddress,lookup_VP_SIG,SIZE_LOOKUP_VP_SIG);
 800bc3c:	88fb      	ldrh	r3, [r7, #6]
 800bc3e:	2207      	movs	r2, #7
 800bc40:	490e      	ldr	r1, [pc, #56]	@ (800bc7c <Screen_RX_Callback+0x5c>)
 800bc42:	4618      	mov	r0, r3
 800bc44:	f002 fb8a 	bl	800e35c <Index_VP>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	723b      	strb	r3, [r7, #8]
        screen_event.action = lowByte;
 800bc4c:	797b      	ldrb	r3, [r7, #5]
 800bc4e:	727b      	strb	r3, [r7, #9]
        screen_event.data = highByte;
 800bc50:	793b      	ldrb	r3, [r7, #4]
 800bc52:	72bb      	strb	r3, [r7, #10]
        screen_event.keyvalue = (uint16_t)((highByte<<8) | (lowByte&0xFF));
 800bc54:	793b      	ldrb	r3, [r7, #4]
 800bc56:	b21b      	sxth	r3, r3
 800bc58:	021b      	lsls	r3, r3, #8
 800bc5a:	b21a      	sxth	r2, r3
 800bc5c:	797b      	ldrb	r3, [r7, #5]
 800bc5e:	b21b      	sxth	r3, r3
 800bc60:	4313      	orrs	r3, r2
 800bc62:	b21b      	sxth	r3, r3
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	81bb      	strh	r3, [r7, #12]

        // call to respective function
        Screen_excute_RX_function(&_Screen,&screen_event);
 800bc68:	f107 0308 	add.w	r3, r7, #8
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	4804      	ldr	r0, [pc, #16]	@ (800bc80 <Screen_RX_Callback+0x60>)
 800bc70:	f002 fc6e 	bl	800e550 <Screen_excute_RX_function>
    }
}
 800bc74:	bf00      	nop
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	20000024 	.word	0x20000024
 800bc80:	20000d48 	.word	0x20000d48

0800bc84 <Navigation_setting_page>:


#pragma region CALLBACK FUNCTION VP ADRRESS 

void Navigation_setting_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING);
 800bc8e:	2174      	movs	r1, #116	@ 0x74
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f007 facc 	bl	801322e <DWIN_SetPage>
    
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 800bc96:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f007 fb5e 	bl	801335c <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password);
 800bca0:	f249 5180 	movw	r1, #38272	@ 0x9580
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f007 fb59 	bl	801335c <DWIN_ClearText>
    screen_obj->Ishome = false;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
}
 800bcb2:	bf00      	nop
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <Navigation_home_page>:

void Navigation_home_page(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
    uint8_t current_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bcca:	4619      	mov	r1, r3
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bcd2:	fb01 f303 	mul.w	r3, r1, r3
 800bcd6:	4413      	add	r3, r2
 800bcd8:	334b      	adds	r3, #75	@ 0x4b
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	73fb      	strb	r3, [r7, #15]
    UNUSED(current_program);
    // Show data

    // Switch page
    screen_obj->Ishome = true;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	f883 24ec 	strb.w	r2, [r3, #1260]	@ 0x4ec
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,PROGRAM_TEST1);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bcec:	4619      	mov	r1, r3
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bcf4:	fb01 f303 	mul.w	r3, r1, r3
 800bcf8:	4413      	add	r3, r2
 800bcfa:	3349      	adds	r3, #73	@ 0x49
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	4619      	mov	r1, r3
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f004 fd6a 	bl	80107dc <show_main_page>
    // DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain);
}   
 800bd08:	bf00      	nop
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <Navigation_return>:

void Navigation_return(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
    if (screen_obj->Ishome) {
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d010      	beq.n	800bd46 <Navigation_return+0x36>
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bd32:	fb01 f303 	mul.w	r3, r1, r3
 800bd36:	4413      	add	r3, r2
 800bd38:	3349      	adds	r3, #73	@ 0x49
 800bd3a:	2265      	movs	r2, #101	@ 0x65
 800bd3c:	701a      	strb	r2, [r3, #0]
        off_testing(screen_obj);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f004 f81c 	bl	800fd7c <off_testing>
        // show_main_page(screen_obj,DWINPAGE_MAIN,screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index);
    } else {
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page);
    }
}
 800bd44:	e006      	b.n	800bd54 <Navigation_return+0x44>
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f007 fa6d 	bl	801322e <DWIN_SetPage>
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <Navigation_setting_program>:

void Navigation_setting_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]

    // Switch page
    // DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
    /* Get the setting page */
    screen_obj->page_setting = DWINPAGE_SETTING_PROGRAM;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	226b      	movs	r2, #107	@ 0x6b
 800bd6a:	f883 24eb 	strb.w	r2, [r3, #1259]	@ 0x4eb
    // Switch page password 
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password,"",strlen(""));
 800bd6e:	2300      	movs	r3, #0
 800bd70:	4a09      	ldr	r2, [pc, #36]	@ (800bd98 <Navigation_setting_program+0x3c>)
 800bd72:	f249 5160 	movw	r1, #38240	@ 0x9560
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f007 fa80 	bl	801327c <DWIN_SetText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password);
 800bd7c:	f249 5180 	movw	r1, #38272	@ 0x9580
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f007 faeb 	bl	801335c <DWIN_ClearText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 800bd86:	216e      	movs	r1, #110	@ 0x6e
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f007 fa50 	bl	801322e <DWIN_SetPage>
}
 800bd8e:	bf00      	nop
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	08019da8 	.word	0x08019da8

0800bd9c <Navigation_setting_time>:

void Navigation_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
    
    screen_obj->pre_page = DWINPAGE_SETTING_TIME;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2276      	movs	r2, #118	@ 0x76
 800bdaa:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Hour);
 800bdae:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f007 fad2 	bl	801335c <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Minute);
 800bdb8:	f249 0110 	movw	r1, #36880	@ 0x9010
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f007 facd 	bl	801335c <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Day);
 800bdc2:	f249 0120 	movw	r1, #36896	@ 0x9020
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f007 fac8 	bl	801335c <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Month);
 800bdcc:	f249 0130 	movw	r1, #36912	@ 0x9030
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f007 fac3 	bl	801335c <DWIN_ClearText>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Year);
 800bdd6:	f249 0140 	movw	r1, #36928	@ 0x9040
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f007 fabe 	bl	801335c <DWIN_ClearText>
    memset(screen_obj->Time_setting.Day,0,3);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 800bde6:	2203      	movs	r2, #3
 800bde8:	2100      	movs	r1, #0
 800bdea:	4618      	mov	r0, r3
 800bdec:	f00a ff36 	bl	8016c5c <memset>
    memset(screen_obj->Time_setting.Minute,0,3);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 800bdf6:	2203      	movs	r2, #3
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f00a ff2e 	bl	8016c5c <memset>
    memset(screen_obj->Time_setting.Month,0,3);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f203 43d7 	addw	r3, r3, #1239	@ 0x4d7
 800be06:	2203      	movs	r2, #3
 800be08:	2100      	movs	r1, #0
 800be0a:	4618      	mov	r0, r3
 800be0c:	f00a ff26 	bl	8016c5c <memset>
    memset(screen_obj->Time_setting.Year,0,3);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f203 43da 	addw	r3, r3, #1242	@ 0x4da
 800be16:	2203      	movs	r2, #3
 800be18:	2100      	movs	r1, #0
 800be1a:	4618      	mov	r0, r3
 800be1c:	f00a ff1e 	bl	8016c5c <memset>
    memset(screen_obj->Time_setting.Hour,0,3);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f203 43dd 	addw	r3, r3, #1245	@ 0x4dd
 800be26:	2203      	movs	r2, #3
 800be28:	2100      	movs	r1, #0
 800be2a:	4618      	mov	r0, r3
 800be2c:	f00a ff16 	bl	8016c5c <memset>
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_setting_time);
 800be30:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f007 fa91 	bl	801335c <DWIN_ClearText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_TIME);
 800be3a:	2176      	movs	r1, #118	@ 0x76
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f007 f9f6 	bl	801322e <DWIN_SetPage>
}
 800be42:	bf00      	nop
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <Navigation_setting_wifi>:

void Navigation_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800be4a:	b590      	push	{r4, r7, lr}
 800be4c:	b083      	sub	sp, #12
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	6039      	str	r1, [r7, #0]
    screen_obj->pre_page = DWINPAGE_SETTING_WIFI;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2275      	movs	r2, #117	@ 0x75
 800be58:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    /* show data */
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Wifi,screen_obj->Wifi_setting.Name_Wifi,strlen(screen_obj->Wifi_setting.Name_Wifi));
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f503 6493 	add.w	r4, r3, #1176	@ 0x498
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f4 f97b 	bl	8000164 <strlen>
 800be6e:	4603      	mov	r3, r0
 800be70:	b29b      	uxth	r3, r3
 800be72:	4622      	mov	r2, r4
 800be74:	f249 51a0 	movw	r1, #38304	@ 0x95a0
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f007 f9ff 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Password_Wifi,screen_obj->Wifi_setting.Password_Wifi,strlen(screen_obj->Wifi_setting.Password_Wifi));
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f203 44b6 	addw	r4, r3, #1206	@ 0x4b6
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f203 43b6 	addw	r3, r3, #1206	@ 0x4b6
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7f4 f96a 	bl	8000164 <strlen>
 800be90:	4603      	mov	r3, r0
 800be92:	b29b      	uxth	r3, r3
 800be94:	4622      	mov	r2, r4
 800be96:	f249 51d0 	movw	r1, #38352	@ 0x95d0
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f007 f9ee 	bl	801327c <DWIN_SetText>

    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 800bea0:	2175      	movs	r1, #117	@ 0x75
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f007 f9c3 	bl	801322e <DWIN_SetPage>
}
 800bea8:	bf00      	nop
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	bd90      	pop	{r4, r7, pc}

0800beb0 <Navigation_modify_program>:

void Navigation_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800beb0:	b590      	push	{r4, r7, lr}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
    screen_obj->pre_page = DWINPAGE_MODIFY_PROGRAM;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	226c      	movs	r2, #108	@ 0x6c
 800bebe:	f883 24e8 	strb.w	r2, [r3, #1256]	@ 0x4e8
    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_Program_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800bec8:	4619      	mov	r1, r3
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	440b      	add	r3, r1
 800bed2:	011b      	lsls	r3, r3, #4
 800bed4:	4413      	add	r3, r2
 800bed6:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800beda:	681c      	ldr	r4, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800bee2:	4619      	mov	r1, r3
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	460b      	mov	r3, r1
 800bee8:	005b      	lsls	r3, r3, #1
 800beea:	440b      	add	r3, r1
 800beec:	011b      	lsls	r3, r3, #4
 800beee:	4413      	add	r3, r2
 800bef0:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7f4 f934 	bl	8000164 <strlen>
 800befc:	4603      	mov	r3, r0
 800befe:	b29b      	uxth	r3, r3
 800bf00:	4622      	mov	r2, r4
 800bf02:	f44f 4115 	mov.w	r1, #38144	@ 0x9500
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f007 f9b8 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC));
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800bf12:	4619      	mov	r1, r3
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	460b      	mov	r3, r1
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	440b      	add	r3, r1
 800bf1c:	011b      	lsls	r3, r3, #4
 800bf1e:	4413      	add	r3, r2
 800bf20:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800bf24:	681c      	ldr	r4, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	460b      	mov	r3, r1
 800bf32:	005b      	lsls	r3, r3, #1
 800bf34:	440b      	add	r3, r1
 800bf36:	011b      	lsls	r3, r3, #4
 800bf38:	4413      	add	r3, r2
 800bf3a:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7f4 f90f 	bl	8000164 <strlen>
 800bf46:	4603      	mov	r3, r0
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	4622      	mov	r2, r4
 800bf4c:	f249 5120 	movw	r1, #38176	@ 0x9520
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f007 f993 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC));
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	440b      	add	r3, r1
 800bf66:	011b      	lsls	r3, r3, #4
 800bf68:	4413      	add	r3, r2
 800bf6a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800bf6e:	681c      	ldr	r4, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800bf76:	4619      	mov	r1, r3
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	440b      	add	r3, r1
 800bf80:	011b      	lsls	r3, r3, #4
 800bf82:	4413      	add	r3, r2
 800bf84:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7f4 f8ea 	bl	8000164 <strlen>
 800bf90:	4603      	mov	r3, r0
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	4622      	mov	r2, r4
 800bf96:	f249 5140 	movw	r1, #38208	@ 0x9540
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f007 f96e 	bl	801327c <DWIN_SetText>
    
    DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_modify_program);
 800bfa0:	f24a 0150 	movw	r1, #41040	@ 0xa050
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f007 f9d9 	bl	801335c <DWIN_ClearText>
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800bfaa:	216c      	movs	r1, #108	@ 0x6c
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f007 f93e 	bl	801322e <DWIN_SetPage>
}
 800bfb2:	bf00      	nop
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd90      	pop	{r4, r7, pc}

0800bfba <Navigation_detail_mainpage>:

void Navigation_detail_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	6039      	str	r1, [r7, #0]
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bfca:	4619      	mov	r1, r3
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bfd2:	fb01 f303 	mul.w	r3, r1, r3
 800bfd6:	4413      	add	r3, r2
 800bfd8:	336c      	adds	r3, #108	@ 0x6c
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b30      	cmp	r3, #48	@ 0x30
 800bfde:	d11d      	bne.n	800c01c <Navigation_detail_mainpage+0x62>
        /* change main page */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_DETAIL;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800bfee:	fb01 f303 	mul.w	r3, r1, r3
 800bff2:	4413      	add	r3, r2
 800bff4:	3349      	adds	r3, #73	@ 0x49
 800bff6:	2266      	movs	r2, #102	@ 0x66
 800bff8:	701a      	strb	r2, [r3, #0]
        // Switch page
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c000:	4619      	mov	r1, r3
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c008:	fb01 f303 	mul.w	r3, r1, r3
 800c00c:	4413      	add	r3, r2
 800c00e:	3349      	adds	r3, #73	@ 0x49
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2200      	movs	r2, #0
 800c014:	4619      	mov	r1, r3
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f004 fbe0 	bl	80107dc <show_main_page>
    }
}
 800c01c:	bf00      	nop
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <Navigation_graph_mainpage>:

void Navigation_graph_mainpage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
    /* change main page */
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN_PULSE;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c034:	4619      	mov	r1, r3
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c03c:	fb01 f303 	mul.w	r3, r1, r3
 800c040:	4413      	add	r3, r2
 800c042:	3349      	adds	r3, #73	@ 0x49
 800c044:	2267      	movs	r2, #103	@ 0x67
 800c046:	701a      	strb	r2, [r3, #0]
    // Switch page
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,(uint8_t)0);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c04e:	4619      	mov	r1, r3
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c056:	fb01 f303 	mul.w	r3, r1, r3
 800c05a:	4413      	add	r3, r2
 800c05c:	3349      	adds	r3, #73	@ 0x49
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	2200      	movs	r2, #0
 800c062:	4619      	mov	r1, r3
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f004 fbb9 	bl	80107dc <show_main_page>
}
 800c06a:	bf00      	nop
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <Navigation_Change_MainPage>:

void Navigation_Change_MainPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	6039      	str	r1, [r7, #0]
    // Change current device
    if (screen_event->data == DATA_NEXT_MAINPAGE) {
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	789b      	ldrb	r3, [r3, #2]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d111      	bne.n	800c0a8 <Navigation_Change_MainPage+0x36>
        screen_obj->curr_device++;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c08a:	3301      	adds	r3, #1
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
        if (screen_obj->curr_device == MAX_DEVICE) {
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c09a:	2b03      	cmp	r3, #3
 800c09c:	d119      	bne.n	800c0d2 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_1;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
 800c0a6:	e014      	b.n	800c0d2 <Navigation_Change_MainPage+0x60>
        }
    } else if (screen_event->data == DATA_PREV_MAINPAGE) {
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	789b      	ldrb	r3, [r3, #2]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d110      	bne.n	800c0d2 <Navigation_Change_MainPage+0x60>
        screen_obj->curr_device--;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
        if (screen_obj->curr_device == 255 ) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c0c6:	2bff      	cmp	r3, #255	@ 0xff
 800c0c8:	d103      	bne.n	800c0d2 <Navigation_Change_MainPage+0x60>
            screen_obj->curr_device = DEVICE_3;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
        }
    }
    uint8_t curr_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c0d8:	4619      	mov	r1, r3
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c0e0:	fb01 f303 	mul.w	r3, r1, r3
 800c0e4:	4413      	add	r3, r2
 800c0e6:	334b      	adds	r3, #75	@ 0x4b
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	73fb      	strb	r3, [r7, #15]

    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,curr_program);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c0fa:	fb01 f303 	mul.w	r3, r1, r3
 800c0fe:	4413      	add	r3, r2
 800c100:	3349      	adds	r3, #73	@ 0x49
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	7bfa      	ldrb	r2, [r7, #15]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f004 fb67 	bl	80107dc <show_main_page>
}
 800c10e:	bf00      	nop
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
	...

0800c118 <Navigation_Change_CaseTest>:

void Navigation_Change_CaseTest(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08e      	sub	sp, #56	@ 0x38
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c128:	4619      	mov	r1, r3
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c130:	fb01 f303 	mul.w	r3, r1, r3
 800c134:	4413      	add	r3, r2
 800c136:	334b      	adds	r3, #75	@ 0x4b
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	4619      	mov	r1, r3
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	460b      	mov	r3, r1
 800c140:	005b      	lsls	r3, r3, #1
 800c142:	440b      	add	r3, r1
 800c144:	011b      	lsls	r3, r3, #4
 800c146:	4413      	add	r3, r2
 800c148:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c158:	4619      	mov	r1, r3
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c160:	fb01 f303 	mul.w	r3, r1, r3
 800c164:	4413      	add	r3, r2
 800c166:	334b      	adds	r3, #75	@ 0x4b
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 800c16e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800c172:	6879      	ldr	r1, [r7, #4]
 800c174:	4613      	mov	r3, r2
 800c176:	005b      	lsls	r3, r3, #1
 800c178:	4413      	add	r3, r2
 800c17a:	011b      	lsls	r3, r3, #4
 800c17c:	440b      	add	r3, r1
 800c17e:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    
    // Change current case
    if (screen_event->data == DATA_PREV_CASE) {
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	789b      	ldrb	r3, [r3, #2]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d124      	bne.n	800c1da <Navigation_Change_CaseTest+0xc2>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c196:	4619      	mov	r1, r3
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c19e:	fb01 f303 	mul.w	r3, r1, r3
 800c1a2:	4413      	add	r3, r2
 800c1a4:	3348      	adds	r3, #72	@ 0x48
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d042      	beq.n	800c232 <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800c1b8:	fb03 f202 	mul.w	r2, r3, r2
 800c1bc:	440a      	add	r2, r1
 800c1be:	3248      	adds	r2, #72	@ 0x48
 800c1c0:	7812      	ldrb	r2, [r2, #0]
 800c1c2:	3a01      	subs	r2, #1
 800c1c4:	b2d0      	uxtb	r0, r2
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800c1cc:	fb01 f303 	mul.w	r3, r1, r3
 800c1d0:	4413      	add	r3, r2
 800c1d2:	3348      	adds	r3, #72	@ 0x48
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	701a      	strb	r2, [r3, #0]
 800c1d8:	e02b      	b.n	800c232 <Navigation_Change_CaseTest+0x11a>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	789b      	ldrb	r3, [r3, #2]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d127      	bne.n	800c232 <Navigation_Change_CaseTest+0x11a>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < (num_case - 1)) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c1f0:	fb01 f303 	mul.w	r3, r1, r3
 800c1f4:	4413      	add	r3, r2
 800c1f6:	3348      	adds	r3, #72	@ 0x48
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c200:	3b01      	subs	r3, #1
 800c202:	429a      	cmp	r2, r3
 800c204:	da15      	bge.n	800c232 <Navigation_Change_CaseTest+0x11a>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c20c:	6879      	ldr	r1, [r7, #4]
 800c20e:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800c212:	fb03 f202 	mul.w	r2, r3, r2
 800c216:	440a      	add	r2, r1
 800c218:	3248      	adds	r2, #72	@ 0x48
 800c21a:	7812      	ldrb	r2, [r2, #0]
 800c21c:	3201      	adds	r2, #1
 800c21e:	b2d0      	uxtb	r0, r2
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800c226:	fb01 f303 	mul.w	r3, r1, r3
 800c22a:	4413      	add	r3, r2
 800c22c:	3348      	adds	r3, #72	@ 0x48
 800c22e:	4602      	mov	r2, r0
 800c230:	701a      	strb	r2, [r3, #0]
        }
    }

    /* Show data */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1,num_case);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c238:	4619      	mov	r1, r3
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c240:	fb01 f303 	mul.w	r3, r1, r3
 800c244:	4413      	add	r3, r2
 800c246:	3348      	adds	r3, #72	@ 0x48
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c250:	f107 000c 	add.w	r0, r7, #12
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	4613      	mov	r3, r2
 800c258:	4a32      	ldr	r2, [pc, #200]	@ (800c324 <Navigation_Change_CaseTest+0x20c>)
 800c25a:	211e      	movs	r1, #30
 800c25c:	f00a fb90 	bl	8016980 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 800c260:	f107 030c 	add.w	r3, r7, #12
 800c264:	4618      	mov	r0, r3
 800c266:	f7f3 ff7d 	bl	8000164 <strlen>
 800c26a:	4603      	mov	r3, r0
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	f107 020c 	add.w	r2, r7, #12
 800c272:	f249 3180 	movw	r1, #37760	@ 0x9380
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f007 f800 	bl	801327c <DWIN_SetText>
    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case] == '0') {
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c282:	4619      	mov	r1, r3
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c28a:	fb01 f303 	mul.w	r3, r1, r3
 800c28e:	4413      	add	r3, r2
 800c290:	3370      	adds	r3, #112	@ 0x70
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	f892 24e9 	ldrb.w	r2, [r2, #1257]	@ 0x4e9
 800c29a:	4610      	mov	r0, r2
 800c29c:	6879      	ldr	r1, [r7, #4]
 800c29e:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800c2a2:	fb00 f202 	mul.w	r2, r0, r2
 800c2a6:	440a      	add	r2, r1
 800c2a8:	3248      	adds	r2, #72	@ 0x48
 800c2aa:	7812      	ldrb	r2, [r2, #0]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	2b30      	cmp	r3, #48	@ 0x30
 800c2b2:	d107      	bne.n	800c2c4 <Navigation_Change_CaseTest+0x1ac>
        DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0xF800);
 800c2b4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800c2b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f007 f85f 	bl	8013380 <DWIN_SetColorText>
 800c2c2:	e006      	b.n	800c2d2 <Navigation_Change_CaseTest+0x1ba>
    } else {
        DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0x01ED);
 800c2c4:	f240 12ed 	movw	r2, #493	@ 0x1ed
 800c2c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f007 f857 	bl	8013380 <DWIN_SetColorText>
    }
    // DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_RESULT,_Screen.IC_Testerx[selectedProgram].data_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case],num_pin);
    DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * num_pin]),num_pin);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c2d8:	4619      	mov	r1, r3
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c2e0:	fb01 f303 	mul.w	r3, r1, r3
 800c2e4:	4413      	add	r3, r2
 800c2e6:	3364      	adds	r3, #100	@ 0x64
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	f892 24e9 	ldrb.w	r2, [r2, #1257]	@ 0x4e9
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	6879      	ldr	r1, [r7, #4]
 800c2f4:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800c2f8:	fb00 f202 	mul.w	r2, r0, r2
 800c2fc:	440a      	add	r2, r1
 800c2fe:	3248      	adds	r2, #72	@ 0x48
 800c300:	7812      	ldrb	r2, [r2, #0]
 800c302:	4611      	mov	r1, r2
 800c304:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800c308:	fb01 f202 	mul.w	r2, r1, r2
 800c30c:	441a      	add	r2, r3
 800c30e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c312:	f244 1150 	movw	r1, #16720	@ 0x4150
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f007 f890 	bl	801343c <DWIN_SetArray_Icon>
}
 800c31c:	bf00      	nop
 800c31e:	3730      	adds	r7, #48	@ 0x30
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	08019dac 	.word	0x08019dac

0800c328 <Navigation_Change_CasePulse>:

void Navigation_Change_CasePulse(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
    if (screen_event->data == DATA_PREV_CASE) {
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	789b      	ldrb	r3, [r3, #2]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d124      	bne.n	800c384 <Navigation_Change_CasePulse+0x5c>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case > 0) {
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c340:	4619      	mov	r1, r3
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c348:	fb01 f303 	mul.w	r3, r1, r3
 800c34c:	4413      	add	r3, r2
 800c34e:	3348      	adds	r3, #72	@ 0x48
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d03e      	beq.n	800c3d4 <Navigation_Change_CasePulse+0xac>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case--;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c35c:	6879      	ldr	r1, [r7, #4]
 800c35e:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800c362:	fb03 f202 	mul.w	r2, r3, r2
 800c366:	440a      	add	r2, r1
 800c368:	3248      	adds	r2, #72	@ 0x48
 800c36a:	7812      	ldrb	r2, [r2, #0]
 800c36c:	3a01      	subs	r2, #1
 800c36e:	b2d0      	uxtb	r0, r2
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800c376:	fb01 f303 	mul.w	r3, r1, r3
 800c37a:	4413      	add	r3, r2
 800c37c:	3348      	adds	r3, #72	@ 0x48
 800c37e:	4602      	mov	r2, r0
 800c380:	701a      	strb	r2, [r3, #0]
 800c382:	e027      	b.n	800c3d4 <Navigation_Change_CasePulse+0xac>
        }
    } else if (screen_event->data == DATA_NEXT_CASE) {
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	789b      	ldrb	r3, [r3, #2]
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d123      	bne.n	800c3d4 <Navigation_Change_CasePulse+0xac>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case < 1) {
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c392:	4619      	mov	r1, r3
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c39a:	fb01 f303 	mul.w	r3, r1, r3
 800c39e:	4413      	add	r3, r2
 800c3a0:	3348      	adds	r3, #72	@ 0x48
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d115      	bne.n	800c3d4 <Navigation_Change_CasePulse+0xac>
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case++;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c3ae:	6879      	ldr	r1, [r7, #4]
 800c3b0:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800c3b4:	fb03 f202 	mul.w	r2, r3, r2
 800c3b8:	440a      	add	r2, r1
 800c3ba:	3248      	adds	r2, #72	@ 0x48
 800c3bc:	7812      	ldrb	r2, [r2, #0]
 800c3be:	3201      	adds	r2, #1
 800c3c0:	b2d0      	uxtb	r0, r2
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800c3c8:	fb01 f303 	mul.w	r3, r1, r3
 800c3cc:	4413      	add	r3, r2
 800c3ce:	3348      	adds	r3, #72	@ 0x48
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	701a      	strb	r2, [r3, #0]
        }
    }

    show_pulse(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_case);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c3da:	4619      	mov	r1, r3
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c3e2:	fb01 f303 	mul.w	r3, r1, r3
 800c3e6:	4413      	add	r3, r2
 800c3e8:	3348      	adds	r3, #72	@ 0x48
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f003 fe18 	bl	8010024 <show_pulse>
}
 800c3f4:	bf00      	nop
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <Navigation_Finish_Review>:

void Navigation_Finish_Review(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800c402:	af02      	add	r7, sp, #8
 800c404:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c408:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c40c:	6018      	str	r0, [r3, #0]
 800c40e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c412:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 800c416:	6019      	str	r1, [r3, #0]
    uint8_t curr_num_ic = ++screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
 800c418:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c41c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c426:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800c42a:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 800c42e:	6811      	ldr	r1, [r2, #0]
 800c430:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800c434:	fb03 f202 	mul.w	r2, r3, r2
 800c438:	440a      	add	r2, r1
 800c43a:	324a      	adds	r2, #74	@ 0x4a
 800c43c:	7812      	ldrb	r2, [r2, #0]
 800c43e:	3201      	adds	r2, #1
 800c440:	b2d0      	uxtb	r0, r2
 800c442:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800c446:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 800c44a:	6811      	ldr	r1, [r2, #0]
 800c44c:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800c450:	fb03 f202 	mul.w	r2, r3, r2
 800c454:	440a      	add	r2, r1
 800c456:	324a      	adds	r2, #74	@ 0x4a
 800c458:	4601      	mov	r1, r0
 800c45a:	7011      	strb	r1, [r2, #0]
 800c45c:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800c460:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 800c464:	6812      	ldr	r2, [r2, #0]
 800c466:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800c46a:	fb01 f303 	mul.w	r3, r1, r3
 800c46e:	4413      	add	r3, r2
 800c470:	334a      	adds	r3, #74	@ 0x4a
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800c478:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c47c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c486:	4619      	mov	r1, r3
 800c488:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c48c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c496:	fb01 f303 	mul.w	r3, r1, r3
 800c49a:	4413      	add	r3, r2
 800c49c:	334b      	adds	r3, #75	@ 0x4b
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
 800c4a4:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800c4a8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c4ac:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c4b0:	6819      	ldr	r1, [r3, #0]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	4413      	add	r3, r2
 800c4b8:	011b      	lsls	r3, r3, #4
 800c4ba:	440b      	add	r3, r1
 800c4bc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f008 fb5f 	bl	8014b86 <atoi>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
    screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 800c4ce:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c4d2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c4dc:	4619      	mov	r1, r3
 800c4de:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c4e2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c4ec:	fb01 f303 	mul.w	r3, r1, r3
 800c4f0:	4413      	add	r3, r2
 800c4f2:	3349      	adds	r3, #73	@ 0x49
 800c4f4:	2265      	movs	r2, #101	@ 0x65
 800c4f6:	701a      	strb	r2, [r3, #0]
    /* show number of testing ic */
    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"%d / %d",curr_num_ic,num_ic);
 800c4f8:	f897 2227 	ldrb.w	r2, [r7, #551]	@ 0x227
 800c4fc:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 800c500:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	4613      	mov	r3, r2
 800c508:	4ac2      	ldr	r2, [pc, #776]	@ (800c814 <Navigation_Finish_Review+0x418>)
 800c50a:	211e      	movs	r1, #30
 800c50c:	f00a fa38 	bl	8016980 <sniprintf>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
 800c510:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800c514:	4618      	mov	r0, r3
 800c516:	f7f3 fe25 	bl	8000164 <strlen>
 800c51a:	4603      	mov	r3, r0
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	f507 7201 	add.w	r2, r7, #516	@ 0x204
 800c522:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 800c526:	f5a1 7009 	sub.w	r0, r1, #548	@ 0x224
 800c52a:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 800c52e:	6800      	ldr	r0, [r0, #0]
 800c530:	f006 fea4 	bl	801327c <DWIN_SetText>
    if (curr_num_ic < num_ic) {
 800c534:	f897 2227 	ldrb.w	r2, [r7, #551]	@ 0x227
 800c538:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 800c53c:	429a      	cmp	r2, r3
 800c53e:	f080 8249 	bcs.w	800c9d4 <Navigation_Finish_Review+0x5d8>
        /* switch page */
        show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
 800c542:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c546:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c550:	4619      	mov	r1, r3
 800c552:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c556:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c560:	fb01 f303 	mul.w	r3, r1, r3
 800c564:	4413      	add	r3, r2
 800c566:	3349      	adds	r3, #73	@ 0x49
 800c568:	7819      	ldrb	r1, [r3, #0]
 800c56a:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800c56e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c572:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c576:	6818      	ldr	r0, [r3, #0]
 800c578:	f004 f930 	bl	80107dc <show_main_page>

        /* free array using in have new data test */
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
 800c57c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c580:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c58a:	4619      	mov	r1, r3
 800c58c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c590:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c59a:	fb01 f303 	mul.w	r3, r1, r3
 800c59e:	4413      	add	r3, r2
 800c5a0:	3374      	adds	r3, #116	@ 0x74
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d02b      	beq.n	800c600 <Navigation_Finish_Review+0x204>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
 800c5a8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c5ac:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c5bc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c5c6:	fb01 f303 	mul.w	r3, r1, r3
 800c5ca:	4413      	add	r3, r2
 800c5cc:	3374      	adds	r3, #116	@ 0x74
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f008 fae5 	bl	8014ba0 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = NULL;
 800c5d6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c5da:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c5ea:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c5f4:	fb01 f303 	mul.w	r3, r1, r3
 800c5f8:	4413      	add	r3, r2
 800c5fa:	3374      	adds	r3, #116	@ 0x74
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
 800c600:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c604:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c60e:	4619      	mov	r1, r3
 800c610:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c614:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c61e:	fb01 f303 	mul.w	r3, r1, r3
 800c622:	4413      	add	r3, r2
 800c624:	335c      	adds	r3, #92	@ 0x5c
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d02b      	beq.n	800c684 <Navigation_Finish_Review+0x288>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
 800c62c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c630:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c63a:	4619      	mov	r1, r3
 800c63c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c640:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c64a:	fb01 f303 	mul.w	r3, r1, r3
 800c64e:	4413      	add	r3, r2
 800c650:	335c      	adds	r3, #92	@ 0x5c
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4618      	mov	r0, r3
 800c656:	f008 faa3 	bl	8014ba0 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = NULL;
 800c65a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c65e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c668:	4619      	mov	r1, r3
 800c66a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c66e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c678:	fb01 f303 	mul.w	r3, r1, r3
 800c67c:	4413      	add	r3, r2
 800c67e:	335c      	adds	r3, #92	@ 0x5c
 800c680:	2200      	movs	r2, #0
 800c682:	601a      	str	r2, [r3, #0]
        }
        
        if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
 800c684:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c688:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c692:	4619      	mov	r1, r3
 800c694:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c698:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c6a2:	fb01 f303 	mul.w	r3, r1, r3
 800c6a6:	4413      	add	r3, r2
 800c6a8:	3364      	adds	r3, #100	@ 0x64
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d02b      	beq.n	800c708 <Navigation_Finish_Review+0x30c>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
 800c6b0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c6b4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c6be:	4619      	mov	r1, r3
 800c6c0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c6c4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c6ce:	fb01 f303 	mul.w	r3, r1, r3
 800c6d2:	4413      	add	r3, r2
 800c6d4:	3364      	adds	r3, #100	@ 0x64
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f008 fa61 	bl	8014ba0 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].icon_result = NULL;
 800c6de:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c6e2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c6f2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c6fc:	fb01 f303 	mul.w	r3, r1, r3
 800c700:	4413      	add	r3, r2
 800c702:	3364      	adds	r3, #100	@ 0x64
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
 800c708:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c70c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c716:	4619      	mov	r1, r3
 800c718:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c71c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c726:	fb01 f303 	mul.w	r3, r1, r3
 800c72a:	4413      	add	r3, r2
 800c72c:	3368      	adds	r3, #104	@ 0x68
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d02b      	beq.n	800c78c <Navigation_Finish_Review+0x390>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
 800c734:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c738:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c742:	4619      	mov	r1, r3
 800c744:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c748:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c752:	fb01 f303 	mul.w	r3, r1, r3
 800c756:	4413      	add	r3, r2
 800c758:	3368      	adds	r3, #104	@ 0x68
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4618      	mov	r0, r3
 800c75e:	f008 fa1f 	bl	8014ba0 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit = NULL;
 800c762:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c766:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c770:	4619      	mov	r1, r3
 800c772:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c776:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c780:	fb01 f303 	mul.w	r3, r1, r3
 800c784:	4413      	add	r3, r2
 800c786:	3368      	adds	r3, #104	@ 0x68
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
 800c78c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c790:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c79a:	4619      	mov	r1, r3
 800c79c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c7a0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c7aa:	fb01 f303 	mul.w	r3, r1, r3
 800c7ae:	4413      	add	r3, r2
 800c7b0:	3370      	adds	r3, #112	@ 0x70
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d02f      	beq.n	800c818 <Navigation_Finish_Review+0x41c>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
 800c7b8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c7bc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c7cc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c7d6:	fb01 f303 	mul.w	r3, r1, r3
 800c7da:	4413      	add	r3, r2
 800c7dc:	3370      	adds	r3, #112	@ 0x70
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f008 f9dd 	bl	8014ba0 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case = NULL;
 800c7e6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c7ea:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c7fa:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c804:	fb01 f303 	mul.w	r3, r1, r3
 800c808:	4413      	add	r3, r2
 800c80a:	3370      	adds	r3, #112	@ 0x70
 800c80c:	2200      	movs	r2, #0
 800c80e:	601a      	str	r2, [r3, #0]
 800c810:	e002      	b.n	800c818 <Navigation_Finish_Review+0x41c>
 800c812:	bf00      	nop
 800c814:	08019db8 	.word	0x08019db8
        }

        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
 800c818:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c81c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c826:	4619      	mov	r1, r3
 800c828:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c82c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c836:	fb01 f303 	mul.w	r3, r1, r3
 800c83a:	4413      	add	r3, r2
 800c83c:	3360      	adds	r3, #96	@ 0x60
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d02b      	beq.n	800c89c <Navigation_Finish_Review+0x4a0>
            free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800c844:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c848:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c852:	4619      	mov	r1, r3
 800c854:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c858:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c862:	fb01 f303 	mul.w	r3, r1, r3
 800c866:	4413      	add	r3, r2
 800c868:	3360      	adds	r3, #96	@ 0x60
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f008 f997 	bl	8014ba0 <free>
            screen_obj->IC_Testerx[screen_obj->curr_device].data_result = NULL;
 800c872:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c876:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c880:	4619      	mov	r1, r3
 800c882:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c886:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800c890:	fb01 f303 	mul.w	r3, r1, r3
 800c894:	4413      	add	r3, r2
 800c896:	3360      	adds	r3, #96	@ 0x60
 800c898:	2200      	movs	r2, #0
 800c89a:	601a      	str	r2, [r3, #0]
        }

        /* check error */
        managerTX_CAN_t *check_TX_CAN = malloc(sizeof(managerTX_CAN_t));
 800c89c:	2008      	movs	r0, #8
 800c89e:	f008 f977 	bl	8014b90 <malloc>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
        check_TX_CAN->ID = CAN_iso[screen_obj->curr_device].send_arbitration_id;
 800c8a8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c8ac:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800c8bc:	494b      	ldr	r1, [pc, #300]	@ (800c9ec <Navigation_Finish_Review+0x5f0>)
 800c8be:	0192      	lsls	r2, r2, #6
 800c8c0:	440a      	add	r2, r1
 800c8c2:	6812      	ldr	r2, [r2, #0]
 800c8c4:	601a      	str	r2, [r3, #0]
        check_TX_CAN->TX_Done = false;
 800c8c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	711a      	strb	r2, [r3, #4]
        OS_task_post_event(AO_task_can_bus,START_TIMEOUT_TX,(uint8_t *)&check_TX_CAN,sizeof(managerTX_CAN_t));
 800c8ce:	4b48      	ldr	r3, [pc, #288]	@ (800c9f0 <Navigation_Finish_Review+0x5f4>)
 800c8d0:	6818      	ldr	r0, [r3, #0]
 800c8d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800c8d6:	2308      	movs	r3, #8
 800c8d8:	2102      	movs	r1, #2
 800c8da:	f007 ff27 	bl	801472c <OS_task_post_event>

        /* send data to tester */
        uint8_t can_send_buf[500];
        can_send_buf[0] = screen_obj->Program_Testx[index_program].num_pin;
 800c8de:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800c8e2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c8e6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c8ea:	6819      	ldr	r1, [r3, #0]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	4413      	add	r3, r2
 800c8f2:	011b      	lsls	r3, r3, #4
 800c8f4:	440b      	add	r3, r1
 800c8f6:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800c8fa:	781a      	ldrb	r2, [r3, #0]
 800c8fc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c900:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800c904:	701a      	strb	r2, [r3, #0]
        can_send_buf[1] = '\0';
 800c906:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c90a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800c90e:	2200      	movs	r2, #0
 800c910:	705a      	strb	r2, [r3, #1]
        can_send_buf[2] = screen_obj->Program_Testx[index_program].num_case;
 800c912:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800c916:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c91a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c91e:	6819      	ldr	r1, [r3, #0]
 800c920:	4613      	mov	r3, r2
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	4413      	add	r3, r2
 800c926:	011b      	lsls	r3, r3, #4
 800c928:	440b      	add	r3, r1
 800c92a:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800c92e:	781a      	ldrb	r2, [r3, #0]
 800c930:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c934:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800c938:	709a      	strb	r2, [r3, #2]
        can_send_buf[3] = '\0';
 800c93a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c93e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800c942:	2200      	movs	r2, #0
 800c944:	70da      	strb	r2, [r3, #3]
        memcpy(&can_send_buf[4],screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
 800c946:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800c94a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c94e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	4613      	mov	r3, r2
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	4413      	add	r3, r2
 800c95a:	011b      	lsls	r3, r3, #4
 800c95c:	440b      	add	r3, r1
 800c95e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c962:	6818      	ldr	r0, [r3, #0]
 800c964:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800c968:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c96c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c970:	6819      	ldr	r1, [r3, #0]
 800c972:	4613      	mov	r3, r2
 800c974:	005b      	lsls	r3, r3, #1
 800c976:	4413      	add	r3, r2
 800c978:	011b      	lsls	r3, r3, #4
 800c97a:	440b      	add	r3, r1
 800c97c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	461a      	mov	r2, r3
 800c984:	f107 030c 	add.w	r3, r7, #12
 800c988:	3304      	adds	r3, #4
 800c98a:	4601      	mov	r1, r0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f00a faae 	bl	8016eee <memcpy>
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len + 4);
 800c992:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c996:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800c9a0:	019b      	lsls	r3, r3, #6
 800c9a2:	4a12      	ldr	r2, [pc, #72]	@ (800c9ec <Navigation_Finish_Review+0x5f0>)
 800c9a4:	1898      	adds	r0, r3, r2
 800c9a6:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800c9aa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c9ae:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c9b2:	6819      	ldr	r1, [r3, #0]
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	005b      	lsls	r3, r3, #1
 800c9b8:	4413      	add	r3, r2
 800c9ba:	011b      	lsls	r3, r3, #4
 800c9bc:	440b      	add	r3, r1
 800c9be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c9c2:	881b      	ldrh	r3, [r3, #0]
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	f107 030c 	add.w	r3, r7, #12
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	f007 fb47 	bl	8014060 <isotp_send>
    } else { /* testing enough number */ 
        off_testing(screen_obj);

    }   
}
 800c9d2:	e006      	b.n	800c9e2 <Navigation_Finish_Review+0x5e6>
        off_testing(screen_obj);
 800c9d4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800c9d8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800c9dc:	6818      	ldr	r0, [r3, #0]
 800c9de:	f003 f9cd 	bl	800fd7c <off_testing>
}
 800c9e2:	bf00      	nop
 800c9e4:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	200004bc 	.word	0x200004bc
 800c9f0:	0801a668 	.word	0x0801a668

0800c9f4 <Navigation_Information>:

void Navigation_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]

    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_INFORMATION);
 800c9fe:	216f      	movs	r1, #111	@ 0x6f
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f006 fc14 	bl	801322e <DWIN_SetPage>
}
 800ca06:	bf00      	nop
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <Navigation_Logging>:

void Navigation_Logging(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
    /* show data */
    
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_LOGGING);
 800ca18:	2170      	movs	r1, #112	@ 0x70
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f006 fc07 	bl	801322e <DWIN_SetPage>
}
 800ca20:	bf00      	nop
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <ON_OFF_Button>:

void Navigation_Next_PrevPage(Screen_t *const screen_obj, screen_event_t *const screen_event) {

}

void ON_OFF_Button(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800ca28:	b5b0      	push	{r4, r5, r7, lr}
 800ca2a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800ca2e:	af02      	add	r7, sp, #8
 800ca30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ca34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ca38:	6018      	str	r0, [r3, #0]
 800ca3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ca3e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800ca42:	6019      	str	r1, [r3, #0]
    // do sth
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state == false) { // dang off -> bat dau 
 800ca44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ca48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ca52:	4619      	mov	r1, r3
 800ca54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ca58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ca62:	fb01 f303 	mul.w	r3, r1, r3
 800ca66:	4413      	add	r3, r2
 800ca68:	334c      	adds	r3, #76	@ 0x4c
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	f083 0301 	eor.w	r3, r3, #1
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 811f 	beq.w	800ccb6 <ON_OFF_Button+0x28e>
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
 800ca78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ca7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ca86:	4619      	mov	r1, r3
 800ca88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ca8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ca96:	fb01 f303 	mul.w	r3, r1, r3
 800ca9a:	4413      	add	r3, r2
 800ca9c:	334a      	adds	r3, #74	@ 0x4a
 800ca9e:	2200      	movs	r2, #0
 800caa0:	701a      	strb	r2, [r3, #0]
        screen_obj->IC_Testerx[screen_obj->curr_device].state = true;
 800caa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800caa6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800cab0:	4619      	mov	r1, r3
 800cab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cab6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800cac0:	fb01 f303 	mul.w	r3, r1, r3
 800cac4:	4413      	add	r3, r2
 800cac6:	334c      	adds	r3, #76	@ 0x4c
 800cac8:	2201      	movs	r2, #1
 800caca:	701a      	strb	r2, [r3, #0]
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800cacc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cad0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800cada:	4619      	mov	r1, r3
 800cadc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cae0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800caea:	fb01 f303 	mul.w	r3, r1, r3
 800caee:	4413      	add	r3, r2
 800caf0:	334c      	adds	r3, #76	@ 0x4c
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	461a      	mov	r2, r3
 800caf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cafa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cafe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800cb02:	6818      	ldr	r0, [r3, #0]
 800cb04:	f006 fc6d 	bl	80133e2 <DWIN_SetVariable_Icon>
    
        /* Send data to esp32 status device */
        uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800cb08:	2008      	movs	r0, #8
 800cb0a:	f008 f841 	bl	8014b90 <malloc>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
        data_send_esp32->data = (char *)malloc(50);
 800cb14:	f8d7 4200 	ldr.w	r4, [r7, #512]	@ 0x200
 800cb18:	2032      	movs	r0, #50	@ 0x32
 800cb1a:	f008 f839 	bl	8014b90 <malloc>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	6023      	str	r3, [r4, #0]
        if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800cb22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cb26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800cb30:	4619      	mov	r1, r3
 800cb32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cb36:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800cb40:	fb01 f303 	mul.w	r3, r1, r3
 800cb44:	4413      	add	r3, r2
 800cb46:	334c      	adds	r3, #76	@ 0x4c
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d055      	beq.n	800cbfa <ON_OFF_Button+0x1d2>
            sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800cb4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800cb52:	6818      	ldr	r0, [r3, #0]
 800cb54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cb58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800cb62:	1c59      	adds	r1, r3, #1
 800cb64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cb68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800cb72:	461c      	mov	r4, r3
 800cb74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cb78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800cb82:	fb04 f303 	mul.w	r3, r4, r3
 800cb86:	4413      	add	r3, r2
 800cb88:	334b      	adds	r3, #75	@ 0x4b
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	461c      	mov	r4, r3
 800cb8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cb92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	4623      	mov	r3, r4
 800cb9a:	005b      	lsls	r3, r3, #1
 800cb9c:	4423      	add	r3, r4
 800cb9e:	011b      	lsls	r3, r3, #4
 800cba0:	4413      	add	r3, r2
 800cba2:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cba6:	681c      	ldr	r4, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800cba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cbac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800cbb6:	461d      	mov	r5, r3
 800cbb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cbbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800cbc6:	fb05 f303 	mul.w	r3, r5, r3
 800cbca:	4413      	add	r3, r2
 800cbcc:	334b      	adds	r3, #75	@ 0x4b
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	461d      	mov	r5, r3
            sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800cbd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cbd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	462b      	mov	r3, r5
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	442b      	add	r3, r5
 800cbe2:	011b      	lsls	r3, r3, #4
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	4623      	mov	r3, r4
 800cbf0:	460a      	mov	r2, r1
 800cbf2:	49a4      	ldr	r1, [pc, #656]	@ (800ce84 <ON_OFF_Button+0x45c>)
 800cbf4:	f009 fefa 	bl	80169ec <siprintf>
 800cbf8:	e04a      	b.n	800cc90 <ON_OFF_Button+0x268>
        } else {
            sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800cbfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800cbfe:	6818      	ldr	r0, [r3, #0]
 800cc00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cc04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800cc0e:	4619      	mov	r1, r3
 800cc10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cc14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800cc1e:	fb01 f303 	mul.w	r3, r1, r3
 800cc22:	4413      	add	r3, r2
 800cc24:	334b      	adds	r3, #75	@ 0x4b
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cc2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	460b      	mov	r3, r1
 800cc36:	005b      	lsls	r3, r3, #1
 800cc38:	440b      	add	r3, r1
 800cc3a:	011b      	lsls	r3, r3, #4
 800cc3c:	4413      	add	r3, r2
 800cc3e:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800cc42:	6819      	ldr	r1, [r3, #0]
            screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800cc44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cc48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800cc52:	461c      	mov	r4, r3
 800cc54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cc58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800cc62:	fb04 f303 	mul.w	r3, r4, r3
 800cc66:	4413      	add	r3, r2
 800cc68:	334b      	adds	r3, #75	@ 0x4b
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	461c      	mov	r4, r3
            sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800cc6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cc72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	4623      	mov	r3, r4
 800cc7a:	005b      	lsls	r3, r3, #1
 800cc7c:	4423      	add	r3, r4
 800cc7e:	011b      	lsls	r3, r3, #4
 800cc80:	4413      	add	r3, r2
 800cc82:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	460a      	mov	r2, r1
 800cc8a:	497f      	ldr	r1, [pc, #508]	@ (800ce88 <ON_OFF_Button+0x460>)
 800cc8c:	f009 feae 	bl	80169ec <siprintf>
        }
        data_send_esp32->len = strlen(data_send_esp32->data);
 800cc90:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f8d7 4200 	ldr.w	r4, [r7, #512]	@ 0x200
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7f3 fa62 	bl	8000164 <strlen>
 800cca0:	4603      	mov	r3, r0
 800cca2:	6063      	str	r3, [r4, #4]
        OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800cca4:	4b79      	ldr	r3, [pc, #484]	@ (800ce8c <ON_OFF_Button+0x464>)
 800cca6:	6818      	ldr	r0, [r3, #0]
 800cca8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800ccac:	2308      	movs	r3, #8
 800ccae:	2100      	movs	r1, #0
 800ccb0:	f007 fd3c 	bl	801472c <OS_task_post_event>
 800ccb4:	e01b      	b.n	800ccee <ON_OFF_Button+0x2c6>
    } else { // dang on -> off
        /* luu vao sd, gui cho esp32 len app */
        screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain = DWINPAGE_MAIN;
 800ccb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ccba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ccca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ccd4:	fb01 f303 	mul.w	r3, r1, r3
 800ccd8:	4413      	add	r3, r2
 800ccda:	3349      	adds	r3, #73	@ 0x49
 800ccdc:	2265      	movs	r2, #101	@ 0x65
 800ccde:	701a      	strb	r2, [r3, #0]
        off_testing(screen_obj);
 800cce0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cce4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cce8:	6818      	ldr	r0, [r3, #0]
 800ccea:	f003 f847 	bl	800fd7c <off_testing>
    }
    
    /* Send data test */
    // screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800ccee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ccf2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cd02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800cd0c:	fb01 f303 	mul.w	r3, r1, r3
 800cd10:	4413      	add	r3, r2
 800cd12:	334c      	adds	r3, #76	@ 0x4c
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 80ae 	beq.w	800ce78 <ON_OFF_Button+0x450>
        uint8_t can_send_buf[500];
        uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800cd1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cd20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cd30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800cd3a:	fb01 f303 	mul.w	r3, r1, r3
 800cd3e:	4413      	add	r3, r2
 800cd40:	334b      	adds	r3, #75	@ 0x4b
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        // uint8_t num_test_ic = screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic;
        // memcpy(can_send_buf,&num_test_ic,1);
        can_send_buf[0] = screen_obj->Program_Testx[index_program].num_pin;
 800cd48:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800cd4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cd50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cd54:	6819      	ldr	r1, [r3, #0]
 800cd56:	4613      	mov	r3, r2
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	4413      	add	r3, r2
 800cd5c:	011b      	lsls	r3, r3, #4
 800cd5e:	440b      	add	r3, r1
 800cd60:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800cd64:	781a      	ldrb	r2, [r3, #0]
 800cd66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cd6a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800cd6e:	701a      	strb	r2, [r3, #0]
        can_send_buf[1] = '\0';
 800cd70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cd74:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800cd78:	2200      	movs	r2, #0
 800cd7a:	705a      	strb	r2, [r3, #1]
        can_send_buf[2] = screen_obj->Program_Testx[index_program].num_case;
 800cd7c:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800cd80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cd84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cd88:	6819      	ldr	r1, [r3, #0]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	4413      	add	r3, r2
 800cd90:	011b      	lsls	r3, r3, #4
 800cd92:	440b      	add	r3, r1
 800cd94:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800cd98:	781a      	ldrb	r2, [r3, #0]
 800cd9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cd9e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800cda2:	709a      	strb	r2, [r3, #2]
        can_send_buf[3] = '\0';
 800cda4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cda8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800cdac:	2200      	movs	r2, #0
 800cdae:	70da      	strb	r2, [r3, #3]
        memcpy(&can_send_buf[4],screen_obj->Program_Testx[index_program].data_test,screen_obj->Program_Testx[index_program].data_test_len);
 800cdb0:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800cdb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cdb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cdbc:	6819      	ldr	r1, [r3, #0]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	005b      	lsls	r3, r3, #1
 800cdc2:	4413      	add	r3, r2
 800cdc4:	011b      	lsls	r3, r3, #4
 800cdc6:	440b      	add	r3, r1
 800cdc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cdcc:	6818      	ldr	r0, [r3, #0]
 800cdce:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800cdd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800cdd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cdda:	6819      	ldr	r1, [r3, #0]
 800cddc:	4613      	mov	r3, r2
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	4413      	add	r3, r2
 800cde2:	011b      	lsls	r3, r3, #4
 800cde4:	440b      	add	r3, r1
 800cde6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	461a      	mov	r2, r3
 800cdee:	f107 0308 	add.w	r3, r7, #8
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	4601      	mov	r1, r0
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f00a f879 	bl	8016eee <memcpy>
        isotp_send(&CAN_iso[screen_obj->curr_device],can_send_buf,screen_obj->Program_Testx[index_program].data_test_len + 4);
 800cdfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ce00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ce0a:	019b      	lsls	r3, r3, #6
 800ce0c:	4a20      	ldr	r2, [pc, #128]	@ (800ce90 <ON_OFF_Button+0x468>)
 800ce0e:	1898      	adds	r0, r3, r2
 800ce10:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800ce14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ce18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ce1c:	6819      	ldr	r1, [r3, #0]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	4413      	add	r3, r2
 800ce24:	011b      	lsls	r3, r3, #4
 800ce26:	440b      	add	r3, r1
 800ce28:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	3304      	adds	r3, #4
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	f107 0308 	add.w	r3, r7, #8
 800ce36:	4619      	mov	r1, r3
 800ce38:	f007 f912 	bl	8014060 <isotp_send>

        /* check error */
        managerTX_CAN_t *check_TX_CAN = malloc(sizeof(managerTX_CAN_t));
 800ce3c:	2008      	movs	r0, #8
 800ce3e:	f007 fea7 	bl	8014b90 <malloc>
 800ce42:	4603      	mov	r3, r0
 800ce44:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
        check_TX_CAN->ID = (uint32_t)(0x471 + screen_obj->curr_device);
 800ce48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ce4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ce56:	f203 4271 	addw	r2, r3, #1137	@ 0x471
 800ce5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800ce5e:	601a      	str	r2, [r3, #0]
        check_TX_CAN->TX_Done = false;
 800ce60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800ce64:	2200      	movs	r2, #0
 800ce66:	711a      	strb	r2, [r3, #4]
        OS_task_post_event(AO_task_can_bus,START_TIMEOUT_TX,(uint8_t *)&check_TX_CAN,sizeof(managerTX_CAN_t));
 800ce68:	4b0a      	ldr	r3, [pc, #40]	@ (800ce94 <ON_OFF_Button+0x46c>)
 800ce6a:	6818      	ldr	r0, [r3, #0]
 800ce6c:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 800ce70:	2308      	movs	r3, #8
 800ce72:	2102      	movs	r1, #2
 800ce74:	f007 fc5a 	bl	801472c <OS_task_post_event>
    }
    
}
 800ce78:	bf00      	nop
 800ce7a:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bdb0      	pop	{r4, r5, r7, pc}
 800ce82:	bf00      	nop
 800ce84:	08019dc0 	.word	0x08019dc0
 800ce88:	08019dd4 	.word	0x08019dd4
 800ce8c:	0801acb8 	.word	0x0801acb8
 800ce90:	200004bc 	.word	0x200004bc
 800ce94:	0801a668 	.word	0x0801a668

0800ce98 <select_running_program>:

void select_running_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
    uint8_t programID = screen_event->data; // Get new index program
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	789b      	ldrb	r3, [r3, #2]
 800cea6:	73fb      	strb	r3, [r7, #15]

    /* Show data correspond with new index program */
    Screen_ShowData_Mainpage(screen_obj,programID);
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f001 ff21 	bl	800ecf4 <Screen_ShowData_Mainpage>
}
 800ceb2:	bf00      	nop
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <select_modify_program>:

void select_modify_program(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800cebc:	b5b0      	push	{r4, r5, r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
    // Get the index modify program 
    uint8_t index_program = screen_event->data;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	789b      	ldrb	r3, [r3, #2]
 800ceca:	75fb      	strb	r3, [r7, #23]
    screen_obj->modify_program_index = index_program;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	7dfa      	ldrb	r2, [r7, #23]
 800ced0:	f883 24ea 	strb.w	r2, [r3, #1258]	@ 0x4ea
    
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800ced4:	7dfa      	ldrb	r2, [r7, #23]
 800ced6:	6879      	ldr	r1, [r7, #4]
 800ced8:	4613      	mov	r3, r2
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	4413      	add	r3, r2
 800cede:	011b      	lsls	r3, r3, #4
 800cee0:	440b      	add	r3, r1
 800cee2:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7f3 f93b 	bl	8000164 <strlen>
 800ceee:	4603      	mov	r3, r0
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	3309      	adds	r3, #9
 800cef4:	75bb      	strb	r3, [r7, #22]
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 800cef6:	7dfa      	ldrb	r2, [r7, #23]
 800cef8:	6879      	ldr	r1, [r7, #4]
 800cefa:	4613      	mov	r3, r2
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	4413      	add	r3, r2
 800cf00:	011b      	lsls	r3, r3, #4
 800cf02:	440b      	add	r3, r1
 800cf04:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7f3 f92a 	bl	8000164 <strlen>
 800cf10:	4603      	mov	r3, r0
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	330f      	adds	r3, #15
 800cf16:	757b      	strb	r3, [r7, #21]

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800cf18:	7dbb      	ldrb	r3, [r7, #22]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f007 fe37 	bl	8014b90 <malloc>
 800cf22:	4603      	mov	r3, r0
 800cf24:	613b      	str	r3, [r7, #16]
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 800cf26:	7d7b      	ldrb	r3, [r7, #21]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f007 fe30 	bl	8014b90 <malloc>
 800cf30:	4603      	mov	r3, r0
 800cf32:	60fb      	str	r3, [r7, #12]

    strcpy(Text_Name_IC,"IC Name: ");
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	4925      	ldr	r1, [pc, #148]	@ (800cfcc <select_modify_program+0x110>)
 800cf38:	461a      	mov	r2, r3
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	cb03      	ldmia	r3!, {r0, r1}
 800cf3e:	6010      	str	r0, [r2, #0]
 800cf40:	6051      	str	r1, [r2, #4]
 800cf42:	881b      	ldrh	r3, [r3, #0]
 800cf44:	8113      	strh	r3, [r2, #8]
    strncat(Text_Name_IC,screen_obj->Program_Testx[index_program].Name_IC,size_Name_IC - strlen("IC Name: "));
 800cf46:	7dfa      	ldrb	r2, [r7, #23]
 800cf48:	6879      	ldr	r1, [r7, #4]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	4413      	add	r3, r2
 800cf50:	011b      	lsls	r3, r3, #4
 800cf52:	440b      	add	r3, r1
 800cf54:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800cf58:	6819      	ldr	r1, [r3, #0]
 800cf5a:	7dbb      	ldrb	r3, [r7, #22]
 800cf5c:	3b09      	subs	r3, #9
 800cf5e:	461a      	mov	r2, r3
 800cf60:	6938      	ldr	r0, [r7, #16]
 800cf62:	f009 fe92 	bl	8016c8a <strncat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	4a19      	ldr	r2, [pc, #100]	@ (800cfd0 <select_modify_program+0x114>)
 800cf6a:	461c      	mov	r4, r3
 800cf6c:	4615      	mov	r5, r2
 800cf6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf70:	6020      	str	r0, [r4, #0]
 800cf72:	6061      	str	r1, [r4, #4]
 800cf74:	60a2      	str	r2, [r4, #8]
 800cf76:	60e3      	str	r3, [r4, #12]
    strncat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC,size_Num_IC - strlen("Number of ICs: "));
 800cf78:	7dfa      	ldrb	r2, [r7, #23]
 800cf7a:	6879      	ldr	r1, [r7, #4]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	4413      	add	r3, r2
 800cf82:	011b      	lsls	r3, r3, #4
 800cf84:	440b      	add	r3, r1
 800cf86:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cf8a:	6819      	ldr	r1, [r3, #0]
 800cf8c:	7d7b      	ldrb	r3, [r7, #21]
 800cf8e:	3b0f      	subs	r3, #15
 800cf90:	461a      	mov	r2, r3
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f009 fe79 	bl	8016c8a <strncat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800cf98:	7dbb      	ldrb	r3, [r7, #22]
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	f249 5120 	movw	r1, #38176	@ 0x9520
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f006 f96a 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 800cfa8:	7d7b      	ldrb	r3, [r7, #21]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	f249 5140 	movw	r1, #38208	@ 0x9540
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f006 f962 	bl	801327c <DWIN_SetText>

    free(Text_Name_IC);
 800cfb8:	6938      	ldr	r0, [r7, #16]
 800cfba:	f007 fdf1 	bl	8014ba0 <free>
    free(Text_Num_IC);
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f007 fdee 	bl	8014ba0 <free>
}
 800cfc4:	bf00      	nop
 800cfc6:	3718      	adds	r7, #24
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bdb0      	pop	{r4, r5, r7, pc}
 800cfcc:	08019de0 	.word	0x08019de0
 800cfd0:	08019dec 	.word	0x08019dec

0800cfd4 <Navigation_num_keyboard>:

void Navigation_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800cfd4:	b590      	push	{r4, r7, lr}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	889a      	ldrh	r2, [r3, #4]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	819a      	strh	r2, [r3, #12]
    /* get index vp to show the info of keyboard */
    uint8_t index_condition;
    index_condition = Index_VP(screen_obj->Screen_keyboard.VP_Text,lookup_VP_condition,(sizeof(lookup_VP_condition)/ sizeof(lookup_VP_condition[0])));
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	899b      	ldrh	r3, [r3, #12]
 800cfea:	2205      	movs	r2, #5
 800cfec:	492e      	ldr	r1, [pc, #184]	@ (800d0a8 <Navigation_num_keyboard+0xd4>)
 800cfee:	4618      	mov	r0, r3
 800cff0:	f001 f9b4 	bl	800e35c <Index_VP>
 800cff4:	4603      	mov	r3, r0
 800cff6:	73fb      	strb	r3, [r7, #15]
    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	330e      	adds	r3, #14
 800d004:	2232      	movs	r2, #50	@ 0x32
 800d006:	2100      	movs	r1, #0
 800d008:	4618      	mov	r0, r3
 800d00a:	f009 fe27 	bl	8016c5c <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f103 020e 	add.w	r2, r3, #14
 800d014:	2332      	movs	r3, #50	@ 0x32
 800d016:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f006 f92e 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowType_Keyboard,text_numkeyboard[index_condition].String_Name,strlen(text_numkeyboard[index_condition].String_Name));
 800d020:	7bfa      	ldrb	r2, [r7, #15]
 800d022:	4613      	mov	r3, r2
 800d024:	011b      	lsls	r3, r3, #4
 800d026:	1a9b      	subs	r3, r3, r2
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	4a20      	ldr	r2, [pc, #128]	@ (800d0ac <Navigation_num_keyboard+0xd8>)
 800d02c:	189c      	adds	r4, r3, r2
 800d02e:	7bfa      	ldrb	r2, [r7, #15]
 800d030:	4613      	mov	r3, r2
 800d032:	011b      	lsls	r3, r3, #4
 800d034:	1a9b      	subs	r3, r3, r2
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	4a1c      	ldr	r2, [pc, #112]	@ (800d0ac <Navigation_num_keyboard+0xd8>)
 800d03a:	4413      	add	r3, r2
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7f3 f891 	bl	8000164 <strlen>
 800d042:	4603      	mov	r3, r0
 800d044:	b29b      	uxth	r3, r3
 800d046:	4622      	mov	r2, r4
 800d048:	f24f 0180 	movw	r1, #61568	@ 0xf080
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f006 f915 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowUnit_Keyboard,text_numkeyboard[index_condition].String_Unit,strlen(text_numkeyboard[index_condition].String_Unit));
 800d052:	7bfa      	ldrb	r2, [r7, #15]
 800d054:	4613      	mov	r3, r2
 800d056:	011b      	lsls	r3, r3, #4
 800d058:	1a9b      	subs	r3, r3, r2
 800d05a:	005b      	lsls	r3, r3, #1
 800d05c:	3308      	adds	r3, #8
 800d05e:	4a13      	ldr	r2, [pc, #76]	@ (800d0ac <Navigation_num_keyboard+0xd8>)
 800d060:	4413      	add	r3, r2
 800d062:	1ddc      	adds	r4, r3, #7
 800d064:	7bfa      	ldrb	r2, [r7, #15]
 800d066:	4613      	mov	r3, r2
 800d068:	011b      	lsls	r3, r3, #4
 800d06a:	1a9b      	subs	r3, r3, r2
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	3308      	adds	r3, #8
 800d070:	4a0e      	ldr	r2, [pc, #56]	@ (800d0ac <Navigation_num_keyboard+0xd8>)
 800d072:	4413      	add	r3, r2
 800d074:	3307      	adds	r3, #7
 800d076:	4618      	mov	r0, r3
 800d078:	f7f3 f874 	bl	8000164 <strlen>
 800d07c:	4603      	mov	r3, r0
 800d07e:	b29b      	uxth	r3, r3
 800d080:	4622      	mov	r2, r4
 800d082:	f24f 0150 	movw	r1, #61520	@ 0xf050
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f006 f8f8 	bl	801327c <DWIN_SetText>
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 800d08c:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f006 f963 	bl	801335c <DWIN_ClearText>
    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_NUM_KEYBOARD);
 800d096:	216d      	movs	r1, #109	@ 0x6d
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f006 f8c8 	bl	801322e <DWIN_SetPage>
}
 800d09e:	bf00      	nop
 800d0a0:	3714      	adds	r7, #20
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd90      	pop	{r4, r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20000040 	.word	0x20000040
 800d0ac:	2000007c 	.word	0x2000007c

0800d0b0 <Navigation_full_keyboard>:

void Navigation_full_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
    // get the datavalue -> the VP will show string input
    screen_obj->Screen_keyboard.VP_Text = screen_event->keyvalue;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	889a      	ldrh	r2, [r3, #4]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	819a      	strh	r2, [r3, #12]

    // Reset the string
    screen_obj->Screen_keyboard.Index_String = 0;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    memset(screen_obj->Screen_keyboard.String,0,sizeof(screen_obj->Screen_keyboard.String));
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	330e      	adds	r3, #14
 800d0ce:	2232      	movs	r2, #50	@ 0x32
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f009 fdc2 	bl	8016c5c <memset>
    /* Show text num keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,sizeof(screen_obj->Screen_keyboard.String));
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f103 020e 	add.w	r2, r3, #14
 800d0de:	2332      	movs	r3, #50	@ 0x32
 800d0e0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f006 f8c9 	bl	801327c <DWIN_SetText>
    /* clear text */
    DWIN_ClearText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard);
 800d0ea:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f006 f934 	bl	801335c <DWIN_ClearText>
    /* Switch page */
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_FULL_KEYBOARD);
 800d0f4:	2178      	movs	r1, #120	@ 0x78
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f006 f899 	bl	801322e <DWIN_SetPage>
}
 800d0fc:	bf00      	nop
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <Save_Information>:

void Save_Information(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800d104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d106:	b0c7      	sub	sp, #284	@ 0x11c
 800d108:	af02      	add	r7, sp, #8
 800d10a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d10e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d112:	6018      	str	r0, [r3, #0]
 800d114:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d118:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d11c:	6019      	str	r1, [r3, #0]
    /* update value */
    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp != NULL) {
 800d11e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d122:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d12c:	4619      	mov	r1, r3
 800d12e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d132:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	460b      	mov	r3, r1
 800d13a:	005b      	lsls	r3, r3, #1
 800d13c:	440b      	add	r3, r1
 800d13e:	011b      	lsls	r3, r3, #4
 800d140:	4413      	add	r3, r2
 800d142:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f000 80d9 	beq.w	800d300 <Save_Information+0x1fc>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program != NULL) {
 800d14e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d152:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d15c:	4619      	mov	r1, r3
 800d15e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d162:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	460b      	mov	r3, r1
 800d16a:	005b      	lsls	r3, r3, #1
 800d16c:	440b      	add	r3, r1
 800d16e:	011b      	lsls	r3, r3, #4
 800d170:	4413      	add	r3, r2
 800d172:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d02d      	beq.n	800d1d8 <Save_Information+0xd4>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program);
 800d17c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d180:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d18a:	4619      	mov	r1, r3
 800d18c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d190:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	460b      	mov	r3, r1
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	440b      	add	r3, r1
 800d19c:	011b      	lsls	r3, r3, #4
 800d19e:	4413      	add	r3, r2
 800d1a0:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f007 fcfa 	bl	8014ba0 <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program = NULL;
 800d1ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	005b      	lsls	r3, r3, #1
 800d1ca:	440b      	add	r3, r1
 800d1cc:	011b      	lsls	r3, r3, #4
 800d1ce:	4413      	add	r3, r2
 800d1d0:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	601a      	str	r2, [r3, #0]
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp));
 800d1d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	005b      	lsls	r3, r3, #1
 800d1f6:	440b      	add	r3, r1
 800d1f8:	011b      	lsls	r3, r3, #4
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4618      	mov	r0, r3
 800d204:	f7f2 ffae 	bl	8000164 <strlen>
 800d208:	4602      	mov	r2, r0
 800d20a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d20e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d218:	461c      	mov	r4, r3
 800d21a:	4610      	mov	r0, r2
 800d21c:	f007 fcb8 	bl	8014b90 <malloc>
 800d220:	4603      	mov	r3, r0
 800d222:	4619      	mov	r1, r3
 800d224:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d228:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	4623      	mov	r3, r4
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	4423      	add	r3, r4
 800d234:	011b      	lsls	r3, r3, #4
 800d236:	4413      	add	r3, r2
 800d238:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d23c:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800d23e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d242:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d24c:	4619      	mov	r1, r3
 800d24e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d252:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	460b      	mov	r3, r1
 800d25a:	005b      	lsls	r3, r3, #1
 800d25c:	440b      	add	r3, r1
 800d25e:	011b      	lsls	r3, r3, #4
 800d260:	4413      	add	r3, r2
 800d262:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d266:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp
 800d268:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d26c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d276:	4619      	mov	r1, r3
 800d278:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d27c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	460b      	mov	r3, r1
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	440b      	add	r3, r1
 800d288:	011b      	lsls	r3, r3, #4
 800d28a:	4413      	add	r3, r2
 800d28c:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800d290:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp)+1);
 800d292:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d296:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	440b      	add	r3, r1
 800d2b2:	011b      	lsls	r3, r3, #4
 800d2b4:	4413      	add	r3, r2
 800d2b6:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7f2 ff51 	bl	8000164 <strlen>
 800d2c2:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f009 fe0f 	bl	8016eee <memcpy>
        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp);
 800d2d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d2de:	4619      	mov	r1, r3
 800d2e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	005b      	lsls	r3, r3, #1
 800d2ee:	440b      	add	r3, r1
 800d2f0:	011b      	lsls	r3, r3, #4
 800d2f2:	4413      	add	r3, r2
 800d2f4:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f007 fc50 	bl	8014ba0 <free>
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp != NULL) {
 800d300:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d304:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d30e:	4619      	mov	r1, r3
 800d310:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d314:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	460b      	mov	r3, r1
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	440b      	add	r3, r1
 800d320:	011b      	lsls	r3, r3, #4
 800d322:	4413      	add	r3, r2
 800d324:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f000 80ef 	beq.w	800d50e <Save_Information+0x40a>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC != NULL) {
 800d330:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d334:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d33e:	4619      	mov	r1, r3
 800d340:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d344:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	460b      	mov	r3, r1
 800d34c:	005b      	lsls	r3, r3, #1
 800d34e:	440b      	add	r3, r1
 800d350:	011b      	lsls	r3, r3, #4
 800d352:	4413      	add	r3, r2
 800d354:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d02d      	beq.n	800d3ba <Save_Information+0x2b6>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 800d35e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d362:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d36c:	4619      	mov	r1, r3
 800d36e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d372:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	460b      	mov	r3, r1
 800d37a:	005b      	lsls	r3, r3, #1
 800d37c:	440b      	add	r3, r1
 800d37e:	011b      	lsls	r3, r3, #4
 800d380:	4413      	add	r3, r2
 800d382:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4618      	mov	r0, r3
 800d38a:	f007 fc09 	bl	8014ba0 <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = NULL;
 800d38e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d392:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d39c:	4619      	mov	r1, r3
 800d39e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	005b      	lsls	r3, r3, #1
 800d3ac:	440b      	add	r3, r1
 800d3ae:	011b      	lsls	r3, r3, #4
 800d3b0:	4413      	add	r3, r2
 800d3b2:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	601a      	str	r2, [r3, #0]
        }
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp));
 800d3ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	005b      	lsls	r3, r3, #1
 800d3d8:	440b      	add	r3, r1
 800d3da:	011b      	lsls	r3, r3, #4
 800d3dc:	4413      	add	r3, r2
 800d3de:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7f2 febd 	bl	8000164 <strlen>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d3fa:	461c      	mov	r4, r3
 800d3fc:	4610      	mov	r0, r2
 800d3fe:	f007 fbc7 	bl	8014b90 <malloc>
 800d402:	4603      	mov	r3, r0
 800d404:	4619      	mov	r1, r3
 800d406:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d40a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	4623      	mov	r3, r4
 800d412:	005b      	lsls	r3, r3, #1
 800d414:	4423      	add	r3, r4
 800d416:	011b      	lsls	r3, r3, #4
 800d418:	4413      	add	r3, r2
 800d41a:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800d41e:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 800d420:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d424:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d42e:	4619      	mov	r1, r3
 800d430:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d434:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	460b      	mov	r3, r1
 800d43c:	005b      	lsls	r3, r3, #1
 800d43e:	440b      	add	r3, r1
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	4413      	add	r3, r2
 800d444:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800d448:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp
 800d44a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d44e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d458:	4619      	mov	r1, r3
 800d45a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d45e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	460b      	mov	r3, r1
 800d466:	005b      	lsls	r3, r3, #1
 800d468:	440b      	add	r3, r1
 800d46a:	011b      	lsls	r3, r3, #4
 800d46c:	4413      	add	r3, r2
 800d46e:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800d472:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp)+1);
 800d474:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d478:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d482:	4619      	mov	r1, r3
 800d484:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d488:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	460b      	mov	r3, r1
 800d490:	005b      	lsls	r3, r3, #1
 800d492:	440b      	add	r3, r1
 800d494:	011b      	lsls	r3, r3, #4
 800d496:	4413      	add	r3, r2
 800d498:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7f2 fe60 	bl	8000164 <strlen>
 800d4a4:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	f009 fd1e 	bl	8016eee <memcpy>

        free(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp);
 800d4b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	005b      	lsls	r3, r3, #1
 800d4d0:	440b      	add	r3, r1
 800d4d2:	011b      	lsls	r3, r3, #4
 800d4d4:	4413      	add	r3, r2
 800d4d6:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f007 fb5f 	bl	8014ba0 <free>
        screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = NULL;
 800d4e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	005b      	lsls	r3, r3, #1
 800d500:	440b      	add	r3, r1
 800d502:	011b      	lsls	r3, r3, #4
 800d504:	4413      	add	r3, r2
 800d506:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800d50a:	2200      	movs	r2, #0
 800d50c:	601a      	str	r2, [r3, #0]
    }

    if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp != NULL) {
 800d50e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d512:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d51c:	4619      	mov	r1, r3
 800d51e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d522:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	460b      	mov	r3, r1
 800d52a:	005b      	lsls	r3, r3, #1
 800d52c:	440b      	add	r3, r1
 800d52e:	011b      	lsls	r3, r3, #4
 800d530:	4413      	add	r3, r2
 800d532:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f000 80ef 	beq.w	800d71c <Save_Information+0x618>
        if (screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC != NULL) {
 800d53e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d542:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d54c:	4619      	mov	r1, r3
 800d54e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d552:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	460b      	mov	r3, r1
 800d55a:	005b      	lsls	r3, r3, #1
 800d55c:	440b      	add	r3, r1
 800d55e:	011b      	lsls	r3, r3, #4
 800d560:	4413      	add	r3, r2
 800d562:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d02d      	beq.n	800d5c8 <Save_Information+0x4c4>
            free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800d56c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d570:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d57a:	4619      	mov	r1, r3
 800d57c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d580:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	460b      	mov	r3, r1
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	440b      	add	r3, r1
 800d58c:	011b      	lsls	r3, r3, #4
 800d58e:	4413      	add	r3, r2
 800d590:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4618      	mov	r0, r3
 800d598:	f007 fb02 	bl	8014ba0 <free>
            screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = NULL;
 800d59c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d5a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d5b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	005b      	lsls	r3, r3, #1
 800d5ba:	440b      	add	r3, r1
 800d5bc:	011b      	lsls	r3, r3, #4
 800d5be:	4413      	add	r3, r2
 800d5c0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	601a      	str	r2, [r3, #0]
        } 
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC = (char *)malloc(strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp));
 800d5c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d5cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d5dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	005b      	lsls	r3, r3, #1
 800d5e6:	440b      	add	r3, r1
 800d5e8:	011b      	lsls	r3, r3, #4
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7f2 fdb6 	bl	8000164 <strlen>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d5fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d608:	461c      	mov	r4, r3
 800d60a:	4610      	mov	r0, r2
 800d60c:	f007 fac0 	bl	8014b90 <malloc>
 800d610:	4603      	mov	r3, r0
 800d612:	4619      	mov	r1, r3
 800d614:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d618:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	4623      	mov	r3, r4
 800d620:	005b      	lsls	r3, r3, #1
 800d622:	4423      	add	r3, r4
 800d624:	011b      	lsls	r3, r3, #4
 800d626:	4413      	add	r3, r2
 800d628:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d62c:	6019      	str	r1, [r3, #0]
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC
 800d62e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d632:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d63c:	4619      	mov	r1, r3
 800d63e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d642:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	460b      	mov	r3, r1
 800d64a:	005b      	lsls	r3, r3, #1
 800d64c:	440b      	add	r3, r1
 800d64e:	011b      	lsls	r3, r3, #4
 800d650:	4413      	add	r3, r2
 800d652:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d656:	681c      	ldr	r4, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp
 800d658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d65c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d666:	4619      	mov	r1, r3
 800d668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d66c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	460b      	mov	r3, r1
 800d674:	005b      	lsls	r3, r3, #1
 800d676:	440b      	add	r3, r1
 800d678:	011b      	lsls	r3, r3, #4
 800d67a:	4413      	add	r3, r2
 800d67c:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800d680:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp)+1);
 800d682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d686:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d690:	4619      	mov	r1, r3
 800d692:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d696:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	460b      	mov	r3, r1
 800d69e:	005b      	lsls	r3, r3, #1
 800d6a0:	440b      	add	r3, r1
 800d6a2:	011b      	lsls	r3, r3, #4
 800d6a4:	4413      	add	r3, r2
 800d6a6:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7f2 fd59 	bl	8000164 <strlen>
 800d6b2:	4603      	mov	r3, r0
        memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f009 fc17 	bl	8016eee <memcpy>

        free(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp);
 800d6c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d6c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d6d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	460b      	mov	r3, r1
 800d6dc:	005b      	lsls	r3, r3, #1
 800d6de:	440b      	add	r3, r1
 800d6e0:	011b      	lsls	r3, r3, #4
 800d6e2:	4413      	add	r3, r2
 800d6e4:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f007 fa58 	bl	8014ba0 <free>
        screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = NULL;
 800d6f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d6f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d6fe:	4619      	mov	r1, r3
 800d700:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d704:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	460b      	mov	r3, r1
 800d70c:	005b      	lsls	r3, r3, #1
 800d70e:	440b      	add	r3, r1
 800d710:	011b      	lsls	r3, r3, #4
 800d712:	4413      	add	r3, r2
 800d714:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800d718:	2200      	movs	r2, #0
 800d71a:	601a      	str	r2, [r3, #0]
    }

    /* get data for testing ic */
    if (get_data_testing_ic(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,&screen_obj->Program_Testx[screen_obj->modify_program_index]) == false) {
 800d71c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d720:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d72a:	4619      	mov	r1, r3
 800d72c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d730:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	460b      	mov	r3, r1
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	440b      	add	r3, r1
 800d73c:	011b      	lsls	r3, r3, #4
 800d73e:	4413      	add	r3, r2
 800d740:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800d744:	6818      	ldr	r0, [r3, #0]
 800d746:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d74a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d754:	4619      	mov	r1, r3
 800d756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d75a:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 800d75e:	460b      	mov	r3, r1
 800d760:	005b      	lsls	r3, r3, #1
 800d762:	440b      	add	r3, r1
 800d764:	011b      	lsls	r3, r3, #4
 800d766:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d76a:	6812      	ldr	r2, [r2, #0]
 800d76c:	4413      	add	r3, r2
 800d76e:	4619      	mov	r1, r3
 800d770:	f001 fc06 	bl	800ef80 <get_data_testing_ic>
 800d774:	4603      	mov	r3, r0
 800d776:	f083 0301 	eor.w	r3, r3, #1
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f040 825b 	bne.w	800dc38 <Save_Information+0xb34>
        return;
    }

    /* send to esp32 */
    char buffer_send[200];
    memset(buffer_send,0,200);
 800d782:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d786:	22c8      	movs	r2, #200	@ 0xc8
 800d788:	2100      	movs	r1, #0
 800d78a:	4618      	mov	r0, r3
 800d78c:	f009 fa66 	bl	8016c5c <memset>
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800d790:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d794:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d79e:	1c5c      	adds	r4, r3, #1
 800d7a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	440b      	add	r3, r1
 800d7c0:	011b      	lsls	r3, r3, #4
 800d7c2:	4413      	add	r3, r2
 800d7c4:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d7c8:	681d      	ldr	r5, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800d7ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d7d8:	4619      	mov	r1, r3
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800d7da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	440b      	add	r3, r1
 800d7ea:	011b      	lsls	r3, r3, #4
 800d7ec:	4413      	add	r3, r2
 800d7ee:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800d7f2:	681a      	ldr	r2, [r3, #0]
        ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800d7f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d802:	4618      	mov	r0, r3
    sprintf(buffer_send,"%d,%s,%s,%s",screen_obj->modify_program_index + 1,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800d804:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d808:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d80c:	6819      	ldr	r1, [r3, #0]
 800d80e:	4603      	mov	r3, r0
 800d810:	005b      	lsls	r3, r3, #1
 800d812:	4403      	add	r3, r0
 800d814:	011b      	lsls	r3, r3, #4
 800d816:	440b      	add	r3, r1
 800d818:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800d822:	9301      	str	r3, [sp, #4]
 800d824:	9200      	str	r2, [sp, #0]
 800d826:	462b      	mov	r3, r5
 800d828:	4622      	mov	r2, r4
 800d82a:	49db      	ldr	r1, [pc, #876]	@ (800db98 <Save_Information+0xa94>)
 800d82c:	f009 f8de 	bl	80169ec <siprintf>
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800d830:	2008      	movs	r0, #8
 800d832:	f007 f9ad 	bl	8014b90 <malloc>
 800d836:	4603      	mov	r3, r0
 800d838:	63bb      	str	r3, [r7, #56]	@ 0x38
    data_send_esp32->data = (char *)malloc(strlen(buffer_send));
 800d83a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d83e:	4618      	mov	r0, r3
 800d840:	f7f2 fc90 	bl	8000164 <strlen>
 800d844:	4603      	mov	r3, r0
 800d846:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800d848:	4618      	mov	r0, r3
 800d84a:	f007 f9a1 	bl	8014b90 <malloc>
 800d84e:	4603      	mov	r3, r0
 800d850:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data,"p",screen_obj->modify_program_index + 1);
 800d852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d854:	6818      	ldr	r0, [r3, #0]
 800d856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d85a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d864:	3301      	adds	r3, #1
 800d866:	461a      	mov	r2, r3
 800d868:	49cc      	ldr	r1, [pc, #816]	@ (800db9c <Save_Information+0xa98>)
 800d86a:	f009 fb40 	bl	8016eee <memcpy>
    memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send));
 800d86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	1c5c      	adds	r4, r3, #1
 800d874:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d878:	4618      	mov	r0, r3
 800d87a:	f7f2 fc73 	bl	8000164 <strlen>
 800d87e:	4602      	mov	r2, r0
 800d880:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d884:	4619      	mov	r1, r3
 800d886:	4620      	mov	r0, r4
 800d888:	f009 fb31 	bl	8016eee <memcpy>
    data_send_esp32->len = strlen(buffer_send) + 1;
 800d88c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d890:	4618      	mov	r0, r3
 800d892:	f7f2 fc67 	bl	8000164 <strlen>
 800d896:	4602      	mov	r2, r0
 800d898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89a:	3201      	adds	r2, #1
 800d89c:	605a      	str	r2, [r3, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800d89e:	4bc0      	ldr	r3, [pc, #768]	@ (800dba0 <Save_Information+0xa9c>)
 800d8a0:	6818      	ldr	r0, [r3, #0]
 800d8a2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d8a6:	2308      	movs	r3, #8
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	f006 ff3f 	bl	801472c <OS_task_post_event>

    /* store data to eeprom */
    char string_data[TOTAL_ONE_PROGRAM_TEST_LEN] = {0};
 800d8ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d8b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	232a      	movs	r3, #42	@ 0x2a
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	2100      	movs	r1, #0
 800d8be:	f009 f9cd 	bl	8016c5c <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 800d8c2:	200c      	movs	r0, #12
 800d8c4:	f007 f964 	bl	8014b90 <malloc>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d8d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8d4:	601a      	str	r2, [r3, #0]
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800d8d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d8da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d8ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	440b      	add	r3, r1
 800d8f6:	011b      	lsls	r3, r3, #4
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800d8fe:	681c      	ldr	r4, [r3, #0]
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC
 800d900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d904:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d90e:	4619      	mov	r1, r3
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800d910:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d914:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	460b      	mov	r3, r1
 800d91c:	005b      	lsls	r3, r3, #1
 800d91e:	440b      	add	r3, r1
 800d920:	011b      	lsls	r3, r3, #4
 800d922:	4413      	add	r3, r2
 800d924:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800d928:	681a      	ldr	r2, [r3, #0]
    ,screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800d92a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d92e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d938:	4618      	mov	r0, r3
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800d93a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d93e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d942:	6819      	ldr	r1, [r3, #0]
 800d944:	4603      	mov	r3, r0
 800d946:	005b      	lsls	r3, r3, #1
 800d948:	4403      	add	r3, r0
 800d94a:	011b      	lsls	r3, r3, #4
 800d94c:	440b      	add	r3, r1
 800d94e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f107 000c 	add.w	r0, r7, #12
 800d958:	9301      	str	r3, [sp, #4]
 800d95a:	9200      	str	r2, [sp, #0]
 800d95c:	4623      	mov	r3, r4
 800d95e:	4a91      	ldr	r2, [pc, #580]	@ (800dba4 <Save_Information+0xaa0>)
 800d960:	212a      	movs	r1, #42	@ 0x2a
 800d962:	f009 f80d 	bl	8016980 <sniprintf>
    data_write->data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 800d966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d96a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d96e:	681c      	ldr	r4, [r3, #0]
 800d970:	202a      	movs	r0, #42	@ 0x2a
 800d972:	f007 f90d 	bl	8014b90 <malloc>
 800d976:	4603      	mov	r3, r0
 800d978:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 800d97a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d97e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	685a      	ldr	r2, [r3, #4]
 800d986:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d98a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d98e:	461c      	mov	r4, r3
 800d990:	4694      	mov	ip, r2
 800d992:	f104 0e20 	add.w	lr, r4, #32
 800d996:	4665      	mov	r5, ip
 800d998:	4626      	mov	r6, r4
 800d99a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d99c:	6028      	str	r0, [r5, #0]
 800d99e:	6069      	str	r1, [r5, #4]
 800d9a0:	60aa      	str	r2, [r5, #8]
 800d9a2:	60eb      	str	r3, [r5, #12]
 800d9a4:	3410      	adds	r4, #16
 800d9a6:	f10c 0c10 	add.w	ip, ip, #16
 800d9aa:	4574      	cmp	r4, lr
 800d9ac:	d1f3      	bne.n	800d996 <Save_Information+0x892>
 800d9ae:	4662      	mov	r2, ip
 800d9b0:	4623      	mov	r3, r4
 800d9b2:	cb03      	ldmia	r3!, {r0, r1}
 800d9b4:	6010      	str	r0, [r2, #0]
 800d9b6:	6051      	str	r1, [r2, #4]
 800d9b8:	881b      	ldrh	r3, [r3, #0]
 800d9ba:	8113      	strh	r3, [r2, #8]
    data_write->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 800d9bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	222a      	movs	r2, #42	@ 0x2a
 800d9c8:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_PROGRAM_TEST_X(screen_obj->modify_program_index);
 800d9ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800d9d8:	461a      	mov	r2, r3
 800d9da:	0052      	lsls	r2, r2, #1
 800d9dc:	4413      	add	r3, r2
 800d9de:	461a      	mov	r2, r3
 800d9e0:	00d2      	lsls	r2, r2, #3
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	3243      	adds	r2, #67	@ 0x43
 800d9f4:	b292      	uxth	r2, r2
 800d9f6:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 800d9f8:	4b6b      	ldr	r3, [pc, #428]	@ (800dba8 <Save_Information+0xaa4>)
 800d9fa:	6818      	ldr	r0, [r3, #0]
 800d9fc:	f107 0208 	add.w	r2, r7, #8
 800da00:	230c      	movs	r3, #12
 800da02:	2105      	movs	r1, #5
 800da04:	f006 fe92 	bl	801472c <OS_task_post_event>

    // Show data in screen
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 800da08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800da16:	4619      	mov	r1, r3
 800da18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	460b      	mov	r3, r1
 800da24:	005b      	lsls	r3, r3, #1
 800da26:	440b      	add	r3, r1
 800da28:	011b      	lsls	r3, r3, #4
 800da2a:	4413      	add	r3, r2
 800da2c:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4618      	mov	r0, r3
 800da34:	f7f2 fb96 	bl	8000164 <strlen>
 800da38:	4603      	mov	r3, r0
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	3309      	adds	r3, #9
 800da3e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800da42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800da50:	4619      	mov	r1, r3
 800da52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800da5a:	681a      	ldr	r2, [r3, #0]
 800da5c:	460b      	mov	r3, r1
 800da5e:	005b      	lsls	r3, r3, #1
 800da60:	440b      	add	r3, r1
 800da62:	011b      	lsls	r3, r3, #4
 800da64:	4413      	add	r3, r2
 800da66:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7f2 fb79 	bl	8000164 <strlen>
 800da72:	4603      	mov	r3, r0
 800da74:	b2db      	uxtb	r3, r3
 800da76:	330f      	adds	r3, #15
 800da78:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800da7c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800da80:	3301      	adds	r3, #1
 800da82:	4618      	mov	r0, r3
 800da84:	f007 f884 	bl	8014b90 <malloc>
 800da88:	4603      	mov	r3, r0
 800da8a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    char *Text_Num_IC = malloc(size_Num_IC + 1);
 800da8e:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800da92:	3301      	adds	r3, #1
 800da94:	4618      	mov	r0, r3
 800da96:	f007 f87b 	bl	8014b90 <malloc>
 800da9a:	4603      	mov	r3, r0
 800da9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    strcpy(Text_Name_IC,"IC Name: ");
 800daa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800daa4:	4941      	ldr	r1, [pc, #260]	@ (800dbac <Save_Information+0xaa8>)
 800daa6:	461a      	mov	r2, r3
 800daa8:	460b      	mov	r3, r1
 800daaa:	cb03      	ldmia	r3!, {r0, r1}
 800daac:	6010      	str	r0, [r2, #0]
 800daae:	6051      	str	r1, [r2, #4]
 800dab0:	881b      	ldrh	r3, [r3, #0]
 800dab2:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC);
 800dab4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dab8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800dac2:	4619      	mov	r1, r3
 800dac4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dac8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	460b      	mov	r3, r1
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	440b      	add	r3, r1
 800dad4:	011b      	lsls	r3, r3, #4
 800dad6:	4413      	add	r3, r2
 800dad8:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4619      	mov	r1, r3
 800dae0:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800dae4:	f009 f8c2 	bl	8016c6c <strcat>
    strcpy(Text_Num_IC,"Number of ICs: ");
 800dae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daec:	4a30      	ldr	r2, [pc, #192]	@ (800dbb0 <Save_Information+0xaac>)
 800daee:	461c      	mov	r4, r3
 800daf0:	4615      	mov	r5, r2
 800daf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daf4:	6020      	str	r0, [r4, #0]
 800daf6:	6061      	str	r1, [r4, #4]
 800daf8:	60a2      	str	r2, [r4, #8]
 800dafa:	60e3      	str	r3, [r4, #12]
    strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC);
 800dafc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800db0a:	4619      	mov	r1, r3
 800db0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	460b      	mov	r3, r1
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	440b      	add	r3, r1
 800db1c:	011b      	lsls	r3, r3, #4
 800db1e:	4413      	add	r3, r2
 800db20:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4619      	mov	r1, r3
 800db28:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 800db2c:	f009 f89e 	bl	8016c6c <strcat>

    // Show data in screen
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800db30:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800db34:	b29b      	uxth	r3, r3
 800db36:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800db3a:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 800db3e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800db42:	f249 5120 	movw	r1, #38176	@ 0x9520
 800db46:	6800      	ldr	r0, [r0, #0]
 800db48:	f005 fb98 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 800db4c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800db50:	b29b      	uxth	r3, r3
 800db52:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800db56:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 800db5a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800db5e:	f249 5140 	movw	r1, #38208	@ 0x9540
 800db62:	6800      	ldr	r0, [r0, #0]
 800db64:	f005 fb8a 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800db68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800db76:	461a      	mov	r2, r3
 800db78:	0092      	lsls	r2, r2, #2
 800db7a:	4413      	add	r3, r2
 800db7c:	00db      	lsls	r3, r3, #3
 800db7e:	b29b      	uxth	r3, r3
 800db80:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 800db84:	3b58      	subs	r3, #88	@ 0x58
 800db86:	b29c      	uxth	r4, r3
 800db88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800db96:	e00d      	b.n	800dbb4 <Save_Information+0xab0>
 800db98:	08019dfc 	.word	0x08019dfc
 800db9c:	08019e08 	.word	0x08019e08
 800dba0:	0801acb8 	.word	0x0801acb8
 800dba4:	08019e0c 	.word	0x08019e0c
 800dba8:	0801acac 	.word	0x0801acac
 800dbac:	08019de0 	.word	0x08019de0
 800dbb0:	08019dec 	.word	0x08019dec
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	440b      	add	r3, r1
 800dbc6:	011b      	lsls	r3, r3, #4
 800dbc8:	4413      	add	r3, r2
 800dbca:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800dbce:	681d      	ldr	r5, [r3, #0]
        ,strlen(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program));
 800dbd0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbd4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800dbde:	4619      	mov	r1, r3
 800dbe0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbe4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	460b      	mov	r3, r1
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	440b      	add	r3, r1
 800dbf0:	011b      	lsls	r3, r3, #4
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7f2 fab2 	bl	8000164 <strlen>
 800dc00:	4603      	mov	r3, r0
    DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *screen_obj->modify_program_index),screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800dc08:	f5a2 7086 	sub.w	r0, r2, #268	@ 0x10c
 800dc0c:	462a      	mov	r2, r5
 800dc0e:	4621      	mov	r1, r4
 800dc10:	6800      	ldr	r0, [r0, #0]
 800dc12:	f005 fb33 	bl	801327c <DWIN_SetText>

    free(Text_Name_IC);
 800dc16:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800dc1a:	f006 ffc1 	bl	8014ba0 <free>
    free(Text_Num_IC);
 800dc1e:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 800dc22:	f006 ffbd 	bl	8014ba0 <free>
    
    // Switch page
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 800dc26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800dc2e:	216b      	movs	r1, #107	@ 0x6b
 800dc30:	6818      	ldr	r0, [r3, #0]
 800dc32:	f005 fafc 	bl	801322e <DWIN_SetPage>
 800dc36:	e000      	b.n	800dc3a <Save_Information+0xb36>
        return;
 800dc38:	bf00      	nop
}
 800dc3a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc42:	bf00      	nop

0800dc44 <Enter_password>:

void Enter_password(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800dc44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc48:	b089      	sub	sp, #36	@ 0x24
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	6039      	str	r1, [r7, #0]
 800dc50:	466b      	mov	r3, sp
 800dc52:	461e      	mov	r6, r3
    /* Get the password input */
    uint8_t len = screen_obj->Screen_keyboard.Index_String + 1;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	77fb      	strb	r3, [r7, #31]
    char input_pass[len];
 800dc60:	7ff9      	ldrb	r1, [r7, #31]
 800dc62:	460b      	mov	r3, r1
 800dc64:	3b01      	subs	r3, #1
 800dc66:	61bb      	str	r3, [r7, #24]
 800dc68:	b2cb      	uxtb	r3, r1
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	4698      	mov	r8, r3
 800dc6e:	4691      	mov	r9, r2
 800dc70:	f04f 0200 	mov.w	r2, #0
 800dc74:	f04f 0300 	mov.w	r3, #0
 800dc78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dc7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dc80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dc84:	b2cb      	uxtb	r3, r1
 800dc86:	2200      	movs	r2, #0
 800dc88:	461c      	mov	r4, r3
 800dc8a:	4615      	mov	r5, r2
 800dc8c:	f04f 0200 	mov.w	r2, #0
 800dc90:	f04f 0300 	mov.w	r3, #0
 800dc94:	00eb      	lsls	r3, r5, #3
 800dc96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dc9a:	00e2      	lsls	r2, r4, #3
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	3307      	adds	r3, #7
 800dca0:	08db      	lsrs	r3, r3, #3
 800dca2:	00db      	lsls	r3, r3, #3
 800dca4:	ebad 0d03 	sub.w	sp, sp, r3
 800dca8:	466b      	mov	r3, sp
 800dcaa:	3300      	adds	r3, #0
 800dcac:	617b      	str	r3, [r7, #20]
    strcpy(input_pass,screen_obj->Screen_keyboard.String);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	330e      	adds	r3, #14
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6978      	ldr	r0, [r7, #20]
 800dcb6:	f009 f904 	bl	8016ec2 <strcpy>
    /* Check password */
    if (strcmp(input_pass,MACHINE_PASSWORD) == 0) { /* Correct password */
 800dcba:	493f      	ldr	r1, [pc, #252]	@ (800ddb8 <Enter_password+0x174>)
 800dcbc:	6978      	ldr	r0, [r7, #20]
 800dcbe:	f7f2 fa47 	bl	8000150 <strcmp>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d16a      	bne.n	800dd9e <Enter_password+0x15a>
        /* show data page */
        switch (screen_obj->page_setting) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 800dcce:	2b6b      	cmp	r3, #107	@ 0x6b
 800dcd0:	d15c      	bne.n	800dd8c <Enter_password+0x148>
            case DWINPAGE_SETTING_PROGRAM : {
                // Show data in screen
                uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7f2 fa43 	bl	8000164 <strlen>
 800dcde:	4603      	mov	r3, r0
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	3309      	adds	r3, #9
 800dce4:	74fb      	strb	r3, [r7, #19]
                uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7f2 fa39 	bl	8000164 <strlen>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	330f      	adds	r3, #15
 800dcf8:	74bb      	strb	r3, [r7, #18]

                char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800dcfa:	7cfb      	ldrb	r3, [r7, #19]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f006 ff46 	bl	8014b90 <malloc>
 800dd04:	4603      	mov	r3, r0
 800dd06:	60fb      	str	r3, [r7, #12]
                char *Text_Num_IC = malloc(size_Num_IC + 1);
 800dd08:	7cbb      	ldrb	r3, [r7, #18]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f006 ff3f 	bl	8014b90 <malloc>
 800dd12:	4603      	mov	r3, r0
 800dd14:	60bb      	str	r3, [r7, #8]

                strcpy(Text_Name_IC,"IC Name: ");
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	4928      	ldr	r1, [pc, #160]	@ (800ddbc <Enter_password+0x178>)
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	cb03      	ldmia	r3!, {r0, r1}
 800dd20:	6010      	str	r0, [r2, #0]
 800dd22:	6051      	str	r1, [r2, #4]
 800dd24:	881b      	ldrh	r3, [r3, #0]
 800dd26:	8113      	strh	r3, [r2, #8]
                strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].Name_IC);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dd2e:	4619      	mov	r1, r3
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f008 ff9b 	bl	8016c6c <strcat>
                strcpy(Text_Num_IC,"Number of ICs: ");
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	4a21      	ldr	r2, [pc, #132]	@ (800ddc0 <Enter_password+0x17c>)
 800dd3a:	461c      	mov	r4, r3
 800dd3c:	4615      	mov	r5, r2
 800dd3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd40:	6020      	str	r0, [r4, #0]
 800dd42:	6061      	str	r1, [r4, #4]
 800dd44:	60a2      	str	r2, [r4, #8]
 800dd46:	60e3      	str	r3, [r4, #12]
                strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[PROGRAM_TEST1].num_IC);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 800dd4e:	4619      	mov	r1, r3
 800dd50:	68b8      	ldr	r0, [r7, #8]
 800dd52:	f008 ff8b 	bl	8016c6c <strcat>

                // Show data in screen
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 800dd56:	7cfb      	ldrb	r3, [r7, #19]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	68fa      	ldr	r2, [r7, #12]
 800dd5c:	f249 5120 	movw	r1, #38176	@ 0x9520
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f005 fa8b 	bl	801327c <DWIN_SetText>
                DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 800dd66:	7cbb      	ldrb	r3, [r7, #18]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	f249 5140 	movw	r1, #38208	@ 0x9540
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f005 fa83 	bl	801327c <DWIN_SetText>

                free(Text_Name_IC);
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f006 ff12 	bl	8014ba0 <free>
                free(Text_Num_IC);
 800dd7c:	68b8      	ldr	r0, [r7, #8]
 800dd7e:	f006 ff0f 	bl	8014ba0 <free>
                // Switch page
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_PROGRAM);
 800dd82:	216b      	movs	r1, #107	@ 0x6b
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f005 fa52 	bl	801322e <DWIN_SetPage>
            } break;
 800dd8a:	e000      	b.n	800dd8e <Enter_password+0x14a>

            default : break;
 800dd8c:	bf00      	nop
        }
        /* Goto setting page */
        DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->page_setting);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 34eb 	ldrb.w	r3, [r3, #1259]	@ 0x4eb
 800dd94:	4619      	mov	r1, r3
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f005 fa49 	bl	801322e <DWIN_SetPage>
 800dd9c:	e006      	b.n	800ddac <Enter_password+0x168>
    } else {
        /* Show text */
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_Password,INCORRECT_PASSWORD_TEXT,strlen(INCORRECT_PASSWORD_TEXT));
 800dd9e:	2312      	movs	r3, #18
 800dda0:	4a08      	ldr	r2, [pc, #32]	@ (800ddc4 <Enter_password+0x180>)
 800dda2:	f249 5180 	movw	r1, #38272	@ 0x9580
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f005 fa68 	bl	801327c <DWIN_SetText>
 800ddac:	46b5      	mov	sp, r6
    }
}
 800ddae:	bf00      	nop
 800ddb0:	3724      	adds	r7, #36	@ 0x24
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddb8:	08019e18 	.word	0x08019e18
 800ddbc:	08019de0 	.word	0x08019de0
 800ddc0:	08019dec 	.word	0x08019dec
 800ddc4:	08019e20 	.word	0x08019e20

0800ddc8 <Enter_num_keyboard>:

void Enter_num_keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800ddc8:	b590      	push	{r4, r7, lr}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
    uint16_t VP_show = screen_obj->Screen_keyboard.VP_Text;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	899b      	ldrh	r3, [r3, #12]
 800ddd6:	81fb      	strh	r3, [r7, #14]
    
    /* Show text to VP */
    DWIN_SetText((Dwin_t *)screen_obj,VP_show,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f103 020e 	add.w	r2, r3, #14
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800dde4:	89f9      	ldrh	r1, [r7, #14]
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f005 fa48 	bl	801327c <DWIN_SetText>

    /* Return page base on VP address */
    switch (VP_show) {
 800ddec:	89fb      	ldrh	r3, [r7, #14]
 800ddee:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	f000 8161 	beq.w	800e0ba <Enter_num_keyboard+0x2f2>
 800ddf8:	f249 52d0 	movw	r2, #38352	@ 0x95d0
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	f300 8180 	bgt.w	800e102 <Enter_num_keyboard+0x33a>
 800de02:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 800de06:	4293      	cmp	r3, r2
 800de08:	f000 8157 	beq.w	800e0ba <Enter_num_keyboard+0x2f2>
 800de0c:	f249 52a0 	movw	r2, #38304	@ 0x95a0
 800de10:	4293      	cmp	r3, r2
 800de12:	f300 8176 	bgt.w	800e102 <Enter_num_keyboard+0x33a>
 800de16:	f249 5260 	movw	r2, #38240	@ 0x9560
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d047      	beq.n	800deae <Enter_num_keyboard+0xe6>
 800de1e:	f249 5260 	movw	r2, #38240	@ 0x9560
 800de22:	4293      	cmp	r3, r2
 800de24:	f300 816d 	bgt.w	800e102 <Enter_num_keyboard+0x33a>
 800de28:	f249 5240 	movw	r2, #38208	@ 0x9540
 800de2c:	4293      	cmp	r3, r2
 800de2e:	f000 80f0 	beq.w	800e012 <Enter_num_keyboard+0x24a>
 800de32:	f249 5240 	movw	r2, #38208	@ 0x9540
 800de36:	4293      	cmp	r3, r2
 800de38:	f300 8163 	bgt.w	800e102 <Enter_num_keyboard+0x33a>
 800de3c:	f249 5220 	movw	r2, #38176	@ 0x9520
 800de40:	4293      	cmp	r3, r2
 800de42:	f000 8092 	beq.w	800df6a <Enter_num_keyboard+0x1a2>
 800de46:	f249 5220 	movw	r2, #38176	@ 0x9520
 800de4a:	4293      	cmp	r3, r2
 800de4c:	f300 8159 	bgt.w	800e102 <Enter_num_keyboard+0x33a>
 800de50:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 800de54:	d035      	beq.n	800dec2 <Enter_num_keyboard+0xfa>
 800de56:	f5b3 4f15 	cmp.w	r3, #38144	@ 0x9500
 800de5a:	f300 8152 	bgt.w	800e102 <Enter_num_keyboard+0x33a>
 800de5e:	f249 0240 	movw	r2, #36928	@ 0x9040
 800de62:	4293      	cmp	r3, r2
 800de64:	f000 812e 	beq.w	800e0c4 <Enter_num_keyboard+0x2fc>
 800de68:	f249 0240 	movw	r2, #36928	@ 0x9040
 800de6c:	4293      	cmp	r3, r2
 800de6e:	f300 8148 	bgt.w	800e102 <Enter_num_keyboard+0x33a>
 800de72:	f249 0230 	movw	r2, #36912	@ 0x9030
 800de76:	4293      	cmp	r3, r2
 800de78:	f000 8124 	beq.w	800e0c4 <Enter_num_keyboard+0x2fc>
 800de7c:	f249 0230 	movw	r2, #36912	@ 0x9030
 800de80:	4293      	cmp	r3, r2
 800de82:	f300 813e 	bgt.w	800e102 <Enter_num_keyboard+0x33a>
 800de86:	f249 0220 	movw	r2, #36896	@ 0x9020
 800de8a:	4293      	cmp	r3, r2
 800de8c:	f000 811a 	beq.w	800e0c4 <Enter_num_keyboard+0x2fc>
 800de90:	f249 0220 	movw	r2, #36896	@ 0x9020
 800de94:	4293      	cmp	r3, r2
 800de96:	f300 8134 	bgt.w	800e102 <Enter_num_keyboard+0x33a>
 800de9a:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 800de9e:	f000 8111 	beq.w	800e0c4 <Enter_num_keyboard+0x2fc>
 800dea2:	f249 0210 	movw	r2, #36880	@ 0x9010
 800dea6:	4293      	cmp	r3, r2
 800dea8:	f000 810c 	beq.w	800e0c4 <Enter_num_keyboard+0x2fc>
                DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
                DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
            } 
        } break;
        
        default: break;
 800deac:	e129      	b.n	800e102 <Enter_num_keyboard+0x33a>
            DWIN_ClearText((Dwin_t *)screen_obj,VP_Warning_Password); /* Clear warning text if any */
 800deae:	f249 5180 	movw	r1, #38272	@ 0x9580
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f005 fa52 	bl	801335c <DWIN_ClearText>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_PASSWORD);
 800deb8:	216e      	movs	r1, #110	@ 0x6e
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f005 f9b7 	bl	801322e <DWIN_SetPage>
        } break;
 800dec0:	e122      	b.n	800e108 <Enter_num_keyboard+0x340>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d107      	bne.n	800dedc <Enter_num_keyboard+0x114>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 800decc:	2314      	movs	r3, #20
 800dece:	4a90      	ldr	r2, [pc, #576]	@ (800e110 <Enter_num_keyboard+0x348>)
 800ded0:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f005 f9d1 	bl	801327c <DWIN_SetText>
                return;
 800deda:	e115      	b.n	800e108 <Enter_num_keyboard+0x340>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800dee2:	3301      	adds	r3, #1
 800dee4:	461a      	mov	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800deec:	461c      	mov	r4, r3
 800deee:	4610      	mov	r0, r2
 800def0:	f006 fe4e 	bl	8014b90 <malloc>
 800def4:	4603      	mov	r3, r0
 800def6:	4619      	mov	r1, r3
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	4623      	mov	r3, r4
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	4423      	add	r3, r4
 800df00:	011b      	lsls	r3, r3, #4
 800df02:	4413      	add	r3, r2
 800df04:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800df08:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800df10:	4619      	mov	r1, r3
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	460b      	mov	r3, r1
 800df16:	005b      	lsls	r3, r3, #1
 800df18:	440b      	add	r3, r1
 800df1a:	011b      	lsls	r3, r3, #4
 800df1c:	4413      	add	r3, r2
 800df1e:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800df22:	6818      	ldr	r0, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800df2a:	3301      	adds	r3, #1
 800df2c:	461a      	mov	r2, r3
 800df2e:	2100      	movs	r1, #0
 800df30:	f008 fe94 	bl	8016c5c <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_Program_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800df3a:	4619      	mov	r1, r3
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	460b      	mov	r3, r1
 800df40:	005b      	lsls	r3, r3, #1
 800df42:	440b      	add	r3, r1
 800df44:	011b      	lsls	r3, r3, #4
 800df46:	4413      	add	r3, r2
 800df48:	f503 7377 	add.w	r3, r3, #988	@ 0x3dc
 800df4c:	6818      	ldr	r0, [r3, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f103 010e 	add.w	r1, r3, #14
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800df5a:	461a      	mov	r2, r3
 800df5c:	f008 ffc7 	bl	8016eee <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800df60:	216c      	movs	r1, #108	@ 0x6c
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f005 f963 	bl	801322e <DWIN_SetPage>
        } break;
 800df68:	e0ce      	b.n	800e108 <Enter_num_keyboard+0x340>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800df70:	2b00      	cmp	r3, #0
 800df72:	d107      	bne.n	800df84 <Enter_num_keyboard+0x1bc>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 800df74:	2314      	movs	r3, #20
 800df76:	4a66      	ldr	r2, [pc, #408]	@ (800e110 <Enter_num_keyboard+0x348>)
 800df78:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f005 f97d 	bl	801327c <DWIN_SetText>
                return;
 800df82:	e0c1      	b.n	800e108 <Enter_num_keyboard+0x340>
            screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800df8a:	3301      	adds	r3, #1
 800df8c:	461a      	mov	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800df94:	461c      	mov	r4, r3
 800df96:	4610      	mov	r0, r2
 800df98:	f006 fdfa 	bl	8014b90 <malloc>
 800df9c:	4603      	mov	r3, r0
 800df9e:	4619      	mov	r1, r3
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	4623      	mov	r3, r4
 800dfa4:	005b      	lsls	r3, r3, #1
 800dfa6:	4423      	add	r3, r4
 800dfa8:	011b      	lsls	r3, r3, #4
 800dfaa:	4413      	add	r3, r2
 800dfac:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800dfb0:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800dfb8:	4619      	mov	r1, r3
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	005b      	lsls	r3, r3, #1
 800dfc0:	440b      	add	r3, r1
 800dfc2:	011b      	lsls	r3, r3, #4
 800dfc4:	4413      	add	r3, r2
 800dfc6:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800dfca:	6818      	ldr	r0, [r3, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	f008 fe40 	bl	8016c5c <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].Name_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	440b      	add	r3, r1
 800dfec:	011b      	lsls	r3, r3, #4
 800dfee:	4413      	add	r3, r2
 800dff0:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800dff4:	6818      	ldr	r0, [r3, #0]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f103 010e 	add.w	r1, r3, #14
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e002:	461a      	mov	r2, r3
 800e004:	f008 ff73 	bl	8016eee <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800e008:	216c      	movs	r1, #108	@ 0x6c
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f005 f90f 	bl	801322e <DWIN_SetPage>
        } break;
 800e010:	e07a      	b.n	800e108 <Enter_num_keyboard+0x340>
            if (screen_obj->Screen_keyboard.Index_String == 0) {
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d107      	bne.n	800e02c <Enter_num_keyboard+0x264>
                DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,"Please enter a value",strlen("Please enter a value"));
 800e01c:	2314      	movs	r3, #20
 800e01e:	4a3c      	ldr	r2, [pc, #240]	@ (800e110 <Enter_num_keyboard+0x348>)
 800e020:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f005 f929 	bl	801327c <DWIN_SetText>
                return;
 800e02a:	e06d      	b.n	800e108 <Enter_num_keyboard+0x340>
            screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp = malloc(screen_obj->Screen_keyboard.Index_String + 1);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e032:	3301      	adds	r3, #1
 800e034:	461a      	mov	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800e03c:	461c      	mov	r4, r3
 800e03e:	4610      	mov	r0, r2
 800e040:	f006 fda6 	bl	8014b90 <malloc>
 800e044:	4603      	mov	r3, r0
 800e046:	4619      	mov	r1, r3
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	4623      	mov	r3, r4
 800e04c:	005b      	lsls	r3, r3, #1
 800e04e:	4423      	add	r3, r4
 800e050:	011b      	lsls	r3, r3, #4
 800e052:	4413      	add	r3, r2
 800e054:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800e058:	6019      	str	r1, [r3, #0]
            memset(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,0,screen_obj->Screen_keyboard.Index_String + 1);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800e060:	4619      	mov	r1, r3
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	440b      	add	r3, r1
 800e06a:	011b      	lsls	r3, r3, #4
 800e06c:	4413      	add	r3, r2
 800e06e:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800e072:	6818      	ldr	r0, [r3, #0]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e07a:	3301      	adds	r3, #1
 800e07c:	461a      	mov	r2, r3
 800e07e:	2100      	movs	r1, #0
 800e080:	f008 fdec 	bl	8016c5c <memset>
            memcpy(screen_obj->Program_Testx[screen_obj->modify_program_index].num_IC_temp,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f893 34ea 	ldrb.w	r3, [r3, #1258]	@ 0x4ea
 800e08a:	4619      	mov	r1, r3
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	460b      	mov	r3, r1
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	440b      	add	r3, r1
 800e094:	011b      	lsls	r3, r3, #4
 800e096:	4413      	add	r3, r2
 800e098:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800e09c:	6818      	ldr	r0, [r3, #0]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f103 010e 	add.w	r1, r3, #14
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	f008 ff1f 	bl	8016eee <memcpy>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MODIFY_PROGRAM);
 800e0b0:	216c      	movs	r1, #108	@ 0x6c
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f005 f8bb 	bl	801322e <DWIN_SetPage>
        } break;
 800e0b8:	e026      	b.n	800e108 <Enter_num_keyboard+0x340>
            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_SETTING_WIFI);
 800e0ba:	2175      	movs	r1, #117	@ 0x75
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f005 f8b6 	bl	801322e <DWIN_SetPage>
        } break;
 800e0c2:	e021      	b.n	800e108 <Enter_num_keyboard+0x340>
            if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 fa83 	bl	800e5d0 <Screen_CheckInput_Keyboard>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d11a      	bne.n	800e106 <Enter_num_keyboard+0x33e>
                get_input_keyboard((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	899b      	ldrh	r3, [r3, #12]
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f003 f96c 	bl	80113b4 <get_input_keyboard>
                DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	8999      	ldrh	r1, [r3, #12]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f103 020e 	add.w	r2, r3, #14
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f005 f8c5 	bl	801327c <DWIN_SetText>
                DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f005 f897 	bl	801322e <DWIN_SetPage>
        } break;
 800e100:	e001      	b.n	800e106 <Enter_num_keyboard+0x33e>
        default: break;
 800e102:	bf00      	nop
 800e104:	e000      	b.n	800e108 <Enter_num_keyboard+0x340>
        } break;
 800e106:	bf00      	nop
    }
}
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd90      	pop	{r4, r7, pc}
 800e10e:	bf00      	nop
 800e110:	08019e34 	.word	0x08019e34

0800e114 <Enter_setting_time>:

void Enter_setting_time(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800e114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e118:	b086      	sub	sp, #24
 800e11a:	af04      	add	r7, sp, #16
 800e11c:	6078      	str	r0, [r7, #4]
 800e11e:	6039      	str	r1, [r7, #0]
    if (strlen(screen_obj->Time_setting.Day) == 0 ||
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d017      	beq.n	800e15c <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Month) == 0 || 
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f203 43d7 	addw	r3, r3, #1239	@ 0x4d7
 800e132:	781b      	ldrb	r3, [r3, #0]
    if (strlen(screen_obj->Time_setting.Day) == 0 ||
 800e134:	2b00      	cmp	r3, #0
 800e136:	d011      	beq.n	800e15c <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Year) == 0 || 
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f203 43da 	addw	r3, r3, #1242	@ 0x4da
 800e13e:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Month) == 0 || 
 800e140:	2b00      	cmp	r3, #0
 800e142:	d00b      	beq.n	800e15c <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Hour) == 0 || 
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f203 43dd 	addw	r3, r3, #1245	@ 0x4dd
 800e14a:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Year) == 0 || 
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d005      	beq.n	800e15c <Enter_setting_time+0x48>
    strlen(screen_obj->Time_setting.Minute) == 0 ) {
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 800e156:	781b      	ldrb	r3, [r3, #0]
    strlen(screen_obj->Time_setting.Hour) == 0 || 
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d107      	bne.n	800e16c <Enter_setting_time+0x58>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Warning_setting_time,"Enter all times before saving",strlen("Enter all times before saving"));
 800e15c:	231d      	movs	r3, #29
 800e15e:	4a1e      	ldr	r2, [pc, #120]	@ (800e1d8 <Enter_setting_time+0xc4>)
 800e160:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f005 f889 	bl	801327c <DWIN_SetText>
        return;
 800e16a:	e031      	b.n	800e1d0 <Enter_setting_time+0xbc>
    } else {
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 800e172:	4618      	mov	r0, r3
 800e174:	f006 fd07 	bl	8014b86 <atoi>
 800e178:	4603      	mov	r3, r0
 800e17a:	b2de      	uxtb	r6, r3
        atoi(screen_obj->Time_setting.Hour),
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f203 43dd 	addw	r3, r3, #1245	@ 0x4dd
 800e182:	4618      	mov	r0, r3
 800e184:	f006 fcff 	bl	8014b86 <atoi>
 800e188:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 800e18a:	fa5f f883 	uxtb.w	r8, r3
        atoi(screen_obj->Time_setting.Day),
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 800e194:	4618      	mov	r0, r3
 800e196:	f006 fcf6 	bl	8014b86 <atoi>
 800e19a:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 800e19c:	b2dc      	uxtb	r4, r3
        atoi(screen_obj->Time_setting.Month),
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f203 43d7 	addw	r3, r3, #1239	@ 0x4d7
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f006 fcee 	bl	8014b86 <atoi>
 800e1aa:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 800e1ac:	b2dd      	uxtb	r5, r3
        atoi(screen_obj->Time_setting.Year));
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f203 43da 	addw	r3, r3, #1242	@ 0x4da
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f006 fce6 	bl	8014b86 <atoi>
 800e1ba:	4603      	mov	r3, r0
        DS3231_Write_time(&ds3231,00,atoi(screen_obj->Time_setting.Minute),
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	9302      	str	r3, [sp, #8]
 800e1c0:	9501      	str	r5, [sp, #4]
 800e1c2:	9400      	str	r4, [sp, #0]
 800e1c4:	4643      	mov	r3, r8
 800e1c6:	4632      	mov	r2, r6
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	4804      	ldr	r0, [pc, #16]	@ (800e1dc <Enter_setting_time+0xc8>)
 800e1cc:	f004 ffa2 	bl	8013114 <DS3231_Write_time>
    }
}
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d8:	08019e4c 	.word	0x08019e4c
 800e1dc:	2000143c 	.word	0x2000143c

0800e1e0 <Enter_setting_wifi>:

void Enter_setting_wifi(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]

}
 800e1ea:	bf00      	nop
 800e1ec:	370c      	adds	r7, #12
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bc80      	pop	{r7}
 800e1f2:	4770      	bx	lr

0800e1f4 <Keyboard>:

void Keyboard(Screen_t *const screen_obj, screen_event_t *const screen_event) {
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
    
    /* The other Functions button */
    if (screen_event->data == 0xF3) { // Delete button
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	789b      	ldrb	r3, [r3, #2]
 800e202:	2bf3      	cmp	r3, #243	@ 0xf3
 800e204:	d116      	bne.n	800e234 <Keyboard+0x40>
        if (screen_obj->Screen_keyboard.Index_String != 0) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 8096 	beq.w	800e33e <Keyboard+0x14a>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String - 1] = 0;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e218:	3b01      	subs	r3, #1
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	4413      	add	r3, r2
 800e21e:	2200      	movs	r2, #0
 800e220:	739a      	strb	r2, [r3, #14]
            --screen_obj->Screen_keyboard.Index_String;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e228:	3b01      	subs	r3, #1
 800e22a:	b29a      	uxth	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800e232:	e084      	b.n	800e33e <Keyboard+0x14a>
        }
    } else if (screen_event->data == 0xF4) { // Caplock button
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	789b      	ldrb	r3, [r3, #2]
 800e238:	2bf4      	cmp	r3, #244	@ 0xf4
 800e23a:	d11a      	bne.n	800e272 <Keyboard+0x7e>
        /* Toggle status Caplock keyboard */
        screen_obj->Screen_keyboard.Caplock = !screen_obj->Screen_keyboard.Caplock; 
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e242:	2b00      	cmp	r3, #0
 800e244:	bf14      	ite	ne
 800e246:	2301      	movne	r3, #1
 800e248:	2300      	moveq	r3, #0
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	f083 0301 	eor.w	r3, r3, #1
 800e250:	b2db      	uxtb	r3, r3
 800e252:	f003 0301 	and.w	r3, r3, #1
 800e256:	b2da      	uxtb	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_CAPLOCK,screen_obj->Screen_keyboard.Caplock);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e264:	461a      	mov	r2, r3
 800e266:	f44f 4184 	mov.w	r1, #16896	@ 0x4200
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f005 f8b9 	bl	80133e2 <DWIN_SetVariable_Icon>
 800e270:	e065      	b.n	800e33e <Keyboard+0x14a>
    } else if (screen_event->data == 0xF2) { // Space button
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	789b      	ldrb	r3, [r3, #2]
 800e276:	2bf2      	cmp	r3, #242	@ 0xf2
 800e278:	d061      	beq.n	800e33e <Keyboard+0x14a>
        // screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = 32;
    } else if (screen_event->data == 0xF1) { // Enter button
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	789b      	ldrb	r3, [r3, #2]
 800e27e:	2bf1      	cmp	r3, #241	@ 0xf1
 800e280:	d11e      	bne.n	800e2c0 <Keyboard+0xcc>
        // Check if the data is valid
        if (Screen_CheckInput_Keyboard(screen_obj) == Status_SUCCESS) {
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 f9a4 	bl	800e5d0 <Screen_CheckInput_Keyboard>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d157      	bne.n	800e33e <Keyboard+0x14a>
            // get data
            get_input_keyboard((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	899b      	ldrh	r3, [r3, #12]
 800e292:	4619      	mov	r1, r3
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f003 f88d 	bl	80113b4 <get_input_keyboard>
            // Show data input to VP 
            DWIN_SetText((Dwin_t *)screen_obj,screen_obj->Screen_keyboard.VP_Text,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	8999      	ldrh	r1, [r3, #12]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f103 020e 	add.w	r2, r3, #14
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f004 ffe6 	bl	801327c <DWIN_SetText>
            DWIN_SetPage((Dwin_t *)screen_obj,screen_obj->pre_page); // switch to previous page
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f893 34e8 	ldrb.w	r3, [r3, #1256]	@ 0x4e8
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f004 ffb8 	bl	801322e <DWIN_SetPage>
 800e2be:	e03e      	b.n	800e33e <Keyboard+0x14a>
        } 
    }
    /* the data value is the character input -> add to string */
    else if (screen_event->data >= 0x41 && screen_event->data <= 0x5A) { // letter need check Caplock
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	789b      	ldrb	r3, [r3, #2]
 800e2c4:	2b40      	cmp	r3, #64	@ 0x40
 800e2c6:	d92c      	bls.n	800e322 <Keyboard+0x12e>
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	789b      	ldrb	r3, [r3, #2]
 800e2cc:	2b5a      	cmp	r3, #90	@ 0x5a
 800e2ce:	d828      	bhi.n	800e322 <Keyboard+0x12e>
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2d6:	f083 0301 	eor.w	r3, r3, #1
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d011      	beq.n	800e304 <Keyboard+0x110>
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data + 0x20;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	789a      	ldrb	r2, [r3, #2]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e2ea:	1c59      	adds	r1, r3, #1
 800e2ec:	b288      	uxth	r0, r1
 800e2ee:	6879      	ldr	r1, [r7, #4]
 800e2f0:	f8a1 0040 	strh.w	r0, [r1, #64]	@ 0x40
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	f102 0320 	add.w	r3, r2, #32
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	440b      	add	r3, r1
 800e300:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 800e302:	e01c      	b.n	800e33e <Keyboard+0x14a>
        } else {
            screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e30a:	1c5a      	adds	r2, r3, #1
 800e30c:	b291      	uxth	r1, r2
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800e314:	4619      	mov	r1, r3
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	789a      	ldrb	r2, [r3, #2]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	440b      	add	r3, r1
 800e31e:	739a      	strb	r2, [r3, #14]
        if (screen_obj->Screen_keyboard.Caplock == false) { // Caplock is on
 800e320:	e00d      	b.n	800e33e <Keyboard+0x14a>
        }
    } else {
        screen_obj->Screen_keyboard.String[screen_obj->Screen_keyboard.Index_String++] = screen_event->data;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e328:	1c5a      	adds	r2, r3, #1
 800e32a:	b291      	uxth	r1, r2
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	f8a2 1040 	strh.w	r1, [r2, #64]	@ 0x40
 800e332:	4619      	mov	r1, r3
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	789a      	ldrb	r2, [r3, #2]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	440b      	add	r3, r1
 800e33c:	739a      	strb	r2, [r3, #14]
    }

    /* Show string input keyboard */
    DWIN_SetText((Dwin_t *)screen_obj,VP_ShowString_Keyboard,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f103 020e 	add.w	r2, r3, #14
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e34a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f004 ff94 	bl	801327c <DWIN_SetText>
}
 800e354:	bf00      	nop
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <Index_VP>:
#pragma endregion CALLBACK FUNCTION VP ADRRESS 

#pragma region FUNCTION EXCUTE SCREEN

// binary search index of VP address
uint8_t Index_VP(uint16_t vp, VP_item* VP_array, uint8_t Size_array) {
 800e35c:	b480      	push	{r7}
 800e35e:	b087      	sub	sp, #28
 800e360:	af00      	add	r7, sp, #0
 800e362:	4603      	mov	r3, r0
 800e364:	6039      	str	r1, [r7, #0]
 800e366:	80fb      	strh	r3, [r7, #6]
 800e368:	4613      	mov	r3, r2
 800e36a:	717b      	strb	r3, [r7, #5]
    int left = 0;
 800e36c:	2300      	movs	r3, #0
 800e36e:	617b      	str	r3, [r7, #20]
    int right = Size_array - 1;
 800e370:	797b      	ldrb	r3, [r7, #5]
 800e372:	3b01      	subs	r3, #1
 800e374:	613b      	str	r3, [r7, #16]
    int mid;

    while (left <= right) {
 800e376:	e023      	b.n	800e3c0 <Index_VP+0x64>
        mid = (left + right) / 2;
 800e378:	697a      	ldr	r2, [r7, #20]
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	4413      	add	r3, r2
 800e37e:	0fda      	lsrs	r2, r3, #31
 800e380:	4413      	add	r3, r2
 800e382:	105b      	asrs	r3, r3, #1
 800e384:	60fb      	str	r3, [r7, #12]
        if (VP_array[mid].VP_address == vp) {
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	683a      	ldr	r2, [r7, #0]
 800e38c:	4413      	add	r3, r2
 800e38e:	881b      	ldrh	r3, [r3, #0]
 800e390:	88fa      	ldrh	r2, [r7, #6]
 800e392:	429a      	cmp	r2, r3
 800e394:	d105      	bne.n	800e3a2 <Index_VP+0x46>
            return VP_array[mid].index;  // Found the vp
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	4413      	add	r3, r2
 800e39e:	789b      	ldrb	r3, [r3, #2]
 800e3a0:	e013      	b.n	800e3ca <Index_VP+0x6e>
        } else if (VP_array[mid].VP_address > vp) {
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	683a      	ldr	r2, [r7, #0]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	881b      	ldrh	r3, [r3, #0]
 800e3ac:	88fa      	ldrh	r2, [r7, #6]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d203      	bcs.n	800e3ba <Index_VP+0x5e>
            right = mid - 1;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	613b      	str	r3, [r7, #16]
 800e3b8:	e002      	b.n	800e3c0 <Index_VP+0x64>
        } else {
            left = mid + 1;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	617b      	str	r3, [r7, #20]
    while (left <= right) {
 800e3c0:	697a      	ldr	r2, [r7, #20]
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	ddd7      	ble.n	800e378 <Index_VP+0x1c>
        }
    }

    return 255;  // VP not found
 800e3c8:	23ff      	movs	r3, #255	@ 0xff
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	371c      	adds	r7, #28
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bc80      	pop	{r7}
 800e3d2:	4770      	bx	lr

0800e3d4 <Screen_init_handler_table>:

void Screen_init_handler_table(Screen_t *const obj_screen) {
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
                                                                a_handler_full_keyboard,
                                                                a_handler_save_sig,
                                                                a_handler_enter_sig };

    // Assign the callback function to handler table
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PAGE]         = Navigation_setting_page;
 800e3dc:	4b41      	ldr	r3, [pc, #260]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a41      	ldr	r2, [pc, #260]	@ (800e4e8 <Screen_init_handler_table+0x114>)
 800e3e2:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_RETURN]               = Navigation_return;
 800e3e4:	4b3f      	ldr	r3, [pc, #252]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	3304      	adds	r3, #4
 800e3ea:	4a40      	ldr	r2, [pc, #256]	@ (800e4ec <Screen_init_handler_table+0x118>)
 800e3ec:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_HOME]                 = Navigation_home_page;
 800e3ee:	4b3d      	ldr	r3, [pc, #244]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	3308      	adds	r3, #8
 800e3f4:	4a3e      	ldr	r2, [pc, #248]	@ (800e4f0 <Screen_init_handler_table+0x11c>)
 800e3f6:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_PROGRAM]      = Navigation_setting_program;
 800e3f8:	4b3a      	ldr	r3, [pc, #232]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	3314      	adds	r3, #20
 800e3fe:	4a3d      	ldr	r2, [pc, #244]	@ (800e4f4 <Screen_init_handler_table+0x120>)
 800e400:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_TIME]         = Navigation_setting_time;
 800e402:	4b38      	ldr	r3, [pc, #224]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	330c      	adds	r3, #12
 800e408:	4a3b      	ldr	r2, [pc, #236]	@ (800e4f8 <Screen_init_handler_table+0x124>)
 800e40a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_SETTING_WIFI]         = Navigation_setting_wifi;
 800e40c:	4b35      	ldr	r3, [pc, #212]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	3310      	adds	r3, #16
 800e412:	4a3a      	ldr	r2, [pc, #232]	@ (800e4fc <Screen_init_handler_table+0x128>)
 800e414:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_MODIFY_PROGRAM]       = Navigation_modify_program;
 800e416:	4b33      	ldr	r3, [pc, #204]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3328      	adds	r3, #40	@ 0x28
 800e41c:	4a38      	ldr	r2, [pc, #224]	@ (800e500 <Screen_init_handler_table+0x12c>)
 800e41e:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_DETAIL_MAINPAGE]      = Navigation_detail_mainpage;
 800e420:	4b30      	ldr	r3, [pc, #192]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	332c      	adds	r3, #44	@ 0x2c
 800e426:	4a37      	ldr	r2, [pc, #220]	@ (800e504 <Screen_init_handler_table+0x130>)
 800e428:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_GRAPH_MAINPAGE]       = Navigation_graph_mainpage;
 800e42a:	4b2e      	ldr	r3, [pc, #184]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	3330      	adds	r3, #48	@ 0x30
 800e430:	4a35      	ldr	r2, [pc, #212]	@ (800e508 <Screen_init_handler_table+0x134>)
 800e432:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_MAINPAGE]      = Navigation_Change_MainPage;
 800e434:	4b2b      	ldr	r3, [pc, #172]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	3318      	adds	r3, #24
 800e43a:	4a34      	ldr	r2, [pc, #208]	@ (800e50c <Screen_init_handler_table+0x138>)
 800e43c:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASEDATA]      = Navigation_Change_CaseTest;
 800e43e:	4b29      	ldr	r3, [pc, #164]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	331c      	adds	r3, #28
 800e444:	4a32      	ldr	r2, [pc, #200]	@ (800e510 <Screen_init_handler_table+0x13c>)
 800e446:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_CHANGE_CASE_PULSE]    = Navigation_Change_CasePulse;
 800e448:	4b26      	ldr	r3, [pc, #152]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3334      	adds	r3, #52	@ 0x34
 800e44e:	4a31      	ldr	r2, [pc, #196]	@ (800e514 <Screen_init_handler_table+0x140>)
 800e450:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_FINISH_REVIEW]        = Navigation_Finish_Review;
 800e452:	4b24      	ldr	r3, [pc, #144]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	3338      	adds	r3, #56	@ 0x38
 800e458:	4a2f      	ldr	r2, [pc, #188]	@ (800e518 <Screen_init_handler_table+0x144>)
 800e45a:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_INFORMATION]          = Navigation_Information;
 800e45c:	4b21      	ldr	r3, [pc, #132]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3320      	adds	r3, #32
 800e462:	4a2e      	ldr	r2, [pc, #184]	@ (800e51c <Screen_init_handler_table+0x148>)
 800e464:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_NAVIGATION][NAVIGATION_LOGGING]              = Navigation_Logging;
 800e466:	4b1f      	ldr	r3, [pc, #124]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	3324      	adds	r3, #36	@ 0x24
 800e46c:	4a2c      	ldr	r2, [pc, #176]	@ (800e520 <Screen_init_handler_table+0x14c>)
 800e46e:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SELECTION][ON_OFF_DEV]                       = ON_OFF_Button;
 800e470:	4b1c      	ldr	r3, [pc, #112]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	4a2b      	ldr	r2, [pc, #172]	@ (800e524 <Screen_init_handler_table+0x150>)
 800e476:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SELECT_PROGRAM]                   = select_running_program;
 800e478:	4b1a      	ldr	r3, [pc, #104]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	3304      	adds	r3, #4
 800e47e:	4a2a      	ldr	r2, [pc, #168]	@ (800e528 <Screen_init_handler_table+0x154>)
 800e480:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_SELECTION][SElECT_MODIFY_PROGRAM]            = select_modify_program;
 800e482:	4b18      	ldr	r3, [pc, #96]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	3308      	adds	r3, #8
 800e488:	4a28      	ldr	r2, [pc, #160]	@ (800e52c <Screen_init_handler_table+0x158>)
 800e48a:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]     = Navigation_num_keyboard;
 800e48c:	4b15      	ldr	r3, [pc, #84]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	4a27      	ldr	r2, [pc, #156]	@ (800e530 <Screen_init_handler_table+0x15c>)
 800e492:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD]    = Navigation_full_keyboard;
 800e494:	4b13      	ldr	r3, [pc, #76]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e496:	691b      	ldr	r3, [r3, #16]
 800e498:	4a26      	ldr	r2, [pc, #152]	@ (800e534 <Screen_init_handler_table+0x160>)
 800e49a:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_SAVE][VALUE_SAVE_INFORMATION]                = Save_Information;
 800e49c:	4b11      	ldr	r3, [pc, #68]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	4a25      	ldr	r2, [pc, #148]	@ (800e538 <Screen_init_handler_table+0x164>)
 800e4a2:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_ENTER][ENTER_PASSWORD]                       = Enter_password;
 800e4a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	4a24      	ldr	r2, [pc, #144]	@ (800e53c <Screen_init_handler_table+0x168>)
 800e4aa:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_NUM_KEYBOARD]                   = Enter_num_keyboard;
 800e4ac:	4b0d      	ldr	r3, [pc, #52]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e4ae:	699b      	ldr	r3, [r3, #24]
 800e4b0:	3304      	adds	r3, #4
 800e4b2:	4a23      	ldr	r2, [pc, #140]	@ (800e540 <Screen_init_handler_table+0x16c>)
 800e4b4:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_TIME]                           = Enter_setting_time;
 800e4b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e4b8:	699b      	ldr	r3, [r3, #24]
 800e4ba:	330c      	adds	r3, #12
 800e4bc:	4a21      	ldr	r2, [pc, #132]	@ (800e544 <Screen_init_handler_table+0x170>)
 800e4be:	601a      	str	r2, [r3, #0]
    handler_function_table[SIG_ENTER][ENTER_WIFI]                           = Enter_setting_wifi;
 800e4c0:	4b08      	ldr	r3, [pc, #32]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e4c2:	699b      	ldr	r3, [r3, #24]
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	4a20      	ldr	r2, [pc, #128]	@ (800e548 <Screen_init_handler_table+0x174>)
 800e4c8:	601a      	str	r2, [r3, #0]

    handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD]                     = Keyboard;
 800e4ca:	4b06      	ldr	r3, [pc, #24]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e4cc:	689b      	ldr	r3, [r3, #8]
 800e4ce:	4a1f      	ldr	r2, [pc, #124]	@ (800e54c <Screen_init_handler_table+0x178>)
 800e4d0:	601a      	str	r2, [r3, #0]

    // assign handler table to handler table of object
    obj_screen->p_handler_table = (void *)handler_function_table;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4a03      	ldr	r2, [pc, #12]	@ (800e4e4 <Screen_init_handler_table+0x110>)
 800e4d6:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
}
 800e4da:	bf00      	nop
 800e4dc:	370c      	adds	r7, #12
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bc80      	pop	{r7}
 800e4e2:	4770      	bx	lr
 800e4e4:	20000114 	.word	0x20000114
 800e4e8:	0800bc85 	.word	0x0800bc85
 800e4ec:	0800bd11 	.word	0x0800bd11
 800e4f0:	0800bcbb 	.word	0x0800bcbb
 800e4f4:	0800bd5d 	.word	0x0800bd5d
 800e4f8:	0800bd9d 	.word	0x0800bd9d
 800e4fc:	0800be4b 	.word	0x0800be4b
 800e500:	0800beb1 	.word	0x0800beb1
 800e504:	0800bfbb 	.word	0x0800bfbb
 800e508:	0800c025 	.word	0x0800c025
 800e50c:	0800c073 	.word	0x0800c073
 800e510:	0800c119 	.word	0x0800c119
 800e514:	0800c329 	.word	0x0800c329
 800e518:	0800c3fd 	.word	0x0800c3fd
 800e51c:	0800c9f5 	.word	0x0800c9f5
 800e520:	0800ca0f 	.word	0x0800ca0f
 800e524:	0800ca29 	.word	0x0800ca29
 800e528:	0800ce99 	.word	0x0800ce99
 800e52c:	0800cebd 	.word	0x0800cebd
 800e530:	0800cfd5 	.word	0x0800cfd5
 800e534:	0800d0b1 	.word	0x0800d0b1
 800e538:	0800d105 	.word	0x0800d105
 800e53c:	0800dc45 	.word	0x0800dc45
 800e540:	0800ddc9 	.word	0x0800ddc9
 800e544:	0800e115 	.word	0x0800e115
 800e548:	0800e1e1 	.word	0x0800e1e1
 800e54c:	0800e1f5 	.word	0x0800e1f5

0800e550 <Screen_excute_RX_function>:

void Screen_excute_RX_function(Screen_t *const obj_screen,screen_event_t *const screen_e) {
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
    // do sth ...
	handler_func **handler_function_table = (handler_func **) obj_screen->p_handler_table;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 800e560:	60fb      	str	r3, [r7, #12]
    // excute the callback function
    if (screen_e->event == SIG_KEYBOARD) {  // ENVENT KEYBOARD
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	2b02      	cmp	r3, #2
 800e568:	d107      	bne.n	800e57a <Screen_excute_RX_function+0x2a>
        handler_function_table[SIG_KEYBOARD][VALUE_KEBOARD](obj_screen, screen_e);   
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	3308      	adds	r3, #8
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	6839      	ldr	r1, [r7, #0]
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	4798      	blx	r3
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
    } else {
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
    }  
}
 800e578:	e025      	b.n	800e5c6 <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_NUM_KEYBOARD) {  // SWTICH TO NUMBER KEYBOARD
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	2b03      	cmp	r3, #3
 800e580:	d107      	bne.n	800e592 <Screen_excute_RX_function+0x42>
        handler_function_table[SIG_NUM_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);  
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	330c      	adds	r3, #12
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	4798      	blx	r3
}
 800e590:	e019      	b.n	800e5c6 <Screen_excute_RX_function+0x76>
    } else if (screen_e->event == SIG_FULL_KEYBOARD) {
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	2b04      	cmp	r3, #4
 800e598:	d107      	bne.n	800e5aa <Screen_excute_RX_function+0x5a>
        handler_function_table[SIG_FULL_KEYBOARD][VALUE_NAVIGATION_KEYBOARD](obj_screen, screen_e);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	3310      	adds	r3, #16
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	6839      	ldr	r1, [r7, #0]
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	4798      	blx	r3
}
 800e5a8:	e00d      	b.n	800e5c6 <Screen_excute_RX_function+0x76>
        handler_function_table[screen_e->event][screen_e->action](obj_screen, screen_e);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	785b      	ldrb	r3, [r3, #1]
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	4413      	add	r3, r2
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6839      	ldr	r1, [r7, #0]
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	4798      	blx	r3
}
 800e5c6:	bf00      	nop
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
	...

0800e5d0 <Screen_CheckInput_Keyboard>:

#pragma endregion FUNCTION EXCUTE SCREEN

#pragma region FUNCTION SCREEN 

Return_Status Screen_CheckInput_Keyboard(Screen_t *const screen_obj) {
 800e5d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5d4:	b08f      	sub	sp, #60	@ 0x3c
 800e5d6:	af02      	add	r7, sp, #8
 800e5d8:	6078      	str	r0, [r7, #4]
 800e5da:	466b      	mov	r3, sp
 800e5dc:	461e      	mov	r6, r3
    char string[screen_obj->Screen_keyboard.Index_String];
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5ea:	b28b      	uxth	r3, r1
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	4698      	mov	r8, r3
 800e5f0:	4691      	mov	r9, r2
 800e5f2:	f04f 0200 	mov.w	r2, #0
 800e5f6:	f04f 0300 	mov.w	r3, #0
 800e5fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e5fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e606:	b28b      	uxth	r3, r1
 800e608:	2200      	movs	r2, #0
 800e60a:	461c      	mov	r4, r3
 800e60c:	4615      	mov	r5, r2
 800e60e:	f04f 0200 	mov.w	r2, #0
 800e612:	f04f 0300 	mov.w	r3, #0
 800e616:	00eb      	lsls	r3, r5, #3
 800e618:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e61c:	00e2      	lsls	r2, r4, #3
 800e61e:	460b      	mov	r3, r1
 800e620:	3307      	adds	r3, #7
 800e622:	08db      	lsrs	r3, r3, #3
 800e624:	00db      	lsls	r3, r3, #3
 800e626:	ebad 0d03 	sub.w	sp, sp, r3
 800e62a:	ab02      	add	r3, sp, #8
 800e62c:	3300      	adds	r3, #0
 800e62e:	62bb      	str	r3, [r7, #40]	@ 0x28
    char warm_string[20] = {0};
 800e630:	f107 030c 	add.w	r3, r7, #12
 800e634:	2200      	movs	r2, #0
 800e636:	601a      	str	r2, [r3, #0]
 800e638:	605a      	str	r2, [r3, #4]
 800e63a:	609a      	str	r2, [r3, #8]
 800e63c:	60da      	str	r2, [r3, #12]
 800e63e:	611a      	str	r2, [r3, #16]
    float data_compare;
    uint8_t index_condition;
    // copy string
    memcpy(string,screen_obj->Screen_keyboard.String,screen_obj->Screen_keyboard.Index_String);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f103 010e 	add.w	r1, r3, #14
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e64c:	461a      	mov	r2, r3
 800e64e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e650:	f008 fc4d 	bl	8016eee <memcpy>
    string[screen_obj->Screen_keyboard.Index_String] = '\0';
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e65a:	461a      	mov	r2, r3
 800e65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e65e:	2100      	movs	r1, #0
 800e660:	5499      	strb	r1, [r3, r2]
    /* get index correspond with vp */
    index_condition = Index_VP(screen_obj->Screen_keyboard.VP_Text,lookup_VP_condition,(sizeof(lookup_VP_condition)/ sizeof(lookup_VP_condition[0])));
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	899b      	ldrh	r3, [r3, #12]
 800e666:	2205      	movs	r2, #5
 800e668:	4938      	ldr	r1, [pc, #224]	@ (800e74c <Screen_CheckInput_Keyboard+0x17c>)
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7ff fe76 	bl	800e35c <Index_VP>
 800e670:	4603      	mov	r3, r0
 800e672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* compare data with limit */
    data_compare = atof(string);
 800e676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e678:	f006 fa82 	bl	8014b80 <atof>
 800e67c:	4602      	mov	r2, r0
 800e67e:	460b      	mov	r3, r1
 800e680:	4610      	mov	r0, r2
 800e682:	4619      	mov	r1, r3
 800e684:	f7f2 fa2a 	bl	8000adc <__aeabi_d2f>
 800e688:	4603      	mov	r3, r0
 800e68a:	623b      	str	r3, [r7, #32]
    if (data_compare > screen_obj->Screen_condition[index_condition].max_value) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e694:	00db      	lsls	r3, r3, #3
 800e696:	4413      	add	r3, r2
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4619      	mov	r1, r3
 800e69c:	6a38      	ldr	r0, [r7, #32]
 800e69e:	f7f2 fad9 	bl	8000c54 <__aeabi_fcmpgt>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d01d      	beq.n	800e6e4 <Screen_CheckInput_Keyboard+0x114>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MAX: %.2f", screen_obj->Screen_condition[index_condition].max_value);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6b0:	00db      	lsls	r3, r3, #3
 800e6b2:	4413      	add	r3, r2
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7f1 fec0 	bl	800043c <__aeabi_f2d>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	460b      	mov	r3, r1
 800e6c0:	f107 000c 	add.w	r0, r7, #12
 800e6c4:	e9cd 2300 	strd	r2, r3, [sp]
 800e6c8:	4a21      	ldr	r2, [pc, #132]	@ (800e750 <Screen_CheckInput_Keyboard+0x180>)
 800e6ca:	2114      	movs	r1, #20
 800e6cc:	f008 f958 	bl	8016980 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800e6d0:	f107 020c 	add.w	r2, r7, #12
 800e6d4:	2314      	movs	r3, #20
 800e6d6:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f004 fdce 	bl	801327c <DWIN_SetText>
        return Status_ERROR;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	e02c      	b.n	800e73e <Screen_CheckInput_Keyboard+0x16e>
    } else if (data_compare < screen_obj->Screen_condition[index_condition].min_value) {
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6ec:	00db      	lsls	r3, r3, #3
 800e6ee:	4413      	add	r3, r2
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	6a38      	ldr	r0, [r7, #32]
 800e6f6:	f7f2 fa8f 	bl	8000c18 <__aeabi_fcmplt>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d01d      	beq.n	800e73c <Screen_CheckInput_Keyboard+0x16c>
        // Create warm string
        snprintf(warm_string,sizeof(warm_string),"MIN: %.2f", screen_obj->Screen_condition[index_condition].min_value);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e708:	00db      	lsls	r3, r3, #3
 800e70a:	4413      	add	r3, r2
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	4618      	mov	r0, r3
 800e710:	f7f1 fe94 	bl	800043c <__aeabi_f2d>
 800e714:	4602      	mov	r2, r0
 800e716:	460b      	mov	r3, r1
 800e718:	f107 000c 	add.w	r0, r7, #12
 800e71c:	e9cd 2300 	strd	r2, r3, [sp]
 800e720:	4a0c      	ldr	r2, [pc, #48]	@ (800e754 <Screen_CheckInput_Keyboard+0x184>)
 800e722:	2114      	movs	r1, #20
 800e724:	f008 f92c 	bl	8016980 <sniprintf>
        // Display warning
        DWIN_SetText((Dwin_t *)screen_obj,VP_ShowWarning_Keyboard,warm_string,sizeof(warm_string));
 800e728:	f107 020c 	add.w	r2, r7, #12
 800e72c:	2314      	movs	r3, #20
 800e72e:	f44f 4171 	mov.w	r1, #61696	@ 0xf100
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f004 fda2 	bl	801327c <DWIN_SetText>
        return Status_ERROR;
 800e738:	2300      	movs	r3, #0
 800e73a:	e000      	b.n	800e73e <Screen_CheckInput_Keyboard+0x16e>
    } 
    return Status_SUCCESS; 
 800e73c:	2301      	movs	r3, #1
 800e73e:	46b5      	mov	sp, r6
}
 800e740:	4618      	mov	r0, r3
 800e742:	3734      	adds	r7, #52	@ 0x34
 800e744:	46bd      	mov	sp, r7
 800e746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e74a:	bf00      	nop
 800e74c:	20000040 	.word	0x20000040
 800e750:	08019e6c 	.word	0x08019e6c
 800e754:	08019e78 	.word	0x08019e78

0800e758 <Screen_GetIcon_Pin>:
 * @brief Function used to setup icon with data test
 * 
 * @param obj_screen : object screen
 * @param data_pin : array 2d data test
 */
static void Screen_GetIcon_Pin(Screen_t *const screen_obj, char *data_pin) {
 800e758:	b590      	push	{r4, r7, lr}
 800e75a:	b0a5      	sub	sp, #148	@ 0x94
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
    uint8_t num_pin = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_pin;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800e768:	4619      	mov	r1, r3
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e770:	fb01 f303 	mul.w	r3, r1, r3
 800e774:	4413      	add	r3, r2
 800e776:	334b      	adds	r3, #75	@ 0x4b
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	4619      	mov	r1, r3
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	460b      	mov	r3, r1
 800e780:	005b      	lsls	r3, r3, #1
 800e782:	440b      	add	r3, r1
 800e784:	011b      	lsls	r3, r3, #4
 800e786:	4413      	add	r3, r2
 800e788:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    
    uint8_t map_array[128] = {0};
 800e792:	f107 030c 	add.w	r3, r7, #12
 800e796:	2280      	movs	r2, #128	@ 0x80
 800e798:	2100      	movs	r1, #0
 800e79a:	4618      	mov	r0, r3
 800e79c:	f008 fa5e 	bl	8016c5c <memset>
    map_array['G'] = ICON_GND;
 800e7a0:	2302      	movs	r3, #2
 800e7a2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    map_array['V'] = ICON_VCC;
 800e7a6:	2303      	movs	r3, #3
 800e7a8:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    screen_obj->IC_Testerx[screen_obj->curr_device].config_pin = malloc(num_pin * sizeof(uint8_t));
 800e7ac:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800e7b6:	461c      	mov	r4, r3
 800e7b8:	4610      	mov	r0, r2
 800e7ba:	f006 f9e9 	bl	8014b90 <malloc>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e7c8:	fb04 f303 	mul.w	r3, r4, r3
 800e7cc:	4413      	add	r3, r2
 800e7ce:	335c      	adds	r3, #92	@ 0x5c
 800e7d0:	6019      	str	r1, [r3, #0]

    /* Convert data to icon pin config */
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800e7d8:	e03c      	b.n	800e854 <Screen_GetIcon_Pin+0xfc>
        if (Pin_x >= 8) {
 800e7da:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e7de:	2b07      	cmp	r3, #7
 800e7e0:	d90c      	bls.n	800e7fc <Screen_GetIcon_Pin+0xa4>
            map_array['0'] = ICON_OUTPUT;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_OUTPUT;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_INPUT;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_INPUT;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 800e7fa:	e00b      	b.n	800e814 <Screen_GetIcon_Pin+0xbc>
        } else {
            map_array['0'] = ICON_INPUT;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            map_array['1'] = ICON_INPUT;
 800e802:	2300      	movs	r3, #0
 800e804:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            map_array['L'] = ICON_OUTPUT;
 800e808:	2301      	movs	r3, #1
 800e80a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            map_array['H'] = ICON_OUTPUT;
 800e80e:	2301      	movs	r3, #1
 800e810:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
        }
        screen_obj->IC_Testerx[screen_obj->curr_device].config_pin[Pin_x] = map_array[(uint8_t)(data_pin[Pin_x])];
 800e814:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e818:	683a      	ldr	r2, [r7, #0]
 800e81a:	4413      	add	r3, r2
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	4619      	mov	r1, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800e826:	4618      	mov	r0, r3
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e82e:	fb00 f303 	mul.w	r3, r0, r3
 800e832:	4413      	add	r3, r2
 800e834:	335c      	adds	r3, #92	@ 0x5c
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e83c:	4413      	add	r3, r2
 800e83e:	f101 0290 	add.w	r2, r1, #144	@ 0x90
 800e842:	443a      	add	r2, r7
 800e844:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800e848:	701a      	strb	r2, [r3, #0]
    for (uint8_t Pin_x = 0; Pin_x < num_pin; Pin_x++) {
 800e84a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e84e:	3301      	adds	r3, #1
 800e850:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800e854:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800e858:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d3bc      	bcc.n	800e7da <Screen_GetIcon_Pin+0x82>
    }
}
 800e860:	bf00      	nop
 800e862:	bf00      	nop
 800e864:	3794      	adds	r7, #148	@ 0x94
 800e866:	46bd      	mov	sp, r7
 800e868:	bd90      	pop	{r4, r7, pc}

0800e86a <Screen_GetIcon_Result>:

static void Screen_GetIcon_Result(Screen_t *const screen_obj, char *result) {
 800e86a:	b590      	push	{r4, r7, lr}
 800e86c:	b0a5      	sub	sp, #148	@ 0x94
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	6039      	str	r1, [r7, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800e87a:	4619      	mov	r1, r3
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e882:	fb01 f303 	mul.w	r3, r1, r3
 800e886:	4413      	add	r3, r2
 800e888:	334b      	adds	r3, #75	@ 0x4b
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800e890:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800e894:	6879      	ldr	r1, [r7, #4]
 800e896:	4613      	mov	r3, r2
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	4413      	add	r3, r2
 800e89c:	011b      	lsls	r3, r3, #4
 800e89e:	440b      	add	r3, r1
 800e8a0:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800e8aa:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800e8ae:	6879      	ldr	r1, [r7, #4]
 800e8b0:	4613      	mov	r3, r2
 800e8b2:	005b      	lsls	r3, r3, #1
 800e8b4:	4413      	add	r3, r2
 800e8b6:	011b      	lsls	r3, r3, #4
 800e8b8:	440b      	add	r3, r1
 800e8ba:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
    uint8_t map_array[128] = {0};
 800e8c4:	f107 030c 	add.w	r3, r7, #12
 800e8c8:	2280      	movs	r2, #128	@ 0x80
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f008 f9c5 	bl	8016c5c <memset>
    map_array['0'] = ICON_LOGIC_LOW;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    map_array['1'] = ICON_LOGIC_HIGH;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    map_array['3'] = ICON_CLOCK_HIGH;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    map_array['4'] = ICON_CLOCK_LOW;
 800e8e4:	2302      	movs	r3, #2
 800e8e6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    /* Create the array icon data pin */
    screen_obj->IC_Testerx[screen_obj->curr_device].icon_result = malloc(num_case * num_pin);
 800e8ea:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800e8ee:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800e8f2:	fb02 f303 	mul.w	r3, r2, r3
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800e8fe:	461c      	mov	r4, r3
 800e900:	4610      	mov	r0, r2
 800e902:	f006 f945 	bl	8014b90 <malloc>
 800e906:	4603      	mov	r3, r0
 800e908:	4619      	mov	r1, r3
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e910:	fb04 f303 	mul.w	r3, r4, r3
 800e914:	4413      	add	r3, r2
 800e916:	3364      	adds	r3, #100	@ 0x64
 800e918:	6019      	str	r1, [r3, #0]

    /* Convert data to icon result */
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800e91a:	2300      	movs	r3, #0
 800e91c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800e920:	e01f      	b.n	800e962 <Screen_GetIcon_Result+0xf8>
        screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[i] = map_array[(uint8_t)result[i]];
 800e922:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e926:	683a      	ldr	r2, [r7, #0]
 800e928:	4413      	add	r3, r2
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	4619      	mov	r1, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800e934:	4618      	mov	r0, r3
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800e93c:	fb00 f303 	mul.w	r3, r0, r3
 800e940:	4413      	add	r3, r2
 800e942:	3364      	adds	r3, #100	@ 0x64
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e94a:	4413      	add	r3, r2
 800e94c:	f101 0290 	add.w	r2, r1, #144	@ 0x90
 800e950:	443a      	add	r2, r7
 800e952:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800e956:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_case * num_pin; i++) {
 800e958:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e95c:	3301      	adds	r3, #1
 800e95e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800e962:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800e966:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800e96a:	f897 108d 	ldrb.w	r1, [r7, #141]	@ 0x8d
 800e96e:	fb01 f303 	mul.w	r3, r1, r3
 800e972:	429a      	cmp	r2, r3
 800e974:	dbd5      	blt.n	800e922 <Screen_GetIcon_Result+0xb8>
    }
}
 800e976:	bf00      	nop
 800e978:	bf00      	nop
 800e97a:	3794      	adds	r7, #148	@ 0x94
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd90      	pop	{r4, r7, pc}

0800e980 <Screen_Init_Variable>:

static void Screen_Init_Variable(Screen_t *const obj_screen) {
 800e980:	b5b0      	push	{r4, r5, r7, lr}
 800e982:	b0a0      	sub	sp, #128	@ 0x80
 800e984:	af02      	add	r7, sp, #8
 800e986:	6078      	str	r0, [r7, #4]
    obj_screen->curr_device = DEVICE_1;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	f883 24e9 	strb.w	r2, [r3, #1257]	@ 0x4e9
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));
//    memcpy(obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC,"Description IC 74HC4051",strlen("Description IC 74HC4051"));

     obj_screen->Program_Testx[PROGRAM_TEST1].Description_IC = "Description IC 74HC4051";
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	4acd      	ldr	r2, [pc, #820]	@ (800ecc8 <Screen_Init_Variable+0x348>)
 800e994:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
     obj_screen->Program_Testx[PROGRAM_TEST2].Description_IC = "Description IC 74HC4052";
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	4acc      	ldr	r2, [pc, #816]	@ (800eccc <Screen_Init_Variable+0x34c>)
 800e99c:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
     obj_screen->Program_Testx[PROGRAM_TEST3].Description_IC = "Description IC 74HC4053";
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	4acb      	ldr	r2, [pc, #812]	@ (800ecd0 <Screen_Init_Variable+0x350>)
 800e9a4:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
     obj_screen->Program_Testx[PROGRAM_TEST4].Description_IC = "Description IC 74HC4054";
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	4aca      	ldr	r2, [pc, #808]	@ (800ecd4 <Screen_Init_Variable+0x354>)
 800e9ac:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800e9b0:	2014      	movs	r0, #20
 800e9b2:	f006 f8ed 	bl	8014b90 <malloc>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800e9c0:	2014      	movs	r0, #20
 800e9c2:	f006 f8e5 	bl	8014b90 <malloc>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800e9d0:	2014      	movs	r0, #20
 800e9d2:	f006 f8dd 	bl	8014b90 <malloc>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	461a      	mov	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program = (char *)malloc(MAX_PROGRAM_NAME_SIZE);
 800e9e0:	2014      	movs	r0, #20
 800e9e2:	f006 f8d5 	bl	8014b90 <malloc>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8c3 2468 	str.w	r2, [r3, #1128]	@ 0x468

    obj_screen->Program_Testx[PROGRAM_TEST1].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800e9f0:	2014      	movs	r0, #20
 800e9f2:	f006 f8cd 	bl	8014b90 <malloc>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
    obj_screen->Program_Testx[PROGRAM_TEST2].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800ea00:	2014      	movs	r0, #20
 800ea02:	f006 f8c5 	bl	8014b90 <malloc>
 800ea06:	4603      	mov	r3, r0
 800ea08:	461a      	mov	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    obj_screen->Program_Testx[PROGRAM_TEST3].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800ea10:	2014      	movs	r0, #20
 800ea12:	f006 f8bd 	bl	8014b90 <malloc>
 800ea16:	4603      	mov	r3, r0
 800ea18:	461a      	mov	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
    obj_screen->Program_Testx[PROGRAM_TEST4].Name_IC = (char *)malloc(MAX_IC_NAME_SIZE);
 800ea20:	2014      	movs	r0, #20
 800ea22:	f006 f8b5 	bl	8014b90 <malloc>
 800ea26:	4603      	mov	r3, r0
 800ea28:	461a      	mov	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8c3 2470 	str.w	r2, [r3, #1136]	@ 0x470

    obj_screen->Program_Testx[PROGRAM_TEST1].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800ea30:	2002      	movs	r0, #2
 800ea32:	f006 f8ad 	bl	8014b90 <malloc>
 800ea36:	4603      	mov	r3, r0
 800ea38:	461a      	mov	r2, r3
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
    obj_screen->Program_Testx[PROGRAM_TEST2].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800ea40:	2002      	movs	r0, #2
 800ea42:	f006 f8a5 	bl	8014b90 <malloc>
 800ea46:	4603      	mov	r3, r0
 800ea48:	461a      	mov	r2, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    obj_screen->Program_Testx[PROGRAM_TEST3].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800ea50:	2002      	movs	r0, #2
 800ea52:	f006 f89d 	bl	8014b90 <malloc>
 800ea56:	4603      	mov	r3, r0
 800ea58:	461a      	mov	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
    obj_screen->Program_Testx[PROGRAM_TEST4].num_IC = (char *)malloc(MAX_IC_NUM_SIZE);
 800ea60:	2002      	movs	r0, #2
 800ea62:	f006 f895 	bl	8014b90 <malloc>
 800ea66:	4603      	mov	r3, r0
 800ea68:	461a      	mov	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8c3 2478 	str.w	r2, [r3, #1144]	@ 0x478

    uint8_t buffer[TOTAL_ONE_PROGRAM_TEST_LEN];
    for (uint8_t i = 0; i < 4; i++) {
 800ea70:	2300      	movs	r3, #0
 800ea72:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800ea76:	e043      	b.n	800eb00 <Screen_Init_Variable+0x180>
        AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(i),&buffer[0],TOTAL_ONE_PROGRAM_TEST_LEN);
 800ea78:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	461a      	mov	r2, r3
 800ea80:	0052      	lsls	r2, r2, #1
 800ea82:	4413      	add	r3, r2
 800ea84:	461a      	mov	r2, r3
 800ea86:	00d2      	lsls	r2, r2, #3
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	005b      	lsls	r3, r3, #1
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	3343      	adds	r3, #67	@ 0x43
 800ea90:	b299      	uxth	r1, r3
 800ea92:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800ea96:	232a      	movs	r3, #42	@ 0x2a
 800ea98:	488f      	ldr	r0, [pc, #572]	@ (800ecd8 <Screen_Init_Variable+0x358>)
 800ea9a:	f004 fa52 	bl	8012f42 <AT24Cxx_read_buffer>
        sscanf((char *)buffer, "%[^,],%[^,],%[^,\n]",
 800ea9e:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800eaa2:	6879      	ldr	r1, [r7, #4]
 800eaa4:	4613      	mov	r3, r2
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	4413      	add	r3, r2
 800eaaa:	011b      	lsls	r3, r3, #4
 800eaac:	440b      	add	r3, r1
 800eaae:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800eab2:	681c      	ldr	r4, [r3, #0]
 800eab4:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800eab8:	6879      	ldr	r1, [r7, #4]
 800eaba:	4613      	mov	r3, r2
 800eabc:	005b      	lsls	r3, r3, #1
 800eabe:	4413      	add	r3, r2
 800eac0:	011b      	lsls	r3, r3, #4
 800eac2:	440b      	add	r3, r1
 800eac4:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800eac8:	681d      	ldr	r5, [r3, #0]
 800eaca:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800eace:	6879      	ldr	r1, [r7, #4]
 800ead0:	4613      	mov	r3, r2
 800ead2:	005b      	lsls	r3, r3, #1
 800ead4:	4413      	add	r3, r2
 800ead6:	011b      	lsls	r3, r3, #4
 800ead8:	440b      	add	r3, r1
 800eada:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	462b      	mov	r3, r5
 800eae8:	4622      	mov	r2, r4
 800eaea:	497c      	ldr	r1, [pc, #496]	@ (800ecdc <Screen_Init_Variable+0x35c>)
 800eaec:	f007 ffa0 	bl	8016a30 <siscanf>
        // memcpy(data_send_esp32->data,"p",1);
        // memcpy(data_send_esp32->data+1,buffer_send,strlen(buffer_send));
        // data_send_esp32->len = strlen(buffer_send) + 1;
        // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));

        HAL_Delay(100);
 800eaf0:	2064      	movs	r0, #100	@ 0x64
 800eaf2:	f7f3 fda5 	bl	8002640 <HAL_Delay>
    for (uint8_t i = 0; i < 4; i++) {
 800eaf6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800eafa:	3301      	adds	r3, #1
 800eafc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800eb00:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800eb04:	2b03      	cmp	r3, #3
 800eb06:	d9b7      	bls.n	800ea78 <Screen_Init_Variable+0xf8>
    }

    memcpy(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,"IC TESTER 1",strlen("IC TESTER 1"));
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	334d      	adds	r3, #77	@ 0x4d
 800eb0c:	220b      	movs	r2, #11
 800eb0e:	4974      	ldr	r1, [pc, #464]	@ (800ece0 <Screen_Init_Variable+0x360>)
 800eb10:	4618      	mov	r0, r3
 800eb12:	f008 f9ec 	bl	8016eee <memcpy>
    memcpy(obj_screen->IC_Testerx[DEVICE_2].NameIC_Tester,"IC TESTER 2",strlen("IC TESTER 2"));
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f203 137d 	addw	r3, r3, #381	@ 0x17d
 800eb1c:	220b      	movs	r2, #11
 800eb1e:	4971      	ldr	r1, [pc, #452]	@ (800ece4 <Screen_Init_Variable+0x364>)
 800eb20:	4618      	mov	r0, r3
 800eb22:	f008 f9e4 	bl	8016eee <memcpy>
    memcpy(obj_screen->IC_Testerx[DEVICE_3].NameIC_Tester,"IC TESTER 3",strlen("IC TESTER 3"));
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f203 23ad 	addw	r3, r3, #685	@ 0x2ad
 800eb2c:	220b      	movs	r2, #11
 800eb2e:	496e      	ldr	r1, [pc, #440]	@ (800ece8 <Screen_Init_Variable+0x368>)
 800eb30:	4618      	mov	r0, r3
 800eb32:	f008 f9dc 	bl	8016eee <memcpy>

    char wifi_info[60] = {0};
 800eb36:	f107 0308 	add.w	r3, r7, #8
 800eb3a:	223c      	movs	r2, #60	@ 0x3c
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f008 f88c 	bl	8016c5c <memset>
    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_WIFI_INFO,&wifi_info[0],DATA_LEN_WIFI_INFO);
 800eb44:	f107 0208 	add.w	r2, r7, #8
 800eb48:	233c      	movs	r3, #60	@ 0x3c
 800eb4a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800eb4e:	4862      	ldr	r0, [pc, #392]	@ (800ecd8 <Screen_Init_Variable+0x358>)
 800eb50:	f004 f9f7 	bl	8012f42 <AT24Cxx_read_buffer>
    char *pdata = strtok(wifi_info,",");
 800eb54:	f107 0308 	add.w	r3, r7, #8
 800eb58:	4964      	ldr	r1, [pc, #400]	@ (800ecec <Screen_Init_Variable+0x36c>)
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f008 f8ce 	bl	8016cfc <strtok>
 800eb60:	6738      	str	r0, [r7, #112]	@ 0x70
    memcpy(obj_screen->Wifi_setting.Name_Wifi,pdata,strlen(pdata));
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f503 6493 	add.w	r4, r3, #1176	@ 0x498
 800eb68:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800eb6a:	f7f1 fafb 	bl	8000164 <strlen>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	461a      	mov	r2, r3
 800eb72:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800eb74:	4620      	mov	r0, r4
 800eb76:	f008 f9ba 	bl	8016eee <memcpy>
    pdata = strtok(NULL,",");
 800eb7a:	495c      	ldr	r1, [pc, #368]	@ (800ecec <Screen_Init_Variable+0x36c>)
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	f008 f8bd 	bl	8016cfc <strtok>
 800eb82:	6738      	str	r0, [r7, #112]	@ 0x70
    memcpy(obj_screen->Wifi_setting.Password_Wifi,pdata,strlen(pdata));
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f203 44b6 	addw	r4, r3, #1206	@ 0x4b6
 800eb8a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800eb8c:	f7f1 faea 	bl	8000164 <strlen>
 800eb90:	4603      	mov	r3, r0
 800eb92:	461a      	mov	r2, r3
 800eb94:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800eb96:	4620      	mov	r0, r4
 800eb98:	f008 f9a9 	bl	8016eee <memcpy>
    // memcpy(obj_screen->Wifi_setting.Name_Wifi,"Wifi TEST 1",strlen("Wifi TEST 1"));
    // memcpy(obj_screen->Wifi_setting.Password_Wifi,"PASSword 1234",strlen("PASSword 1234"));


    obj_screen->IC_Testerx[DEVICE_1].curr_PageMain = DWINPAGE_MAIN;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2265      	movs	r2, #101	@ 0x65
 800eba0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    obj_screen->IC_Testerx[DEVICE_2].curr_PageMain = DWINPAGE_MAIN;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2265      	movs	r2, #101	@ 0x65
 800eba8:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
    obj_screen->IC_Testerx[DEVICE_3].curr_PageMain = DWINPAGE_MAIN; 
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2265      	movs	r2, #101	@ 0x65
 800ebb0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

    obj_screen->IC_Testerx[DEVICE_1].state = false;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    obj_screen->IC_Testerx[DEVICE_2].state = false;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
    obj_screen->IC_Testerx[DEVICE_3].state = false;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f883 22ac 	strb.w	r2, [r3, #684]	@ 0x2ac

    obj_screen->IC_Testerx[DEVICE_1].curr_num_ic = 0;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_1,obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST1].Name_Program));
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 43d8 	ldr.w	r4, [r3, #984]	@ 0x3d8
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7f1 fabf 	bl	8000164 <strlen>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	4622      	mov	r2, r4
 800ebec:	f249 2128 	movw	r1, #37416	@ 0x9228
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f004 fb43 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_2,obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST2].Name_Program));
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 4408 	ldr.w	r4, [r3, #1032]	@ 0x408
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7f1 faae 	bl	8000164 <strlen>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	4622      	mov	r2, r4
 800ec0e:	f249 2150 	movw	r1, #37456	@ 0x9250
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f004 fb32 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_3,obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST3].Name_Program));
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 4438 	ldr.w	r4, [r3, #1080]	@ 0x438
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8d3 3438 	ldr.w	r3, [r3, #1080]	@ 0x438
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7f1 fa9d 	bl	8000164 <strlen>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	4622      	mov	r2, r4
 800ec30:	f249 2178 	movw	r1, #37496	@ 0x9278
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f004 fb21 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)obj_screen,VP_Program_Name_4,obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program,strlen(obj_screen->Program_Testx[PROGRAM_TEST4].Name_Program));
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 4468 	ldr.w	r4, [r3, #1128]	@ 0x468
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 3468 	ldr.w	r3, [r3, #1128]	@ 0x468
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7f1 fa8c 	bl	8000164 <strlen>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	4622      	mov	r2, r4
 800ec52:	f249 21a0 	movw	r1, #37536	@ 0x92a0
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f004 fb10 	bl	801327c <DWIN_SetText>

    DWIN_SetText((Dwin_t *)obj_screen,VP_Name_Tester,obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester,strlen(obj_screen->IC_Testerx[DEVICE_1].NameIC_Tester));
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f103 044d 	add.w	r4, r3, #77	@ 0x4d
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	334d      	adds	r3, #77	@ 0x4d
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7f1 fa7c 	bl	8000164 <strlen>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	4622      	mov	r2, r4
 800ec72:	f249 3150 	movw	r1, #37712	@ 0x9350
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f004 fb00 	bl	801327c <DWIN_SetText>

    // obj_screen->Program_Testx[PROGRAM_TEST1].num_pin = 16;
    // obj_screen->Program_Testx[PROGRAM_TEST1].num_case = 8;

    /* Screen */
    obj_screen->Screen_keyboard.Caplock = false;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    obj_screen->Screen_keyboard.Index_String = 0;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    obj_screen->Screen_condition = &condition_array[0];
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	4a18      	ldr	r2, [pc, #96]	@ (800ecf0 <Screen_Init_Variable+0x370>)
 800ec90:	645a      	str	r2, [r3, #68]	@ 0x44

    Screen_ShowData_Mainpage(obj_screen,PROGRAM_TEST1);
 800ec92:	2100      	movs	r1, #0
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f000 f82d 	bl	800ecf4 <Screen_ShowData_Mainpage>
    DWIN_SetVariable_Icon((Dwin_t *)obj_screen,VP_ICON_ON_OFF,obj_screen->IC_Testerx[obj_screen->curr_device].state);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800eca0:	4619      	mov	r1, r3
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800eca8:	fb01 f303 	mul.w	r3, r1, r3
 800ecac:	4413      	add	r3, r2
 800ecae:	334c      	adds	r3, #76	@ 0x4c
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f004 fb92 	bl	80133e2 <DWIN_SetVariable_Icon>
}
 800ecbe:	bf00      	nop
 800ecc0:	3778      	adds	r7, #120	@ 0x78
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bdb0      	pop	{r4, r5, r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	08019e84 	.word	0x08019e84
 800eccc:	08019e9c 	.word	0x08019e9c
 800ecd0:	08019eb4 	.word	0x08019eb4
 800ecd4:	08019ecc 	.word	0x08019ecc
 800ecd8:	2000140c 	.word	0x2000140c
 800ecdc:	08019ee4 	.word	0x08019ee4
 800ece0:	08019ef8 	.word	0x08019ef8
 800ece4:	08019f04 	.word	0x08019f04
 800ece8:	08019f10 	.word	0x08019f10
 800ecec:	08019f1c 	.word	0x08019f1c
 800ecf0:	20000054 	.word	0x20000054

0800ecf4 <Screen_ShowData_Mainpage>:

static void Screen_ShowData_Mainpage(Screen_t *const screen_obj, uint8_t index_program) {
 800ecf4:	b5b0      	push	{r4, r5, r7, lr}
 800ecf6:	b090      	sub	sp, #64	@ 0x40
 800ecf8:	af02      	add	r7, sp, #8
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	70fb      	strb	r3, [r7, #3]
    uint8_t a_select_program[MAX_PROGRAM_TEST];
    // uint8_t index_program = screen_obj.IC_Testerx[screen_obj->curr_device].selected_Program_Index;
    uint8_t num_ic = atoi(screen_obj->Program_Testx[index_program].num_IC);
 800ed00:	78fa      	ldrb	r2, [r7, #3]
 800ed02:	6879      	ldr	r1, [r7, #4]
 800ed04:	4613      	mov	r3, r2
 800ed06:	005b      	lsls	r3, r3, #1
 800ed08:	4413      	add	r3, r2
 800ed0a:	011b      	lsls	r3, r3, #4
 800ed0c:	440b      	add	r3, r1
 800ed0e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f005 ff36 	bl	8014b86 <atoi>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 800ed20:	78fa      	ldrb	r2, [r7, #3]
 800ed22:	6879      	ldr	r1, [r7, #4]
 800ed24:	4613      	mov	r3, r2
 800ed26:	005b      	lsls	r3, r3, #1
 800ed28:	4413      	add	r3, r2
 800ed2a:	011b      	lsls	r3, r3, #4
 800ed2c:	440b      	add	r3, r1
 800ed2e:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7f1 fa15 	bl	8000164 <strlen>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	3309      	adds	r3, #9
 800ed40:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t size_Description_IC = strlen("IC Description: ") + strlen((char *)screen_obj->Program_Testx[index_program].Description_IC);
 800ed44:	78fa      	ldrb	r2, [r7, #3]
 800ed46:	6879      	ldr	r1, [r7, #4]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	005b      	lsls	r3, r3, #1
 800ed4c:	4413      	add	r3, r2
 800ed4e:	011b      	lsls	r3, r3, #4
 800ed50:	440b      	add	r3, r1
 800ed52:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7f1 fa03 	bl	8000164 <strlen>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	3310      	adds	r3, #16
 800ed64:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    // uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);

    char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 800ed68:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f005 ff0e 	bl	8014b90 <malloc>
 800ed74:	4603      	mov	r3, r0
 800ed76:	633b      	str	r3, [r7, #48]	@ 0x30
    char *Text_Description_IC = malloc(size_Description_IC + 1);
 800ed78:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f005 ff06 	bl	8014b90 <malloc>
 800ed84:	4603      	mov	r3, r0
 800ed86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // char *Text_Num_IC = malloc(size_Num_IC + 1);

    strcpy(Text_Name_IC,"IC Name: ");
 800ed88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed8a:	4949      	ldr	r1, [pc, #292]	@ (800eeb0 <Screen_ShowData_Mainpage+0x1bc>)
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	460b      	mov	r3, r1
 800ed90:	cb03      	ldmia	r3!, {r0, r1}
 800ed92:	6010      	str	r0, [r2, #0]
 800ed94:	6051      	str	r1, [r2, #4]
 800ed96:	881b      	ldrh	r3, [r3, #0]
 800ed98:	8113      	strh	r3, [r2, #8]
    strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 800ed9a:	78fa      	ldrb	r2, [r7, #3]
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	4613      	mov	r3, r2
 800eda0:	005b      	lsls	r3, r3, #1
 800eda2:	4413      	add	r3, r2
 800eda4:	011b      	lsls	r3, r3, #4
 800eda6:	440b      	add	r3, r1
 800eda8:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4619      	mov	r1, r3
 800edb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800edb2:	f007 ff5b 	bl	8016c6c <strcat>
    strcpy(Text_Description_IC,"IC Description: ");
 800edb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb8:	4a3e      	ldr	r2, [pc, #248]	@ (800eeb4 <Screen_ShowData_Mainpage+0x1c0>)
 800edba:	461d      	mov	r5, r3
 800edbc:	4614      	mov	r4, r2
 800edbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edc0:	6028      	str	r0, [r5, #0]
 800edc2:	6069      	str	r1, [r5, #4]
 800edc4:	60aa      	str	r2, [r5, #8]
 800edc6:	60eb      	str	r3, [r5, #12]
 800edc8:	7823      	ldrb	r3, [r4, #0]
 800edca:	742b      	strb	r3, [r5, #16]
    strcat(Text_Description_IC,(char *)screen_obj->Program_Testx[index_program].Description_IC);
 800edcc:	78fa      	ldrb	r2, [r7, #3]
 800edce:	6879      	ldr	r1, [r7, #4]
 800edd0:	4613      	mov	r3, r2
 800edd2:	005b      	lsls	r3, r3, #1
 800edd4:	4413      	add	r3, r2
 800edd6:	011b      	lsls	r3, r3, #4
 800edd8:	440b      	add	r3, r1
 800edda:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4619      	mov	r1, r3
 800ede2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ede4:	f007 ff42 	bl	8016c6c <strcat>
    // strcpy(Text_Num_IC,"Number of ICs: ");
    // strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);

    memset(a_select_program,1,MAX_PROGRAM_TEST);
 800ede8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800edec:	2204      	movs	r2, #4
 800edee:	2101      	movs	r1, #1
 800edf0:	4618      	mov	r0, r3
 800edf2:	f007 ff33 	bl	8016c5c <memset>
    // Get the program selected
    a_select_program[index_program] = 0 ;
 800edf6:	78fb      	ldrb	r3, [r7, #3]
 800edf8:	3338      	adds	r3, #56	@ 0x38
 800edfa:	443b      	add	r3, r7
 800edfc:	2200      	movs	r2, #0
 800edfe:	f803 2c10 	strb.w	r2, [r3, #-16]
    screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index = index_program;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ee08:	4619      	mov	r1, r3
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ee10:	fb01 f303 	mul.w	r3, r1, r3
 800ee14:	4413      	add	r3, r2
 800ee16:	334b      	adds	r3, #75	@ 0x4b
 800ee18:	78fa      	ldrb	r2, [r7, #3]
 800ee1a:	701a      	strb	r2, [r3, #0]

    // Show data in screen
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,VP_ICON_SELECT_PROGRAM,a_select_program,MAX_PROGRAM_TEST);
 800ee1c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ee20:	2304      	movs	r3, #4
 800ee22:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f004 fb08 	bl	801343c <DWIN_SetArray_Icon>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Name_IC,Text_Name_IC,size_Name_IC);
 800ee2c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee34:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f004 fa1f 	bl	801327c <DWIN_SetText>
    DWIN_SetText((Dwin_t *)screen_obj,VP_Description_IC,Text_Description_IC,size_Description_IC);
 800ee3e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee46:	f249 1150 	movw	r1, #37200	@ 0x9150
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f004 fa16 	bl	801327c <DWIN_SetText>

    char ShowCase_String[30];
    snprintf(ShowCase_String,sizeof(ShowCase_String),"Number of ICs: %d / %d",screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic,num_ic);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ee56:	4619      	mov	r1, r3
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ee5e:	fb01 f303 	mul.w	r3, r1, r3
 800ee62:	4413      	add	r3, r2
 800ee64:	334a      	adds	r3, #74	@ 0x4a
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	461a      	mov	r2, r3
 800ee6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ee6e:	f107 0008 	add.w	r0, r7, #8
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	4613      	mov	r3, r2
 800ee76:	4a10      	ldr	r2, [pc, #64]	@ (800eeb8 <Screen_ShowData_Mainpage+0x1c4>)
 800ee78:	211e      	movs	r1, #30
 800ee7a:	f007 fd81 	bl	8016980 <sniprintf>
//    uint8_t len = strlen(ShowCase_String);
    DWIN_SetText((Dwin_t *)screen_obj,VP_Num_IC_Test,ShowCase_String,strlen(ShowCase_String));
 800ee7e:	f107 0308 	add.w	r3, r7, #8
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7f1 f96e 	bl	8000164 <strlen>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	f107 0208 	add.w	r2, r7, #8
 800ee90:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f004 f9f1 	bl	801327c <DWIN_SetText>

    /* free malloc */
    free(Text_Name_IC);
 800ee9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ee9c:	f005 fe80 	bl	8014ba0 <free>
    free(Text_Description_IC);
 800eea0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eea2:	f005 fe7d 	bl	8014ba0 <free>

}
 800eea6:	bf00      	nop
 800eea8:	3738      	adds	r7, #56	@ 0x38
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bdb0      	pop	{r4, r5, r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	08019de0 	.word	0x08019de0
 800eeb4:	08019f20 	.word	0x08019f20
 800eeb8:	08019f34 	.word	0x08019f34

0800eebc <Screen_SetInfo_Pin>:

static void Screen_SetInfo_Pin(Screen_t *const screen_obj) {
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b086      	sub	sp, #24
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800eeca:	4619      	mov	r1, r3
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800eed2:	fb01 f303 	mul.w	r3, r1, r3
 800eed6:	4413      	add	r3, r2
 800eed8:	334b      	adds	r3, #75	@ 0x4b
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	73fb      	strb	r3, [r7, #15]
    uint16_t Address_VP = VP_Name_Pin;
 800eede:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 800eee2:	82fb      	strh	r3, [r7, #22]
    char *data_copy = malloc(screen_obj->Program_Testx[index_program].data_pin_len + 1);
 800eee4:	7bfa      	ldrb	r2, [r7, #15]
 800eee6:	6879      	ldr	r1, [r7, #4]
 800eee8:	4613      	mov	r3, r2
 800eeea:	005b      	lsls	r3, r3, #1
 800eeec:	4413      	add	r3, r2
 800eeee:	011b      	lsls	r3, r3, #4
 800eef0:	440b      	add	r3, r1
 800eef2:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800eef6:	881b      	ldrh	r3, [r3, #0]
 800eef8:	3301      	adds	r3, #1
 800eefa:	4618      	mov	r0, r3
 800eefc:	f005 fe48 	bl	8014b90 <malloc>
 800ef00:	4603      	mov	r3, r0
 800ef02:	60bb      	str	r3, [r7, #8]
    memcpy(data_copy,screen_obj->Program_Testx[index_program].data_pin,screen_obj->Program_Testx[index_program].data_pin_len);
 800ef04:	7bfa      	ldrb	r2, [r7, #15]
 800ef06:	6879      	ldr	r1, [r7, #4]
 800ef08:	4613      	mov	r3, r2
 800ef0a:	005b      	lsls	r3, r3, #1
 800ef0c:	4413      	add	r3, r2
 800ef0e:	011b      	lsls	r3, r3, #4
 800ef10:	440b      	add	r3, r1
 800ef12:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800ef16:	6818      	ldr	r0, [r3, #0]
 800ef18:	7bfa      	ldrb	r2, [r7, #15]
 800ef1a:	6879      	ldr	r1, [r7, #4]
 800ef1c:	4613      	mov	r3, r2
 800ef1e:	005b      	lsls	r3, r3, #1
 800ef20:	4413      	add	r3, r2
 800ef22:	011b      	lsls	r3, r3, #4
 800ef24:	440b      	add	r3, r1
 800ef26:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 800ef2a:	881b      	ldrh	r3, [r3, #0]
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	4601      	mov	r1, r0
 800ef30:	68b8      	ldr	r0, [r7, #8]
 800ef32:	f007 ffdc 	bl	8016eee <memcpy>
    char *temp_buf = strtok(data_copy,"\n");
 800ef36:	4911      	ldr	r1, [pc, #68]	@ (800ef7c <Screen_SetInfo_Pin+0xc0>)
 800ef38:	68b8      	ldr	r0, [r7, #8]
 800ef3a:	f007 fedf 	bl	8016cfc <strtok>
 800ef3e:	6138      	str	r0, [r7, #16]
    while (temp_buf != NULL) {
 800ef40:	e011      	b.n	800ef66 <Screen_SetInfo_Pin+0xaa>
        DWIN_SetText((Dwin_t *)screen_obj,Address_VP,temp_buf,strlen(temp_buf));
 800ef42:	6938      	ldr	r0, [r7, #16]
 800ef44:	f7f1 f90e 	bl	8000164 <strlen>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	8af9      	ldrh	r1, [r7, #22]
 800ef4e:	693a      	ldr	r2, [r7, #16]
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f004 f993 	bl	801327c <DWIN_SetText>
        // sprintf(text_show,"%d",temp_buf);
        temp_buf = strtok(NULL,"\n");
 800ef56:	4909      	ldr	r1, [pc, #36]	@ (800ef7c <Screen_SetInfo_Pin+0xc0>)
 800ef58:	2000      	movs	r0, #0
 800ef5a:	f007 fecf 	bl	8016cfc <strtok>
 800ef5e:	6138      	str	r0, [r7, #16]
        Address_VP = Address_VP + 0x10;
 800ef60:	8afb      	ldrh	r3, [r7, #22]
 800ef62:	3310      	adds	r3, #16
 800ef64:	82fb      	strh	r3, [r7, #22]
    while (temp_buf != NULL) {
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1ea      	bne.n	800ef42 <Screen_SetInfo_Pin+0x86>
    }
    free(data_copy);
 800ef6c:	68b8      	ldr	r0, [r7, #8]
 800ef6e:	f005 fe17 	bl	8014ba0 <free>
}
 800ef72:	bf00      	nop
 800ef74:	3718      	adds	r7, #24
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	08019f4c 	.word	0x08019f4c

0800ef80 <get_data_testing_ic>:

#pragma endregion FUNCTION SCREEN


static bool get_data_testing_ic(char *searchName,Program_Test_t *pdata_test) {
 800ef80:	b590      	push	{r4, r7, lr}
 800ef82:	b0cf      	sub	sp, #316	@ 0x13c
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ef8a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ef8e:	6018      	str	r0, [r3, #0]
 800ef90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ef94:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ef98:	6019      	str	r1, [r3, #0]
    uint8_t num_direc_used = 0;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    uint8_t *temp_buf = (uint8_t *)malloc(MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800efa0:	20f0      	movs	r0, #240	@ 0xf0
 800efa2:	f005 fdf5 	bl	8014b90 <malloc>
 800efa6:	4603      	mov	r3, r0
 800efa8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    memset(temp_buf,0,MAX_DIRECTORY_USED * sizeof(direc_EEPROM_t));
 800efac:	22f0      	movs	r2, #240	@ 0xf0
 800efae:	2100      	movs	r1, #0
 800efb0:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800efb4:	f007 fe52 	bl	8016c5c <memset>
    direc_EEPROM_t direc_array[MAX_DIRECTORY_USED]; /* array store directory */
    direc_EEPROM_t *pDirectory = NULL;
 800efb8:	2300      	movs	r3, #0
 800efba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    uint16_t mem_addr;
    uint16_t buf_length;
    /* get num directory used */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&temp_buf[0],1);
 800efbe:	2301      	movs	r3, #1
 800efc0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800efc4:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800efc8:	48d5      	ldr	r0, [pc, #852]	@ (800f320 <get_data_testing_ic+0x3a0>)
 800efca:	f003 ffba 	bl	8012f42 <AT24Cxx_read_buffer>
    num_direc_used = temp_buf[0];
 800efce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    /* read directory info */
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC,temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800efd8:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 800efdc:	b29b      	uxth	r3, r3
 800efde:	461a      	mov	r2, r3
 800efe0:	0052      	lsls	r2, r2, #1
 800efe2:	4413      	add	r3, r2
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800efec:	f240 2182 	movw	r1, #642	@ 0x282
 800eff0:	48cb      	ldr	r0, [pc, #812]	@ (800f320 <get_data_testing_ic+0x3a0>)
 800eff2:	f003 ffa6 	bl	8012f42 <AT24Cxx_read_buffer>
    memcpy(&direc_array[0],temp_buf,num_direc_used * sizeof(direc_EEPROM_t));
 800eff6:	f897 2132 	ldrb.w	r2, [r7, #306]	@ 0x132
 800effa:	4613      	mov	r3, r2
 800effc:	005b      	lsls	r3, r3, #1
 800effe:	4413      	add	r3, r2
 800f000:	009b      	lsls	r3, r3, #2
 800f002:	461a      	mov	r2, r3
 800f004:	f107 030c 	add.w	r3, r7, #12
 800f008:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800f00c:	4618      	mov	r0, r3
 800f00e:	f007 ff6e 	bl	8016eee <memcpy>
    free(temp_buf);
 800f012:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800f016:	f005 fdc3 	bl	8014ba0 <free>
    /* find info of search name ic */
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800f01a:	2300      	movs	r3, #0
 800f01c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 800f020:	e02c      	b.n	800f07c <get_data_testing_ic+0xfc>
        if (memcmp(searchName,direc_array[i].nameIC,strlen(searchName)) == 0) {
 800f022:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800f026:	f107 010c 	add.w	r1, r7, #12
 800f02a:	4613      	mov	r3, r2
 800f02c:	005b      	lsls	r3, r3, #1
 800f02e:	4413      	add	r3, r2
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	18cc      	adds	r4, r1, r3
 800f034:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f038:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f03c:	6818      	ldr	r0, [r3, #0]
 800f03e:	f7f1 f891 	bl	8000164 <strlen>
 800f042:	4602      	mov	r2, r0
 800f044:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f048:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f04c:	4621      	mov	r1, r4
 800f04e:	6818      	ldr	r0, [r3, #0]
 800f050:	f007 fdf4 	bl	8016c3c <memcmp>
 800f054:	4603      	mov	r3, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	d10b      	bne.n	800f072 <get_data_testing_ic+0xf2>
            pDirectory = &direc_array[i];
 800f05a:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800f05e:	f107 010c 	add.w	r1, r7, #12
 800f062:	4613      	mov	r3, r2
 800f064:	005b      	lsls	r3, r3, #1
 800f066:	4413      	add	r3, r2
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	440b      	add	r3, r1
 800f06c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            break;
 800f070:	e00a      	b.n	800f088 <get_data_testing_ic+0x108>
    for (uint8_t i = 0; i < num_direc_used; i++) {
 800f072:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800f076:	3301      	adds	r3, #1
 800f078:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 800f07c:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800f080:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 800f084:	429a      	cmp	r2, r3
 800f086:	d3cc      	bcc.n	800f022 <get_data_testing_ic+0xa2>
        }
    }
    /* NOT FOUND NAME IC IN EEPROM */ 
    if (pDirectory == NULL) {
 800f088:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d108      	bne.n	800f0a2 <get_data_testing_ic+0x122>
        // printf("NOT FOUND NAME IC IN EEPROM\n");
        DWIN_SetText((Dwin_t *)&_Screen,VP_Warning_modify_program,"No data found for this IC",strlen("No data found for this IC"));
 800f090:	2319      	movs	r3, #25
 800f092:	4aa4      	ldr	r2, [pc, #656]	@ (800f324 <get_data_testing_ic+0x3a4>)
 800f094:	f24a 0150 	movw	r1, #41040	@ 0xa050
 800f098:	48a3      	ldr	r0, [pc, #652]	@ (800f328 <get_data_testing_ic+0x3a8>)
 800f09a:	f004 f8ef 	bl	801327c <DWIN_SetText>
        return false;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	e139      	b.n	800f316 <get_data_testing_ic+0x396>
    } 
    mem_addr = (uint16_t)((pDirectory->addr[0] << 8) | pDirectory->addr[1]);
 800f0a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f0a6:	7a1b      	ldrb	r3, [r3, #8]
 800f0a8:	b21b      	sxth	r3, r3
 800f0aa:	021b      	lsls	r3, r3, #8
 800f0ac:	b21a      	sxth	r2, r3
 800f0ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f0b2:	7a5b      	ldrb	r3, [r3, #9]
 800f0b4:	b21b      	sxth	r3, r3
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	b21b      	sxth	r3, r3
 800f0ba:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    buf_length = (uint16_t)((pDirectory->length[0] << 8) | pDirectory->length[1]);
 800f0be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f0c2:	7a9b      	ldrb	r3, [r3, #10]
 800f0c4:	b21b      	sxth	r3, r3
 800f0c6:	021b      	lsls	r3, r3, #8
 800f0c8:	b21a      	sxth	r2, r3
 800f0ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f0ce:	7adb      	ldrb	r3, [r3, #11]
 800f0d0:	b21b      	sxth	r3, r3
 800f0d2:	4313      	orrs	r3, r2
 800f0d4:	b21b      	sxth	r3, r3
 800f0d6:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    temp_buf = (uint8_t *)malloc(buf_length);
 800f0da:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f005 fd56 	bl	8014b90 <malloc>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    AT24Cxx_read_buffer(&eeprom_ob,mem_addr,temp_buf,buf_length);
 800f0ea:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800f0ee:	f8b7 112a 	ldrh.w	r1, [r7, #298]	@ 0x12a
 800f0f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800f0f6:	488a      	ldr	r0, [pc, #552]	@ (800f320 <get_data_testing_ic+0x3a0>)
 800f0f8:	f003 ff23 	bl	8012f42 <AT24Cxx_read_buffer>
    // Find the first pipe separator
    uint8_t *first_pipe = memchr(temp_buf, '|', buf_length);
 800f0fc:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800f100:	461a      	mov	r2, r3
 800f102:	217c      	movs	r1, #124	@ 0x7c
 800f104:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800f108:	f007 fee3 	bl	8016ed2 <memchr>
 800f10c:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (!first_pipe) return false;
 800f110:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800f114:	2b00      	cmp	r3, #0
 800f116:	d101      	bne.n	800f11c <get_data_testing_ic+0x19c>
 800f118:	2300      	movs	r3, #0
 800f11a:	e0fc      	b.n	800f316 <get_data_testing_ic+0x396>
    
    // Extract pin count
    int pin_count_len = first_pipe - temp_buf;
 800f11c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800f120:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f124:	1ad3      	subs	r3, r2, r3
 800f126:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    char* pin_count_str = malloc(pin_count_len + 1);
 800f12a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f12e:	3301      	adds	r3, #1
 800f130:	4618      	mov	r0, r3
 800f132:	f005 fd2d 	bl	8014b90 <malloc>
 800f136:	4603      	mov	r3, r0
 800f138:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    strncpy(pin_count_str, temp_buf, pin_count_len);
 800f13c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f140:	461a      	mov	r2, r3
 800f142:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800f146:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800f14a:	f007 fdc3 	bl	8016cd4 <strncpy>
    pin_count_str[pin_count_len] = '\0';
 800f14e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f152:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800f156:	4413      	add	r3, r2
 800f158:	2200      	movs	r2, #0
 800f15a:	701a      	strb	r2, [r3, #0]
    pdata_test->num_pin = atoi(pin_count_str);
 800f15c:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800f160:	f005 fd11 	bl	8014b86 <atoi>
 800f164:	4603      	mov	r3, r0
 800f166:	b2da      	uxtb	r2, r3
 800f168:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f16c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	775a      	strb	r2, [r3, #29]
    free(pin_count_str);
 800f174:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800f178:	f005 fd12 	bl	8014ba0 <free>
    
    // Find the second pipe separator
    int remaining_len = buf_length - (first_pipe - temp_buf + 1);
 800f17c:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 800f180:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800f184:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f188:	1acb      	subs	r3, r1, r3
 800f18a:	3301      	adds	r3, #1
 800f18c:	1ad3      	subs	r3, r2, r3
 800f18e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t *second_pipe = memchr(first_pipe + 1, '|', remaining_len);
 800f192:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800f196:	3301      	adds	r3, #1
 800f198:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800f19c:	217c      	movs	r1, #124	@ 0x7c
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f007 fe97 	bl	8016ed2 <memchr>
 800f1a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (!second_pipe) return false;
 800f1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d101      	bne.n	800f1b4 <get_data_testing_ic+0x234>
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	e0b0      	b.n	800f316 <get_data_testing_ic+0x396>
    
    // Extract test count
    int test_count_len = second_pipe - (first_pipe + 1);
 800f1b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800f1be:	1ad3      	subs	r3, r2, r3
 800f1c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    char* test_count_str = malloc(test_count_len + 1);
 800f1c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f005 fce0 	bl	8014b90 <malloc>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    strncpy(test_count_str, first_pipe + 1, test_count_len);
 800f1d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800f1da:	3301      	adds	r3, #1
 800f1dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800f1e6:	f007 fd75 	bl	8016cd4 <strncpy>
    test_count_str[test_count_len] = '\0';
 800f1ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800f1ee:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800f1f2:	4413      	add	r3, r2
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	701a      	strb	r2, [r3, #0]
    pdata_test->num_case= atoi(test_count_str);
 800f1f8:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800f1fc:	f005 fcc3 	bl	8014b86 <atoi>
 800f200:	4603      	mov	r3, r0
 800f202:	b2da      	uxtb	r2, r3
 800f204:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f208:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	771a      	strb	r2, [r3, #28]
    free(test_count_str);
 800f210:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800f214:	f005 fcc4 	bl	8014ba0 <free>
    
    // Find the third pipe separator using memchr (searches through \0)
    remaining_len = buf_length - (second_pipe - temp_buf + 1);
 800f218:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 800f21c:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800f220:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f224:	1acb      	subs	r3, r1, r3
 800f226:	3301      	adds	r3, #1
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    uint8_t *third_pipe = memchr(second_pipe + 1, '|', remaining_len);
 800f22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f232:	3301      	adds	r3, #1
 800f234:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800f238:	217c      	movs	r1, #124	@ 0x7c
 800f23a:	4618      	mov	r0, r3
 800f23c:	f007 fe49 	bl	8016ed2 <memchr>
 800f240:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    if (!third_pipe) return false;
 800f244:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d101      	bne.n	800f250 <get_data_testing_ic+0x2d0>
 800f24c:	2300      	movs	r3, #0
 800f24e:	e062      	b.n	800f316 <get_data_testing_ic+0x396>
    
    // Extract pin data (between second and third pipe)
    int pin_data_len = third_pipe - (second_pipe + 1);
 800f250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f254:	3301      	adds	r3, #1
 800f256:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800f25a:	1ad3      	subs	r3, r2, r3
 800f25c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    pdata_test->data_pin = malloc(pin_data_len);
 800f260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f264:	4618      	mov	r0, r3
 800f266:	f005 fc93 	bl	8014b90 <malloc>
 800f26a:	4603      	mov	r3, r0
 800f26c:	461a      	mov	r2, r3
 800f26e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f272:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	621a      	str	r2, [r3, #32]
    memcpy(pdata_test->data_pin, second_pipe + 1, pin_data_len);
 800f27a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f27e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	6a18      	ldr	r0, [r3, #32]
 800f286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f28a:	3301      	adds	r3, #1
 800f28c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800f290:	4619      	mov	r1, r3
 800f292:	f007 fe2c 	bl	8016eee <memcpy>
    pdata_test->data_pin_len = pin_data_len;
 800f296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f2a0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	849a      	strh	r2, [r3, #36]	@ 0x24
    
    // Extract test data (after third pipe)
    uint8_t *test_start = third_pipe + 1;
 800f2a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    int test_data_len = buf_length - (test_start - temp_buf);
 800f2b2:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 800f2b6:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800f2ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f2be:	1acb      	subs	r3, r1, r3
 800f2c0:	1ad3      	subs	r3, r2, r3
 800f2c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    pdata_test->data_test = malloc(test_data_len);
 800f2c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f005 fc60 	bl	8014b90 <malloc>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f2d8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	629a      	str	r2, [r3, #40]	@ 0x28
    memcpy(pdata_test->data_test, test_start, test_data_len);
 800f2e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f2e4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2ec:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800f2f0:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f007 fdfa 	bl	8016eee <memcpy>
    pdata_test->data_test_len = test_data_len;
 800f2fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f304:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	859a      	strh	r2, [r3, #44]	@ 0x2c

    free(temp_buf);
 800f30c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800f310:	f005 fc46 	bl	8014ba0 <free>
    return true;
 800f314:	2301      	movs	r3, #1
//    uint8_t array_buf[200];
//    memcpy(array_buf,pdata_test->data_pin,pin_data_len);
//    uint8_t array_buf2[200];
//    memcpy(array_buf2,pdata_test->data_test,test_data_len);
}
 800f316:	4618      	mov	r0, r3
 800f318:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd90      	pop	{r4, r7, pc}
 800f320:	2000140c 	.word	0x2000140c
 800f324:	08019f50 	.word	0x08019f50
 800f328:	20000d48 	.word	0x20000d48

0800f32c <show_text_short_circuit>:

static void show_text_short_circuit(Screen_t *screen_obj) {
 800f32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f330:	b0c9      	sub	sp, #292	@ 0x124
 800f332:	af00      	add	r7, sp, #0
 800f334:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f338:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f33c:	6018      	str	r0, [r3, #0]
 800f33e:	466b      	mov	r3, sp
 800f340:	461e      	mov	r6, r3
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800f342:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f346:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800f350:	4619      	mov	r1, r3
 800f352:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f356:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f360:	fb01 f303 	mul.w	r3, r1, r3
 800f364:	4413      	add	r3, r2
 800f366:	334b      	adds	r3, #75	@ 0x4b
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800f36e:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800f372:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f376:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f37a:	6819      	ldr	r1, [r3, #0]
 800f37c:	4613      	mov	r3, r2
 800f37e:	005b      	lsls	r3, r3, #1
 800f380:	4413      	add	r3, r2
 800f382:	011b      	lsls	r3, r3, #4
 800f384:	440b      	add	r3, r1
 800f386:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
//    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
    char short_text[150] = "Pin Short to GND/VDD: ";
 800f390:	4b88      	ldr	r3, [pc, #544]	@ (800f5b4 <show_text_short_circuit+0x288>)
 800f392:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800f396:	461d      	mov	r5, r3
 800f398:	6828      	ldr	r0, [r5, #0]
 800f39a:	6869      	ldr	r1, [r5, #4]
 800f39c:	68aa      	ldr	r2, [r5, #8]
 800f39e:	68eb      	ldr	r3, [r5, #12]
 800f3a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3a2:	6928      	ldr	r0, [r5, #16]
 800f3a4:	6020      	str	r0, [r4, #0]
 800f3a6:	8aab      	ldrh	r3, [r5, #20]
 800f3a8:	7daa      	ldrb	r2, [r5, #22]
 800f3aa:	80a3      	strh	r3, [r4, #4]
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	71a3      	strb	r3, [r4, #6]
 800f3b0:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800f3b4:	227f      	movs	r2, #127	@ 0x7f
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f007 fc4f 	bl	8016c5c <memset>
    uint8_t buffer[50];
    memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit,num_pin);
 800f3be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f3c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f3d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f3dc:	fb01 f303 	mul.w	r3, r1, r3
 800f3e0:	4413      	add	r3, r2
 800f3e2:	3368      	adds	r3, #104	@ 0x68
 800f3e4:	6819      	ldr	r1, [r3, #0]
 800f3e6:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800f3ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f007 fd7d 	bl	8016eee <memcpy>
    // uint8_t test_short[20] = {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'};
    uint8_t shortPin[num_pin]; /* array store pin short */
 800f3f4:	f897 1116 	ldrb.w	r1, [r7, #278]	@ 0x116
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	3b01      	subs	r3, #1
 800f3fc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800f400:	b2cb      	uxtb	r3, r1
 800f402:	2200      	movs	r2, #0
 800f404:	469a      	mov	sl, r3
 800f406:	4693      	mov	fp, r2
 800f408:	f04f 0200 	mov.w	r2, #0
 800f40c:	f04f 0300 	mov.w	r3, #0
 800f410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f41c:	b2cb      	uxtb	r3, r1
 800f41e:	2200      	movs	r2, #0
 800f420:	4698      	mov	r8, r3
 800f422:	4691      	mov	r9, r2
 800f424:	f04f 0200 	mov.w	r2, #0
 800f428:	f04f 0300 	mov.w	r3, #0
 800f42c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f430:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f434:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f438:	460b      	mov	r3, r1
 800f43a:	3307      	adds	r3, #7
 800f43c:	08db      	lsrs	r3, r3, #3
 800f43e:	00db      	lsls	r3, r3, #3
 800f440:	ebad 0d03 	sub.w	sp, sp, r3
 800f444:	466b      	mov	r3, sp
 800f446:	3300      	adds	r3, #0
 800f448:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint8_t shortCount = 0;
 800f44c:	2300      	movs	r3, #0
 800f44e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < num_pin; i++) {
 800f452:	2300      	movs	r3, #0
 800f454:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800f458:	e02c      	b.n	800f4b4 <show_text_short_circuit+0x188>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] == '0') {
 800f45a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f45e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800f468:	4619      	mov	r1, r3
 800f46a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800f46e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f478:	fb01 f303 	mul.w	r3, r1, r3
 800f47c:	4413      	add	r3, r2
 800f47e:	3368      	adds	r3, #104	@ 0x68
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800f486:	4413      	add	r3, r2
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	2b30      	cmp	r3, #48	@ 0x30
 800f48c:	d10d      	bne.n	800f4aa <show_text_short_circuit+0x17e>
            shortPin[shortCount] = i + 1;
 800f48e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800f492:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800f496:	3201      	adds	r2, #1
 800f498:	b2d1      	uxtb	r1, r2
 800f49a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800f49e:	54d1      	strb	r1, [r2, r3]
            shortCount++;
 800f4a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < num_pin; i++) {
 800f4aa:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800f4b4:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 800f4b8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d3cc      	bcc.n	800f45a <show_text_short_circuit+0x12e>
        }
    }

    if (shortCount == 0) {
 800f4c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d121      	bne.n	800f50c <show_text_short_circuit+0x1e0>
        strcat(short_text,"None");
 800f4c8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7f0 fe49 	bl	8000164 <strlen>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800f4da:	4413      	add	r3, r2
 800f4dc:	4a36      	ldr	r2, [pc, #216]	@ (800f5b8 <show_text_short_circuit+0x28c>)
 800f4de:	6810      	ldr	r0, [r2, #0]
 800f4e0:	6018      	str	r0, [r3, #0]
 800f4e2:	7912      	ldrb	r2, [r2, #4]
 800f4e4:	711a      	strb	r2, [r3, #4]
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 800f4e6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7f0 fe3a 	bl	8000164 <strlen>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800f4f8:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800f4fc:	f5a1 708e 	sub.w	r0, r1, #284	@ 0x11c
 800f500:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800f504:	6800      	ldr	r0, [r0, #0]
 800f506:	f003 feb9 	bl	801327c <DWIN_SetText>
 800f50a:	e04b      	b.n	800f5a4 <show_text_short_circuit+0x278>
    } else {
        char tempStr[50];
        for (int i = 0; i < shortCount; i++) {
 800f50c:	2300      	movs	r3, #0
 800f50e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800f512:	e02f      	b.n	800f574 <show_text_short_circuit+0x248>
            sprintf(tempStr, "Pin %d", shortPin[i]);
 800f514:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800f518:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800f51c:	4413      	add	r3, r2
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	461a      	mov	r2, r3
 800f522:	f107 030c 	add.w	r3, r7, #12
 800f526:	4925      	ldr	r1, [pc, #148]	@ (800f5bc <show_text_short_circuit+0x290>)
 800f528:	4618      	mov	r0, r3
 800f52a:	f007 fa5f 	bl	80169ec <siprintf>
            strcat(short_text, tempStr);
 800f52e:	f107 020c 	add.w	r2, r7, #12
 800f532:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800f536:	4611      	mov	r1, r2
 800f538:	4618      	mov	r0, r3
 800f53a:	f007 fb97 	bl	8016c6c <strcat>
            if (i < shortCount - 1) {
 800f53e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800f542:	3b01      	subs	r3, #1
 800f544:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800f548:	429a      	cmp	r2, r3
 800f54a:	da0e      	bge.n	800f56a <show_text_short_circuit+0x23e>
                strcat(short_text, ", ");
 800f54c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800f550:	4618      	mov	r0, r3
 800f552:	f7f0 fe07 	bl	8000164 <strlen>
 800f556:	4603      	mov	r3, r0
 800f558:	461a      	mov	r2, r3
 800f55a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800f55e:	4413      	add	r3, r2
 800f560:	4a17      	ldr	r2, [pc, #92]	@ (800f5c0 <show_text_short_circuit+0x294>)
 800f562:	8811      	ldrh	r1, [r2, #0]
 800f564:	7892      	ldrb	r2, [r2, #2]
 800f566:	8019      	strh	r1, [r3, #0]
 800f568:	709a      	strb	r2, [r3, #2]
        for (int i = 0; i < shortCount; i++) {
 800f56a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800f56e:	3301      	adds	r3, #1
 800f570:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800f574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800f578:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800f57c:	429a      	cmp	r2, r3
 800f57e:	dbc9      	blt.n	800f514 <show_text_short_circuit+0x1e8>
            }
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Text_Short_Circuit,short_text,strlen(short_text));
 800f580:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800f584:	4618      	mov	r0, r3
 800f586:	f7f0 fded 	bl	8000164 <strlen>
 800f58a:	4603      	mov	r3, r0
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800f592:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800f596:	f5a1 708e 	sub.w	r0, r1, #284	@ 0x11c
 800f59a:	f44f 4116 	mov.w	r1, #38400	@ 0x9600
 800f59e:	6800      	ldr	r0, [r0, #0]
 800f5a0:	f003 fe6c 	bl	801327c <DWIN_SetText>
 800f5a4:	46b5      	mov	sp, r6
    }
}
 800f5a6:	bf00      	nop
 800f5a8:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b2:	bf00      	nop
 800f5b4:	08019f80 	.word	0x08019f80
 800f5b8:	08019f6c 	.word	0x08019f6c
 800f5bc:	08019f74 	.word	0x08019f74
 800f5c0:	08019f7c 	.word	0x08019f7c

0800f5c4 <show_text_function_test>:

static void show_text_function_test(Screen_t *const screen_obj) {
 800f5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c8:	b0d9      	sub	sp, #356	@ 0x164
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800f5d0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800f5d4:	6018      	str	r0, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800f5d6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800f5da:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800f5ea:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f5f4:	fb01 f303 	mul.w	r3, r1, r3
 800f5f8:	4413      	add	r3, r2
 800f5fa:	334b      	adds	r3, #75	@ 0x4b
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800f602:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800f606:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800f60a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800f60e:	6819      	ldr	r1, [r3, #0]
 800f610:	4613      	mov	r3, r2
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	4413      	add	r3, r2
 800f616:	011b      	lsls	r3, r3, #4
 800f618:	440b      	add	r3, r1
 800f61a:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800f624:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800f628:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800f62c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800f630:	6819      	ldr	r1, [r3, #0]
 800f632:	4613      	mov	r3, r2
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	4413      	add	r3, r2
 800f638:	011b      	lsls	r3, r3, #4
 800f63a:	440b      	add	r3, r1
 800f63c:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	f887 3155 	strb.w	r3, [r7, #341]	@ 0x155

    char case_text[300] = "Self-test result: ";  
 800f646:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800f64a:	f5a3 76a0 	sub.w	r6, r3, #320	@ 0x140
 800f64e:	4b9e      	ldr	r3, [pc, #632]	@ (800f8c8 <show_text_function_test+0x304>)
 800f650:	4634      	mov	r4, r6
 800f652:	461d      	mov	r5, r3
 800f654:	6828      	ldr	r0, [r5, #0]
 800f656:	6869      	ldr	r1, [r5, #4]
 800f658:	68aa      	ldr	r2, [r5, #8]
 800f65a:	68eb      	ldr	r3, [r5, #12]
 800f65c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f65e:	8a2b      	ldrh	r3, [r5, #16]
 800f660:	7caa      	ldrb	r2, [r5, #18]
 800f662:	8023      	strh	r3, [r4, #0]
 800f664:	4613      	mov	r3, r2
 800f666:	70a3      	strb	r3, [r4, #2]
 800f668:	f106 0313 	add.w	r3, r6, #19
 800f66c:	f240 1219 	movw	r2, #281	@ 0x119
 800f670:	2100      	movs	r1, #0
 800f672:	4618      	mov	r0, r3
 800f674:	f007 faf2 	bl	8016c5c <memset>
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].isShort == '0') {
 800f678:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800f67c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800f686:	4619      	mov	r1, r3
 800f688:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800f68c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800f690:	681a      	ldr	r2, [r3, #0]
 800f692:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f696:	fb01 f303 	mul.w	r3, r1, r3
 800f69a:	4413      	add	r3, r2
 800f69c:	336c      	adds	r3, #108	@ 0x6c
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	2b30      	cmp	r3, #48	@ 0x30
 800f6a2:	f040 80e9 	bne.w	800f878 <show_text_function_test+0x2b4>
 800f6a6:	466b      	mov	r3, sp
 800f6a8:	461d      	mov	r5, r3
        uint8_t failedCase[num_case]; 
 800f6aa:	f897 1155 	ldrb.w	r1, [r7, #341]	@ 0x155
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	3b01      	subs	r3, #1
 800f6b2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800f6b6:	b2cb      	uxtb	r3, r1
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	469a      	mov	sl, r3
 800f6bc:	4693      	mov	fp, r2
 800f6be:	f04f 0200 	mov.w	r2, #0
 800f6c2:	f04f 0300 	mov.w	r3, #0
 800f6c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f6ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f6ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f6d2:	b2cb      	uxtb	r3, r1
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	4698      	mov	r8, r3
 800f6d8:	4691      	mov	r9, r2
 800f6da:	f04f 0200 	mov.w	r2, #0
 800f6de:	f04f 0300 	mov.w	r3, #0
 800f6e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f6e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f6ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	3307      	adds	r3, #7
 800f6f2:	08db      	lsrs	r3, r3, #3
 800f6f4:	00db      	lsls	r3, r3, #3
 800f6f6:	ebad 0d03 	sub.w	sp, sp, r3
 800f6fa:	466b      	mov	r3, sp
 800f6fc:	3300      	adds	r3, #0
 800f6fe:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        uint8_t failedCount = 0;
 800f702:	2300      	movs	r3, #0
 800f704:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
        
        for (uint8_t i = 0; i < num_case; i++) {
 800f708:	2300      	movs	r3, #0
 800f70a:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800f70e:	e032      	b.n	800f776 <show_text_function_test+0x1b2>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
 800f710:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800f714:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800f71e:	4619      	mov	r1, r3
 800f720:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800f724:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f72e:	fb01 f303 	mul.w	r3, r1, r3
 800f732:	4413      	add	r3, r2
 800f734:	3370      	adds	r3, #112	@ 0x70
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800f73c:	4413      	add	r3, r2
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	2b30      	cmp	r3, #48	@ 0x30
 800f742:	d113      	bne.n	800f76c <show_text_function_test+0x1a8>
                if (failedCount < num_case) { // Bounds check!
 800f744:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 800f748:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d20d      	bcs.n	800f76c <show_text_function_test+0x1a8>
                    failedCase[failedCount] = i + 1;
 800f750:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800f754:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 800f758:	3201      	adds	r2, #1
 800f75a:	b2d1      	uxtb	r1, r2
 800f75c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800f760:	54d1      	strb	r1, [r2, r3]
                    failedCount++;
 800f762:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800f766:	3301      	adds	r3, #1
 800f768:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
        for (uint8_t i = 0; i < num_case; i++) {
 800f76c:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 800f770:	3301      	adds	r3, #1
 800f772:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 800f776:	f897 215e 	ldrb.w	r2, [r7, #350]	@ 0x15e
 800f77a:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 800f77e:	429a      	cmp	r2, r3
 800f780:	d3c6      	bcc.n	800f710 <show_text_function_test+0x14c>
                }
            }
        }

        if (failedCount == 0) {
 800f782:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10f      	bne.n	800f7aa <show_text_function_test+0x1e6>
            strncat(case_text, "Pass", sizeof(case_text) - strlen(case_text) - 1);
 800f78a:	f107 0320 	add.w	r3, r7, #32
 800f78e:	4618      	mov	r0, r3
 800f790:	f7f0 fce8 	bl	8000164 <strlen>
 800f794:	4603      	mov	r3, r0
 800f796:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800f79a:	3301      	adds	r3, #1
 800f79c:	f107 0020 	add.w	r0, r7, #32
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	494a      	ldr	r1, [pc, #296]	@ (800f8cc <show_text_function_test+0x308>)
 800f7a4:	f007 fa71 	bl	8016c8a <strncat>
 800f7a8:	e064      	b.n	800f874 <show_text_function_test+0x2b0>
        } else {
            strncat(case_text, "Failed in ", sizeof(case_text) - strlen(case_text) - 1);
 800f7aa:	f107 0320 	add.w	r3, r7, #32
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7f0 fcd8 	bl	8000164 <strlen>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	f107 0020 	add.w	r0, r7, #32
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	4943      	ldr	r1, [pc, #268]	@ (800f8d0 <show_text_function_test+0x30c>)
 800f7c4:	f007 fa61 	bl	8016c8a <strncat>
            
            for (int i = 0; i < failedCount; i++) {
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800f7ce:	e04b      	b.n	800f868 <show_text_function_test+0x2a4>
                char tempStr[20];
                snprintf(tempStr, sizeof(tempStr), "Case %d", failedCase[i]);
 800f7d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800f7d4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800f7d8:	4413      	add	r3, r2
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	f107 000c 	add.w	r0, r7, #12
 800f7e0:	4a3c      	ldr	r2, [pc, #240]	@ (800f8d4 <show_text_function_test+0x310>)
 800f7e2:	2114      	movs	r1, #20
 800f7e4:	f007 f8cc 	bl	8016980 <sniprintf>
                
                // Check if we have enough space before concatenating
                if (strlen(case_text) + strlen(tempStr) + 3 < sizeof(case_text)) {
 800f7e8:	f107 0320 	add.w	r3, r7, #32
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7f0 fcb9 	bl	8000164 <strlen>
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	f107 030c 	add.w	r3, r7, #12
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7f0 fcb3 	bl	8000164 <strlen>
 800f7fe:	4603      	mov	r3, r0
 800f800:	4423      	add	r3, r4
 800f802:	3303      	adds	r3, #3
 800f804:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800f808:	d226      	bcs.n	800f858 <show_text_function_test+0x294>
                    strncat(case_text, tempStr, sizeof(case_text) - strlen(case_text) - 1);
 800f80a:	f107 0320 	add.w	r3, r7, #32
 800f80e:	4618      	mov	r0, r3
 800f810:	f7f0 fca8 	bl	8000164 <strlen>
 800f814:	4603      	mov	r3, r0
 800f816:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800f81a:	3301      	adds	r3, #1
 800f81c:	f107 010c 	add.w	r1, r7, #12
 800f820:	f107 0020 	add.w	r0, r7, #32
 800f824:	461a      	mov	r2, r3
 800f826:	f007 fa30 	bl	8016c8a <strncat>
                    if (i < failedCount - 1) {
 800f82a:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800f82e:	3b01      	subs	r3, #1
 800f830:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800f834:	429a      	cmp	r2, r3
 800f836:	da12      	bge.n	800f85e <show_text_function_test+0x29a>
                        strncat(case_text, ", ", sizeof(case_text) - strlen(case_text) - 1);
 800f838:	f107 0320 	add.w	r3, r7, #32
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7f0 fc91 	bl	8000164 <strlen>
 800f842:	4603      	mov	r3, r0
 800f844:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800f848:	3301      	adds	r3, #1
 800f84a:	f107 0020 	add.w	r0, r7, #32
 800f84e:	461a      	mov	r2, r3
 800f850:	4921      	ldr	r1, [pc, #132]	@ (800f8d8 <show_text_function_test+0x314>)
 800f852:	f007 fa1a 	bl	8016c8a <strncat>
 800f856:	e002      	b.n	800f85e <show_text_function_test+0x29a>
                    }
                } else {
                    /* out of space */
                    printf("over flow in show_text_function_test\n");
 800f858:	4820      	ldr	r0, [pc, #128]	@ (800f8dc <show_text_function_test+0x318>)
 800f85a:	f007 f889 	bl	8016970 <puts>
            for (int i = 0; i < failedCount; i++) {
 800f85e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800f862:	3301      	adds	r3, #1
 800f864:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800f868:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800f86c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800f870:	429a      	cmp	r2, r3
 800f872:	dbad      	blt.n	800f7d0 <show_text_function_test+0x20c>
 800f874:	46ad      	mov	sp, r5
 800f876:	e00e      	b.n	800f896 <show_text_function_test+0x2d2>
                }
            }
        }
    } else {
        strncat(case_text, "N/A", sizeof(case_text) - strlen(case_text) - 1);
 800f878:	f107 0320 	add.w	r3, r7, #32
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7f0 fc71 	bl	8000164 <strlen>
 800f882:	4603      	mov	r3, r0
 800f884:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 800f888:	3301      	adds	r3, #1
 800f88a:	f107 0020 	add.w	r0, r7, #32
 800f88e:	461a      	mov	r2, r3
 800f890:	4913      	ldr	r1, [pc, #76]	@ (800f8e0 <show_text_function_test+0x31c>)
 800f892:	f007 f9fa 	bl	8016c8a <strncat>
    }
    
    DWIN_SetText((Dwin_t *)screen_obj, VP_Text_Test_Function, case_text, strlen(case_text));
 800f896:	f107 0320 	add.w	r3, r7, #32
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7f0 fc62 	bl	8000164 <strlen>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	f107 0220 	add.w	r2, r7, #32
 800f8a8:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 800f8ac:	f5a1 70ae 	sub.w	r0, r1, #348	@ 0x15c
 800f8b0:	f44f 4117 	mov.w	r1, #38656	@ 0x9700
 800f8b4:	6800      	ldr	r0, [r0, #0]
 800f8b6:	f003 fce1 	bl	801327c <DWIN_SetText>
}
 800f8ba:	bf00      	nop
 800f8bc:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c6:	bf00      	nop
 800f8c8:	08019fe0 	.word	0x08019fe0
 800f8cc:	08019f98 	.word	0x08019f98
 800f8d0:	08019fa0 	.word	0x08019fa0
 800f8d4:	08019fac 	.word	0x08019fac
 800f8d8:	08019f7c 	.word	0x08019f7c
 800f8dc:	08019fb4 	.word	0x08019fb4
 800f8e0:	08019fdc 	.word	0x08019fdc

0800f8e4 <get_text_result>:

/* create the string text result */
static void get_text_result(Screen_t *const screen_obj, char *result_line, uint8_t cur_num_ic) {
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b086      	sub	sp, #24
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	4613      	mov	r3, r2
 800f8f0:	71fb      	strb	r3, [r7, #7]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	68fa      	ldr	r2, [r7, #12]
 800f8fc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f900:	fb01 f303 	mul.w	r3, r1, r3
 800f904:	4413      	add	r3, r2
 800f906:	334b      	adds	r3, #75	@ 0x4b
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	753b      	strb	r3, [r7, #20]
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 800f90c:	7d3a      	ldrb	r2, [r7, #20]
 800f90e:	68f9      	ldr	r1, [r7, #12]
 800f910:	4613      	mov	r3, r2
 800f912:	005b      	lsls	r3, r3, #1
 800f914:	4413      	add	r3, r2
 800f916:	011b      	lsls	r3, r3, #4
 800f918:	440b      	add	r3, r1
 800f91a:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	74fb      	strb	r3, [r7, #19]
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 800f922:	7d3a      	ldrb	r2, [r7, #20]
 800f924:	68f9      	ldr	r1, [r7, #12]
 800f926:	4613      	mov	r3, r2
 800f928:	005b      	lsls	r3, r3, #1
 800f92a:	4413      	add	r3, r2
 800f92c:	011b      	lsls	r3, r3, #4
 800f92e:	440b      	add	r3, r1
 800f930:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	74bb      	strb	r3, [r7, #18]
    
    uint8_t has_errors = 0;
 800f938:	2300      	movs	r3, #0
 800f93a:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < num_pin; i++) {
 800f93c:	2300      	movs	r3, #0
 800f93e:	75bb      	strb	r3, [r7, #22]
 800f940:	e016      	b.n	800f970 <get_text_result+0x8c>
        if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit[i] != '1') {
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800f948:	4619      	mov	r1, r3
 800f94a:	68fa      	ldr	r2, [r7, #12]
 800f94c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f950:	fb01 f303 	mul.w	r3, r1, r3
 800f954:	4413      	add	r3, r2
 800f956:	3368      	adds	r3, #104	@ 0x68
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	7dbb      	ldrb	r3, [r7, #22]
 800f95c:	4413      	add	r3, r2
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	2b31      	cmp	r3, #49	@ 0x31
 800f962:	d002      	beq.n	800f96a <get_text_result+0x86>
            has_errors = 1;
 800f964:	2301      	movs	r3, #1
 800f966:	75fb      	strb	r3, [r7, #23]
            break; // Found error, no need to check more
 800f968:	e006      	b.n	800f978 <get_text_result+0x94>
    for (uint8_t i = 0; i < num_pin; i++) {
 800f96a:	7dbb      	ldrb	r3, [r7, #22]
 800f96c:	3301      	adds	r3, #1
 800f96e:	75bb      	strb	r3, [r7, #22]
 800f970:	7dba      	ldrb	r2, [r7, #22]
 800f972:	7cfb      	ldrb	r3, [r7, #19]
 800f974:	429a      	cmp	r2, r3
 800f976:	d3e4      	bcc.n	800f942 <get_text_result+0x5e>
        }
    }

    if (!has_errors) {
 800f978:	7dfb      	ldrb	r3, [r7, #23]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d11d      	bne.n	800f9ba <get_text_result+0xd6>
        for (uint8_t i = 0; i < num_case; i++) {
 800f97e:	2300      	movs	r3, #0
 800f980:	757b      	strb	r3, [r7, #21]
 800f982:	e016      	b.n	800f9b2 <get_text_result+0xce>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '0') {
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800f98a:	4619      	mov	r1, r3
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800f992:	fb01 f303 	mul.w	r3, r1, r3
 800f996:	4413      	add	r3, r2
 800f998:	3370      	adds	r3, #112	@ 0x70
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	7d7b      	ldrb	r3, [r7, #21]
 800f99e:	4413      	add	r3, r2
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	2b30      	cmp	r3, #48	@ 0x30
 800f9a4:	d102      	bne.n	800f9ac <get_text_result+0xc8>
                has_errors = 1;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	75fb      	strb	r3, [r7, #23]
                break; // Found error, no need to check more
 800f9aa:	e006      	b.n	800f9ba <get_text_result+0xd6>
        for (uint8_t i = 0; i < num_case; i++) {
 800f9ac:	7d7b      	ldrb	r3, [r7, #21]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	757b      	strb	r3, [r7, #21]
 800f9b2:	7d7a      	ldrb	r2, [r7, #21]
 800f9b4:	7cbb      	ldrb	r3, [r7, #18]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d3e4      	bcc.n	800f984 <get_text_result+0xa0>
            }
        }
    }

    if (has_errors) {
 800f9ba:	7dfb      	ldrb	r3, [r7, #23]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d007      	beq.n	800f9d0 <get_text_result+0xec>
        sprintf((char *)result_line, "IC%d: Self-test result: failed", cur_num_ic + 1);
 800f9c0:	79fb      	ldrb	r3, [r7, #7]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	4908      	ldr	r1, [pc, #32]	@ (800f9e8 <get_text_result+0x104>)
 800f9c8:	68b8      	ldr	r0, [r7, #8]
 800f9ca:	f007 f80f 	bl	80169ec <siprintf>
    } else {
        sprintf((char *)result_line, "IC%d: Self-test result: pass", cur_num_ic + 1);
    }    
}
 800f9ce:	e006      	b.n	800f9de <get_text_result+0xfa>
        sprintf((char *)result_line, "IC%d: Self-test result: pass", cur_num_ic + 1);
 800f9d0:	79fb      	ldrb	r3, [r7, #7]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	4905      	ldr	r1, [pc, #20]	@ (800f9ec <get_text_result+0x108>)
 800f9d8:	68b8      	ldr	r0, [r7, #8]
 800f9da:	f007 f807 	bl	80169ec <siprintf>
}
 800f9de:	bf00      	nop
 800f9e0:	3718      	adds	r7, #24
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	08019ff4 	.word	0x08019ff4
 800f9ec:	0801a014 	.word	0x0801a014

0800f9f0 <compelte_testing>:

/* using to store data when testing complete */
static void compelte_testing(Screen_t *const screen_obj) {
 800f9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9f2:	b0e1      	sub	sp, #388	@ 0x184
 800f9f4:	af0a      	add	r7, sp, #40	@ 0x28
 800f9f6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800f9fa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800f9fe:	6018      	str	r0, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 800fa00:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fa04:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fa0e:	4619      	mov	r1, r3
 800fa10:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fa14:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fa1e:	fb01 f303 	mul.w	r3, r1, r3
 800fa22:	4413      	add	r3, r2
 800fa24:	334b      	adds	r3, #75	@ 0x4b
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    uint8_t data_time[7];
    DS3231_Read_time(&ds3231,data_time);
 800fa2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800fa30:	4619      	mov	r1, r3
 800fa32:	48cc      	ldr	r0, [pc, #816]	@ (800fd64 <compelte_testing+0x374>)
 800fa34:	f003 fb10 	bl	8013058 <DS3231_Read_time>

    /* Store data to sd card */
    char buffer[300] = {0};
 800fa38:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fa3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800fa40:	4618      	mov	r0, r3
 800fa42:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800fa46:	461a      	mov	r2, r3
 800fa48:	2100      	movs	r1, #0
 800fa4a:	f007 f907 	bl	8016c5c <memset>
    // memset(buffer,0,300);
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800fa4e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800fa52:	469e      	mov	lr, r3
 800fa54:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 800fa58:	461d      	mov	r5, r3
 800fa5a:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 800fa5e:	461e      	mov	r6, r3
 800fa60:	f897 314a 	ldrb.w	r3, [r7, #330]	@ 0x14a
 800fa64:	60bb      	str	r3, [r7, #8]
 800fa66:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
 800fa6a:	607b      	str	r3, [r7, #4]
 800fa6c:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800fa70:	603b      	str	r3, [r7, #0]
        ,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,screen_obj->Program_Testx[index_program].Name_IC,screen_obj->Program_Testx[index_program].num_IC,
 800fa72:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fa76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fa80:	4619      	mov	r1, r3
 800fa82:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fa86:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800fa8a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fa8e:	fb01 f303 	mul.w	r3, r1, r3
 800fa92:	3348      	adds	r3, #72	@ 0x48
 800fa94:	6812      	ldr	r2, [r2, #0]
 800fa96:	4413      	add	r3, r2
 800fa98:	1d59      	adds	r1, r3, #5
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800fa9a:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800fa9e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800faa2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800faa6:	6818      	ldr	r0, [r3, #0]
 800faa8:	4613      	mov	r3, r2
 800faaa:	005b      	lsls	r3, r3, #1
 800faac:	4413      	add	r3, r2
 800faae:	011b      	lsls	r3, r3, #4
 800fab0:	4403      	add	r3, r0
 800fab2:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800fab6:	6818      	ldr	r0, [r3, #0]
 800fab8:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800fabc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fac0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fac4:	681c      	ldr	r4, [r3, #0]
 800fac6:	4613      	mov	r3, r2
 800fac8:	005b      	lsls	r3, r3, #1
 800faca:	4413      	add	r3, r2
 800facc:	011b      	lsls	r3, r3, #4
 800face:	4423      	add	r3, r4
 800fad0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800fad4:	681b      	ldr	r3, [r3, #0]
        screen_obj->IC_Testerx[screen_obj->curr_device].result_text);
 800fad6:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800fada:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800fade:	6812      	ldr	r2, [r2, #0]
 800fae0:	f892 24e9 	ldrb.w	r2, [r2, #1257]	@ 0x4e9
 800fae4:	4694      	mov	ip, r2
 800fae6:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800faea:	f5a2 74a6 	sub.w	r4, r2, #332	@ 0x14c
 800faee:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800faf2:	fb02 f20c 	mul.w	r2, r2, ip
 800faf6:	3278      	adds	r2, #120	@ 0x78
 800faf8:	6824      	ldr	r4, [r4, #0]
 800fafa:	4422      	add	r2, r4
    int written = snprintf(buffer,sizeof(buffer),"%d/%d/%d;%d:%d:%d;%s;%s;%s;%s",data_time[4],data_time[5],data_time[6],data_time[2],data_time[1],data_time[0]
 800fafc:	f107 041c 	add.w	r4, r7, #28
 800fb00:	9208      	str	r2, [sp, #32]
 800fb02:	9307      	str	r3, [sp, #28]
 800fb04:	9006      	str	r0, [sp, #24]
 800fb06:	9105      	str	r1, [sp, #20]
 800fb08:	683a      	ldr	r2, [r7, #0]
 800fb0a:	9204      	str	r2, [sp, #16]
 800fb0c:	687a      	ldr	r2, [r7, #4]
 800fb0e:	9203      	str	r2, [sp, #12]
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	9302      	str	r3, [sp, #8]
 800fb14:	9601      	str	r6, [sp, #4]
 800fb16:	9500      	str	r5, [sp, #0]
 800fb18:	4673      	mov	r3, lr
 800fb1a:	4a93      	ldr	r2, [pc, #588]	@ (800fd68 <compelte_testing+0x378>)
 800fb1c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800fb20:	4620      	mov	r0, r4
 800fb22:	f006 ff2d 	bl	8016980 <sniprintf>
 800fb26:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150
    DataLogging_t *data_store = (DataLogging_t *)malloc(sizeof(DataLogging_t));
 800fb2a:	2008      	movs	r0, #8
 800fb2c:	f005 f830 	bl	8014b90 <malloc>
 800fb30:	4603      	mov	r3, r0
 800fb32:	461a      	mov	r2, r3
 800fb34:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fb38:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800fb3c:	601a      	str	r2, [r3, #0]
    data_store->String_logging = malloc(strlen(buffer)+1);
 800fb3e:	f107 031c 	add.w	r3, r7, #28
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7f0 fb0e 	bl	8000164 <strlen>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	1c5a      	adds	r2, r3, #1
 800fb4c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fb50:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800fb54:	681c      	ldr	r4, [r3, #0]
 800fb56:	4610      	mov	r0, r2
 800fb58:	f005 f81a 	bl	8014b90 <malloc>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	6063      	str	r3, [r4, #4]
    memset(data_store->String_logging,0,strlen(buffer)+1);
 800fb60:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fb64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	685c      	ldr	r4, [r3, #4]
 800fb6c:	f107 031c 	add.w	r3, r7, #28
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7f0 faf7 	bl	8000164 <strlen>
 800fb76:	4603      	mov	r3, r0
 800fb78:	3301      	adds	r3, #1
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f007 f86c 	bl	8016c5c <memset>
    memcpy(data_store->String_logging,buffer,strlen(buffer));
 800fb84:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fb88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	685c      	ldr	r4, [r3, #4]
 800fb90:	f107 031c 	add.w	r3, r7, #28
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7f0 fae5 	bl	8000164 <strlen>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	f107 031c 	add.w	r3, r7, #28
 800fba0:	4619      	mov	r1, r3
 800fba2:	4620      	mov	r0, r4
 800fba4:	f007 f9a3 	bl	8016eee <memcpy>
    memset(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,0,sizeof(screen_obj->IC_Testerx[screen_obj->curr_device].result_text));
 800fba8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fbac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fbbc:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800fbc0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fbc4:	fb01 f303 	mul.w	r3, r1, r3
 800fbc8:	3378      	adds	r3, #120	@ 0x78
 800fbca:	6812      	ldr	r2, [r2, #0]
 800fbcc:	4413      	add	r3, r2
 800fbce:	22fa      	movs	r2, #250	@ 0xfa
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f007 f842 	bl	8016c5c <memset>
    OS_task_post_event(AO_task_sd, STORE_DATA_TEST, (uint8_t *)&data_store, sizeof(DataLogging_t));
 800fbd8:	4b64      	ldr	r3, [pc, #400]	@ (800fd6c <compelte_testing+0x37c>)
 800fbda:	6818      	ldr	r0, [r3, #0]
 800fbdc:	f107 0218 	add.w	r2, r7, #24
 800fbe0:	2308      	movs	r3, #8
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	f004 fda2 	bl	801472c <OS_task_post_event>

    if (written >= sizeof(buffer)) {
 800fbe8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800fbec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800fbf0:	d303      	bcc.n	800fbfa <compelte_testing+0x20a>
        printf("ERROR: Buffer overflow in compelte_testing!\n");
 800fbf2:	485f      	ldr	r0, [pc, #380]	@ (800fd70 <compelte_testing+0x380>)
 800fbf4:	f006 febc 	bl	8016970 <puts>
 800fbf8:	e0b0      	b.n	800fd5c <compelte_testing+0x36c>
        return;
    }

    /* Send data to esp32 */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800fbfa:	2008      	movs	r0, #8
 800fbfc:	f004 ffc8 	bl	8014b90 <malloc>
 800fc00:	4603      	mov	r3, r0
 800fc02:	461a      	mov	r2, r3
 800fc04:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fc08:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fc0c:	601a      	str	r2, [r3, #0]
    data_send_esp32->data = (char *)malloc(strlen(buffer));
 800fc0e:	f107 031c 	add.w	r3, r7, #28
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7f0 faa6 	bl	8000164 <strlen>
 800fc18:	4602      	mov	r2, r0
 800fc1a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fc1e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fc22:	681c      	ldr	r4, [r3, #0]
 800fc24:	4610      	mov	r0, r2
 800fc26:	f004 ffb3 	bl	8014b90 <malloc>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	6023      	str	r3, [r4, #0]
    memcpy(data_send_esp32->data,"h",1);
 800fc2e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fc32:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2201      	movs	r2, #1
 800fc3c:	494d      	ldr	r1, [pc, #308]	@ (800fd74 <compelte_testing+0x384>)
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f007 f955 	bl	8016eee <memcpy>
    memcpy(data_send_esp32->data+1,buffer,strlen(buffer));
 800fc44:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fc48:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	1c5c      	adds	r4, r3, #1
 800fc52:	f107 031c 	add.w	r3, r7, #28
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7f0 fa84 	bl	8000164 <strlen>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	f107 031c 	add.w	r3, r7, #28
 800fc62:	4619      	mov	r1, r3
 800fc64:	4620      	mov	r0, r4
 800fc66:	f007 f942 	bl	8016eee <memcpy>
    data_send_esp32->len = strlen(buffer);
 800fc6a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fc6e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fc72:	681c      	ldr	r4, [r3, #0]
 800fc74:	f107 031c 	add.w	r3, r7, #28
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7f0 fa73 	bl	8000164 <strlen>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	6063      	str	r3, [r4, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800fc82:	4b3d      	ldr	r3, [pc, #244]	@ (800fd78 <compelte_testing+0x388>)
 800fc84:	6818      	ldr	r0, [r3, #0]
 800fc86:	f107 0214 	add.w	r2, r7, #20
 800fc8a:	2308      	movs	r3, #8
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	f004 fd4d 	bl	801472c <OS_task_post_event>

    screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic = 0;
 800fc92:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fc96:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fca0:	4619      	mov	r1, r3
 800fca2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fca6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fcb0:	fb01 f303 	mul.w	r3, r1, r3
 800fcb4:	4413      	add	r3, r2
 800fcb6:	334a      	adds	r3, #74	@ 0x4a
 800fcb8:	2200      	movs	r2, #0
 800fcba:	701a      	strb	r2, [r3, #0]
    screen_obj->IC_Testerx[screen_obj->curr_device].state = false;
 800fcbc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fcc0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fcca:	4619      	mov	r1, r3
 800fccc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fcd0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fcd4:	681a      	ldr	r2, [r3, #0]
 800fcd6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fcda:	fb01 f303 	mul.w	r3, r1, r3
 800fcde:	4413      	add	r3, r2
 800fce0:	334c      	adds	r3, #76	@ 0x4c
 800fce2:	2200      	movs	r2, #0
 800fce4:	701a      	strb	r2, [r3, #0]
    DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 800fce6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fcea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fcfa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fd04:	fb01 f303 	mul.w	r3, r1, r3
 800fd08:	4413      	add	r3, r2
 800fd0a:	334c      	adds	r3, #76	@ 0x4c
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	461a      	mov	r2, r3
 800fd10:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fd14:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fd18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800fd1c:	6818      	ldr	r0, [r3, #0]
 800fd1e:	f003 fb60 	bl	80133e2 <DWIN_SetVariable_Icon>
    /* switch page */
    show_main_page(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].curr_PageMain,index_program); // check 
 800fd22:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fd26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fd30:	4619      	mov	r1, r3
 800fd32:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fd36:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fd40:	fb01 f303 	mul.w	r3, r1, r3
 800fd44:	4413      	add	r3, r2
 800fd46:	3349      	adds	r3, #73	@ 0x49
 800fd48:	7819      	ldrb	r1, [r3, #0]
 800fd4a:	f897 2157 	ldrb.w	r2, [r7, #343]	@ 0x157
 800fd4e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800fd52:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fd56:	6818      	ldr	r0, [r3, #0]
 800fd58:	f000 fd40 	bl	80107dc <show_main_page>

    /* free the array don't using */

}
 800fd5c:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd64:	2000143c 	.word	0x2000143c
 800fd68:	0801a034 	.word	0x0801a034
 800fd6c:	0801acb4 	.word	0x0801acb4
 800fd70:	0801a054 	.word	0x0801a054
 800fd74:	0801a080 	.word	0x0801a080
 800fd78:	0801acb8 	.word	0x0801acb8

0800fd7c <off_testing>:

static void off_testing(Screen_t *screen_obj) {
 800fd7c:	b5b0      	push	{r4, r5, r7, lr}
 800fd7e:	b086      	sub	sp, #24
 800fd80:	af02      	add	r7, sp, #8
 800fd82:	6078      	str	r0, [r7, #4]
    compelte_testing(screen_obj);
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f7ff fe33 	bl	800f9f0 <compelte_testing>

    /* free array using in have new data test */
    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fd90:	4619      	mov	r1, r3
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fd98:	fb01 f303 	mul.w	r3, r1, r3
 800fd9c:	4413      	add	r3, r2
 800fd9e:	3374      	adds	r3, #116	@ 0x74
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d00e      	beq.n	800fdc4 <off_testing+0x48>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fdac:	4619      	mov	r1, r3
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fdb4:	fb01 f303 	mul.w	r3, r1, r3
 800fdb8:	4413      	add	r3, r2
 800fdba:	3374      	adds	r3, #116	@ 0x74
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f004 feee 	bl	8014ba0 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].config_pin != NULL) {
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fdca:	4619      	mov	r1, r3
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fdd2:	fb01 f303 	mul.w	r3, r1, r3
 800fdd6:	4413      	add	r3, r2
 800fdd8:	335c      	adds	r3, #92	@ 0x5c
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d00e      	beq.n	800fdfe <off_testing+0x82>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].config_pin);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fde6:	4619      	mov	r1, r3
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fdee:	fb01 f303 	mul.w	r3, r1, r3
 800fdf2:	4413      	add	r3, r2
 800fdf4:	335c      	adds	r3, #92	@ 0x5c
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f004 fed1 	bl	8014ba0 <free>
    }
    
    if (screen_obj->IC_Testerx[screen_obj->curr_device].icon_result != NULL) {
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fe04:	4619      	mov	r1, r3
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fe0c:	fb01 f303 	mul.w	r3, r1, r3
 800fe10:	4413      	add	r3, r2
 800fe12:	3364      	adds	r3, #100	@ 0x64
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d00e      	beq.n	800fe38 <off_testing+0xbc>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result) ;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fe20:	4619      	mov	r1, r3
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fe28:	fb01 f303 	mul.w	r3, r1, r3
 800fe2c:	4413      	add	r3, r2
 800fe2e:	3364      	adds	r3, #100	@ 0x64
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f004 feb4 	bl	8014ba0 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit != NULL) {
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fe3e:	4619      	mov	r1, r3
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fe46:	fb01 f303 	mul.w	r3, r1, r3
 800fe4a:	4413      	add	r3, r2
 800fe4c:	3368      	adds	r3, #104	@ 0x68
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d00e      	beq.n	800fe72 <off_testing+0xf6>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_short_circuit);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fe62:	fb01 f303 	mul.w	r3, r1, r3
 800fe66:	4413      	add	r3, r2
 800fe68:	3368      	adds	r3, #104	@ 0x68
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f004 fe97 	bl	8014ba0 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case != NULL) {
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fe78:	4619      	mov	r1, r3
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fe80:	fb01 f303 	mul.w	r3, r1, r3
 800fe84:	4413      	add	r3, r2
 800fe86:	3370      	adds	r3, #112	@ 0x70
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d00e      	beq.n	800feac <off_testing+0x130>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fe94:	4619      	mov	r1, r3
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fe9c:	fb01 f303 	mul.w	r3, r1, r3
 800fea0:	4413      	add	r3, r2
 800fea2:	3370      	adds	r3, #112	@ 0x70
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4618      	mov	r0, r3
 800fea8:	f004 fe7a 	bl	8014ba0 <free>
    }

    if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result != NULL) {
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800feb2:	4619      	mov	r1, r3
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800feba:	fb01 f303 	mul.w	r3, r1, r3
 800febe:	4413      	add	r3, r2
 800fec0:	3360      	adds	r3, #96	@ 0x60
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00e      	beq.n	800fee6 <off_testing+0x16a>
        free(screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800fece:	4619      	mov	r1, r3
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800fed6:	fb01 f303 	mul.w	r3, r1, r3
 800feda:	4413      	add	r3, r2
 800fedc:	3360      	adds	r3, #96	@ 0x60
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f004 fe5d 	bl	8014ba0 <free>
    }

    /* Send data to esp32 status device */
    uart_esp32_t *data_send_esp32 = malloc(sizeof(uart_esp32_t));
 800fee6:	2008      	movs	r0, #8
 800fee8:	f004 fe52 	bl	8014b90 <malloc>
 800feec:	4603      	mov	r3, r0
 800feee:	60fb      	str	r3, [r7, #12]
    data_send_esp32->data = (char *)malloc(50);
 800fef0:	68fc      	ldr	r4, [r7, #12]
 800fef2:	2032      	movs	r0, #50	@ 0x32
 800fef4:	f004 fe4c 	bl	8014b90 <malloc>
 800fef8:	4603      	mov	r3, r0
 800fefa:	6023      	str	r3, [r4, #0]
    if (screen_obj->IC_Testerx[screen_obj->curr_device].state) {
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ff02:	4619      	mov	r1, r3
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ff0a:	fb01 f303 	mul.w	r3, r1, r3
 800ff0e:	4413      	add	r3, r2
 800ff10:	334c      	adds	r3, #76	@ 0x4c
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d038      	beq.n	800ff8a <off_testing+0x20e>
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6818      	ldr	r0, [r3, #0]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ff22:	1c59      	adds	r1, r3, #1
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ff2a:	461c      	mov	r4, r3
 800ff2c:	687a      	ldr	r2, [r7, #4]
 800ff2e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ff32:	fb04 f303 	mul.w	r3, r4, r3
 800ff36:	4413      	add	r3, r2
 800ff38:	334b      	adds	r3, #75	@ 0x4b
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	461c      	mov	r4, r3
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	4623      	mov	r3, r4
 800ff42:	005b      	lsls	r3, r3, #1
 800ff44:	4423      	add	r3, r4
 800ff46:	011b      	lsls	r3, r3, #4
 800ff48:	4413      	add	r3, r2
 800ff4a:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800ff4e:	681c      	ldr	r4, [r3, #0]
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ff56:	461d      	mov	r5, r3
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ff5e:	fb05 f303 	mul.w	r3, r5, r3
 800ff62:	4413      	add	r3, r2
 800ff64:	334b      	adds	r3, #75	@ 0x4b
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	461d      	mov	r5, r3
        sprintf(data_send_esp32->data,"d%d,running,%s,%s",screen_obj->curr_device+1,screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	462b      	mov	r3, r5
 800ff6e:	005b      	lsls	r3, r3, #1
 800ff70:	442b      	add	r3, r5
 800ff72:	011b      	lsls	r3, r3, #4
 800ff74:	4413      	add	r3, r2
 800ff76:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	9300      	str	r3, [sp, #0]
 800ff7e:	4623      	mov	r3, r4
 800ff80:	460a      	mov	r2, r1
 800ff82:	4925      	ldr	r1, [pc, #148]	@ (8010018 <off_testing+0x29c>)
 800ff84:	f006 fd32 	bl	80169ec <siprintf>
 800ff88:	e031      	b.n	800ffee <off_testing+0x272>
    } else {
        sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	6818      	ldr	r0, [r3, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ff94:	4619      	mov	r1, r3
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ff9c:	fb01 f303 	mul.w	r3, r1, r3
 800ffa0:	4413      	add	r3, r2
 800ffa2:	334b      	adds	r3, #75	@ 0x4b
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	460b      	mov	r3, r1
 800ffac:	005b      	lsls	r3, r3, #1
 800ffae:	440b      	add	r3, r1
 800ffb0:	011b      	lsls	r3, r3, #4
 800ffb2:	4413      	add	r3, r2
 800ffb4:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 800ffb8:	6819      	ldr	r1, [r3, #0]
        screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_IC);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 800ffc0:	461c      	mov	r4, r3
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800ffc8:	fb04 f303 	mul.w	r3, r4, r3
 800ffcc:	4413      	add	r3, r2
 800ffce:	334b      	adds	r3, #75	@ 0x4b
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	461c      	mov	r4, r3
        sprintf(data_send_esp32->data,"stop,%s,%s",screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].Name_Program,
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	4623      	mov	r3, r4
 800ffd8:	005b      	lsls	r3, r3, #1
 800ffda:	4423      	add	r3, r4
 800ffdc:	011b      	lsls	r3, r3, #4
 800ffde:	4413      	add	r3, r2
 800ffe0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	460a      	mov	r2, r1
 800ffe8:	490c      	ldr	r1, [pc, #48]	@ (801001c <off_testing+0x2a0>)
 800ffea:	f006 fcff 	bl	80169ec <siprintf>
    }
    data_send_esp32->len = strlen(data_send_esp32->data);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	68fc      	ldr	r4, [r7, #12]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7f0 f8b5 	bl	8000164 <strlen>
 800fffa:	4603      	mov	r3, r0
 800fffc:	6063      	str	r3, [r4, #4]
    OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_send_esp32,sizeof(uart_esp32_t));
 800fffe:	4b08      	ldr	r3, [pc, #32]	@ (8010020 <off_testing+0x2a4>)
 8010000:	6818      	ldr	r0, [r3, #0]
 8010002:	f107 020c 	add.w	r2, r7, #12
 8010006:	2308      	movs	r3, #8
 8010008:	2100      	movs	r1, #0
 801000a:	f004 fb8f 	bl	801472c <OS_task_post_event>
}
 801000e:	bf00      	nop
 8010010:	3710      	adds	r7, #16
 8010012:	46bd      	mov	sp, r7
 8010014:	bdb0      	pop	{r4, r5, r7, pc}
 8010016:	bf00      	nop
 8010018:	08019dc0 	.word	0x08019dc0
 801001c:	08019dd4 	.word	0x08019dd4
 8010020:	0801acb8 	.word	0x0801acb8

08010024 <show_pulse>:

static void show_pulse(Screen_t *screen_obj, uint8_t curr_case) {
 8010024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010028:	b0d4      	sub	sp, #336	@ 0x150
 801002a:	af04      	add	r7, sp, #16
 801002c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010030:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010034:	6018      	str	r0, [r3, #0]
 8010036:	460a      	mov	r2, r1
 8010038:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801003c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8010040:	701a      	strb	r2, [r3, #0]
    uint8_t num_case = screen_obj->Program_Testx[screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index].num_case;
 8010042:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010046:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010050:	4619      	mov	r1, r3
 8010052:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010056:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010060:	fb01 f303 	mul.w	r3, r1, r3
 8010064:	4413      	add	r3, r2
 8010066:	334b      	adds	r3, #75	@ 0x4b
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	4619      	mov	r1, r3
 801006c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010070:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	460b      	mov	r3, r1
 8010078:	005b      	lsls	r3, r3, #1
 801007a:	440b      	add	r3, r1
 801007c:	011b      	lsls	r3, r3, #4
 801007e:	4413      	add	r3, r2
 8010080:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
    uint8_t selectedProgram = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 801008a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801008e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010098:	4619      	mov	r1, r3
 801009a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801009e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80100a8:	fb01 f303 	mul.w	r3, r1, r3
 80100ac:	4413      	add	r3, r2
 80100ae:	334b      	adds	r3, #75	@ 0x4b
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    uint8_t num_pin = screen_obj->Program_Testx[selectedProgram].num_pin;
 80100b6:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 80100ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80100be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80100c2:	6819      	ldr	r1, [r3, #0]
 80100c4:	4613      	mov	r3, r2
 80100c6:	005b      	lsls	r3, r3, #1
 80100c8:	4413      	add	r3, r2
 80100ca:	011b      	lsls	r3, r3, #4
 80100cc:	440b      	add	r3, r1
 80100ce:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 80100d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80100dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80100e6:	4619      	mov	r1, r3
 80100e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80100ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80100f6:	fb01 f303 	mul.w	r3, r1, r3
 80100fa:	4413      	add	r3, r2
 80100fc:	334b      	adds	r3, #75	@ 0x4b
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
    
    char ShowCase_String[15];
    uint8_t index_data;
    uint16_t vp_pulse = VP_Pulse_graph;
 8010104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010108:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    uint8_t pins_to_show = num_pin - 2; 
 801010c:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 8010110:	3b02      	subs	r3, #2
 8010112:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
    uint8_t skip_index1 = (num_pin / 2) - 1; // skip index
 8010116:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 801011a:	085b      	lsrs	r3, r3, #1
 801011c:	b2db      	uxtb	r3, r3
 801011e:	3b01      	subs	r3, #1
 8010120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    uint8_t skip_index2 = num_pin - 1;       // skip index
 8010124:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 8010128:	3b01      	subs	r3, #1
 801012a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    uint16_t Address_VP = VP_Text_Pin_Pulse;
 801012e:	f249 7350 	movw	r3, #38736	@ 0x9750
 8010132:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    uint16_t vp_vertical = VP_vertical_line;
 8010136:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801013a:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    uint16_t vp_icon_clock = VP_ICON_CLOCK;
 801013e:	f44f 4386 	mov.w	r3, #17152	@ 0x4300
 8010142:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138

    char *data_copy = malloc(screen_obj->Program_Testx[index_program].data_pin_len + 1);
 8010146:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 801014a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801014e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010152:	6819      	ldr	r1, [r3, #0]
 8010154:	4613      	mov	r3, r2
 8010156:	005b      	lsls	r3, r3, #1
 8010158:	4413      	add	r3, r2
 801015a:	011b      	lsls	r3, r3, #4
 801015c:	440b      	add	r3, r1
 801015e:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 8010162:	881b      	ldrh	r3, [r3, #0]
 8010164:	3301      	adds	r3, #1
 8010166:	4618      	mov	r0, r3
 8010168:	f004 fd12 	bl	8014b90 <malloc>
 801016c:	4603      	mov	r3, r0
 801016e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    memcpy(data_copy, screen_obj->Program_Testx[index_program].data_pin, screen_obj->Program_Testx[index_program].data_pin_len);
 8010172:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 8010176:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801017a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801017e:	6819      	ldr	r1, [r3, #0]
 8010180:	4613      	mov	r3, r2
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	4413      	add	r3, r2
 8010186:	011b      	lsls	r3, r3, #4
 8010188:	440b      	add	r3, r1
 801018a:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 801018e:	6818      	ldr	r0, [r3, #0]
 8010190:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 8010194:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010198:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801019c:	6819      	ldr	r1, [r3, #0]
 801019e:	4613      	mov	r3, r2
 80101a0:	005b      	lsls	r3, r3, #1
 80101a2:	4413      	add	r3, r2
 80101a4:	011b      	lsls	r3, r3, #4
 80101a6:	440b      	add	r3, r1
 80101a8:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 80101ac:	881b      	ldrh	r3, [r3, #0]
 80101ae:	461a      	mov	r2, r3
 80101b0:	4601      	mov	r1, r0
 80101b2:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80101b6:	f006 fe9a 	bl	8016eee <memcpy>
    data_copy[screen_obj->Program_Testx[index_program].data_pin_len] = '\0'; 
 80101ba:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 80101be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80101c2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80101c6:	6819      	ldr	r1, [r3, #0]
 80101c8:	4613      	mov	r3, r2
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	4413      	add	r3, r2
 80101ce:	011b      	lsls	r3, r3, #4
 80101d0:	440b      	add	r3, r1
 80101d2:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 80101d6:	881b      	ldrh	r3, [r3, #0]
 80101d8:	461a      	mov	r2, r3
 80101da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80101de:	4413      	add	r3, r2
 80101e0:	2200      	movs	r2, #0
 80101e2:	701a      	strb	r2, [r3, #0]

    char pin_names[18][10];
    uint8_t total_pins = 0;
 80101e4:	2300      	movs	r3, #0
 80101e6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    char *temp_buf = strtok(data_copy, "\n");
 80101ea:	49c1      	ldr	r1, [pc, #772]	@ (80104f0 <show_pulse+0x4cc>)
 80101ec:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80101f0:	f006 fd84 	bl	8016cfc <strtok>
 80101f4:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

    while (temp_buf != NULL && total_pins < 18) {
 80101f8:	e018      	b.n	801022c <show_pulse+0x208>
        strcpy(pin_names[total_pins], temp_buf);
 80101fa:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80101fe:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010202:	4613      	mov	r3, r2
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	4413      	add	r3, r2
 8010208:	005b      	lsls	r3, r3, #1
 801020a:	440b      	add	r3, r1
 801020c:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8010210:	4618      	mov	r0, r3
 8010212:	f006 fe56 	bl	8016ec2 <strcpy>
        total_pins++;
 8010216:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 801021a:	3301      	adds	r3, #1
 801021c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        temp_buf = strtok(NULL, "\n");
 8010220:	49b3      	ldr	r1, [pc, #716]	@ (80104f0 <show_pulse+0x4cc>)
 8010222:	2000      	movs	r0, #0
 8010224:	f006 fd6a 	bl	8016cfc <strtok>
 8010228:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    while (temp_buf != NULL && total_pins < 18) {
 801022c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010230:	2b00      	cmp	r3, #0
 8010232:	d003      	beq.n	801023c <show_pulse+0x218>
 8010234:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8010238:	2b11      	cmp	r3, #17
 801023a:	d9de      	bls.n	80101fa <show_pulse+0x1d6>
    }

    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case + 1, 
 801023c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010240:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 801024a:	4619      	mov	r1, r3
 801024c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010250:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010254:	681a      	ldr	r2, [r3, #0]
 8010256:	f44f 7398 	mov.w	r3, #304	@ 0x130
 801025a:	fb01 f303 	mul.w	r3, r1, r3
 801025e:	4413      	add	r3, r2
 8010260:	3348      	adds	r3, #72	@ 0x48
 8010262:	781b      	ldrb	r3, [r3, #0]
    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
 8010264:	1c59      	adds	r1, r3, #1
            (pins_to_show + 6) / 7); // Calculate total cases needed
 8010266:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 801026a:	3306      	adds	r3, #6
    snprintf(ShowCase_String, sizeof(ShowCase_String), "%d OF %d", 
 801026c:	4aa1      	ldr	r2, [pc, #644]	@ (80104f4 <show_pulse+0x4d0>)
 801026e:	fb82 0203 	smull	r0, r2, r2, r3
 8010272:	441a      	add	r2, r3
 8010274:	1092      	asrs	r2, r2, #2
 8010276:	17db      	asrs	r3, r3, #31
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 801027e:	9300      	str	r3, [sp, #0]
 8010280:	460b      	mov	r3, r1
 8010282:	4a9d      	ldr	r2, [pc, #628]	@ (80104f8 <show_pulse+0x4d4>)
 8010284:	210f      	movs	r1, #15
 8010286:	f006 fb7b 	bl	8016980 <sniprintf>

    DWIN_SetText((Dwin_t *)screen_obj, VP_Show_CurrentCase, ShowCase_String, strlen(ShowCase_String));
 801028a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 801028e:	4618      	mov	r0, r3
 8010290:	f7ef ff68 	bl	8000164 <strlen>
 8010294:	4603      	mov	r3, r0
 8010296:	b29b      	uxth	r3, r3
 8010298:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 801029c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80102a0:	f5a1 709e 	sub.w	r0, r1, #316	@ 0x13c
 80102a4:	f249 3180 	movw	r1, #37760	@ 0x9380
 80102a8:	6800      	ldr	r0, [r0, #0]
 80102aa:	f002 ffe7 	bl	801327c <DWIN_SetText>

    /* TURN OFF ALL CLOCK ICON */
    uint8_t clock_buf[49] = {0};
 80102ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80102b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80102b6:	4618      	mov	r0, r3
 80102b8:	2331      	movs	r3, #49	@ 0x31
 80102ba:	461a      	mov	r2, r3
 80102bc:	2100      	movs	r1, #0
 80102be:	f006 fccd 	bl	8016c5c <memset>
    memset(clock_buf,ICON_CLOCK_NONE,sizeof(clock_buf));
 80102c2:	f107 031c 	add.w	r3, r7, #28
 80102c6:	2231      	movs	r2, #49	@ 0x31
 80102c8:	2102      	movs	r1, #2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f006 fcc6 	bl	8016c5c <memset>
    DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,clock_buf,49);
 80102d0:	f107 021c 	add.w	r2, r7, #28
 80102d4:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 80102d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80102dc:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 80102e0:	2331      	movs	r3, #49	@ 0x31
 80102e2:	6800      	ldr	r0, [r0, #0]
 80102e4:	f003 f8aa 	bl	801343c <DWIN_SetArray_Icon>

    for (uint8_t i = 0; i < 7; i++) {
 80102e8:	2300      	movs	r3, #0
 80102ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 80102ee:	e1be      	b.n	801066e <show_pulse+0x64a>
        uint8_t display_pin = (screen_obj->IC_Testerx[screen_obj->curr_device].curr_case * 7) + i;
 80102f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80102f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80102fe:	4619      	mov	r1, r3
 8010300:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010304:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 801030e:	fb01 f303 	mul.w	r3, r1, r3
 8010312:	4413      	add	r3, r2
 8010314:	3348      	adds	r3, #72	@ 0x48
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	461a      	mov	r2, r3
 801031a:	00d2      	lsls	r2, r2, #3
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	b2da      	uxtb	r2, r3
 8010320:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010324:	4413      	add	r3, r2
 8010326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        
        if (display_pin < pins_to_show) {
 801032a:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 801032e:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8010332:	429a      	cmp	r2, r3
 8010334:	f080 8136 	bcs.w	80105a4 <show_pulse+0x580>
            uint8_t actual_pin_index = display_pin;
 8010338:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 801033c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            
            // Adjust for skipped indices
            if (actual_pin_index >= skip_index1) {
 8010340:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 8010344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010348:	429a      	cmp	r2, r3
 801034a:	d304      	bcc.n	8010356 <show_pulse+0x332>
                actual_pin_index++; // Skip VCC
 801034c:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8010350:	3301      	adds	r3, #1
 8010352:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            }
            if (actual_pin_index >= skip_index2) {
 8010356:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 801035a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801035e:	429a      	cmp	r2, r3
 8010360:	d304      	bcc.n	801036c <show_pulse+0x348>
                actual_pin_index++; // Skip GND
 8010362:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8010366:	3301      	adds	r3, #1
 8010368:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
            }
            
            // Calculate data index
            index_data = num_case * actual_pin_index;
 801036c:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010370:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 8010374:	fb02 f303 	mul.w	r3, r2, r3
 8010378:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
            
            // Create the line with actual data
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data] == 3) { // UP CLOCK
 801037c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010380:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 801038a:	4619      	mov	r1, r3
 801038c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010390:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	f44f 7398 	mov.w	r3, #304	@ 0x130
 801039a:	fb01 f303 	mul.w	r3, r1, r3
 801039e:	4413      	add	r3, r2
 80103a0:	3374      	adds	r3, #116	@ 0x74
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80103a8:	4413      	add	r3, r2
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	2b03      	cmp	r3, #3
 80103ae:	d142      	bne.n	8010436 <show_pulse+0x412>
                /* don't show pulse graph */
                uint8_t up_clock[7] = {0};
 80103b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80103b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80103b8:	461a      	mov	r2, r3
 80103ba:	2300      	movs	r3, #0
 80103bc:	6013      	str	r3, [r2, #0]
 80103be:	f8c2 3003 	str.w	r3, [r2, #3]
                memset(up_clock,ICON_UP_CLOCK,sizeof(up_clock));
 80103c2:	f107 0314 	add.w	r3, r7, #20
 80103c6:	2207      	movs	r2, #7
 80103c8:	2101      	movs	r1, #1
 80103ca:	4618      	mov	r0, r3
 80103cc:	f006 fc46 	bl	8016c5c <memset>
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 80103d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80103d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80103de:	4619      	mov	r1, r3
 80103e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80103e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80103ee:	fb01 f303 	mul.w	r3, r1, r3
 80103f2:	4413      	add	r3, r2
 80103f4:	3374      	adds	r3, #116	@ 0x74
 80103f6:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 80103f8:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 80103fc:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 80103fe:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 8010402:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010406:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 801040a:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 801040e:	9201      	str	r2, [sp, #4]
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	2300      	movs	r3, #0
 8010414:	2200      	movs	r2, #0
 8010416:	6800      	ldr	r0, [r0, #0]
 8010418:	f003 f88c 	bl	8013534 <DWIN_Create_Basic_line>
                                num_case);
                DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,up_clock,sizeof(up_clock));
 801041c:	f107 0214 	add.w	r2, r7, #20
 8010420:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 8010424:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010428:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 801042c:	2307      	movs	r3, #7
 801042e:	6800      	ldr	r0, [r0, #0]
 8010430:	f003 f804 	bl	801343c <DWIN_SetArray_Icon>
 8010434:	e094      	b.n	8010560 <show_pulse+0x53c>
            } else if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data] == 4) {
 8010436:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801043a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010444:	4619      	mov	r1, r3
 8010446:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801044a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010454:	fb01 f303 	mul.w	r3, r1, r3
 8010458:	4413      	add	r3, r2
 801045a:	3374      	adds	r3, #116	@ 0x74
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8010462:	4413      	add	r3, r2
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b04      	cmp	r3, #4
 8010468:	d148      	bne.n	80104fc <show_pulse+0x4d8>
                uint8_t down_clock[7] = {0};
 801046a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801046e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010472:	461a      	mov	r2, r3
 8010474:	2300      	movs	r3, #0
 8010476:	6013      	str	r3, [r2, #0]
 8010478:	f8c2 3003 	str.w	r3, [r2, #3]
                memset(down_clock,ICON_DOWN_CLOCK,sizeof(down_clock));
 801047c:	f107 030c 	add.w	r3, r7, #12
 8010480:	2207      	movs	r2, #7
 8010482:	2100      	movs	r1, #0
 8010484:	4618      	mov	r0, r3
 8010486:	f006 fbe9 	bl	8016c5c <memset>
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 801048a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801048e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010498:	4619      	mov	r1, r3
 801049a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801049e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80104a8:	fb01 f303 	mul.w	r3, r1, r3
 80104ac:	4413      	add	r3, r2
 80104ae:	3374      	adds	r3, #116	@ 0x74
 80104b0:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 80104b2:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 80104b6:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 80104b8:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 80104bc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80104c0:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 80104c4:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 80104c8:	9201      	str	r2, [sp, #4]
 80104ca:	9300      	str	r3, [sp, #0]
 80104cc:	2300      	movs	r3, #0
 80104ce:	2200      	movs	r2, #0
 80104d0:	6800      	ldr	r0, [r0, #0]
 80104d2:	f003 f82f 	bl	8013534 <DWIN_Create_Basic_line>
                                num_case);
                DWIN_SetArray_Icon((Dwin_t *)screen_obj,vp_icon_clock,down_clock,sizeof(down_clock));
 80104d6:	f107 020c 	add.w	r2, r7, #12
 80104da:	f8b7 1138 	ldrh.w	r1, [r7, #312]	@ 0x138
 80104de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80104e2:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 80104e6:	2307      	movs	r3, #7
 80104e8:	6800      	ldr	r0, [r0, #0]
 80104ea:	f002 ffa7 	bl	801343c <DWIN_SetArray_Icon>
 80104ee:	e037      	b.n	8010560 <show_pulse+0x53c>
 80104f0:	08019f4c 	.word	0x08019f4c
 80104f4:	92492493 	.word	0x92492493
 80104f8:	08019dac 	.word	0x08019dac
            } else {
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 80104fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010500:	b29b      	uxth	r3, r3
 8010502:	461a      	mov	r2, r3
 8010504:	0052      	lsls	r2, r2, #1
 8010506:	4413      	add	r3, r2
 8010508:	461a      	mov	r2, r3
 801050a:	0112      	lsls	r2, r2, #4
 801050c:	1ad3      	subs	r3, r2, r3
 801050e:	b29b      	uxth	r3, r3
 8010510:	3390      	adds	r3, #144	@ 0x90
 8010512:	b29e      	uxth	r6, r3
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 8010514:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010518:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010522:	4619      	mov	r1, r3
 8010524:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010528:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010532:	fb01 f303 	mul.w	r3, r1, r3
 8010536:	4413      	add	r3, r2
 8010538:	3374      	adds	r3, #116	@ 0x74
 801053a:	681a      	ldr	r2, [r3, #0]
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 801053c:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
                                &(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[index_data]), 
 8010540:	4413      	add	r3, r2
                DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 100, 144 + (45 * i), // base x 114
 8010542:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 8010546:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801054a:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 801054e:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
 8010552:	9201      	str	r2, [sp, #4]
 8010554:	9300      	str	r3, [sp, #0]
 8010556:	4633      	mov	r3, r6
 8010558:	2264      	movs	r2, #100	@ 0x64
 801055a:	6800      	ldr	r0, [r0, #0]
 801055c:	f002 ffea 	bl	8013534 <DWIN_Create_Basic_line>
                                num_case);
            }            
            // Set pin name
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
 8010560:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 8010564:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010568:	4613      	mov	r3, r2
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4413      	add	r3, r2
 801056e:	005b      	lsls	r3, r3, #1
 8010570:	18ce      	adds	r6, r1, r3
                        strlen(pin_names[actual_pin_index]));
 8010572:	f897 212e 	ldrb.w	r2, [r7, #302]	@ 0x12e
 8010576:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 801057a:	4613      	mov	r3, r2
 801057c:	009b      	lsls	r3, r3, #2
 801057e:	4413      	add	r3, r2
 8010580:	005b      	lsls	r3, r3, #1
 8010582:	440b      	add	r3, r1
 8010584:	4618      	mov	r0, r3
 8010586:	f7ef fded 	bl	8000164 <strlen>
 801058a:	4603      	mov	r3, r0
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, pin_names[actual_pin_index], 
 801058c:	b29b      	uxth	r3, r3
 801058e:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 8010592:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010596:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 801059a:	4632      	mov	r2, r6
 801059c:	6800      	ldr	r0, [r0, #0]
 801059e:	f002 fe6d 	bl	801327c <DWIN_SetText>
 80105a2:	e04f      	b.n	8010644 <show_pulse+0x620>
            
        } else { /* don't using this */
 80105a4:	466b      	mov	r3, sp
 80105a6:	469a      	mov	sl, r3
            uint8_t low_buf[12 - num_case];
 80105a8:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 80105ac:	f1c3 060c 	rsb	r6, r3, #12
 80105b0:	1e73      	subs	r3, r6, #1
 80105b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80105b6:	4632      	mov	r2, r6
 80105b8:	2300      	movs	r3, #0
 80105ba:	4614      	mov	r4, r2
 80105bc:	461d      	mov	r5, r3
 80105be:	f04f 0200 	mov.w	r2, #0
 80105c2:	f04f 0300 	mov.w	r3, #0
 80105c6:	00eb      	lsls	r3, r5, #3
 80105c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80105cc:	00e2      	lsls	r2, r4, #3
 80105ce:	4632      	mov	r2, r6
 80105d0:	2300      	movs	r3, #0
 80105d2:	4690      	mov	r8, r2
 80105d4:	4699      	mov	r9, r3
 80105d6:	f04f 0200 	mov.w	r2, #0
 80105da:	f04f 0300 	mov.w	r3, #0
 80105de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80105e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80105e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80105ea:	4633      	mov	r3, r6
 80105ec:	3307      	adds	r3, #7
 80105ee:	08db      	lsrs	r3, r3, #3
 80105f0:	00db      	lsls	r3, r3, #3
 80105f2:	ebad 0d03 	sub.w	sp, sp, r3
 80105f6:	ab04      	add	r3, sp, #16
 80105f8:	3300      	adds	r3, #0
 80105fa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            memset(low_buf,0,sizeof(low_buf));
 80105fe:	4633      	mov	r3, r6
 8010600:	461a      	mov	r2, r3
 8010602:	2100      	movs	r1, #0
 8010604:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8010608:	f006 fb28 	bl	8016c5c <memset>
            DWIN_Create_Basic_line((Dwin_t *)screen_obj, vp_pulse, 0, 0, // base x 114
 801060c:	b2f3      	uxtb	r3, r6
 801060e:	f8b7 113e 	ldrh.w	r1, [r7, #318]	@ 0x13e
 8010612:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010616:	f5a2 709e 	sub.w	r0, r2, #316	@ 0x13c
 801061a:	9301      	str	r3, [sp, #4]
 801061c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	2300      	movs	r3, #0
 8010624:	2200      	movs	r2, #0
 8010626:	6800      	ldr	r0, [r0, #0]
 8010628:	f002 ff84 	bl	8013534 <DWIN_Create_Basic_line>
                                low_buf, 
                                sizeof(low_buf));
            DWIN_SetText((Dwin_t *)screen_obj, Address_VP, " ", 1);
 801062c:	f8b7 113c 	ldrh.w	r1, [r7, #316]	@ 0x13c
 8010630:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010634:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 8010638:	2301      	movs	r3, #1
 801063a:	4a67      	ldr	r2, [pc, #412]	@ (80107d8 <show_pulse+0x7b4>)
 801063c:	6800      	ldr	r0, [r0, #0]
 801063e:	f002 fe1d 	bl	801327c <DWIN_SetText>
 8010642:	46d5      	mov	sp, sl
        }
        
        vp_pulse += 0x200;
 8010644:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8010648:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801064c:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        
        Address_VP += 0x10;
 8010650:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8010654:	3310      	adds	r3, #16
 8010656:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
        vp_icon_clock += 0x07;
 801065a:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 801065e:	3307      	adds	r3, #7
 8010660:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    for (uint8_t i = 0; i < 7; i++) {
 8010664:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010668:	3301      	adds	r3, #1
 801066a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
 801066e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010672:	2b06      	cmp	r3, #6
 8010674:	f67f ae3c 	bls.w	80102f0 <show_pulse+0x2cc>
    }

    for (uint8_t i = 0; i < 14; i++) {
 8010678:	2300      	movs	r3, #0
 801067a:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 801067e:	e09c      	b.n	80107ba <show_pulse+0x796>
        if (i < num_case) {
 8010680:	f897 212d 	ldrb.w	r2, [r7, #301]	@ 0x12d
 8010684:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8010688:	429a      	cmp	r2, r3
 801068a:	d279      	bcs.n	8010780 <show_pulse+0x75c>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[i] == '1') {
 801068c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010690:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 801069a:	4619      	mov	r1, r3
 801069c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80106a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80106aa:	fb01 f303 	mul.w	r3, r1, r3
 80106ae:	4413      	add	r3, r2
 80106b0:	3370      	adds	r3, #112	@ 0x70
 80106b2:	681a      	ldr	r2, [r3, #0]
 80106b4:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 80106b8:	4413      	add	r3, r2
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	2b31      	cmp	r3, #49	@ 0x31
 80106be:	d12f      	bne.n	8010720 <show_pulse+0x6fc>
                DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,100 + (50 * i),110,100 + (50 * i),415,0x01ED);
 80106c0:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	461a      	mov	r2, r3
 80106c8:	0092      	lsls	r2, r2, #2
 80106ca:	4413      	add	r3, r2
 80106cc:	461a      	mov	r2, r3
 80106ce:	0091      	lsls	r1, r2, #2
 80106d0:	461a      	mov	r2, r3
 80106d2:	460b      	mov	r3, r1
 80106d4:	4413      	add	r3, r2
 80106d6:	005b      	lsls	r3, r3, #1
 80106d8:	b29b      	uxth	r3, r3
 80106da:	3364      	adds	r3, #100	@ 0x64
 80106dc:	b29a      	uxth	r2, r3
 80106de:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	4619      	mov	r1, r3
 80106e6:	0089      	lsls	r1, r1, #2
 80106e8:	440b      	add	r3, r1
 80106ea:	4619      	mov	r1, r3
 80106ec:	0088      	lsls	r0, r1, #2
 80106ee:	4619      	mov	r1, r3
 80106f0:	4603      	mov	r3, r0
 80106f2:	440b      	add	r3, r1
 80106f4:	005b      	lsls	r3, r3, #1
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	3364      	adds	r3, #100	@ 0x64
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 8010700:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8010704:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 8010708:	f240 14ed 	movw	r4, #493	@ 0x1ed
 801070c:	9402      	str	r4, [sp, #8]
 801070e:	f240 149f 	movw	r4, #415	@ 0x19f
 8010712:	9401      	str	r4, [sp, #4]
 8010714:	9300      	str	r3, [sp, #0]
 8010716:	236e      	movs	r3, #110	@ 0x6e
 8010718:	6800      	ldr	r0, [r0, #0]
 801071a:	f003 f919 	bl	8013950 <DWIN_Create_Single_line>
 801071e:	e041      	b.n	80107a4 <show_pulse+0x780>
            } else {
                DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,100 + (50 * i),110,100 + (50 * i),415,0xF800);
 8010720:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8010724:	b29b      	uxth	r3, r3
 8010726:	461a      	mov	r2, r3
 8010728:	0092      	lsls	r2, r2, #2
 801072a:	4413      	add	r3, r2
 801072c:	461a      	mov	r2, r3
 801072e:	0091      	lsls	r1, r2, #2
 8010730:	461a      	mov	r2, r3
 8010732:	460b      	mov	r3, r1
 8010734:	4413      	add	r3, r2
 8010736:	005b      	lsls	r3, r3, #1
 8010738:	b29b      	uxth	r3, r3
 801073a:	3364      	adds	r3, #100	@ 0x64
 801073c:	b29a      	uxth	r2, r3
 801073e:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8010742:	b29b      	uxth	r3, r3
 8010744:	4619      	mov	r1, r3
 8010746:	0089      	lsls	r1, r1, #2
 8010748:	440b      	add	r3, r1
 801074a:	4619      	mov	r1, r3
 801074c:	0088      	lsls	r0, r1, #2
 801074e:	4619      	mov	r1, r3
 8010750:	4603      	mov	r3, r0
 8010752:	440b      	add	r3, r1
 8010754:	005b      	lsls	r3, r3, #1
 8010756:	b29b      	uxth	r3, r3
 8010758:	3364      	adds	r3, #100	@ 0x64
 801075a:	b29b      	uxth	r3, r3
 801075c:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 8010760:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8010764:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 8010768:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 801076c:	9402      	str	r4, [sp, #8]
 801076e:	f240 149f 	movw	r4, #415	@ 0x19f
 8010772:	9401      	str	r4, [sp, #4]
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	236e      	movs	r3, #110	@ 0x6e
 8010778:	6800      	ldr	r0, [r0, #0]
 801077a:	f003 f8e9 	bl	8013950 <DWIN_Create_Single_line>
 801077e:	e011      	b.n	80107a4 <show_pulse+0x780>
            }
        } else {
            DWIN_Create_Single_line((Dwin_t *)screen_obj,vp_vertical,0,0,0,0,0xF800);
 8010780:	f8b7 113a 	ldrh.w	r1, [r7, #314]	@ 0x13a
 8010784:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010788:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 801078c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8010790:	9302      	str	r3, [sp, #8]
 8010792:	2300      	movs	r3, #0
 8010794:	9301      	str	r3, [sp, #4]
 8010796:	2300      	movs	r3, #0
 8010798:	9300      	str	r3, [sp, #0]
 801079a:	2300      	movs	r3, #0
 801079c:	2200      	movs	r2, #0
 801079e:	6800      	ldr	r0, [r0, #0]
 80107a0:	f003 f8d6 	bl	8013950 <DWIN_Create_Single_line>
        }
        vp_vertical += 0x200;
 80107a4:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80107a8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80107ac:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    for (uint8_t i = 0; i < 14; i++) {
 80107b0:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 80107b4:	3301      	adds	r3, #1
 80107b6:	f887 312d 	strb.w	r3, [r7, #301]	@ 0x12d
 80107ba:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 80107be:	2b0d      	cmp	r3, #13
 80107c0:	f67f af5e 	bls.w	8010680 <show_pulse+0x65c>
    }

    free(data_copy);
 80107c4:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80107c8:	f004 f9ea 	bl	8014ba0 <free>
}
 80107cc:	bf00      	nop
 80107ce:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80107d2:	46bd      	mov	sp, r7
 80107d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107d8:	0801a084 	.word	0x0801a084

080107dc <show_main_page>:

void show_main_page(Screen_t *const screen_obj, uint8_t PageMain, uint8_t curr_program) {
 80107dc:	b590      	push	{r4, r7, lr}
 80107de:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80107e2:	af02      	add	r7, sp, #8
 80107e4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80107e8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80107ec:	6018      	str	r0, [r3, #0]
 80107ee:	4608      	mov	r0, r1
 80107f0:	4611      	mov	r1, r2
 80107f2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80107f6:	f2a3 233d 	subw	r3, r3, #573	@ 0x23d
 80107fa:	4602      	mov	r2, r0
 80107fc:	701a      	strb	r2, [r3, #0]
 80107fe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010802:	f2a3 233e 	subw	r3, r3, #574	@ 0x23e
 8010806:	460a      	mov	r2, r1
 8010808:	701a      	strb	r2, [r3, #0]
    
    uint8_t index_program = screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index;
 801080a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801080e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010818:	4619      	mov	r1, r3
 801081a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801081e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010828:	fb01 f303 	mul.w	r3, r1, r3
 801082c:	4413      	add	r3, r2
 801082e:	334b      	adds	r3, #75	@ 0x4b
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 8010836:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 801083a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801083e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010842:	6819      	ldr	r1, [r3, #0]
 8010844:	4613      	mov	r3, r2
 8010846:	005b      	lsls	r3, r3, #1
 8010848:	4413      	add	r3, r2
 801084a:	011b      	lsls	r3, r3, #4
 801084c:	440b      	add	r3, r1
 801084e:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 8010858:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 801085c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010860:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010864:	6819      	ldr	r1, [r3, #0]
 8010866:	4613      	mov	r3, r2
 8010868:	005b      	lsls	r3, r3, #1
 801086a:	4413      	add	r3, r2
 801086c:	011b      	lsls	r3, r3, #4
 801086e:	440b      	add	r3, r1
 8010870:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
    switch (PageMain) {
 801087a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801087e:	f2a3 233d 	subw	r3, r3, #573	@ 0x23d
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	3b64      	subs	r3, #100	@ 0x64
 8010886:	2b03      	cmp	r3, #3
 8010888:	f200 839c 	bhi.w	8010fc4 <show_main_page+0x7e8>
 801088c:	a201      	add	r2, pc, #4	@ (adr r2, 8010894 <show_main_page+0xb8>)
 801088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010892:	bf00      	nop
 8010894:	0801097b 	.word	0x0801097b
 8010898:	080108a5 	.word	0x080108a5
 801089c:	08010a67 	.word	0x08010a67
 80108a0:	08010d55 	.word	0x08010d55
        case DWINPAGE_MAIN : {
            /* Show info */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 80108a4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80108a8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80108b2:	4619      	mov	r1, r3
 80108b4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80108b8:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 80108bc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80108c0:	fb01 f303 	mul.w	r3, r1, r3
 80108c4:	3348      	adds	r3, #72	@ 0x48
 80108c6:	6812      	ldr	r2, [r2, #0]
 80108c8:	4413      	add	r3, r2
 80108ca:	1d5c      	adds	r4, r3, #5
 80108cc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80108d0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80108da:	4619      	mov	r1, r3
 80108dc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80108e0:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 80108e4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80108e8:	fb01 f303 	mul.w	r3, r1, r3
 80108ec:	3348      	adds	r3, #72	@ 0x48
 80108ee:	6812      	ldr	r2, [r2, #0]
 80108f0:	4413      	add	r3, r2
 80108f2:	3305      	adds	r3, #5
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7ef fc35 	bl	8000164 <strlen>
 80108fa:	4603      	mov	r3, r0
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8010902:	f5a2 700f 	sub.w	r0, r2, #572	@ 0x23c
 8010906:	4622      	mov	r2, r4
 8010908:	f249 3150 	movw	r1, #37712	@ 0x9350
 801090c:	6800      	ldr	r0, [r0, #0]
 801090e:	f002 fcb5 	bl	801327c <DWIN_SetText>
            DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8010912:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010916:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010920:	4619      	mov	r1, r3
 8010922:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010926:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 801092a:	681a      	ldr	r2, [r3, #0]
 801092c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010930:	fb01 f303 	mul.w	r3, r1, r3
 8010934:	4413      	add	r3, r2
 8010936:	334c      	adds	r3, #76	@ 0x4c
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	461a      	mov	r2, r3
 801093c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010940:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010944:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010948:	6818      	ldr	r0, [r3, #0]
 801094a:	f002 fd4a 	bl	80133e2 <DWIN_SetVariable_Icon>
            Screen_ShowData_Mainpage(screen_obj,curr_program);
 801094e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010952:	f2a3 233e 	subw	r3, r3, #574	@ 0x23e
 8010956:	781a      	ldrb	r2, [r3, #0]
 8010958:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801095c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010960:	4611      	mov	r1, r2
 8010962:	6818      	ldr	r0, [r3, #0]
 8010964:	f7fe f9c6 	bl	800ecf4 <Screen_ShowData_Mainpage>

            DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN);
 8010968:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801096c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010970:	2165      	movs	r1, #101	@ 0x65
 8010972:	6818      	ldr	r0, [r3, #0]
 8010974:	f002 fc5b 	bl	801322e <DWIN_SetPage>
        } break;
 8010978:	e324      	b.n	8010fc4 <show_main_page+0x7e8>
        case DWINPAGE_MAIN_FINISH: {
            /* Show data */
            DWIN_SetText((Dwin_t *)screen_obj,VP_Name_Tester,screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester,strlen(screen_obj->IC_Testerx[screen_obj->curr_device].NameIC_Tester));
 801097a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801097e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010988:	4619      	mov	r1, r3
 801098a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 801098e:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 8010992:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010996:	fb01 f303 	mul.w	r3, r1, r3
 801099a:	3348      	adds	r3, #72	@ 0x48
 801099c:	6812      	ldr	r2, [r2, #0]
 801099e:	4413      	add	r3, r2
 80109a0:	1d5c      	adds	r4, r3, #5
 80109a2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80109a6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80109b0:	4619      	mov	r1, r3
 80109b2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80109b6:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 80109ba:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80109be:	fb01 f303 	mul.w	r3, r1, r3
 80109c2:	3348      	adds	r3, #72	@ 0x48
 80109c4:	6812      	ldr	r2, [r2, #0]
 80109c6:	4413      	add	r3, r2
 80109c8:	3305      	adds	r3, #5
 80109ca:	4618      	mov	r0, r3
 80109cc:	f7ef fbca 	bl	8000164 <strlen>
 80109d0:	4603      	mov	r3, r0
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 80109d8:	f5a2 700f 	sub.w	r0, r2, #572	@ 0x23c
 80109dc:	4622      	mov	r2, r4
 80109de:	f249 3150 	movw	r1, #37712	@ 0x9350
 80109e2:	6800      	ldr	r0, [r0, #0]
 80109e4:	f002 fc4a 	bl	801327c <DWIN_SetText>
            show_text_short_circuit(screen_obj);
 80109e8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80109ec:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80109f0:	6818      	ldr	r0, [r3, #0]
 80109f2:	f7fe fc9b 	bl	800f32c <show_text_short_circuit>
            show_text_function_test(screen_obj);
 80109f6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80109fa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80109fe:	6818      	ldr	r0, [r3, #0]
 8010a00:	f7fe fde0 	bl	800f5c4 <show_text_function_test>
            /* change page if home page */
            if (screen_obj->Ishome) {
 8010a04:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010a08:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	f000 82d1 	beq.w	8010fba <show_main_page+0x7de>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8010a18:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010a1c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010a26:	4619      	mov	r1, r3
 8010a28:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010a2c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010a30:	681a      	ldr	r2, [r3, #0]
 8010a32:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010a36:	fb01 f303 	mul.w	r3, r1, r3
 8010a3a:	4413      	add	r3, r2
 8010a3c:	334c      	adds	r3, #76	@ 0x4c
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	461a      	mov	r2, r3
 8010a42:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010a46:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010a4e:	6818      	ldr	r0, [r3, #0]
 8010a50:	f002 fcc7 	bl	80133e2 <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_FINISH);
 8010a54:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010a58:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010a5c:	2164      	movs	r1, #100	@ 0x64
 8010a5e:	6818      	ldr	r0, [r3, #0]
 8010a60:	f002 fbe5 	bl	801322e <DWIN_SetPage>
            }
        } break;
 8010a64:	e2a9      	b.n	8010fba <show_main_page+0x7de>
        case DWINPAGE_MAIN_DETAIL: {
            /* get data and show */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
 8010a66:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010a6a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010a74:	4619      	mov	r1, r3
 8010a76:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010a7a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010a84:	fb01 f303 	mul.w	r3, r1, r3
 8010a88:	4413      	add	r3, r2
 8010a8a:	3348      	adds	r3, #72	@ 0x48
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	701a      	strb	r2, [r3, #0]
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
 8010a90:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010a94:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010aa4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010aae:	fb01 f303 	mul.w	r3, r1, r3
 8010ab2:	4413      	add	r3, r2
 8010ab4:	3348      	adds	r3, #72	@ 0x48
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	f887 323a 	strb.w	r3, [r7, #570]	@ 0x23a
            char ShowCase_String[30];
            Screen_SetInfo_Pin(screen_obj);
 8010abc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010ac0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010ac4:	6818      	ldr	r0, [r3, #0]
 8010ac6:	f7fe f9f9 	bl	800eebc <Screen_SetInfo_Pin>
            Screen_GetIcon_Pin(screen_obj,screen_obj->Program_Testx[index_program].data_test);
 8010aca:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 8010ace:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010ad2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010ad6:	6819      	ldr	r1, [r3, #0]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	005b      	lsls	r3, r3, #1
 8010adc:	4413      	add	r3, r2
 8010ade:	011b      	lsls	r3, r3, #4
 8010ae0:	440b      	add	r3, r1
 8010ae2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010aec:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010af0:	4611      	mov	r1, r2
 8010af2:	6818      	ldr	r0, [r3, #0]
 8010af4:	f7fd fe30 	bl	800e758 <Screen_GetIcon_Pin>
            DWIN_SetArray_Icon(screen_obj,VP_ICON_DIRECTION_PIN,(uint8_t *)(_Screen.IC_Testerx[screen_obj->curr_device].config_pin),num_pin);
 8010af8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010afc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010b06:	4619      	mov	r1, r3
 8010b08:	4a90      	ldr	r2, [pc, #576]	@ (8010d4c <show_main_page+0x570>)
 8010b0a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010b0e:	fb01 f303 	mul.w	r3, r1, r3
 8010b12:	4413      	add	r3, r2
 8010b14:	335c      	adds	r3, #92	@ 0x5c
 8010b16:	681a      	ldr	r2, [r3, #0]
 8010b18:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 8010b1c:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8010b20:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 8010b24:	f244 0150 	movw	r1, #16464	@ 0x4050
 8010b28:	6800      	ldr	r0, [r0, #0]
 8010b2a:	f002 fc87 	bl	801343c <DWIN_SetArray_Icon>
            Screen_GetIcon_Result(screen_obj,screen_obj->IC_Testerx[screen_obj->curr_device].data_result);
 8010b2e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010b32:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010b42:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010b46:	681a      	ldr	r2, [r3, #0]
 8010b48:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010b4c:	fb01 f303 	mul.w	r3, r1, r3
 8010b50:	4413      	add	r3, r2
 8010b52:	3360      	adds	r3, #96	@ 0x60
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010b5a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010b5e:	4611      	mov	r1, r2
 8010b60:	6818      	ldr	r0, [r3, #0]
 8010b62:	f7fd fe82 	bl	800e86a <Screen_GetIcon_Result>
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_case*num_pin);
 8010b66:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010b6a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010b74:	4619      	mov	r1, r3
 8010b76:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010b7a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010b84:	fb01 f303 	mul.w	r3, r1, r3
 8010b88:	4413      	add	r3, r2
 8010b8a:	3360      	adds	r3, #96	@ 0x60
 8010b8c:	6819      	ldr	r1, [r3, #0]
 8010b8e:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8010b92:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 8010b96:	fb02 f303 	mul.w	r3, r2, r3
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	f107 0308 	add.w	r3, r7, #8
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f006 f9a4 	bl	8016eee <memcpy>
            DWIN_SetArray_Icon(screen_obj,VP_ICON_RESULT,&(screen_obj->IC_Testerx[screen_obj->curr_device].icon_result[case_show * num_pin]),num_pin);
 8010ba6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010baa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010bba:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010bc4:	fb01 f303 	mul.w	r3, r1, r3
 8010bc8:	4413      	add	r3, r2
 8010bca:	3364      	adds	r3, #100	@ 0x64
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f897 223a 	ldrb.w	r2, [r7, #570]	@ 0x23a
 8010bd2:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 8010bd6:	fb01 f202 	mul.w	r2, r1, r2
 8010bda:	441a      	add	r2, r3
 8010bdc:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 8010be0:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8010be4:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 8010be8:	f244 1150 	movw	r1, #16720	@ 0x4150
 8010bec:	6800      	ldr	r0, [r0, #0]
 8010bee:	f002 fc25 	bl	801343c <DWIN_SetArray_Icon>

            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,num_case);
 8010bf2:	f897 323a 	ldrb.w	r3, [r7, #570]	@ 0x23a
 8010bf6:	1c5a      	adds	r2, r3, #1
 8010bf8:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8010bfc:	f507 7007 	add.w	r0, r7, #540	@ 0x21c
 8010c00:	9300      	str	r3, [sp, #0]
 8010c02:	4613      	mov	r3, r2
 8010c04:	4a52      	ldr	r2, [pc, #328]	@ (8010d50 <show_main_page+0x574>)
 8010c06:	211e      	movs	r1, #30
 8010c08:	f005 feba 	bl	8016980 <sniprintf>
            DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 8010c0c:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7ef faa7 	bl	8000164 <strlen>
 8010c16:	4603      	mov	r3, r0
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 8010c1e:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8010c22:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 8010c26:	f249 3180 	movw	r1, #37760	@ 0x9380
 8010c2a:	6800      	ldr	r0, [r0, #0]
 8010c2c:	f002 fb26 	bl	801327c <DWIN_SetText>
            if (screen_obj->IC_Testerx[screen_obj->curr_device].data_result_case[screen_obj->IC_Testerx[screen_obj->curr_device].curr_case] == '0') {
 8010c30:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010c34:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010c3e:	4619      	mov	r1, r3
 8010c40:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010c44:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010c48:	681a      	ldr	r2, [r3, #0]
 8010c4a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010c4e:	fb01 f303 	mul.w	r3, r1, r3
 8010c52:	4413      	add	r3, r2
 8010c54:	3370      	adds	r3, #112	@ 0x70
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8010c5c:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 8010c60:	6812      	ldr	r2, [r2, #0]
 8010c62:	f892 24e9 	ldrb.w	r2, [r2, #1257]	@ 0x4e9
 8010c66:	4610      	mov	r0, r2
 8010c68:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8010c6c:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 8010c70:	6811      	ldr	r1, [r2, #0]
 8010c72:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8010c76:	fb00 f202 	mul.w	r2, r0, r2
 8010c7a:	440a      	add	r2, r1
 8010c7c:	3248      	adds	r2, #72	@ 0x48
 8010c7e:	7812      	ldrb	r2, [r2, #0]
 8010c80:	4413      	add	r3, r2
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	2b30      	cmp	r3, #48	@ 0x30
 8010c86:	d10b      	bne.n	8010ca0 <show_main_page+0x4c4>
                DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0xF800);
 8010c88:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010c8c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010c90:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8010c94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010c98:	6818      	ldr	r0, [r3, #0]
 8010c9a:	f002 fb71 	bl	8013380 <DWIN_SetColorText>
 8010c9e:	e00a      	b.n	8010cb6 <show_main_page+0x4da>
            } else {
                DWIN_SetColorText((Dwin_t *)screen_obj,SP_Current_Case,0x01ED);
 8010ca0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010ca4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010ca8:	f240 12ed 	movw	r2, #493	@ 0x1ed
 8010cac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010cb0:	6818      	ldr	r0, [r3, #0]
 8010cb2:	f002 fb65 	bl	8013380 <DWIN_SetColorText>
            }
            /* change page if home page */
            if (screen_obj->Ishome) {
 8010cb6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010cba:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f000 817a 	beq.w	8010fbe <show_main_page+0x7e2>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8010cca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010cce:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010cd8:	4619      	mov	r1, r3
 8010cda:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010cde:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010ce8:	fb01 f303 	mul.w	r3, r1, r3
 8010cec:	4413      	add	r3, r2
 8010cee:	334c      	adds	r3, #76	@ 0x4c
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010cf8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010cfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010d00:	6818      	ldr	r0, [r3, #0]
 8010d02:	f002 fb6e 	bl	80133e2 <DWIN_SetVariable_Icon>
                if (screen_obj->Program_Testx[index_program].num_pin == 14) {
 8010d06:	f897 223e 	ldrb.w	r2, [r7, #574]	@ 0x23e
 8010d0a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010d0e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010d12:	6819      	ldr	r1, [r3, #0]
 8010d14:	4613      	mov	r3, r2
 8010d16:	005b      	lsls	r3, r3, #1
 8010d18:	4413      	add	r3, r2
 8010d1a:	011b      	lsls	r3, r3, #4
 8010d1c:	440b      	add	r3, r1
 8010d1e:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	2b0e      	cmp	r3, #14
 8010d26:	d108      	bne.n	8010d3a <show_main_page+0x55e>
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL_14PIN);
 8010d28:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010d2c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010d30:	2168      	movs	r1, #104	@ 0x68
 8010d32:	6818      	ldr	r0, [r3, #0]
 8010d34:	f002 fa7b 	bl	801322e <DWIN_SetPage>
                } else {
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL);
                }
            }
        } break;
 8010d38:	e141      	b.n	8010fbe <show_main_page+0x7e2>
                    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_DETAIL);
 8010d3a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010d3e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010d42:	2166      	movs	r1, #102	@ 0x66
 8010d44:	6818      	ldr	r0, [r3, #0]
 8010d46:	f002 fa72 	bl	801322e <DWIN_SetPage>
        } break;
 8010d4a:	e138      	b.n	8010fbe <show_main_page+0x7e2>
 8010d4c:	20000d48 	.word	0x20000d48
 8010d50:	08019dac 	.word	0x08019dac
        case DWINPAGE_MAIN_PULSE: {
            /* show data */
            screen_obj->IC_Testerx[screen_obj->curr_device].curr_case = 0;
 8010d54:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010d58:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010d62:	4619      	mov	r1, r3
 8010d64:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010d68:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010d72:	fb01 f303 	mul.w	r3, r1, r3
 8010d76:	4413      	add	r3, r2
 8010d78:	3348      	adds	r3, #72	@ 0x48
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	701a      	strb	r2, [r3, #0]
            uint8_t case_show = screen_obj->IC_Testerx[screen_obj->curr_device].curr_case;
 8010d7e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010d82:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010d92:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010d9c:	fb01 f303 	mul.w	r3, r1, r3
 8010da0:	4413      	add	r3, r2
 8010da2:	3348      	adds	r3, #72	@ 0x48
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
            char ShowCase_String[30];
            snprintf(ShowCase_String,sizeof(ShowCase_String),"%d OF %d",case_show + 1,2);
 8010daa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 8010dae:	3301      	adds	r3, #1
 8010db0:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8010db4:	2202      	movs	r2, #2
 8010db6:	9200      	str	r2, [sp, #0]
 8010db8:	4a85      	ldr	r2, [pc, #532]	@ (8010fd0 <show_main_page+0x7f4>)
 8010dba:	211e      	movs	r1, #30
 8010dbc:	f005 fde0 	bl	8016980 <sniprintf>

            screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = malloc(num_case * num_pin);
 8010dc0:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8010dc4:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 8010dc8:	fb02 f303 	mul.w	r3, r2, r3
 8010dcc:	461a      	mov	r2, r3
 8010dce:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010dd2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010ddc:	461c      	mov	r4, r3
 8010dde:	4610      	mov	r0, r2
 8010de0:	f003 fed6 	bl	8014b90 <malloc>
 8010de4:	4603      	mov	r3, r0
 8010de6:	4619      	mov	r1, r3
 8010de8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010dec:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010df0:	681a      	ldr	r2, [r3, #0]
 8010df2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010df6:	fb04 f303 	mul.w	r3, r4, r3
 8010dfa:	4413      	add	r3, r2
 8010dfc:	3374      	adds	r3, #116	@ 0x74
 8010dfe:	6019      	str	r1, [r3, #0]
            transposeArray(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,screen_obj->IC_Testerx[screen_obj->curr_device].data_result,num_pin,num_case);
 8010e00:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010e04:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010e0e:	4619      	mov	r1, r3
 8010e10:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010e14:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010e1e:	fb01 f303 	mul.w	r3, r1, r3
 8010e22:	4413      	add	r3, r2
 8010e24:	3374      	adds	r3, #116	@ 0x74
 8010e26:	6818      	ldr	r0, [r3, #0]
 8010e28:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010e2c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010e36:	4619      	mov	r1, r3
 8010e38:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010e3c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010e46:	fb01 f303 	mul.w	r3, r1, r3
 8010e4a:	4413      	add	r3, r2
 8010e4c:	3360      	adds	r3, #96	@ 0x60
 8010e4e:	6819      	ldr	r1, [r3, #0]
 8010e50:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8010e54:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 8010e58:	f002 f89d 	bl	8012f96 <transposeArray>
            uint8_t buffer[500];
            memcpy(buffer,screen_obj->IC_Testerx[screen_obj->curr_device].data_clock,num_case * num_pin);
 8010e5c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010e60:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010e70:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010e74:	681a      	ldr	r2, [r3, #0]
 8010e76:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010e7a:	fb01 f303 	mul.w	r3, r1, r3
 8010e7e:	4413      	add	r3, r2
 8010e80:	3374      	adds	r3, #116	@ 0x74
 8010e82:	6819      	ldr	r1, [r3, #0]
 8010e84:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8010e88:	f897 223d 	ldrb.w	r2, [r7, #573]	@ 0x23d
 8010e8c:	fb02 f303 	mul.w	r3, r2, r3
 8010e90:	461a      	mov	r2, r3
 8010e92:	f107 0308 	add.w	r3, r7, #8
 8010e96:	4618      	mov	r0, r3
 8010e98:	f006 f829 	bl	8016eee <memcpy>
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 8010ea2:	e036      	b.n	8010f12 <show_main_page+0x736>
                screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] = screen_obj->IC_Testerx[screen_obj->curr_device].data_clock[i] - '0';
 8010ea4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010ea8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010eb8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010ec2:	fb01 f303 	mul.w	r3, r1, r3
 8010ec6:	4413      	add	r3, r2
 8010ec8:	3374      	adds	r3, #116	@ 0x74
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8010ed0:	4413      	add	r3, r2
 8010ed2:	781a      	ldrb	r2, [r3, #0]
 8010ed4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010ed8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010ee8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010eec:	6819      	ldr	r1, [r3, #0]
 8010eee:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010ef2:	fb00 f303 	mul.w	r3, r0, r3
 8010ef6:	440b      	add	r3, r1
 8010ef8:	3374      	adds	r3, #116	@ 0x74
 8010efa:	6819      	ldr	r1, [r3, #0]
 8010efc:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8010f00:	440b      	add	r3, r1
 8010f02:	3a30      	subs	r2, #48	@ 0x30
 8010f04:	b2d2      	uxtb	r2, r2
 8010f06:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < num_case * num_pin; i++) {
 8010f08:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 8010f12:	f897 223f 	ldrb.w	r2, [r7, #575]	@ 0x23f
 8010f16:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8010f1a:	f897 123d 	ldrb.w	r1, [r7, #573]	@ 0x23d
 8010f1e:	fb01 f303 	mul.w	r3, r1, r3
 8010f22:	429a      	cmp	r2, r3
 8010f24:	dbbe      	blt.n	8010ea4 <show_main_page+0x6c8>
            }

            /* show fist case in pusle page */
            show_pulse(screen_obj,0);
 8010f26:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010f2a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010f2e:	2100      	movs	r1, #0
 8010f30:	6818      	ldr	r0, [r3, #0]
 8010f32:	f7ff f877 	bl	8010024 <show_pulse>
            
            // /* change page if home page */
            if (screen_obj->Ishome) {
 8010f36:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010f3a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d03c      	beq.n	8010fc2 <show_main_page+0x7e6>
            	DWIN_SetVariable_Icon((Dwin_t *)screen_obj,VP_ICON_ON_OFF,screen_obj->IC_Testerx[screen_obj->curr_device].state);
 8010f48:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010f4c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8010f56:	4619      	mov	r1, r3
 8010f58:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010f5c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8010f66:	fb01 f303 	mul.w	r3, r1, r3
 8010f6a:	4413      	add	r3, r2
 8010f6c:	334c      	adds	r3, #76	@ 0x4c
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	461a      	mov	r2, r3
 8010f72:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010f76:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010f7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010f7e:	6818      	ldr	r0, [r3, #0]
 8010f80:	f002 fa2f 	bl	80133e2 <DWIN_SetVariable_Icon>
                DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_MAIN_PULSE);
 8010f84:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8010f88:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8010f8c:	2167      	movs	r1, #103	@ 0x67
 8010f8e:	6818      	ldr	r0, [r3, #0]
 8010f90:	f002 f94d 	bl	801322e <DWIN_SetPage>
                DWIN_SetText((Dwin_t *)screen_obj,VP_Show_CurrentCase,ShowCase_String,strlen(ShowCase_String));
 8010f94:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7ef f8e3 	bl	8000164 <strlen>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	f507 72fe 	add.w	r2, r7, #508	@ 0x1fc
 8010fa6:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 8010faa:	f5a1 700f 	sub.w	r0, r1, #572	@ 0x23c
 8010fae:	f249 3180 	movw	r1, #37760	@ 0x9380
 8010fb2:	6800      	ldr	r0, [r0, #0]
 8010fb4:	f002 f962 	bl	801327c <DWIN_SetText>
            }
            // if (screen_obj->IC_Testerx[screen_obj->curr_device].data_clock != NULL) {
            //     free(screen_obj->IC_Testerx[screen_obj->curr_device].data_clock);
            //     screen_obj->IC_Testerx[screen_obj->curr_device].data_clock = NULL;
            // }
        } break;
 8010fb8:	e003      	b.n	8010fc2 <show_main_page+0x7e6>
        } break;
 8010fba:	bf00      	nop
 8010fbc:	e002      	b.n	8010fc4 <show_main_page+0x7e8>
        } break;
 8010fbe:	bf00      	nop
 8010fc0:	e000      	b.n	8010fc4 <show_main_page+0x7e8>
        } break;
 8010fc2:	bf00      	nop
    }
}
 8010fc4:	bf00      	nop
 8010fc6:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd90      	pop	{r4, r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	08019dac 	.word	0x08019dac

08010fd4 <get_data_testing_finish>:

void get_data_testing_finish(Screen_t *const screen_obj,uint8_t device, uint8_t *result_array) {
 8010fd4:	b590      	push	{r4, r7, lr}
 8010fd6:	b0c9      	sub	sp, #292	@ 0x124
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010fde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010fe2:	6018      	str	r0, [r3, #0]
 8010fe4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010fe8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010fec:	601a      	str	r2, [r3, #0]
 8010fee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010ff2:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8010ff6:	460a      	mov	r2, r1
 8010ff8:	701a      	strb	r2, [r3, #0]
    uint8_t index_program = screen_obj->IC_Testerx[device].selected_Program_Index;
 8010ffa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010ffe:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	4619      	mov	r1, r3
 8011006:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801100a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8011014:	fb01 f303 	mul.w	r3, r1, r3
 8011018:	4413      	add	r3, r2
 801101a:	334b      	adds	r3, #75	@ 0x4b
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    uint8_t num_pin = screen_obj->Program_Testx[index_program].num_pin;
 8011022:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8011026:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801102a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801102e:	6819      	ldr	r1, [r3, #0]
 8011030:	4613      	mov	r3, r2
 8011032:	005b      	lsls	r3, r3, #1
 8011034:	4413      	add	r3, r2
 8011036:	011b      	lsls	r3, r3, #4
 8011038:	440b      	add	r3, r1
 801103a:	f203 33f5 	addw	r3, r3, #1013	@ 0x3f5
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    uint8_t num_case = screen_obj->Program_Testx[index_program].num_case;
 8011044:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8011048:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801104c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011050:	6819      	ldr	r1, [r3, #0]
 8011052:	4613      	mov	r3, r2
 8011054:	005b      	lsls	r3, r3, #1
 8011056:	4413      	add	r3, r2
 8011058:	011b      	lsls	r3, r3, #4
 801105a:	440b      	add	r3, r1
 801105c:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
    /* get data test */
    uint8_t buffer[200];
    screen_obj->IC_Testerx[device].isShort = result_array[0];
 8011066:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801106a:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	4618      	mov	r0, r3
 8011072:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011076:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	7819      	ldrb	r1, [r3, #0]
 801107e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011082:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011086:	681a      	ldr	r2, [r3, #0]
 8011088:	f44f 7398 	mov.w	r3, #304	@ 0x130
 801108c:	fb00 f303 	mul.w	r3, r0, r3
 8011090:	4413      	add	r3, r2
 8011092:	336c      	adds	r3, #108	@ 0x6c
 8011094:	460a      	mov	r2, r1
 8011096:	701a      	strb	r2, [r3, #0]
    screen_obj->IC_Testerx[device].data_short_circuit = (char *)malloc(num_pin);
 8011098:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 801109c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80110a0:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	461c      	mov	r4, r3
 80110a8:	4610      	mov	r0, r2
 80110aa:	f003 fd71 	bl	8014b90 <malloc>
 80110ae:	4603      	mov	r3, r0
 80110b0:	4619      	mov	r1, r3
 80110b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80110b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80110ba:	681a      	ldr	r2, [r3, #0]
 80110bc:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80110c0:	fb04 f303 	mul.w	r3, r4, r3
 80110c4:	4413      	add	r3, r2
 80110c6:	3368      	adds	r3, #104	@ 0x68
 80110c8:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_short_circuit,(char *)result_array + 2,num_pin);
 80110ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80110ce:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	4619      	mov	r1, r3
 80110d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80110da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80110de:	681a      	ldr	r2, [r3, #0]
 80110e0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80110e4:	fb01 f303 	mul.w	r3, r1, r3
 80110e8:	4413      	add	r3, r2
 80110ea:	3368      	adds	r3, #104	@ 0x68
 80110ec:	6818      	ldr	r0, [r3, #0]
 80110ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80110f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	3302      	adds	r3, #2
 80110fa:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 80110fe:	4619      	mov	r1, r3
 8011100:	f005 fde8 	bl	8016cd4 <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_short_circuit,num_pin);
    screen_obj->IC_Testerx[device].data_result = (char *)malloc(num_case * num_pin);
 8011104:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8011108:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 801110c:	fb02 f303 	mul.w	r3, r2, r3
 8011110:	461a      	mov	r2, r3
 8011112:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011116:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	461c      	mov	r4, r3
 801111e:	4610      	mov	r0, r2
 8011120:	f003 fd36 	bl	8014b90 <malloc>
 8011124:	4603      	mov	r3, r0
 8011126:	4619      	mov	r1, r3
 8011128:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801112c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011130:	681a      	ldr	r2, [r3, #0]
 8011132:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8011136:	fb04 f303 	mul.w	r3, r4, r3
 801113a:	4413      	add	r3, r2
 801113c:	3360      	adds	r3, #96	@ 0x60
 801113e:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_result,(char *)result_array + (num_pin +3),num_case * num_pin);
 8011140:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011144:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	4619      	mov	r1, r3
 801114c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011150:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	f44f 7398 	mov.w	r3, #304	@ 0x130
 801115a:	fb01 f303 	mul.w	r3, r1, r3
 801115e:	4413      	add	r3, r2
 8011160:	3360      	adds	r3, #96	@ 0x60
 8011162:	6818      	ldr	r0, [r3, #0]
 8011164:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8011168:	3303      	adds	r3, #3
 801116a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801116e:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8011172:	6812      	ldr	r2, [r2, #0]
 8011174:	18d1      	adds	r1, r2, r3
 8011176:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 801117a:	f897 211e 	ldrb.w	r2, [r7, #286]	@ 0x11e
 801117e:	fb02 f303 	mul.w	r3, r2, r3
 8011182:	461a      	mov	r2, r3
 8011184:	f005 fda6 	bl	8016cd4 <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_result,num_case * num_pin);
    screen_obj->IC_Testerx[device].data_result_case = (char *)malloc(num_case);
 8011188:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 801118c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011190:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	461c      	mov	r4, r3
 8011198:	4610      	mov	r0, r2
 801119a:	f003 fcf9 	bl	8014b90 <malloc>
 801119e:	4603      	mov	r3, r0
 80111a0:	4619      	mov	r1, r3
 80111a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80111a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80111b0:	fb04 f303 	mul.w	r3, r4, r3
 80111b4:	4413      	add	r3, r2
 80111b6:	3370      	adds	r3, #112	@ 0x70
 80111b8:	6019      	str	r1, [r3, #0]
    strncpy(screen_obj->IC_Testerx[device].data_result_case,(char *)result_array + (num_pin + 5 + num_case * num_pin),num_case);
 80111ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80111be:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	4619      	mov	r1, r3
 80111c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80111ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80111ce:	681a      	ldr	r2, [r3, #0]
 80111d0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80111d4:	fb01 f303 	mul.w	r3, r1, r3
 80111d8:	4413      	add	r3, r2
 80111da:	3370      	adds	r3, #112	@ 0x70
 80111dc:	6818      	ldr	r0, [r3, #0]
 80111de:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80111e2:	1d5a      	adds	r2, r3, #5
 80111e4:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80111e8:	f897 111e 	ldrb.w	r1, [r7, #286]	@ 0x11e
 80111ec:	fb01 f303 	mul.w	r3, r1, r3
 80111f0:	4413      	add	r3, r2
 80111f2:	461a      	mov	r2, r3
 80111f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80111f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	4413      	add	r3, r2
 8011200:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 8011204:	4619      	mov	r1, r3
 8011206:	f005 fd65 	bl	8016cd4 <strncpy>
    // memcpy(buffer,screen_obj->IC_Testerx[device].data_result_case,num_case);

    screen_obj->IC_Testerx[device].curr_PageMain = DWINPAGE_MAIN_FINISH;
 801120a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801120e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	4619      	mov	r1, r3
 8011216:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801121a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8011224:	fb01 f303 	mul.w	r3, r1, r3
 8011228:	4413      	add	r3, r2
 801122a:	3349      	adds	r3, #73	@ 0x49
 801122c:	2264      	movs	r2, #100	@ 0x64
 801122e:	701a      	strb	r2, [r3, #0]
    uint8_t *device_finish = malloc(sizeof(uint8_t));
 8011230:	2001      	movs	r0, #1
 8011232:	f003 fcad 	bl	8014b90 <malloc>
 8011236:	4603      	mov	r3, r0
 8011238:	653b      	str	r3, [r7, #80]	@ 0x50
    memcpy(device_finish,&device,sizeof(uint8_t));
 801123a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801123c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8011240:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 8011244:	7812      	ldrb	r2, [r2, #0]
 8011246:	701a      	strb	r2, [r3, #0]
    
    /* get text result to store  */
    uint8_t result_buffer[60];
    memset(result_buffer,0,60);
 8011248:	f107 0314 	add.w	r3, r7, #20
 801124c:	223c      	movs	r2, #60	@ 0x3c
 801124e:	2100      	movs	r1, #0
 8011250:	4618      	mov	r0, r3
 8011252:	f005 fd03 	bl	8016c5c <memset>
    get_text_result(screen_obj,result_buffer,screen_obj->IC_Testerx[screen_obj->curr_device].curr_num_ic);
 8011256:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801125a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011264:	4619      	mov	r1, r3
 8011266:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801126a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801126e:	681a      	ldr	r2, [r3, #0]
 8011270:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8011274:	fb01 f303 	mul.w	r3, r1, r3
 8011278:	4413      	add	r3, r2
 801127a:	334a      	adds	r3, #74	@ 0x4a
 801127c:	781a      	ldrb	r2, [r3, #0]
 801127e:	f107 0114 	add.w	r1, r7, #20
 8011282:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011286:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801128a:	6818      	ldr	r0, [r3, #0]
 801128c:	f7fe fb2a 	bl	800f8e4 <get_text_result>
    if (strlen(screen_obj->IC_Testerx[screen_obj->curr_device].result_text) > 1) {
 8011290:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011294:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 801129e:	4619      	mov	r1, r3
 80112a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112a4:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80112a8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80112ac:	fb01 f303 	mul.w	r3, r1, r3
 80112b0:	3378      	adds	r3, #120	@ 0x78
 80112b2:	6812      	ldr	r2, [r2, #0]
 80112b4:	4413      	add	r3, r2
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7ee ff54 	bl	8000164 <strlen>
 80112bc:	4603      	mov	r3, r0
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d91a      	bls.n	80112f8 <get_data_testing_finish+0x324>
        strcat(screen_obj->IC_Testerx[screen_obj->curr_device].result_text," | ");
 80112c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 80112d0:	4619      	mov	r1, r3
 80112d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112d6:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80112da:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80112de:	fb01 f303 	mul.w	r3, r1, r3
 80112e2:	3378      	adds	r3, #120	@ 0x78
 80112e4:	6812      	ldr	r2, [r2, #0]
 80112e6:	18d4      	adds	r4, r2, r3
 80112e8:	4620      	mov	r0, r4
 80112ea:	f7ee ff3b 	bl	8000164 <strlen>
 80112ee:	4603      	mov	r3, r0
 80112f0:	4423      	add	r3, r4
 80112f2:	4a17      	ldr	r2, [pc, #92]	@ (8011350 <get_data_testing_finish+0x37c>)
 80112f4:	6810      	ldr	r0, [r2, #0]
 80112f6:	6018      	str	r0, [r3, #0]
    }
    strncat(screen_obj->IC_Testerx[screen_obj->curr_device].result_text,result_buffer,strlen(result_buffer));
 80112f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80112fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011306:	4619      	mov	r1, r3
 8011308:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801130c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8011310:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8011314:	fb01 f303 	mul.w	r3, r1, r3
 8011318:	3378      	adds	r3, #120	@ 0x78
 801131a:	6812      	ldr	r2, [r2, #0]
 801131c:	18d4      	adds	r4, r2, r3
 801131e:	f107 0314 	add.w	r3, r7, #20
 8011322:	4618      	mov	r0, r3
 8011324:	f7ee ff1e 	bl	8000164 <strlen>
 8011328:	4602      	mov	r2, r0
 801132a:	f107 0314 	add.w	r3, r7, #20
 801132e:	4619      	mov	r1, r3
 8011330:	4620      	mov	r0, r4
 8011332:	f005 fcaa 	bl	8016c8a <strncat>

    OS_task_post_event(AO_task_screen,DEIVCE_TEST_FINISH,(uint8_t *)&device_finish,sizeof(uint8_t *));
 8011336:	4b07      	ldr	r3, [pc, #28]	@ (8011354 <get_data_testing_finish+0x380>)
 8011338:	6818      	ldr	r0, [r3, #0]
 801133a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801133e:	2304      	movs	r3, #4
 8011340:	2100      	movs	r1, #0
 8011342:	f003 f9f3 	bl	801472c <OS_task_post_event>
}
 8011346:	bf00      	nop
 8011348:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 801134c:	46bd      	mov	sp, r7
 801134e:	bd90      	pop	{r4, r7, pc}
 8011350:	0801a088 	.word	0x0801a088
 8011354:	0801acb0 	.word	0x0801acb0

08011358 <warning_page>:

void warning_page(Screen_t *const screen_obj,uint32_t id_slave) {
 8011358:	b580      	push	{r7, lr}
 801135a:	b09a      	sub	sp, #104	@ 0x68
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
 8011360:	6039      	str	r1, [r7, #0]
    char buffer[90]  = {0};
 8011362:	f107 030c 	add.w	r3, r7, #12
 8011366:	225a      	movs	r2, #90	@ 0x5a
 8011368:	2100      	movs	r1, #0
 801136a:	4618      	mov	r0, r3
 801136c:	f005 fc76 	bl	8016c5c <memset>
    snprintf(buffer,sizeof(buffer),"IC Tester %d is not connected to the system. Please check the connection",(id_slave - 0x470));
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 8011376:	f107 000c 	add.w	r0, r7, #12
 801137a:	4a0d      	ldr	r2, [pc, #52]	@ (80113b0 <warning_page+0x58>)
 801137c:	215a      	movs	r1, #90	@ 0x5a
 801137e:	f005 faff 	bl	8016980 <sniprintf>

    DWIN_SetText((Dwin_t *)screen_obj,VP_Warning,buffer,strlen(buffer));
 8011382:	f107 030c 	add.w	r3, r7, #12
 8011386:	4618      	mov	r0, r3
 8011388:	f7ee feec 	bl	8000164 <strlen>
 801138c:	4603      	mov	r3, r0
 801138e:	b29b      	uxth	r3, r3
 8011390:	f107 020c 	add.w	r2, r7, #12
 8011394:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f001 ff6f 	bl	801327c <DWIN_SetText>
    DWIN_SetPage((Dwin_t *)screen_obj,DWINPAGE_WARNING);
 801139e:	2177      	movs	r1, #119	@ 0x77
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f001 ff44 	bl	801322e <DWIN_SetPage>

}
 80113a6:	bf00      	nop
 80113a8:	3768      	adds	r7, #104	@ 0x68
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	0801a08c 	.word	0x0801a08c

080113b4 <get_input_keyboard>:

void get_input_keyboard(Screen_t *const screen_obj,uint16_t VP_input) {
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b082      	sub	sp, #8
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	460b      	mov	r3, r1
 80113be:	807b      	strh	r3, [r7, #2]
    switch (VP_input) {
 80113c0:	887b      	ldrh	r3, [r7, #2]
 80113c2:	f249 0240 	movw	r2, #36928	@ 0x9040
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d05d      	beq.n	8011486 <get_input_keyboard+0xd2>
 80113ca:	f249 0240 	movw	r2, #36928	@ 0x9040
 80113ce:	4293      	cmp	r3, r2
 80113d0:	dc69      	bgt.n	80114a6 <get_input_keyboard+0xf2>
 80113d2:	f249 0230 	movw	r2, #36912	@ 0x9030
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d045      	beq.n	8011466 <get_input_keyboard+0xb2>
 80113da:	f249 0230 	movw	r2, #36912	@ 0x9030
 80113de:	4293      	cmp	r3, r2
 80113e0:	dc61      	bgt.n	80114a6 <get_input_keyboard+0xf2>
 80113e2:	f249 0220 	movw	r2, #36896	@ 0x9020
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d02d      	beq.n	8011446 <get_input_keyboard+0x92>
 80113ea:	f249 0220 	movw	r2, #36896	@ 0x9020
 80113ee:	4293      	cmp	r3, r2
 80113f0:	dc59      	bgt.n	80114a6 <get_input_keyboard+0xf2>
 80113f2:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80113f6:	d004      	beq.n	8011402 <get_input_keyboard+0x4e>
 80113f8:	f249 0210 	movw	r2, #36880	@ 0x9010
 80113fc:	4293      	cmp	r3, r2
 80113fe:	d012      	beq.n	8011426 <get_input_keyboard+0x72>
        case VP_Year   : {
            memset(screen_obj->Time_setting.Year,0,3);
            memcpy(screen_obj->Time_setting.Year,screen_obj->Screen_keyboard.String,2);
        }
    }
}   
 8011400:	e051      	b.n	80114a6 <get_input_keyboard+0xf2>
            memset(screen_obj->Time_setting.Hour,0,3);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f203 43dd 	addw	r3, r3, #1245	@ 0x4dd
 8011408:	2203      	movs	r2, #3
 801140a:	2100      	movs	r1, #0
 801140c:	4618      	mov	r0, r3
 801140e:	f005 fc25 	bl	8016c5c <memset>
            memcpy(screen_obj->Time_setting.Hour,screen_obj->Screen_keyboard.String,2);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f203 43dd 	addw	r3, r3, #1245	@ 0x4dd
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	320e      	adds	r2, #14
 801141c:	8812      	ldrh	r2, [r2, #0]
 801141e:	b292      	uxth	r2, r2
 8011420:	801a      	strh	r2, [r3, #0]
        } break;
 8011422:	bf00      	nop
}   
 8011424:	e03f      	b.n	80114a6 <get_input_keyboard+0xf2>
            memset(screen_obj->Time_setting.Minute,0,3);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 801142c:	2203      	movs	r2, #3
 801142e:	2100      	movs	r1, #0
 8011430:	4618      	mov	r0, r3
 8011432:	f005 fc13 	bl	8016c5c <memset>
            memcpy(screen_obj->Time_setting.Minute,screen_obj->Screen_keyboard.String,2);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 801143c:	687a      	ldr	r2, [r7, #4]
 801143e:	320e      	adds	r2, #14
 8011440:	8812      	ldrh	r2, [r2, #0]
 8011442:	b292      	uxth	r2, r2
 8011444:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Day,0,3);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 801144c:	2203      	movs	r2, #3
 801144e:	2100      	movs	r1, #0
 8011450:	4618      	mov	r0, r3
 8011452:	f005 fc03 	bl	8016c5c <memset>
            memcpy(screen_obj->Time_setting.Day,screen_obj->Screen_keyboard.String,2);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	320e      	adds	r2, #14
 8011460:	8812      	ldrh	r2, [r2, #0]
 8011462:	b292      	uxth	r2, r2
 8011464:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Month,0,3);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f203 43d7 	addw	r3, r3, #1239	@ 0x4d7
 801146c:	2203      	movs	r2, #3
 801146e:	2100      	movs	r1, #0
 8011470:	4618      	mov	r0, r3
 8011472:	f005 fbf3 	bl	8016c5c <memset>
            memcpy(screen_obj->Time_setting.Month,screen_obj->Screen_keyboard.String,2);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f203 43d7 	addw	r3, r3, #1239	@ 0x4d7
 801147c:	687a      	ldr	r2, [r7, #4]
 801147e:	320e      	adds	r2, #14
 8011480:	8812      	ldrh	r2, [r2, #0]
 8011482:	b292      	uxth	r2, r2
 8011484:	801a      	strh	r2, [r3, #0]
            memset(screen_obj->Time_setting.Year,0,3);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f203 43da 	addw	r3, r3, #1242	@ 0x4da
 801148c:	2203      	movs	r2, #3
 801148e:	2100      	movs	r1, #0
 8011490:	4618      	mov	r0, r3
 8011492:	f005 fbe3 	bl	8016c5c <memset>
            memcpy(screen_obj->Time_setting.Year,screen_obj->Screen_keyboard.String,2);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f203 43da 	addw	r3, r3, #1242	@ 0x4da
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	320e      	adds	r2, #14
 80114a0:	8812      	ldrh	r2, [r2, #0]
 80114a2:	b292      	uxth	r2, r2
 80114a4:	801a      	strh	r2, [r3, #0]
}   
 80114a6:	bf00      	nop
 80114a8:	3708      	adds	r7, #8
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
	...

080114b0 <updata_data_program_from_app>:

void updata_data_program_from_app(Screen_t *const screen_obj,char *data,uint16_t len) {
 80114b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114b4:	b098      	sub	sp, #96	@ 0x60
 80114b6:	af02      	add	r7, sp, #8
 80114b8:	60f8      	str	r0, [r7, #12]
 80114ba:	60b9      	str	r1, [r7, #8]
 80114bc:	4613      	mov	r3, r2
 80114be:	80fb      	strh	r3, [r7, #6]
 80114c0:	466b      	mov	r3, sp
 80114c2:	469a      	mov	sl, r3
    /* update value */
    char temp_buf[len];
 80114c4:	88f9      	ldrh	r1, [r7, #6]
 80114c6:	460b      	mov	r3, r1
 80114c8:	3b01      	subs	r3, #1
 80114ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80114cc:	b28b      	uxth	r3, r1
 80114ce:	2200      	movs	r2, #0
 80114d0:	4698      	mov	r8, r3
 80114d2:	4691      	mov	r9, r2
 80114d4:	f04f 0200 	mov.w	r2, #0
 80114d8:	f04f 0300 	mov.w	r3, #0
 80114dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80114e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80114e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80114e8:	b28b      	uxth	r3, r1
 80114ea:	2200      	movs	r2, #0
 80114ec:	461c      	mov	r4, r3
 80114ee:	4615      	mov	r5, r2
 80114f0:	f04f 0200 	mov.w	r2, #0
 80114f4:	f04f 0300 	mov.w	r3, #0
 80114f8:	00eb      	lsls	r3, r5, #3
 80114fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80114fe:	00e2      	lsls	r2, r4, #3
 8011500:	460b      	mov	r3, r1
 8011502:	3307      	adds	r3, #7
 8011504:	08db      	lsrs	r3, r3, #3
 8011506:	00db      	lsls	r3, r3, #3
 8011508:	ebad 0d03 	sub.w	sp, sp, r3
 801150c:	ab02      	add	r3, sp, #8
 801150e:	3300      	adds	r3, #0
 8011510:	653b      	str	r3, [r7, #80]	@ 0x50
    memset(temp_buf,0,len);
 8011512:	88fb      	ldrh	r3, [r7, #6]
 8011514:	461a      	mov	r2, r3
 8011516:	2100      	movs	r1, #0
 8011518:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801151a:	f005 fb9f 	bl	8016c5c <memset>
    memcpy(temp_buf,data,len);
 801151e:	88fb      	ldrh	r3, [r7, #6]
 8011520:	461a      	mov	r2, r3
 8011522:	68b9      	ldr	r1, [r7, #8]
 8011524:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011526:	f005 fce2 	bl	8016eee <memcpy>
    uint8_t index_program;

    char *pdata = strtok(temp_buf,",");
 801152a:	498e      	ldr	r1, [pc, #568]	@ (8011764 <updata_data_program_from_app+0x2b4>)
 801152c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801152e:	f005 fbe5 	bl	8016cfc <strtok>
 8011532:	64f8      	str	r0, [r7, #76]	@ 0x4c
    index_program = atoi(pdata) - 1;
 8011534:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011536:	f003 fb26 	bl	8014b86 <atoi>
 801153a:	4603      	mov	r3, r0
 801153c:	b2db      	uxtb	r3, r3
 801153e:	3b01      	subs	r3, #1
 8011540:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    if (screen_obj->Program_Testx[index_program].Name_Program != NULL) {
 8011544:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011548:	68f9      	ldr	r1, [r7, #12]
 801154a:	4613      	mov	r3, r2
 801154c:	005b      	lsls	r3, r3, #1
 801154e:	4413      	add	r3, r2
 8011550:	011b      	lsls	r3, r3, #4
 8011552:	440b      	add	r3, r1
 8011554:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d019      	beq.n	8011592 <updata_data_program_from_app+0xe2>
        free(screen_obj->Program_Testx[index_program].Name_Program);
 801155e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011562:	68f9      	ldr	r1, [r7, #12]
 8011564:	4613      	mov	r3, r2
 8011566:	005b      	lsls	r3, r3, #1
 8011568:	4413      	add	r3, r2
 801156a:	011b      	lsls	r3, r3, #4
 801156c:	440b      	add	r3, r1
 801156e:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	4618      	mov	r0, r3
 8011576:	f003 fb13 	bl	8014ba0 <free>
        screen_obj->Program_Testx[index_program].Name_Program = NULL;
 801157a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 801157e:	68f9      	ldr	r1, [r7, #12]
 8011580:	4613      	mov	r3, r2
 8011582:	005b      	lsls	r3, r3, #1
 8011584:	4413      	add	r3, r2
 8011586:	011b      	lsls	r3, r3, #4
 8011588:	440b      	add	r3, r1
 801158a:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 801158e:	2200      	movs	r2, #0
 8011590:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 8011592:	4974      	ldr	r1, [pc, #464]	@ (8011764 <updata_data_program_from_app+0x2b4>)
 8011594:	2000      	movs	r0, #0
 8011596:	f005 fbb1 	bl	8016cfc <strtok>
 801159a:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].Name_Program = (char *)malloc(strlen(pdata) + 1);
 801159c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801159e:	f7ee fde1 	bl	8000164 <strlen>
 80115a2:	4603      	mov	r3, r0
 80115a4:	3301      	adds	r3, #1
 80115a6:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 80115aa:	4618      	mov	r0, r3
 80115ac:	f003 faf0 	bl	8014b90 <malloc>
 80115b0:	4603      	mov	r3, r0
 80115b2:	4619      	mov	r1, r3
 80115b4:	68fa      	ldr	r2, [r7, #12]
 80115b6:	4623      	mov	r3, r4
 80115b8:	005b      	lsls	r3, r3, #1
 80115ba:	4423      	add	r3, r4
 80115bc:	011b      	lsls	r3, r3, #4
 80115be:	4413      	add	r3, r2
 80115c0:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 80115c4:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].Name_Program, pdata);
 80115c6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80115ca:	68f9      	ldr	r1, [r7, #12]
 80115cc:	4613      	mov	r3, r2
 80115ce:	005b      	lsls	r3, r3, #1
 80115d0:	4413      	add	r3, r2
 80115d2:	011b      	lsls	r3, r3, #4
 80115d4:	440b      	add	r3, r1
 80115d6:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80115de:	4618      	mov	r0, r3
 80115e0:	f005 fc6f 	bl	8016ec2 <strcpy>

    if (screen_obj->Program_Testx[index_program].Name_IC != NULL) {
 80115e4:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80115e8:	68f9      	ldr	r1, [r7, #12]
 80115ea:	4613      	mov	r3, r2
 80115ec:	005b      	lsls	r3, r3, #1
 80115ee:	4413      	add	r3, r2
 80115f0:	011b      	lsls	r3, r3, #4
 80115f2:	440b      	add	r3, r1
 80115f4:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d019      	beq.n	8011632 <updata_data_program_from_app+0x182>
        free(screen_obj->Program_Testx[index_program].Name_IC);
 80115fe:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011602:	68f9      	ldr	r1, [r7, #12]
 8011604:	4613      	mov	r3, r2
 8011606:	005b      	lsls	r3, r3, #1
 8011608:	4413      	add	r3, r2
 801160a:	011b      	lsls	r3, r3, #4
 801160c:	440b      	add	r3, r1
 801160e:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	4618      	mov	r0, r3
 8011616:	f003 fac3 	bl	8014ba0 <free>
        screen_obj->Program_Testx[index_program].Name_IC = NULL;
 801161a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 801161e:	68f9      	ldr	r1, [r7, #12]
 8011620:	4613      	mov	r3, r2
 8011622:	005b      	lsls	r3, r3, #1
 8011624:	4413      	add	r3, r2
 8011626:	011b      	lsls	r3, r3, #4
 8011628:	440b      	add	r3, r1
 801162a:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 801162e:	2200      	movs	r2, #0
 8011630:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 8011632:	494c      	ldr	r1, [pc, #304]	@ (8011764 <updata_data_program_from_app+0x2b4>)
 8011634:	2000      	movs	r0, #0
 8011636:	f005 fb61 	bl	8016cfc <strtok>
 801163a:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].Name_IC = (char *)malloc(strlen(pdata) + 1);
 801163c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801163e:	f7ee fd91 	bl	8000164 <strlen>
 8011642:	4603      	mov	r3, r0
 8011644:	3301      	adds	r3, #1
 8011646:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 801164a:	4618      	mov	r0, r3
 801164c:	f003 faa0 	bl	8014b90 <malloc>
 8011650:	4603      	mov	r3, r0
 8011652:	4619      	mov	r1, r3
 8011654:	68fa      	ldr	r2, [r7, #12]
 8011656:	4623      	mov	r3, r4
 8011658:	005b      	lsls	r3, r3, #1
 801165a:	4423      	add	r3, r4
 801165c:	011b      	lsls	r3, r3, #4
 801165e:	4413      	add	r3, r2
 8011660:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8011664:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].Name_IC, pdata);
 8011666:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 801166a:	68f9      	ldr	r1, [r7, #12]
 801166c:	4613      	mov	r3, r2
 801166e:	005b      	lsls	r3, r3, #1
 8011670:	4413      	add	r3, r2
 8011672:	011b      	lsls	r3, r3, #4
 8011674:	440b      	add	r3, r1
 8011676:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801167e:	4618      	mov	r0, r3
 8011680:	f005 fc1f 	bl	8016ec2 <strcpy>

    if (screen_obj->Program_Testx[index_program].num_IC != NULL) {
 8011684:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011688:	68f9      	ldr	r1, [r7, #12]
 801168a:	4613      	mov	r3, r2
 801168c:	005b      	lsls	r3, r3, #1
 801168e:	4413      	add	r3, r2
 8011690:	011b      	lsls	r3, r3, #4
 8011692:	440b      	add	r3, r1
 8011694:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d019      	beq.n	80116d2 <updata_data_program_from_app+0x222>
        free(screen_obj->Program_Testx[index_program].num_IC);
 801169e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80116a2:	68f9      	ldr	r1, [r7, #12]
 80116a4:	4613      	mov	r3, r2
 80116a6:	005b      	lsls	r3, r3, #1
 80116a8:	4413      	add	r3, r2
 80116aa:	011b      	lsls	r3, r3, #4
 80116ac:	440b      	add	r3, r1
 80116ae:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	4618      	mov	r0, r3
 80116b6:	f003 fa73 	bl	8014ba0 <free>
        screen_obj->Program_Testx[index_program].num_IC = NULL;
 80116ba:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80116be:	68f9      	ldr	r1, [r7, #12]
 80116c0:	4613      	mov	r3, r2
 80116c2:	005b      	lsls	r3, r3, #1
 80116c4:	4413      	add	r3, r2
 80116c6:	011b      	lsls	r3, r3, #4
 80116c8:	440b      	add	r3, r1
 80116ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80116ce:	2200      	movs	r2, #0
 80116d0:	601a      	str	r2, [r3, #0]
    }
    pdata = strtok(NULL,",");
 80116d2:	4924      	ldr	r1, [pc, #144]	@ (8011764 <updata_data_program_from_app+0x2b4>)
 80116d4:	2000      	movs	r0, #0
 80116d6:	f005 fb11 	bl	8016cfc <strtok>
 80116da:	64f8      	str	r0, [r7, #76]	@ 0x4c
    screen_obj->Program_Testx[index_program].num_IC = (char *)malloc(strlen(pdata) + 1);
 80116dc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80116de:	f7ee fd41 	bl	8000164 <strlen>
 80116e2:	4603      	mov	r3, r0
 80116e4:	3301      	adds	r3, #1
 80116e6:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
 80116ea:	4618      	mov	r0, r3
 80116ec:	f003 fa50 	bl	8014b90 <malloc>
 80116f0:	4603      	mov	r3, r0
 80116f2:	4619      	mov	r1, r3
 80116f4:	68fa      	ldr	r2, [r7, #12]
 80116f6:	4623      	mov	r3, r4
 80116f8:	005b      	lsls	r3, r3, #1
 80116fa:	4423      	add	r3, r4
 80116fc:	011b      	lsls	r3, r3, #4
 80116fe:	4413      	add	r3, r2
 8011700:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8011704:	6019      	str	r1, [r3, #0]
    strcpy(screen_obj->Program_Testx[index_program].num_IC, pdata);
 8011706:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 801170a:	68f9      	ldr	r1, [r7, #12]
 801170c:	4613      	mov	r3, r2
 801170e:	005b      	lsls	r3, r3, #1
 8011710:	4413      	add	r3, r2
 8011712:	011b      	lsls	r3, r3, #4
 8011714:	440b      	add	r3, r1
 8011716:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801171e:	4618      	mov	r0, r3
 8011720:	f005 fbcf 	bl	8016ec2 <strcpy>

    /* get data for testing ic */
    if (get_data_testing_ic(screen_obj->Program_Testx[index_program].Name_IC,&screen_obj->Program_Testx[index_program]) == false) {
 8011724:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011728:	68f9      	ldr	r1, [r7, #12]
 801172a:	4613      	mov	r3, r2
 801172c:	005b      	lsls	r3, r3, #1
 801172e:	4413      	add	r3, r2
 8011730:	011b      	lsls	r3, r3, #4
 8011732:	440b      	add	r3, r1
 8011734:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 8011738:	6818      	ldr	r0, [r3, #0]
 801173a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 801173e:	4613      	mov	r3, r2
 8011740:	005b      	lsls	r3, r3, #1
 8011742:	4413      	add	r3, r2
 8011744:	011b      	lsls	r3, r3, #4
 8011746:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 801174a:	68fa      	ldr	r2, [r7, #12]
 801174c:	4413      	add	r3, r2
 801174e:	4619      	mov	r1, r3
 8011750:	f7fd fc16 	bl	800ef80 <get_data_testing_ic>
 8011754:	4603      	mov	r3, r0
 8011756:	f083 0301 	eor.w	r3, r3, #1
 801175a:	b2db      	uxtb	r3, r3
 801175c:	2b00      	cmp	r3, #0
 801175e:	d003      	beq.n	8011768 <updata_data_program_from_app+0x2b8>
        return;
 8011760:	46d5      	mov	sp, sl
 8011762:	e164      	b.n	8011a2e <updata_data_program_from_app+0x57e>
 8011764:	08019f1c 	.word	0x08019f1c
    }

    /* store data to eeprom */
    char string_data[TOTAL_ONE_PROGRAM_TEST_LEN] = {0};
 8011768:	f107 0314 	add.w	r3, r7, #20
 801176c:	222a      	movs	r2, #42	@ 0x2a
 801176e:	2100      	movs	r1, #0
 8011770:	4618      	mov	r0, r3
 8011772:	f005 fa73 	bl	8016c5c <memset>
    data_eeprom_t *data_write = malloc(sizeof(data_eeprom_t));
 8011776:	200c      	movs	r0, #12
 8011778:	f003 fa0a 	bl	8014b90 <malloc>
 801177c:	4603      	mov	r3, r0
 801177e:	613b      	str	r3, [r7, #16]
    snprintf(string_data,TOTAL_ONE_PROGRAM_TEST_LEN,"%s,%s,%s",screen_obj->Program_Testx[index_program].Name_Program
 8011780:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011784:	68f9      	ldr	r1, [r7, #12]
 8011786:	4613      	mov	r3, r2
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	4413      	add	r3, r2
 801178c:	011b      	lsls	r3, r3, #4
 801178e:	440b      	add	r3, r1
 8011790:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8011794:	681c      	ldr	r4, [r3, #0]
 8011796:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 801179a:	68f9      	ldr	r1, [r7, #12]
 801179c:	4613      	mov	r3, r2
 801179e:	005b      	lsls	r3, r3, #1
 80117a0:	4413      	add	r3, r2
 80117a2:	011b      	lsls	r3, r3, #4
 80117a4:	440b      	add	r3, r1
 80117a6:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 80117aa:	6819      	ldr	r1, [r3, #0]
 80117ac:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80117b0:	68f8      	ldr	r0, [r7, #12]
 80117b2:	4613      	mov	r3, r2
 80117b4:	005b      	lsls	r3, r3, #1
 80117b6:	4413      	add	r3, r2
 80117b8:	011b      	lsls	r3, r3, #4
 80117ba:	4403      	add	r3, r0
 80117bc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	f107 0014 	add.w	r0, r7, #20
 80117c6:	9301      	str	r3, [sp, #4]
 80117c8:	9100      	str	r1, [sp, #0]
 80117ca:	4623      	mov	r3, r4
 80117cc:	4a9a      	ldr	r2, [pc, #616]	@ (8011a38 <updata_data_program_from_app+0x588>)
 80117ce:	212a      	movs	r1, #42	@ 0x2a
 80117d0:	f005 f8d6 	bl	8016980 <sniprintf>
    ,screen_obj->Program_Testx[index_program].Name_IC
    ,screen_obj->Program_Testx[index_program].num_IC);
    data_write->data = malloc(TOTAL_ONE_PROGRAM_TEST_LEN);
 80117d4:	693c      	ldr	r4, [r7, #16]
 80117d6:	202a      	movs	r0, #42	@ 0x2a
 80117d8:	f003 f9da 	bl	8014b90 <malloc>
 80117dc:	4603      	mov	r3, r0
 80117de:	6063      	str	r3, [r4, #4]
    memcpy(data_write->data,string_data,TOTAL_ONE_PROGRAM_TEST_LEN);
 80117e0:	693b      	ldr	r3, [r7, #16]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	f107 0414 	add.w	r4, r7, #20
 80117e8:	469c      	mov	ip, r3
 80117ea:	f104 0e20 	add.w	lr, r4, #32
 80117ee:	4665      	mov	r5, ip
 80117f0:	4626      	mov	r6, r4
 80117f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80117f4:	6028      	str	r0, [r5, #0]
 80117f6:	6069      	str	r1, [r5, #4]
 80117f8:	60aa      	str	r2, [r5, #8]
 80117fa:	60eb      	str	r3, [r5, #12]
 80117fc:	3410      	adds	r4, #16
 80117fe:	f10c 0c10 	add.w	ip, ip, #16
 8011802:	4574      	cmp	r4, lr
 8011804:	d1f3      	bne.n	80117ee <updata_data_program_from_app+0x33e>
 8011806:	4662      	mov	r2, ip
 8011808:	4623      	mov	r3, r4
 801180a:	cb03      	ldmia	r3!, {r0, r1}
 801180c:	6010      	str	r0, [r2, #0]
 801180e:	6051      	str	r1, [r2, #4]
 8011810:	881b      	ldrh	r3, [r3, #0]
 8011812:	8113      	strh	r3, [r2, #8]
    data_write->data_len = TOTAL_ONE_PROGRAM_TEST_LEN;
 8011814:	693b      	ldr	r3, [r7, #16]
 8011816:	222a      	movs	r2, #42	@ 0x2a
 8011818:	811a      	strh	r2, [r3, #8]
    data_write->mem_addr = START_ADDR_PROGRAM_TEST_X(index_program);
 801181a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801181e:	b29b      	uxth	r3, r3
 8011820:	461a      	mov	r2, r3
 8011822:	0052      	lsls	r2, r2, #1
 8011824:	4413      	add	r3, r2
 8011826:	461a      	mov	r2, r3
 8011828:	00d2      	lsls	r2, r2, #3
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	005b      	lsls	r3, r3, #1
 801182e:	b29a      	uxth	r2, r3
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	3243      	adds	r2, #67	@ 0x43
 8011834:	b292      	uxth	r2, r2
 8011836:	801a      	strh	r2, [r3, #0]
    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM,(uint8_t *)&data_write,sizeof(data_eeprom_t));
 8011838:	4b80      	ldr	r3, [pc, #512]	@ (8011a3c <updata_data_program_from_app+0x58c>)
 801183a:	6818      	ldr	r0, [r3, #0]
 801183c:	f107 0210 	add.w	r2, r7, #16
 8011840:	230c      	movs	r3, #12
 8011842:	2105      	movs	r1, #5
 8011844:	f002 ff72 	bl	801472c <OS_task_post_event>

    // Show data in screen
    if (screen_obj->Ishome) {
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	f893 34ec 	ldrb.w	r3, [r3, #1260]	@ 0x4ec
 801184e:	2b00      	cmp	r3, #0
 8011850:	d042      	beq.n	80118d8 <updata_data_program_from_app+0x428>
        if (index_program == screen_obj->IC_Testerx[screen_obj->curr_device].selected_Program_Index) {
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	f893 34e9 	ldrb.w	r3, [r3, #1257]	@ 0x4e9
 8011858:	4619      	mov	r1, r3
 801185a:	68fa      	ldr	r2, [r7, #12]
 801185c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8011860:	fb01 f303 	mul.w	r3, r1, r3
 8011864:	4413      	add	r3, r2
 8011866:	334b      	adds	r3, #75	@ 0x4b
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 801186e:	429a      	cmp	r2, r3
 8011870:	d105      	bne.n	801187e <updata_data_program_from_app+0x3ce>
            Screen_ShowData_Mainpage(screen_obj,index_program);
 8011872:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8011876:	4619      	mov	r1, r3
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f7fd fa3b 	bl	800ecf4 <Screen_ShowData_Mainpage>
        }
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 801187e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8011882:	b29b      	uxth	r3, r3
 8011884:	461a      	mov	r2, r3
 8011886:	0092      	lsls	r2, r2, #2
 8011888:	4413      	add	r3, r2
 801188a:	00db      	lsls	r3, r3, #3
 801188c:	b29b      	uxth	r3, r3
 801188e:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 8011892:	3b58      	subs	r3, #88	@ 0x58
 8011894:	b29c      	uxth	r4, r3
 8011896:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 801189a:	68f9      	ldr	r1, [r7, #12]
 801189c:	4613      	mov	r3, r2
 801189e:	005b      	lsls	r3, r3, #1
 80118a0:	4413      	add	r3, r2
 80118a2:	011b      	lsls	r3, r3, #4
 80118a4:	440b      	add	r3, r1
 80118a6:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 80118aa:	681d      	ldr	r5, [r3, #0]
            ,strlen(screen_obj->Program_Testx[index_program].Name_Program));
 80118ac:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80118b0:	68f9      	ldr	r1, [r7, #12]
 80118b2:	4613      	mov	r3, r2
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	4413      	add	r3, r2
 80118b8:	011b      	lsls	r3, r3, #4
 80118ba:	440b      	add	r3, r1
 80118bc:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7ee fc4e 	bl	8000164 <strlen>
 80118c8:	4603      	mov	r3, r0
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	462a      	mov	r2, r5
 80118ce:	4621      	mov	r1, r4
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	f001 fcd3 	bl	801327c <DWIN_SetText>
 80118d6:	e0a9      	b.n	8011a2c <updata_data_program_from_app+0x57c>
    } else {
        uint8_t size_Name_IC = strlen("IC Name: ") + strlen((char *)screen_obj->Program_Testx[index_program].Name_IC);
 80118d8:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80118dc:	68f9      	ldr	r1, [r7, #12]
 80118de:	4613      	mov	r3, r2
 80118e0:	005b      	lsls	r3, r3, #1
 80118e2:	4413      	add	r3, r2
 80118e4:	011b      	lsls	r3, r3, #4
 80118e6:	440b      	add	r3, r1
 80118e8:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7ee fc38 	bl	8000164 <strlen>
 80118f4:	4603      	mov	r3, r0
 80118f6:	b2db      	uxtb	r3, r3
 80118f8:	3309      	adds	r3, #9
 80118fa:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        uint8_t size_Num_IC = strlen("Number of ICs: ") + strlen((char *)screen_obj->Program_Testx[index_program].num_IC);
 80118fe:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011902:	68f9      	ldr	r1, [r7, #12]
 8011904:	4613      	mov	r3, r2
 8011906:	005b      	lsls	r3, r3, #1
 8011908:	4413      	add	r3, r2
 801190a:	011b      	lsls	r3, r3, #4
 801190c:	440b      	add	r3, r1
 801190e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4618      	mov	r0, r3
 8011916:	f7ee fc25 	bl	8000164 <strlen>
 801191a:	4603      	mov	r3, r0
 801191c:	b2db      	uxtb	r3, r3
 801191e:	330f      	adds	r3, #15
 8011920:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

        char *Text_Name_IC = malloc(size_Name_IC + 1); // Null 
 8011924:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8011928:	3301      	adds	r3, #1
 801192a:	4618      	mov	r0, r3
 801192c:	f003 f930 	bl	8014b90 <malloc>
 8011930:	4603      	mov	r3, r0
 8011932:	647b      	str	r3, [r7, #68]	@ 0x44
        char *Text_Num_IC = malloc(size_Num_IC + 1);
 8011934:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8011938:	3301      	adds	r3, #1
 801193a:	4618      	mov	r0, r3
 801193c:	f003 f928 	bl	8014b90 <malloc>
 8011940:	4603      	mov	r3, r0
 8011942:	643b      	str	r3, [r7, #64]	@ 0x40

        strcpy(Text_Name_IC,"IC Name: ");
 8011944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011946:	493e      	ldr	r1, [pc, #248]	@ (8011a40 <updata_data_program_from_app+0x590>)
 8011948:	461a      	mov	r2, r3
 801194a:	460b      	mov	r3, r1
 801194c:	cb03      	ldmia	r3!, {r0, r1}
 801194e:	6010      	str	r0, [r2, #0]
 8011950:	6051      	str	r1, [r2, #4]
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	8113      	strh	r3, [r2, #8]
        strcat(Text_Name_IC,(char *)screen_obj->Program_Testx[index_program].Name_IC);
 8011956:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 801195a:	68f9      	ldr	r1, [r7, #12]
 801195c:	4613      	mov	r3, r2
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	4413      	add	r3, r2
 8011962:	011b      	lsls	r3, r3, #4
 8011964:	440b      	add	r3, r1
 8011966:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4619      	mov	r1, r3
 801196e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011970:	f005 f97c 	bl	8016c6c <strcat>
        strcpy(Text_Num_IC,"Number of ICs: ");
 8011974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011976:	4a33      	ldr	r2, [pc, #204]	@ (8011a44 <updata_data_program_from_app+0x594>)
 8011978:	461c      	mov	r4, r3
 801197a:	4615      	mov	r5, r2
 801197c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801197e:	6020      	str	r0, [r4, #0]
 8011980:	6061      	str	r1, [r4, #4]
 8011982:	60a2      	str	r2, [r4, #8]
 8011984:	60e3      	str	r3, [r4, #12]
        strcat(Text_Num_IC,(char *)screen_obj->Program_Testx[index_program].num_IC);
 8011986:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 801198a:	68f9      	ldr	r1, [r7, #12]
 801198c:	4613      	mov	r3, r2
 801198e:	005b      	lsls	r3, r3, #1
 8011990:	4413      	add	r3, r2
 8011992:	011b      	lsls	r3, r3, #4
 8011994:	440b      	add	r3, r1
 8011996:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	4619      	mov	r1, r3
 801199e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80119a0:	f005 f964 	bl	8016c6c <strcat>

        // Show data in screen
        DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Name,Text_Name_IC,size_Name_IC);
 80119a4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80119ac:	f249 5120 	movw	r1, #38176	@ 0x9520
 80119b0:	68f8      	ldr	r0, [r7, #12]
 80119b2:	f001 fc63 	bl	801327c <DWIN_SetText>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Modify_IC_Num,Text_Num_IC,size_Num_IC);
 80119b6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80119be:	f249 5140 	movw	r1, #38208	@ 0x9540
 80119c2:	68f8      	ldr	r0, [r7, #12]
 80119c4:	f001 fc5a 	bl	801327c <DWIN_SetText>
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 80119c8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80119cc:	b29b      	uxth	r3, r3
 80119ce:	461a      	mov	r2, r3
 80119d0:	0092      	lsls	r2, r2, #2
 80119d2:	4413      	add	r3, r2
 80119d4:	00db      	lsls	r3, r3, #3
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	f5a3 43db 	sub.w	r3, r3, #28032	@ 0x6d80
 80119dc:	3b58      	subs	r3, #88	@ 0x58
 80119de:	b29c      	uxth	r4, r3
 80119e0:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80119e4:	68f9      	ldr	r1, [r7, #12]
 80119e6:	4613      	mov	r3, r2
 80119e8:	005b      	lsls	r3, r3, #1
 80119ea:	4413      	add	r3, r2
 80119ec:	011b      	lsls	r3, r3, #4
 80119ee:	440b      	add	r3, r1
 80119f0:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 80119f4:	681d      	ldr	r5, [r3, #0]
            ,strlen(screen_obj->Program_Testx[index_program].Name_Program));
 80119f6:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80119fa:	68f9      	ldr	r1, [r7, #12]
 80119fc:	4613      	mov	r3, r2
 80119fe:	005b      	lsls	r3, r3, #1
 8011a00:	4413      	add	r3, r2
 8011a02:	011b      	lsls	r3, r3, #4
 8011a04:	440b      	add	r3, r1
 8011a06:	f503 7376 	add.w	r3, r3, #984	@ 0x3d8
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7ee fba9 	bl	8000164 <strlen>
 8011a12:	4603      	mov	r3, r0
        DWIN_SetText((Dwin_t *)screen_obj,VP_Program_Name_1 + (0x28 *index_program),screen_obj->Program_Testx[index_program].Name_Program
 8011a14:	b29b      	uxth	r3, r3
 8011a16:	462a      	mov	r2, r5
 8011a18:	4621      	mov	r1, r4
 8011a1a:	68f8      	ldr	r0, [r7, #12]
 8011a1c:	f001 fc2e 	bl	801327c <DWIN_SetText>

        free(Text_Name_IC);
 8011a20:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011a22:	f003 f8bd 	bl	8014ba0 <free>
        free(Text_Num_IC);
 8011a26:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011a28:	f003 f8ba 	bl	8014ba0 <free>
 8011a2c:	46d5      	mov	sp, sl
    }

}
 8011a2e:	3758      	adds	r7, #88	@ 0x58
 8011a30:	46bd      	mov	sp, r7
 8011a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a36:	bf00      	nop
 8011a38:	08019e0c 	.word	0x08019e0c
 8011a3c:	0801acac 	.word	0x0801acac
 8011a40:	08019de0 	.word	0x08019de0
 8011a44:	08019dec 	.word	0x08019dec

08011a48 <can_bus_task_init>:
static app_can can_bus_instance;
OS_task * const AO_task_can_bus = &can_bus_instance.task; 
static managerTX_CAN_t *buff_store[MAX_MANAGER_TX_BUF_SIZE]; /* buffer store the data write */


void can_bus_task_init(CAN_HandleTypeDef *pCan) {
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
    printf("init app can bus\n");
 8011a50:	4810      	ldr	r0, [pc, #64]	@ (8011a94 <can_bus_task_init+0x4c>)
 8011a52:	f004 ff8d 	bl	8016970 <puts>
    can_bus_instance.b_counting = false;
 8011a56:	4b10      	ldr	r3, [pc, #64]	@ (8011a98 <can_bus_task_init+0x50>)
 8011a58:	2200      	movs	r2, #0
 8011a5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    can_bus_instance.head_index = 0;
 8011a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8011a98 <can_bus_task_init+0x50>)
 8011a60:	2200      	movs	r2, #0
 8011a62:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    can_bus_instance.tail_index = 0;
 8011a66:	4b0c      	ldr	r3, [pc, #48]	@ (8011a98 <can_bus_task_init+0x50>)
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    can_bus_instance.nUsed = 0;
 8011a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8011a98 <can_bus_task_init+0x50>)
 8011a70:	2200      	movs	r2, #0
 8011a72:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    can_bus_instance.end = MAX_MANAGER_TX_BUF_SIZE - 1;
 8011a76:	4b08      	ldr	r3, [pc, #32]	@ (8011a98 <can_bus_task_init+0x50>)
 8011a78:	2204      	movs	r2, #4
 8011a7a:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
    can_bus_instance.managerTX_buf = buff_store;
 8011a7e:	4b06      	ldr	r3, [pc, #24]	@ (8011a98 <can_bus_task_init+0x50>)
 8011a80:	4a06      	ldr	r2, [pc, #24]	@ (8011a9c <can_bus_task_init+0x54>)
 8011a82:	671a      	str	r2, [r3, #112]	@ 0x70

    can_bus_ctor(&can_bus_instance);
 8011a84:	4804      	ldr	r0, [pc, #16]	@ (8011a98 <can_bus_task_init+0x50>)
 8011a86:	f000 f80b 	bl	8011aa0 <can_bus_ctor>

    UNUSED(pCan);
}
 8011a8a:	bf00      	nop
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	0801a0d8 	.word	0x0801a0d8
 8011a98:	200012a0 	.word	0x200012a0
 8011a9c:	2000131c 	.word	0x2000131c

08011aa0 <can_bus_ctor>:

void can_bus_ctor(app_can *pAO) {
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_can_bus,(OS_handler)&can_bus_init,(OS_handler)&can_bus_dispatch);
 8011aa8:	4b07      	ldr	r3, [pc, #28]	@ (8011ac8 <can_bus_ctor+0x28>)
 8011aaa:	4a08      	ldr	r2, [pc, #32]	@ (8011acc <can_bus_ctor+0x2c>)
 8011aac:	4908      	ldr	r1, [pc, #32]	@ (8011ad0 <can_bus_ctor+0x30>)
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f002 fd8a 	bl	80145c8 <OS_task_init>

    OS_TimeEvt_init(&can_bus_instance.te_timeout,TX_TIMEOUT,&can_bus_instance.task);
 8011ab4:	4a04      	ldr	r2, [pc, #16]	@ (8011ac8 <can_bus_ctor+0x28>)
 8011ab6:	2105      	movs	r1, #5
 8011ab8:	4806      	ldr	r0, [pc, #24]	@ (8011ad4 <can_bus_ctor+0x34>)
 8011aba:	f002 fe55 	bl	8014768 <OS_TimeEvt_init>
}
 8011abe:	bf00      	nop
 8011ac0:	3708      	adds	r7, #8
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	200012a0 	.word	0x200012a0
 8011acc:	08011af5 	.word	0x08011af5
 8011ad0:	08011ad9 	.word	0x08011ad9
 8011ad4:	200012bc 	.word	0x200012bc

08011ad8 <can_bus_init>:

static void can_bus_init(app_can * const pOS_task, OS_event_t const * const pEvent) {
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Stop(&pOS_task->te_timeout);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	331c      	adds	r3, #28
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f002 fe7b 	bl	80147e2 <OS_TimeEvt_Stop>

    UNUSED(pEvent);
}
 8011aec:	bf00      	nop
 8011aee:	3708      	adds	r7, #8
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <can_bus_dispatch>:

static void can_bus_dispatch(app_can * const pOS_task, OS_event_t const * const pEvent) {
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	881b      	ldrh	r3, [r3, #0]
 8011b02:	2b05      	cmp	r3, #5
 8011b04:	f200 80d6 	bhi.w	8011cb4 <can_bus_dispatch+0x1c0>
 8011b08:	a201      	add	r2, pc, #4	@ (adr r2, 8011b10 <can_bus_dispatch+0x1c>)
 8011b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b0e:	bf00      	nop
 8011b10:	08011b29 	.word	0x08011b29
 8011b14:	08011cb5 	.word	0x08011cb5
 8011b18:	08011b31 	.word	0x08011b31
 8011b1c:	08011c99 	.word	0x08011c99
 8011b20:	08011cb5 	.word	0x08011cb5
 8011b24:	08011bb9 	.word	0x08011bb9
        case SEND_DATA_CAN_BUS : {
            printf("Send data to device test");
 8011b28:	4867      	ldr	r0, [pc, #412]	@ (8011cc8 <can_bus_dispatch+0x1d4>)
 8011b2a:	f004 feb9 	bl	80168a0 <iprintf>
            
        } break;
 8011b2e:	e0c6      	b.n	8011cbe <can_bus_dispatch+0x1ca>
        case RECEIVE_DATA_CAN_BUS : {

        } break;
        case START_TIMEOUT_TX : {
            printf("start time out\n");
 8011b30:	4866      	ldr	r0, [pc, #408]	@ (8011ccc <can_bus_dispatch+0x1d8>)
 8011b32:	f004 ff1d 	bl	8016970 <puts>
            managerTX_CAN_t *check_TX_CAN = (managerTX_CAN_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 8011b36:	6838      	ldr	r0, [r7, #0]
 8011b38:	f002 fff9 	bl	8014b2e <get_data_dynamic_event>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	60bb      	str	r3, [r7, #8]
            pOS_task->managerTX_buf[pOS_task->head_index] = check_TX_CAN;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011b4c:	009b      	lsls	r3, r3, #2
 8011b4e:	4413      	add	r3, r2
 8011b50:	68ba      	ldr	r2, [r7, #8]
 8011b52:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d106      	bne.n	8011b6c <can_bus_dispatch+0x78>
                pOS_task->head_index = pOS_task->end;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f893 2077 	ldrb.w	r2, [r3, #119]	@ 0x77
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8011b6a:	e007      	b.n	8011b7c <can_bus_dispatch+0x88>
            } else {
                --pOS_task->head_index;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011b72:	3b01      	subs	r3, #1
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
            }
            ++pOS_task->nUsed;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8011b82:	3301      	adds	r3, #1
 8011b84:	b2da      	uxtb	r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
            if (pOS_task->b_counting == false) { /* in free, count to check timeout */
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011b92:	f083 0301 	eor.w	r3, r3, #1
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f000 808d 	beq.w	8011cb8 <can_bus_dispatch+0x1c4>
                pOS_task->b_counting = true;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                OS_TimeEvt_Set(&pOS_task->te_timeout,500,0); /* run only 1 time */                
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	331c      	adds	r3, #28
 8011baa:	2200      	movs	r2, #0
 8011bac:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f002 fdff 	bl	80147b4 <OS_TimeEvt_Set>
            }
        } break;
 8011bb6:	e07f      	b.n	8011cb8 <can_bus_dispatch+0x1c4>
        case TX_TIMEOUT : {
            managerTX_CAN_t *check_TX_CAN = pOS_task->managerTX_buf[pOS_task->tail_index];
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011bc2:	009b      	lsls	r3, r3, #2
 8011bc4:	4413      	add	r3, r2
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	60fb      	str	r3, [r7, #12]
            if (check_TX_CAN->TX_Done) { // transmit success 
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	791b      	ldrb	r3, [r3, #4]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d024      	beq.n	8011c1c <can_bus_dispatch+0x128>
                printf("transmit CAN id %x success\n",check_TX_CAN->ID);
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	483d      	ldr	r0, [pc, #244]	@ (8011cd0 <can_bus_dispatch+0x1dc>)
 8011bda:	f004 fe61 	bl	80168a0 <iprintf>
                if (pOS_task->managerTX_buf[pOS_task->tail_index] != NULL) {
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011be8:	009b      	lsls	r3, r3, #2
 8011bea:	4413      	add	r3, r2
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d020      	beq.n	8011c34 <can_bus_dispatch+0x140>
                    free(pOS_task->managerTX_buf[pOS_task->tail_index]);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	4413      	add	r3, r2
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4618      	mov	r0, r3
 8011c04:	f002 ffcc 	bl	8014ba0 <free>
                    pOS_task->managerTX_buf[pOS_task->tail_index] = NULL;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011c12:	009b      	lsls	r3, r3, #2
 8011c14:	4413      	add	r3, r2
 8011c16:	2200      	movs	r2, #0
 8011c18:	601a      	str	r2, [r3, #0]
 8011c1a:	e00b      	b.n	8011c34 <can_bus_dispatch+0x140>
                }
            } else { // transmit error 
                /* go to warning screen */
                printf("transmit CAN id %x failed\n",check_TX_CAN->ID);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	4619      	mov	r1, r3
 8011c22:	482c      	ldr	r0, [pc, #176]	@ (8011cd4 <can_bus_dispatch+0x1e0>)
 8011c24:	f004 fe3c 	bl	80168a0 <iprintf>
                warning_page(&_Screen,check_TX_CAN->ID);
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	482a      	ldr	r0, [pc, #168]	@ (8011cd8 <can_bus_dispatch+0x1e4>)
 8011c30:	f7ff fb92 	bl	8011358 <warning_page>
            }

            if (pOS_task->tail_index == 0) {
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d106      	bne.n	8011c4c <can_bus_dispatch+0x158>
                    pOS_task->tail_index = pOS_task->end;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f893 2077 	ldrb.w	r2, [r3, #119]	@ 0x77
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
 8011c4a:	e007      	b.n	8011c5c <can_bus_dispatch+0x168>
                } else {
                    --pOS_task->tail_index;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011c52:	3b01      	subs	r3, #1
 8011c54:	b2da      	uxtb	r2, r3
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                } 
            --pOS_task->nUsed;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8011c62:	3b01      	subs	r3, #1
 8011c64:	b2da      	uxtb	r2, r3
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
            pOS_task->b_counting = false;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            /* check buff */
            if (pOS_task->nUsed > 0 ) {
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d01e      	beq.n	8011cbc <can_bus_dispatch+0x1c8>
                pOS_task->b_counting = true;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2201      	movs	r2, #1
 8011c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                OS_TimeEvt_Set(&pOS_task->te_timeout,500,0); /* run only 1 time */    
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	331c      	adds	r3, #28
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8011c90:	4618      	mov	r0, r3
 8011c92:	f002 fd8f 	bl	80147b4 <OS_TimeEvt_Set>
            }
        } break;
 8011c96:	e011      	b.n	8011cbc <can_bus_dispatch+0x1c8>
        case TX_SUCCESS : {
            // if (pOS_task->b_counting = true) {
                printf("tx receive slave\n");
 8011c98:	4810      	ldr	r0, [pc, #64]	@ (8011cdc <can_bus_dispatch+0x1e8>)
 8011c9a:	f004 fe69 	bl	8016970 <puts>
                pOS_task->managerTX_buf[pOS_task->tail_index]->TX_Done = true;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4413      	add	r3, r2
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	2201      	movs	r2, #1
 8011cb0:	711a      	strb	r2, [r3, #4]
            // }
        } break; 
 8011cb2:	e004      	b.n	8011cbe <can_bus_dispatch+0x1ca>
        case TX_FAILED : {

        } break;
        default : break;
 8011cb4:	bf00      	nop
 8011cb6:	e002      	b.n	8011cbe <can_bus_dispatch+0x1ca>
        } break;
 8011cb8:	bf00      	nop
 8011cba:	e000      	b.n	8011cbe <can_bus_dispatch+0x1ca>
        } break;
 8011cbc:	bf00      	nop
    }
}
 8011cbe:	bf00      	nop
 8011cc0:	3710      	adds	r7, #16
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	0801a0ec 	.word	0x0801a0ec
 8011ccc:	0801a108 	.word	0x0801a108
 8011cd0:	0801a118 	.word	0x0801a118
 8011cd4:	0801a134 	.word	0x0801a134
 8011cd8:	20000d48 	.word	0x20000d48
 8011cdc:	0801a150 	.word	0x0801a150

08011ce0 <eeprom_task_init>:

AT24Cxx_t eeprom_ob;
static write_param_t *write_buf[MAX_WRITE_EEPROM_BUF]; /* buffer store the data write */

/* I2C port using for eeprom */
void eeprom_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b09c      	sub	sp, #112	@ 0x70
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	70fb      	strb	r3, [r7, #3]
//    eeprom_ob.i2c_port = i2c_port;
//    eeprom_ob.dev_address = dev_address;
	
    /* init eeprom */
    if (AT24Cxx_Init(&eeprom_ob,dev_address,i2c_port) == AT24Cxx_Init_OK) {
 8011cec:	78fb      	ldrb	r3, [r7, #3]
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	4852      	ldr	r0, [pc, #328]	@ (8011e3c <eeprom_task_init+0x15c>)
 8011cf4:	f000 fff0 	bl	8012cd8 <AT24Cxx_Init>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d103      	bne.n	8011d06 <eeprom_task_init+0x26>
        /* init success */
        printf("Init eeprom success!!\n");
 8011cfe:	4850      	ldr	r0, [pc, #320]	@ (8011e40 <eeprom_task_init+0x160>)
 8011d00:	f004 fe36 	bl	8016970 <puts>
 8011d04:	e002      	b.n	8011d0c <eeprom_task_init+0x2c>
    } else {
        printf("Init eeprom fail!!\n");
 8011d06:	484f      	ldr	r0, [pc, #316]	@ (8011e44 <eeprom_task_init+0x164>)
 8011d08:	f004 fe32 	bl	8016970 <puts>
    }

      uint8_t data_check = 0;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    // AT24Cxx_read_buffer(&eeprom_ob,MEM_ADDR_CHECK_UPDATA_DATA_TEST,&data_check,1);
    // if (data_check == 0) {
    // } 
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_MEM_ADDR_DIREC_USED,(uint8_t *)&data_check,sizeof(data_check));
 8011d12:	f107 026f 	add.w	r2, r7, #111	@ 0x6f
 8011d16:	2301      	movs	r3, #1
 8011d18:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8011d1c:	4847      	ldr	r0, [pc, #284]	@ (8011e3c <eeprom_task_init+0x15c>)
 8011d1e:	f001 f825 	bl	8012d6c <AT24Cxx_write_buffer_bloking>
    HAL_Delay(10);
 8011d22:	200a      	movs	r0, #10
 8011d24:	f7f0 fc8c 	bl	8002640 <HAL_Delay>

    write_data_test_ic("744051",data_744051,sizeof(data_744051));
 8011d28:	22c3      	movs	r2, #195	@ 0xc3
 8011d2a:	4947      	ldr	r1, [pc, #284]	@ (8011e48 <eeprom_task_init+0x168>)
 8011d2c:	4847      	ldr	r0, [pc, #284]	@ (8011e4c <eeprom_task_init+0x16c>)
 8011d2e:	f000 faf1 	bl	8012314 <write_data_test_ic>
    write_data_test_ic("740000",data_7400,sizeof(data_7400));
 8011d32:	226f      	movs	r2, #111	@ 0x6f
 8011d34:	4946      	ldr	r1, [pc, #280]	@ (8011e50 <eeprom_task_init+0x170>)
 8011d36:	4847      	ldr	r0, [pc, #284]	@ (8011e54 <eeprom_task_init+0x174>)
 8011d38:	f000 faec 	bl	8012314 <write_data_test_ic>
    write_data_test_ic("74139",data_74139,sizeof(data_74139));
 8011d3c:	22ab      	movs	r2, #171	@ 0xab
 8011d3e:	4946      	ldr	r1, [pc, #280]	@ (8011e58 <eeprom_task_init+0x178>)
 8011d40:	4846      	ldr	r0, [pc, #280]	@ (8011e5c <eeprom_task_init+0x17c>)
 8011d42:	f000 fae7 	bl	8012314 <write_data_test_ic>
    write_data_test_ic("74164",data_74164,sizeof(data_74164));
 8011d46:	22ad      	movs	r2, #173	@ 0xad
 8011d48:	4945      	ldr	r1, [pc, #276]	@ (8011e60 <eeprom_task_init+0x180>)
 8011d4a:	4846      	ldr	r0, [pc, #280]	@ (8011e64 <eeprom_task_init+0x184>)
 8011d4c:	f000 fae2 	bl	8012314 <write_data_test_ic>
    write_data_test_ic("7408",data_7408,sizeof(data_7408));
 8011d50:	226f      	movs	r2, #111	@ 0x6f
 8011d52:	4945      	ldr	r1, [pc, #276]	@ (8011e68 <eeprom_task_init+0x188>)
 8011d54:	4845      	ldr	r0, [pc, #276]	@ (8011e6c <eeprom_task_init+0x18c>)
 8011d56:	f000 fadd 	bl	8012314 <write_data_test_ic>
    write_data_test_ic("74157",data_74157,sizeof(data_74157));
 8011d5a:	22ea      	movs	r2, #234	@ 0xea
 8011d5c:	4944      	ldr	r1, [pc, #272]	@ (8011e70 <eeprom_task_init+0x190>)
 8011d5e:	4845      	ldr	r0, [pc, #276]	@ (8011e74 <eeprom_task_init+0x194>)
 8011d60:	f000 fad8 	bl	8012314 <write_data_test_ic>
    write_data_test_ic("40175",data_40175,sizeof(data_40175));
 8011d64:	2282      	movs	r2, #130	@ 0x82
 8011d66:	4944      	ldr	r1, [pc, #272]	@ (8011e78 <eeprom_task_init+0x198>)
 8011d68:	4844      	ldr	r0, [pc, #272]	@ (8011e7c <eeprom_task_init+0x19c>)
 8011d6a:	f000 fad3 	bl	8012314 <write_data_test_ic>
    write_data_test_ic("40174",data_40174,sizeof(data_40174));
 8011d6e:	227d      	movs	r2, #125	@ 0x7d
 8011d70:	4943      	ldr	r1, [pc, #268]	@ (8011e80 <eeprom_task_init+0x1a0>)
 8011d72:	4844      	ldr	r0, [pc, #272]	@ (8011e84 <eeprom_task_init+0x1a4>)
 8011d74:	f000 face 	bl	8012314 <write_data_test_ic>
    write_data_test_ic("4027",data_4027,sizeof(data_4027));
 8011d78:	2296      	movs	r2, #150	@ 0x96
 8011d7a:	4943      	ldr	r1, [pc, #268]	@ (8011e88 <eeprom_task_init+0x1a8>)
 8011d7c:	4843      	ldr	r0, [pc, #268]	@ (8011e8c <eeprom_task_init+0x1ac>)
 8011d7e:	f000 fac9 	bl	8012314 <write_data_test_ic>
    write_data_test_ic("74165",data_74165,sizeof(data_74165));
 8011d82:	22a2      	movs	r2, #162	@ 0xa2
 8011d84:	4942      	ldr	r1, [pc, #264]	@ (8011e90 <eeprom_task_init+0x1b0>)
 8011d86:	4843      	ldr	r0, [pc, #268]	@ (8011e94 <eeprom_task_init+0x1b4>)
 8011d88:	f000 fac4 	bl	8012314 <write_data_test_ic>


    uint8_t num_direc;
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 8011d8c:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 8011d90:	2301      	movs	r3, #1
 8011d92:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8011d96:	4829      	ldr	r0, [pc, #164]	@ (8011e3c <eeprom_task_init+0x15c>)
 8011d98:	f001 f8d3 	bl	8012f42 <AT24Cxx_read_buffer>
    // AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)clear_buf,TOTAL_ALL_PROGRAM_TEST_LEN);
    // AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),(uint8_t *)data_program1,strlen(data_program1));
    // AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(1),(uint8_t *)data_program2,strlen(data_program2));
    // AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(2),(uint8_t *)data_program3,strlen(data_program3));
    // AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(3),(uint8_t *)data_program4,strlen(data_program4));
    uint8_t clear_buf[60] = {0};
 8011d9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011da0:	223c      	movs	r2, #60	@ 0x3c
 8011da2:	2100      	movs	r1, #0
 8011da4:	4618      	mov	r0, r3
 8011da6:	f004 ff59 	bl	8016c5c <memset>
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_WIFI_INFO,clear_buf,DATA_LEN_WIFI_INFO);
 8011daa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011dae:	233c      	movs	r3, #60	@ 0x3c
 8011db0:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8011db4:	4821      	ldr	r0, [pc, #132]	@ (8011e3c <eeprom_task_init+0x15c>)
 8011db6:	f000 ffd9 	bl	8012d6c <AT24Cxx_write_buffer_bloking>
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_ADDR_WIFI_INFO,wifi_info,strlen(wifi_info));
 8011dba:	2310      	movs	r3, #16
 8011dbc:	4a36      	ldr	r2, [pc, #216]	@ (8011e98 <eeprom_task_init+0x1b8>)
 8011dbe:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8011dc2:	481e      	ldr	r0, [pc, #120]	@ (8011e3c <eeprom_task_init+0x15c>)
 8011dc4:	f000 ffd2 	bl	8012d6c <AT24Cxx_write_buffer_bloking>
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),&buffer,strlen(data_program1));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(1),&buffer,strlen(data_program2));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(2),&buffer,strlen(data_program3));
//    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(3),&buffer,strlen(data_program4));

    char text_program_1[] = "0";
 8011dc8:	2330      	movs	r3, #48	@ 0x30
 8011dca:	81bb      	strh	r3, [r7, #12]
    AT24Cxx_write_buffer(&eeprom_ob,0x02,(uint8_t *)text_program_1,strlen(text_program_1));
 8011dcc:	f107 030c 	add.w	r3, r7, #12
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7ee f9c7 	bl	8000164 <strlen>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	f107 020c 	add.w	r2, r7, #12
 8011dde:	2102      	movs	r1, #2
 8011de0:	4816      	ldr	r0, [pc, #88]	@ (8011e3c <eeprom_task_init+0x15c>)
 8011de2:	f000 ff9b 	bl	8012d1c <AT24Cxx_write_buffer>
    /* check write data test */


    // AT24Cxx_write_buffer(&eeprom_ob,MEM_ADDR_CHECK_UPDATA_DATA_TEST,&data_check,1);

    eeprom_instance.b_is_writing = false;
 8011de6:	4b2d      	ldr	r3, [pc, #180]	@ (8011e9c <eeprom_task_init+0x1bc>)
 8011de8:	2200      	movs	r2, #0
 8011dea:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    eeprom_instance.data_eeprom.mem_addr = 0x00;
 8011dee:	4b2b      	ldr	r3, [pc, #172]	@ (8011e9c <eeprom_task_init+0x1bc>)
 8011df0:	2200      	movs	r2, #0
 8011df2:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
    eeprom_instance.data_eeprom.data = (uint8_t *)0;
 8011df6:	4b29      	ldr	r3, [pc, #164]	@ (8011e9c <eeprom_task_init+0x1bc>)
 8011df8:	2200      	movs	r2, #0
 8011dfa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = 0;
 8011dfe:	4b27      	ldr	r3, [pc, #156]	@ (8011e9c <eeprom_task_init+0x1bc>)
 8011e00:	2200      	movs	r2, #0
 8011e02:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc

    eeprom_instance.write_params_buf = write_buf;
 8011e06:	4b25      	ldr	r3, [pc, #148]	@ (8011e9c <eeprom_task_init+0x1bc>)
 8011e08:	4a25      	ldr	r2, [pc, #148]	@ (8011ea0 <eeprom_task_init+0x1c0>)
 8011e0a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    eeprom_instance.head_index = 0;
 8011e0e:	4b23      	ldr	r3, [pc, #140]	@ (8011e9c <eeprom_task_init+0x1bc>)
 8011e10:	2200      	movs	r2, #0
 8011e12:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    eeprom_instance.tail_index = 0;
 8011e16:	4b21      	ldr	r3, [pc, #132]	@ (8011e9c <eeprom_task_init+0x1bc>)
 8011e18:	2200      	movs	r2, #0
 8011e1a:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    eeprom_instance.end = MAX_WRITE_EEPROM_BUF - 1;
 8011e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8011e9c <eeprom_task_init+0x1bc>)
 8011e20:	2209      	movs	r2, #9
 8011e22:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
    eeprom_instance.nUsed = 0;
 8011e26:	4b1d      	ldr	r3, [pc, #116]	@ (8011e9c <eeprom_task_init+0x1bc>)
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6

    eeprom_ctor(&eeprom_instance);
 8011e2e:	481b      	ldr	r0, [pc, #108]	@ (8011e9c <eeprom_task_init+0x1bc>)
 8011e30:	f000 f838 	bl	8011ea4 <eeprom_ctor>
//    printf("Setting info eeprom success\n");
}
 8011e34:	bf00      	nop
 8011e36:	3770      	adds	r7, #112	@ 0x70
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	2000140c 	.word	0x2000140c
 8011e40:	0801a164 	.word	0x0801a164
 8011e44:	0801a17c 	.word	0x0801a17c
 8011e48:	0801a680 	.word	0x0801a680
 8011e4c:	0801a190 	.word	0x0801a190
 8011e50:	0801a744 	.word	0x0801a744
 8011e54:	0801a198 	.word	0x0801a198
 8011e58:	0801a7b4 	.word	0x0801a7b4
 8011e5c:	0801a1a0 	.word	0x0801a1a0
 8011e60:	0801ab58 	.word	0x0801ab58
 8011e64:	0801a1a8 	.word	0x0801a1a8
 8011e68:	0801a860 	.word	0x0801a860
 8011e6c:	0801a1b0 	.word	0x0801a1b0
 8011e70:	0801a8d0 	.word	0x0801a8d0
 8011e74:	0801a1b8 	.word	0x0801a1b8
 8011e78:	0801a9bc 	.word	0x0801a9bc
 8011e7c:	0801a1c0 	.word	0x0801a1c0
 8011e80:	0801aa40 	.word	0x0801aa40
 8011e84:	0801a1c8 	.word	0x0801a1c8
 8011e88:	0801aac0 	.word	0x0801aac0
 8011e8c:	0801a1d0 	.word	0x0801a1d0
 8011e90:	0801ac08 	.word	0x0801ac08
 8011e94:	0801a1d8 	.word	0x0801a1d8
 8011e98:	0801a66c 	.word	0x0801a66c
 8011e9c:	20001330 	.word	0x20001330
 8011ea0:	20001414 	.word	0x20001414

08011ea4 <eeprom_ctor>:

void eeprom_ctor(app_eeprom *pAO) {
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
    /* init task */
    OS_task_init(AO_task_eeprom,(OS_handler)&eeprom_init,(OS_handler)&eeprom_dispatch);
 8011eac:	4b09      	ldr	r3, [pc, #36]	@ (8011ed4 <eeprom_ctor+0x30>)
 8011eae:	4a0a      	ldr	r2, [pc, #40]	@ (8011ed8 <eeprom_ctor+0x34>)
 8011eb0:	490a      	ldr	r1, [pc, #40]	@ (8011edc <eeprom_ctor+0x38>)
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f002 fb88 	bl	80145c8 <OS_task_init>

    /* init time */
    OS_TimeEvt_init(&eeprom_instance.time_wait,FINISH_WRITE,&eeprom_instance.task);
 8011eb8:	4a06      	ldr	r2, [pc, #24]	@ (8011ed4 <eeprom_ctor+0x30>)
 8011eba:	2103      	movs	r1, #3
 8011ebc:	4808      	ldr	r0, [pc, #32]	@ (8011ee0 <eeprom_ctor+0x3c>)
 8011ebe:	f002 fc53 	bl	8014768 <OS_TimeEvt_init>
    OS_TimeEvt_init(&eeprom_instance.time_check,CHECK_WRITE_BUF,&eeprom_instance.task);
 8011ec2:	4a04      	ldr	r2, [pc, #16]	@ (8011ed4 <eeprom_ctor+0x30>)
 8011ec4:	2101      	movs	r1, #1
 8011ec6:	4807      	ldr	r0, [pc, #28]	@ (8011ee4 <eeprom_ctor+0x40>)
 8011ec8:	f002 fc4e 	bl	8014768 <OS_TimeEvt_init>
}
 8011ecc:	bf00      	nop
 8011ece:	3708      	adds	r7, #8
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	20001330 	.word	0x20001330
 8011ed8:	08011f89 	.word	0x08011f89
 8011edc:	08011ee9 	.word	0x08011ee9
 8011ee0:	2000134c 	.word	0x2000134c
 8011ee4:	200013a0 	.word	0x200013a0

08011ee8 <eeprom_init>:

static void eeprom_init(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b084      	sub	sp, #16
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
    /* init time */
    OS_TimeEvt_Stop(&eeprom_instance.time_check); /* don't using time when init */
 8011ef2:	4821      	ldr	r0, [pc, #132]	@ (8011f78 <eeprom_init+0x90>)
 8011ef4:	f002 fc75 	bl	80147e2 <OS_TimeEvt_Stop>
    OS_TimeEvt_Stop(&eeprom_instance.time_wait); 
 8011ef8:	4820      	ldr	r0, [pc, #128]	@ (8011f7c <eeprom_init+0x94>)
 8011efa:	f002 fc72 	bl	80147e2 <OS_TimeEvt_Stop>

    /* read data program run */
    eeprom_instance.data_eeprom.data = malloc(TOTAL_ALL_PROGRAM_TEST_LEN);
 8011efe:	20a8      	movs	r0, #168	@ 0xa8
 8011f00:	f002 fe46 	bl	8014b90 <malloc>
 8011f04:	4603      	mov	r3, r0
 8011f06:	461a      	mov	r2, r3
 8011f08:	4b1d      	ldr	r3, [pc, #116]	@ (8011f80 <eeprom_init+0x98>)
 8011f0a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    eeprom_instance.data_eeprom.data_len = TOTAL_ALL_PROGRAM_TEST_LEN;
 8011f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8011f80 <eeprom_init+0x98>)
 8011f10:	22a8      	movs	r2, #168	@ 0xa8
 8011f12:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    AT24Cxx_read_buffer(&eeprom_ob,START_ADDR_PROGRAM_TEST_X(0),
 8011f16:	4b1a      	ldr	r3, [pc, #104]	@ (8011f80 <eeprom_init+0x98>)
 8011f18:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8011f1c:	23a8      	movs	r3, #168	@ 0xa8
 8011f1e:	2143      	movs	r1, #67	@ 0x43
 8011f20:	4818      	ldr	r0, [pc, #96]	@ (8011f84 <eeprom_init+0x9c>)
 8011f22:	f001 f80e 	bl	8012f42 <AT24Cxx_read_buffer>
                        eeprom_instance.data_eeprom.data,TOTAL_ALL_PROGRAM_TEST_LEN);

    data_eeprom_t *data_eeprom_read = (data_eeprom_t *)malloc(sizeof(data_eeprom_t));
 8011f26:	200c      	movs	r0, #12
 8011f28:	f002 fe32 	bl	8014b90 <malloc>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	60fb      	str	r3, [r7, #12]
    data_eeprom_read->data_len = eeprom_instance.data_eeprom.data_len;
 8011f30:	4b13      	ldr	r3, [pc, #76]	@ (8011f80 <eeprom_init+0x98>)
 8011f32:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	811a      	strh	r2, [r3, #8]
    data_eeprom_read->data = (uint8_t *)malloc(eeprom_instance.data_eeprom.data_len);
 8011f3a:	4b11      	ldr	r3, [pc, #68]	@ (8011f80 <eeprom_init+0x98>)
 8011f3c:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8011f40:	4618      	mov	r0, r3
 8011f42:	f002 fe25 	bl	8014b90 <malloc>
 8011f46:	4603      	mov	r3, r0
 8011f48:	461a      	mov	r2, r3
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	605a      	str	r2, [r3, #4]
    memcpy(data_eeprom_read->data,eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	4a0b      	ldr	r2, [pc, #44]	@ (8011f80 <eeprom_init+0x98>)
 8011f54:	f8d2 10c8 	ldr.w	r1, [r2, #200]	@ 0xc8
 8011f58:	4a09      	ldr	r2, [pc, #36]	@ (8011f80 <eeprom_init+0x98>)
 8011f5a:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	@ 0xcc
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f004 ffc5 	bl	8016eee <memcpy>
    


    // OS_task_post_event(AO_BlinkyTest,READ_ALL_PROGRAM_TEST,(uint8_t *)&data_eeprom_read,sizeof(data_eeprom_t *));

    free(eeprom_instance.data_eeprom.data);
 8011f64:	4b06      	ldr	r3, [pc, #24]	@ (8011f80 <eeprom_init+0x98>)
 8011f66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f002 fe18 	bl	8014ba0 <free>

}
 8011f70:	bf00      	nop
 8011f72:	3710      	adds	r7, #16
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}
 8011f78:	200013a0 	.word	0x200013a0
 8011f7c:	2000134c 	.word	0x2000134c
 8011f80:	20001330 	.word	0x20001330
 8011f84:	2000140c 	.word	0x2000140c

08011f88 <eeprom_dispatch>:

void eeprom_dispatch(app_eeprom * const pOS_task, OS_event_t const * const pEvent) {
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b086      	sub	sp, #24
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	881b      	ldrh	r3, [r3, #0]
 8011f96:	2b05      	cmp	r3, #5
 8011f98:	f200 816e 	bhi.w	8012278 <eeprom_dispatch+0x2f0>
 8011f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8011fa4 <eeprom_dispatch+0x1c>)
 8011f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fa2:	bf00      	nop
 8011fa4:	080120fb 	.word	0x080120fb
 8011fa8:	08012279 	.word	0x08012279
 8011fac:	08012249 	.word	0x08012249
 8011fb0:	0801214b 	.word	0x0801214b
 8011fb4:	08011fbd 	.word	0x08011fbd
 8011fb8:	08012007 	.word	0x08012007
        case READ_EEPROM : {
            data_eeprom_t *data_read = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 8011fbc:	6838      	ldr	r0, [r7, #0]
 8011fbe:	f002 fdb6 	bl	8014b2e <get_data_dynamic_event>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	60fb      	str	r3, [r7, #12]
            eeprom_instance.data_eeprom.data = malloc(data_read->data_len);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	891b      	ldrh	r3, [r3, #8]
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f002 fddf 	bl	8014b90 <malloc>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	4bad      	ldr	r3, [pc, #692]	@ (801228c <eeprom_dispatch+0x304>)
 8011fd8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            AT24Cxx_read_buffer(&eeprom_ob,data_read->mem_addr,
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	8819      	ldrh	r1, [r3, #0]
 8011fe0:	4baa      	ldr	r3, [pc, #680]	@ (801228c <eeprom_dispatch+0x304>)
 8011fe2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8011fe6:	4ba9      	ldr	r3, [pc, #676]	@ (801228c <eeprom_dispatch+0x304>)
 8011fe8:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8011fec:	48a8      	ldr	r0, [pc, #672]	@ (8012290 <eeprom_dispatch+0x308>)
 8011fee:	f000 ffa8 	bl	8012f42 <AT24Cxx_read_buffer>
                                eeprom_instance.data_eeprom.data,eeprom_instance.data_eeprom.data_len);
            // printf("Data read eeprom : %s\n",eeprom_instance.data_eeprom.data);
            free(eeprom_instance.data_eeprom.data);
 8011ff2:	4ba6      	ldr	r3, [pc, #664]	@ (801228c <eeprom_dispatch+0x304>)
 8011ff4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f002 fdd1 	bl	8014ba0 <free>
            free(data_read);
 8011ffe:	68f8      	ldr	r0, [r7, #12]
 8012000:	f002 fdce 	bl	8014ba0 <free>
            
        } break;
 8012004:	e13d      	b.n	8012282 <eeprom_dispatch+0x2fa>
        case WRITE_EEPROM : {
            printf("Write eeprom\n");
 8012006:	48a3      	ldr	r0, [pc, #652]	@ (8012294 <eeprom_dispatch+0x30c>)
 8012008:	f004 fcb2 	bl	8016970 <puts>
            data_eeprom_t *data_receive = (data_eeprom_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 801200c:	6838      	ldr	r0, [r7, #0]
 801200e:	f002 fd8e 	bl	8014b2e <get_data_dynamic_event>
 8012012:	4603      	mov	r3, r0
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	617b      	str	r3, [r7, #20]
            write_param_t *e_write = (write_param_t *)malloc(sizeof(write_param_t));
 8012018:	2010      	movs	r0, #16
 801201a:	f002 fdb9 	bl	8014b90 <malloc>
 801201e:	4603      	mov	r3, r0
 8012020:	613b      	str	r3, [r7, #16]
            // e_write->byte_first_page = AT24C256_PG_SIZE - data_receive->mem_addr % AT24C256_PG_SIZE;
            // e_write->page_write = (data_receive->data_len - e_write->byte_first_page) / AT24C256_PG_SIZE;
            // e_write->byte_remain = (data_receive->data_len - e_write->byte_first_page) % AT24C256_PG_SIZE;
            e_write->data_written = 0;
 8012022:	693b      	ldr	r3, [r7, #16]
 8012024:	2200      	movs	r2, #0
 8012026:	815a      	strh	r2, [r3, #10]
            e_write->data_lastlen = 0;
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	2200      	movs	r2, #0
 801202c:	819a      	strh	r2, [r3, #12]
            e_write->mem_addr = data_receive->mem_addr;
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	881a      	ldrh	r2, [r3, #0]
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	801a      	strh	r2, [r3, #0]
            e_write->data_len = data_receive->data_len;
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	891a      	ldrh	r2, [r3, #8]
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	811a      	strh	r2, [r3, #8]
            e_write->data = (uint8_t *)malloc(data_receive->data_len);
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	891b      	ldrh	r3, [r3, #8]
 8012042:	4618      	mov	r0, r3
 8012044:	f002 fda4 	bl	8014b90 <malloc>
 8012048:	4603      	mov	r3, r0
 801204a:	461a      	mov	r2, r3
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	605a      	str	r2, [r3, #4]
            memcpy(e_write->data,data_receive->data,data_receive->data_len);
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	6858      	ldr	r0, [r3, #4]
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	6859      	ldr	r1, [r3, #4]
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	891b      	ldrh	r3, [r3, #8]
 801205c:	461a      	mov	r2, r3
 801205e:	f004 ff46 	bl	8016eee <memcpy>

            pOS_task->write_params_buf[pOS_task->head_index] = e_write; /* insert to buffer */
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 801206e:	009b      	lsls	r3, r3, #2
 8012070:	4413      	add	r3, r2
 8012072:	693a      	ldr	r2, [r7, #16]
 8012074:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 801207c:	2b00      	cmp	r3, #0
 801207e:	d106      	bne.n	801208e <eeprom_dispatch+0x106>
                pOS_task->head_index = pOS_task->end;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
 801208c:	e007      	b.n	801209e <eeprom_dispatch+0x116>
            } else {
                --pOS_task->head_index;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8012094:	3b01      	subs	r3, #1
 8012096:	b2da      	uxtb	r2, r3
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
            }
            ++pOS_task->nUsed;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 80120a4:	3301      	adds	r3, #1
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
            
            if (data_receive->data != NULL) free(data_receive->data);
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d004      	beq.n	80120c0 <eeprom_dispatch+0x138>
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	4618      	mov	r0, r3
 80120bc:	f002 fd70 	bl	8014ba0 <free>
            free(data_receive);
 80120c0:	6978      	ldr	r0, [r7, #20]
 80120c2:	f002 fd6d 	bl	8014ba0 <free>

            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 80120cc:	f083 0301 	eor.w	r3, r3, #1
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	f000 80d2 	beq.w	801227c <eeprom_dispatch+0x2f4>
                pOS_task->b_is_writing = true;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2201      	movs	r2, #1
 80120dc:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	4413      	add	r3, r2
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 f8d0 	bl	8012298 <write_buffer_with_task>
            }
        } break;
 80120f8:	e0c0      	b.n	801227c <eeprom_dispatch+0x2f4>
        case WAIT_WRITE_TIMEOUT : {
            /* wait ~10ms for eeprom write complete */
            pOS_task->write_params_buf[pOS_task->tail_index]->data_written += pOS_task->write_params_buf[pOS_task->tail_index]->data_lastlen;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	4413      	add	r3, r2
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	8959      	ldrh	r1, [r3, #10]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	4413      	add	r3, r2
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	899a      	ldrh	r2, [r3, #12]
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	4403      	add	r3, r0
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	440a      	add	r2, r1
 8012136:	b292      	uxth	r2, r2
 8012138:	815a      	strh	r2, [r3, #10]

            OS_TimeEvt_Set(&pOS_task->time_wait,11,0); /* run only 1 time */
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	331c      	adds	r3, #28
 801213e:	2200      	movs	r2, #0
 8012140:	210b      	movs	r1, #11
 8012142:	4618      	mov	r0, r3
 8012144:	f002 fb36 	bl	80147b4 <OS_TimeEvt_Set>
        } break;
 8012148:	e09b      	b.n	8012282 <eeprom_dispatch+0x2fa>
        case FINISH_WRITE : {
            if (pOS_task->write_params_buf[pOS_task->tail_index]->data_written < pOS_task->write_params_buf[pOS_task->tail_index]->data_len) {
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8012156:	009b      	lsls	r3, r3, #2
 8012158:	4413      	add	r3, r2
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	895a      	ldrh	r2, [r3, #10]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	440b      	add	r3, r1
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	891b      	ldrh	r3, [r3, #8]
 8012172:	429a      	cmp	r2, r3
 8012174:	d20c      	bcs.n	8012190 <eeprom_dispatch+0x208>
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8012182:	009b      	lsls	r3, r3, #2
 8012184:	4413      	add	r3, r2
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	4618      	mov	r0, r3
 801218a:	f000 f885 	bl	8012298 <write_buffer_with_task>
                /* Check buf */
                if (pOS_task->nUsed > 0) {
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
                }
            }
        } break; 
 801218e:	e077      	b.n	8012280 <eeprom_dispatch+0x2f8>
                if (pOS_task->write_params_buf[pOS_task->tail_index]->data != NULL) {
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 801219c:	009b      	lsls	r3, r3, #2
 801219e:	4413      	add	r3, r2
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d00c      	beq.n	80121c2 <eeprom_dispatch+0x23a>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]->data);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80121b4:	009b      	lsls	r3, r3, #2
 80121b6:	4413      	add	r3, r2
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	4618      	mov	r0, r3
 80121be:	f002 fcef 	bl	8014ba0 <free>
                if (pOS_task->write_params_buf[pOS_task->tail_index] != NULL) {
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80121ce:	009b      	lsls	r3, r3, #2
 80121d0:	4413      	add	r3, r2
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00b      	beq.n	80121f0 <eeprom_dispatch+0x268>
                    free(pOS_task->write_params_buf[pOS_task->tail_index]);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	4413      	add	r3, r2
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	4618      	mov	r0, r3
 80121ec:	f002 fcd8 	bl	8014ba0 <free>
                if (pOS_task->tail_index == 0) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d106      	bne.n	8012208 <eeprom_dispatch+0x280>
                    pOS_task->tail_index = pOS_task->end;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f893 20d7 	ldrb.w	r2, [r3, #215]	@ 0xd7
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
 8012206:	e007      	b.n	8012218 <eeprom_dispatch+0x290>
                    --pOS_task->tail_index;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 801220e:	3b01      	subs	r3, #1
 8012210:	b2da      	uxtb	r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
                --pOS_task->nUsed;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 801221e:	3b01      	subs	r3, #1
 8012220:	b2da      	uxtb	r2, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
                pOS_task->b_is_writing = false;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2200      	movs	r2, #0
 801222c:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                if (pOS_task->nUsed > 0) {
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 8012236:	2b00      	cmp	r3, #0
 8012238:	d022      	beq.n	8012280 <eeprom_dispatch+0x2f8>
                    OS_task_post_event(AO_task_eeprom,WRITE_EEPROM_IN_BUF,(uint8_t *)0,0);
 801223a:	4814      	ldr	r0, [pc, #80]	@ (801228c <eeprom_dispatch+0x304>)
 801223c:	2300      	movs	r3, #0
 801223e:	2200      	movs	r2, #0
 8012240:	2102      	movs	r1, #2
 8012242:	f002 fa73 	bl	801472c <OS_task_post_event>
        } break; 
 8012246:	e01b      	b.n	8012280 <eeprom_dispatch+0x2f8>
        case WRITE_EEPROM_IN_BUF : {
            if (pOS_task->b_is_writing == false) { /* if the eeprom is free, writing doesn't need to wait */
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 801224e:	f083 0301 	eor.w	r3, r3, #1
 8012252:	b2db      	uxtb	r3, r3
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00f      	beq.n	8012278 <eeprom_dispatch+0x2f0>
                pOS_task->b_is_writing = true;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2201      	movs	r2, #1
 801225c:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                write_buffer_with_task(pOS_task->write_params_buf[pOS_task->tail_index]);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 801226c:	009b      	lsls	r3, r3, #2
 801226e:	4413      	add	r3, r2
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	4618      	mov	r0, r3
 8012274:	f000 f810 	bl	8012298 <write_buffer_with_task>
            }
        }
        default : break;
 8012278:	bf00      	nop
 801227a:	e002      	b.n	8012282 <eeprom_dispatch+0x2fa>
        } break;
 801227c:	bf00      	nop
 801227e:	e000      	b.n	8012282 <eeprom_dispatch+0x2fa>
        } break; 
 8012280:	bf00      	nop
    }
}
 8012282:	bf00      	nop
 8012284:	3718      	adds	r7, #24
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	20001330 	.word	0x20001330
 8012290:	2000140c 	.word	0x2000140c
 8012294:	0801a1e0 	.word	0x0801a1e0

08012298 <write_buffer_with_task>:

static void write_buffer_with_task(write_param_t *pWrite_params) {
 8012298:	b580      	push	{r7, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
    uint16_t byte_remain = pWrite_params->data_len - pWrite_params->data_written;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	891a      	ldrh	r2, [r3, #8]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	895b      	ldrh	r3, [r3, #10]
 80122a8:	1ad3      	subs	r3, r2, r3
 80122aa:	81bb      	strh	r3, [r7, #12]
    uint8_t written_in_page = (pWrite_params->mem_addr + pWrite_params->data_written) % AT24C256_PG_SIZE;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	881b      	ldrh	r3, [r3, #0]
 80122b0:	b2da      	uxtb	r2, r3
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	895b      	ldrh	r3, [r3, #10]
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	4413      	add	r3, r2
 80122ba:	b2db      	uxtb	r3, r3
 80122bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80122c0:	72fb      	strb	r3, [r7, #11]
    uint8_t byte_in_page = AT24C256_PG_SIZE - written_in_page;
 80122c2:	7afb      	ldrb	r3, [r7, #11]
 80122c4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80122c8:	72bb      	strb	r3, [r7, #10]
    uint16_t addr_write = pWrite_params->mem_addr + pWrite_params->data_written;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	881a      	ldrh	r2, [r3, #0]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	895b      	ldrh	r3, [r3, #10]
 80122d2:	4413      	add	r3, r2
 80122d4:	813b      	strh	r3, [r7, #8]
    uint8_t len_write;
    if (byte_remain < byte_in_page) {
 80122d6:	7abb      	ldrb	r3, [r7, #10]
 80122d8:	b29b      	uxth	r3, r3
 80122da:	89ba      	ldrh	r2, [r7, #12]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d202      	bcs.n	80122e6 <write_buffer_with_task+0x4e>
        len_write = byte_remain;
 80122e0:	89bb      	ldrh	r3, [r7, #12]
 80122e2:	73fb      	strb	r3, [r7, #15]
 80122e4:	e001      	b.n	80122ea <write_buffer_with_task+0x52>
    } else {
        len_write = byte_in_page;
 80122e6:	7abb      	ldrb	r3, [r7, #10]
 80122e8:	73fb      	strb	r3, [r7, #15]
    }
    pWrite_params->data_lastlen = len_write;
 80122ea:	7bfb      	ldrb	r3, [r7, #15]
 80122ec:	b29a      	uxth	r2, r3
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	819a      	strh	r2, [r3, #12]
    AT24Cxx_write_buffer(&eeprom_ob,addr_write,pWrite_params->data + pWrite_params->data_written,len_write);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	8952      	ldrh	r2, [r2, #10]
 80122fa:	441a      	add	r2, r3
 80122fc:	7bfb      	ldrb	r3, [r7, #15]
 80122fe:	b29b      	uxth	r3, r3
 8012300:	8939      	ldrh	r1, [r7, #8]
 8012302:	4803      	ldr	r0, [pc, #12]	@ (8012310 <write_buffer_with_task+0x78>)
 8012304:	f000 fd0a 	bl	8012d1c <AT24Cxx_write_buffer>
}
 8012308:	bf00      	nop
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	2000140c 	.word	0x2000140c

08012314 <write_data_test_ic>:

void write_data_test_ic(const char *icName, const char *Data, uint16_t len) {
 8012314:	b580      	push	{r7, lr}
 8012316:	b08c      	sub	sp, #48	@ 0x30
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	4613      	mov	r3, r2
 8012320:	80fb      	strh	r3, [r7, #6]
    uint8_t num_direc = 0;
 8012322:	2300      	movs	r3, #0
 8012324:	77fb      	strb	r3, [r7, #31]
    uint16_t dir_addr, data_addr;
    uint16_t mem_pre, len_pre;
    direc_EEPROM_t *Directory_pre;
    AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 8012326:	f107 021f 	add.w	r2, r7, #31
 801232a:	2301      	movs	r3, #1
 801232c:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012330:	4842      	ldr	r0, [pc, #264]	@ (801243c <write_data_test_ic+0x128>)
 8012332:	f000 fe06 	bl	8012f42 <AT24Cxx_read_buffer>
    dir_addr = START_MEM_ADDR_DATA_DIREC + (num_direc * sizeof(direc_EEPROM_t));
 8012336:	7ffb      	ldrb	r3, [r7, #31]
 8012338:	461a      	mov	r2, r3
 801233a:	0052      	lsls	r2, r2, #1
 801233c:	4413      	add	r3, r2
 801233e:	009b      	lsls	r3, r3, #2
 8012340:	b29b      	uxth	r3, r3
 8012342:	f203 2382 	addw	r3, r3, #642	@ 0x282
 8012346:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (num_direc == 0) { /* first */ 
 8012348:	7ffb      	ldrb	r3, [r7, #31]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d103      	bne.n	8012356 <write_data_test_ic+0x42>
        data_addr = START_MEM_ADDR_DATA_TEST ;
 801234e:	f240 3373 	movw	r3, #883	@ 0x373
 8012352:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012354:	e033      	b.n	80123be <write_data_test_ic+0xaa>
    } else {
        uint8_t *temp_buf = (uint8_t *)malloc(sizeof(direc_EEPROM_t));
 8012356:	200c      	movs	r0, #12
 8012358:	f002 fc1a 	bl	8014b90 <malloc>
 801235c:	4603      	mov	r3, r0
 801235e:	62bb      	str	r3, [r7, #40]	@ 0x28
        AT24Cxx_read_buffer(&eeprom_ob,START_MEM_ADDR_DATA_DIREC + ((num_direc - 1) * sizeof(direc_EEPROM_t)),temp_buf,sizeof(direc_EEPROM_t));
 8012360:	7ffb      	ldrb	r3, [r7, #31]
 8012362:	3b01      	subs	r3, #1
 8012364:	b29b      	uxth	r3, r3
 8012366:	461a      	mov	r2, r3
 8012368:	0052      	lsls	r2, r2, #1
 801236a:	4413      	add	r3, r2
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	b29b      	uxth	r3, r3
 8012370:	f203 2382 	addw	r3, r3, #642	@ 0x282
 8012374:	b299      	uxth	r1, r3
 8012376:	230c      	movs	r3, #12
 8012378:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801237a:	4830      	ldr	r0, [pc, #192]	@ (801243c <write_data_test_ic+0x128>)
 801237c:	f000 fde1 	bl	8012f42 <AT24Cxx_read_buffer>
        Directory_pre = (direc_EEPROM_t *)temp_buf;
 8012380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012382:	627b      	str	r3, [r7, #36]	@ 0x24
        mem_pre = (uint16_t)((Directory_pre->addr[0] << 8) | Directory_pre->addr[1]);
 8012384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012386:	7a1b      	ldrb	r3, [r3, #8]
 8012388:	b21b      	sxth	r3, r3
 801238a:	021b      	lsls	r3, r3, #8
 801238c:	b21a      	sxth	r2, r3
 801238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012390:	7a5b      	ldrb	r3, [r3, #9]
 8012392:	b21b      	sxth	r3, r3
 8012394:	4313      	orrs	r3, r2
 8012396:	b21b      	sxth	r3, r3
 8012398:	847b      	strh	r3, [r7, #34]	@ 0x22
        len_pre = (uint16_t)((Directory_pre->length[0] << 8) | Directory_pre->length[1]);
 801239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239c:	7a9b      	ldrb	r3, [r3, #10]
 801239e:	b21b      	sxth	r3, r3
 80123a0:	021b      	lsls	r3, r3, #8
 80123a2:	b21a      	sxth	r2, r3
 80123a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123a6:	7adb      	ldrb	r3, [r3, #11]
 80123a8:	b21b      	sxth	r3, r3
 80123aa:	4313      	orrs	r3, r2
 80123ac:	b21b      	sxth	r3, r3
 80123ae:	843b      	strh	r3, [r7, #32]
        data_addr = mem_pre + len_pre;
 80123b0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80123b2:	8c3b      	ldrh	r3, [r7, #32]
 80123b4:	4413      	add	r3, r2
 80123b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        free(temp_buf);
 80123b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80123ba:	f002 fbf1 	bl	8014ba0 <free>
    }
    /* write data */

    AT24Cxx_write_buffer_bloking(&eeprom_ob,data_addr,Data,len);
 80123be:	88fb      	ldrh	r3, [r7, #6]
 80123c0:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80123c2:	68ba      	ldr	r2, [r7, #8]
 80123c4:	481d      	ldr	r0, [pc, #116]	@ (801243c <write_data_test_ic+0x128>)
 80123c6:	f000 fcd1 	bl	8012d6c <AT24Cxx_write_buffer_bloking>

    /* get the directory data */
    direc_EEPROM_t direc;
    memset(direc.nameIC,0,sizeof(direc.nameIC));
 80123ca:	f107 0310 	add.w	r3, r7, #16
 80123ce:	2208      	movs	r2, #8
 80123d0:	2100      	movs	r1, #0
 80123d2:	4618      	mov	r0, r3
 80123d4:	f004 fc42 	bl	8016c5c <memset>
    memcpy(direc.nameIC,icName,strlen(icName));
 80123d8:	68f8      	ldr	r0, [r7, #12]
 80123da:	f7ed fec3 	bl	8000164 <strlen>
 80123de:	4602      	mov	r2, r0
 80123e0:	f107 0310 	add.w	r3, r7, #16
 80123e4:	68f9      	ldr	r1, [r7, #12]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f004 fd81 	bl	8016eee <memcpy>
    direc.addr[0] = ((data_addr >> 8) & 0xFF);
 80123ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80123ee:	0a1b      	lsrs	r3, r3, #8
 80123f0:	b29b      	uxth	r3, r3
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	763b      	strb	r3, [r7, #24]
    direc.addr[1] = ((data_addr) & 0xFF);
 80123f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	767b      	strb	r3, [r7, #25]
    direc.length[0] = ((len >> 8) & 0xFF);
 80123fc:	88fb      	ldrh	r3, [r7, #6]
 80123fe:	0a1b      	lsrs	r3, r3, #8
 8012400:	b29b      	uxth	r3, r3
 8012402:	b2db      	uxtb	r3, r3
 8012404:	76bb      	strb	r3, [r7, #26]
    direc.length[1] = ((len) & 0xFF);
 8012406:	88fb      	ldrh	r3, [r7, #6]
 8012408:	b2db      	uxtb	r3, r3
 801240a:	76fb      	strb	r3, [r7, #27]
    AT24Cxx_write_buffer_bloking(&eeprom_ob,dir_addr,(uint8_t *)&direc,sizeof(direc_EEPROM_t));
 801240c:	f107 0210 	add.w	r2, r7, #16
 8012410:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8012412:	230c      	movs	r3, #12
 8012414:	4809      	ldr	r0, [pc, #36]	@ (801243c <write_data_test_ic+0x128>)
 8012416:	f000 fca9 	bl	8012d6c <AT24Cxx_write_buffer_bloking>
    ++num_direc;
 801241a:	7ffb      	ldrb	r3, [r7, #31]
 801241c:	3301      	adds	r3, #1
 801241e:	b2db      	uxtb	r3, r3
 8012420:	77fb      	strb	r3, [r7, #31]
    AT24Cxx_write_buffer_bloking(&eeprom_ob,START_MEM_ADDR_DIREC_USED,&num_direc,1);
 8012422:	f107 021f 	add.w	r2, r7, #31
 8012426:	2301      	movs	r3, #1
 8012428:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801242c:	4803      	ldr	r0, [pc, #12]	@ (801243c <write_data_test_ic+0x128>)
 801242e:	f000 fc9d 	bl	8012d6c <AT24Cxx_write_buffer_bloking>
}
 8012432:	bf00      	nop
 8012434:	3730      	adds	r7, #48	@ 0x30
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}
 801243a:	bf00      	nop
 801243c:	2000140c 	.word	0x2000140c

08012440 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void);
void I2C2_EV_IRQHandler(void);
void RTC_IRQHandler(void);

void I2C1_ER_IRQHandler(void) { 
 8012440:	b480      	push	{r7}
 8012442:	af00      	add	r7, sp, #0
    // OS_task_activate(1);  
    // HAL_NVIC_ClearPendingIRQ(I2C1_ER_IRQn); // clear NVIC pending bit
}
 8012444:	bf00      	nop
 8012446:	46bd      	mov	sp, r7
 8012448:	bc80      	pop	{r7}
 801244a:	4770      	bx	lr

0801244c <RTC_IRQHandler>:
void RTC_IRQHandler(void) {
 801244c:	b580      	push	{r7, lr}
 801244e:	af00      	add	r7, sp, #0
    OS_task_activate(1);  
 8012450:	2001      	movs	r0, #1
 8012452:	f002 fa15 	bl	8014880 <OS_task_activate>
}
 8012456:	bf00      	nop
 8012458:	bd80      	pop	{r7, pc}

0801245a <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void) {
 801245a:	b580      	push	{r7, lr}
 801245c:	af00      	add	r7, sp, #0
    OS_task_activate(2);
 801245e:	2002      	movs	r0, #2
 8012460:	f002 fa0e 	bl	8014880 <OS_task_activate>
}
 8012464:	bf00      	nop
 8012466:	bd80      	pop	{r7, pc}

08012468 <BSP_init>:

/* hardware-specific support code run on a specific hardware platform */
void BSP_init(void) {
 8012468:	b580      	push	{r7, lr}
 801246a:	af00      	add	r7, sp, #0
    /* init event pool */
    dynamic_event_pool_init();
 801246c:	f002 fab6 	bl	80149dc <dynamic_event_pool_init>
    
    /* Set IRQ number for priority used in OS */
    OS_prio_setIRQ(1,RTC_IRQn);
 8012470:	2103      	movs	r1, #3
 8012472:	2001      	movs	r0, #1
 8012474:	f002 fa88 	bl	8014988 <OS_prio_setIRQ>
    OS_prio_setIRQ(2,I2C2_EV_IRQn);
 8012478:	2121      	movs	r1, #33	@ 0x21
 801247a:	2002      	movs	r0, #2
 801247c:	f002 fa84 	bl	8014988 <OS_prio_setIRQ>

    OS_priority_IRQ(RTC_IRQn,1);
 8012480:	2101      	movs	r1, #1
 8012482:	2003      	movs	r0, #3
 8012484:	f002 fa66 	bl	8014954 <OS_priority_IRQ>
    OS_priority_IRQ(I2C2_EV_IRQn,2);
 8012488:	2102      	movs	r1, #2
 801248a:	2021      	movs	r0, #33	@ 0x21
 801248c:	f002 fa62 	bl	8014954 <OS_priority_IRQ>

    OS_Test_setIRQ(AO_BlinkyTest,RTC_IRQn);    
 8012490:	4b09      	ldr	r3, [pc, #36]	@ (80124b8 <BSP_init+0x50>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	2103      	movs	r1, #3
 8012496:	4618      	mov	r0, r3
 8012498:	f002 fa92 	bl	80149c0 <OS_Test_setIRQ>
//    OS_Test_setIRQ(AO_taskPost,RTC_IRQn);
    OS_Test_setIRQ(AO_task_eeprom,RTC_IRQn);
 801249c:	4b07      	ldr	r3, [pc, #28]	@ (80124bc <BSP_init+0x54>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	2103      	movs	r1, #3
 80124a2:	4618      	mov	r0, r3
 80124a4:	f002 fa8c 	bl	80149c0 <OS_Test_setIRQ>
    OS_Test_setIRQ(AO_task_uart_esp32,I2C2_EV_IRQn);
 80124a8:	4b05      	ldr	r3, [pc, #20]	@ (80124c0 <BSP_init+0x58>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	2121      	movs	r1, #33	@ 0x21
 80124ae:	4618      	mov	r0, r3
 80124b0:	f002 fa86 	bl	80149c0 <OS_Test_setIRQ>
}
 80124b4:	bf00      	nop
 80124b6:	bd80      	pop	{r7, pc}
 80124b8:	0801acbc 	.word	0x0801acbc
 80124bc:	0801acac 	.word	0x0801acac
 80124c0:	0801acb8 	.word	0x0801acb8

080124c4 <ds3231_task_init>:
#include "app_main.h"
#include "../Core/Inc/main.h"

DS3231_t ds3231;

void ds3231_task_init(I2C_HandleTypeDef* i2c_port, uint8_t dev_address) {
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	460b      	mov	r3, r1
 80124ce:	70fb      	strb	r3, [r7, #3]
    DS3231_Init(&ds3231,i2c_port,dev_address);
 80124d0:	78fb      	ldrb	r3, [r7, #3]
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	461a      	mov	r2, r3
 80124d6:	6879      	ldr	r1, [r7, #4]
 80124d8:	4803      	ldr	r0, [pc, #12]	@ (80124e8 <ds3231_task_init+0x24>)
 80124da:	f000 fd95 	bl	8013008 <DS3231_Init>
 80124de:	bf00      	nop
 80124e0:	3708      	adds	r7, #8
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	2000143c 	.word	0x2000143c

080124ec <screen_task_init>:
static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent);

static app_screen screen_instance;
OS_task * const AO_task_screen = &screen_instance.task;

void screen_task_init(void) {
 80124ec:	b580      	push	{r7, lr}
 80124ee:	af00      	add	r7, sp, #0
    screen_ctor(&screen_instance);
 80124f0:	4802      	ldr	r0, [pc, #8]	@ (80124fc <screen_task_init+0x10>)
 80124f2:	f000 f805 	bl	8012500 <screen_ctor>
}
 80124f6:	bf00      	nop
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	20001444 	.word	0x20001444

08012500 <screen_ctor>:

void screen_ctor(app_screen *pAO) {
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_screen,(OS_handler)screen_init,(OS_handler)screen_dispatch);
 8012508:	4b08      	ldr	r3, [pc, #32]	@ (801252c <screen_ctor+0x2c>)
 801250a:	4a09      	ldr	r2, [pc, #36]	@ (8012530 <screen_ctor+0x30>)
 801250c:	4909      	ldr	r1, [pc, #36]	@ (8012534 <screen_ctor+0x34>)
 801250e:	4618      	mov	r0, r3
 8012510:	f002 f85a 	bl	80145c8 <OS_task_init>

    OS_TimeEvt_init(&pAO->te_rtc,UPDATE_RTC,&pAO->task);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	331c      	adds	r3, #28
 8012518:	687a      	ldr	r2, [r7, #4]
 801251a:	2101      	movs	r1, #1
 801251c:	4618      	mov	r0, r3
 801251e:	f002 f923 	bl	8014768 <OS_TimeEvt_init>
}
 8012522:	bf00      	nop
 8012524:	3708      	adds	r7, #8
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}
 801252a:	bf00      	nop
 801252c:	20001444 	.word	0x20001444
 8012530:	0801255d 	.word	0x0801255d
 8012534:	08012539 	.word	0x08012539

08012538 <screen_init>:

static void screen_init(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
    OS_TimeEvt_Set(&pOS_task->te_rtc,100,1000);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	331c      	adds	r3, #28
 8012546:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801254a:	2164      	movs	r1, #100	@ 0x64
 801254c:	4618      	mov	r0, r3
 801254e:	f002 f931 	bl	80147b4 <OS_TimeEvt_Set>
    UNUSED(pEvent);
} 
 8012552:	bf00      	nop
 8012554:	3708      	adds	r7, #8
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
	...

0801255c <screen_dispatch>:

static void screen_dispatch(app_screen * const pOS_task, OS_event_t const * const pEvent) {
 801255c:	b580      	push	{r7, lr}
 801255e:	b08e      	sub	sp, #56	@ 0x38
 8012560:	af02      	add	r7, sp, #8
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	881b      	ldrh	r3, [r3, #0]
 801256a:	2b03      	cmp	r3, #3
 801256c:	f200 80a7 	bhi.w	80126be <screen_dispatch+0x162>
 8012570:	a201      	add	r2, pc, #4	@ (adr r2, 8012578 <screen_dispatch+0x1c>)
 8012572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012576:	bf00      	nop
 8012578:	08012589 	.word	0x08012589
 801257c:	080125b1 	.word	0x080125b1
 8012580:	08012669 	.word	0x08012669
 8012584:	0801262d 	.word	0x0801262d
        case DEIVCE_TEST_FINISH : {
            printf("Device test success!!\n");
 8012588:	484f      	ldr	r0, [pc, #316]	@ (80126c8 <screen_dispatch+0x16c>)
 801258a:	f004 f9f1 	bl	8016970 <puts>
            uint8_t *device_finish = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 801258e:	6838      	ldr	r0, [r7, #0]
 8012590:	f002 facd 	bl	8014b2e <get_data_dynamic_event>
 8012594:	4603      	mov	r3, r0
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	627b      	str	r3, [r7, #36]	@ 0x24
            show_main_page(&_Screen,DWINPAGE_MAIN_FINISH,*device_finish);
 801259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	461a      	mov	r2, r3
 80125a0:	2164      	movs	r1, #100	@ 0x64
 80125a2:	484a      	ldr	r0, [pc, #296]	@ (80126cc <screen_dispatch+0x170>)
 80125a4:	f7fe f91a 	bl	80107dc <show_main_page>
            free(device_finish);
 80125a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80125aa:	f002 faf9 	bl	8014ba0 <free>
        } break;
 80125ae:	e087      	b.n	80126c0 <screen_dispatch+0x164>
        case UPDATE_RTC : {
            // printf("Update RTC\n");
            uint8_t data_time[7];
            DS3231_Read_time(&ds3231, data_time);
 80125b0:	f107 031c 	add.w	r3, r7, #28
 80125b4:	4619      	mov	r1, r3
 80125b6:	4846      	ldr	r0, [pc, #280]	@ (80126d0 <screen_dispatch+0x174>)
 80125b8:	f000 fd4e 	bl	8013058 <DS3231_Read_time>
            char string[20];
            sprintf(string, "%02d/%02d/20%02d", data_time[4], data_time[5], data_time[6] );
 80125bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80125c0:	461a      	mov	r2, r3
 80125c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80125c6:	4619      	mov	r1, r3
 80125c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80125cc:	f107 0008 	add.w	r0, r7, #8
 80125d0:	9300      	str	r3, [sp, #0]
 80125d2:	460b      	mov	r3, r1
 80125d4:	493f      	ldr	r1, [pc, #252]	@ (80126d4 <screen_dispatch+0x178>)
 80125d6:	f004 fa09 	bl	80169ec <siprintf>
            DWIN_SetText(&_Screen,VP_Time_Day,string,strlen(string));
 80125da:	f107 0308 	add.w	r3, r7, #8
 80125de:	4618      	mov	r0, r3
 80125e0:	f7ed fdc0 	bl	8000164 <strlen>
 80125e4:	4603      	mov	r3, r0
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	f107 0208 	add.w	r2, r7, #8
 80125ec:	f649 0120 	movw	r1, #38944	@ 0x9820
 80125f0:	4836      	ldr	r0, [pc, #216]	@ (80126cc <screen_dispatch+0x170>)
 80125f2:	f000 fe43 	bl	801327c <DWIN_SetText>
            sprintf(string, "%02d:%02d:%02d", data_time[2], data_time[1], data_time[0] );
 80125f6:	7fbb      	ldrb	r3, [r7, #30]
 80125f8:	461a      	mov	r2, r3
 80125fa:	7f7b      	ldrb	r3, [r7, #29]
 80125fc:	4619      	mov	r1, r3
 80125fe:	7f3b      	ldrb	r3, [r7, #28]
 8012600:	f107 0008 	add.w	r0, r7, #8
 8012604:	9300      	str	r3, [sp, #0]
 8012606:	460b      	mov	r3, r1
 8012608:	4933      	ldr	r1, [pc, #204]	@ (80126d8 <screen_dispatch+0x17c>)
 801260a:	f004 f9ef 	bl	80169ec <siprintf>
            DWIN_SetText(&_Screen,VP_Time_Hour,string,strlen(string));
 801260e:	f107 0308 	add.w	r3, r7, #8
 8012612:	4618      	mov	r0, r3
 8012614:	f7ed fda6 	bl	8000164 <strlen>
 8012618:	4603      	mov	r3, r0
 801261a:	b29b      	uxth	r3, r3
 801261c:	f107 0208 	add.w	r2, r7, #8
 8012620:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 8012624:	4829      	ldr	r0, [pc, #164]	@ (80126cc <screen_dispatch+0x170>)
 8012626:	f000 fe29 	bl	801327c <DWIN_SetText>
        } break;
 801262a:	e049      	b.n	80126c0 <screen_dispatch+0x164>
        case UPDATA_PROGARM : {
            printf("updata program test\n");
 801262c:	482b      	ldr	r0, [pc, #172]	@ (80126dc <screen_dispatch+0x180>)
 801262e:	f004 f99f 	bl	8016970 <puts>
            Screen_data_t *data_program = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 8012632:	6838      	ldr	r0, [r7, #0]
 8012634:	f002 fa7b 	bl	8014b2e <get_data_dynamic_event>
 8012638:	4603      	mov	r3, r0
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            updata_data_program_from_app(&_Screen,data_program->data,data_program->len);
 801263e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012640:	6819      	ldr	r1, [r3, #0]
 8012642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012644:	889b      	ldrh	r3, [r3, #4]
 8012646:	461a      	mov	r2, r3
 8012648:	4820      	ldr	r0, [pc, #128]	@ (80126cc <screen_dispatch+0x170>)
 801264a:	f7fe ff31 	bl	80114b0 <updata_data_program_from_app>
            if (data_program->data != NULL) free(data_program->data);
 801264e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d004      	beq.n	8012660 <screen_dispatch+0x104>
 8012656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	4618      	mov	r0, r3
 801265c:	f002 faa0 	bl	8014ba0 <free>
            free(data_program);
 8012660:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012662:	f002 fa9d 	bl	8014ba0 <free>
        } break;
 8012666:	e02b      	b.n	80126c0 <screen_dispatch+0x164>
        case UPDATE_WIFI_STATE : {
            printf("Update wifi status\n");
 8012668:	481d      	ldr	r0, [pc, #116]	@ (80126e0 <screen_dispatch+0x184>)
 801266a:	f004 f981 	bl	8016970 <puts>
            Screen_data_t *data_wifi = (uint8_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 801266e:	6838      	ldr	r0, [r7, #0]
 8012670:	f002 fa5d 	bl	8014b2e <get_data_dynamic_event>
 8012674:	4603      	mov	r3, r0
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (data_wifi->data == '0') {
 801267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b30      	cmp	r3, #48	@ 0x30
 8012680:	d106      	bne.n	8012690 <screen_dispatch+0x134>
                DWIN_SetVariable_Icon(&_Screen,VP_ICON_WIFI,WIFI_OFF);
 8012682:	2201      	movs	r2, #1
 8012684:	f244 2150 	movw	r1, #16976	@ 0x4250
 8012688:	4810      	ldr	r0, [pc, #64]	@ (80126cc <screen_dispatch+0x170>)
 801268a:	f000 feaa 	bl	80133e2 <DWIN_SetVariable_Icon>
 801268e:	e009      	b.n	80126a4 <screen_dispatch+0x148>
            } else if (data_wifi->data == '1') {
 8012690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	2b31      	cmp	r3, #49	@ 0x31
 8012696:	d105      	bne.n	80126a4 <screen_dispatch+0x148>
                DWIN_SetVariable_Icon(&_Screen,VP_ICON_WIFI,WIFI_ON);
 8012698:	2200      	movs	r2, #0
 801269a:	f244 2150 	movw	r1, #16976	@ 0x4250
 801269e:	480b      	ldr	r0, [pc, #44]	@ (80126cc <screen_dispatch+0x170>)
 80126a0:	f000 fe9f 	bl	80133e2 <DWIN_SetVariable_Icon>
            }
            if (data_wifi->data != NULL) free(data_wifi->data);
 80126a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d004      	beq.n	80126b6 <screen_dispatch+0x15a>
 80126ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4618      	mov	r0, r3
 80126b2:	f002 fa75 	bl	8014ba0 <free>
            free(data_wifi);
 80126b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80126b8:	f002 fa72 	bl	8014ba0 <free>
        } break;
 80126bc:	e000      	b.n	80126c0 <screen_dispatch+0x164>
        default: break;
 80126be:	bf00      	nop
    }
}
 80126c0:	bf00      	nop
 80126c2:	3730      	adds	r7, #48	@ 0x30
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	0801a1f0 	.word	0x0801a1f0
 80126cc:	20000d48 	.word	0x20000d48
 80126d0:	2000143c 	.word	0x2000143c
 80126d4:	0801a208 	.word	0x0801a208
 80126d8:	0801a21c 	.word	0x0801a21c
 80126dc:	0801a22c 	.word	0x0801a22c
 80126e0:	0801a240 	.word	0x0801a240

080126e4 <sd_task_init>:
static void sd_dispatch(app_sd * const pOS_task, OS_event_t const * const pEvent);

static app_sd sd_instance;
OS_task * const AO_task_sd = &sd_instance.task;

void sd_task_init(void) {
 80126e4:	b580      	push	{r7, lr}
 80126e6:	af00      	add	r7, sp, #0
    init_data_logging();
 80126e8:	f000 f850 	bl	801278c <init_data_logging>
//    }
//
//    printf("\n=== Get records from index 1 to 3 ===\n");
//    get_data_range_by_index(2, 3);

    sd_ctor(&sd_instance);
 80126ec:	4802      	ldr	r0, [pc, #8]	@ (80126f8 <sd_task_init+0x14>)
 80126ee:	f000 f805 	bl	80126fc <sd_ctor>
}
 80126f2:	bf00      	nop
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	20003644 	.word	0x20003644

080126fc <sd_ctor>:

void sd_ctor(app_sd *pAO) {
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_sd,(OS_handler)&sd_init,(OS_handler)&sd_dispatch);
 8012704:	4b04      	ldr	r3, [pc, #16]	@ (8012718 <sd_ctor+0x1c>)
 8012706:	4a05      	ldr	r2, [pc, #20]	@ (801271c <sd_ctor+0x20>)
 8012708:	4905      	ldr	r1, [pc, #20]	@ (8012720 <sd_ctor+0x24>)
 801270a:	4618      	mov	r0, r3
 801270c:	f001 ff5c 	bl	80145c8 <OS_task_init>

}
 8012710:	bf00      	nop
 8012712:	3708      	adds	r7, #8
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	20003644 	.word	0x20003644
 801271c:	08012739 	.word	0x08012739
 8012720:	08012725 	.word	0x08012725

08012724 <sd_init>:

static void sd_init(app_sd * const pOS_task, OS_event_t const * const pEvent) {
 8012724:	b480      	push	{r7}
 8012726:	b083      	sub	sp, #12
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6039      	str	r1, [r7, #0]
    UNUSED(pOS_task);
    UNUSED(pEvent);
}
 801272e:	bf00      	nop
 8012730:	370c      	adds	r7, #12
 8012732:	46bd      	mov	sp, r7
 8012734:	bc80      	pop	{r7}
 8012736:	4770      	bx	lr

08012738 <sd_dispatch>:

static void sd_dispatch(app_sd * const pOS_task, OS_event_t const * const pEvent) {
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	881b      	ldrh	r3, [r3, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d118      	bne.n	801277c <sd_dispatch+0x44>
        case STORE_DATA_TEST : {
            printf("Store data to sd card\n");
 801274a:	480f      	ldr	r0, [pc, #60]	@ (8012788 <sd_dispatch+0x50>)
 801274c:	f004 f910 	bl	8016970 <puts>
            DataLogging_t *data_store = (DataLogging_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 8012750:	6838      	ldr	r0, [r7, #0]
 8012752:	f002 f9ec 	bl	8014b2e <get_data_dynamic_event>
 8012756:	4603      	mov	r3, r0
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	60fb      	str	r3, [r7, #12]
            add_data(data_store);
 801275c:	68f8      	ldr	r0, [r7, #12]
 801275e:	f000 f87f 	bl	8012860 <add_data>
            if (data_store->String_logging != NULL) free(data_store->String_logging);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d004      	beq.n	8012774 <sd_dispatch+0x3c>
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	685b      	ldr	r3, [r3, #4]
 801276e:	4618      	mov	r0, r3
 8012770:	f002 fa16 	bl	8014ba0 <free>
            free(data_store);
 8012774:	68f8      	ldr	r0, [r7, #12]
 8012776:	f002 fa13 	bl	8014ba0 <free>
        } break;
 801277a:	e000      	b.n	801277e <sd_dispatch+0x46>

        default : break;
 801277c:	bf00      	nop
    }
}
 801277e:	bf00      	nop
 8012780:	3710      	adds	r7, #16
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	0801a254 	.word	0x0801a254

0801278c <init_data_logging>:


static void init_data_logging(void) {
 801278c:	b580      	push	{r7, lr}
 801278e:	af00      	add	r7, sp, #0

   fresult = f_mount(&fs, "0:", 1);
 8012790:	2201      	movs	r2, #1
 8012792:	4928      	ldr	r1, [pc, #160]	@ (8012834 <init_data_logging+0xa8>)
 8012794:	4828      	ldr	r0, [pc, #160]	@ (8012838 <init_data_logging+0xac>)
 8012796:	f7f7 ff71 	bl	800a67c <f_mount>
 801279a:	4603      	mov	r3, r0
 801279c:	461a      	mov	r2, r3
 801279e:	4b27      	ldr	r3, [pc, #156]	@ (801283c <init_data_logging+0xb0>)
 80127a0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 80127a2:	4b26      	ldr	r3, [pc, #152]	@ (801283c <init_data_logging+0xb0>)
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d006      	beq.n	80127b8 <init_data_logging+0x2c>
       printf ("ERROR with code:%d!!! in mounting SD CARD...\n\n",fresult);
 80127aa:	4b24      	ldr	r3, [pc, #144]	@ (801283c <init_data_logging+0xb0>)
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	4619      	mov	r1, r3
 80127b0:	4823      	ldr	r0, [pc, #140]	@ (8012840 <init_data_logging+0xb4>)
 80127b2:	f004 f875 	bl	80168a0 <iprintf>
 80127b6:	e002      	b.n	80127be <init_data_logging+0x32>
	}
	else{
       printf("SD CARD mounted successfully...\n\n");
 80127b8:	4822      	ldr	r0, [pc, #136]	@ (8012844 <init_data_logging+0xb8>)
 80127ba:	f004 f8d9 	bl	8016970 <puts>
   }

	fresult = f_open(&fil, "data.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80127be:	2213      	movs	r2, #19
 80127c0:	4921      	ldr	r1, [pc, #132]	@ (8012848 <init_data_logging+0xbc>)
 80127c2:	4822      	ldr	r0, [pc, #136]	@ (801284c <init_data_logging+0xc0>)
 80127c4:	f7f7 ffa4 	bl	800a710 <f_open>
 80127c8:	4603      	mov	r3, r0
 80127ca:	461a      	mov	r2, r3
 80127cc:	4b1b      	ldr	r3, [pc, #108]	@ (801283c <init_data_logging+0xb0>)
 80127ce:	701a      	strb	r2, [r3, #0]
   if (f_size(&fil) == 0) {
 80127d0:	4b1e      	ldr	r3, [pc, #120]	@ (801284c <init_data_logging+0xc0>)
 80127d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d116      	bne.n	801280a <init_data_logging+0x7e>
       f_close(&fil);
 80127dc:	481b      	ldr	r0, [pc, #108]	@ (801284c <init_data_logging+0xc0>)
 80127de:	f7f8 fda0 	bl	800b322 <f_close>
       fresult = f_open(&fil, "data.txt", FA_WRITE);
 80127e2:	2202      	movs	r2, #2
 80127e4:	4918      	ldr	r1, [pc, #96]	@ (8012848 <init_data_logging+0xbc>)
 80127e6:	4819      	ldr	r0, [pc, #100]	@ (801284c <init_data_logging+0xc0>)
 80127e8:	f7f7 ff92 	bl	800a710 <f_open>
 80127ec:	4603      	mov	r3, r0
 80127ee:	461a      	mov	r2, r3
 80127f0:	4b12      	ldr	r3, [pc, #72]	@ (801283c <init_data_logging+0xb0>)
 80127f2:	701a      	strb	r2, [r3, #0]
       f_puts("Timestamp,Temperature,Humidity,Pressure\n", &fil);
 80127f4:	4915      	ldr	r1, [pc, #84]	@ (801284c <init_data_logging+0xc0>)
 80127f6:	4816      	ldr	r0, [pc, #88]	@ (8012850 <init_data_logging+0xc4>)
 80127f8:	f7f9 f8ec 	bl	800b9d4 <f_puts>
       f_close(&fil);
 80127fc:	4813      	ldr	r0, [pc, #76]	@ (801284c <init_data_logging+0xc0>)
 80127fe:	f7f8 fd90 	bl	800b322 <f_close>
       printf("Data file created\n");
 8012802:	4814      	ldr	r0, [pc, #80]	@ (8012854 <init_data_logging+0xc8>)
 8012804:	f004 f8b4 	bl	8016970 <puts>
 8012808:	e005      	b.n	8012816 <init_data_logging+0x8a>
   } else {
       f_close(&fil);
 801280a:	4810      	ldr	r0, [pc, #64]	@ (801284c <init_data_logging+0xc0>)
 801280c:	f7f8 fd89 	bl	800b322 <f_close>
       printf("Data file exists\n");
 8012810:	4811      	ldr	r0, [pc, #68]	@ (8012858 <init_data_logging+0xcc>)
 8012812:	f004 f8ad 	bl	8016970 <puts>
   }

   fresult = f_open(&fil, "index.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8012816:	2213      	movs	r2, #19
 8012818:	4910      	ldr	r1, [pc, #64]	@ (801285c <init_data_logging+0xd0>)
 801281a:	480c      	ldr	r0, [pc, #48]	@ (801284c <init_data_logging+0xc0>)
 801281c:	f7f7 ff78 	bl	800a710 <f_open>
 8012820:	4603      	mov	r3, r0
 8012822:	461a      	mov	r2, r3
 8012824:	4b05      	ldr	r3, [pc, #20]	@ (801283c <init_data_logging+0xb0>)
 8012826:	701a      	strb	r2, [r3, #0]
   f_close(&fil);
 8012828:	4808      	ldr	r0, [pc, #32]	@ (801284c <init_data_logging+0xc0>)
 801282a:	f7f8 fd7a 	bl	800b322 <f_close>
}
 801282e:	bf00      	nop
 8012830:	bd80      	pop	{r7, pc}
 8012832:	bf00      	nop
 8012834:	0801a26c 	.word	0x0801a26c
 8012838:	200014b4 	.word	0x200014b4
 801283c:	20003510 	.word	0x20003510
 8012840:	0801a270 	.word	0x0801a270
 8012844:	0801a2a0 	.word	0x0801a2a0
 8012848:	0801a2c4 	.word	0x0801a2c4
 801284c:	200024e4 	.word	0x200024e4
 8012850:	0801a2d0 	.word	0x0801a2d0
 8012854:	0801a2fc 	.word	0x0801a2fc
 8012858:	0801a310 	.word	0x0801a310
 801285c:	0801a324 	.word	0x0801a324

08012860 <add_data>:

// Write data with index update
static void add_data(DataLogging_t *data) {
 8012860:	b580      	push	{r7, lr}
 8012862:	b084      	sub	sp, #16
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
   fresult = f_open(&fil, "data.txt", FA_OPEN_EXISTING | FA_WRITE | FA_READ);
 8012868:	2203      	movs	r2, #3
 801286a:	4927      	ldr	r1, [pc, #156]	@ (8012908 <add_data+0xa8>)
 801286c:	4827      	ldr	r0, [pc, #156]	@ (801290c <add_data+0xac>)
 801286e:	f7f7 ff4f 	bl	800a710 <f_open>
 8012872:	4603      	mov	r3, r0
 8012874:	461a      	mov	r2, r3
 8012876:	4b26      	ldr	r3, [pc, #152]	@ (8012910 <add_data+0xb0>)
 8012878:	701a      	strb	r2, [r3, #0]
   if (fresult != FR_OK) {
 801287a:	4b25      	ldr	r3, [pc, #148]	@ (8012910 <add_data+0xb0>)
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d003      	beq.n	801288a <add_data+0x2a>
       printf("Error: Cannot open data.txt\n");
 8012882:	4824      	ldr	r0, [pc, #144]	@ (8012914 <add_data+0xb4>)
 8012884:	f004 f874 	bl	8016970 <puts>
       return;
 8012888:	e03b      	b.n	8012902 <add_data+0xa2>
   }

   uint32_t position = f_size(&fil);
 801288a:	4b20      	ldr	r3, [pc, #128]	@ (801290c <add_data+0xac>)
 801288c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012890:	68db      	ldr	r3, [r3, #12]
 8012892:	60fb      	str	r3, [r7, #12]
   f_lseek(&fil, position);
 8012894:	68f9      	ldr	r1, [r7, #12]
 8012896:	481d      	ldr	r0, [pc, #116]	@ (801290c <add_data+0xac>)
 8012898:	f7f8 fd6e 	bl	800b378 <f_lseek>

   // Write data
   sprintf(buffer, "%s\n", data->String_logging);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	461a      	mov	r2, r3
 80128a2:	491d      	ldr	r1, [pc, #116]	@ (8012918 <add_data+0xb8>)
 80128a4:	481d      	ldr	r0, [pc, #116]	@ (801291c <add_data+0xbc>)
 80128a6:	f004 f8a1 	bl	80169ec <siprintf>
   f_puts(buffer, &fil);
 80128aa:	4918      	ldr	r1, [pc, #96]	@ (801290c <add_data+0xac>)
 80128ac:	481b      	ldr	r0, [pc, #108]	@ (801291c <add_data+0xbc>)
 80128ae:	f7f9 f891 	bl	800b9d4 <f_puts>
   f_close(&fil);
 80128b2:	4816      	ldr	r0, [pc, #88]	@ (801290c <add_data+0xac>)
 80128b4:	f7f8 fd35 	bl	800b322 <f_close>

   // Add position to index file
   IndexEntry index_entry = {position};
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	60bb      	str	r3, [r7, #8]

   fresult = f_open(&fil, "index.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80128bc:	2213      	movs	r2, #19
 80128be:	4918      	ldr	r1, [pc, #96]	@ (8012920 <add_data+0xc0>)
 80128c0:	4812      	ldr	r0, [pc, #72]	@ (801290c <add_data+0xac>)
 80128c2:	f7f7 ff25 	bl	800a710 <f_open>
 80128c6:	4603      	mov	r3, r0
 80128c8:	461a      	mov	r2, r3
 80128ca:	4b11      	ldr	r3, [pc, #68]	@ (8012910 <add_data+0xb0>)
 80128cc:	701a      	strb	r2, [r3, #0]
   if (fresult != FR_OK) {
 80128ce:	4b10      	ldr	r3, [pc, #64]	@ (8012910 <add_data+0xb0>)
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d003      	beq.n	80128de <add_data+0x7e>
       printf("Error: Cannot open index.txt\n");
 80128d6:	4813      	ldr	r0, [pc, #76]	@ (8012924 <add_data+0xc4>)
 80128d8:	f004 f84a 	bl	8016970 <puts>
       return;
 80128dc:	e011      	b.n	8012902 <add_data+0xa2>
   }

   f_lseek(&fil, f_size(&fil));
 80128de:	4b0b      	ldr	r3, [pc, #44]	@ (801290c <add_data+0xac>)
 80128e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80128e4:	68db      	ldr	r3, [r3, #12]
 80128e6:	4619      	mov	r1, r3
 80128e8:	4808      	ldr	r0, [pc, #32]	@ (801290c <add_data+0xac>)
 80128ea:	f7f8 fd45 	bl	800b378 <f_lseek>
   f_write(&fil, &index_entry, sizeof(IndexEntry), &bw);
 80128ee:	f107 0108 	add.w	r1, r7, #8
 80128f2:	4b0d      	ldr	r3, [pc, #52]	@ (8012928 <add_data+0xc8>)
 80128f4:	2204      	movs	r2, #4
 80128f6:	4805      	ldr	r0, [pc, #20]	@ (801290c <add_data+0xac>)
 80128f8:	f7f8 fa0c 	bl	800ad14 <f_write>
   f_close(&fil);
 80128fc:	4803      	ldr	r0, [pc, #12]	@ (801290c <add_data+0xac>)
 80128fe:	f7f8 fd10 	bl	800b322 <f_close>
}
 8012902:	3710      	adds	r7, #16
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	0801a2c4 	.word	0x0801a2c4
 801290c:	200024e4 	.word	0x200024e4
 8012910:	20003510 	.word	0x20003510
 8012914:	0801a330 	.word	0x0801a330
 8012918:	0801a34c 	.word	0x0801a34c
 801291c:	20003514 	.word	0x20003514
 8012920:	0801a324 	.word	0x0801a324
 8012924:	0801a350 	.word	0x0801a350
 8012928:	20003640 	.word	0x20003640

0801292c <uart_esp32_task_init>:
static app_uart_esp32 uart_esp32_instance;
OS_task * const AO_task_uart_esp32 = &uart_esp32_instance.task;

static managerTX_CAN_t *buff_store[RX_BUF]; /* buffer store the data write */

void uart_esp32_task_init(UART_HandleTypeDef *pUart) {
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
    uart_esp32_instance.pUart = pUart;
 8012934:	4a10      	ldr	r2, [pc, #64]	@ (8012978 <uart_esp32_task_init+0x4c>)
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	61d3      	str	r3, [r2, #28]
    uart_esp32_instance.head_index = 0;
 801293a:	4b0f      	ldr	r3, [pc, #60]	@ (8012978 <uart_esp32_task_init+0x4c>)
 801293c:	2200      	movs	r2, #0
 801293e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    uart_esp32_instance.tail_index = 0;
 8012942:	4b0d      	ldr	r3, [pc, #52]	@ (8012978 <uart_esp32_task_init+0x4c>)
 8012944:	2200      	movs	r2, #0
 8012946:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    uart_esp32_instance.nUsed = 0;
 801294a:	4b0b      	ldr	r3, [pc, #44]	@ (8012978 <uart_esp32_task_init+0x4c>)
 801294c:	2200      	movs	r2, #0
 801294e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    uart_esp32_instance.end = RX_BUF - 1;
 8012952:	4b09      	ldr	r3, [pc, #36]	@ (8012978 <uart_esp32_task_init+0x4c>)
 8012954:	2209      	movs	r2, #9
 8012956:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    uart_esp32_instance.uart_esp32_buf = buff_store;
 801295a:	4b07      	ldr	r3, [pc, #28]	@ (8012978 <uart_esp32_task_init+0x4c>)
 801295c:	4a07      	ldr	r2, [pc, #28]	@ (801297c <uart_esp32_task_init+0x50>)
 801295e:	621a      	str	r2, [r3, #32]
    uart_esp32_instance.is_rx = false;
 8012960:	4b05      	ldr	r3, [pc, #20]	@ (8012978 <uart_esp32_task_init+0x4c>)
 8012962:	2200      	movs	r2, #0
 8012964:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    
    uart_esp32_ctor(&uart_esp32_instance);
 8012968:	4803      	ldr	r0, [pc, #12]	@ (8012978 <uart_esp32_task_init+0x4c>)
 801296a:	f000 f809 	bl	8012980 <uart_esp32_ctor>

}
 801296e:	bf00      	nop
 8012970:	3708      	adds	r7, #8
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop
 8012978:	20003660 	.word	0x20003660
 801297c:	20003734 	.word	0x20003734

08012980 <uart_esp32_ctor>:

void uart_esp32_ctor(app_uart_esp32 *pAO) {
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
    OS_task_init(AO_task_uart_esp32,(OS_handler)&uart_esp32_init,(OS_handler)&uart_esp32_dispatch);
 8012988:	4b09      	ldr	r3, [pc, #36]	@ (80129b0 <uart_esp32_ctor+0x30>)
 801298a:	4a0a      	ldr	r2, [pc, #40]	@ (80129b4 <uart_esp32_ctor+0x34>)
 801298c:	490a      	ldr	r1, [pc, #40]	@ (80129b8 <uart_esp32_ctor+0x38>)
 801298e:	4618      	mov	r0, r3
 8012990:	f001 fe1a 	bl	80145c8 <OS_task_init>

    OS_TimeEvt_init(&uart_esp32_instance.te_wait_rx,ESP32_RX_TIMEOUT,&uart_esp32_instance.task);
 8012994:	4a06      	ldr	r2, [pc, #24]	@ (80129b0 <uart_esp32_ctor+0x30>)
 8012996:	2103      	movs	r1, #3
 8012998:	4808      	ldr	r0, [pc, #32]	@ (80129bc <uart_esp32_ctor+0x3c>)
 801299a:	f001 fee5 	bl	8014768 <OS_TimeEvt_init>
    OS_TimeEvt_init(&uart_esp32_instance.te_wait_tx,ESP32_TX_TIMEOUT,&uart_esp32_instance.task);
 801299e:	4a04      	ldr	r2, [pc, #16]	@ (80129b0 <uart_esp32_ctor+0x30>)
 80129a0:	2104      	movs	r1, #4
 80129a2:	4807      	ldr	r0, [pc, #28]	@ (80129c0 <uart_esp32_ctor+0x40>)
 80129a4:	f001 fee0 	bl	8014768 <OS_TimeEvt_init>
}
 80129a8:	bf00      	nop
 80129aa:	3708      	adds	r7, #8
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	20003660 	.word	0x20003660
 80129b4:	080129d9 	.word	0x080129d9
 80129b8:	080129c5 	.word	0x080129c5
 80129bc:	2000368c 	.word	0x2000368c
 80129c0:	200036e0 	.word	0x200036e0

080129c4 <uart_esp32_init>:

static void uart_esp32_init(app_uart_esp32 * const pOS_task, OS_event_t const * const pEvent) {
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	6039      	str	r1, [r7, #0]
    UNUSED(pOS_task);
    UNUSED(pEvent);
}
 80129ce:	bf00      	nop
 80129d0:	370c      	adds	r7, #12
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bc80      	pop	{r7}
 80129d6:	4770      	bx	lr

080129d8 <uart_esp32_dispatch>:

static void uart_esp32_dispatch(app_uart_esp32 * const pOS_task, OS_event_t const * const pEvent) {
 80129d8:	b590      	push	{r4, r7, lr}
 80129da:	b089      	sub	sp, #36	@ 0x24
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	881b      	ldrh	r3, [r3, #0]
 80129e6:	2b03      	cmp	r3, #3
 80129e8:	d06b      	beq.n	8012ac2 <uart_esp32_dispatch+0xea>
 80129ea:	2b03      	cmp	r3, #3
 80129ec:	f300 80f4 	bgt.w	8012bd8 <uart_esp32_dispatch+0x200>
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d002      	beq.n	80129fa <uart_esp32_dispatch+0x22>
 80129f4:	2b01      	cmp	r3, #1
 80129f6:	d021      	beq.n	8012a3c <uart_esp32_dispatch+0x64>
                OS_TimeEvt_Set(&pOS_task->te_wait_rx,200,0); /* run only 1 time */
            }
            free(RX_ESP32);
        } break;

        default: break;
 80129f8:	e0ee      	b.n	8012bd8 <uart_esp32_dispatch+0x200>
            printf("Send data to esp32\n");
 80129fa:	487b      	ldr	r0, [pc, #492]	@ (8012be8 <uart_esp32_dispatch+0x210>)
 80129fc:	f003 ffb8 	bl	8016970 <puts>
            uart_esp32_t *data_send_esp32 = (uart_esp32_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 8012a00:	6838      	ldr	r0, [r7, #0]
 8012a02:	f002 f894 	bl	8014b2e <get_data_dynamic_event>
 8012a06:	4603      	mov	r3, r0
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	617b      	str	r3, [r7, #20]
            HAL_UART_Transmit(pOS_task->pUart,data_send_esp32->data,data_send_esp32->len,1000);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	69d8      	ldr	r0, [r3, #28]
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	6819      	ldr	r1, [r3, #0]
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	b29a      	uxth	r2, r3
 8012a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012a1e:	f7f4 fee8 	bl	80077f2 <HAL_UART_Transmit>
            if (data_send_esp32->data != NULL) free(data_send_esp32->data);
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d004      	beq.n	8012a34 <uart_esp32_dispatch+0x5c>
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f002 f8b6 	bl	8014ba0 <free>
            free(data_send_esp32);
 8012a34:	6978      	ldr	r0, [r7, #20]
 8012a36:	f002 f8b3 	bl	8014ba0 <free>
        } break;
 8012a3a:	e0d0      	b.n	8012bde <uart_esp32_dispatch+0x206>
            printf("Receive data from ESP32\n");
 8012a3c:	486b      	ldr	r0, [pc, #428]	@ (8012bec <uart_esp32_dispatch+0x214>)
 8012a3e:	f003 ff97 	bl	8016970 <puts>
            uart_esp32_t *RX_ESP32 = (uart_esp32_t *)(*(uint32_t *)get_data_dynamic_event(pEvent));
 8012a42:	6838      	ldr	r0, [r7, #0]
 8012a44:	f002 f873 	bl	8014b2e <get_data_dynamic_event>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	61bb      	str	r3, [r7, #24]
            pOS_task->uart_esp32_buf[pOS_task->head_index] = RX_ESP32;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6a1a      	ldr	r2, [r3, #32]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	4413      	add	r3, r2
 8012a5c:	69ba      	ldr	r2, [r7, #24]
 8012a5e:	601a      	str	r2, [r3, #0]
            if (pOS_task->head_index == 0) {
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d106      	bne.n	8012a78 <uart_esp32_dispatch+0xa0>
                pOS_task->head_index = pOS_task->end;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8012a76:	e007      	b.n	8012a88 <uart_esp32_dispatch+0xb0>
                --pOS_task->head_index;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012a7e:	3b01      	subs	r3, #1
 8012a80:	b2da      	uxtb	r2, r3
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            ++pOS_task->nUsed;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8012a8e:	3301      	adds	r3, #1
 8012a90:	b2da      	uxtb	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            if (pOS_task->is_rx == false) {
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012a9e:	f083 0301 	eor.w	r3, r3, #1
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	f000 8099 	beq.w	8012bdc <uart_esp32_dispatch+0x204>
                pOS_task->is_rx = true;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2201      	movs	r2, #1
 8012aae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                OS_TimeEvt_Set(&pOS_task->te_wait_rx,1,0);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	332c      	adds	r3, #44	@ 0x2c
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	2101      	movs	r1, #1
 8012aba:	4618      	mov	r0, r3
 8012abc:	f001 fe7a 	bl	80147b4 <OS_TimeEvt_Set>
        } break;
 8012ac0:	e08c      	b.n	8012bdc <uart_esp32_dispatch+0x204>
            uart_esp32_t *RX_ESP32 = pOS_task->uart_esp32_buf[pOS_task->tail_index];
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6a1a      	ldr	r2, [r3, #32]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8012acc:	009b      	lsls	r3, r3, #2
 8012ace:	4413      	add	r3, r2
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	61fb      	str	r3, [r7, #28]
            switch (RX_ESP32->data[0]) {
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	2b30      	cmp	r3, #48	@ 0x30
 8012adc:	d002      	beq.n	8012ae4 <uart_esp32_dispatch+0x10c>
 8012ade:	2b31      	cmp	r3, #49	@ 0x31
 8012ae0:	d01e      	beq.n	8012b20 <uart_esp32_dispatch+0x148>
                default : break;
 8012ae2:	e045      	b.n	8012b70 <uart_esp32_dispatch+0x198>
                    Screen_data_t *data_wifi = malloc(sizeof(Screen_data_t));
 8012ae4:	2008      	movs	r0, #8
 8012ae6:	f002 f853 	bl	8014b90 <malloc>
 8012aea:	4603      	mov	r3, r0
 8012aec:	613b      	str	r3, [r7, #16]
                    data_wifi->data = malloc(1);
 8012aee:	693c      	ldr	r4, [r7, #16]
 8012af0:	2001      	movs	r0, #1
 8012af2:	f002 f84d 	bl	8014b90 <malloc>
 8012af6:	4603      	mov	r3, r0
 8012af8:	6023      	str	r3, [r4, #0]
                    memcpy(data_wifi->data,&RX_ESP32->data[2],1);
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	69fa      	ldr	r2, [r7, #28]
 8012b00:	6812      	ldr	r2, [r2, #0]
 8012b02:	3202      	adds	r2, #2
 8012b04:	7812      	ldrb	r2, [r2, #0]
 8012b06:	701a      	strb	r2, [r3, #0]
                    data_wifi->len = 1;
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	2201      	movs	r2, #1
 8012b0c:	809a      	strh	r2, [r3, #4]
                    OS_task_post_event(AO_task_screen,UPDATE_WIFI_STATE,(uint8_t *)&data_wifi,sizeof(Screen_data_t));
 8012b0e:	4b38      	ldr	r3, [pc, #224]	@ (8012bf0 <uart_esp32_dispatch+0x218>)
 8012b10:	6818      	ldr	r0, [r3, #0]
 8012b12:	f107 0210 	add.w	r2, r7, #16
 8012b16:	2308      	movs	r3, #8
 8012b18:	2102      	movs	r1, #2
 8012b1a:	f001 fe07 	bl	801472c <OS_task_post_event>
                } break;
 8012b1e:	e027      	b.n	8012b70 <uart_esp32_dispatch+0x198>
                    Screen_data_t *data_program = malloc(sizeof(Screen_data_t));
 8012b20:	2008      	movs	r0, #8
 8012b22:	f002 f835 	bl	8014b90 <malloc>
 8012b26:	4603      	mov	r3, r0
 8012b28:	60fb      	str	r3, [r7, #12]
                    data_program->data = malloc(RX_ESP32->len);
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	685b      	ldr	r3, [r3, #4]
 8012b2e:	68fc      	ldr	r4, [r7, #12]
 8012b30:	4618      	mov	r0, r3
 8012b32:	f002 f82d 	bl	8014b90 <malloc>
 8012b36:	4603      	mov	r3, r0
 8012b38:	6023      	str	r3, [r4, #0]
                    memcpy(data_program->data,&RX_ESP32->data[2],RX_ESP32->len - 1);
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	6818      	ldr	r0, [r3, #0]
 8012b3e:	69fb      	ldr	r3, [r7, #28]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	1c99      	adds	r1, r3, #2
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	685b      	ldr	r3, [r3, #4]
 8012b48:	3b01      	subs	r3, #1
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	f004 f9cf 	bl	8016eee <memcpy>
                    data_program->len = RX_ESP32->len - 1;
 8012b50:	69fb      	ldr	r3, [r7, #28]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	3a01      	subs	r2, #1
 8012b5a:	b292      	uxth	r2, r2
 8012b5c:	809a      	strh	r2, [r3, #4]
                    OS_task_post_event(AO_task_screen,UPDATA_PROGARM,(uint8_t *)&data_program,sizeof(Screen_data_t));
 8012b5e:	4b24      	ldr	r3, [pc, #144]	@ (8012bf0 <uart_esp32_dispatch+0x218>)
 8012b60:	6818      	ldr	r0, [r3, #0]
 8012b62:	f107 020c 	add.w	r2, r7, #12
 8012b66:	2308      	movs	r3, #8
 8012b68:	2103      	movs	r1, #3
 8012b6a:	f001 fddf 	bl	801472c <OS_task_post_event>
                } break;
 8012b6e:	bf00      	nop
            if (pOS_task->tail_index == 0) {
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d106      	bne.n	8012b88 <uart_esp32_dispatch+0x1b0>
                    pOS_task->tail_index = pOS_task->end;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8012b86:	e007      	b.n	8012b98 <uart_esp32_dispatch+0x1c0>
                    --pOS_task->tail_index;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            --pOS_task->nUsed;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8012b9e:	3b01      	subs	r3, #1
 8012ba0:	b2da      	uxtb	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            pOS_task->is_rx = false;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            if (pOS_task->nUsed > 0 ) {
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00a      	beq.n	8012bd0 <uart_esp32_dispatch+0x1f8>
                pOS_task->is_rx = true;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                OS_TimeEvt_Set(&pOS_task->te_wait_rx,200,0); /* run only 1 time */
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	332c      	adds	r3, #44	@ 0x2c
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	21c8      	movs	r1, #200	@ 0xc8
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f001 fdf2 	bl	80147b4 <OS_TimeEvt_Set>
            free(RX_ESP32);
 8012bd0:	69f8      	ldr	r0, [r7, #28]
 8012bd2:	f001 ffe5 	bl	8014ba0 <free>
        } break;
 8012bd6:	e002      	b.n	8012bde <uart_esp32_dispatch+0x206>
        default: break;
 8012bd8:	bf00      	nop
 8012bda:	e000      	b.n	8012bde <uart_esp32_dispatch+0x206>
        } break;
 8012bdc:	bf00      	nop
    }
}
 8012bde:	bf00      	nop
 8012be0:	3724      	adds	r7, #36	@ 0x24
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd90      	pop	{r4, r7, pc}
 8012be6:	bf00      	nop
 8012be8:	0801a370 	.word	0x0801a370
 8012bec:	0801a384 	.word	0x0801a384
 8012bf0:	0801acb0 	.word	0x0801acb0

08012bf4 <BlinkyTest_app_init>:
uint8_t num_ic = 1;
char uart_string[50];
uint32_t uart_num_test;

/* call in main file to initialization Active object of app using */
void BlinkyTest_app_init(void) {
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	af00      	add	r7, sp, #0
    BlinkyTest_ctor(&Blinky_instance);
 8012bf8:	4802      	ldr	r0, [pc, #8]	@ (8012c04 <BlinkyTest_app_init+0x10>)
 8012bfa:	f000 f805 	bl	8012c08 <BlinkyTest_ctor>
//    data_write.mem_addr = START_ADDR_PROGRAM_TEST_X(1);


    // data_uart.data = malloc(50);
//    uart_num_test = 0;
}
 8012bfe:	bf00      	nop
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	2000375c 	.word	0x2000375c

08012c08 <BlinkyTest_ctor>:


void BlinkyTest_ctor(Test_Blinky_OS * const pAO) {
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
    /* Init task */
    OS_task_init(&pAO->task,(OS_handler)&BlinkyTest_init,(OS_handler)&BlinkyTest_Dispatch);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	4a0b      	ldr	r2, [pc, #44]	@ (8012c40 <BlinkyTest_ctor+0x38>)
 8012c14:	490b      	ldr	r1, [pc, #44]	@ (8012c44 <BlinkyTest_ctor+0x3c>)
 8012c16:	4618      	mov	r0, r3
 8012c18:	f001 fcd6 	bl	80145c8 <OS_task_init>

    /* init time os if using */
    OS_TimeEvt_init(&pAO->te1,TIMEOUT1_SIG,&pAO->task);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	331c      	adds	r3, #28
 8012c20:	687a      	ldr	r2, [r7, #4]
 8012c22:	2100      	movs	r1, #0
 8012c24:	4618      	mov	r0, r3
 8012c26:	f001 fd9f 	bl	8014768 <OS_TimeEvt_init>
    OS_TimeEvt_init(&pAO->te2,TIMEOUT2_SIG,&pAO->task);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	3370      	adds	r3, #112	@ 0x70
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	2101      	movs	r1, #1
 8012c32:	4618      	mov	r0, r3
 8012c34:	f001 fd98 	bl	8014768 <OS_TimeEvt_init>
    // OS_TimeEvt_init(&pAO->te_eeprom_write,WRITE_PROGRAM_TEST,&pAO->task);
    // OS_TimeEvt_init(&pAO->te_eeprom_read,READ_ONE_PROGRAM_TEST,&pAO->task);
//    OS_TimeEvt_init(&pAO->te_send_data,TEST_SEND_DATA_ESP32,&pAO->task);
}
 8012c38:	bf00      	nop
 8012c3a:	3708      	adds	r7, #8
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	08012c79 	.word	0x08012c79
 8012c44:	08012c49 	.word	0x08012c49

08012c48 <BlinkyTest_init>:

/* The init function of app task (optional) */
void BlinkyTest_init(Test_Blinky_OS * const pOS_task, OS_event_t const * const pEvent) {
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	6039      	str	r1, [r7, #0]
    
    /* init time for generate event */
    OS_TimeEvt_Set(&pOS_task->te1,
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	331c      	adds	r3, #28
 8012c56:	22c8      	movs	r2, #200	@ 0xc8
 8012c58:	2101      	movs	r1, #1
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f001 fdaa 	bl	80147b4 <OS_TimeEvt_Set>
    1U,
    200);

    OS_TimeEvt_Set(&pOS_task->te2,
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	3370      	adds	r3, #112	@ 0x70
 8012c64:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8012c68:	2165      	movs	r1, #101	@ 0x65
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f001 fda2 	bl	80147b4 <OS_TimeEvt_Set>
    /* if don't using this function */
    /*
    * UNSED(pOS_task);
    * UNSED(pEvent);
    */
}
 8012c70:	bf00      	nop
 8012c72:	3708      	adds	r7, #8
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}

08012c78 <BlinkyTest_Dispatch>:

void BlinkyTest_Dispatch(Test_Blinky_OS *const pOS_task, OS_event_t const * const pEvent) {
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	6039      	str	r1, [r7, #0]
    switch (pEvent->sig) {
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	2b07      	cmp	r3, #7
 8012c88:	d81e      	bhi.n	8012cc8 <BlinkyTest_Dispatch+0x50>
 8012c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8012c90 <BlinkyTest_Dispatch+0x18>)
 8012c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c90:	08012cb1 	.word	0x08012cb1
 8012c94:	08012cbd 	.word	0x08012cbd
 8012c98:	08012cc9 	.word	0x08012cc9
 8012c9c:	08012cc9 	.word	0x08012cc9
 8012ca0:	08012cc9 	.word	0x08012cc9
 8012ca4:	08012cc9 	.word	0x08012cc9
 8012ca8:	08012cc9 	.word	0x08012cc9
 8012cac:	08012cc9 	.word	0x08012cc9
        case TIMEOUT1_SIG : {
            /* Turn on led */
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8012cb0:	2201      	movs	r2, #1
 8012cb2:	2102      	movs	r1, #2
 8012cb4:	4807      	ldr	r0, [pc, #28]	@ (8012cd4 <BlinkyTest_Dispatch+0x5c>)
 8012cb6:	f7f0 fecb 	bl	8003a50 <HAL_GPIO_WritePin>
            // printf("Turn on led\n");
        } break;
 8012cba:	e006      	b.n	8012cca <BlinkyTest_Dispatch+0x52>
        case TIMEOUT2_SIG : {
            /* Turn off led */
        	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	2102      	movs	r1, #2
 8012cc0:	4804      	ldr	r0, [pc, #16]	@ (8012cd4 <BlinkyTest_Dispatch+0x5c>)
 8012cc2:	f7f0 fec5 	bl	8003a50 <HAL_GPIO_WritePin>
            // printf("Turn off led\n");
        } break;
 8012cc6:	e000      	b.n	8012cca <BlinkyTest_Dispatch+0x52>
            // uart_num_test++;
            // sprintf((char *)data_uart.data,"%s: %ld\n","The String Send to ESP32",uart_num_test);
            // data_uart.len = strlen((char *)data_uart.data);
            // OS_task_post_event(AO_task_uart_esp32,SEND_DATA_ESP32,(uint8_t *)&data_uart,sizeof(uart_buf));
        } break;
        default: break;
 8012cc8:	bf00      	nop
    }
}
 8012cca:	bf00      	nop
 8012ccc:	3708      	adds	r7, #8
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	40010800 	.word	0x40010800

08012cd8 <AT24Cxx_Init>:
#include <stdio.h>
#include <stdint.h>

/* Private function prototype */

AT24Cxx_Status AT24Cxx_Init(AT24Cxx_t *pDev, uint8_t dev_address, I2C_HandleTypeDef *dev_i2c) {
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b084      	sub	sp, #16
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	607a      	str	r2, [r7, #4]
 8012ce4:	72fb      	strb	r3, [r7, #11]
    pDev->i2c_port = dev_i2c;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	601a      	str	r2, [r3, #0]
    pDev->dev_address = dev_address << 1;
 8012cec:	7afb      	ldrb	r3, [r7, #11]
 8012cee:	005b      	lsls	r3, r3, #1
 8012cf0:	b2da      	uxtb	r2, r3
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	711a      	strb	r2, [r3, #4]
    /* Test communication */
    //uint8_t test_buf[1] = {0};
    if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 1, 100) == HAL_OK) {
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	6818      	ldr	r0, [r3, #0]
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	791b      	ldrb	r3, [r3, #4]
 8012cfe:	4619      	mov	r1, r3
 8012d00:	2364      	movs	r3, #100	@ 0x64
 8012d02:	2201      	movs	r2, #1
 8012d04:	f7f1 fc2e 	bl	8004564 <HAL_I2C_IsDeviceReady>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d101      	bne.n	8012d12 <AT24Cxx_Init+0x3a>
        return AT24Cxx_Init_OK;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	e000      	b.n	8012d14 <AT24Cxx_Init+0x3c>
    }
    return AT24Cxx_Init_Fail;
 8012d12:	2301      	movs	r3, #1
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3710      	adds	r7, #16
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <AT24Cxx_write_buffer>:
    } else {
        return AT24Cxx_Error_write;
    }
}

AT24Cxx_Status AT24Cxx_write_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b086      	sub	sp, #24
 8012d20:	af02      	add	r7, sp, #8
 8012d22:	60f8      	str	r0, [r7, #12]
 8012d24:	607a      	str	r2, [r7, #4]
 8012d26:	461a      	mov	r2, r3
 8012d28:	460b      	mov	r3, r1
 8012d2a:	817b      	strh	r3, [r7, #10]
 8012d2c:	4613      	mov	r3, r2
 8012d2e:	813b      	strh	r3, [r7, #8]
    /* Check valid size buffer and address */
    if (mem_addr+buf_length < AT24C256_MAX_ADDR && buf_length < AT24C256_PG_SIZE) {
 8012d30:	897a      	ldrh	r2, [r7, #10]
 8012d32:	893b      	ldrh	r3, [r7, #8]
 8012d34:	4413      	add	r3, r2
 8012d36:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	dc11      	bgt.n	8012d62 <AT24Cxx_write_buffer+0x46>
 8012d3e:	893b      	ldrh	r3, [r7, #8]
 8012d40:	2b3f      	cmp	r3, #63	@ 0x3f
 8012d42:	d80e      	bhi.n	8012d62 <AT24Cxx_write_buffer+0x46>
        HAL_I2C_Mem_Write_IT(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,buf_length);
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	6818      	ldr	r0, [r3, #0]
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	791b      	ldrb	r3, [r3, #4]
 8012d4c:	4619      	mov	r1, r3
 8012d4e:	897a      	ldrh	r2, [r7, #10]
 8012d50:	893b      	ldrh	r3, [r7, #8]
 8012d52:	9301      	str	r3, [sp, #4]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	9300      	str	r3, [sp, #0]
 8012d58:	2310      	movs	r3, #16
 8012d5a:	f7f1 fb57 	bl	800440c <HAL_I2C_Mem_Write_IT>
        return AT24Cxx_OK;
 8012d5e:	2302      	movs	r3, #2
 8012d60:	e000      	b.n	8012d64 <AT24Cxx_write_buffer+0x48>
    } else {
        return AT24Cxx_Error_write;
 8012d62:	2303      	movs	r3, #3
    }
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3710      	adds	r7, #16
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <AT24Cxx_write_buffer_bloking>:

AT24Cxx_Status AT24Cxx_write_buffer_bloking(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t* data_buf, uint16_t buf_length) {
 8012d6c:	b5b0      	push	{r4, r5, r7, lr}
 8012d6e:	b08a      	sub	sp, #40	@ 0x28
 8012d70:	af04      	add	r7, sp, #16
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	607a      	str	r2, [r7, #4]
 8012d76:	461a      	mov	r2, r3
 8012d78:	460b      	mov	r3, r1
 8012d7a:	817b      	strh	r3, [r7, #10]
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	813b      	strh	r3, [r7, #8]
    uint8_t page_remaining = AT24C256_PG_SIZE - (mem_addr % AT24C256_PG_SIZE); /* num bytes written in current page from address */
 8012d80:	897b      	ldrh	r3, [r7, #10]
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012d88:	b2db      	uxtb	r3, r3
 8012d8a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8012d8e:	75fb      	strb	r3, [r7, #23]

    if (buf_length < page_remaining) page_remaining = buf_length;
 8012d90:	7dfb      	ldrb	r3, [r7, #23]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	893a      	ldrh	r2, [r7, #8]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d201      	bcs.n	8012d9e <AT24Cxx_write_buffer_bloking+0x32>
 8012d9a:	893b      	ldrh	r3, [r7, #8]
 8012d9c:	75fb      	strb	r3, [r7, #23]
    uint8_t page_write = (buf_length - page_remaining) / AT24C256_PG_SIZE;   /* num pages can write full */
 8012d9e:	893a      	ldrh	r2, [r7, #8]
 8012da0:	7dfb      	ldrb	r3, [r7, #23]
 8012da2:	1ad3      	subs	r3, r2, r3
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	da00      	bge.n	8012daa <AT24Cxx_write_buffer_bloking+0x3e>
 8012da8:	333f      	adds	r3, #63	@ 0x3f
 8012daa:	119b      	asrs	r3, r3, #6
 8012dac:	757b      	strb	r3, [r7, #21]
    uint8_t byte_remaining = (buf_length - page_remaining) % AT24C256_PG_SIZE; /* num bytes remain after write all full page */
 8012dae:	893a      	ldrh	r2, [r7, #8]
 8012db0:	7dfb      	ldrb	r3, [r7, #23]
 8012db2:	1ad3      	subs	r3, r2, r3
 8012db4:	425a      	negs	r2, r3
 8012db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012dba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012dbe:	bf58      	it	pl
 8012dc0:	4253      	negpl	r3, r2
 8012dc2:	753b      	strb	r3, [r7, #20]

    /* write in current page */
    if (page_remaining > 0x00 && (mem_addr + page_remaining) < AT24C256_MAX_ADDR) {
 8012dc4:	7dfb      	ldrb	r3, [r7, #23]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d025      	beq.n	8012e16 <AT24Cxx_write_buffer_bloking+0xaa>
 8012dca:	897a      	ldrh	r2, [r7, #10]
 8012dcc:	7dfb      	ldrb	r3, [r7, #23]
 8012dce:	4413      	add	r3, r2
 8012dd0:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012dd4:	4293      	cmp	r3, r2
 8012dd6:	dc1e      	bgt.n	8012e16 <AT24Cxx_write_buffer_bloking+0xaa>
        while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_buf,page_remaining,AT24C256_I2C_TIMOUT) != HAL_OK);
 8012dd8:	bf00      	nop
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	6818      	ldr	r0, [r3, #0]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	791b      	ldrb	r3, [r3, #4]
 8012de2:	461c      	mov	r4, r3
 8012de4:	7dfb      	ldrb	r3, [r7, #23]
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	897a      	ldrh	r2, [r7, #10]
 8012dea:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8012dee:	9102      	str	r1, [sp, #8]
 8012df0:	9301      	str	r3, [sp, #4]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	9300      	str	r3, [sp, #0]
 8012df6:	2310      	movs	r3, #16
 8012df8:	4621      	mov	r1, r4
 8012dfa:	f7f0 ff99 	bl	8003d30 <HAL_I2C_Mem_Write>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d1ea      	bne.n	8012dda <AT24Cxx_write_buffer_bloking+0x6e>
        if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	6818      	ldr	r0, [r3, #0]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	791b      	ldrb	r3, [r3, #4]
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	2305      	movs	r3, #5
 8012e10:	2264      	movs	r2, #100	@ 0x64
 8012e12:	f7f1 fba7 	bl	8004564 <HAL_I2C_IsDeviceReady>
            // printf("transmit i2c success\n");
        }
    }

    /* write full page */
    for (uint8_t cur_page = 0; cur_page < page_write; cur_page ++) {
 8012e16:	2300      	movs	r3, #0
 8012e18:	75bb      	strb	r3, [r7, #22]
 8012e1a:	e042      	b.n	8012ea2 <AT24Cxx_write_buffer_bloking+0x136>
        if ((mem_addr + page_remaining+ (cur_page * AT24C256_PG_SIZE)) > 0x00 && (mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)) < AT24C256_MAX_ADDR) {
 8012e1c:	897a      	ldrh	r2, [r7, #10]
 8012e1e:	7dfb      	ldrb	r3, [r7, #23]
 8012e20:	441a      	add	r2, r3
 8012e22:	7dbb      	ldrb	r3, [r7, #22]
 8012e24:	019b      	lsls	r3, r3, #6
 8012e26:	4413      	add	r3, r2
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	dd37      	ble.n	8012e9c <AT24Cxx_write_buffer_bloking+0x130>
 8012e2c:	897a      	ldrh	r2, [r7, #10]
 8012e2e:	7dfb      	ldrb	r3, [r7, #23]
 8012e30:	441a      	add	r2, r3
 8012e32:	7dbb      	ldrb	r3, [r7, #22]
 8012e34:	019b      	lsls	r3, r3, #6
 8012e36:	4413      	add	r3, r2
 8012e38:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	dc2d      	bgt.n	8012e9c <AT24Cxx_write_buffer_bloking+0x130>
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,(uint16_t)(mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)),
 8012e40:	bf00      	nop
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	6818      	ldr	r0, [r3, #0]
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	791b      	ldrb	r3, [r3, #4]
 8012e4a:	461c      	mov	r4, r3
 8012e4c:	7dfb      	ldrb	r3, [r7, #23]
 8012e4e:	b29a      	uxth	r2, r3
 8012e50:	897b      	ldrh	r3, [r7, #10]
 8012e52:	4413      	add	r3, r2
 8012e54:	b29a      	uxth	r2, r3
 8012e56:	7dbb      	ldrb	r3, [r7, #22]
 8012e58:	b29b      	uxth	r3, r3
 8012e5a:	019b      	lsls	r3, r3, #6
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	4413      	add	r3, r2
 8012e60:	b299      	uxth	r1, r3
                    I2C_MEMADD_SIZE_16BIT,
                    data_buf + page_remaining + (cur_page * AT24C256_PG_SIZE),
 8012e62:	7dfb      	ldrb	r3, [r7, #23]
 8012e64:	7dba      	ldrb	r2, [r7, #22]
 8012e66:	0192      	lsls	r2, r2, #6
 8012e68:	4413      	add	r3, r2
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,(uint16_t)(mem_addr + page_remaining + (cur_page * AT24C256_PG_SIZE)),
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	4413      	add	r3, r2
 8012e6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8012e72:	9202      	str	r2, [sp, #8]
 8012e74:	2240      	movs	r2, #64	@ 0x40
 8012e76:	9201      	str	r2, [sp, #4]
 8012e78:	9300      	str	r3, [sp, #0]
 8012e7a:	2310      	movs	r3, #16
 8012e7c:	460a      	mov	r2, r1
 8012e7e:	4621      	mov	r1, r4
 8012e80:	f7f0 ff56 	bl	8003d30 <HAL_I2C_Mem_Write>
 8012e84:	4603      	mov	r3, r0
                    AT24C256_PG_SIZE,
                    AT24C256_I2C_TIMOUT) != HAL_OK);
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d1db      	bne.n	8012e42 <AT24Cxx_write_buffer_bloking+0xd6>
            if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	6818      	ldr	r0, [r3, #0]
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	791b      	ldrb	r3, [r3, #4]
 8012e92:	4619      	mov	r1, r3
 8012e94:	2305      	movs	r3, #5
 8012e96:	2264      	movs	r2, #100	@ 0x64
 8012e98:	f7f1 fb64 	bl	8004564 <HAL_I2C_IsDeviceReady>
    for (uint8_t cur_page = 0; cur_page < page_write; cur_page ++) {
 8012e9c:	7dbb      	ldrb	r3, [r7, #22]
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	75bb      	strb	r3, [r7, #22]
 8012ea2:	7dba      	ldrb	r2, [r7, #22]
 8012ea4:	7d7b      	ldrb	r3, [r7, #21]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	d3b8      	bcc.n	8012e1c <AT24Cxx_write_buffer_bloking+0xb0>
            }
        }
    }

    /* write bytes after write full page still remain */
    if (byte_remaining != 0) {
 8012eaa:	7d3b      	ldrb	r3, [r7, #20]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d040      	beq.n	8012f32 <AT24Cxx_write_buffer_bloking+0x1c6>
        if ((mem_addr + page_remaining + (page_write * AT24C256_PG_SIZE)) > 0x00 && (mem_addr + page_remaining+ (page_write * AT24C256_PG_SIZE)) < AT24C256_MAX_ADDR) {
 8012eb0:	897a      	ldrh	r2, [r7, #10]
 8012eb2:	7dfb      	ldrb	r3, [r7, #23]
 8012eb4:	441a      	add	r2, r3
 8012eb6:	7d7b      	ldrb	r3, [r7, #21]
 8012eb8:	019b      	lsls	r3, r3, #6
 8012eba:	4413      	add	r3, r2
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	dd38      	ble.n	8012f32 <AT24Cxx_write_buffer_bloking+0x1c6>
 8012ec0:	897a      	ldrh	r2, [r7, #10]
 8012ec2:	7dfb      	ldrb	r3, [r7, #23]
 8012ec4:	441a      	add	r2, r3
 8012ec6:	7d7b      	ldrb	r3, [r7, #21]
 8012ec8:	019b      	lsls	r3, r3, #6
 8012eca:	4413      	add	r3, r2
 8012ecc:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012ed0:	4293      	cmp	r3, r2
 8012ed2:	dc2e      	bgt.n	8012f32 <AT24Cxx_write_buffer_bloking+0x1c6>
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 8012ed4:	bf00      	nop
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	6818      	ldr	r0, [r3, #0]
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	791b      	ldrb	r3, [r3, #4]
 8012ede:	461d      	mov	r5, r3
                    (uint16_t)(mem_addr + page_remaining + (page_write * AT24C256_PG_SIZE)),
 8012ee0:	7dfb      	ldrb	r3, [r7, #23]
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	897b      	ldrh	r3, [r7, #10]
 8012ee6:	4413      	add	r3, r2
 8012ee8:	b29a      	uxth	r2, r3
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 8012eea:	7d7b      	ldrb	r3, [r7, #21]
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	019b      	lsls	r3, r3, #6
 8012ef0:	b29b      	uxth	r3, r3
 8012ef2:	4413      	add	r3, r2
 8012ef4:	b299      	uxth	r1, r3
                    I2C_MEMADD_SIZE_16BIT,
                    data_buf + page_remaining + (page_write * AT24C256_PG_SIZE),
 8012ef6:	7dfb      	ldrb	r3, [r7, #23]
 8012ef8:	7d7a      	ldrb	r2, [r7, #21]
 8012efa:	0192      	lsls	r2, r2, #6
 8012efc:	4413      	add	r3, r2
            while (HAL_I2C_Mem_Write(pDev->i2c_port,pDev->dev_address,
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	4413      	add	r3, r2
 8012f02:	7d3a      	ldrb	r2, [r7, #20]
 8012f04:	b292      	uxth	r2, r2
 8012f06:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 8012f0a:	9402      	str	r4, [sp, #8]
 8012f0c:	9201      	str	r2, [sp, #4]
 8012f0e:	9300      	str	r3, [sp, #0]
 8012f10:	2310      	movs	r3, #16
 8012f12:	460a      	mov	r2, r1
 8012f14:	4629      	mov	r1, r5
 8012f16:	f7f0 ff0b 	bl	8003d30 <HAL_I2C_Mem_Write>
 8012f1a:	4603      	mov	r3, r0
                    byte_remaining,
                    AT24C256_I2C_TIMOUT) == HAL_OK) {
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d0da      	beq.n	8012ed6 <AT24Cxx_write_buffer_bloking+0x16a>
                    } 
            if (HAL_I2C_IsDeviceReady(pDev->i2c_port, pDev->dev_address, 100,5) == HAL_OK) {
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	6818      	ldr	r0, [r3, #0]
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	791b      	ldrb	r3, [r3, #4]
 8012f28:	4619      	mov	r1, r3
 8012f2a:	2305      	movs	r3, #5
 8012f2c:	2264      	movs	r2, #100	@ 0x64
 8012f2e:	f7f1 fb19 	bl	8004564 <HAL_I2C_IsDeviceReady>
                // printf("transmit i2c success\n");
            }
        }
    }
    HAL_Delay(10);
 8012f32:	200a      	movs	r0, #10
 8012f34:	f7ef fb84 	bl	8002640 <HAL_Delay>
}
 8012f38:	bf00      	nop
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3718      	adds	r7, #24
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bdb0      	pop	{r4, r5, r7, pc}

08012f42 <AT24Cxx_read_buffer>:

AT24Cxx_Status AT24Cxx_read_buffer(AT24Cxx_t *pDev, uint16_t mem_addr, uint8_t *data_ret, uint16_t buf_length) {
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b088      	sub	sp, #32
 8012f46:	af04      	add	r7, sp, #16
 8012f48:	60f8      	str	r0, [r7, #12]
 8012f4a:	607a      	str	r2, [r7, #4]
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	460b      	mov	r3, r1
 8012f50:	817b      	strh	r3, [r7, #10]
 8012f52:	4613      	mov	r3, r2
 8012f54:	813b      	strh	r3, [r7, #8]
    if (mem_addr < AT24C256_MAX_ADDR) {
 8012f56:	897b      	ldrh	r3, [r7, #10]
 8012f58:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d815      	bhi.n	8012f8c <AT24Cxx_read_buffer+0x4a>
        while (HAL_I2C_Mem_Read(pDev->i2c_port,pDev->dev_address,mem_addr,I2C_MEMADD_SIZE_16BIT,data_ret,buf_length,1000) != HAL_OK);
 8012f60:	bf00      	nop
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	6818      	ldr	r0, [r3, #0]
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	791b      	ldrb	r3, [r3, #4]
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	897a      	ldrh	r2, [r7, #10]
 8012f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012f72:	9302      	str	r3, [sp, #8]
 8012f74:	893b      	ldrh	r3, [r7, #8]
 8012f76:	9301      	str	r3, [sp, #4]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	9300      	str	r3, [sp, #0]
 8012f7c:	2310      	movs	r3, #16
 8012f7e:	f7f0 ffd1 	bl	8003f24 <HAL_I2C_Mem_Read>
 8012f82:	4603      	mov	r3, r0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d1ec      	bne.n	8012f62 <AT24Cxx_read_buffer+0x20>
        return AT24Cxx_OK;
 8012f88:	2302      	movs	r3, #2
 8012f8a:	e000      	b.n	8012f8e <AT24Cxx_read_buffer+0x4c>
    } else {
        return AT24Cxx_Error_read;
 8012f8c:	2304      	movs	r3, #4
    }
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <transposeArray>:

float String2Float(uint8_t *data_string, uint16_t size) {
    
}

void transposeArray(char *Dest, char *Src, uint8_t col, uint8_t row) {
 8012f96:	b480      	push	{r7}
 8012f98:	b087      	sub	sp, #28
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	60f8      	str	r0, [r7, #12]
 8012f9e:	60b9      	str	r1, [r7, #8]
 8012fa0:	4611      	mov	r1, r2
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	71fb      	strb	r3, [r7, #7]
 8012fa8:	4613      	mov	r3, r2
 8012faa:	71bb      	strb	r3, [r7, #6]
    for (int i = 0; i < col; i++) {
 8012fac:	2300      	movs	r3, #0
 8012fae:	617b      	str	r3, [r7, #20]
 8012fb0:	e020      	b.n	8012ff4 <transposeArray+0x5e>
        for (int j = 0; j < row; j++) {
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	613b      	str	r3, [r7, #16]
 8012fb6:	e016      	b.n	8012fe6 <transposeArray+0x50>
            Dest[i * row + j] = Src[j * col + i];
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	693a      	ldr	r2, [r7, #16]
 8012fbc:	fb03 f202 	mul.w	r2, r3, r2
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	4413      	add	r3, r2
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	441a      	add	r2, r3
 8012fca:	79bb      	ldrb	r3, [r7, #6]
 8012fcc:	6979      	ldr	r1, [r7, #20]
 8012fce:	fb03 f101 	mul.w	r1, r3, r1
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	440b      	add	r3, r1
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	440b      	add	r3, r1
 8012fdc:	7812      	ldrb	r2, [r2, #0]
 8012fde:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < row; j++) {
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	613b      	str	r3, [r7, #16]
 8012fe6:	79bb      	ldrb	r3, [r7, #6]
 8012fe8:	693a      	ldr	r2, [r7, #16]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	dbe4      	blt.n	8012fb8 <transposeArray+0x22>
    for (int i = 0; i < col; i++) {
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	617b      	str	r3, [r7, #20]
 8012ff4:	79fb      	ldrb	r3, [r7, #7]
 8012ff6:	697a      	ldr	r2, [r7, #20]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	dbda      	blt.n	8012fb2 <transposeArray+0x1c>
        }
    }
}
 8012ffc:	bf00      	nop
 8012ffe:	bf00      	nop
 8013000:	371c      	adds	r7, #28
 8013002:	46bd      	mov	sp, r7
 8013004:	bc80      	pop	{r7}
 8013006:	4770      	bx	lr

08013008 <DS3231_Init>:
#include "DS3231.h"

static uint8_t decToBcd(int val);
static int bcdToDec(uint8_t val);

DS3231_Status DS3231_Init(DS3231_t *pDS3231, I2C_HandleTypeDef *i2c, uint16_t dev_address) {
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	60f8      	str	r0, [r7, #12]
 8013010:	60b9      	str	r1, [r7, #8]
 8013012:	4613      	mov	r3, r2
 8013014:	80fb      	strh	r3, [r7, #6]
    pDS3231->i2c_port = i2c;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	68ba      	ldr	r2, [r7, #8]
 801301a:	601a      	str	r2, [r3, #0]

    pDS3231->dev_address = dev_address << 1;
 801301c:	88fb      	ldrh	r3, [r7, #6]
 801301e:	b2db      	uxtb	r3, r3
 8013020:	005b      	lsls	r3, r3, #1
 8013022:	b2da      	uxtb	r2, r3
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	711a      	strb	r2, [r3, #4]
    if (HAL_I2C_IsDeviceReady(pDS3231->i2c_port,pDS3231->dev_address,1,100) == HAL_OK) {
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	6818      	ldr	r0, [r3, #0]
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	791b      	ldrb	r3, [r3, #4]
 8013030:	4619      	mov	r1, r3
 8013032:	2364      	movs	r3, #100	@ 0x64
 8013034:	2201      	movs	r2, #1
 8013036:	f7f1 fa95 	bl	8004564 <HAL_I2C_IsDeviceReady>
 801303a:	4603      	mov	r3, r0
 801303c:	2b00      	cmp	r3, #0
 801303e:	d104      	bne.n	801304a <DS3231_Init+0x42>
    	printf("Init DS3231 Success\n");
 8013040:	4804      	ldr	r0, [pc, #16]	@ (8013054 <DS3231_Init+0x4c>)
 8013042:	f003 fc95 	bl	8016970 <puts>
      return DS3231_Init_OK;
 8013046:	2300      	movs	r3, #0
 8013048:	e000      	b.n	801304c <DS3231_Init+0x44>
    }
    return DS3231_Fail;
 801304a:	2301      	movs	r3, #1
}
 801304c:	4618      	mov	r0, r3
 801304e:	3710      	adds	r7, #16
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	0801a39c 	.word	0x0801a39c

08013058 <DS3231_Read_time>:

DS3231_Status DS3231_Read_time(DS3231_t *pDS3231, uint8_t *data_read) {
 8013058:	b580      	push	{r7, lr}
 801305a:	b088      	sub	sp, #32
 801305c:	af04      	add	r7, sp, #16
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	6039      	str	r1, [r7, #0]
    uint8_t get_time[7];
    if (HAL_I2C_Mem_Read(pDS3231->i2c_port, pDS3231->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, get_time, 7, 1000) != HAL_OK) {
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6818      	ldr	r0, [r3, #0]
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	791b      	ldrb	r3, [r3, #4]
 801306a:	4619      	mov	r1, r3
 801306c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013070:	9302      	str	r3, [sp, #8]
 8013072:	2307      	movs	r3, #7
 8013074:	9301      	str	r3, [sp, #4]
 8013076:	f107 0308 	add.w	r3, r7, #8
 801307a:	9300      	str	r3, [sp, #0]
 801307c:	2301      	movs	r3, #1
 801307e:	2200      	movs	r2, #0
 8013080:	f7f0 ff50 	bl	8003f24 <HAL_I2C_Mem_Read>
 8013084:	4603      	mov	r3, r0
 8013086:	2b00      	cmp	r3, #0
 8013088:	d001      	beq.n	801308e <DS3231_Read_time+0x36>
      return DS3231_Fail;
 801308a:	2301      	movs	r3, #1
 801308c:	e03e      	b.n	801310c <DS3231_Read_time+0xb4>
    }
	
  data_read[0] = bcdToDec(get_time[0]);
 801308e:	7a3b      	ldrb	r3, [r7, #8]
 8013090:	4618      	mov	r0, r3
 8013092:	f000 f8b5 	bl	8013200 <bcdToDec>
 8013096:	4603      	mov	r3, r0
 8013098:	b2da      	uxtb	r2, r3
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	701a      	strb	r2, [r3, #0]
	data_read[1] = bcdToDec(get_time[1]);
 801309e:	7a7b      	ldrb	r3, [r7, #9]
 80130a0:	4618      	mov	r0, r3
 80130a2:	f000 f8ad 	bl	8013200 <bcdToDec>
 80130a6:	4602      	mov	r2, r0
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	3301      	adds	r3, #1
 80130ac:	b2d2      	uxtb	r2, r2
 80130ae:	701a      	strb	r2, [r3, #0]
	data_read[2] = bcdToDec(get_time[2]);
 80130b0:	7abb      	ldrb	r3, [r7, #10]
 80130b2:	4618      	mov	r0, r3
 80130b4:	f000 f8a4 	bl	8013200 <bcdToDec>
 80130b8:	4602      	mov	r2, r0
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	3302      	adds	r3, #2
 80130be:	b2d2      	uxtb	r2, r2
 80130c0:	701a      	strb	r2, [r3, #0]
	data_read[3] = bcdToDec(get_time[3]);
 80130c2:	7afb      	ldrb	r3, [r7, #11]
 80130c4:	4618      	mov	r0, r3
 80130c6:	f000 f89b 	bl	8013200 <bcdToDec>
 80130ca:	4602      	mov	r2, r0
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	3303      	adds	r3, #3
 80130d0:	b2d2      	uxtb	r2, r2
 80130d2:	701a      	strb	r2, [r3, #0]
	data_read[4] = bcdToDec(get_time[4]);
 80130d4:	7b3b      	ldrb	r3, [r7, #12]
 80130d6:	4618      	mov	r0, r3
 80130d8:	f000 f892 	bl	8013200 <bcdToDec>
 80130dc:	4602      	mov	r2, r0
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	3304      	adds	r3, #4
 80130e2:	b2d2      	uxtb	r2, r2
 80130e4:	701a      	strb	r2, [r3, #0]
	data_read[5] = bcdToDec(get_time[5]);
 80130e6:	7b7b      	ldrb	r3, [r7, #13]
 80130e8:	4618      	mov	r0, r3
 80130ea:	f000 f889 	bl	8013200 <bcdToDec>
 80130ee:	4602      	mov	r2, r0
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	3305      	adds	r3, #5
 80130f4:	b2d2      	uxtb	r2, r2
 80130f6:	701a      	strb	r2, [r3, #0]
	data_read[6] = bcdToDec(get_time[6]);
 80130f8:	7bbb      	ldrb	r3, [r7, #14]
 80130fa:	4618      	mov	r0, r3
 80130fc:	f000 f880 	bl	8013200 <bcdToDec>
 8013100:	4602      	mov	r2, r0
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	3306      	adds	r3, #6
 8013106:	b2d2      	uxtb	r2, r2
 8013108:	701a      	strb	r2, [r3, #0]
  return DS3231_Write_OK;
 801310a:	2302      	movs	r3, #2
}
 801310c:	4618      	mov	r0, r3
 801310e:	3710      	adds	r7, #16
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}

08013114 <DS3231_Write_time>:

DS3231_Status DS3231_Write_time(DS3231_t *pDS3231,uint8_t sec, uint8_t min, uint8_t hour, uint8_t day, uint8_t month, uint8_t year) {
 8013114:	b580      	push	{r7, lr}
 8013116:	b088      	sub	sp, #32
 8013118:	af04      	add	r7, sp, #16
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	4608      	mov	r0, r1
 801311e:	4611      	mov	r1, r2
 8013120:	461a      	mov	r2, r3
 8013122:	4603      	mov	r3, r0
 8013124:	70fb      	strb	r3, [r7, #3]
 8013126:	460b      	mov	r3, r1
 8013128:	70bb      	strb	r3, [r7, #2]
 801312a:	4613      	mov	r3, r2
 801312c:	707b      	strb	r3, [r7, #1]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 801312e:	78fb      	ldrb	r3, [r7, #3]
 8013130:	4618      	mov	r0, r3
 8013132:	f000 f841 	bl	80131b8 <decToBcd>
 8013136:	4603      	mov	r3, r0
 8013138:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 801313a:	78bb      	ldrb	r3, [r7, #2]
 801313c:	4618      	mov	r0, r3
 801313e:	f000 f83b 	bl	80131b8 <decToBcd>
 8013142:	4603      	mov	r3, r0
 8013144:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 8013146:	787b      	ldrb	r3, [r7, #1]
 8013148:	4618      	mov	r0, r3
 801314a:	f000 f835 	bl	80131b8 <decToBcd>
 801314e:	4603      	mov	r3, r0
 8013150:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(7);
 8013152:	2007      	movs	r0, #7
 8013154:	f000 f830 	bl	80131b8 <decToBcd>
 8013158:	4603      	mov	r3, r0
 801315a:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(day);
 801315c:	7e3b      	ldrb	r3, [r7, #24]
 801315e:	4618      	mov	r0, r3
 8013160:	f000 f82a 	bl	80131b8 <decToBcd>
 8013164:	4603      	mov	r3, r0
 8013166:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8013168:	7f3b      	ldrb	r3, [r7, #28]
 801316a:	4618      	mov	r0, r3
 801316c:	f000 f824 	bl	80131b8 <decToBcd>
 8013170:	4603      	mov	r3, r0
 8013172:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 8013174:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013178:	4618      	mov	r0, r3
 801317a:	f000 f81d 	bl	80131b8 <decToBcd>
 801317e:	4603      	mov	r3, r0
 8013180:	73bb      	strb	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(pDS3231->i2c_port, pDS3231->dev_address, 0x00, I2C_MEMADD_SIZE_8BIT, set_time, 7, 1000) != HAL_OK) {
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6818      	ldr	r0, [r3, #0]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	791b      	ldrb	r3, [r3, #4]
 801318a:	4619      	mov	r1, r3
 801318c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013190:	9302      	str	r3, [sp, #8]
 8013192:	2307      	movs	r3, #7
 8013194:	9301      	str	r3, [sp, #4]
 8013196:	f107 0308 	add.w	r3, r7, #8
 801319a:	9300      	str	r3, [sp, #0]
 801319c:	2301      	movs	r3, #1
 801319e:	2200      	movs	r2, #0
 80131a0:	f7f0 fdc6 	bl	8003d30 <HAL_I2C_Mem_Write>
 80131a4:	4603      	mov	r3, r0
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d001      	beq.n	80131ae <DS3231_Write_time+0x9a>
    return DS3231_Fail;
 80131aa:	2301      	movs	r3, #1
 80131ac:	e000      	b.n	80131b0 <DS3231_Write_time+0x9c>
  }
  return DS3231_Read_OK;
 80131ae:	2303      	movs	r3, #3
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3710      	adds	r7, #16
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <decToBcd>:

// Convert normal decimal numbers to binary coded decimal
static uint8_t decToBcd(int val)
{
 80131b8:	b480      	push	{r7}
 80131ba:	b083      	sub	sp, #12
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	4a0e      	ldr	r2, [pc, #56]	@ (80131fc <decToBcd+0x44>)
 80131c4:	fb82 1203 	smull	r1, r2, r2, r3
 80131c8:	1092      	asrs	r2, r2, #2
 80131ca:	17db      	asrs	r3, r3, #31
 80131cc:	1ad3      	subs	r3, r2, r3
 80131ce:	b2db      	uxtb	r3, r3
 80131d0:	011b      	lsls	r3, r3, #4
 80131d2:	b2d8      	uxtb	r0, r3
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	4b09      	ldr	r3, [pc, #36]	@ (80131fc <decToBcd+0x44>)
 80131d8:	fb83 1302 	smull	r1, r3, r3, r2
 80131dc:	1099      	asrs	r1, r3, #2
 80131de:	17d3      	asrs	r3, r2, #31
 80131e0:	1ac9      	subs	r1, r1, r3
 80131e2:	460b      	mov	r3, r1
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	440b      	add	r3, r1
 80131e8:	005b      	lsls	r3, r3, #1
 80131ea:	1ad1      	subs	r1, r2, r3
 80131ec:	b2cb      	uxtb	r3, r1
 80131ee:	4403      	add	r3, r0
 80131f0:	b2db      	uxtb	r3, r3
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	370c      	adds	r7, #12
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bc80      	pop	{r7}
 80131fa:	4770      	bx	lr
 80131fc:	66666667 	.word	0x66666667

08013200 <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
static int bcdToDec(uint8_t val)
{
 8013200:	b480      	push	{r7}
 8013202:	b083      	sub	sp, #12
 8013204:	af00      	add	r7, sp, #0
 8013206:	4603      	mov	r3, r0
 8013208:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 801320a:	79fb      	ldrb	r3, [r7, #7]
 801320c:	091b      	lsrs	r3, r3, #4
 801320e:	b2db      	uxtb	r3, r3
 8013210:	461a      	mov	r2, r3
 8013212:	4613      	mov	r3, r2
 8013214:	009b      	lsls	r3, r3, #2
 8013216:	4413      	add	r3, r2
 8013218:	005b      	lsls	r3, r3, #1
 801321a:	461a      	mov	r2, r3
 801321c:	79fb      	ldrb	r3, [r7, #7]
 801321e:	f003 030f 	and.w	r3, r3, #15
 8013222:	4413      	add	r3, r2
}
 8013224:	4618      	mov	r0, r3
 8013226:	370c      	adds	r7, #12
 8013228:	46bd      	mov	sp, r7
 801322a:	bc80      	pop	{r7}
 801322c:	4770      	bx	lr

0801322e <DWIN_SetPage>:
#include "DWIN_HMI.h"

void DWIN_SetPage(Dwin_t *pDwin, uint8_t page)
{
 801322e:	b580      	push	{r7, lr}
 8013230:	b086      	sub	sp, #24
 8013232:	af00      	add	r7, sp, #0
 8013234:	6078      	str	r0, [r7, #4]
 8013236:	460b      	mov	r3, r1
 8013238:	70fb      	strb	r3, [r7, #3]
    uint8_t sendBuffer[10] = {CMD_HEAD1, CMD_HEAD2, 0x07, CMD_WRITE, 0x00, 0x84, 0x5A, 0x01, 0x00, page};
 801323a:	235a      	movs	r3, #90	@ 0x5a
 801323c:	733b      	strb	r3, [r7, #12]
 801323e:	23a5      	movs	r3, #165	@ 0xa5
 8013240:	737b      	strb	r3, [r7, #13]
 8013242:	2307      	movs	r3, #7
 8013244:	73bb      	strb	r3, [r7, #14]
 8013246:	2382      	movs	r3, #130	@ 0x82
 8013248:	73fb      	strb	r3, [r7, #15]
 801324a:	2300      	movs	r3, #0
 801324c:	743b      	strb	r3, [r7, #16]
 801324e:	2384      	movs	r3, #132	@ 0x84
 8013250:	747b      	strb	r3, [r7, #17]
 8013252:	235a      	movs	r3, #90	@ 0x5a
 8013254:	74bb      	strb	r3, [r7, #18]
 8013256:	2301      	movs	r3, #1
 8013258:	74fb      	strb	r3, [r7, #19]
 801325a:	2300      	movs	r3, #0
 801325c:	753b      	strb	r3, [r7, #20]
 801325e:	78fb      	ldrb	r3, [r7, #3]
 8013260:	757b      	strb	r3, [r7, #21]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6818      	ldr	r0, [r3, #0]
 8013266:	f107 010c 	add.w	r1, r7, #12
 801326a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801326e:	220a      	movs	r2, #10
 8013270:	f7f4 fabf 	bl	80077f2 <HAL_UART_Transmit>
}
 8013274:	bf00      	nop
 8013276:	3718      	adds	r7, #24
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <DWIN_SetText>:

void DWIN_SetText(Dwin_t *pDwin, uint16_t VP_address, char *textData, uint16_t datalen) {
 801327c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013280:	b08a      	sub	sp, #40	@ 0x28
 8013282:	af00      	add	r7, sp, #0
 8013284:	60f8      	str	r0, [r7, #12]
 8013286:	607a      	str	r2, [r7, #4]
 8013288:	461a      	mov	r2, r3
 801328a:	460b      	mov	r3, r1
 801328c:	817b      	strh	r3, [r7, #10]
 801328e:	4613      	mov	r3, r2
 8013290:	813b      	strh	r3, [r7, #8]
 8013292:	466b      	mov	r3, sp
 8013294:	469a      	mov	sl, r3
    uint8_t ffEnding[2] = { 0xFF, 0xFF };
 8013296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801329a:	83bb      	strh	r3, [r7, #28]
    uint8_t sendBuffer[8 + datalen];
 801329c:	893b      	ldrh	r3, [r7, #8]
 801329e:	f103 0608 	add.w	r6, r3, #8
 80132a2:	1e73      	subs	r3, r6, #1
 80132a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80132a6:	4632      	mov	r2, r6
 80132a8:	2300      	movs	r3, #0
 80132aa:	4690      	mov	r8, r2
 80132ac:	4699      	mov	r9, r3
 80132ae:	f04f 0200 	mov.w	r2, #0
 80132b2:	f04f 0300 	mov.w	r3, #0
 80132b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80132ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80132be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80132c2:	4632      	mov	r2, r6
 80132c4:	2300      	movs	r3, #0
 80132c6:	4614      	mov	r4, r2
 80132c8:	461d      	mov	r5, r3
 80132ca:	f04f 0200 	mov.w	r2, #0
 80132ce:	f04f 0300 	mov.w	r3, #0
 80132d2:	00eb      	lsls	r3, r5, #3
 80132d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80132d8:	00e2      	lsls	r2, r4, #3
 80132da:	4633      	mov	r3, r6
 80132dc:	3307      	adds	r3, #7
 80132de:	08db      	lsrs	r3, r3, #3
 80132e0:	00db      	lsls	r3, r3, #3
 80132e2:	ebad 0d03 	sub.w	sp, sp, r3
 80132e6:	466b      	mov	r3, sp
 80132e8:	3300      	adds	r3, #0
 80132ea:	623b      	str	r3, [r7, #32]

    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 80132ec:	235a      	movs	r3, #90	@ 0x5a
 80132ee:	753b      	strb	r3, [r7, #20]
 80132f0:	23a5      	movs	r3, #165	@ 0xa5
 80132f2:	757b      	strb	r3, [r7, #21]
 80132f4:	893b      	ldrh	r3, [r7, #8]
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	3305      	adds	r3, #5
 80132fa:	b2db      	uxtb	r3, r3
 80132fc:	75bb      	strb	r3, [r7, #22]
 80132fe:	2382      	movs	r3, #130	@ 0x82
 8013300:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 8013302:	897b      	ldrh	r3, [r7, #10]
 8013304:	0a1b      	lsrs	r3, r3, #8
 8013306:	b29b      	uxth	r3, r3
 8013308:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 801330a:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF) };
 801330c:	897b      	ldrh	r3, [r7, #10]
 801330e:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(datalen + 5), CMD_WRITE,
 8013310:	767b      	strb	r3, [r7, #25]
    
    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 8013312:	6a3b      	ldr	r3, [r7, #32]
 8013314:	461a      	mov	r2, r3
 8013316:	f107 0314 	add.w	r3, r7, #20
 801331a:	6818      	ldr	r0, [r3, #0]
 801331c:	6010      	str	r0, [r2, #0]
 801331e:	889b      	ldrh	r3, [r3, #4]
 8013320:	8093      	strh	r3, [r2, #4]
    memcpy(sendBuffer + 6, textData, datalen);
 8013322:	6a3b      	ldr	r3, [r7, #32]
 8013324:	3306      	adds	r3, #6
 8013326:	893a      	ldrh	r2, [r7, #8]
 8013328:	6879      	ldr	r1, [r7, #4]
 801332a:	4618      	mov	r0, r3
 801332c:	f003 fddf 	bl	8016eee <memcpy>
    memcpy(sendBuffer + (6 + datalen), ffEnding, sizeof(ffEnding));
 8013330:	893b      	ldrh	r3, [r7, #8]
 8013332:	3306      	adds	r3, #6
 8013334:	461a      	mov	r2, r3
 8013336:	6a3b      	ldr	r3, [r7, #32]
 8013338:	4413      	add	r3, r2
 801333a:	8bba      	ldrh	r2, [r7, #28]
 801333c:	801a      	strh	r2, [r3, #0]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	6818      	ldr	r0, [r3, #0]
 8013342:	b2b2      	uxth	r2, r6
 8013344:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013348:	6a39      	ldr	r1, [r7, #32]
 801334a:	f7f4 fa52 	bl	80077f2 <HAL_UART_Transmit>
 801334e:	46d5      	mov	sp, sl
}
 8013350:	bf00      	nop
 8013352:	3728      	adds	r7, #40	@ 0x28
 8013354:	46bd      	mov	sp, r7
 8013356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801335c <DWIN_ClearText>:

void DWIN_ClearText(Dwin_t *pDwin, uint16_t VP_address) {
 801335c:	b580      	push	{r7, lr}
 801335e:	b082      	sub	sp, #8
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
 8013364:	460b      	mov	r3, r1
 8013366:	807b      	strh	r3, [r7, #2]
    DWIN_SetText(pDwin,VP_address,(uint8_t *)"",strlen(""));
 8013368:	8879      	ldrh	r1, [r7, #2]
 801336a:	2300      	movs	r3, #0
 801336c:	4a03      	ldr	r2, [pc, #12]	@ (801337c <DWIN_ClearText+0x20>)
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f7ff ff84 	bl	801327c <DWIN_SetText>
}
 8013374:	bf00      	nop
 8013376:	3708      	adds	r7, #8
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}
 801337c:	0801a3b0 	.word	0x0801a3b0

08013380 <DWIN_SetColorText>:

void DWIN_SetColorText(Dwin_t *pDwin, uint16_t SP_address, uint16_t color) {
 8013380:	b580      	push	{r7, lr}
 8013382:	b084      	sub	sp, #16
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	460b      	mov	r3, r1
 801338a:	807b      	strh	r3, [r7, #2]
 801338c:	4613      	mov	r3, r2
 801338e:	803b      	strh	r3, [r7, #0]
    SP_address = SP_address | 3; // offset color text
 8013390:	887b      	ldrh	r3, [r7, #2]
 8013392:	f043 0303 	orr.w	r3, r3, #3
 8013396:	807b      	strh	r3, [r7, #2]

    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 8013398:	235a      	movs	r3, #90	@ 0x5a
 801339a:	723b      	strb	r3, [r7, #8]
 801339c:	23a5      	movs	r3, #165	@ 0xa5
 801339e:	727b      	strb	r3, [r7, #9]
 80133a0:	2305      	movs	r3, #5
 80133a2:	72bb      	strb	r3, [r7, #10]
 80133a4:	2382      	movs	r3, #130	@ 0x82
 80133a6:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((SP_address >> 8) & 0xFF), (uint8_t)((SP_address)&0xFF), 
 80133a8:	887b      	ldrh	r3, [r7, #2]
 80133aa:	0a1b      	lsrs	r3, r3, #8
 80133ac:	b29b      	uxth	r3, r3
 80133ae:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 80133b0:	733b      	strb	r3, [r7, #12]
    (uint8_t)((SP_address >> 8) & 0xFF), (uint8_t)((SP_address)&0xFF), 
 80133b2:	887b      	ldrh	r3, [r7, #2]
 80133b4:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 80133b6:	737b      	strb	r3, [r7, #13]
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };
 80133b8:	883b      	ldrh	r3, [r7, #0]
 80133ba:	0a1b      	lsrs	r3, r3, #8
 80133bc:	b29b      	uxth	r3, r3
 80133be:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 80133c0:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((color >> 8) & 0xFF), (uint8_t)((color)&0xFF) };
 80133c2:	883b      	ldrh	r3, [r7, #0]
 80133c4:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE, 
 80133c6:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6818      	ldr	r0, [r3, #0]
 80133cc:	f107 0108 	add.w	r1, r7, #8
 80133d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80133d4:	2208      	movs	r2, #8
 80133d6:	f7f4 fa0c 	bl	80077f2 <HAL_UART_Transmit>
}
 80133da:	bf00      	nop
 80133dc:	3710      	adds	r7, #16
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <DWIN_SetVariable_Icon>:

void DWIN_SetVariable_Icon(Dwin_t *pDwin, uint16_t VP_address, uint16_t data ) {
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b084      	sub	sp, #16
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	6078      	str	r0, [r7, #4]
 80133ea:	460b      	mov	r3, r1
 80133ec:	807b      	strh	r3, [r7, #2]
 80133ee:	4613      	mov	r3, r2
 80133f0:	803b      	strh	r3, [r7, #0]
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 80133f2:	235a      	movs	r3, #90	@ 0x5a
 80133f4:	723b      	strb	r3, [r7, #8]
 80133f6:	23a5      	movs	r3, #165	@ 0xa5
 80133f8:	727b      	strb	r3, [r7, #9]
 80133fa:	2305      	movs	r3, #5
 80133fc:	72bb      	strb	r3, [r7, #10]
 80133fe:	2382      	movs	r3, #130	@ 0x82
 8013400:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 8013402:	887b      	ldrh	r3, [r7, #2]
 8013404:	0a1b      	lsrs	r3, r3, #8
 8013406:	b29b      	uxth	r3, r3
 8013408:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 801340a:	733b      	strb	r3, [r7, #12]
    (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF),
 801340c:	887b      	ldrh	r3, [r7, #2]
 801340e:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8013410:	737b      	strb	r3, [r7, #13]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 8013412:	883b      	ldrh	r3, [r7, #0]
 8013414:	0a1b      	lsrs	r3, r3, #8
 8013416:	b29b      	uxth	r3, r3
 8013418:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 801341a:	73bb      	strb	r3, [r7, #14]
    (uint8_t)((data >> 8) & 0xFF), (uint8_t)(data & 0xFF) };
 801341c:	883b      	ldrh	r3, [r7, #0]
 801341e:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[8] ={ CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE,
 8013420:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6818      	ldr	r0, [r3, #0]
 8013426:	f107 0108 	add.w	r1, r7, #8
 801342a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801342e:	2208      	movs	r2, #8
 8013430:	f7f4 f9df 	bl	80077f2 <HAL_UART_Transmit>
}
 8013434:	bf00      	nop
 8013436:	3710      	adds	r7, #16
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <DWIN_SetArray_Icon>:

void DWIN_SetArray_Icon(Dwin_t *pDwin, uint16_t VP_address_begin, uint8_t *data_array, uint8_t data_length ) {
 801343c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013440:	b08b      	sub	sp, #44	@ 0x2c
 8013442:	af00      	add	r7, sp, #0
 8013444:	60f8      	str	r0, [r7, #12]
 8013446:	607a      	str	r2, [r7, #4]
 8013448:	461a      	mov	r2, r3
 801344a:	460b      	mov	r3, r1
 801344c:	817b      	strh	r3, [r7, #10]
 801344e:	4613      	mov	r3, r2
 8013450:	727b      	strb	r3, [r7, #9]
 8013452:	466b      	mov	r3, sp
 8013454:	461e      	mov	r6, r3
    uint16_t Total_Data_Length = data_length * 2;
 8013456:	7a7b      	ldrb	r3, [r7, #9]
 8013458:	b29b      	uxth	r3, r3
 801345a:	005b      	lsls	r3, r3, #1
 801345c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t sendBuffer[6 +Total_Data_Length];
 801345e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013460:	1d99      	adds	r1, r3, #6
 8013462:	1e4b      	subs	r3, r1, #1
 8013464:	623b      	str	r3, [r7, #32]
 8013466:	460a      	mov	r2, r1
 8013468:	2300      	movs	r3, #0
 801346a:	4690      	mov	r8, r2
 801346c:	4699      	mov	r9, r3
 801346e:	f04f 0200 	mov.w	r2, #0
 8013472:	f04f 0300 	mov.w	r3, #0
 8013476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801347a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801347e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013482:	460a      	mov	r2, r1
 8013484:	2300      	movs	r3, #0
 8013486:	4614      	mov	r4, r2
 8013488:	461d      	mov	r5, r3
 801348a:	f04f 0200 	mov.w	r2, #0
 801348e:	f04f 0300 	mov.w	r3, #0
 8013492:	00eb      	lsls	r3, r5, #3
 8013494:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013498:	00e2      	lsls	r2, r4, #3
 801349a:	460b      	mov	r3, r1
 801349c:	3307      	adds	r3, #7
 801349e:	08db      	lsrs	r3, r3, #3
 80134a0:	00db      	lsls	r3, r3, #3
 80134a2:	ebad 0d03 	sub.w	sp, sp, r3
 80134a6:	466b      	mov	r3, sp
 80134a8:	3300      	adds	r3, #0
 80134aa:	61fb      	str	r3, [r7, #28]
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 80134ac:	235a      	movs	r3, #90	@ 0x5a
 80134ae:	753b      	strb	r3, [r7, #20]
 80134b0:	23a5      	movs	r3, #165	@ 0xa5
 80134b2:	757b      	strb	r3, [r7, #21]
 80134b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134b6:	b2db      	uxtb	r3, r3
 80134b8:	3303      	adds	r3, #3
 80134ba:	b2db      	uxtb	r3, r3
 80134bc:	75bb      	strb	r3, [r7, #22]
 80134be:	2382      	movs	r3, #130	@ 0x82
 80134c0:	75fb      	strb	r3, [r7, #23]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 80134c2:	897b      	ldrh	r3, [r7, #10]
 80134c4:	0a1b      	lsrs	r3, r3, #8
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 80134ca:	763b      	strb	r3, [r7, #24]
                           (uint8_t)((VP_address_begin >> 8) & 0xFF), (uint8_t)(VP_address_begin & 0xFF) };
 80134cc:	897b      	ldrh	r3, [r7, #10]
 80134ce:	b2db      	uxtb	r3, r3
    uint8_t startCMD[] = { CMD_HEAD1, CMD_HEAD2, (uint8_t)(Total_Data_Length + 3), CMD_WRITE,
 80134d0:	767b      	strb	r3, [r7, #25]

    memcpy(sendBuffer, startCMD, sizeof(startCMD));
 80134d2:	69fb      	ldr	r3, [r7, #28]
 80134d4:	461a      	mov	r2, r3
 80134d6:	f107 0314 	add.w	r3, r7, #20
 80134da:	6818      	ldr	r0, [r3, #0]
 80134dc:	6010      	str	r0, [r2, #0]
 80134de:	889b      	ldrh	r3, [r3, #4]
 80134e0:	8093      	strh	r3, [r2, #4]
    /* Convert data array uint8_t to uint16_t */
    for (uint16_t i = 0; i < data_length; i++) {
 80134e2:	2300      	movs	r3, #0
 80134e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80134e6:	e012      	b.n	801350e <DWIN_SetArray_Icon+0xd2>
        sendBuffer[6 + (i * 2)] = 0x00;              // High byte 
 80134e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80134ea:	3303      	adds	r3, #3
 80134ec:	005b      	lsls	r3, r3, #1
 80134ee:	69fa      	ldr	r2, [r7, #28]
 80134f0:	2000      	movs	r0, #0
 80134f2:	54d0      	strb	r0, [r2, r3]
        sendBuffer[6 + (i * 2) + 1] = data_array[i]; // Low byte is data
 80134f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	441a      	add	r2, r3
 80134fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80134fc:	3303      	adds	r3, #3
 80134fe:	005b      	lsls	r3, r3, #1
 8013500:	3301      	adds	r3, #1
 8013502:	7810      	ldrb	r0, [r2, #0]
 8013504:	69fa      	ldr	r2, [r7, #28]
 8013506:	54d0      	strb	r0, [r2, r3]
    for (uint16_t i = 0; i < data_length; i++) {
 8013508:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801350a:	3301      	adds	r3, #1
 801350c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801350e:	7a7b      	ldrb	r3, [r7, #9]
 8013510:	b29b      	uxth	r3, r3
 8013512:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013514:	429a      	cmp	r2, r3
 8013516:	d3e7      	bcc.n	80134e8 <DWIN_SetArray_Icon+0xac>
    }

    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	6818      	ldr	r0, [r3, #0]
 801351c:	b28a      	uxth	r2, r1
 801351e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013522:	69f9      	ldr	r1, [r7, #28]
 8013524:	f7f4 f965 	bl	80077f2 <HAL_UART_Transmit>
 8013528:	46b5      	mov	sp, r6
}
 801352a:	bf00      	nop
 801352c:	372c      	adds	r7, #44	@ 0x2c
 801352e:	46bd      	mov	sp, r7
 8013530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013534 <DWIN_Create_Basic_line>:

void DWIN_Create_Basic_line(Dwin_t *pDwin, uint16_t VP_address, uint16_t x_base, uint16_t y_base, uint8_t *array_data, uint8_t size) {
 8013534:	b5b0      	push	{r4, r5, r7, lr}
 8013536:	b0d0      	sub	sp, #320	@ 0x140
 8013538:	af00      	add	r7, sp, #0
 801353a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 801353e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8013542:	6020      	str	r0, [r4, #0]
 8013544:	460c      	mov	r4, r1
 8013546:	4610      	mov	r0, r2
 8013548:	4619      	mov	r1, r3
 801354a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801354e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8013552:	4622      	mov	r2, r4
 8013554:	801a      	strh	r2, [r3, #0]
 8013556:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801355a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801355e:	4602      	mov	r2, r0
 8013560:	801a      	strh	r2, [r3, #0]
 8013562:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013566:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 801356a:	460a      	mov	r2, r1
 801356c:	801a      	strh	r2, [r3, #0]
    uint8_t data_length = 11 + (16*size);
 801356e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8013572:	011b      	lsls	r3, r3, #4
 8013574:	b2db      	uxtb	r3, r3
 8013576:	330b      	adds	r3, #11
 8013578:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
    uint16_t num_connection = (size * 4) - 1;
 801357c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8013580:	b29b      	uxth	r3, r3
 8013582:	009b      	lsls	r3, r3, #2
 8013584:	b29b      	uxth	r3, r3
 8013586:	3b01      	subs	r3, #1
 8013588:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 801358c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013590:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013594:	4618      	mov	r0, r3
 8013596:	23ff      	movs	r3, #255	@ 0xff
 8013598:	461a      	mov	r2, r3
 801359a:	2100      	movs	r1, #0
 801359c:	f003 fb5e 	bl	8016c5c <memset>
 80135a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80135a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80135a8:	225a      	movs	r2, #90	@ 0x5a
 80135aa:	701a      	strb	r2, [r3, #0]
 80135ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80135b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80135b4:	22a5      	movs	r2, #165	@ 0xa5
 80135b6:	705a      	strb	r2, [r3, #1]
 80135b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80135bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80135c0:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 80135c4:	709a      	strb	r2, [r3, #2]
 80135c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80135ca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80135ce:	2282      	movs	r2, #130	@ 0x82
 80135d0:	70da      	strb	r2, [r3, #3]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 80135d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80135d6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80135da:	881b      	ldrh	r3, [r3, #0]
 80135dc:	0a1b      	lsrs	r3, r3, #8
 80135de:	b29b      	uxth	r3, r3
 80135e0:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 80135e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80135e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80135ea:	711a      	strb	r2, [r3, #4]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 80135ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80135f0:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80135f4:	881b      	ldrh	r3, [r3, #0]
 80135f6:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 80135f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80135fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013600:	715a      	strb	r2, [r3, #5]
 8013602:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013606:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801360a:	2202      	movs	r2, #2
 801360c:	71da      	strb	r2, [r3, #7]
                            (uint8_t)((num_connection >> 8) & 0xFF), (uint8_t)(num_connection & 0xFF), 0x01, 0xED };
 801360e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8013612:	0a1b      	lsrs	r3, r3, #8
 8013614:	b29b      	uxth	r3, r3
 8013616:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 8013618:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801361c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013620:	721a      	strb	r2, [r3, #8]
                            (uint8_t)((num_connection >> 8) & 0xFF), (uint8_t)(num_connection & 0xFF), 0x01, 0xED };
 8013622:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8013626:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, data_length, CMD_WRITE,
 8013628:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801362c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013630:	725a      	strb	r2, [r3, #9]
 8013632:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013636:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801363a:	2201      	movs	r2, #1
 801363c:	729a      	strb	r2, [r3, #10]
 801363e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013642:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013646:	22ed      	movs	r2, #237	@ 0xed
 8013648:	72da      	strb	r2, [r3, #11]
    uint8_t End_bit[2] = {0xFF, 0x00};
 801364a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801364e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013652:	22ff      	movs	r2, #255	@ 0xff
 8013654:	801a      	strh	r2, [r3, #0]
    uint16_t x1,y1,x2,y2,x3,y3,x4,y4 = 0;
 8013656:	2300      	movs	r3, #0
 8013658:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    uint8_t index = 0;
 801365c:	2300      	movs	r3, #0
 801365e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    

    // Create the send Buffer 
    for (uint8_t i = 0; i < size; i++) {
 8013662:	2300      	movs	r3, #0
 8013664:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 8013668:	e120      	b.n	80138ac <DWIN_Create_Basic_line+0x378>
        y1 = y2 = y3 = y4 = y_base;
 801366a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801366e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8013672:	881b      	ldrh	r3, [r3, #0]
 8013674:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 8013678:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 801367c:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 8013680:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8013684:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 8013688:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 801368c:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        x1 = x_base + (25 * index);
 8013690:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8013694:	b29b      	uxth	r3, r3
 8013696:	461a      	mov	r2, r3
 8013698:	0092      	lsls	r2, r2, #2
 801369a:	4413      	add	r3, r2
 801369c:	461a      	mov	r2, r3
 801369e:	0091      	lsls	r1, r2, #2
 80136a0:	461a      	mov	r2, r3
 80136a2:	460b      	mov	r3, r1
 80136a4:	4413      	add	r3, r2
 80136a6:	b29a      	uxth	r2, r3
 80136a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80136ac:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80136b0:	881b      	ldrh	r3, [r3, #0]
 80136b2:	4413      	add	r3, r2
 80136b4:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
        ++index; 
 80136b8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80136bc:	3301      	adds	r3, #1
 80136be:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        x2 = x_base + (25 * index);
 80136c2:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	461a      	mov	r2, r3
 80136ca:	0092      	lsls	r2, r2, #2
 80136cc:	4413      	add	r3, r2
 80136ce:	461a      	mov	r2, r3
 80136d0:	0091      	lsls	r1, r2, #2
 80136d2:	461a      	mov	r2, r3
 80136d4:	460b      	mov	r3, r1
 80136d6:	4413      	add	r3, r2
 80136d8:	b29a      	uxth	r2, r3
 80136da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80136de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80136e2:	881b      	ldrh	r3, [r3, #0]
 80136e4:	4413      	add	r3, r2
 80136e6:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
        ++index;
 80136ea:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80136ee:	3301      	adds	r3, #1
 80136f0:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        x3 = x2;
 80136f4:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80136f8:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
        x4 = x_base + (25 * index);
 80136fc:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8013700:	b29b      	uxth	r3, r3
 8013702:	461a      	mov	r2, r3
 8013704:	0092      	lsls	r2, r2, #2
 8013706:	4413      	add	r3, r2
 8013708:	461a      	mov	r2, r3
 801370a:	0091      	lsls	r1, r2, #2
 801370c:	461a      	mov	r2, r3
 801370e:	460b      	mov	r3, r1
 8013710:	4413      	add	r3, r2
 8013712:	b29a      	uxth	r2, r3
 8013714:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013718:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801371c:	881b      	ldrh	r3, [r3, #0]
 801371e:	4413      	add	r3, r2
 8013720:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
        if (array_data[i]) { // HIGH CLOCK
 8013724:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8013728:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801372c:	4413      	add	r3, r2
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d013      	beq.n	801375c <DWIN_Create_Basic_line+0x228>
            y1 = y2 = y3 = y4 = y_base - 30;  
 8013734:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013738:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 801373c:	881b      	ldrh	r3, [r3, #0]
 801373e:	3b1e      	subs	r3, #30
 8013740:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
 8013744:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8013748:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
 801374c:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8013750:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
 8013754:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8013758:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        }
        // Create clock buffer
        uint8_t Clock_Buffer[] = { (x1 >> 8) & 0xFF, (x1 & 0xFF), (y1 >> 8) & 0xFF, (y1 & 0xFF),
 801375c:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8013760:	0a1b      	lsrs	r3, r3, #8
 8013762:	b29b      	uxth	r3, r3
 8013764:	b2da      	uxtb	r2, r3
 8013766:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801376a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801376e:	701a      	strb	r2, [r3, #0]
 8013770:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8013774:	b2da      	uxtb	r2, r3
 8013776:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801377a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801377e:	705a      	strb	r2, [r3, #1]
 8013780:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8013784:	0a1b      	lsrs	r3, r3, #8
 8013786:	b29b      	uxth	r3, r3
 8013788:	b2da      	uxtb	r2, r3
 801378a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801378e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013792:	709a      	strb	r2, [r3, #2]
 8013794:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8013798:	b2da      	uxtb	r2, r3
 801379a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801379e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80137a2:	70da      	strb	r2, [r3, #3]
 80137a4:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80137a8:	0a1b      	lsrs	r3, r3, #8
 80137aa:	b29b      	uxth	r3, r3
 80137ac:	b2da      	uxtb	r2, r3
 80137ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80137b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80137b6:	711a      	strb	r2, [r3, #4]
 80137b8:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80137bc:	b2da      	uxtb	r2, r3
 80137be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80137c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80137c6:	715a      	strb	r2, [r3, #5]
 80137c8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80137cc:	0a1b      	lsrs	r3, r3, #8
 80137ce:	b29b      	uxth	r3, r3
 80137d0:	b2da      	uxtb	r2, r3
 80137d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80137d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80137da:	719a      	strb	r2, [r3, #6]
 80137dc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 80137e0:	b2da      	uxtb	r2, r3
 80137e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80137e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80137ea:	71da      	strb	r2, [r3, #7]
 80137ec:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 80137f0:	0a1b      	lsrs	r3, r3, #8
 80137f2:	b29b      	uxth	r3, r3
 80137f4:	b2da      	uxtb	r2, r3
 80137f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80137fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80137fe:	721a      	strb	r2, [r3, #8]
 8013800:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8013804:	b2da      	uxtb	r2, r3
 8013806:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801380a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801380e:	725a      	strb	r2, [r3, #9]
 8013810:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8013814:	0a1b      	lsrs	r3, r3, #8
 8013816:	b29b      	uxth	r3, r3
 8013818:	b2da      	uxtb	r2, r3
 801381a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801381e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013822:	729a      	strb	r2, [r3, #10]
 8013824:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8013828:	b2da      	uxtb	r2, r3
 801382a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801382e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013832:	72da      	strb	r2, [r3, #11]
 8013834:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8013838:	0a1b      	lsrs	r3, r3, #8
 801383a:	b29b      	uxth	r3, r3
 801383c:	b2da      	uxtb	r2, r3
 801383e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013842:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013846:	731a      	strb	r2, [r3, #12]
 8013848:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 801384c:	b2da      	uxtb	r2, r3
 801384e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013852:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013856:	735a      	strb	r2, [r3, #13]
 8013858:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 801385c:	0a1b      	lsrs	r3, r3, #8
 801385e:	b29b      	uxth	r3, r3
 8013860:	b2da      	uxtb	r2, r3
 8013862:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013866:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801386a:	739a      	strb	r2, [r3, #14]
 801386c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8013870:	b2da      	uxtb	r2, r3
 8013872:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013876:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801387a:	73da      	strb	r2, [r3, #15]
                        (x2 >> 8) & 0xFF, (x2 & 0xFF), (y2 >> 8) & 0xFF, (y2 & 0xFF), 
                        (x3 >> 8) & 0xFF, (x3 & 0xFF), (y3 >> 8) & 0xFF, (y3 & 0xFF), 
                        (x4 >> 8) & 0xFF, (x4 & 0xFF), (y4 >> 8) & 0xFF, (y4 & 0xFF), };

        // add to sendBuffer 
        memcpy(sendBuffer + (12 + 16 * i) ,Clock_Buffer,sizeof(Clock_Buffer));
 801387c:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8013880:	011b      	lsls	r3, r3, #4
 8013882:	330c      	adds	r3, #12
 8013884:	461a      	mov	r2, r3
 8013886:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801388a:	441a      	add	r2, r3
 801388c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8013890:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013894:	4614      	mov	r4, r2
 8013896:	461d      	mov	r5, r3
 8013898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801389a:	6020      	str	r0, [r4, #0]
 801389c:	6061      	str	r1, [r4, #4]
 801389e:	60a2      	str	r2, [r4, #8]
 80138a0:	60e3      	str	r3, [r4, #12]
    for (uint8_t i = 0; i < size; i++) {
 80138a2:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 80138a6:	3301      	adds	r3, #1
 80138a8:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 80138ac:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 80138b0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80138b4:	429a      	cmp	r2, r3
 80138b6:	f4ff aed8 	bcc.w	801366a <DWIN_Create_Basic_line+0x136>
    }
    // End bit 
    memcpy(sendBuffer + (data_length + 1),End_bit,2);
 80138ba:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 80138be:	3301      	adds	r3, #1
 80138c0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80138c4:	4413      	add	r3, r2
 80138c6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80138ca:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80138ce:	8812      	ldrh	r2, [r2, #0]
 80138d0:	801a      	strh	r2, [r3, #0]


    // Send data
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 80138d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80138d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	6818      	ldr	r0, [r3, #0]
 80138de:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80138e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80138e6:	22ff      	movs	r2, #255	@ 0xff
 80138e8:	f7f3 ff83 	bl	80077f2 <HAL_UART_Transmit>
}
 80138ec:	bf00      	nop
 80138ee:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bdb0      	pop	{r4, r5, r7, pc}

080138f6 <DWIN_SetWidth_Basic_line>:

void DWIN_SetWidth_Basic_line(Dwin_t *pDwin, uint16_t SP_Address, uint8_t width) {
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b084      	sub	sp, #16
 80138fa:	af00      	add	r7, sp, #0
 80138fc:	6078      	str	r0, [r7, #4]
 80138fe:	460b      	mov	r3, r1
 8013900:	807b      	strh	r3, [r7, #2]
 8013902:	4613      	mov	r3, r2
 8013904:	707b      	strb	r3, [r7, #1]
    SP_Address = SP_Address | 7; // offset width line 
 8013906:	887b      	ldrh	r3, [r7, #2]
 8013908:	f043 0307 	orr.w	r3, r3, #7
 801390c:	807b      	strh	r3, [r7, #2]
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 801390e:	235a      	movs	r3, #90	@ 0x5a
 8013910:	723b      	strb	r3, [r7, #8]
 8013912:	23a5      	movs	r3, #165	@ 0xa5
 8013914:	727b      	strb	r3, [r7, #9]
 8013916:	2305      	movs	r3, #5
 8013918:	72bb      	strb	r3, [r7, #10]
 801391a:	2382      	movs	r3, #130	@ 0x82
 801391c:	72fb      	strb	r3, [r7, #11]
    (uint8_t)((SP_Address >> 8) & 0xFF), (uint8_t)(SP_Address & 0xFF),
 801391e:	887b      	ldrh	r3, [r7, #2]
 8013920:	0a1b      	lsrs	r3, r3, #8
 8013922:	b29b      	uxth	r3, r3
 8013924:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 8013926:	733b      	strb	r3, [r7, #12]
    (uint8_t)((SP_Address >> 8) & 0xFF), (uint8_t)(SP_Address & 0xFF),
 8013928:	887b      	ldrh	r3, [r7, #2]
 801392a:	b2db      	uxtb	r3, r3
    uint8_t sendBuffer[] = {CMD_HEAD1, CMD_HEAD2, 0x05, CMD_WRITE , 
 801392c:	737b      	strb	r3, [r7, #13]
 801392e:	2300      	movs	r3, #0
 8013930:	73bb      	strb	r3, [r7, #14]
 8013932:	787b      	ldrb	r3, [r7, #1]
 8013934:	73fb      	strb	r3, [r7, #15]
    (uint8_t)(0x00), (uint8_t)(width & 0xFF) };
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),500);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6818      	ldr	r0, [r3, #0]
 801393a:	f107 0108 	add.w	r1, r7, #8
 801393e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8013942:	2208      	movs	r2, #8
 8013944:	f7f3 ff55 	bl	80077f2 <HAL_UART_Transmit>
}
 8013948:	bf00      	nop
 801394a:	3710      	adds	r7, #16
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <DWIN_Create_Single_line>:

void DWIN_Create_Single_line(Dwin_t *pDwin, uint16_t VP_address, uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint16_t color) {
 8013950:	b590      	push	{r4, r7, lr}
 8013952:	b0c5      	sub	sp, #276	@ 0x114
 8013954:	af00      	add	r7, sp, #0
 8013956:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 801395a:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 801395e:	6020      	str	r0, [r4, #0]
 8013960:	460c      	mov	r4, r1
 8013962:	4610      	mov	r0, r2
 8013964:	4619      	mov	r1, r3
 8013966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801396a:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 801396e:	4622      	mov	r2, r4
 8013970:	801a      	strh	r2, [r3, #0]
 8013972:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801397a:	4602      	mov	r2, r0
 801397c:	801a      	strh	r2, [r3, #0]
 801397e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013982:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8013986:	460a      	mov	r2, r1
 8013988:	801a      	strh	r2, [r3, #0]
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 801398a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801398e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013992:	4618      	mov	r0, r3
 8013994:	23ff      	movs	r3, #255	@ 0xff
 8013996:	461a      	mov	r2, r3
 8013998:	2100      	movs	r1, #0
 801399a:	f003 f95f 	bl	8016c5c <memset>
 801399e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80139a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80139a6:	225a      	movs	r2, #90	@ 0x5a
 80139a8:	701a      	strb	r2, [r3, #0]
 80139aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80139ae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80139b2:	22a5      	movs	r2, #165	@ 0xa5
 80139b4:	705a      	strb	r2, [r3, #1]
 80139b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80139ba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80139be:	2213      	movs	r2, #19
 80139c0:	709a      	strb	r2, [r3, #2]
 80139c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80139c6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80139ca:	2282      	movs	r2, #130	@ 0x82
 80139cc:	70da      	strb	r2, [r3, #3]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 80139ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80139d2:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 80139d6:	881b      	ldrh	r3, [r3, #0]
 80139d8:	0a1b      	lsrs	r3, r3, #8
 80139da:	b29b      	uxth	r3, r3
 80139dc:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 80139de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80139e2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80139e6:	711a      	strb	r2, [r3, #4]
                            (uint8_t)((VP_address >> 8) & 0xFF), (uint8_t)(VP_address & 0xFF), 0x00, 0x02,
 80139e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80139ec:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 80139f0:	881b      	ldrh	r3, [r3, #0]
 80139f2:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 80139f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80139f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80139fc:	715a      	strb	r2, [r3, #5]
 80139fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a02:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013a06:	2202      	movs	r2, #2
 8013a08:	71da      	strb	r2, [r3, #7]
 8013a0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a0e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013a12:	2201      	movs	r2, #1
 8013a14:	725a      	strb	r2, [r3, #9]
                            (uint8_t)((0x0001 >> 8) & 0xFF), (uint8_t)(0x0001 & 0xFF),
                            (uint8_t)((color >> 8) & 0xFF), (uint8_t)(color & 0xFF),
 8013a16:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8013a1a:	0a1b      	lsrs	r3, r3, #8
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 8013a20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013a28:	729a      	strb	r2, [r3, #10]
                            (uint8_t)((color >> 8) & 0xFF), (uint8_t)(color & 0xFF),
 8013a2a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8013a2e:	b2da      	uxtb	r2, r3
    uint8_t sendBuffer[255] = { CMD_HEAD1, CMD_HEAD2, 0x13, CMD_WRITE,
 8013a30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a34:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013a38:	72da      	strb	r2, [r3, #11]
 8013a3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013a42:	881b      	ldrh	r3, [r3, #0]
 8013a44:	0a1b      	lsrs	r3, r3, #8
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	b2da      	uxtb	r2, r3
 8013a4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a4e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013a52:	731a      	strb	r2, [r3, #12]
 8013a54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013a5c:	881b      	ldrh	r3, [r3, #0]
 8013a5e:	b2da      	uxtb	r2, r3
 8013a60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a64:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013a68:	735a      	strb	r2, [r3, #13]
 8013a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a6e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8013a72:	881b      	ldrh	r3, [r3, #0]
 8013a74:	0a1b      	lsrs	r3, r3, #8
 8013a76:	b29b      	uxth	r3, r3
 8013a78:	b2da      	uxtb	r2, r3
 8013a7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a7e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013a82:	739a      	strb	r2, [r3, #14]
 8013a84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a88:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8013a8c:	881b      	ldrh	r3, [r3, #0]
 8013a8e:	b2da      	uxtb	r2, r3
 8013a90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013a94:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013a98:	73da      	strb	r2, [r3, #15]
 8013a9a:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 8013a9e:	0a1b      	lsrs	r3, r3, #8
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	b2da      	uxtb	r2, r3
 8013aa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013aa8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013aac:	741a      	strb	r2, [r3, #16]
 8013aae:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 8013ab2:	b2da      	uxtb	r2, r3
 8013ab4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013ab8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013abc:	745a      	strb	r2, [r3, #17]
 8013abe:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8013ac2:	0a1b      	lsrs	r3, r3, #8
 8013ac4:	b29b      	uxth	r3, r3
 8013ac6:	b2da      	uxtb	r2, r3
 8013ac8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013acc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013ad0:	749a      	strb	r2, [r3, #18]
 8013ad2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8013ad6:	b2da      	uxtb	r2, r3
 8013ad8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013adc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013ae0:	74da      	strb	r2, [r3, #19]
 8013ae2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013ae6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013aea:	22ff      	movs	r2, #255	@ 0xff
 8013aec:	751a      	strb	r2, [r3, #20]
                            (x_1 >> 8) & 0xFF, (x_1 & 0xFF), (y_1 >> 8) & 0xFF, (y_1 & 0xFF),
                            (x_2 >> 8) & 0xFF, (x_2 & 0xFF), (y_2 >> 8) & 0xFF, (y_2 & 0xFF), 0xFF, 0x00 };
    HAL_UART_Transmit(pDwin->pUart,sendBuffer,sizeof(sendBuffer),1000);
 8013aee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	6818      	ldr	r0, [r3, #0]
 8013afa:	f107 0110 	add.w	r1, r7, #16
 8013afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013b02:	22ff      	movs	r2, #255	@ 0xff
 8013b04:	f7f3 fe75 	bl	80077f2 <HAL_UART_Transmit>
}
 8013b08:	bf00      	nop
 8013b0a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd90      	pop	{r4, r7, pc}

08013b12 <DWIN_SetCallback>:
    }
}

// Set DWIN callback function when receive data 
void DWIN_SetCallback(Dwin_t *pDwin, pListenDWIN dwin_callback)
{
 8013b12:	b480      	push	{r7}
 8013b14:	b083      	sub	sp, #12
 8013b16:	af00      	add	r7, sp, #0
 8013b18:	6078      	str	r0, [r7, #4]
 8013b1a:	6039      	str	r1, [r7, #0]
    pDwin->p_ListenDWIN_Callback = dwin_callback;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	683a      	ldr	r2, [r7, #0]
 8013b20:	609a      	str	r2, [r3, #8]
}
 8013b22:	bf00      	nop
 8013b24:	370c      	adds	r7, #12
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bc80      	pop	{r7}
 8013b2a:	4770      	bx	lr

08013b2c <DWIN_Listen>:

void DWIN_Listen(Dwin_t *pDwin, uint8_t *RX_Buffer)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b084      	sub	sp, #16
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	6039      	str	r1, [r7, #0]
    uint16_t VPaddress;
    uint16_t lowByte;
    uint16_t highByte;


    if( RX_Buffer[0] == 0x5A && RX_Buffer[1] == 0xA5 ) 
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	781b      	ldrb	r3, [r3, #0]
 8013b3a:	2b5a      	cmp	r3, #90	@ 0x5a
 8013b3c:	d133      	bne.n	8013ba6 <DWIN_Listen+0x7a>
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	3301      	adds	r3, #1
 8013b42:	781b      	ldrb	r3, [r3, #0]
 8013b44:	2ba5      	cmp	r3, #165	@ 0xa5
 8013b46:	d12e      	bne.n	8013ba6 <DWIN_Listen+0x7a>
    {
        if( RX_Buffer[3] == 0x83 )   // READ INSTRUCTION 
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	3303      	adds	r3, #3
 8013b4c:	781b      	ldrb	r3, [r3, #0]
 8013b4e:	2b83      	cmp	r3, #131	@ 0x83
 8013b50:	d129      	bne.n	8013ba6 <DWIN_Listen+0x7a>
        {
            datalength = RX_Buffer[2];
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	789b      	ldrb	r3, [r3, #2]
 8013b56:	73fb      	strb	r3, [r7, #15]
            datalength += 2; // Plus with Frame header
 8013b58:	7bfb      	ldrb	r3, [r7, #15]
 8013b5a:	3302      	adds	r3, #2
 8013b5c:	73fb      	strb	r3, [r7, #15]
            // get vp address
            VPaddress = (uint16_t)(RX_Buffer[4] << 8 | RX_Buffer[5]);
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	3304      	adds	r3, #4
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	b21b      	sxth	r3, r3
 8013b66:	021b      	lsls	r3, r3, #8
 8013b68:	b21a      	sxth	r2, r3
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	3305      	adds	r3, #5
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	b21b      	sxth	r3, r3
 8013b72:	4313      	orrs	r3, r2
 8013b74:	b21b      	sxth	r3, r3
 8013b76:	81bb      	strh	r3, [r7, #12]
            /* get return key value */
            lowByte = RX_Buffer[datalength];  
 8013b78:	7bfb      	ldrb	r3, [r7, #15]
 8013b7a:	683a      	ldr	r2, [r7, #0]
 8013b7c:	4413      	add	r3, r2
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	817b      	strh	r3, [r7, #10]
            highByte = RX_Buffer[datalength-1];
 8013b82:	7bfb      	ldrb	r3, [r7, #15]
 8013b84:	3b01      	subs	r3, #1
 8013b86:	683a      	ldr	r2, [r7, #0]
 8013b88:	4413      	add	r3, r2
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	813b      	strh	r3, [r7, #8]

            // Call back function
            if( pDwin->p_ListenDWIN_Callback != NULL )
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	689b      	ldr	r3, [r3, #8]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d007      	beq.n	8013ba6 <DWIN_Listen+0x7a>
            {
                pDwin->p_ListenDWIN_Callback(VPaddress,lowByte,highByte);
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	689b      	ldr	r3, [r3, #8]
 8013b9a:	897a      	ldrh	r2, [r7, #10]
 8013b9c:	b2d1      	uxtb	r1, r2
 8013b9e:	893a      	ldrh	r2, [r7, #8]
 8013ba0:	b2d2      	uxtb	r2, r2
 8013ba2:	89b8      	ldrh	r0, [r7, #12]
 8013ba4:	4798      	blx	r3
            }
        }
    }

    
}
 8013ba6:	bf00      	nop
 8013ba8:	3710      	adds	r7, #16
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}

08013bae <isotp_ms_to_st_min>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 8013bae:	b480      	push	{r7}
 8013bb0:	b085      	sub	sp, #20
 8013bb2:	af00      	add	r7, sp, #0
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 8013bb8:	79fb      	ldrb	r3, [r7, #7]
 8013bba:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 8013bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	da01      	bge.n	8013bc8 <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 8013bc4:	237f      	movs	r3, #127	@ 0x7f
 8013bc6:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 8013bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3714      	adds	r7, #20
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bc80      	pop	{r7}
 8013bd2:	4770      	bx	lr

08013bd4 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 8013bd4:	b480      	push	{r7}
 8013bd6:	b085      	sub	sp, #20
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	4603      	mov	r3, r0
 8013bdc:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9) {
 8013bde:	79fb      	ldrb	r3, [r7, #7]
 8013be0:	2bf0      	cmp	r3, #240	@ 0xf0
 8013be2:	d905      	bls.n	8013bf0 <isotp_st_min_to_ms+0x1c>
 8013be4:	79fb      	ldrb	r3, [r7, #7]
 8013be6:	2bf9      	cmp	r3, #249	@ 0xf9
 8013be8:	d802      	bhi.n	8013bf0 <isotp_st_min_to_ms+0x1c>
        ms = 1;
 8013bea:	2301      	movs	r3, #1
 8013bec:	73fb      	strb	r3, [r7, #15]
 8013bee:	e008      	b.n	8013c02 <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 8013bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	db02      	blt.n	8013bfe <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 8013bf8:	79fb      	ldrb	r3, [r7, #7]
 8013bfa:	73fb      	strb	r3, [r7, #15]
 8013bfc:	e001      	b.n	8013c02 <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 8013c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	3714      	adds	r7, #20
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bc80      	pop	{r7}
 8013c0c:	4770      	bx	lr

08013c0e <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 8013c0e:	b580      	push	{r7, lr}
 8013c10:	b086      	sub	sp, #24
 8013c12:	af00      	add	r7, sp, #0
 8013c14:	6078      	str	r0, [r7, #4]
 8013c16:	4608      	mov	r0, r1
 8013c18:	4611      	mov	r1, r2
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	70fb      	strb	r3, [r7, #3]
 8013c20:	460b      	mov	r3, r1
 8013c22:	70bb      	strb	r3, [r7, #2]
 8013c24:	4613      	mov	r3, r2
 8013c26:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 8013c28:	7b3b      	ldrb	r3, [r7, #12]
 8013c2a:	2203      	movs	r2, #3
 8013c2c:	f362 1307 	bfi	r3, r2, #4, #4
 8013c30:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 8013c32:	78fb      	ldrb	r3, [r7, #3]
 8013c34:	f003 030f 	and.w	r3, r3, #15
 8013c38:	b2da      	uxtb	r2, r3
 8013c3a:	7b3b      	ldrb	r3, [r7, #12]
 8013c3c:	f362 0303 	bfi	r3, r2, #0, #4
 8013c40:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 8013c42:	78bb      	ldrb	r3, [r7, #2]
 8013c44:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 8013c46:	787b      	ldrb	r3, [r7, #1]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7ff ffb0 	bl	8013bae <isotp_ms_to_st_min>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
 8013c52:	f107 030c 	add.w	r3, r7, #12
 8013c56:	3303      	adds	r3, #3
 8013c58:	2205      	movs	r2, #5
 8013c5a:	2100      	movs	r1, #0
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f002 fffd 	bl	8016c5c <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	f107 010c 	add.w	r1, r7, #12
 8013c6a:	2208      	movs	r2, #8
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7ee f8f7 	bl	8001e60 <isotp_user_send_can>
 8013c72:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 8013c74:	697b      	ldr	r3, [r7, #20]
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	3718      	adds	r7, #24
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}
	...

08013c80 <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b086      	sub	sp, #24
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	895b      	ldrh	r3, [r3, #10]
 8013c8e:	2b07      	cmp	r3, #7
 8013c90:	d905      	bls.n	8013c9e <isotp_send_single_frame+0x1e>
 8013c92:	4b1d      	ldr	r3, [pc, #116]	@ (8013d08 <isotp_send_single_frame+0x88>)
 8013c94:	4a1d      	ldr	r2, [pc, #116]	@ (8013d0c <isotp_send_single_frame+0x8c>)
 8013c96:	2142      	movs	r1, #66	@ 0x42
 8013c98:	481d      	ldr	r0, [pc, #116]	@ (8013d10 <isotp_send_single_frame+0x90>)
 8013c9a:	f000 ff53 	bl	8014b44 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 8013c9e:	7b3b      	ldrb	r3, [r7, #12]
 8013ca0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013ca4:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	895b      	ldrh	r3, [r3, #10]
 8013caa:	f003 030f 	and.w	r3, r3, #15
 8013cae:	b2da      	uxtb	r2, r3
 8013cb0:	7b3b      	ldrb	r3, [r7, #12]
 8013cb2:	f362 0303 	bfi	r3, r2, #0, #4
 8013cb6:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6859      	ldr	r1, [r3, #4]
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	895b      	ldrh	r3, [r3, #10]
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	f107 030c 	add.w	r3, r7, #12
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f003 f910 	bl	8016eee <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	895b      	ldrh	r3, [r3, #10]
 8013cd2:	461a      	mov	r2, r3
 8013cd4:	f107 030c 	add.w	r3, r7, #12
 8013cd8:	3301      	adds	r3, #1
 8013cda:	1898      	adds	r0, r3, r2
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	895b      	ldrh	r3, [r3, #10]
 8013ce0:	f1c3 0307 	rsb	r3, r3, #7
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	2100      	movs	r1, #0
 8013ce8:	f002 ffb8 	bl	8016c5c <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8013cec:	f107 030c 	add.w	r3, r7, #12
 8013cf0:	2208      	movs	r2, #8
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	6838      	ldr	r0, [r7, #0]
 8013cf6:	f7ee f8b3 	bl	8001e60 <isotp_user_send_can>
 8013cfa:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 8013cfc:	697b      	ldr	r3, [r7, #20]
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3718      	adds	r7, #24
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	0801a3b4 	.word	0x0801a3b4
 8013d0c:	0801acc0 	.word	0x0801acc0
 8013d10:	0801a3cc 	.word	0x0801a3cc

08013d14 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b086      	sub	sp, #24
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
 8013d1c:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	895b      	ldrh	r3, [r3, #10]
 8013d22:	2b07      	cmp	r3, #7
 8013d24:	d805      	bhi.n	8013d32 <isotp_send_first_frame+0x1e>
 8013d26:	4b1d      	ldr	r3, [pc, #116]	@ (8013d9c <isotp_send_first_frame+0x88>)
 8013d28:	4a1d      	ldr	r2, [pc, #116]	@ (8013da0 <isotp_send_first_frame+0x8c>)
 8013d2a:	215c      	movs	r1, #92	@ 0x5c
 8013d2c:	481d      	ldr	r0, [pc, #116]	@ (8013da4 <isotp_send_first_frame+0x90>)
 8013d2e:	f000 ff09 	bl	8014b44 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 8013d32:	7b3b      	ldrb	r3, [r7, #12]
 8013d34:	2201      	movs	r2, #1
 8013d36:	f362 1307 	bfi	r3, r2, #4, #4
 8013d3a:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	895b      	ldrh	r3, [r3, #10]
 8013d40:	b2db      	uxtb	r3, r3
 8013d42:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	895b      	ldrh	r3, [r3, #10]
 8013d48:	0a1b      	lsrs	r3, r3, #8
 8013d4a:	b29b      	uxth	r3, r3
 8013d4c:	f003 030f 	and.w	r3, r3, #15
 8013d50:	b2da      	uxtb	r2, r3
 8013d52:	7b3b      	ldrb	r3, [r7, #12]
 8013d54:	f362 0303 	bfi	r3, r2, #0, #4
 8013d58:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	685a      	ldr	r2, [r3, #4]
 8013d5e:	f107 030e 	add.w	r3, r7, #14
 8013d62:	6811      	ldr	r1, [r2, #0]
 8013d64:	6019      	str	r1, [r3, #0]
 8013d66:	8892      	ldrh	r2, [r2, #4]
 8013d68:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8013d6a:	f107 030c 	add.w	r3, r7, #12
 8013d6e:	2208      	movs	r2, #8
 8013d70:	4619      	mov	r1, r3
 8013d72:	6838      	ldr	r0, [r7, #0]
 8013d74:	f7ee f874 	bl	8001e60 <isotp_user_send_can>
 8013d78:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d108      	bne.n	8013d92 <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	899b      	ldrh	r3, [r3, #12]
 8013d84:	3306      	adds	r3, #6
 8013d86:	b29a      	uxth	r2, r3
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2201      	movs	r2, #1
 8013d90:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 8013d92:	697b      	ldr	r3, [r7, #20]
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3718      	adds	r7, #24
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}
 8013d9c:	0801a3e4 	.word	0x0801a3e4
 8013da0:	0801acd8 	.word	0x0801acd8
 8013da4:	0801a3cc 	.word	0x0801a3cc

08013da8 <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b086      	sub	sp, #24
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	895b      	ldrh	r3, [r3, #10]
 8013db4:	2b07      	cmp	r3, #7
 8013db6:	d805      	bhi.n	8013dc4 <isotp_send_consecutive_frame+0x1c>
 8013db8:	4b2d      	ldr	r3, [pc, #180]	@ (8013e70 <isotp_send_consecutive_frame+0xc8>)
 8013dba:	4a2e      	ldr	r2, [pc, #184]	@ (8013e74 <isotp_send_consecutive_frame+0xcc>)
 8013dbc:	2175      	movs	r1, #117	@ 0x75
 8013dbe:	482e      	ldr	r0, [pc, #184]	@ (8013e78 <isotp_send_consecutive_frame+0xd0>)
 8013dc0:	f000 fec0 	bl	8014b44 <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 8013dc4:	7a3b      	ldrb	r3, [r7, #8]
 8013dc6:	2202      	movs	r2, #2
 8013dc8:	f362 1307 	bfi	r3, r2, #4, #4
 8013dcc:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	7b9b      	ldrb	r3, [r3, #14]
 8013dd2:	f003 030f 	and.w	r3, r3, #15
 8013dd6:	b2da      	uxtb	r2, r3
 8013dd8:	7a3b      	ldrb	r3, [r7, #8]
 8013dda:	f362 0303 	bfi	r3, r2, #0, #4
 8013dde:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	895a      	ldrh	r2, [r3, #10]
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	899b      	ldrh	r3, [r3, #12]
 8013de8:	1ad3      	subs	r3, r2, r3
 8013dea:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 8013dec:	8afb      	ldrh	r3, [r7, #22]
 8013dee:	2b07      	cmp	r3, #7
 8013df0:	d901      	bls.n	8013df6 <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 8013df2:	2307      	movs	r3, #7
 8013df4:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	687a      	ldr	r2, [r7, #4]
 8013dfc:	8992      	ldrh	r2, [r2, #12]
 8013dfe:	1899      	adds	r1, r3, r2
 8013e00:	8afa      	ldrh	r2, [r7, #22]
 8013e02:	f107 0308 	add.w	r3, r7, #8
 8013e06:	3301      	adds	r3, #1
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f003 f870 	bl	8016eee <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0, sizeof(message.as.consecutive_frame.data) - data_length);
 8013e0e:	8afb      	ldrh	r3, [r7, #22]
 8013e10:	f107 0208 	add.w	r2, r7, #8
 8013e14:	3201      	adds	r2, #1
 8013e16:	18d0      	adds	r0, r2, r3
 8013e18:	8afb      	ldrh	r3, [r7, #22]
 8013e1a:	f1c3 0307 	rsb	r3, r3, #7
 8013e1e:	461a      	mov	r2, r3
 8013e20:	2100      	movs	r1, #0
 8013e22:	f002 ff1b 	bl	8016c5c <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	f107 0108 	add.w	r1, r7, #8
 8013e2e:	2208      	movs	r2, #8
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7ee f815 	bl	8001e60 <isotp_user_send_can>
 8013e36:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d113      	bne.n	8013e66 <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	899a      	ldrh	r2, [r3, #12]
 8013e42:	8afb      	ldrh	r3, [r7, #22]
 8013e44:	4413      	add	r3, r2
 8013e46:	b29a      	uxth	r2, r3
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	7b9b      	ldrb	r3, [r3, #14]
 8013e50:	3301      	adds	r3, #1
 8013e52:	b2da      	uxtb	r2, r3
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	739a      	strb	r2, [r3, #14]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	7b9b      	ldrb	r3, [r3, #14]
 8013e5c:	2b0f      	cmp	r3, #15
 8013e5e:	d902      	bls.n	8013e66 <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2200      	movs	r2, #0
 8013e64:	739a      	strb	r2, [r3, #14]
        }
    }
    
    return ret;
 8013e66:	693b      	ldr	r3, [r7, #16]
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3718      	adds	r7, #24
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	0801a3e4 	.word	0x0801a3e4
 8013e74:	0801acf0 	.word	0x0801acf0
 8013e78:	0801a3cc 	.word	0x0801a3cc

08013e7c <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	60b9      	str	r1, [r7, #8]
 8013e86:	4613      	mov	r3, r2
 8013e88:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	f003 030f 	and.w	r3, r3, #15
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d008      	beq.n	8013eaa <isotp_receive_single_frame+0x2e>
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	781b      	ldrb	r3, [r3, #0]
 8013e9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	461a      	mov	r2, r3
 8013ea4:	79fb      	ldrb	r3, [r7, #7]
 8013ea6:	4293      	cmp	r3, r2
 8013ea8:	d805      	bhi.n	8013eb6 <isotp_receive_single_frame+0x3a>
        isotp_user_debug("Single-frame length too small.");
 8013eaa:	480f      	ldr	r0, [pc, #60]	@ (8013ee8 <isotp_receive_single_frame+0x6c>)
 8013eac:	f7ee f809 	bl	8001ec2 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8013eb0:	f06f 0306 	mvn.w	r3, #6
 8013eb4:	e014      	b.n	8013ee0 <isotp_receive_single_frame+0x64>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	1c59      	adds	r1, r3, #1
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ec6:	b2db      	uxtb	r3, r3
 8013ec8:	461a      	mov	r2, r3
 8013eca:	f003 f810 	bl	8016eee <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	461a      	mov	r2, r3
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    
    return ISOTP_RET_OK;
 8013ede:	2300      	movs	r3, #0
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3710      	adds	r7, #16
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	0801a3f8 	.word	0x0801a3f8

08013eec <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b086      	sub	sp, #24
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	60b9      	str	r1, [r7, #8]
 8013ef6:	4613      	mov	r3, r2
 8013ef8:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 8013efa:	79fb      	ldrb	r3, [r7, #7]
 8013efc:	2b08      	cmp	r3, #8
 8013efe:	d005      	beq.n	8013f0c <isotp_receive_first_frame+0x20>
        isotp_user_debug("First frame should be 8 bytes in length.");
 8013f00:	481e      	ldr	r0, [pc, #120]	@ (8013f7c <isotp_receive_first_frame+0x90>)
 8013f02:	f7ed ffde 	bl	8001ec2 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8013f06:	f06f 0306 	mvn.w	r3, #6
 8013f0a:	e033      	b.n	8013f74 <isotp_receive_first_frame+0x88>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 8013f18:	8afb      	ldrh	r3, [r7, #22]
 8013f1a:	021b      	lsls	r3, r3, #8
 8013f1c:	b29b      	uxth	r3, r3
 8013f1e:	68ba      	ldr	r2, [r7, #8]
 8013f20:	7852      	ldrb	r2, [r2, #1]
 8013f22:	4413      	add	r3, r2
 8013f24:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 8013f26:	8afb      	ldrh	r3, [r7, #22]
 8013f28:	2b07      	cmp	r3, #7
 8013f2a:	d805      	bhi.n	8013f38 <isotp_receive_first_frame+0x4c>
        isotp_user_debug("Should not use multiple frame transmission.");
 8013f2c:	4814      	ldr	r0, [pc, #80]	@ (8013f80 <isotp_receive_first_frame+0x94>)
 8013f2e:	f7ed ffc8 	bl	8001ec2 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8013f32:	f06f 0306 	mvn.w	r3, #6
 8013f36:	e01d      	b.n	8013f74 <isotp_receive_first_frame+0x88>
    }
    
    if (payload_length > link->receive_buf_size) {
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013f3c:	8afa      	ldrh	r2, [r7, #22]
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d905      	bls.n	8013f4e <isotp_receive_first_frame+0x62>
        isotp_user_debug("Multi-frame response too large for receiving buffer.");
 8013f42:	4810      	ldr	r0, [pc, #64]	@ (8013f84 <isotp_receive_first_frame+0x98>)
 8013f44:	f7ed ffbd 	bl	8001ec2 <isotp_user_debug>
        return ISOTP_RET_OVERFLOW;
 8013f48:	f06f 0302 	mvn.w	r3, #2
 8013f4c:	e012      	b.n	8013f74 <isotp_receive_first_frame+0x88>
    }
    
    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	3302      	adds	r3, #2
 8013f56:	2206      	movs	r2, #6
 8013f58:	4619      	mov	r1, r3
 8013f5a:	f002 ffc8 	bl	8016eee <memcpy>
    link->receive_size = payload_length;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	8afa      	ldrh	r2, [r7, #22]
 8013f62:	85da      	strh	r2, [r3, #46]	@ 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2206      	movs	r2, #6
 8013f68:	861a      	strh	r2, [r3, #48]	@ 0x30
    link->receive_sn = 1;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    return ISOTP_RET_OK;
 8013f72:	2300      	movs	r3, #0
}
 8013f74:	4618      	mov	r0, r3
 8013f76:	3718      	adds	r7, #24
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}
 8013f7c:	0801a418 	.word	0x0801a418
 8013f80:	0801a444 	.word	0x0801a444
 8013f84:	0801a470 	.word	0x0801a470

08013f88 <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b086      	sub	sp, #24
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	60f8      	str	r0, [r7, #12]
 8013f90:	60b9      	str	r1, [r7, #8]
 8013f92:	4613      	mov	r3, r2
 8013f94:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8013f9c:	68ba      	ldr	r2, [r7, #8]
 8013f9e:	7812      	ldrb	r2, [r2, #0]
 8013fa0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8013fa4:	b2d2      	uxtb	r2, r2
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	d002      	beq.n	8013fb0 <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 8013faa:	f06f 0303 	mvn.w	r3, #3
 8013fae:	e038      	b.n	8014022 <isotp_receive_consecutive_frame+0x9a>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8013fb8:	1ad3      	subs	r3, r2, r3
 8013fba:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 8013fbc:	8afb      	ldrh	r3, [r7, #22]
 8013fbe:	2b07      	cmp	r3, #7
 8013fc0:	d901      	bls.n	8013fc6 <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 8013fc2:	2307      	movs	r3, #7
 8013fc4:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 8013fc6:	79fa      	ldrb	r2, [r7, #7]
 8013fc8:	8afb      	ldrh	r3, [r7, #22]
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	dc05      	bgt.n	8013fda <isotp_receive_consecutive_frame+0x52>
        isotp_user_debug("Consecutive frame too short.");
 8013fce:	4817      	ldr	r0, [pc, #92]	@ (801402c <isotp_receive_consecutive_frame+0xa4>)
 8013fd0:	f7ed ff77 	bl	8001ec2 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 8013fd4:	f06f 0306 	mvn.w	r3, #6
 8013fd8:	e023      	b.n	8014022 <isotp_receive_consecutive_frame+0x9a>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fde:	68fa      	ldr	r2, [r7, #12]
 8013fe0:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 8013fe2:	1898      	adds	r0, r3, r2
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	8afa      	ldrh	r2, [r7, #22]
 8013fea:	4619      	mov	r1, r3
 8013fec:	f002 ff7f 	bl	8016eee <memcpy>

    link->receive_offset += remaining_bytes;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8013ff4:	8afb      	ldrh	r3, [r7, #22]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (++(link->receive_sn) > 0x0F) {
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8014004:	3301      	adds	r3, #1
 8014006:	b2da      	uxtb	r2, r3
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8014014:	2b0f      	cmp	r3, #15
 8014016:	d903      	bls.n	8014020 <isotp_receive_consecutive_frame+0x98>
        link->receive_sn = 0;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	2200      	movs	r2, #0
 801401c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }

    return ISOTP_RET_OK;
 8014020:	2300      	movs	r3, #0
}
 8014022:	4618      	mov	r0, r3
 8014024:	3718      	adds	r7, #24
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}
 801402a:	bf00      	nop
 801402c:	0801a4a8 	.word	0x0801a4a8

08014030 <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	60f8      	str	r0, [r7, #12]
 8014038:	60b9      	str	r1, [r7, #8]
 801403a:	4613      	mov	r3, r2
 801403c:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 801403e:	79fb      	ldrb	r3, [r7, #7]
 8014040:	2b02      	cmp	r3, #2
 8014042:	d805      	bhi.n	8014050 <isotp_receive_flow_control_frame+0x20>
        isotp_user_debug("Flow control frame too short.");
 8014044:	4805      	ldr	r0, [pc, #20]	@ (801405c <isotp_receive_flow_control_frame+0x2c>)
 8014046:	f7ed ff3c 	bl	8001ec2 <isotp_user_debug>
        return ISOTP_RET_LENGTH;
 801404a:	f06f 0306 	mvn.w	r3, #6
 801404e:	e000      	b.n	8014052 <isotp_receive_flow_control_frame+0x22>
    }

    return ISOTP_RET_OK;
 8014050:	2300      	movs	r3, #0
}
 8014052:	4618      	mov	r0, r3
 8014054:	3710      	adds	r7, #16
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}
 801405a:	bf00      	nop
 801405c:	0801a4c8 	.word	0x0801a4c8

08014060 <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 8014060:	b580      	push	{r7, lr}
 8014062:	b084      	sub	sp, #16
 8014064:	af00      	add	r7, sp, #0
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	4613      	mov	r3, r2
 801406c:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	6819      	ldr	r1, [r3, #0]
 8014072:	88fb      	ldrh	r3, [r7, #6]
 8014074:	68ba      	ldr	r2, [r7, #8]
 8014076:	68f8      	ldr	r0, [r7, #12]
 8014078:	f000 f806 	bl	8014088 <isotp_send_with_id>
 801407c:	4603      	mov	r3, r0
}
 801407e:	4618      	mov	r0, r3
 8014080:	3710      	adds	r7, #16
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}
	...

08014088 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 8014088:	b580      	push	{r7, lr}
 801408a:	b0a6      	sub	sp, #152	@ 0x98
 801408c:	af00      	add	r7, sp, #0
 801408e:	60f8      	str	r0, [r7, #12]
 8014090:	60b9      	str	r1, [r7, #8]
 8014092:	607a      	str	r2, [r7, #4]
 8014094:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d105      	bne.n	80140a8 <isotp_send_with_id+0x20>
        isotp_user_debug("Link is null!");
 801409c:	4833      	ldr	r0, [pc, #204]	@ (801416c <isotp_send_with_id+0xe4>)
 801409e:	f7ed ff10 	bl	8001ec2 <isotp_user_debug>
        return ISOTP_RET_ERROR;
 80140a2:	f04f 33ff 	mov.w	r3, #4294967295
 80140a6:	e05d      	b.n	8014164 <isotp_send_with_id+0xdc>
    }

    if (size > link->send_buf_size) {
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	891b      	ldrh	r3, [r3, #8]
 80140ac:	887a      	ldrh	r2, [r7, #2]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d90d      	bls.n	80140ce <isotp_send_with_id+0x46>
        isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
 80140b2:	482f      	ldr	r0, [pc, #188]	@ (8014170 <isotp_send_with_id+0xe8>)
 80140b4:	f7ed ff05 	bl	8001ec2 <isotp_user_debug>
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 80140b8:	887a      	ldrh	r2, [r7, #2]
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	891b      	ldrh	r3, [r3, #8]
 80140be:	f107 0014 	add.w	r0, r7, #20
 80140c2:	492c      	ldr	r1, [pc, #176]	@ (8014174 <isotp_send_with_id+0xec>)
 80140c4:	f002 fc92 	bl	80169ec <siprintf>
        return ISOTP_RET_OVERFLOW;
 80140c8:	f06f 0302 	mvn.w	r3, #2
 80140cc:	e04a      	b.n	8014164 <isotp_send_with_id+0xdc>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80140d4:	2b01      	cmp	r3, #1
 80140d6:	d105      	bne.n	80140e4 <isotp_send_with_id+0x5c>
        isotp_user_debug("Abort previous message, transmission in progress.\n");
 80140d8:	4827      	ldr	r0, [pc, #156]	@ (8014178 <isotp_send_with_id+0xf0>)
 80140da:	f7ed fef2 	bl	8001ec2 <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
 80140de:	f06f 0301 	mvn.w	r3, #1
 80140e2:	e03f      	b.n	8014164 <isotp_send_with_id+0xdc>
    }

    /* copy into local buffer */
    link->send_size = size;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	887a      	ldrh	r2, [r7, #2]
 80140e8:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	2200      	movs	r2, #0
 80140ee:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	685b      	ldr	r3, [r3, #4]
 80140f4:	887a      	ldrh	r2, [r7, #2]
 80140f6:	6879      	ldr	r1, [r7, #4]
 80140f8:	4618      	mov	r0, r3
 80140fa:	f002 fef8 	bl	8016eee <memcpy>

    if (link->send_size < 8) {
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	895b      	ldrh	r3, [r3, #10]
 8014102:	2b07      	cmp	r3, #7
 8014104:	d806      	bhi.n	8014114 <isotp_send_with_id+0x8c>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 8014106:	68b9      	ldr	r1, [r7, #8]
 8014108:	68f8      	ldr	r0, [r7, #12]
 801410a:	f7ff fdb9 	bl	8013c80 <isotp_send_single_frame>
 801410e:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8014112:	e025      	b.n	8014160 <isotp_send_with_id+0xd8>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 8014114:	68b9      	ldr	r1, [r7, #8]
 8014116:	68f8      	ldr	r0, [r7, #12]
 8014118:	f7ff fdfc 	bl	8013d14 <isotp_send_first_frame>
 801411c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 8014120:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014124:	2b00      	cmp	r3, #0
 8014126:	d11b      	bne.n	8014160 <isotp_send_with_id+0xd8>
            link->send_bs_remain = 0;
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	2200      	movs	r2, #0
 801412c:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	2200      	movs	r2, #0
 8014132:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	2200      	movs	r2, #0
 8014138:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 801413a:	f7ed febb 	bl	8001eb4 <isotp_user_get_ms>
 801413e:	4602      	mov	r2, r0
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8014144:	f7ed feb6 	bl	8001eb4 <isotp_user_get_ms>
 8014148:	4603      	mov	r3, r0
 801414a:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	2200      	movs	r2, #0
 8014156:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	2201      	movs	r2, #1
 801415c:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 8014160:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 8014164:	4618      	mov	r0, r3
 8014166:	3798      	adds	r7, #152	@ 0x98
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}
 801416c:	0801a4e8 	.word	0x0801a4e8
 8014170:	0801a4f8 	.word	0x0801a4f8
 8014174:	0801a54c 	.word	0x0801a54c
 8014178:	0801a57c 	.word	0x0801a57c

0801417c <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 801417c:	b580      	push	{r7, lr}
 801417e:	b088      	sub	sp, #32
 8014180:	af00      	add	r7, sp, #0
 8014182:	60f8      	str	r0, [r7, #12]
 8014184:	60b9      	str	r1, [r7, #8]
 8014186:	4613      	mov	r3, r2
 8014188:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8) {
 801418a:	79fb      	ldrb	r3, [r7, #7]
 801418c:	2b01      	cmp	r3, #1
 801418e:	f240 8143 	bls.w	8014418 <isotp_on_can_message+0x29c>
 8014192:	79fb      	ldrb	r3, [r7, #7]
 8014194:	2b08      	cmp	r3, #8
 8014196:	f200 813f 	bhi.w	8014418 <isotp_on_can_message+0x29c>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 801419a:	79fa      	ldrb	r2, [r7, #7]
 801419c:	f107 0314 	add.w	r3, r7, #20
 80141a0:	68b9      	ldr	r1, [r7, #8]
 80141a2:	4618      	mov	r0, r3
 80141a4:	f002 fea3 	bl	8016eee <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 80141a8:	79fb      	ldrb	r3, [r7, #7]
 80141aa:	f107 0214 	add.w	r2, r7, #20
 80141ae:	18d0      	adds	r0, r2, r3
 80141b0:	79fb      	ldrb	r3, [r7, #7]
 80141b2:	f1c3 0308 	rsb	r3, r3, #8
 80141b6:	461a      	mov	r2, r3
 80141b8:	2100      	movs	r1, #0
 80141ba:	f002 fd4f 	bl	8016c5c <memset>

    switch (message.as.common.type) {
 80141be:	7d3b      	ldrb	r3, [r7, #20]
 80141c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80141c4:	b2db      	uxtb	r3, r3
 80141c6:	2b03      	cmp	r3, #3
 80141c8:	f200 811a 	bhi.w	8014400 <isotp_on_can_message+0x284>
 80141cc:	a201      	add	r2, pc, #4	@ (adr r2, 80141d4 <isotp_on_can_message+0x58>)
 80141ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141d2:	bf00      	nop
 80141d4:	080141e5 	.word	0x080141e5
 80141d8:	08014221 	.word	0x08014221
 80141dc:	080142a9 	.word	0x080142a9
 80141e0:	08014347 	.word	0x08014347
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80141ea:	2b01      	cmp	r3, #1
 80141ec:	d104      	bne.n	80141f8 <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	f06f 0205 	mvn.w	r2, #5
 80141f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80141f6:	e002      	b.n	80141fe <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	2200      	movs	r2, #0
 80141fc:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 80141fe:	79fa      	ldrb	r2, [r7, #7]
 8014200:	f107 0314 	add.w	r3, r7, #20
 8014204:	4619      	mov	r1, r3
 8014206:	68f8      	ldr	r0, [r7, #12]
 8014208:	f7ff fe38 	bl	8013e7c <isotp_receive_single_frame>
 801420c:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 801420e:	69fb      	ldr	r3, [r7, #28]
 8014210:	2b00      	cmp	r3, #0
 8014212:	f040 80f7 	bne.w	8014404 <isotp_on_can_message+0x288>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	2202      	movs	r2, #2
 801421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            }
            break;
 801421e:	e0f1      	b.n	8014404 <isotp_on_can_message+0x288>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014226:	2b01      	cmp	r3, #1
 8014228:	d104      	bne.n	8014234 <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	f06f 0205 	mvn.w	r2, #5
 8014230:	639a      	str	r2, [r3, #56]	@ 0x38
 8014232:	e002      	b.n	801423a <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	2200      	movs	r2, #0
 8014238:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 801423a:	79fa      	ldrb	r2, [r7, #7]
 801423c:	f107 0314 	add.w	r3, r7, #20
 8014240:	4619      	mov	r1, r3
 8014242:	68f8      	ldr	r0, [r7, #12]
 8014244:	f7ff fe52 	bl	8013eec <isotp_receive_first_frame>
 8014248:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 801424a:	69fb      	ldr	r3, [r7, #28]
 801424c:	f113 0f03 	cmn.w	r3, #3
 8014250:	d10e      	bne.n	8014270 <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	f06f 0207 	mvn.w	r2, #7
 8014258:	639a      	str	r2, [r3, #56]	@ 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	2200      	movs	r2, #0
 801425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 8014262:	2300      	movs	r3, #0
 8014264:	2200      	movs	r2, #0
 8014266:	2102      	movs	r1, #2
 8014268:	68f8      	ldr	r0, [r7, #12]
 801426a:	f7ff fcd0 	bl	8013c0e <isotp_send_flow_control>
                break;
 801426e:	e0d2      	b.n	8014416 <isotp_on_can_message+0x29a>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 8014270:	69fb      	ldr	r3, [r7, #28]
 8014272:	2b00      	cmp	r3, #0
 8014274:	f040 80c8 	bne.w	8014408 <isotp_on_can_message+0x28c>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2201      	movs	r2, #1
 801427c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	22c8      	movs	r2, #200	@ 0xc8
 8014284:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 801428e:	2300      	movs	r3, #0
 8014290:	2100      	movs	r1, #0
 8014292:	68f8      	ldr	r0, [r7, #12]
 8014294:	f7ff fcbb 	bl	8013c0e <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8014298:	f7ed fe0c 	bl	8001eb4 <isotp_user_get_ms>
 801429c:	4603      	mov	r3, r0
 801429e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	635a      	str	r2, [r3, #52]	@ 0x34
            }
            
            break;
 80142a6:	e0af      	b.n	8014408 <isotp_on_can_message+0x28c>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d004      	beq.n	80142bc <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	f06f 0205 	mvn.w	r2, #5
 80142b8:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 80142ba:	e0ac      	b.n	8014416 <isotp_on_can_message+0x29a>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 80142bc:	79fa      	ldrb	r2, [r7, #7]
 80142be:	f107 0314 	add.w	r3, r7, #20
 80142c2:	4619      	mov	r1, r3
 80142c4:	68f8      	ldr	r0, [r7, #12]
 80142c6:	f7ff fe5f 	bl	8013f88 <isotp_receive_consecutive_frame>
 80142ca:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 80142cc:	69fb      	ldr	r3, [r7, #28]
 80142ce:	f113 0f04 	cmn.w	r3, #4
 80142d2:	d108      	bne.n	80142e6 <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f06f 0203 	mvn.w	r2, #3
 80142da:	639a      	str	r2, [r3, #56]	@ 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	2200      	movs	r2, #0
 80142e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                break;
 80142e4:	e097      	b.n	8014416 <isotp_on_can_message+0x29a>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 80142e6:	69fb      	ldr	r3, [r7, #28]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	f040 808f 	bne.w	801440c <isotp_on_can_message+0x290>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80142ee:	f7ed fde1 	bl	8001eb4 <isotp_user_get_ms>
 80142f2:	4603      	mov	r3, r0
 80142f4:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	635a      	str	r2, [r3, #52]	@ 0x34
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014304:	429a      	cmp	r2, r3
 8014306:	d304      	bcc.n	8014312 <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	2202      	movs	r2, #2
 801430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }
            
            break;
 8014310:	e07c      	b.n	801440c <isotp_on_can_message+0x290>
                    if (0 == --link->receive_bs_count) {
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8014318:	3b01      	subs	r3, #1
 801431a:	b2da      	uxtb	r2, r3
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8014328:	2b00      	cmp	r3, #0
 801432a:	d16f      	bne.n	801440c <isotp_on_can_message+0x290>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	22c8      	movs	r2, #200	@ 0xc8
 8014330:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 801433a:	2300      	movs	r3, #0
 801433c:	2100      	movs	r1, #0
 801433e:	68f8      	ldr	r0, [r7, #12]
 8014340:	f7ff fc65 	bl	8013c0e <isotp_send_flow_control>
            break;
 8014344:	e062      	b.n	801440c <isotp_on_can_message+0x290>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	f893 3020 	ldrb.w	r3, [r3, #32]
 801434c:	2b01      	cmp	r3, #1
 801434e:	d15f      	bne.n	8014410 <isotp_on_can_message+0x294>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 8014350:	79fa      	ldrb	r2, [r7, #7]
 8014352:	f107 0314 	add.w	r3, r7, #20
 8014356:	4619      	mov	r1, r3
 8014358:	68f8      	ldr	r0, [r7, #12]
 801435a:	f7ff fe69 	bl	8014030 <isotp_receive_flow_control_frame>
 801435e:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 8014360:	69fb      	ldr	r3, [r7, #28]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d156      	bne.n	8014414 <isotp_on_can_message+0x298>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8014366:	f7ed fda5 	bl	8001eb4 <isotp_user_get_ms>
 801436a:	4603      	mov	r3, r0
 801436c:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 8014374:	7d3b      	ldrb	r3, [r7, #20]
 8014376:	f003 030f 	and.w	r3, r3, #15
 801437a:	b2db      	uxtb	r3, r3
 801437c:	2b02      	cmp	r3, #2
 801437e:	d108      	bne.n	8014392 <isotp_on_can_message+0x216>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	f06f 0207 	mvn.w	r2, #7
 8014386:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	2202      	movs	r2, #2
 801438c:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 8014390:	e040      	b.n	8014414 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 8014392:	7d3b      	ldrb	r3, [r7, #20]
 8014394:	f003 030f 	and.w	r3, r3, #15
 8014398:	b2db      	uxtb	r3, r3
 801439a:	2b01      	cmp	r3, #1
 801439c:	d112      	bne.n	80143c4 <isotp_on_can_message+0x248>
                    link->send_wtf_count += 1;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	7cdb      	ldrb	r3, [r3, #19]
 80143a2:	3301      	adds	r3, #1
 80143a4:	b2da      	uxtb	r2, r3
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	7cdb      	ldrb	r3, [r3, #19]
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	d930      	bls.n	8014414 <isotp_on_can_message+0x298>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	f06f 0206 	mvn.w	r2, #6
 80143b8:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2202      	movs	r2, #2
 80143be:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 80143c2:	e027      	b.n	8014414 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 80143c4:	7d3b      	ldrb	r3, [r7, #20]
 80143c6:	f003 030f 	and.w	r3, r3, #15
 80143ca:	b2db      	uxtb	r3, r3
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d121      	bne.n	8014414 <isotp_on_can_message+0x298>
                    if (0 == message.as.flow_control.BS) {
 80143d0:	7d7b      	ldrb	r3, [r7, #21]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d104      	bne.n	80143e0 <isotp_on_can_message+0x264>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80143dc:	821a      	strh	r2, [r3, #16]
 80143de:	e003      	b.n	80143e8 <isotp_on_can_message+0x26c>
                        link->send_bs_remain = message.as.flow_control.BS;
 80143e0:	7d7b      	ldrb	r3, [r7, #21]
 80143e2:	461a      	mov	r2, r3
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 80143e8:	7dbb      	ldrb	r3, [r7, #22]
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7ff fbf2 	bl	8013bd4 <isotp_st_min_to_ms>
 80143f0:	4603      	mov	r3, r0
 80143f2:	461a      	mov	r2, r3
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2200      	movs	r2, #0
 80143fc:	74da      	strb	r2, [r3, #19]
            break;
 80143fe:	e009      	b.n	8014414 <isotp_on_can_message+0x298>
        default:
            break;
 8014400:	bf00      	nop
 8014402:	e00a      	b.n	801441a <isotp_on_can_message+0x29e>
            break;
 8014404:	bf00      	nop
 8014406:	e008      	b.n	801441a <isotp_on_can_message+0x29e>
            break;
 8014408:	bf00      	nop
 801440a:	e006      	b.n	801441a <isotp_on_can_message+0x29e>
            break;
 801440c:	bf00      	nop
 801440e:	e004      	b.n	801441a <isotp_on_can_message+0x29e>
                break;
 8014410:	bf00      	nop
 8014412:	e002      	b.n	801441a <isotp_on_can_message+0x29e>
            break;
 8014414:	bf00      	nop
    };
    
    return;
 8014416:	e000      	b.n	801441a <isotp_on_can_message+0x29e>
        return;
 8014418:	bf00      	nop
}
 801441a:	3720      	adds	r7, #32
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 8014420:	b580      	push	{r7, lr}
 8014422:	b086      	sub	sp, #24
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	603b      	str	r3, [r7, #0]
 801442c:	4613      	mov	r3, r2
 801442e:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014436:	2b02      	cmp	r3, #2
 8014438:	d002      	beq.n	8014440 <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 801443a:	f06f 0304 	mvn.w	r3, #4
 801443e:	e017      	b.n	8014470 <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014444:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 8014446:	8afa      	ldrh	r2, [r7, #22]
 8014448:	88fb      	ldrh	r3, [r7, #6]
 801444a:	429a      	cmp	r2, r3
 801444c:	d901      	bls.n	8014452 <isotp_receive+0x32>
        copylen = payload_size;
 801444e:	88fb      	ldrh	r3, [r7, #6]
 8014450:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014456:	8afa      	ldrh	r2, [r7, #22]
 8014458:	4619      	mov	r1, r3
 801445a:	68b8      	ldr	r0, [r7, #8]
 801445c:	f002 fd47 	bl	8016eee <memcpy>
    *out_size = copylen;
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	8afa      	ldrh	r2, [r7, #22]
 8014464:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	2200      	movs	r2, #0
 801446a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return ISOTP_RET_OK;
 801446e:	2300      	movs	r3, #0
}
 8014470:	4618      	mov	r0, r3
 8014472:	3718      	adds	r7, #24
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 8014478:	b580      	push	{r7, lr}
 801447a:	b084      	sub	sp, #16
 801447c:	af00      	add	r7, sp, #0
 801447e:	60f8      	str	r0, [r7, #12]
 8014480:	60b9      	str	r1, [r7, #8]
 8014482:	607a      	str	r2, [r7, #4]
 8014484:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 8014486:	2240      	movs	r2, #64	@ 0x40
 8014488:	2100      	movs	r1, #0
 801448a:	68f8      	ldr	r0, [r7, #12]
 801448c:	f002 fbe6 	bl	8016c5c <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	2200      	movs	r2, #0
 8014494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	2200      	movs	r2, #0
 801449c:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	68ba      	ldr	r2, [r7, #8]
 80144a4:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	687a      	ldr	r2, [r7, #4]
 80144aa:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	887a      	ldrh	r2, [r7, #2]
 80144b0:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	69ba      	ldr	r2, [r7, #24]
 80144b6:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	8bba      	ldrh	r2, [r7, #28]
 80144bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    return;
 80144be:	bf00      	nop
}
 80144c0:	3710      	adds	r7, #16
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}

080144c6 <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 80144c6:	b590      	push	{r4, r7, lr}
 80144c8:	b085      	sub	sp, #20
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	d15c      	bne.n	8014592 <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 80144dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80144e0:	4293      	cmp	r3, r2
 80144e2:	d003      	beq.n	80144ec <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	8a1b      	ldrh	r3, [r3, #16]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d041      	beq.n	8014570 <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d00c      	beq.n	801450e <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	7c9b      	ldrb	r3, [r3, #18]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d039      	beq.n	8014570 <isotp_poll+0xaa>
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	695b      	ldr	r3, [r3, #20]
 8014500:	461c      	mov	r4, r3
 8014502:	f7ed fcd7 	bl	8001eb4 <isotp_user_get_ms>
 8014506:	4603      	mov	r3, r0
 8014508:	1ae3      	subs	r3, r4, r3
 801450a:	2b00      	cmp	r3, #0
 801450c:	da30      	bge.n	8014570 <isotp_poll+0xaa>
            
            ret = isotp_send_consecutive_frame(link);
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f7ff fc4a 	bl	8013da8 <isotp_send_consecutive_frame>
 8014514:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d125      	bne.n	8014568 <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	8a1b      	ldrh	r3, [r3, #16]
 8014520:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014524:	4293      	cmp	r3, r2
 8014526:	d005      	beq.n	8014534 <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	8a1b      	ldrh	r3, [r3, #16]
 801452c:	3b01      	subs	r3, #1
 801452e:	b29a      	uxth	r2, r3
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8014534:	f7ed fcbe 	bl	8001eb4 <isotp_user_get_ms>
 8014538:	4603      	mov	r3, r0
 801453a:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 8014542:	f7ed fcb7 	bl	8001eb4 <isotp_user_get_ms>
 8014546:	4602      	mov	r2, r0
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	7c9b      	ldrb	r3, [r3, #18]
 801454c:	441a      	add	r2, r3
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	899a      	ldrh	r2, [r3, #12]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	895b      	ldrh	r3, [r3, #10]
 801455a:	429a      	cmp	r2, r3
 801455c:	d308      	bcc.n	8014570 <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2200      	movs	r2, #0
 8014562:	f883 2020 	strb.w	r2, [r3, #32]
 8014566:	e003      	b.n	8014570 <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2202      	movs	r2, #2
 801456c:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	699b      	ldr	r3, [r3, #24]
 8014574:	461c      	mov	r4, r3
 8014576:	f7ed fc9d 	bl	8001eb4 <isotp_user_get_ms>
 801457a:	4603      	mov	r3, r0
 801457c:	1ae3      	subs	r3, r4, r3
 801457e:	2b00      	cmp	r3, #0
 8014580:	da07      	bge.n	8014592 <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	f06f 0201 	mvn.w	r2, #1
 8014588:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2202      	movs	r2, #2
 801458e:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014598:	2b01      	cmp	r3, #1
 801459a:	d111      	bne.n	80145c0 <isotp_poll+0xfa>
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80145a0:	461c      	mov	r4, r3
 80145a2:	f7ed fc87 	bl	8001eb4 <isotp_user_get_ms>
 80145a6:	4603      	mov	r3, r0
 80145a8:	1ae3      	subs	r3, r4, r3
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	da08      	bge.n	80145c0 <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f06f 0202 	mvn.w	r2, #2
 80145b4:	639a      	str	r2, [r3, #56]	@ 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	2200      	movs	r2, #0
 80145ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    return;
 80145be:	bf00      	nop
 80145c0:	bf00      	nop
}
 80145c2:	3714      	adds	r7, #20
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd90      	pop	{r4, r7, pc}

080145c8 <OS_task_init>:
/* Initialize object by assigning init and dispatch handler function */
void OS_task_init(
    OS_task * const pOS_task,
    OS_handler init,
    OS_handler dispatch) 
{
 80145c8:	b480      	push	{r7}
 80145ca:	b085      	sub	sp, #20
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	60f8      	str	r0, [r7, #12]
 80145d0:	60b9      	str	r1, [r7, #8]
 80145d2:	607a      	str	r2, [r7, #4]
    pOS_task->init = init;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	68ba      	ldr	r2, [r7, #8]
 80145d8:	601a      	str	r2, [r3, #0]
    pOS_task->dispatch = dispatch;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	605a      	str	r2, [r3, #4]
}
 80145e0:	bf00      	nop
 80145e2:	3714      	adds	r7, #20
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bc80      	pop	{r7}
 80145e8:	4770      	bx	lr

080145ea <OS_task_create>:
    OS_task * const pOS_task,
    OS_taskPrio task_prio,
    OS_event_t const **pBuf ,
    OS_EQCt eqLen,
    OS_event_t const * const init_e)
{
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b084      	sub	sp, #16
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	60f8      	str	r0, [r7, #12]
 80145f2:	607a      	str	r2, [r7, #4]
 80145f4:	461a      	mov	r2, r3
 80145f6:	460b      	mov	r3, r1
 80145f8:	72fb      	strb	r3, [r7, #11]
 80145fa:	4613      	mov	r3, r2
 80145fc:	72bb      	strb	r3, [r7, #10]
    /* check parameter */
    if ( task_prio > 0  /* the priority must be greater than 0 */
 80145fe:	7afb      	ldrb	r3, [r7, #11]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d020      	beq.n	8014646 <OS_task_create+0x5c>
        && pBuf != (OS_event_t const **)0 /* The queue exists */
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d01d      	beq.n	8014646 <OS_task_create+0x5c>
        && eqLen > 0) { /* the length greater than 0 */
 801460a:	7abb      	ldrb	r3, [r7, #10]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d01a      	beq.n	8014646 <OS_task_create+0x5c>
        pOS_task->qBuf = pBuf;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	687a      	ldr	r2, [r7, #4]
 8014614:	609a      	str	r2, [r3, #8]
        pOS_task->end = eqLen - 1;
 8014616:	7abb      	ldrb	r3, [r7, #10]
 8014618:	3b01      	subs	r3, #1
 801461a:	b2da      	uxtb	r2, r3
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	731a      	strb	r2, [r3, #12]
        pOS_task->head = 0;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	2200      	movs	r2, #0
 8014624:	735a      	strb	r2, [r3, #13]
        pOS_task->tail = 0;
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	2200      	movs	r2, #0
 801462a:	739a      	strb	r2, [r3, #14]
        pOS_task->nUsed = 0;
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	2200      	movs	r2, #0
 8014630:	73da      	strb	r2, [r3, #15]

        /* Set task priority */
        // OS_setTask_priority(pOS_task,task_prio);
        pOS_task->task_piro = task_prio - 1;
 8014632:	7afb      	ldrb	r3, [r7, #11]
 8014634:	3b01      	subs	r3, #1
 8014636:	b2da      	uxtb	r2, r3
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	741a      	strb	r2, [r3, #16]


        /* Initialize task with initialization event */
        (*pOS_task->init)(pOS_task,init_e);
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	69b9      	ldr	r1, [r7, #24]
 8014642:	68f8      	ldr	r0, [r7, #12]
 8014644:	4798      	blx	r3
    } 
}
 8014646:	bf00      	nop
 8014648:	3710      	adds	r7, #16
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
	...

08014650 <OS_task_post>:
 * @brief Post the event to event queue of task 
 * 
 * @param pOS_task 
 * @param pEvent 
 */ 
void OS_task_post(OS_task *const pOS_task, OS_event_t const * const pEvent) {
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	6039      	str	r1, [r7, #0]
    OS_ring_buf_tcb *pQueue = &pri_queue[pOS_task->task_piro];
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	7c1b      	ldrb	r3, [r3, #16]
 801465e:	461a      	mov	r2, r3
 8014660:	2358      	movs	r3, #88	@ 0x58
 8014662:	fb02 f303 	mul.w	r3, r2, r3
 8014666:	4a30      	ldr	r2, [pc, #192]	@ (8014728 <OS_task_post+0xd8>)
 8014668:	4413      	add	r3, r2
 801466a:	60fb      	str	r3, [r7, #12]

    /* Check over flow of queue */
    if (pri_queue[pOS_task->task_piro].nUsed >= OS_TASK_PER_PRI || pOS_task->nUsed > pOS_task->end ) { /* full queue */
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	7c1b      	ldrb	r3, [r3, #16]
 8014670:	4619      	mov	r1, r3
 8014672:	4a2d      	ldr	r2, [pc, #180]	@ (8014728 <OS_task_post+0xd8>)
 8014674:	2358      	movs	r3, #88	@ 0x58
 8014676:	fb01 f303 	mul.w	r3, r1, r3
 801467a:	4413      	add	r3, r2
 801467c:	3303      	adds	r3, #3
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	2b09      	cmp	r3, #9
 8014682:	d84d      	bhi.n	8014720 <OS_task_post+0xd0>
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	7bda      	ldrb	r2, [r3, #15]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	7b1b      	ldrb	r3, [r3, #12]
 801468c:	429a      	cmp	r2, r3
 801468e:	d847      	bhi.n	8014720 <OS_task_post+0xd0>
        return;
    }

    /* insert tcb to queue */
    OS_PORT_CRIT_ENTRY();
 8014690:	b672      	cpsid	i
    pQueue->buf_tcb[pQueue->head_index].pEvent = pEvent;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	68fa      	ldr	r2, [r7, #12]
 8014698:	00db      	lsls	r3, r3, #3
 801469a:	4413      	add	r3, r2
 801469c:	683a      	ldr	r2, [r7, #0]
 801469e:	609a      	str	r2, [r3, #8]
    pQueue->buf_tcb[pQueue->head_index].pOS_task = pOS_task;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	781b      	ldrb	r3, [r3, #0]
 80146a4:	68fa      	ldr	r2, [r7, #12]
 80146a6:	00db      	lsls	r3, r3, #3
 80146a8:	4413      	add	r3, r2
 80146aa:	687a      	ldr	r2, [r7, #4]
 80146ac:	605a      	str	r2, [r3, #4]

    if (pQueue->head_index == 0) {
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	781b      	ldrb	r3, [r3, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d103      	bne.n	80146be <OS_task_post+0x6e>
        pQueue->head_index = OS_TASK_PER_PRI - 1; /* wrap around to end of the buffer */
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	2209      	movs	r2, #9
 80146ba:	701a      	strb	r2, [r3, #0]
 80146bc:	e005      	b.n	80146ca <OS_task_post+0x7a>
    } else {
        --pQueue->head_index;
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	781b      	ldrb	r3, [r3, #0]
 80146c2:	3b01      	subs	r3, #1
 80146c4:	b2da      	uxtb	r2, r3
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	701a      	strb	r2, [r3, #0]
    }
    ++pQueue->nUsed; /* Increase number event used in queue */
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	78db      	ldrb	r3, [r3, #3]
 80146ce:	3301      	adds	r3, #1
 80146d0:	b2da      	uxtb	r2, r3
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	70da      	strb	r2, [r3, #3]

    pOS_task->qBuf[pOS_task->head] = pEvent; /* insert event to queue */
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	689a      	ldr	r2, [r3, #8]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	7b5b      	ldrb	r3, [r3, #13]
 80146de:	009b      	lsls	r3, r3, #2
 80146e0:	4413      	add	r3, r2
 80146e2:	683a      	ldr	r2, [r7, #0]
 80146e4:	601a      	str	r2, [r3, #0]
    if (pOS_task->head == 0) { 
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	7b5b      	ldrb	r3, [r3, #13]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d104      	bne.n	80146f8 <OS_task_post+0xa8>
        pOS_task->head = pOS_task->end; /* wrap around to end of the buffer */
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	7b1a      	ldrb	r2, [r3, #12]
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	735a      	strb	r2, [r3, #13]
 80146f6:	e005      	b.n	8014704 <OS_task_post+0xb4>
    } else {
        --pOS_task->head;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	7b5b      	ldrb	r3, [r3, #13]
 80146fc:	3b01      	subs	r3, #1
 80146fe:	b2da      	uxtb	r2, r3
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	735a      	strb	r2, [r3, #13]
    }
    ++pOS_task->nUsed; /* Increase number event used in queue */
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	7bdb      	ldrb	r3, [r3, #15]
 8014708:	3301      	adds	r3, #1
 801470a:	b2da      	uxtb	r2, r3
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	73da      	strb	r2, [r3, #15]

    /* Post event -> make the interrupt */
    // OS_PORT_TASK_PEND();
    HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014714:	b25b      	sxtb	r3, r3
 8014716:	4618      	mov	r0, r3
 8014718:	f7ee ff47 	bl	80035aa <HAL_NVIC_SetPendingIRQ>
    OS_PORT_CRIT_EXIT();
 801471c:	b662      	cpsie	i
 801471e:	e000      	b.n	8014722 <OS_task_post+0xd2>
        return;
 8014720:	bf00      	nop
}
 8014722:	3710      	adds	r7, #16
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}
 8014728:	20003820 	.word	0x20003820

0801472c <OS_task_post_event>:

void OS_task_post_event(OS_task *const pOS_task,uint8_t sig, uint8_t *data, uint32_t size) {
 801472c:	b580      	push	{r7, lr}
 801472e:	b086      	sub	sp, #24
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	607a      	str	r2, [r7, #4]
 8014736:	603b      	str	r3, [r7, #0]
 8014738:	460b      	mov	r3, r1
 801473a:	72fb      	strb	r3, [r7, #11]
    OS_event_t *e = get_dynamic_event();
 801473c:	f000 f99c 	bl	8014a78 <get_dynamic_event>
 8014740:	6178      	str	r0, [r7, #20]
    set_sig_dynamic_event(e,sig);
 8014742:	7afb      	ldrb	r3, [r7, #11]
 8014744:	4619      	mov	r1, r3
 8014746:	6978      	ldr	r0, [r7, #20]
 8014748:	f000 f9e2 	bl	8014b10 <set_sig_dynamic_event>
    set_data_dynamic_event(e,data,size);
 801474c:	683a      	ldr	r2, [r7, #0]
 801474e:	6879      	ldr	r1, [r7, #4]
 8014750:	6978      	ldr	r0, [r7, #20]
 8014752:	f000 f9bb 	bl	8014acc <set_data_dynamic_event>
    OS_task_post(pOS_task,e);
 8014756:	6979      	ldr	r1, [r7, #20]
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f7ff ff79 	bl	8014650 <OS_task_post>
}
 801475e:	bf00      	nop
 8014760:	3718      	adds	r7, #24
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
	...

08014768 <OS_TimeEvt_init>:

void OS_TimeEvt_init(
    OS_TimeEvt *pOS_Evt,
    uint16_t  sig,
    OS_task *task)
{
 8014768:	b480      	push	{r7}
 801476a:	b085      	sub	sp, #20
 801476c:	af00      	add	r7, sp, #0
 801476e:	60f8      	str	r0, [r7, #12]
 8014770:	460b      	mov	r3, r1
 8014772:	607a      	str	r2, [r7, #4]
 8014774:	817b      	strh	r3, [r7, #10]
    pOS_Evt->Time_event.sig = sig;
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	897a      	ldrh	r2, [r7, #10]
 801477a:	801a      	strh	r2, [r3, #0]
//    pOS_Evt->Time_event.data = 0;
    pOS_Evt->Time_event.len = 0;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	2200      	movs	r2, #0
 8014780:	645a      	str	r2, [r3, #68]	@ 0x44
    pOS_Evt->task_post = task;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	687a      	ldr	r2, [r7, #4]
 8014786:	64da      	str	r2, [r3, #76]	@ 0x4c
    pOS_Evt->Time_Ctr = 0;
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	2200      	movs	r2, #0
 801478c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	2200      	movs	r2, #0
 8014794:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* add new node to head of liked list */
    pOS_Evt->next = timeEvt_head;
 8014798:	4b05      	ldr	r3, [pc, #20]	@ (80147b0 <OS_TimeEvt_init+0x48>)
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	649a      	str	r2, [r3, #72]	@ 0x48
    timeEvt_head = pOS_Evt;
 80147a0:	4a03      	ldr	r2, [pc, #12]	@ (80147b0 <OS_TimeEvt_init+0x48>)
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	6013      	str	r3, [r2, #0]
} 
 80147a6:	bf00      	nop
 80147a8:	3714      	adds	r7, #20
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bc80      	pop	{r7}
 80147ae:	4770      	bx	lr
 80147b0:	20003928 	.word	0x20003928

080147b4 <OS_TimeEvt_Set>:
 * 
 * @param pOS_Evt Timer for generating event when TIMEOUT 
 * @param count TIMEOUT value 
 * @param interval interval value for periodic time event
 */
void OS_TimeEvt_Set(OS_TimeEvt *pOS_Evt, uint16_t count, uint16_t interval) {
 80147b4:	b480      	push	{r7}
 80147b6:	b083      	sub	sp, #12
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	460b      	mov	r3, r1
 80147be:	807b      	strh	r3, [r7, #2]
 80147c0:	4613      	mov	r3, r2
 80147c2:	803b      	strh	r3, [r7, #0]
    OS_PORT_CRIT_ENTRY();
 80147c4:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = count;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	887a      	ldrh	r2, [r7, #2]
 80147ca:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = interval;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	883a      	ldrh	r2, [r7, #0]
 80147d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 80147d6:	b662      	cpsie	i
}
 80147d8:	bf00      	nop
 80147da:	370c      	adds	r7, #12
 80147dc:	46bd      	mov	sp, r7
 80147de:	bc80      	pop	{r7}
 80147e0:	4770      	bx	lr

080147e2 <OS_TimeEvt_Stop>:

void OS_TimeEvt_Stop(OS_TimeEvt *pOS_Evt) {
 80147e2:	b480      	push	{r7}
 80147e4:	b083      	sub	sp, #12
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 80147ea:	b672      	cpsid	i
    pOS_Evt->Time_Ctr = 0;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2200      	movs	r2, #0
 80147f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    pOS_Evt->Time_interval = 0;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	2200      	movs	r2, #0
 80147f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    OS_PORT_CRIT_EXIT();
 80147fc:	b662      	cpsie	i
}
 80147fe:	bf00      	nop
 8014800:	370c      	adds	r7, #12
 8014802:	46bd      	mov	sp, r7
 8014804:	bc80      	pop	{r7}
 8014806:	4770      	bx	lr

08014808 <OS_TimeEvt_tick>:

/**
 * @brief function in systemtick handler (1ms) to execute task time OS 
 * 
 */
void OS_TimeEvt_tick(void) {
 8014808:	b580      	push	{r7, lr}
 801480a:	b082      	sub	sp, #8
 801480c:	af00      	add	r7, sp, #0
    /* run for all the node time event */
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 801480e:	4b1b      	ldr	r3, [pc, #108]	@ (801487c <OS_TimeEvt_tick+0x74>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	607b      	str	r3, [r7, #4]
 8014814:	e029      	b.n	801486a <OS_TimeEvt_tick+0x62>
        OS_PORT_CRIT_ENTRY();
 8014816:	b672      	cpsid	i
        if (node->Time_Ctr == 0) { /* down counter = 0  -> stop node */
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801481e:	2b00      	cmp	r3, #0
 8014820:	d101      	bne.n	8014826 <OS_TimeEvt_tick+0x1e>
            OS_PORT_CRIT_EXIT();
 8014822:	b662      	cpsie	i
 8014824:	e01e      	b.n	8014864 <OS_TimeEvt_tick+0x5c>
        } else if (node->Time_Ctr == 1) { /* TIMEOUT */
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801482c:	2b01      	cmp	r3, #1
 801482e:	d110      	bne.n	8014852 <OS_TimeEvt_tick+0x4a>
            node->Time_Ctr = node->Time_interval;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 801483c:	b662      	cpsie	i
            /* Post event */
            // OS_task_post(node->task_post,&node->Time_event);
            OS_task_post_event(node->task_post,node->Time_event.sig,(uint8_t *)0,0);
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	881b      	ldrh	r3, [r3, #0]
 8014846:	b2d9      	uxtb	r1, r3
 8014848:	2300      	movs	r3, #0
 801484a:	2200      	movs	r2, #0
 801484c:	f7ff ff6e 	bl	801472c <OS_task_post_event>
 8014850:	e008      	b.n	8014864 <OS_TimeEvt_tick+0x5c>
        } else { /* count down value */
            --node->Time_Ctr;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8014858:	3b01      	subs	r3, #1
 801485a:	b29a      	uxth	r2, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
            OS_PORT_CRIT_EXIT();
 8014862:	b662      	cpsie	i
    for (OS_TimeEvt *node = timeEvt_head; node != ((OS_TimeEvt *)0); node = node->next) {
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014868:	607b      	str	r3, [r7, #4]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d1d2      	bne.n	8014816 <OS_TimeEvt_tick+0xe>
        }
    }
}
 8014870:	bf00      	nop
 8014872:	bf00      	nop
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	20003928 	.word	0x20003928

08014880 <OS_task_activate>:
/**
 * @brief The task performs an action when it receives an event from the queue. Call in interrupt handler to get event and dispatch
 * 
 * @param pOS_task Task pointer
 */
void OS_task_activate(uint8_t prio_task) {
 8014880:	b580      	push	{r7, lr}
 8014882:	b086      	sub	sp, #24
 8014884:	af00      	add	r7, sp, #0
 8014886:	4603      	mov	r3, r0
 8014888:	71fb      	strb	r3, [r7, #7]
    OS_ring_buf_tcb *pQueue = &pri_queue[prio_task - 1];
 801488a:	79fb      	ldrb	r3, [r7, #7]
 801488c:	3b01      	subs	r3, #1
 801488e:	2258      	movs	r2, #88	@ 0x58
 8014890:	fb02 f303 	mul.w	r3, r2, r3
 8014894:	4a2e      	ldr	r2, [pc, #184]	@ (8014950 <OS_task_activate+0xd0>)
 8014896:	4413      	add	r3, r2
 8014898:	617b      	str	r3, [r7, #20]
    
    if (pQueue->nUsed == 0) { /* don't have tcb */
 801489a:	697b      	ldr	r3, [r7, #20]
 801489c:	78db      	ldrb	r3, [r3, #3]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d050      	beq.n	8014944 <OS_task_activate+0xc4>
        return;
    }
    
    uint8_t index = pQueue->tail_index;
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	785b      	ldrb	r3, [r3, #1]
 80148a6:	74fb      	strb	r3, [r7, #19]
    if (pQueue->tail_index == 0) {
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	785b      	ldrb	r3, [r3, #1]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d103      	bne.n	80148b8 <OS_task_activate+0x38>
        pQueue->tail_index = OS_TASK_PER_PRI - 1; /* wrap around */
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	2209      	movs	r2, #9
 80148b4:	705a      	strb	r2, [r3, #1]
 80148b6:	e005      	b.n	80148c4 <OS_task_activate+0x44>
    } else {
        --pQueue->tail_index;
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	785b      	ldrb	r3, [r3, #1]
 80148bc:	3b01      	subs	r3, #1
 80148be:	b2da      	uxtb	r2, r3
 80148c0:	697b      	ldr	r3, [r7, #20]
 80148c2:	705a      	strb	r2, [r3, #1]
    }

    --pQueue->nUsed;
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	78db      	ldrb	r3, [r3, #3]
 80148c8:	3b01      	subs	r3, #1
 80148ca:	b2da      	uxtb	r2, r3
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	70da      	strb	r2, [r3, #3]

    OS_task *pOS_task = pQueue->buf_tcb[index].pOS_task;
 80148d0:	7cfb      	ldrb	r3, [r7, #19]
 80148d2:	697a      	ldr	r2, [r7, #20]
 80148d4:	00db      	lsls	r3, r3, #3
 80148d6:	4413      	add	r3, r2
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	60fb      	str	r3, [r7, #12]

    /* Check event in queue */
    if (pOS_task->nUsed == 0) { /* don't have event in queue */
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	7bdb      	ldrb	r3, [r3, #15]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d031      	beq.n	8014948 <OS_task_activate+0xc8>
        return;
    }

    OS_event_t const *e_receive = pQueue->buf_tcb[index].pEvent;
 80148e4:	7cfb      	ldrb	r3, [r7, #19]
 80148e6:	697a      	ldr	r2, [r7, #20]
 80148e8:	00db      	lsls	r3, r3, #3
 80148ea:	4413      	add	r3, r2
 80148ec:	689b      	ldr	r3, [r3, #8]
 80148ee:	60bb      	str	r3, [r7, #8]
    if (pOS_task->tail == 0) {
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	7b9b      	ldrb	r3, [r3, #14]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d104      	bne.n	8014902 <OS_task_activate+0x82>
        pOS_task->tail = pOS_task->end; /* wrap around */
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	7b1a      	ldrb	r2, [r3, #12]
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	739a      	strb	r2, [r3, #14]
 8014900:	e005      	b.n	801490e <OS_task_activate+0x8e>
    } else {
        --pOS_task->tail;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	7b9b      	ldrb	r3, [r3, #14]
 8014906:	3b01      	subs	r3, #1
 8014908:	b2da      	uxtb	r2, r3
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	739a      	strb	r2, [r3, #14]
    }
    OS_PORT_CRIT_ENTRY();
 801490e:	b672      	cpsid	i
    // --pOS_task->nUsed;
    if (--pOS_task->nUsed > 0) { /* check have any event in queue */
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	7bdb      	ldrb	r3, [r3, #15]
 8014914:	3b01      	subs	r3, #1
 8014916:	b2da      	uxtb	r2, r3
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	73da      	strb	r2, [r3, #15]
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	7bdb      	ldrb	r3, [r3, #15]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d005      	beq.n	8014930 <OS_task_activate+0xb0>
        HAL_NVIC_SetPendingIRQ(pQueue->nvic_irq);
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014928:	b25b      	sxtb	r3, r3
 801492a:	4618      	mov	r0, r3
 801492c:	f7ee fe3d 	bl	80035aa <HAL_NVIC_SetPendingIRQ>
    }
    OS_PORT_CRIT_EXIT();
 8014930:	b662      	cpsie	i

    /* Dispatch the received event to this task */
    (*pOS_task->dispatch)(pOS_task,e_receive);
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	685b      	ldr	r3, [r3, #4]
 8014936:	68b9      	ldr	r1, [r7, #8]
 8014938:	68f8      	ldr	r0, [r7, #12]
 801493a:	4798      	blx	r3

    free_dynamic_event(e_receive);
 801493c:	68b8      	ldr	r0, [r7, #8]
 801493e:	f000 f86f 	bl	8014a20 <free_dynamic_event>
 8014942:	e002      	b.n	801494a <OS_task_activate+0xca>
        return;
 8014944:	bf00      	nop
 8014946:	e000      	b.n	801494a <OS_task_activate+0xca>
        return;
 8014948:	bf00      	nop
}
 801494a:	3718      	adds	r7, #24
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	20003820 	.word	0x20003820

08014954 <OS_priority_IRQ>:
 * @brief Set task priority 
 * 
 * @param pOS_task Task pointer 
 * @param prio task priority 
 */
void OS_priority_IRQ(uint8_t IRQ, OS_taskPrio prio) {
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af00      	add	r7, sp, #0
 801495a:	4603      	mov	r3, r0
 801495c:	460a      	mov	r2, r1
 801495e:	71fb      	strb	r3, [r7, #7]
 8014960:	4613      	mov	r3, r2
 8014962:	71bb      	strb	r3, [r7, #6]
    HAL_NVIC_SetPriority(IRQ,(15U - prio),0);
 8014964:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8014968:	79bb      	ldrb	r3, [r7, #6]
 801496a:	f1c3 030f 	rsb	r3, r3, #15
 801496e:	2200      	movs	r2, #0
 8014970:	4619      	mov	r1, r3
 8014972:	f7ee fde4 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQ);
 8014976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801497a:	4618      	mov	r0, r3
 801497c:	f7ee fdfb 	bl	8003576 <HAL_NVIC_EnableIRQ>
}
 8014980:	bf00      	nop
 8014982:	3708      	adds	r7, #8
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}

08014988 <OS_prio_setIRQ>:
 * @brief Set the number IRQ for specific priority
 * 
 * @param prio priority begin from 1 
 * @param num_irq IRQ number 
 */
void OS_prio_setIRQ(uint8_t prio, uint8_t num_irq) {
 8014988:	b480      	push	{r7}
 801498a:	b083      	sub	sp, #12
 801498c:	af00      	add	r7, sp, #0
 801498e:	4603      	mov	r3, r0
 8014990:	460a      	mov	r2, r1
 8014992:	71fb      	strb	r3, [r7, #7]
 8014994:	4613      	mov	r3, r2
 8014996:	71bb      	strb	r3, [r7, #6]
    if (prio < OS_PRI_MAX) {
 8014998:	79fb      	ldrb	r3, [r7, #7]
 801499a:	2b02      	cmp	r3, #2
 801499c:	d809      	bhi.n	80149b2 <OS_prio_setIRQ+0x2a>
        pri_queue[prio - 1].nvic_irq = num_irq;
 801499e:	79fb      	ldrb	r3, [r7, #7]
 80149a0:	3b01      	subs	r3, #1
 80149a2:	79ba      	ldrb	r2, [r7, #6]
 80149a4:	4905      	ldr	r1, [pc, #20]	@ (80149bc <OS_prio_setIRQ+0x34>)
 80149a6:	2058      	movs	r0, #88	@ 0x58
 80149a8:	fb00 f303 	mul.w	r3, r0, r3
 80149ac:	440b      	add	r3, r1
 80149ae:	3354      	adds	r3, #84	@ 0x54
 80149b0:	601a      	str	r2, [r3, #0]
    }
}
 80149b2:	bf00      	nop
 80149b4:	370c      	adds	r7, #12
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bc80      	pop	{r7}
 80149ba:	4770      	bx	lr
 80149bc:	20003820 	.word	0x20003820

080149c0 <OS_Test_setIRQ>:

void OS_Test_setIRQ(OS_task * const pAO, uint8_t num_irq) {
 80149c0:	b480      	push	{r7}
 80149c2:	b083      	sub	sp, #12
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
 80149c8:	460b      	mov	r3, r1
 80149ca:	70fb      	strb	r3, [r7, #3]
    pAO->nvic_irq = num_irq;
 80149cc:	78fa      	ldrb	r2, [r7, #3]
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	619a      	str	r2, [r3, #24]
}
 80149d2:	bf00      	nop
 80149d4:	370c      	adds	r7, #12
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bc80      	pop	{r7}
 80149da:	4770      	bx	lr

080149dc <dynamic_event_pool_init>:
static OS_event_t dynamic_event_pool[OS_EVT_POOL_SIZE];
static uint8_t dynamic_event_pool_free[OS_EVT_POOL_SIZE]; /* Store index in free */
static uint8_t dynamic_event_free_stack; /* point to the next index freen in pool */


void dynamic_event_pool_init(void) {
 80149dc:	b480      	push	{r7}
 80149de:	b083      	sub	sp, #12
 80149e0:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 80149e2:	b672      	cpsid	i

    dynamic_event_free_stack = 0;
 80149e4:	4b0c      	ldr	r3, [pc, #48]	@ (8014a18 <dynamic_event_pool_init+0x3c>)
 80149e6:	2200      	movs	r2, #0
 80149e8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 80149ea:	2300      	movs	r3, #0
 80149ec:	71fb      	strb	r3, [r7, #7]
 80149ee:	e006      	b.n	80149fe <dynamic_event_pool_init+0x22>
        dynamic_event_pool_free[i] = i; /* Store the index free */
 80149f0:	79fb      	ldrb	r3, [r7, #7]
 80149f2:	490a      	ldr	r1, [pc, #40]	@ (8014a1c <dynamic_event_pool_init+0x40>)
 80149f4:	79fa      	ldrb	r2, [r7, #7]
 80149f6:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < OS_EVT_POOL_SIZE; i++) {
 80149f8:	79fb      	ldrb	r3, [r7, #7]
 80149fa:	3301      	adds	r3, #1
 80149fc:	71fb      	strb	r3, [r7, #7]
 80149fe:	79fb      	ldrb	r3, [r7, #7]
 8014a00:	2b09      	cmp	r3, #9
 8014a02:	d9f5      	bls.n	80149f0 <dynamic_event_pool_init+0x14>
    }
    dynamic_event_free_stack = OS_EVT_POOL_SIZE;
 8014a04:	4b04      	ldr	r3, [pc, #16]	@ (8014a18 <dynamic_event_pool_init+0x3c>)
 8014a06:	220a      	movs	r2, #10
 8014a08:	701a      	strb	r2, [r3, #0]
    
    OS_PORT_CRIT_EXIT();
 8014a0a:	b662      	cpsie	i
}
 8014a0c:	bf00      	nop
 8014a0e:	370c      	adds	r7, #12
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bc80      	pop	{r7}
 8014a14:	4770      	bx	lr
 8014a16:	bf00      	nop
 8014a18:	20003c06 	.word	0x20003c06
 8014a1c:	20003bfc 	.word	0x20003bfc

08014a20 <free_dynamic_event>:


void free_dynamic_event(OS_event_t *e) {
 8014a20:	b480      	push	{r7}
 8014a22:	b085      	sub	sp, #20
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
    OS_PORT_CRIT_ENTRY();
 8014a28:	b672      	cpsid	i

    uint8_t idx = e - dynamic_event_pool; /* Get index of event */
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8014a68 <free_dynamic_event+0x48>)
 8014a2e:	1a9b      	subs	r3, r3, r2
 8014a30:	10db      	asrs	r3, r3, #3
 8014a32:	4a0e      	ldr	r2, [pc, #56]	@ (8014a6c <free_dynamic_event+0x4c>)
 8014a34:	fb02 f303 	mul.w	r3, r2, r3
 8014a38:	73fb      	strb	r3, [r7, #15]
//    free(e->data); /* free allocated memory */
    if (idx > 0 && idx < OS_EVT_POOL_SIZE) {
 8014a3a:	7bfb      	ldrb	r3, [r7, #15]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d00c      	beq.n	8014a5a <free_dynamic_event+0x3a>
 8014a40:	7bfb      	ldrb	r3, [r7, #15]
 8014a42:	2b09      	cmp	r3, #9
 8014a44:	d809      	bhi.n	8014a5a <free_dynamic_event+0x3a>
        dynamic_event_pool_free[dynamic_event_free_stack++] = idx; 
 8014a46:	4b0a      	ldr	r3, [pc, #40]	@ (8014a70 <free_dynamic_event+0x50>)
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	1c5a      	adds	r2, r3, #1
 8014a4c:	b2d1      	uxtb	r1, r2
 8014a4e:	4a08      	ldr	r2, [pc, #32]	@ (8014a70 <free_dynamic_event+0x50>)
 8014a50:	7011      	strb	r1, [r2, #0]
 8014a52:	4619      	mov	r1, r3
 8014a54:	4a07      	ldr	r2, [pc, #28]	@ (8014a74 <free_dynamic_event+0x54>)
 8014a56:	7bfb      	ldrb	r3, [r7, #15]
 8014a58:	5453      	strb	r3, [r2, r1]
    }

    OS_PORT_CRIT_EXIT();
 8014a5a:	b662      	cpsie	i
}
 8014a5c:	bf00      	nop
 8014a5e:	3714      	adds	r7, #20
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bc80      	pop	{r7}
 8014a64:	4770      	bx	lr
 8014a66:	bf00      	nop
 8014a68:	2000392c 	.word	0x2000392c
 8014a6c:	38e38e39 	.word	0x38e38e39
 8014a70:	20003c06 	.word	0x20003c06
 8014a74:	20003bfc 	.word	0x20003bfc

08014a78 <get_dynamic_event>:

OS_event_t *get_dynamic_event(void) {
 8014a78:	b480      	push	{r7}
 8014a7a:	b083      	sub	sp, #12
 8014a7c:	af00      	add	r7, sp, #0
    OS_PORT_CRIT_ENTRY();
 8014a7e:	b672      	cpsid	i
    
    if (dynamic_event_free_stack == 0) return NULL; /* full */
 8014a80:	4b0f      	ldr	r3, [pc, #60]	@ (8014ac0 <get_dynamic_event+0x48>)
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d101      	bne.n	8014a8c <get_dynamic_event+0x14>
 8014a88:	2300      	movs	r3, #0
 8014a8a:	e013      	b.n	8014ab4 <get_dynamic_event+0x3c>
    uint8_t idx = dynamic_event_pool_free[--dynamic_event_free_stack]; /* Get index in free */
 8014a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8014ac0 <get_dynamic_event+0x48>)
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	3b01      	subs	r3, #1
 8014a92:	b2da      	uxtb	r2, r3
 8014a94:	4b0a      	ldr	r3, [pc, #40]	@ (8014ac0 <get_dynamic_event+0x48>)
 8014a96:	701a      	strb	r2, [r3, #0]
 8014a98:	4b09      	ldr	r3, [pc, #36]	@ (8014ac0 <get_dynamic_event+0x48>)
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	4b09      	ldr	r3, [pc, #36]	@ (8014ac4 <get_dynamic_event+0x4c>)
 8014aa0:	5c9b      	ldrb	r3, [r3, r2]
 8014aa2:	71fb      	strb	r3, [r7, #7]
    
    OS_PORT_CRIT_EXIT();
 8014aa4:	b662      	cpsie	i
    return &dynamic_event_pool[idx];
 8014aa6:	79fa      	ldrb	r2, [r7, #7]
 8014aa8:	4613      	mov	r3, r2
 8014aaa:	00db      	lsls	r3, r3, #3
 8014aac:	4413      	add	r3, r2
 8014aae:	00db      	lsls	r3, r3, #3
 8014ab0:	4a05      	ldr	r2, [pc, #20]	@ (8014ac8 <get_dynamic_event+0x50>)
 8014ab2:	4413      	add	r3, r2
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	370c      	adds	r7, #12
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bc80      	pop	{r7}
 8014abc:	4770      	bx	lr
 8014abe:	bf00      	nop
 8014ac0:	20003c06 	.word	0x20003c06
 8014ac4:	20003bfc 	.word	0x20003bfc
 8014ac8:	2000392c 	.word	0x2000392c

08014acc <set_data_dynamic_event>:

void set_data_dynamic_event(OS_event_t *e, uint8_t *data, uint32_t len) {
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	607a      	str	r2, [r7, #4]
    if (len != 0) {
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d00a      	beq.n	8014af4 <set_data_dynamic_event+0x28>
        e->len = len;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	687a      	ldr	r2, [r7, #4]
 8014ae2:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy(e->data,data,len);
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	3302      	adds	r3, #2
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	68b9      	ldr	r1, [r7, #8]
 8014aec:	4618      	mov	r0, r3
 8014aee:	f002 f9fe 	bl	8016eee <memcpy>
    } else {
        e->len = len;
        memset(e->data, 0, sizeof(e->data));
    }
}
 8014af2:	e009      	b.n	8014b08 <set_data_dynamic_event+0x3c>
        e->len = len;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	687a      	ldr	r2, [r7, #4]
 8014af8:	645a      	str	r2, [r3, #68]	@ 0x44
        memset(e->data, 0, sizeof(e->data));
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	3302      	adds	r3, #2
 8014afe:	2240      	movs	r2, #64	@ 0x40
 8014b00:	2100      	movs	r1, #0
 8014b02:	4618      	mov	r0, r3
 8014b04:	f002 f8aa 	bl	8016c5c <memset>
}
 8014b08:	bf00      	nop
 8014b0a:	3710      	adds	r7, #16
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <set_sig_dynamic_event>:

void set_sig_dynamic_event(OS_event_t *e, uint8_t sig) {
 8014b10:	b480      	push	{r7}
 8014b12:	b083      	sub	sp, #12
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
 8014b18:	460b      	mov	r3, r1
 8014b1a:	70fb      	strb	r3, [r7, #3]
    e->sig = sig;
 8014b1c:	78fb      	ldrb	r3, [r7, #3]
 8014b1e:	b29a      	uxth	r2, r3
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	801a      	strh	r2, [r3, #0]
}
 8014b24:	bf00      	nop
 8014b26:	370c      	adds	r7, #12
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bc80      	pop	{r7}
 8014b2c:	4770      	bx	lr

08014b2e <get_data_dynamic_event>:

uint8_t *get_data_dynamic_event(OS_event_t * const e) {
 8014b2e:	b480      	push	{r7}
 8014b30:	b083      	sub	sp, #12
 8014b32:	af00      	add	r7, sp, #0
 8014b34:	6078      	str	r0, [r7, #4]
    return (e->data);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	3302      	adds	r3, #2
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	370c      	adds	r7, #12
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bc80      	pop	{r7}
 8014b42:	4770      	bx	lr

08014b44 <__assert_func>:
 8014b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b46:	4614      	mov	r4, r2
 8014b48:	461a      	mov	r2, r3
 8014b4a:	4b09      	ldr	r3, [pc, #36]	@ (8014b70 <__assert_func+0x2c>)
 8014b4c:	4605      	mov	r5, r0
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	68d8      	ldr	r0, [r3, #12]
 8014b52:	b14c      	cbz	r4, 8014b68 <__assert_func+0x24>
 8014b54:	4b07      	ldr	r3, [pc, #28]	@ (8014b74 <__assert_func+0x30>)
 8014b56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014b5a:	9100      	str	r1, [sp, #0]
 8014b5c:	462b      	mov	r3, r5
 8014b5e:	4906      	ldr	r1, [pc, #24]	@ (8014b78 <__assert_func+0x34>)
 8014b60:	f001 fe6e 	bl	8016840 <fiprintf>
 8014b64:	f002 f9dc 	bl	8016f20 <abort>
 8014b68:	4b04      	ldr	r3, [pc, #16]	@ (8014b7c <__assert_func+0x38>)
 8014b6a:	461c      	mov	r4, r3
 8014b6c:	e7f3      	b.n	8014b56 <__assert_func+0x12>
 8014b6e:	bf00      	nop
 8014b70:	200002a8 	.word	0x200002a8
 8014b74:	0801ad0d 	.word	0x0801ad0d
 8014b78:	0801ad1a 	.word	0x0801ad1a
 8014b7c:	0801ad48 	.word	0x0801ad48

08014b80 <atof>:
 8014b80:	2100      	movs	r1, #0
 8014b82:	f000 bec3 	b.w	801590c <strtod>

08014b86 <atoi>:
 8014b86:	220a      	movs	r2, #10
 8014b88:	2100      	movs	r1, #0
 8014b8a:	f000 bf47 	b.w	8015a1c <strtol>
	...

08014b90 <malloc>:
 8014b90:	4b02      	ldr	r3, [pc, #8]	@ (8014b9c <malloc+0xc>)
 8014b92:	4601      	mov	r1, r0
 8014b94:	6818      	ldr	r0, [r3, #0]
 8014b96:	f000 b82d 	b.w	8014bf4 <_malloc_r>
 8014b9a:	bf00      	nop
 8014b9c:	200002a8 	.word	0x200002a8

08014ba0 <free>:
 8014ba0:	4b02      	ldr	r3, [pc, #8]	@ (8014bac <free+0xc>)
 8014ba2:	4601      	mov	r1, r0
 8014ba4:	6818      	ldr	r0, [r3, #0]
 8014ba6:	f003 b81f 	b.w	8017be8 <_free_r>
 8014baa:	bf00      	nop
 8014bac:	200002a8 	.word	0x200002a8

08014bb0 <sbrk_aligned>:
 8014bb0:	b570      	push	{r4, r5, r6, lr}
 8014bb2:	4e0f      	ldr	r6, [pc, #60]	@ (8014bf0 <sbrk_aligned+0x40>)
 8014bb4:	460c      	mov	r4, r1
 8014bb6:	6831      	ldr	r1, [r6, #0]
 8014bb8:	4605      	mov	r5, r0
 8014bba:	b911      	cbnz	r1, 8014bc2 <sbrk_aligned+0x12>
 8014bbc:	f002 f932 	bl	8016e24 <_sbrk_r>
 8014bc0:	6030      	str	r0, [r6, #0]
 8014bc2:	4621      	mov	r1, r4
 8014bc4:	4628      	mov	r0, r5
 8014bc6:	f002 f92d 	bl	8016e24 <_sbrk_r>
 8014bca:	1c43      	adds	r3, r0, #1
 8014bcc:	d103      	bne.n	8014bd6 <sbrk_aligned+0x26>
 8014bce:	f04f 34ff 	mov.w	r4, #4294967295
 8014bd2:	4620      	mov	r0, r4
 8014bd4:	bd70      	pop	{r4, r5, r6, pc}
 8014bd6:	1cc4      	adds	r4, r0, #3
 8014bd8:	f024 0403 	bic.w	r4, r4, #3
 8014bdc:	42a0      	cmp	r0, r4
 8014bde:	d0f8      	beq.n	8014bd2 <sbrk_aligned+0x22>
 8014be0:	1a21      	subs	r1, r4, r0
 8014be2:	4628      	mov	r0, r5
 8014be4:	f002 f91e 	bl	8016e24 <_sbrk_r>
 8014be8:	3001      	adds	r0, #1
 8014bea:	d1f2      	bne.n	8014bd2 <sbrk_aligned+0x22>
 8014bec:	e7ef      	b.n	8014bce <sbrk_aligned+0x1e>
 8014bee:	bf00      	nop
 8014bf0:	20003c08 	.word	0x20003c08

08014bf4 <_malloc_r>:
 8014bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bf8:	1ccd      	adds	r5, r1, #3
 8014bfa:	f025 0503 	bic.w	r5, r5, #3
 8014bfe:	3508      	adds	r5, #8
 8014c00:	2d0c      	cmp	r5, #12
 8014c02:	bf38      	it	cc
 8014c04:	250c      	movcc	r5, #12
 8014c06:	2d00      	cmp	r5, #0
 8014c08:	4606      	mov	r6, r0
 8014c0a:	db01      	blt.n	8014c10 <_malloc_r+0x1c>
 8014c0c:	42a9      	cmp	r1, r5
 8014c0e:	d904      	bls.n	8014c1a <_malloc_r+0x26>
 8014c10:	230c      	movs	r3, #12
 8014c12:	6033      	str	r3, [r6, #0]
 8014c14:	2000      	movs	r0, #0
 8014c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014cf0 <_malloc_r+0xfc>
 8014c1e:	f000 f869 	bl	8014cf4 <__malloc_lock>
 8014c22:	f8d8 3000 	ldr.w	r3, [r8]
 8014c26:	461c      	mov	r4, r3
 8014c28:	bb44      	cbnz	r4, 8014c7c <_malloc_r+0x88>
 8014c2a:	4629      	mov	r1, r5
 8014c2c:	4630      	mov	r0, r6
 8014c2e:	f7ff ffbf 	bl	8014bb0 <sbrk_aligned>
 8014c32:	1c43      	adds	r3, r0, #1
 8014c34:	4604      	mov	r4, r0
 8014c36:	d158      	bne.n	8014cea <_malloc_r+0xf6>
 8014c38:	f8d8 4000 	ldr.w	r4, [r8]
 8014c3c:	4627      	mov	r7, r4
 8014c3e:	2f00      	cmp	r7, #0
 8014c40:	d143      	bne.n	8014cca <_malloc_r+0xd6>
 8014c42:	2c00      	cmp	r4, #0
 8014c44:	d04b      	beq.n	8014cde <_malloc_r+0xea>
 8014c46:	6823      	ldr	r3, [r4, #0]
 8014c48:	4639      	mov	r1, r7
 8014c4a:	4630      	mov	r0, r6
 8014c4c:	eb04 0903 	add.w	r9, r4, r3
 8014c50:	f002 f8e8 	bl	8016e24 <_sbrk_r>
 8014c54:	4581      	cmp	r9, r0
 8014c56:	d142      	bne.n	8014cde <_malloc_r+0xea>
 8014c58:	6821      	ldr	r1, [r4, #0]
 8014c5a:	4630      	mov	r0, r6
 8014c5c:	1a6d      	subs	r5, r5, r1
 8014c5e:	4629      	mov	r1, r5
 8014c60:	f7ff ffa6 	bl	8014bb0 <sbrk_aligned>
 8014c64:	3001      	adds	r0, #1
 8014c66:	d03a      	beq.n	8014cde <_malloc_r+0xea>
 8014c68:	6823      	ldr	r3, [r4, #0]
 8014c6a:	442b      	add	r3, r5
 8014c6c:	6023      	str	r3, [r4, #0]
 8014c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8014c72:	685a      	ldr	r2, [r3, #4]
 8014c74:	bb62      	cbnz	r2, 8014cd0 <_malloc_r+0xdc>
 8014c76:	f8c8 7000 	str.w	r7, [r8]
 8014c7a:	e00f      	b.n	8014c9c <_malloc_r+0xa8>
 8014c7c:	6822      	ldr	r2, [r4, #0]
 8014c7e:	1b52      	subs	r2, r2, r5
 8014c80:	d420      	bmi.n	8014cc4 <_malloc_r+0xd0>
 8014c82:	2a0b      	cmp	r2, #11
 8014c84:	d917      	bls.n	8014cb6 <_malloc_r+0xc2>
 8014c86:	1961      	adds	r1, r4, r5
 8014c88:	42a3      	cmp	r3, r4
 8014c8a:	6025      	str	r5, [r4, #0]
 8014c8c:	bf18      	it	ne
 8014c8e:	6059      	strne	r1, [r3, #4]
 8014c90:	6863      	ldr	r3, [r4, #4]
 8014c92:	bf08      	it	eq
 8014c94:	f8c8 1000 	streq.w	r1, [r8]
 8014c98:	5162      	str	r2, [r4, r5]
 8014c9a:	604b      	str	r3, [r1, #4]
 8014c9c:	4630      	mov	r0, r6
 8014c9e:	f000 f82f 	bl	8014d00 <__malloc_unlock>
 8014ca2:	f104 000b 	add.w	r0, r4, #11
 8014ca6:	1d23      	adds	r3, r4, #4
 8014ca8:	f020 0007 	bic.w	r0, r0, #7
 8014cac:	1ac2      	subs	r2, r0, r3
 8014cae:	bf1c      	itt	ne
 8014cb0:	1a1b      	subne	r3, r3, r0
 8014cb2:	50a3      	strne	r3, [r4, r2]
 8014cb4:	e7af      	b.n	8014c16 <_malloc_r+0x22>
 8014cb6:	6862      	ldr	r2, [r4, #4]
 8014cb8:	42a3      	cmp	r3, r4
 8014cba:	bf0c      	ite	eq
 8014cbc:	f8c8 2000 	streq.w	r2, [r8]
 8014cc0:	605a      	strne	r2, [r3, #4]
 8014cc2:	e7eb      	b.n	8014c9c <_malloc_r+0xa8>
 8014cc4:	4623      	mov	r3, r4
 8014cc6:	6864      	ldr	r4, [r4, #4]
 8014cc8:	e7ae      	b.n	8014c28 <_malloc_r+0x34>
 8014cca:	463c      	mov	r4, r7
 8014ccc:	687f      	ldr	r7, [r7, #4]
 8014cce:	e7b6      	b.n	8014c3e <_malloc_r+0x4a>
 8014cd0:	461a      	mov	r2, r3
 8014cd2:	685b      	ldr	r3, [r3, #4]
 8014cd4:	42a3      	cmp	r3, r4
 8014cd6:	d1fb      	bne.n	8014cd0 <_malloc_r+0xdc>
 8014cd8:	2300      	movs	r3, #0
 8014cda:	6053      	str	r3, [r2, #4]
 8014cdc:	e7de      	b.n	8014c9c <_malloc_r+0xa8>
 8014cde:	230c      	movs	r3, #12
 8014ce0:	4630      	mov	r0, r6
 8014ce2:	6033      	str	r3, [r6, #0]
 8014ce4:	f000 f80c 	bl	8014d00 <__malloc_unlock>
 8014ce8:	e794      	b.n	8014c14 <_malloc_r+0x20>
 8014cea:	6005      	str	r5, [r0, #0]
 8014cec:	e7d6      	b.n	8014c9c <_malloc_r+0xa8>
 8014cee:	bf00      	nop
 8014cf0:	20003c0c 	.word	0x20003c0c

08014cf4 <__malloc_lock>:
 8014cf4:	4801      	ldr	r0, [pc, #4]	@ (8014cfc <__malloc_lock+0x8>)
 8014cf6:	f002 b8e2 	b.w	8016ebe <__retarget_lock_acquire_recursive>
 8014cfa:	bf00      	nop
 8014cfc:	20003d50 	.word	0x20003d50

08014d00 <__malloc_unlock>:
 8014d00:	4801      	ldr	r0, [pc, #4]	@ (8014d08 <__malloc_unlock+0x8>)
 8014d02:	f002 b8dd 	b.w	8016ec0 <__retarget_lock_release_recursive>
 8014d06:	bf00      	nop
 8014d08:	20003d50 	.word	0x20003d50

08014d0c <sulp>:
 8014d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d10:	460f      	mov	r7, r1
 8014d12:	4690      	mov	r8, r2
 8014d14:	f003 fe68 	bl	80189e8 <__ulp>
 8014d18:	4604      	mov	r4, r0
 8014d1a:	460d      	mov	r5, r1
 8014d1c:	f1b8 0f00 	cmp.w	r8, #0
 8014d20:	d011      	beq.n	8014d46 <sulp+0x3a>
 8014d22:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8014d26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	dd0b      	ble.n	8014d46 <sulp+0x3a>
 8014d2e:	2400      	movs	r4, #0
 8014d30:	051b      	lsls	r3, r3, #20
 8014d32:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8014d36:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8014d3a:	4622      	mov	r2, r4
 8014d3c:	462b      	mov	r3, r5
 8014d3e:	f7eb fbd5 	bl	80004ec <__aeabi_dmul>
 8014d42:	4604      	mov	r4, r0
 8014d44:	460d      	mov	r5, r1
 8014d46:	4620      	mov	r0, r4
 8014d48:	4629      	mov	r1, r5
 8014d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014d50 <_strtod_l>:
 8014d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d54:	b09f      	sub	sp, #124	@ 0x7c
 8014d56:	9217      	str	r2, [sp, #92]	@ 0x5c
 8014d58:	2200      	movs	r2, #0
 8014d5a:	460c      	mov	r4, r1
 8014d5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8014d5e:	f04f 0a00 	mov.w	sl, #0
 8014d62:	f04f 0b00 	mov.w	fp, #0
 8014d66:	460a      	mov	r2, r1
 8014d68:	9005      	str	r0, [sp, #20]
 8014d6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8014d6c:	7811      	ldrb	r1, [r2, #0]
 8014d6e:	292b      	cmp	r1, #43	@ 0x2b
 8014d70:	d048      	beq.n	8014e04 <_strtod_l+0xb4>
 8014d72:	d836      	bhi.n	8014de2 <_strtod_l+0x92>
 8014d74:	290d      	cmp	r1, #13
 8014d76:	d830      	bhi.n	8014dda <_strtod_l+0x8a>
 8014d78:	2908      	cmp	r1, #8
 8014d7a:	d830      	bhi.n	8014dde <_strtod_l+0x8e>
 8014d7c:	2900      	cmp	r1, #0
 8014d7e:	d039      	beq.n	8014df4 <_strtod_l+0xa4>
 8014d80:	2200      	movs	r2, #0
 8014d82:	920e      	str	r2, [sp, #56]	@ 0x38
 8014d84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8014d86:	782a      	ldrb	r2, [r5, #0]
 8014d88:	2a30      	cmp	r2, #48	@ 0x30
 8014d8a:	f040 80b0 	bne.w	8014eee <_strtod_l+0x19e>
 8014d8e:	786a      	ldrb	r2, [r5, #1]
 8014d90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014d94:	2a58      	cmp	r2, #88	@ 0x58
 8014d96:	d16c      	bne.n	8014e72 <_strtod_l+0x122>
 8014d98:	9302      	str	r3, [sp, #8]
 8014d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d9c:	4a8f      	ldr	r2, [pc, #572]	@ (8014fdc <_strtod_l+0x28c>)
 8014d9e:	9301      	str	r3, [sp, #4]
 8014da0:	ab1a      	add	r3, sp, #104	@ 0x68
 8014da2:	9300      	str	r3, [sp, #0]
 8014da4:	9805      	ldr	r0, [sp, #20]
 8014da6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8014da8:	a919      	add	r1, sp, #100	@ 0x64
 8014daa:	f002 ffcd 	bl	8017d48 <__gethex>
 8014dae:	f010 060f 	ands.w	r6, r0, #15
 8014db2:	4604      	mov	r4, r0
 8014db4:	d005      	beq.n	8014dc2 <_strtod_l+0x72>
 8014db6:	2e06      	cmp	r6, #6
 8014db8:	d126      	bne.n	8014e08 <_strtod_l+0xb8>
 8014dba:	2300      	movs	r3, #0
 8014dbc:	3501      	adds	r5, #1
 8014dbe:	9519      	str	r5, [sp, #100]	@ 0x64
 8014dc0:	930e      	str	r3, [sp, #56]	@ 0x38
 8014dc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	f040 8582 	bne.w	80158ce <_strtod_l+0xb7e>
 8014dca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014dcc:	b1bb      	cbz	r3, 8014dfe <_strtod_l+0xae>
 8014dce:	4650      	mov	r0, sl
 8014dd0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8014dd4:	b01f      	add	sp, #124	@ 0x7c
 8014dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dda:	2920      	cmp	r1, #32
 8014ddc:	d1d0      	bne.n	8014d80 <_strtod_l+0x30>
 8014dde:	3201      	adds	r2, #1
 8014de0:	e7c3      	b.n	8014d6a <_strtod_l+0x1a>
 8014de2:	292d      	cmp	r1, #45	@ 0x2d
 8014de4:	d1cc      	bne.n	8014d80 <_strtod_l+0x30>
 8014de6:	2101      	movs	r1, #1
 8014de8:	910e      	str	r1, [sp, #56]	@ 0x38
 8014dea:	1c51      	adds	r1, r2, #1
 8014dec:	9119      	str	r1, [sp, #100]	@ 0x64
 8014dee:	7852      	ldrb	r2, [r2, #1]
 8014df0:	2a00      	cmp	r2, #0
 8014df2:	d1c7      	bne.n	8014d84 <_strtod_l+0x34>
 8014df4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014df6:	9419      	str	r4, [sp, #100]	@ 0x64
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	f040 8566 	bne.w	80158ca <_strtod_l+0xb7a>
 8014dfe:	4650      	mov	r0, sl
 8014e00:	4659      	mov	r1, fp
 8014e02:	e7e7      	b.n	8014dd4 <_strtod_l+0x84>
 8014e04:	2100      	movs	r1, #0
 8014e06:	e7ef      	b.n	8014de8 <_strtod_l+0x98>
 8014e08:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014e0a:	b13a      	cbz	r2, 8014e1c <_strtod_l+0xcc>
 8014e0c:	2135      	movs	r1, #53	@ 0x35
 8014e0e:	a81c      	add	r0, sp, #112	@ 0x70
 8014e10:	f003 feda 	bl	8018bc8 <__copybits>
 8014e14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014e16:	9805      	ldr	r0, [sp, #20]
 8014e18:	f003 faba 	bl	8018390 <_Bfree>
 8014e1c:	3e01      	subs	r6, #1
 8014e1e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014e20:	2e04      	cmp	r6, #4
 8014e22:	d806      	bhi.n	8014e32 <_strtod_l+0xe2>
 8014e24:	e8df f006 	tbb	[pc, r6]
 8014e28:	201d0314 	.word	0x201d0314
 8014e2c:	14          	.byte	0x14
 8014e2d:	00          	.byte	0x00
 8014e2e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8014e32:	05e1      	lsls	r1, r4, #23
 8014e34:	bf48      	it	mi
 8014e36:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8014e3a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014e3e:	0d1b      	lsrs	r3, r3, #20
 8014e40:	051b      	lsls	r3, r3, #20
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d1bd      	bne.n	8014dc2 <_strtod_l+0x72>
 8014e46:	f002 f80f 	bl	8016e68 <__errno>
 8014e4a:	2322      	movs	r3, #34	@ 0x22
 8014e4c:	6003      	str	r3, [r0, #0]
 8014e4e:	e7b8      	b.n	8014dc2 <_strtod_l+0x72>
 8014e50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014e54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8014e58:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8014e5c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014e60:	e7e7      	b.n	8014e32 <_strtod_l+0xe2>
 8014e62:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8014fe0 <_strtod_l+0x290>
 8014e66:	e7e4      	b.n	8014e32 <_strtod_l+0xe2>
 8014e68:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8014e6c:	f04f 3aff 	mov.w	sl, #4294967295
 8014e70:	e7df      	b.n	8014e32 <_strtod_l+0xe2>
 8014e72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014e74:	1c5a      	adds	r2, r3, #1
 8014e76:	9219      	str	r2, [sp, #100]	@ 0x64
 8014e78:	785b      	ldrb	r3, [r3, #1]
 8014e7a:	2b30      	cmp	r3, #48	@ 0x30
 8014e7c:	d0f9      	beq.n	8014e72 <_strtod_l+0x122>
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d09f      	beq.n	8014dc2 <_strtod_l+0x72>
 8014e82:	2301      	movs	r3, #1
 8014e84:	2700      	movs	r7, #0
 8014e86:	220a      	movs	r2, #10
 8014e88:	46b9      	mov	r9, r7
 8014e8a:	9308      	str	r3, [sp, #32]
 8014e8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014e8e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8014e90:	930c      	str	r3, [sp, #48]	@ 0x30
 8014e92:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8014e94:	7805      	ldrb	r5, [r0, #0]
 8014e96:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8014e9a:	b2d9      	uxtb	r1, r3
 8014e9c:	2909      	cmp	r1, #9
 8014e9e:	d928      	bls.n	8014ef2 <_strtod_l+0x1a2>
 8014ea0:	2201      	movs	r2, #1
 8014ea2:	4950      	ldr	r1, [pc, #320]	@ (8014fe4 <_strtod_l+0x294>)
 8014ea4:	f001 ff04 	bl	8016cb0 <strncmp>
 8014ea8:	2800      	cmp	r0, #0
 8014eaa:	d032      	beq.n	8014f12 <_strtod_l+0x1c2>
 8014eac:	2000      	movs	r0, #0
 8014eae:	462a      	mov	r2, r5
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	464d      	mov	r5, r9
 8014eb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8014eb6:	2a65      	cmp	r2, #101	@ 0x65
 8014eb8:	d001      	beq.n	8014ebe <_strtod_l+0x16e>
 8014eba:	2a45      	cmp	r2, #69	@ 0x45
 8014ebc:	d114      	bne.n	8014ee8 <_strtod_l+0x198>
 8014ebe:	b91d      	cbnz	r5, 8014ec8 <_strtod_l+0x178>
 8014ec0:	9a08      	ldr	r2, [sp, #32]
 8014ec2:	4302      	orrs	r2, r0
 8014ec4:	d096      	beq.n	8014df4 <_strtod_l+0xa4>
 8014ec6:	2500      	movs	r5, #0
 8014ec8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8014eca:	1c62      	adds	r2, r4, #1
 8014ecc:	9219      	str	r2, [sp, #100]	@ 0x64
 8014ece:	7862      	ldrb	r2, [r4, #1]
 8014ed0:	2a2b      	cmp	r2, #43	@ 0x2b
 8014ed2:	d07a      	beq.n	8014fca <_strtod_l+0x27a>
 8014ed4:	2a2d      	cmp	r2, #45	@ 0x2d
 8014ed6:	d07e      	beq.n	8014fd6 <_strtod_l+0x286>
 8014ed8:	f04f 0c00 	mov.w	ip, #0
 8014edc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8014ee0:	2909      	cmp	r1, #9
 8014ee2:	f240 8085 	bls.w	8014ff0 <_strtod_l+0x2a0>
 8014ee6:	9419      	str	r4, [sp, #100]	@ 0x64
 8014ee8:	f04f 0800 	mov.w	r8, #0
 8014eec:	e0a5      	b.n	801503a <_strtod_l+0x2ea>
 8014eee:	2300      	movs	r3, #0
 8014ef0:	e7c8      	b.n	8014e84 <_strtod_l+0x134>
 8014ef2:	f1b9 0f08 	cmp.w	r9, #8
 8014ef6:	bfd8      	it	le
 8014ef8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8014efa:	f100 0001 	add.w	r0, r0, #1
 8014efe:	bfd6      	itet	le
 8014f00:	fb02 3301 	mlale	r3, r2, r1, r3
 8014f04:	fb02 3707 	mlagt	r7, r2, r7, r3
 8014f08:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8014f0a:	f109 0901 	add.w	r9, r9, #1
 8014f0e:	9019      	str	r0, [sp, #100]	@ 0x64
 8014f10:	e7bf      	b.n	8014e92 <_strtod_l+0x142>
 8014f12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014f14:	1c5a      	adds	r2, r3, #1
 8014f16:	9219      	str	r2, [sp, #100]	@ 0x64
 8014f18:	785a      	ldrb	r2, [r3, #1]
 8014f1a:	f1b9 0f00 	cmp.w	r9, #0
 8014f1e:	d03b      	beq.n	8014f98 <_strtod_l+0x248>
 8014f20:	464d      	mov	r5, r9
 8014f22:	900a      	str	r0, [sp, #40]	@ 0x28
 8014f24:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8014f28:	2b09      	cmp	r3, #9
 8014f2a:	d912      	bls.n	8014f52 <_strtod_l+0x202>
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	e7c2      	b.n	8014eb6 <_strtod_l+0x166>
 8014f30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014f32:	3001      	adds	r0, #1
 8014f34:	1c5a      	adds	r2, r3, #1
 8014f36:	9219      	str	r2, [sp, #100]	@ 0x64
 8014f38:	785a      	ldrb	r2, [r3, #1]
 8014f3a:	2a30      	cmp	r2, #48	@ 0x30
 8014f3c:	d0f8      	beq.n	8014f30 <_strtod_l+0x1e0>
 8014f3e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8014f42:	2b08      	cmp	r3, #8
 8014f44:	f200 84c8 	bhi.w	80158d8 <_strtod_l+0xb88>
 8014f48:	900a      	str	r0, [sp, #40]	@ 0x28
 8014f4a:	2000      	movs	r0, #0
 8014f4c:	4605      	mov	r5, r0
 8014f4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014f50:	930c      	str	r3, [sp, #48]	@ 0x30
 8014f52:	3a30      	subs	r2, #48	@ 0x30
 8014f54:	f100 0301 	add.w	r3, r0, #1
 8014f58:	d018      	beq.n	8014f8c <_strtod_l+0x23c>
 8014f5a:	462e      	mov	r6, r5
 8014f5c:	f04f 0e0a 	mov.w	lr, #10
 8014f60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014f62:	4419      	add	r1, r3
 8014f64:	910a      	str	r1, [sp, #40]	@ 0x28
 8014f66:	1c71      	adds	r1, r6, #1
 8014f68:	eba1 0c05 	sub.w	ip, r1, r5
 8014f6c:	4563      	cmp	r3, ip
 8014f6e:	dc15      	bgt.n	8014f9c <_strtod_l+0x24c>
 8014f70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8014f74:	182b      	adds	r3, r5, r0
 8014f76:	2b08      	cmp	r3, #8
 8014f78:	f105 0501 	add.w	r5, r5, #1
 8014f7c:	4405      	add	r5, r0
 8014f7e:	dc1a      	bgt.n	8014fb6 <_strtod_l+0x266>
 8014f80:	230a      	movs	r3, #10
 8014f82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014f84:	fb03 2301 	mla	r3, r3, r1, r2
 8014f88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014f8e:	4618      	mov	r0, r3
 8014f90:	1c51      	adds	r1, r2, #1
 8014f92:	9119      	str	r1, [sp, #100]	@ 0x64
 8014f94:	7852      	ldrb	r2, [r2, #1]
 8014f96:	e7c5      	b.n	8014f24 <_strtod_l+0x1d4>
 8014f98:	4648      	mov	r0, r9
 8014f9a:	e7ce      	b.n	8014f3a <_strtod_l+0x1ea>
 8014f9c:	2e08      	cmp	r6, #8
 8014f9e:	dc05      	bgt.n	8014fac <_strtod_l+0x25c>
 8014fa0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8014fa2:	fb0e f606 	mul.w	r6, lr, r6
 8014fa6:	960b      	str	r6, [sp, #44]	@ 0x2c
 8014fa8:	460e      	mov	r6, r1
 8014faa:	e7dc      	b.n	8014f66 <_strtod_l+0x216>
 8014fac:	2910      	cmp	r1, #16
 8014fae:	bfd8      	it	le
 8014fb0:	fb0e f707 	mulle.w	r7, lr, r7
 8014fb4:	e7f8      	b.n	8014fa8 <_strtod_l+0x258>
 8014fb6:	2b0f      	cmp	r3, #15
 8014fb8:	bfdc      	itt	le
 8014fba:	230a      	movle	r3, #10
 8014fbc:	fb03 2707 	mlale	r7, r3, r7, r2
 8014fc0:	e7e3      	b.n	8014f8a <_strtod_l+0x23a>
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	e77a      	b.n	8014ec0 <_strtod_l+0x170>
 8014fca:	f04f 0c00 	mov.w	ip, #0
 8014fce:	1ca2      	adds	r2, r4, #2
 8014fd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8014fd2:	78a2      	ldrb	r2, [r4, #2]
 8014fd4:	e782      	b.n	8014edc <_strtod_l+0x18c>
 8014fd6:	f04f 0c01 	mov.w	ip, #1
 8014fda:	e7f8      	b.n	8014fce <_strtod_l+0x27e>
 8014fdc:	0801af6c 	.word	0x0801af6c
 8014fe0:	7ff00000 	.word	0x7ff00000
 8014fe4:	0801ad49 	.word	0x0801ad49
 8014fe8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014fea:	1c51      	adds	r1, r2, #1
 8014fec:	9119      	str	r1, [sp, #100]	@ 0x64
 8014fee:	7852      	ldrb	r2, [r2, #1]
 8014ff0:	2a30      	cmp	r2, #48	@ 0x30
 8014ff2:	d0f9      	beq.n	8014fe8 <_strtod_l+0x298>
 8014ff4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8014ff8:	2908      	cmp	r1, #8
 8014ffa:	f63f af75 	bhi.w	8014ee8 <_strtod_l+0x198>
 8014ffe:	f04f 080a 	mov.w	r8, #10
 8015002:	3a30      	subs	r2, #48	@ 0x30
 8015004:	9209      	str	r2, [sp, #36]	@ 0x24
 8015006:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015008:	920f      	str	r2, [sp, #60]	@ 0x3c
 801500a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801500c:	1c56      	adds	r6, r2, #1
 801500e:	9619      	str	r6, [sp, #100]	@ 0x64
 8015010:	7852      	ldrb	r2, [r2, #1]
 8015012:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015016:	f1be 0f09 	cmp.w	lr, #9
 801501a:	d939      	bls.n	8015090 <_strtod_l+0x340>
 801501c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801501e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8015022:	1a76      	subs	r6, r6, r1
 8015024:	2e08      	cmp	r6, #8
 8015026:	dc03      	bgt.n	8015030 <_strtod_l+0x2e0>
 8015028:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801502a:	4588      	cmp	r8, r1
 801502c:	bfa8      	it	ge
 801502e:	4688      	movge	r8, r1
 8015030:	f1bc 0f00 	cmp.w	ip, #0
 8015034:	d001      	beq.n	801503a <_strtod_l+0x2ea>
 8015036:	f1c8 0800 	rsb	r8, r8, #0
 801503a:	2d00      	cmp	r5, #0
 801503c:	d14e      	bne.n	80150dc <_strtod_l+0x38c>
 801503e:	9908      	ldr	r1, [sp, #32]
 8015040:	4308      	orrs	r0, r1
 8015042:	f47f aebe 	bne.w	8014dc2 <_strtod_l+0x72>
 8015046:	2b00      	cmp	r3, #0
 8015048:	f47f aed4 	bne.w	8014df4 <_strtod_l+0xa4>
 801504c:	2a69      	cmp	r2, #105	@ 0x69
 801504e:	d028      	beq.n	80150a2 <_strtod_l+0x352>
 8015050:	dc25      	bgt.n	801509e <_strtod_l+0x34e>
 8015052:	2a49      	cmp	r2, #73	@ 0x49
 8015054:	d025      	beq.n	80150a2 <_strtod_l+0x352>
 8015056:	2a4e      	cmp	r2, #78	@ 0x4e
 8015058:	f47f aecc 	bne.w	8014df4 <_strtod_l+0xa4>
 801505c:	4999      	ldr	r1, [pc, #612]	@ (80152c4 <_strtod_l+0x574>)
 801505e:	a819      	add	r0, sp, #100	@ 0x64
 8015060:	f003 f894 	bl	801818c <__match>
 8015064:	2800      	cmp	r0, #0
 8015066:	f43f aec5 	beq.w	8014df4 <_strtod_l+0xa4>
 801506a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	2b28      	cmp	r3, #40	@ 0x28
 8015070:	d12e      	bne.n	80150d0 <_strtod_l+0x380>
 8015072:	4995      	ldr	r1, [pc, #596]	@ (80152c8 <_strtod_l+0x578>)
 8015074:	aa1c      	add	r2, sp, #112	@ 0x70
 8015076:	a819      	add	r0, sp, #100	@ 0x64
 8015078:	f003 f89c 	bl	80181b4 <__hexnan>
 801507c:	2805      	cmp	r0, #5
 801507e:	d127      	bne.n	80150d0 <_strtod_l+0x380>
 8015080:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015082:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8015086:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801508a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801508e:	e698      	b.n	8014dc2 <_strtod_l+0x72>
 8015090:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015092:	fb08 2101 	mla	r1, r8, r1, r2
 8015096:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801509a:	9209      	str	r2, [sp, #36]	@ 0x24
 801509c:	e7b5      	b.n	801500a <_strtod_l+0x2ba>
 801509e:	2a6e      	cmp	r2, #110	@ 0x6e
 80150a0:	e7da      	b.n	8015058 <_strtod_l+0x308>
 80150a2:	498a      	ldr	r1, [pc, #552]	@ (80152cc <_strtod_l+0x57c>)
 80150a4:	a819      	add	r0, sp, #100	@ 0x64
 80150a6:	f003 f871 	bl	801818c <__match>
 80150aa:	2800      	cmp	r0, #0
 80150ac:	f43f aea2 	beq.w	8014df4 <_strtod_l+0xa4>
 80150b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80150b2:	4987      	ldr	r1, [pc, #540]	@ (80152d0 <_strtod_l+0x580>)
 80150b4:	3b01      	subs	r3, #1
 80150b6:	a819      	add	r0, sp, #100	@ 0x64
 80150b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80150ba:	f003 f867 	bl	801818c <__match>
 80150be:	b910      	cbnz	r0, 80150c6 <_strtod_l+0x376>
 80150c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80150c2:	3301      	adds	r3, #1
 80150c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80150c6:	f04f 0a00 	mov.w	sl, #0
 80150ca:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80152d4 <_strtod_l+0x584>
 80150ce:	e678      	b.n	8014dc2 <_strtod_l+0x72>
 80150d0:	4881      	ldr	r0, [pc, #516]	@ (80152d8 <_strtod_l+0x588>)
 80150d2:	f001 ff1b 	bl	8016f0c <nan>
 80150d6:	4682      	mov	sl, r0
 80150d8:	468b      	mov	fp, r1
 80150da:	e672      	b.n	8014dc2 <_strtod_l+0x72>
 80150dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80150de:	f1b9 0f00 	cmp.w	r9, #0
 80150e2:	bf08      	it	eq
 80150e4:	46a9      	moveq	r9, r5
 80150e6:	eba8 0303 	sub.w	r3, r8, r3
 80150ea:	2d10      	cmp	r5, #16
 80150ec:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80150ee:	462c      	mov	r4, r5
 80150f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80150f2:	bfa8      	it	ge
 80150f4:	2410      	movge	r4, #16
 80150f6:	f7eb f97f 	bl	80003f8 <__aeabi_ui2d>
 80150fa:	2d09      	cmp	r5, #9
 80150fc:	4682      	mov	sl, r0
 80150fe:	468b      	mov	fp, r1
 8015100:	dc11      	bgt.n	8015126 <_strtod_l+0x3d6>
 8015102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015104:	2b00      	cmp	r3, #0
 8015106:	f43f ae5c 	beq.w	8014dc2 <_strtod_l+0x72>
 801510a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801510c:	dd76      	ble.n	80151fc <_strtod_l+0x4ac>
 801510e:	2b16      	cmp	r3, #22
 8015110:	dc5d      	bgt.n	80151ce <_strtod_l+0x47e>
 8015112:	4972      	ldr	r1, [pc, #456]	@ (80152dc <_strtod_l+0x58c>)
 8015114:	4652      	mov	r2, sl
 8015116:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801511a:	465b      	mov	r3, fp
 801511c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015120:	f7eb f9e4 	bl	80004ec <__aeabi_dmul>
 8015124:	e7d7      	b.n	80150d6 <_strtod_l+0x386>
 8015126:	4b6d      	ldr	r3, [pc, #436]	@ (80152dc <_strtod_l+0x58c>)
 8015128:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801512c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8015130:	f7eb f9dc 	bl	80004ec <__aeabi_dmul>
 8015134:	4682      	mov	sl, r0
 8015136:	4638      	mov	r0, r7
 8015138:	468b      	mov	fp, r1
 801513a:	f7eb f95d 	bl	80003f8 <__aeabi_ui2d>
 801513e:	4602      	mov	r2, r0
 8015140:	460b      	mov	r3, r1
 8015142:	4650      	mov	r0, sl
 8015144:	4659      	mov	r1, fp
 8015146:	f7eb f81b 	bl	8000180 <__adddf3>
 801514a:	2d0f      	cmp	r5, #15
 801514c:	4682      	mov	sl, r0
 801514e:	468b      	mov	fp, r1
 8015150:	ddd7      	ble.n	8015102 <_strtod_l+0x3b2>
 8015152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015154:	1b2c      	subs	r4, r5, r4
 8015156:	441c      	add	r4, r3
 8015158:	2c00      	cmp	r4, #0
 801515a:	f340 8093 	ble.w	8015284 <_strtod_l+0x534>
 801515e:	f014 030f 	ands.w	r3, r4, #15
 8015162:	d00a      	beq.n	801517a <_strtod_l+0x42a>
 8015164:	495d      	ldr	r1, [pc, #372]	@ (80152dc <_strtod_l+0x58c>)
 8015166:	4652      	mov	r2, sl
 8015168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801516c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015170:	465b      	mov	r3, fp
 8015172:	f7eb f9bb 	bl	80004ec <__aeabi_dmul>
 8015176:	4682      	mov	sl, r0
 8015178:	468b      	mov	fp, r1
 801517a:	f034 040f 	bics.w	r4, r4, #15
 801517e:	d073      	beq.n	8015268 <_strtod_l+0x518>
 8015180:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8015184:	dd49      	ble.n	801521a <_strtod_l+0x4ca>
 8015186:	2400      	movs	r4, #0
 8015188:	46a0      	mov	r8, r4
 801518a:	46a1      	mov	r9, r4
 801518c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801518e:	2322      	movs	r3, #34	@ 0x22
 8015190:	f04f 0a00 	mov.w	sl, #0
 8015194:	9a05      	ldr	r2, [sp, #20]
 8015196:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80152d4 <_strtod_l+0x584>
 801519a:	6013      	str	r3, [r2, #0]
 801519c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801519e:	2b00      	cmp	r3, #0
 80151a0:	f43f ae0f 	beq.w	8014dc2 <_strtod_l+0x72>
 80151a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80151a6:	9805      	ldr	r0, [sp, #20]
 80151a8:	f003 f8f2 	bl	8018390 <_Bfree>
 80151ac:	4649      	mov	r1, r9
 80151ae:	9805      	ldr	r0, [sp, #20]
 80151b0:	f003 f8ee 	bl	8018390 <_Bfree>
 80151b4:	4641      	mov	r1, r8
 80151b6:	9805      	ldr	r0, [sp, #20]
 80151b8:	f003 f8ea 	bl	8018390 <_Bfree>
 80151bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80151be:	9805      	ldr	r0, [sp, #20]
 80151c0:	f003 f8e6 	bl	8018390 <_Bfree>
 80151c4:	4621      	mov	r1, r4
 80151c6:	9805      	ldr	r0, [sp, #20]
 80151c8:	f003 f8e2 	bl	8018390 <_Bfree>
 80151cc:	e5f9      	b.n	8014dc2 <_strtod_l+0x72>
 80151ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80151d4:	4293      	cmp	r3, r2
 80151d6:	dbbc      	blt.n	8015152 <_strtod_l+0x402>
 80151d8:	4c40      	ldr	r4, [pc, #256]	@ (80152dc <_strtod_l+0x58c>)
 80151da:	f1c5 050f 	rsb	r5, r5, #15
 80151de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80151e2:	4652      	mov	r2, sl
 80151e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80151e8:	465b      	mov	r3, fp
 80151ea:	f7eb f97f 	bl	80004ec <__aeabi_dmul>
 80151ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151f0:	1b5d      	subs	r5, r3, r5
 80151f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80151f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80151fa:	e791      	b.n	8015120 <_strtod_l+0x3d0>
 80151fc:	3316      	adds	r3, #22
 80151fe:	dba8      	blt.n	8015152 <_strtod_l+0x402>
 8015200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015202:	4650      	mov	r0, sl
 8015204:	eba3 0808 	sub.w	r8, r3, r8
 8015208:	4b34      	ldr	r3, [pc, #208]	@ (80152dc <_strtod_l+0x58c>)
 801520a:	4659      	mov	r1, fp
 801520c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8015210:	e9d8 2300 	ldrd	r2, r3, [r8]
 8015214:	f7eb fa94 	bl	8000740 <__aeabi_ddiv>
 8015218:	e75d      	b.n	80150d6 <_strtod_l+0x386>
 801521a:	2300      	movs	r3, #0
 801521c:	4650      	mov	r0, sl
 801521e:	4659      	mov	r1, fp
 8015220:	461e      	mov	r6, r3
 8015222:	4f2f      	ldr	r7, [pc, #188]	@ (80152e0 <_strtod_l+0x590>)
 8015224:	1124      	asrs	r4, r4, #4
 8015226:	2c01      	cmp	r4, #1
 8015228:	dc21      	bgt.n	801526e <_strtod_l+0x51e>
 801522a:	b10b      	cbz	r3, 8015230 <_strtod_l+0x4e0>
 801522c:	4682      	mov	sl, r0
 801522e:	468b      	mov	fp, r1
 8015230:	492b      	ldr	r1, [pc, #172]	@ (80152e0 <_strtod_l+0x590>)
 8015232:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015236:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801523a:	4652      	mov	r2, sl
 801523c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015240:	465b      	mov	r3, fp
 8015242:	f7eb f953 	bl	80004ec <__aeabi_dmul>
 8015246:	4b23      	ldr	r3, [pc, #140]	@ (80152d4 <_strtod_l+0x584>)
 8015248:	460a      	mov	r2, r1
 801524a:	400b      	ands	r3, r1
 801524c:	4925      	ldr	r1, [pc, #148]	@ (80152e4 <_strtod_l+0x594>)
 801524e:	4682      	mov	sl, r0
 8015250:	428b      	cmp	r3, r1
 8015252:	d898      	bhi.n	8015186 <_strtod_l+0x436>
 8015254:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8015258:	428b      	cmp	r3, r1
 801525a:	bf86      	itte	hi
 801525c:	f04f 3aff 	movhi.w	sl, #4294967295
 8015260:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80152e8 <_strtod_l+0x598>
 8015264:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8015268:	2300      	movs	r3, #0
 801526a:	9308      	str	r3, [sp, #32]
 801526c:	e076      	b.n	801535c <_strtod_l+0x60c>
 801526e:	07e2      	lsls	r2, r4, #31
 8015270:	d504      	bpl.n	801527c <_strtod_l+0x52c>
 8015272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015276:	f7eb f939 	bl	80004ec <__aeabi_dmul>
 801527a:	2301      	movs	r3, #1
 801527c:	3601      	adds	r6, #1
 801527e:	1064      	asrs	r4, r4, #1
 8015280:	3708      	adds	r7, #8
 8015282:	e7d0      	b.n	8015226 <_strtod_l+0x4d6>
 8015284:	d0f0      	beq.n	8015268 <_strtod_l+0x518>
 8015286:	4264      	negs	r4, r4
 8015288:	f014 020f 	ands.w	r2, r4, #15
 801528c:	d00a      	beq.n	80152a4 <_strtod_l+0x554>
 801528e:	4b13      	ldr	r3, [pc, #76]	@ (80152dc <_strtod_l+0x58c>)
 8015290:	4650      	mov	r0, sl
 8015292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015296:	4659      	mov	r1, fp
 8015298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801529c:	f7eb fa50 	bl	8000740 <__aeabi_ddiv>
 80152a0:	4682      	mov	sl, r0
 80152a2:	468b      	mov	fp, r1
 80152a4:	1124      	asrs	r4, r4, #4
 80152a6:	d0df      	beq.n	8015268 <_strtod_l+0x518>
 80152a8:	2c1f      	cmp	r4, #31
 80152aa:	dd1f      	ble.n	80152ec <_strtod_l+0x59c>
 80152ac:	2400      	movs	r4, #0
 80152ae:	46a0      	mov	r8, r4
 80152b0:	46a1      	mov	r9, r4
 80152b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80152b4:	2322      	movs	r3, #34	@ 0x22
 80152b6:	9a05      	ldr	r2, [sp, #20]
 80152b8:	f04f 0a00 	mov.w	sl, #0
 80152bc:	f04f 0b00 	mov.w	fp, #0
 80152c0:	6013      	str	r3, [r2, #0]
 80152c2:	e76b      	b.n	801519c <_strtod_l+0x44c>
 80152c4:	0801ad58 	.word	0x0801ad58
 80152c8:	0801af58 	.word	0x0801af58
 80152cc:	0801ad50 	.word	0x0801ad50
 80152d0:	0801adfe 	.word	0x0801adfe
 80152d4:	7ff00000 	.word	0x7ff00000
 80152d8:	0801ad48 	.word	0x0801ad48
 80152dc:	0801b0e0 	.word	0x0801b0e0
 80152e0:	0801b0b8 	.word	0x0801b0b8
 80152e4:	7ca00000 	.word	0x7ca00000
 80152e8:	7fefffff 	.word	0x7fefffff
 80152ec:	f014 0310 	ands.w	r3, r4, #16
 80152f0:	bf18      	it	ne
 80152f2:	236a      	movne	r3, #106	@ 0x6a
 80152f4:	4650      	mov	r0, sl
 80152f6:	9308      	str	r3, [sp, #32]
 80152f8:	4659      	mov	r1, fp
 80152fa:	2300      	movs	r3, #0
 80152fc:	4e77      	ldr	r6, [pc, #476]	@ (80154dc <_strtod_l+0x78c>)
 80152fe:	07e7      	lsls	r7, r4, #31
 8015300:	d504      	bpl.n	801530c <_strtod_l+0x5bc>
 8015302:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015306:	f7eb f8f1 	bl	80004ec <__aeabi_dmul>
 801530a:	2301      	movs	r3, #1
 801530c:	1064      	asrs	r4, r4, #1
 801530e:	f106 0608 	add.w	r6, r6, #8
 8015312:	d1f4      	bne.n	80152fe <_strtod_l+0x5ae>
 8015314:	b10b      	cbz	r3, 801531a <_strtod_l+0x5ca>
 8015316:	4682      	mov	sl, r0
 8015318:	468b      	mov	fp, r1
 801531a:	9b08      	ldr	r3, [sp, #32]
 801531c:	b1b3      	cbz	r3, 801534c <_strtod_l+0x5fc>
 801531e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8015322:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8015326:	2b00      	cmp	r3, #0
 8015328:	4659      	mov	r1, fp
 801532a:	dd0f      	ble.n	801534c <_strtod_l+0x5fc>
 801532c:	2b1f      	cmp	r3, #31
 801532e:	dd58      	ble.n	80153e2 <_strtod_l+0x692>
 8015330:	2b34      	cmp	r3, #52	@ 0x34
 8015332:	bfd8      	it	le
 8015334:	f04f 33ff 	movle.w	r3, #4294967295
 8015338:	f04f 0a00 	mov.w	sl, #0
 801533c:	bfcf      	iteee	gt
 801533e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015342:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8015346:	4093      	lslle	r3, r2
 8015348:	ea03 0b01 	andle.w	fp, r3, r1
 801534c:	2200      	movs	r2, #0
 801534e:	2300      	movs	r3, #0
 8015350:	4650      	mov	r0, sl
 8015352:	4659      	mov	r1, fp
 8015354:	f7eb fb32 	bl	80009bc <__aeabi_dcmpeq>
 8015358:	2800      	cmp	r0, #0
 801535a:	d1a7      	bne.n	80152ac <_strtod_l+0x55c>
 801535c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801535e:	464a      	mov	r2, r9
 8015360:	9300      	str	r3, [sp, #0]
 8015362:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015364:	462b      	mov	r3, r5
 8015366:	9805      	ldr	r0, [sp, #20]
 8015368:	f003 f87a 	bl	8018460 <__s2b>
 801536c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801536e:	2800      	cmp	r0, #0
 8015370:	f43f af09 	beq.w	8015186 <_strtod_l+0x436>
 8015374:	2400      	movs	r4, #0
 8015376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801537a:	2a00      	cmp	r2, #0
 801537c:	eba3 0308 	sub.w	r3, r3, r8
 8015380:	bfa8      	it	ge
 8015382:	2300      	movge	r3, #0
 8015384:	46a0      	mov	r8, r4
 8015386:	9312      	str	r3, [sp, #72]	@ 0x48
 8015388:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801538c:	9316      	str	r3, [sp, #88]	@ 0x58
 801538e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015390:	9805      	ldr	r0, [sp, #20]
 8015392:	6859      	ldr	r1, [r3, #4]
 8015394:	f002 ffbc 	bl	8018310 <_Balloc>
 8015398:	4681      	mov	r9, r0
 801539a:	2800      	cmp	r0, #0
 801539c:	f43f aef7 	beq.w	801518e <_strtod_l+0x43e>
 80153a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153a2:	300c      	adds	r0, #12
 80153a4:	691a      	ldr	r2, [r3, #16]
 80153a6:	f103 010c 	add.w	r1, r3, #12
 80153aa:	3202      	adds	r2, #2
 80153ac:	0092      	lsls	r2, r2, #2
 80153ae:	f001 fd9e 	bl	8016eee <memcpy>
 80153b2:	ab1c      	add	r3, sp, #112	@ 0x70
 80153b4:	9301      	str	r3, [sp, #4]
 80153b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80153b8:	9300      	str	r3, [sp, #0]
 80153ba:	4652      	mov	r2, sl
 80153bc:	465b      	mov	r3, fp
 80153be:	9805      	ldr	r0, [sp, #20]
 80153c0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80153c4:	f003 fb78 	bl	8018ab8 <__d2b>
 80153c8:	901a      	str	r0, [sp, #104]	@ 0x68
 80153ca:	2800      	cmp	r0, #0
 80153cc:	f43f aedf 	beq.w	801518e <_strtod_l+0x43e>
 80153d0:	2101      	movs	r1, #1
 80153d2:	9805      	ldr	r0, [sp, #20]
 80153d4:	f003 f8da 	bl	801858c <__i2b>
 80153d8:	4680      	mov	r8, r0
 80153da:	b948      	cbnz	r0, 80153f0 <_strtod_l+0x6a0>
 80153dc:	f04f 0800 	mov.w	r8, #0
 80153e0:	e6d5      	b.n	801518e <_strtod_l+0x43e>
 80153e2:	f04f 32ff 	mov.w	r2, #4294967295
 80153e6:	fa02 f303 	lsl.w	r3, r2, r3
 80153ea:	ea03 0a0a 	and.w	sl, r3, sl
 80153ee:	e7ad      	b.n	801534c <_strtod_l+0x5fc>
 80153f0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80153f2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80153f4:	2d00      	cmp	r5, #0
 80153f6:	bfab      	itete	ge
 80153f8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80153fa:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80153fc:	18ef      	addge	r7, r5, r3
 80153fe:	1b5e      	sublt	r6, r3, r5
 8015400:	9b08      	ldr	r3, [sp, #32]
 8015402:	bfa8      	it	ge
 8015404:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8015406:	eba5 0503 	sub.w	r5, r5, r3
 801540a:	4415      	add	r5, r2
 801540c:	4b34      	ldr	r3, [pc, #208]	@ (80154e0 <_strtod_l+0x790>)
 801540e:	f105 35ff 	add.w	r5, r5, #4294967295
 8015412:	bfb8      	it	lt
 8015414:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8015416:	429d      	cmp	r5, r3
 8015418:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801541c:	da50      	bge.n	80154c0 <_strtod_l+0x770>
 801541e:	1b5b      	subs	r3, r3, r5
 8015420:	2b1f      	cmp	r3, #31
 8015422:	f04f 0101 	mov.w	r1, #1
 8015426:	eba2 0203 	sub.w	r2, r2, r3
 801542a:	dc3d      	bgt.n	80154a8 <_strtod_l+0x758>
 801542c:	fa01 f303 	lsl.w	r3, r1, r3
 8015430:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015432:	2300      	movs	r3, #0
 8015434:	9310      	str	r3, [sp, #64]	@ 0x40
 8015436:	18bd      	adds	r5, r7, r2
 8015438:	9b08      	ldr	r3, [sp, #32]
 801543a:	42af      	cmp	r7, r5
 801543c:	4416      	add	r6, r2
 801543e:	441e      	add	r6, r3
 8015440:	463b      	mov	r3, r7
 8015442:	bfa8      	it	ge
 8015444:	462b      	movge	r3, r5
 8015446:	42b3      	cmp	r3, r6
 8015448:	bfa8      	it	ge
 801544a:	4633      	movge	r3, r6
 801544c:	2b00      	cmp	r3, #0
 801544e:	bfc2      	ittt	gt
 8015450:	1aed      	subgt	r5, r5, r3
 8015452:	1af6      	subgt	r6, r6, r3
 8015454:	1aff      	subgt	r7, r7, r3
 8015456:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015458:	2b00      	cmp	r3, #0
 801545a:	dd16      	ble.n	801548a <_strtod_l+0x73a>
 801545c:	4641      	mov	r1, r8
 801545e:	461a      	mov	r2, r3
 8015460:	9805      	ldr	r0, [sp, #20]
 8015462:	f003 f94b 	bl	80186fc <__pow5mult>
 8015466:	4680      	mov	r8, r0
 8015468:	2800      	cmp	r0, #0
 801546a:	d0b7      	beq.n	80153dc <_strtod_l+0x68c>
 801546c:	4601      	mov	r1, r0
 801546e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015470:	9805      	ldr	r0, [sp, #20]
 8015472:	f003 f8a1 	bl	80185b8 <__multiply>
 8015476:	900a      	str	r0, [sp, #40]	@ 0x28
 8015478:	2800      	cmp	r0, #0
 801547a:	f43f ae88 	beq.w	801518e <_strtod_l+0x43e>
 801547e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015480:	9805      	ldr	r0, [sp, #20]
 8015482:	f002 ff85 	bl	8018390 <_Bfree>
 8015486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015488:	931a      	str	r3, [sp, #104]	@ 0x68
 801548a:	2d00      	cmp	r5, #0
 801548c:	dc1d      	bgt.n	80154ca <_strtod_l+0x77a>
 801548e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015490:	2b00      	cmp	r3, #0
 8015492:	dd27      	ble.n	80154e4 <_strtod_l+0x794>
 8015494:	4649      	mov	r1, r9
 8015496:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015498:	9805      	ldr	r0, [sp, #20]
 801549a:	f003 f92f 	bl	80186fc <__pow5mult>
 801549e:	4681      	mov	r9, r0
 80154a0:	bb00      	cbnz	r0, 80154e4 <_strtod_l+0x794>
 80154a2:	f04f 0900 	mov.w	r9, #0
 80154a6:	e672      	b.n	801518e <_strtod_l+0x43e>
 80154a8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80154ac:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80154b0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80154b4:	35e2      	adds	r5, #226	@ 0xe2
 80154b6:	fa01 f305 	lsl.w	r3, r1, r5
 80154ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80154bc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80154be:	e7ba      	b.n	8015436 <_strtod_l+0x6e6>
 80154c0:	2300      	movs	r3, #0
 80154c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80154c4:	2301      	movs	r3, #1
 80154c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80154c8:	e7b5      	b.n	8015436 <_strtod_l+0x6e6>
 80154ca:	462a      	mov	r2, r5
 80154cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80154ce:	9805      	ldr	r0, [sp, #20]
 80154d0:	f003 f96e 	bl	80187b0 <__lshift>
 80154d4:	901a      	str	r0, [sp, #104]	@ 0x68
 80154d6:	2800      	cmp	r0, #0
 80154d8:	d1d9      	bne.n	801548e <_strtod_l+0x73e>
 80154da:	e658      	b.n	801518e <_strtod_l+0x43e>
 80154dc:	0801af80 	.word	0x0801af80
 80154e0:	fffffc02 	.word	0xfffffc02
 80154e4:	2e00      	cmp	r6, #0
 80154e6:	dd07      	ble.n	80154f8 <_strtod_l+0x7a8>
 80154e8:	4649      	mov	r1, r9
 80154ea:	4632      	mov	r2, r6
 80154ec:	9805      	ldr	r0, [sp, #20]
 80154ee:	f003 f95f 	bl	80187b0 <__lshift>
 80154f2:	4681      	mov	r9, r0
 80154f4:	2800      	cmp	r0, #0
 80154f6:	d0d4      	beq.n	80154a2 <_strtod_l+0x752>
 80154f8:	2f00      	cmp	r7, #0
 80154fa:	dd08      	ble.n	801550e <_strtod_l+0x7be>
 80154fc:	4641      	mov	r1, r8
 80154fe:	463a      	mov	r2, r7
 8015500:	9805      	ldr	r0, [sp, #20]
 8015502:	f003 f955 	bl	80187b0 <__lshift>
 8015506:	4680      	mov	r8, r0
 8015508:	2800      	cmp	r0, #0
 801550a:	f43f ae40 	beq.w	801518e <_strtod_l+0x43e>
 801550e:	464a      	mov	r2, r9
 8015510:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015512:	9805      	ldr	r0, [sp, #20]
 8015514:	f003 f9d4 	bl	80188c0 <__mdiff>
 8015518:	4604      	mov	r4, r0
 801551a:	2800      	cmp	r0, #0
 801551c:	f43f ae37 	beq.w	801518e <_strtod_l+0x43e>
 8015520:	68c3      	ldr	r3, [r0, #12]
 8015522:	4641      	mov	r1, r8
 8015524:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015526:	2300      	movs	r3, #0
 8015528:	60c3      	str	r3, [r0, #12]
 801552a:	f003 f9ad 	bl	8018888 <__mcmp>
 801552e:	2800      	cmp	r0, #0
 8015530:	da3d      	bge.n	80155ae <_strtod_l+0x85e>
 8015532:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015534:	ea53 030a 	orrs.w	r3, r3, sl
 8015538:	d163      	bne.n	8015602 <_strtod_l+0x8b2>
 801553a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801553e:	2b00      	cmp	r3, #0
 8015540:	d15f      	bne.n	8015602 <_strtod_l+0x8b2>
 8015542:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015546:	0d1b      	lsrs	r3, r3, #20
 8015548:	051b      	lsls	r3, r3, #20
 801554a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801554e:	d958      	bls.n	8015602 <_strtod_l+0x8b2>
 8015550:	6963      	ldr	r3, [r4, #20]
 8015552:	b913      	cbnz	r3, 801555a <_strtod_l+0x80a>
 8015554:	6923      	ldr	r3, [r4, #16]
 8015556:	2b01      	cmp	r3, #1
 8015558:	dd53      	ble.n	8015602 <_strtod_l+0x8b2>
 801555a:	4621      	mov	r1, r4
 801555c:	2201      	movs	r2, #1
 801555e:	9805      	ldr	r0, [sp, #20]
 8015560:	f003 f926 	bl	80187b0 <__lshift>
 8015564:	4641      	mov	r1, r8
 8015566:	4604      	mov	r4, r0
 8015568:	f003 f98e 	bl	8018888 <__mcmp>
 801556c:	2800      	cmp	r0, #0
 801556e:	dd48      	ble.n	8015602 <_strtod_l+0x8b2>
 8015570:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015574:	9a08      	ldr	r2, [sp, #32]
 8015576:	0d1b      	lsrs	r3, r3, #20
 8015578:	051b      	lsls	r3, r3, #20
 801557a:	2a00      	cmp	r2, #0
 801557c:	d062      	beq.n	8015644 <_strtod_l+0x8f4>
 801557e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015582:	d85f      	bhi.n	8015644 <_strtod_l+0x8f4>
 8015584:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015588:	f67f ae94 	bls.w	80152b4 <_strtod_l+0x564>
 801558c:	4650      	mov	r0, sl
 801558e:	4659      	mov	r1, fp
 8015590:	4ba3      	ldr	r3, [pc, #652]	@ (8015820 <_strtod_l+0xad0>)
 8015592:	2200      	movs	r2, #0
 8015594:	f7ea ffaa 	bl	80004ec <__aeabi_dmul>
 8015598:	4ba2      	ldr	r3, [pc, #648]	@ (8015824 <_strtod_l+0xad4>)
 801559a:	4682      	mov	sl, r0
 801559c:	400b      	ands	r3, r1
 801559e:	468b      	mov	fp, r1
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	f47f adff 	bne.w	80151a4 <_strtod_l+0x454>
 80155a6:	2322      	movs	r3, #34	@ 0x22
 80155a8:	9a05      	ldr	r2, [sp, #20]
 80155aa:	6013      	str	r3, [r2, #0]
 80155ac:	e5fa      	b.n	80151a4 <_strtod_l+0x454>
 80155ae:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80155b2:	d165      	bne.n	8015680 <_strtod_l+0x930>
 80155b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80155b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80155ba:	b35a      	cbz	r2, 8015614 <_strtod_l+0x8c4>
 80155bc:	4a9a      	ldr	r2, [pc, #616]	@ (8015828 <_strtod_l+0xad8>)
 80155be:	4293      	cmp	r3, r2
 80155c0:	d12b      	bne.n	801561a <_strtod_l+0x8ca>
 80155c2:	9b08      	ldr	r3, [sp, #32]
 80155c4:	4651      	mov	r1, sl
 80155c6:	b303      	cbz	r3, 801560a <_strtod_l+0x8ba>
 80155c8:	465a      	mov	r2, fp
 80155ca:	4b96      	ldr	r3, [pc, #600]	@ (8015824 <_strtod_l+0xad4>)
 80155cc:	4013      	ands	r3, r2
 80155ce:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80155d2:	f04f 32ff 	mov.w	r2, #4294967295
 80155d6:	d81b      	bhi.n	8015610 <_strtod_l+0x8c0>
 80155d8:	0d1b      	lsrs	r3, r3, #20
 80155da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80155de:	fa02 f303 	lsl.w	r3, r2, r3
 80155e2:	4299      	cmp	r1, r3
 80155e4:	d119      	bne.n	801561a <_strtod_l+0x8ca>
 80155e6:	4b91      	ldr	r3, [pc, #580]	@ (801582c <_strtod_l+0xadc>)
 80155e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d102      	bne.n	80155f4 <_strtod_l+0x8a4>
 80155ee:	3101      	adds	r1, #1
 80155f0:	f43f adcd 	beq.w	801518e <_strtod_l+0x43e>
 80155f4:	f04f 0a00 	mov.w	sl, #0
 80155f8:	4b8a      	ldr	r3, [pc, #552]	@ (8015824 <_strtod_l+0xad4>)
 80155fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80155fc:	401a      	ands	r2, r3
 80155fe:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015602:	9b08      	ldr	r3, [sp, #32]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d1c1      	bne.n	801558c <_strtod_l+0x83c>
 8015608:	e5cc      	b.n	80151a4 <_strtod_l+0x454>
 801560a:	f04f 33ff 	mov.w	r3, #4294967295
 801560e:	e7e8      	b.n	80155e2 <_strtod_l+0x892>
 8015610:	4613      	mov	r3, r2
 8015612:	e7e6      	b.n	80155e2 <_strtod_l+0x892>
 8015614:	ea53 030a 	orrs.w	r3, r3, sl
 8015618:	d0aa      	beq.n	8015570 <_strtod_l+0x820>
 801561a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801561c:	b1db      	cbz	r3, 8015656 <_strtod_l+0x906>
 801561e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015620:	4213      	tst	r3, r2
 8015622:	d0ee      	beq.n	8015602 <_strtod_l+0x8b2>
 8015624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015626:	4650      	mov	r0, sl
 8015628:	4659      	mov	r1, fp
 801562a:	9a08      	ldr	r2, [sp, #32]
 801562c:	b1bb      	cbz	r3, 801565e <_strtod_l+0x90e>
 801562e:	f7ff fb6d 	bl	8014d0c <sulp>
 8015632:	4602      	mov	r2, r0
 8015634:	460b      	mov	r3, r1
 8015636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801563a:	f7ea fda1 	bl	8000180 <__adddf3>
 801563e:	4682      	mov	sl, r0
 8015640:	468b      	mov	fp, r1
 8015642:	e7de      	b.n	8015602 <_strtod_l+0x8b2>
 8015644:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015648:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801564c:	f04f 3aff 	mov.w	sl, #4294967295
 8015650:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015654:	e7d5      	b.n	8015602 <_strtod_l+0x8b2>
 8015656:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015658:	ea13 0f0a 	tst.w	r3, sl
 801565c:	e7e1      	b.n	8015622 <_strtod_l+0x8d2>
 801565e:	f7ff fb55 	bl	8014d0c <sulp>
 8015662:	4602      	mov	r2, r0
 8015664:	460b      	mov	r3, r1
 8015666:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801566a:	f7ea fd87 	bl	800017c <__aeabi_dsub>
 801566e:	2200      	movs	r2, #0
 8015670:	2300      	movs	r3, #0
 8015672:	4682      	mov	sl, r0
 8015674:	468b      	mov	fp, r1
 8015676:	f7eb f9a1 	bl	80009bc <__aeabi_dcmpeq>
 801567a:	2800      	cmp	r0, #0
 801567c:	d0c1      	beq.n	8015602 <_strtod_l+0x8b2>
 801567e:	e619      	b.n	80152b4 <_strtod_l+0x564>
 8015680:	4641      	mov	r1, r8
 8015682:	4620      	mov	r0, r4
 8015684:	f003 fa70 	bl	8018b68 <__ratio>
 8015688:	2200      	movs	r2, #0
 801568a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801568e:	4606      	mov	r6, r0
 8015690:	460f      	mov	r7, r1
 8015692:	f7eb f9a7 	bl	80009e4 <__aeabi_dcmple>
 8015696:	2800      	cmp	r0, #0
 8015698:	d06d      	beq.n	8015776 <_strtod_l+0xa26>
 801569a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801569c:	2b00      	cmp	r3, #0
 801569e:	d178      	bne.n	8015792 <_strtod_l+0xa42>
 80156a0:	f1ba 0f00 	cmp.w	sl, #0
 80156a4:	d156      	bne.n	8015754 <_strtod_l+0xa04>
 80156a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d158      	bne.n	8015762 <_strtod_l+0xa12>
 80156b0:	2200      	movs	r2, #0
 80156b2:	4630      	mov	r0, r6
 80156b4:	4639      	mov	r1, r7
 80156b6:	4b5e      	ldr	r3, [pc, #376]	@ (8015830 <_strtod_l+0xae0>)
 80156b8:	f7eb f98a 	bl	80009d0 <__aeabi_dcmplt>
 80156bc:	2800      	cmp	r0, #0
 80156be:	d157      	bne.n	8015770 <_strtod_l+0xa20>
 80156c0:	4630      	mov	r0, r6
 80156c2:	4639      	mov	r1, r7
 80156c4:	2200      	movs	r2, #0
 80156c6:	4b5b      	ldr	r3, [pc, #364]	@ (8015834 <_strtod_l+0xae4>)
 80156c8:	f7ea ff10 	bl	80004ec <__aeabi_dmul>
 80156cc:	4606      	mov	r6, r0
 80156ce:	460f      	mov	r7, r1
 80156d0:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80156d4:	9606      	str	r6, [sp, #24]
 80156d6:	9307      	str	r3, [sp, #28]
 80156d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80156dc:	4d51      	ldr	r5, [pc, #324]	@ (8015824 <_strtod_l+0xad4>)
 80156de:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80156e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156e4:	401d      	ands	r5, r3
 80156e6:	4b54      	ldr	r3, [pc, #336]	@ (8015838 <_strtod_l+0xae8>)
 80156e8:	429d      	cmp	r5, r3
 80156ea:	f040 80ab 	bne.w	8015844 <_strtod_l+0xaf4>
 80156ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156f0:	4650      	mov	r0, sl
 80156f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80156f6:	4659      	mov	r1, fp
 80156f8:	f003 f976 	bl	80189e8 <__ulp>
 80156fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015700:	f7ea fef4 	bl	80004ec <__aeabi_dmul>
 8015704:	4652      	mov	r2, sl
 8015706:	465b      	mov	r3, fp
 8015708:	f7ea fd3a 	bl	8000180 <__adddf3>
 801570c:	460b      	mov	r3, r1
 801570e:	4945      	ldr	r1, [pc, #276]	@ (8015824 <_strtod_l+0xad4>)
 8015710:	4a4a      	ldr	r2, [pc, #296]	@ (801583c <_strtod_l+0xaec>)
 8015712:	4019      	ands	r1, r3
 8015714:	4291      	cmp	r1, r2
 8015716:	4682      	mov	sl, r0
 8015718:	d942      	bls.n	80157a0 <_strtod_l+0xa50>
 801571a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801571c:	4b43      	ldr	r3, [pc, #268]	@ (801582c <_strtod_l+0xadc>)
 801571e:	429a      	cmp	r2, r3
 8015720:	d103      	bne.n	801572a <_strtod_l+0x9da>
 8015722:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015724:	3301      	adds	r3, #1
 8015726:	f43f ad32 	beq.w	801518e <_strtod_l+0x43e>
 801572a:	f04f 3aff 	mov.w	sl, #4294967295
 801572e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 801582c <_strtod_l+0xadc>
 8015732:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015734:	9805      	ldr	r0, [sp, #20]
 8015736:	f002 fe2b 	bl	8018390 <_Bfree>
 801573a:	4649      	mov	r1, r9
 801573c:	9805      	ldr	r0, [sp, #20]
 801573e:	f002 fe27 	bl	8018390 <_Bfree>
 8015742:	4641      	mov	r1, r8
 8015744:	9805      	ldr	r0, [sp, #20]
 8015746:	f002 fe23 	bl	8018390 <_Bfree>
 801574a:	4621      	mov	r1, r4
 801574c:	9805      	ldr	r0, [sp, #20]
 801574e:	f002 fe1f 	bl	8018390 <_Bfree>
 8015752:	e61c      	b.n	801538e <_strtod_l+0x63e>
 8015754:	f1ba 0f01 	cmp.w	sl, #1
 8015758:	d103      	bne.n	8015762 <_strtod_l+0xa12>
 801575a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801575c:	2b00      	cmp	r3, #0
 801575e:	f43f ada9 	beq.w	80152b4 <_strtod_l+0x564>
 8015762:	2200      	movs	r2, #0
 8015764:	4b36      	ldr	r3, [pc, #216]	@ (8015840 <_strtod_l+0xaf0>)
 8015766:	2600      	movs	r6, #0
 8015768:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801576c:	4f30      	ldr	r7, [pc, #192]	@ (8015830 <_strtod_l+0xae0>)
 801576e:	e7b3      	b.n	80156d8 <_strtod_l+0x988>
 8015770:	2600      	movs	r6, #0
 8015772:	4f30      	ldr	r7, [pc, #192]	@ (8015834 <_strtod_l+0xae4>)
 8015774:	e7ac      	b.n	80156d0 <_strtod_l+0x980>
 8015776:	4630      	mov	r0, r6
 8015778:	4639      	mov	r1, r7
 801577a:	4b2e      	ldr	r3, [pc, #184]	@ (8015834 <_strtod_l+0xae4>)
 801577c:	2200      	movs	r2, #0
 801577e:	f7ea feb5 	bl	80004ec <__aeabi_dmul>
 8015782:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015784:	4606      	mov	r6, r0
 8015786:	460f      	mov	r7, r1
 8015788:	2b00      	cmp	r3, #0
 801578a:	d0a1      	beq.n	80156d0 <_strtod_l+0x980>
 801578c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015790:	e7a2      	b.n	80156d8 <_strtod_l+0x988>
 8015792:	2200      	movs	r2, #0
 8015794:	4b26      	ldr	r3, [pc, #152]	@ (8015830 <_strtod_l+0xae0>)
 8015796:	4616      	mov	r6, r2
 8015798:	461f      	mov	r7, r3
 801579a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801579e:	e79b      	b.n	80156d8 <_strtod_l+0x988>
 80157a0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80157a4:	9b08      	ldr	r3, [sp, #32]
 80157a6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d1c1      	bne.n	8015732 <_strtod_l+0x9e2>
 80157ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80157b2:	0d1b      	lsrs	r3, r3, #20
 80157b4:	051b      	lsls	r3, r3, #20
 80157b6:	429d      	cmp	r5, r3
 80157b8:	d1bb      	bne.n	8015732 <_strtod_l+0x9e2>
 80157ba:	4630      	mov	r0, r6
 80157bc:	4639      	mov	r1, r7
 80157be:	f7eb fa53 	bl	8000c68 <__aeabi_d2lz>
 80157c2:	f7ea fe65 	bl	8000490 <__aeabi_l2d>
 80157c6:	4602      	mov	r2, r0
 80157c8:	460b      	mov	r3, r1
 80157ca:	4630      	mov	r0, r6
 80157cc:	4639      	mov	r1, r7
 80157ce:	f7ea fcd5 	bl	800017c <__aeabi_dsub>
 80157d2:	460b      	mov	r3, r1
 80157d4:	4602      	mov	r2, r0
 80157d6:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80157da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80157de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80157e0:	ea46 060a 	orr.w	r6, r6, sl
 80157e4:	431e      	orrs	r6, r3
 80157e6:	d06a      	beq.n	80158be <_strtod_l+0xb6e>
 80157e8:	a309      	add	r3, pc, #36	@ (adr r3, 8015810 <_strtod_l+0xac0>)
 80157ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ee:	f7eb f8ef 	bl	80009d0 <__aeabi_dcmplt>
 80157f2:	2800      	cmp	r0, #0
 80157f4:	f47f acd6 	bne.w	80151a4 <_strtod_l+0x454>
 80157f8:	a307      	add	r3, pc, #28	@ (adr r3, 8015818 <_strtod_l+0xac8>)
 80157fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015802:	f7eb f903 	bl	8000a0c <__aeabi_dcmpgt>
 8015806:	2800      	cmp	r0, #0
 8015808:	d093      	beq.n	8015732 <_strtod_l+0x9e2>
 801580a:	e4cb      	b.n	80151a4 <_strtod_l+0x454>
 801580c:	f3af 8000 	nop.w
 8015810:	94a03595 	.word	0x94a03595
 8015814:	3fdfffff 	.word	0x3fdfffff
 8015818:	35afe535 	.word	0x35afe535
 801581c:	3fe00000 	.word	0x3fe00000
 8015820:	39500000 	.word	0x39500000
 8015824:	7ff00000 	.word	0x7ff00000
 8015828:	000fffff 	.word	0x000fffff
 801582c:	7fefffff 	.word	0x7fefffff
 8015830:	3ff00000 	.word	0x3ff00000
 8015834:	3fe00000 	.word	0x3fe00000
 8015838:	7fe00000 	.word	0x7fe00000
 801583c:	7c9fffff 	.word	0x7c9fffff
 8015840:	bff00000 	.word	0xbff00000
 8015844:	9b08      	ldr	r3, [sp, #32]
 8015846:	b323      	cbz	r3, 8015892 <_strtod_l+0xb42>
 8015848:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801584c:	d821      	bhi.n	8015892 <_strtod_l+0xb42>
 801584e:	a328      	add	r3, pc, #160	@ (adr r3, 80158f0 <_strtod_l+0xba0>)
 8015850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015854:	4630      	mov	r0, r6
 8015856:	4639      	mov	r1, r7
 8015858:	f7eb f8c4 	bl	80009e4 <__aeabi_dcmple>
 801585c:	b1a0      	cbz	r0, 8015888 <_strtod_l+0xb38>
 801585e:	4639      	mov	r1, r7
 8015860:	4630      	mov	r0, r6
 8015862:	f7eb f91b 	bl	8000a9c <__aeabi_d2uiz>
 8015866:	2801      	cmp	r0, #1
 8015868:	bf38      	it	cc
 801586a:	2001      	movcc	r0, #1
 801586c:	f7ea fdc4 	bl	80003f8 <__aeabi_ui2d>
 8015870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015872:	4606      	mov	r6, r0
 8015874:	460f      	mov	r7, r1
 8015876:	b9fb      	cbnz	r3, 80158b8 <_strtod_l+0xb68>
 8015878:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801587c:	9014      	str	r0, [sp, #80]	@ 0x50
 801587e:	9315      	str	r3, [sp, #84]	@ 0x54
 8015880:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8015884:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015888:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801588a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801588e:	1b5b      	subs	r3, r3, r5
 8015890:	9311      	str	r3, [sp, #68]	@ 0x44
 8015892:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015896:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801589a:	f003 f8a5 	bl	80189e8 <__ulp>
 801589e:	4602      	mov	r2, r0
 80158a0:	460b      	mov	r3, r1
 80158a2:	4650      	mov	r0, sl
 80158a4:	4659      	mov	r1, fp
 80158a6:	f7ea fe21 	bl	80004ec <__aeabi_dmul>
 80158aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80158ae:	f7ea fc67 	bl	8000180 <__adddf3>
 80158b2:	4682      	mov	sl, r0
 80158b4:	468b      	mov	fp, r1
 80158b6:	e775      	b.n	80157a4 <_strtod_l+0xa54>
 80158b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80158bc:	e7e0      	b.n	8015880 <_strtod_l+0xb30>
 80158be:	a30e      	add	r3, pc, #56	@ (adr r3, 80158f8 <_strtod_l+0xba8>)
 80158c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c4:	f7eb f884 	bl	80009d0 <__aeabi_dcmplt>
 80158c8:	e79d      	b.n	8015806 <_strtod_l+0xab6>
 80158ca:	2300      	movs	r3, #0
 80158cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80158ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80158d0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80158d2:	6013      	str	r3, [r2, #0]
 80158d4:	f7ff ba79 	b.w	8014dca <_strtod_l+0x7a>
 80158d8:	2a65      	cmp	r2, #101	@ 0x65
 80158da:	f43f ab72 	beq.w	8014fc2 <_strtod_l+0x272>
 80158de:	2a45      	cmp	r2, #69	@ 0x45
 80158e0:	f43f ab6f 	beq.w	8014fc2 <_strtod_l+0x272>
 80158e4:	2301      	movs	r3, #1
 80158e6:	f7ff bbaa 	b.w	801503e <_strtod_l+0x2ee>
 80158ea:	bf00      	nop
 80158ec:	f3af 8000 	nop.w
 80158f0:	ffc00000 	.word	0xffc00000
 80158f4:	41dfffff 	.word	0x41dfffff
 80158f8:	94a03595 	.word	0x94a03595
 80158fc:	3fcfffff 	.word	0x3fcfffff

08015900 <_strtod_r>:
 8015900:	4b01      	ldr	r3, [pc, #4]	@ (8015908 <_strtod_r+0x8>)
 8015902:	f7ff ba25 	b.w	8014d50 <_strtod_l>
 8015906:	bf00      	nop
 8015908:	2000013c 	.word	0x2000013c

0801590c <strtod>:
 801590c:	460a      	mov	r2, r1
 801590e:	4601      	mov	r1, r0
 8015910:	4802      	ldr	r0, [pc, #8]	@ (801591c <strtod+0x10>)
 8015912:	4b03      	ldr	r3, [pc, #12]	@ (8015920 <strtod+0x14>)
 8015914:	6800      	ldr	r0, [r0, #0]
 8015916:	f7ff ba1b 	b.w	8014d50 <_strtod_l>
 801591a:	bf00      	nop
 801591c:	200002a8 	.word	0x200002a8
 8015920:	2000013c 	.word	0x2000013c

08015924 <_strtol_l.isra.0>:
 8015924:	2b24      	cmp	r3, #36	@ 0x24
 8015926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801592a:	4686      	mov	lr, r0
 801592c:	4690      	mov	r8, r2
 801592e:	d801      	bhi.n	8015934 <_strtol_l.isra.0+0x10>
 8015930:	2b01      	cmp	r3, #1
 8015932:	d106      	bne.n	8015942 <_strtol_l.isra.0+0x1e>
 8015934:	f001 fa98 	bl	8016e68 <__errno>
 8015938:	2316      	movs	r3, #22
 801593a:	6003      	str	r3, [r0, #0]
 801593c:	2000      	movs	r0, #0
 801593e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015942:	460d      	mov	r5, r1
 8015944:	4833      	ldr	r0, [pc, #204]	@ (8015a14 <_strtol_l.isra.0+0xf0>)
 8015946:	462a      	mov	r2, r5
 8015948:	f815 4b01 	ldrb.w	r4, [r5], #1
 801594c:	5d06      	ldrb	r6, [r0, r4]
 801594e:	f016 0608 	ands.w	r6, r6, #8
 8015952:	d1f8      	bne.n	8015946 <_strtol_l.isra.0+0x22>
 8015954:	2c2d      	cmp	r4, #45	@ 0x2d
 8015956:	d110      	bne.n	801597a <_strtol_l.isra.0+0x56>
 8015958:	2601      	movs	r6, #1
 801595a:	782c      	ldrb	r4, [r5, #0]
 801595c:	1c95      	adds	r5, r2, #2
 801595e:	f033 0210 	bics.w	r2, r3, #16
 8015962:	d115      	bne.n	8015990 <_strtol_l.isra.0+0x6c>
 8015964:	2c30      	cmp	r4, #48	@ 0x30
 8015966:	d10d      	bne.n	8015984 <_strtol_l.isra.0+0x60>
 8015968:	782a      	ldrb	r2, [r5, #0]
 801596a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801596e:	2a58      	cmp	r2, #88	@ 0x58
 8015970:	d108      	bne.n	8015984 <_strtol_l.isra.0+0x60>
 8015972:	786c      	ldrb	r4, [r5, #1]
 8015974:	3502      	adds	r5, #2
 8015976:	2310      	movs	r3, #16
 8015978:	e00a      	b.n	8015990 <_strtol_l.isra.0+0x6c>
 801597a:	2c2b      	cmp	r4, #43	@ 0x2b
 801597c:	bf04      	itt	eq
 801597e:	782c      	ldrbeq	r4, [r5, #0]
 8015980:	1c95      	addeq	r5, r2, #2
 8015982:	e7ec      	b.n	801595e <_strtol_l.isra.0+0x3a>
 8015984:	2b00      	cmp	r3, #0
 8015986:	d1f6      	bne.n	8015976 <_strtol_l.isra.0+0x52>
 8015988:	2c30      	cmp	r4, #48	@ 0x30
 801598a:	bf14      	ite	ne
 801598c:	230a      	movne	r3, #10
 801598e:	2308      	moveq	r3, #8
 8015990:	2200      	movs	r2, #0
 8015992:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015996:	f10c 3cff 	add.w	ip, ip, #4294967295
 801599a:	fbbc f9f3 	udiv	r9, ip, r3
 801599e:	4610      	mov	r0, r2
 80159a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80159a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80159a8:	2f09      	cmp	r7, #9
 80159aa:	d80f      	bhi.n	80159cc <_strtol_l.isra.0+0xa8>
 80159ac:	463c      	mov	r4, r7
 80159ae:	42a3      	cmp	r3, r4
 80159b0:	dd1b      	ble.n	80159ea <_strtol_l.isra.0+0xc6>
 80159b2:	1c57      	adds	r7, r2, #1
 80159b4:	d007      	beq.n	80159c6 <_strtol_l.isra.0+0xa2>
 80159b6:	4581      	cmp	r9, r0
 80159b8:	d314      	bcc.n	80159e4 <_strtol_l.isra.0+0xc0>
 80159ba:	d101      	bne.n	80159c0 <_strtol_l.isra.0+0x9c>
 80159bc:	45a2      	cmp	sl, r4
 80159be:	db11      	blt.n	80159e4 <_strtol_l.isra.0+0xc0>
 80159c0:	2201      	movs	r2, #1
 80159c2:	fb00 4003 	mla	r0, r0, r3, r4
 80159c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80159ca:	e7eb      	b.n	80159a4 <_strtol_l.isra.0+0x80>
 80159cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80159d0:	2f19      	cmp	r7, #25
 80159d2:	d801      	bhi.n	80159d8 <_strtol_l.isra.0+0xb4>
 80159d4:	3c37      	subs	r4, #55	@ 0x37
 80159d6:	e7ea      	b.n	80159ae <_strtol_l.isra.0+0x8a>
 80159d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80159dc:	2f19      	cmp	r7, #25
 80159de:	d804      	bhi.n	80159ea <_strtol_l.isra.0+0xc6>
 80159e0:	3c57      	subs	r4, #87	@ 0x57
 80159e2:	e7e4      	b.n	80159ae <_strtol_l.isra.0+0x8a>
 80159e4:	f04f 32ff 	mov.w	r2, #4294967295
 80159e8:	e7ed      	b.n	80159c6 <_strtol_l.isra.0+0xa2>
 80159ea:	1c53      	adds	r3, r2, #1
 80159ec:	d108      	bne.n	8015a00 <_strtol_l.isra.0+0xdc>
 80159ee:	2322      	movs	r3, #34	@ 0x22
 80159f0:	4660      	mov	r0, ip
 80159f2:	f8ce 3000 	str.w	r3, [lr]
 80159f6:	f1b8 0f00 	cmp.w	r8, #0
 80159fa:	d0a0      	beq.n	801593e <_strtol_l.isra.0+0x1a>
 80159fc:	1e69      	subs	r1, r5, #1
 80159fe:	e006      	b.n	8015a0e <_strtol_l.isra.0+0xea>
 8015a00:	b106      	cbz	r6, 8015a04 <_strtol_l.isra.0+0xe0>
 8015a02:	4240      	negs	r0, r0
 8015a04:	f1b8 0f00 	cmp.w	r8, #0
 8015a08:	d099      	beq.n	801593e <_strtol_l.isra.0+0x1a>
 8015a0a:	2a00      	cmp	r2, #0
 8015a0c:	d1f6      	bne.n	80159fc <_strtol_l.isra.0+0xd8>
 8015a0e:	f8c8 1000 	str.w	r1, [r8]
 8015a12:	e794      	b.n	801593e <_strtol_l.isra.0+0x1a>
 8015a14:	0801afa9 	.word	0x0801afa9

08015a18 <_strtol_r>:
 8015a18:	f7ff bf84 	b.w	8015924 <_strtol_l.isra.0>

08015a1c <strtol>:
 8015a1c:	4613      	mov	r3, r2
 8015a1e:	460a      	mov	r2, r1
 8015a20:	4601      	mov	r1, r0
 8015a22:	4802      	ldr	r0, [pc, #8]	@ (8015a2c <strtol+0x10>)
 8015a24:	6800      	ldr	r0, [r0, #0]
 8015a26:	f7ff bf7d 	b.w	8015924 <_strtol_l.isra.0>
 8015a2a:	bf00      	nop
 8015a2c:	200002a8 	.word	0x200002a8

08015a30 <__cvt>:
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a36:	461d      	mov	r5, r3
 8015a38:	bfbb      	ittet	lt
 8015a3a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8015a3e:	461d      	movlt	r5, r3
 8015a40:	2300      	movge	r3, #0
 8015a42:	232d      	movlt	r3, #45	@ 0x2d
 8015a44:	b088      	sub	sp, #32
 8015a46:	4614      	mov	r4, r2
 8015a48:	bfb8      	it	lt
 8015a4a:	4614      	movlt	r4, r2
 8015a4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015a4e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8015a50:	7013      	strb	r3, [r2, #0]
 8015a52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015a54:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8015a58:	f023 0820 	bic.w	r8, r3, #32
 8015a5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8015a60:	d005      	beq.n	8015a6e <__cvt+0x3e>
 8015a62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8015a66:	d100      	bne.n	8015a6a <__cvt+0x3a>
 8015a68:	3601      	adds	r6, #1
 8015a6a:	2302      	movs	r3, #2
 8015a6c:	e000      	b.n	8015a70 <__cvt+0x40>
 8015a6e:	2303      	movs	r3, #3
 8015a70:	aa07      	add	r2, sp, #28
 8015a72:	9204      	str	r2, [sp, #16]
 8015a74:	aa06      	add	r2, sp, #24
 8015a76:	e9cd a202 	strd	sl, r2, [sp, #8]
 8015a7a:	e9cd 3600 	strd	r3, r6, [sp]
 8015a7e:	4622      	mov	r2, r4
 8015a80:	462b      	mov	r3, r5
 8015a82:	f001 fadd 	bl	8017040 <_dtoa_r>
 8015a86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8015a8a:	4607      	mov	r7, r0
 8015a8c:	d119      	bne.n	8015ac2 <__cvt+0x92>
 8015a8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a90:	07db      	lsls	r3, r3, #31
 8015a92:	d50e      	bpl.n	8015ab2 <__cvt+0x82>
 8015a94:	eb00 0906 	add.w	r9, r0, r6
 8015a98:	2200      	movs	r2, #0
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	4629      	mov	r1, r5
 8015aa0:	f7ea ff8c 	bl	80009bc <__aeabi_dcmpeq>
 8015aa4:	b108      	cbz	r0, 8015aaa <__cvt+0x7a>
 8015aa6:	f8cd 901c 	str.w	r9, [sp, #28]
 8015aaa:	2230      	movs	r2, #48	@ 0x30
 8015aac:	9b07      	ldr	r3, [sp, #28]
 8015aae:	454b      	cmp	r3, r9
 8015ab0:	d31e      	bcc.n	8015af0 <__cvt+0xc0>
 8015ab2:	4638      	mov	r0, r7
 8015ab4:	9b07      	ldr	r3, [sp, #28]
 8015ab6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015ab8:	1bdb      	subs	r3, r3, r7
 8015aba:	6013      	str	r3, [r2, #0]
 8015abc:	b008      	add	sp, #32
 8015abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ac2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8015ac6:	eb00 0906 	add.w	r9, r0, r6
 8015aca:	d1e5      	bne.n	8015a98 <__cvt+0x68>
 8015acc:	7803      	ldrb	r3, [r0, #0]
 8015ace:	2b30      	cmp	r3, #48	@ 0x30
 8015ad0:	d10a      	bne.n	8015ae8 <__cvt+0xb8>
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	4629      	mov	r1, r5
 8015ada:	f7ea ff6f 	bl	80009bc <__aeabi_dcmpeq>
 8015ade:	b918      	cbnz	r0, 8015ae8 <__cvt+0xb8>
 8015ae0:	f1c6 0601 	rsb	r6, r6, #1
 8015ae4:	f8ca 6000 	str.w	r6, [sl]
 8015ae8:	f8da 3000 	ldr.w	r3, [sl]
 8015aec:	4499      	add	r9, r3
 8015aee:	e7d3      	b.n	8015a98 <__cvt+0x68>
 8015af0:	1c59      	adds	r1, r3, #1
 8015af2:	9107      	str	r1, [sp, #28]
 8015af4:	701a      	strb	r2, [r3, #0]
 8015af6:	e7d9      	b.n	8015aac <__cvt+0x7c>

08015af8 <__exponent>:
 8015af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015afa:	2900      	cmp	r1, #0
 8015afc:	bfb6      	itet	lt
 8015afe:	232d      	movlt	r3, #45	@ 0x2d
 8015b00:	232b      	movge	r3, #43	@ 0x2b
 8015b02:	4249      	neglt	r1, r1
 8015b04:	2909      	cmp	r1, #9
 8015b06:	7002      	strb	r2, [r0, #0]
 8015b08:	7043      	strb	r3, [r0, #1]
 8015b0a:	dd29      	ble.n	8015b60 <__exponent+0x68>
 8015b0c:	f10d 0307 	add.w	r3, sp, #7
 8015b10:	461d      	mov	r5, r3
 8015b12:	270a      	movs	r7, #10
 8015b14:	fbb1 f6f7 	udiv	r6, r1, r7
 8015b18:	461a      	mov	r2, r3
 8015b1a:	fb07 1416 	mls	r4, r7, r6, r1
 8015b1e:	3430      	adds	r4, #48	@ 0x30
 8015b20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8015b24:	460c      	mov	r4, r1
 8015b26:	2c63      	cmp	r4, #99	@ 0x63
 8015b28:	4631      	mov	r1, r6
 8015b2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8015b2e:	dcf1      	bgt.n	8015b14 <__exponent+0x1c>
 8015b30:	3130      	adds	r1, #48	@ 0x30
 8015b32:	1e94      	subs	r4, r2, #2
 8015b34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015b38:	4623      	mov	r3, r4
 8015b3a:	1c41      	adds	r1, r0, #1
 8015b3c:	42ab      	cmp	r3, r5
 8015b3e:	d30a      	bcc.n	8015b56 <__exponent+0x5e>
 8015b40:	f10d 0309 	add.w	r3, sp, #9
 8015b44:	1a9b      	subs	r3, r3, r2
 8015b46:	42ac      	cmp	r4, r5
 8015b48:	bf88      	it	hi
 8015b4a:	2300      	movhi	r3, #0
 8015b4c:	3302      	adds	r3, #2
 8015b4e:	4403      	add	r3, r0
 8015b50:	1a18      	subs	r0, r3, r0
 8015b52:	b003      	add	sp, #12
 8015b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015b5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015b5e:	e7ed      	b.n	8015b3c <__exponent+0x44>
 8015b60:	2330      	movs	r3, #48	@ 0x30
 8015b62:	3130      	adds	r1, #48	@ 0x30
 8015b64:	7083      	strb	r3, [r0, #2]
 8015b66:	70c1      	strb	r1, [r0, #3]
 8015b68:	1d03      	adds	r3, r0, #4
 8015b6a:	e7f1      	b.n	8015b50 <__exponent+0x58>

08015b6c <_printf_float>:
 8015b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b70:	b091      	sub	sp, #68	@ 0x44
 8015b72:	460c      	mov	r4, r1
 8015b74:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8015b78:	4616      	mov	r6, r2
 8015b7a:	461f      	mov	r7, r3
 8015b7c:	4605      	mov	r5, r0
 8015b7e:	f001 f919 	bl	8016db4 <_localeconv_r>
 8015b82:	6803      	ldr	r3, [r0, #0]
 8015b84:	4618      	mov	r0, r3
 8015b86:	9308      	str	r3, [sp, #32]
 8015b88:	f7ea faec 	bl	8000164 <strlen>
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8015b90:	f8d8 3000 	ldr.w	r3, [r8]
 8015b94:	9009      	str	r0, [sp, #36]	@ 0x24
 8015b96:	3307      	adds	r3, #7
 8015b98:	f023 0307 	bic.w	r3, r3, #7
 8015b9c:	f103 0208 	add.w	r2, r3, #8
 8015ba0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015ba4:	f8d4 b000 	ldr.w	fp, [r4]
 8015ba8:	f8c8 2000 	str.w	r2, [r8]
 8015bac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015bb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8015bb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015bb6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8015bba:	f04f 32ff 	mov.w	r2, #4294967295
 8015bbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015bc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8015bc6:	4b9c      	ldr	r3, [pc, #624]	@ (8015e38 <_printf_float+0x2cc>)
 8015bc8:	f7ea ff2a 	bl	8000a20 <__aeabi_dcmpun>
 8015bcc:	bb70      	cbnz	r0, 8015c2c <_printf_float+0xc0>
 8015bce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8015bd6:	4b98      	ldr	r3, [pc, #608]	@ (8015e38 <_printf_float+0x2cc>)
 8015bd8:	f7ea ff04 	bl	80009e4 <__aeabi_dcmple>
 8015bdc:	bb30      	cbnz	r0, 8015c2c <_printf_float+0xc0>
 8015bde:	2200      	movs	r2, #0
 8015be0:	2300      	movs	r3, #0
 8015be2:	4640      	mov	r0, r8
 8015be4:	4649      	mov	r1, r9
 8015be6:	f7ea fef3 	bl	80009d0 <__aeabi_dcmplt>
 8015bea:	b110      	cbz	r0, 8015bf2 <_printf_float+0x86>
 8015bec:	232d      	movs	r3, #45	@ 0x2d
 8015bee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015bf2:	4a92      	ldr	r2, [pc, #584]	@ (8015e3c <_printf_float+0x2d0>)
 8015bf4:	4b92      	ldr	r3, [pc, #584]	@ (8015e40 <_printf_float+0x2d4>)
 8015bf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015bfa:	bf8c      	ite	hi
 8015bfc:	4690      	movhi	r8, r2
 8015bfe:	4698      	movls	r8, r3
 8015c00:	2303      	movs	r3, #3
 8015c02:	f04f 0900 	mov.w	r9, #0
 8015c06:	6123      	str	r3, [r4, #16]
 8015c08:	f02b 0304 	bic.w	r3, fp, #4
 8015c0c:	6023      	str	r3, [r4, #0]
 8015c0e:	4633      	mov	r3, r6
 8015c10:	4621      	mov	r1, r4
 8015c12:	4628      	mov	r0, r5
 8015c14:	9700      	str	r7, [sp, #0]
 8015c16:	aa0f      	add	r2, sp, #60	@ 0x3c
 8015c18:	f000 f9d4 	bl	8015fc4 <_printf_common>
 8015c1c:	3001      	adds	r0, #1
 8015c1e:	f040 8090 	bne.w	8015d42 <_printf_float+0x1d6>
 8015c22:	f04f 30ff 	mov.w	r0, #4294967295
 8015c26:	b011      	add	sp, #68	@ 0x44
 8015c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c2c:	4642      	mov	r2, r8
 8015c2e:	464b      	mov	r3, r9
 8015c30:	4640      	mov	r0, r8
 8015c32:	4649      	mov	r1, r9
 8015c34:	f7ea fef4 	bl	8000a20 <__aeabi_dcmpun>
 8015c38:	b148      	cbz	r0, 8015c4e <_printf_float+0xe2>
 8015c3a:	464b      	mov	r3, r9
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	bfb8      	it	lt
 8015c40:	232d      	movlt	r3, #45	@ 0x2d
 8015c42:	4a80      	ldr	r2, [pc, #512]	@ (8015e44 <_printf_float+0x2d8>)
 8015c44:	bfb8      	it	lt
 8015c46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8015c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8015e48 <_printf_float+0x2dc>)
 8015c4c:	e7d3      	b.n	8015bf6 <_printf_float+0x8a>
 8015c4e:	6863      	ldr	r3, [r4, #4]
 8015c50:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8015c54:	1c5a      	adds	r2, r3, #1
 8015c56:	d13f      	bne.n	8015cd8 <_printf_float+0x16c>
 8015c58:	2306      	movs	r3, #6
 8015c5a:	6063      	str	r3, [r4, #4]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8015c62:	6023      	str	r3, [r4, #0]
 8015c64:	9206      	str	r2, [sp, #24]
 8015c66:	aa0e      	add	r2, sp, #56	@ 0x38
 8015c68:	e9cd a204 	strd	sl, r2, [sp, #16]
 8015c6c:	aa0d      	add	r2, sp, #52	@ 0x34
 8015c6e:	9203      	str	r2, [sp, #12]
 8015c70:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8015c74:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015c78:	6863      	ldr	r3, [r4, #4]
 8015c7a:	4642      	mov	r2, r8
 8015c7c:	9300      	str	r3, [sp, #0]
 8015c7e:	4628      	mov	r0, r5
 8015c80:	464b      	mov	r3, r9
 8015c82:	910a      	str	r1, [sp, #40]	@ 0x28
 8015c84:	f7ff fed4 	bl	8015a30 <__cvt>
 8015c88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015c8a:	4680      	mov	r8, r0
 8015c8c:	2947      	cmp	r1, #71	@ 0x47
 8015c8e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015c90:	d128      	bne.n	8015ce4 <_printf_float+0x178>
 8015c92:	1cc8      	adds	r0, r1, #3
 8015c94:	db02      	blt.n	8015c9c <_printf_float+0x130>
 8015c96:	6863      	ldr	r3, [r4, #4]
 8015c98:	4299      	cmp	r1, r3
 8015c9a:	dd40      	ble.n	8015d1e <_printf_float+0x1b2>
 8015c9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8015ca0:	fa5f fa8a 	uxtb.w	sl, sl
 8015ca4:	4652      	mov	r2, sl
 8015ca6:	3901      	subs	r1, #1
 8015ca8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8015cac:	910d      	str	r1, [sp, #52]	@ 0x34
 8015cae:	f7ff ff23 	bl	8015af8 <__exponent>
 8015cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015cb4:	4681      	mov	r9, r0
 8015cb6:	1813      	adds	r3, r2, r0
 8015cb8:	2a01      	cmp	r2, #1
 8015cba:	6123      	str	r3, [r4, #16]
 8015cbc:	dc02      	bgt.n	8015cc4 <_printf_float+0x158>
 8015cbe:	6822      	ldr	r2, [r4, #0]
 8015cc0:	07d2      	lsls	r2, r2, #31
 8015cc2:	d501      	bpl.n	8015cc8 <_printf_float+0x15c>
 8015cc4:	3301      	adds	r3, #1
 8015cc6:	6123      	str	r3, [r4, #16]
 8015cc8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d09e      	beq.n	8015c0e <_printf_float+0xa2>
 8015cd0:	232d      	movs	r3, #45	@ 0x2d
 8015cd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015cd6:	e79a      	b.n	8015c0e <_printf_float+0xa2>
 8015cd8:	2947      	cmp	r1, #71	@ 0x47
 8015cda:	d1bf      	bne.n	8015c5c <_printf_float+0xf0>
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d1bd      	bne.n	8015c5c <_printf_float+0xf0>
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	e7ba      	b.n	8015c5a <_printf_float+0xee>
 8015ce4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8015ce8:	d9dc      	bls.n	8015ca4 <_printf_float+0x138>
 8015cea:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8015cee:	d118      	bne.n	8015d22 <_printf_float+0x1b6>
 8015cf0:	2900      	cmp	r1, #0
 8015cf2:	6863      	ldr	r3, [r4, #4]
 8015cf4:	dd0b      	ble.n	8015d0e <_printf_float+0x1a2>
 8015cf6:	6121      	str	r1, [r4, #16]
 8015cf8:	b913      	cbnz	r3, 8015d00 <_printf_float+0x194>
 8015cfa:	6822      	ldr	r2, [r4, #0]
 8015cfc:	07d0      	lsls	r0, r2, #31
 8015cfe:	d502      	bpl.n	8015d06 <_printf_float+0x19a>
 8015d00:	3301      	adds	r3, #1
 8015d02:	440b      	add	r3, r1
 8015d04:	6123      	str	r3, [r4, #16]
 8015d06:	f04f 0900 	mov.w	r9, #0
 8015d0a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015d0c:	e7dc      	b.n	8015cc8 <_printf_float+0x15c>
 8015d0e:	b913      	cbnz	r3, 8015d16 <_printf_float+0x1aa>
 8015d10:	6822      	ldr	r2, [r4, #0]
 8015d12:	07d2      	lsls	r2, r2, #31
 8015d14:	d501      	bpl.n	8015d1a <_printf_float+0x1ae>
 8015d16:	3302      	adds	r3, #2
 8015d18:	e7f4      	b.n	8015d04 <_printf_float+0x198>
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	e7f2      	b.n	8015d04 <_printf_float+0x198>
 8015d1e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8015d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d24:	4299      	cmp	r1, r3
 8015d26:	db05      	blt.n	8015d34 <_printf_float+0x1c8>
 8015d28:	6823      	ldr	r3, [r4, #0]
 8015d2a:	6121      	str	r1, [r4, #16]
 8015d2c:	07d8      	lsls	r0, r3, #31
 8015d2e:	d5ea      	bpl.n	8015d06 <_printf_float+0x19a>
 8015d30:	1c4b      	adds	r3, r1, #1
 8015d32:	e7e7      	b.n	8015d04 <_printf_float+0x198>
 8015d34:	2900      	cmp	r1, #0
 8015d36:	bfcc      	ite	gt
 8015d38:	2201      	movgt	r2, #1
 8015d3a:	f1c1 0202 	rsble	r2, r1, #2
 8015d3e:	4413      	add	r3, r2
 8015d40:	e7e0      	b.n	8015d04 <_printf_float+0x198>
 8015d42:	6823      	ldr	r3, [r4, #0]
 8015d44:	055a      	lsls	r2, r3, #21
 8015d46:	d407      	bmi.n	8015d58 <_printf_float+0x1ec>
 8015d48:	6923      	ldr	r3, [r4, #16]
 8015d4a:	4642      	mov	r2, r8
 8015d4c:	4631      	mov	r1, r6
 8015d4e:	4628      	mov	r0, r5
 8015d50:	47b8      	blx	r7
 8015d52:	3001      	adds	r0, #1
 8015d54:	d12b      	bne.n	8015dae <_printf_float+0x242>
 8015d56:	e764      	b.n	8015c22 <_printf_float+0xb6>
 8015d58:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8015d5c:	f240 80dc 	bls.w	8015f18 <_printf_float+0x3ac>
 8015d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8015d64:	2200      	movs	r2, #0
 8015d66:	2300      	movs	r3, #0
 8015d68:	f7ea fe28 	bl	80009bc <__aeabi_dcmpeq>
 8015d6c:	2800      	cmp	r0, #0
 8015d6e:	d033      	beq.n	8015dd8 <_printf_float+0x26c>
 8015d70:	2301      	movs	r3, #1
 8015d72:	4631      	mov	r1, r6
 8015d74:	4628      	mov	r0, r5
 8015d76:	4a35      	ldr	r2, [pc, #212]	@ (8015e4c <_printf_float+0x2e0>)
 8015d78:	47b8      	blx	r7
 8015d7a:	3001      	adds	r0, #1
 8015d7c:	f43f af51 	beq.w	8015c22 <_printf_float+0xb6>
 8015d80:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8015d84:	4543      	cmp	r3, r8
 8015d86:	db02      	blt.n	8015d8e <_printf_float+0x222>
 8015d88:	6823      	ldr	r3, [r4, #0]
 8015d8a:	07d8      	lsls	r0, r3, #31
 8015d8c:	d50f      	bpl.n	8015dae <_printf_float+0x242>
 8015d8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015d92:	4631      	mov	r1, r6
 8015d94:	4628      	mov	r0, r5
 8015d96:	47b8      	blx	r7
 8015d98:	3001      	adds	r0, #1
 8015d9a:	f43f af42 	beq.w	8015c22 <_printf_float+0xb6>
 8015d9e:	f04f 0900 	mov.w	r9, #0
 8015da2:	f108 38ff 	add.w	r8, r8, #4294967295
 8015da6:	f104 0a1a 	add.w	sl, r4, #26
 8015daa:	45c8      	cmp	r8, r9
 8015dac:	dc09      	bgt.n	8015dc2 <_printf_float+0x256>
 8015dae:	6823      	ldr	r3, [r4, #0]
 8015db0:	079b      	lsls	r3, r3, #30
 8015db2:	f100 8102 	bmi.w	8015fba <_printf_float+0x44e>
 8015db6:	68e0      	ldr	r0, [r4, #12]
 8015db8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015dba:	4298      	cmp	r0, r3
 8015dbc:	bfb8      	it	lt
 8015dbe:	4618      	movlt	r0, r3
 8015dc0:	e731      	b.n	8015c26 <_printf_float+0xba>
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	4652      	mov	r2, sl
 8015dc6:	4631      	mov	r1, r6
 8015dc8:	4628      	mov	r0, r5
 8015dca:	47b8      	blx	r7
 8015dcc:	3001      	adds	r0, #1
 8015dce:	f43f af28 	beq.w	8015c22 <_printf_float+0xb6>
 8015dd2:	f109 0901 	add.w	r9, r9, #1
 8015dd6:	e7e8      	b.n	8015daa <_printf_float+0x23e>
 8015dd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	dc38      	bgt.n	8015e50 <_printf_float+0x2e4>
 8015dde:	2301      	movs	r3, #1
 8015de0:	4631      	mov	r1, r6
 8015de2:	4628      	mov	r0, r5
 8015de4:	4a19      	ldr	r2, [pc, #100]	@ (8015e4c <_printf_float+0x2e0>)
 8015de6:	47b8      	blx	r7
 8015de8:	3001      	adds	r0, #1
 8015dea:	f43f af1a 	beq.w	8015c22 <_printf_float+0xb6>
 8015dee:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8015df2:	ea59 0303 	orrs.w	r3, r9, r3
 8015df6:	d102      	bne.n	8015dfe <_printf_float+0x292>
 8015df8:	6823      	ldr	r3, [r4, #0]
 8015dfa:	07d9      	lsls	r1, r3, #31
 8015dfc:	d5d7      	bpl.n	8015dae <_printf_float+0x242>
 8015dfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015e02:	4631      	mov	r1, r6
 8015e04:	4628      	mov	r0, r5
 8015e06:	47b8      	blx	r7
 8015e08:	3001      	adds	r0, #1
 8015e0a:	f43f af0a 	beq.w	8015c22 <_printf_float+0xb6>
 8015e0e:	f04f 0a00 	mov.w	sl, #0
 8015e12:	f104 0b1a 	add.w	fp, r4, #26
 8015e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e18:	425b      	negs	r3, r3
 8015e1a:	4553      	cmp	r3, sl
 8015e1c:	dc01      	bgt.n	8015e22 <_printf_float+0x2b6>
 8015e1e:	464b      	mov	r3, r9
 8015e20:	e793      	b.n	8015d4a <_printf_float+0x1de>
 8015e22:	2301      	movs	r3, #1
 8015e24:	465a      	mov	r2, fp
 8015e26:	4631      	mov	r1, r6
 8015e28:	4628      	mov	r0, r5
 8015e2a:	47b8      	blx	r7
 8015e2c:	3001      	adds	r0, #1
 8015e2e:	f43f aef8 	beq.w	8015c22 <_printf_float+0xb6>
 8015e32:	f10a 0a01 	add.w	sl, sl, #1
 8015e36:	e7ee      	b.n	8015e16 <_printf_float+0x2aa>
 8015e38:	7fefffff 	.word	0x7fefffff
 8015e3c:	0801ad4f 	.word	0x0801ad4f
 8015e40:	0801ad4b 	.word	0x0801ad4b
 8015e44:	0801ad57 	.word	0x0801ad57
 8015e48:	0801ad53 	.word	0x0801ad53
 8015e4c:	0801af51 	.word	0x0801af51
 8015e50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015e52:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8015e56:	4553      	cmp	r3, sl
 8015e58:	bfa8      	it	ge
 8015e5a:	4653      	movge	r3, sl
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	4699      	mov	r9, r3
 8015e60:	dc36      	bgt.n	8015ed0 <_printf_float+0x364>
 8015e62:	f04f 0b00 	mov.w	fp, #0
 8015e66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015e6a:	f104 021a 	add.w	r2, r4, #26
 8015e6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e72:	eba3 0309 	sub.w	r3, r3, r9
 8015e76:	455b      	cmp	r3, fp
 8015e78:	dc31      	bgt.n	8015ede <_printf_float+0x372>
 8015e7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e7c:	459a      	cmp	sl, r3
 8015e7e:	dc3a      	bgt.n	8015ef6 <_printf_float+0x38a>
 8015e80:	6823      	ldr	r3, [r4, #0]
 8015e82:	07da      	lsls	r2, r3, #31
 8015e84:	d437      	bmi.n	8015ef6 <_printf_float+0x38a>
 8015e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e88:	ebaa 0903 	sub.w	r9, sl, r3
 8015e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e8e:	ebaa 0303 	sub.w	r3, sl, r3
 8015e92:	4599      	cmp	r9, r3
 8015e94:	bfa8      	it	ge
 8015e96:	4699      	movge	r9, r3
 8015e98:	f1b9 0f00 	cmp.w	r9, #0
 8015e9c:	dc33      	bgt.n	8015f06 <_printf_float+0x39a>
 8015e9e:	f04f 0800 	mov.w	r8, #0
 8015ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015ea6:	f104 0b1a 	add.w	fp, r4, #26
 8015eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015eac:	ebaa 0303 	sub.w	r3, sl, r3
 8015eb0:	eba3 0309 	sub.w	r3, r3, r9
 8015eb4:	4543      	cmp	r3, r8
 8015eb6:	f77f af7a 	ble.w	8015dae <_printf_float+0x242>
 8015eba:	2301      	movs	r3, #1
 8015ebc:	465a      	mov	r2, fp
 8015ebe:	4631      	mov	r1, r6
 8015ec0:	4628      	mov	r0, r5
 8015ec2:	47b8      	blx	r7
 8015ec4:	3001      	adds	r0, #1
 8015ec6:	f43f aeac 	beq.w	8015c22 <_printf_float+0xb6>
 8015eca:	f108 0801 	add.w	r8, r8, #1
 8015ece:	e7ec      	b.n	8015eaa <_printf_float+0x33e>
 8015ed0:	4642      	mov	r2, r8
 8015ed2:	4631      	mov	r1, r6
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	47b8      	blx	r7
 8015ed8:	3001      	adds	r0, #1
 8015eda:	d1c2      	bne.n	8015e62 <_printf_float+0x2f6>
 8015edc:	e6a1      	b.n	8015c22 <_printf_float+0xb6>
 8015ede:	2301      	movs	r3, #1
 8015ee0:	4631      	mov	r1, r6
 8015ee2:	4628      	mov	r0, r5
 8015ee4:	920a      	str	r2, [sp, #40]	@ 0x28
 8015ee6:	47b8      	blx	r7
 8015ee8:	3001      	adds	r0, #1
 8015eea:	f43f ae9a 	beq.w	8015c22 <_printf_float+0xb6>
 8015eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015ef0:	f10b 0b01 	add.w	fp, fp, #1
 8015ef4:	e7bb      	b.n	8015e6e <_printf_float+0x302>
 8015ef6:	4631      	mov	r1, r6
 8015ef8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015efc:	4628      	mov	r0, r5
 8015efe:	47b8      	blx	r7
 8015f00:	3001      	adds	r0, #1
 8015f02:	d1c0      	bne.n	8015e86 <_printf_float+0x31a>
 8015f04:	e68d      	b.n	8015c22 <_printf_float+0xb6>
 8015f06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015f08:	464b      	mov	r3, r9
 8015f0a:	4631      	mov	r1, r6
 8015f0c:	4628      	mov	r0, r5
 8015f0e:	4442      	add	r2, r8
 8015f10:	47b8      	blx	r7
 8015f12:	3001      	adds	r0, #1
 8015f14:	d1c3      	bne.n	8015e9e <_printf_float+0x332>
 8015f16:	e684      	b.n	8015c22 <_printf_float+0xb6>
 8015f18:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8015f1c:	f1ba 0f01 	cmp.w	sl, #1
 8015f20:	dc01      	bgt.n	8015f26 <_printf_float+0x3ba>
 8015f22:	07db      	lsls	r3, r3, #31
 8015f24:	d536      	bpl.n	8015f94 <_printf_float+0x428>
 8015f26:	2301      	movs	r3, #1
 8015f28:	4642      	mov	r2, r8
 8015f2a:	4631      	mov	r1, r6
 8015f2c:	4628      	mov	r0, r5
 8015f2e:	47b8      	blx	r7
 8015f30:	3001      	adds	r0, #1
 8015f32:	f43f ae76 	beq.w	8015c22 <_printf_float+0xb6>
 8015f36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015f3a:	4631      	mov	r1, r6
 8015f3c:	4628      	mov	r0, r5
 8015f3e:	47b8      	blx	r7
 8015f40:	3001      	adds	r0, #1
 8015f42:	f43f ae6e 	beq.w	8015c22 <_printf_float+0xb6>
 8015f46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015f52:	f7ea fd33 	bl	80009bc <__aeabi_dcmpeq>
 8015f56:	b9c0      	cbnz	r0, 8015f8a <_printf_float+0x41e>
 8015f58:	4653      	mov	r3, sl
 8015f5a:	f108 0201 	add.w	r2, r8, #1
 8015f5e:	4631      	mov	r1, r6
 8015f60:	4628      	mov	r0, r5
 8015f62:	47b8      	blx	r7
 8015f64:	3001      	adds	r0, #1
 8015f66:	d10c      	bne.n	8015f82 <_printf_float+0x416>
 8015f68:	e65b      	b.n	8015c22 <_printf_float+0xb6>
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	465a      	mov	r2, fp
 8015f6e:	4631      	mov	r1, r6
 8015f70:	4628      	mov	r0, r5
 8015f72:	47b8      	blx	r7
 8015f74:	3001      	adds	r0, #1
 8015f76:	f43f ae54 	beq.w	8015c22 <_printf_float+0xb6>
 8015f7a:	f108 0801 	add.w	r8, r8, #1
 8015f7e:	45d0      	cmp	r8, sl
 8015f80:	dbf3      	blt.n	8015f6a <_printf_float+0x3fe>
 8015f82:	464b      	mov	r3, r9
 8015f84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015f88:	e6e0      	b.n	8015d4c <_printf_float+0x1e0>
 8015f8a:	f04f 0800 	mov.w	r8, #0
 8015f8e:	f104 0b1a 	add.w	fp, r4, #26
 8015f92:	e7f4      	b.n	8015f7e <_printf_float+0x412>
 8015f94:	2301      	movs	r3, #1
 8015f96:	4642      	mov	r2, r8
 8015f98:	e7e1      	b.n	8015f5e <_printf_float+0x3f2>
 8015f9a:	2301      	movs	r3, #1
 8015f9c:	464a      	mov	r2, r9
 8015f9e:	4631      	mov	r1, r6
 8015fa0:	4628      	mov	r0, r5
 8015fa2:	47b8      	blx	r7
 8015fa4:	3001      	adds	r0, #1
 8015fa6:	f43f ae3c 	beq.w	8015c22 <_printf_float+0xb6>
 8015faa:	f108 0801 	add.w	r8, r8, #1
 8015fae:	68e3      	ldr	r3, [r4, #12]
 8015fb0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015fb2:	1a5b      	subs	r3, r3, r1
 8015fb4:	4543      	cmp	r3, r8
 8015fb6:	dcf0      	bgt.n	8015f9a <_printf_float+0x42e>
 8015fb8:	e6fd      	b.n	8015db6 <_printf_float+0x24a>
 8015fba:	f04f 0800 	mov.w	r8, #0
 8015fbe:	f104 0919 	add.w	r9, r4, #25
 8015fc2:	e7f4      	b.n	8015fae <_printf_float+0x442>

08015fc4 <_printf_common>:
 8015fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fc8:	4616      	mov	r6, r2
 8015fca:	4698      	mov	r8, r3
 8015fcc:	688a      	ldr	r2, [r1, #8]
 8015fce:	690b      	ldr	r3, [r1, #16]
 8015fd0:	4607      	mov	r7, r0
 8015fd2:	4293      	cmp	r3, r2
 8015fd4:	bfb8      	it	lt
 8015fd6:	4613      	movlt	r3, r2
 8015fd8:	6033      	str	r3, [r6, #0]
 8015fda:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015fde:	460c      	mov	r4, r1
 8015fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015fe4:	b10a      	cbz	r2, 8015fea <_printf_common+0x26>
 8015fe6:	3301      	adds	r3, #1
 8015fe8:	6033      	str	r3, [r6, #0]
 8015fea:	6823      	ldr	r3, [r4, #0]
 8015fec:	0699      	lsls	r1, r3, #26
 8015fee:	bf42      	ittt	mi
 8015ff0:	6833      	ldrmi	r3, [r6, #0]
 8015ff2:	3302      	addmi	r3, #2
 8015ff4:	6033      	strmi	r3, [r6, #0]
 8015ff6:	6825      	ldr	r5, [r4, #0]
 8015ff8:	f015 0506 	ands.w	r5, r5, #6
 8015ffc:	d106      	bne.n	801600c <_printf_common+0x48>
 8015ffe:	f104 0a19 	add.w	sl, r4, #25
 8016002:	68e3      	ldr	r3, [r4, #12]
 8016004:	6832      	ldr	r2, [r6, #0]
 8016006:	1a9b      	subs	r3, r3, r2
 8016008:	42ab      	cmp	r3, r5
 801600a:	dc2b      	bgt.n	8016064 <_printf_common+0xa0>
 801600c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016010:	6822      	ldr	r2, [r4, #0]
 8016012:	3b00      	subs	r3, #0
 8016014:	bf18      	it	ne
 8016016:	2301      	movne	r3, #1
 8016018:	0692      	lsls	r2, r2, #26
 801601a:	d430      	bmi.n	801607e <_printf_common+0xba>
 801601c:	4641      	mov	r1, r8
 801601e:	4638      	mov	r0, r7
 8016020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016024:	47c8      	blx	r9
 8016026:	3001      	adds	r0, #1
 8016028:	d023      	beq.n	8016072 <_printf_common+0xae>
 801602a:	6823      	ldr	r3, [r4, #0]
 801602c:	6922      	ldr	r2, [r4, #16]
 801602e:	f003 0306 	and.w	r3, r3, #6
 8016032:	2b04      	cmp	r3, #4
 8016034:	bf14      	ite	ne
 8016036:	2500      	movne	r5, #0
 8016038:	6833      	ldreq	r3, [r6, #0]
 801603a:	f04f 0600 	mov.w	r6, #0
 801603e:	bf08      	it	eq
 8016040:	68e5      	ldreq	r5, [r4, #12]
 8016042:	f104 041a 	add.w	r4, r4, #26
 8016046:	bf08      	it	eq
 8016048:	1aed      	subeq	r5, r5, r3
 801604a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801604e:	bf08      	it	eq
 8016050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016054:	4293      	cmp	r3, r2
 8016056:	bfc4      	itt	gt
 8016058:	1a9b      	subgt	r3, r3, r2
 801605a:	18ed      	addgt	r5, r5, r3
 801605c:	42b5      	cmp	r5, r6
 801605e:	d11a      	bne.n	8016096 <_printf_common+0xd2>
 8016060:	2000      	movs	r0, #0
 8016062:	e008      	b.n	8016076 <_printf_common+0xb2>
 8016064:	2301      	movs	r3, #1
 8016066:	4652      	mov	r2, sl
 8016068:	4641      	mov	r1, r8
 801606a:	4638      	mov	r0, r7
 801606c:	47c8      	blx	r9
 801606e:	3001      	adds	r0, #1
 8016070:	d103      	bne.n	801607a <_printf_common+0xb6>
 8016072:	f04f 30ff 	mov.w	r0, #4294967295
 8016076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801607a:	3501      	adds	r5, #1
 801607c:	e7c1      	b.n	8016002 <_printf_common+0x3e>
 801607e:	2030      	movs	r0, #48	@ 0x30
 8016080:	18e1      	adds	r1, r4, r3
 8016082:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016086:	1c5a      	adds	r2, r3, #1
 8016088:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801608c:	4422      	add	r2, r4
 801608e:	3302      	adds	r3, #2
 8016090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016094:	e7c2      	b.n	801601c <_printf_common+0x58>
 8016096:	2301      	movs	r3, #1
 8016098:	4622      	mov	r2, r4
 801609a:	4641      	mov	r1, r8
 801609c:	4638      	mov	r0, r7
 801609e:	47c8      	blx	r9
 80160a0:	3001      	adds	r0, #1
 80160a2:	d0e6      	beq.n	8016072 <_printf_common+0xae>
 80160a4:	3601      	adds	r6, #1
 80160a6:	e7d9      	b.n	801605c <_printf_common+0x98>

080160a8 <_printf_i>:
 80160a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160ac:	7e0f      	ldrb	r7, [r1, #24]
 80160ae:	4691      	mov	r9, r2
 80160b0:	2f78      	cmp	r7, #120	@ 0x78
 80160b2:	4680      	mov	r8, r0
 80160b4:	460c      	mov	r4, r1
 80160b6:	469a      	mov	sl, r3
 80160b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80160ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80160be:	d807      	bhi.n	80160d0 <_printf_i+0x28>
 80160c0:	2f62      	cmp	r7, #98	@ 0x62
 80160c2:	d80a      	bhi.n	80160da <_printf_i+0x32>
 80160c4:	2f00      	cmp	r7, #0
 80160c6:	f000 80d1 	beq.w	801626c <_printf_i+0x1c4>
 80160ca:	2f58      	cmp	r7, #88	@ 0x58
 80160cc:	f000 80b8 	beq.w	8016240 <_printf_i+0x198>
 80160d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80160d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80160d8:	e03a      	b.n	8016150 <_printf_i+0xa8>
 80160da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80160de:	2b15      	cmp	r3, #21
 80160e0:	d8f6      	bhi.n	80160d0 <_printf_i+0x28>
 80160e2:	a101      	add	r1, pc, #4	@ (adr r1, 80160e8 <_printf_i+0x40>)
 80160e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80160e8:	08016141 	.word	0x08016141
 80160ec:	08016155 	.word	0x08016155
 80160f0:	080160d1 	.word	0x080160d1
 80160f4:	080160d1 	.word	0x080160d1
 80160f8:	080160d1 	.word	0x080160d1
 80160fc:	080160d1 	.word	0x080160d1
 8016100:	08016155 	.word	0x08016155
 8016104:	080160d1 	.word	0x080160d1
 8016108:	080160d1 	.word	0x080160d1
 801610c:	080160d1 	.word	0x080160d1
 8016110:	080160d1 	.word	0x080160d1
 8016114:	08016253 	.word	0x08016253
 8016118:	0801617f 	.word	0x0801617f
 801611c:	0801620d 	.word	0x0801620d
 8016120:	080160d1 	.word	0x080160d1
 8016124:	080160d1 	.word	0x080160d1
 8016128:	08016275 	.word	0x08016275
 801612c:	080160d1 	.word	0x080160d1
 8016130:	0801617f 	.word	0x0801617f
 8016134:	080160d1 	.word	0x080160d1
 8016138:	080160d1 	.word	0x080160d1
 801613c:	08016215 	.word	0x08016215
 8016140:	6833      	ldr	r3, [r6, #0]
 8016142:	1d1a      	adds	r2, r3, #4
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	6032      	str	r2, [r6, #0]
 8016148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801614c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016150:	2301      	movs	r3, #1
 8016152:	e09c      	b.n	801628e <_printf_i+0x1e6>
 8016154:	6833      	ldr	r3, [r6, #0]
 8016156:	6820      	ldr	r0, [r4, #0]
 8016158:	1d19      	adds	r1, r3, #4
 801615a:	6031      	str	r1, [r6, #0]
 801615c:	0606      	lsls	r6, r0, #24
 801615e:	d501      	bpl.n	8016164 <_printf_i+0xbc>
 8016160:	681d      	ldr	r5, [r3, #0]
 8016162:	e003      	b.n	801616c <_printf_i+0xc4>
 8016164:	0645      	lsls	r5, r0, #25
 8016166:	d5fb      	bpl.n	8016160 <_printf_i+0xb8>
 8016168:	f9b3 5000 	ldrsh.w	r5, [r3]
 801616c:	2d00      	cmp	r5, #0
 801616e:	da03      	bge.n	8016178 <_printf_i+0xd0>
 8016170:	232d      	movs	r3, #45	@ 0x2d
 8016172:	426d      	negs	r5, r5
 8016174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016178:	230a      	movs	r3, #10
 801617a:	4858      	ldr	r0, [pc, #352]	@ (80162dc <_printf_i+0x234>)
 801617c:	e011      	b.n	80161a2 <_printf_i+0xfa>
 801617e:	6821      	ldr	r1, [r4, #0]
 8016180:	6833      	ldr	r3, [r6, #0]
 8016182:	0608      	lsls	r0, r1, #24
 8016184:	f853 5b04 	ldr.w	r5, [r3], #4
 8016188:	d402      	bmi.n	8016190 <_printf_i+0xe8>
 801618a:	0649      	lsls	r1, r1, #25
 801618c:	bf48      	it	mi
 801618e:	b2ad      	uxthmi	r5, r5
 8016190:	2f6f      	cmp	r7, #111	@ 0x6f
 8016192:	6033      	str	r3, [r6, #0]
 8016194:	bf14      	ite	ne
 8016196:	230a      	movne	r3, #10
 8016198:	2308      	moveq	r3, #8
 801619a:	4850      	ldr	r0, [pc, #320]	@ (80162dc <_printf_i+0x234>)
 801619c:	2100      	movs	r1, #0
 801619e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80161a2:	6866      	ldr	r6, [r4, #4]
 80161a4:	2e00      	cmp	r6, #0
 80161a6:	60a6      	str	r6, [r4, #8]
 80161a8:	db05      	blt.n	80161b6 <_printf_i+0x10e>
 80161aa:	6821      	ldr	r1, [r4, #0]
 80161ac:	432e      	orrs	r6, r5
 80161ae:	f021 0104 	bic.w	r1, r1, #4
 80161b2:	6021      	str	r1, [r4, #0]
 80161b4:	d04b      	beq.n	801624e <_printf_i+0x1a6>
 80161b6:	4616      	mov	r6, r2
 80161b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80161bc:	fb03 5711 	mls	r7, r3, r1, r5
 80161c0:	5dc7      	ldrb	r7, [r0, r7]
 80161c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80161c6:	462f      	mov	r7, r5
 80161c8:	42bb      	cmp	r3, r7
 80161ca:	460d      	mov	r5, r1
 80161cc:	d9f4      	bls.n	80161b8 <_printf_i+0x110>
 80161ce:	2b08      	cmp	r3, #8
 80161d0:	d10b      	bne.n	80161ea <_printf_i+0x142>
 80161d2:	6823      	ldr	r3, [r4, #0]
 80161d4:	07df      	lsls	r7, r3, #31
 80161d6:	d508      	bpl.n	80161ea <_printf_i+0x142>
 80161d8:	6923      	ldr	r3, [r4, #16]
 80161da:	6861      	ldr	r1, [r4, #4]
 80161dc:	4299      	cmp	r1, r3
 80161de:	bfde      	ittt	le
 80161e0:	2330      	movle	r3, #48	@ 0x30
 80161e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80161e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80161ea:	1b92      	subs	r2, r2, r6
 80161ec:	6122      	str	r2, [r4, #16]
 80161ee:	464b      	mov	r3, r9
 80161f0:	4621      	mov	r1, r4
 80161f2:	4640      	mov	r0, r8
 80161f4:	f8cd a000 	str.w	sl, [sp]
 80161f8:	aa03      	add	r2, sp, #12
 80161fa:	f7ff fee3 	bl	8015fc4 <_printf_common>
 80161fe:	3001      	adds	r0, #1
 8016200:	d14a      	bne.n	8016298 <_printf_i+0x1f0>
 8016202:	f04f 30ff 	mov.w	r0, #4294967295
 8016206:	b004      	add	sp, #16
 8016208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801620c:	6823      	ldr	r3, [r4, #0]
 801620e:	f043 0320 	orr.w	r3, r3, #32
 8016212:	6023      	str	r3, [r4, #0]
 8016214:	2778      	movs	r7, #120	@ 0x78
 8016216:	4832      	ldr	r0, [pc, #200]	@ (80162e0 <_printf_i+0x238>)
 8016218:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801621c:	6823      	ldr	r3, [r4, #0]
 801621e:	6831      	ldr	r1, [r6, #0]
 8016220:	061f      	lsls	r7, r3, #24
 8016222:	f851 5b04 	ldr.w	r5, [r1], #4
 8016226:	d402      	bmi.n	801622e <_printf_i+0x186>
 8016228:	065f      	lsls	r7, r3, #25
 801622a:	bf48      	it	mi
 801622c:	b2ad      	uxthmi	r5, r5
 801622e:	6031      	str	r1, [r6, #0]
 8016230:	07d9      	lsls	r1, r3, #31
 8016232:	bf44      	itt	mi
 8016234:	f043 0320 	orrmi.w	r3, r3, #32
 8016238:	6023      	strmi	r3, [r4, #0]
 801623a:	b11d      	cbz	r5, 8016244 <_printf_i+0x19c>
 801623c:	2310      	movs	r3, #16
 801623e:	e7ad      	b.n	801619c <_printf_i+0xf4>
 8016240:	4826      	ldr	r0, [pc, #152]	@ (80162dc <_printf_i+0x234>)
 8016242:	e7e9      	b.n	8016218 <_printf_i+0x170>
 8016244:	6823      	ldr	r3, [r4, #0]
 8016246:	f023 0320 	bic.w	r3, r3, #32
 801624a:	6023      	str	r3, [r4, #0]
 801624c:	e7f6      	b.n	801623c <_printf_i+0x194>
 801624e:	4616      	mov	r6, r2
 8016250:	e7bd      	b.n	80161ce <_printf_i+0x126>
 8016252:	6833      	ldr	r3, [r6, #0]
 8016254:	6825      	ldr	r5, [r4, #0]
 8016256:	1d18      	adds	r0, r3, #4
 8016258:	6961      	ldr	r1, [r4, #20]
 801625a:	6030      	str	r0, [r6, #0]
 801625c:	062e      	lsls	r6, r5, #24
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	d501      	bpl.n	8016266 <_printf_i+0x1be>
 8016262:	6019      	str	r1, [r3, #0]
 8016264:	e002      	b.n	801626c <_printf_i+0x1c4>
 8016266:	0668      	lsls	r0, r5, #25
 8016268:	d5fb      	bpl.n	8016262 <_printf_i+0x1ba>
 801626a:	8019      	strh	r1, [r3, #0]
 801626c:	2300      	movs	r3, #0
 801626e:	4616      	mov	r6, r2
 8016270:	6123      	str	r3, [r4, #16]
 8016272:	e7bc      	b.n	80161ee <_printf_i+0x146>
 8016274:	6833      	ldr	r3, [r6, #0]
 8016276:	2100      	movs	r1, #0
 8016278:	1d1a      	adds	r2, r3, #4
 801627a:	6032      	str	r2, [r6, #0]
 801627c:	681e      	ldr	r6, [r3, #0]
 801627e:	6862      	ldr	r2, [r4, #4]
 8016280:	4630      	mov	r0, r6
 8016282:	f000 fe26 	bl	8016ed2 <memchr>
 8016286:	b108      	cbz	r0, 801628c <_printf_i+0x1e4>
 8016288:	1b80      	subs	r0, r0, r6
 801628a:	6060      	str	r0, [r4, #4]
 801628c:	6863      	ldr	r3, [r4, #4]
 801628e:	6123      	str	r3, [r4, #16]
 8016290:	2300      	movs	r3, #0
 8016292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016296:	e7aa      	b.n	80161ee <_printf_i+0x146>
 8016298:	4632      	mov	r2, r6
 801629a:	4649      	mov	r1, r9
 801629c:	4640      	mov	r0, r8
 801629e:	6923      	ldr	r3, [r4, #16]
 80162a0:	47d0      	blx	sl
 80162a2:	3001      	adds	r0, #1
 80162a4:	d0ad      	beq.n	8016202 <_printf_i+0x15a>
 80162a6:	6823      	ldr	r3, [r4, #0]
 80162a8:	079b      	lsls	r3, r3, #30
 80162aa:	d413      	bmi.n	80162d4 <_printf_i+0x22c>
 80162ac:	68e0      	ldr	r0, [r4, #12]
 80162ae:	9b03      	ldr	r3, [sp, #12]
 80162b0:	4298      	cmp	r0, r3
 80162b2:	bfb8      	it	lt
 80162b4:	4618      	movlt	r0, r3
 80162b6:	e7a6      	b.n	8016206 <_printf_i+0x15e>
 80162b8:	2301      	movs	r3, #1
 80162ba:	4632      	mov	r2, r6
 80162bc:	4649      	mov	r1, r9
 80162be:	4640      	mov	r0, r8
 80162c0:	47d0      	blx	sl
 80162c2:	3001      	adds	r0, #1
 80162c4:	d09d      	beq.n	8016202 <_printf_i+0x15a>
 80162c6:	3501      	adds	r5, #1
 80162c8:	68e3      	ldr	r3, [r4, #12]
 80162ca:	9903      	ldr	r1, [sp, #12]
 80162cc:	1a5b      	subs	r3, r3, r1
 80162ce:	42ab      	cmp	r3, r5
 80162d0:	dcf2      	bgt.n	80162b8 <_printf_i+0x210>
 80162d2:	e7eb      	b.n	80162ac <_printf_i+0x204>
 80162d4:	2500      	movs	r5, #0
 80162d6:	f104 0619 	add.w	r6, r4, #25
 80162da:	e7f5      	b.n	80162c8 <_printf_i+0x220>
 80162dc:	0801ad5b 	.word	0x0801ad5b
 80162e0:	0801ad6c 	.word	0x0801ad6c

080162e4 <_scanf_float>:
 80162e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162e8:	b087      	sub	sp, #28
 80162ea:	9303      	str	r3, [sp, #12]
 80162ec:	688b      	ldr	r3, [r1, #8]
 80162ee:	4691      	mov	r9, r2
 80162f0:	1e5a      	subs	r2, r3, #1
 80162f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80162f6:	bf82      	ittt	hi
 80162f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80162fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8016300:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016304:	460a      	mov	r2, r1
 8016306:	f04f 0500 	mov.w	r5, #0
 801630a:	bf88      	it	hi
 801630c:	608b      	strhi	r3, [r1, #8]
 801630e:	680b      	ldr	r3, [r1, #0]
 8016310:	4680      	mov	r8, r0
 8016312:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8016316:	f842 3b1c 	str.w	r3, [r2], #28
 801631a:	460c      	mov	r4, r1
 801631c:	bf98      	it	ls
 801631e:	f04f 0b00 	movls.w	fp, #0
 8016322:	4616      	mov	r6, r2
 8016324:	46aa      	mov	sl, r5
 8016326:	462f      	mov	r7, r5
 8016328:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801632c:	9201      	str	r2, [sp, #4]
 801632e:	9502      	str	r5, [sp, #8]
 8016330:	68a2      	ldr	r2, [r4, #8]
 8016332:	b15a      	cbz	r2, 801634c <_scanf_float+0x68>
 8016334:	f8d9 3000 	ldr.w	r3, [r9]
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	2b4e      	cmp	r3, #78	@ 0x4e
 801633c:	d862      	bhi.n	8016404 <_scanf_float+0x120>
 801633e:	2b40      	cmp	r3, #64	@ 0x40
 8016340:	d83a      	bhi.n	80163b8 <_scanf_float+0xd4>
 8016342:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8016346:	b2c8      	uxtb	r0, r1
 8016348:	280e      	cmp	r0, #14
 801634a:	d938      	bls.n	80163be <_scanf_float+0xda>
 801634c:	b11f      	cbz	r7, 8016356 <_scanf_float+0x72>
 801634e:	6823      	ldr	r3, [r4, #0]
 8016350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016354:	6023      	str	r3, [r4, #0]
 8016356:	f10a 3aff 	add.w	sl, sl, #4294967295
 801635a:	f1ba 0f01 	cmp.w	sl, #1
 801635e:	f200 8114 	bhi.w	801658a <_scanf_float+0x2a6>
 8016362:	9b01      	ldr	r3, [sp, #4]
 8016364:	429e      	cmp	r6, r3
 8016366:	f200 8105 	bhi.w	8016574 <_scanf_float+0x290>
 801636a:	2001      	movs	r0, #1
 801636c:	b007      	add	sp, #28
 801636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016372:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8016376:	2a0d      	cmp	r2, #13
 8016378:	d8e8      	bhi.n	801634c <_scanf_float+0x68>
 801637a:	a101      	add	r1, pc, #4	@ (adr r1, 8016380 <_scanf_float+0x9c>)
 801637c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016380:	080164c9 	.word	0x080164c9
 8016384:	0801634d 	.word	0x0801634d
 8016388:	0801634d 	.word	0x0801634d
 801638c:	0801634d 	.word	0x0801634d
 8016390:	08016525 	.word	0x08016525
 8016394:	080164ff 	.word	0x080164ff
 8016398:	0801634d 	.word	0x0801634d
 801639c:	0801634d 	.word	0x0801634d
 80163a0:	080164d7 	.word	0x080164d7
 80163a4:	0801634d 	.word	0x0801634d
 80163a8:	0801634d 	.word	0x0801634d
 80163ac:	0801634d 	.word	0x0801634d
 80163b0:	0801634d 	.word	0x0801634d
 80163b4:	08016493 	.word	0x08016493
 80163b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80163bc:	e7db      	b.n	8016376 <_scanf_float+0x92>
 80163be:	290e      	cmp	r1, #14
 80163c0:	d8c4      	bhi.n	801634c <_scanf_float+0x68>
 80163c2:	a001      	add	r0, pc, #4	@ (adr r0, 80163c8 <_scanf_float+0xe4>)
 80163c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80163c8:	08016483 	.word	0x08016483
 80163cc:	0801634d 	.word	0x0801634d
 80163d0:	08016483 	.word	0x08016483
 80163d4:	08016513 	.word	0x08016513
 80163d8:	0801634d 	.word	0x0801634d
 80163dc:	08016425 	.word	0x08016425
 80163e0:	08016469 	.word	0x08016469
 80163e4:	08016469 	.word	0x08016469
 80163e8:	08016469 	.word	0x08016469
 80163ec:	08016469 	.word	0x08016469
 80163f0:	08016469 	.word	0x08016469
 80163f4:	08016469 	.word	0x08016469
 80163f8:	08016469 	.word	0x08016469
 80163fc:	08016469 	.word	0x08016469
 8016400:	08016469 	.word	0x08016469
 8016404:	2b6e      	cmp	r3, #110	@ 0x6e
 8016406:	d809      	bhi.n	801641c <_scanf_float+0x138>
 8016408:	2b60      	cmp	r3, #96	@ 0x60
 801640a:	d8b2      	bhi.n	8016372 <_scanf_float+0x8e>
 801640c:	2b54      	cmp	r3, #84	@ 0x54
 801640e:	d07b      	beq.n	8016508 <_scanf_float+0x224>
 8016410:	2b59      	cmp	r3, #89	@ 0x59
 8016412:	d19b      	bne.n	801634c <_scanf_float+0x68>
 8016414:	2d07      	cmp	r5, #7
 8016416:	d199      	bne.n	801634c <_scanf_float+0x68>
 8016418:	2508      	movs	r5, #8
 801641a:	e02f      	b.n	801647c <_scanf_float+0x198>
 801641c:	2b74      	cmp	r3, #116	@ 0x74
 801641e:	d073      	beq.n	8016508 <_scanf_float+0x224>
 8016420:	2b79      	cmp	r3, #121	@ 0x79
 8016422:	e7f6      	b.n	8016412 <_scanf_float+0x12e>
 8016424:	6821      	ldr	r1, [r4, #0]
 8016426:	05c8      	lsls	r0, r1, #23
 8016428:	d51e      	bpl.n	8016468 <_scanf_float+0x184>
 801642a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801642e:	6021      	str	r1, [r4, #0]
 8016430:	3701      	adds	r7, #1
 8016432:	f1bb 0f00 	cmp.w	fp, #0
 8016436:	d003      	beq.n	8016440 <_scanf_float+0x15c>
 8016438:	3201      	adds	r2, #1
 801643a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801643e:	60a2      	str	r2, [r4, #8]
 8016440:	68a3      	ldr	r3, [r4, #8]
 8016442:	3b01      	subs	r3, #1
 8016444:	60a3      	str	r3, [r4, #8]
 8016446:	6923      	ldr	r3, [r4, #16]
 8016448:	3301      	adds	r3, #1
 801644a:	6123      	str	r3, [r4, #16]
 801644c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016450:	3b01      	subs	r3, #1
 8016452:	2b00      	cmp	r3, #0
 8016454:	f8c9 3004 	str.w	r3, [r9, #4]
 8016458:	f340 8083 	ble.w	8016562 <_scanf_float+0x27e>
 801645c:	f8d9 3000 	ldr.w	r3, [r9]
 8016460:	3301      	adds	r3, #1
 8016462:	f8c9 3000 	str.w	r3, [r9]
 8016466:	e763      	b.n	8016330 <_scanf_float+0x4c>
 8016468:	eb1a 0105 	adds.w	r1, sl, r5
 801646c:	f47f af6e 	bne.w	801634c <_scanf_float+0x68>
 8016470:	460d      	mov	r5, r1
 8016472:	468a      	mov	sl, r1
 8016474:	6822      	ldr	r2, [r4, #0]
 8016476:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801647a:	6022      	str	r2, [r4, #0]
 801647c:	f806 3b01 	strb.w	r3, [r6], #1
 8016480:	e7de      	b.n	8016440 <_scanf_float+0x15c>
 8016482:	6822      	ldr	r2, [r4, #0]
 8016484:	0610      	lsls	r0, r2, #24
 8016486:	f57f af61 	bpl.w	801634c <_scanf_float+0x68>
 801648a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801648e:	6022      	str	r2, [r4, #0]
 8016490:	e7f4      	b.n	801647c <_scanf_float+0x198>
 8016492:	f1ba 0f00 	cmp.w	sl, #0
 8016496:	d10c      	bne.n	80164b2 <_scanf_float+0x1ce>
 8016498:	b977      	cbnz	r7, 80164b8 <_scanf_float+0x1d4>
 801649a:	6822      	ldr	r2, [r4, #0]
 801649c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80164a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80164a4:	d108      	bne.n	80164b8 <_scanf_float+0x1d4>
 80164a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80164aa:	f04f 0a01 	mov.w	sl, #1
 80164ae:	6022      	str	r2, [r4, #0]
 80164b0:	e7e4      	b.n	801647c <_scanf_float+0x198>
 80164b2:	f1ba 0f02 	cmp.w	sl, #2
 80164b6:	d051      	beq.n	801655c <_scanf_float+0x278>
 80164b8:	2d01      	cmp	r5, #1
 80164ba:	d002      	beq.n	80164c2 <_scanf_float+0x1de>
 80164bc:	2d04      	cmp	r5, #4
 80164be:	f47f af45 	bne.w	801634c <_scanf_float+0x68>
 80164c2:	3501      	adds	r5, #1
 80164c4:	b2ed      	uxtb	r5, r5
 80164c6:	e7d9      	b.n	801647c <_scanf_float+0x198>
 80164c8:	f1ba 0f01 	cmp.w	sl, #1
 80164cc:	f47f af3e 	bne.w	801634c <_scanf_float+0x68>
 80164d0:	f04f 0a02 	mov.w	sl, #2
 80164d4:	e7d2      	b.n	801647c <_scanf_float+0x198>
 80164d6:	b975      	cbnz	r5, 80164f6 <_scanf_float+0x212>
 80164d8:	2f00      	cmp	r7, #0
 80164da:	f47f af38 	bne.w	801634e <_scanf_float+0x6a>
 80164de:	6822      	ldr	r2, [r4, #0]
 80164e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80164e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80164e8:	f040 80ff 	bne.w	80166ea <_scanf_float+0x406>
 80164ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80164f0:	2501      	movs	r5, #1
 80164f2:	6022      	str	r2, [r4, #0]
 80164f4:	e7c2      	b.n	801647c <_scanf_float+0x198>
 80164f6:	2d03      	cmp	r5, #3
 80164f8:	d0e3      	beq.n	80164c2 <_scanf_float+0x1de>
 80164fa:	2d05      	cmp	r5, #5
 80164fc:	e7df      	b.n	80164be <_scanf_float+0x1da>
 80164fe:	2d02      	cmp	r5, #2
 8016500:	f47f af24 	bne.w	801634c <_scanf_float+0x68>
 8016504:	2503      	movs	r5, #3
 8016506:	e7b9      	b.n	801647c <_scanf_float+0x198>
 8016508:	2d06      	cmp	r5, #6
 801650a:	f47f af1f 	bne.w	801634c <_scanf_float+0x68>
 801650e:	2507      	movs	r5, #7
 8016510:	e7b4      	b.n	801647c <_scanf_float+0x198>
 8016512:	6822      	ldr	r2, [r4, #0]
 8016514:	0591      	lsls	r1, r2, #22
 8016516:	f57f af19 	bpl.w	801634c <_scanf_float+0x68>
 801651a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801651e:	6022      	str	r2, [r4, #0]
 8016520:	9702      	str	r7, [sp, #8]
 8016522:	e7ab      	b.n	801647c <_scanf_float+0x198>
 8016524:	6822      	ldr	r2, [r4, #0]
 8016526:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801652a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801652e:	d005      	beq.n	801653c <_scanf_float+0x258>
 8016530:	0550      	lsls	r0, r2, #21
 8016532:	f57f af0b 	bpl.w	801634c <_scanf_float+0x68>
 8016536:	2f00      	cmp	r7, #0
 8016538:	f000 80d7 	beq.w	80166ea <_scanf_float+0x406>
 801653c:	0591      	lsls	r1, r2, #22
 801653e:	bf58      	it	pl
 8016540:	9902      	ldrpl	r1, [sp, #8]
 8016542:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8016546:	bf58      	it	pl
 8016548:	1a79      	subpl	r1, r7, r1
 801654a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801654e:	f04f 0700 	mov.w	r7, #0
 8016552:	bf58      	it	pl
 8016554:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016558:	6022      	str	r2, [r4, #0]
 801655a:	e78f      	b.n	801647c <_scanf_float+0x198>
 801655c:	f04f 0a03 	mov.w	sl, #3
 8016560:	e78c      	b.n	801647c <_scanf_float+0x198>
 8016562:	4649      	mov	r1, r9
 8016564:	4640      	mov	r0, r8
 8016566:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801656a:	4798      	blx	r3
 801656c:	2800      	cmp	r0, #0
 801656e:	f43f aedf 	beq.w	8016330 <_scanf_float+0x4c>
 8016572:	e6eb      	b.n	801634c <_scanf_float+0x68>
 8016574:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016578:	464a      	mov	r2, r9
 801657a:	4640      	mov	r0, r8
 801657c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016580:	4798      	blx	r3
 8016582:	6923      	ldr	r3, [r4, #16]
 8016584:	3b01      	subs	r3, #1
 8016586:	6123      	str	r3, [r4, #16]
 8016588:	e6eb      	b.n	8016362 <_scanf_float+0x7e>
 801658a:	1e6b      	subs	r3, r5, #1
 801658c:	2b06      	cmp	r3, #6
 801658e:	d824      	bhi.n	80165da <_scanf_float+0x2f6>
 8016590:	2d02      	cmp	r5, #2
 8016592:	d836      	bhi.n	8016602 <_scanf_float+0x31e>
 8016594:	9b01      	ldr	r3, [sp, #4]
 8016596:	429e      	cmp	r6, r3
 8016598:	f67f aee7 	bls.w	801636a <_scanf_float+0x86>
 801659c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80165a0:	464a      	mov	r2, r9
 80165a2:	4640      	mov	r0, r8
 80165a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80165a8:	4798      	blx	r3
 80165aa:	6923      	ldr	r3, [r4, #16]
 80165ac:	3b01      	subs	r3, #1
 80165ae:	6123      	str	r3, [r4, #16]
 80165b0:	e7f0      	b.n	8016594 <_scanf_float+0x2b0>
 80165b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80165b6:	464a      	mov	r2, r9
 80165b8:	4640      	mov	r0, r8
 80165ba:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80165be:	4798      	blx	r3
 80165c0:	6923      	ldr	r3, [r4, #16]
 80165c2:	3b01      	subs	r3, #1
 80165c4:	6123      	str	r3, [r4, #16]
 80165c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165ca:	fa5f fa8a 	uxtb.w	sl, sl
 80165ce:	f1ba 0f02 	cmp.w	sl, #2
 80165d2:	d1ee      	bne.n	80165b2 <_scanf_float+0x2ce>
 80165d4:	3d03      	subs	r5, #3
 80165d6:	b2ed      	uxtb	r5, r5
 80165d8:	1b76      	subs	r6, r6, r5
 80165da:	6823      	ldr	r3, [r4, #0]
 80165dc:	05da      	lsls	r2, r3, #23
 80165de:	d530      	bpl.n	8016642 <_scanf_float+0x35e>
 80165e0:	055b      	lsls	r3, r3, #21
 80165e2:	d511      	bpl.n	8016608 <_scanf_float+0x324>
 80165e4:	9b01      	ldr	r3, [sp, #4]
 80165e6:	429e      	cmp	r6, r3
 80165e8:	f67f aebf 	bls.w	801636a <_scanf_float+0x86>
 80165ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80165f0:	464a      	mov	r2, r9
 80165f2:	4640      	mov	r0, r8
 80165f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80165f8:	4798      	blx	r3
 80165fa:	6923      	ldr	r3, [r4, #16]
 80165fc:	3b01      	subs	r3, #1
 80165fe:	6123      	str	r3, [r4, #16]
 8016600:	e7f0      	b.n	80165e4 <_scanf_float+0x300>
 8016602:	46aa      	mov	sl, r5
 8016604:	46b3      	mov	fp, r6
 8016606:	e7de      	b.n	80165c6 <_scanf_float+0x2e2>
 8016608:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801660c:	6923      	ldr	r3, [r4, #16]
 801660e:	2965      	cmp	r1, #101	@ 0x65
 8016610:	f103 33ff 	add.w	r3, r3, #4294967295
 8016614:	f106 35ff 	add.w	r5, r6, #4294967295
 8016618:	6123      	str	r3, [r4, #16]
 801661a:	d00c      	beq.n	8016636 <_scanf_float+0x352>
 801661c:	2945      	cmp	r1, #69	@ 0x45
 801661e:	d00a      	beq.n	8016636 <_scanf_float+0x352>
 8016620:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016624:	464a      	mov	r2, r9
 8016626:	4640      	mov	r0, r8
 8016628:	4798      	blx	r3
 801662a:	6923      	ldr	r3, [r4, #16]
 801662c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016630:	3b01      	subs	r3, #1
 8016632:	1eb5      	subs	r5, r6, #2
 8016634:	6123      	str	r3, [r4, #16]
 8016636:	464a      	mov	r2, r9
 8016638:	4640      	mov	r0, r8
 801663a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801663e:	4798      	blx	r3
 8016640:	462e      	mov	r6, r5
 8016642:	6822      	ldr	r2, [r4, #0]
 8016644:	f012 0210 	ands.w	r2, r2, #16
 8016648:	d001      	beq.n	801664e <_scanf_float+0x36a>
 801664a:	2000      	movs	r0, #0
 801664c:	e68e      	b.n	801636c <_scanf_float+0x88>
 801664e:	7032      	strb	r2, [r6, #0]
 8016650:	6823      	ldr	r3, [r4, #0]
 8016652:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8016656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801665a:	d125      	bne.n	80166a8 <_scanf_float+0x3c4>
 801665c:	9b02      	ldr	r3, [sp, #8]
 801665e:	429f      	cmp	r7, r3
 8016660:	d00a      	beq.n	8016678 <_scanf_float+0x394>
 8016662:	1bda      	subs	r2, r3, r7
 8016664:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8016668:	429e      	cmp	r6, r3
 801666a:	bf28      	it	cs
 801666c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8016670:	4630      	mov	r0, r6
 8016672:	491f      	ldr	r1, [pc, #124]	@ (80166f0 <_scanf_float+0x40c>)
 8016674:	f000 f9ba 	bl	80169ec <siprintf>
 8016678:	2200      	movs	r2, #0
 801667a:	4640      	mov	r0, r8
 801667c:	9901      	ldr	r1, [sp, #4]
 801667e:	f7ff f93f 	bl	8015900 <_strtod_r>
 8016682:	9b03      	ldr	r3, [sp, #12]
 8016684:	6825      	ldr	r5, [r4, #0]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	f015 0f02 	tst.w	r5, #2
 801668c:	4606      	mov	r6, r0
 801668e:	460f      	mov	r7, r1
 8016690:	f103 0204 	add.w	r2, r3, #4
 8016694:	d015      	beq.n	80166c2 <_scanf_float+0x3de>
 8016696:	9903      	ldr	r1, [sp, #12]
 8016698:	600a      	str	r2, [r1, #0]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	e9c3 6700 	strd	r6, r7, [r3]
 80166a0:	68e3      	ldr	r3, [r4, #12]
 80166a2:	3301      	adds	r3, #1
 80166a4:	60e3      	str	r3, [r4, #12]
 80166a6:	e7d0      	b.n	801664a <_scanf_float+0x366>
 80166a8:	9b04      	ldr	r3, [sp, #16]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d0e4      	beq.n	8016678 <_scanf_float+0x394>
 80166ae:	9905      	ldr	r1, [sp, #20]
 80166b0:	230a      	movs	r3, #10
 80166b2:	4640      	mov	r0, r8
 80166b4:	3101      	adds	r1, #1
 80166b6:	f7ff f9af 	bl	8015a18 <_strtol_r>
 80166ba:	9b04      	ldr	r3, [sp, #16]
 80166bc:	9e05      	ldr	r6, [sp, #20]
 80166be:	1ac2      	subs	r2, r0, r3
 80166c0:	e7d0      	b.n	8016664 <_scanf_float+0x380>
 80166c2:	076d      	lsls	r5, r5, #29
 80166c4:	d4e7      	bmi.n	8016696 <_scanf_float+0x3b2>
 80166c6:	9d03      	ldr	r5, [sp, #12]
 80166c8:	602a      	str	r2, [r5, #0]
 80166ca:	681d      	ldr	r5, [r3, #0]
 80166cc:	4602      	mov	r2, r0
 80166ce:	460b      	mov	r3, r1
 80166d0:	f7ea f9a6 	bl	8000a20 <__aeabi_dcmpun>
 80166d4:	b120      	cbz	r0, 80166e0 <_scanf_float+0x3fc>
 80166d6:	4807      	ldr	r0, [pc, #28]	@ (80166f4 <_scanf_float+0x410>)
 80166d8:	f000 fc1e 	bl	8016f18 <nanf>
 80166dc:	6028      	str	r0, [r5, #0]
 80166de:	e7df      	b.n	80166a0 <_scanf_float+0x3bc>
 80166e0:	4630      	mov	r0, r6
 80166e2:	4639      	mov	r1, r7
 80166e4:	f7ea f9fa 	bl	8000adc <__aeabi_d2f>
 80166e8:	e7f8      	b.n	80166dc <_scanf_float+0x3f8>
 80166ea:	2700      	movs	r7, #0
 80166ec:	e633      	b.n	8016356 <_scanf_float+0x72>
 80166ee:	bf00      	nop
 80166f0:	0801ad7d 	.word	0x0801ad7d
 80166f4:	0801ad48 	.word	0x0801ad48

080166f8 <std>:
 80166f8:	2300      	movs	r3, #0
 80166fa:	b510      	push	{r4, lr}
 80166fc:	4604      	mov	r4, r0
 80166fe:	e9c0 3300 	strd	r3, r3, [r0]
 8016702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016706:	6083      	str	r3, [r0, #8]
 8016708:	8181      	strh	r1, [r0, #12]
 801670a:	6643      	str	r3, [r0, #100]	@ 0x64
 801670c:	81c2      	strh	r2, [r0, #14]
 801670e:	6183      	str	r3, [r0, #24]
 8016710:	4619      	mov	r1, r3
 8016712:	2208      	movs	r2, #8
 8016714:	305c      	adds	r0, #92	@ 0x5c
 8016716:	f000 faa1 	bl	8016c5c <memset>
 801671a:	4b0d      	ldr	r3, [pc, #52]	@ (8016750 <std+0x58>)
 801671c:	6224      	str	r4, [r4, #32]
 801671e:	6263      	str	r3, [r4, #36]	@ 0x24
 8016720:	4b0c      	ldr	r3, [pc, #48]	@ (8016754 <std+0x5c>)
 8016722:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016724:	4b0c      	ldr	r3, [pc, #48]	@ (8016758 <std+0x60>)
 8016726:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016728:	4b0c      	ldr	r3, [pc, #48]	@ (801675c <std+0x64>)
 801672a:	6323      	str	r3, [r4, #48]	@ 0x30
 801672c:	4b0c      	ldr	r3, [pc, #48]	@ (8016760 <std+0x68>)
 801672e:	429c      	cmp	r4, r3
 8016730:	d006      	beq.n	8016740 <std+0x48>
 8016732:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016736:	4294      	cmp	r4, r2
 8016738:	d002      	beq.n	8016740 <std+0x48>
 801673a:	33d0      	adds	r3, #208	@ 0xd0
 801673c:	429c      	cmp	r4, r3
 801673e:	d105      	bne.n	801674c <std+0x54>
 8016740:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016748:	f000 bbb8 	b.w	8016ebc <__retarget_lock_init_recursive>
 801674c:	bd10      	pop	{r4, pc}
 801674e:	bf00      	nop
 8016750:	08016a89 	.word	0x08016a89
 8016754:	08016aaf 	.word	0x08016aaf
 8016758:	08016ae7 	.word	0x08016ae7
 801675c:	08016b0b 	.word	0x08016b0b
 8016760:	20003c10 	.word	0x20003c10

08016764 <stdio_exit_handler>:
 8016764:	4a02      	ldr	r2, [pc, #8]	@ (8016770 <stdio_exit_handler+0xc>)
 8016766:	4903      	ldr	r1, [pc, #12]	@ (8016774 <stdio_exit_handler+0x10>)
 8016768:	4803      	ldr	r0, [pc, #12]	@ (8016778 <stdio_exit_handler+0x14>)
 801676a:	f000 b87b 	b.w	8016864 <_fwalk_sglue>
 801676e:	bf00      	nop
 8016770:	20000130 	.word	0x20000130
 8016774:	080198cd 	.word	0x080198cd
 8016778:	200002ac 	.word	0x200002ac

0801677c <cleanup_stdio>:
 801677c:	6841      	ldr	r1, [r0, #4]
 801677e:	4b0c      	ldr	r3, [pc, #48]	@ (80167b0 <cleanup_stdio+0x34>)
 8016780:	b510      	push	{r4, lr}
 8016782:	4299      	cmp	r1, r3
 8016784:	4604      	mov	r4, r0
 8016786:	d001      	beq.n	801678c <cleanup_stdio+0x10>
 8016788:	f003 f8a0 	bl	80198cc <_fflush_r>
 801678c:	68a1      	ldr	r1, [r4, #8]
 801678e:	4b09      	ldr	r3, [pc, #36]	@ (80167b4 <cleanup_stdio+0x38>)
 8016790:	4299      	cmp	r1, r3
 8016792:	d002      	beq.n	801679a <cleanup_stdio+0x1e>
 8016794:	4620      	mov	r0, r4
 8016796:	f003 f899 	bl	80198cc <_fflush_r>
 801679a:	68e1      	ldr	r1, [r4, #12]
 801679c:	4b06      	ldr	r3, [pc, #24]	@ (80167b8 <cleanup_stdio+0x3c>)
 801679e:	4299      	cmp	r1, r3
 80167a0:	d004      	beq.n	80167ac <cleanup_stdio+0x30>
 80167a2:	4620      	mov	r0, r4
 80167a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167a8:	f003 b890 	b.w	80198cc <_fflush_r>
 80167ac:	bd10      	pop	{r4, pc}
 80167ae:	bf00      	nop
 80167b0:	20003c10 	.word	0x20003c10
 80167b4:	20003c78 	.word	0x20003c78
 80167b8:	20003ce0 	.word	0x20003ce0

080167bc <global_stdio_init.part.0>:
 80167bc:	b510      	push	{r4, lr}
 80167be:	4b0b      	ldr	r3, [pc, #44]	@ (80167ec <global_stdio_init.part.0+0x30>)
 80167c0:	4c0b      	ldr	r4, [pc, #44]	@ (80167f0 <global_stdio_init.part.0+0x34>)
 80167c2:	4a0c      	ldr	r2, [pc, #48]	@ (80167f4 <global_stdio_init.part.0+0x38>)
 80167c4:	4620      	mov	r0, r4
 80167c6:	601a      	str	r2, [r3, #0]
 80167c8:	2104      	movs	r1, #4
 80167ca:	2200      	movs	r2, #0
 80167cc:	f7ff ff94 	bl	80166f8 <std>
 80167d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80167d4:	2201      	movs	r2, #1
 80167d6:	2109      	movs	r1, #9
 80167d8:	f7ff ff8e 	bl	80166f8 <std>
 80167dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80167e0:	2202      	movs	r2, #2
 80167e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167e6:	2112      	movs	r1, #18
 80167e8:	f7ff bf86 	b.w	80166f8 <std>
 80167ec:	20003d48 	.word	0x20003d48
 80167f0:	20003c10 	.word	0x20003c10
 80167f4:	08016765 	.word	0x08016765

080167f8 <__sfp_lock_acquire>:
 80167f8:	4801      	ldr	r0, [pc, #4]	@ (8016800 <__sfp_lock_acquire+0x8>)
 80167fa:	f000 bb60 	b.w	8016ebe <__retarget_lock_acquire_recursive>
 80167fe:	bf00      	nop
 8016800:	20003d51 	.word	0x20003d51

08016804 <__sfp_lock_release>:
 8016804:	4801      	ldr	r0, [pc, #4]	@ (801680c <__sfp_lock_release+0x8>)
 8016806:	f000 bb5b 	b.w	8016ec0 <__retarget_lock_release_recursive>
 801680a:	bf00      	nop
 801680c:	20003d51 	.word	0x20003d51

08016810 <__sinit>:
 8016810:	b510      	push	{r4, lr}
 8016812:	4604      	mov	r4, r0
 8016814:	f7ff fff0 	bl	80167f8 <__sfp_lock_acquire>
 8016818:	6a23      	ldr	r3, [r4, #32]
 801681a:	b11b      	cbz	r3, 8016824 <__sinit+0x14>
 801681c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016820:	f7ff bff0 	b.w	8016804 <__sfp_lock_release>
 8016824:	4b04      	ldr	r3, [pc, #16]	@ (8016838 <__sinit+0x28>)
 8016826:	6223      	str	r3, [r4, #32]
 8016828:	4b04      	ldr	r3, [pc, #16]	@ (801683c <__sinit+0x2c>)
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d1f5      	bne.n	801681c <__sinit+0xc>
 8016830:	f7ff ffc4 	bl	80167bc <global_stdio_init.part.0>
 8016834:	e7f2      	b.n	801681c <__sinit+0xc>
 8016836:	bf00      	nop
 8016838:	0801677d 	.word	0x0801677d
 801683c:	20003d48 	.word	0x20003d48

08016840 <fiprintf>:
 8016840:	b40e      	push	{r1, r2, r3}
 8016842:	b503      	push	{r0, r1, lr}
 8016844:	4601      	mov	r1, r0
 8016846:	ab03      	add	r3, sp, #12
 8016848:	4805      	ldr	r0, [pc, #20]	@ (8016860 <fiprintf+0x20>)
 801684a:	f853 2b04 	ldr.w	r2, [r3], #4
 801684e:	6800      	ldr	r0, [r0, #0]
 8016850:	9301      	str	r3, [sp, #4]
 8016852:	f002 fd57 	bl	8019304 <_vfiprintf_r>
 8016856:	b002      	add	sp, #8
 8016858:	f85d eb04 	ldr.w	lr, [sp], #4
 801685c:	b003      	add	sp, #12
 801685e:	4770      	bx	lr
 8016860:	200002a8 	.word	0x200002a8

08016864 <_fwalk_sglue>:
 8016864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016868:	4607      	mov	r7, r0
 801686a:	4688      	mov	r8, r1
 801686c:	4614      	mov	r4, r2
 801686e:	2600      	movs	r6, #0
 8016870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016874:	f1b9 0901 	subs.w	r9, r9, #1
 8016878:	d505      	bpl.n	8016886 <_fwalk_sglue+0x22>
 801687a:	6824      	ldr	r4, [r4, #0]
 801687c:	2c00      	cmp	r4, #0
 801687e:	d1f7      	bne.n	8016870 <_fwalk_sglue+0xc>
 8016880:	4630      	mov	r0, r6
 8016882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016886:	89ab      	ldrh	r3, [r5, #12]
 8016888:	2b01      	cmp	r3, #1
 801688a:	d907      	bls.n	801689c <_fwalk_sglue+0x38>
 801688c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016890:	3301      	adds	r3, #1
 8016892:	d003      	beq.n	801689c <_fwalk_sglue+0x38>
 8016894:	4629      	mov	r1, r5
 8016896:	4638      	mov	r0, r7
 8016898:	47c0      	blx	r8
 801689a:	4306      	orrs	r6, r0
 801689c:	3568      	adds	r5, #104	@ 0x68
 801689e:	e7e9      	b.n	8016874 <_fwalk_sglue+0x10>

080168a0 <iprintf>:
 80168a0:	b40f      	push	{r0, r1, r2, r3}
 80168a2:	b507      	push	{r0, r1, r2, lr}
 80168a4:	4906      	ldr	r1, [pc, #24]	@ (80168c0 <iprintf+0x20>)
 80168a6:	ab04      	add	r3, sp, #16
 80168a8:	6808      	ldr	r0, [r1, #0]
 80168aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80168ae:	6881      	ldr	r1, [r0, #8]
 80168b0:	9301      	str	r3, [sp, #4]
 80168b2:	f002 fd27 	bl	8019304 <_vfiprintf_r>
 80168b6:	b003      	add	sp, #12
 80168b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80168bc:	b004      	add	sp, #16
 80168be:	4770      	bx	lr
 80168c0:	200002a8 	.word	0x200002a8

080168c4 <_puts_r>:
 80168c4:	6a03      	ldr	r3, [r0, #32]
 80168c6:	b570      	push	{r4, r5, r6, lr}
 80168c8:	4605      	mov	r5, r0
 80168ca:	460e      	mov	r6, r1
 80168cc:	6884      	ldr	r4, [r0, #8]
 80168ce:	b90b      	cbnz	r3, 80168d4 <_puts_r+0x10>
 80168d0:	f7ff ff9e 	bl	8016810 <__sinit>
 80168d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80168d6:	07db      	lsls	r3, r3, #31
 80168d8:	d405      	bmi.n	80168e6 <_puts_r+0x22>
 80168da:	89a3      	ldrh	r3, [r4, #12]
 80168dc:	0598      	lsls	r0, r3, #22
 80168de:	d402      	bmi.n	80168e6 <_puts_r+0x22>
 80168e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168e2:	f000 faec 	bl	8016ebe <__retarget_lock_acquire_recursive>
 80168e6:	89a3      	ldrh	r3, [r4, #12]
 80168e8:	0719      	lsls	r1, r3, #28
 80168ea:	d502      	bpl.n	80168f2 <_puts_r+0x2e>
 80168ec:	6923      	ldr	r3, [r4, #16]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d135      	bne.n	801695e <_puts_r+0x9a>
 80168f2:	4621      	mov	r1, r4
 80168f4:	4628      	mov	r0, r5
 80168f6:	f000 f94b 	bl	8016b90 <__swsetup_r>
 80168fa:	b380      	cbz	r0, 801695e <_puts_r+0x9a>
 80168fc:	f04f 35ff 	mov.w	r5, #4294967295
 8016900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016902:	07da      	lsls	r2, r3, #31
 8016904:	d405      	bmi.n	8016912 <_puts_r+0x4e>
 8016906:	89a3      	ldrh	r3, [r4, #12]
 8016908:	059b      	lsls	r3, r3, #22
 801690a:	d402      	bmi.n	8016912 <_puts_r+0x4e>
 801690c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801690e:	f000 fad7 	bl	8016ec0 <__retarget_lock_release_recursive>
 8016912:	4628      	mov	r0, r5
 8016914:	bd70      	pop	{r4, r5, r6, pc}
 8016916:	2b00      	cmp	r3, #0
 8016918:	da04      	bge.n	8016924 <_puts_r+0x60>
 801691a:	69a2      	ldr	r2, [r4, #24]
 801691c:	429a      	cmp	r2, r3
 801691e:	dc17      	bgt.n	8016950 <_puts_r+0x8c>
 8016920:	290a      	cmp	r1, #10
 8016922:	d015      	beq.n	8016950 <_puts_r+0x8c>
 8016924:	6823      	ldr	r3, [r4, #0]
 8016926:	1c5a      	adds	r2, r3, #1
 8016928:	6022      	str	r2, [r4, #0]
 801692a:	7019      	strb	r1, [r3, #0]
 801692c:	68a3      	ldr	r3, [r4, #8]
 801692e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016932:	3b01      	subs	r3, #1
 8016934:	60a3      	str	r3, [r4, #8]
 8016936:	2900      	cmp	r1, #0
 8016938:	d1ed      	bne.n	8016916 <_puts_r+0x52>
 801693a:	2b00      	cmp	r3, #0
 801693c:	da11      	bge.n	8016962 <_puts_r+0x9e>
 801693e:	4622      	mov	r2, r4
 8016940:	210a      	movs	r1, #10
 8016942:	4628      	mov	r0, r5
 8016944:	f000 f8e5 	bl	8016b12 <__swbuf_r>
 8016948:	3001      	adds	r0, #1
 801694a:	d0d7      	beq.n	80168fc <_puts_r+0x38>
 801694c:	250a      	movs	r5, #10
 801694e:	e7d7      	b.n	8016900 <_puts_r+0x3c>
 8016950:	4622      	mov	r2, r4
 8016952:	4628      	mov	r0, r5
 8016954:	f000 f8dd 	bl	8016b12 <__swbuf_r>
 8016958:	3001      	adds	r0, #1
 801695a:	d1e7      	bne.n	801692c <_puts_r+0x68>
 801695c:	e7ce      	b.n	80168fc <_puts_r+0x38>
 801695e:	3e01      	subs	r6, #1
 8016960:	e7e4      	b.n	801692c <_puts_r+0x68>
 8016962:	6823      	ldr	r3, [r4, #0]
 8016964:	1c5a      	adds	r2, r3, #1
 8016966:	6022      	str	r2, [r4, #0]
 8016968:	220a      	movs	r2, #10
 801696a:	701a      	strb	r2, [r3, #0]
 801696c:	e7ee      	b.n	801694c <_puts_r+0x88>
	...

08016970 <puts>:
 8016970:	4b02      	ldr	r3, [pc, #8]	@ (801697c <puts+0xc>)
 8016972:	4601      	mov	r1, r0
 8016974:	6818      	ldr	r0, [r3, #0]
 8016976:	f7ff bfa5 	b.w	80168c4 <_puts_r>
 801697a:	bf00      	nop
 801697c:	200002a8 	.word	0x200002a8

08016980 <sniprintf>:
 8016980:	b40c      	push	{r2, r3}
 8016982:	b530      	push	{r4, r5, lr}
 8016984:	4b18      	ldr	r3, [pc, #96]	@ (80169e8 <sniprintf+0x68>)
 8016986:	1e0c      	subs	r4, r1, #0
 8016988:	681d      	ldr	r5, [r3, #0]
 801698a:	b09d      	sub	sp, #116	@ 0x74
 801698c:	da08      	bge.n	80169a0 <sniprintf+0x20>
 801698e:	238b      	movs	r3, #139	@ 0x8b
 8016990:	f04f 30ff 	mov.w	r0, #4294967295
 8016994:	602b      	str	r3, [r5, #0]
 8016996:	b01d      	add	sp, #116	@ 0x74
 8016998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801699c:	b002      	add	sp, #8
 801699e:	4770      	bx	lr
 80169a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80169a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80169a8:	f04f 0300 	mov.w	r3, #0
 80169ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 80169ae:	bf0c      	ite	eq
 80169b0:	4623      	moveq	r3, r4
 80169b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80169b6:	9304      	str	r3, [sp, #16]
 80169b8:	9307      	str	r3, [sp, #28]
 80169ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80169be:	9002      	str	r0, [sp, #8]
 80169c0:	9006      	str	r0, [sp, #24]
 80169c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80169c6:	4628      	mov	r0, r5
 80169c8:	ab21      	add	r3, sp, #132	@ 0x84
 80169ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80169cc:	a902      	add	r1, sp, #8
 80169ce:	9301      	str	r3, [sp, #4]
 80169d0:	f002 f9a6 	bl	8018d20 <_svfiprintf_r>
 80169d4:	1c43      	adds	r3, r0, #1
 80169d6:	bfbc      	itt	lt
 80169d8:	238b      	movlt	r3, #139	@ 0x8b
 80169da:	602b      	strlt	r3, [r5, #0]
 80169dc:	2c00      	cmp	r4, #0
 80169de:	d0da      	beq.n	8016996 <sniprintf+0x16>
 80169e0:	2200      	movs	r2, #0
 80169e2:	9b02      	ldr	r3, [sp, #8]
 80169e4:	701a      	strb	r2, [r3, #0]
 80169e6:	e7d6      	b.n	8016996 <sniprintf+0x16>
 80169e8:	200002a8 	.word	0x200002a8

080169ec <siprintf>:
 80169ec:	b40e      	push	{r1, r2, r3}
 80169ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80169f2:	b510      	push	{r4, lr}
 80169f4:	2400      	movs	r4, #0
 80169f6:	b09d      	sub	sp, #116	@ 0x74
 80169f8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80169fa:	9002      	str	r0, [sp, #8]
 80169fc:	9006      	str	r0, [sp, #24]
 80169fe:	9107      	str	r1, [sp, #28]
 8016a00:	9104      	str	r1, [sp, #16]
 8016a02:	4809      	ldr	r0, [pc, #36]	@ (8016a28 <siprintf+0x3c>)
 8016a04:	4909      	ldr	r1, [pc, #36]	@ (8016a2c <siprintf+0x40>)
 8016a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a0a:	9105      	str	r1, [sp, #20]
 8016a0c:	6800      	ldr	r0, [r0, #0]
 8016a0e:	a902      	add	r1, sp, #8
 8016a10:	9301      	str	r3, [sp, #4]
 8016a12:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016a14:	f002 f984 	bl	8018d20 <_svfiprintf_r>
 8016a18:	9b02      	ldr	r3, [sp, #8]
 8016a1a:	701c      	strb	r4, [r3, #0]
 8016a1c:	b01d      	add	sp, #116	@ 0x74
 8016a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a22:	b003      	add	sp, #12
 8016a24:	4770      	bx	lr
 8016a26:	bf00      	nop
 8016a28:	200002a8 	.word	0x200002a8
 8016a2c:	ffff0208 	.word	0xffff0208

08016a30 <siscanf>:
 8016a30:	b40e      	push	{r1, r2, r3}
 8016a32:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8016a36:	b570      	push	{r4, r5, r6, lr}
 8016a38:	2500      	movs	r5, #0
 8016a3a:	b09d      	sub	sp, #116	@ 0x74
 8016a3c:	ac21      	add	r4, sp, #132	@ 0x84
 8016a3e:	f854 6b04 	ldr.w	r6, [r4], #4
 8016a42:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016a46:	951b      	str	r5, [sp, #108]	@ 0x6c
 8016a48:	9002      	str	r0, [sp, #8]
 8016a4a:	9006      	str	r0, [sp, #24]
 8016a4c:	f7e9 fb8a 	bl	8000164 <strlen>
 8016a50:	4b0b      	ldr	r3, [pc, #44]	@ (8016a80 <siscanf+0x50>)
 8016a52:	9003      	str	r0, [sp, #12]
 8016a54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016a56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016a5a:	9007      	str	r0, [sp, #28]
 8016a5c:	4809      	ldr	r0, [pc, #36]	@ (8016a84 <siscanf+0x54>)
 8016a5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016a62:	4632      	mov	r2, r6
 8016a64:	4623      	mov	r3, r4
 8016a66:	a902      	add	r1, sp, #8
 8016a68:	6800      	ldr	r0, [r0, #0]
 8016a6a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8016a6c:	9514      	str	r5, [sp, #80]	@ 0x50
 8016a6e:	9401      	str	r4, [sp, #4]
 8016a70:	f002 faac 	bl	8018fcc <__ssvfiscanf_r>
 8016a74:	b01d      	add	sp, #116	@ 0x74
 8016a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a7a:	b003      	add	sp, #12
 8016a7c:	4770      	bx	lr
 8016a7e:	bf00      	nop
 8016a80:	08016aab 	.word	0x08016aab
 8016a84:	200002a8 	.word	0x200002a8

08016a88 <__sread>:
 8016a88:	b510      	push	{r4, lr}
 8016a8a:	460c      	mov	r4, r1
 8016a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a90:	f000 f9b6 	bl	8016e00 <_read_r>
 8016a94:	2800      	cmp	r0, #0
 8016a96:	bfab      	itete	ge
 8016a98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8016a9c:	181b      	addge	r3, r3, r0
 8016a9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016aa2:	bfac      	ite	ge
 8016aa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016aa6:	81a3      	strhlt	r3, [r4, #12]
 8016aa8:	bd10      	pop	{r4, pc}

08016aaa <__seofread>:
 8016aaa:	2000      	movs	r0, #0
 8016aac:	4770      	bx	lr

08016aae <__swrite>:
 8016aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab2:	461f      	mov	r7, r3
 8016ab4:	898b      	ldrh	r3, [r1, #12]
 8016ab6:	4605      	mov	r5, r0
 8016ab8:	05db      	lsls	r3, r3, #23
 8016aba:	460c      	mov	r4, r1
 8016abc:	4616      	mov	r6, r2
 8016abe:	d505      	bpl.n	8016acc <__swrite+0x1e>
 8016ac0:	2302      	movs	r3, #2
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ac8:	f000 f988 	bl	8016ddc <_lseek_r>
 8016acc:	89a3      	ldrh	r3, [r4, #12]
 8016ace:	4632      	mov	r2, r6
 8016ad0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016ad4:	81a3      	strh	r3, [r4, #12]
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	463b      	mov	r3, r7
 8016ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ae2:	f000 b9af 	b.w	8016e44 <_write_r>

08016ae6 <__sseek>:
 8016ae6:	b510      	push	{r4, lr}
 8016ae8:	460c      	mov	r4, r1
 8016aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016aee:	f000 f975 	bl	8016ddc <_lseek_r>
 8016af2:	1c43      	adds	r3, r0, #1
 8016af4:	89a3      	ldrh	r3, [r4, #12]
 8016af6:	bf15      	itete	ne
 8016af8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016afa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016afe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016b02:	81a3      	strheq	r3, [r4, #12]
 8016b04:	bf18      	it	ne
 8016b06:	81a3      	strhne	r3, [r4, #12]
 8016b08:	bd10      	pop	{r4, pc}

08016b0a <__sclose>:
 8016b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b0e:	f000 b955 	b.w	8016dbc <_close_r>

08016b12 <__swbuf_r>:
 8016b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b14:	460e      	mov	r6, r1
 8016b16:	4614      	mov	r4, r2
 8016b18:	4605      	mov	r5, r0
 8016b1a:	b118      	cbz	r0, 8016b24 <__swbuf_r+0x12>
 8016b1c:	6a03      	ldr	r3, [r0, #32]
 8016b1e:	b90b      	cbnz	r3, 8016b24 <__swbuf_r+0x12>
 8016b20:	f7ff fe76 	bl	8016810 <__sinit>
 8016b24:	69a3      	ldr	r3, [r4, #24]
 8016b26:	60a3      	str	r3, [r4, #8]
 8016b28:	89a3      	ldrh	r3, [r4, #12]
 8016b2a:	071a      	lsls	r2, r3, #28
 8016b2c:	d501      	bpl.n	8016b32 <__swbuf_r+0x20>
 8016b2e:	6923      	ldr	r3, [r4, #16]
 8016b30:	b943      	cbnz	r3, 8016b44 <__swbuf_r+0x32>
 8016b32:	4621      	mov	r1, r4
 8016b34:	4628      	mov	r0, r5
 8016b36:	f000 f82b 	bl	8016b90 <__swsetup_r>
 8016b3a:	b118      	cbz	r0, 8016b44 <__swbuf_r+0x32>
 8016b3c:	f04f 37ff 	mov.w	r7, #4294967295
 8016b40:	4638      	mov	r0, r7
 8016b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b44:	6823      	ldr	r3, [r4, #0]
 8016b46:	6922      	ldr	r2, [r4, #16]
 8016b48:	b2f6      	uxtb	r6, r6
 8016b4a:	1a98      	subs	r0, r3, r2
 8016b4c:	6963      	ldr	r3, [r4, #20]
 8016b4e:	4637      	mov	r7, r6
 8016b50:	4283      	cmp	r3, r0
 8016b52:	dc05      	bgt.n	8016b60 <__swbuf_r+0x4e>
 8016b54:	4621      	mov	r1, r4
 8016b56:	4628      	mov	r0, r5
 8016b58:	f002 feb8 	bl	80198cc <_fflush_r>
 8016b5c:	2800      	cmp	r0, #0
 8016b5e:	d1ed      	bne.n	8016b3c <__swbuf_r+0x2a>
 8016b60:	68a3      	ldr	r3, [r4, #8]
 8016b62:	3b01      	subs	r3, #1
 8016b64:	60a3      	str	r3, [r4, #8]
 8016b66:	6823      	ldr	r3, [r4, #0]
 8016b68:	1c5a      	adds	r2, r3, #1
 8016b6a:	6022      	str	r2, [r4, #0]
 8016b6c:	701e      	strb	r6, [r3, #0]
 8016b6e:	6962      	ldr	r2, [r4, #20]
 8016b70:	1c43      	adds	r3, r0, #1
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d004      	beq.n	8016b80 <__swbuf_r+0x6e>
 8016b76:	89a3      	ldrh	r3, [r4, #12]
 8016b78:	07db      	lsls	r3, r3, #31
 8016b7a:	d5e1      	bpl.n	8016b40 <__swbuf_r+0x2e>
 8016b7c:	2e0a      	cmp	r6, #10
 8016b7e:	d1df      	bne.n	8016b40 <__swbuf_r+0x2e>
 8016b80:	4621      	mov	r1, r4
 8016b82:	4628      	mov	r0, r5
 8016b84:	f002 fea2 	bl	80198cc <_fflush_r>
 8016b88:	2800      	cmp	r0, #0
 8016b8a:	d0d9      	beq.n	8016b40 <__swbuf_r+0x2e>
 8016b8c:	e7d6      	b.n	8016b3c <__swbuf_r+0x2a>
	...

08016b90 <__swsetup_r>:
 8016b90:	b538      	push	{r3, r4, r5, lr}
 8016b92:	4b29      	ldr	r3, [pc, #164]	@ (8016c38 <__swsetup_r+0xa8>)
 8016b94:	4605      	mov	r5, r0
 8016b96:	6818      	ldr	r0, [r3, #0]
 8016b98:	460c      	mov	r4, r1
 8016b9a:	b118      	cbz	r0, 8016ba4 <__swsetup_r+0x14>
 8016b9c:	6a03      	ldr	r3, [r0, #32]
 8016b9e:	b90b      	cbnz	r3, 8016ba4 <__swsetup_r+0x14>
 8016ba0:	f7ff fe36 	bl	8016810 <__sinit>
 8016ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ba8:	0719      	lsls	r1, r3, #28
 8016baa:	d422      	bmi.n	8016bf2 <__swsetup_r+0x62>
 8016bac:	06da      	lsls	r2, r3, #27
 8016bae:	d407      	bmi.n	8016bc0 <__swsetup_r+0x30>
 8016bb0:	2209      	movs	r2, #9
 8016bb2:	602a      	str	r2, [r5, #0]
 8016bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8016bbc:	81a3      	strh	r3, [r4, #12]
 8016bbe:	e033      	b.n	8016c28 <__swsetup_r+0x98>
 8016bc0:	0758      	lsls	r0, r3, #29
 8016bc2:	d512      	bpl.n	8016bea <__swsetup_r+0x5a>
 8016bc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016bc6:	b141      	cbz	r1, 8016bda <__swsetup_r+0x4a>
 8016bc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016bcc:	4299      	cmp	r1, r3
 8016bce:	d002      	beq.n	8016bd6 <__swsetup_r+0x46>
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	f001 f809 	bl	8017be8 <_free_r>
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8016bda:	89a3      	ldrh	r3, [r4, #12]
 8016bdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016be0:	81a3      	strh	r3, [r4, #12]
 8016be2:	2300      	movs	r3, #0
 8016be4:	6063      	str	r3, [r4, #4]
 8016be6:	6923      	ldr	r3, [r4, #16]
 8016be8:	6023      	str	r3, [r4, #0]
 8016bea:	89a3      	ldrh	r3, [r4, #12]
 8016bec:	f043 0308 	orr.w	r3, r3, #8
 8016bf0:	81a3      	strh	r3, [r4, #12]
 8016bf2:	6923      	ldr	r3, [r4, #16]
 8016bf4:	b94b      	cbnz	r3, 8016c0a <__swsetup_r+0x7a>
 8016bf6:	89a3      	ldrh	r3, [r4, #12]
 8016bf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016c00:	d003      	beq.n	8016c0a <__swsetup_r+0x7a>
 8016c02:	4621      	mov	r1, r4
 8016c04:	4628      	mov	r0, r5
 8016c06:	f002 feae 	bl	8019966 <__smakebuf_r>
 8016c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c0e:	f013 0201 	ands.w	r2, r3, #1
 8016c12:	d00a      	beq.n	8016c2a <__swsetup_r+0x9a>
 8016c14:	2200      	movs	r2, #0
 8016c16:	60a2      	str	r2, [r4, #8]
 8016c18:	6962      	ldr	r2, [r4, #20]
 8016c1a:	4252      	negs	r2, r2
 8016c1c:	61a2      	str	r2, [r4, #24]
 8016c1e:	6922      	ldr	r2, [r4, #16]
 8016c20:	b942      	cbnz	r2, 8016c34 <__swsetup_r+0xa4>
 8016c22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016c26:	d1c5      	bne.n	8016bb4 <__swsetup_r+0x24>
 8016c28:	bd38      	pop	{r3, r4, r5, pc}
 8016c2a:	0799      	lsls	r1, r3, #30
 8016c2c:	bf58      	it	pl
 8016c2e:	6962      	ldrpl	r2, [r4, #20]
 8016c30:	60a2      	str	r2, [r4, #8]
 8016c32:	e7f4      	b.n	8016c1e <__swsetup_r+0x8e>
 8016c34:	2000      	movs	r0, #0
 8016c36:	e7f7      	b.n	8016c28 <__swsetup_r+0x98>
 8016c38:	200002a8 	.word	0x200002a8

08016c3c <memcmp>:
 8016c3c:	b510      	push	{r4, lr}
 8016c3e:	3901      	subs	r1, #1
 8016c40:	4402      	add	r2, r0
 8016c42:	4290      	cmp	r0, r2
 8016c44:	d101      	bne.n	8016c4a <memcmp+0xe>
 8016c46:	2000      	movs	r0, #0
 8016c48:	e005      	b.n	8016c56 <memcmp+0x1a>
 8016c4a:	7803      	ldrb	r3, [r0, #0]
 8016c4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016c50:	42a3      	cmp	r3, r4
 8016c52:	d001      	beq.n	8016c58 <memcmp+0x1c>
 8016c54:	1b18      	subs	r0, r3, r4
 8016c56:	bd10      	pop	{r4, pc}
 8016c58:	3001      	adds	r0, #1
 8016c5a:	e7f2      	b.n	8016c42 <memcmp+0x6>

08016c5c <memset>:
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	4402      	add	r2, r0
 8016c60:	4293      	cmp	r3, r2
 8016c62:	d100      	bne.n	8016c66 <memset+0xa>
 8016c64:	4770      	bx	lr
 8016c66:	f803 1b01 	strb.w	r1, [r3], #1
 8016c6a:	e7f9      	b.n	8016c60 <memset+0x4>

08016c6c <strcat>:
 8016c6c:	4602      	mov	r2, r0
 8016c6e:	b510      	push	{r4, lr}
 8016c70:	7814      	ldrb	r4, [r2, #0]
 8016c72:	4613      	mov	r3, r2
 8016c74:	3201      	adds	r2, #1
 8016c76:	2c00      	cmp	r4, #0
 8016c78:	d1fa      	bne.n	8016c70 <strcat+0x4>
 8016c7a:	3b01      	subs	r3, #1
 8016c7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016c84:	2a00      	cmp	r2, #0
 8016c86:	d1f9      	bne.n	8016c7c <strcat+0x10>
 8016c88:	bd10      	pop	{r4, pc}

08016c8a <strncat>:
 8016c8a:	b530      	push	{r4, r5, lr}
 8016c8c:	4604      	mov	r4, r0
 8016c8e:	7825      	ldrb	r5, [r4, #0]
 8016c90:	4623      	mov	r3, r4
 8016c92:	3401      	adds	r4, #1
 8016c94:	2d00      	cmp	r5, #0
 8016c96:	d1fa      	bne.n	8016c8e <strncat+0x4>
 8016c98:	3a01      	subs	r2, #1
 8016c9a:	d304      	bcc.n	8016ca6 <strncat+0x1c>
 8016c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ca0:	f803 4b01 	strb.w	r4, [r3], #1
 8016ca4:	b904      	cbnz	r4, 8016ca8 <strncat+0x1e>
 8016ca6:	bd30      	pop	{r4, r5, pc}
 8016ca8:	2a00      	cmp	r2, #0
 8016caa:	d1f5      	bne.n	8016c98 <strncat+0xe>
 8016cac:	701a      	strb	r2, [r3, #0]
 8016cae:	e7f3      	b.n	8016c98 <strncat+0xe>

08016cb0 <strncmp>:
 8016cb0:	b510      	push	{r4, lr}
 8016cb2:	b16a      	cbz	r2, 8016cd0 <strncmp+0x20>
 8016cb4:	3901      	subs	r1, #1
 8016cb6:	1884      	adds	r4, r0, r2
 8016cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016cbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	d103      	bne.n	8016ccc <strncmp+0x1c>
 8016cc4:	42a0      	cmp	r0, r4
 8016cc6:	d001      	beq.n	8016ccc <strncmp+0x1c>
 8016cc8:	2a00      	cmp	r2, #0
 8016cca:	d1f5      	bne.n	8016cb8 <strncmp+0x8>
 8016ccc:	1ad0      	subs	r0, r2, r3
 8016cce:	bd10      	pop	{r4, pc}
 8016cd0:	4610      	mov	r0, r2
 8016cd2:	e7fc      	b.n	8016cce <strncmp+0x1e>

08016cd4 <strncpy>:
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	b510      	push	{r4, lr}
 8016cd8:	3901      	subs	r1, #1
 8016cda:	b132      	cbz	r2, 8016cea <strncpy+0x16>
 8016cdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016ce0:	3a01      	subs	r2, #1
 8016ce2:	f803 4b01 	strb.w	r4, [r3], #1
 8016ce6:	2c00      	cmp	r4, #0
 8016ce8:	d1f7      	bne.n	8016cda <strncpy+0x6>
 8016cea:	2100      	movs	r1, #0
 8016cec:	441a      	add	r2, r3
 8016cee:	4293      	cmp	r3, r2
 8016cf0:	d100      	bne.n	8016cf4 <strncpy+0x20>
 8016cf2:	bd10      	pop	{r4, pc}
 8016cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8016cf8:	e7f9      	b.n	8016cee <strncpy+0x1a>
	...

08016cfc <strtok>:
 8016cfc:	4b16      	ldr	r3, [pc, #88]	@ (8016d58 <strtok+0x5c>)
 8016cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d02:	681f      	ldr	r7, [r3, #0]
 8016d04:	4605      	mov	r5, r0
 8016d06:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8016d08:	460e      	mov	r6, r1
 8016d0a:	b9ec      	cbnz	r4, 8016d48 <strtok+0x4c>
 8016d0c:	2050      	movs	r0, #80	@ 0x50
 8016d0e:	f7fd ff3f 	bl	8014b90 <malloc>
 8016d12:	4602      	mov	r2, r0
 8016d14:	6478      	str	r0, [r7, #68]	@ 0x44
 8016d16:	b920      	cbnz	r0, 8016d22 <strtok+0x26>
 8016d18:	215b      	movs	r1, #91	@ 0x5b
 8016d1a:	4b10      	ldr	r3, [pc, #64]	@ (8016d5c <strtok+0x60>)
 8016d1c:	4810      	ldr	r0, [pc, #64]	@ (8016d60 <strtok+0x64>)
 8016d1e:	f7fd ff11 	bl	8014b44 <__assert_func>
 8016d22:	e9c0 4400 	strd	r4, r4, [r0]
 8016d26:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016d2a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016d2e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8016d32:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8016d36:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8016d3a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8016d3e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8016d42:	6184      	str	r4, [r0, #24]
 8016d44:	7704      	strb	r4, [r0, #28]
 8016d46:	6244      	str	r4, [r0, #36]	@ 0x24
 8016d48:	4631      	mov	r1, r6
 8016d4a:	4628      	mov	r0, r5
 8016d4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016d4e:	2301      	movs	r3, #1
 8016d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d54:	f000 b806 	b.w	8016d64 <__strtok_r>
 8016d58:	200002a8 	.word	0x200002a8
 8016d5c:	0801ad82 	.word	0x0801ad82
 8016d60:	0801ad99 	.word	0x0801ad99

08016d64 <__strtok_r>:
 8016d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d66:	4604      	mov	r4, r0
 8016d68:	b908      	cbnz	r0, 8016d6e <__strtok_r+0xa>
 8016d6a:	6814      	ldr	r4, [r2, #0]
 8016d6c:	b144      	cbz	r4, 8016d80 <__strtok_r+0x1c>
 8016d6e:	460f      	mov	r7, r1
 8016d70:	4620      	mov	r0, r4
 8016d72:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016d76:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016d7a:	b91e      	cbnz	r6, 8016d84 <__strtok_r+0x20>
 8016d7c:	b965      	cbnz	r5, 8016d98 <__strtok_r+0x34>
 8016d7e:	6015      	str	r5, [r2, #0]
 8016d80:	2000      	movs	r0, #0
 8016d82:	e005      	b.n	8016d90 <__strtok_r+0x2c>
 8016d84:	42b5      	cmp	r5, r6
 8016d86:	d1f6      	bne.n	8016d76 <__strtok_r+0x12>
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d1f0      	bne.n	8016d6e <__strtok_r+0xa>
 8016d8c:	6014      	str	r4, [r2, #0]
 8016d8e:	7003      	strb	r3, [r0, #0]
 8016d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d92:	461c      	mov	r4, r3
 8016d94:	e00c      	b.n	8016db0 <__strtok_r+0x4c>
 8016d96:	b91d      	cbnz	r5, 8016da0 <__strtok_r+0x3c>
 8016d98:	460e      	mov	r6, r1
 8016d9a:	4627      	mov	r7, r4
 8016d9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016da0:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016da4:	42ab      	cmp	r3, r5
 8016da6:	d1f6      	bne.n	8016d96 <__strtok_r+0x32>
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d0f2      	beq.n	8016d92 <__strtok_r+0x2e>
 8016dac:	2300      	movs	r3, #0
 8016dae:	703b      	strb	r3, [r7, #0]
 8016db0:	6014      	str	r4, [r2, #0]
 8016db2:	e7ed      	b.n	8016d90 <__strtok_r+0x2c>

08016db4 <_localeconv_r>:
 8016db4:	4800      	ldr	r0, [pc, #0]	@ (8016db8 <_localeconv_r+0x4>)
 8016db6:	4770      	bx	lr
 8016db8:	2000022c 	.word	0x2000022c

08016dbc <_close_r>:
 8016dbc:	b538      	push	{r3, r4, r5, lr}
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	4d05      	ldr	r5, [pc, #20]	@ (8016dd8 <_close_r+0x1c>)
 8016dc2:	4604      	mov	r4, r0
 8016dc4:	4608      	mov	r0, r1
 8016dc6:	602b      	str	r3, [r5, #0]
 8016dc8:	f7eb fb45 	bl	8002456 <_close>
 8016dcc:	1c43      	adds	r3, r0, #1
 8016dce:	d102      	bne.n	8016dd6 <_close_r+0x1a>
 8016dd0:	682b      	ldr	r3, [r5, #0]
 8016dd2:	b103      	cbz	r3, 8016dd6 <_close_r+0x1a>
 8016dd4:	6023      	str	r3, [r4, #0]
 8016dd6:	bd38      	pop	{r3, r4, r5, pc}
 8016dd8:	20003d4c 	.word	0x20003d4c

08016ddc <_lseek_r>:
 8016ddc:	b538      	push	{r3, r4, r5, lr}
 8016dde:	4604      	mov	r4, r0
 8016de0:	4608      	mov	r0, r1
 8016de2:	4611      	mov	r1, r2
 8016de4:	2200      	movs	r2, #0
 8016de6:	4d05      	ldr	r5, [pc, #20]	@ (8016dfc <_lseek_r+0x20>)
 8016de8:	602a      	str	r2, [r5, #0]
 8016dea:	461a      	mov	r2, r3
 8016dec:	f7eb fb57 	bl	800249e <_lseek>
 8016df0:	1c43      	adds	r3, r0, #1
 8016df2:	d102      	bne.n	8016dfa <_lseek_r+0x1e>
 8016df4:	682b      	ldr	r3, [r5, #0]
 8016df6:	b103      	cbz	r3, 8016dfa <_lseek_r+0x1e>
 8016df8:	6023      	str	r3, [r4, #0]
 8016dfa:	bd38      	pop	{r3, r4, r5, pc}
 8016dfc:	20003d4c 	.word	0x20003d4c

08016e00 <_read_r>:
 8016e00:	b538      	push	{r3, r4, r5, lr}
 8016e02:	4604      	mov	r4, r0
 8016e04:	4608      	mov	r0, r1
 8016e06:	4611      	mov	r1, r2
 8016e08:	2200      	movs	r2, #0
 8016e0a:	4d05      	ldr	r5, [pc, #20]	@ (8016e20 <_read_r+0x20>)
 8016e0c:	602a      	str	r2, [r5, #0]
 8016e0e:	461a      	mov	r2, r3
 8016e10:	f7eb fb04 	bl	800241c <_read>
 8016e14:	1c43      	adds	r3, r0, #1
 8016e16:	d102      	bne.n	8016e1e <_read_r+0x1e>
 8016e18:	682b      	ldr	r3, [r5, #0]
 8016e1a:	b103      	cbz	r3, 8016e1e <_read_r+0x1e>
 8016e1c:	6023      	str	r3, [r4, #0]
 8016e1e:	bd38      	pop	{r3, r4, r5, pc}
 8016e20:	20003d4c 	.word	0x20003d4c

08016e24 <_sbrk_r>:
 8016e24:	b538      	push	{r3, r4, r5, lr}
 8016e26:	2300      	movs	r3, #0
 8016e28:	4d05      	ldr	r5, [pc, #20]	@ (8016e40 <_sbrk_r+0x1c>)
 8016e2a:	4604      	mov	r4, r0
 8016e2c:	4608      	mov	r0, r1
 8016e2e:	602b      	str	r3, [r5, #0]
 8016e30:	f7eb fb42 	bl	80024b8 <_sbrk>
 8016e34:	1c43      	adds	r3, r0, #1
 8016e36:	d102      	bne.n	8016e3e <_sbrk_r+0x1a>
 8016e38:	682b      	ldr	r3, [r5, #0]
 8016e3a:	b103      	cbz	r3, 8016e3e <_sbrk_r+0x1a>
 8016e3c:	6023      	str	r3, [r4, #0]
 8016e3e:	bd38      	pop	{r3, r4, r5, pc}
 8016e40:	20003d4c 	.word	0x20003d4c

08016e44 <_write_r>:
 8016e44:	b538      	push	{r3, r4, r5, lr}
 8016e46:	4604      	mov	r4, r0
 8016e48:	4608      	mov	r0, r1
 8016e4a:	4611      	mov	r1, r2
 8016e4c:	2200      	movs	r2, #0
 8016e4e:	4d05      	ldr	r5, [pc, #20]	@ (8016e64 <_write_r+0x20>)
 8016e50:	602a      	str	r2, [r5, #0]
 8016e52:	461a      	mov	r2, r3
 8016e54:	f7ea ffe8 	bl	8001e28 <_write>
 8016e58:	1c43      	adds	r3, r0, #1
 8016e5a:	d102      	bne.n	8016e62 <_write_r+0x1e>
 8016e5c:	682b      	ldr	r3, [r5, #0]
 8016e5e:	b103      	cbz	r3, 8016e62 <_write_r+0x1e>
 8016e60:	6023      	str	r3, [r4, #0]
 8016e62:	bd38      	pop	{r3, r4, r5, pc}
 8016e64:	20003d4c 	.word	0x20003d4c

08016e68 <__errno>:
 8016e68:	4b01      	ldr	r3, [pc, #4]	@ (8016e70 <__errno+0x8>)
 8016e6a:	6818      	ldr	r0, [r3, #0]
 8016e6c:	4770      	bx	lr
 8016e6e:	bf00      	nop
 8016e70:	200002a8 	.word	0x200002a8

08016e74 <__libc_init_array>:
 8016e74:	b570      	push	{r4, r5, r6, lr}
 8016e76:	2600      	movs	r6, #0
 8016e78:	4d0c      	ldr	r5, [pc, #48]	@ (8016eac <__libc_init_array+0x38>)
 8016e7a:	4c0d      	ldr	r4, [pc, #52]	@ (8016eb0 <__libc_init_array+0x3c>)
 8016e7c:	1b64      	subs	r4, r4, r5
 8016e7e:	10a4      	asrs	r4, r4, #2
 8016e80:	42a6      	cmp	r6, r4
 8016e82:	d109      	bne.n	8016e98 <__libc_init_array+0x24>
 8016e84:	f002 ff56 	bl	8019d34 <_init>
 8016e88:	2600      	movs	r6, #0
 8016e8a:	4d0a      	ldr	r5, [pc, #40]	@ (8016eb4 <__libc_init_array+0x40>)
 8016e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8016eb8 <__libc_init_array+0x44>)
 8016e8e:	1b64      	subs	r4, r4, r5
 8016e90:	10a4      	asrs	r4, r4, #2
 8016e92:	42a6      	cmp	r6, r4
 8016e94:	d105      	bne.n	8016ea2 <__libc_init_array+0x2e>
 8016e96:	bd70      	pop	{r4, r5, r6, pc}
 8016e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e9c:	4798      	blx	r3
 8016e9e:	3601      	adds	r6, #1
 8016ea0:	e7ee      	b.n	8016e80 <__libc_init_array+0xc>
 8016ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ea6:	4798      	blx	r3
 8016ea8:	3601      	adds	r6, #1
 8016eaa:	e7f2      	b.n	8016e92 <__libc_init_array+0x1e>
 8016eac:	0801b1b0 	.word	0x0801b1b0
 8016eb0:	0801b1b0 	.word	0x0801b1b0
 8016eb4:	0801b1b0 	.word	0x0801b1b0
 8016eb8:	0801b1b4 	.word	0x0801b1b4

08016ebc <__retarget_lock_init_recursive>:
 8016ebc:	4770      	bx	lr

08016ebe <__retarget_lock_acquire_recursive>:
 8016ebe:	4770      	bx	lr

08016ec0 <__retarget_lock_release_recursive>:
 8016ec0:	4770      	bx	lr

08016ec2 <strcpy>:
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ec8:	f803 2b01 	strb.w	r2, [r3], #1
 8016ecc:	2a00      	cmp	r2, #0
 8016ece:	d1f9      	bne.n	8016ec4 <strcpy+0x2>
 8016ed0:	4770      	bx	lr

08016ed2 <memchr>:
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	b510      	push	{r4, lr}
 8016ed6:	b2c9      	uxtb	r1, r1
 8016ed8:	4402      	add	r2, r0
 8016eda:	4293      	cmp	r3, r2
 8016edc:	4618      	mov	r0, r3
 8016ede:	d101      	bne.n	8016ee4 <memchr+0x12>
 8016ee0:	2000      	movs	r0, #0
 8016ee2:	e003      	b.n	8016eec <memchr+0x1a>
 8016ee4:	7804      	ldrb	r4, [r0, #0]
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	428c      	cmp	r4, r1
 8016eea:	d1f6      	bne.n	8016eda <memchr+0x8>
 8016eec:	bd10      	pop	{r4, pc}

08016eee <memcpy>:
 8016eee:	440a      	add	r2, r1
 8016ef0:	4291      	cmp	r1, r2
 8016ef2:	f100 33ff 	add.w	r3, r0, #4294967295
 8016ef6:	d100      	bne.n	8016efa <memcpy+0xc>
 8016ef8:	4770      	bx	lr
 8016efa:	b510      	push	{r4, lr}
 8016efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f00:	4291      	cmp	r1, r2
 8016f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f06:	d1f9      	bne.n	8016efc <memcpy+0xe>
 8016f08:	bd10      	pop	{r4, pc}
	...

08016f0c <nan>:
 8016f0c:	2000      	movs	r0, #0
 8016f0e:	4901      	ldr	r1, [pc, #4]	@ (8016f14 <nan+0x8>)
 8016f10:	4770      	bx	lr
 8016f12:	bf00      	nop
 8016f14:	7ff80000 	.word	0x7ff80000

08016f18 <nanf>:
 8016f18:	4800      	ldr	r0, [pc, #0]	@ (8016f1c <nanf+0x4>)
 8016f1a:	4770      	bx	lr
 8016f1c:	7fc00000 	.word	0x7fc00000

08016f20 <abort>:
 8016f20:	2006      	movs	r0, #6
 8016f22:	b508      	push	{r3, lr}
 8016f24:	f002 fe0e 	bl	8019b44 <raise>
 8016f28:	2001      	movs	r0, #1
 8016f2a:	f7eb fa6c 	bl	8002406 <_exit>

08016f2e <quorem>:
 8016f2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f32:	6903      	ldr	r3, [r0, #16]
 8016f34:	690c      	ldr	r4, [r1, #16]
 8016f36:	4607      	mov	r7, r0
 8016f38:	42a3      	cmp	r3, r4
 8016f3a:	db7e      	blt.n	801703a <quorem+0x10c>
 8016f3c:	3c01      	subs	r4, #1
 8016f3e:	00a3      	lsls	r3, r4, #2
 8016f40:	f100 0514 	add.w	r5, r0, #20
 8016f44:	f101 0814 	add.w	r8, r1, #20
 8016f48:	9300      	str	r3, [sp, #0]
 8016f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016f4e:	9301      	str	r3, [sp, #4]
 8016f50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016f54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016f58:	3301      	adds	r3, #1
 8016f5a:	429a      	cmp	r2, r3
 8016f5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8016f60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016f64:	d32e      	bcc.n	8016fc4 <quorem+0x96>
 8016f66:	f04f 0a00 	mov.w	sl, #0
 8016f6a:	46c4      	mov	ip, r8
 8016f6c:	46ae      	mov	lr, r5
 8016f6e:	46d3      	mov	fp, sl
 8016f70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016f74:	b298      	uxth	r0, r3
 8016f76:	fb06 a000 	mla	r0, r6, r0, sl
 8016f7a:	0c1b      	lsrs	r3, r3, #16
 8016f7c:	0c02      	lsrs	r2, r0, #16
 8016f7e:	fb06 2303 	mla	r3, r6, r3, r2
 8016f82:	f8de 2000 	ldr.w	r2, [lr]
 8016f86:	b280      	uxth	r0, r0
 8016f88:	b292      	uxth	r2, r2
 8016f8a:	1a12      	subs	r2, r2, r0
 8016f8c:	445a      	add	r2, fp
 8016f8e:	f8de 0000 	ldr.w	r0, [lr]
 8016f92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016f96:	b29b      	uxth	r3, r3
 8016f98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8016f9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016fa0:	b292      	uxth	r2, r2
 8016fa2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016fa6:	45e1      	cmp	r9, ip
 8016fa8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016fac:	f84e 2b04 	str.w	r2, [lr], #4
 8016fb0:	d2de      	bcs.n	8016f70 <quorem+0x42>
 8016fb2:	9b00      	ldr	r3, [sp, #0]
 8016fb4:	58eb      	ldr	r3, [r5, r3]
 8016fb6:	b92b      	cbnz	r3, 8016fc4 <quorem+0x96>
 8016fb8:	9b01      	ldr	r3, [sp, #4]
 8016fba:	3b04      	subs	r3, #4
 8016fbc:	429d      	cmp	r5, r3
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	d32f      	bcc.n	8017022 <quorem+0xf4>
 8016fc2:	613c      	str	r4, [r7, #16]
 8016fc4:	4638      	mov	r0, r7
 8016fc6:	f001 fc5f 	bl	8018888 <__mcmp>
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	db25      	blt.n	801701a <quorem+0xec>
 8016fce:	4629      	mov	r1, r5
 8016fd0:	2000      	movs	r0, #0
 8016fd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8016fd6:	f8d1 c000 	ldr.w	ip, [r1]
 8016fda:	fa1f fe82 	uxth.w	lr, r2
 8016fde:	fa1f f38c 	uxth.w	r3, ip
 8016fe2:	eba3 030e 	sub.w	r3, r3, lr
 8016fe6:	4403      	add	r3, r0
 8016fe8:	0c12      	lsrs	r2, r2, #16
 8016fea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016fee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ff8:	45c1      	cmp	r9, r8
 8016ffa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016ffe:	f841 3b04 	str.w	r3, [r1], #4
 8017002:	d2e6      	bcs.n	8016fd2 <quorem+0xa4>
 8017004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801700c:	b922      	cbnz	r2, 8017018 <quorem+0xea>
 801700e:	3b04      	subs	r3, #4
 8017010:	429d      	cmp	r5, r3
 8017012:	461a      	mov	r2, r3
 8017014:	d30b      	bcc.n	801702e <quorem+0x100>
 8017016:	613c      	str	r4, [r7, #16]
 8017018:	3601      	adds	r6, #1
 801701a:	4630      	mov	r0, r6
 801701c:	b003      	add	sp, #12
 801701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017022:	6812      	ldr	r2, [r2, #0]
 8017024:	3b04      	subs	r3, #4
 8017026:	2a00      	cmp	r2, #0
 8017028:	d1cb      	bne.n	8016fc2 <quorem+0x94>
 801702a:	3c01      	subs	r4, #1
 801702c:	e7c6      	b.n	8016fbc <quorem+0x8e>
 801702e:	6812      	ldr	r2, [r2, #0]
 8017030:	3b04      	subs	r3, #4
 8017032:	2a00      	cmp	r2, #0
 8017034:	d1ef      	bne.n	8017016 <quorem+0xe8>
 8017036:	3c01      	subs	r4, #1
 8017038:	e7ea      	b.n	8017010 <quorem+0xe2>
 801703a:	2000      	movs	r0, #0
 801703c:	e7ee      	b.n	801701c <quorem+0xee>
	...

08017040 <_dtoa_r>:
 8017040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017044:	4614      	mov	r4, r2
 8017046:	461d      	mov	r5, r3
 8017048:	69c7      	ldr	r7, [r0, #28]
 801704a:	b097      	sub	sp, #92	@ 0x5c
 801704c:	4681      	mov	r9, r0
 801704e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017052:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8017054:	b97f      	cbnz	r7, 8017076 <_dtoa_r+0x36>
 8017056:	2010      	movs	r0, #16
 8017058:	f7fd fd9a 	bl	8014b90 <malloc>
 801705c:	4602      	mov	r2, r0
 801705e:	f8c9 001c 	str.w	r0, [r9, #28]
 8017062:	b920      	cbnz	r0, 801706e <_dtoa_r+0x2e>
 8017064:	21ef      	movs	r1, #239	@ 0xef
 8017066:	4bac      	ldr	r3, [pc, #688]	@ (8017318 <_dtoa_r+0x2d8>)
 8017068:	48ac      	ldr	r0, [pc, #688]	@ (801731c <_dtoa_r+0x2dc>)
 801706a:	f7fd fd6b 	bl	8014b44 <__assert_func>
 801706e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8017072:	6007      	str	r7, [r0, #0]
 8017074:	60c7      	str	r7, [r0, #12]
 8017076:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801707a:	6819      	ldr	r1, [r3, #0]
 801707c:	b159      	cbz	r1, 8017096 <_dtoa_r+0x56>
 801707e:	685a      	ldr	r2, [r3, #4]
 8017080:	2301      	movs	r3, #1
 8017082:	4093      	lsls	r3, r2
 8017084:	604a      	str	r2, [r1, #4]
 8017086:	608b      	str	r3, [r1, #8]
 8017088:	4648      	mov	r0, r9
 801708a:	f001 f981 	bl	8018390 <_Bfree>
 801708e:	2200      	movs	r2, #0
 8017090:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8017094:	601a      	str	r2, [r3, #0]
 8017096:	1e2b      	subs	r3, r5, #0
 8017098:	bfaf      	iteee	ge
 801709a:	2300      	movge	r3, #0
 801709c:	2201      	movlt	r2, #1
 801709e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80170a2:	9307      	strlt	r3, [sp, #28]
 80170a4:	bfa8      	it	ge
 80170a6:	6033      	strge	r3, [r6, #0]
 80170a8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80170ac:	4b9c      	ldr	r3, [pc, #624]	@ (8017320 <_dtoa_r+0x2e0>)
 80170ae:	bfb8      	it	lt
 80170b0:	6032      	strlt	r2, [r6, #0]
 80170b2:	ea33 0308 	bics.w	r3, r3, r8
 80170b6:	d112      	bne.n	80170de <_dtoa_r+0x9e>
 80170b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80170bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80170be:	6013      	str	r3, [r2, #0]
 80170c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80170c4:	4323      	orrs	r3, r4
 80170c6:	f000 855e 	beq.w	8017b86 <_dtoa_r+0xb46>
 80170ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80170cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8017324 <_dtoa_r+0x2e4>
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	f000 8560 	beq.w	8017b96 <_dtoa_r+0xb56>
 80170d6:	f10a 0303 	add.w	r3, sl, #3
 80170da:	f000 bd5a 	b.w	8017b92 <_dtoa_r+0xb52>
 80170de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80170e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80170e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80170ea:	2200      	movs	r2, #0
 80170ec:	2300      	movs	r3, #0
 80170ee:	f7e9 fc65 	bl	80009bc <__aeabi_dcmpeq>
 80170f2:	4607      	mov	r7, r0
 80170f4:	b158      	cbz	r0, 801710e <_dtoa_r+0xce>
 80170f6:	2301      	movs	r3, #1
 80170f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80170fa:	6013      	str	r3, [r2, #0]
 80170fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80170fe:	b113      	cbz	r3, 8017106 <_dtoa_r+0xc6>
 8017100:	4b89      	ldr	r3, [pc, #548]	@ (8017328 <_dtoa_r+0x2e8>)
 8017102:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8017104:	6013      	str	r3, [r2, #0]
 8017106:	f8df a224 	ldr.w	sl, [pc, #548]	@ 801732c <_dtoa_r+0x2ec>
 801710a:	f000 bd44 	b.w	8017b96 <_dtoa_r+0xb56>
 801710e:	ab14      	add	r3, sp, #80	@ 0x50
 8017110:	9301      	str	r3, [sp, #4]
 8017112:	ab15      	add	r3, sp, #84	@ 0x54
 8017114:	9300      	str	r3, [sp, #0]
 8017116:	4648      	mov	r0, r9
 8017118:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801711c:	f001 fccc 	bl	8018ab8 <__d2b>
 8017120:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8017124:	9003      	str	r0, [sp, #12]
 8017126:	2e00      	cmp	r6, #0
 8017128:	d078      	beq.n	801721c <_dtoa_r+0x1dc>
 801712a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801712e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017130:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8017134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017138:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801713c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8017140:	9712      	str	r7, [sp, #72]	@ 0x48
 8017142:	4619      	mov	r1, r3
 8017144:	2200      	movs	r2, #0
 8017146:	4b7a      	ldr	r3, [pc, #488]	@ (8017330 <_dtoa_r+0x2f0>)
 8017148:	f7e9 f818 	bl	800017c <__aeabi_dsub>
 801714c:	a36c      	add	r3, pc, #432	@ (adr r3, 8017300 <_dtoa_r+0x2c0>)
 801714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017152:	f7e9 f9cb 	bl	80004ec <__aeabi_dmul>
 8017156:	a36c      	add	r3, pc, #432	@ (adr r3, 8017308 <_dtoa_r+0x2c8>)
 8017158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801715c:	f7e9 f810 	bl	8000180 <__adddf3>
 8017160:	4604      	mov	r4, r0
 8017162:	4630      	mov	r0, r6
 8017164:	460d      	mov	r5, r1
 8017166:	f7e9 f957 	bl	8000418 <__aeabi_i2d>
 801716a:	a369      	add	r3, pc, #420	@ (adr r3, 8017310 <_dtoa_r+0x2d0>)
 801716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017170:	f7e9 f9bc 	bl	80004ec <__aeabi_dmul>
 8017174:	4602      	mov	r2, r0
 8017176:	460b      	mov	r3, r1
 8017178:	4620      	mov	r0, r4
 801717a:	4629      	mov	r1, r5
 801717c:	f7e9 f800 	bl	8000180 <__adddf3>
 8017180:	4604      	mov	r4, r0
 8017182:	460d      	mov	r5, r1
 8017184:	f7e9 fc62 	bl	8000a4c <__aeabi_d2iz>
 8017188:	2200      	movs	r2, #0
 801718a:	4607      	mov	r7, r0
 801718c:	2300      	movs	r3, #0
 801718e:	4620      	mov	r0, r4
 8017190:	4629      	mov	r1, r5
 8017192:	f7e9 fc1d 	bl	80009d0 <__aeabi_dcmplt>
 8017196:	b140      	cbz	r0, 80171aa <_dtoa_r+0x16a>
 8017198:	4638      	mov	r0, r7
 801719a:	f7e9 f93d 	bl	8000418 <__aeabi_i2d>
 801719e:	4622      	mov	r2, r4
 80171a0:	462b      	mov	r3, r5
 80171a2:	f7e9 fc0b 	bl	80009bc <__aeabi_dcmpeq>
 80171a6:	b900      	cbnz	r0, 80171aa <_dtoa_r+0x16a>
 80171a8:	3f01      	subs	r7, #1
 80171aa:	2f16      	cmp	r7, #22
 80171ac:	d854      	bhi.n	8017258 <_dtoa_r+0x218>
 80171ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80171b2:	4b60      	ldr	r3, [pc, #384]	@ (8017334 <_dtoa_r+0x2f4>)
 80171b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80171b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171bc:	f7e9 fc08 	bl	80009d0 <__aeabi_dcmplt>
 80171c0:	2800      	cmp	r0, #0
 80171c2:	d04b      	beq.n	801725c <_dtoa_r+0x21c>
 80171c4:	2300      	movs	r3, #0
 80171c6:	3f01      	subs	r7, #1
 80171c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80171ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80171cc:	1b9b      	subs	r3, r3, r6
 80171ce:	1e5a      	subs	r2, r3, #1
 80171d0:	bf49      	itett	mi
 80171d2:	f1c3 0301 	rsbmi	r3, r3, #1
 80171d6:	2300      	movpl	r3, #0
 80171d8:	9304      	strmi	r3, [sp, #16]
 80171da:	2300      	movmi	r3, #0
 80171dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80171de:	bf54      	ite	pl
 80171e0:	9304      	strpl	r3, [sp, #16]
 80171e2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80171e4:	2f00      	cmp	r7, #0
 80171e6:	db3b      	blt.n	8017260 <_dtoa_r+0x220>
 80171e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171ea:	970e      	str	r7, [sp, #56]	@ 0x38
 80171ec:	443b      	add	r3, r7
 80171ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80171f0:	2300      	movs	r3, #0
 80171f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80171f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80171f6:	2b09      	cmp	r3, #9
 80171f8:	d865      	bhi.n	80172c6 <_dtoa_r+0x286>
 80171fa:	2b05      	cmp	r3, #5
 80171fc:	bfc4      	itt	gt
 80171fe:	3b04      	subgt	r3, #4
 8017200:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8017202:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8017204:	bfc8      	it	gt
 8017206:	2400      	movgt	r4, #0
 8017208:	f1a3 0302 	sub.w	r3, r3, #2
 801720c:	bfd8      	it	le
 801720e:	2401      	movle	r4, #1
 8017210:	2b03      	cmp	r3, #3
 8017212:	d864      	bhi.n	80172de <_dtoa_r+0x29e>
 8017214:	e8df f003 	tbb	[pc, r3]
 8017218:	2c385553 	.word	0x2c385553
 801721c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8017220:	441e      	add	r6, r3
 8017222:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8017226:	2b20      	cmp	r3, #32
 8017228:	bfc1      	itttt	gt
 801722a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801722e:	fa08 f803 	lslgt.w	r8, r8, r3
 8017232:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8017236:	fa24 f303 	lsrgt.w	r3, r4, r3
 801723a:	bfd6      	itet	le
 801723c:	f1c3 0320 	rsble	r3, r3, #32
 8017240:	ea48 0003 	orrgt.w	r0, r8, r3
 8017244:	fa04 f003 	lslle.w	r0, r4, r3
 8017248:	f7e9 f8d6 	bl	80003f8 <__aeabi_ui2d>
 801724c:	2201      	movs	r2, #1
 801724e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8017252:	3e01      	subs	r6, #1
 8017254:	9212      	str	r2, [sp, #72]	@ 0x48
 8017256:	e774      	b.n	8017142 <_dtoa_r+0x102>
 8017258:	2301      	movs	r3, #1
 801725a:	e7b5      	b.n	80171c8 <_dtoa_r+0x188>
 801725c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801725e:	e7b4      	b.n	80171ca <_dtoa_r+0x18a>
 8017260:	9b04      	ldr	r3, [sp, #16]
 8017262:	1bdb      	subs	r3, r3, r7
 8017264:	9304      	str	r3, [sp, #16]
 8017266:	427b      	negs	r3, r7
 8017268:	930a      	str	r3, [sp, #40]	@ 0x28
 801726a:	2300      	movs	r3, #0
 801726c:	930e      	str	r3, [sp, #56]	@ 0x38
 801726e:	e7c1      	b.n	80171f4 <_dtoa_r+0x1b4>
 8017270:	2301      	movs	r3, #1
 8017272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017274:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017276:	eb07 0b03 	add.w	fp, r7, r3
 801727a:	f10b 0301 	add.w	r3, fp, #1
 801727e:	2b01      	cmp	r3, #1
 8017280:	9308      	str	r3, [sp, #32]
 8017282:	bfb8      	it	lt
 8017284:	2301      	movlt	r3, #1
 8017286:	e006      	b.n	8017296 <_dtoa_r+0x256>
 8017288:	2301      	movs	r3, #1
 801728a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801728c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801728e:	2b00      	cmp	r3, #0
 8017290:	dd28      	ble.n	80172e4 <_dtoa_r+0x2a4>
 8017292:	469b      	mov	fp, r3
 8017294:	9308      	str	r3, [sp, #32]
 8017296:	2100      	movs	r1, #0
 8017298:	2204      	movs	r2, #4
 801729a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801729e:	f102 0514 	add.w	r5, r2, #20
 80172a2:	429d      	cmp	r5, r3
 80172a4:	d926      	bls.n	80172f4 <_dtoa_r+0x2b4>
 80172a6:	6041      	str	r1, [r0, #4]
 80172a8:	4648      	mov	r0, r9
 80172aa:	f001 f831 	bl	8018310 <_Balloc>
 80172ae:	4682      	mov	sl, r0
 80172b0:	2800      	cmp	r0, #0
 80172b2:	d143      	bne.n	801733c <_dtoa_r+0x2fc>
 80172b4:	4602      	mov	r2, r0
 80172b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80172ba:	4b1f      	ldr	r3, [pc, #124]	@ (8017338 <_dtoa_r+0x2f8>)
 80172bc:	e6d4      	b.n	8017068 <_dtoa_r+0x28>
 80172be:	2300      	movs	r3, #0
 80172c0:	e7e3      	b.n	801728a <_dtoa_r+0x24a>
 80172c2:	2300      	movs	r3, #0
 80172c4:	e7d5      	b.n	8017272 <_dtoa_r+0x232>
 80172c6:	2401      	movs	r4, #1
 80172c8:	2300      	movs	r3, #0
 80172ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80172cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80172ce:	f04f 3bff 	mov.w	fp, #4294967295
 80172d2:	2200      	movs	r2, #0
 80172d4:	2312      	movs	r3, #18
 80172d6:	f8cd b020 	str.w	fp, [sp, #32]
 80172da:	9221      	str	r2, [sp, #132]	@ 0x84
 80172dc:	e7db      	b.n	8017296 <_dtoa_r+0x256>
 80172de:	2301      	movs	r3, #1
 80172e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80172e2:	e7f4      	b.n	80172ce <_dtoa_r+0x28e>
 80172e4:	f04f 0b01 	mov.w	fp, #1
 80172e8:	465b      	mov	r3, fp
 80172ea:	f8cd b020 	str.w	fp, [sp, #32]
 80172ee:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80172f2:	e7d0      	b.n	8017296 <_dtoa_r+0x256>
 80172f4:	3101      	adds	r1, #1
 80172f6:	0052      	lsls	r2, r2, #1
 80172f8:	e7d1      	b.n	801729e <_dtoa_r+0x25e>
 80172fa:	bf00      	nop
 80172fc:	f3af 8000 	nop.w
 8017300:	636f4361 	.word	0x636f4361
 8017304:	3fd287a7 	.word	0x3fd287a7
 8017308:	8b60c8b3 	.word	0x8b60c8b3
 801730c:	3fc68a28 	.word	0x3fc68a28
 8017310:	509f79fb 	.word	0x509f79fb
 8017314:	3fd34413 	.word	0x3fd34413
 8017318:	0801ad82 	.word	0x0801ad82
 801731c:	0801ae08 	.word	0x0801ae08
 8017320:	7ff00000 	.word	0x7ff00000
 8017324:	0801ae04 	.word	0x0801ae04
 8017328:	0801af52 	.word	0x0801af52
 801732c:	0801af51 	.word	0x0801af51
 8017330:	3ff80000 	.word	0x3ff80000
 8017334:	0801b0e0 	.word	0x0801b0e0
 8017338:	0801ae60 	.word	0x0801ae60
 801733c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8017340:	6018      	str	r0, [r3, #0]
 8017342:	9b08      	ldr	r3, [sp, #32]
 8017344:	2b0e      	cmp	r3, #14
 8017346:	f200 80a1 	bhi.w	801748c <_dtoa_r+0x44c>
 801734a:	2c00      	cmp	r4, #0
 801734c:	f000 809e 	beq.w	801748c <_dtoa_r+0x44c>
 8017350:	2f00      	cmp	r7, #0
 8017352:	dd33      	ble.n	80173bc <_dtoa_r+0x37c>
 8017354:	4b9c      	ldr	r3, [pc, #624]	@ (80175c8 <_dtoa_r+0x588>)
 8017356:	f007 020f 	and.w	r2, r7, #15
 801735a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801735e:	05f8      	lsls	r0, r7, #23
 8017360:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017364:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8017368:	ea4f 1427 	mov.w	r4, r7, asr #4
 801736c:	d516      	bpl.n	801739c <_dtoa_r+0x35c>
 801736e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017372:	4b96      	ldr	r3, [pc, #600]	@ (80175cc <_dtoa_r+0x58c>)
 8017374:	2603      	movs	r6, #3
 8017376:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801737a:	f7e9 f9e1 	bl	8000740 <__aeabi_ddiv>
 801737e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017382:	f004 040f 	and.w	r4, r4, #15
 8017386:	4d91      	ldr	r5, [pc, #580]	@ (80175cc <_dtoa_r+0x58c>)
 8017388:	b954      	cbnz	r4, 80173a0 <_dtoa_r+0x360>
 801738a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801738e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017392:	f7e9 f9d5 	bl	8000740 <__aeabi_ddiv>
 8017396:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801739a:	e028      	b.n	80173ee <_dtoa_r+0x3ae>
 801739c:	2602      	movs	r6, #2
 801739e:	e7f2      	b.n	8017386 <_dtoa_r+0x346>
 80173a0:	07e1      	lsls	r1, r4, #31
 80173a2:	d508      	bpl.n	80173b6 <_dtoa_r+0x376>
 80173a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80173a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80173ac:	f7e9 f89e 	bl	80004ec <__aeabi_dmul>
 80173b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80173b4:	3601      	adds	r6, #1
 80173b6:	1064      	asrs	r4, r4, #1
 80173b8:	3508      	adds	r5, #8
 80173ba:	e7e5      	b.n	8017388 <_dtoa_r+0x348>
 80173bc:	f000 80af 	beq.w	801751e <_dtoa_r+0x4de>
 80173c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80173c4:	427c      	negs	r4, r7
 80173c6:	4b80      	ldr	r3, [pc, #512]	@ (80175c8 <_dtoa_r+0x588>)
 80173c8:	f004 020f 	and.w	r2, r4, #15
 80173cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80173d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d4:	f7e9 f88a 	bl	80004ec <__aeabi_dmul>
 80173d8:	2602      	movs	r6, #2
 80173da:	2300      	movs	r3, #0
 80173dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80173e0:	4d7a      	ldr	r5, [pc, #488]	@ (80175cc <_dtoa_r+0x58c>)
 80173e2:	1124      	asrs	r4, r4, #4
 80173e4:	2c00      	cmp	r4, #0
 80173e6:	f040 808f 	bne.w	8017508 <_dtoa_r+0x4c8>
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d1d3      	bne.n	8017396 <_dtoa_r+0x356>
 80173ee:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80173f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	f000 8094 	beq.w	8017522 <_dtoa_r+0x4e2>
 80173fa:	2200      	movs	r2, #0
 80173fc:	4620      	mov	r0, r4
 80173fe:	4629      	mov	r1, r5
 8017400:	4b73      	ldr	r3, [pc, #460]	@ (80175d0 <_dtoa_r+0x590>)
 8017402:	f7e9 fae5 	bl	80009d0 <__aeabi_dcmplt>
 8017406:	2800      	cmp	r0, #0
 8017408:	f000 808b 	beq.w	8017522 <_dtoa_r+0x4e2>
 801740c:	9b08      	ldr	r3, [sp, #32]
 801740e:	2b00      	cmp	r3, #0
 8017410:	f000 8087 	beq.w	8017522 <_dtoa_r+0x4e2>
 8017414:	f1bb 0f00 	cmp.w	fp, #0
 8017418:	dd34      	ble.n	8017484 <_dtoa_r+0x444>
 801741a:	4620      	mov	r0, r4
 801741c:	2200      	movs	r2, #0
 801741e:	4629      	mov	r1, r5
 8017420:	4b6c      	ldr	r3, [pc, #432]	@ (80175d4 <_dtoa_r+0x594>)
 8017422:	f7e9 f863 	bl	80004ec <__aeabi_dmul>
 8017426:	465c      	mov	r4, fp
 8017428:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801742c:	f107 38ff 	add.w	r8, r7, #4294967295
 8017430:	3601      	adds	r6, #1
 8017432:	4630      	mov	r0, r6
 8017434:	f7e8 fff0 	bl	8000418 <__aeabi_i2d>
 8017438:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801743c:	f7e9 f856 	bl	80004ec <__aeabi_dmul>
 8017440:	2200      	movs	r2, #0
 8017442:	4b65      	ldr	r3, [pc, #404]	@ (80175d8 <_dtoa_r+0x598>)
 8017444:	f7e8 fe9c 	bl	8000180 <__adddf3>
 8017448:	4605      	mov	r5, r0
 801744a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801744e:	2c00      	cmp	r4, #0
 8017450:	d16a      	bne.n	8017528 <_dtoa_r+0x4e8>
 8017452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017456:	2200      	movs	r2, #0
 8017458:	4b60      	ldr	r3, [pc, #384]	@ (80175dc <_dtoa_r+0x59c>)
 801745a:	f7e8 fe8f 	bl	800017c <__aeabi_dsub>
 801745e:	4602      	mov	r2, r0
 8017460:	460b      	mov	r3, r1
 8017462:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017466:	462a      	mov	r2, r5
 8017468:	4633      	mov	r3, r6
 801746a:	f7e9 facf 	bl	8000a0c <__aeabi_dcmpgt>
 801746e:	2800      	cmp	r0, #0
 8017470:	f040 8298 	bne.w	80179a4 <_dtoa_r+0x964>
 8017474:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017478:	462a      	mov	r2, r5
 801747a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801747e:	f7e9 faa7 	bl	80009d0 <__aeabi_dcmplt>
 8017482:	bb38      	cbnz	r0, 80174d4 <_dtoa_r+0x494>
 8017484:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8017488:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801748c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801748e:	2b00      	cmp	r3, #0
 8017490:	f2c0 8157 	blt.w	8017742 <_dtoa_r+0x702>
 8017494:	2f0e      	cmp	r7, #14
 8017496:	f300 8154 	bgt.w	8017742 <_dtoa_r+0x702>
 801749a:	4b4b      	ldr	r3, [pc, #300]	@ (80175c8 <_dtoa_r+0x588>)
 801749c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80174a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80174a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80174a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	f280 80e5 	bge.w	801767a <_dtoa_r+0x63a>
 80174b0:	9b08      	ldr	r3, [sp, #32]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f300 80e1 	bgt.w	801767a <_dtoa_r+0x63a>
 80174b8:	d10c      	bne.n	80174d4 <_dtoa_r+0x494>
 80174ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80174be:	2200      	movs	r2, #0
 80174c0:	4b46      	ldr	r3, [pc, #280]	@ (80175dc <_dtoa_r+0x59c>)
 80174c2:	f7e9 f813 	bl	80004ec <__aeabi_dmul>
 80174c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80174ca:	f7e9 fa95 	bl	80009f8 <__aeabi_dcmpge>
 80174ce:	2800      	cmp	r0, #0
 80174d0:	f000 8266 	beq.w	80179a0 <_dtoa_r+0x960>
 80174d4:	2400      	movs	r4, #0
 80174d6:	4625      	mov	r5, r4
 80174d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80174da:	4656      	mov	r6, sl
 80174dc:	ea6f 0803 	mvn.w	r8, r3
 80174e0:	2700      	movs	r7, #0
 80174e2:	4621      	mov	r1, r4
 80174e4:	4648      	mov	r0, r9
 80174e6:	f000 ff53 	bl	8018390 <_Bfree>
 80174ea:	2d00      	cmp	r5, #0
 80174ec:	f000 80bd 	beq.w	801766a <_dtoa_r+0x62a>
 80174f0:	b12f      	cbz	r7, 80174fe <_dtoa_r+0x4be>
 80174f2:	42af      	cmp	r7, r5
 80174f4:	d003      	beq.n	80174fe <_dtoa_r+0x4be>
 80174f6:	4639      	mov	r1, r7
 80174f8:	4648      	mov	r0, r9
 80174fa:	f000 ff49 	bl	8018390 <_Bfree>
 80174fe:	4629      	mov	r1, r5
 8017500:	4648      	mov	r0, r9
 8017502:	f000 ff45 	bl	8018390 <_Bfree>
 8017506:	e0b0      	b.n	801766a <_dtoa_r+0x62a>
 8017508:	07e2      	lsls	r2, r4, #31
 801750a:	d505      	bpl.n	8017518 <_dtoa_r+0x4d8>
 801750c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017510:	f7e8 ffec 	bl	80004ec <__aeabi_dmul>
 8017514:	2301      	movs	r3, #1
 8017516:	3601      	adds	r6, #1
 8017518:	1064      	asrs	r4, r4, #1
 801751a:	3508      	adds	r5, #8
 801751c:	e762      	b.n	80173e4 <_dtoa_r+0x3a4>
 801751e:	2602      	movs	r6, #2
 8017520:	e765      	b.n	80173ee <_dtoa_r+0x3ae>
 8017522:	46b8      	mov	r8, r7
 8017524:	9c08      	ldr	r4, [sp, #32]
 8017526:	e784      	b.n	8017432 <_dtoa_r+0x3f2>
 8017528:	4b27      	ldr	r3, [pc, #156]	@ (80175c8 <_dtoa_r+0x588>)
 801752a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801752c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017530:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017534:	4454      	add	r4, sl
 8017536:	2900      	cmp	r1, #0
 8017538:	d054      	beq.n	80175e4 <_dtoa_r+0x5a4>
 801753a:	2000      	movs	r0, #0
 801753c:	4928      	ldr	r1, [pc, #160]	@ (80175e0 <_dtoa_r+0x5a0>)
 801753e:	f7e9 f8ff 	bl	8000740 <__aeabi_ddiv>
 8017542:	4633      	mov	r3, r6
 8017544:	462a      	mov	r2, r5
 8017546:	f7e8 fe19 	bl	800017c <__aeabi_dsub>
 801754a:	4656      	mov	r6, sl
 801754c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017554:	f7e9 fa7a 	bl	8000a4c <__aeabi_d2iz>
 8017558:	4605      	mov	r5, r0
 801755a:	f7e8 ff5d 	bl	8000418 <__aeabi_i2d>
 801755e:	4602      	mov	r2, r0
 8017560:	460b      	mov	r3, r1
 8017562:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017566:	f7e8 fe09 	bl	800017c <__aeabi_dsub>
 801756a:	4602      	mov	r2, r0
 801756c:	460b      	mov	r3, r1
 801756e:	3530      	adds	r5, #48	@ 0x30
 8017570:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017574:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017578:	f806 5b01 	strb.w	r5, [r6], #1
 801757c:	f7e9 fa28 	bl	80009d0 <__aeabi_dcmplt>
 8017580:	2800      	cmp	r0, #0
 8017582:	d172      	bne.n	801766a <_dtoa_r+0x62a>
 8017584:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017588:	2000      	movs	r0, #0
 801758a:	4911      	ldr	r1, [pc, #68]	@ (80175d0 <_dtoa_r+0x590>)
 801758c:	f7e8 fdf6 	bl	800017c <__aeabi_dsub>
 8017590:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017594:	f7e9 fa1c 	bl	80009d0 <__aeabi_dcmplt>
 8017598:	2800      	cmp	r0, #0
 801759a:	f040 80b4 	bne.w	8017706 <_dtoa_r+0x6c6>
 801759e:	42a6      	cmp	r6, r4
 80175a0:	f43f af70 	beq.w	8017484 <_dtoa_r+0x444>
 80175a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80175a8:	2200      	movs	r2, #0
 80175aa:	4b0a      	ldr	r3, [pc, #40]	@ (80175d4 <_dtoa_r+0x594>)
 80175ac:	f7e8 ff9e 	bl	80004ec <__aeabi_dmul>
 80175b0:	2200      	movs	r2, #0
 80175b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80175b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80175ba:	4b06      	ldr	r3, [pc, #24]	@ (80175d4 <_dtoa_r+0x594>)
 80175bc:	f7e8 ff96 	bl	80004ec <__aeabi_dmul>
 80175c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80175c4:	e7c4      	b.n	8017550 <_dtoa_r+0x510>
 80175c6:	bf00      	nop
 80175c8:	0801b0e0 	.word	0x0801b0e0
 80175cc:	0801b0b8 	.word	0x0801b0b8
 80175d0:	3ff00000 	.word	0x3ff00000
 80175d4:	40240000 	.word	0x40240000
 80175d8:	401c0000 	.word	0x401c0000
 80175dc:	40140000 	.word	0x40140000
 80175e0:	3fe00000 	.word	0x3fe00000
 80175e4:	4631      	mov	r1, r6
 80175e6:	4628      	mov	r0, r5
 80175e8:	f7e8 ff80 	bl	80004ec <__aeabi_dmul>
 80175ec:	4656      	mov	r6, sl
 80175ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80175f2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80175f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80175f8:	f7e9 fa28 	bl	8000a4c <__aeabi_d2iz>
 80175fc:	4605      	mov	r5, r0
 80175fe:	f7e8 ff0b 	bl	8000418 <__aeabi_i2d>
 8017602:	4602      	mov	r2, r0
 8017604:	460b      	mov	r3, r1
 8017606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801760a:	f7e8 fdb7 	bl	800017c <__aeabi_dsub>
 801760e:	4602      	mov	r2, r0
 8017610:	460b      	mov	r3, r1
 8017612:	3530      	adds	r5, #48	@ 0x30
 8017614:	f806 5b01 	strb.w	r5, [r6], #1
 8017618:	42a6      	cmp	r6, r4
 801761a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801761e:	f04f 0200 	mov.w	r2, #0
 8017622:	d124      	bne.n	801766e <_dtoa_r+0x62e>
 8017624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017628:	4bae      	ldr	r3, [pc, #696]	@ (80178e4 <_dtoa_r+0x8a4>)
 801762a:	f7e8 fda9 	bl	8000180 <__adddf3>
 801762e:	4602      	mov	r2, r0
 8017630:	460b      	mov	r3, r1
 8017632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017636:	f7e9 f9e9 	bl	8000a0c <__aeabi_dcmpgt>
 801763a:	2800      	cmp	r0, #0
 801763c:	d163      	bne.n	8017706 <_dtoa_r+0x6c6>
 801763e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017642:	2000      	movs	r0, #0
 8017644:	49a7      	ldr	r1, [pc, #668]	@ (80178e4 <_dtoa_r+0x8a4>)
 8017646:	f7e8 fd99 	bl	800017c <__aeabi_dsub>
 801764a:	4602      	mov	r2, r0
 801764c:	460b      	mov	r3, r1
 801764e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017652:	f7e9 f9bd 	bl	80009d0 <__aeabi_dcmplt>
 8017656:	2800      	cmp	r0, #0
 8017658:	f43f af14 	beq.w	8017484 <_dtoa_r+0x444>
 801765c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801765e:	1e73      	subs	r3, r6, #1
 8017660:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017662:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017666:	2b30      	cmp	r3, #48	@ 0x30
 8017668:	d0f8      	beq.n	801765c <_dtoa_r+0x61c>
 801766a:	4647      	mov	r7, r8
 801766c:	e03b      	b.n	80176e6 <_dtoa_r+0x6a6>
 801766e:	4b9e      	ldr	r3, [pc, #632]	@ (80178e8 <_dtoa_r+0x8a8>)
 8017670:	f7e8 ff3c 	bl	80004ec <__aeabi_dmul>
 8017674:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017678:	e7bc      	b.n	80175f4 <_dtoa_r+0x5b4>
 801767a:	4656      	mov	r6, sl
 801767c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8017680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017684:	4620      	mov	r0, r4
 8017686:	4629      	mov	r1, r5
 8017688:	f7e9 f85a 	bl	8000740 <__aeabi_ddiv>
 801768c:	f7e9 f9de 	bl	8000a4c <__aeabi_d2iz>
 8017690:	4680      	mov	r8, r0
 8017692:	f7e8 fec1 	bl	8000418 <__aeabi_i2d>
 8017696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801769a:	f7e8 ff27 	bl	80004ec <__aeabi_dmul>
 801769e:	4602      	mov	r2, r0
 80176a0:	460b      	mov	r3, r1
 80176a2:	4620      	mov	r0, r4
 80176a4:	4629      	mov	r1, r5
 80176a6:	f7e8 fd69 	bl	800017c <__aeabi_dsub>
 80176aa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80176ae:	9d08      	ldr	r5, [sp, #32]
 80176b0:	f806 4b01 	strb.w	r4, [r6], #1
 80176b4:	eba6 040a 	sub.w	r4, r6, sl
 80176b8:	42a5      	cmp	r5, r4
 80176ba:	4602      	mov	r2, r0
 80176bc:	460b      	mov	r3, r1
 80176be:	d133      	bne.n	8017728 <_dtoa_r+0x6e8>
 80176c0:	f7e8 fd5e 	bl	8000180 <__adddf3>
 80176c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80176c8:	4604      	mov	r4, r0
 80176ca:	460d      	mov	r5, r1
 80176cc:	f7e9 f99e 	bl	8000a0c <__aeabi_dcmpgt>
 80176d0:	b9c0      	cbnz	r0, 8017704 <_dtoa_r+0x6c4>
 80176d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80176d6:	4620      	mov	r0, r4
 80176d8:	4629      	mov	r1, r5
 80176da:	f7e9 f96f 	bl	80009bc <__aeabi_dcmpeq>
 80176de:	b110      	cbz	r0, 80176e6 <_dtoa_r+0x6a6>
 80176e0:	f018 0f01 	tst.w	r8, #1
 80176e4:	d10e      	bne.n	8017704 <_dtoa_r+0x6c4>
 80176e6:	4648      	mov	r0, r9
 80176e8:	9903      	ldr	r1, [sp, #12]
 80176ea:	f000 fe51 	bl	8018390 <_Bfree>
 80176ee:	2300      	movs	r3, #0
 80176f0:	7033      	strb	r3, [r6, #0]
 80176f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80176f4:	3701      	adds	r7, #1
 80176f6:	601f      	str	r7, [r3, #0]
 80176f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	f000 824b 	beq.w	8017b96 <_dtoa_r+0xb56>
 8017700:	601e      	str	r6, [r3, #0]
 8017702:	e248      	b.n	8017b96 <_dtoa_r+0xb56>
 8017704:	46b8      	mov	r8, r7
 8017706:	4633      	mov	r3, r6
 8017708:	461e      	mov	r6, r3
 801770a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801770e:	2a39      	cmp	r2, #57	@ 0x39
 8017710:	d106      	bne.n	8017720 <_dtoa_r+0x6e0>
 8017712:	459a      	cmp	sl, r3
 8017714:	d1f8      	bne.n	8017708 <_dtoa_r+0x6c8>
 8017716:	2230      	movs	r2, #48	@ 0x30
 8017718:	f108 0801 	add.w	r8, r8, #1
 801771c:	f88a 2000 	strb.w	r2, [sl]
 8017720:	781a      	ldrb	r2, [r3, #0]
 8017722:	3201      	adds	r2, #1
 8017724:	701a      	strb	r2, [r3, #0]
 8017726:	e7a0      	b.n	801766a <_dtoa_r+0x62a>
 8017728:	2200      	movs	r2, #0
 801772a:	4b6f      	ldr	r3, [pc, #444]	@ (80178e8 <_dtoa_r+0x8a8>)
 801772c:	f7e8 fede 	bl	80004ec <__aeabi_dmul>
 8017730:	2200      	movs	r2, #0
 8017732:	2300      	movs	r3, #0
 8017734:	4604      	mov	r4, r0
 8017736:	460d      	mov	r5, r1
 8017738:	f7e9 f940 	bl	80009bc <__aeabi_dcmpeq>
 801773c:	2800      	cmp	r0, #0
 801773e:	d09f      	beq.n	8017680 <_dtoa_r+0x640>
 8017740:	e7d1      	b.n	80176e6 <_dtoa_r+0x6a6>
 8017742:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017744:	2a00      	cmp	r2, #0
 8017746:	f000 80ea 	beq.w	801791e <_dtoa_r+0x8de>
 801774a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801774c:	2a01      	cmp	r2, #1
 801774e:	f300 80cd 	bgt.w	80178ec <_dtoa_r+0x8ac>
 8017752:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017754:	2a00      	cmp	r2, #0
 8017756:	f000 80c1 	beq.w	80178dc <_dtoa_r+0x89c>
 801775a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801775e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017760:	9e04      	ldr	r6, [sp, #16]
 8017762:	9a04      	ldr	r2, [sp, #16]
 8017764:	2101      	movs	r1, #1
 8017766:	441a      	add	r2, r3
 8017768:	9204      	str	r2, [sp, #16]
 801776a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801776c:	4648      	mov	r0, r9
 801776e:	441a      	add	r2, r3
 8017770:	9209      	str	r2, [sp, #36]	@ 0x24
 8017772:	f000 ff0b 	bl	801858c <__i2b>
 8017776:	4605      	mov	r5, r0
 8017778:	b166      	cbz	r6, 8017794 <_dtoa_r+0x754>
 801777a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801777c:	2b00      	cmp	r3, #0
 801777e:	dd09      	ble.n	8017794 <_dtoa_r+0x754>
 8017780:	42b3      	cmp	r3, r6
 8017782:	bfa8      	it	ge
 8017784:	4633      	movge	r3, r6
 8017786:	9a04      	ldr	r2, [sp, #16]
 8017788:	1af6      	subs	r6, r6, r3
 801778a:	1ad2      	subs	r2, r2, r3
 801778c:	9204      	str	r2, [sp, #16]
 801778e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017790:	1ad3      	subs	r3, r2, r3
 8017792:	9309      	str	r3, [sp, #36]	@ 0x24
 8017794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017796:	b30b      	cbz	r3, 80177dc <_dtoa_r+0x79c>
 8017798:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801779a:	2b00      	cmp	r3, #0
 801779c:	f000 80c6 	beq.w	801792c <_dtoa_r+0x8ec>
 80177a0:	2c00      	cmp	r4, #0
 80177a2:	f000 80c0 	beq.w	8017926 <_dtoa_r+0x8e6>
 80177a6:	4629      	mov	r1, r5
 80177a8:	4622      	mov	r2, r4
 80177aa:	4648      	mov	r0, r9
 80177ac:	f000 ffa6 	bl	80186fc <__pow5mult>
 80177b0:	9a03      	ldr	r2, [sp, #12]
 80177b2:	4601      	mov	r1, r0
 80177b4:	4605      	mov	r5, r0
 80177b6:	4648      	mov	r0, r9
 80177b8:	f000 fefe 	bl	80185b8 <__multiply>
 80177bc:	9903      	ldr	r1, [sp, #12]
 80177be:	4680      	mov	r8, r0
 80177c0:	4648      	mov	r0, r9
 80177c2:	f000 fde5 	bl	8018390 <_Bfree>
 80177c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80177c8:	1b1b      	subs	r3, r3, r4
 80177ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80177cc:	f000 80b1 	beq.w	8017932 <_dtoa_r+0x8f2>
 80177d0:	4641      	mov	r1, r8
 80177d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80177d4:	4648      	mov	r0, r9
 80177d6:	f000 ff91 	bl	80186fc <__pow5mult>
 80177da:	9003      	str	r0, [sp, #12]
 80177dc:	2101      	movs	r1, #1
 80177de:	4648      	mov	r0, r9
 80177e0:	f000 fed4 	bl	801858c <__i2b>
 80177e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177e6:	4604      	mov	r4, r0
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	f000 81d8 	beq.w	8017b9e <_dtoa_r+0xb5e>
 80177ee:	461a      	mov	r2, r3
 80177f0:	4601      	mov	r1, r0
 80177f2:	4648      	mov	r0, r9
 80177f4:	f000 ff82 	bl	80186fc <__pow5mult>
 80177f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80177fa:	4604      	mov	r4, r0
 80177fc:	2b01      	cmp	r3, #1
 80177fe:	f300 809f 	bgt.w	8017940 <_dtoa_r+0x900>
 8017802:	9b06      	ldr	r3, [sp, #24]
 8017804:	2b00      	cmp	r3, #0
 8017806:	f040 8097 	bne.w	8017938 <_dtoa_r+0x8f8>
 801780a:	9b07      	ldr	r3, [sp, #28]
 801780c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017810:	2b00      	cmp	r3, #0
 8017812:	f040 8093 	bne.w	801793c <_dtoa_r+0x8fc>
 8017816:	9b07      	ldr	r3, [sp, #28]
 8017818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801781c:	0d1b      	lsrs	r3, r3, #20
 801781e:	051b      	lsls	r3, r3, #20
 8017820:	b133      	cbz	r3, 8017830 <_dtoa_r+0x7f0>
 8017822:	9b04      	ldr	r3, [sp, #16]
 8017824:	3301      	adds	r3, #1
 8017826:	9304      	str	r3, [sp, #16]
 8017828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801782a:	3301      	adds	r3, #1
 801782c:	9309      	str	r3, [sp, #36]	@ 0x24
 801782e:	2301      	movs	r3, #1
 8017830:	930a      	str	r3, [sp, #40]	@ 0x28
 8017832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017834:	2b00      	cmp	r3, #0
 8017836:	f000 81b8 	beq.w	8017baa <_dtoa_r+0xb6a>
 801783a:	6923      	ldr	r3, [r4, #16]
 801783c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017840:	6918      	ldr	r0, [r3, #16]
 8017842:	f000 fe57 	bl	80184f4 <__hi0bits>
 8017846:	f1c0 0020 	rsb	r0, r0, #32
 801784a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801784c:	4418      	add	r0, r3
 801784e:	f010 001f 	ands.w	r0, r0, #31
 8017852:	f000 8082 	beq.w	801795a <_dtoa_r+0x91a>
 8017856:	f1c0 0320 	rsb	r3, r0, #32
 801785a:	2b04      	cmp	r3, #4
 801785c:	dd73      	ble.n	8017946 <_dtoa_r+0x906>
 801785e:	9b04      	ldr	r3, [sp, #16]
 8017860:	f1c0 001c 	rsb	r0, r0, #28
 8017864:	4403      	add	r3, r0
 8017866:	9304      	str	r3, [sp, #16]
 8017868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801786a:	4406      	add	r6, r0
 801786c:	4403      	add	r3, r0
 801786e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017870:	9b04      	ldr	r3, [sp, #16]
 8017872:	2b00      	cmp	r3, #0
 8017874:	dd05      	ble.n	8017882 <_dtoa_r+0x842>
 8017876:	461a      	mov	r2, r3
 8017878:	4648      	mov	r0, r9
 801787a:	9903      	ldr	r1, [sp, #12]
 801787c:	f000 ff98 	bl	80187b0 <__lshift>
 8017880:	9003      	str	r0, [sp, #12]
 8017882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017884:	2b00      	cmp	r3, #0
 8017886:	dd05      	ble.n	8017894 <_dtoa_r+0x854>
 8017888:	4621      	mov	r1, r4
 801788a:	461a      	mov	r2, r3
 801788c:	4648      	mov	r0, r9
 801788e:	f000 ff8f 	bl	80187b0 <__lshift>
 8017892:	4604      	mov	r4, r0
 8017894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017896:	2b00      	cmp	r3, #0
 8017898:	d061      	beq.n	801795e <_dtoa_r+0x91e>
 801789a:	4621      	mov	r1, r4
 801789c:	9803      	ldr	r0, [sp, #12]
 801789e:	f000 fff3 	bl	8018888 <__mcmp>
 80178a2:	2800      	cmp	r0, #0
 80178a4:	da5b      	bge.n	801795e <_dtoa_r+0x91e>
 80178a6:	2300      	movs	r3, #0
 80178a8:	220a      	movs	r2, #10
 80178aa:	4648      	mov	r0, r9
 80178ac:	9903      	ldr	r1, [sp, #12]
 80178ae:	f000 fd91 	bl	80183d4 <__multadd>
 80178b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80178b4:	f107 38ff 	add.w	r8, r7, #4294967295
 80178b8:	9003      	str	r0, [sp, #12]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	f000 8177 	beq.w	8017bae <_dtoa_r+0xb6e>
 80178c0:	4629      	mov	r1, r5
 80178c2:	2300      	movs	r3, #0
 80178c4:	220a      	movs	r2, #10
 80178c6:	4648      	mov	r0, r9
 80178c8:	f000 fd84 	bl	80183d4 <__multadd>
 80178cc:	f1bb 0f00 	cmp.w	fp, #0
 80178d0:	4605      	mov	r5, r0
 80178d2:	dc6f      	bgt.n	80179b4 <_dtoa_r+0x974>
 80178d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80178d6:	2b02      	cmp	r3, #2
 80178d8:	dc49      	bgt.n	801796e <_dtoa_r+0x92e>
 80178da:	e06b      	b.n	80179b4 <_dtoa_r+0x974>
 80178dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80178de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80178e2:	e73c      	b.n	801775e <_dtoa_r+0x71e>
 80178e4:	3fe00000 	.word	0x3fe00000
 80178e8:	40240000 	.word	0x40240000
 80178ec:	9b08      	ldr	r3, [sp, #32]
 80178ee:	1e5c      	subs	r4, r3, #1
 80178f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80178f2:	42a3      	cmp	r3, r4
 80178f4:	db09      	blt.n	801790a <_dtoa_r+0x8ca>
 80178f6:	1b1c      	subs	r4, r3, r4
 80178f8:	9b08      	ldr	r3, [sp, #32]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	f6bf af30 	bge.w	8017760 <_dtoa_r+0x720>
 8017900:	9b04      	ldr	r3, [sp, #16]
 8017902:	9a08      	ldr	r2, [sp, #32]
 8017904:	1a9e      	subs	r6, r3, r2
 8017906:	2300      	movs	r3, #0
 8017908:	e72b      	b.n	8017762 <_dtoa_r+0x722>
 801790a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801790c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801790e:	1ae3      	subs	r3, r4, r3
 8017910:	441a      	add	r2, r3
 8017912:	940a      	str	r4, [sp, #40]	@ 0x28
 8017914:	9e04      	ldr	r6, [sp, #16]
 8017916:	2400      	movs	r4, #0
 8017918:	9b08      	ldr	r3, [sp, #32]
 801791a:	920e      	str	r2, [sp, #56]	@ 0x38
 801791c:	e721      	b.n	8017762 <_dtoa_r+0x722>
 801791e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017920:	9e04      	ldr	r6, [sp, #16]
 8017922:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8017924:	e728      	b.n	8017778 <_dtoa_r+0x738>
 8017926:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801792a:	e751      	b.n	80177d0 <_dtoa_r+0x790>
 801792c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801792e:	9903      	ldr	r1, [sp, #12]
 8017930:	e750      	b.n	80177d4 <_dtoa_r+0x794>
 8017932:	f8cd 800c 	str.w	r8, [sp, #12]
 8017936:	e751      	b.n	80177dc <_dtoa_r+0x79c>
 8017938:	2300      	movs	r3, #0
 801793a:	e779      	b.n	8017830 <_dtoa_r+0x7f0>
 801793c:	9b06      	ldr	r3, [sp, #24]
 801793e:	e777      	b.n	8017830 <_dtoa_r+0x7f0>
 8017940:	2300      	movs	r3, #0
 8017942:	930a      	str	r3, [sp, #40]	@ 0x28
 8017944:	e779      	b.n	801783a <_dtoa_r+0x7fa>
 8017946:	d093      	beq.n	8017870 <_dtoa_r+0x830>
 8017948:	9a04      	ldr	r2, [sp, #16]
 801794a:	331c      	adds	r3, #28
 801794c:	441a      	add	r2, r3
 801794e:	9204      	str	r2, [sp, #16]
 8017950:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017952:	441e      	add	r6, r3
 8017954:	441a      	add	r2, r3
 8017956:	9209      	str	r2, [sp, #36]	@ 0x24
 8017958:	e78a      	b.n	8017870 <_dtoa_r+0x830>
 801795a:	4603      	mov	r3, r0
 801795c:	e7f4      	b.n	8017948 <_dtoa_r+0x908>
 801795e:	9b08      	ldr	r3, [sp, #32]
 8017960:	46b8      	mov	r8, r7
 8017962:	2b00      	cmp	r3, #0
 8017964:	dc20      	bgt.n	80179a8 <_dtoa_r+0x968>
 8017966:	469b      	mov	fp, r3
 8017968:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801796a:	2b02      	cmp	r3, #2
 801796c:	dd1e      	ble.n	80179ac <_dtoa_r+0x96c>
 801796e:	f1bb 0f00 	cmp.w	fp, #0
 8017972:	f47f adb1 	bne.w	80174d8 <_dtoa_r+0x498>
 8017976:	4621      	mov	r1, r4
 8017978:	465b      	mov	r3, fp
 801797a:	2205      	movs	r2, #5
 801797c:	4648      	mov	r0, r9
 801797e:	f000 fd29 	bl	80183d4 <__multadd>
 8017982:	4601      	mov	r1, r0
 8017984:	4604      	mov	r4, r0
 8017986:	9803      	ldr	r0, [sp, #12]
 8017988:	f000 ff7e 	bl	8018888 <__mcmp>
 801798c:	2800      	cmp	r0, #0
 801798e:	f77f ada3 	ble.w	80174d8 <_dtoa_r+0x498>
 8017992:	4656      	mov	r6, sl
 8017994:	2331      	movs	r3, #49	@ 0x31
 8017996:	f108 0801 	add.w	r8, r8, #1
 801799a:	f806 3b01 	strb.w	r3, [r6], #1
 801799e:	e59f      	b.n	80174e0 <_dtoa_r+0x4a0>
 80179a0:	46b8      	mov	r8, r7
 80179a2:	9c08      	ldr	r4, [sp, #32]
 80179a4:	4625      	mov	r5, r4
 80179a6:	e7f4      	b.n	8017992 <_dtoa_r+0x952>
 80179a8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80179ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	f000 8101 	beq.w	8017bb6 <_dtoa_r+0xb76>
 80179b4:	2e00      	cmp	r6, #0
 80179b6:	dd05      	ble.n	80179c4 <_dtoa_r+0x984>
 80179b8:	4629      	mov	r1, r5
 80179ba:	4632      	mov	r2, r6
 80179bc:	4648      	mov	r0, r9
 80179be:	f000 fef7 	bl	80187b0 <__lshift>
 80179c2:	4605      	mov	r5, r0
 80179c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d05c      	beq.n	8017a84 <_dtoa_r+0xa44>
 80179ca:	4648      	mov	r0, r9
 80179cc:	6869      	ldr	r1, [r5, #4]
 80179ce:	f000 fc9f 	bl	8018310 <_Balloc>
 80179d2:	4606      	mov	r6, r0
 80179d4:	b928      	cbnz	r0, 80179e2 <_dtoa_r+0x9a2>
 80179d6:	4602      	mov	r2, r0
 80179d8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80179dc:	4b80      	ldr	r3, [pc, #512]	@ (8017be0 <_dtoa_r+0xba0>)
 80179de:	f7ff bb43 	b.w	8017068 <_dtoa_r+0x28>
 80179e2:	692a      	ldr	r2, [r5, #16]
 80179e4:	f105 010c 	add.w	r1, r5, #12
 80179e8:	3202      	adds	r2, #2
 80179ea:	0092      	lsls	r2, r2, #2
 80179ec:	300c      	adds	r0, #12
 80179ee:	f7ff fa7e 	bl	8016eee <memcpy>
 80179f2:	2201      	movs	r2, #1
 80179f4:	4631      	mov	r1, r6
 80179f6:	4648      	mov	r0, r9
 80179f8:	f000 feda 	bl	80187b0 <__lshift>
 80179fc:	462f      	mov	r7, r5
 80179fe:	4605      	mov	r5, r0
 8017a00:	f10a 0301 	add.w	r3, sl, #1
 8017a04:	9304      	str	r3, [sp, #16]
 8017a06:	eb0a 030b 	add.w	r3, sl, fp
 8017a0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8017a0c:	9b06      	ldr	r3, [sp, #24]
 8017a0e:	f003 0301 	and.w	r3, r3, #1
 8017a12:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a14:	9b04      	ldr	r3, [sp, #16]
 8017a16:	4621      	mov	r1, r4
 8017a18:	9803      	ldr	r0, [sp, #12]
 8017a1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8017a1e:	f7ff fa86 	bl	8016f2e <quorem>
 8017a22:	4603      	mov	r3, r0
 8017a24:	4639      	mov	r1, r7
 8017a26:	3330      	adds	r3, #48	@ 0x30
 8017a28:	9006      	str	r0, [sp, #24]
 8017a2a:	9803      	ldr	r0, [sp, #12]
 8017a2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017a2e:	f000 ff2b 	bl	8018888 <__mcmp>
 8017a32:	462a      	mov	r2, r5
 8017a34:	9008      	str	r0, [sp, #32]
 8017a36:	4621      	mov	r1, r4
 8017a38:	4648      	mov	r0, r9
 8017a3a:	f000 ff41 	bl	80188c0 <__mdiff>
 8017a3e:	68c2      	ldr	r2, [r0, #12]
 8017a40:	4606      	mov	r6, r0
 8017a42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017a44:	bb02      	cbnz	r2, 8017a88 <_dtoa_r+0xa48>
 8017a46:	4601      	mov	r1, r0
 8017a48:	9803      	ldr	r0, [sp, #12]
 8017a4a:	f000 ff1d 	bl	8018888 <__mcmp>
 8017a4e:	4602      	mov	r2, r0
 8017a50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017a52:	4631      	mov	r1, r6
 8017a54:	4648      	mov	r0, r9
 8017a56:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8017a5a:	f000 fc99 	bl	8018390 <_Bfree>
 8017a5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8017a60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017a62:	9e04      	ldr	r6, [sp, #16]
 8017a64:	ea42 0103 	orr.w	r1, r2, r3
 8017a68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a6a:	4319      	orrs	r1, r3
 8017a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017a6e:	d10d      	bne.n	8017a8c <_dtoa_r+0xa4c>
 8017a70:	2b39      	cmp	r3, #57	@ 0x39
 8017a72:	d027      	beq.n	8017ac4 <_dtoa_r+0xa84>
 8017a74:	9a08      	ldr	r2, [sp, #32]
 8017a76:	2a00      	cmp	r2, #0
 8017a78:	dd01      	ble.n	8017a7e <_dtoa_r+0xa3e>
 8017a7a:	9b06      	ldr	r3, [sp, #24]
 8017a7c:	3331      	adds	r3, #49	@ 0x31
 8017a7e:	f88b 3000 	strb.w	r3, [fp]
 8017a82:	e52e      	b.n	80174e2 <_dtoa_r+0x4a2>
 8017a84:	4628      	mov	r0, r5
 8017a86:	e7b9      	b.n	80179fc <_dtoa_r+0x9bc>
 8017a88:	2201      	movs	r2, #1
 8017a8a:	e7e2      	b.n	8017a52 <_dtoa_r+0xa12>
 8017a8c:	9908      	ldr	r1, [sp, #32]
 8017a8e:	2900      	cmp	r1, #0
 8017a90:	db04      	blt.n	8017a9c <_dtoa_r+0xa5c>
 8017a92:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8017a94:	4301      	orrs	r1, r0
 8017a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017a98:	4301      	orrs	r1, r0
 8017a9a:	d120      	bne.n	8017ade <_dtoa_r+0xa9e>
 8017a9c:	2a00      	cmp	r2, #0
 8017a9e:	ddee      	ble.n	8017a7e <_dtoa_r+0xa3e>
 8017aa0:	2201      	movs	r2, #1
 8017aa2:	9903      	ldr	r1, [sp, #12]
 8017aa4:	4648      	mov	r0, r9
 8017aa6:	9304      	str	r3, [sp, #16]
 8017aa8:	f000 fe82 	bl	80187b0 <__lshift>
 8017aac:	4621      	mov	r1, r4
 8017aae:	9003      	str	r0, [sp, #12]
 8017ab0:	f000 feea 	bl	8018888 <__mcmp>
 8017ab4:	2800      	cmp	r0, #0
 8017ab6:	9b04      	ldr	r3, [sp, #16]
 8017ab8:	dc02      	bgt.n	8017ac0 <_dtoa_r+0xa80>
 8017aba:	d1e0      	bne.n	8017a7e <_dtoa_r+0xa3e>
 8017abc:	07da      	lsls	r2, r3, #31
 8017abe:	d5de      	bpl.n	8017a7e <_dtoa_r+0xa3e>
 8017ac0:	2b39      	cmp	r3, #57	@ 0x39
 8017ac2:	d1da      	bne.n	8017a7a <_dtoa_r+0xa3a>
 8017ac4:	2339      	movs	r3, #57	@ 0x39
 8017ac6:	f88b 3000 	strb.w	r3, [fp]
 8017aca:	4633      	mov	r3, r6
 8017acc:	461e      	mov	r6, r3
 8017ace:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017ad2:	3b01      	subs	r3, #1
 8017ad4:	2a39      	cmp	r2, #57	@ 0x39
 8017ad6:	d04e      	beq.n	8017b76 <_dtoa_r+0xb36>
 8017ad8:	3201      	adds	r2, #1
 8017ada:	701a      	strb	r2, [r3, #0]
 8017adc:	e501      	b.n	80174e2 <_dtoa_r+0x4a2>
 8017ade:	2a00      	cmp	r2, #0
 8017ae0:	dd03      	ble.n	8017aea <_dtoa_r+0xaaa>
 8017ae2:	2b39      	cmp	r3, #57	@ 0x39
 8017ae4:	d0ee      	beq.n	8017ac4 <_dtoa_r+0xa84>
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	e7c9      	b.n	8017a7e <_dtoa_r+0xa3e>
 8017aea:	9a04      	ldr	r2, [sp, #16]
 8017aec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017aee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017af2:	428a      	cmp	r2, r1
 8017af4:	d028      	beq.n	8017b48 <_dtoa_r+0xb08>
 8017af6:	2300      	movs	r3, #0
 8017af8:	220a      	movs	r2, #10
 8017afa:	9903      	ldr	r1, [sp, #12]
 8017afc:	4648      	mov	r0, r9
 8017afe:	f000 fc69 	bl	80183d4 <__multadd>
 8017b02:	42af      	cmp	r7, r5
 8017b04:	9003      	str	r0, [sp, #12]
 8017b06:	f04f 0300 	mov.w	r3, #0
 8017b0a:	f04f 020a 	mov.w	r2, #10
 8017b0e:	4639      	mov	r1, r7
 8017b10:	4648      	mov	r0, r9
 8017b12:	d107      	bne.n	8017b24 <_dtoa_r+0xae4>
 8017b14:	f000 fc5e 	bl	80183d4 <__multadd>
 8017b18:	4607      	mov	r7, r0
 8017b1a:	4605      	mov	r5, r0
 8017b1c:	9b04      	ldr	r3, [sp, #16]
 8017b1e:	3301      	adds	r3, #1
 8017b20:	9304      	str	r3, [sp, #16]
 8017b22:	e777      	b.n	8017a14 <_dtoa_r+0x9d4>
 8017b24:	f000 fc56 	bl	80183d4 <__multadd>
 8017b28:	4629      	mov	r1, r5
 8017b2a:	4607      	mov	r7, r0
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	220a      	movs	r2, #10
 8017b30:	4648      	mov	r0, r9
 8017b32:	f000 fc4f 	bl	80183d4 <__multadd>
 8017b36:	4605      	mov	r5, r0
 8017b38:	e7f0      	b.n	8017b1c <_dtoa_r+0xadc>
 8017b3a:	f1bb 0f00 	cmp.w	fp, #0
 8017b3e:	bfcc      	ite	gt
 8017b40:	465e      	movgt	r6, fp
 8017b42:	2601      	movle	r6, #1
 8017b44:	2700      	movs	r7, #0
 8017b46:	4456      	add	r6, sl
 8017b48:	2201      	movs	r2, #1
 8017b4a:	9903      	ldr	r1, [sp, #12]
 8017b4c:	4648      	mov	r0, r9
 8017b4e:	9304      	str	r3, [sp, #16]
 8017b50:	f000 fe2e 	bl	80187b0 <__lshift>
 8017b54:	4621      	mov	r1, r4
 8017b56:	9003      	str	r0, [sp, #12]
 8017b58:	f000 fe96 	bl	8018888 <__mcmp>
 8017b5c:	2800      	cmp	r0, #0
 8017b5e:	dcb4      	bgt.n	8017aca <_dtoa_r+0xa8a>
 8017b60:	d102      	bne.n	8017b68 <_dtoa_r+0xb28>
 8017b62:	9b04      	ldr	r3, [sp, #16]
 8017b64:	07db      	lsls	r3, r3, #31
 8017b66:	d4b0      	bmi.n	8017aca <_dtoa_r+0xa8a>
 8017b68:	4633      	mov	r3, r6
 8017b6a:	461e      	mov	r6, r3
 8017b6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017b70:	2a30      	cmp	r2, #48	@ 0x30
 8017b72:	d0fa      	beq.n	8017b6a <_dtoa_r+0xb2a>
 8017b74:	e4b5      	b.n	80174e2 <_dtoa_r+0x4a2>
 8017b76:	459a      	cmp	sl, r3
 8017b78:	d1a8      	bne.n	8017acc <_dtoa_r+0xa8c>
 8017b7a:	2331      	movs	r3, #49	@ 0x31
 8017b7c:	f108 0801 	add.w	r8, r8, #1
 8017b80:	f88a 3000 	strb.w	r3, [sl]
 8017b84:	e4ad      	b.n	80174e2 <_dtoa_r+0x4a2>
 8017b86:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8017b88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8017be4 <_dtoa_r+0xba4>
 8017b8c:	b11b      	cbz	r3, 8017b96 <_dtoa_r+0xb56>
 8017b8e:	f10a 0308 	add.w	r3, sl, #8
 8017b92:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8017b94:	6013      	str	r3, [r2, #0]
 8017b96:	4650      	mov	r0, sl
 8017b98:	b017      	add	sp, #92	@ 0x5c
 8017b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8017ba0:	2b01      	cmp	r3, #1
 8017ba2:	f77f ae2e 	ble.w	8017802 <_dtoa_r+0x7c2>
 8017ba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ba8:	930a      	str	r3, [sp, #40]	@ 0x28
 8017baa:	2001      	movs	r0, #1
 8017bac:	e64d      	b.n	801784a <_dtoa_r+0x80a>
 8017bae:	f1bb 0f00 	cmp.w	fp, #0
 8017bb2:	f77f aed9 	ble.w	8017968 <_dtoa_r+0x928>
 8017bb6:	4656      	mov	r6, sl
 8017bb8:	4621      	mov	r1, r4
 8017bba:	9803      	ldr	r0, [sp, #12]
 8017bbc:	f7ff f9b7 	bl	8016f2e <quorem>
 8017bc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8017bc4:	f806 3b01 	strb.w	r3, [r6], #1
 8017bc8:	eba6 020a 	sub.w	r2, r6, sl
 8017bcc:	4593      	cmp	fp, r2
 8017bce:	ddb4      	ble.n	8017b3a <_dtoa_r+0xafa>
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	220a      	movs	r2, #10
 8017bd4:	4648      	mov	r0, r9
 8017bd6:	9903      	ldr	r1, [sp, #12]
 8017bd8:	f000 fbfc 	bl	80183d4 <__multadd>
 8017bdc:	9003      	str	r0, [sp, #12]
 8017bde:	e7eb      	b.n	8017bb8 <_dtoa_r+0xb78>
 8017be0:	0801ae60 	.word	0x0801ae60
 8017be4:	0801adfb 	.word	0x0801adfb

08017be8 <_free_r>:
 8017be8:	b538      	push	{r3, r4, r5, lr}
 8017bea:	4605      	mov	r5, r0
 8017bec:	2900      	cmp	r1, #0
 8017bee:	d040      	beq.n	8017c72 <_free_r+0x8a>
 8017bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bf4:	1f0c      	subs	r4, r1, #4
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	bfb8      	it	lt
 8017bfa:	18e4      	addlt	r4, r4, r3
 8017bfc:	f7fd f87a 	bl	8014cf4 <__malloc_lock>
 8017c00:	4a1c      	ldr	r2, [pc, #112]	@ (8017c74 <_free_r+0x8c>)
 8017c02:	6813      	ldr	r3, [r2, #0]
 8017c04:	b933      	cbnz	r3, 8017c14 <_free_r+0x2c>
 8017c06:	6063      	str	r3, [r4, #4]
 8017c08:	6014      	str	r4, [r2, #0]
 8017c0a:	4628      	mov	r0, r5
 8017c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c10:	f7fd b876 	b.w	8014d00 <__malloc_unlock>
 8017c14:	42a3      	cmp	r3, r4
 8017c16:	d908      	bls.n	8017c2a <_free_r+0x42>
 8017c18:	6820      	ldr	r0, [r4, #0]
 8017c1a:	1821      	adds	r1, r4, r0
 8017c1c:	428b      	cmp	r3, r1
 8017c1e:	bf01      	itttt	eq
 8017c20:	6819      	ldreq	r1, [r3, #0]
 8017c22:	685b      	ldreq	r3, [r3, #4]
 8017c24:	1809      	addeq	r1, r1, r0
 8017c26:	6021      	streq	r1, [r4, #0]
 8017c28:	e7ed      	b.n	8017c06 <_free_r+0x1e>
 8017c2a:	461a      	mov	r2, r3
 8017c2c:	685b      	ldr	r3, [r3, #4]
 8017c2e:	b10b      	cbz	r3, 8017c34 <_free_r+0x4c>
 8017c30:	42a3      	cmp	r3, r4
 8017c32:	d9fa      	bls.n	8017c2a <_free_r+0x42>
 8017c34:	6811      	ldr	r1, [r2, #0]
 8017c36:	1850      	adds	r0, r2, r1
 8017c38:	42a0      	cmp	r0, r4
 8017c3a:	d10b      	bne.n	8017c54 <_free_r+0x6c>
 8017c3c:	6820      	ldr	r0, [r4, #0]
 8017c3e:	4401      	add	r1, r0
 8017c40:	1850      	adds	r0, r2, r1
 8017c42:	4283      	cmp	r3, r0
 8017c44:	6011      	str	r1, [r2, #0]
 8017c46:	d1e0      	bne.n	8017c0a <_free_r+0x22>
 8017c48:	6818      	ldr	r0, [r3, #0]
 8017c4a:	685b      	ldr	r3, [r3, #4]
 8017c4c:	4408      	add	r0, r1
 8017c4e:	6010      	str	r0, [r2, #0]
 8017c50:	6053      	str	r3, [r2, #4]
 8017c52:	e7da      	b.n	8017c0a <_free_r+0x22>
 8017c54:	d902      	bls.n	8017c5c <_free_r+0x74>
 8017c56:	230c      	movs	r3, #12
 8017c58:	602b      	str	r3, [r5, #0]
 8017c5a:	e7d6      	b.n	8017c0a <_free_r+0x22>
 8017c5c:	6820      	ldr	r0, [r4, #0]
 8017c5e:	1821      	adds	r1, r4, r0
 8017c60:	428b      	cmp	r3, r1
 8017c62:	bf01      	itttt	eq
 8017c64:	6819      	ldreq	r1, [r3, #0]
 8017c66:	685b      	ldreq	r3, [r3, #4]
 8017c68:	1809      	addeq	r1, r1, r0
 8017c6a:	6021      	streq	r1, [r4, #0]
 8017c6c:	6063      	str	r3, [r4, #4]
 8017c6e:	6054      	str	r4, [r2, #4]
 8017c70:	e7cb      	b.n	8017c0a <_free_r+0x22>
 8017c72:	bd38      	pop	{r3, r4, r5, pc}
 8017c74:	20003c0c 	.word	0x20003c0c

08017c78 <rshift>:
 8017c78:	6903      	ldr	r3, [r0, #16]
 8017c7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017c82:	f100 0414 	add.w	r4, r0, #20
 8017c86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017c8a:	dd46      	ble.n	8017d1a <rshift+0xa2>
 8017c8c:	f011 011f 	ands.w	r1, r1, #31
 8017c90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017c94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017c98:	d10c      	bne.n	8017cb4 <rshift+0x3c>
 8017c9a:	4629      	mov	r1, r5
 8017c9c:	f100 0710 	add.w	r7, r0, #16
 8017ca0:	42b1      	cmp	r1, r6
 8017ca2:	d335      	bcc.n	8017d10 <rshift+0x98>
 8017ca4:	1a9b      	subs	r3, r3, r2
 8017ca6:	009b      	lsls	r3, r3, #2
 8017ca8:	1eea      	subs	r2, r5, #3
 8017caa:	4296      	cmp	r6, r2
 8017cac:	bf38      	it	cc
 8017cae:	2300      	movcc	r3, #0
 8017cb0:	4423      	add	r3, r4
 8017cb2:	e015      	b.n	8017ce0 <rshift+0x68>
 8017cb4:	46a1      	mov	r9, r4
 8017cb6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017cba:	f1c1 0820 	rsb	r8, r1, #32
 8017cbe:	40cf      	lsrs	r7, r1
 8017cc0:	f105 0e04 	add.w	lr, r5, #4
 8017cc4:	4576      	cmp	r6, lr
 8017cc6:	46f4      	mov	ip, lr
 8017cc8:	d816      	bhi.n	8017cf8 <rshift+0x80>
 8017cca:	1a9a      	subs	r2, r3, r2
 8017ccc:	0092      	lsls	r2, r2, #2
 8017cce:	3a04      	subs	r2, #4
 8017cd0:	3501      	adds	r5, #1
 8017cd2:	42ae      	cmp	r6, r5
 8017cd4:	bf38      	it	cc
 8017cd6:	2200      	movcc	r2, #0
 8017cd8:	18a3      	adds	r3, r4, r2
 8017cda:	50a7      	str	r7, [r4, r2]
 8017cdc:	b107      	cbz	r7, 8017ce0 <rshift+0x68>
 8017cde:	3304      	adds	r3, #4
 8017ce0:	42a3      	cmp	r3, r4
 8017ce2:	eba3 0204 	sub.w	r2, r3, r4
 8017ce6:	bf08      	it	eq
 8017ce8:	2300      	moveq	r3, #0
 8017cea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017cee:	6102      	str	r2, [r0, #16]
 8017cf0:	bf08      	it	eq
 8017cf2:	6143      	streq	r3, [r0, #20]
 8017cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017cf8:	f8dc c000 	ldr.w	ip, [ip]
 8017cfc:	fa0c fc08 	lsl.w	ip, ip, r8
 8017d00:	ea4c 0707 	orr.w	r7, ip, r7
 8017d04:	f849 7b04 	str.w	r7, [r9], #4
 8017d08:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017d0c:	40cf      	lsrs	r7, r1
 8017d0e:	e7d9      	b.n	8017cc4 <rshift+0x4c>
 8017d10:	f851 cb04 	ldr.w	ip, [r1], #4
 8017d14:	f847 cf04 	str.w	ip, [r7, #4]!
 8017d18:	e7c2      	b.n	8017ca0 <rshift+0x28>
 8017d1a:	4623      	mov	r3, r4
 8017d1c:	e7e0      	b.n	8017ce0 <rshift+0x68>

08017d1e <__hexdig_fun>:
 8017d1e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017d22:	2b09      	cmp	r3, #9
 8017d24:	d802      	bhi.n	8017d2c <__hexdig_fun+0xe>
 8017d26:	3820      	subs	r0, #32
 8017d28:	b2c0      	uxtb	r0, r0
 8017d2a:	4770      	bx	lr
 8017d2c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017d30:	2b05      	cmp	r3, #5
 8017d32:	d801      	bhi.n	8017d38 <__hexdig_fun+0x1a>
 8017d34:	3847      	subs	r0, #71	@ 0x47
 8017d36:	e7f7      	b.n	8017d28 <__hexdig_fun+0xa>
 8017d38:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017d3c:	2b05      	cmp	r3, #5
 8017d3e:	d801      	bhi.n	8017d44 <__hexdig_fun+0x26>
 8017d40:	3827      	subs	r0, #39	@ 0x27
 8017d42:	e7f1      	b.n	8017d28 <__hexdig_fun+0xa>
 8017d44:	2000      	movs	r0, #0
 8017d46:	4770      	bx	lr

08017d48 <__gethex>:
 8017d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d4c:	468a      	mov	sl, r1
 8017d4e:	4690      	mov	r8, r2
 8017d50:	b085      	sub	sp, #20
 8017d52:	9302      	str	r3, [sp, #8]
 8017d54:	680b      	ldr	r3, [r1, #0]
 8017d56:	9001      	str	r0, [sp, #4]
 8017d58:	1c9c      	adds	r4, r3, #2
 8017d5a:	46a1      	mov	r9, r4
 8017d5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017d60:	2830      	cmp	r0, #48	@ 0x30
 8017d62:	d0fa      	beq.n	8017d5a <__gethex+0x12>
 8017d64:	eba9 0303 	sub.w	r3, r9, r3
 8017d68:	f1a3 0b02 	sub.w	fp, r3, #2
 8017d6c:	f7ff ffd7 	bl	8017d1e <__hexdig_fun>
 8017d70:	4605      	mov	r5, r0
 8017d72:	2800      	cmp	r0, #0
 8017d74:	d168      	bne.n	8017e48 <__gethex+0x100>
 8017d76:	2201      	movs	r2, #1
 8017d78:	4648      	mov	r0, r9
 8017d7a:	499f      	ldr	r1, [pc, #636]	@ (8017ff8 <__gethex+0x2b0>)
 8017d7c:	f7fe ff98 	bl	8016cb0 <strncmp>
 8017d80:	4607      	mov	r7, r0
 8017d82:	2800      	cmp	r0, #0
 8017d84:	d167      	bne.n	8017e56 <__gethex+0x10e>
 8017d86:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017d8a:	4626      	mov	r6, r4
 8017d8c:	f7ff ffc7 	bl	8017d1e <__hexdig_fun>
 8017d90:	2800      	cmp	r0, #0
 8017d92:	d062      	beq.n	8017e5a <__gethex+0x112>
 8017d94:	4623      	mov	r3, r4
 8017d96:	7818      	ldrb	r0, [r3, #0]
 8017d98:	4699      	mov	r9, r3
 8017d9a:	2830      	cmp	r0, #48	@ 0x30
 8017d9c:	f103 0301 	add.w	r3, r3, #1
 8017da0:	d0f9      	beq.n	8017d96 <__gethex+0x4e>
 8017da2:	f7ff ffbc 	bl	8017d1e <__hexdig_fun>
 8017da6:	fab0 f580 	clz	r5, r0
 8017daa:	f04f 0b01 	mov.w	fp, #1
 8017dae:	096d      	lsrs	r5, r5, #5
 8017db0:	464a      	mov	r2, r9
 8017db2:	4616      	mov	r6, r2
 8017db4:	7830      	ldrb	r0, [r6, #0]
 8017db6:	3201      	adds	r2, #1
 8017db8:	f7ff ffb1 	bl	8017d1e <__hexdig_fun>
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	d1f8      	bne.n	8017db2 <__gethex+0x6a>
 8017dc0:	2201      	movs	r2, #1
 8017dc2:	4630      	mov	r0, r6
 8017dc4:	498c      	ldr	r1, [pc, #560]	@ (8017ff8 <__gethex+0x2b0>)
 8017dc6:	f7fe ff73 	bl	8016cb0 <strncmp>
 8017dca:	2800      	cmp	r0, #0
 8017dcc:	d13f      	bne.n	8017e4e <__gethex+0x106>
 8017dce:	b944      	cbnz	r4, 8017de2 <__gethex+0x9a>
 8017dd0:	1c74      	adds	r4, r6, #1
 8017dd2:	4622      	mov	r2, r4
 8017dd4:	4616      	mov	r6, r2
 8017dd6:	7830      	ldrb	r0, [r6, #0]
 8017dd8:	3201      	adds	r2, #1
 8017dda:	f7ff ffa0 	bl	8017d1e <__hexdig_fun>
 8017dde:	2800      	cmp	r0, #0
 8017de0:	d1f8      	bne.n	8017dd4 <__gethex+0x8c>
 8017de2:	1ba4      	subs	r4, r4, r6
 8017de4:	00a7      	lsls	r7, r4, #2
 8017de6:	7833      	ldrb	r3, [r6, #0]
 8017de8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017dec:	2b50      	cmp	r3, #80	@ 0x50
 8017dee:	d13e      	bne.n	8017e6e <__gethex+0x126>
 8017df0:	7873      	ldrb	r3, [r6, #1]
 8017df2:	2b2b      	cmp	r3, #43	@ 0x2b
 8017df4:	d033      	beq.n	8017e5e <__gethex+0x116>
 8017df6:	2b2d      	cmp	r3, #45	@ 0x2d
 8017df8:	d034      	beq.n	8017e64 <__gethex+0x11c>
 8017dfa:	2400      	movs	r4, #0
 8017dfc:	1c71      	adds	r1, r6, #1
 8017dfe:	7808      	ldrb	r0, [r1, #0]
 8017e00:	f7ff ff8d 	bl	8017d1e <__hexdig_fun>
 8017e04:	1e43      	subs	r3, r0, #1
 8017e06:	b2db      	uxtb	r3, r3
 8017e08:	2b18      	cmp	r3, #24
 8017e0a:	d830      	bhi.n	8017e6e <__gethex+0x126>
 8017e0c:	f1a0 0210 	sub.w	r2, r0, #16
 8017e10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017e14:	f7ff ff83 	bl	8017d1e <__hexdig_fun>
 8017e18:	f100 3cff 	add.w	ip, r0, #4294967295
 8017e1c:	fa5f fc8c 	uxtb.w	ip, ip
 8017e20:	f1bc 0f18 	cmp.w	ip, #24
 8017e24:	f04f 030a 	mov.w	r3, #10
 8017e28:	d91e      	bls.n	8017e68 <__gethex+0x120>
 8017e2a:	b104      	cbz	r4, 8017e2e <__gethex+0xe6>
 8017e2c:	4252      	negs	r2, r2
 8017e2e:	4417      	add	r7, r2
 8017e30:	f8ca 1000 	str.w	r1, [sl]
 8017e34:	b1ed      	cbz	r5, 8017e72 <__gethex+0x12a>
 8017e36:	f1bb 0f00 	cmp.w	fp, #0
 8017e3a:	bf0c      	ite	eq
 8017e3c:	2506      	moveq	r5, #6
 8017e3e:	2500      	movne	r5, #0
 8017e40:	4628      	mov	r0, r5
 8017e42:	b005      	add	sp, #20
 8017e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e48:	2500      	movs	r5, #0
 8017e4a:	462c      	mov	r4, r5
 8017e4c:	e7b0      	b.n	8017db0 <__gethex+0x68>
 8017e4e:	2c00      	cmp	r4, #0
 8017e50:	d1c7      	bne.n	8017de2 <__gethex+0x9a>
 8017e52:	4627      	mov	r7, r4
 8017e54:	e7c7      	b.n	8017de6 <__gethex+0x9e>
 8017e56:	464e      	mov	r6, r9
 8017e58:	462f      	mov	r7, r5
 8017e5a:	2501      	movs	r5, #1
 8017e5c:	e7c3      	b.n	8017de6 <__gethex+0x9e>
 8017e5e:	2400      	movs	r4, #0
 8017e60:	1cb1      	adds	r1, r6, #2
 8017e62:	e7cc      	b.n	8017dfe <__gethex+0xb6>
 8017e64:	2401      	movs	r4, #1
 8017e66:	e7fb      	b.n	8017e60 <__gethex+0x118>
 8017e68:	fb03 0002 	mla	r0, r3, r2, r0
 8017e6c:	e7ce      	b.n	8017e0c <__gethex+0xc4>
 8017e6e:	4631      	mov	r1, r6
 8017e70:	e7de      	b.n	8017e30 <__gethex+0xe8>
 8017e72:	4629      	mov	r1, r5
 8017e74:	eba6 0309 	sub.w	r3, r6, r9
 8017e78:	3b01      	subs	r3, #1
 8017e7a:	2b07      	cmp	r3, #7
 8017e7c:	dc0a      	bgt.n	8017e94 <__gethex+0x14c>
 8017e7e:	9801      	ldr	r0, [sp, #4]
 8017e80:	f000 fa46 	bl	8018310 <_Balloc>
 8017e84:	4604      	mov	r4, r0
 8017e86:	b940      	cbnz	r0, 8017e9a <__gethex+0x152>
 8017e88:	4602      	mov	r2, r0
 8017e8a:	21e4      	movs	r1, #228	@ 0xe4
 8017e8c:	4b5b      	ldr	r3, [pc, #364]	@ (8017ffc <__gethex+0x2b4>)
 8017e8e:	485c      	ldr	r0, [pc, #368]	@ (8018000 <__gethex+0x2b8>)
 8017e90:	f7fc fe58 	bl	8014b44 <__assert_func>
 8017e94:	3101      	adds	r1, #1
 8017e96:	105b      	asrs	r3, r3, #1
 8017e98:	e7ef      	b.n	8017e7a <__gethex+0x132>
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	f100 0a14 	add.w	sl, r0, #20
 8017ea0:	4655      	mov	r5, sl
 8017ea2:	469b      	mov	fp, r3
 8017ea4:	45b1      	cmp	r9, r6
 8017ea6:	d337      	bcc.n	8017f18 <__gethex+0x1d0>
 8017ea8:	f845 bb04 	str.w	fp, [r5], #4
 8017eac:	eba5 050a 	sub.w	r5, r5, sl
 8017eb0:	10ad      	asrs	r5, r5, #2
 8017eb2:	6125      	str	r5, [r4, #16]
 8017eb4:	4658      	mov	r0, fp
 8017eb6:	f000 fb1d 	bl	80184f4 <__hi0bits>
 8017eba:	016d      	lsls	r5, r5, #5
 8017ebc:	f8d8 6000 	ldr.w	r6, [r8]
 8017ec0:	1a2d      	subs	r5, r5, r0
 8017ec2:	42b5      	cmp	r5, r6
 8017ec4:	dd54      	ble.n	8017f70 <__gethex+0x228>
 8017ec6:	1bad      	subs	r5, r5, r6
 8017ec8:	4629      	mov	r1, r5
 8017eca:	4620      	mov	r0, r4
 8017ecc:	f000 fe9f 	bl	8018c0e <__any_on>
 8017ed0:	4681      	mov	r9, r0
 8017ed2:	b178      	cbz	r0, 8017ef4 <__gethex+0x1ac>
 8017ed4:	f04f 0901 	mov.w	r9, #1
 8017ed8:	1e6b      	subs	r3, r5, #1
 8017eda:	1159      	asrs	r1, r3, #5
 8017edc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017ee0:	f003 021f 	and.w	r2, r3, #31
 8017ee4:	fa09 f202 	lsl.w	r2, r9, r2
 8017ee8:	420a      	tst	r2, r1
 8017eea:	d003      	beq.n	8017ef4 <__gethex+0x1ac>
 8017eec:	454b      	cmp	r3, r9
 8017eee:	dc36      	bgt.n	8017f5e <__gethex+0x216>
 8017ef0:	f04f 0902 	mov.w	r9, #2
 8017ef4:	4629      	mov	r1, r5
 8017ef6:	4620      	mov	r0, r4
 8017ef8:	f7ff febe 	bl	8017c78 <rshift>
 8017efc:	442f      	add	r7, r5
 8017efe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f02:	42bb      	cmp	r3, r7
 8017f04:	da42      	bge.n	8017f8c <__gethex+0x244>
 8017f06:	4621      	mov	r1, r4
 8017f08:	9801      	ldr	r0, [sp, #4]
 8017f0a:	f000 fa41 	bl	8018390 <_Bfree>
 8017f0e:	2300      	movs	r3, #0
 8017f10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017f12:	25a3      	movs	r5, #163	@ 0xa3
 8017f14:	6013      	str	r3, [r2, #0]
 8017f16:	e793      	b.n	8017e40 <__gethex+0xf8>
 8017f18:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017f1c:	2a2e      	cmp	r2, #46	@ 0x2e
 8017f1e:	d012      	beq.n	8017f46 <__gethex+0x1fe>
 8017f20:	2b20      	cmp	r3, #32
 8017f22:	d104      	bne.n	8017f2e <__gethex+0x1e6>
 8017f24:	f845 bb04 	str.w	fp, [r5], #4
 8017f28:	f04f 0b00 	mov.w	fp, #0
 8017f2c:	465b      	mov	r3, fp
 8017f2e:	7830      	ldrb	r0, [r6, #0]
 8017f30:	9303      	str	r3, [sp, #12]
 8017f32:	f7ff fef4 	bl	8017d1e <__hexdig_fun>
 8017f36:	9b03      	ldr	r3, [sp, #12]
 8017f38:	f000 000f 	and.w	r0, r0, #15
 8017f3c:	4098      	lsls	r0, r3
 8017f3e:	ea4b 0b00 	orr.w	fp, fp, r0
 8017f42:	3304      	adds	r3, #4
 8017f44:	e7ae      	b.n	8017ea4 <__gethex+0x15c>
 8017f46:	45b1      	cmp	r9, r6
 8017f48:	d8ea      	bhi.n	8017f20 <__gethex+0x1d8>
 8017f4a:	2201      	movs	r2, #1
 8017f4c:	4630      	mov	r0, r6
 8017f4e:	492a      	ldr	r1, [pc, #168]	@ (8017ff8 <__gethex+0x2b0>)
 8017f50:	9303      	str	r3, [sp, #12]
 8017f52:	f7fe fead 	bl	8016cb0 <strncmp>
 8017f56:	9b03      	ldr	r3, [sp, #12]
 8017f58:	2800      	cmp	r0, #0
 8017f5a:	d1e1      	bne.n	8017f20 <__gethex+0x1d8>
 8017f5c:	e7a2      	b.n	8017ea4 <__gethex+0x15c>
 8017f5e:	4620      	mov	r0, r4
 8017f60:	1ea9      	subs	r1, r5, #2
 8017f62:	f000 fe54 	bl	8018c0e <__any_on>
 8017f66:	2800      	cmp	r0, #0
 8017f68:	d0c2      	beq.n	8017ef0 <__gethex+0x1a8>
 8017f6a:	f04f 0903 	mov.w	r9, #3
 8017f6e:	e7c1      	b.n	8017ef4 <__gethex+0x1ac>
 8017f70:	da09      	bge.n	8017f86 <__gethex+0x23e>
 8017f72:	1b75      	subs	r5, r6, r5
 8017f74:	4621      	mov	r1, r4
 8017f76:	462a      	mov	r2, r5
 8017f78:	9801      	ldr	r0, [sp, #4]
 8017f7a:	f000 fc19 	bl	80187b0 <__lshift>
 8017f7e:	4604      	mov	r4, r0
 8017f80:	1b7f      	subs	r7, r7, r5
 8017f82:	f100 0a14 	add.w	sl, r0, #20
 8017f86:	f04f 0900 	mov.w	r9, #0
 8017f8a:	e7b8      	b.n	8017efe <__gethex+0x1b6>
 8017f8c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017f90:	42bd      	cmp	r5, r7
 8017f92:	dd6f      	ble.n	8018074 <__gethex+0x32c>
 8017f94:	1bed      	subs	r5, r5, r7
 8017f96:	42ae      	cmp	r6, r5
 8017f98:	dc34      	bgt.n	8018004 <__gethex+0x2bc>
 8017f9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017f9e:	2b02      	cmp	r3, #2
 8017fa0:	d022      	beq.n	8017fe8 <__gethex+0x2a0>
 8017fa2:	2b03      	cmp	r3, #3
 8017fa4:	d024      	beq.n	8017ff0 <__gethex+0x2a8>
 8017fa6:	2b01      	cmp	r3, #1
 8017fa8:	d115      	bne.n	8017fd6 <__gethex+0x28e>
 8017faa:	42ae      	cmp	r6, r5
 8017fac:	d113      	bne.n	8017fd6 <__gethex+0x28e>
 8017fae:	2e01      	cmp	r6, #1
 8017fb0:	d10b      	bne.n	8017fca <__gethex+0x282>
 8017fb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017fb6:	9a02      	ldr	r2, [sp, #8]
 8017fb8:	2562      	movs	r5, #98	@ 0x62
 8017fba:	6013      	str	r3, [r2, #0]
 8017fbc:	2301      	movs	r3, #1
 8017fbe:	6123      	str	r3, [r4, #16]
 8017fc0:	f8ca 3000 	str.w	r3, [sl]
 8017fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017fc6:	601c      	str	r4, [r3, #0]
 8017fc8:	e73a      	b.n	8017e40 <__gethex+0xf8>
 8017fca:	4620      	mov	r0, r4
 8017fcc:	1e71      	subs	r1, r6, #1
 8017fce:	f000 fe1e 	bl	8018c0e <__any_on>
 8017fd2:	2800      	cmp	r0, #0
 8017fd4:	d1ed      	bne.n	8017fb2 <__gethex+0x26a>
 8017fd6:	4621      	mov	r1, r4
 8017fd8:	9801      	ldr	r0, [sp, #4]
 8017fda:	f000 f9d9 	bl	8018390 <_Bfree>
 8017fde:	2300      	movs	r3, #0
 8017fe0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017fe2:	2550      	movs	r5, #80	@ 0x50
 8017fe4:	6013      	str	r3, [r2, #0]
 8017fe6:	e72b      	b.n	8017e40 <__gethex+0xf8>
 8017fe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d1f3      	bne.n	8017fd6 <__gethex+0x28e>
 8017fee:	e7e0      	b.n	8017fb2 <__gethex+0x26a>
 8017ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d1dd      	bne.n	8017fb2 <__gethex+0x26a>
 8017ff6:	e7ee      	b.n	8017fd6 <__gethex+0x28e>
 8017ff8:	0801ad49 	.word	0x0801ad49
 8017ffc:	0801ae60 	.word	0x0801ae60
 8018000:	0801ae71 	.word	0x0801ae71
 8018004:	1e6f      	subs	r7, r5, #1
 8018006:	f1b9 0f00 	cmp.w	r9, #0
 801800a:	d130      	bne.n	801806e <__gethex+0x326>
 801800c:	b127      	cbz	r7, 8018018 <__gethex+0x2d0>
 801800e:	4639      	mov	r1, r7
 8018010:	4620      	mov	r0, r4
 8018012:	f000 fdfc 	bl	8018c0e <__any_on>
 8018016:	4681      	mov	r9, r0
 8018018:	2301      	movs	r3, #1
 801801a:	4629      	mov	r1, r5
 801801c:	1b76      	subs	r6, r6, r5
 801801e:	2502      	movs	r5, #2
 8018020:	117a      	asrs	r2, r7, #5
 8018022:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018026:	f007 071f 	and.w	r7, r7, #31
 801802a:	40bb      	lsls	r3, r7
 801802c:	4213      	tst	r3, r2
 801802e:	4620      	mov	r0, r4
 8018030:	bf18      	it	ne
 8018032:	f049 0902 	orrne.w	r9, r9, #2
 8018036:	f7ff fe1f 	bl	8017c78 <rshift>
 801803a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801803e:	f1b9 0f00 	cmp.w	r9, #0
 8018042:	d047      	beq.n	80180d4 <__gethex+0x38c>
 8018044:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018048:	2b02      	cmp	r3, #2
 801804a:	d015      	beq.n	8018078 <__gethex+0x330>
 801804c:	2b03      	cmp	r3, #3
 801804e:	d017      	beq.n	8018080 <__gethex+0x338>
 8018050:	2b01      	cmp	r3, #1
 8018052:	d109      	bne.n	8018068 <__gethex+0x320>
 8018054:	f019 0f02 	tst.w	r9, #2
 8018058:	d006      	beq.n	8018068 <__gethex+0x320>
 801805a:	f8da 3000 	ldr.w	r3, [sl]
 801805e:	ea49 0903 	orr.w	r9, r9, r3
 8018062:	f019 0f01 	tst.w	r9, #1
 8018066:	d10e      	bne.n	8018086 <__gethex+0x33e>
 8018068:	f045 0510 	orr.w	r5, r5, #16
 801806c:	e032      	b.n	80180d4 <__gethex+0x38c>
 801806e:	f04f 0901 	mov.w	r9, #1
 8018072:	e7d1      	b.n	8018018 <__gethex+0x2d0>
 8018074:	2501      	movs	r5, #1
 8018076:	e7e2      	b.n	801803e <__gethex+0x2f6>
 8018078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801807a:	f1c3 0301 	rsb	r3, r3, #1
 801807e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018082:	2b00      	cmp	r3, #0
 8018084:	d0f0      	beq.n	8018068 <__gethex+0x320>
 8018086:	f04f 0c00 	mov.w	ip, #0
 801808a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801808e:	f104 0314 	add.w	r3, r4, #20
 8018092:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018096:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801809a:	4618      	mov	r0, r3
 801809c:	f853 2b04 	ldr.w	r2, [r3], #4
 80180a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80180a4:	d01b      	beq.n	80180de <__gethex+0x396>
 80180a6:	3201      	adds	r2, #1
 80180a8:	6002      	str	r2, [r0, #0]
 80180aa:	2d02      	cmp	r5, #2
 80180ac:	f104 0314 	add.w	r3, r4, #20
 80180b0:	d13c      	bne.n	801812c <__gethex+0x3e4>
 80180b2:	f8d8 2000 	ldr.w	r2, [r8]
 80180b6:	3a01      	subs	r2, #1
 80180b8:	42b2      	cmp	r2, r6
 80180ba:	d109      	bne.n	80180d0 <__gethex+0x388>
 80180bc:	2201      	movs	r2, #1
 80180be:	1171      	asrs	r1, r6, #5
 80180c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80180c4:	f006 061f 	and.w	r6, r6, #31
 80180c8:	fa02 f606 	lsl.w	r6, r2, r6
 80180cc:	421e      	tst	r6, r3
 80180ce:	d13a      	bne.n	8018146 <__gethex+0x3fe>
 80180d0:	f045 0520 	orr.w	r5, r5, #32
 80180d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80180d6:	601c      	str	r4, [r3, #0]
 80180d8:	9b02      	ldr	r3, [sp, #8]
 80180da:	601f      	str	r7, [r3, #0]
 80180dc:	e6b0      	b.n	8017e40 <__gethex+0xf8>
 80180de:	4299      	cmp	r1, r3
 80180e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80180e4:	d8d9      	bhi.n	801809a <__gethex+0x352>
 80180e6:	68a3      	ldr	r3, [r4, #8]
 80180e8:	459b      	cmp	fp, r3
 80180ea:	db17      	blt.n	801811c <__gethex+0x3d4>
 80180ec:	6861      	ldr	r1, [r4, #4]
 80180ee:	9801      	ldr	r0, [sp, #4]
 80180f0:	3101      	adds	r1, #1
 80180f2:	f000 f90d 	bl	8018310 <_Balloc>
 80180f6:	4681      	mov	r9, r0
 80180f8:	b918      	cbnz	r0, 8018102 <__gethex+0x3ba>
 80180fa:	4602      	mov	r2, r0
 80180fc:	2184      	movs	r1, #132	@ 0x84
 80180fe:	4b19      	ldr	r3, [pc, #100]	@ (8018164 <__gethex+0x41c>)
 8018100:	e6c5      	b.n	8017e8e <__gethex+0x146>
 8018102:	6922      	ldr	r2, [r4, #16]
 8018104:	f104 010c 	add.w	r1, r4, #12
 8018108:	3202      	adds	r2, #2
 801810a:	0092      	lsls	r2, r2, #2
 801810c:	300c      	adds	r0, #12
 801810e:	f7fe feee 	bl	8016eee <memcpy>
 8018112:	4621      	mov	r1, r4
 8018114:	9801      	ldr	r0, [sp, #4]
 8018116:	f000 f93b 	bl	8018390 <_Bfree>
 801811a:	464c      	mov	r4, r9
 801811c:	6923      	ldr	r3, [r4, #16]
 801811e:	1c5a      	adds	r2, r3, #1
 8018120:	6122      	str	r2, [r4, #16]
 8018122:	2201      	movs	r2, #1
 8018124:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018128:	615a      	str	r2, [r3, #20]
 801812a:	e7be      	b.n	80180aa <__gethex+0x362>
 801812c:	6922      	ldr	r2, [r4, #16]
 801812e:	455a      	cmp	r2, fp
 8018130:	dd0b      	ble.n	801814a <__gethex+0x402>
 8018132:	2101      	movs	r1, #1
 8018134:	4620      	mov	r0, r4
 8018136:	f7ff fd9f 	bl	8017c78 <rshift>
 801813a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801813e:	3701      	adds	r7, #1
 8018140:	42bb      	cmp	r3, r7
 8018142:	f6ff aee0 	blt.w	8017f06 <__gethex+0x1be>
 8018146:	2501      	movs	r5, #1
 8018148:	e7c2      	b.n	80180d0 <__gethex+0x388>
 801814a:	f016 061f 	ands.w	r6, r6, #31
 801814e:	d0fa      	beq.n	8018146 <__gethex+0x3fe>
 8018150:	4453      	add	r3, sl
 8018152:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018156:	f000 f9cd 	bl	80184f4 <__hi0bits>
 801815a:	f1c6 0620 	rsb	r6, r6, #32
 801815e:	42b0      	cmp	r0, r6
 8018160:	dbe7      	blt.n	8018132 <__gethex+0x3ea>
 8018162:	e7f0      	b.n	8018146 <__gethex+0x3fe>
 8018164:	0801ae60 	.word	0x0801ae60

08018168 <L_shift>:
 8018168:	f1c2 0208 	rsb	r2, r2, #8
 801816c:	0092      	lsls	r2, r2, #2
 801816e:	b570      	push	{r4, r5, r6, lr}
 8018170:	f1c2 0620 	rsb	r6, r2, #32
 8018174:	6843      	ldr	r3, [r0, #4]
 8018176:	6804      	ldr	r4, [r0, #0]
 8018178:	fa03 f506 	lsl.w	r5, r3, r6
 801817c:	432c      	orrs	r4, r5
 801817e:	40d3      	lsrs	r3, r2
 8018180:	6004      	str	r4, [r0, #0]
 8018182:	f840 3f04 	str.w	r3, [r0, #4]!
 8018186:	4288      	cmp	r0, r1
 8018188:	d3f4      	bcc.n	8018174 <L_shift+0xc>
 801818a:	bd70      	pop	{r4, r5, r6, pc}

0801818c <__match>:
 801818c:	b530      	push	{r4, r5, lr}
 801818e:	6803      	ldr	r3, [r0, #0]
 8018190:	3301      	adds	r3, #1
 8018192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018196:	b914      	cbnz	r4, 801819e <__match+0x12>
 8018198:	6003      	str	r3, [r0, #0]
 801819a:	2001      	movs	r0, #1
 801819c:	bd30      	pop	{r4, r5, pc}
 801819e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80181a6:	2d19      	cmp	r5, #25
 80181a8:	bf98      	it	ls
 80181aa:	3220      	addls	r2, #32
 80181ac:	42a2      	cmp	r2, r4
 80181ae:	d0f0      	beq.n	8018192 <__match+0x6>
 80181b0:	2000      	movs	r0, #0
 80181b2:	e7f3      	b.n	801819c <__match+0x10>

080181b4 <__hexnan>:
 80181b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181b8:	2500      	movs	r5, #0
 80181ba:	680b      	ldr	r3, [r1, #0]
 80181bc:	4682      	mov	sl, r0
 80181be:	115e      	asrs	r6, r3, #5
 80181c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80181c4:	f013 031f 	ands.w	r3, r3, #31
 80181c8:	bf18      	it	ne
 80181ca:	3604      	addne	r6, #4
 80181cc:	1f37      	subs	r7, r6, #4
 80181ce:	4690      	mov	r8, r2
 80181d0:	46b9      	mov	r9, r7
 80181d2:	463c      	mov	r4, r7
 80181d4:	46ab      	mov	fp, r5
 80181d6:	b087      	sub	sp, #28
 80181d8:	6801      	ldr	r1, [r0, #0]
 80181da:	9301      	str	r3, [sp, #4]
 80181dc:	f846 5c04 	str.w	r5, [r6, #-4]
 80181e0:	9502      	str	r5, [sp, #8]
 80181e2:	784a      	ldrb	r2, [r1, #1]
 80181e4:	1c4b      	adds	r3, r1, #1
 80181e6:	9303      	str	r3, [sp, #12]
 80181e8:	b342      	cbz	r2, 801823c <__hexnan+0x88>
 80181ea:	4610      	mov	r0, r2
 80181ec:	9105      	str	r1, [sp, #20]
 80181ee:	9204      	str	r2, [sp, #16]
 80181f0:	f7ff fd95 	bl	8017d1e <__hexdig_fun>
 80181f4:	2800      	cmp	r0, #0
 80181f6:	d151      	bne.n	801829c <__hexnan+0xe8>
 80181f8:	9a04      	ldr	r2, [sp, #16]
 80181fa:	9905      	ldr	r1, [sp, #20]
 80181fc:	2a20      	cmp	r2, #32
 80181fe:	d818      	bhi.n	8018232 <__hexnan+0x7e>
 8018200:	9b02      	ldr	r3, [sp, #8]
 8018202:	459b      	cmp	fp, r3
 8018204:	dd13      	ble.n	801822e <__hexnan+0x7a>
 8018206:	454c      	cmp	r4, r9
 8018208:	d206      	bcs.n	8018218 <__hexnan+0x64>
 801820a:	2d07      	cmp	r5, #7
 801820c:	dc04      	bgt.n	8018218 <__hexnan+0x64>
 801820e:	462a      	mov	r2, r5
 8018210:	4649      	mov	r1, r9
 8018212:	4620      	mov	r0, r4
 8018214:	f7ff ffa8 	bl	8018168 <L_shift>
 8018218:	4544      	cmp	r4, r8
 801821a:	d952      	bls.n	80182c2 <__hexnan+0x10e>
 801821c:	2300      	movs	r3, #0
 801821e:	f1a4 0904 	sub.w	r9, r4, #4
 8018222:	f844 3c04 	str.w	r3, [r4, #-4]
 8018226:	461d      	mov	r5, r3
 8018228:	464c      	mov	r4, r9
 801822a:	f8cd b008 	str.w	fp, [sp, #8]
 801822e:	9903      	ldr	r1, [sp, #12]
 8018230:	e7d7      	b.n	80181e2 <__hexnan+0x2e>
 8018232:	2a29      	cmp	r2, #41	@ 0x29
 8018234:	d157      	bne.n	80182e6 <__hexnan+0x132>
 8018236:	3102      	adds	r1, #2
 8018238:	f8ca 1000 	str.w	r1, [sl]
 801823c:	f1bb 0f00 	cmp.w	fp, #0
 8018240:	d051      	beq.n	80182e6 <__hexnan+0x132>
 8018242:	454c      	cmp	r4, r9
 8018244:	d206      	bcs.n	8018254 <__hexnan+0xa0>
 8018246:	2d07      	cmp	r5, #7
 8018248:	dc04      	bgt.n	8018254 <__hexnan+0xa0>
 801824a:	462a      	mov	r2, r5
 801824c:	4649      	mov	r1, r9
 801824e:	4620      	mov	r0, r4
 8018250:	f7ff ff8a 	bl	8018168 <L_shift>
 8018254:	4544      	cmp	r4, r8
 8018256:	d936      	bls.n	80182c6 <__hexnan+0x112>
 8018258:	4623      	mov	r3, r4
 801825a:	f1a8 0204 	sub.w	r2, r8, #4
 801825e:	f853 1b04 	ldr.w	r1, [r3], #4
 8018262:	429f      	cmp	r7, r3
 8018264:	f842 1f04 	str.w	r1, [r2, #4]!
 8018268:	d2f9      	bcs.n	801825e <__hexnan+0xaa>
 801826a:	1b3b      	subs	r3, r7, r4
 801826c:	f023 0303 	bic.w	r3, r3, #3
 8018270:	3304      	adds	r3, #4
 8018272:	3401      	adds	r4, #1
 8018274:	3e03      	subs	r6, #3
 8018276:	42b4      	cmp	r4, r6
 8018278:	bf88      	it	hi
 801827a:	2304      	movhi	r3, #4
 801827c:	2200      	movs	r2, #0
 801827e:	4443      	add	r3, r8
 8018280:	f843 2b04 	str.w	r2, [r3], #4
 8018284:	429f      	cmp	r7, r3
 8018286:	d2fb      	bcs.n	8018280 <__hexnan+0xcc>
 8018288:	683b      	ldr	r3, [r7, #0]
 801828a:	b91b      	cbnz	r3, 8018294 <__hexnan+0xe0>
 801828c:	4547      	cmp	r7, r8
 801828e:	d128      	bne.n	80182e2 <__hexnan+0x12e>
 8018290:	2301      	movs	r3, #1
 8018292:	603b      	str	r3, [r7, #0]
 8018294:	2005      	movs	r0, #5
 8018296:	b007      	add	sp, #28
 8018298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829c:	3501      	adds	r5, #1
 801829e:	2d08      	cmp	r5, #8
 80182a0:	f10b 0b01 	add.w	fp, fp, #1
 80182a4:	dd06      	ble.n	80182b4 <__hexnan+0x100>
 80182a6:	4544      	cmp	r4, r8
 80182a8:	d9c1      	bls.n	801822e <__hexnan+0x7a>
 80182aa:	2300      	movs	r3, #0
 80182ac:	2501      	movs	r5, #1
 80182ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80182b2:	3c04      	subs	r4, #4
 80182b4:	6822      	ldr	r2, [r4, #0]
 80182b6:	f000 000f 	and.w	r0, r0, #15
 80182ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80182be:	6020      	str	r0, [r4, #0]
 80182c0:	e7b5      	b.n	801822e <__hexnan+0x7a>
 80182c2:	2508      	movs	r5, #8
 80182c4:	e7b3      	b.n	801822e <__hexnan+0x7a>
 80182c6:	9b01      	ldr	r3, [sp, #4]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d0dd      	beq.n	8018288 <__hexnan+0xd4>
 80182cc:	f04f 32ff 	mov.w	r2, #4294967295
 80182d0:	f1c3 0320 	rsb	r3, r3, #32
 80182d4:	40da      	lsrs	r2, r3
 80182d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80182da:	4013      	ands	r3, r2
 80182dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80182e0:	e7d2      	b.n	8018288 <__hexnan+0xd4>
 80182e2:	3f04      	subs	r7, #4
 80182e4:	e7d0      	b.n	8018288 <__hexnan+0xd4>
 80182e6:	2004      	movs	r0, #4
 80182e8:	e7d5      	b.n	8018296 <__hexnan+0xe2>

080182ea <__ascii_mbtowc>:
 80182ea:	b082      	sub	sp, #8
 80182ec:	b901      	cbnz	r1, 80182f0 <__ascii_mbtowc+0x6>
 80182ee:	a901      	add	r1, sp, #4
 80182f0:	b142      	cbz	r2, 8018304 <__ascii_mbtowc+0x1a>
 80182f2:	b14b      	cbz	r3, 8018308 <__ascii_mbtowc+0x1e>
 80182f4:	7813      	ldrb	r3, [r2, #0]
 80182f6:	600b      	str	r3, [r1, #0]
 80182f8:	7812      	ldrb	r2, [r2, #0]
 80182fa:	1e10      	subs	r0, r2, #0
 80182fc:	bf18      	it	ne
 80182fe:	2001      	movne	r0, #1
 8018300:	b002      	add	sp, #8
 8018302:	4770      	bx	lr
 8018304:	4610      	mov	r0, r2
 8018306:	e7fb      	b.n	8018300 <__ascii_mbtowc+0x16>
 8018308:	f06f 0001 	mvn.w	r0, #1
 801830c:	e7f8      	b.n	8018300 <__ascii_mbtowc+0x16>
	...

08018310 <_Balloc>:
 8018310:	b570      	push	{r4, r5, r6, lr}
 8018312:	69c6      	ldr	r6, [r0, #28]
 8018314:	4604      	mov	r4, r0
 8018316:	460d      	mov	r5, r1
 8018318:	b976      	cbnz	r6, 8018338 <_Balloc+0x28>
 801831a:	2010      	movs	r0, #16
 801831c:	f7fc fc38 	bl	8014b90 <malloc>
 8018320:	4602      	mov	r2, r0
 8018322:	61e0      	str	r0, [r4, #28]
 8018324:	b920      	cbnz	r0, 8018330 <_Balloc+0x20>
 8018326:	216b      	movs	r1, #107	@ 0x6b
 8018328:	4b17      	ldr	r3, [pc, #92]	@ (8018388 <_Balloc+0x78>)
 801832a:	4818      	ldr	r0, [pc, #96]	@ (801838c <_Balloc+0x7c>)
 801832c:	f7fc fc0a 	bl	8014b44 <__assert_func>
 8018330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018334:	6006      	str	r6, [r0, #0]
 8018336:	60c6      	str	r6, [r0, #12]
 8018338:	69e6      	ldr	r6, [r4, #28]
 801833a:	68f3      	ldr	r3, [r6, #12]
 801833c:	b183      	cbz	r3, 8018360 <_Balloc+0x50>
 801833e:	69e3      	ldr	r3, [r4, #28]
 8018340:	68db      	ldr	r3, [r3, #12]
 8018342:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018346:	b9b8      	cbnz	r0, 8018378 <_Balloc+0x68>
 8018348:	2101      	movs	r1, #1
 801834a:	fa01 f605 	lsl.w	r6, r1, r5
 801834e:	1d72      	adds	r2, r6, #5
 8018350:	4620      	mov	r0, r4
 8018352:	0092      	lsls	r2, r2, #2
 8018354:	f001 fc34 	bl	8019bc0 <_calloc_r>
 8018358:	b160      	cbz	r0, 8018374 <_Balloc+0x64>
 801835a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801835e:	e00e      	b.n	801837e <_Balloc+0x6e>
 8018360:	2221      	movs	r2, #33	@ 0x21
 8018362:	2104      	movs	r1, #4
 8018364:	4620      	mov	r0, r4
 8018366:	f001 fc2b 	bl	8019bc0 <_calloc_r>
 801836a:	69e3      	ldr	r3, [r4, #28]
 801836c:	60f0      	str	r0, [r6, #12]
 801836e:	68db      	ldr	r3, [r3, #12]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d1e4      	bne.n	801833e <_Balloc+0x2e>
 8018374:	2000      	movs	r0, #0
 8018376:	bd70      	pop	{r4, r5, r6, pc}
 8018378:	6802      	ldr	r2, [r0, #0]
 801837a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801837e:	2300      	movs	r3, #0
 8018380:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018384:	e7f7      	b.n	8018376 <_Balloc+0x66>
 8018386:	bf00      	nop
 8018388:	0801ad82 	.word	0x0801ad82
 801838c:	0801aed1 	.word	0x0801aed1

08018390 <_Bfree>:
 8018390:	b570      	push	{r4, r5, r6, lr}
 8018392:	69c6      	ldr	r6, [r0, #28]
 8018394:	4605      	mov	r5, r0
 8018396:	460c      	mov	r4, r1
 8018398:	b976      	cbnz	r6, 80183b8 <_Bfree+0x28>
 801839a:	2010      	movs	r0, #16
 801839c:	f7fc fbf8 	bl	8014b90 <malloc>
 80183a0:	4602      	mov	r2, r0
 80183a2:	61e8      	str	r0, [r5, #28]
 80183a4:	b920      	cbnz	r0, 80183b0 <_Bfree+0x20>
 80183a6:	218f      	movs	r1, #143	@ 0x8f
 80183a8:	4b08      	ldr	r3, [pc, #32]	@ (80183cc <_Bfree+0x3c>)
 80183aa:	4809      	ldr	r0, [pc, #36]	@ (80183d0 <_Bfree+0x40>)
 80183ac:	f7fc fbca 	bl	8014b44 <__assert_func>
 80183b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80183b4:	6006      	str	r6, [r0, #0]
 80183b6:	60c6      	str	r6, [r0, #12]
 80183b8:	b13c      	cbz	r4, 80183ca <_Bfree+0x3a>
 80183ba:	69eb      	ldr	r3, [r5, #28]
 80183bc:	6862      	ldr	r2, [r4, #4]
 80183be:	68db      	ldr	r3, [r3, #12]
 80183c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80183c4:	6021      	str	r1, [r4, #0]
 80183c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80183ca:	bd70      	pop	{r4, r5, r6, pc}
 80183cc:	0801ad82 	.word	0x0801ad82
 80183d0:	0801aed1 	.word	0x0801aed1

080183d4 <__multadd>:
 80183d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183d8:	4607      	mov	r7, r0
 80183da:	460c      	mov	r4, r1
 80183dc:	461e      	mov	r6, r3
 80183de:	2000      	movs	r0, #0
 80183e0:	690d      	ldr	r5, [r1, #16]
 80183e2:	f101 0c14 	add.w	ip, r1, #20
 80183e6:	f8dc 3000 	ldr.w	r3, [ip]
 80183ea:	3001      	adds	r0, #1
 80183ec:	b299      	uxth	r1, r3
 80183ee:	fb02 6101 	mla	r1, r2, r1, r6
 80183f2:	0c1e      	lsrs	r6, r3, #16
 80183f4:	0c0b      	lsrs	r3, r1, #16
 80183f6:	fb02 3306 	mla	r3, r2, r6, r3
 80183fa:	b289      	uxth	r1, r1
 80183fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018400:	4285      	cmp	r5, r0
 8018402:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018406:	f84c 1b04 	str.w	r1, [ip], #4
 801840a:	dcec      	bgt.n	80183e6 <__multadd+0x12>
 801840c:	b30e      	cbz	r6, 8018452 <__multadd+0x7e>
 801840e:	68a3      	ldr	r3, [r4, #8]
 8018410:	42ab      	cmp	r3, r5
 8018412:	dc19      	bgt.n	8018448 <__multadd+0x74>
 8018414:	6861      	ldr	r1, [r4, #4]
 8018416:	4638      	mov	r0, r7
 8018418:	3101      	adds	r1, #1
 801841a:	f7ff ff79 	bl	8018310 <_Balloc>
 801841e:	4680      	mov	r8, r0
 8018420:	b928      	cbnz	r0, 801842e <__multadd+0x5a>
 8018422:	4602      	mov	r2, r0
 8018424:	21ba      	movs	r1, #186	@ 0xba
 8018426:	4b0c      	ldr	r3, [pc, #48]	@ (8018458 <__multadd+0x84>)
 8018428:	480c      	ldr	r0, [pc, #48]	@ (801845c <__multadd+0x88>)
 801842a:	f7fc fb8b 	bl	8014b44 <__assert_func>
 801842e:	6922      	ldr	r2, [r4, #16]
 8018430:	f104 010c 	add.w	r1, r4, #12
 8018434:	3202      	adds	r2, #2
 8018436:	0092      	lsls	r2, r2, #2
 8018438:	300c      	adds	r0, #12
 801843a:	f7fe fd58 	bl	8016eee <memcpy>
 801843e:	4621      	mov	r1, r4
 8018440:	4638      	mov	r0, r7
 8018442:	f7ff ffa5 	bl	8018390 <_Bfree>
 8018446:	4644      	mov	r4, r8
 8018448:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801844c:	3501      	adds	r5, #1
 801844e:	615e      	str	r6, [r3, #20]
 8018450:	6125      	str	r5, [r4, #16]
 8018452:	4620      	mov	r0, r4
 8018454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018458:	0801ae60 	.word	0x0801ae60
 801845c:	0801aed1 	.word	0x0801aed1

08018460 <__s2b>:
 8018460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018464:	4615      	mov	r5, r2
 8018466:	2209      	movs	r2, #9
 8018468:	461f      	mov	r7, r3
 801846a:	3308      	adds	r3, #8
 801846c:	460c      	mov	r4, r1
 801846e:	fb93 f3f2 	sdiv	r3, r3, r2
 8018472:	4606      	mov	r6, r0
 8018474:	2201      	movs	r2, #1
 8018476:	2100      	movs	r1, #0
 8018478:	429a      	cmp	r2, r3
 801847a:	db09      	blt.n	8018490 <__s2b+0x30>
 801847c:	4630      	mov	r0, r6
 801847e:	f7ff ff47 	bl	8018310 <_Balloc>
 8018482:	b940      	cbnz	r0, 8018496 <__s2b+0x36>
 8018484:	4602      	mov	r2, r0
 8018486:	21d3      	movs	r1, #211	@ 0xd3
 8018488:	4b18      	ldr	r3, [pc, #96]	@ (80184ec <__s2b+0x8c>)
 801848a:	4819      	ldr	r0, [pc, #100]	@ (80184f0 <__s2b+0x90>)
 801848c:	f7fc fb5a 	bl	8014b44 <__assert_func>
 8018490:	0052      	lsls	r2, r2, #1
 8018492:	3101      	adds	r1, #1
 8018494:	e7f0      	b.n	8018478 <__s2b+0x18>
 8018496:	9b08      	ldr	r3, [sp, #32]
 8018498:	2d09      	cmp	r5, #9
 801849a:	6143      	str	r3, [r0, #20]
 801849c:	f04f 0301 	mov.w	r3, #1
 80184a0:	6103      	str	r3, [r0, #16]
 80184a2:	dd16      	ble.n	80184d2 <__s2b+0x72>
 80184a4:	f104 0909 	add.w	r9, r4, #9
 80184a8:	46c8      	mov	r8, r9
 80184aa:	442c      	add	r4, r5
 80184ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80184b0:	4601      	mov	r1, r0
 80184b2:	220a      	movs	r2, #10
 80184b4:	4630      	mov	r0, r6
 80184b6:	3b30      	subs	r3, #48	@ 0x30
 80184b8:	f7ff ff8c 	bl	80183d4 <__multadd>
 80184bc:	45a0      	cmp	r8, r4
 80184be:	d1f5      	bne.n	80184ac <__s2b+0x4c>
 80184c0:	f1a5 0408 	sub.w	r4, r5, #8
 80184c4:	444c      	add	r4, r9
 80184c6:	1b2d      	subs	r5, r5, r4
 80184c8:	1963      	adds	r3, r4, r5
 80184ca:	42bb      	cmp	r3, r7
 80184cc:	db04      	blt.n	80184d8 <__s2b+0x78>
 80184ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184d2:	2509      	movs	r5, #9
 80184d4:	340a      	adds	r4, #10
 80184d6:	e7f6      	b.n	80184c6 <__s2b+0x66>
 80184d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80184dc:	4601      	mov	r1, r0
 80184de:	220a      	movs	r2, #10
 80184e0:	4630      	mov	r0, r6
 80184e2:	3b30      	subs	r3, #48	@ 0x30
 80184e4:	f7ff ff76 	bl	80183d4 <__multadd>
 80184e8:	e7ee      	b.n	80184c8 <__s2b+0x68>
 80184ea:	bf00      	nop
 80184ec:	0801ae60 	.word	0x0801ae60
 80184f0:	0801aed1 	.word	0x0801aed1

080184f4 <__hi0bits>:
 80184f4:	4603      	mov	r3, r0
 80184f6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80184fa:	bf3a      	itte	cc
 80184fc:	0403      	lslcc	r3, r0, #16
 80184fe:	2010      	movcc	r0, #16
 8018500:	2000      	movcs	r0, #0
 8018502:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018506:	bf3c      	itt	cc
 8018508:	021b      	lslcc	r3, r3, #8
 801850a:	3008      	addcc	r0, #8
 801850c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018510:	bf3c      	itt	cc
 8018512:	011b      	lslcc	r3, r3, #4
 8018514:	3004      	addcc	r0, #4
 8018516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801851a:	bf3c      	itt	cc
 801851c:	009b      	lslcc	r3, r3, #2
 801851e:	3002      	addcc	r0, #2
 8018520:	2b00      	cmp	r3, #0
 8018522:	db05      	blt.n	8018530 <__hi0bits+0x3c>
 8018524:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018528:	f100 0001 	add.w	r0, r0, #1
 801852c:	bf08      	it	eq
 801852e:	2020      	moveq	r0, #32
 8018530:	4770      	bx	lr

08018532 <__lo0bits>:
 8018532:	6803      	ldr	r3, [r0, #0]
 8018534:	4602      	mov	r2, r0
 8018536:	f013 0007 	ands.w	r0, r3, #7
 801853a:	d00b      	beq.n	8018554 <__lo0bits+0x22>
 801853c:	07d9      	lsls	r1, r3, #31
 801853e:	d421      	bmi.n	8018584 <__lo0bits+0x52>
 8018540:	0798      	lsls	r0, r3, #30
 8018542:	bf49      	itett	mi
 8018544:	085b      	lsrmi	r3, r3, #1
 8018546:	089b      	lsrpl	r3, r3, #2
 8018548:	2001      	movmi	r0, #1
 801854a:	6013      	strmi	r3, [r2, #0]
 801854c:	bf5c      	itt	pl
 801854e:	2002      	movpl	r0, #2
 8018550:	6013      	strpl	r3, [r2, #0]
 8018552:	4770      	bx	lr
 8018554:	b299      	uxth	r1, r3
 8018556:	b909      	cbnz	r1, 801855c <__lo0bits+0x2a>
 8018558:	2010      	movs	r0, #16
 801855a:	0c1b      	lsrs	r3, r3, #16
 801855c:	b2d9      	uxtb	r1, r3
 801855e:	b909      	cbnz	r1, 8018564 <__lo0bits+0x32>
 8018560:	3008      	adds	r0, #8
 8018562:	0a1b      	lsrs	r3, r3, #8
 8018564:	0719      	lsls	r1, r3, #28
 8018566:	bf04      	itt	eq
 8018568:	091b      	lsreq	r3, r3, #4
 801856a:	3004      	addeq	r0, #4
 801856c:	0799      	lsls	r1, r3, #30
 801856e:	bf04      	itt	eq
 8018570:	089b      	lsreq	r3, r3, #2
 8018572:	3002      	addeq	r0, #2
 8018574:	07d9      	lsls	r1, r3, #31
 8018576:	d403      	bmi.n	8018580 <__lo0bits+0x4e>
 8018578:	085b      	lsrs	r3, r3, #1
 801857a:	f100 0001 	add.w	r0, r0, #1
 801857e:	d003      	beq.n	8018588 <__lo0bits+0x56>
 8018580:	6013      	str	r3, [r2, #0]
 8018582:	4770      	bx	lr
 8018584:	2000      	movs	r0, #0
 8018586:	4770      	bx	lr
 8018588:	2020      	movs	r0, #32
 801858a:	4770      	bx	lr

0801858c <__i2b>:
 801858c:	b510      	push	{r4, lr}
 801858e:	460c      	mov	r4, r1
 8018590:	2101      	movs	r1, #1
 8018592:	f7ff febd 	bl	8018310 <_Balloc>
 8018596:	4602      	mov	r2, r0
 8018598:	b928      	cbnz	r0, 80185a6 <__i2b+0x1a>
 801859a:	f240 1145 	movw	r1, #325	@ 0x145
 801859e:	4b04      	ldr	r3, [pc, #16]	@ (80185b0 <__i2b+0x24>)
 80185a0:	4804      	ldr	r0, [pc, #16]	@ (80185b4 <__i2b+0x28>)
 80185a2:	f7fc facf 	bl	8014b44 <__assert_func>
 80185a6:	2301      	movs	r3, #1
 80185a8:	6144      	str	r4, [r0, #20]
 80185aa:	6103      	str	r3, [r0, #16]
 80185ac:	bd10      	pop	{r4, pc}
 80185ae:	bf00      	nop
 80185b0:	0801ae60 	.word	0x0801ae60
 80185b4:	0801aed1 	.word	0x0801aed1

080185b8 <__multiply>:
 80185b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185bc:	4617      	mov	r7, r2
 80185be:	690a      	ldr	r2, [r1, #16]
 80185c0:	693b      	ldr	r3, [r7, #16]
 80185c2:	4689      	mov	r9, r1
 80185c4:	429a      	cmp	r2, r3
 80185c6:	bfa2      	ittt	ge
 80185c8:	463b      	movge	r3, r7
 80185ca:	460f      	movge	r7, r1
 80185cc:	4699      	movge	r9, r3
 80185ce:	693d      	ldr	r5, [r7, #16]
 80185d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80185d4:	68bb      	ldr	r3, [r7, #8]
 80185d6:	6879      	ldr	r1, [r7, #4]
 80185d8:	eb05 060a 	add.w	r6, r5, sl
 80185dc:	42b3      	cmp	r3, r6
 80185de:	b085      	sub	sp, #20
 80185e0:	bfb8      	it	lt
 80185e2:	3101      	addlt	r1, #1
 80185e4:	f7ff fe94 	bl	8018310 <_Balloc>
 80185e8:	b930      	cbnz	r0, 80185f8 <__multiply+0x40>
 80185ea:	4602      	mov	r2, r0
 80185ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80185f0:	4b40      	ldr	r3, [pc, #256]	@ (80186f4 <__multiply+0x13c>)
 80185f2:	4841      	ldr	r0, [pc, #260]	@ (80186f8 <__multiply+0x140>)
 80185f4:	f7fc faa6 	bl	8014b44 <__assert_func>
 80185f8:	f100 0414 	add.w	r4, r0, #20
 80185fc:	4623      	mov	r3, r4
 80185fe:	2200      	movs	r2, #0
 8018600:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8018604:	4573      	cmp	r3, lr
 8018606:	d320      	bcc.n	801864a <__multiply+0x92>
 8018608:	f107 0814 	add.w	r8, r7, #20
 801860c:	f109 0114 	add.w	r1, r9, #20
 8018610:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8018614:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8018618:	9302      	str	r3, [sp, #8]
 801861a:	1beb      	subs	r3, r5, r7
 801861c:	3b15      	subs	r3, #21
 801861e:	f023 0303 	bic.w	r3, r3, #3
 8018622:	3304      	adds	r3, #4
 8018624:	3715      	adds	r7, #21
 8018626:	42bd      	cmp	r5, r7
 8018628:	bf38      	it	cc
 801862a:	2304      	movcc	r3, #4
 801862c:	9301      	str	r3, [sp, #4]
 801862e:	9b02      	ldr	r3, [sp, #8]
 8018630:	9103      	str	r1, [sp, #12]
 8018632:	428b      	cmp	r3, r1
 8018634:	d80c      	bhi.n	8018650 <__multiply+0x98>
 8018636:	2e00      	cmp	r6, #0
 8018638:	dd03      	ble.n	8018642 <__multiply+0x8a>
 801863a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801863e:	2b00      	cmp	r3, #0
 8018640:	d055      	beq.n	80186ee <__multiply+0x136>
 8018642:	6106      	str	r6, [r0, #16]
 8018644:	b005      	add	sp, #20
 8018646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801864a:	f843 2b04 	str.w	r2, [r3], #4
 801864e:	e7d9      	b.n	8018604 <__multiply+0x4c>
 8018650:	f8b1 a000 	ldrh.w	sl, [r1]
 8018654:	f1ba 0f00 	cmp.w	sl, #0
 8018658:	d01f      	beq.n	801869a <__multiply+0xe2>
 801865a:	46c4      	mov	ip, r8
 801865c:	46a1      	mov	r9, r4
 801865e:	2700      	movs	r7, #0
 8018660:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018664:	f8d9 3000 	ldr.w	r3, [r9]
 8018668:	fa1f fb82 	uxth.w	fp, r2
 801866c:	b29b      	uxth	r3, r3
 801866e:	fb0a 330b 	mla	r3, sl, fp, r3
 8018672:	443b      	add	r3, r7
 8018674:	f8d9 7000 	ldr.w	r7, [r9]
 8018678:	0c12      	lsrs	r2, r2, #16
 801867a:	0c3f      	lsrs	r7, r7, #16
 801867c:	fb0a 7202 	mla	r2, sl, r2, r7
 8018680:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8018684:	b29b      	uxth	r3, r3
 8018686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801868a:	4565      	cmp	r5, ip
 801868c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8018690:	f849 3b04 	str.w	r3, [r9], #4
 8018694:	d8e4      	bhi.n	8018660 <__multiply+0xa8>
 8018696:	9b01      	ldr	r3, [sp, #4]
 8018698:	50e7      	str	r7, [r4, r3]
 801869a:	9b03      	ldr	r3, [sp, #12]
 801869c:	3104      	adds	r1, #4
 801869e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80186a2:	f1b9 0f00 	cmp.w	r9, #0
 80186a6:	d020      	beq.n	80186ea <__multiply+0x132>
 80186a8:	4647      	mov	r7, r8
 80186aa:	46a4      	mov	ip, r4
 80186ac:	f04f 0a00 	mov.w	sl, #0
 80186b0:	6823      	ldr	r3, [r4, #0]
 80186b2:	f8b7 b000 	ldrh.w	fp, [r7]
 80186b6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80186ba:	b29b      	uxth	r3, r3
 80186bc:	fb09 220b 	mla	r2, r9, fp, r2
 80186c0:	4452      	add	r2, sl
 80186c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80186c6:	f84c 3b04 	str.w	r3, [ip], #4
 80186ca:	f857 3b04 	ldr.w	r3, [r7], #4
 80186ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80186d2:	f8bc 3000 	ldrh.w	r3, [ip]
 80186d6:	42bd      	cmp	r5, r7
 80186d8:	fb09 330a 	mla	r3, r9, sl, r3
 80186dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80186e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80186e4:	d8e5      	bhi.n	80186b2 <__multiply+0xfa>
 80186e6:	9a01      	ldr	r2, [sp, #4]
 80186e8:	50a3      	str	r3, [r4, r2]
 80186ea:	3404      	adds	r4, #4
 80186ec:	e79f      	b.n	801862e <__multiply+0x76>
 80186ee:	3e01      	subs	r6, #1
 80186f0:	e7a1      	b.n	8018636 <__multiply+0x7e>
 80186f2:	bf00      	nop
 80186f4:	0801ae60 	.word	0x0801ae60
 80186f8:	0801aed1 	.word	0x0801aed1

080186fc <__pow5mult>:
 80186fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018700:	4615      	mov	r5, r2
 8018702:	f012 0203 	ands.w	r2, r2, #3
 8018706:	4607      	mov	r7, r0
 8018708:	460e      	mov	r6, r1
 801870a:	d007      	beq.n	801871c <__pow5mult+0x20>
 801870c:	4c25      	ldr	r4, [pc, #148]	@ (80187a4 <__pow5mult+0xa8>)
 801870e:	3a01      	subs	r2, #1
 8018710:	2300      	movs	r3, #0
 8018712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018716:	f7ff fe5d 	bl	80183d4 <__multadd>
 801871a:	4606      	mov	r6, r0
 801871c:	10ad      	asrs	r5, r5, #2
 801871e:	d03d      	beq.n	801879c <__pow5mult+0xa0>
 8018720:	69fc      	ldr	r4, [r7, #28]
 8018722:	b97c      	cbnz	r4, 8018744 <__pow5mult+0x48>
 8018724:	2010      	movs	r0, #16
 8018726:	f7fc fa33 	bl	8014b90 <malloc>
 801872a:	4602      	mov	r2, r0
 801872c:	61f8      	str	r0, [r7, #28]
 801872e:	b928      	cbnz	r0, 801873c <__pow5mult+0x40>
 8018730:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018734:	4b1c      	ldr	r3, [pc, #112]	@ (80187a8 <__pow5mult+0xac>)
 8018736:	481d      	ldr	r0, [pc, #116]	@ (80187ac <__pow5mult+0xb0>)
 8018738:	f7fc fa04 	bl	8014b44 <__assert_func>
 801873c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018740:	6004      	str	r4, [r0, #0]
 8018742:	60c4      	str	r4, [r0, #12]
 8018744:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801874c:	b94c      	cbnz	r4, 8018762 <__pow5mult+0x66>
 801874e:	f240 2171 	movw	r1, #625	@ 0x271
 8018752:	4638      	mov	r0, r7
 8018754:	f7ff ff1a 	bl	801858c <__i2b>
 8018758:	2300      	movs	r3, #0
 801875a:	4604      	mov	r4, r0
 801875c:	f8c8 0008 	str.w	r0, [r8, #8]
 8018760:	6003      	str	r3, [r0, #0]
 8018762:	f04f 0900 	mov.w	r9, #0
 8018766:	07eb      	lsls	r3, r5, #31
 8018768:	d50a      	bpl.n	8018780 <__pow5mult+0x84>
 801876a:	4631      	mov	r1, r6
 801876c:	4622      	mov	r2, r4
 801876e:	4638      	mov	r0, r7
 8018770:	f7ff ff22 	bl	80185b8 <__multiply>
 8018774:	4680      	mov	r8, r0
 8018776:	4631      	mov	r1, r6
 8018778:	4638      	mov	r0, r7
 801877a:	f7ff fe09 	bl	8018390 <_Bfree>
 801877e:	4646      	mov	r6, r8
 8018780:	106d      	asrs	r5, r5, #1
 8018782:	d00b      	beq.n	801879c <__pow5mult+0xa0>
 8018784:	6820      	ldr	r0, [r4, #0]
 8018786:	b938      	cbnz	r0, 8018798 <__pow5mult+0x9c>
 8018788:	4622      	mov	r2, r4
 801878a:	4621      	mov	r1, r4
 801878c:	4638      	mov	r0, r7
 801878e:	f7ff ff13 	bl	80185b8 <__multiply>
 8018792:	6020      	str	r0, [r4, #0]
 8018794:	f8c0 9000 	str.w	r9, [r0]
 8018798:	4604      	mov	r4, r0
 801879a:	e7e4      	b.n	8018766 <__pow5mult+0x6a>
 801879c:	4630      	mov	r0, r6
 801879e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187a2:	bf00      	nop
 80187a4:	0801b0ac 	.word	0x0801b0ac
 80187a8:	0801ad82 	.word	0x0801ad82
 80187ac:	0801aed1 	.word	0x0801aed1

080187b0 <__lshift>:
 80187b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187b4:	460c      	mov	r4, r1
 80187b6:	4607      	mov	r7, r0
 80187b8:	4691      	mov	r9, r2
 80187ba:	6923      	ldr	r3, [r4, #16]
 80187bc:	6849      	ldr	r1, [r1, #4]
 80187be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80187c2:	68a3      	ldr	r3, [r4, #8]
 80187c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80187c8:	f108 0601 	add.w	r6, r8, #1
 80187cc:	42b3      	cmp	r3, r6
 80187ce:	db0b      	blt.n	80187e8 <__lshift+0x38>
 80187d0:	4638      	mov	r0, r7
 80187d2:	f7ff fd9d 	bl	8018310 <_Balloc>
 80187d6:	4605      	mov	r5, r0
 80187d8:	b948      	cbnz	r0, 80187ee <__lshift+0x3e>
 80187da:	4602      	mov	r2, r0
 80187dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80187e0:	4b27      	ldr	r3, [pc, #156]	@ (8018880 <__lshift+0xd0>)
 80187e2:	4828      	ldr	r0, [pc, #160]	@ (8018884 <__lshift+0xd4>)
 80187e4:	f7fc f9ae 	bl	8014b44 <__assert_func>
 80187e8:	3101      	adds	r1, #1
 80187ea:	005b      	lsls	r3, r3, #1
 80187ec:	e7ee      	b.n	80187cc <__lshift+0x1c>
 80187ee:	2300      	movs	r3, #0
 80187f0:	f100 0114 	add.w	r1, r0, #20
 80187f4:	f100 0210 	add.w	r2, r0, #16
 80187f8:	4618      	mov	r0, r3
 80187fa:	4553      	cmp	r3, sl
 80187fc:	db33      	blt.n	8018866 <__lshift+0xb6>
 80187fe:	6920      	ldr	r0, [r4, #16]
 8018800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018804:	f104 0314 	add.w	r3, r4, #20
 8018808:	f019 091f 	ands.w	r9, r9, #31
 801880c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018810:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018814:	d02b      	beq.n	801886e <__lshift+0xbe>
 8018816:	468a      	mov	sl, r1
 8018818:	2200      	movs	r2, #0
 801881a:	f1c9 0e20 	rsb	lr, r9, #32
 801881e:	6818      	ldr	r0, [r3, #0]
 8018820:	fa00 f009 	lsl.w	r0, r0, r9
 8018824:	4310      	orrs	r0, r2
 8018826:	f84a 0b04 	str.w	r0, [sl], #4
 801882a:	f853 2b04 	ldr.w	r2, [r3], #4
 801882e:	459c      	cmp	ip, r3
 8018830:	fa22 f20e 	lsr.w	r2, r2, lr
 8018834:	d8f3      	bhi.n	801881e <__lshift+0x6e>
 8018836:	ebac 0304 	sub.w	r3, ip, r4
 801883a:	3b15      	subs	r3, #21
 801883c:	f023 0303 	bic.w	r3, r3, #3
 8018840:	3304      	adds	r3, #4
 8018842:	f104 0015 	add.w	r0, r4, #21
 8018846:	4560      	cmp	r0, ip
 8018848:	bf88      	it	hi
 801884a:	2304      	movhi	r3, #4
 801884c:	50ca      	str	r2, [r1, r3]
 801884e:	b10a      	cbz	r2, 8018854 <__lshift+0xa4>
 8018850:	f108 0602 	add.w	r6, r8, #2
 8018854:	3e01      	subs	r6, #1
 8018856:	4638      	mov	r0, r7
 8018858:	4621      	mov	r1, r4
 801885a:	612e      	str	r6, [r5, #16]
 801885c:	f7ff fd98 	bl	8018390 <_Bfree>
 8018860:	4628      	mov	r0, r5
 8018862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018866:	f842 0f04 	str.w	r0, [r2, #4]!
 801886a:	3301      	adds	r3, #1
 801886c:	e7c5      	b.n	80187fa <__lshift+0x4a>
 801886e:	3904      	subs	r1, #4
 8018870:	f853 2b04 	ldr.w	r2, [r3], #4
 8018874:	459c      	cmp	ip, r3
 8018876:	f841 2f04 	str.w	r2, [r1, #4]!
 801887a:	d8f9      	bhi.n	8018870 <__lshift+0xc0>
 801887c:	e7ea      	b.n	8018854 <__lshift+0xa4>
 801887e:	bf00      	nop
 8018880:	0801ae60 	.word	0x0801ae60
 8018884:	0801aed1 	.word	0x0801aed1

08018888 <__mcmp>:
 8018888:	4603      	mov	r3, r0
 801888a:	690a      	ldr	r2, [r1, #16]
 801888c:	6900      	ldr	r0, [r0, #16]
 801888e:	b530      	push	{r4, r5, lr}
 8018890:	1a80      	subs	r0, r0, r2
 8018892:	d10e      	bne.n	80188b2 <__mcmp+0x2a>
 8018894:	3314      	adds	r3, #20
 8018896:	3114      	adds	r1, #20
 8018898:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801889c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80188a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80188a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80188a8:	4295      	cmp	r5, r2
 80188aa:	d003      	beq.n	80188b4 <__mcmp+0x2c>
 80188ac:	d205      	bcs.n	80188ba <__mcmp+0x32>
 80188ae:	f04f 30ff 	mov.w	r0, #4294967295
 80188b2:	bd30      	pop	{r4, r5, pc}
 80188b4:	42a3      	cmp	r3, r4
 80188b6:	d3f3      	bcc.n	80188a0 <__mcmp+0x18>
 80188b8:	e7fb      	b.n	80188b2 <__mcmp+0x2a>
 80188ba:	2001      	movs	r0, #1
 80188bc:	e7f9      	b.n	80188b2 <__mcmp+0x2a>
	...

080188c0 <__mdiff>:
 80188c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188c4:	4689      	mov	r9, r1
 80188c6:	4606      	mov	r6, r0
 80188c8:	4611      	mov	r1, r2
 80188ca:	4648      	mov	r0, r9
 80188cc:	4614      	mov	r4, r2
 80188ce:	f7ff ffdb 	bl	8018888 <__mcmp>
 80188d2:	1e05      	subs	r5, r0, #0
 80188d4:	d112      	bne.n	80188fc <__mdiff+0x3c>
 80188d6:	4629      	mov	r1, r5
 80188d8:	4630      	mov	r0, r6
 80188da:	f7ff fd19 	bl	8018310 <_Balloc>
 80188de:	4602      	mov	r2, r0
 80188e0:	b928      	cbnz	r0, 80188ee <__mdiff+0x2e>
 80188e2:	f240 2137 	movw	r1, #567	@ 0x237
 80188e6:	4b3e      	ldr	r3, [pc, #248]	@ (80189e0 <__mdiff+0x120>)
 80188e8:	483e      	ldr	r0, [pc, #248]	@ (80189e4 <__mdiff+0x124>)
 80188ea:	f7fc f92b 	bl	8014b44 <__assert_func>
 80188ee:	2301      	movs	r3, #1
 80188f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80188f4:	4610      	mov	r0, r2
 80188f6:	b003      	add	sp, #12
 80188f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188fc:	bfbc      	itt	lt
 80188fe:	464b      	movlt	r3, r9
 8018900:	46a1      	movlt	r9, r4
 8018902:	4630      	mov	r0, r6
 8018904:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018908:	bfba      	itte	lt
 801890a:	461c      	movlt	r4, r3
 801890c:	2501      	movlt	r5, #1
 801890e:	2500      	movge	r5, #0
 8018910:	f7ff fcfe 	bl	8018310 <_Balloc>
 8018914:	4602      	mov	r2, r0
 8018916:	b918      	cbnz	r0, 8018920 <__mdiff+0x60>
 8018918:	f240 2145 	movw	r1, #581	@ 0x245
 801891c:	4b30      	ldr	r3, [pc, #192]	@ (80189e0 <__mdiff+0x120>)
 801891e:	e7e3      	b.n	80188e8 <__mdiff+0x28>
 8018920:	f100 0b14 	add.w	fp, r0, #20
 8018924:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018928:	f109 0310 	add.w	r3, r9, #16
 801892c:	60c5      	str	r5, [r0, #12]
 801892e:	f04f 0c00 	mov.w	ip, #0
 8018932:	f109 0514 	add.w	r5, r9, #20
 8018936:	46d9      	mov	r9, fp
 8018938:	6926      	ldr	r6, [r4, #16]
 801893a:	f104 0e14 	add.w	lr, r4, #20
 801893e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018942:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018946:	9301      	str	r3, [sp, #4]
 8018948:	9b01      	ldr	r3, [sp, #4]
 801894a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801894e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018952:	b281      	uxth	r1, r0
 8018954:	9301      	str	r3, [sp, #4]
 8018956:	fa1f f38a 	uxth.w	r3, sl
 801895a:	1a5b      	subs	r3, r3, r1
 801895c:	0c00      	lsrs	r0, r0, #16
 801895e:	4463      	add	r3, ip
 8018960:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018964:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018968:	b29b      	uxth	r3, r3
 801896a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801896e:	4576      	cmp	r6, lr
 8018970:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018974:	f849 3b04 	str.w	r3, [r9], #4
 8018978:	d8e6      	bhi.n	8018948 <__mdiff+0x88>
 801897a:	1b33      	subs	r3, r6, r4
 801897c:	3b15      	subs	r3, #21
 801897e:	f023 0303 	bic.w	r3, r3, #3
 8018982:	3415      	adds	r4, #21
 8018984:	3304      	adds	r3, #4
 8018986:	42a6      	cmp	r6, r4
 8018988:	bf38      	it	cc
 801898a:	2304      	movcc	r3, #4
 801898c:	441d      	add	r5, r3
 801898e:	445b      	add	r3, fp
 8018990:	461e      	mov	r6, r3
 8018992:	462c      	mov	r4, r5
 8018994:	4544      	cmp	r4, r8
 8018996:	d30e      	bcc.n	80189b6 <__mdiff+0xf6>
 8018998:	f108 0103 	add.w	r1, r8, #3
 801899c:	1b49      	subs	r1, r1, r5
 801899e:	f021 0103 	bic.w	r1, r1, #3
 80189a2:	3d03      	subs	r5, #3
 80189a4:	45a8      	cmp	r8, r5
 80189a6:	bf38      	it	cc
 80189a8:	2100      	movcc	r1, #0
 80189aa:	440b      	add	r3, r1
 80189ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80189b0:	b199      	cbz	r1, 80189da <__mdiff+0x11a>
 80189b2:	6117      	str	r7, [r2, #16]
 80189b4:	e79e      	b.n	80188f4 <__mdiff+0x34>
 80189b6:	46e6      	mov	lr, ip
 80189b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80189bc:	fa1f fc81 	uxth.w	ip, r1
 80189c0:	44f4      	add	ip, lr
 80189c2:	0c08      	lsrs	r0, r1, #16
 80189c4:	4471      	add	r1, lr
 80189c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80189ca:	b289      	uxth	r1, r1
 80189cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80189d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80189d4:	f846 1b04 	str.w	r1, [r6], #4
 80189d8:	e7dc      	b.n	8018994 <__mdiff+0xd4>
 80189da:	3f01      	subs	r7, #1
 80189dc:	e7e6      	b.n	80189ac <__mdiff+0xec>
 80189de:	bf00      	nop
 80189e0:	0801ae60 	.word	0x0801ae60
 80189e4:	0801aed1 	.word	0x0801aed1

080189e8 <__ulp>:
 80189e8:	4b0e      	ldr	r3, [pc, #56]	@ (8018a24 <__ulp+0x3c>)
 80189ea:	400b      	ands	r3, r1
 80189ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	dc08      	bgt.n	8018a06 <__ulp+0x1e>
 80189f4:	425b      	negs	r3, r3
 80189f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80189fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80189fe:	da04      	bge.n	8018a0a <__ulp+0x22>
 8018a00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018a04:	4113      	asrs	r3, r2
 8018a06:	2200      	movs	r2, #0
 8018a08:	e008      	b.n	8018a1c <__ulp+0x34>
 8018a0a:	f1a2 0314 	sub.w	r3, r2, #20
 8018a0e:	2b1e      	cmp	r3, #30
 8018a10:	bfd6      	itet	le
 8018a12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018a16:	2201      	movgt	r2, #1
 8018a18:	40da      	lsrle	r2, r3
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	4610      	mov	r0, r2
 8018a20:	4770      	bx	lr
 8018a22:	bf00      	nop
 8018a24:	7ff00000 	.word	0x7ff00000

08018a28 <__b2d>:
 8018a28:	6902      	ldr	r2, [r0, #16]
 8018a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a2c:	f100 0614 	add.w	r6, r0, #20
 8018a30:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8018a34:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8018a38:	4f1e      	ldr	r7, [pc, #120]	@ (8018ab4 <__b2d+0x8c>)
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	f7ff fd5a 	bl	80184f4 <__hi0bits>
 8018a40:	4603      	mov	r3, r0
 8018a42:	f1c0 0020 	rsb	r0, r0, #32
 8018a46:	2b0a      	cmp	r3, #10
 8018a48:	f1a2 0504 	sub.w	r5, r2, #4
 8018a4c:	6008      	str	r0, [r1, #0]
 8018a4e:	dc12      	bgt.n	8018a76 <__b2d+0x4e>
 8018a50:	42ae      	cmp	r6, r5
 8018a52:	bf2c      	ite	cs
 8018a54:	2200      	movcs	r2, #0
 8018a56:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8018a5a:	f1c3 0c0b 	rsb	ip, r3, #11
 8018a5e:	3315      	adds	r3, #21
 8018a60:	fa24 fe0c 	lsr.w	lr, r4, ip
 8018a64:	fa04 f303 	lsl.w	r3, r4, r3
 8018a68:	fa22 f20c 	lsr.w	r2, r2, ip
 8018a6c:	ea4e 0107 	orr.w	r1, lr, r7
 8018a70:	431a      	orrs	r2, r3
 8018a72:	4610      	mov	r0, r2
 8018a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a76:	42ae      	cmp	r6, r5
 8018a78:	bf36      	itet	cc
 8018a7a:	f1a2 0508 	subcc.w	r5, r2, #8
 8018a7e:	2200      	movcs	r2, #0
 8018a80:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8018a84:	3b0b      	subs	r3, #11
 8018a86:	d012      	beq.n	8018aae <__b2d+0x86>
 8018a88:	f1c3 0720 	rsb	r7, r3, #32
 8018a8c:	fa22 f107 	lsr.w	r1, r2, r7
 8018a90:	409c      	lsls	r4, r3
 8018a92:	430c      	orrs	r4, r1
 8018a94:	42b5      	cmp	r5, r6
 8018a96:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8018a9a:	bf94      	ite	ls
 8018a9c:	2400      	movls	r4, #0
 8018a9e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8018aa2:	409a      	lsls	r2, r3
 8018aa4:	40fc      	lsrs	r4, r7
 8018aa6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8018aaa:	4322      	orrs	r2, r4
 8018aac:	e7e1      	b.n	8018a72 <__b2d+0x4a>
 8018aae:	ea44 0107 	orr.w	r1, r4, r7
 8018ab2:	e7de      	b.n	8018a72 <__b2d+0x4a>
 8018ab4:	3ff00000 	.word	0x3ff00000

08018ab8 <__d2b>:
 8018ab8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8018abc:	2101      	movs	r1, #1
 8018abe:	4690      	mov	r8, r2
 8018ac0:	4699      	mov	r9, r3
 8018ac2:	9e08      	ldr	r6, [sp, #32]
 8018ac4:	f7ff fc24 	bl	8018310 <_Balloc>
 8018ac8:	4604      	mov	r4, r0
 8018aca:	b930      	cbnz	r0, 8018ada <__d2b+0x22>
 8018acc:	4602      	mov	r2, r0
 8018ace:	f240 310f 	movw	r1, #783	@ 0x30f
 8018ad2:	4b23      	ldr	r3, [pc, #140]	@ (8018b60 <__d2b+0xa8>)
 8018ad4:	4823      	ldr	r0, [pc, #140]	@ (8018b64 <__d2b+0xac>)
 8018ad6:	f7fc f835 	bl	8014b44 <__assert_func>
 8018ada:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018ade:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018ae2:	b10d      	cbz	r5, 8018ae8 <__d2b+0x30>
 8018ae4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018ae8:	9301      	str	r3, [sp, #4]
 8018aea:	f1b8 0300 	subs.w	r3, r8, #0
 8018aee:	d024      	beq.n	8018b3a <__d2b+0x82>
 8018af0:	4668      	mov	r0, sp
 8018af2:	9300      	str	r3, [sp, #0]
 8018af4:	f7ff fd1d 	bl	8018532 <__lo0bits>
 8018af8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018afc:	b1d8      	cbz	r0, 8018b36 <__d2b+0x7e>
 8018afe:	f1c0 0320 	rsb	r3, r0, #32
 8018b02:	fa02 f303 	lsl.w	r3, r2, r3
 8018b06:	430b      	orrs	r3, r1
 8018b08:	40c2      	lsrs	r2, r0
 8018b0a:	6163      	str	r3, [r4, #20]
 8018b0c:	9201      	str	r2, [sp, #4]
 8018b0e:	9b01      	ldr	r3, [sp, #4]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	bf0c      	ite	eq
 8018b14:	2201      	moveq	r2, #1
 8018b16:	2202      	movne	r2, #2
 8018b18:	61a3      	str	r3, [r4, #24]
 8018b1a:	6122      	str	r2, [r4, #16]
 8018b1c:	b1ad      	cbz	r5, 8018b4a <__d2b+0x92>
 8018b1e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018b22:	4405      	add	r5, r0
 8018b24:	6035      	str	r5, [r6, #0]
 8018b26:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b2c:	6018      	str	r0, [r3, #0]
 8018b2e:	4620      	mov	r0, r4
 8018b30:	b002      	add	sp, #8
 8018b32:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8018b36:	6161      	str	r1, [r4, #20]
 8018b38:	e7e9      	b.n	8018b0e <__d2b+0x56>
 8018b3a:	a801      	add	r0, sp, #4
 8018b3c:	f7ff fcf9 	bl	8018532 <__lo0bits>
 8018b40:	9b01      	ldr	r3, [sp, #4]
 8018b42:	2201      	movs	r2, #1
 8018b44:	6163      	str	r3, [r4, #20]
 8018b46:	3020      	adds	r0, #32
 8018b48:	e7e7      	b.n	8018b1a <__d2b+0x62>
 8018b4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018b4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018b52:	6030      	str	r0, [r6, #0]
 8018b54:	6918      	ldr	r0, [r3, #16]
 8018b56:	f7ff fccd 	bl	80184f4 <__hi0bits>
 8018b5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018b5e:	e7e4      	b.n	8018b2a <__d2b+0x72>
 8018b60:	0801ae60 	.word	0x0801ae60
 8018b64:	0801aed1 	.word	0x0801aed1

08018b68 <__ratio>:
 8018b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b6c:	b085      	sub	sp, #20
 8018b6e:	e9cd 1000 	strd	r1, r0, [sp]
 8018b72:	a902      	add	r1, sp, #8
 8018b74:	f7ff ff58 	bl	8018a28 <__b2d>
 8018b78:	468b      	mov	fp, r1
 8018b7a:	4606      	mov	r6, r0
 8018b7c:	460f      	mov	r7, r1
 8018b7e:	9800      	ldr	r0, [sp, #0]
 8018b80:	a903      	add	r1, sp, #12
 8018b82:	f7ff ff51 	bl	8018a28 <__b2d>
 8018b86:	460d      	mov	r5, r1
 8018b88:	9b01      	ldr	r3, [sp, #4]
 8018b8a:	4689      	mov	r9, r1
 8018b8c:	6919      	ldr	r1, [r3, #16]
 8018b8e:	9b00      	ldr	r3, [sp, #0]
 8018b90:	4604      	mov	r4, r0
 8018b92:	691b      	ldr	r3, [r3, #16]
 8018b94:	4630      	mov	r0, r6
 8018b96:	1ac9      	subs	r1, r1, r3
 8018b98:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8018b9c:	1a9b      	subs	r3, r3, r2
 8018b9e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	bfcd      	iteet	gt
 8018ba6:	463a      	movgt	r2, r7
 8018ba8:	462a      	movle	r2, r5
 8018baa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018bae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018bb2:	bfd8      	it	le
 8018bb4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8018bb8:	464b      	mov	r3, r9
 8018bba:	4622      	mov	r2, r4
 8018bbc:	4659      	mov	r1, fp
 8018bbe:	f7e7 fdbf 	bl	8000740 <__aeabi_ddiv>
 8018bc2:	b005      	add	sp, #20
 8018bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018bc8 <__copybits>:
 8018bc8:	3901      	subs	r1, #1
 8018bca:	b570      	push	{r4, r5, r6, lr}
 8018bcc:	1149      	asrs	r1, r1, #5
 8018bce:	6914      	ldr	r4, [r2, #16]
 8018bd0:	3101      	adds	r1, #1
 8018bd2:	f102 0314 	add.w	r3, r2, #20
 8018bd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018bda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018bde:	1f05      	subs	r5, r0, #4
 8018be0:	42a3      	cmp	r3, r4
 8018be2:	d30c      	bcc.n	8018bfe <__copybits+0x36>
 8018be4:	1aa3      	subs	r3, r4, r2
 8018be6:	3b11      	subs	r3, #17
 8018be8:	f023 0303 	bic.w	r3, r3, #3
 8018bec:	3211      	adds	r2, #17
 8018bee:	42a2      	cmp	r2, r4
 8018bf0:	bf88      	it	hi
 8018bf2:	2300      	movhi	r3, #0
 8018bf4:	4418      	add	r0, r3
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	4288      	cmp	r0, r1
 8018bfa:	d305      	bcc.n	8018c08 <__copybits+0x40>
 8018bfc:	bd70      	pop	{r4, r5, r6, pc}
 8018bfe:	f853 6b04 	ldr.w	r6, [r3], #4
 8018c02:	f845 6f04 	str.w	r6, [r5, #4]!
 8018c06:	e7eb      	b.n	8018be0 <__copybits+0x18>
 8018c08:	f840 3b04 	str.w	r3, [r0], #4
 8018c0c:	e7f4      	b.n	8018bf8 <__copybits+0x30>

08018c0e <__any_on>:
 8018c0e:	f100 0214 	add.w	r2, r0, #20
 8018c12:	6900      	ldr	r0, [r0, #16]
 8018c14:	114b      	asrs	r3, r1, #5
 8018c16:	4298      	cmp	r0, r3
 8018c18:	b510      	push	{r4, lr}
 8018c1a:	db11      	blt.n	8018c40 <__any_on+0x32>
 8018c1c:	dd0a      	ble.n	8018c34 <__any_on+0x26>
 8018c1e:	f011 011f 	ands.w	r1, r1, #31
 8018c22:	d007      	beq.n	8018c34 <__any_on+0x26>
 8018c24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018c28:	fa24 f001 	lsr.w	r0, r4, r1
 8018c2c:	fa00 f101 	lsl.w	r1, r0, r1
 8018c30:	428c      	cmp	r4, r1
 8018c32:	d10b      	bne.n	8018c4c <__any_on+0x3e>
 8018c34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c38:	4293      	cmp	r3, r2
 8018c3a:	d803      	bhi.n	8018c44 <__any_on+0x36>
 8018c3c:	2000      	movs	r0, #0
 8018c3e:	bd10      	pop	{r4, pc}
 8018c40:	4603      	mov	r3, r0
 8018c42:	e7f7      	b.n	8018c34 <__any_on+0x26>
 8018c44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c48:	2900      	cmp	r1, #0
 8018c4a:	d0f5      	beq.n	8018c38 <__any_on+0x2a>
 8018c4c:	2001      	movs	r0, #1
 8018c4e:	e7f6      	b.n	8018c3e <__any_on+0x30>

08018c50 <__ascii_wctomb>:
 8018c50:	4603      	mov	r3, r0
 8018c52:	4608      	mov	r0, r1
 8018c54:	b141      	cbz	r1, 8018c68 <__ascii_wctomb+0x18>
 8018c56:	2aff      	cmp	r2, #255	@ 0xff
 8018c58:	d904      	bls.n	8018c64 <__ascii_wctomb+0x14>
 8018c5a:	228a      	movs	r2, #138	@ 0x8a
 8018c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018c60:	601a      	str	r2, [r3, #0]
 8018c62:	4770      	bx	lr
 8018c64:	2001      	movs	r0, #1
 8018c66:	700a      	strb	r2, [r1, #0]
 8018c68:	4770      	bx	lr

08018c6a <__ssputs_r>:
 8018c6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c6e:	461f      	mov	r7, r3
 8018c70:	688e      	ldr	r6, [r1, #8]
 8018c72:	4682      	mov	sl, r0
 8018c74:	42be      	cmp	r6, r7
 8018c76:	460c      	mov	r4, r1
 8018c78:	4690      	mov	r8, r2
 8018c7a:	680b      	ldr	r3, [r1, #0]
 8018c7c:	d82d      	bhi.n	8018cda <__ssputs_r+0x70>
 8018c7e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018c82:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018c86:	d026      	beq.n	8018cd6 <__ssputs_r+0x6c>
 8018c88:	6965      	ldr	r5, [r4, #20]
 8018c8a:	6909      	ldr	r1, [r1, #16]
 8018c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c90:	eba3 0901 	sub.w	r9, r3, r1
 8018c94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018c98:	1c7b      	adds	r3, r7, #1
 8018c9a:	444b      	add	r3, r9
 8018c9c:	106d      	asrs	r5, r5, #1
 8018c9e:	429d      	cmp	r5, r3
 8018ca0:	bf38      	it	cc
 8018ca2:	461d      	movcc	r5, r3
 8018ca4:	0553      	lsls	r3, r2, #21
 8018ca6:	d527      	bpl.n	8018cf8 <__ssputs_r+0x8e>
 8018ca8:	4629      	mov	r1, r5
 8018caa:	f7fb ffa3 	bl	8014bf4 <_malloc_r>
 8018cae:	4606      	mov	r6, r0
 8018cb0:	b360      	cbz	r0, 8018d0c <__ssputs_r+0xa2>
 8018cb2:	464a      	mov	r2, r9
 8018cb4:	6921      	ldr	r1, [r4, #16]
 8018cb6:	f7fe f91a 	bl	8016eee <memcpy>
 8018cba:	89a3      	ldrh	r3, [r4, #12]
 8018cbc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018cc4:	81a3      	strh	r3, [r4, #12]
 8018cc6:	6126      	str	r6, [r4, #16]
 8018cc8:	444e      	add	r6, r9
 8018cca:	6026      	str	r6, [r4, #0]
 8018ccc:	463e      	mov	r6, r7
 8018cce:	6165      	str	r5, [r4, #20]
 8018cd0:	eba5 0509 	sub.w	r5, r5, r9
 8018cd4:	60a5      	str	r5, [r4, #8]
 8018cd6:	42be      	cmp	r6, r7
 8018cd8:	d900      	bls.n	8018cdc <__ssputs_r+0x72>
 8018cda:	463e      	mov	r6, r7
 8018cdc:	4632      	mov	r2, r6
 8018cde:	4641      	mov	r1, r8
 8018ce0:	6820      	ldr	r0, [r4, #0]
 8018ce2:	f000 feed 	bl	8019ac0 <memmove>
 8018ce6:	2000      	movs	r0, #0
 8018ce8:	68a3      	ldr	r3, [r4, #8]
 8018cea:	1b9b      	subs	r3, r3, r6
 8018cec:	60a3      	str	r3, [r4, #8]
 8018cee:	6823      	ldr	r3, [r4, #0]
 8018cf0:	4433      	add	r3, r6
 8018cf2:	6023      	str	r3, [r4, #0]
 8018cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cf8:	462a      	mov	r2, r5
 8018cfa:	f000 ff75 	bl	8019be8 <_realloc_r>
 8018cfe:	4606      	mov	r6, r0
 8018d00:	2800      	cmp	r0, #0
 8018d02:	d1e0      	bne.n	8018cc6 <__ssputs_r+0x5c>
 8018d04:	4650      	mov	r0, sl
 8018d06:	6921      	ldr	r1, [r4, #16]
 8018d08:	f7fe ff6e 	bl	8017be8 <_free_r>
 8018d0c:	230c      	movs	r3, #12
 8018d0e:	f8ca 3000 	str.w	r3, [sl]
 8018d12:	89a3      	ldrh	r3, [r4, #12]
 8018d14:	f04f 30ff 	mov.w	r0, #4294967295
 8018d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d1c:	81a3      	strh	r3, [r4, #12]
 8018d1e:	e7e9      	b.n	8018cf4 <__ssputs_r+0x8a>

08018d20 <_svfiprintf_r>:
 8018d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d24:	4698      	mov	r8, r3
 8018d26:	898b      	ldrh	r3, [r1, #12]
 8018d28:	4607      	mov	r7, r0
 8018d2a:	061b      	lsls	r3, r3, #24
 8018d2c:	460d      	mov	r5, r1
 8018d2e:	4614      	mov	r4, r2
 8018d30:	b09d      	sub	sp, #116	@ 0x74
 8018d32:	d510      	bpl.n	8018d56 <_svfiprintf_r+0x36>
 8018d34:	690b      	ldr	r3, [r1, #16]
 8018d36:	b973      	cbnz	r3, 8018d56 <_svfiprintf_r+0x36>
 8018d38:	2140      	movs	r1, #64	@ 0x40
 8018d3a:	f7fb ff5b 	bl	8014bf4 <_malloc_r>
 8018d3e:	6028      	str	r0, [r5, #0]
 8018d40:	6128      	str	r0, [r5, #16]
 8018d42:	b930      	cbnz	r0, 8018d52 <_svfiprintf_r+0x32>
 8018d44:	230c      	movs	r3, #12
 8018d46:	603b      	str	r3, [r7, #0]
 8018d48:	f04f 30ff 	mov.w	r0, #4294967295
 8018d4c:	b01d      	add	sp, #116	@ 0x74
 8018d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d52:	2340      	movs	r3, #64	@ 0x40
 8018d54:	616b      	str	r3, [r5, #20]
 8018d56:	2300      	movs	r3, #0
 8018d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d5a:	2320      	movs	r3, #32
 8018d5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018d60:	2330      	movs	r3, #48	@ 0x30
 8018d62:	f04f 0901 	mov.w	r9, #1
 8018d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8018d6a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8018f04 <_svfiprintf_r+0x1e4>
 8018d6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018d72:	4623      	mov	r3, r4
 8018d74:	469a      	mov	sl, r3
 8018d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d7a:	b10a      	cbz	r2, 8018d80 <_svfiprintf_r+0x60>
 8018d7c:	2a25      	cmp	r2, #37	@ 0x25
 8018d7e:	d1f9      	bne.n	8018d74 <_svfiprintf_r+0x54>
 8018d80:	ebba 0b04 	subs.w	fp, sl, r4
 8018d84:	d00b      	beq.n	8018d9e <_svfiprintf_r+0x7e>
 8018d86:	465b      	mov	r3, fp
 8018d88:	4622      	mov	r2, r4
 8018d8a:	4629      	mov	r1, r5
 8018d8c:	4638      	mov	r0, r7
 8018d8e:	f7ff ff6c 	bl	8018c6a <__ssputs_r>
 8018d92:	3001      	adds	r0, #1
 8018d94:	f000 80a7 	beq.w	8018ee6 <_svfiprintf_r+0x1c6>
 8018d98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d9a:	445a      	add	r2, fp
 8018d9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8018d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	f000 809f 	beq.w	8018ee6 <_svfiprintf_r+0x1c6>
 8018da8:	2300      	movs	r3, #0
 8018daa:	f04f 32ff 	mov.w	r2, #4294967295
 8018dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018db2:	f10a 0a01 	add.w	sl, sl, #1
 8018db6:	9304      	str	r3, [sp, #16]
 8018db8:	9307      	str	r3, [sp, #28]
 8018dba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018dbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8018dc0:	4654      	mov	r4, sl
 8018dc2:	2205      	movs	r2, #5
 8018dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dc8:	484e      	ldr	r0, [pc, #312]	@ (8018f04 <_svfiprintf_r+0x1e4>)
 8018dca:	f7fe f882 	bl	8016ed2 <memchr>
 8018dce:	9a04      	ldr	r2, [sp, #16]
 8018dd0:	b9d8      	cbnz	r0, 8018e0a <_svfiprintf_r+0xea>
 8018dd2:	06d0      	lsls	r0, r2, #27
 8018dd4:	bf44      	itt	mi
 8018dd6:	2320      	movmi	r3, #32
 8018dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ddc:	0711      	lsls	r1, r2, #28
 8018dde:	bf44      	itt	mi
 8018de0:	232b      	movmi	r3, #43	@ 0x2b
 8018de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018de6:	f89a 3000 	ldrb.w	r3, [sl]
 8018dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8018dec:	d015      	beq.n	8018e1a <_svfiprintf_r+0xfa>
 8018dee:	4654      	mov	r4, sl
 8018df0:	2000      	movs	r0, #0
 8018df2:	f04f 0c0a 	mov.w	ip, #10
 8018df6:	9a07      	ldr	r2, [sp, #28]
 8018df8:	4621      	mov	r1, r4
 8018dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018dfe:	3b30      	subs	r3, #48	@ 0x30
 8018e00:	2b09      	cmp	r3, #9
 8018e02:	d94b      	bls.n	8018e9c <_svfiprintf_r+0x17c>
 8018e04:	b1b0      	cbz	r0, 8018e34 <_svfiprintf_r+0x114>
 8018e06:	9207      	str	r2, [sp, #28]
 8018e08:	e014      	b.n	8018e34 <_svfiprintf_r+0x114>
 8018e0a:	eba0 0308 	sub.w	r3, r0, r8
 8018e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8018e12:	4313      	orrs	r3, r2
 8018e14:	46a2      	mov	sl, r4
 8018e16:	9304      	str	r3, [sp, #16]
 8018e18:	e7d2      	b.n	8018dc0 <_svfiprintf_r+0xa0>
 8018e1a:	9b03      	ldr	r3, [sp, #12]
 8018e1c:	1d19      	adds	r1, r3, #4
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	9103      	str	r1, [sp, #12]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	bfbb      	ittet	lt
 8018e26:	425b      	neglt	r3, r3
 8018e28:	f042 0202 	orrlt.w	r2, r2, #2
 8018e2c:	9307      	strge	r3, [sp, #28]
 8018e2e:	9307      	strlt	r3, [sp, #28]
 8018e30:	bfb8      	it	lt
 8018e32:	9204      	strlt	r2, [sp, #16]
 8018e34:	7823      	ldrb	r3, [r4, #0]
 8018e36:	2b2e      	cmp	r3, #46	@ 0x2e
 8018e38:	d10a      	bne.n	8018e50 <_svfiprintf_r+0x130>
 8018e3a:	7863      	ldrb	r3, [r4, #1]
 8018e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018e3e:	d132      	bne.n	8018ea6 <_svfiprintf_r+0x186>
 8018e40:	9b03      	ldr	r3, [sp, #12]
 8018e42:	3402      	adds	r4, #2
 8018e44:	1d1a      	adds	r2, r3, #4
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	9203      	str	r2, [sp, #12]
 8018e4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018e4e:	9305      	str	r3, [sp, #20]
 8018e50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8018f08 <_svfiprintf_r+0x1e8>
 8018e54:	2203      	movs	r2, #3
 8018e56:	4650      	mov	r0, sl
 8018e58:	7821      	ldrb	r1, [r4, #0]
 8018e5a:	f7fe f83a 	bl	8016ed2 <memchr>
 8018e5e:	b138      	cbz	r0, 8018e70 <_svfiprintf_r+0x150>
 8018e60:	2240      	movs	r2, #64	@ 0x40
 8018e62:	9b04      	ldr	r3, [sp, #16]
 8018e64:	eba0 000a 	sub.w	r0, r0, sl
 8018e68:	4082      	lsls	r2, r0
 8018e6a:	4313      	orrs	r3, r2
 8018e6c:	3401      	adds	r4, #1
 8018e6e:	9304      	str	r3, [sp, #16]
 8018e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e74:	2206      	movs	r2, #6
 8018e76:	4825      	ldr	r0, [pc, #148]	@ (8018f0c <_svfiprintf_r+0x1ec>)
 8018e78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018e7c:	f7fe f829 	bl	8016ed2 <memchr>
 8018e80:	2800      	cmp	r0, #0
 8018e82:	d036      	beq.n	8018ef2 <_svfiprintf_r+0x1d2>
 8018e84:	4b22      	ldr	r3, [pc, #136]	@ (8018f10 <_svfiprintf_r+0x1f0>)
 8018e86:	bb1b      	cbnz	r3, 8018ed0 <_svfiprintf_r+0x1b0>
 8018e88:	9b03      	ldr	r3, [sp, #12]
 8018e8a:	3307      	adds	r3, #7
 8018e8c:	f023 0307 	bic.w	r3, r3, #7
 8018e90:	3308      	adds	r3, #8
 8018e92:	9303      	str	r3, [sp, #12]
 8018e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e96:	4433      	add	r3, r6
 8018e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e9a:	e76a      	b.n	8018d72 <_svfiprintf_r+0x52>
 8018e9c:	460c      	mov	r4, r1
 8018e9e:	2001      	movs	r0, #1
 8018ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ea4:	e7a8      	b.n	8018df8 <_svfiprintf_r+0xd8>
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	f04f 0c0a 	mov.w	ip, #10
 8018eac:	4619      	mov	r1, r3
 8018eae:	3401      	adds	r4, #1
 8018eb0:	9305      	str	r3, [sp, #20]
 8018eb2:	4620      	mov	r0, r4
 8018eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018eb8:	3a30      	subs	r2, #48	@ 0x30
 8018eba:	2a09      	cmp	r2, #9
 8018ebc:	d903      	bls.n	8018ec6 <_svfiprintf_r+0x1a6>
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d0c6      	beq.n	8018e50 <_svfiprintf_r+0x130>
 8018ec2:	9105      	str	r1, [sp, #20]
 8018ec4:	e7c4      	b.n	8018e50 <_svfiprintf_r+0x130>
 8018ec6:	4604      	mov	r4, r0
 8018ec8:	2301      	movs	r3, #1
 8018eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ece:	e7f0      	b.n	8018eb2 <_svfiprintf_r+0x192>
 8018ed0:	ab03      	add	r3, sp, #12
 8018ed2:	9300      	str	r3, [sp, #0]
 8018ed4:	462a      	mov	r2, r5
 8018ed6:	4638      	mov	r0, r7
 8018ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8018f14 <_svfiprintf_r+0x1f4>)
 8018eda:	a904      	add	r1, sp, #16
 8018edc:	f7fc fe46 	bl	8015b6c <_printf_float>
 8018ee0:	1c42      	adds	r2, r0, #1
 8018ee2:	4606      	mov	r6, r0
 8018ee4:	d1d6      	bne.n	8018e94 <_svfiprintf_r+0x174>
 8018ee6:	89ab      	ldrh	r3, [r5, #12]
 8018ee8:	065b      	lsls	r3, r3, #25
 8018eea:	f53f af2d 	bmi.w	8018d48 <_svfiprintf_r+0x28>
 8018eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018ef0:	e72c      	b.n	8018d4c <_svfiprintf_r+0x2c>
 8018ef2:	ab03      	add	r3, sp, #12
 8018ef4:	9300      	str	r3, [sp, #0]
 8018ef6:	462a      	mov	r2, r5
 8018ef8:	4638      	mov	r0, r7
 8018efa:	4b06      	ldr	r3, [pc, #24]	@ (8018f14 <_svfiprintf_r+0x1f4>)
 8018efc:	a904      	add	r1, sp, #16
 8018efe:	f7fd f8d3 	bl	80160a8 <_printf_i>
 8018f02:	e7ed      	b.n	8018ee0 <_svfiprintf_r+0x1c0>
 8018f04:	0801af2a 	.word	0x0801af2a
 8018f08:	0801af30 	.word	0x0801af30
 8018f0c:	0801af34 	.word	0x0801af34
 8018f10:	08015b6d 	.word	0x08015b6d
 8018f14:	08018c6b 	.word	0x08018c6b

08018f18 <_sungetc_r>:
 8018f18:	b538      	push	{r3, r4, r5, lr}
 8018f1a:	1c4b      	adds	r3, r1, #1
 8018f1c:	4614      	mov	r4, r2
 8018f1e:	d103      	bne.n	8018f28 <_sungetc_r+0x10>
 8018f20:	f04f 35ff 	mov.w	r5, #4294967295
 8018f24:	4628      	mov	r0, r5
 8018f26:	bd38      	pop	{r3, r4, r5, pc}
 8018f28:	8993      	ldrh	r3, [r2, #12]
 8018f2a:	b2cd      	uxtb	r5, r1
 8018f2c:	f023 0320 	bic.w	r3, r3, #32
 8018f30:	8193      	strh	r3, [r2, #12]
 8018f32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018f34:	6852      	ldr	r2, [r2, #4]
 8018f36:	b18b      	cbz	r3, 8018f5c <_sungetc_r+0x44>
 8018f38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018f3a:	4293      	cmp	r3, r2
 8018f3c:	dd08      	ble.n	8018f50 <_sungetc_r+0x38>
 8018f3e:	6823      	ldr	r3, [r4, #0]
 8018f40:	1e5a      	subs	r2, r3, #1
 8018f42:	6022      	str	r2, [r4, #0]
 8018f44:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018f48:	6863      	ldr	r3, [r4, #4]
 8018f4a:	3301      	adds	r3, #1
 8018f4c:	6063      	str	r3, [r4, #4]
 8018f4e:	e7e9      	b.n	8018f24 <_sungetc_r+0xc>
 8018f50:	4621      	mov	r1, r4
 8018f52:	f000 fd7d 	bl	8019a50 <__submore>
 8018f56:	2800      	cmp	r0, #0
 8018f58:	d0f1      	beq.n	8018f3e <_sungetc_r+0x26>
 8018f5a:	e7e1      	b.n	8018f20 <_sungetc_r+0x8>
 8018f5c:	6921      	ldr	r1, [r4, #16]
 8018f5e:	6823      	ldr	r3, [r4, #0]
 8018f60:	b151      	cbz	r1, 8018f78 <_sungetc_r+0x60>
 8018f62:	4299      	cmp	r1, r3
 8018f64:	d208      	bcs.n	8018f78 <_sungetc_r+0x60>
 8018f66:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018f6a:	42a9      	cmp	r1, r5
 8018f6c:	d104      	bne.n	8018f78 <_sungetc_r+0x60>
 8018f6e:	3b01      	subs	r3, #1
 8018f70:	3201      	adds	r2, #1
 8018f72:	6023      	str	r3, [r4, #0]
 8018f74:	6062      	str	r2, [r4, #4]
 8018f76:	e7d5      	b.n	8018f24 <_sungetc_r+0xc>
 8018f78:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8018f7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018f80:	6363      	str	r3, [r4, #52]	@ 0x34
 8018f82:	2303      	movs	r3, #3
 8018f84:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018f86:	4623      	mov	r3, r4
 8018f88:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018f8c:	6023      	str	r3, [r4, #0]
 8018f8e:	2301      	movs	r3, #1
 8018f90:	e7dc      	b.n	8018f4c <_sungetc_r+0x34>

08018f92 <__ssrefill_r>:
 8018f92:	b510      	push	{r4, lr}
 8018f94:	460c      	mov	r4, r1
 8018f96:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018f98:	b169      	cbz	r1, 8018fb6 <__ssrefill_r+0x24>
 8018f9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018f9e:	4299      	cmp	r1, r3
 8018fa0:	d001      	beq.n	8018fa6 <__ssrefill_r+0x14>
 8018fa2:	f7fe fe21 	bl	8017be8 <_free_r>
 8018fa6:	2000      	movs	r0, #0
 8018fa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018faa:	6360      	str	r0, [r4, #52]	@ 0x34
 8018fac:	6063      	str	r3, [r4, #4]
 8018fae:	b113      	cbz	r3, 8018fb6 <__ssrefill_r+0x24>
 8018fb0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018fb2:	6023      	str	r3, [r4, #0]
 8018fb4:	bd10      	pop	{r4, pc}
 8018fb6:	6923      	ldr	r3, [r4, #16]
 8018fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8018fbc:	6023      	str	r3, [r4, #0]
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	6063      	str	r3, [r4, #4]
 8018fc2:	89a3      	ldrh	r3, [r4, #12]
 8018fc4:	f043 0320 	orr.w	r3, r3, #32
 8018fc8:	81a3      	strh	r3, [r4, #12]
 8018fca:	e7f3      	b.n	8018fb4 <__ssrefill_r+0x22>

08018fcc <__ssvfiscanf_r>:
 8018fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd0:	460c      	mov	r4, r1
 8018fd2:	2100      	movs	r1, #0
 8018fd4:	4606      	mov	r6, r0
 8018fd6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8018fda:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8018fde:	49ab      	ldr	r1, [pc, #684]	@ (801928c <__ssvfiscanf_r+0x2c0>)
 8018fe0:	f10d 0804 	add.w	r8, sp, #4
 8018fe4:	91a0      	str	r1, [sp, #640]	@ 0x280
 8018fe6:	49aa      	ldr	r1, [pc, #680]	@ (8019290 <__ssvfiscanf_r+0x2c4>)
 8018fe8:	4faa      	ldr	r7, [pc, #680]	@ (8019294 <__ssvfiscanf_r+0x2c8>)
 8018fea:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8018fee:	91a1      	str	r1, [sp, #644]	@ 0x284
 8018ff0:	9300      	str	r3, [sp, #0]
 8018ff2:	f892 9000 	ldrb.w	r9, [r2]
 8018ff6:	f1b9 0f00 	cmp.w	r9, #0
 8018ffa:	f000 8159 	beq.w	80192b0 <__ssvfiscanf_r+0x2e4>
 8018ffe:	f817 3009 	ldrb.w	r3, [r7, r9]
 8019002:	1c55      	adds	r5, r2, #1
 8019004:	f013 0308 	ands.w	r3, r3, #8
 8019008:	d019      	beq.n	801903e <__ssvfiscanf_r+0x72>
 801900a:	6863      	ldr	r3, [r4, #4]
 801900c:	2b00      	cmp	r3, #0
 801900e:	dd0f      	ble.n	8019030 <__ssvfiscanf_r+0x64>
 8019010:	6823      	ldr	r3, [r4, #0]
 8019012:	781a      	ldrb	r2, [r3, #0]
 8019014:	5cba      	ldrb	r2, [r7, r2]
 8019016:	0712      	lsls	r2, r2, #28
 8019018:	d401      	bmi.n	801901e <__ssvfiscanf_r+0x52>
 801901a:	462a      	mov	r2, r5
 801901c:	e7e9      	b.n	8018ff2 <__ssvfiscanf_r+0x26>
 801901e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8019020:	3301      	adds	r3, #1
 8019022:	3201      	adds	r2, #1
 8019024:	9245      	str	r2, [sp, #276]	@ 0x114
 8019026:	6862      	ldr	r2, [r4, #4]
 8019028:	6023      	str	r3, [r4, #0]
 801902a:	3a01      	subs	r2, #1
 801902c:	6062      	str	r2, [r4, #4]
 801902e:	e7ec      	b.n	801900a <__ssvfiscanf_r+0x3e>
 8019030:	4621      	mov	r1, r4
 8019032:	4630      	mov	r0, r6
 8019034:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8019036:	4798      	blx	r3
 8019038:	2800      	cmp	r0, #0
 801903a:	d0e9      	beq.n	8019010 <__ssvfiscanf_r+0x44>
 801903c:	e7ed      	b.n	801901a <__ssvfiscanf_r+0x4e>
 801903e:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8019042:	f040 8086 	bne.w	8019152 <__ssvfiscanf_r+0x186>
 8019046:	9341      	str	r3, [sp, #260]	@ 0x104
 8019048:	9343      	str	r3, [sp, #268]	@ 0x10c
 801904a:	7853      	ldrb	r3, [r2, #1]
 801904c:	2b2a      	cmp	r3, #42	@ 0x2a
 801904e:	bf04      	itt	eq
 8019050:	2310      	moveq	r3, #16
 8019052:	1c95      	addeq	r5, r2, #2
 8019054:	f04f 020a 	mov.w	r2, #10
 8019058:	bf08      	it	eq
 801905a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801905c:	46aa      	mov	sl, r5
 801905e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8019062:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8019066:	2b09      	cmp	r3, #9
 8019068:	d91e      	bls.n	80190a8 <__ssvfiscanf_r+0xdc>
 801906a:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8019298 <__ssvfiscanf_r+0x2cc>
 801906e:	2203      	movs	r2, #3
 8019070:	4658      	mov	r0, fp
 8019072:	f7fd ff2e 	bl	8016ed2 <memchr>
 8019076:	b138      	cbz	r0, 8019088 <__ssvfiscanf_r+0xbc>
 8019078:	2301      	movs	r3, #1
 801907a:	4655      	mov	r5, sl
 801907c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801907e:	eba0 000b 	sub.w	r0, r0, fp
 8019082:	4083      	lsls	r3, r0
 8019084:	4313      	orrs	r3, r2
 8019086:	9341      	str	r3, [sp, #260]	@ 0x104
 8019088:	f815 3b01 	ldrb.w	r3, [r5], #1
 801908c:	2b78      	cmp	r3, #120	@ 0x78
 801908e:	d806      	bhi.n	801909e <__ssvfiscanf_r+0xd2>
 8019090:	2b57      	cmp	r3, #87	@ 0x57
 8019092:	d810      	bhi.n	80190b6 <__ssvfiscanf_r+0xea>
 8019094:	2b25      	cmp	r3, #37	@ 0x25
 8019096:	d05c      	beq.n	8019152 <__ssvfiscanf_r+0x186>
 8019098:	d856      	bhi.n	8019148 <__ssvfiscanf_r+0x17c>
 801909a:	2b00      	cmp	r3, #0
 801909c:	d074      	beq.n	8019188 <__ssvfiscanf_r+0x1bc>
 801909e:	2303      	movs	r3, #3
 80190a0:	9347      	str	r3, [sp, #284]	@ 0x11c
 80190a2:	230a      	movs	r3, #10
 80190a4:	9342      	str	r3, [sp, #264]	@ 0x108
 80190a6:	e087      	b.n	80191b8 <__ssvfiscanf_r+0x1ec>
 80190a8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80190aa:	4655      	mov	r5, sl
 80190ac:	fb02 1103 	mla	r1, r2, r3, r1
 80190b0:	3930      	subs	r1, #48	@ 0x30
 80190b2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80190b4:	e7d2      	b.n	801905c <__ssvfiscanf_r+0x90>
 80190b6:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80190ba:	2a20      	cmp	r2, #32
 80190bc:	d8ef      	bhi.n	801909e <__ssvfiscanf_r+0xd2>
 80190be:	a101      	add	r1, pc, #4	@ (adr r1, 80190c4 <__ssvfiscanf_r+0xf8>)
 80190c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80190c4:	08019197 	.word	0x08019197
 80190c8:	0801909f 	.word	0x0801909f
 80190cc:	0801909f 	.word	0x0801909f
 80190d0:	080191f1 	.word	0x080191f1
 80190d4:	0801909f 	.word	0x0801909f
 80190d8:	0801909f 	.word	0x0801909f
 80190dc:	0801909f 	.word	0x0801909f
 80190e0:	0801909f 	.word	0x0801909f
 80190e4:	0801909f 	.word	0x0801909f
 80190e8:	0801909f 	.word	0x0801909f
 80190ec:	0801909f 	.word	0x0801909f
 80190f0:	08019207 	.word	0x08019207
 80190f4:	080191ed 	.word	0x080191ed
 80190f8:	0801914f 	.word	0x0801914f
 80190fc:	0801914f 	.word	0x0801914f
 8019100:	0801914f 	.word	0x0801914f
 8019104:	0801909f 	.word	0x0801909f
 8019108:	080191a9 	.word	0x080191a9
 801910c:	0801909f 	.word	0x0801909f
 8019110:	0801909f 	.word	0x0801909f
 8019114:	0801909f 	.word	0x0801909f
 8019118:	0801909f 	.word	0x0801909f
 801911c:	08019217 	.word	0x08019217
 8019120:	080191b1 	.word	0x080191b1
 8019124:	0801918f 	.word	0x0801918f
 8019128:	0801909f 	.word	0x0801909f
 801912c:	0801909f 	.word	0x0801909f
 8019130:	08019213 	.word	0x08019213
 8019134:	0801909f 	.word	0x0801909f
 8019138:	080191ed 	.word	0x080191ed
 801913c:	0801909f 	.word	0x0801909f
 8019140:	0801909f 	.word	0x0801909f
 8019144:	08019197 	.word	0x08019197
 8019148:	3b45      	subs	r3, #69	@ 0x45
 801914a:	2b02      	cmp	r3, #2
 801914c:	d8a7      	bhi.n	801909e <__ssvfiscanf_r+0xd2>
 801914e:	2305      	movs	r3, #5
 8019150:	e031      	b.n	80191b6 <__ssvfiscanf_r+0x1ea>
 8019152:	6863      	ldr	r3, [r4, #4]
 8019154:	2b00      	cmp	r3, #0
 8019156:	dd0d      	ble.n	8019174 <__ssvfiscanf_r+0x1a8>
 8019158:	6823      	ldr	r3, [r4, #0]
 801915a:	781a      	ldrb	r2, [r3, #0]
 801915c:	454a      	cmp	r2, r9
 801915e:	f040 80a7 	bne.w	80192b0 <__ssvfiscanf_r+0x2e4>
 8019162:	3301      	adds	r3, #1
 8019164:	6862      	ldr	r2, [r4, #4]
 8019166:	6023      	str	r3, [r4, #0]
 8019168:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801916a:	3a01      	subs	r2, #1
 801916c:	3301      	adds	r3, #1
 801916e:	6062      	str	r2, [r4, #4]
 8019170:	9345      	str	r3, [sp, #276]	@ 0x114
 8019172:	e752      	b.n	801901a <__ssvfiscanf_r+0x4e>
 8019174:	4621      	mov	r1, r4
 8019176:	4630      	mov	r0, r6
 8019178:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801917a:	4798      	blx	r3
 801917c:	2800      	cmp	r0, #0
 801917e:	d0eb      	beq.n	8019158 <__ssvfiscanf_r+0x18c>
 8019180:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8019182:	2800      	cmp	r0, #0
 8019184:	f040 808c 	bne.w	80192a0 <__ssvfiscanf_r+0x2d4>
 8019188:	f04f 30ff 	mov.w	r0, #4294967295
 801918c:	e08c      	b.n	80192a8 <__ssvfiscanf_r+0x2dc>
 801918e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8019190:	f042 0220 	orr.w	r2, r2, #32
 8019194:	9241      	str	r2, [sp, #260]	@ 0x104
 8019196:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8019198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801919c:	9241      	str	r2, [sp, #260]	@ 0x104
 801919e:	2210      	movs	r2, #16
 80191a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80191a2:	9242      	str	r2, [sp, #264]	@ 0x108
 80191a4:	d902      	bls.n	80191ac <__ssvfiscanf_r+0x1e0>
 80191a6:	e005      	b.n	80191b4 <__ssvfiscanf_r+0x1e8>
 80191a8:	2300      	movs	r3, #0
 80191aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80191ac:	2303      	movs	r3, #3
 80191ae:	e002      	b.n	80191b6 <__ssvfiscanf_r+0x1ea>
 80191b0:	2308      	movs	r3, #8
 80191b2:	9342      	str	r3, [sp, #264]	@ 0x108
 80191b4:	2304      	movs	r3, #4
 80191b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80191b8:	6863      	ldr	r3, [r4, #4]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	dd39      	ble.n	8019232 <__ssvfiscanf_r+0x266>
 80191be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80191c0:	0659      	lsls	r1, r3, #25
 80191c2:	d404      	bmi.n	80191ce <__ssvfiscanf_r+0x202>
 80191c4:	6823      	ldr	r3, [r4, #0]
 80191c6:	781a      	ldrb	r2, [r3, #0]
 80191c8:	5cba      	ldrb	r2, [r7, r2]
 80191ca:	0712      	lsls	r2, r2, #28
 80191cc:	d438      	bmi.n	8019240 <__ssvfiscanf_r+0x274>
 80191ce:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80191d0:	2b02      	cmp	r3, #2
 80191d2:	dc47      	bgt.n	8019264 <__ssvfiscanf_r+0x298>
 80191d4:	466b      	mov	r3, sp
 80191d6:	4622      	mov	r2, r4
 80191d8:	4630      	mov	r0, r6
 80191da:	a941      	add	r1, sp, #260	@ 0x104
 80191dc:	f000 f9aa 	bl	8019534 <_scanf_chars>
 80191e0:	2801      	cmp	r0, #1
 80191e2:	d065      	beq.n	80192b0 <__ssvfiscanf_r+0x2e4>
 80191e4:	2802      	cmp	r0, #2
 80191e6:	f47f af18 	bne.w	801901a <__ssvfiscanf_r+0x4e>
 80191ea:	e7c9      	b.n	8019180 <__ssvfiscanf_r+0x1b4>
 80191ec:	220a      	movs	r2, #10
 80191ee:	e7d7      	b.n	80191a0 <__ssvfiscanf_r+0x1d4>
 80191f0:	4629      	mov	r1, r5
 80191f2:	4640      	mov	r0, r8
 80191f4:	f000 fbf3 	bl	80199de <__sccl>
 80191f8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80191fa:	4605      	mov	r5, r0
 80191fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019200:	9341      	str	r3, [sp, #260]	@ 0x104
 8019202:	2301      	movs	r3, #1
 8019204:	e7d7      	b.n	80191b6 <__ssvfiscanf_r+0x1ea>
 8019206:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8019208:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801920c:	9341      	str	r3, [sp, #260]	@ 0x104
 801920e:	2300      	movs	r3, #0
 8019210:	e7d1      	b.n	80191b6 <__ssvfiscanf_r+0x1ea>
 8019212:	2302      	movs	r3, #2
 8019214:	e7cf      	b.n	80191b6 <__ssvfiscanf_r+0x1ea>
 8019216:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8019218:	06c3      	lsls	r3, r0, #27
 801921a:	f53f aefe 	bmi.w	801901a <__ssvfiscanf_r+0x4e>
 801921e:	9b00      	ldr	r3, [sp, #0]
 8019220:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8019222:	1d19      	adds	r1, r3, #4
 8019224:	9100      	str	r1, [sp, #0]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	07c0      	lsls	r0, r0, #31
 801922a:	bf4c      	ite	mi
 801922c:	801a      	strhmi	r2, [r3, #0]
 801922e:	601a      	strpl	r2, [r3, #0]
 8019230:	e6f3      	b.n	801901a <__ssvfiscanf_r+0x4e>
 8019232:	4621      	mov	r1, r4
 8019234:	4630      	mov	r0, r6
 8019236:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8019238:	4798      	blx	r3
 801923a:	2800      	cmp	r0, #0
 801923c:	d0bf      	beq.n	80191be <__ssvfiscanf_r+0x1f2>
 801923e:	e79f      	b.n	8019180 <__ssvfiscanf_r+0x1b4>
 8019240:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8019242:	3201      	adds	r2, #1
 8019244:	9245      	str	r2, [sp, #276]	@ 0x114
 8019246:	6862      	ldr	r2, [r4, #4]
 8019248:	3a01      	subs	r2, #1
 801924a:	2a00      	cmp	r2, #0
 801924c:	6062      	str	r2, [r4, #4]
 801924e:	dd02      	ble.n	8019256 <__ssvfiscanf_r+0x28a>
 8019250:	3301      	adds	r3, #1
 8019252:	6023      	str	r3, [r4, #0]
 8019254:	e7b6      	b.n	80191c4 <__ssvfiscanf_r+0x1f8>
 8019256:	4621      	mov	r1, r4
 8019258:	4630      	mov	r0, r6
 801925a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801925c:	4798      	blx	r3
 801925e:	2800      	cmp	r0, #0
 8019260:	d0b0      	beq.n	80191c4 <__ssvfiscanf_r+0x1f8>
 8019262:	e78d      	b.n	8019180 <__ssvfiscanf_r+0x1b4>
 8019264:	2b04      	cmp	r3, #4
 8019266:	dc06      	bgt.n	8019276 <__ssvfiscanf_r+0x2aa>
 8019268:	466b      	mov	r3, sp
 801926a:	4622      	mov	r2, r4
 801926c:	4630      	mov	r0, r6
 801926e:	a941      	add	r1, sp, #260	@ 0x104
 8019270:	f000 f9ba 	bl	80195e8 <_scanf_i>
 8019274:	e7b4      	b.n	80191e0 <__ssvfiscanf_r+0x214>
 8019276:	4b09      	ldr	r3, [pc, #36]	@ (801929c <__ssvfiscanf_r+0x2d0>)
 8019278:	2b00      	cmp	r3, #0
 801927a:	f43f aece 	beq.w	801901a <__ssvfiscanf_r+0x4e>
 801927e:	466b      	mov	r3, sp
 8019280:	4622      	mov	r2, r4
 8019282:	4630      	mov	r0, r6
 8019284:	a941      	add	r1, sp, #260	@ 0x104
 8019286:	f7fd f82d 	bl	80162e4 <_scanf_float>
 801928a:	e7a9      	b.n	80191e0 <__ssvfiscanf_r+0x214>
 801928c:	08018f19 	.word	0x08018f19
 8019290:	08018f93 	.word	0x08018f93
 8019294:	0801afa9 	.word	0x0801afa9
 8019298:	0801af30 	.word	0x0801af30
 801929c:	080162e5 	.word	0x080162e5
 80192a0:	89a3      	ldrh	r3, [r4, #12]
 80192a2:	065b      	lsls	r3, r3, #25
 80192a4:	f53f af70 	bmi.w	8019188 <__ssvfiscanf_r+0x1bc>
 80192a8:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80192ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192b0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80192b2:	e7f9      	b.n	80192a8 <__ssvfiscanf_r+0x2dc>

080192b4 <__sfputc_r>:
 80192b4:	6893      	ldr	r3, [r2, #8]
 80192b6:	b410      	push	{r4}
 80192b8:	3b01      	subs	r3, #1
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	6093      	str	r3, [r2, #8]
 80192be:	da07      	bge.n	80192d0 <__sfputc_r+0x1c>
 80192c0:	6994      	ldr	r4, [r2, #24]
 80192c2:	42a3      	cmp	r3, r4
 80192c4:	db01      	blt.n	80192ca <__sfputc_r+0x16>
 80192c6:	290a      	cmp	r1, #10
 80192c8:	d102      	bne.n	80192d0 <__sfputc_r+0x1c>
 80192ca:	bc10      	pop	{r4}
 80192cc:	f7fd bc21 	b.w	8016b12 <__swbuf_r>
 80192d0:	6813      	ldr	r3, [r2, #0]
 80192d2:	1c58      	adds	r0, r3, #1
 80192d4:	6010      	str	r0, [r2, #0]
 80192d6:	7019      	strb	r1, [r3, #0]
 80192d8:	4608      	mov	r0, r1
 80192da:	bc10      	pop	{r4}
 80192dc:	4770      	bx	lr

080192de <__sfputs_r>:
 80192de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192e0:	4606      	mov	r6, r0
 80192e2:	460f      	mov	r7, r1
 80192e4:	4614      	mov	r4, r2
 80192e6:	18d5      	adds	r5, r2, r3
 80192e8:	42ac      	cmp	r4, r5
 80192ea:	d101      	bne.n	80192f0 <__sfputs_r+0x12>
 80192ec:	2000      	movs	r0, #0
 80192ee:	e007      	b.n	8019300 <__sfputs_r+0x22>
 80192f0:	463a      	mov	r2, r7
 80192f2:	4630      	mov	r0, r6
 80192f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192f8:	f7ff ffdc 	bl	80192b4 <__sfputc_r>
 80192fc:	1c43      	adds	r3, r0, #1
 80192fe:	d1f3      	bne.n	80192e8 <__sfputs_r+0xa>
 8019300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019304 <_vfiprintf_r>:
 8019304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019308:	460d      	mov	r5, r1
 801930a:	4614      	mov	r4, r2
 801930c:	4698      	mov	r8, r3
 801930e:	4606      	mov	r6, r0
 8019310:	b09d      	sub	sp, #116	@ 0x74
 8019312:	b118      	cbz	r0, 801931c <_vfiprintf_r+0x18>
 8019314:	6a03      	ldr	r3, [r0, #32]
 8019316:	b90b      	cbnz	r3, 801931c <_vfiprintf_r+0x18>
 8019318:	f7fd fa7a 	bl	8016810 <__sinit>
 801931c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801931e:	07d9      	lsls	r1, r3, #31
 8019320:	d405      	bmi.n	801932e <_vfiprintf_r+0x2a>
 8019322:	89ab      	ldrh	r3, [r5, #12]
 8019324:	059a      	lsls	r2, r3, #22
 8019326:	d402      	bmi.n	801932e <_vfiprintf_r+0x2a>
 8019328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801932a:	f7fd fdc8 	bl	8016ebe <__retarget_lock_acquire_recursive>
 801932e:	89ab      	ldrh	r3, [r5, #12]
 8019330:	071b      	lsls	r3, r3, #28
 8019332:	d501      	bpl.n	8019338 <_vfiprintf_r+0x34>
 8019334:	692b      	ldr	r3, [r5, #16]
 8019336:	b99b      	cbnz	r3, 8019360 <_vfiprintf_r+0x5c>
 8019338:	4629      	mov	r1, r5
 801933a:	4630      	mov	r0, r6
 801933c:	f7fd fc28 	bl	8016b90 <__swsetup_r>
 8019340:	b170      	cbz	r0, 8019360 <_vfiprintf_r+0x5c>
 8019342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019344:	07dc      	lsls	r4, r3, #31
 8019346:	d504      	bpl.n	8019352 <_vfiprintf_r+0x4e>
 8019348:	f04f 30ff 	mov.w	r0, #4294967295
 801934c:	b01d      	add	sp, #116	@ 0x74
 801934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019352:	89ab      	ldrh	r3, [r5, #12]
 8019354:	0598      	lsls	r0, r3, #22
 8019356:	d4f7      	bmi.n	8019348 <_vfiprintf_r+0x44>
 8019358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801935a:	f7fd fdb1 	bl	8016ec0 <__retarget_lock_release_recursive>
 801935e:	e7f3      	b.n	8019348 <_vfiprintf_r+0x44>
 8019360:	2300      	movs	r3, #0
 8019362:	9309      	str	r3, [sp, #36]	@ 0x24
 8019364:	2320      	movs	r3, #32
 8019366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801936a:	2330      	movs	r3, #48	@ 0x30
 801936c:	f04f 0901 	mov.w	r9, #1
 8019370:	f8cd 800c 	str.w	r8, [sp, #12]
 8019374:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8019520 <_vfiprintf_r+0x21c>
 8019378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801937c:	4623      	mov	r3, r4
 801937e:	469a      	mov	sl, r3
 8019380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019384:	b10a      	cbz	r2, 801938a <_vfiprintf_r+0x86>
 8019386:	2a25      	cmp	r2, #37	@ 0x25
 8019388:	d1f9      	bne.n	801937e <_vfiprintf_r+0x7a>
 801938a:	ebba 0b04 	subs.w	fp, sl, r4
 801938e:	d00b      	beq.n	80193a8 <_vfiprintf_r+0xa4>
 8019390:	465b      	mov	r3, fp
 8019392:	4622      	mov	r2, r4
 8019394:	4629      	mov	r1, r5
 8019396:	4630      	mov	r0, r6
 8019398:	f7ff ffa1 	bl	80192de <__sfputs_r>
 801939c:	3001      	adds	r0, #1
 801939e:	f000 80a7 	beq.w	80194f0 <_vfiprintf_r+0x1ec>
 80193a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80193a4:	445a      	add	r2, fp
 80193a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80193a8:	f89a 3000 	ldrb.w	r3, [sl]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	f000 809f 	beq.w	80194f0 <_vfiprintf_r+0x1ec>
 80193b2:	2300      	movs	r3, #0
 80193b4:	f04f 32ff 	mov.w	r2, #4294967295
 80193b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80193bc:	f10a 0a01 	add.w	sl, sl, #1
 80193c0:	9304      	str	r3, [sp, #16]
 80193c2:	9307      	str	r3, [sp, #28]
 80193c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80193c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80193ca:	4654      	mov	r4, sl
 80193cc:	2205      	movs	r2, #5
 80193ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193d2:	4853      	ldr	r0, [pc, #332]	@ (8019520 <_vfiprintf_r+0x21c>)
 80193d4:	f7fd fd7d 	bl	8016ed2 <memchr>
 80193d8:	9a04      	ldr	r2, [sp, #16]
 80193da:	b9d8      	cbnz	r0, 8019414 <_vfiprintf_r+0x110>
 80193dc:	06d1      	lsls	r1, r2, #27
 80193de:	bf44      	itt	mi
 80193e0:	2320      	movmi	r3, #32
 80193e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80193e6:	0713      	lsls	r3, r2, #28
 80193e8:	bf44      	itt	mi
 80193ea:	232b      	movmi	r3, #43	@ 0x2b
 80193ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80193f0:	f89a 3000 	ldrb.w	r3, [sl]
 80193f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80193f6:	d015      	beq.n	8019424 <_vfiprintf_r+0x120>
 80193f8:	4654      	mov	r4, sl
 80193fa:	2000      	movs	r0, #0
 80193fc:	f04f 0c0a 	mov.w	ip, #10
 8019400:	9a07      	ldr	r2, [sp, #28]
 8019402:	4621      	mov	r1, r4
 8019404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019408:	3b30      	subs	r3, #48	@ 0x30
 801940a:	2b09      	cmp	r3, #9
 801940c:	d94b      	bls.n	80194a6 <_vfiprintf_r+0x1a2>
 801940e:	b1b0      	cbz	r0, 801943e <_vfiprintf_r+0x13a>
 8019410:	9207      	str	r2, [sp, #28]
 8019412:	e014      	b.n	801943e <_vfiprintf_r+0x13a>
 8019414:	eba0 0308 	sub.w	r3, r0, r8
 8019418:	fa09 f303 	lsl.w	r3, r9, r3
 801941c:	4313      	orrs	r3, r2
 801941e:	46a2      	mov	sl, r4
 8019420:	9304      	str	r3, [sp, #16]
 8019422:	e7d2      	b.n	80193ca <_vfiprintf_r+0xc6>
 8019424:	9b03      	ldr	r3, [sp, #12]
 8019426:	1d19      	adds	r1, r3, #4
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	9103      	str	r1, [sp, #12]
 801942c:	2b00      	cmp	r3, #0
 801942e:	bfbb      	ittet	lt
 8019430:	425b      	neglt	r3, r3
 8019432:	f042 0202 	orrlt.w	r2, r2, #2
 8019436:	9307      	strge	r3, [sp, #28]
 8019438:	9307      	strlt	r3, [sp, #28]
 801943a:	bfb8      	it	lt
 801943c:	9204      	strlt	r2, [sp, #16]
 801943e:	7823      	ldrb	r3, [r4, #0]
 8019440:	2b2e      	cmp	r3, #46	@ 0x2e
 8019442:	d10a      	bne.n	801945a <_vfiprintf_r+0x156>
 8019444:	7863      	ldrb	r3, [r4, #1]
 8019446:	2b2a      	cmp	r3, #42	@ 0x2a
 8019448:	d132      	bne.n	80194b0 <_vfiprintf_r+0x1ac>
 801944a:	9b03      	ldr	r3, [sp, #12]
 801944c:	3402      	adds	r4, #2
 801944e:	1d1a      	adds	r2, r3, #4
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	9203      	str	r2, [sp, #12]
 8019454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019458:	9305      	str	r3, [sp, #20]
 801945a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8019524 <_vfiprintf_r+0x220>
 801945e:	2203      	movs	r2, #3
 8019460:	4650      	mov	r0, sl
 8019462:	7821      	ldrb	r1, [r4, #0]
 8019464:	f7fd fd35 	bl	8016ed2 <memchr>
 8019468:	b138      	cbz	r0, 801947a <_vfiprintf_r+0x176>
 801946a:	2240      	movs	r2, #64	@ 0x40
 801946c:	9b04      	ldr	r3, [sp, #16]
 801946e:	eba0 000a 	sub.w	r0, r0, sl
 8019472:	4082      	lsls	r2, r0
 8019474:	4313      	orrs	r3, r2
 8019476:	3401      	adds	r4, #1
 8019478:	9304      	str	r3, [sp, #16]
 801947a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801947e:	2206      	movs	r2, #6
 8019480:	4829      	ldr	r0, [pc, #164]	@ (8019528 <_vfiprintf_r+0x224>)
 8019482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019486:	f7fd fd24 	bl	8016ed2 <memchr>
 801948a:	2800      	cmp	r0, #0
 801948c:	d03f      	beq.n	801950e <_vfiprintf_r+0x20a>
 801948e:	4b27      	ldr	r3, [pc, #156]	@ (801952c <_vfiprintf_r+0x228>)
 8019490:	bb1b      	cbnz	r3, 80194da <_vfiprintf_r+0x1d6>
 8019492:	9b03      	ldr	r3, [sp, #12]
 8019494:	3307      	adds	r3, #7
 8019496:	f023 0307 	bic.w	r3, r3, #7
 801949a:	3308      	adds	r3, #8
 801949c:	9303      	str	r3, [sp, #12]
 801949e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194a0:	443b      	add	r3, r7
 80194a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80194a4:	e76a      	b.n	801937c <_vfiprintf_r+0x78>
 80194a6:	460c      	mov	r4, r1
 80194a8:	2001      	movs	r0, #1
 80194aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80194ae:	e7a8      	b.n	8019402 <_vfiprintf_r+0xfe>
 80194b0:	2300      	movs	r3, #0
 80194b2:	f04f 0c0a 	mov.w	ip, #10
 80194b6:	4619      	mov	r1, r3
 80194b8:	3401      	adds	r4, #1
 80194ba:	9305      	str	r3, [sp, #20]
 80194bc:	4620      	mov	r0, r4
 80194be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194c2:	3a30      	subs	r2, #48	@ 0x30
 80194c4:	2a09      	cmp	r2, #9
 80194c6:	d903      	bls.n	80194d0 <_vfiprintf_r+0x1cc>
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d0c6      	beq.n	801945a <_vfiprintf_r+0x156>
 80194cc:	9105      	str	r1, [sp, #20]
 80194ce:	e7c4      	b.n	801945a <_vfiprintf_r+0x156>
 80194d0:	4604      	mov	r4, r0
 80194d2:	2301      	movs	r3, #1
 80194d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80194d8:	e7f0      	b.n	80194bc <_vfiprintf_r+0x1b8>
 80194da:	ab03      	add	r3, sp, #12
 80194dc:	9300      	str	r3, [sp, #0]
 80194de:	462a      	mov	r2, r5
 80194e0:	4630      	mov	r0, r6
 80194e2:	4b13      	ldr	r3, [pc, #76]	@ (8019530 <_vfiprintf_r+0x22c>)
 80194e4:	a904      	add	r1, sp, #16
 80194e6:	f7fc fb41 	bl	8015b6c <_printf_float>
 80194ea:	4607      	mov	r7, r0
 80194ec:	1c78      	adds	r0, r7, #1
 80194ee:	d1d6      	bne.n	801949e <_vfiprintf_r+0x19a>
 80194f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80194f2:	07d9      	lsls	r1, r3, #31
 80194f4:	d405      	bmi.n	8019502 <_vfiprintf_r+0x1fe>
 80194f6:	89ab      	ldrh	r3, [r5, #12]
 80194f8:	059a      	lsls	r2, r3, #22
 80194fa:	d402      	bmi.n	8019502 <_vfiprintf_r+0x1fe>
 80194fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80194fe:	f7fd fcdf 	bl	8016ec0 <__retarget_lock_release_recursive>
 8019502:	89ab      	ldrh	r3, [r5, #12]
 8019504:	065b      	lsls	r3, r3, #25
 8019506:	f53f af1f 	bmi.w	8019348 <_vfiprintf_r+0x44>
 801950a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801950c:	e71e      	b.n	801934c <_vfiprintf_r+0x48>
 801950e:	ab03      	add	r3, sp, #12
 8019510:	9300      	str	r3, [sp, #0]
 8019512:	462a      	mov	r2, r5
 8019514:	4630      	mov	r0, r6
 8019516:	4b06      	ldr	r3, [pc, #24]	@ (8019530 <_vfiprintf_r+0x22c>)
 8019518:	a904      	add	r1, sp, #16
 801951a:	f7fc fdc5 	bl	80160a8 <_printf_i>
 801951e:	e7e4      	b.n	80194ea <_vfiprintf_r+0x1e6>
 8019520:	0801af2a 	.word	0x0801af2a
 8019524:	0801af30 	.word	0x0801af30
 8019528:	0801af34 	.word	0x0801af34
 801952c:	08015b6d 	.word	0x08015b6d
 8019530:	080192df 	.word	0x080192df

08019534 <_scanf_chars>:
 8019534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019538:	4615      	mov	r5, r2
 801953a:	688a      	ldr	r2, [r1, #8]
 801953c:	4680      	mov	r8, r0
 801953e:	460c      	mov	r4, r1
 8019540:	b932      	cbnz	r2, 8019550 <_scanf_chars+0x1c>
 8019542:	698a      	ldr	r2, [r1, #24]
 8019544:	2a00      	cmp	r2, #0
 8019546:	bf14      	ite	ne
 8019548:	f04f 32ff 	movne.w	r2, #4294967295
 801954c:	2201      	moveq	r2, #1
 801954e:	608a      	str	r2, [r1, #8]
 8019550:	2700      	movs	r7, #0
 8019552:	6822      	ldr	r2, [r4, #0]
 8019554:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80195e4 <_scanf_chars+0xb0>
 8019558:	06d1      	lsls	r1, r2, #27
 801955a:	bf5f      	itttt	pl
 801955c:	681a      	ldrpl	r2, [r3, #0]
 801955e:	1d11      	addpl	r1, r2, #4
 8019560:	6019      	strpl	r1, [r3, #0]
 8019562:	6816      	ldrpl	r6, [r2, #0]
 8019564:	69a0      	ldr	r0, [r4, #24]
 8019566:	b188      	cbz	r0, 801958c <_scanf_chars+0x58>
 8019568:	2801      	cmp	r0, #1
 801956a:	d107      	bne.n	801957c <_scanf_chars+0x48>
 801956c:	682b      	ldr	r3, [r5, #0]
 801956e:	781a      	ldrb	r2, [r3, #0]
 8019570:	6963      	ldr	r3, [r4, #20]
 8019572:	5c9b      	ldrb	r3, [r3, r2]
 8019574:	b953      	cbnz	r3, 801958c <_scanf_chars+0x58>
 8019576:	2f00      	cmp	r7, #0
 8019578:	d031      	beq.n	80195de <_scanf_chars+0xaa>
 801957a:	e022      	b.n	80195c2 <_scanf_chars+0x8e>
 801957c:	2802      	cmp	r0, #2
 801957e:	d120      	bne.n	80195c2 <_scanf_chars+0x8e>
 8019580:	682b      	ldr	r3, [r5, #0]
 8019582:	781b      	ldrb	r3, [r3, #0]
 8019584:	f819 3003 	ldrb.w	r3, [r9, r3]
 8019588:	071b      	lsls	r3, r3, #28
 801958a:	d41a      	bmi.n	80195c2 <_scanf_chars+0x8e>
 801958c:	6823      	ldr	r3, [r4, #0]
 801958e:	3701      	adds	r7, #1
 8019590:	06da      	lsls	r2, r3, #27
 8019592:	bf5e      	ittt	pl
 8019594:	682b      	ldrpl	r3, [r5, #0]
 8019596:	781b      	ldrbpl	r3, [r3, #0]
 8019598:	f806 3b01 	strbpl.w	r3, [r6], #1
 801959c:	682a      	ldr	r2, [r5, #0]
 801959e:	686b      	ldr	r3, [r5, #4]
 80195a0:	3201      	adds	r2, #1
 80195a2:	602a      	str	r2, [r5, #0]
 80195a4:	68a2      	ldr	r2, [r4, #8]
 80195a6:	3b01      	subs	r3, #1
 80195a8:	3a01      	subs	r2, #1
 80195aa:	606b      	str	r3, [r5, #4]
 80195ac:	60a2      	str	r2, [r4, #8]
 80195ae:	b142      	cbz	r2, 80195c2 <_scanf_chars+0x8e>
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	dcd7      	bgt.n	8019564 <_scanf_chars+0x30>
 80195b4:	4629      	mov	r1, r5
 80195b6:	4640      	mov	r0, r8
 80195b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80195bc:	4798      	blx	r3
 80195be:	2800      	cmp	r0, #0
 80195c0:	d0d0      	beq.n	8019564 <_scanf_chars+0x30>
 80195c2:	6823      	ldr	r3, [r4, #0]
 80195c4:	f013 0310 	ands.w	r3, r3, #16
 80195c8:	d105      	bne.n	80195d6 <_scanf_chars+0xa2>
 80195ca:	68e2      	ldr	r2, [r4, #12]
 80195cc:	3201      	adds	r2, #1
 80195ce:	60e2      	str	r2, [r4, #12]
 80195d0:	69a2      	ldr	r2, [r4, #24]
 80195d2:	b102      	cbz	r2, 80195d6 <_scanf_chars+0xa2>
 80195d4:	7033      	strb	r3, [r6, #0]
 80195d6:	2000      	movs	r0, #0
 80195d8:	6923      	ldr	r3, [r4, #16]
 80195da:	443b      	add	r3, r7
 80195dc:	6123      	str	r3, [r4, #16]
 80195de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195e2:	bf00      	nop
 80195e4:	0801afa9 	.word	0x0801afa9

080195e8 <_scanf_i>:
 80195e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195ec:	460c      	mov	r4, r1
 80195ee:	4698      	mov	r8, r3
 80195f0:	4b72      	ldr	r3, [pc, #456]	@ (80197bc <_scanf_i+0x1d4>)
 80195f2:	b087      	sub	sp, #28
 80195f4:	4682      	mov	sl, r0
 80195f6:	4616      	mov	r6, r2
 80195f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80195fc:	ab03      	add	r3, sp, #12
 80195fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019602:	4b6f      	ldr	r3, [pc, #444]	@ (80197c0 <_scanf_i+0x1d8>)
 8019604:	69a1      	ldr	r1, [r4, #24]
 8019606:	4a6f      	ldr	r2, [pc, #444]	@ (80197c4 <_scanf_i+0x1dc>)
 8019608:	4627      	mov	r7, r4
 801960a:	2903      	cmp	r1, #3
 801960c:	bf08      	it	eq
 801960e:	461a      	moveq	r2, r3
 8019610:	68a3      	ldr	r3, [r4, #8]
 8019612:	9201      	str	r2, [sp, #4]
 8019614:	1e5a      	subs	r2, r3, #1
 8019616:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801961a:	bf81      	itttt	hi
 801961c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8019620:	eb03 0905 	addhi.w	r9, r3, r5
 8019624:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019628:	60a3      	strhi	r3, [r4, #8]
 801962a:	f857 3b1c 	ldr.w	r3, [r7], #28
 801962e:	bf98      	it	ls
 8019630:	f04f 0900 	movls.w	r9, #0
 8019634:	463d      	mov	r5, r7
 8019636:	f04f 0b00 	mov.w	fp, #0
 801963a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801963e:	6023      	str	r3, [r4, #0]
 8019640:	6831      	ldr	r1, [r6, #0]
 8019642:	ab03      	add	r3, sp, #12
 8019644:	2202      	movs	r2, #2
 8019646:	7809      	ldrb	r1, [r1, #0]
 8019648:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801964c:	f7fd fc41 	bl	8016ed2 <memchr>
 8019650:	b328      	cbz	r0, 801969e <_scanf_i+0xb6>
 8019652:	f1bb 0f01 	cmp.w	fp, #1
 8019656:	d159      	bne.n	801970c <_scanf_i+0x124>
 8019658:	6862      	ldr	r2, [r4, #4]
 801965a:	b92a      	cbnz	r2, 8019668 <_scanf_i+0x80>
 801965c:	2108      	movs	r1, #8
 801965e:	6822      	ldr	r2, [r4, #0]
 8019660:	6061      	str	r1, [r4, #4]
 8019662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8019666:	6022      	str	r2, [r4, #0]
 8019668:	6822      	ldr	r2, [r4, #0]
 801966a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801966e:	6022      	str	r2, [r4, #0]
 8019670:	68a2      	ldr	r2, [r4, #8]
 8019672:	1e51      	subs	r1, r2, #1
 8019674:	60a1      	str	r1, [r4, #8]
 8019676:	b192      	cbz	r2, 801969e <_scanf_i+0xb6>
 8019678:	6832      	ldr	r2, [r6, #0]
 801967a:	1c51      	adds	r1, r2, #1
 801967c:	6031      	str	r1, [r6, #0]
 801967e:	7812      	ldrb	r2, [r2, #0]
 8019680:	f805 2b01 	strb.w	r2, [r5], #1
 8019684:	6872      	ldr	r2, [r6, #4]
 8019686:	3a01      	subs	r2, #1
 8019688:	2a00      	cmp	r2, #0
 801968a:	6072      	str	r2, [r6, #4]
 801968c:	dc07      	bgt.n	801969e <_scanf_i+0xb6>
 801968e:	4631      	mov	r1, r6
 8019690:	4650      	mov	r0, sl
 8019692:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8019696:	4790      	blx	r2
 8019698:	2800      	cmp	r0, #0
 801969a:	f040 8085 	bne.w	80197a8 <_scanf_i+0x1c0>
 801969e:	f10b 0b01 	add.w	fp, fp, #1
 80196a2:	f1bb 0f03 	cmp.w	fp, #3
 80196a6:	d1cb      	bne.n	8019640 <_scanf_i+0x58>
 80196a8:	6863      	ldr	r3, [r4, #4]
 80196aa:	b90b      	cbnz	r3, 80196b0 <_scanf_i+0xc8>
 80196ac:	230a      	movs	r3, #10
 80196ae:	6063      	str	r3, [r4, #4]
 80196b0:	6863      	ldr	r3, [r4, #4]
 80196b2:	4945      	ldr	r1, [pc, #276]	@ (80197c8 <_scanf_i+0x1e0>)
 80196b4:	6960      	ldr	r0, [r4, #20]
 80196b6:	1ac9      	subs	r1, r1, r3
 80196b8:	f000 f991 	bl	80199de <__sccl>
 80196bc:	f04f 0b00 	mov.w	fp, #0
 80196c0:	68a3      	ldr	r3, [r4, #8]
 80196c2:	6822      	ldr	r2, [r4, #0]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d03d      	beq.n	8019744 <_scanf_i+0x15c>
 80196c8:	6831      	ldr	r1, [r6, #0]
 80196ca:	6960      	ldr	r0, [r4, #20]
 80196cc:	f891 c000 	ldrb.w	ip, [r1]
 80196d0:	f810 000c 	ldrb.w	r0, [r0, ip]
 80196d4:	2800      	cmp	r0, #0
 80196d6:	d035      	beq.n	8019744 <_scanf_i+0x15c>
 80196d8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80196dc:	d124      	bne.n	8019728 <_scanf_i+0x140>
 80196de:	0510      	lsls	r0, r2, #20
 80196e0:	d522      	bpl.n	8019728 <_scanf_i+0x140>
 80196e2:	f10b 0b01 	add.w	fp, fp, #1
 80196e6:	f1b9 0f00 	cmp.w	r9, #0
 80196ea:	d003      	beq.n	80196f4 <_scanf_i+0x10c>
 80196ec:	3301      	adds	r3, #1
 80196ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80196f2:	60a3      	str	r3, [r4, #8]
 80196f4:	6873      	ldr	r3, [r6, #4]
 80196f6:	3b01      	subs	r3, #1
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	6073      	str	r3, [r6, #4]
 80196fc:	dd1b      	ble.n	8019736 <_scanf_i+0x14e>
 80196fe:	6833      	ldr	r3, [r6, #0]
 8019700:	3301      	adds	r3, #1
 8019702:	6033      	str	r3, [r6, #0]
 8019704:	68a3      	ldr	r3, [r4, #8]
 8019706:	3b01      	subs	r3, #1
 8019708:	60a3      	str	r3, [r4, #8]
 801970a:	e7d9      	b.n	80196c0 <_scanf_i+0xd8>
 801970c:	f1bb 0f02 	cmp.w	fp, #2
 8019710:	d1ae      	bne.n	8019670 <_scanf_i+0x88>
 8019712:	6822      	ldr	r2, [r4, #0]
 8019714:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8019718:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801971c:	d1c4      	bne.n	80196a8 <_scanf_i+0xc0>
 801971e:	2110      	movs	r1, #16
 8019720:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8019724:	6061      	str	r1, [r4, #4]
 8019726:	e7a2      	b.n	801966e <_scanf_i+0x86>
 8019728:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801972c:	6022      	str	r2, [r4, #0]
 801972e:	780b      	ldrb	r3, [r1, #0]
 8019730:	f805 3b01 	strb.w	r3, [r5], #1
 8019734:	e7de      	b.n	80196f4 <_scanf_i+0x10c>
 8019736:	4631      	mov	r1, r6
 8019738:	4650      	mov	r0, sl
 801973a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801973e:	4798      	blx	r3
 8019740:	2800      	cmp	r0, #0
 8019742:	d0df      	beq.n	8019704 <_scanf_i+0x11c>
 8019744:	6823      	ldr	r3, [r4, #0]
 8019746:	05d9      	lsls	r1, r3, #23
 8019748:	d50d      	bpl.n	8019766 <_scanf_i+0x17e>
 801974a:	42bd      	cmp	r5, r7
 801974c:	d909      	bls.n	8019762 <_scanf_i+0x17a>
 801974e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019752:	4632      	mov	r2, r6
 8019754:	4650      	mov	r0, sl
 8019756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801975a:	f105 39ff 	add.w	r9, r5, #4294967295
 801975e:	4798      	blx	r3
 8019760:	464d      	mov	r5, r9
 8019762:	42bd      	cmp	r5, r7
 8019764:	d028      	beq.n	80197b8 <_scanf_i+0x1d0>
 8019766:	6822      	ldr	r2, [r4, #0]
 8019768:	f012 0210 	ands.w	r2, r2, #16
 801976c:	d113      	bne.n	8019796 <_scanf_i+0x1ae>
 801976e:	702a      	strb	r2, [r5, #0]
 8019770:	4639      	mov	r1, r7
 8019772:	6863      	ldr	r3, [r4, #4]
 8019774:	4650      	mov	r0, sl
 8019776:	9e01      	ldr	r6, [sp, #4]
 8019778:	47b0      	blx	r6
 801977a:	f8d8 3000 	ldr.w	r3, [r8]
 801977e:	6821      	ldr	r1, [r4, #0]
 8019780:	1d1a      	adds	r2, r3, #4
 8019782:	f8c8 2000 	str.w	r2, [r8]
 8019786:	f011 0f20 	tst.w	r1, #32
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	d00f      	beq.n	80197ae <_scanf_i+0x1c6>
 801978e:	6018      	str	r0, [r3, #0]
 8019790:	68e3      	ldr	r3, [r4, #12]
 8019792:	3301      	adds	r3, #1
 8019794:	60e3      	str	r3, [r4, #12]
 8019796:	2000      	movs	r0, #0
 8019798:	6923      	ldr	r3, [r4, #16]
 801979a:	1bed      	subs	r5, r5, r7
 801979c:	445d      	add	r5, fp
 801979e:	442b      	add	r3, r5
 80197a0:	6123      	str	r3, [r4, #16]
 80197a2:	b007      	add	sp, #28
 80197a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197a8:	f04f 0b00 	mov.w	fp, #0
 80197ac:	e7ca      	b.n	8019744 <_scanf_i+0x15c>
 80197ae:	07ca      	lsls	r2, r1, #31
 80197b0:	bf4c      	ite	mi
 80197b2:	8018      	strhmi	r0, [r3, #0]
 80197b4:	6018      	strpl	r0, [r3, #0]
 80197b6:	e7eb      	b.n	8019790 <_scanf_i+0x1a8>
 80197b8:	2001      	movs	r0, #1
 80197ba:	e7f2      	b.n	80197a2 <_scanf_i+0x1ba>
 80197bc:	0801a5b0 	.word	0x0801a5b0
 80197c0:	08015a19 	.word	0x08015a19
 80197c4:	08019d21 	.word	0x08019d21
 80197c8:	0801af4b 	.word	0x0801af4b

080197cc <__sflush_r>:
 80197cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80197d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197d2:	0716      	lsls	r6, r2, #28
 80197d4:	4605      	mov	r5, r0
 80197d6:	460c      	mov	r4, r1
 80197d8:	d454      	bmi.n	8019884 <__sflush_r+0xb8>
 80197da:	684b      	ldr	r3, [r1, #4]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	dc02      	bgt.n	80197e6 <__sflush_r+0x1a>
 80197e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	dd48      	ble.n	8019878 <__sflush_r+0xac>
 80197e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80197e8:	2e00      	cmp	r6, #0
 80197ea:	d045      	beq.n	8019878 <__sflush_r+0xac>
 80197ec:	2300      	movs	r3, #0
 80197ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80197f2:	682f      	ldr	r7, [r5, #0]
 80197f4:	6a21      	ldr	r1, [r4, #32]
 80197f6:	602b      	str	r3, [r5, #0]
 80197f8:	d030      	beq.n	801985c <__sflush_r+0x90>
 80197fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80197fc:	89a3      	ldrh	r3, [r4, #12]
 80197fe:	0759      	lsls	r1, r3, #29
 8019800:	d505      	bpl.n	801980e <__sflush_r+0x42>
 8019802:	6863      	ldr	r3, [r4, #4]
 8019804:	1ad2      	subs	r2, r2, r3
 8019806:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019808:	b10b      	cbz	r3, 801980e <__sflush_r+0x42>
 801980a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801980c:	1ad2      	subs	r2, r2, r3
 801980e:	2300      	movs	r3, #0
 8019810:	4628      	mov	r0, r5
 8019812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019814:	6a21      	ldr	r1, [r4, #32]
 8019816:	47b0      	blx	r6
 8019818:	1c43      	adds	r3, r0, #1
 801981a:	89a3      	ldrh	r3, [r4, #12]
 801981c:	d106      	bne.n	801982c <__sflush_r+0x60>
 801981e:	6829      	ldr	r1, [r5, #0]
 8019820:	291d      	cmp	r1, #29
 8019822:	d82b      	bhi.n	801987c <__sflush_r+0xb0>
 8019824:	4a28      	ldr	r2, [pc, #160]	@ (80198c8 <__sflush_r+0xfc>)
 8019826:	40ca      	lsrs	r2, r1
 8019828:	07d6      	lsls	r6, r2, #31
 801982a:	d527      	bpl.n	801987c <__sflush_r+0xb0>
 801982c:	2200      	movs	r2, #0
 801982e:	6062      	str	r2, [r4, #4]
 8019830:	6922      	ldr	r2, [r4, #16]
 8019832:	04d9      	lsls	r1, r3, #19
 8019834:	6022      	str	r2, [r4, #0]
 8019836:	d504      	bpl.n	8019842 <__sflush_r+0x76>
 8019838:	1c42      	adds	r2, r0, #1
 801983a:	d101      	bne.n	8019840 <__sflush_r+0x74>
 801983c:	682b      	ldr	r3, [r5, #0]
 801983e:	b903      	cbnz	r3, 8019842 <__sflush_r+0x76>
 8019840:	6560      	str	r0, [r4, #84]	@ 0x54
 8019842:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019844:	602f      	str	r7, [r5, #0]
 8019846:	b1b9      	cbz	r1, 8019878 <__sflush_r+0xac>
 8019848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801984c:	4299      	cmp	r1, r3
 801984e:	d002      	beq.n	8019856 <__sflush_r+0x8a>
 8019850:	4628      	mov	r0, r5
 8019852:	f7fe f9c9 	bl	8017be8 <_free_r>
 8019856:	2300      	movs	r3, #0
 8019858:	6363      	str	r3, [r4, #52]	@ 0x34
 801985a:	e00d      	b.n	8019878 <__sflush_r+0xac>
 801985c:	2301      	movs	r3, #1
 801985e:	4628      	mov	r0, r5
 8019860:	47b0      	blx	r6
 8019862:	4602      	mov	r2, r0
 8019864:	1c50      	adds	r0, r2, #1
 8019866:	d1c9      	bne.n	80197fc <__sflush_r+0x30>
 8019868:	682b      	ldr	r3, [r5, #0]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d0c6      	beq.n	80197fc <__sflush_r+0x30>
 801986e:	2b1d      	cmp	r3, #29
 8019870:	d001      	beq.n	8019876 <__sflush_r+0xaa>
 8019872:	2b16      	cmp	r3, #22
 8019874:	d11d      	bne.n	80198b2 <__sflush_r+0xe6>
 8019876:	602f      	str	r7, [r5, #0]
 8019878:	2000      	movs	r0, #0
 801987a:	e021      	b.n	80198c0 <__sflush_r+0xf4>
 801987c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019880:	b21b      	sxth	r3, r3
 8019882:	e01a      	b.n	80198ba <__sflush_r+0xee>
 8019884:	690f      	ldr	r7, [r1, #16]
 8019886:	2f00      	cmp	r7, #0
 8019888:	d0f6      	beq.n	8019878 <__sflush_r+0xac>
 801988a:	0793      	lsls	r3, r2, #30
 801988c:	bf18      	it	ne
 801988e:	2300      	movne	r3, #0
 8019890:	680e      	ldr	r6, [r1, #0]
 8019892:	bf08      	it	eq
 8019894:	694b      	ldreq	r3, [r1, #20]
 8019896:	1bf6      	subs	r6, r6, r7
 8019898:	600f      	str	r7, [r1, #0]
 801989a:	608b      	str	r3, [r1, #8]
 801989c:	2e00      	cmp	r6, #0
 801989e:	ddeb      	ble.n	8019878 <__sflush_r+0xac>
 80198a0:	4633      	mov	r3, r6
 80198a2:	463a      	mov	r2, r7
 80198a4:	4628      	mov	r0, r5
 80198a6:	6a21      	ldr	r1, [r4, #32]
 80198a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80198ac:	47e0      	blx	ip
 80198ae:	2800      	cmp	r0, #0
 80198b0:	dc07      	bgt.n	80198c2 <__sflush_r+0xf6>
 80198b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80198ba:	f04f 30ff 	mov.w	r0, #4294967295
 80198be:	81a3      	strh	r3, [r4, #12]
 80198c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198c2:	4407      	add	r7, r0
 80198c4:	1a36      	subs	r6, r6, r0
 80198c6:	e7e9      	b.n	801989c <__sflush_r+0xd0>
 80198c8:	20400001 	.word	0x20400001

080198cc <_fflush_r>:
 80198cc:	b538      	push	{r3, r4, r5, lr}
 80198ce:	690b      	ldr	r3, [r1, #16]
 80198d0:	4605      	mov	r5, r0
 80198d2:	460c      	mov	r4, r1
 80198d4:	b913      	cbnz	r3, 80198dc <_fflush_r+0x10>
 80198d6:	2500      	movs	r5, #0
 80198d8:	4628      	mov	r0, r5
 80198da:	bd38      	pop	{r3, r4, r5, pc}
 80198dc:	b118      	cbz	r0, 80198e6 <_fflush_r+0x1a>
 80198de:	6a03      	ldr	r3, [r0, #32]
 80198e0:	b90b      	cbnz	r3, 80198e6 <_fflush_r+0x1a>
 80198e2:	f7fc ff95 	bl	8016810 <__sinit>
 80198e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d0f3      	beq.n	80198d6 <_fflush_r+0xa>
 80198ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80198f0:	07d0      	lsls	r0, r2, #31
 80198f2:	d404      	bmi.n	80198fe <_fflush_r+0x32>
 80198f4:	0599      	lsls	r1, r3, #22
 80198f6:	d402      	bmi.n	80198fe <_fflush_r+0x32>
 80198f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80198fa:	f7fd fae0 	bl	8016ebe <__retarget_lock_acquire_recursive>
 80198fe:	4628      	mov	r0, r5
 8019900:	4621      	mov	r1, r4
 8019902:	f7ff ff63 	bl	80197cc <__sflush_r>
 8019906:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019908:	4605      	mov	r5, r0
 801990a:	07da      	lsls	r2, r3, #31
 801990c:	d4e4      	bmi.n	80198d8 <_fflush_r+0xc>
 801990e:	89a3      	ldrh	r3, [r4, #12]
 8019910:	059b      	lsls	r3, r3, #22
 8019912:	d4e1      	bmi.n	80198d8 <_fflush_r+0xc>
 8019914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019916:	f7fd fad3 	bl	8016ec0 <__retarget_lock_release_recursive>
 801991a:	e7dd      	b.n	80198d8 <_fflush_r+0xc>

0801991c <__swhatbuf_r>:
 801991c:	b570      	push	{r4, r5, r6, lr}
 801991e:	460c      	mov	r4, r1
 8019920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019924:	4615      	mov	r5, r2
 8019926:	2900      	cmp	r1, #0
 8019928:	461e      	mov	r6, r3
 801992a:	b096      	sub	sp, #88	@ 0x58
 801992c:	da0c      	bge.n	8019948 <__swhatbuf_r+0x2c>
 801992e:	89a3      	ldrh	r3, [r4, #12]
 8019930:	2100      	movs	r1, #0
 8019932:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019936:	bf14      	ite	ne
 8019938:	2340      	movne	r3, #64	@ 0x40
 801993a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801993e:	2000      	movs	r0, #0
 8019940:	6031      	str	r1, [r6, #0]
 8019942:	602b      	str	r3, [r5, #0]
 8019944:	b016      	add	sp, #88	@ 0x58
 8019946:	bd70      	pop	{r4, r5, r6, pc}
 8019948:	466a      	mov	r2, sp
 801994a:	f000 f903 	bl	8019b54 <_fstat_r>
 801994e:	2800      	cmp	r0, #0
 8019950:	dbed      	blt.n	801992e <__swhatbuf_r+0x12>
 8019952:	9901      	ldr	r1, [sp, #4]
 8019954:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019958:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801995c:	4259      	negs	r1, r3
 801995e:	4159      	adcs	r1, r3
 8019960:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019964:	e7eb      	b.n	801993e <__swhatbuf_r+0x22>

08019966 <__smakebuf_r>:
 8019966:	898b      	ldrh	r3, [r1, #12]
 8019968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801996a:	079d      	lsls	r5, r3, #30
 801996c:	4606      	mov	r6, r0
 801996e:	460c      	mov	r4, r1
 8019970:	d507      	bpl.n	8019982 <__smakebuf_r+0x1c>
 8019972:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019976:	6023      	str	r3, [r4, #0]
 8019978:	6123      	str	r3, [r4, #16]
 801997a:	2301      	movs	r3, #1
 801997c:	6163      	str	r3, [r4, #20]
 801997e:	b003      	add	sp, #12
 8019980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019982:	466a      	mov	r2, sp
 8019984:	ab01      	add	r3, sp, #4
 8019986:	f7ff ffc9 	bl	801991c <__swhatbuf_r>
 801998a:	9f00      	ldr	r7, [sp, #0]
 801998c:	4605      	mov	r5, r0
 801998e:	4639      	mov	r1, r7
 8019990:	4630      	mov	r0, r6
 8019992:	f7fb f92f 	bl	8014bf4 <_malloc_r>
 8019996:	b948      	cbnz	r0, 80199ac <__smakebuf_r+0x46>
 8019998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801999c:	059a      	lsls	r2, r3, #22
 801999e:	d4ee      	bmi.n	801997e <__smakebuf_r+0x18>
 80199a0:	f023 0303 	bic.w	r3, r3, #3
 80199a4:	f043 0302 	orr.w	r3, r3, #2
 80199a8:	81a3      	strh	r3, [r4, #12]
 80199aa:	e7e2      	b.n	8019972 <__smakebuf_r+0xc>
 80199ac:	89a3      	ldrh	r3, [r4, #12]
 80199ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80199b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80199b6:	81a3      	strh	r3, [r4, #12]
 80199b8:	9b01      	ldr	r3, [sp, #4]
 80199ba:	6020      	str	r0, [r4, #0]
 80199bc:	b15b      	cbz	r3, 80199d6 <__smakebuf_r+0x70>
 80199be:	4630      	mov	r0, r6
 80199c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199c4:	f000 f8d8 	bl	8019b78 <_isatty_r>
 80199c8:	b128      	cbz	r0, 80199d6 <__smakebuf_r+0x70>
 80199ca:	89a3      	ldrh	r3, [r4, #12]
 80199cc:	f023 0303 	bic.w	r3, r3, #3
 80199d0:	f043 0301 	orr.w	r3, r3, #1
 80199d4:	81a3      	strh	r3, [r4, #12]
 80199d6:	89a3      	ldrh	r3, [r4, #12]
 80199d8:	431d      	orrs	r5, r3
 80199da:	81a5      	strh	r5, [r4, #12]
 80199dc:	e7cf      	b.n	801997e <__smakebuf_r+0x18>

080199de <__sccl>:
 80199de:	b570      	push	{r4, r5, r6, lr}
 80199e0:	780b      	ldrb	r3, [r1, #0]
 80199e2:	4604      	mov	r4, r0
 80199e4:	2b5e      	cmp	r3, #94	@ 0x5e
 80199e6:	bf0b      	itete	eq
 80199e8:	784b      	ldrbeq	r3, [r1, #1]
 80199ea:	1c4a      	addne	r2, r1, #1
 80199ec:	1c8a      	addeq	r2, r1, #2
 80199ee:	2100      	movne	r1, #0
 80199f0:	bf08      	it	eq
 80199f2:	2101      	moveq	r1, #1
 80199f4:	3801      	subs	r0, #1
 80199f6:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80199fa:	f800 1f01 	strb.w	r1, [r0, #1]!
 80199fe:	42a8      	cmp	r0, r5
 8019a00:	d1fb      	bne.n	80199fa <__sccl+0x1c>
 8019a02:	b90b      	cbnz	r3, 8019a08 <__sccl+0x2a>
 8019a04:	1e50      	subs	r0, r2, #1
 8019a06:	bd70      	pop	{r4, r5, r6, pc}
 8019a08:	f081 0101 	eor.w	r1, r1, #1
 8019a0c:	4610      	mov	r0, r2
 8019a0e:	54e1      	strb	r1, [r4, r3]
 8019a10:	4602      	mov	r2, r0
 8019a12:	f812 5b01 	ldrb.w	r5, [r2], #1
 8019a16:	2d2d      	cmp	r5, #45	@ 0x2d
 8019a18:	d005      	beq.n	8019a26 <__sccl+0x48>
 8019a1a:	2d5d      	cmp	r5, #93	@ 0x5d
 8019a1c:	d016      	beq.n	8019a4c <__sccl+0x6e>
 8019a1e:	2d00      	cmp	r5, #0
 8019a20:	d0f1      	beq.n	8019a06 <__sccl+0x28>
 8019a22:	462b      	mov	r3, r5
 8019a24:	e7f2      	b.n	8019a0c <__sccl+0x2e>
 8019a26:	7846      	ldrb	r6, [r0, #1]
 8019a28:	2e5d      	cmp	r6, #93	@ 0x5d
 8019a2a:	d0fa      	beq.n	8019a22 <__sccl+0x44>
 8019a2c:	42b3      	cmp	r3, r6
 8019a2e:	dcf8      	bgt.n	8019a22 <__sccl+0x44>
 8019a30:	461a      	mov	r2, r3
 8019a32:	3002      	adds	r0, #2
 8019a34:	3201      	adds	r2, #1
 8019a36:	4296      	cmp	r6, r2
 8019a38:	54a1      	strb	r1, [r4, r2]
 8019a3a:	dcfb      	bgt.n	8019a34 <__sccl+0x56>
 8019a3c:	1af2      	subs	r2, r6, r3
 8019a3e:	3a01      	subs	r2, #1
 8019a40:	42b3      	cmp	r3, r6
 8019a42:	bfa8      	it	ge
 8019a44:	2200      	movge	r2, #0
 8019a46:	1c5d      	adds	r5, r3, #1
 8019a48:	18ab      	adds	r3, r5, r2
 8019a4a:	e7e1      	b.n	8019a10 <__sccl+0x32>
 8019a4c:	4610      	mov	r0, r2
 8019a4e:	e7da      	b.n	8019a06 <__sccl+0x28>

08019a50 <__submore>:
 8019a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a54:	460c      	mov	r4, r1
 8019a56:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8019a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019a5c:	4299      	cmp	r1, r3
 8019a5e:	d11b      	bne.n	8019a98 <__submore+0x48>
 8019a60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8019a64:	f7fb f8c6 	bl	8014bf4 <_malloc_r>
 8019a68:	b918      	cbnz	r0, 8019a72 <__submore+0x22>
 8019a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8019a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019a76:	63a3      	str	r3, [r4, #56]	@ 0x38
 8019a78:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8019a7c:	6360      	str	r0, [r4, #52]	@ 0x34
 8019a7e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8019a82:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8019a86:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8019a8a:	7043      	strb	r3, [r0, #1]
 8019a8c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019a90:	7003      	strb	r3, [r0, #0]
 8019a92:	6020      	str	r0, [r4, #0]
 8019a94:	2000      	movs	r0, #0
 8019a96:	e7ea      	b.n	8019a6e <__submore+0x1e>
 8019a98:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8019a9a:	0077      	lsls	r7, r6, #1
 8019a9c:	463a      	mov	r2, r7
 8019a9e:	f000 f8a3 	bl	8019be8 <_realloc_r>
 8019aa2:	4605      	mov	r5, r0
 8019aa4:	2800      	cmp	r0, #0
 8019aa6:	d0e0      	beq.n	8019a6a <__submore+0x1a>
 8019aa8:	eb00 0806 	add.w	r8, r0, r6
 8019aac:	4601      	mov	r1, r0
 8019aae:	4632      	mov	r2, r6
 8019ab0:	4640      	mov	r0, r8
 8019ab2:	f7fd fa1c 	bl	8016eee <memcpy>
 8019ab6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8019aba:	f8c4 8000 	str.w	r8, [r4]
 8019abe:	e7e9      	b.n	8019a94 <__submore+0x44>

08019ac0 <memmove>:
 8019ac0:	4288      	cmp	r0, r1
 8019ac2:	b510      	push	{r4, lr}
 8019ac4:	eb01 0402 	add.w	r4, r1, r2
 8019ac8:	d902      	bls.n	8019ad0 <memmove+0x10>
 8019aca:	4284      	cmp	r4, r0
 8019acc:	4623      	mov	r3, r4
 8019ace:	d807      	bhi.n	8019ae0 <memmove+0x20>
 8019ad0:	1e43      	subs	r3, r0, #1
 8019ad2:	42a1      	cmp	r1, r4
 8019ad4:	d008      	beq.n	8019ae8 <memmove+0x28>
 8019ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019ade:	e7f8      	b.n	8019ad2 <memmove+0x12>
 8019ae0:	4601      	mov	r1, r0
 8019ae2:	4402      	add	r2, r0
 8019ae4:	428a      	cmp	r2, r1
 8019ae6:	d100      	bne.n	8019aea <memmove+0x2a>
 8019ae8:	bd10      	pop	{r4, pc}
 8019aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019af2:	e7f7      	b.n	8019ae4 <memmove+0x24>

08019af4 <_raise_r>:
 8019af4:	291f      	cmp	r1, #31
 8019af6:	b538      	push	{r3, r4, r5, lr}
 8019af8:	4605      	mov	r5, r0
 8019afa:	460c      	mov	r4, r1
 8019afc:	d904      	bls.n	8019b08 <_raise_r+0x14>
 8019afe:	2316      	movs	r3, #22
 8019b00:	6003      	str	r3, [r0, #0]
 8019b02:	f04f 30ff 	mov.w	r0, #4294967295
 8019b06:	bd38      	pop	{r3, r4, r5, pc}
 8019b08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019b0a:	b112      	cbz	r2, 8019b12 <_raise_r+0x1e>
 8019b0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019b10:	b94b      	cbnz	r3, 8019b26 <_raise_r+0x32>
 8019b12:	4628      	mov	r0, r5
 8019b14:	f000 f852 	bl	8019bbc <_getpid_r>
 8019b18:	4622      	mov	r2, r4
 8019b1a:	4601      	mov	r1, r0
 8019b1c:	4628      	mov	r0, r5
 8019b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b22:	f000 b839 	b.w	8019b98 <_kill_r>
 8019b26:	2b01      	cmp	r3, #1
 8019b28:	d00a      	beq.n	8019b40 <_raise_r+0x4c>
 8019b2a:	1c59      	adds	r1, r3, #1
 8019b2c:	d103      	bne.n	8019b36 <_raise_r+0x42>
 8019b2e:	2316      	movs	r3, #22
 8019b30:	6003      	str	r3, [r0, #0]
 8019b32:	2001      	movs	r0, #1
 8019b34:	e7e7      	b.n	8019b06 <_raise_r+0x12>
 8019b36:	2100      	movs	r1, #0
 8019b38:	4620      	mov	r0, r4
 8019b3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019b3e:	4798      	blx	r3
 8019b40:	2000      	movs	r0, #0
 8019b42:	e7e0      	b.n	8019b06 <_raise_r+0x12>

08019b44 <raise>:
 8019b44:	4b02      	ldr	r3, [pc, #8]	@ (8019b50 <raise+0xc>)
 8019b46:	4601      	mov	r1, r0
 8019b48:	6818      	ldr	r0, [r3, #0]
 8019b4a:	f7ff bfd3 	b.w	8019af4 <_raise_r>
 8019b4e:	bf00      	nop
 8019b50:	200002a8 	.word	0x200002a8

08019b54 <_fstat_r>:
 8019b54:	b538      	push	{r3, r4, r5, lr}
 8019b56:	2300      	movs	r3, #0
 8019b58:	4d06      	ldr	r5, [pc, #24]	@ (8019b74 <_fstat_r+0x20>)
 8019b5a:	4604      	mov	r4, r0
 8019b5c:	4608      	mov	r0, r1
 8019b5e:	4611      	mov	r1, r2
 8019b60:	602b      	str	r3, [r5, #0]
 8019b62:	f7e8 fc83 	bl	800246c <_fstat>
 8019b66:	1c43      	adds	r3, r0, #1
 8019b68:	d102      	bne.n	8019b70 <_fstat_r+0x1c>
 8019b6a:	682b      	ldr	r3, [r5, #0]
 8019b6c:	b103      	cbz	r3, 8019b70 <_fstat_r+0x1c>
 8019b6e:	6023      	str	r3, [r4, #0]
 8019b70:	bd38      	pop	{r3, r4, r5, pc}
 8019b72:	bf00      	nop
 8019b74:	20003d4c 	.word	0x20003d4c

08019b78 <_isatty_r>:
 8019b78:	b538      	push	{r3, r4, r5, lr}
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	4d05      	ldr	r5, [pc, #20]	@ (8019b94 <_isatty_r+0x1c>)
 8019b7e:	4604      	mov	r4, r0
 8019b80:	4608      	mov	r0, r1
 8019b82:	602b      	str	r3, [r5, #0]
 8019b84:	f7e8 fc81 	bl	800248a <_isatty>
 8019b88:	1c43      	adds	r3, r0, #1
 8019b8a:	d102      	bne.n	8019b92 <_isatty_r+0x1a>
 8019b8c:	682b      	ldr	r3, [r5, #0]
 8019b8e:	b103      	cbz	r3, 8019b92 <_isatty_r+0x1a>
 8019b90:	6023      	str	r3, [r4, #0]
 8019b92:	bd38      	pop	{r3, r4, r5, pc}
 8019b94:	20003d4c 	.word	0x20003d4c

08019b98 <_kill_r>:
 8019b98:	b538      	push	{r3, r4, r5, lr}
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	4d06      	ldr	r5, [pc, #24]	@ (8019bb8 <_kill_r+0x20>)
 8019b9e:	4604      	mov	r4, r0
 8019ba0:	4608      	mov	r0, r1
 8019ba2:	4611      	mov	r1, r2
 8019ba4:	602b      	str	r3, [r5, #0]
 8019ba6:	f7e8 fc1e 	bl	80023e6 <_kill>
 8019baa:	1c43      	adds	r3, r0, #1
 8019bac:	d102      	bne.n	8019bb4 <_kill_r+0x1c>
 8019bae:	682b      	ldr	r3, [r5, #0]
 8019bb0:	b103      	cbz	r3, 8019bb4 <_kill_r+0x1c>
 8019bb2:	6023      	str	r3, [r4, #0]
 8019bb4:	bd38      	pop	{r3, r4, r5, pc}
 8019bb6:	bf00      	nop
 8019bb8:	20003d4c 	.word	0x20003d4c

08019bbc <_getpid_r>:
 8019bbc:	f7e8 bc0c 	b.w	80023d8 <_getpid>

08019bc0 <_calloc_r>:
 8019bc0:	b570      	push	{r4, r5, r6, lr}
 8019bc2:	fba1 5402 	umull	r5, r4, r1, r2
 8019bc6:	b934      	cbnz	r4, 8019bd6 <_calloc_r+0x16>
 8019bc8:	4629      	mov	r1, r5
 8019bca:	f7fb f813 	bl	8014bf4 <_malloc_r>
 8019bce:	4606      	mov	r6, r0
 8019bd0:	b928      	cbnz	r0, 8019bde <_calloc_r+0x1e>
 8019bd2:	4630      	mov	r0, r6
 8019bd4:	bd70      	pop	{r4, r5, r6, pc}
 8019bd6:	220c      	movs	r2, #12
 8019bd8:	2600      	movs	r6, #0
 8019bda:	6002      	str	r2, [r0, #0]
 8019bdc:	e7f9      	b.n	8019bd2 <_calloc_r+0x12>
 8019bde:	462a      	mov	r2, r5
 8019be0:	4621      	mov	r1, r4
 8019be2:	f7fd f83b 	bl	8016c5c <memset>
 8019be6:	e7f4      	b.n	8019bd2 <_calloc_r+0x12>

08019be8 <_realloc_r>:
 8019be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bec:	4607      	mov	r7, r0
 8019bee:	4614      	mov	r4, r2
 8019bf0:	460d      	mov	r5, r1
 8019bf2:	b921      	cbnz	r1, 8019bfe <_realloc_r+0x16>
 8019bf4:	4611      	mov	r1, r2
 8019bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019bfa:	f7fa bffb 	b.w	8014bf4 <_malloc_r>
 8019bfe:	b92a      	cbnz	r2, 8019c0c <_realloc_r+0x24>
 8019c00:	f7fd fff2 	bl	8017be8 <_free_r>
 8019c04:	4625      	mov	r5, r4
 8019c06:	4628      	mov	r0, r5
 8019c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c0c:	f000 f88a 	bl	8019d24 <_malloc_usable_size_r>
 8019c10:	4284      	cmp	r4, r0
 8019c12:	4606      	mov	r6, r0
 8019c14:	d802      	bhi.n	8019c1c <_realloc_r+0x34>
 8019c16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019c1a:	d8f4      	bhi.n	8019c06 <_realloc_r+0x1e>
 8019c1c:	4621      	mov	r1, r4
 8019c1e:	4638      	mov	r0, r7
 8019c20:	f7fa ffe8 	bl	8014bf4 <_malloc_r>
 8019c24:	4680      	mov	r8, r0
 8019c26:	b908      	cbnz	r0, 8019c2c <_realloc_r+0x44>
 8019c28:	4645      	mov	r5, r8
 8019c2a:	e7ec      	b.n	8019c06 <_realloc_r+0x1e>
 8019c2c:	42b4      	cmp	r4, r6
 8019c2e:	4622      	mov	r2, r4
 8019c30:	4629      	mov	r1, r5
 8019c32:	bf28      	it	cs
 8019c34:	4632      	movcs	r2, r6
 8019c36:	f7fd f95a 	bl	8016eee <memcpy>
 8019c3a:	4629      	mov	r1, r5
 8019c3c:	4638      	mov	r0, r7
 8019c3e:	f7fd ffd3 	bl	8017be8 <_free_r>
 8019c42:	e7f1      	b.n	8019c28 <_realloc_r+0x40>

08019c44 <_strtoul_l.isra.0>:
 8019c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019c48:	4686      	mov	lr, r0
 8019c4a:	460d      	mov	r5, r1
 8019c4c:	4e33      	ldr	r6, [pc, #204]	@ (8019d1c <_strtoul_l.isra.0+0xd8>)
 8019c4e:	4628      	mov	r0, r5
 8019c50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c54:	5d37      	ldrb	r7, [r6, r4]
 8019c56:	f017 0708 	ands.w	r7, r7, #8
 8019c5a:	d1f8      	bne.n	8019c4e <_strtoul_l.isra.0+0xa>
 8019c5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8019c5e:	d110      	bne.n	8019c82 <_strtoul_l.isra.0+0x3e>
 8019c60:	2701      	movs	r7, #1
 8019c62:	782c      	ldrb	r4, [r5, #0]
 8019c64:	1c85      	adds	r5, r0, #2
 8019c66:	f033 0010 	bics.w	r0, r3, #16
 8019c6a:	d115      	bne.n	8019c98 <_strtoul_l.isra.0+0x54>
 8019c6c:	2c30      	cmp	r4, #48	@ 0x30
 8019c6e:	d10d      	bne.n	8019c8c <_strtoul_l.isra.0+0x48>
 8019c70:	7828      	ldrb	r0, [r5, #0]
 8019c72:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019c76:	2858      	cmp	r0, #88	@ 0x58
 8019c78:	d108      	bne.n	8019c8c <_strtoul_l.isra.0+0x48>
 8019c7a:	786c      	ldrb	r4, [r5, #1]
 8019c7c:	3502      	adds	r5, #2
 8019c7e:	2310      	movs	r3, #16
 8019c80:	e00a      	b.n	8019c98 <_strtoul_l.isra.0+0x54>
 8019c82:	2c2b      	cmp	r4, #43	@ 0x2b
 8019c84:	bf04      	itt	eq
 8019c86:	782c      	ldrbeq	r4, [r5, #0]
 8019c88:	1c85      	addeq	r5, r0, #2
 8019c8a:	e7ec      	b.n	8019c66 <_strtoul_l.isra.0+0x22>
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d1f6      	bne.n	8019c7e <_strtoul_l.isra.0+0x3a>
 8019c90:	2c30      	cmp	r4, #48	@ 0x30
 8019c92:	bf14      	ite	ne
 8019c94:	230a      	movne	r3, #10
 8019c96:	2308      	moveq	r3, #8
 8019c98:	f04f 38ff 	mov.w	r8, #4294967295
 8019c9c:	fbb8 f8f3 	udiv	r8, r8, r3
 8019ca0:	2600      	movs	r6, #0
 8019ca2:	fb03 f908 	mul.w	r9, r3, r8
 8019ca6:	4630      	mov	r0, r6
 8019ca8:	ea6f 0909 	mvn.w	r9, r9
 8019cac:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019cb0:	f1bc 0f09 	cmp.w	ip, #9
 8019cb4:	d810      	bhi.n	8019cd8 <_strtoul_l.isra.0+0x94>
 8019cb6:	4664      	mov	r4, ip
 8019cb8:	42a3      	cmp	r3, r4
 8019cba:	dd1e      	ble.n	8019cfa <_strtoul_l.isra.0+0xb6>
 8019cbc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8019cc0:	d007      	beq.n	8019cd2 <_strtoul_l.isra.0+0x8e>
 8019cc2:	4580      	cmp	r8, r0
 8019cc4:	d316      	bcc.n	8019cf4 <_strtoul_l.isra.0+0xb0>
 8019cc6:	d101      	bne.n	8019ccc <_strtoul_l.isra.0+0x88>
 8019cc8:	45a1      	cmp	r9, r4
 8019cca:	db13      	blt.n	8019cf4 <_strtoul_l.isra.0+0xb0>
 8019ccc:	2601      	movs	r6, #1
 8019cce:	fb00 4003 	mla	r0, r0, r3, r4
 8019cd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019cd6:	e7e9      	b.n	8019cac <_strtoul_l.isra.0+0x68>
 8019cd8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019cdc:	f1bc 0f19 	cmp.w	ip, #25
 8019ce0:	d801      	bhi.n	8019ce6 <_strtoul_l.isra.0+0xa2>
 8019ce2:	3c37      	subs	r4, #55	@ 0x37
 8019ce4:	e7e8      	b.n	8019cb8 <_strtoul_l.isra.0+0x74>
 8019ce6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019cea:	f1bc 0f19 	cmp.w	ip, #25
 8019cee:	d804      	bhi.n	8019cfa <_strtoul_l.isra.0+0xb6>
 8019cf0:	3c57      	subs	r4, #87	@ 0x57
 8019cf2:	e7e1      	b.n	8019cb8 <_strtoul_l.isra.0+0x74>
 8019cf4:	f04f 36ff 	mov.w	r6, #4294967295
 8019cf8:	e7eb      	b.n	8019cd2 <_strtoul_l.isra.0+0x8e>
 8019cfa:	1c73      	adds	r3, r6, #1
 8019cfc:	d106      	bne.n	8019d0c <_strtoul_l.isra.0+0xc8>
 8019cfe:	2322      	movs	r3, #34	@ 0x22
 8019d00:	4630      	mov	r0, r6
 8019d02:	f8ce 3000 	str.w	r3, [lr]
 8019d06:	b932      	cbnz	r2, 8019d16 <_strtoul_l.isra.0+0xd2>
 8019d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d0c:	b107      	cbz	r7, 8019d10 <_strtoul_l.isra.0+0xcc>
 8019d0e:	4240      	negs	r0, r0
 8019d10:	2a00      	cmp	r2, #0
 8019d12:	d0f9      	beq.n	8019d08 <_strtoul_l.isra.0+0xc4>
 8019d14:	b106      	cbz	r6, 8019d18 <_strtoul_l.isra.0+0xd4>
 8019d16:	1e69      	subs	r1, r5, #1
 8019d18:	6011      	str	r1, [r2, #0]
 8019d1a:	e7f5      	b.n	8019d08 <_strtoul_l.isra.0+0xc4>
 8019d1c:	0801afa9 	.word	0x0801afa9

08019d20 <_strtoul_r>:
 8019d20:	f7ff bf90 	b.w	8019c44 <_strtoul_l.isra.0>

08019d24 <_malloc_usable_size_r>:
 8019d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d28:	1f18      	subs	r0, r3, #4
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	bfbc      	itt	lt
 8019d2e:	580b      	ldrlt	r3, [r1, r0]
 8019d30:	18c0      	addlt	r0, r0, r3
 8019d32:	4770      	bx	lr

08019d34 <_init>:
 8019d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d36:	bf00      	nop
 8019d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d3a:	bc08      	pop	{r3}
 8019d3c:	469e      	mov	lr, r3
 8019d3e:	4770      	bx	lr

08019d40 <_fini>:
 8019d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d42:	bf00      	nop
 8019d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d46:	bc08      	pop	{r3}
 8019d48:	469e      	mov	lr, r3
 8019d4a:	4770      	bx	lr
